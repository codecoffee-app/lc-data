{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703449,
            "title": "Charul and vessels",
            "titleSlug": "charul-and-vessels0209",
            "content": "<p><span >Charul has been assigned a challenge by Ishaan. He needs to fill a container with exactly <strong>k</strong> liters of water using some vessels, each with a different capacity. The capacities of the vessels are given in an array <strong>arr[]</strong>. The goal is to fill the container without any overflow, and no vessel can be filled partially.</span></p>\n<p><span >Determine if Charul can fill the container up to exactly <strong>k</strong> liters using the given vessels. You can assume there is an unlimited supply of water, but each vessel's capacity must be used fully.</span></p>\n<h3><span >Examples:</span></h3>\n<pre><span ><strong>Input:</strong> arr[] = [6, 3, 4, 2, 1], k = 20</span><br /><span ><strong>Output:</strong> true</span><br /><span ><strong>Explanation: </strong></span><span >Use the 6-liter vessel 3 times to get 18 liters. </span><span >Use the 2-liter vessel once to get a total of 20 liters.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [2, 4, 3], k = 15</span><br /><span ><strong>Output:</strong> true</span><br /><span ><strong>Explanation: </strong></span><span >The container can be filled exactly up to 15 liters using a combination of the given vessels.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> </span><span >O(n*k)<br /></span><span ><strong>Expected Auxiliary Space:</strong> </span><span >O(k)</span></p>\n<p><span ><strong>Constraints:</strong><br /></span><span >1 &le; arr.size() &le; 1000<br /></span><span >1 &le; k &le; 1000<br /></span><span >1 &le; arr[i] &le; 10^5</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of vessel capacities and a target volume `k`, determine if it's possible to fill a container with exactly `k` liters of water using the vessels in `arr`. You can use each vessel multiple times, and each vessel must be filled completely each time it is used.  There is an unlimited supply of water.",
                "constraints": [
                    "1 <= arr.size() <= 1000",
                    "1 <= k <= 1000",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [6, 3, 4, 2, 1], k = 20",
                        "output": "true",
                        "explanation": "We can use the 6-liter vessel three times (18 liters) and the 2-liter vessel once to reach exactly 20 liters."
                    },
                    {
                        "input": "arr[] = [2, 4, 3], k = 15",
                        "output": "true",
                        "explanation": "It is possible to achieve a sum of 15 using the given vessel sizes. For example, using the 3-liter vessel five times."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Start by initializing a state where 0 liters is possible. This means that <strong>dp[0]</strong> is <strong>true</strong> since you don't need any vessels to achieve 0 liters. Next, for each vessel capacity, update the possible liters you can achieve by adding the vessel's capacity to the current possible states. In other words, if you know certain liters are achievable, you can add the current vessel's capacity to those liters to achieve new ones. Continue this process until you've considered all vessels, and finally, check if <strong>dp[k]</strong> is true, which indicates whether you can exactly fill the container with <strong>k</strong> liters.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool canFillContainer(vector<int>& arr, int k) {\n        vector<bool> dp(k + 1, false);\n        dp[k] = true;\n\n        for (int cap : arr) {\n            for (int i = k; i >= cap; i--) {\n                dp[i - cap] = dp[i] || dp[i - cap];\n            }\n        }\n\n        return dp[0];\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean canFillContainer(int[] arr, int k) {\n        boolean[] dp = new boolean[k + 1];\n        dp[k] = true;\n\n        for (int cap : arr) {\n            for (int i = k; i >= cap; i--) {\n                dp[i - cap] = dp[i] || dp[i - cap];\n            }\n        }\n\n        return dp[0];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def canFillContainer(self, arr, k):\n        dp = [False] * (k + 1)\n        dp[k] = True\n\n        for cap in arr:\n            for i in range(k, cap - 1, -1):\n                dp[i - cap] = dp[i] or dp[i - cap]\n\n        return dp[0]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    canFillContainer(arr, k) {\n        let dp = new Array(k + 1).fill(false);\n        dp[k] = true;\n\n        for (let cap of arr) {\n            for (let i = k; i >= cap; i--) {\n                dp[i - cap] = dp[i] || dp[i - cap];\n            }\n        }\n\n        return dp[0];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}