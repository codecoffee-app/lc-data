{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711970,
            "title": "Cheapest Flights Within K Stops",
            "titleSlug": "cheapest-flights-within-k-stops",
            "content": "<p><span style=\"font-size: 18px;\">There are&nbsp;<code>n</code>&nbsp;cities and m edges connected by some number of flights. You are given an array&nbsp;<code>flights</code>&nbsp;where&nbsp;<code>flights[i] = [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>]</code>&nbsp;indicates that there is a flight from the city&nbsp;<code>from<sub>i</sub></code>&nbsp;to city&nbsp;<code>to<sub>i</sub></code>&nbsp;with cost&nbsp;<code>price<sub>i</sub></code>.</span></p>\n<p><span style=\"font-size: 18px;\">You are also given three integers&nbsp;<code>src</code>,&nbsp;<code>dst</code>, and&nbsp;<code>k</code>, return&nbsp;<em><strong>the cheapest price</strong>&nbsp;from&nbsp;</em><code>src</code><em>&nbsp;to&nbsp;</em><code>dst</code><em>&nbsp;with at most&nbsp;</em><code>k</code><em>&nbsp;stops.&nbsp;</em>If there is no such route, return<em>&nbsp;</em><code>-1</code>.</span></p>\n<p><span ><strong>Note</strong>: The price from city A to B may be different From the price from city B to A. </span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Example 1:</strong>\n<strong>Input:</strong>\nn = 4\nflights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]]\nsrc = 0\ndst = 3\nk = 1\n<strong>Output:</strong>\n700\nExplanation:\n</span><span style=\"font-size: 18px;\">The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraint:</strong><br /><code>1 &lt;= n &lt;= 100<br />\n0 &lt;= flights.length &lt;= (n * (n - 1) / 2)<br />\nflights[i].length == 3<br />\n0 &lt;= from<sub>i</sub>, to<sub>i</sub>&nbsp;&lt; n<br />\nfrom<sub>i</sub>&nbsp;!= to<sub>i</sub><br />\n1 &lt;= price<sub>i</sub>&nbsp;&lt;= 10<sup>4</sup></code><br />There will not be any multiple flights between the two cities.<br /><code>0 &lt;= src, dst, k &lt; n<br />\nsrc != dst</code></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given `n` cities connected by `m` flights. You are given an array `flights` where `flights[i] = [from_i, to_i, price_i]` indicates a flight from city `from_i` to city `to_i` with cost `price_i`. Find the cheapest price from source city `src` to destination city `dst` with at most `k` stops. If no such route exists, return -1.",
                "constraints": [
                    "1 <= n <= 100",
                    "0 <= flights.length <= (n * (n - 1) / 2)",
                    "flights[i].length == 3",
                    "0 <= from_i, to_i < n",
                    "from_i != to_i",
                    "1 <= price_i <= 10^4",
                    "There will not be any multiple flights between the two cities.",
                    "0 <= src, dst, k < n",
                    "src != dst"
                ],
                "testcases": [
                    {
                        "input": "n = 4\nflights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]]\nsrc = 0\ndst = 3\nk = 1",
                        "output": "700",
                        "explanation": "The cheapest path from city 0 to 3 with at most 1 stop is 0 -> 1 -> 3, with a total cost of 100 + 600 = 700. The path 0 -> 1 -> 2 -> 3 is cheaper, but it uses 2 stops, exceeding the allowed limit."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<ol style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; list-style-position: initial; list-style-image: initial; margin: 0px; padding: 0px 0px 1rem; color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">\n<li style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; margin-bottom: 0px; margin-top: 0px; padding-left: 0.375em; list-style-position: inside;\"><span style=\"font-size: 14pt;\">Utilize dynamic programming, initializing data structures to track costs.</span></li>\n<li style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; margin-bottom: 0px; margin-top: 0px; padding-left: 0.375em; list-style-position: inside;\"><span style=\"font-size: 14pt;\">Iterate through flights for a specified number of stops, updating costs accordingly.</span></li>\n<li style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; margin-bottom: 0px; margin-top: 0px; padding-left: 0.375em; list-style-position: inside;\"><span style=\"font-size: 14pt;\">Handle cases where the destination is unreachable and return the appropriate result.</span></li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Queue",
                "slug": "queue"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int k) {\r\n\r\n        const int maxCost = 1000000;\r\n        vector<int> cost(n, maxCost), curr(n, maxCost);\r\n        cost[src] = 0, curr[src] = 0;\r\n        for(int i = 0; i <= k; i++){\r\n            for(auto &flt: flights){\r\n                curr[flt[1]] = min(curr[flt[1]], cost[flt[0]] + flt[2]);\r\n            }\r\n            swap(cost, curr);\r\n        }\r\n        if(cost[dst] == maxCost) return -1;\r\n        return cost[dst];\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    \n    public int CheapestFLight(int n,int flights[][],int src,int dst,int k) {\n        // Create an array to store the shortest path from source to each node\n        int path[]=new int[n];\n        // Initialize all elements in the path array to a large value\n        Arrays.fill(path,Integer.MAX_VALUE);\n        // Set the shortest path from source to source as 0\n        path[src]=0;\n        \n        // Iterate k+1 times to find the shortest path\n        for(int i=0;i<=k;i++){\n            // Create a temporary array to store the updated shortest path at each iteration\n            int temp[]=Arrays.copyOf(path,n);\n            \n            // Iterate through each flight in the flights array\n            for(int arr[]:flights){\n                // Get the source node, destination node, and weight of the flight\n                int u=arr[0];\n                int v=arr[1];\n                int wt=arr[2];\n                // If the shortest path to the source node is still the initial value, continue to the next flight\n                if(path[u]==Integer.MAX_VALUE) continue;\n                // Update the shortest path to the destination node if a shorter path is found\n                temp[v]=Math.min(temp[v],path[u]+wt);\n            }\n            // Update the path array with the updated shortest path for the next iteration\n            path=temp;\n        }\n        \n        // If the shortest path to the destination node is still the initial value, return -1\n        // Otherwise, return the shortest path to the destination node\n        return path[dst]==Integer.MAX_VALUE ? -1:path[dst];\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "\r\nfrom typing import List\r\n\r\nclass Solution:\r\n    def CheapestFLight(self,n,flights,src,dst,k):\r\n        maxCost=1000000\r\n        cost=[maxCost]*n\r\n        curr=[maxCost]*n\r\n        cost[src]=0\r\n        curr[src]=0\r\n        for i in range(k+1):\r\n            for flt in flights:\r\n                curr[flt[1]]=min(curr[flt[1]],cost[flt[0]]+flt[2])\r\n            temp=cost[:]\r\n            cost=curr[:]\r\n            curr=temp[:]\r\n        if cost[dst]==maxCost:\r\n            return -1\r\n        return cost[dst]\r\n\r\n\r\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}