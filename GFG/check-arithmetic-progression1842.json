{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702887,
            "title": "Check Arithmetic Progression",
            "titleSlug": "check-arithmetic-progression1842",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of integers. Write a program to check whether an arithmetic progression can be formed using all the given elements.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 12, 4, 8]\n<strong>Output:</strong> true\n<strong>Explanation</strong>: Rearrange given array as [0, 4, 8, 12] which forms an arithmetic progression.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [12, 40, 11, 20]\n<strong>Output:</strong> false<br /><strong>Explanation: </strong>there is no rearrangment which can forms an arithmetic progression.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup>0 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, determine if it's possible to rearrange the elements to form an arithmetic progression.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[0, 12, 4, 8]",
                        "output": "true",
                        "explanation": "The array can be rearranged to [0, 4, 8, 12], forming an arithmetic progression with a common difference of 4."
                    },
                    {
                        "input": "[12, 40, 11, 20]",
                        "output": "false",
                        "explanation": "No rearrangement of the array elements can form an arithmetic progression."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >AP is formed by adding a fixed difference to the first element, after finding the first element and the difference check if all other arr. size()-1 contains all the next required AP elements.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if the given array forms an arithmetic progression\n    bool checkIsAP(vector<int> &arr) {\n        int n = arr.size();\n\n        // Step 1: Check if all elements are the same\n        // If all elements in the array are equal, they naturally form an arithmetic\n        // progression\n        int ele = arr[0];\n        for (int i = 0; i < n; i++) {\n            if (arr[i] != ele) // If any element is different, break the loop\n                break;\n            if (i == n - 1) // If loop reaches the end, all elements are the same\n                return true;\n        }\n\n        // Step 2: Find the minimum element in the array\n        int mn = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            mn = min(mn, arr[i]);\n        }\n\n        unordered_map<int, int> mp;\n\n        // Step 3: Normalize the array by subtracting the minimum element\n        // and count the occurrences of each normalized element\n        for (int i = 0; i < n; i++) {\n            arr[i] -= mn;\n            mp[arr[i]]++;\n        }\n\n        // Step 4: Find the minimum non-zero element in the normalized array\n        int mN = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] != 0)\n                mN = min(mN, arr[i]);\n        }\n\n        // Step 5: Check if elements can form an arithmetic progression\n        // The arithmetic progression should have a common difference `mN`\n        for (int i = 1; i < n; i++) {\n            if (mp.find(i * mN) == mp.end()) // If any expected element is missing\n                return false;\n        }\n\n        // If all required elements are present, return true\n        return true;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to check if the given array forms an arithmetic progression\n    public boolean checkIsAP(int[] arr) {\n        int n = arr.length;\n\n        // Check if all elements in the array are the same\n        int ele = arr[0];\n        boolean allSame = true;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] != ele) {\n                allSame = false;\n                break;\n            }\n        }\n        if (allSame) return true;\n\n        // Find the minimum element in the array\n        int mn = Integer.MAX_VALUE;\n        for (int num : arr) {\n            mn = Math.min(mn, num);\n        }\n\n        // Create a HashMap to store the count of each element after subtracting the\n        // minimum\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            arr[i] -= mn;\n            countMap.put(arr[i], countMap.getOrDefault(arr[i], 0) + 1);\n        }\n\n        // Find the minimum non-zero element in the array\n        int mN = Integer.MAX_VALUE;\n        for (int num : arr) {\n            if (num != 0) {\n                mN = Math.min(mN, num);\n            }\n        }\n\n        // Check if the array forms an arithmetic progression\n        for (int i = 1; i < n; i++) {\n            if (!countMap.containsKey(i * mN)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to check if the given array forms an arithmetic progression\n    def checkIsAP(self, arr):\n        n = len(arr)\n\n        # Step 1: Check if all elements are the same\n        # If all elements in the array are equal, they naturally form an arithmetic progression\n        ele = arr[0]\n        for i in range(n):\n            if arr[i] != ele:\n                break  # If any element is different, break the loop\n            if i == n - 1:  # If loop reaches the end and all elements are the same\n                return True  # All elements are the same, so return True\n\n        # Step 2: Find the minimum element in the array\n        mn = min(arr)\n\n        # Step 3: Normalize the array by subtracting the minimum element\n        arr = [x - mn\n               for x in arr]  # Subtract the minimum value from all elements\n\n        # Step 4: Count the occurrences of each normalized element using a dictionary\n        count_map = {}\n        for num in arr:\n            count_map[num] = count_map.get(\n                num, 0) + 1  # Count occurrences of each normalized value\n\n        # Step 5: Find the minimum non-zero element in the normalized array\n        mN = float('inf')\n        for num in arr:\n            if num != 0:\n                mN = min(mN, num)  # Identify the smallest non-zero element\n\n        # Step 6: Check if the elements can form an arithmetic progression\n        # The arithmetic progression should have a common difference `mN`\n        for i in range(1, n):\n            if (\n                    i * mN\n            ) not in count_map:  # If any expected element is missing, return False\n                return False\n\n        return True  # If all required elements are present, return True\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to check if the given array forms an arithmetic progression\n    checkIsAP(arr) {\n        const n = arr.length;\n\n        // Step 1: Check if all elements are the same\n        // If all elements in the array are equal, they naturally form an arithmetic\n        // progression\n        const ele = arr[0];\n        for (let i = 0; i < n; i++) {\n            if (arr[i] !== ele) // If any element is different, break the loop\n                break;\n            if (i === n - 1) // If loop reaches the end, all elements are the same\n                return true;\n        }\n\n        // Step 2: Find the minimum element in the array\n        let mn = Number.MAX_VALUE;\n        for (let i = 0; i < n; i++) {\n            mn = Math.min(mn, arr[i]);\n        }\n\n        const mp = new Map();\n\n        // Step 3: Normalize the array by subtracting the minimum element\n        // and count the occurrences of each normalized element\n        for (let i = 0; i < n; i++) {\n            arr[i] -= mn;\n            mp.set(arr[i], (mp.get(arr[i]) || 0) + 1);\n        }\n\n        // Step 4: Find the minimum non-zero element in the normalized array\n        let mN = Number.MAX_VALUE;\n        for (let i = 0; i < n; i++) {\n            if (arr[i] !== 0) mN = Math.min(mN, arr[i]);\n        }\n\n        // Step 5: Check if elements can form an arithmetic progression\n        // The arithmetic progression should have a common difference `mN`\n        for (let i = 1; i < n; i++) {\n            if (!mp.has(i * mN)) // If any expected element is missing\n                return false;\n        }\n\n        // If all required elements are present, return true\n        return true;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}