{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702933,
            "title": "Check Binary String",
            "titleSlug": "check-binary-string0402",
            "content": "<p><span style=\"font-size:18px\">Given a binary string&nbsp;<strong>S</strong> of 0 and 1,&nbsp;check if&nbsp;the given string is valid or not. The given string is valid when there is no zero is present in between 1s.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nS = &quot;100&quot;\r\n<strong>Output:</strong> VALID\r\n<strong>Explanation</strong>: <strong>1</strong>00. The string have just a\r\nsingle 1, hence it is valid.\r\n</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: \r\nS = &quot;1110001&quot;\r\n<strong>Output:</strong> INVALID\r\n<strong>Explanation</strong>: <strong>111</strong>000<strong>1</strong>. There are 3 zeros\r\nbetween the 3rd and the 4th ones. Hence,\r\nit&#39;s an invalid string.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything, Your task is to complete the function&nbsp;<strong>checkBinary()&nbsp;</strong>which takes a binary string as input are <strong>returns</strong> true if the string is valid. Else, it <strong>returns</strong> false.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=length(S)&lt;=10<sup>5&nbsp;</sup></span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>1. Traverse all the initial 0s (if any).&nbsp;<br />\n2. Traverse all the preceding 1s (if any).<br />\n3. Now, after the series of 1s, traverse the string till the end. If there&#39;s even a single 1, return false else return true.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Binary Representation",
                "slug": "binary-representation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\nclass Solution{\r\n    public:\r\n    \r\n    bool checkBinary (string s)\r\n    {\r\n    \tint n = s.length ();\r\n    \tint i = 0;\r\n    \r\n        // traversing initial zeros\r\n    \twhile (i < n and s[i] == '0') i++;\r\n    \t\r\n    \t// traversing the series of ones\r\n    \twhile (i < n and s[i] == '1') i++;\r\n        \r\n        // after the first series of 1s, if there's a 0\r\n        // then, the string isn't valid\r\n        // else it is valid\r\n    \twhile (i < n)\r\n    \t{\r\n    \t\tif (s[i] == '1') return 0;\r\n    \t\ti++;\r\n    \t}\r\n    \treturn 1;\r\n    }\r\n    // Contributed By: Pranay Bansal\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Sol\r\n{\r\n    Boolean checkBinary (String s)\r\n    {\r\n    \tint n = s.length ();\r\n    \tint i = 0;\r\n    \r\n        // traversing initial zeros\r\n    \twhile (i < n && s.charAt (i) == '0') i++;\r\n    \t\r\n    \t// traversing the series of ones\r\n    \twhile (i < n && s.charAt (i) == '1') i++;\r\n        \r\n        // after the first series of 1s, if there's a 0\r\n        // then, the string isn't valid\r\n        // else it is valid\r\n    \twhile (i < n)\r\n    \t{\r\n    \t\tif (s.charAt (i) == '1') return false;\r\n    \t\ti++;\r\n    \t}\r\n    \treturn true;\r\n    }\r\n}\r\n// Contributed By: Pranay Bansal\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def checkBinary (self, s):\n        n = len (s) # get length of input string\n        i = 0\n        \n        # skip leading zeroes\n        while i < n and s[i] == '0':\n            i += 1\n        \n        # check for consecutive ones\n        while i < n and s[i] == '1':\n            i += 1\n        \n        # check if any other characters present other than zero\n        while i < n:\n            if s[i] == '1':\n                return False\n            i += 1\n        \n        return True\n    # Contributed By: Pranay Bansal",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {boolean}\n*/\n\nclass Solution {\n    //Function to check whether a given string is a binary string or not.\n    checkBinary(s) {\n        let n = s.length; // get length of input string\n        let i = 0;\n        \n        // skip leading zeroes\n        while (i < n && s[i] === '0'){\n            i += 1;\n        }\n        \n        // check for consecutive ones\n        while (i < n && s[i] === '1'){\n            i += 1;\n        }\n        \n        // check if any other characters present other than zero\n        while (i < n){\n            if (s[i] === '1'){\n                return false;\n            }\n            i += 1;\n        }\n        \n        return true;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Function to check if a given string represents a binary number.\n    public bool checkBinary(string s)\n    {\n        int n = s.Length;\n        int i = 0;\n\n        // traversing initial zeros\n        while (i < n && s[i] == '0') i++;\n\n        // traversing the series of ones\n        while (i < n && s[i] == '1') i++;\n\n        // after the first series of 1s, if there's a 0\n        // then, the string isn't valid\n        // else it is valid\n        while (i < n)\n        {\n            if (s[i] == '1') return false;\n            i++;\n        }\n        return true;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}