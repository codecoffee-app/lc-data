{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700166,
            "title": "Balanced Tree Check",
            "titleSlug": "check-for-balanced-tree",
            "content": "<p><span >Given a <strong>binary tree</strong>, determine if it is <strong>height-balanced</strong>. A binary tree is considered height-balanced if the absolute difference in heights of the left and right subtrees is at most 1 for every node in the tree.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Input: </strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">root[] = [10, 20, 30, 40, 60]</span><br /><br /><span >&nbsp;&nbsp; <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700166/Web/Other/blobid1_1739353289.png\" alt=\"\" width=\"300\" height=\"260\" />\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The height difference between the left and right subtrees at all nodes is at most <code>1</code>. Hence, the tree is balanced.</span></pre>\n<pre><span ><strong>Input: </strong>root[] = [1, 2, 3, 4, N, N, N, 5]\n   <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700166/Web/Other/blobid2_1739353291.png\" alt=\"\" width=\"301\" height=\"269\" />\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The height difference between the left and right subtrees at node <code>2</code> is <code>2</code>, which exceeds <code>1</code>. Hence, the tree is not balanced.</span></pre>\n<pre><span ><strong>Input: </strong>root[] = [1, 2, N, N, 3]\n&nbsp;&nbsp; <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700166/Web/Other/blobid0_1739353287.png\" alt=\"\" width=\"298\" height=\"327\" />\n<strong>Output: </strong>false\n<strong>Explanation:</strong> The height difference between the left and right subtrees at node <code>1</code> is <code>2</code>, which exceeds <code>1</code>. Hence, the tree is not balanced.</span></pre>\n<p><span ><strong>Constraints:</strong><br />0 &lt;= number of nodes &lt;= 5000<br />-<span style=\"font-size: 18.6667px;\">&nbsp;10</span><sup>4</sup> &lt;= node-&gt;data &lt;=&nbsp;</span><span style=\"font-size: 18.6667px;\">10</span><sup>4</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, determine if it is height-balanced. A binary tree is considered height-balanced if for every node, the absolute difference in heights of its left and right subtrees is at most 1.",
                "constraints": [
                    "0 <= number of nodes <= 5000",
                    "-10^4 <= node's value <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[10, 20, 30, 40, 60]",
                        "output": "true",
                        "explanation": "The height difference between the left and right subtrees at all nodes is at most 1. Hence, the tree is balanced."
                    },
                    {
                        "input": "[1, 2, 3, 4, null, null, null, 5]",
                        "output": "false",
                        "explanation": "The height difference between the left and right subtrees at node 2 is 2, which exceeds 1. Hence, the tree is not balanced."
                    },
                    {
                        "input": "[1, 2, null, null, 3]",
                        "output": "false",
                        "explanation": "The height difference between the left and right subtrees at node 1 is 2, which exceeds 1. Hence, the tree is not balanced."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Recursively check balance for each node, ensuring the height difference between left and right subtrees is at most 1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "walmart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function that returns the height of the tree if the tree is balanced\n    // Otherwise it returns -1.\n    int isBalancedRec(Node* root) {\n\n        // Base case: Height of empty tree is zero\n        if (root == NULL)\n            return 0;\n\n        // Find Heights of left and right sub trees\n        int lHeight = isBalancedRec(root->left);\n        int rHeight = isBalancedRec(root->right);\n\n        // If either the subtrees are unbalanced or the absolute difference\n        // of their heights is greater than 1, return -1\n        if (lHeight == -1 || rHeight == -1 || abs(lHeight - rHeight) > 1)\n            return -1;\n\n        // Return the height of the tree\n        return max(lHeight, rHeight) + 1;\n    }\n\n    // Function to check if tree is height balanced\n    bool isBalanced(Node* root) { return (isBalancedRec(root) > 0); }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function that returns the height of the tree if the tree is balanced\n    // Otherwise it returns -1\n    static int isBalancedRec(Node root) {\n\n        // Base case: Height of empty tree is zero\n        if (root == null) return 0;\n\n        // Find Heights of left and right subtrees\n        int lHeight = isBalancedRec(root.left);\n        int rHeight = isBalancedRec(root.right);\n\n        // If either of the subtrees are unbalanced or the absolute difference\n        // of their heights is greater than 1, return -1\n        if (lHeight == -1 || rHeight == -1 || Math.abs(lHeight - rHeight) > 1)\n            return -1;\n\n        // Return the height of the tree\n        return Math.max(lHeight, rHeight) + 1;\n    }\n\n    // Function to check if the tree is height balanced\n    static boolean isBalanced(Node root) { return isBalancedRec(root) > 0; }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Solution class to check if a binary tree is balanced\nclass Solution:\n    # Function that returns the height of the tree if the tree is balanced\n    # Otherwise it returns -1\n    def isBalancedRec(self, root):\n\n        # Base case: Height of empty tree is zero\n        if root is None:\n            return 0\n\n        # Find Heights of left and right subtrees\n        lHeight = self.isBalancedRec(root.left)\n        rHeight = self.isBalancedRec(root.right)\n\n        # If either of the subtrees are unbalanced or the absolute difference\n        # of their heights is greater than 1, return -1\n        if lHeight == -1 or rHeight == -1 or abs(lHeight - rHeight) > 1:\n            return -1\n\n        # Return the height of the tree\n        return max(lHeight, rHeight) + 1\n\n    # Function to check if the tree is height balanced\n    def isBalanced(self, root):\n        return self.isBalancedRec(root) > 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function that returns the height of the tree if the tree is balanced\n    // Otherwise it returns -1\n    isBalancedRec(root) {\n        // Base case: Height of empty tree is zero\n        if (root === null) return 0;\n\n        // Find Heights of left and right subtrees\n        let lHeight = this.isBalancedRec(root.left);\n        let rHeight = this.isBalancedRec(root.right);\n\n        // If either of the subtrees are unbalanced or the absolute difference\n        // of their heights is greater than 1, return -1\n        if (lHeight === -1 || rHeight === -1 || Math.abs(lHeight - rHeight) > 1)\n            return -1;\n\n        // Return the height of the tree\n        return Math.max(lHeight, rHeight) + 1;\n    }\n\n    // Function to check if the tree is height balanced\n    isBalanced(root) { return this.isBalancedRec(root) > 0; }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}