{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700149,
            "title": "Check for BST",
            "titleSlug": "check-for-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given the root of a&nbsp;binary tree. Check whether it is a BST or not.<br /><strong>Note: </strong>We are considering that BSTs can not contain duplicate Nodes.</span><br /><span style=\"font-size: 18px;\">A&nbsp;<strong>BST</strong>&nbsp;is defined as follows:</span></p>\n<ul>\n<li>\n<div><span style=\"font-size: 18px;\">The left subtree of a node contains only nodes with keys <strong>less than</strong> the node's key.</span></div>\n</li>\n<li>\n<div><span style=\"font-size: 18px;\">The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</span></div>\n</li>\n<li>\n<div><span style=\"font-size: 18px;\">Both the left and right subtrees must also be binary search trees.</span></div>\n</li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [2, 1, 3, N, N, N, 5]\n<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700149/Web/Other/blobid0_1739182093.jpg\" width=\"249\" height=\"220\" /></span><br /><br /><span style=\"font-size: 18px;\"><strong>Output: </strong>true \n<strong>Explanation: </strong></span><span style=\"font-size: 18px;\">The left subtree of every node contains smaller keys and right subtree of every node contains greater keys. Hence, the tree is a BST.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [2, N, 7, N, 6, N, 9] </span><br /><br /><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700149/Web/Other/blobid2_1739182131.jpg\" width=\"238\" height=\"211\" /></span><br /><br /><span style=\"font-size: 18px;\"><strong>Output: </strong>false \n<strong>Explanation: </strong>Since the node to the right of node with key 7 has lesser key value, hence it is not a valid BST.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [10, 5, 20, N, N, 9, 25]\n<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700149/Web/Other/blobid3_1739182159.jpg\" width=\"240\" height=\"212\" /></span><br /><br /><span style=\"font-size: 18px;\"><strong>Output: </strong>false\n<strong>Explanation: </strong>The node with key 9 present in the right subtree has lesser key value than root node.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &le; number of nodes &le; 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &le; node-&gt;data &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary tree, determine if it is a valid Binary Search Tree (BST). A BST is defined as follows:\n\n*   The left subtree of a node contains only nodes with keys less than the node's key.\n*   The right subtree of a node contains only nodes with keys greater than the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\nNote: BSTs cannot contain duplicate node values.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root = [2, 1, 3, N, N, N, 5]",
                        "output": "true",
                        "explanation": "The tree satisfies the BST property. All nodes in the left subtree of 2 are less than 2, and all nodes in the right subtree are greater than 2. Similarly, the subtrees rooted at 1, 3, and 5 also adhere to the BST rules."
                    },
                    {
                        "input": "root = [2, N, 7, N, 6, N, 9]",
                        "output": "false",
                        "explanation": "The tree violates the BST property. The node with the value 6 is in the right subtree of 7, but 6 is less than 7."
                    },
                    {
                        "input": "root = [10, 5, 20, N, N, 9, 25]",
                        "output": "false",
                        "explanation": "The tree violates the BST property. The node with the value 9 is in the right subtree of 10, but 9 is less than 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each node, The idea is to check if the max value in the left subtree is smaller than the node and the min value in the right subtree is greater than the node.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "vmware",
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "samsung",
            "snapdeal",
            "factset",
            "hike",
            "makemytrip",
            "ola-cabs",
            "walmart",
            "goldman-sachs",
            "maq-software",
            "adobe",
            "linkedin",
            "qualcomm",
            "boomerang-commerce",
            "greyorange",
            "wooker"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check whether a Binary Tree is BST or not.\n    bool isBST(struct Node* node) { return (isBSTUtil(node, INT_MIN, INT_MAX)); }\n\n  public:\n    int isBSTUtil(struct Node* node, int min, int max) {\n        // an empty tree is BST so we return true.\n        if (node == NULL)\n            return 1;\n\n        // returning false if this node violates the min/max constraint.\n        if (node->data < min || node->data > max)\n            return 0;\n\n        // otherwise checking the subtrees recursively.\n        // tightening the min or max constraint.\n        return isBSTUtil(node->left, min, node->data - 1) &&\n               isBSTUtil(node->right, node->data + 1, max);\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    Node root;\n\n    // Function to check whether a Binary Tree is BST or not.\n    boolean isBST(Node root) {\n        return isBSTUtil(root, Integer.MIN_VALUE, Integer.MAX_VALUE);\n    }\n\n    boolean isBSTUtil(Node node, int min, int max) {\n        // an empty tree is BST so we return true.\n        if (node == null) return true;\n\n        // returning false if this node violates the min/max constraint.\n        if (node.data < min || node.data > max) return false;\n\n        // otherwise checking the subtrees recursively.\n        // tightening the min or max constraint.\n        return (isBSTUtil(node.left, min, node.data - 1) &&\n                isBSTUtil(node.right, node.data + 1, max));\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Using Python's infinity for min and max constraints\n    INT_MAX = float('inf')\n    INT_MIN = float('-inf')\n\n    def isBST(self, node):\n        return self.isBSTUtil(node, self.INT_MIN, self.INT_MAX)\n\n    def isBSTUtil(self, node, mini, maxi):\n        # If the node is None, it is a valid BST by definition\n        if node is None:\n            return True\n\n        # Node's value must lie within the range (mini, maxi)\n        if node.data <= mini or node.data >= maxi:\n            return False\n\n        # Recursively check the left and right subtrees, tightening the range\n        return (self.isBSTUtil(node.left, mini, node.data)\n                and self.isBSTUtil(node.right, node.data, maxi))\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n\n    isBST(node) {\n        return this.isBSTUtil(node, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\n    }\n\n    isBSTUtil(node, min, max) {\n        // an empty tree is BST so we return true.\n        if (node === null) {\n            return true;\n        }\n\n        // returning false if this node violates the min/max constraint.\n        if (node.data < min || node.data > max) {\n            return false;\n        }\n\n        // otherwise checking the subtrees recursively.\n        // tightening the min or max constraint.\n        return (this.isBSTUtil(node.left, min, node.data - 1) &&\n                this.isBSTUtil(node.right, node.data + 1, max));\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}