{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702951,
            "title": "Check for subsequence",
            "titleSlug": "check-for-subsequence4930",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings A and B, find if A is a subsequence of B.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nA = AXY \nB = YADXCP\n<strong>Output: </strong>0 \n<strong>Explanation:</strong> A is not a subsequence of B\nas 'Y' appears before 'A'.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nA = gksrek\nB = geeksforgeeks\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>A is a subsequence of B.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task: &nbsp;</strong><br />You dont need to read input or print anything. Complete the function <strong>isSubSequence()</strong> which takes A and B as input parameters and returns a boolean value denoting if A is a subsequence of B or not.&nbsp;</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(N) where N is length of string B.<br /><strong>Expected Auxiliary Space: </strong>O(1)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= |A|,|B| &lt;=10<sup>4</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Maintain 2 pointers, one in string A and the other in string B.&nbsp;Traverse both the string together. If character in A matches character in B, increment both pointer.&nbsp;Otherwise increment pointer in string B only.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho",
            "accolite",
            "amazon",
            "tesco"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    //Function to check if string A is a subsequence of string B.\n    bool isSubSequence(string A, string B) \n    { \n        int j = 0; \n        //iterating over each character of string B and comparing it with\n        //corresponding character of string A.\n        for (int i=0; i<B.size() && j<A.size(); i++) \n            if (A[j] == B[i]) \n                j++; \n        //returning true if j is equal to the size of string A.\n        return (j == A.size()); \n    } \n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\n//User function Template for Java\r\n\r\nclass Solution{\r\n    boolean isSubSequence(String A, String B){\r\n        int i=0,j=0;\r\n        while(i<A.length() && j<B.length()){\r\n            if(A.charAt(i) == B.charAt(j)){\r\n                i++;\r\n            }\r\n            j++;\r\n        }\r\n        return i == A.length();\r\n\r\n    }\r\n    }",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to check if A is a subsequence of B.\r\n    def isSubSequence(self, A, B):\r\n        i = j = 0\r\n    \r\n        #iterating over A and B to check if characters match.\r\n        while i < len(B) and j < len(A):\r\n            if A[j] == B[i]:\r\n                j += 1\r\n            i+=1\r\n    \r\n        #returning True if A is a subsequence of B, else False.\r\n        return j == len(A)",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public bool isSubSequence(string A, string B)\n    {\n        int j = 0;\n        //iterating over each character of string B and comparing it with\n        //corresponding character of string A.\n        for (int i=0; i<B.Length && j<A.Length; i++)\n        {\n            if (A[j] == B[i])\n            {\n                j++;\n            }\n        }\n        //returning true if j is equal to the size of string A.\n        return (j == A.Length);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {string} A\r\n * @param {string} B\r\n * @return {boolean}\r\n*/\r\n\r\nclass Solution {\r\n    isSubSequence(A,B){\r\n       let j = 0; \r\n        for (let i=0; i<B.length && j<A.length; i++) {\r\n            if (A[j] === B[i]) {\r\n                j++; \r\n            }\r\n        }\r\n        return (j === A.length); \r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}