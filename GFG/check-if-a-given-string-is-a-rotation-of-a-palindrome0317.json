{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702953,
            "title": "Check if a given string is a rotation of a palindrome",
            "titleSlug": "check-if-a-given-string-is-a-rotation-of-a-palindrome0317",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>s</strong>, check if it can be rotated to form a palindrome.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\ns = aaaab\n<strong>Output:</strong> 1 \n<strong>Explanation: </strong>&quot;aaaab&quot; can be rotated to\nform &quot;aabaa&quot; which is a palindrome.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>isRotatedPalindrome()</strong> which takes a string&nbsp;<strong>s&nbsp;</strong>as input parameter and <strong>returns</strong> 1 if rotated palindrome is possible, otherwise 0.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>) where N is length of s<br />\n<strong>Expected Auxiliary Space: </strong>O(N)</span></p>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Constraints:</span></strong><br />\n<span style=\"font-size:18px\">1 &lt;= s.length() &lt;= 10<sup>4</sup></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For every rotation check if it is a palindrome or not.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\tbool isPalindrome(string str)\n\t{\n\t    int l = 0;\n\t    int h = str.length() - 1;\n\t    \n\t    // Keep comparing characters while they are same\n\t    while (h > l)\n\t        if (str[l++] != str[h--])\n\t            return false;\n\t    \n\t    // If we reach here, then all characters were matching\n\t    return true;\n\t}\n\n\n\tint isRotatedPalindrome(string str)\n\t{\n\t    // If string iteself is palindrome\n\t    if (isPalindrome(str))\n\t        return 1;\n\t    \n\t    int n = str.length();\n\t    for (int i = 0; i < n-1; i++)\n\t    {\n\t        string str1 = str.substr(i+1, n-i-1);\n\t        string str2 = str.substr(0, i+1);\n\t        \n\t        if (isPalindrome(str1.append(str2)))\n\t            return 1;\n\t    }\n\t    return 0;\n\t}\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n\n\tdef isPalindrome(self, string):\n\t\t# Start from leftmost and rightmost corners of str\n\t\tl = 0\n\t\th = len(string) - 1\n\n\t\t# Keep comparing characters while they are same\n\t\twhile h > l:\n\t\t\tl += 1\n\t\t\th -= 1\n\t\t\tif string[l - 1] != string[h + 1]:\n\t\t\t\treturn False\n\n\t\t# If we reach here, then all characters were matching\n\t\treturn True\n\n\n\t# Function to check if a given string is a rotation of a\n\t# palindrome.\n\tdef isRotatedPalindrome(self, string):\n\t\t# If string itself is palindrome\n\t\tif self.isPalindrome(string):\n\t\t\treturn 1\n\n\t\t# Now try all rotations one by one\n\t\tn = len(string)\n\t\tfor i in range(n - 1):\n\t\t\tstring1 = string[i + 1:n]\n\t\t\tstring2 = string[0:i + 1]\n\n\t\t\t# Check if this rotation is palindrome\n\t\t\tstring1 += string2\n\t\t\tif self.isPalindrome(string1):\n\t\t\t\treturn 1\n\n\t\treturn 0",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {boolean}\n*/\n\nclass Solution {\n    //Function to check whether the given string is a rotated palindrome.\n    isRotatedPalindrome(s)\n    {\n        // Function to check if a given string is a palindrome.\n        const isPalindrome = (string) => {\n            let l = 0;\n            let h = string.length - 1;\n            \n            while (h > l) {\n                l += 1;\n                h -= 1;\n                if (string[l - 1] != string[h + 1]) {\n                    return false;\n                }\n            }\n            \n            return true;\n        }\n\n        // If string itself is a palindrome\n        if (isPalindrome(s)) {\n            return 1;\n        }\n\n        const n = s.length;\n\n        // Now try all rotations one by one\n        for (let i = 0; i < n - 1; i++) {\n            const string1 = s.slice(i + 1);\n            const string2 = s.slice(0, i + 1);\n            \n            // Check if this rotation is palindrome\n            const rotatedString = string1 + string2;\n            \n            if (isPalindrome(rotatedString)) {\n                return 1;\n            }\n        }\n\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public int isRotatedPalindrome(string s)\n    {\n        if(isPalindrome(s)) // if string is a palindrome\n            return 1;\n        \n        int n = s.Length;\n        for(int i=0; i<n-1; i++)\n        {\n            string str1 = s.Substring(i+1, n-i-1);\n            string str2 = s.Substring(0, i+1);\n            \n            if(isPalindrome(str1+str2)) // if rotated string is a palindrome\n                return 1;\n        }\n        return 0; // if rotated palindrome is not possible\n    }\n    \n    // function to check if a string is a palindrome\n    public bool isPalindrome(string str)\n    {\n        int l = 0;\n        int h = str.Length - 1;\n        \n        while(h > l)\n        {\n            if(str[l] != str[h])\n                return false;\n            l++;\n            h--;\n        }\n        \n        return true;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}