{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701282,
            "title": "Check if a string is Isogram or not",
            "titleSlug": "check-if-a-string-is-isogram-or-not-1587115620",
            "content": "<p><span style=\"font-size:18px\">Given a string&nbsp;S&nbsp;of lowercase alphabets, check if it is isogram or not. An Isogram is a string in which no letter occurs more than once.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>S = machine\n<strong>Output: </strong>1<strong>\nExplanation: </strong>machine is an isogram\nas no letter has appeared twice. Hence\nwe print 1.<strong>\n</strong></span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>S = geeks\n<strong>Output: </strong>0<strong>\nExplanation: </strong>geeks is not an isogram\nas &#39;e&#39; appears twice. Hence we print 0.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nThis is a function problem. You only need to complete the&nbsp;function<strong> isIsogram()&nbsp;</strong>that takes&nbsp;a string as a parameter and returns&nbsp;either&nbsp;true or false.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(Number of distinct characters).<br />\n<strong>Note:</strong> N = |S|</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= |s| &lt;= 10<sup>3</sup></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Determine if a given string S, consisting of lowercase alphabets, is an isogram. An isogram is a string where no letter appears more than once.",
                "constraints": [
                    "1 <= |s| <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "machine",
                        "output": "true",
                        "explanation": "The string 'machine' is an isogram because each character appears only once."
                    },
                    {
                        "input": "geeks",
                        "output": "false",
                        "explanation": "The string 'geeks' is not an isogram because the character 'e' appears twice."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution\n{\n    public:\n    //Function to check if a string is Isogram or not.\n    bool isIsogram(string s)\n    {\n        int hash[26]={0};\n        \n        //iterating over the string.\n        for(int i=0;i<s.length();i++)\n        {\n            //incrementing the count of characters in hash table.\n            hash[s[i]-'a']++;\n            \n            //if count of any character is greater than 1 then \n            //string is not isogram so we return false.\n            if(hash[s[i]-'a']>1)\n            return false;\n        }\n        //returning true if no character occurs more than once.\n        return true;\n    }\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution\n{\n    //Function to check if a string is Isogram or not.\n    static boolean isIsogram(String data)\n    {\n        ArrayList<Character> list = new ArrayList<Character>();\n        char k[]= data.toCharArray();\n        \n        //iterating over the string.\n        for(int i=0;i<data.length();i++)\n        {\n            //if list already contains the current character then \n            //string is not isogram so we return false.\n            if(list.contains(k[i]))\n            return false;\n            \n            //else we add the character to the list,\n            else list.add(k[i]);\n        }\n        //returning true if no character occurs more than once.\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\n#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to check if a string is Isogram or not.\n    def isIsogram(self,s):\n        hash=[0]*26\n        \n        #iterating over the string.\n        for i in range(len(s)):\n            \n            #incrementing the count of characters in hash table.\n            hash[ord(s[i])-ord('a')]+=1\n            \n            #if count of any character is greater than 1 then \n            #string is not isogram so we return false.\n            if hash[ord(s[i])-ord('a')]>1:\n                return False\n                \n        #returning true if no character occurs more than once.\n        return True",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {string} s\n * @returns {boolean}\n*/\nclass Solution \n{\n    //Function to check if a string is Isogram or not.\n    isIsogram(s)\n    {\n        let hash = new Array(256);\n        hash.fill(0);\n    \n        //iterating over the string.\n        for(let i=0;i<s.length;i++)\n        {\n            //incrementing the count of characters in hash table.\n            hash[s.charCodeAt(i)]++;\n            \n            //if count of any character is greater than 1 then \n            //string is not isogram so we return false.\n            if(hash[s.charCodeAt(i)]>1)\n                return false;\n        }\n        //returning true if no character occurs more than once.\n        return true;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to check if a string is Isogram or not.\n    public bool isIsogram(string s)\n    {\n        int[] hash = new int[26];\n        \n        //iterating over the string.\n        for(int i=0;i<s.Length;i++)\n        {\n            //incrementing the count of characters in hash table.\n            hash[s[i]-'a']++;\n            \n            //if count of any character is greater than 1 then \n            //string is not isogram so we return false.\n            if(hash[s[i]-'a']>1)\n                return false;\n        }\n        //returning true if no character occurs more than once.\n        return true;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}