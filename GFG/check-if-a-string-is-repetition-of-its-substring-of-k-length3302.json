{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702931,
            "title": "Check if a string is repetition of its substring of k-length",
            "titleSlug": "check-if-a-string-is-repetition-of-its-substring-of-k-length3302",
            "content": "<p><span style=\"font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18px;\">Given a string <strong>s</strong>, check if it is possible to convert it into a string that is the <strong>repetition </strong>of a substring of <strong>length k</strong>. Conversion has to be done by following the steps mentioned below <strong>only once</strong>:</span></span></p>\n<ol>\n<li><span style=\"font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18px;\">Select two indices&nbsp;<strong>i&nbsp;</strong>and&nbsp;<strong>j&nbsp;</strong></span></span>(<strong style=\"font-family: arial, helvetica, sans-serif; font-size: 18px;\">zero-based indexing, i </strong><span style=\"font-family: arial, helvetica, sans-serif; font-size: 18px;\">could be equal to </span><strong style=\"font-family: arial, helvetica, sans-serif; font-size: 18px;\">j</strong><span style=\"font-family: arial, helvetica, sans-serif; font-size: 18px;\">), such that <strong>i</strong> and <strong>j </strong>are divisible by <strong>k</strong>.</span></li>\n<li><span style=\"font-family: arial, helvetica, sans-serif; font-size: 18px;\">Select substrings of length <strong>k</strong> starting from indices <strong>i</strong> and <strong>j.</strong></span></li>\n<li><span style=\"font-family: arial, helvetica, sans-serif; font-size: 18px;\">Replace substring starting at index <strong>i</strong> with substring starting at index <strong>j </strong>within the string</span></li>\n</ol>\n<p><strong><span style=\"font-family: arial, helvetica, sans-serif; font-size: 18px;\">Note:&nbsp;</span></strong><span style=\"font-family: arial, helvetica, sans-serif; font-size: 18px;\"><strong>You have to convert the string using the operation only once</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 4<br />K = 2<br />S = \"bdac\"\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: We can replace either\n\"bd\" with \"ac\" or \"ac\" with \"bd\"\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nN = 5<br />K = 2<br />S = \"abcde\"\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: Since <strong>n</strong> % <strong>k</strong> != 0, it's not \npossible to convert <strong>s</strong> into a string which\nis a concatanation of a substring with \nlength <strong>k</strong>.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>kSubstrConcat()&nbsp;</strong>which takes a string <strong>s</strong>, its length <strong>n </strong>and an integer <strong>k </strong>as inputs and return <strong>1</strong> if convertion of the given string is possible, else <strong>0</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Constraints:</strong></span></span><br /><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\">2 &lt;= k &lt; n &lt;= 10<sup>5</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, determine if it can be transformed into a string formed by repeating a substring of length `k` exactly once, using the following operation:\n\n1.  Choose two indices `i` and `j` (0-based indexing, `i` can be equal to `j`) such that both `i` and `j` are divisible by `k`.\n2.  Select substrings of length `k` starting at indices `i` and `j`.\n3.  Replace the substring starting at index `i` with the substring starting at index `j` within the string `s`.\n\nNote: The transformation must be performed only once.",
                "constraints": [
                    "2 <= k < n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nK = 2\nS = \"bdac\"",
                        "output": "1",
                        "explanation": "The string \"bdac\" can be converted to a repetition of a substring of length 2. Either \"bd\" can be replaced with \"ac\" or \"ac\" can be replaced with \"bd\", resulting in either \"acac\" or \"bdbd\" which are repetitions of the substring of length k=2. Since a valid conversion is possible, the output is 1."
                    },
                    {
                        "input": "N = 5\nK = 2\nS = \"abcde\"",
                        "output": "0",
                        "explanation": "Since the length of the string N (5) is not divisible by k (2), it is impossible to convert the string into a repetition of a substring of length k. Therefore, the output is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Store all the substring of length k in a map along with their frequencies.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\n\npublic:\n\n\t//Function to check if a given string can be divided into substrings of size k\n\tint kSubstrConcat (int n, string s, int k)\n\t{\n\t\t//if n is equal to k, return 1\n\t\tif (n == k) return 1;\n\n\t\t//if n is not divisible by k, return 0\n\t\tif (n % k != 0) return 0;\n\t\t\n\t\t//mapping substrings of size k and their frequency\n\t\tunordered_map <string, int> m;\n\t\tfor (int i = 0; i < n; i += k)\n\t\t{\n\t\t\tm[s.substr (i, k)]++;\n\t\t}\n\n\t\t//if only one unique substring is found, return 1\n\t\tif (m.size () == 1) return 1;\n\t\t\n\t\t//if more than 2 unique substrings are found, return 0\n\t\tif (m.size () != 2) return 0;\n\n\t\t//if the frequency of one substring is (n/k - 1) or 1, return 1\n\t\tif (m.begin()->second == (n / k - 1) || m.begin()->second == 1)\n\t\t\treturn 1;\n\t\t\t\n\t\t//otherwise, return 0\n\t\treturn 0;\n\t}\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    int kSubstrConcat(int n, String s, int k)\r\n    {\r\n        // check if n is equal to k, then return 1\r\n        if (n == k) return 1;\r\n        \r\n        // check if n is not divisible by k, then return 0\r\n\t\tif (n % k != 0) return 0;\r\n\t\t\r\n\t\t// create a HashMap to store substrings and their frequencies\r\n\t\tHashMap <String, Integer> m=new HashMap<>();\r\n\t\t\r\n\t\t// iterate over the string in increments of k\r\n\t\tfor (int i = 0; i < n; i += k)\r\n\t\t{\r\n\t\t\t// store substring from i to i+k in HashMap with its frequency\r\n\t\t\tm.put(s.substring (i, i+k),m.getOrDefault(s.substring(i,i+k),0)+1);\r\n\t\t}\r\n\r\n\t\t// check if there is only one unique substring, then return 1\r\n\t\tif (m.size () == 1) return 1;\r\n\t\t\r\n\t\t// check if there are not exactly two unique substrings, then return 0\r\n\t\tif (m.size () != 2) return 0;\r\n\r\n        int val=0;\r\n        // get the frequency value of one substring\r\n        for(int i:m.values()){\r\n            val=i;\r\n            break;\r\n        }\r\n        \r\n\t\t// check if the frequency value is equal to (n/k - 1) or 1, then return 1\r\n\t\tif ((val == (n / k - 1)) || (val == 1))\r\n\t\t\treturn 1;\r\n\t\t\r\n\t\t// return 0 if none of the above conditions are satisfied\r\n\t\treturn 0;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    # Function to check if k substring concatenation is possible or not\n    def kSubstrConcat(self, n, s, k):\n        # If string length is 1, then k substring concatenation is possible\n        if n == 1:\n            return 1\n\n        # If string length is not divisible by k, then k substring concatenation is not possible\n        if n % k:\n            return 0\n\n        # Create a dictionary to store the count of each substring of length k\n        m = {}\n        for i in range(0, n, k):\n            # If substring is not present in the dictionary, add it with count 0\n            if s[i:i + k] not in m:\n                m[s[i:i + k]] = 0\n\n            # Increment the count of the current substring\n            m[s[i:i + k]] += 1\n\n        # If there is only one unique substring present, k substring concatenation is possible\n        if len(m) == 1:\n            return 1\n\n        # If there are more than 2 unique substrings, k substring concatenation is not possible\n        if len(m) != 2:\n            return 0\n\n        # Get the count of one unique substring\n        v = list(m.values())[0]\n\n        # If count is equal to (n//k-1) or 1, k substring concatenation is possible\n        if v == (n // k - 1) or v == 1:\n            return 1\n\n        # Otherwise, k substring concatenation is not possible\n        return 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {string} s\n * @param {number} k\n * @returns {number}\n*/\n\nclass Solution {\n    kSubstrConcat(n, s, k) {\n        // your code here\n        if (n === 1) {\n            return 1;\n        }\n        \n        if (n % k !== 0) {\n            return 0;\n        }\n\n        let m = {};\n        for (let i = 0; i < n; i += k) {\n            let substring = s.substring(i, i + k);\n            if (!m.hasOwnProperty(substring)) {\n                m[substring] = 0;\n            }\n            m[substring]++;\n        }\n\n        if (Object.keys(m).length === 1) {\n            return 1;\n        }\n\n        if (Object.keys(m).length !== 2) {\n            return 0;\n        }\n\n        let values = Object.values(m);\n        if (values.includes(n / k - 1) || values.includes(1)) {\n            return 1;\n        }\n\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}