{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702930,
            "title": "Check if actual binary representation of a number is palindrome",
            "titleSlug": "check-if-actual-binary-representation-of-a-number-is-palindrome0624",
            "content": "<p><span style=\"font-size: 18px;\">Given a non-negative integer <strong>N</strong>. Check whether the Binary Representation of the number is Palindrome or not.&nbsp;<br />Note: No leading 0&rsquo;s are being considered.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 5\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: The Binary Representation of\n5 is 101 which is a Palindrome.\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\">&acirc;&euro;&lsaquo;<strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nN = 10\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: The Binary Representation of\n10 is 1010 which is not a Palindrome.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>binaryPalin()&nbsp;</strong>which takes an integer N as input and returns 1 if the binary representation of N is a palindrome. Else, return 0 .</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>Log(N).&nbsp;<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />0&lt;=N&lt;=2<sup>63</sup>-1</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer N, determine if the binary representation of N (without leading zeros) is a palindrome.",
                "constraints": [
                    "0 <= N <= 2^63 - 1"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "1",
                        "explanation": "The binary representation of 5 is 101, which is a palindrome."
                    },
                    {
                        "input": "10",
                        "output": "0",
                        "explanation": "The binary representation of 10 is 1010, which is not a palindrome."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>One way is to store the binary representation in a string and then check if the string is a palindrome or not. But, storing the binary representation in a string will use O(logN) space. Can you improve your algorithm to use constant space?</p>\n\n<p>Place one pointer at the leftmost set bit and one pointer at the rightmost bit and check if both the bits are same.&nbsp;<br />\nThen, move the left pointer one step ahead and the right pointer one step back in the binary representation.&nbsp;<br />\n(you can do this by left = left &gt;&gt; 1 and right = right &lt;&lt; 1).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "palindrome",
                "slug": "palindrome"
            },
            {
                "name": "Binary Representation",
                "slug": "binary-representation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\n\tint binaryPalin (long long int n)\n\t{\n\t    if (n == 0) return 1;\n\t\tlong long int left = log2(n); // position of leftmost set bit\n\t\tlong long int right = 0; // position of the rightmost bit\n\n\t\tleft = (1LL << left); // generating the number with only leftmost bit set\n\t\tright = (1LL << right); // generating the number with only rightmost bit set\n\n\t\twhile (left > right)\n\t\t{\n\t\t    // if both the bits are different, we return 0.\n\t\t\tif ((n & left) == 0 and (n & right) != 0)\n\t\t\t\treturn 0;\n\t\t\tif ((n & left) != 0 and (n & right) == 0)\n\t\t\t\treturn 0;\n\n\t        // moving the left one step back\n\t\t\tleft >>= 1;\n\t\t\t// moving the right one step ahead\n\t\t\tright <<= 1;\n\t\t}\n\t\treturn 1;\n\t}\n\n\t// Contributed By: Pranay Bansal\n\n\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Sol\n{\n    int binaryPalin (long n)\n    {\n        if (n == 0)\n            return 1;\n    \tlong left = (long) (Math.log(n) / Math.log(2)); // position of leftmost set bit\n    \tlong right = 0; // position of the rightmost bit\n    \n    \tleft = ((long)1 << left); // generating the number with only leftmost bit set\n    \tright = ((long)1 << right); // generating the number with only rightmost bit set\n    \n    \twhile (left > right)\n    \t{\n    \t    // if both the bits are different, we return 0.\n    \t\tif ((n & left) == 0 && (n & right) != 0)\n    \t\t\treturn 0;\n    \t\tif ((n & left) != 0 && (n & right) == 0)\n    \t\t\treturn 0;\n    \n            // moving the left one step back\n    \t\tleft >>= 1;\n    \t\t// moving the right one step ahead\n    \t\tright <<= 1;\n    \t}\n    \treturn 1;\n    }\n}\n\n// Contributed By: Pranay Bansal\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def binaryPalin(self, n):\n        if n == 0:\n            return 1\n        import math\n        left = math.log2(n)\n        left = int(left)  # position of leftmost set bit\n        right = 0  # position of the rightmost bit\n\n        left = (1 << left)  # generating the number with only leftmost bit set\n        right = (1 << right\n                 )  # generating the number with only rightmost bit set\n\n        while left > right:\n            # if both the bits are different, we return 0.\n            if ((n & left) == 0 and (n & right) != 0):\n                return 0\n            if ((n & left) != 0 and (n & right) == 0):\n                return 0\n\n            # moving the left one step back\n            left >>= 1\n            # moving the right one step ahead\n            right <<= 1\n        return 1\n\n    # Contributed By: Pranay Bansal\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution{\n    binaryPalin(n){\n        if (n === 0) return 1;\n        let left = Math.floor(Math.log2(n)); // position of leftmost set bit\n        let right = 0; // position of the rightmost bit\n\n        left = (1 << left); // generating the number with only leftmost bit set\n        right = (1 << right); // generating the number with only rightmost bit set\n\n        while (left > right){\n            if ((n & left) === 0 && (n & right) !== 0)\n                return 0;\n            if ((n & left) !== 0 && (n & right) === 0)\n                return 0;\n\n            left >>= 1;\n            right <<= 1;\n        }\n        return 1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}