{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710357,
            "title": "Check if all levels of two trees are anagrams or not",
            "titleSlug": "check-if-all-levels-of-two-trees-are-anagrams-or-not",
            "content": "<p><span style=\"font-size:18px\">Given two binary trees with same number of nodes, the task is&nbsp;to check if each of their levels are anagrams of each other or not.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/abc-1649622345.gif\" style=\"height:173px; width:366px\" />\r\n<strong>Output: </strong>1\r\n<strong>Explanation:</strong> \r\n<strong>Tree 1:</strong>\r\nLevel 0 : 1\r\nLevel 1 : 3, 2\r\nLevel 2 : 5, 4\r\n\r\n<strong>Tree 2:</strong>\r\nLevel 0 : 1\r\nLevel 1 : 2, 3\r\nLevel 2 : 4, 5\r\n\r\nAs we can clearly see all the levels of above two binary trees \r\nare anagrams of each other, hence return true.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20221119111710/WhatsAppImage20221119at111602AM.jpeg\" style=\"height:253px; width:573px\" />\r\nOutput: 0</strong>\r\n<strong>Explanation:</strong> \r\n<strong>Tree 1:\r\n</strong>Level 0 : 1\r\nLevel 1 : 2, 3 \r\nLevel 2 : 5, 4 \r\n\r\n<strong>Tree 2:</strong> \r\nLevel 0 : 1 \r\nLevel 1 : 2, 4 \r\nLevel 2 : 5, 3 \r\n\r\nAs we can clearly see that level 1 and leve 2 are not anagrams of each other, hence return false.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>areAnagrams</strong><strong>()</strong>&nbsp;which takes the root of two trees as input&nbsp;and returns an 1 if all the levels are anagrams, else returns 0&nbsp;as output.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(NlogN)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>4</sup><br />\r\n1 &lt;= tree.val &lt;= 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary trees with the same number of nodes, determine if the values at each level are anagrams of each other.  That is, for each level `i`, the multiset of node values at level `i` in the first tree is equal to the multiset of node values at level `i` in the second tree.",
                "constraints": [
                    "1 <= N <= 10^4 (where N is the number of nodes in each tree)",
                    "1 <= tree.val <= 10^9 (where tree.val is the value of a node)"
                ],
                "testcases": [
                    {
                        "input": "Tree 1:\nLevel 0 : 1\nLevel 1 : 3, 2\nLevel 2 : 5, 4\n\nTree 2:\nLevel 0 : 1\nLevel 1 : 2, 3\nLevel 2 : 4, 5",
                        "output": "1",
                        "explanation": "All levels of the two binary trees are anagrams of each other. Level 0: {1}, Level 1: {2, 3}, Level 2: {4, 5}."
                    },
                    {
                        "input": "Tree 1:\nLevel 0 : 1\nLevel 1 : 2, 3\nLevel 2 : 5, 4\n\nTree 2:\nLevel 0 : 1\nLevel 1 : 2, 4\nLevel 2 : 5, 3",
                        "output": "0",
                        "explanation": "Level 1 and Level 2 are not anagrams of each other. Specifically, Level 1: Tree1 has {2,3} and Tree2 has {2,4} which are not equal. Level 2: Tree1 has {5,4} and Tree2 has {5,3} which are not equal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse both trees simultaneously level by level. Store each level both trees in vectors (or array). To check if two vectors are anagram or not, we sort both and then compare.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\nbool areAnagrams(Node *root1, Node *root2)\r\n{\r\n    // Base Cases\r\n    if (root1 == NULL && root2 == NULL)\r\n        return true;\r\n    if (root1 == NULL || root2 == NULL)\r\n        return false;\r\n \r\n    // start level order traversal of two trees\r\n    // using two queues.\r\n    queue<Node *> q1, q2;\r\n    q1.push(root1);\r\n    q2.push(root2);\r\n \r\n    while (1)\r\n    {\r\n        // n1 (queue size) indicates number of Nodes\r\n        // at current level in first tree and n2 indicates\r\n        // number of nodes in current level of second tree.\r\n        int n1 = q1.size(), n2 = q2.size();\r\n \r\n        // If n1 and n2 are different\r\n        if (n1 != n2)\r\n            return false;\r\n \r\n        // If level order traversal is over \r\n        if (n1 == 0)\r\n            break;\r\n \r\n        // Dequeue all Nodes of current level and\r\n        // Enqueue all Nodes of next level\r\n        vector<int> curr_level1, curr_level2;\r\n        while (n1 > 0)\r\n        {\r\n            Node *node1 = q1.front();\r\n            q1.pop();\r\n            if (node1->left != NULL)\r\n                q1.push(node1->left);\r\n            if (node1->right != NULL)\r\n                q1.push(node1->right);\r\n            n1--;\r\n \r\n            Node *node2 = q2.front();\r\n            q2.pop();\r\n            if (node2->left != NULL)\r\n                q2.push(node2->left);\r\n            if (node2->right != NULL)\r\n                q2.push(node2->right);\r\n \r\n            curr_level1.push_back(node1->data);\r\n            curr_level2.push_back(node2->data);\r\n        }\r\n \r\n        // Check if nodes of current levels are\r\n        // anagrams or not.\r\n        sort(curr_level1.begin(), curr_level1.end());\r\n        sort(curr_level2.begin(), curr_level2.end());\r\n        if (curr_level1 != curr_level2)\r\n            return false;\r\n    }\r\n \r\n    return true;\r\n}\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from typing import Optional\r\nfrom collections import deque\r\n\"\"\"\r\n\r\ndefinition of binary tree node.\r\nclass Node:\r\n    def _init_(self,val):\r\n        self.data = val\r\n        self.left = None\r\n        self.right = None\r\n\"\"\"\r\n\r\nclass Solution:\r\n    def areAnagrams(self, root1 : Optional['Node'], root2 : Optional['Node']) -> bool:\r\n        if root1==None and root2==None:\r\n            return True\r\n        if root1==None or root2==None:\r\n            return False\r\n        q1=deque()\r\n        q2=deque()\r\n        q1.append(root1)\r\n        q2.append(root2)\r\n        while True:\r\n            n1=len(q1)\r\n            n2=len(q2)\r\n            if n1!=n2:\r\n                return False\r\n            if n1==0:\r\n                break\r\n            cur_level1=[]\r\n            cur_level2=[]\r\n            while n1>0:\r\n                node1=q1.popleft()\r\n                if node1.left!=None:\r\n                    q1.append(node1.left)\r\n                if node1.right!=None:\r\n                    q1.append(node1.right)\r\n                n1-=1\r\n                node2=q2.popleft()\r\n                if node2.left!=None:\r\n                    q2.append(node2.left)\r\n                if node2.right!=None:\r\n                    q2.append(node2.right)\r\n                cur_level1.append(node1.data)\r\n                cur_level2.append(node2.data)\r\n            cur_level1.sort()\r\n            cur_level2.sort()\r\n            if cur_level1!=cur_level2:\r\n                return False\r\n        return True\r\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}