{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703462,
            "title": "Check if any valid sequence is divisible by M",
            "titleSlug": "check-if-any-valid-sequence-is-divisible-by-m1114",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of <strong>n integers, arr,</strong> and an integer <strong>m</strong>, using &lsquo;+&rsquo; and &lsquo;-&lsquo; between the elements check if there is a way to form a sequence of numbers that evaluates to a number divisible by m.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[ ] = {1, 2, 3, 4, 6} and m= 4\n<strong>Output :</strong> 1\n<strong>Explanation:</strong>\nThere is a valid sequence i. e., \n(1 - 2 + 3 + 4 + 6), which evaluates to 12 \nthat is divisible by 4.</span></pre>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium; white-space: normal;\"><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><strong>Input :</strong> arr[ ] = {1, 3, 9} and m= 2<br /><strong>Output :</strong> 0\n<strong>Explanation:</strong>\nNo possible sequence can evaluate a number divisible by 2.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />This is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>validSequence()</strong> that takes an array <strong>(arr)</strong>, sizeOfArray <strong>(n)</strong>, an integer <strong>m</strong>&nbsp;and return the <strong>true&nbsp;</strong>if there is a way to form a sequence of numbers which evaluate to a number divisible by M&nbsp;else return <strong>false</strong>. The driver code takes care of the printing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*m).<br /><strong>Expected Auxiliary Space:</strong> O(n*m).</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &lt; 1000<br />1 &le; m &lt;1000<br />1&nbsp;</span><span style=\"font-size: 18px;\">&le;<strong>arr<sub>i&nbsp;</sub></strong></span><span style=\"font-size: 18px;\">&le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of *n* integers, `arr`, and an integer *m*, determine if it's possible to insert '+' or '-' operators between the elements of `arr` such that the resulting expression evaluates to a number divisible by *m*.",
                "constraints": [
                    "1 \u2264 n < 1000",
                    "1 \u2264 m < 1000",
                    "1 \u2264 arr[i] \u2264 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr = {1, 2, 3, 4, 6}, m = 4",
                        "output": "true",
                        "explanation": "The sequence (1 - 2 + 3 + 4 + 6) evaluates to 12, which is divisible by 4."
                    },
                    {
                        "input": "arr = {1, 3, 9}, m = 2",
                        "output": "false",
                        "explanation": "No possible sequence can evaluate to a number divisible by 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Do all possible combinations and maintain a variable sum and smartly store it such that it always lies between 1 to m.</span></p>\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    const int MAX = 1000;\n    int dp[1010][1010];\n\n    bool isPossible(int n, int index, int sum, int M, int *arr) {\n\n        // Base case\n        if (index == n) {\n\n            // check if sum is divisible by M\n            if (sum == 0)\n                return true;\n            return false;\n        }\n\n        // check if the current state\n        // is already computed\n        if (dp[index][sum] != -1)\n            return dp[index][sum];\n\n        // 1.Try placing '+'\n        bool placeAdd =\n            isPossible(n, index + 1, ((sum + arr[index]) % M + M) % M, M, arr);\n\n        // 2. Try placing '-'\n        bool placeMinus =\n            isPossible(n, index + 1, ((sum - arr[index]) % M + M) % M, M, arr);\n\n        // calculate value of res for recursive case\n        bool res = (placeAdd || placeMinus);\n\n        // store the value for res for current\n        // states and return for parent call\n        dp[index][sum] = res;\n        return res;\n    }\n\n    bool validSequence(int arr[], int n, int M) {\n        memset(dp, -1, sizeof(dp));\n        bool res;\n        res = isPossible(n, 0, 0, M, arr);\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() {\n        this.MAX = 1000;\n        this.dp = {};\n    }\n\n    // Helper function to create a key for dp object\n    getKey(index, sum) { return `${index},${sum}`; }\n\n    isPossible(n, index, sum, M, arr) {\n        // Base case\n        if (index === n) {\n            // check if sum is divisible by M\n            return sum === 0;\n        }\n\n        // Create a key for current state\n        const key = this.getKey(index, sum);\n\n        // check if the current state is already computed\n        if (this.dp[key] !== undefined) {\n            return this.dp[key];\n        }\n\n        // 1. Try placing '+'\n        let placeAdd =\n            this.isPossible(n, index + 1, ((sum + arr[index]) % M + M) % M, M, arr);\n\n        // 2. Try placing '-'\n        let placeMinus =\n            this.isPossible(n, index + 1, ((sum - arr[index]) % M + M) % M, M, arr);\n\n        // calculate value of res for recursive case\n        let res = placeAdd || placeMinus;\n\n        // store the value for res for current state and return for parent call\n        this.dp[key] = res;\n        return res;\n    }\n\n    validSequence(arr, n, M) {\n        this.dp = {}; // Reset dp for each test case\n        return this.isPossible(n, 0, 0, M, arr);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}