{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703113,
            "title": "Check if array contains contiguous integers",
            "titleSlug": "check-if-array-contains-contiguous-integers-with-duplicates-allowed2046",
            "content": "<p><span >Given an array <strong>arr</strong>. Determine if all the unique elements are contiguous integers.</span></p>\n<p><span ><strong>Example:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [5, 2, 3, 6, 4, 4, 6, 6]\n<strong>Output:</strong> Yes\n<strong>Explanation: </strong>The elements of array form a contiguous set of integers which is [2, 3, 4, 5, 6] so the output is \"Yes\".\n</span></pre>\n<pre><span style=\"font-size: 20px;\"><strong>Input:</strong> arr[] = [10, 14, 10, 12, 12, 13, 15] <strong>\nOutput:</strong> No<br /></span><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span >The elements of array form a contiguous set of integers which is [10, 12, 13, 14, 15] so the output is \"No\".</span></pre>\n<p><span style=\"font-size: 20px;\"><strong>Expected Time Complexity:</strong> O(nlog(n)).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le;10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, determine if the unique elements in the array form a contiguous sequence.",
                "constraints": [
                    "1 <= array size <= 10^5",
                    "1 <= element value <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[5, 2, 3, 6, 4, 4, 6, 6]",
                        "output": "Yes",
                        "explanation": "The unique elements of the array are [2, 3, 4, 5, 6], which form a contiguous sequence."
                    },
                    {
                        "input": "[10, 14, 10, 12, 12, 13, 15]",
                        "output": "No",
                        "explanation": "The unique elements of the array are [10, 12, 13, 14, 15], which do not form a contiguous sequence (missing 11)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Insert all the elements in the hash table. Now pick the first element and keep on incrementing its value by 1 till you find a value not present in the hash table.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\n  public:\n    // Function to check whether the array contains\n    // a set of contiguous integers\n    bool areElementsContiguous(vector<int>& arr) {\n        // Storing elements of 'arr[]' in a hash\n        // table 'us'\n        int n = arr.size();\n        unordered_set<int> us;\n        for (int i = 0; i < n; i++)\n            us.insert(arr[i]);\n\n        // as arr[0] is present in 'us'\n        int count = 1;\n\n        // starting with previous smaller element\n        // of arr[0]\n        int curr_ele = arr[0] - 1;\n\n        // if 'curr_ele' is present in 'us'\n        while (us.find(curr_ele) != us.end()) {\n\n            // increment count\n            count++;\n\n            // update 'curr_ele\"\n            curr_ele--;\n        }\n\n        // starting with next greater element\n        // of arr[0]\n        curr_ele = arr[0] + 1;\n\n        // if 'curr_ele' is present in 'us'\n        while (us.find(curr_ele) != us.end()) {\n\n            // increment count\n            count++;\n\n            // update 'curr_ele\"\n            curr_ele++;\n        }\n\n        // returns true if array contains a set of\n        // contiguous integers else returns false\n        if (count == (int)(us.size())) {\n            return 1;\n        } else\n            return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    // Function for finding maximum and value pair\n    boolean areElementsContiguous(int arr[]) {\n        // Complete the function\n        int n = arr.length;\n        HashSet<Integer> us = new HashSet<>();\n        for (int i = 0; i < n; i++) {\n            us.add(arr[i]);\n        }\n\n        // as arr[0] is present in 'us'\n        int count = 1;\n\n        // starting with previous smaller element\n        // of arr[0]\n        int curr_ele = arr[0] - 1;\n\n        // if 'curr_ele' is present in 'us'\n        while (us.contains(curr_ele)) {\n            // increment count\n            count++;\n\n            // update 'curr_ele'\n            curr_ele--;\n        }\n\n        // starting with next greater element\n        // of arr[0]\n        curr_ele = arr[0] + 1;\n\n        // if 'curr_ele' is present in 'us'\n        while (us.contains(curr_ele)) {\n            // increment count\n            count++;\n\n            // update 'curr_ele'\n            curr_ele++;\n        }\n\n        // returns \"Yes\" if array contains a set of\n        // contiguous integers else returns \"No\"\n        if (count == us.size()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#User function Template for Python\n\n\nclass Solution:\n\n    def areElementsContiguous(self, arr):\n        #Complete the function\n        n = len(arr)\n        us = set(arr)\n\n        # as arr[0] is present in 'us'\n        count = 1\n\n        # starting with previous smaller element of arr[0]\n        curr_ele = arr[0] - 1\n\n        # if 'curr_ele' is present in 'us'\n        while curr_ele in us:\n            # increment count\n            count += 1\n\n            # update 'curr_ele'\n            curr_ele -= 1\n\n        # starting with next greater element of arr[0]\n        curr_ele = arr[0] + 1\n\n        # if 'curr_ele' is present in 'us'\n        while curr_ele in us:\n            # increment count\n            count += 1\n\n            # update 'curr_ele'\n            curr_ele += 1\n\n        # returns \"Yes\" if array contains a set of contiguous integers else returns \"No\"\n        if count == len(us):\n            return 1\n        else:\n            return 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    areElementsContiguous(arr) {\n        // code here\n        let n = arr.length;\n        let us = new Set(arr);\n\n        // as arr[0] is present in 'us'\n        let count = 1;\n\n        // starting with previous smaller element of arr[0]\n        let curr_ele = arr[0] - 1;\n\n        // if 'curr_ele' is present in 'us'\n        while (us.has(curr_ele)) {\n            // increment count\n            count++;\n\n            // update 'curr_ele'\n            curr_ele--;\n        }\n\n        // starting with next greater element of arr[0]\n        curr_ele = arr[0] + 1;\n\n        // if 'curr_ele' is present in 'us'\n        while (us.has(curr_ele)) {\n            // increment count\n            count++;\n\n            // update 'curr_ele'\n            curr_ele++;\n        }\n\n        // returns \"Yes\" if array contains a set of contiguous integers else returns\n        // \"No\"\n        if (count == us.size) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}