{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702928,
            "title": "Check if divisible by 11",
            "titleSlug": "check-if-divisible-by-114724",
            "content": "<p><span style=\"font-size: 18px;\">Given a number <strong>S</strong>. Check whether it is divisble by 11 or not.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS = 76945\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: The number is divisible by 11\nas 76945 % 11 = 0.\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\">&acirc;&euro;&lsaquo;<strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nS = 12\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: The number is not divisible\nby 11 as 12 % 11 = 1.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>divisibleBy11()</strong>&nbsp;which takes the number in the form of string <strong>S</strong> as input and returns 1 if the number is divisible by 11. Else, it returns 0.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(Log S) where S&nbsp;is the input number.<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).&nbsp;</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=S&lt;=10<sup>1000</sup>+5</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number S represented as a string, determine if it is divisible by 11.",
                "constraints": [
                    "1 <= S <= 10^1000 + 5"
                ],
                "testcases": [
                    {
                        "input": "76945",
                        "output": "1",
                        "explanation": "The number 76945 is divisible by 11 (76945 % 11 == 0)."
                    },
                    {
                        "input": "12",
                        "output": "0",
                        "explanation": "The number 12 is not divisible by 11 (12 % 11 == 1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Converting the number into an integer and then checking if N % 11 == 0 won&#39;t work given the size of input numbers.</p>\n\n<p>Try using the fact that for a number to be divible by 11, the difference between the sum of digits at odd positions and the sum of digits at even positions should be divisible by 11.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\t\n\tint divisibleBy11 (string s)\n\t{\n\t    // calculting the sum of digits at odd and even indices separately\n\t\tint even_pos = 0, odd_pos = 0;\n\t\tfor (int i = 0; i < s.length (); ++i)\n\t\t{\n\t\t\tif (i & 1)\n\t\t\t\todd_pos += (s[i] - '0');\n\t\t\telse\n\t\t\t\teven_pos += (s[i] - '0');\n\t\t}\n\t\t\n\t\t// number is divisible by 11 only if the difference \n\t\t// the alternating sum difference is divisible by 11\n\t\treturn (abs (even_pos - odd_pos) % 11 == 0);\n\t}\n\n// Contributed By: Pranay Bansal\n\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Sol\n{\n    int divisibleBy11 (String s)\n    {\n        // calculting the sum of digits at odd and even indices separately\n    \tint even_pos = 0, odd_pos = 0;\n    \tfor (int i = 0; i < s.length (); ++i)\n    \t{\n    \t\tif (i % 2 != 0) \n    \t\t\todd_pos += (int)(s.charAt (i) - '0');\n    \t\telse\n    \t\t\teven_pos += (int)(s.charAt (i) - '0');\n    \t}\n    \t\n    \t// number is divisible by 11 only if the difference \n    \t// the alternating sum difference is divisible by 11\n    \tif ((even_pos - odd_pos) % 11 == 0)\n    \t    return 1;\n    \telse\n    \t    return 0;\n    }\n}\n\n// Contributed By: Pranay Bansal\n\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def divisibleBy11(self, s):\n        # calculting the sum of digits at odd and even indices separately\n        odd_pos = 0\n        even_pos = 0\n\n        for i in range(len(s)):\n            if (i & 1):\n                odd_pos += (int)(s[i])\n            else:\n                even_pos += (int)(s[i])\n\n        # number is divisible by 11 only if the difference\n        # the alternating sum difference is divisible by 11\n        if ((odd_pos - even_pos) % 11 == 0):\n            return 1\n        else:\n            return 0\n\n        # Contributed By: Pranay Bansal\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to check if a number is divisible by 11 or not.\n    divisibleBy11(S) {\n        let odd_pos = 0;\n        let even_pos = 0;\n\n        for (let i = 0; i < S.length; i++) {\n            if (i & 1) {\n                odd_pos += parseInt(S[i]);\n            } else {\n                even_pos += parseInt(S[i]);\n            }\n        }\n\n        if ((odd_pos - even_pos) % 11 === 0) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}