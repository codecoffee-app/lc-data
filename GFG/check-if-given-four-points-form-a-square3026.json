{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705309,
            "title": "Check if  given four points form a square",
            "titleSlug": "check-if-given-four-points-form-a-square3026",
            "content": "<p><span style=\"font-size:18px\">Given coordinates of four points in a plane. Find if the four points form a square or not.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\npoints=(0,0),(0,1),(1,0),(1,1)\r\n<strong>Output:</strong>\r\n1\r\n<strong>Explanation:</strong>\r\nThese points form a square.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\npoints=(0,0),(1,1),(1,0),(0,2)\r\n<strong>Output:</strong>\r\n0\r\n<strong>Explanation:</strong>\r\nThese four points do not form a square.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything.Your Task is to complete the function <strong>fourPointSquare()</strong> which takes a 2D array of dimensions 4x2 which contains the cordinates of the four points and returns 1 if they form a square.Otherwise it returns 0.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(1)<br />\r\n<strong>Expected Space Complexity:</strong>O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n0&lt;=X-cordinate,Y-cordinate&lt;=10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the coordinates of four points in a plane, determine if they form a square. The input is a 2D array representing the four points.",
                "constraints": [
                    "0 <= X-coordinate, Y-coordinate <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "points=[(0,0),(0,1),(1,0),(1,1)]",
                        "output": "1",
                        "explanation": "The given points form a square."
                    },
                    {
                        "input": "points=[(0,0),(1,1),(1,0),(0,2)]",
                        "output": "0",
                        "explanation": "The given points do not form a square."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If two points are equal, they can never form a square.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to calculate the distance between two points\n    int distance(int a, int b, int p, int q) {\n        return (p - a) * (p - a) + (q - b) * (q - b);\n    }\n\n    // Function to check if given points form a valid square\n    int fourPointSquare(vector<vector<int>> points) {\n        // Checking if any two points are the same\n        for (int i = 0; i < 4; i++)\n            for (int j = i + 1; j < 4; j++)\n                if (points[i][0] == points[j][0] &&\n                    points[i][1] == points[j][1])\n                    return 0;\n\n        // Calculating distances between points\n        int d2 = distance(points[0][0], points[0][1], points[1][0], points[1][1]);\n        int d3 = distance(points[0][0], points[0][1], points[2][0], points[2][1]);\n        int d4 = distance(points[0][0], points[0][1], points[3][0], points[3][1]);\n\n        // Checking if lengths of sides form a valid square\n        if (d2 == d3 && 2 * d2 == d4) {\n            int d = distance(points[1][0], points[1][1], points[3][0], points[3][1]);\n            return (d == distance(points[2][0], points[2][1], points[3][0], points[3][1]) &&\n                    d == d2);\n        }\n\n        // The below two cases are similar to above case\n        if (d3 == d4 && 2 * d3 == d2) {\n            int d = distance(points[1][0], points[1][1], points[2][0], points[2][1]);\n            return (d == distance(points[1][0], points[1][1], points[3][0], points[3][1]) &&\n                    d == d3);\n        }\n        if (d2 == d4 && 2 * d2 == d3) {\n            int d = distance(points[1][0], points[1][1], points[2][0], points[2][1]);\n            return (d == distance(points[2][0], points[2][1], points[3][0], points[3][1]) &&\n                    d == d2);\n        }\n\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    // Function to calculate the distance between two points\r\n    int distance(int a, int b, int p, int q) {\r\n        return (p - a) * (p - a) + (q - b) * (q - b);\r\n    }\r\n    \r\n    // Function to check if the given points form a square\r\n    int fourPointSquare(int points[][]) {\r\n        // Checking if any two points are the same\r\n        for (int i = 0; i < 4; i++)\r\n            for (int j = i + 1; j < 4; j++)\r\n                if (points[i][0] == points[j][0] &&\r\n                    points[i][1] == points[j][1])\r\n                    return 0;\r\n        \r\n        // Calculating the distances between the points\r\n        int d2 = distance(points[0][0], points[0][1], points[1][0], points[1][1]);\r\n        int d3 = distance(points[0][0], points[0][1], points[2][0], points[2][1]);\r\n        int d4 = distance(points[0][0], points[0][1], points[3][0], points[3][1]);\r\n        \r\n        // Checking if the distances satisfy the properties of a square\r\n        if (d2 == d3 && 2 * d2 == d4) {\r\n            int d = distance(points[1][0], points[1][1], points[3][0], points[3][1]);\r\n            return ((d == distance(points[2][0], points[2][1], points[3][0], points[3][1]) &&\r\n                     d == d2) ? 1 : 0);\r\n        }\r\n        if (d3 == d4 && 2 * d3 == d2) {\r\n            int d = distance(points[1][0], points[1][1], points[2][0], points[2][1]);\r\n            return ((d == distance(points[1][0], points[1][1], points[3][0], points[3][1]) &&\r\n                     d == d3) ? 1 : 0);\r\n        }\r\n        if (d2 == d4 && 2 * d2 == d3) {\r\n            int d = distance(points[1][0], points[1][1], points[2][0], points[2][1]);\r\n            return ((d == distance(points[2][0], points[2][1], points[3][0], points[3][1]) &&\r\n                     d == d2) ? 1 : 0);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    # Function to calculate the squared distance between two points\n    def distance(self, a, b, p, q):\n        return (p-a)*(p-a)+(q-b)*(q-b)\n    \n    # Function to check if the given points form a square\n    def fourPointSquare(self, points):    \n        # Checking for any duplicate points\n        for i in range(4):\n            for j in range(i+1,4):\n                if (points[i][0]==points[j][0] and points[i][1]==points[j][1]):\n                    return 0\n        \n        # Calculating the squared distances between the points\n        d2=self.distance(points[0][0],points[0][1],points[1][0],points[1][1])\n        d3=self.distance(points[0][0],points[0][1],points[2][0],points[2][1])\n        d4=self.distance(points[0][0],points[0][1],points[3][0],points[3][1]) \n        \n        # Checking for the conditions of a square\n        if (d2 == d3 and 2*d2 == d4):\n            d = self.distance(points[1][0],points[1][1],points[3][0],points[3][1])\n            if (d == self.distance(points[2][0],points[2][1],points[3][0],points[3][1]) and d == d2):\n                return 1\n            else:\n                return 0\n\n        # The below two cases are similar to the above case\n        if (d3 == d4 and 2*d3 == d2):\n            d = self.distance(points[1][0],points[1][1],points[2][0],points[2][1] )\n            if (d == self.distance(points[1][0],points[1][1],points[3][0],points[3][1]) and d == d3):\n                return 1\n            else:\n                return 0\n        if (d2 == d4 and 2*d2 == d3):\n            d = self.distance(points[1][0],points[1][1],points[2][0],points[2][1])\n            if (d == self.distance(points[2][0],points[2][1],points[3][0],points[3][1]) and d == d2):\n                return 1\n            else:\n                return 0\n        \n        return 0",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Solution {\n    // Function to calculate the squared distance between two points\n    distance(a, b, p, q) {\n        return (p - a) * (p - a) + (q - b) * (q - b);\n    }\n\n    // Function to check if the given points form a square\n    fourPointSquare(points) {\n        // Checking for any duplicate points\n        for (let i = 0; i < 4; i++) {\n            for (let j = i + 1; j < 4; j++) {\n                if (points[i][0] === points[j][0] && points[i][1] === points[j][1]) {\n                    return 0;\n                }\n            }\n        }\n        \n        // Calculating the squared distances between the points\n        let d2 = this.distance(points[0][0], points[0][1], points[1][0], points[1][1]);\n        let d3 = this.distance(points[0][0], points[0][1], points[2][0], points[2][1]);\n        let d4 = this.distance(points[0][0], points[0][1], points[3][0], points[3][1]);\n\n        // Checking for the conditions of a square\n        if (d2 === d3 && 2 * d2 === d4) {\n            let d = this.distance(points[1][0], points[1][1], points[3][0], points[3][1]);\n            if (d === this.distance(points[2][0], points[2][1], points[3][0], points[3][1]) && d === d2) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n\n        // The below two cases are similar to the above case\n        if (d3 === d4 && 2 * d3 === d2) {\n            let d = this.distance(points[1][0], points[1][1], points[2][0], points[2][1]);\n            if (d === this.distance(points[1][0], points[1][1], points[3][0], points[3][1]) && d === d3) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n        if (d2 === d4 && 2 * d2 === d3) {\n            let d = this.distance(points[1][0], points[1][1], points[2][0], points[2][1]);\n            if (d === this.distance(points[2][0], points[2][1], points[3][0], points[3][1]) && d === d2) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int fourPointSquare(List<List<int>> points)\n    {\n        // Checking if any two points are the same\n        for (int i = 0; i < 4; i++)\n            for (int j = i + 1; j < 4; j++)\n                if (points[i][0] == points[j][0] &&\n                    points[i][1] == points[j][1])\n                    return 0;\n\n        // Calculating distances between points\n        int d2 = distance(points[0][0], points[0][1], points[1][0], points[1][1]);\n        int d3 = distance(points[0][0], points[0][1], points[2][0], points[2][1]);\n        int d4 = distance(points[0][0], points[0][1], points[3][0], points[3][1]);\n\n        // Checking if lengths of sides form a valid square\n        if (d2 == d3 && 2 * d2 == d4)\n        {\n            int d = distance(points[1][0], points[1][1], points[3][0], points[3][1]);\n            return (d == distance(points[2][0], points[2][1], points[3][0], points[3][1]) &&\n                    d == d2) ? 1 : 0;\n        }\n\n        // The below two cases are similar to above case\n        if (d3 == d4 && 2 * d3 == d2)\n        {\n            int d = distance(points[1][0], points[1][1], points[2][0], points[2][1]);\n            return (d == distance(points[1][0], points[1][1], points[3][0], points[3][1]) &&\n                    d == d3) ? 1 : 0;\n        }\n        if (d2 == d4 && 2 * d2 == d3)\n        {\n            int d = distance(points[1][0], points[1][1], points[2][0], points[2][1]);\n            return (d == distance(points[2][0], points[2][1], points[3][0], points[3][1]) &&\n                    d == d2) ? 1 : 0;\n        }\n\n        return 0;\n    }\n    \n    // Function to calculate the distance between two points\n    public int distance(int a, int b, int p, int q)\n    {\n        return (p - a) * (p - a) + (q - b) * (q - b);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}