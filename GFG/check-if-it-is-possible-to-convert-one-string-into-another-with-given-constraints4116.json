{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705629,
            "title": "Check if it is possible to convert one string into another with given constraints",
            "titleSlug": "check-if-it-is-possible-to-convert-one-string-into-another-with-given-constraints4116",
            "content": "<p>Given two strings S and T, which&nbsp;contains three characters i.e <strong>&#39;A&#39;, &#39;B&#39;</strong> and <strong>&#39;#&#39;&nbsp;</strong>only. Check&nbsp;whether it is possible to convert the first string into another string by performing following operations on string first.<br />\r\n1- A can move towards Left only<br />\r\n2- B can move towards Right only<br />\r\n3- Neither A nor B should&nbsp;cross each other<br />\r\n<strong>Note:</strong> Moving i&#39;th character&nbsp;towards Left one step means swap i&#39;th with (i-1)&#39;th charecter [ i-1&gt;=0 ].&nbsp;Moving i&#39;th character&nbsp;towards Right one step means swap i&#39;th with (i+1)&#39;th charecter [ i+1&lt; string&#39;s length ].&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nS=#A#B#B#   \r\nT=A###B#B\r\n<strong>Output:</strong>\r\n1\r\n<strong>Explanation:</strong>\r\nA in S is right to the A in T \r\nso A of S can move easily towards\r\nthe left because there is no B on\r\nits left positions and for first B \r\nin S is left to the B in T so B \r\nof T can move easily towards the \r\nright because there is no A on its\r\nright positions and it is same for \r\nnext B so S can be easily converted\r\ninto T.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nS=#A#B# \r\nT=#B#A#\r\n<strong>Output:</strong>\r\n0\r\n<strong>Explanation:</strong>\r\nHere first A in S is left to the \r\nA in T and according to the condition,\r\nA cant move towards right,so S cant \r\nbe converted into T.</pre>\r\n\r\n<p><br />\r\n<strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>isItPossible() </strong>which takes the two strings S, T and their respective lengths M and N as input parameters and returns 1 if S can be converted into T. Otherwise, it returns 0.</p>\r\n\r\n<p><br />\r\n<strong>Expected Time Complexity:&nbsp;</strong>O(M+N) where M is size of string S and N is size of string T.<br />\r\n<strong>Expected Auxillary Space:&nbsp;</strong>O(1)<br />\r\n&nbsp;</p>\r\n\r\n<p><strong>Constraints:</strong><br />\r\n1&lt;=M,N&lt;=100000</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings S and T, containing only the characters 'A', 'B', and '#', determine if it's possible to transform S into T using the following operations:\n\n1. 'A' can only move to the left (swap with the character to its left).\n2. 'B' can only move to the right (swap with the character to its right).\n3. 'A' and 'B' cannot cross each other during these moves.\n",
                "constraints": [
                    "1 <= M, N <= 100000, where M is the length of string S and N is the length of string T."
                ],
                "testcases": [
                    {
                        "input": "S=#A#B#B#\nT=A###B#B",
                        "output": "1",
                        "explanation": "The 'A' in S is to the right of the 'A' in T, so it can move left. The first 'B' in S is to the left of the 'B' in T, so it can move right. The same applies to the second 'B'. Therefore, S can be converted into T."
                    },
                    {
                        "input": "S=#A#B#\nT=#B#A#",
                        "output": "0",
                        "explanation": "The 'A' in S is to the left of the 'A' in T. Since 'A' cannot move to the right, S cannot be converted into T."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>If the sizes of the two strings are not the same, then the strings can never be the same.</p>",
            "<p>If the frequency of A and B&nbsp;in&nbsp;the two strings are not the same, then the strings can never be the same.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "constructive algo",
                "slug": "constructive-algo"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to check if two strings can be transformed into each other\n    int isItPossible(string S, string T, int M, int N) {\n        \n        int i=0, j=0;\n        \n        // If the lengths of the strings are not equal, return 0\n        if(M!=N) return 0;\n        \n        while(i<M || j<N){\n            \n            // Skip '#' characters in both strings\n            while(S[i]=='#') i++;\n            while(T[j]=='#') j++;\n            \n            // If one string ends before the other, return 0\n            if(i>=M && j<N) return 0;\n            if(i<M && j>=N) return 0;\n            \n            // If the characters at current positions do not match, return 0\n            if(S[i]!=T[j]) return 0;\n            else{\n                // If the character is 'A' and its index is greater than 'B', return 0\n                if(S[i]=='A' && i<j) return 0;\n                // If the character is 'B' and its index is greater than 'A', return 0\n                else if(S[i]=='B' && i>j) return 0;\n            }\n            \n            // Move to the next position in both strings\n            i++;\n            j++;\n        }\n        \n        // If all conditions are satisfied, return 1\n        return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    int isItPossible(String S, String T, int M, int N) {\n        // initializing pointers i and j\n        int i=0, j=0;\n        \n        // checking if lengths of two strings are equal\n        if(M!=N) return 0;\n        \n        // looping until we reach the end of both strings\n        while(i<M || j<N){\n            \n            // skipping '#' characters in S\n            while(i<M && S.charAt(i)=='#') i++;\n            \n            // skipping '#' characters in T\n            while(j<N && T.charAt(j)=='#') j++;\n            \n            // if one string has more characters than the other\n            if(i>=M && j<N) return 0;\n            if(i<M && j>=N) return 0;\n            \n            // if the characters at the current positions are not equal\n            if(i<M && j<N && S.charAt(i)!=T.charAt(j)) return 0;\n            else{\n                // if character at i is 'A' and i is less than j, return 0\n                if(i<M && S.charAt(i)=='A' && i<j) return 0;\n                // if character at i is 'B' and i is greater than j, return 0\n                else if(i<M && S.charAt(i)=='B' && i>j) return 0;\n            }\n            \n            // incrementing i and j\n            i++;\n            j++;\n        }\n        \n        // returning 1 if both strings are equal\n        return 1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    # Function to check if it is possible to transform one string into another\r\n    def isItPossible(sef, S, T, M, N):\r\n        i=0\r\n        j=0\r\n        \r\n        # If the lengths of the two strings are not equal, return 0\r\n        if M!=N:\r\n            return 0\r\n        \r\n        while i<M or j<N:\r\n            # Skip over '#' characters in string S\r\n            while i<M and S[i]==\"#\":\r\n                i+=1\r\n            \r\n            # Skip over '#' characters in string T\r\n            while j<N and T[j]==\"#\":\r\n                j+=1\r\n            \r\n            # If one string ends before the other, return 0\r\n            if i>=M and j<N:\r\n                return 0\r\n            if i<M and j>=N:\r\n                return 0\r\n            \r\n            # If both strings end together, return 1\r\n            if i>=M and j>=N:\r\n                return 1\r\n            \r\n            # If two characters are not equal, return 0\r\n            if S[i]!=T[j]:\r\n                return 0\r\n            else:\r\n                # If the character is 'A' and its position in S is greater than its position in T, return 0\r\n                if S[i]==\"A\" and i<j:\r\n                    return 0\r\n                # If the character is 'B' and its position in S is less than its position in T, return 0\r\n                elif S[i]==\"B\" and i>j:\r\n                    return 0\r\n            \r\n            # Move to the next characters in both strings\r\n            i+=1\r\n            j+=1\r\n        \r\n        # If all conditions are met, return 1\r\n        return 1",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @param {string} T\n * @param {number} M\n * @param {number} N\n * @returns {boolean}\n*/\n\nclass Solution {\n    //Function to check whether it is possible\n    isItPossible(S, T, M, N)\n    {\n        let i = 0;\n        let j = 0;\n\n        // If the lengths of the two strings are not equal, return 0\n        if (M != N) {\n            return 0;\n        }\n\n        while (i < M || j < N) {\n            // Skip over '#' characters in string S\n            while (i < M && S[i] == \"#\") {\n                i += 1;\n            }\n\n            // Skip over '#' characters in string T\n            while (j < N && T[j] == \"#\") {\n                j += 1;\n            }\n\n            // If one string ends before the other, return 0\n            if (i >= M && j < N) {\n                return 0;\n            }\n            if (i < M && j >= N) {\n                return 0;\n            }\n\n            // If both strings end together, return 1\n            if (i >= M && j >= N) {\n                return 1;\n            }\n\n            // If two characters are not equal, return 0\n            if (S[i] != T[j]) {\n                return 0;\n            } else {\n                // If the character is 'A' and its position in S is greater than its position in T, return 0\n                if (S[i] == \"A\" && i < j) {\n                    return 0;\n                }\n                // If the character is 'B' and its position in S is less than its position in T, return 0\n                else if (S[i] == \"B\" && i > j) {\n                    return 0;\n                }\n            }\n\n            // Move to the next characters in both strings\n            i += 1;\n            j += 1;\n        }\n\n        // If all conditions are met, return 1\n        return 1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}