{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704687,
            "title": "Check if it is possible to survive on Island",
            "titleSlug": "check-if-it-is-possible-to-survive-on-island4922",
            "content": "<p><span style=\"font-size: 18px;\">Geekina got stuck on an island. There is only one shop on this island and it is open on all days of the week except for Sunday. Consider following constraints:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">N &ndash; The maximum unit of food you can buy each day.</span></li>\n<li><span style=\"font-size: 18px;\">S &ndash; Number of days you are required to survive.</span></li>\n<li><span style=\"font-size: 18px;\">M &ndash; Unit of food required each day to survive.</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\">Currently, it&rsquo;s Monday, and she needs to survive for the next S days.<br /><strong>Find the minimum number of days on which you need to buy food from the shop so that she can survive the next S days,&nbsp;</strong>or determine that it isn&rsquo;t possible to survive. </span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> S = 10, N = 16, M = 2\n<strong>Output:</strong> 2\n<strong>Explaination:</strong> One possible solution is to \nbuy a box on the first day (Monday), \nit&rsquo;s sufficient to eat from this box up to \n8th day (Monday) inclusive. Now, on the 9th \nday (Tuesday), you buy another box and use \nthe chocolates in it to survive the 9th and \n10th day.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> S = 10, N = 9, M = 8\n<strong>Output:</strong> -1\n<strong>Explaination:</strong> </span><span style=\"font-size: 18px;\">Let's start by detailing the days of the week and the net number of food units available after purchasing and consuming them:\nMonday - Net 1 food unit available.\nTuesday - Net 2 food units available.\nWednesday - Net 3 food units available.\nThursday - Net 4 food units available.\nFriday - Net 5 food units available.\nSaturday - Net 6 food units available.\nSunday - 6 food units available and that is not sufficient amount of food units to survive and you can't buy more on Sunday.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>minimumDays()</strong> which takes S, N, and M as input parameters and returns the minimum number of days Geekina needs to buy food. Otherwise, returns -1 if she cannot survive.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(1)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N, S &le; 50<br />1 &le; M &le; 30</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Check maximum how many days can you survive buying food for just one day.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Puzzles",
                "slug": "puzzles"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    int minimumDays(int S, int N, int M) {\n        int total = 0, req = S * M;\n        int cn = 0;\n        for (int i = 1; i <= S; i++) {\n            if (i % 7 != 0)\n                total += N - M, cn++;\n            else\n                total -= M;\n\n            req -= M;\n\n            if (total >= req)\n                break;\n            if (total < 0)\n                return -1;\n        }\n        return cn;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int minimumDays(int S, int N, int M)\n    {\n        // If we can not buy at least a week\n        // supply of food during the first week\n        // OR We can not buy a day supply of food\n        // on the first day then we can't survive.\n        if (((N * 6) < (M * 7) && S > 6) || M > N)\n            return -1;\n        else{\n            // If we can survive then we can\n            // buy ceil(A/N) times where A is\n            // total units of food required.\n            int days = (M * S) / N;\n            if (((M * S) % N) != 0)\n                days++;\n            return days;\n        }\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n  minimumDays(S, N, M) {\n    if (((N * 6) < (M * 7) && S > 6) || M > N)\n      return -1;\n    else {\n      let days = Math.ceil((M * S) / N);\n      return days;\n    }\n  }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}