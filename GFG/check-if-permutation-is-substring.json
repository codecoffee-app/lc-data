{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 885662,
            "title": "Check if Permutation is Substring",
            "titleSlug": "check-if-permutation-is-substring",
            "content": "<p><span >Given two strings <strong>txt </strong>and <strong>pat </strong>having lowercase letters, the task is to check if any permutation of <strong>pat</strong> is a substring of <strong>txt</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:&nbsp;</strong>txt = \"geeks\", pat = \"eke\"<br /><strong>Output: </strong>true<strong><br />Explanation:</strong> \"eek\" is a permutation of \"eke\" which exists in \"geeks\".</span></pre>\n<pre><span ><strong>Input:&nbsp;</strong>txt = \"programming\", pat = \"rain\"<br /><strong>Output: </strong>false<strong><br />Explanation:</strong> No permutation of \"rain\" exists as a substring in \"programming\".<br /></span></pre>\n<p><span ><strong style=\"font-size: 18.6667px;\">Constraints:</strong><br style=\"font-size: 18.6667px;\" /><span style=\"font-size: 18.6667px;\">1 &le; txt.size() &le; 10</span><sup>5</sup><br style=\"font-size: 18.6667px;\" /><span style=\"font-size: 18.6667px;\">1 &le; pat.size()&nbsp;</span><span style=\"font-size: 18.6667px;\">&le;</span><span style=\"font-size: 18.6667px;\">&nbsp;txt.size()</span><br style=\"font-size: 18.6667px;\" /><span style=\"font-size: 18.6667px;\">Both the strings consist of lowercase English alphabets.</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings `txt` and `pat` containing lowercase letters, determine if any permutation of `pat` is a substring of `txt`.",
                "constraints": [
                    "1 <= txt.size() <= 100000",
                    "1 <= pat.size() <= txt.size()",
                    "Both strings consist of lowercase English alphabets."
                ],
                "testcases": [
                    {
                        "input": "txt = \"geeks\", pat = \"eke\"",
                        "output": "true",
                        "explanation": "The substring \"eek\" is a permutation of \"eke\" and exists within \"geeks\"."
                    },
                    {
                        "input": "txt = \"programming\", pat = \"rain\"",
                        "output": "false",
                        "explanation": "No permutation of \"rain\" can be found as a substring in \"programming\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Count the occurrences of characters in pat and use sliding window on txt to match the count with substring of txt.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    const int MAX_CHAR = 26;\n\n    // check if all characters have 0 frequency\n    bool check(vector<int>& freq) {\n        for (int i = 0; i < MAX_CHAR; i++) {\n            if (freq[i] != 0)\n                return false;\n        }\n        return true;\n    }\n\n    bool search(string& txt, string& pat) {\n        int n = txt.length();\n        int m = pat.length();\n\n        vector<int> freq(MAX_CHAR, 0);\n\n        // construct the first window\n        for (int i = 0; i < m; i++) {\n            freq[txt[i] - 'a'] += 1;\n            freq[pat[i] - 'a'] -= 1;\n        }\n\n        // Check for first window\n        if (check(freq))\n            return true;\n\n        for (int i = m; i < n; i++) {\n            // Add the ith character into the window\n            freq[txt[i] - 'a'] += 1;\n\n            // Remove the (i - m)th character from the window\n            freq[txt[i - m] - 'a'] -= 1;\n\n            // Check for the current window\n            if (check(freq))\n                return true;\n        }\n\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static final int MAX_CHAR = 26;\n\n    // check if all characters have 0 frequency\n    static boolean check(int[] freq) {\n        for (int i = 0; i < MAX_CHAR; i++) {\n            if (freq[i] != 0) return false;\n        }\n        return true;\n    }\n\n    boolean search(String txt, String pat) {\n        int n = txt.length();\n        int m = pat.length();\n\n        // construct the first window\n        int[] freq = new int[MAX_CHAR];\n        Arrays.fill(freq, 0);\n        for (int i = 0; i < m; i++) {\n            freq[txt.charAt(i) - 'a'] += 1;\n            freq[pat.charAt(i) - 'a'] -= 1;\n        }\n\n        // Check for first window\n        if (check(freq)) return true;\n\n        for (int i = m; i < n; i++) {\n\n            // Add the ith character into the window\n            freq[txt.charAt(i) - 'a'] += 1;\n\n            // Remove the (i - m)th character from the window\n            freq[txt.charAt(i - m) - 'a'] -= 1;\n\n            // Check for the current window\n            if (check(freq)) return true;\n        }\n\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    MAX_CHAR = 26\n\n    # check if all characters have 0 frequency\n    def check(self, freq):\n        for i in range(self.MAX_CHAR):\n            if freq[i] != 0:\n                return False\n        return True\n\n    def search(self, txt, pat):\n        n = len(txt)\n        m = len(pat)\n\n        # construct the first window\n        freq = [0] * self.MAX_CHAR\n        for i in range(m):\n            freq[ord(txt[i]) - ord('a')] += 1\n            freq[ord(pat[i]) - ord('a')] -= 1\n\n        # Check for first window\n        if self.check(freq):\n            return True\n\n        for i in range(m, n):\n\n            # Add the ith character into the window\n            freq[ord(txt[i]) - ord('a')] += 1\n\n            # Remove the (i - m)th character from the window\n            freq[ord(txt[i - m]) - ord('a')] -= 1\n\n            # Check for the current window\n            if self.check(freq):\n                return True\n\n        return False\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    static MAX_CHAR = 26;\n\n    // check if all characters have 0 frequency\n    check(freq) {\n        for (let i = 0; i < Solution.MAX_CHAR; i++) {\n            if (freq[i] !== 0) return false;\n        }\n        return true;\n    }\n\n    search(txt, pat) {\n        let n = txt.length;\n        let m = pat.length;\n\n        // construct the first window\n        let freq = new Array(Solution.MAX_CHAR).fill(0);\n        for (let i = 0; i < m; i++) {\n            freq[txt.charCodeAt(i) - 'a'.charCodeAt(0)] += 1;\n            freq[pat.charCodeAt(i) - 'a'.charCodeAt(0)] -= 1;\n        }\n\n        // Check for first window\n        if (this.check(freq)) return true;\n\n        for (let i = m; i < n; i++) {\n\n            // Add the ith character into the window\n            freq[txt.charCodeAt(i) - 'a'.charCodeAt(0)] += 1;\n\n            // Remove the (i - m)th character from the window\n            freq[txt.charCodeAt(i - m) - 'a'.charCodeAt(0)] -= 1;\n\n            // Check for the current window\n            if (this.check(freq)) return true;\n        }\n\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}