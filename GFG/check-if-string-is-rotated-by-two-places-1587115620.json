{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701296,
            "title": "String Rotated by 2 Places",
            "titleSlug": "check-if-string-is-rotated-by-two-places-1587115620",
            "content": "<p><span >Given two strings <strong>s1 </strong>and <strong>s2</strong>. Return true if the string <strong>s2</strong> can be obtained by rotating&nbsp;(<strong>in any direction</strong>) string <strong>s1</strong> by <strong>exactly 2</strong> places, otherwise, false.</span></p>\n<p><span ><strong>Note:</strong> Both rotations should be performed in same direction chosen initially.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s1 = \"amazon\", s2 = \"azonam\"\n<strong>Output: </strong>true<strong>\nExplanation: \"</strong>amazon\" can be rotated anti-clockwise by two places, which will make it as \"azonam\".\n</span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"geeksforgeeks\", s2 = \"geeksgeeksfor\"\n<strong>Output: </strong>false<strong>\nExplanation: </strong>If we rotate \"geeksforgeeks\" by two place in any direction, we won't get \"geeksgeeksfor\".<br /></span></pre>\n<pre><span ><strong >Input: </strong><span >s1 = \"ab\", s2 = \"ab\"\n</span><strong >Output: </strong><span >true<br /></span><span style=\"font-size: 18.6667px;\"><strong>Explanation:</strong> If we rotate \"ab\" by two place in any direction, we always get \"ab\".</span></span></pre>\n<p><span ><strong>Challenge: </strong>Try doing it in O(1) space complexity</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; s1.length, s2.length &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, determine if `s2` can be obtained by rotating `s1` by exactly two positions (either clockwise or counter-clockwise). The rotation direction must be consistent.",
                "constraints": [
                    "1 <= s1.length, s2.length <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "s1 = \"amazon\", s2 = \"azonam\"",
                        "output": "true",
                        "explanation": "`s2` can be obtained by rotating `s1` counter-clockwise by two positions."
                    },
                    {
                        "input": "s1 = \"geeksforgeeks\", s2 = \"geeksgeeksfor\"",
                        "output": "false",
                        "explanation": "Rotating `s1` by two positions in either direction will not result in `s2`."
                    },
                    {
                        "input": "s1 = \"ab\", s2 = \"ab\"",
                        "output": "true",
                        "explanation": "Rotating `s1` by two positions in either direction results in `s2`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check if rotating 2 places in either direction matches the target.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if a string can be obtained by rotating\n    // another string by exactly 2 places.\n    bool isRotated(string& str1, string& str2) {\n        if (str1.length() != str2.length())\n            return false;\n\n        if (str1.length() <= 2 || str2.length() <= 2)\n            return (str1 == str2);\n\n        string clock_rot = \"\";\n        string anticlock_rot = \"\";\n        int len = str2.length();\n\n        // storing anti-clockwise rotation of string by concatenating\n        // substring of size two from end to the starting of the string.\n        anticlock_rot =\n            anticlock_rot + str2.substr(len - 2, 2) + str2.substr(0, len - 2);\n\n        // storing clockwise rotation of string by concatenating substring\n        // of size two from beginning to the end of the string.\n        clock_rot = clock_rot + str2.substr(2) + str2.substr(0, 2);\n\n        // checking if any of them is equal to string, we return true.\n        return (str1.compare(clock_rot) == 0 || str1.compare(anticlock_rot) == 0);\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to check if a string can be obtained by rotating another string by\n    // exactly 2 places\n    static boolean isRotated(String s1, String s2) {\n        if (s1.length() != s2.length()) return false;\n\n        if (s1.length() <= 2 || s2.length() <= 2) return s1.equals(s2);\n\n        int len = s2.length();\n\n        // Storing anti-clockwise rotation of string\n        String anticlockRot = s2.substring(len - 2) + s2.substring(0, len - 2);\n\n        // Storing clockwise rotation of string\n        String clockRot = s2.substring(2) + s2.substring(0, 2);\n\n        // Checking if any of them is equal to s1\n        return s1.equals(clockRot) || s1.equals(anticlockRot);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to check if a string can be obtained by rotating\n    #another string by exactly 2 places.\n    def isRotated(self, str1, str2):\n\n        n = len(str2)\n        if (n < 3):\n            return str1 == str2\n\n        #storing anti-clockwise rotation of string by concatenating\n        #substring of size two from end to the starting of the string.\n        anticlock_str = str2[2:] + str2[0:2]\n\n        #storing clockwise rotation of string by concatenating substring\n        #of size two from beginning to the end of the string.\n        clockwise_str = str2[-2] + str2[-1] + str2[:n - 2]\n\n        #checking if any of them is equal to string, we return true.\n        if (str1 == anticlock_str or str1 == clockwise_str):\n            return True\n        return False\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Complete this function\n    // Function to check if a string can be obtained by rotating\n    // another string by exactly 2 places.\n    public bool isRotated(string str1, string str2) {\n        if (str1.Length != str2.Length) return false;\n\n        if (str1.Length <= 2 || str2.Length <= 2) return (str1 == str2);\n\n        string clock_rot = \"\";\n        string anticlock_rot = \"\";\n        int len = str2.Length;\n\n        // storing anti-clockwise rotation of string by concatenating\n        // substring of size two from end to the starting of the string.\n        anticlock_rot += str2.Substring(len - 2, 2) + str2.Substring(0, len - 2);\n\n        // storing clockwise rotation of string by concatenating substring\n        // of size two from beginning to the end of the string.\n        clock_rot += str2.Substring(2) + str2.Substring(0, 2);\n\n        // checking if any of them is equal to string, we return true.\n        return (str1.CompareTo(clock_rot) == 0 || str1.CompareTo(anticlock_rot) == 0);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {string} str1\n * @param {string} str2\n * @returns {boolean}\n */\n\nclass Solution {\n    // Function to check if a string can be obtained by rotating\n    // another string by exactly 2 places.\n    isRotated(str1, str2) {\n        if (str1.length != str2.length) return false;\n\n        if (str1.length <= 2 || str2.length <= 2) return (str1 == str2);\n\n        let clock_rot = \"\";\n        let anticlock_rot = \"\";\n        let len = str2.length;\n\n        // storing anti-clockwise rotation of string by concatenating\n        // substring of size two from end to the starting of the string.\n        anticlock_rot =\n            anticlock_rot + str2.substr(len - 2, 2) + str2.substr(0, len - 2);\n\n        // storing clockwise rotation of string by concatenating substring\n        // of size two from beginning to the end of the string.\n        clock_rot = clock_rot + str2.substr(2) + str2.substr(0, 2);\n\n        // checking if any of them is equal to string, we return true.\n        return (str1 == clock_rot || str1 == anticlock_rot);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}