{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701297,
            "title": "Strings Rotations of Each Other",
            "titleSlug": "check-if-strings-are-rotations-of-each-other-or-not-1587115620",
            "content": "<p><span >You are given two strings of equal lengths,&nbsp;<strong>s1 </strong>and&nbsp;<strong>s2</strong>. The task is to check&nbsp;if&nbsp;<strong>s2</strong>&nbsp;is a rotated version of the string&nbsp;<strong>s1</strong>.</span></p>\n<p><span >Note:&nbsp;The characters in the strings are in lowercase.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>s1 = \"<span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; text-wrap-mode: wrap;\">abcd</span><span style=\"color: #273239; font-family: Nunito, sans-serif; font-style: italic; letter-spacing: 0.162px; text-wrap-mode: wrap;\">\"</span>, s2 = \"<span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; text-wrap-mode: wrap;\">cdab</span><span style=\"color: #273239; font-family: Nunito, sans-serif; font-style: italic; letter-spacing: 0.162px; text-wrap-mode: wrap;\">\"</span>\n<strong>Output: </strong>true<strong>\nExplanation: </strong>After 2 right rotations, s1 will become equal to s2.\n</span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"<span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; text-wrap-mode: wrap;\">aab</span>\", s2 = \"<span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; text-wrap-mode: wrap;\">aba</span>\"\n<strong>Output: </strong>true<strong>\nExplanation: </strong><span style=\"color: #273239; font-family: Nunito, sans-serif; font-style: italic; letter-spacing: 0.162px; text-wrap-mode: wrap;\">After 1 left rotation, s1 will become equal to s2.</span><br /></span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"<span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; text-wrap-mode: wrap;\">abcd</span>\", s2 = \"<span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; text-wrap-mode: wrap;\">acbd</span>\"\n<strong>Output: </strong>false<strong>\nExplanation: </strong>Strings are not rotations of each other.</span></pre>\n<p><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Constraints:<br /></strong>1 &lt;= s1.size(), s2.size() &lt;= 10<sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, of equal length, determine if `s2` is a rotated version of `s1`.  Assume all characters in the strings are lowercase.",
                "constraints": [
                    "1 <= s1.size(), s2.size() <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "s1 = \"abcd\", s2 = \"cdab\"",
                        "output": "true",
                        "explanation": "`s2` is a right rotation of `s1` by two positions."
                    },
                    {
                        "input": "s1 = \"aab\", s2 = \"aba\"",
                        "output": "true",
                        "explanation": "`s2` is a left rotation of `s1` by one position."
                    },
                    {
                        "input": "s1 = \"abcd\", s2 = \"acbd\"",
                        "output": "false",
                        "explanation": "`s2` is not a rotation of `s1`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>To check if two strings are rotations of each other, try concatenating the first string to itself. This will create a new string that contains all possible rotations of the original string as substrings. Then, use an efficient string search algorithm (like KMP) to check if the second string is a substring of this concatenated result.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "oracle",
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\n  public:\n    bool KMPSearch(string pat, string txt) {\n        int M = pat.size();\n        int N = txt.size();\n\n        // create lps[] that will hold the longest prefix suffix\n        // values for pattern\n        int lps[M];\n\n        // Preprocess the pattern (calculate lps[] array)\n        computeLPSArray(pat, M, lps);\n\n        int i = 0; // index for txt[]\n        int j = 0; // index for pat[]\n        while ((N - i) >= (M - j)) {\n            if (pat[j] == txt[i]) {\n                j++;\n                i++;\n            }\n\n            if (j == M) {\n                return true;\n\n            }\n\n            // mismatch after j matches\n            else if (i < N && pat[j] != txt[i]) {\n                // Do not match lps[0..lps[j-1]] characters,\n                // they will match anyway\n                if (j != 0)\n                    j = lps[j - 1];\n                else\n                    i = i + 1;\n            }\n        }\n        return false;\n    }\n\n    // Fills lps[] for given pattern pat[0..M-1]\n    void computeLPSArray(string pat, int M, int *lps) {\n        // length of the previous longest prefix suffix\n        int len = 0;\n\n        lps[0] = 0; // lps[0] is always 0\n\n        // the loop calculates lps[i] for i = 1 to M-1\n        int i = 1;\n        while (i < M) {\n            if (pat[i] == pat[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else // (pat[i] != pat[len])\n            {\n\n                if (len != 0) {\n                    len = lps[len - 1];\n\n                    // Also, note that we do not increment\n                    // i here\n                } else // if (len == 0)\n                {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n\n    // Function to check if two strings are rotations of each other or not.\n    bool areRotations(string &s1, string &s2) {\n        if (s1.length() != s2.length())\n            return false;\n        else {\n            // we concatenate first string to itself and check if other\n            // string occurs in it as substring. If yes, then it\n            // is rotated version and we return true else false.\n            string concated = s1 + s1;\n            if (KMPSearch(s2, concated))\n                return true;\n            else\n                return false;\n        }\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public boolean KMPSearch(String pat, String txt) {\n        int M = pat.length();\n        int N = txt.length();\n\n        // create lps[] that will hold the longest prefix suffix\n        // values for pattern\n        int[] lps = new int[M];\n\n        // Preprocess the pattern (calculate lps[] array)\n        computeLPSArray(pat, M, lps);\n\n        int i = 0; // index for txt[]\n        int j = 0; // index for pat[]\n        while ((N - i) >= (M - j)) {\n            if (pat.charAt(j) == txt.charAt(i)) {\n                j++;\n                i++;\n            }\n\n            if (j == M) {\n                return true;\n            } else if (i < N && pat.charAt(j) != txt.charAt(i)) {\n                // mismatch after j matches\n                // Do not match lps[0..lps[j-1]] characters,\n                // they will match anyway\n                if (j != 0)\n                    j = lps[j - 1];\n                else\n                    i = i + 1;\n            }\n        }\n        return false;\n    }\n\n    // Fills lps[] for given pattern pat[0..M-1]\n    void computeLPSArray(String pat, int M, int[] lps) {\n        // length of the previous longest prefix suffix\n        int len = 0;\n\n        lps[0] = 0; // lps[0] is always 0\n\n        // the loop calculates lps[i] for i = 1 to M-1\n        int i = 1;\n        while (i < M) {\n            if (pat.charAt(i) == pat.charAt(len)) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else { // (pat.charAt(i) != pat.charAt(len))\n                if (len != 0) {\n                    len = lps[len - 1];\n\n                    // Also, note that we do not increment\n                    // i here\n                } else { // if (len == 0)\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n\n    // Function to check if two strings are rotations of each other or not.\n    public boolean areRotations(String s1, String s2) {\n        if (s1.length() != s2.length())\n            return false;\n        else {\n            // we concatenate first string to itself and check if other\n            // string occurs in it as substring. If yes, then it\n            // is rotated version and we return true else false.\n            String concatenated = s1 + s1;\n            if (KMPSearch(s2, concatenated))\n                return true;\n            else\n                return false;\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\ndef KMPSearch(pat, txt):\n    M = len(pat)\n    N = len(txt)\n\n    # create lps[] that will hold the longest prefix suffix\n    # values for pattern\n    lps = [0] * M\n    j = 0  # index for pat[]\n\n    # Preprocess the pattern (calculate lps[] array)\n    computeLPSArray(pat, M, lps)\n\n    i = 0  # index for txt[]\n    while (N - i) >= (M - j):\n        if pat[j] == txt[i]:\n            i += 1\n            j += 1\n\n        if j == M:\n            return True  # pattern found\n\n        # mismatch after j matches\n        elif i < N and pat[j] != txt[i]:\n            # Do not match lps[0..lps[j-1]] characters,\n            # they will match anyway\n            if j != 0:\n                j = lps[j - 1]\n            else:\n                i += 1\n    return False\n\n\n# Function to compute LPS array\ndef computeLPSArray(pat, M, lps):\n    len = 0  # length of the previous longest prefix suffix\n\n    lps[0] = 0  # lps[0] is always 0\n    i = 1\n\n    # the loop calculates lps[i] for i = 1 to M-1\n    while i < M:\n        if pat[i] == pat[len]:\n            len += 1\n            lps[i] = len\n            i += 1\n        else:\n\n            if len != 0:\n                len = lps[len - 1]\n\n                # Also, note that we do not increment i here\n            else:\n                lps[i] = 0\n                i += 1\n\n\nclass Solution:\n\n    #Function to check if two strings are rotations of each other or not.\n    def areRotations(self, s1, s2):\n\n        #we concatenate first string to itself and check if other\n        #string occurs in it as substring. If yes, then it\n        #is rotated version and we return true else false.\n        s = s1 + s1\n        if (len(s1) == len(s2) and KMPSearch(s2, s)):\n            return True\n        return False\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    KMPSearch(pat, txt) {\n        const M = pat.length;\n        const N = txt.length;\n\n        // Create lps[] that will hold the longest prefix suffix\n        // values for pattern\n        const lps = new Array(M).fill(0);\n\n        // Preprocess the pattern (calculate lps[] array)\n        this.computeLPSArray(pat, M, lps);\n\n        let i = 0; // index for txt[]\n        let j = 0; // index for pat[]\n        while (N - i >= M - j) {\n            if (pat[j] === txt[i]) {\n                j++;\n                i++;\n            }\n\n            if (j === M) {\n                return true;\n            }\n\n            // mismatch after j matches\n            else if (i < N && pat[j] !== txt[i]) {\n                // Do not match lps[0..lps[j-1]] characters,\n                // they will match anyway\n                if (j !== 0) {\n                    j = lps[j - 1];\n                } else {\n                    i = i + 1;\n                }\n            }\n        }\n        return false;\n    }\n\n    computeLPSArray(pat, M, lps) {\n        // length of the previous longest prefix suffix\n        let len = 0;\n\n        lps[0] = 0; // lps[0] is always 0\n\n        // the loop calculates lps[i] for i = 1 to M-1\n        let i = 1;\n        while (i < M) {\n            if (pat[i] === pat[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                // (pat[i] !== pat[len])\n                if (len !== 0) {\n                    len = lps[len - 1];\n\n                    // Also, note that we do not increment\n                    // i here\n                } else {\n                    // if (len === 0)\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n\n    areRotations(str1, str2) {\n        if (str1.length !== str2.length) {\n            return false;\n        } else {\n            // we concatenate first string to itself and check if other\n            // string occurs in it as substring. If yes, then it\n            // is rotated version and we return true else false.\n            const concated = str1 + str1;\n            if (this.KMPSearch(str2, concated)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}