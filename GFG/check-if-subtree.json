{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700304,
            "title": "Check if subtree",
            "titleSlug": "check-if-subtree",
            "content": "<p><span style=\"font-size: 18px;\">Given two binary trees with head reference as <strong>T</strong><strong> </strong>and <strong>S</strong> having at most <strong>N</strong> nodes. The&nbsp;task is to check if S is present as subtree in T.<br />A subtree of a tree T1 is a tree T2 consisting of a node in T1 and all of its descendants in T1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>T:&nbsp; &nbsp; &nbsp;&nbsp;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; S:&nbsp; &nbsp;3\n &nbsp; &nbsp; &nbsp;/&nbsp; &nbsp;\\&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   /\n &nbsp; &nbsp; 2&nbsp; &nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; &nbsp;  &nbsp;4\n &nbsp; /&nbsp; \\&nbsp; &nbsp; /\n&nbsp; N&nbsp; &nbsp; N&nbsp; 4\n<strong>Output: </strong>1 \n<strong>Explanation:</strong> S is present in T\n\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>T:&nbsp; &nbsp; &nbsp; 26&nbsp; &nbsp; &nbsp;   &nbsp;S: &nbsp; 26\n &nbsp; &nbsp; &nbsp;&nbsp;/&nbsp; &nbsp;\\&nbsp; &nbsp;\\t&nbsp; /&nbsp; \\\n &nbsp; &nbsp; 10&nbsp; &nbsp; &nbsp;N&nbsp; &nbsp;     10&nbsp; &nbsp;&nbsp;N\n &nbsp; /&nbsp; &nbsp; \\&nbsp; &nbsp; &nbsp; &nbsp;    /&nbsp;&nbsp;\\\n &nbsp;&nbsp;20&nbsp; &nbsp; 30&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;20&nbsp; 30\n &nbsp;/&nbsp; \\&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   /&nbsp; \\\n 40&nbsp; &nbsp;60&nbsp; &nbsp; &nbsp; &nbsp;  40&nbsp;&nbsp;60\n<strong>Output: </strong>1 \n<strong>Explanation: </strong>\nS and T are both same. Hence, \nit can be said that S is a subtree \nof T.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the <strong>function isSubtree()&nbsp;</strong>that takes root&nbsp;node of S and T as parameters<strong> </strong>and <strong>returns 1</strong> if&nbsp;S is a subtree of T else <strong>0</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:&nbsp;</strong>The nodes can&nbsp;have the duplicate values.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= Number of nodes &lt;= 10<sup>3</sup><br />1 &lt;= Value of nodes &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "makemytrip",
            "adobe",
            "sap-labs",
            "cavisson-system"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Class Solution that contains the implementation of the isSubTree function\nclass Solution {\n    // A vector to store the nodes where the depth equals the required depth\n    vector<Node*> nodes;\npublic:\n    // Function to check if T is a sub-tree of S\n    bool isSubTree(Node* S, Node* T) {\n        // If both trees are empty, they are identical\n        if (!S && !T) return true;\n        // If one of the trees is empty while the other is not, they are not identical\n        if (!S || !T) return false;\n        // Get the depth of T and use it to find nodes in S with the same depth\n        getDepth(S, getDepth(T, -1));\n        // Check if any of the nodes in S matches T\n        for (Node* n: nodes)\n            if (identical(n, T))\n                return true;\n        // If no match is found, return false\n        return false;\n    }\n    \n    // Function to get the depth of a tree and find nodes with the same depth in S\n    int getDepth(Node* r, int d) {\n        // If root is empty, return -1\n        if (!r)\n            return -1;\n        // Calculate the depth of the left and right subtrees\n        int depth = max(getDepth(r->left, d), getDepth(r->right, d)) + 1;\n        // Check if the calculated depth matches the required depth\n        // Required depth is -1 for tree T (only return the depth, no push)\n        if (depth == d)\n            nodes.push_back(r);\n        // Return the depth of the current subtree\n        return depth;\n    }\n    \n    // Function to check if two trees are identical\n    bool identical(Node* a, Node* b) {\n        // If both nodes are empty, they are identical\n        if (!a && !b) return true;\n        // If one of the nodes is empty while the other is not, they are not identical\n        if (!a || !b || a->data != b->data) return false;\n        // Recursively check if the left and right subtrees are identical\n        return identical(a->left, b->left) && identical(a->right, b->right);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    ArrayList<Node> nodes; // ArrayList to store nodes\r\n\r\n    Solution() { // constructor to initialize nodes ArrayList\r\n        nodes = new ArrayList<>();\r\n    }\r\n    \r\n    /*\r\n    * Recursive method\r\n    * Takes an int n as parameter\r\n    * If n is greater than 0, calls the recursive method again with n-1\r\n    */\r\n    public void recursive(int n) {\r\n        if(n > 0)\r\n            recursive(n-1);\r\n    }\r\n\r\n    /*\r\n    * Method to check if t is a subtree of s\r\n    * Calls the recursive method with parameter 100000 (to create some delay)\r\n    * Checks if both s and t are null, if so, returns true\r\n    * Checks if either s or t is null, if so, returns false\r\n    * Calls the getDepth method with parameters s and -1\r\n    * Iterates over the nodes ArrayList\r\n    * Checks if n is identical to t, if so, returns true\r\n    * If loop completes, returns false\r\n    */\r\n    public boolean isSubtree(Node s, Node t) {\r\n        recursive(100000);\r\n        if(s == null && t == null)\r\n            return true;\r\n        if(s == null || t == null)\r\n            return false;\r\n\r\n        getDepth(s, getDepth(t, -1));\r\n        for(Node n : nodes)\r\n            if(identical(n, t))\r\n                return true;\r\n        return false;\r\n    }\r\n\r\n    /*\r\n    * Recursive method to get the depth of tree r and add nodes to the nodes ArrayList\r\n    * Takes tree r and int d as parameters\r\n    * Checks if r is null, if so, returns -1\r\n    * Calculates the depth of r by taking the maximum depth of its left and right subtrees and adding 1\r\n    * If the calculated depth is equal to d, adds r to the nodes ArrayList\r\n    * Returns the depth\r\n    */\r\n    int getDepth(Node r, int d) {\r\n        if(r == null)\r\n            return -1;\r\n\r\n        int depth = Math.max(getDepth(r.left, d), getDepth(r.right, d)) + 1;\r\n\r\n        if(depth == d)\r\n            nodes.add(r);\r\n        return depth;\r\n    }\r\n\r\n    /*\r\n    * Recursive method to check if trees a and b are identical\r\n    * Takes trees a and b as parameters\r\n    * Checks if both a and b are null, if so, returns true\r\n    * Checks if either a or b is null or if the data in a and b is different, if so, returns false\r\n    * Recursively checks if the left subtree of a is identical to the left subtree of b\r\n    * Recursively checks if the right subtree of a is identical to the right subtree of b\r\n    * Returns the result of both recursive checks\r\n    */\r\n    boolean identical(Node a, Node b) {\r\n        if(a == null && b == null)\r\n            return true;\r\n        if(a == null || b == null || a.data != b.data)\r\n            return false;\r\n        return identical(a.left, b.left) && identical(a.right, b.right);\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\r\nclass Solution:\r\n    \r\n    def storeInorder(self, root):\r\n        if (root == None):\r\n            return '$'\r\n        res = self.storeInorder(root.left)\r\n        res += str(root.data)\r\n        res += self.storeInorder(root.right)\r\n        return res\r\n \r\n    # A utility function to store preorder traversal of tree rooted\r\n    # with root in an array arr[]. Note that i is passed as reference\r\n    def storePreOrder(self, root):\r\n        if (root == None):\r\n            return '$'\r\n        res = str(root.data)\r\n        res += self.storePreOrder(root.left)\r\n        res += self.storePreOrder(root.right)\r\n        return res\r\n       \r\n    \r\n    def isSubTree(self, T, S):\r\n        # Code here\r\n        if S==None: return True\r\n        if T==None: return False\r\n        \r\n        inS = self.storeInorder(S)\r\n        inT = self.storeInorder(T)\r\n        \r\n        res = True\r\n        if inS in inT:\r\n            res = True\r\n        else:\r\n            res = False\r\n        if(res == False):\r\n            return res\r\n        \r\n        preS = self.storePreOrder(S)\r\n        preT = self.storePreOrder(T)\r\n        \r\n        if preS in preT: return True\r\n        return False\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\n// public class Node{\n//     public int data;\n//     public Node left;\n//     public Node right;\n\n//     public Node(int x){\n//         data = x;\n//         left = right = null;\n//     }\n// }\n\nclass Solution\n{\n    //Complete this function\n    public bool isSubTree(Node T, Node S)\n    {\n        //If both trees are empty, they are identical\n        if (T == null && S == null)\n            return true;\n        //If one of the trees is empty while the other is not, they are not identical\n        if (T == null || S == null)\n            return false;\n        \n        //Get the depth of T and use it to find nodes in S with the same depth\n        GetDepth(T, GetDepth(S, -1));\n        \n        //Check if any of the nodes in S matches T\n        foreach (Node n in nodes)\n        {\n            if (Identical(n, S))\n                return true;\n        }\n        \n        //If no match is found, return false\n        return false;\n    }\n    \n    //A list to store the nodes where the depth equals the required depth\n    List<Node> nodes = new List<Node>();\n    \n    //Function to get the depth of a tree and find nodes with the same depth in T\n    private int GetDepth(Node r, int d)\n    {\n        //If root is empty, return -1\n        if (r == null)\n            return -1;\n        \n        //Calculate the depth of the left and right subtrees\n        int depth = Math.Max(GetDepth(r.left, d), GetDepth(r.right, d)) + 1;\n        \n        //Check if the calculated depth matches the required depth\n        //Required depth is -1 for tree S (only return the depth, no push)\n        if (depth == d)\n            nodes.Add(r);\n        \n        //Return the depth of the current subtree\n        return depth;\n    }\n    \n    //Function to check if two trees are identical\n    private bool Identical(Node a, Node b)\n    {\n        //If both nodes are empty, they are identical\n        if (a == null && b == null)\n            return true;\n        \n        //If one of the nodes is empty while the other is not, they are not identical\n        if (a == null || b == null || a.data != b.data)\n            return false;\n        \n        //Recursively check if the left and right subtrees are identical\n        return Identical(a.left, b.left) && Identical(a.right, b.right);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\r\n\r\nclass Solution {\r\n  constructor() {\r\n    this.nodes = [];\r\n  }\r\n\r\n  // Function to check if S is a subtree of tree T.\r\n  isSubTree(T, S) {\r\n    if (S == null && T == null) return true;\r\n    if (S == null || T == null) return false;\r\n    this.getDepth(T, this.getDepth(S, -1));\r\n    for (const n of this.nodes) {\r\n      if (this.identical(n, S)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getDepth(r, d) {\r\n    if (r == null) {\r\n      return -1;\r\n    }\r\n    const depth = Math.max(this.getDepth(r.left, d), this.getDepth(r.right, d)) + 1;\r\n    // Check if depth equals required value\r\n    // Require depth is -1 for tree t (only return the depth, no push)\r\n    if (depth == d) {\r\n      this.nodes.push(r);\r\n    }\r\n    return depth;\r\n  }\r\n\r\n  identical(a, b) {\r\n    if (a == null && b == null) return true;\r\n    if (a == null || b == null || a.data != b.data) return false;\r\n    return (this.identical(a.left, b.left) && this.identical(a.right, b.right));\r\n  }\r\n}\r\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}