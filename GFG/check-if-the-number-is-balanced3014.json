{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702987,
            "title": "Check if the number is balanced",
            "titleSlug": "check-if-the-number-is-balanced3014",
            "content": "<p><span style=\"font-size:18px\">Given an integer<strong> N </strong>which has odd number of digits, find whether the given number is a balanced or not. </span></p>\n\n<p><span style=\"font-size:18px\">An odd digit number is called a balanced number if the sum of all digits to the left of the middle digit and the sum of all digits to the right of the middle digit is equal.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 1234006\n<strong>Output:</strong> 1 \n<strong>Explanation:</strong> Total number of digits in\nN = 7. Middle digit is 4. LHS = 1+2+3 = 6\nand RHS = 0+0+6 = 6. LHS is equal to RHS. </span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 12345\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>LHS = 1+2 = 3 and RHS = 4+5\n= 9. LHS and RHS are not equal.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>balancedNumber() </strong>which takes string <strong>N</strong> as input parameter and returns a boolean value denoting if N is balanced or not.<br />\n<strong>Note: </strong>The driver code prints 1 if the returned value is true&nbsp;otherwise&nbsp;0</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(number of digits in N)<br />\n<strong>Expected Auxiliary Space: </strong>O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;= N &lt;= 10<sup>100</sup><br />\nN will always have odd number of digits.<br />\nSince N can be very large, it is given as a string.&nbsp;</span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N with an odd number of digits, determine if it's a balanced number. A number is balanced if the sum of digits to the left of the middle digit equals the sum of digits to the right of the middle digit.",
                "constraints": [
                    "1 <= N <= 10^100",
                    "N will always have an odd number of digits.",
                    "N is given as a string to handle large numbers."
                ],
                "testcases": [
                    {
                        "input": "1234006",
                        "output": "1",
                        "explanation": "N has 7 digits. The middle digit is 4. The sum of digits to the left (1+2+3) is 6, and the sum of digits to the right (0+0+6) is 6.  Since both sums are equal, the number is balanced."
                    },
                    {
                        "input": "12345",
                        "output": "0",
                        "explanation": "The sum of digits to the left of the middle digit (1+2) is 3, and the sum of digits to the right (4+5) is 9. Since the sums are not equal, the number is not balanced."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Left Sum = Sum of all digits from 0 to (length of N / 2)<br />\nRight Sum =&nbsp;Sum of all digits from ((length of N / 2)+1) to ( length of N)</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\t//Function to check if a number is balanced or not.\n\tbool balancedNumber(string N)\n\t{\n\t    int LHS_sum = 0;\n\t    int RHS_sum = 0;\n\t    int middle = N[ N.length()/2 ] - '0';\n\n\t    //Checking if the middle digit is valid.\n\t    if(middle >= 0 && middle <= 9)\n\t    {\n\t        //Calculating the sum of the digits on the left-hand side.\n\t        for(int i=0; i<N.length()/2; i++)\n\t            LHS_sum += (N[i]-'0');\n\n\t        //Calculating the sum of the digits on the right-hand side.\n\t        for(int i=(N.length()/2)+1; i<N.length(); i++)\n\t            RHS_sum += (N[i]-'0');\n\n\t        //Checking if the sums on both sides are equal.\n\t        if(LHS_sum == RHS_sum)\n\t            return true;\n\t        \n\t        else\n\t            return false;\n\t    }\n\t    else\n\t        return false;\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Sol\n{\n    Boolean balancedNumber(String N)\n    {\n        int LHS_sum = 0; //initialize sum variable for the left half of the string\n        int RHS_sum = 0; //initialize sum variable for the right half of the string\n        int middle = (int)(N.charAt (N.length()/2) - '0'); //get the middle digit of the string\n    \n        if(middle >= 0 && middle <= 9) //check if the middle digit is a valid number\n        {\n            for(int i=0; i<N.length()/2; i++)\n                LHS_sum += (int)(N.charAt (i) - '0'); //calculate the sum of the digits in the left half of the string\n    \n            for(int i=(N.length()/2)+1; i<N.length(); i++)\n                RHS_sum += (int)(N.charAt (i) - '0'); //calculate the sum of the digits in the right half of the string\n    \n            if(LHS_sum == RHS_sum) //check if the sums of the left and right halves are equal\n                return true; //return true if the sums are equal\n            \n            else\n                return false; //return false if the sums are not equal\n        }\n        else\n            return false; //return false if the middle digit is not a valid number\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    #Function to check if the number is balanced or not.\n    def balancedNumber(self, N):\n        LHS_sum = 0\n        RHS_sum = 0\n\n        #finding the middle element of the number.\n        middle = N[len(N)//2]\n\n        #checking if the middle element is a digit.\n        if middle >= '0' and middle <= '9':\n\n            #calculating the sum of digits on the left side.\n            for i in range(len(N)//2):\n                LHS_sum += int(N[i])\n\n            #calculating the sum of digits on the right side.\n            for i in range(len(N)//2 + 1, len(N)):\n                RHS_sum += int(N[i])\n\n            #checking if the sums of both sides are equal.\n            if LHS_sum == RHS_sum:\n                return True\n\n            return False\n\n        return False",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public bool balancedNumber(string N)\n    {\n        int LHS_sum = 0;\n        int RHS_sum = 0;\n        int middle = N[N.Length/2] - '0';\n\n        //Checking if the middle digit is valid.\n        if(middle >= 0 && middle <= 9)\n        {\n            //Calculating the sum of the digits on the left-hand side.\n            for(int i=0; i<N.Length/2; i++)\n                LHS_sum += (N[i]-'0');\n\n            //Calculating the sum of the digits on the right-hand side.\n            for(int i=(N.Length/2)+1; i<N.Length; i++)\n                RHS_sum += (N[i]-'0');\n\n            //Checking if the sums on both sides are equal.\n            if(LHS_sum == RHS_sum)\n                return true;\n\n            else\n                return false;\n        }\n        else\n            return false;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}