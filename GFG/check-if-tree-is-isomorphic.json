{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700609,
            "title": "Isomorphic Trees",
            "titleSlug": "check-if-tree-is-isomorphic",
            "content": "<p><span style=\"font-size: 18px;\">Given two&nbsp;Binary Trees. Check whether they are&nbsp;Isomorphic or not.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:&nbsp;</strong><br />Two trees are called isomorphic if one can be obtained from another by a series of flips, i.e. by swapping left and right children of several nodes.&nbsp;Any number of nodes at any level can have their children swapped. Two empty trees are isomorphic.<br />For example, the following two trees are isomorphic with the following sub-trees flipped: 2 and 3, NULL and 6, 7 and 8.<br /><a href=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/ISomorphicTrees-e1368593305854.png\"><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/ISomorphicTrees-e1368593305854.png\" alt=\"ISomorphicTrees\" width=\"397\" height=\"163\" /></a></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><strong>Input: </strong>root1[] = [1, 2, 3, 4, 5, 7, 6, N, 7, 8], root2[] = [1, 3, 2, N, 6, 4, 5, 8, 7]<strong><br /></strong>\n<a style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\" href=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/ISomorphicTrees-e1368593305854.png\"><img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/ISomorphicTrees-e1368593305854.png\" alt=\"ISomorphicTrees\" width=\"397\" height=\"163\" /></a><strong>\nOutput: </strong>true</pre>\n<pre><strong style=\"font-size: 18px;\">Input:</strong><span style=\"font-size: 18px;\">&nbsp;root1[] = [1, 2, 3, 4], root2[] = [1, 3, 2, 4]</span><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">  &nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1 &nbsp;</span><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">&nbsp; &nbsp; / \\&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /&nbsp; &nbsp; \\ &nbsp;</span><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">&nbsp; 2&nbsp; &nbsp; 3&nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp; &nbsp; &nbsp;2 &nbsp;</span><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">&nbsp;/&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/ &nbsp;</span><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">4</span><strong style=\"font-size: 18px;\">  &nbsp; &nbsp; &nbsp; &nbsp; </strong><span style=\"font-size: 18px;\">4</span><strong style=\"font-size: 18px;\"><br />Output:&nbsp;</strong><span style=\"font-size: 18px;\">false</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root1[] = [1, 2, 3, 4], root2[] = [1, 3, 2, N, N, N, 4]<strong><br /></strong>\n     1   &nbsp; &nbsp; &nbsp; &nbsp; 1\n&nbsp;   /  \\\\t   /   \\\n&nbsp;  2    3\\t3     2\n&nbsp; /\\t\\t\\t  \\\n&nbsp;4<strong>\\t\\t\\t\\t</strong>4<strong>\nOutput: </strong>true</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=number of nodes&lt;=10<sup>5<br /></sup>1&lt;= node-&gt;data &lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary trees, determine if they are isomorphic. Two trees are isomorphic if one can be obtained from the other by a series of flips, where a flip involves swapping the left and right children of a node.  Any number of nodes at any level can have their children swapped. Two empty trees are considered isomorphic.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node.data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root1 = [1, 2, 3, 4, 5, 7, 6, N, 7, 8], root2 = [1, 3, 2, N, 6, 4, 5, 8, 7]",
                        "output": "true",
                        "explanation": "The trees are isomorphic. Subtrees rooted at nodes 2 and 3, NULL and 6, and 7 and 8 are flipped to transform root1 into root2."
                    },
                    {
                        "input": "root1 = [1, 2, 3, 4], root2 = [1, 3, 2, 4]",
                        "output": "false",
                        "explanation": "The trees are not isomorphic. While they share the same node values, the structure cannot be transformed through node flipping."
                    },
                    {
                        "input": "root1 = [1, 2, 3, 4], root2 = [1, 3, 2, N, N, N, 4]",
                        "output": "true",
                        "explanation": "The trees are isomorphic. Flipping the children of node 1 in root1 results in a tree structurally equivalent to root2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We simultaneously traverse both trees. Let the current internal nodes of two trees being traversed be&nbsp;<strong>n1&nbsp;</strong>and&nbsp;<strong>n2</strong>&nbsp;respectively. There are following two conditions for subtrees rooted with n1 and n2 to be isomorphic.<br />\n<strong>1)</strong>&nbsp;Data of n1 and n2 is same.<br />\n<strong>2)&nbsp;</strong>One of the following two is true for children of n1 and n2<br />\n&nbsp; &nbsp; &nbsp; &nbsp;<strong>a)</strong>&nbsp;Left child of n1 is isomorphic to left child of n2 and right child of n1 is isomorphic to right child of n2.<br />\n&nbsp; &nbsp; &nbsp; &nbsp;<strong>b)</strong>&nbsp;Left child of n1 is isomorphic to right child of n2 and right child of n1 is isomorphic to left child of n2.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool isIsomorphic(Node* root1, Node* root2) {\n        // Both roots are NULL, trees isomorphic by definition\n        if (root1 == NULL && root2 == NULL)\n            return true;\n\n        // Exactly one of the root1 and root2 is NULL, trees not isomorphic\n        if (root1 == NULL || root2 == NULL)\n            return false;\n\n        if (root1->data != root2->data)\n            return false;\n\n        // There are two possible cases for root1 and root2 to be isomorphic\n        // Case 1: The subtrees rooted at these nodes have NOT been \"Flipped\".\n        // Both of these subtrees have to be isomorphic, hence the &&\n        // Case 2: The subtrees rooted at these nodes have been \"Flipped\"\n        return (isIsomorphic(root1->left, root2->left) &&\n                isIsomorphic(root1->right, root2->right)) ||\n               (isIsomorphic(root1->left, root2->right) &&\n                isIsomorphic(root1->right, root2->left));\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Removed duplicate declaration of root2\n    Node root2;\n\n    /* Given a binary tree, print its nodes in reverse level order */\n    boolean isIsomorphic(Node root1, Node root2) {\n        // Both roots are NULL, trees are isomorphic by definition\n        if (root1 == null && root2 == null) return true;\n\n        // Exactly one of the root1 and root2 is NULL, trees are not isomorphic\n        if (root1 == null || root2 == null) return false;\n\n        if (root1.data != root2.data) return false;\n\n        // There are two possible cases for root1 and root2 to be isomorphic\n        // Case 1: The subtrees rooted at these nodes have NOT been\n        // \"Flipped\".\n        // Both of these subtrees have to be isomorphic.\n        // Case 2: The subtrees rooted at these nodes have been \"Flipped\"\n        return (isIsomorphic(root1.left, root2.left) &&\n                isIsomorphic(root1.right, root2.right)) ||\n            (isIsomorphic(root1.left, root2.right) &&\n             isIsomorphic(root1.right, root2.left));\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Check if the binary tree is isomorphic or not\n    def isIsomorphic(self, root1, root2):\n\n        # Both roots are None, trees isomorphic by definition\n        if root1 is None and root2 is None:\n            return True\n\n        # Exactly one of the root1 and root2 is None, trees are not\n        # isomorphic\n        if root1 is None or root2 is None:\n            return False\n\n        if root1.data != root2.data:\n            return False\n        # There are two possible cases for root1 and root2 to be isomorphic\n        # Case 1: The subtrees rooted at these nodes have NOT\n        # been \"Flipped\".\n        # Both of these subtrees have to be isomorphic, hence the &&\n        # Case 2: The subtrees rooted at these nodes have\n        # been \"Flipped\"\n        return ((self.isIsomorphic(root1.left, root2.left)\n                 and self.isIsomorphic(root1.right, root2.right))\n                or (self.isIsomorphic(root1.left, root2.right)\n                    and self.isIsomorphic(root1.right, root2.left)))\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/*\nclass Node\n{\n    constructor(x){\n        this.data=x;\n        this.left=null;\n        this.right=null;\n    }\n}\n*/\n\n/**\n * @param {Node} root1\n * @param {Node} root2\n * @return {boolean}\n */\nclass Solution {\n    isIsomorphic(root1, root2) {\n        // Both roots are NULL, trees isomorphic by definition\n        if (root1 === null && root2 === null) return true;\n\n        // Exactly one of the root1 and root2 is NULL, trees not isomorphic\n        if (root1 === null || root2 === null) return false;\n\n        if (root1.data !== root2.data) return false;\n\n        // There are two possible cases for root1 and root2 to be isomorphic\n        // Case 1: The subtrees rooted at these nodes have NOT been \"Flipped\".\n        // Both of these subtrees have to be isomorphic, hence the &&\n        // Case 2: The subtrees rooted at these nodes have been \"Flipped\"\n        return ((this.isIsomorphic(root1.left, root2.left) &&\n                 this.isIsomorphic(root1.right, root2.right)) ||\n                (this.isIsomorphic(root1.left, root2.right) &&\n                 this.isIsomorphic(root1.right, root2.left)));\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}