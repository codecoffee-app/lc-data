{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701742,
            "title": "Check Equal Arrays",
            "titleSlug": "check-if-two-arrays-are-equal-or-not3847",
            "content": "<p><span style=\"font-size: 18px;\">Given two arrays <strong>a[]</strong> and <strong>b[] </strong>of equal size, the task is to find whether the elements in the arrays are equal. </span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\">Two arrays are said to be equal if both contain the same set of elements, arrangements (or permutations) of elements may be different though.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\">Note: If there are repetitions, then counts of repeated elements must also be the same for two arrays to be equal.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a[] = [1, 2, 5, 4, 0], b[] = [2, 4, 5, 0, 1]\n<strong>Output: </strong>true<strong>\nExplanation: </strong>Both the array can be rearranged to [0,1,2,4,5]</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a[] = [1, 2, 5], b[] = [2, 4, 15]\n<strong>Output: </strong>false<strong>\nExplanation: </strong>a[] and b[] have only one common value.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= a.size(), b.size()&lt;=10<sup>7</sup><br />0&lt;=a[i], b[i]&lt;=10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `a[]` and `b[]`, of equal size, determine if they contain the same elements, considering repetitions. The order of elements within the arrays does not matter. Two arrays are considered equal if they have the same elements with the same frequency.",
                "constraints": [
                    "1 <= a.size(), b.size() <= 10^7",
                    "0 <= a[i], b[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "a[] = [1, 2, 5, 4, 0], b[] = [2, 4, 5, 0, 1]",
                        "output": "true",
                        "explanation": "Both arrays contain the same elements with the same counts.  They can be rearranged to [0, 1, 2, 4, 5]."
                    },
                    {
                        "input": "a[] = [1, 2, 5], b[] = [2, 4, 15]",
                        "output": "false",
                        "explanation": "The arrays do not contain the same set of elements."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Ensuring both have the same elements with the same counts.&nbsp;</p>",
            "<p>Use hash maps to count occurrences of each element in both arrays and compare these counts.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "goldman-sachs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// back-end complete function template fopr C++\n\nclass Solution {\n  public:\n    // Function to check if two arrays are equal or not.\n    bool checkEqual(vector<int>& a, vector<int>& b) {\n        // Check if the sizes of the arrays are different\n        if (a.size() != b.size()) {\n            return false;\n        }\n\n        // using a map to store frequency of elements.\n        unordered_map<int, int> mp;\n\n        // incrementing frequencies of elements present in first array in the map.\n        for (int num : a)\n            mp[num]++;\n\n        // decrementing frequencies of elements present in second array in the map.\n        for (int num : b)\n            mp[num]--;\n\n        // iterating over the map.\n        for (auto it = mp.begin(); it != mp.end(); ++it) {\n            // if frequency of any element in map now is not zero it means that its\n            // count in two arrays was not equal so the arrays are not equal.\n            if (it->second != 0) {\n                // returning false since arrays are not equal.\n                return false;\n            }\n        }\n        // returning true if arrays are equal.\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to check if two arrays are equal or not.\n    public static boolean checkEqual(int[] a, int[] b) {\n        // Check if arrays have the same length\n        if (a.length != b.length) {\n            return false;\n        }\n\n        // using a HashMap to store frequency of elements.\n        HashMap<Integer, Integer> hm = new HashMap<>();\n\n        // incrementing frequencies of elements present in first array in HashMap.\n        for (int num : a) {\n            hm.put(num, hm.getOrDefault(num, 0) + 1);\n        }\n\n        // decrementing frequencies of elements present in second array in the HashMap.\n        for (int num : b) {\n            if (hm.containsKey(num)) {\n                hm.put(num, hm.get(num) - 1);\n            } else {\n                return false; // If element not in a\n            }\n        }\n\n        // Check if all frequencies are zero\n        for (int count : hm.values()) {\n            if (count != 0) {\n                return false;\n            }\n        }\n\n        // If all checks passed, arrays are equal\n        return true;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to check if two arrays are equal or not.\n    def checkEqual(self, a, b) -> bool:\n        # using a dictionary to store frequency of elements.\n        mp = {}\n\n        # Check if lengths of arrays are equal\n        if len(a) != len(b):\n            return False\n\n        # incrementing frequencies of elements present in first array in the dictionary.\n        for num in a:\n            if num in mp:\n                mp[num] += 1\n            else:\n                mp[num] = 1\n\n        # decrementing frequencies of elements present in second array in the dictionary.\n        for num in b:\n            if num not in mp or mp[num] == 0:\n                return False\n            mp[num] -= 1\n\n        # iterating over the dictionary.\n        for count in mp.values():\n            # if frequency of any element in dictionary now is not zero it means that its\n            # count in two arrays was not equal so the arrays are not equal.\n            if count != 0:\n                # returning false since arrays are not equal.\n                return False\n\n        # returning true if arrays are equal.\n        return True\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for JavaScript\n\n/**\n * @param {number[]} a\n * @param {number[]} b\n * @returns {boolean}\n */\nclass Solution {\n    // Function to check if two arrays are equal or not.\n    checkEqual(a, b) {\n        // Using Maps to store frequency of elements.\n        let mp1 = new Map();\n        let mp2 = new Map();\n\n        // Incrementing frequencies of elements present in first array in mp1.\n        for (let num of a) {\n            mp1.set(num, (mp1.get(num) || 0) + 1);\n        }\n\n        // Incrementing frequencies of elements present in second array in mp2.\n        for (let num of b) {\n            mp2.set(num, (mp2.get(num) || 0) + 1);\n        }\n\n        // Comparing the maps mp1 and mp2.\n        for (let [key, value] of mp1) {\n            if (mp2.get(key) !== value) {\n                return false;\n            }\n        }\n\n        // If all elements have equal frequencies, return true.\n        return true;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}