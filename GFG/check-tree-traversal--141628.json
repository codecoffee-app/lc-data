{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704544,
            "title": "Check Tree Traversal",
            "titleSlug": "check-tree-traversal--141628",
            "content": "<p><span style=\"font-size: 18px;\">Given Preorder, Inorder and Postorder traversals of some tree of size <strong>N</strong>. The task is to check if they are all of the same tree or not.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 5\npreorder[] = {1, 2, 4, 5, 3}\ninorder[] = {4, 2, 5, 1, 3}\npostorder[] = {4, 5, 2, 3, 1}\n<strong>Output:</strong> Yes\n<strong>Explanation: </strong>\nAll of the above three traversals \nare of the same tree.\n\\t     1\n\\t   /   \\\n\\t  2     3\n\\t/   \\\n     4     5</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 5\npreorder[] = {1, 5, 4, 2, 3}\ninorder[] = {4, 2, 5, 1, 3}\npostorder[] = {4, 1, 2, 3, 5}\n<strong>Output:</strong> No\n<strong>Explanation: </strong>The three traversals can \nnot be of the same tree.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Complete the function <strong>checktree() </strong>which takes the array&nbsp;<strong>preorder[ ]</strong>, <strong>inorder[ ]</strong>, <strong>postorder[ ]</strong> and&nbsp;integer <strong>N</strong> as input parameters and returns true if the three traversals are of the same tree or not.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>3</sup></span><br /><span style=\"font-size: 18px;\">Node values are unique.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the preorder, inorder, and postorder traversals of a binary tree of size N, determine if these traversals represent the same tree structure.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "Node values are unique."
                ],
                "testcases": [
                    {
                        "input": "N = 5\npreorder[] = {1, 2, 4, 5, 3}\ninorder[] = {4, 2, 5, 1, 3}\npostorder[] = {4, 5, 2, 3, 1}",
                        "output": "Yes",
                        "explanation": "The provided preorder, inorder, and postorder sequences represent the same binary tree structure.  For instance, a possible tree is:\n\t     1\n\t   /   \\\n\t  2     3\n\t/   \\\n     4     5"
                    },
                    {
                        "input": "N = 5\npreorder[] = {1, 5, 4, 2, 3}\ninorder[] = {4, 2, 5, 1, 3}\npostorder[] = {4, 1, 2, 3, 5}",
                        "output": "No",
                        "explanation": "The given preorder, inorder, and postorder sequences do not correspond to a single, consistent binary tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<ol>\n\t<li><span style=\"font-size:18px\">The root element will be the first element of preorder.</span></li>\n\t<li><span style=\"font-size:18px\">Search for root in the inorder array and store it&rsquo;s index as idx.&nbsp;</span></li>\n\t<li><span style=\"font-size:18px\">Use this idx to determine elements of left and right subtree in all three traversal arrays.&nbsp;</span></li>\n\t<li><span style=\"font-size:18px\">Call function recursively for both left and right sub tree.</span></li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    bool checktree(int preorder[], int inorder[], int postorder[], int N) \n    { \n    \t// if the array lengths are 0 then all of them are obviously equal \n    \tif (N == 0) \n    \t\treturn 1; \n    \n    \t// if array lengths are 1, then check if all of them are equal \n    \tif (N == 1) \n    \t\treturn (preorder[0] == inorder[0]) && (inorder[0] == postorder[0]); \n    \n    \t// search for first element of preorder in inorder array \n    \tint idx = -1; \n    \tfor (int i = 0; i < N; ++i) \n    \t\tif (inorder[i] == preorder[0]) { \n    \t\t\tidx = i; \n    \t\t\tbreak; \n    \t\t} \n    \n    \tif (idx == -1) \n    \t\treturn 0;\n    \t\n    \t// matching element in postorder array\n    \tif( preorder[0] != postorder[N-1] ) return false;\n    \n    \t// check for the left subtree \n    \tint ret1 = checktree(preorder + 1, inorder, postorder, idx); \n    \n    \t// check for the right subtree \n    \tint ret2 = checktree(preorder + idx + 1, inorder + idx + 1, postorder + idx, N - idx - 1); \n    \n    \t// return 1 only if both of them are correct else 0 \n    \treturn (ret1 && ret2); \n    } \n\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    static boolean check(int preorder[], int i1, int inorder[], int i2, int postorder[], int i3, int len)\n    {\n        if(len==0) return true;\n        \n        // if array lengths are 1, then check if all of them are equal \n        if(len==1) return ( (preorder[i1]==inorder[i2]) && (inorder[i2] == postorder[i3]) );\n        \n        // search for first element of preorder in inorder array \n        int idx=-1;\n        for(int i=0 ; i<len ; i+=1)\n            if( inorder[i2+i] == preorder[i1] )\n            {\n                idx = i2+i;\n                break;\n            }\n        if(idx==-1) return false;\n        \n        // matching element in postorder array\n        if( preorder[i1] != postorder[i3+len-1] ) return false;\n        \n        // nodes in left subtree =\n        int left = idx-i2;\n        \n        // check for the left subtree \n        boolean ret1 = check(preorder, i1+1, inorder, i2, postorder, i3, left);\n        \n        // check for the right subtree \n        boolean ret2 = check(preorder , i1+1+left , inorder , i2+1+left , postorder , i3+left , len-left-1);\n        \n        // return 1 only if both of them are correct else 0 \n        return (ret1 && ret2);\n    }\n    static boolean checktree(int preorder[], int inorder[], int postorder[], int N)\n    {\n        return check(preorder, 0, inorder, 0, postorder, 0, N);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def checktree(self, preorder, inorder, postorder, N):\n\n        # if the array lengths are 0, then all of them are obviously equal\n        if N == 0:\n            return 1\n\n        # if array lengths are 1, then check if all of them are equal\n        if N == 1:\n            return (preorder[0] == inorder[0]) and (inorder[0] == postorder[0])\n\n        # search for first element of preorder in inorder array\n        idx = -1\n\n        for i in range(N):\n            if inorder[i] == preorder[0]:\n                idx = i\n                break\n\n        if idx == -1:\n            return 0\n\n        # matching element in postorder array\n        if preorder[0] != postorder[N - 1]:\n            return 0\n\n        # check for the left subtree\n        ret1 = self.checktree(preorder[1:], inorder, postorder, idx)\n\n        # check for the right subtree\n        ret2 = self.checktree(preorder[idx + 1:], inorder[idx + 1:],\n                              postorder[idx:], N - idx - 1)\n\n        # return 1 only if both of them are correct else 0\n        return (ret1 and ret2)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public bool checktree(int[] preorder, int[] inorder, int[] postorder, int N)\n    {\n        if (N == 0)\n            return true;\n\n        if (N == 1)\n            return (preorder[0] == inorder[0]) && (inorder[0] == postorder[0]);\n\n        int idx = -1;\n        for (int i = 0; i < N; ++i)\n        {\n            if (inorder[i] == preorder[0])\n            {\n                idx = i;\n                break;\n            }\n        }\n\n        if (idx == -1)\n            return false;\n\n        if (preorder[0] != postorder[N - 1])\n            return false;\n\n        bool ret1 = checktree(\n            preorder.Skip(1).Take(idx).ToArray(),\n            inorder.Take(idx).ToArray(),\n            postorder.Take(idx).ToArray(),\n            idx\n        );\n\n        bool ret2 = checktree(\n            preorder.Skip(idx + 1).ToArray(),\n            inorder.Skip(idx + 1).ToArray(),\n            postorder.Skip(idx).ToArray(),\n            N - idx - 1\n        );\n\n        return ret1 && ret2;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    checktree(preorder, inorder, postorder, n) {\n        // if the array lengths are 0 then all of them are obviously equal \n        if (n == 0) \n            return true; \n\n        // if array lengths are 1, then check if all of them are equal \n        if (n == 1) \n            return (preorder[0] == inorder[0]) && (inorder[0] == postorder[0]); \n\n        // search for first element of preorder in inorder array \n        let idx = -1; \n        for (let i = 0; i < n; ++i) \n            if (inorder[i] == preorder[0]) { \n                idx = i; \n                break; \n            } \n\n        if (idx == -1) \n            return false;\n        \n        // matching element in postorder array\n        if( preorder[0] != postorder[n-1] ) return false;\n\n        // check for the left subtree \n        let ret1 = this.checktree(preorder.slice(1, idx + 1), inorder.slice(0, idx), postorder.slice(0, idx), idx); \n\n        // check for the right subtree \n        let ret2 = this.checktree(preorder.slice(idx + 1), inorder.slice(idx + 1), postorder.slice(idx, n - 1), n - idx - 1); \n\n        // return true only if both of them are correct else false \n        return (ret1 && ret2); \n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}