{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701154,
            "title": "K-th Bit is Set or Not",
            "titleSlug": "check-whether-k-th-bit-is-set-or-not-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a number&nbsp;<strong>n&nbsp;</strong>and a bit number&nbsp;<strong>k</strong>, check if the <strong>k<sup>th</sup></strong>&nbsp;index bit of&nbsp;<strong>n&nbsp;</strong>is set or not. A bit is called set if it is 1. The position of set bit '1' should be indexed starting with 0 from the LSB side in the binary representation of the number.</span><br /><span style=\"font-size: 18px;\">Note:&nbsp;Index is starting from 0. You just need to return&nbsp;<strong>true&nbsp;</strong>or&nbsp;<strong>false.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :&nbsp;</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 4, k = 0\n<strong>Output</strong>: false\n<strong>Explanation</strong>: Binary representation of 4 is 100, in which 0<sup>th</sup> index bit from LSB is not set. So, return false.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 4, k = 2\n<strong>Output</strong>: true\n<strong>Explanation</strong>: Binary representation of 4 is 100, in which 2<sup>nd</sup> index bit from LSB is set. So, return true.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 500, k = 3<br /><strong>Output</strong>: false<br /><strong>Explanation</strong>: Binary representation of 500 is 111110100, in which 3rd index bit from LSB is not set. So, return false.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>9</sup><br />0 &le; k &le; 31</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer `n` and a bit position `k`, determine whether the bit at index `k` in the binary representation of `n` is set (1) or not (0).  Bit positions are indexed starting from 0 on the least significant bit (LSB) side.",
                "constraints": [
                    "1 <= n <= 10^9",
                    "0 <= k <= 31"
                ],
                "testcases": [
                    {
                        "input": "n = 4, k = 0",
                        "output": "false",
                        "explanation": "The binary representation of 4 is 100. The 0th bit (LSB) is 0, so it is not set."
                    },
                    {
                        "input": "n = 4, k = 2",
                        "output": "true",
                        "explanation": "The binary representation of 4 is 100. The 2nd bit is 1, so it is set."
                    },
                    {
                        "input": "n = 500, k = 3",
                        "output": "false",
                        "explanation": "The binary representation of 500 is 111110100. The 3rd bit is 0, so it is not set."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use bitwise AND operation to check if the kth bit is set by shifting 1 left by k positions and comparing it with n.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n// Function to check if Kth bit is set or not.\nclass Solution {\n  public:\n    bool checkKthBit(int n, int k) {\n        // On 1, we perform Left shift operation k times.\n        // Then we perform AND operation on n and the result\n        // obtained after performing left shift on 1.\n        // returning the answer in true or false.\n        return ((n & (1 << (k))) != 0);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n// Function to check Kth bit is set or not.\nclass CheckBit {\n\n    static boolean checkKthBit(int n, int k) {\n        // On 1, we perform Left shift operation k times.\n        // Then we perform AND operation on n and the result\n        // obtained after performing left shift on 1.\n        // returning the answer in true or false.\n        return ((n & (1 << (k))) != 0);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to check if Kth bit is set or not.\n    def checkKthBit(self, n, k):\n\n        #On 1, we perform Left shift operation k times.\n        #Then we perform AND operation on n and the result\n        #obtained after performing left shift on 1.\n        #returning the answer in true or false.\n        return ((n & (1 << (k))) != 0)\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {Number} n\n * @param {Number} k\n * @returns {boolean}\n */\n\nclass Solution {\n    // Function to check if Kth bit is set or not.\n    checkKthBit(n, k) {\n        // On 1, we perform Left shift operation k times.\n        // Then we perform AND operation on n and the result\n        // obtained after performing left shift on 1.\n        // returning the answer in true or false.\n        return ((n & (1 << (k))) != 0);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}