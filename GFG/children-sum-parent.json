{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700618,
            "title": "Children Sum in a Binary Tree",
            "titleSlug": "children-sum-parent",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree having <strong>n</strong> nodes. Check whether all of its nodes have a value equal to the sum of their child nodes.</span><span style=\"font-size: 18px;\">&nbsp;R</span><span style=\"font-size: 18px;\">eturn 1 if all the nodes in the tree satisfy the given properties, else it returns 0. </span><span style=\"font-size: 18px;\">For every node, the data value must be equal to the sum of the data values in the left and right children. Consider the data value 0 for a NULL child. Also, leaves are considered to follow the property.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:<br /></strong><span style=\"font-size: 18px;\">Binary tree\n\\t 35\n\\t/  \\\n     20   15\n    / \\   / \\\n   15  5 10  5\n\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">1</span><strong style=\"font-size: 18px;\">\nExplanation: <br /></strong><span style=\"font-size: 18px;\">Here, every node is sum of its left and right child.</span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:<br /></strong>Binary tree\n\\t 1\n     /   \\\n&nbsp;   4     3\n&nbsp;  /  \n&nbsp; 5    \n<strong>Output: </strong>0<strong>\nExplanation: <br /></strong>Here, 1 is the root node and 4, 3 are its child nodes. 4 + 3 = 7 which is not equal to the value of root node. Hence, this tree does not satisfy the given condition.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span><br /><span style=\"font-size: 18.6667px;\">Binary tree\n\\t 10\n\\t/  \\\n     4    6\n    / \\  / \\\n   1   3 2  4\n</span><br /><span style=\"font-size: 18px;\"><strong>Output: </strong></span><span style=\"font-size: 18px;\">1</span><br /><span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><br /><span style=\"font-size: 18px;\">Here, every node is a sum of its left and right child.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />0 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'n' nodes, determine if each node's value equals the sum of its children's values. A null child is considered to have a value of 0. Leaves are considered to satisfy the property (i.e., their value equals the sum of their null children, which is 0). Return 1 if the tree satisfies this property; otherwise, return 0.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "0 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "Binary tree:\n\t 35\n\t/  \\\n     20   15\n    / \\   / \\\n   15  5 10  5",
                        "output": "1",
                        "explanation": "Each node's value is equal to the sum of its left and right children's values. For example, 35 = 20 + 15, 20 = 15 + 5, and 15 = 10 + 5."
                    },
                    {
                        "input": "Binary tree:\n\t 1\n     /   \\\n    4     3\n   /  \n  5",
                        "output": "0",
                        "explanation": "The root node has a value of 1, while the sum of its children (4 and 3) is 7. Thus, the condition is not satisfied."
                    },
                    {
                        "input": "Binary tree:\n\t 10\n\t/  \\\n     4    6\n    / \\  / \\\n   1   3 2  4",
                        "output": "1",
                        "explanation": "Every node's value is the sum of its left and right child's values."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-family: 'andale mono', monospace; color: #000000; font-size: 12pt;\"><span style=\"box-sizing: border-box; line-height: 1.6rem; background-color: #ffffff;\">Try to think of using Level order traversal.</span></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "intuit"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n//Function to check whether all nodes of a tree have the value \n//equal to the sum of their child nodes.\nint isSumProperty(struct Node *node) \n{\n    int left_data = 0, right_data = 0;\n\n    //if node is null or both child nodes are null, we return true.\n    if (node == NULL ||(node->left == NULL && node->right == NULL))\n        return 1;\n        \n    else {\n\n        //if left child is not null then we store its value.\n        if (node->left != NULL)\n            left_data = node->left->data;\n\n        //if right child is not null then we store its value.\n        if (node->right != NULL)\n            right_data = node->right->data;\n\n        //if sum of stored data of left and right child is equal to the current\n        //node data and recursively for the left and right subtree, parent data \n        //is equal to sum of child data then we return true.\n        if ((node->data == left_data + right_data) &&\n            isSumProperty(node->left) &&\n            isSumProperty(node->right))\n            return 1;\n            \n        //else we return false.\n        else\n            return 0;\n    }\n}\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    //Function to check whether all nodes of a tree have the value \n    //equal to the sum of their child nodes.\n    public static int isSumProperty(Node node)\n    {\n        int left_data = 0;\n        int right_data = 0;\n        \n        //if node is null or both child nodes are null, we return true.\n        if(node == null || (node.left == null && node.right == null))\n          return 1;\n          \n        else\n        {\n            //if left child is not null then we store its value.\n            if(node.left != null)\n             left_data = node.left.data;\n            \n            //if right child is not null then we store its value.\n            if(node.right != null)\n             right_data = node.right.data;\n             \n            ///if sum of stored data of left and right child is equal to the\n            //current node data and recursively for the left and right subtree,\n            //parent data is equal to sum of child data then we return true.\n            if((node.data == left_data + right_data)&& \n               (isSumProperty(node.left)!=0 && isSumProperty(node.right) != 0))\n               return 1;\n        \n            //else we return false.\n            else\n            return 0;\n        }\n        \n    }\n}\n\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to check whether all nodes of a tree have the value \n    #equal to the sum of their child nodes.\n    def isSumProperty(self, root):\n    \n        #if root is null or both child nodes are null, we return true.\n        if root is None :\n            return 1\n        if root.left is None and root.right is None:\n            return 1\n        \n\n        val_node = root.data\n        val_left , val_right = 0,0\n    \n\n        #if left child is not null then we store its value.\n        if root.left is not None:\n            val_left = root.left.data\n\n        #if right child is not null then we store its value.\n        if root.right is not None:\n            val_right = root.right.data\n\n        #if sum of stored data of left and right child is equal to the current\n        #root data and recursively for the left and right subtree, parent data \n        #is equal to sum of child data then we return true else false.\n        if val_node != val_left + val_right:\n            return 0\n        return (self.isSumProperty(root.left) & self.isSumProperty(root.right))",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} node\n * @returns {number}\n*/\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    \n    //Function to check whether all nodes of a tree have the value \n    //equal to the sum of their child nodes.\n    isSumProperty(root)\n    {\n        let left_data = 0, right_data = 0;\n    \n        //if root is null or both child nodes are null, we return true.\n        if (root === null || (root.left === null && root.right === null))\n            return 1;\n            \n        else {\n    \n            //if left child is not null then we store its value.\n            if (root.left !== null)\n                left_data = root.left.data;\n    \n            //if right child is not null then we store its value.\n            if (root.right !== null)\n                right_data = root.right.data;\n    \n            //if sum of stored data of left and right child is equal to the \n            //current root data and recursively for the left and right subtree, \n            //parent data is equal to sum of child data we will return true.\n            if ((root.data == left_data + right_data) &&\n                this.isSumProperty(root.left) &&\n                this.isSumProperty(root.right))\n                return 1;\n                \n            //else we return false.\n            else\n                return 0;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}