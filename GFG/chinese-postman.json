{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710356,
            "title": "Chinese Postman",
            "titleSlug": "chinese-postman",
            "content": "<p><span style=\"font-size: 18px;\">Given a graph find the shortest cyclic path or circuity that visits every edge of the graph at least once.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=3\nM=3\nedges[][]={{1,2,1},{2,3,1},{3,1,4}}\n<strong>Output:</strong>\n6\n<strong>Explanation:</strong>\nWe can go from 1-&gt;2-&gt;3-&gt;1 visiting every \nedge at least once and hence the minimum \ncost is 6.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=6\nM=8\nedges[][]={{1,2,3},{2,6,6},{2,4,1},{4,6,1}\n,{6,5,4},{5,1,5},{5,3,2},{3,1,1}}\n<strong>Output:</strong>\n28\n<strong>Explanation:</strong>\nThe path is 1-&gt;3-&gt;5-&gt;1-&gt;3-&gt;5-&gt;6-&gt;2-&gt;4-&gt;6-&gt;4\n-&gt;2-&gt;1,which sum to 28.It can be shown that \n28 is the optimal answer.</span>\n\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>chinesePostmanProblem()</strong>&nbsp;which takes the edge list e[][], number of nodes<strong>&nbsp;</strong>as input parameters&nbsp;and returns the length of the shortest path that visits each edge at least once. Return -1 if it is not possible to visit every edge once.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(sqrt(N!))<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N*N)</span><br /><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 15.<br />1&lt;=edges[I][0],edges[I][1]&lt;=N.<br />1&lt;=edges[I][2]&lt;=25.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Euler path/circuit.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n//Function to find the shortest distances between all pairs of nodes using Floyd-Warshall algorithm.\nvector<vector<int>> floyydWarshalls(vector<vector<pair<int,int>>> &g,int n)\n{\n    //Initializing the distances matrix with infinity.\n    vector<vector<int>> d(n,vector<int> (n,INT_MAX));\n    \n    //Setting the diagonal elements to 0.\n    for(int i=0;i<n;i++)\n        d[i][i]=0;\n    \n    //Updating the distances matrix with direct edges present in the graph.\n    for(int i=0;i<n;i++)\n    {\n        for(auto j:g[i])\n            d[i][j.first]=j.second;\n    }\n    \n    //Calculating the shortest distances using Floyd-Warshall algorithm.\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            for(int k=0;k<n;k++)\n            {\n                if(d[i][k]!=INT_MAX && d[k][j]!=INT_MAX)\n                    d[i][j]=min(d[i][j],d[i][k]+d[k][j]);\n            }\n        }\n    }\n    \n    //Returning the shortest distances matrix.\n    return d;\n}\n\n//Helper function to generate all possible pairs of odd nodes.\nvoid f(vector<int> o,int i,vector<vector<pair<int,int>>> &allOddPairs,vector<pair<int,int>> t,bool v[])\n{\n    //Base case: If all odd nodes have been considered, add the pair set to the resulting array.\n    if(i==(int)o.size())\n    {\n        allOddPairs.push_back(t);\n        return;\n    }\n    \n    //If the current odd node has already been paired, move to the next node.\n    if(v[i])\n    {\n        f(o,i+1,allOddPairs,t,v);\n        return;\n    }\n    \n    //Choose the currentodd node as the start node and pair it with all the remaining odd nodes.\n    v[i]=1;\n    for(int j=0;j<(int)o.size();j++)\n    {\n        if(v[j]==false)\n        {\n            v[j]=1;\n            t.push_back({o[i],o[j]});\n            f(o,i+1,allOddPairs,t,v);\n            t.pop_back();\n            v[j]=0;\n        }\n    }\n    \n    //Reset the flag for the current odd node.\n    v[i]=0;\n}\n\nclass Solution\n{\n    public:\n        int chinesePostmanProblem(vector<vector<int>> &e,int n)\n        {\n            vector <int> o; //Array to store the odd nodes in the graph.\n            \n            vector<vector<pair<int,int>>> g(n); //Adjacency list representation of the graph.\n            \n            int s=0; //Variable to store the sum of all edge weights in the graph.\n            \n            //Constructing the adjacency list of the graph and calculating the sum of edge weights.\n            for(auto j:e)\n            {\n                s+=j[2];\n                g[j[0]-1].push_back({j[1]-1,j[2]});\n                g[j[1]-1].push_back({j[0]-1,j[2]});\n            }\n            \n            //Finding the odd nodes in the graph.\n            for(int i=0;i<n;i++)\n            {\n                if(g[i].size()%2)\n                    o.push_back(i);\n            }\n            \n            //If there are no odd nodes, the graph is already eulerian and the answer is the sum of all edge weights.\n            if(o.size()==0)\n                return s;\n            \n            vector <vector<pair<int,int>>> allOddPairs; //Array to store all possible sets of odd node pairs.\n            \n            vector<pair<int,int>> t; //Temporary array to store a set of odd node pairs.\n            \n            bool vis[o.size()]; //Array to keep track of which odd nodes have been paired.\n            \n            fill(vis,vis+o.size(),false); //Initializing the vis array to false.\n            \n            f(o,0,allOddPairs,t,vis); //Generating all possible pairs of odd nodes.\n            \n            vector<vector<int>> shortestPath=floyydWarshalls(g,n); //Calculating the shortest distances between all pairs of nodes in the graph.\n            \n            int ans=INT_MAX; //Variable to store the minimum sum of shortest path distances from odd node pairs.\n            \n            //Finding the minimum sum of shortest path distances from all odd node pairs.\n            for(auto j:allOddPairs)\n            {\n                int tans=0;\n                for(auto i:j)\n                {   \n                    //If the shortest distance between a pair of odd nodes is infinity, it means the nodes are disconnected and the graph is not eulerian.\n                    //In that case, set the temporary answer to infinity and break from the loop.\n                    if(shortestPath[i.first][i.second]==INT_MAX)\n                    {\n                        tans=INT_MAX;\n                        break;\n                    }\n                    \n                    //Updating the temporary answer with the sum of shortest distances between odd node pairs.\n                    tans+=shortestPath[i.first][i.second];\n                }\n                \n                //Updating the final answer with the minimum sum of shortest distances.\n                ans=min(ans,tans);\n            }\n            \n            //If the answer is still infinity, it means no eulerian tour is possible in the graph.\n            //Return -1 in that case.\n            if(ans==INT_MAX)\n                return -1;\n            \n            //Return the sum of all edge weights along with the minimum sum of shortest distances between odd node pairs.\n            return s+ans;\n        }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}