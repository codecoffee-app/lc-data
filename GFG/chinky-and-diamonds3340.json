{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705121,
            "title": "Maximum Diamonds",
            "titleSlug": "chinky-and-diamonds3340",
            "content": "<p><span style=\"font-size: 18px;\">There are &nbsp;bags with diamonds in them. The i'th of these bags contains <strong>arr[i] </strong>diamonds. If you drop a bag with <strong>arr[i]</strong> diamonds, it changes to <strong>arr[i]/2 </strong>diamonds and you gain <strong>arr[i]&nbsp;</strong>diamonds. Dropping a bag takes 1 minute. Find the <strong>maximum number of diamonds</strong> that you can take if you are given <strong>k </strong>minutes.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>arr[]<strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">= </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">[2, 1, 7, 4, 2], k = 3</span><strong><br /></strong></span><span style=\"font-size: 18px;\"><strong>Output: </strong>14</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">The state of bags is:2 1 7 4 2\nTake all diamonds from Third bag (7).</span><span style=\"font-size: 18px;\">\nState of bags becomes: 2 1 3 4 2 \nTake all diamonds from Fourth bag (4).\nState of bags becomes: 2 1 3 2 2\nTake all diamonds from Third bag (3).<br /></span><span style=\"font-size: 18px;\">State of bags becomes: 2 1 1 2 2 \nHence,number of Diamonds = 7+4+3 = 14.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>arr[]<strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">=</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">[7, 1, 2], k = 2</span></span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>10</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:<br /></strong>Take all diamonds from First bag (7).<br />State of bags becomes: 3 1 2 <br />Take all diamonds from again First bag (3).<br />State of bags becomes: 1 1 2<br /></span><span style=\"font-size: 18px;\">You can take a <strong>maximum </strong>of 10 diamonds.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1&nbsp;</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito; font-size: 17px;\">&le;</span><span style=\"font-size: 18px;\"> n</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito; font-size: 17px;\">&le;</span><span style=\"font-size: 18px;\">&nbsp;10</span><sup>5<br /></sup><span style=\"font-size: 18px;\">0&nbsp;</span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito; font-size: 17px;\">&le;&nbsp; k</span><span style=\"font-size: 18px;\">, arr[i] </span><span style=\"background-color: #ffffff; color: #1e2229; font-family: Nunito; font-size: 17px;\">&le;</span><span style=\"font-size: 18px;\">&nbsp;10</span><sup>5</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use Priority Queue to calculate the answer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    long long maxDiamonds(vector<int>& arr, int k) {\n        priority_queue<int> pq;\n\n        for (int num : arr)\n            pq.push(num);\n\n        long long res = 0;\n\n        while (k--) {\n            int m = pq.top();\n            pq.pop();\n            res += m;\n            pq.push(m / 2);\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public long maxDiamonds(int[] arr, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n\n        for (int num : arr) {\n            pq.offer(num);\n        }\n\n        long res = 0;\n\n        while (k-- > 0) {\n            int m = pq.poll();\n            res += m;\n            pq.offer(m / 2);\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def maxDiamonds(self, arr, k):\n        pq = [-num for num in arr]  # Max heap using negative values\n        heapq.heapify(pq)\n\n        res = 0\n\n        for _ in range(k):\n            m = -heapq.heappop(pq)  # Convert back to positive\n            res += m\n            heapq.heappush(pq, -(m // 2))\n\n        return res\n",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}