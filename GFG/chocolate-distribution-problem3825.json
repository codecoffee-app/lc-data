{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702823,
            "title": "Chocolate Distribution Problem",
            "titleSlug": "chocolate-distribution-problem3825",
            "content": "<p><span >Given an array <strong>arr[] </strong>of positive integers, where each value represents the number of chocolates in a packet. Each packet can have a variable number of chocolates. There are <strong>m</strong> students, the task is to distribute chocolate packets among <strong>m</strong> students such that - <br />&nbsp; &nbsp; &nbsp; i. Each student gets <strong>exactly</strong> one packet.<br />&nbsp; &nbsp; &nbsp;ii. The difference between maximum number of chocolates given to a student and minimum number of chocolates given to a student is minimum and return that minimum possible difference.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr = [3, 4, 1, 9, 56, 7, 9, 12], m = 5<strong>\nOutput: </strong>6\n<strong>Explanation: </strong>The minimum difference between maximum chocolates and minimum chocolates is 9 - 3 = 6 by choosing following m packets :[3, 4, 9, 7, 9].\n</span></pre>\n<pre><span ><strong>Input: </strong>arr = [7, 3, 2, 4, 9, 12, 56], m = 3\n<strong>Output: </strong>2\n<strong>Explanation: </strong>The minimum difference between maximum chocolates and minimum chocolates is 4 - 2 = 2 by choosing following m packets :[3, 2, 4].</span></pre>\n<pre><span ><strong>Input: </strong>arr = [3, 4, 1, 9, 56], m = 5<strong>\nOutput: </strong>55<br /><strong>Explanation</strong>: With 5 packets for 5 students, each student will receive one packet, so the difference is 56 - 1 = 55.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; m &lt;= arr.size &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>9</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of positive integers, where each value represents the number of chocolates in a packet. Distribute chocolate packets among `m` students such that:\n\n1.  Each student gets exactly one packet.\n2.  The difference between the maximum number of chocolates given to a student and the minimum number of chocolates given to a student is minimized.\n\nReturn the minimum possible difference.",
                "constraints": [
                    "1 <= m <= arr.size <= 10^5",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr = [3, 4, 1, 9, 56, 7, 9, 12], m = 5",
                        "output": "6",
                        "explanation": "The minimum difference is achieved by selecting the packets [3, 4, 9, 7, 9]. The difference between the maximum (9) and minimum (3) chocolate count is 6."
                    },
                    {
                        "input": "arr = [7, 3, 2, 4, 9, 12, 56], m = 3",
                        "output": "2",
                        "explanation": "The minimum difference is achieved by selecting the packets [3, 2, 4]. The difference between the maximum (4) and minimum (2) chocolate count is 2."
                    },
                    {
                        "input": "arr = [3, 4, 1, 9, 56], m = 5",
                        "output": "55",
                        "explanation": "Since we have 5 students and 5 packets, each student receives one packet. The minimum difference is the difference between the maximum (56) and minimum (1) chocolate count, which is 55."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the given array then the problem reduces to finding the difference between&nbsp;minium and maximum in contiguous subarray of size M.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findMinDiff(vector<int>& a, int m) { // Pass-by-reference\n\n        // Sort the given packets\n        sort(a.begin(), a.end());\n\n        int start = 0, end = 0;\n        // Largest number of chocolates\n        int mind = INT_MAX;\n\n        // Find the subarray of size m such that\n        // difference between last (maximum in case\n        // of sorted) and first (minimum in case of\n        // sorted) elements of subarray is minimum.\n        for (int i = 0; i + m - 1 < a.size(); i++) {\n            int diff = a[i + m - 1] - a[i];\n            if (mind > diff) {\n                mind = diff;\n                start = i;\n                end = i + m - 1;\n            }\n        }\n        return a[end] - a[start];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    public int findMinDiff(ArrayList<Integer> a, int m) {\n        int n = a.size();\n        Collections.sort(a);\n\n        int start = 0, end = 0;\n        // Largest number of chocolates\n        int mind = Integer.MAX_VALUE;\n\n        // Find the subarray of size m such that\n        // difference between last (maximum in case\n        // of sorted) and first (minimum in case of\n        // sorted) elements of subarray is minimum.\n        for (int i = 0; i + m - 1 < n; i++) {\n            int diff = a.get(i + m - 1) - a.get(i);\n            if (mind > diff) {\n                mind = diff;\n                start = i;\n                end = i + m - 1;\n            }\n        }\n        return a.get(end) - a.get(start);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\n\nclass Solution:\n\n    def findMinDiff(self, arr, m):\n        n = len(arr)\n\n        # if there are no chocolates or number\n        # of students is 0\n        if (m == 0 or n == 0):\n            return 0\n\n        # Sort the given packets\n        arr.sort()\n\n        # Number of students cannot be more than\n        # number of packets\n        if (n < m):\n            return -1\n\n        # Largest number of chocolates\n        min_diff = arr[n - 1] - arr[0]\n\n        # Find the subarray of size m such that\n        # difference between last (maximum in case\n        # of sorted) and first (minimum in case of\n        # sorted) elements of subarray is minimum.\n        for i in range(len(arr) - m + 1):\n            min_diff = min(min_diff, arr[i + m - 1] - arr[i])\n\n        return min_diff\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMinDiff(arr, m) {\n        // Get the total number of elements in the array\n        let n = arr.length;\n\n        // Sort the array in ascending order to arrange elements for contiguous\n        // selection\n        arr.sort(function(a, b) { return a - b });\n\n        // Initialize start and end pointers to mark the indices of the subarray with\n        // minimum difference\n        let start = 0;\n        let end = 0;\n\n        // Initialize minDiff with a large value to keep track of the minimum difference\n        // found\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        // Loop to find the minimum difference in subarrays of size `m`\n        for (let i = 0; i + m - 1 < n; i++) {\n            // Calculate the difference between the maximum and minimum elements in the\n            // current subarray of size `m`\n            let diff = arr[i + m - 1] - arr[i];\n\n            // If this difference is smaller than the current minDiff, update minDiff\n            // and set new start and end indices\n            if (minDiff > diff) {\n                minDiff = diff;\n                start = i;\n                end = i + m - 1;\n            }\n        }\n\n        // Return the difference between the selected maximum and minimum values in the\n        // subarray with minimum difference\n        return arr[end] - arr[start];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}