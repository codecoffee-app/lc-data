{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703470,
            "title": "Chocolate Station",
            "titleSlug": "chocolate-station2951",
            "content": "<p><span style=\"font-size: 18px;\">Geek has an array <strong>arr</strong>, where arr[i] (1-based indexing) denotes the number of chocolates corresponding to each station. When he moves from station i to station i+1 he gets arr[i] - arr[i+1] chocolates for free, if this number is negative, he loses that many chocolates also.<br />He can only move from station i to station i+1 if he has a non-negative number of chocolates with him.<br />Given the cost of one chocolate Rs. <strong>price</strong>. Find the minimum cost incurred in reaching the last station from the first station (station 1).<br /><strong>Note</strong>: Initially Geek has 0 chocolates.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3], price = 10\n<strong>Output:</strong>  30\n<strong>Explanation</strong>: \nTo reach the first station from the starting point, we need to buy 1 chocolate,To reach station 2 form station 1, we get arr[1] - arr[2] = -1 chocolates i.e. we lose 1 chocolate. <br />Hence, we need to buy 1 chocolate.Similarly, we need to buy 1 chocolate to reach station 3 from station 2.\n<strong>Hence, total cost incurred = (1+1+1)*10 = 30</strong></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 6, 11, 4, 7, 1], price = 5\n<strong>Output:</strong> 55\n<strong>Explanation</strong>: \nTo reach to&nbsp;the first station from starting\npoint he need to buy 10 chocolates.&nbsp;</span>\n<span style=\"font-size: 18px;\"><strong>Chocolates Bought = 10,Chocolates balance = 0\n</strong>On reaching second station he will get (10-6)= 4 chocolates.\n</span><span style=\"font-size: 18px;\"><strong>Chocolates Bought= 10 , Chocolates balance = 4.</strong>\nTo reach to 3 station , he has to buy (6- 11) = 5 chocolates.But he has 4 chocolates as balance. So the chocolates he need to buy is (5 -4 ) =1;</span>\n<span style=\"font-size: 18px;\"><strong>Chocolates Bought= 11&nbsp;, Chocolates balance = 0.</strong>\nOn reaching station 4 , he will get (11 - 4)= 7 chocolates.</span>\n<span style=\"font-size: 18px;\"><strong>Chocolates Bought= 11&nbsp;, Chocolates balance = 7.</strong>\nTo reach to 5 station , he has to buy (4- 7)= 3 chocolates. But he has 7 chocolates as balance .</span>\n<span style=\"font-size: 18px;\"><strong>Chocolates Bought= 11&nbsp;, Chocolates balance = 4.</strong>\nTo reach to 6 station , he will get (7- 1) = 6 chocolates. </span>\n<span style=\"font-size: 18px;\"><strong>Chocolates Bought= 11&nbsp;, Chocolates balance = 10.</strong>\nTherefore, total chocolates he has&nbsp;to buy is 11.</span>\n<span style=\"font-size: 18px;\"><strong>Hence, Amount=11*5=55.</strong></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup></span><span style=\"font-size: 18px;\">1 &le; arr[i] &le; 10</span><sup>3</sup><br /><span style=\"font-size: 18px;\">1 &le; price &le; 10</span><sup>2</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek is traveling between stations. Each station `i` (1-indexed) has `arr[i]` chocolates. Traveling from station `i` to `i+1` gives Geek `arr[i] - arr[i+1]` chocolates (can be negative, meaning he loses chocolates). Geek can only move if he has a non-negative number of chocolates. Initially, Geek has 0 chocolates. Given the cost of one chocolate is `price`, find the minimum cost Geek incurs to reach the last station.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= arr[i] <= 10^3",
                    "1 <= price <= 10^2"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 3], price = 10",
                        "output": "30",
                        "explanation": "To reach the first station, Geek needs to buy 1 chocolate. To reach station 2 from station 1, Geek loses 1 chocolate (1-2 = -1), so he needs to buy another chocolate. To reach station 3 from station 2, he loses 1 chocolate (2-3 = -1), so he needs to buy another chocolate. Total chocolates bought: 1 + 1 + 1 = 3. Total cost: 3 * 10 = 30."
                    },
                    {
                        "input": "arr[] = [10, 6, 11, 4, 7, 1], price = 5",
                        "output": "55",
                        "explanation": "To reach the first station, Geek needs to buy 10 chocolates. At station 1, he has 0 chocolates. Moving to station 2 gives him 10-6 = 4 chocolates, so he now has 4. Moving to station 3 requires him to gain 11-6=5 chocolates , he needs to gain 5, since he has 4, he needs to buy 1 more, and 10 initial +1 =11 . At station 3, he has 0 chocolates.  Moving to station 4 gives him 11-4 = 7 chocolates. At station 4, he has 7 chocolates. Moving to station 5 gives him 4-7 = -3 (loses 3), however he already has 7 chocolates so no need to buy any chocolates here. Moving to station 6 gives him 7-1 =6 chocolates.  In total, Geek only bought 11 chocolates (10 initially + 1 at station 2). Total cost: 11 * 5 = 55."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Track chocolate balance while moving through stations. If the balance goes negative, buy enough chocolates to proceed. Calculate the total cost based on the chocolates bought.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\nclass Solution {\n  public:\n    // Function to calculate the cost of buying chocolate\n    int getChocolateCost(vector<int> arr, int price) {\n        long currentChocolateCount = 0;\n        long totalChocolatesToBuy = arr[0];\n\n        for (int i = 1; i < arr.size(); i++) {\n            int priceDifference = arr[i - 1] - arr[i];\n\n            // If the priceDifference is positive, add it to the current chocolate count\n            if (priceDifference > 0) {\n                currentChocolateCount += priceDifference;\n            }\n            // Otherwise, adjust the current chocolate count\n            else {\n                currentChocolateCount += priceDifference;\n\n                // If the current chocolate count goes negative, buy more chocolates\n                if (currentChocolateCount < 0) {\n                    totalChocolatesToBuy += abs(currentChocolateCount);\n                    currentChocolateCount = 0;\n                }\n            }\n        }\n\n        // Calculate the total cost of buying chocolates\n        return totalChocolatesToBuy * price;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public long getChocolateCost(int[] arr, int price) {\n        long currentChocolateCount = 0;\n        long totalChocolatesToBuy = arr[0];\n\n        for (int i = 1; i < arr.length; i++) {\n            int priceDifference = arr[i - 1] - arr[i];\n\n            // If the priceDifference is positive, add it to the current chocolate count\n            if (priceDifference > 0) {\n                currentChocolateCount += priceDifference;\n            }\n            // Otherwise, adjust the current chocolate count\n            else {\n                currentChocolateCount += priceDifference;\n\n                // If the current chocolate count goes negative, buy more chocolates\n                if (currentChocolateCount < 0) {\n                    totalChocolatesToBuy += Math.abs(currentChocolateCount);\n                    currentChocolateCount = 0;\n                }\n            }\n        }\n\n        // Calculate the total cost of buying chocolates\n        return totalChocolatesToBuy * price;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def getChocolateCost(self, arr, price):\n        current_chocolates = 0\n        chocolates_to_buy = arr[0]\n\n        for i in range(1, len(arr)):\n            price_difference = arr[i - 1] - arr[i]\n\n            # If price difference is positive, add to current chocolates\n            if price_difference > 0:\n                current_chocolates += price_difference\n            else:\n                current_chocolates += price_difference\n\n                # If current chocolates go negative, buy more chocolates\n                if current_chocolates < 0:\n                    chocolates_to_buy += abs(current_chocolates)\n                    current_chocolates = 0\n\n        # Return the total cost of chocolates\n        return chocolates_to_buy * price\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    getChocolateCost(arr, price) {\n        let currentChocolates = 0;\n        let chocolatesToBuy = arr[0];\n\n        for (let i = 1; i < arr.length; i++) {\n            let priceDifference = arr[i - 1] - arr[i];\n\n            // If price difference is positive, add to current chocolates\n            if (priceDifference > 0) {\n                currentChocolates += priceDifference;\n            } else {\n                currentChocolates += priceDifference;\n\n                // If current chocolates go negative, buy more chocolates\n                if (currentChocolates < 0) {\n                    chocolatesToBuy += Math.abs(currentChocolates);\n                    currentChocolates = 0;\n                }\n            }\n        }\n\n        // Return the total cost of chocolates\n        return chocolatesToBuy * price;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}