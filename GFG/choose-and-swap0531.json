{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704867,
            "title": "Choose and Swap",
            "titleSlug": "choose-and-swap0531",
            "content": "<p><span style=\"font-size: 18px;\">You are given a string <strong>str</strong> of lower case english alphabets. You can choose any two characters in the string and replace all the occurences of the first character with the second character and replace all the occurences of the second character with the first character. Your aim is to find the lexicographically smallest string that can be obtained by doing this operation at most once.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: str = \"ccad\"\n<strong>Output:</strong>&nbsp;\"aacd\"\n<strong>Explanation</strong>: In ccad, we choose a and c and after doing the replacement operation once we get, aacd and this is the lexicographically smallest string possible. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>str = \"abba\"\n<strong>Output: </strong>\"abba\"\n<strong>Explanation: </strong>In abba, we can get baab after doing the replacement operation once for a and b but that is not lexicographically smaller than abba. So, the answer is abba. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(|str|)&nbsp;<strong><br />Expected Auxiliary Space: </strong>O(1)<strong><br /><br />Constraints:</strong><br />1&lt;= |str| &lt;=10<sup>5</sup></span></p>\n<p><span ><strong>Note :&nbsp;</strong>Here |str| refers to the length of the string str.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` consisting of lowercase English alphabets, you are allowed to perform at most one operation. In this operation, you can choose any two distinct characters in the string and swap all occurrences of the first character with the second character and vice versa. The objective is to find the lexicographically smallest string that can be obtained after performing this operation at most once.",
                "constraints": [
                    "1 <= |str| <= 10^5",
                    "str contains only lowercase English alphabets"
                ],
                "testcases": [
                    {
                        "input": "ccad",
                        "output": "aacd",
                        "explanation": "By swapping 'c' and 'a', the string becomes 'aacd', which is the lexicographically smallest possible string."
                    },
                    {
                        "input": "abba",
                        "output": "abba",
                        "explanation": "Swapping 'a' and 'b' results in 'baab', which is lexicographically larger than 'abba'. No other swap produces a smaller string. Therefore, the original string is the answer."
                    },
                    {
                        "input": "leetcode",
                        "output": "leetcodd",
                        "explanation": "Swapping 'e' and 'd' results in 'leetcoded', but that's not lexicographically smaller. Swapping 'e' with 'd' does not produce smallest string. If we Swap 'e' and 'd', the string is leetcodd. This is the smallest string"
                    },
                    {
                        "input": "abcde",
                        "output": "abcde",
                        "explanation": "No swap will create lexicographically smaller string"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>One was is to generate all possible strings that are possible and then see which among them is the lexicographically smallest. This is a correct solution but something faster can be done.&nbsp;</p>\n\n<p>We can make an array of which stores the left most occurence of each character in the string. Then we traverse from left to right. Whenever we reach a position, we check if there is some character which is smaller than this character and whose left most occurence is to the right of the left most occurence of the present character. If such a character is possible, we take the smallest possible and stop iterating. We now have two characters which need to be interchanged in the string and we can print out the result. If we find nothing after the whole iteration, we just print the original string.</p>\n\n<p>The earlier solution is slower than this by a constant multiple of n.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "int left_most[26];\n\nclass Solution {\n  public:\n    string chooseandswap(string str) {\n        int n = str.size();\n        string ans = \"\";\n        for (int i = 0; i <= 25; i++)\n            left_most[i] = -1;\n\n        for (int i = 0; i <= n - 1; i++) {\n            if (left_most[str[i] - 97] == -1)\n                left_most[str[i] - 97] = i;\n        }\n\n        int j = -1;\n        int mark = -1;\n        for (int i = 0; i <= n - 2; i++) {\n            // if(a[i]>a[i+1])\n            //{\n            j = i;\n            for (int k = 0; k <= 25; k++) {\n                if (left_most[k] > left_most[str[j] - 97] && k < (int)(str[j] - 97)) {\n                    mark = k;\n                    break;\n                }\n            }\n            //}\n            if (mark != -1)\n                break;\n        }\n\n        // \t\tcout<<mark<<endl;\n\n        if (mark != -1) {\n            for (int i = 0; i <= n - 1; i++) {\n                if (str[i] == (char)(mark + 97)) {\n                    // \tprintf(\"%c\",a[j]);\n                    ans += str[j];\n                } else if (str[i] == str[j]) {\n                    // \tprintf(\"%c\",mark+97);\n                    ans += ((char)(mark + 97));\n                } else {\n                    ans += str[i];\n                }\n            }\n        }\n\n        else {\n            for (int i = 0; i <= n - 1; i++) {\n                ans += str[i];\n            }\n        }\n\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    #Function to perform choose and swap operation.\n    def chooseandswap(self, str):\n        #converting the string into a set to remove duplicate characters.\n        ss = set(list(str))\n\n        #iterating over the string\n        for i in range(len(str)):\n\n            #if the current character is present in the set,\n            #we remove it from the set.\n            if str[i] in ss:\n                ss.remove(str[i])\n\n            #if the set is empty, which means we have removed\n            #all the characters, we break the loop.\n            if len(ss) == 0:\n                break\n\n            #if the minimum character in the set is less than the\n            #current character, we perform choose and swap operation.\n            if min(ss) < str[i]:\n                temp = str[i]\n                #replacing the current character with '$' for temporary storage.\n                str = str.replace(str[i], \"$\")\n                #replacing the minimum character with the current character.\n                str = str.replace(min(ss), temp)\n                #replacing '$' with the minimum character.\n                str = str.replace(\"$\", min(ss))\n                break\n\n        #returning the modified string after choose and swap operation.\n        return str\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} a\n * @returns {string}\n */\nclass Solution {\n    chooseandswap(str) {\n        const left_most = Array(26).fill(-1);\n\n        for (let i = 0; i < str.length; i++) {\n            if (left_most[str.charCodeAt(i) - 97] === -1) {\n                left_most[str.charCodeAt(i) - 97] = i;\n            }\n        }\n\n        let j = -1;\n        let mark = -1;\n        for (let i = 0; i < str.length - 1; i++) {\n            j = i;\n            for (let k = 0; k < 26; k++) {\n                if (left_most[k] > left_most[str.charCodeAt(j) - 97] &&\n                    k < str.charCodeAt(j) - 97) {\n                    mark = k;\n                    break;\n                }\n            }\n            if (mark !== -1) break;\n        }\n\n        let ans = \"\";\n        if (mark !== -1) {\n            for (let i = 0; i < str.length; i++) {\n                if (str[i] === String.fromCharCode(mark + 97)) {\n                    ans += str[j];\n                } else if (str[i] === str[j]) {\n                    ans += String.fromCharCode(mark + 97);\n                } else {\n                    ans += str[i];\n                }\n            }\n        } else {\n            ans = str;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}