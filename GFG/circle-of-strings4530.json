{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703681,
            "title": "Circle of strings",
            "titleSlug": "circle-of-strings4530",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr </strong>of lowercase strings, determine if the strings can be chained together to form a circle.<br />A string <strong>X </strong>can be chained together with another string <strong>Y </strong>if the last character of <strong>X </strong>is the same as the first character of <strong>Y. </strong>If every string of the array can be chained with exactly two strings of the array(one with the first character and the second with the last character of the string), it will form a circle.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>For example</strong>, for the array&nbsp;arr[] = {\"for\", \"geek\", \"rig\", \"kaf\"} the answer will be Yes as the given strings can be chained as&nbsp;\"for\", \"rig\", \"geek\"&nbsp;and \"kaf\"</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [\"abc\", \"bcd\", \"cdf\"]\n<strong>Output: </strong>0\n<strong>Explaination: </strong>These strings can't form a circle because no string has 'd'at the starting index.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [\"ab\" , \"bc\", \"cd\", \"da\"]\n<strong>Output: </strong>1\n<strong>Explaination: </strong>These strings can form a circle of strings.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong>&nbsp;<br />1 &le; length of strings &le; 20</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of lowercase strings, determine if the strings can be chained together to form a circle. A string X can be chained together with another string Y if the last character of X is the same as the first character of Y. If every string in the array can be chained with exactly two other strings (one matching the first character and the other the last), it will form a circle.",
                "constraints": [
                    "1 <= length of strings <= 20"
                ],
                "testcases": [
                    {
                        "input": "[\"abc\", \"bcd\", \"cdf\"]",
                        "output": "0",
                        "explanation": "These strings cannot form a circle because no string has 'd' as its starting character."
                    },
                    {
                        "input": "[\"ab\" , \"bc\", \"cd\", \"da\"]",
                        "output": "1",
                        "explanation": "These strings can form a circle of strings."
                    },
                    {
                        "input": "[\"for\", \"geek\", \"rig\", \"kaf\"]",
                        "output": "1",
                        "explanation": "The given strings can be chained as \"for\", \"rig\", \"geek\", and \"kaf\" to form a circle."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">1. The idea is to create a directed graph of all characters and then find if their is an eulerian circuit in the graph or not.&nbsp; If there is an eulerian circuit, then chain can be formed, otherwise not.<br /><strong>Note:</strong>&nbsp; directed graph has eulerian circuit only if in degree and out degree of every vertex is same, and all non-zero degree vertices form a single strongly connected component.</span></p>",
            "<p><span style=\"font-size:18px\">2. Detailed steps of the algorithm.</span></p>\n\n<p><span style=\"font-size:18px\">1) Create a directed graph g with number of vertices equal to the size of alphabet (i.e. 26 characters)</span></p>\n\n<p><span style=\"font-size:18px\">2) Perform for every string in the given array of strings.<br />\n&nbsp;&nbsp;&nbsp;&nbsp; a) Add an edge from first character to last character of the given graph<br />\n3) If the created graph has <a href=\"https://www.geeksforgeeks.org/euler-circuit-directed-graph/\" target=\"_blank\">eulerian circuit</a>, then return true, else false.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "accolite",
            "microsoft",
            "factset"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    void dfs(int node, vector<int> adj[], int visited[]) {\n        visited[node] = 1;\n        for (auto u : adj[node]) {\n            if (!visited[u])\n                dfs(u, adj, visited);\n        }\n    }\n\n    int isCircle(vector<string> &arr) {\n        int N = arr.size();\n        // We use the concept of Euler circuit.If each vertex has indegree equal\n        // to outdegree and there is only one strongly connected component then\n        // the graph has an Euler circuit..then we return 1 else 0\n        int i;\n        vector<int> adj[26], adjr[26];\n\n        // creating a directed graph where there is an edge from the first\n        // letter of every string to the last letter of the string and the\n        // transpose graph\n        for (i = 0; i < N; i++) {\n            int x = arr[i].size() - 1;\n            adj[(arr[i][0] - 'a')].emplace_back((arr[i][x] - 'a'));\n            adjr[(arr[i][x] - 'a')].emplace_back((arr[i][0] - 'a'));\n        }\n\n        // calculating the indegree of each vertex\n        int indeg[26] = {0};\n        for (i = 0; i < 26; i++) {\n            if (adj[i].size() > 0) {\n                for (auto u : adj[i])\n                    indeg[u]++;\n            }\n        }\n\n        // checking if the indegree of every vertex is equal to the\n        // outdegree of that vertex\n        for (i = 0; i < 26; i++) {\n            if (adj[i].size() > 0 and indeg[i] != adj[i].size()) {\n                return 0;\n            }\n        }\n\n        // checking strongly connected component using Kosaraju's algorithm\n        int visited[26] = {0};\n        for (i = 0; i < 26; i++) {\n            if (indeg[i] > 0)\n                break;\n        }\n        int n = i;\n\n        // first dfs call and checking if all the nodesare visited or not\n        dfs(n, adj, visited);\n        for (i = 0; i < 26; i++) {\n            if (adj[i].size() and !visited[i]) {\n                return 0;\n            }\n        }\n\n        // dfs call on transpose graph for getting strongly connected component\n        for (i = 0; i < 26; i++)\n            visited[i] = 0;\n\n        dfs(n, adjr, visited);\n        for (i = 0; i < 26; i++) {\n            if (adjr[i].size() and !visited[i]) {\n                return 0;\n            }\n        }\n\n        // return 1 as there is an Euler circuit\n        return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Graph {\n    int V;\n    LinkedList<Integer> adj[];\n    int in[];\n\n    @SuppressWarnings(\"unchecked\")\n    public Graph(int v) {\n        V = v;\n        adj = new LinkedList[v];\n        in = new int[V];\n        for (int i = 0; i < v; ++i) {\n            adj[i] = new LinkedList();\n            in[i] = 0;\n        }\n    }\n\n    void addEdge(int v, int w) {\n        adj[v].add(w);\n        in[w]++;\n    }\n\n    void DFSUtil(int v, Boolean visited[]) {\n        visited[v] = true;\n        int n;\n        Iterator<Integer> i = adj[v].iterator();\n        while (i.hasNext()) {\n            n = i.next();\n            if (!visited[n]) DFSUtil(n, visited);\n        }\n    }\n\n    Graph getTranspose() {\n        Graph g = new Graph(V);\n        for (int v = 0; v < V; v++) {\n            Iterator<Integer> i = adj[v].listIterator();\n            while (i.hasNext()) {\n                g.adj[i.next()].add(v);\n                (g.in[v])++;\n            }\n        }\n        return g;\n    }\n\n    Boolean isSC() {\n        // Step 1: Mark all the vertices as not visited (For\n        // first DFS)\n        Boolean visited[] = new Boolean[V];\n        Arrays.fill(visited, false);\n\n        // Step 2: DFS starting from 1st non-zero degree vertex\n        int n;\n        for (n = 0; n < V; n++) {\n            if (adj[n].size() > 0) break;\n        }\n        DFSUtil(n, visited);\n\n        // If DFS traversal doesn't visit all vertices, then return false.\n        for (int i = 0; i < V; i++)\n            if (!visited[i] && adj[i].size() > 0) return false;\n\n        // Step 3: Create a reversed graph\n        Graph gr = getTranspose();\n\n        // Step 4: Mark all the vertices as not visited (For second DFS)\n        Arrays.fill(visited, false);\n\n        // Step 5: Do DFS for reversed graph starting from first vertex.\n        // Staring Vertex must be same starting point of first DFS\n        gr.DFSUtil(n, visited);\n\n        // If all vertices are not visited in second DFS, then\n        // return false\n        for (int i = 0; i < V; i++)\n            if (!visited[i] && adj[i].size() > 0) return false;\n        return true;\n    }\n\n    /* This function returns true if the directed graph has an eulerian\n    cycle, otherwise returns false */\n    Boolean isEulerianCycle() {\n        // Check if all non-zero degree vertices are connected\n        if (isSC() == false) return false;\n        // Check if in degree and out degree of every vertex is same\n        for (int i = 0; i < V; i++)\n            if (adj[i].size() != in[i]) return false;\n        return true;\n    }\n}\n\nclass Solution {\n    public int isCircle(String[] arr) {\n        int N = arr.length;\n        Graph g = new Graph(26);\n        for (int i = 0; i < N; i++) {\n            String s = arr[i];\n            g.addEdge(s.charAt(0) - 'a', s.charAt(s.length() - 1) - 'a');\n        }\n\n        if (g.isEulerianCycle()) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Backend complete function template for Python 3\n\n\nclass Solution:\n\n    def dfs(self, node, adj, vis):\n        vis[node] = True\n        for u in adj[node]:\n            if (vis[u] == False):\n                self.dfs(u, adj, vis)\n\n    #Function to check if the given graph contains a circle or not.\n    def isCircle(self, arr):\n        N = len(arr)\n        #Creating adjacency list and reverse adjacency list.\n        adj = [[] for i in range(26)]\n        adjr = [[] for i in range(26)]\n\n        #Populating the adjacency lists.\n        for i in range(N):\n            x = len(arr[i]) - 1\n            adj[ord(arr[i][0]) - ord('a')].append(ord(arr[i][x]) - ord('a'))\n            adjr[ord(arr[i][x]) - ord('a')].append(ord(arr[i][0]) - ord('a'))\n\n        #Calculating indegree of each node.\n        indeg = [0 for i in range(26)]\n        for i in range(26):\n            if (len(adj[i])):\n                for u in adj[i]:\n                    indeg[u] = indeg[u] + 1\n\n        #Checking if the indegree and outdegree are equal for each node.\n        for i in range(26):\n            if (len(adj[i]) > 0 and indeg[i] != len(adj[i])):\n                return 0\n\n        #Performing DFS starting from a node with non-zero indegree.\n        visited = [False for i in range(26)]\n        n = 0\n        for i in range(26):\n            if (indeg[i]):\n                n = i\n                break\n        self.dfs(n, adj, visited)\n\n        #Checking if all nodes were visited in the DFS.\n        for i in range(26):\n            if (visited[i] == False and len(adjr[i])):\n                return 0\n\n        #Returning 1 if no circle is found.\n        return 1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n\n    dfs(node, adj, visited) {\n        visited[node] = 1;\n        for (let u of adj[node]) {\n            if (!visited[u]) {\n                this.dfs(u, adj, visited);\n            }\n        }\n    }\n\n    isCircle(arr) {\n        let n = arr.length;\n        let adj = Array(26).fill(null).map(() => []);\n        let adjr = Array(26).fill(null).map(() => []);\n        for (let i = 0; i < n; i++) {\n            let x = arr[i].length - 1;\n            adj[arr[i].charCodeAt(0) - 97].push(arr[i].charCodeAt(x) - 97);\n            adjr[arr[i].charCodeAt(x) - 97].push(arr[i].charCodeAt(0) - 97);\n        }\n        let indeg = Array(26).fill(0);\n        for (let i = 0; i < 26; i++) {\n            if (adj[i].length > 0) {\n                for (let u of adj[i]) {\n                    indeg[u]++;\n                }\n            }\n        }\n        for (let i = 0; i < 26; i++) {\n            if (adj[i] && adj[i].length > 0 && indeg[i] != adj[i].length) {\n                return 0;\n            }\n        }\n        let visited = Array(26).fill(0);\n        let tempN = -1;\n        for (let i = 0; i < 26; i++) {\n            if (indeg[i] > 0) {\n                tempN = i;\n                break;\n            }\n        }\n        this.dfs(tempN, adj, visited);\n        for (let i = 0; i < 26; i++) {\n            if (adj[i] && adj[i].length > 0 && !visited[i]) {\n                return 0;\n            }\n        }\n        visited = Array(26).fill(0);\n        this.dfs(tempN, adjr, visited);\n        for (let i = 0; i < 26; i++) {\n            if (adjr[i] && adjr[i].length > 0 && !visited[i]) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}