{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700564,
            "title": "Circular Linked List Traversal",
            "titleSlug": "circular-linked-list-traversal",
            "content": "<p><span style=\"font-size:18px\">Given a circular linked list, your task is to complete the method <strong>printList()</strong> that prints the linked list.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Input:</strong><br />\r\nThe <strong>printList</strong> function takes a single argument as input the reference pointer to the head of the linked list.<br />\r\nThere are multiple&nbsp;test cases and for each test, the function will be called separately.&nbsp;<br />\r\n<strong>Output:</strong> You just need to print the LinkedList in the same line and the next line&nbsp;will be added&nbsp;by the Driver Code.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n2\r\n7\r\n374 363 171 497 282 306 426\r\n2\r\n162 231</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n426 306 282 497 171 363 374\r\n231 162</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note : Input items are inserted at the front of linked list that is why output is in reverse order.</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=50<br />\r\n1&lt;=N&lt;=50</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "circular-linked-list",
                "slug": "circular-linked-list"
            }
        ],
        "companies": [
            "cisco"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "void printList(struct Node *head)\r\n{\r\n    struct Node *temp = head; // create a temporary pointer to the head of the list\r\n    if (head != NULL) // check if the list is not empty\r\n    {\r\n        do\r\n        {\r\n            printf(\"%d \", temp->data); // print the data value of the current node\r\n            temp = temp->next; // move to the next node in the list\r\n        }\r\n        while (temp != head); // continue until we reach back to the head of the list\r\n    }\r\n} // end of function to print the linked list",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Printing the circular linked list\r\nvoid printList(struct Node *head)\r\n{\r\n    struct Node *temp = head;\r\n    //Checking if the head is not NULL\r\n    if (head != NULL)\r\n    {\r\n        //Iterating through the circular list until we reach the head again\r\n        do\r\n        {\r\n            //Printing the data of the current node\r\n            printf(\"%d \", temp->data);\r\n            //Moving to the next node\r\n            temp = temp->next;\r\n        }\r\n        while (temp != head);\r\n    }\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n        /* Function to print nodes in a given Circular linked list */\n    void printList(Node node)\n    {\n        // Your code here\n        \n        // Creating a temporary node pointing to the head node\n        Node temp = node;\n        \n        // If the list is not empty\n        if(node != null)\n        {\n    \t    // Loop through the list and print the node's value\n            do{\n                System.out.print(temp.data+\" \");\n                temp = temp.next;\n    \t\t}\n    \t\twhile (temp != node);\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Node: \r\n      \r\n    # Constructor to create  a new node \r\n    def __init__(self, data): \r\n        self.data = data  \r\n        self.next = None\r\n  \r\nclass CircularLinkedList: \r\n      \r\n    # Constructor to create a empty circular linked list \r\n    def __init__(self): \r\n        self.head = None\r\n  \r\n    # Function to insert a node at the beginning of a \r\n    # circular linked list \r\n    def push(self, data): \r\n        ptr1 = Node(data)\r\n        ptr1.data=data\r\n        temp = self.head \r\n          \r\n        ptr1.next = self.head \r\n  \r\n        # If linked list is not None then set the next of \r\n        # last node \r\n        if self.head is not None: \r\n            while(temp.next != self.head): \r\n                temp = temp.next \r\n            temp.next = ptr1 \r\n  \r\n        else: \r\n            ptr1.next = ptr1 # For the first node \r\n  \r\n        self.head = ptr1  \r\n  \r\n    # Function to print nodes in a given circular linked list \r\n    def printList(self): \r\n        temp = self.head \r\n        if self.head is not None: \r\n            while(True): \r\n                print(temp.data,end=\" \")\r\n                temp = temp.next\r\n                if (temp == self.head):\r\n                    break \r\n        return\r\n\r\n",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}