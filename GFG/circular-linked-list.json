{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700172,
      "title": "Check If Circular Linked List",
      "titleSlug": "circular-linked-list",
      "content": "<p><span >Given the <strong>head</strong>, the head of a singly linked list, Returns <strong>true </strong>if the linked list is circular &amp; <strong>false </strong>if it is not circular.</span></p>\n<blockquote>\n<p><span > A linked list is called circular if it is not NULL terminated and all nodes are connected in the form of a cycle.&nbsp;</span></p>\n</blockquote>\n<p><span ><strong>Note:</strong> The linked list does not contain any inner loop.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700172/Web/Other/blobid2_1720504073.png\" width=\"400\" height=\"140\" /><br /><strong>Output: </strong>true<br /><strong>Explanation: </strong>As shown in figure the first and last node is connected, i.e. 5 --&gt; 2<br /></span></pre>\n<pre><span ><strong>Input: </strong><br /></span><span ><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700172/Web/Other/blobid3_1720504109.png\" width=\"400\" height=\"90\" /> <br /><strong>Output: </strong>false<br /><strong>Explanation: </strong>As shown in figure this is not a circular linked list.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 100<br />1 &lt;= node -&gt; data &lt;= 10<sup>4</sup><br /></span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA"
    },
    "similar": [],
    "hints": [
      "<p><span style=\"font-size: 18px;\">We need to check whether linked list traversal reaches a NULL or head pointer.</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "circular-linked-list",
        "slug": "circular-linked-list"
      },
      {
        "name": "Linked List",
        "slug": "linked-list"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": ["microsoft", "maq-software", "sap"],
    "solutions": [
      {
        "lang": "C",
        "full_func": "//Back-end complete function Template for C\n\nint isCircular(struct Node* head) {\n    // If the head is null, the linked list is empty, so it is circular\n    if (!head)\n        return 1;\n\n    struct Node* temp = head;\n\n    // Traverse the linked list until either the end is reached or the next node is\n    // equal to the head\n    while (head && head->next != temp)\n        head = head->next;\n\n    // If the end is reached before finding the head again, the linked list is not\n    // circular\n    if (!head || !(head->next))\n        return 0;\n\n    // If the head is found again before reaching the end, the linked list is circular\n    return 1;\n}",
        "lang_text": "c"
      },
      {
        "lang": "C++",
        "full_func": "// Function to check if a linked list is circular\nclass Solution {\n  public:\n    bool isCircular(Node *head) {\n        // If the head is null, the linked list is empty, so it is circular\n        if (!head)\n            return true;\n\n        Node *temp = head;\n\n        // Traverse the linked list until either the end is reached or the next node is\n        // equal to the head\n        while (head && head->next != temp)\n            head = head->next;\n\n        // If the end is reached before finding the head again, the linked list is not\n        // circular\n        if (!head || !(head->next))\n            return false;\n\n        // If the head is found again before reaching the end, the linked list is\n        // circular\n        return true;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "/* Structure of LinkedList\nclass Node {\n    int data;\n    Node next;\n\n    Node(int d) {\n        data = d;\n        next = null;\n    }\n}\n*/\n\nclass Solution {\n    // Method to check if a linked list is circular or not\n    boolean isCircular(Node head) {\n        // If the linked list is empty, it is considered circular\n        if (head == null) return true;\n\n        // Initialize a temporary node pointing to the next node of the head\n        Node temp = head.next;\n\n        // Iterate through the linked list until the end or until we reach the head node\n        // again\n        while (temp != null && temp != head) {\n            temp = temp.next;\n        }\n\n        // Returning true if temp becomes equal to head, indicating that the linked list\n        // is circular\n        return (temp == head);\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "class Solution:\n\n    def isCircular(self, head):\n        # If the linked list is empty, it is considered circular\n        if not head:\n            return True\n\n        # Initialize a temporary node pointing to the next node of the head\n        temp = head.next\n\n        # Iterate through the linked list until the end or until we reach the head node again\n        while temp and temp != head:\n            temp = temp.next\n\n        # Returning true if temp becomes equal to head, indicating that the linked list is circular\n        return temp == head\n",
        "lang_text": "python3"
      },
      {
        "lang": "Javascript",
        "full_func": "// Solution class containing the method to check if a linked list is circular\nclass Solution {\n    // Method to check if a linked list is circular or not\n    isCircular(head) {\n        // If the linked list is empty, it is considered circular\n        if (!head) return true;\n\n        // Initialize a temporary node pointing to the next node of the head\n        let temp = head.next;\n\n        // Iterate through the linked list until the end or until we reach the head node\n        // again\n        while (temp !== null && temp !== head) {\n            temp = temp.next;\n        }\n\n        // Returning true if temp becomes equal to head, indicating that the linked list\n        // is circular\n        return (temp === head);\n    }\n}\n",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
