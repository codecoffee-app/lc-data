{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711146,
            "title": "City With the Smallest Number of Neighbors at a Threshold Distance",
            "titleSlug": "city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
            "content": "<p><span style=\"font-size: 18px;\">There are <strong>n</strong> cities labeled from 0 to n-1 with <strong>m </strong>edges connecting them. Given the array <strong>edges</strong>&nbsp;where <strong>edges[i] = [from<sub>i&nbsp;</sub>, to<sub>i ,</sub>weight<sub>i</sub>]<sub>&nbsp;</sub></strong>&nbsp;represents a <strong>bidirectional </strong>and <strong>weighted edge </strong>between cities <strong>from<sub>i</sub>&nbsp;</strong>and <strong>to<sub>i</sub></strong>, and given the integer <strong>distanceThreshold</strong>. You need to find out a city with the <strong>smallest number </strong>of cities that are reachable through some path and whose distance is&nbsp;<strong>at most</strong>&nbsp;<strong>Threshold Distance.</strong>&nbsp;If there are multiple such cities, our answer will&nbsp;be the city with the <strong>greatest label</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> The distance of a path connecting cities <em><strong>i</strong></em>&nbsp;and&nbsp;<em><strong>j</strong></em> is equal to the sum of the edge's weights along that path.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">n = 4, m = 4</span>\n<span style=\"font-size: 18px;\">edges = [[0, 1, 3],<br />\\t   [1, 2, 1], <br />\\t   [1, 3, 4],  <br />\\t   [2, 3, 1]]</span>\n<span style=\"font-size: 18px;\">distanceThreshold = 4</span>\n<strong><span style=\"font-size: 18px;\">Output:<br /></span></strong><span style=\"font-size: 18px;\">3</span>\n<strong><span style=\"font-size: 18px;\">Explaination:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/711146/Web/Other/db9aa4c2-8a65-4b18-b6ad-7034096be600_1684840736.png\" width=\"305\" height=\"296\" /><br /></span></strong><span style=\"font-size: 18px;\">The neighboring cities at a distanceThreshold = 4 for each city are:\nCity 0 -&gt; [City 1, City 2]&nbsp;\nCity 1 -&gt; [City 0, City 2, City 3]&nbsp;\nCity 2 -&gt; [City 0, City 1, City 3]&nbsp;\nCity 3 -&gt; [City 1, City 2]&nbsp;\nCities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:&nbsp;</span></strong><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><br />n = 5, m = 6<br />edges = [[0, 1, 2],\n\\t   [0, 4, 8],<br />\\t   [1, 2, 3], <br />\\t   [1, 4, 2], <br />\\t   [2, 3, 1],<br />\\t   [3, 4, 1]]<br />distanceThreshold = 2.<br /></span></span><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Output:<br /></strong><span style=\"font-size: 18px;\">0<br /></span><strong style=\"font-size: 18px;\">Explaination:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/711146/Web/Other/blobid0_1709737447.png\" width=\"310\" height=\"273\" /></strong><br /><span style=\"font-size: 18px;\">The neighboring cities at a distanceThreshold = 2 for each city are:\nCity 0 -&gt; [City 1] \nCity 1 -&gt; [City 0, City 4] \nCity 2 -&gt; [City 3, City 4] \nCity 3 -&gt; [City 2, City 4]\nCity 4 -&gt; [City 1, City 2, City 3] \nThe city 0 has 1 neighboring city at a distanceThreshold = 2.<br /></span></span></pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong><br /><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>findCity( )&nbsp;</strong>which takes a number of nodes <strong>n, </strong>total number of edges <strong>m</strong>&nbsp;and vector of <strong>edges</strong> and <strong>distanceThreshold</strong>. and return the city with the smallest number of cities that are reachable through some path and whose distance is <strong>at most</strong> Threshold Distance. If there are multiple such cities, return the city with the greatest label.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup> + length(edges)*nlog(n) )</span><br /><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:&nbsp;&nbsp;</strong>O(n<sup>3</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&nbsp; &le;&nbsp; n &le;&nbsp; 100<br />1 &lt;= m &lt;= n*(n-1)/2<br />length(edges[i]) == 3<br />0 &lt;= from<sub>i&nbsp;</sub>&lt; to<sub>i</sub>&nbsp;&lt; n<br />1 &lt;= weight<sub>i </sub>distanceThreshold &lt;= 10<sup>4</sup><br />All pairs (from<sub>i</sub>, to<sub>i</sub>) are distinct</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'n' cities labeled from 0 to n-1 and 'm' bidirectional, weighted edges represented by the 'edges' array (edges[i] = [from_i, to_i, weight_i]). Find the city with the smallest number of reachable cities within a distance threshold. The distance between two cities is the sum of edge weights along the path. If multiple cities satisfy this condition, return the one with the largest label.",
                "constraints": [
                    "1 <= n <= 100",
                    "1 <= m <= n*(n-1)/2",
                    "length(edges[i]) == 3",
                    "0 <= from_i < to_i < n",
                    "1 <= weight_i, distanceThreshold <= 10^4",
                    "All pairs (from_i, to_i) are distinct"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 4, edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]], distanceThreshold = 4",
                        "output": "3",
                        "explanation": "City 0 can reach cities 1 and 2 within the threshold. City 1 can reach 0, 2, and 3. City 2 can reach 0, 1, and 3. City 3 can reach 1 and 2. Cities 0 and 3 both have 2 reachable cities, but 3 has a higher label."
                    },
                    {
                        "input": "n = 5, m = 6, edges = [[0, 1, 2], [0, 4, 8], [1, 2, 3], [1, 4, 2], [2, 3, 1], [3, 4, 1]], distanceThreshold = 2",
                        "output": "0",
                        "explanation": "City 0 can reach city 1 within the threshold. City 1 can reach 0 and 4. City 2 can reach 3 and 4. City 3 can reach 2 and 4. City 4 can reach 1, 2, and 3. City 0 has the fewest reachable cities."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try finding distances of every city from every other city.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Disjoint Set",
                "slug": "disjoint-set"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to implement Dijkstra's algorithm to find the shortest distance\n    // from source node to all other nodes\n    int dijkstra(int n, vector<vector<pair<int, int>>>& graph, int k, int src) {\n\n        // Initializing a queue for BFS traversal\n        priority_queue<int> q;\n        q.push(src);\n\n        // Initializing a vector to store the minimum distance from the source\n        vector<int> dist(n, INT_MAX);\n        dist[src] = 0;\n\n        // BFS traversal\n        while (!q.empty()) {\n            int node = q.top();\n            q.pop();\n\n            // Updating the minimum distance for each neighbor node\n            for (auto x : graph[node]) {\n                int nbr = x.first;\n                int wt = x.second;\n                if (dist[nbr] > dist[node] + wt) {\n                    dist[nbr] = dist[node] + wt;\n                    q.push(nbr);\n                }\n            }\n        }\n\n        // Counting the number of cities within the distance threshold\n        int c = 0;\n        for (int i = 0; i < n; i++) {\n            if (dist[i] <= k)\n                c++;\n        }\n        return c;\n    }\n\n    // Function to find the city with the minimum number of cities within\n    // the distance threshold\n    int findCity(int n, int m, vector<vector<int>>& edges, int distanceThreshold) {\n        // Initializing a graph using adjacency list representation\n        vector<vector<pair<int, int>>> graph(n);\n\n        // Adding the edges to the graph\n        for (int i = 0; i < edges.size(); i++) {\n            graph[edges[i][0]].push_back({edges[i][1], edges[i][2]});\n            graph[edges[i][1]].push_back({edges[i][0], edges[i][2]});\n        }\n\n        // Initializing a vector to store the number of cities within the distance\n        // threshold\n        vector<int> dis(n, 0);\n\n        // Finding the number of cities within the distance threshold for each city\n        for (int i = 0; i < n; i++) {\n            dis[i] = dijkstra(n, graph, distanceThreshold, i);\n        }\n\n        // Finding the city with the minimum number of cities within the distance\n        // threshold\n        int ans = INT_MAX;\n        int idx = -1;\n        for (int i = 0; i < n; i++) {\n            if (ans >= dis[i]) {\n                ans = dis[i];\n                idx = i;\n            }\n        }\n        return idx;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n\n    // Custom class to represent pair of node and weight\n    class Pair {\n        int node, weight;\n        Pair(int node, int weight) {\n            this.node = node;\n            this.weight = weight;\n        }\n    } \n    \n    // Function to find the city with minimum connected cities within distanceThreshold\n    int findCity(int n, int m, int[][] edges, int distanceThreshold) {\n        // Create adjacency list to represent graph\n        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();\n        for (int i = 0; i < n; i++) adj.add(new ArrayList<>());\n        \n        // Fill adjacency list with edges and weights\n        for (int arr[] : edges) {\n            int u = arr[0], v = arr[1], w = arr[2];\n            adj.get(u).add(new Pair(v, w));\n            adj.get(v).add(new Pair(u, w));\n        }\n        \n        // Initialize variables for tracking minimum connected cities and city index\n        int min = Integer.MAX_VALUE, city = -1;\n        \n        // Loop through all cities as source\n        for (int src = 0; src < n; src++) {\n            // Priority queue to store nodes and weights\n            PriorityQueue<Pair> pq =\n                new PriorityQueue<>((a, b)->{ return a.weight - b.weight; });\n            \n            // Array to track visited nodes\n            boolean[] vis = new boolean[n];\n            \n            // Array to track shortest distances from source\n            int[] arr = new int[n];\n            Arrays.fill(arr, Integer.MAX_VALUE);\n            arr[src] = 0;\n            \n            // Variable to count number of connected cities within distanceThreshold\n            int count = 0;\n            \n            // Add source node to priority queue\n            pq.add(new Pair(src, 0));\n            \n            // Dijkstra's algorithm to find shortest paths\n            while (pq.size() > 0) {\n                Pair p = pq.remove();\n                int node = p.node, weight = p.weight;\n                if (vis[node]) continue;\n                vis[node] = true;\n                if (weight <= distanceThreshold) count++;\n                for (Pair ele : adj.get(node)) {\n                    if (arr[node] + ele.weight < arr[ele.node]) {\n                        arr[ele.node] = arr[node] + ele.weight;\n                        pq.add(new Pair(ele.node, arr[ele.node]));\n                    }\n                }\n            }\n            \n            // Update minimum connected cities and city index if count is smaller\n            if (count <= min) {\n                min = count;\n                city = src;\n            }\n        }\n        \n        // Return index of city with minimum connected cities\n        return city;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom typing import List\nclass Solution:\n    \n    #Function to find the city with the smallest number of neighbors within the distanceThreshold.\n    def findCity(self, n : int, m : int, edges : List[List[int]], distanceThreshold : int) -> int:\n            from collections import defaultdict, deque\n            from heapq import heappush, heappop\n            \n            #Creating a graph using adjacency set.\n            graph = defaultdict(set)\n            \n            #Adding each edge to the graph.\n            for _from, _to, dis in edges:\n                graph[_from].add((_to, dis))\n                graph[_to].add((_from, dis))\n                \n            #Dijkstra's algorithm to find the shortest path from each city to all other cities.\n            def dijikstra(start):\n                distance = [9999999] * n\n                distance[start] = 0\n                heap = [(0, start)]\n                \n                while heap:\n                    cost, node = heappop(heap)\n                    for nei, dis in graph[node]:\n                        if dis + cost < distance[nei]:\n                            distance[nei] = dis + cost\n                            heappush(heap, (dis + cost, nei))\n                \n                #Returning the list of cities with distance less than or equal to distanceThreshold.\n                return [city for city, dis in enumerate(distance) if dis <= distanceThreshold and city != start]\n            \n            #Creating a list to store the result for each city.\n            res = []\n            \n            #Looping through each city and finding its neighbors within the distanceThreshold.\n            for i in range(n):\n                res.append([i, dijikstra(i)])\n            \n            #Sorting the result list based on the number of neighbors and the city number.\n            res = sorted(res, key=lambda x: (len(x[1]), -x[0]) )\n            \n            #Returning the city with the smallest number of neighbors within the distanceThreshold.\n            return res[0][0]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for JavaScript\n/**\n * @param {number} n\n * @param {number} m\n * @param {number[][]} edges\n * @param {number} distanceThreshold\n * @returns {number}\n*/\n\nclass Solution {\n    // Function to find the city with the smallest number of neighbors\n    findCity(n, m, edges, distanceThreshold) {\n        const graph = Array.from({length: n}, () => []);\n\n        // Adding each edge to the graph\n        for (const [from, to, weight] of edges) {\n            graph[from].push([to, weight]);\n            graph[to].push([from, weight]);\n        }\n\n        // Dijkstra's algorithm to find the shortest path from each city to all other cities\n        const dijkstra = (start) => {\n            const pq = [[0, start]]; // Priority Queue, starting with (distance=0, startNode)\n            const minDist = Array(n).fill(Infinity);\n            minDist[start] = 0;\n\n            while (pq.length !== 0) {\n                pq.sort((a, b) => b[0] - a[0]); // Sort pq in descending order for min-heap behavior\n                const [dist, node] = pq.pop();\n                if (dist > minDist[node]) continue;\n\n                for (const [next, weight] of graph[node]) {\n                    const nextDist = dist + weight;\n                    if (nextDist < minDist[next]) {\n                        minDist[next] = nextDist;\n                        pq.push([nextDist, next]);\n                    }\n                }\n            }\n\n            return minDist;\n        };\n\n        let result = -1;\n        let smallest = n; // Start with the maximum possible value\n\n        // Loop through every city and find the number of reachable cities within distanceThreshold\n        for (let i = 0; i < n; i++) {\n            const reachable = dijkstra(i).filter(dist => dist <= distanceThreshold).length - 1;\n\n            // If the current city has fewer or equal neighbors, and has a greater index\n            if (reachable <= smallest) {\n                smallest = reachable;\n                result = i;\n            }\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}