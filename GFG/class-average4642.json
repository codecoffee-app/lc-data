{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704592,
            "title": "Class Average",
            "titleSlug": "class-average4642",
            "content": "<p><span style=\"font-size:18px\">Given an Integer <strong>N </strong>and an array <strong>arr[] </strong>of length N. If index of the element is a Fibonacci Number, multiply the number by the index. After multiplying, if the number becomes greater than 100, make the element equal to the last two digits of the multiplied number. After doing these for all elements, find out the average of the N numbers in the Array.</span><br />\r\n<span style=\"font-size:18px\"><strong>Note: </strong>The array is in 1-based indexing (also in the Input). Also, print the floor value of the answer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>5<strong>, </strong><strong>arr[] = </strong>{ 34, 78, 80, 91, 99 }</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">63</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">There are 5 elements.\r\n1 is a fibonacci number and hence\r\n34 is multiplied by 1.\r\n2 is a fibonacci number and hence 78 is\r\nmultiplied by 2 and becomes 156 which being\r\ngreater than 100 is reduced to 56.\r\n3 is a fibonacci number and hence 80 is\r\nmultiplied by 3 and it becomes 240, which\r\nbeing greater than 100 is reduced to 40.\r\n4 is not a fibonacci number and hence 91\r\nis kept as it is.\r\n5 is a fibonacci number and hence 99 is\r\nmultiplied by 5 and becomes 495 which being\r\ngreater than 100 is reduced to 95.\r\nThe total becomes 316 and the average is\r\n63.2, floor of which is 63.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>2<strong>, </strong><strong>arr[] = </strong>{ 34, 99 }</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">66</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">There are 2 elements.\r\n1 is a fibonacci number and hence\r\n34 is multiplied by 1.\r\n2 is a fibonacci number and hence 99 is\r\nmultiplied by 2 and becomes 198 which being\r\ngreater than 100 is reduced to 98.\r\nThe total becomes 132 and the average is 66.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>getAvg()</strong> which takes an Integer N and an Array arr[] of length N as input and returns the answer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup><br />\r\n1 &lt;= arr[i] &lt;= 100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N and an array arr[] of length N, modify the array and calculate the average. For each element at index i (1-based indexing): if i is a Fibonacci number, multiply arr[i] by i. If the result is greater than 100, update arr[i] with the last two digits of the multiplied number. After processing all elements, calculate and return the floor of the average of the N numbers in the array.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 5, arr[] = { 34, 78, 80, 91, 99 }",
                        "output": "63",
                        "explanation": "The array elements are processed as follows: \n- Index 1 (Fibonacci): 34 * 1 = 34\n- Index 2 (Fibonacci): 78 * 2 = 156 -> 56\n- Index 3 (Fibonacci): 80 * 3 = 240 -> 40\n- Index 4 (Not Fibonacci): 91\n- Index 5 (Fibonacci): 99 * 5 = 495 -> 95\nSum = 34 + 56 + 40 + 91 + 95 = 316\nAverage = 316 / 5 = 63.2\nFloor(Average) = 63"
                    },
                    {
                        "input": "N = 2, arr[] = { 34, 99 }",
                        "output": "66",
                        "explanation": "The array elements are processed as follows:\n- Index 1 (Fibonacci): 34 * 1 = 34\n- Index 2 (Fibonacci): 99 * 2 = 198 -> 98\nSum = 34 + 98 = 132\nAverage = 132 / 2 = 66\nFloor(Average) = 66"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Make an array to mark all the Fibonacci Numbers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\n\r\nclass Solution {\r\n  public:\r\n    int getAvg(int N, int arr[]) {\r\n        \r\n        // Initialize an array fib of length 100000 and an array f of length N.\r\n        // Array f stores the fibonacci numbers.\r\n        int fib[100005] = {0}, f[N+1];\r\n        \r\n        f[0] = 1;\r\n        fib[1] = 1;\r\n        f[1] = 2;\r\n        fib[2] = 1;\r\n        \r\n        for(int i=2; i<=N; i++)\r\n        {\r\n            f[i] = f[i-1] + f[i-2];    // Finding out the i'th Fibonacci Number\r\n            if(f[i]>100000)        // We break from the loop because max value of N can be 100000.\r\n                break;\r\n            fib[f[i]]=1;          // We mark the fibonacci numbers with 1.\r\n        }\r\n        \r\n        //Initializing Sum\r\n        int sum = 0;\r\n        \r\n        for(int i=1; i<=N; i++)\r\n        {\r\n            // If index is a fibonacci Number, the number is multiplied with the index\r\n            // and then modded with 100 if the multiplied number is greater than 100\r\n            if(fib[i]==1)\r\n            {\r\n                arr[i]*=i;\r\n                if(arr[i]>100)\r\n                    arr[i] %= 100;\r\n            }\r\n            sum += arr[i];\r\n        }\r\n        \r\n        // Average is calculated by dividing total sum by number of elements\r\n        int ans = sum/N;\r\n        \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    public int getAvg(int N, int[] arr) {\n        int[] fib = new int[100005];\n        int[] f = new int[N + 1];\n\n        f[0] = 1;\n        fib[1] = 1;\n        f[1] = 2;\n        fib[2] = 1;\n\n        for (int i = 2; i <= N; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n            if (f[i] > 100000)\n                break;\n            fib[f[i]] = 1;\n        }\n\n        int sum = 0;\n\n        for (int i = 1; i <= N; i++) {\n            if (fib[i] == 1) {\n                arr[i - 1] *= i; // Adjust for zero-based index\n                if (arr[i - 1] > 100)\n                    arr[i - 1] %= 100;\n            }\n            sum += arr[i - 1]; // Adjust for zero-based index\n        }\n\n        int ans = sum / N;\n\n        return ans;\n    }\n}\n",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}