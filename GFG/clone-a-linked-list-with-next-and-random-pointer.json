{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700186,
      "title": "Clone List with Next and Random",
      "titleSlug": "clone-a-linked-list-with-next-and-random-pointer",
      "content": "<p><span >You are given a special linked list with <strong>n</strong> nodes where each node has two pointers a <strong>next pointer</strong> that points to the next node of the singly linked list, and a <strong>random pointer</strong> that points to the random node of the linked list.<br /></span></p>\n<p><span >Construct a <strong>copy</strong> of this linked list.&nbsp;</span><span style=\"font-size: 18.6667px;\">The copy should consist of the same number of new nodes, where each new node has the value corresponding to its original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list, such that it also represent the same list state. </span><span style=\"font-size: 18.6667px;\">None of the pointers in the new list should point to nodes in the original list.</span></p>\n<p><span >Return the <strong>head</strong> of the copied linked list.</span></p>\n<p><span ><strong>NOTE : </strong>Original linked list should remain unchanged.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong >Input: </strong>head = [[1, 3], [3, 3], [5, NULL], [9, 3]]<span > <br />   <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/885813/Web/Other/blobid2_1737541602.jpg\" width=\"416\" height=\"142\" /> &nbsp; <br /></span><strong >Output: </strong><span >head</span><strong > </strong><span >=</span><strong > </strong><span >[[1, 3], [3, 3], [5, NULL], [9, 3]]<span > </span></span><strong >\nExplanation: </strong>\nNode 1 points to Node 2 as its NEXT and Node 3 as its RANDOM.\nNode 2 points to Node 3 as its NEXT and Node 3 as its RANDOM.\nNode 3<strong> </strong>points to Node 4 as its NEXT and NULL as its RANDOM.\nNode 4 points to NULL as its NEXT and Node 3 as its RANDOM.</span></pre>\n<pre><span ><strong >Input: </strong>head = [[1, 3], [2, 1], [3, 5], [4, 3], [5, 2]]<span ><br />  <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700186/Web/Other/blobid2_1735042710.jpg\" width=\"467\" height=\"131\" /><br /> <br /></span><strong >Output: </strong><span >head</span><strong > = </strong><span >[[1, 3], [2, 1], [3, 5], [4, 3], [5, 2]]</span><strong >\nExplanation: </strong>\n<span style=\"font-size: 18.6667px;\">Node 1 points to Node 2 as its NEXT and Node 3 as its RANDOM.\nNode 2 points to Node 3 as its NEXT and Node 1 as its RANDOM.\nNode 3 points to Node 4 as its NEXT and Node 5 as its RANDOM.\nNode 4 points to Node 5 as its NEXT and Node 3 as its RANDOM.\nNode 5 points to NULL as its NEXT and Node 2 as its RANDOM.</span></span></pre>\n<pre><span ><strong >Input: </strong>head = [[7, NULL], [7, NULL]]<span ><br /></span><strong >Output: </strong><span >head</span><strong > </strong><span >=</span><strong > </strong><span >[[7, NULL], [7, NULL]]</span><strong >\nExplanation: </strong>\nNode 1<strong> </strong>points to Node 2 as its NEXT and NULL as its RANDOM.\nNode 2 points to NULL as its NEXT and NULL as its RANDOM.</span></pre>\n<p><span ><strong>Constraints</strong>:<br />1 &lt;= n &lt;= 100<br /><span style=\"font-size: 18px;\">0 &lt;= node-&gt;data &lt;= 1000</span></span></p>",
      "isPaidOnly": false,
      "difficulty": "Hard",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "You are given a special linked list with 'n' nodes. Each node has two pointers: 'next', pointing to the next node in the list, and 'random', pointing to any node in the list (or null). Construct a deep copy of this linked list. The copy should have the same number of nodes, with each new node having the same value as its corresponding original node.  The 'next' and 'random' pointers of the new nodes should point to the corresponding new nodes in the copied list, mirroring the original list's structure. No pointers in the new list should point to nodes in the original list. Return the head of the copied linked list.  The original linked list must remain unchanged.",
        "constraints": ["1 <= n <= 100", "0 <= node->data <= 1000"],
        "testcases": [
          {
            "input": "head = [[1, 3], [3, 3], [5, NULL], [9, 3]]",
            "output": "[[1, 3], [3, 3], [5, NULL], [9, 3]]",
            "explanation": "Node 1's next points to Node 2 and random points to Node 3. Node 2's next points to Node 3 and random points to Node 3. Node 3's next points to Node 4 and random is NULL. Node 4's next is NULL and random points to Node 3."
          },
          {
            "input": "head = [[1, 3], [2, 1], [3, 5], [4, 3], [5, 2]]",
            "output": "[[1, 3], [2, 1], [3, 5], [4, 3], [5, 2]]",
            "explanation": "Node 1's next points to Node 2 and random points to Node 3. Node 2's next points to Node 3 and random points to Node 1. Node 3's next points to Node 4 and random points to Node 5. Node 4's next points to Node 5 and random points to Node 3. Node 5's next is NULL and random points to Node 2."
          },
          {
            "input": "head = [[7, NULL], [7, NULL]]",
            "output": "[[7, NULL], [7, NULL]]",
            "explanation": "Node 1's next points to Node 2 and random is NULL. Node 2's next is NULL and random is NULL."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p><span >Interweave the list with cloned nodes, set <code>arb</code> pointers, and then split the original and copied lists.&nbsp;</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Linked List",
        "slug": "linked-list"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": [
      "flipkart",
      "morgan-stanley",
      "amazon",
      "microsoft",
      "oyo-rooms",
      "snapdeal",
      "de-shaw",
      "makemytrip",
      "ola-cabs",
      "walmart",
      "adobe",
      "bankbazaar"
    ],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "class Solution {\n  public:\n    Node* cloneLinkedList(Node* head) {\n        if (head == NULL) {\n            return NULL;\n        }\n\n        // Create new nodes and insert them next to\n        // the original nodes\n        Node* curr = head;\n        while (curr != NULL) {\n            Node* newNode = new Node(curr->data);\n            newNode->next = curr->next;\n            curr->next = newNode;\n            curr = newNode->next;\n        }\n\n        // Set the random pointers of the new nodes\n        curr = head;\n        while (curr != NULL) {\n            if (curr->random != NULL)\n                curr->next->random = curr->random->next;\n            curr = curr->next->next;\n        }\n\n        // Separate the new nodes from the original nodes\n        curr = head;\n        Node* clonedHead = head->next;\n        Node* clone = clonedHead;\n        while (clone->next != NULL) {\n\n            // Update the next nodes of original node\n            // and cloned node\n            curr->next = curr->next->next;\n            clone->next = clone->next->next;\n\n            // Move pointers of original as well as\n            // cloned linked list to their next nodes\n            curr = curr->next;\n            clone = clone->next;\n        }\n        curr->next = NULL;\n        clone->next = NULL;\n\n        return clonedHead;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public Node cloneLinkedList(Node head) {\n        if (head == null) {\n            return null;\n        }\n\n        // Step 1: Create new nodes and insert them next to the original nodes\n        Node curr = head;\n        while (curr != null) {\n            Node newNode = new Node(curr.data);\n            newNode.next = curr.next;\n            curr.next = newNode;\n            curr = newNode.next;\n        }\n\n        // Step 2: Set the random pointers of the new nodes\n        curr = head;\n        while (curr != null) {\n            if (curr.random != null) {\n                curr.next.random = curr.random.next;\n            }\n            curr = curr.next.next;\n        }\n\n        // Step 3: Separate the new nodes from the original nodes\n        curr = head;\n        Node clonedHead = head.next;\n        Node clone = clonedHead;\n        while (clone.next != null) {\n            curr.next = curr.next.next;\n            clone.next = clone.next.next;\n            curr = curr.next;\n            clone = clone.next;\n        }\n        curr.next = null;\n        clone.next = null;\n\n        return clonedHead;\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def cloneLinkedList(self, head):\n        if not head:\n            return None\n\n        # Step 1: Create new nodes and insert them next to the original nodes\n        curr = head\n        while curr:\n            new_node = Node(curr.data)\n            new_node.next = curr.next\n            curr.next = new_node\n            curr = new_node.next\n\n        # Step 2: Set the random pointers of the new nodes\n        curr = head\n        while curr:\n            if curr.random:\n                curr.next.random = curr.random.next\n            curr = curr.next.next\n\n        # Step 3: Separate the new nodes from the original nodes\n        curr = head\n        cloned_head = head.next\n        clone = cloned_head\n        while clone.next:\n            curr.next = curr.next.next\n            clone.next = clone.next.next\n            curr = curr.next\n            clone = clone.next\n        curr.next = None\n        clone.next = None\n\n        return cloned_head\n",
        "lang_text": "py"
      },
      {
        "lang": "Javascript",
        "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to clone the linked list\n    cloneLinkedList(head) {\n        if (!head) {\n            return null;\n        }\n\n        // Step 1: Create new nodes and insert them next to the original nodes\n        let curr = head;\n        while (curr) {\n            const newNode = new Node(curr.data);\n            newNode.next = curr.next;\n            curr.next = newNode;\n            curr = newNode.next;\n        }\n\n        // Step 2: Set the random pointers of the new nodes\n        curr = head;\n        while (curr) {\n            if (curr.random) {\n                curr.next.random = curr.random.next;\n            }\n            curr = curr.next.next;\n        }\n\n        // Step 3: Separate the new nodes from the original nodes\n        curr = head;\n        const clonedHead = head.next;\n        let clone = clonedHead;\n        while (clone.next) {\n            curr.next = curr.next.next;\n            clone.next = clone.next.next;\n            curr = curr.next;\n            clone = clone.next;\n        }\n        curr.next = null;\n        clone.next = null;\n\n        return clonedHead;\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
