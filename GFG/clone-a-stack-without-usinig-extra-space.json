{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706294,
            "title": "Clone a stack without using extra space",
            "titleSlug": "clone-a-stack-without-usinig-extra-space",
            "content": "<p><span style=\"font-size:18px\">Given elements of a stack, clone the stack without using extra space.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong></span>:\r\n<span style=\"font-size:18px\">N = 10\r\nst[] = {1, 1, 2, 2, 3, 4, 5, 5, 6, 7}\r\n<strong>Output:</strong>\r\n1&nbsp;</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>clonestack()</strong>&nbsp;which takes the input stack st[], an empty stack cloned[], you have to clone the stack st into stack cloned.<br />\r\nThe driver code itself prints 1 in the output if the stack st is cloned properly and prints 0 otherwise.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 1000</span><br />\r\n<span style=\"font-size:18px\">1&lt;= st[i] &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a stack `st` containing integer elements, create a clone of the stack into `cloned` without using any additional space beyond a constant amount. You are not allowed to use auxiliary data structures like arrays or other stacks for temporary storage.  The solution must modify the given stacks directly. The driver code will verify if the cloned stack is identical to the original.",
                "constraints": [
                    "1 <= N <= 1000 (where N is the number of elements in the stack)",
                    "1 <= st[i] <= 10^5 (where st[i] is an element in the stack)"
                ],
                "testcases": [
                    {
                        "input": "N = 10\nst[] = {1, 1, 2, 2, 3, 4, 5, 5, 6, 7}",
                        "output": "1",
                        "explanation": "The driver code outputs 1 if the stack `st` is successfully cloned into `cloned`, meaning both stacks contain the same elements in the same order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Reverse the given stack.</span></p>",
            "<p><span style=\"font-size:18px\">In order to solve this without using extra space, we first reverse the source stack, then&nbsp;<strong>pop</strong>&nbsp;the top elements of the source stack one by one and&nbsp;<strong>push</strong>&nbsp;it into the destination stack</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    //Function to clone a stack.\n    void clonestack(stack<int> st, stack<int>&cloned)\n    {\n        int count = 0;\n        \n        //iterating until all elements are cloned except the top.\n        while(count != st.size()-1)\n        {\n            //popping the top element from original stack.\n            int top = st.top();\n            st.pop();\n            \n            //moving all elements except the top to the cloned stack.\n            while(count != st.size())\n            {\n                cloned.push(st.top());\n                st.pop();\n            }\n            \n            //pushing the top element back to the original stack.\n            st.push(top);\n            \n            //moving all elements back to the original stack from the cloned stack.\n            while(cloned.size())\n            {\n                st.push(cloned.top());\n                cloned.pop();\n            }\n            \n            //incrementing the count to repeat the process.\n            count++;\n        }\n        \n        //pushing the remaining top element to the cloned stack.\n        while(st.size())\n        {\n            cloned.push(st.top());\n            st.pop();\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end function Template for Java\r\n\r\nclass Solution {\r\n    void clonestack(Stack<Integer> st, Stack<Integer> cloned) {\r\n        \r\n        int count = 0;\r\n  \r\n        // Reverse the order of the values in source stack\r\n        while (count != st.size()-1)\r\n        {\r\n            int top = st.pop();\r\n            while (count != st.size())\r\n                cloned.push(st.pop());\r\n                  \r\n            st.push(top);\r\n            while (cloned.size() != 0)\r\n                st.push(cloned.pop());\r\n                  \r\n            count += 1;\r\n        }\r\n          \r\n        // Pop the values from source and push into destination stack\r\n        while (st.size() != 0)\r\n            cloned.push(st.pop());\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python\r\n\r\nclass Solution:\r\n    def clonestack(self, st, cloned):\r\n        count = 0\r\n  \r\n        # Reverse the order of the values in source stack\r\n        while count != len(st)-1:\r\n              \r\n            top = st.pop()\r\n            while count != len(st):\r\n                cloned.append(st.pop())\r\n                  \r\n            st.append(top)\r\n            while len(cloned):\r\n                st.append(cloned.pop())\r\n                  \r\n            count += 1\r\n          \r\n        # Pop the values from source and push into destination stack\r\n        while len(st):\r\n            cloned.append(st.pop())",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}