{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707672,
            "title": "Clone an Undirected Graph",
            "titleSlug": "clone-graph",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>connected undirected graph&nbsp;</strong>with <strong>n </strong>nodes and <strong>m</strong> edges, with each node having a <strong>distinct label </strong>from <strong>0 to n-1</strong>, create a <strong>clone </strong>of the graph. Each node in the graph contains an integer <strong>val</strong> and an array (</span><strong style=\"font-size: 18px;\">neighbors</strong><span style=\"font-size: 18px;\">) of nodes,</span><strong style=\"font-size: 18px;\">&nbsp;</strong><span style=\"font-size: 18px;\">containing nodes that are adjacent to the current node</span><span style=\"font-size: 18px;\">.</span></p>\n<p><strong style=\"font-size: 18px;\">Note:&nbsp;</strong><span >If the user returns a <strong>correct copy </strong>of the given graph, then the system will print <strong>1</strong>; in the case when an incorrect copy is generated or when the user returns the original node, the system will print <strong>0</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>For Example :&nbsp; &nbsp;&nbsp;</strong></span></p>\n<pre><span style=\"font-size: 18px;\">class Node {\n    val: integer\n    neighbors: List[Node]\n}</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>adjList = <br />{<br />    {1, 3},<br />    {0, 2},<br />    {1, 3},<br />    {0, 2}<br />}\n<strong>Output: </strong>1\n<strong>Explanation:<br /></strong>1 is the output that the driver code will print in case <br />you successfully cloned the given graph.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>adjList = <br />{<br />    {1},<br />    {0}<br />}\n<strong>Output: </strong>1\n<strong>Explanation: <br /></strong>1 is the output that the driver code will print in case<br />you successfully cloned the given graph.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>cloneGraph( )&nbsp;</strong>which takes a&nbsp;node will always be the first node of the graph</span><span style=\"font-size: 18px;\"> as input and returns the&nbsp;<strong>copy of the given node</strong>&nbsp;as a reference to the cloned graph.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n + m).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n, m &lt;= 10<sup>4</sup><br />1 &lt;= Node value &lt;= n</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a connected undirected graph with 'n' nodes and 'm' edges, where each node has a distinct label from 0 to n-1, create a deep clone of the graph.  Each node in the graph has an integer 'val' representing its value and a list 'neighbors' containing references to adjacent nodes.",
                "constraints": [
                    "1 <= n, m <= 10^4",
                    "1 <= Node value <= n"
                ],
                "testcases": [
                    {
                        "input": "adjList = \n{\n    {1, 3},\n    {0, 2},\n    {1, 3},\n    {0, 2}\n}",
                        "output": "1",
                        "explanation": "The output 1 indicates that the provided solution successfully cloned the input graph, creating a new graph with identical structure and node values."
                    },
                    {
                        "input": "adjList = \n{\n    {1},\n    {0}\n}",
                        "output": "1",
                        "explanation": "The output 1 indicates that the provided solution successfully cloned the input graph, creating a new graph with identical structure and node values."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Bfs/Dfs.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\npublic:\n    // Function to clone a graph\n    Node* cloneGraph(Node* node) {\n        // If the node is NULL, return NULL\n        if (!node) {\n            return NULL;\n        }\n        // If the node is not present in the map, create a copy of it\n        if (copies.find(node) == copies.end()) {\n            // Create a new node with the same value as the original node\n            copies[node] = new Node(node -> val, {});\n            // Copy the neighbors of the original node recursively\n            for (Node* neighbor : node -> neighbors) {\n                copies[node] -> neighbors.push_back(cloneGraph(neighbor));\n            }\n        }\n        // Return the copy of the node\n        return copies[node];\n    }\nprivate:\n    // Map to store the copy of the nodes\n    unordered_map<Node*, Node*> copies;\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\r\n    Node cloneGraph(Node source){\r\n        Queue<Node> q = new LinkedList<Node>();\r\n        q.add(source);\r\n\r\n        // An HashMap to keep track of all the\r\n        // nodes which have already been created\r\n        HashMap<Node,Node> hm =\r\n                        new HashMap<Node,Node>();\r\n\r\n        //Put the node into the HashMap\r\n        hm.put(source,new Node(source.val));\r\n\r\n        while (!q.isEmpty())\r\n        {\r\n            // Get the front node from the queue\r\n            // and then visit all its neighbours\r\n            Node u = q.poll();\r\n\r\n            // Get corresponding Cloned Graph Node\r\n            Node cloneNodeU = hm.get(u);\r\n            if (u.neighbors != null)\r\n            {\r\n                ArrayList<Node> v = u.neighbors;\r\n                for (Node graphNode : v)\r\n                {\r\n                    // Get the corresponding cloned node\r\n                    // If the node is not cloned then we will\r\n                    // simply get a null\r\n                    Node cloneNodeG = hm.get(graphNode);\r\n\r\n                    // Check if this node has already been created\r\n                    if (cloneNodeG == null)\r\n                    {\r\n                        q.add(graphNode);\r\n\r\n                        // If not then create a new Node and\r\n                        // put into the HashMap\r\n                        cloneNodeG = new Node(graphNode.val);\r\n                        hm.put(graphNode,cloneNodeG);\r\n                    }\r\n\r\n                    // add the 'cloneNodeG' to neighbour\r\n                    // vector of the cloneNodeG\r\n                    cloneNodeU.neighbors.add(cloneNodeG);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the reference of cloned source Node\r\n        return hm.get(source);\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "import sys\r\nsys.setrecursionlimit(10**6)\r\n\r\n'''\r\nclass Node:\r\n    def __init__(self, val = 0, neighbors = []):\r\n        self.val = val\r\n        self.neighbors = neighbors\r\n'''\r\n\r\nclass Solution:\r\n    def __init__(self):\r\n        self.copies = {}\r\n\r\n    def cloneGraph(self, node):\r\n        if not node:\r\n            return None\r\n\r\n        if node not in self.copies:\r\n            # Create a new node with the same value as the original node\r\n            self.copies[node] = Node(node.val, [])\r\n            # Copy the neighbors of the original node recursively\r\n            for neighbor in node.neighbors:\r\n                self.copies[node].neighbors.append(self.cloneGraph(neighbor))\r\n\r\n        return self.copies[node]\r\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}