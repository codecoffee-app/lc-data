{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701245,
            "title": "Closer to sort",
            "titleSlug": "closer-to-sort-1587115620",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr</strong>[](0-based indexing) of <strong>N</strong> integers which is <strong>closer sorted </strong>(defined below)<strong> </strong>and an element <strong>x</strong>. The task is to find the index of element <strong>x</strong> if it is present. If not present, then print -1.</span><br />\n<span style=\"font-size:18px\"><strong>Closer Sorted</strong>: The first array is sorted, but after sorting some elements are moved to either of the adjacent positions, i.e, maybe to the <strong>arr[i+1]</strong> or <strong>arr[i-1]</strong>.<br />\n<br />\n<strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: N = 5, A[] = [3 2 10 4 40], x = 2\n<strong>Output</strong>: 1\n<strong>Explanation</strong>: 2 is present at index 1 \n(0-based indexing) in the given array.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: N = 4, A[] = [2 1 4 3], x = 5\n<strong>Output</strong>: -1\n<strong>Explanation</strong>: \n5 is not in the array so the output will \nbe -1.\n</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nThis is a function problem. You only need to complete the <strong>function </strong>closer() that <strong>arr, N, and x as parameters </strong>and <strong>returns </strong>the index. If the element is not present, return <strong>-1</strong>.</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(Log(N)).<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>6</sup><br />\n1 &lt;= arr[i],x &lt;= 10</span><sup><span style=\"font-size:15px\">9</span></sup><br />\n<br />\n<span style=\"font-size:18px\"><strong>Note:&nbsp;</strong>You may assume that the array does not contain any duplicate elements.&nbsp;</span><br />\n&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a closer sorted array `arr` of `N` integers (0-based indexing) and an element `x`, find the index of `x` in `arr`. A closer sorted array is an array that was originally sorted, but some elements have been moved to an adjacent position (either `arr[i+1]` or `arr[i-1]`).",
                "constraints": [
                    "1 <= N <= 10^6",
                    "1 <= arr[i], x <= 10^9",
                    "The array does not contain any duplicate elements."
                ],
                "testcases": [
                    {
                        "input": "N = 5, A[] = [3, 2, 10, 4, 40], x = 2",
                        "output": "1",
                        "explanation": "2 is present at index 1 (0-based indexing)."
                    },
                    {
                        "input": "N = 4, A[] = [2, 1, 4, 3], x = 5",
                        "output": "-1",
                        "explanation": "5 is not in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\n// A recursive binary search based function.\n// It returns index of x in given array\n// arr[l..r] is present, otherwise -1\nint binarySearch(int arr[], int l, int r, int x)\n{\n\tif (r >= l)\n\t{\n\t\tint mid = l + (r - l) / 2;\n\n\t\t// If the element is present at\n\t\t// one of the middle 3 positions\n\t\tif (arr[mid] == x)\n\t\t\treturn mid;\n\t\tif (mid > l && arr[mid - 1] == x)\n\t\t\treturn (mid - 1);\n\t\tif (mid < r && arr[mid + 1] == x)\n\t\t\treturn (mid + 1);\n\n\t\t// If element is smaller than mid, then\n\t\t// it can only be present in left subarray\n\t\tif (arr[mid] > x)\n\t\t\treturn binarySearch(arr, l, mid - 2, x);\n\n\t\t// Else the element can only be present\n\t\t// in right subarray\n\t\treturn binarySearch(arr, mid + 2, r, x);\n\t}\n\n// We reach here when element is not present in array\n\treturn -1;\n}\n\nint closer(int arr[], int N, int x) {\n\treturn binarySearch(arr, 0, N - 1, x);\n}\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution{\n    public:\n    \n    // l: lower index\n    // r: higher index\n    // x: element to find\n    //Binary search function to find x in the array.\n    int binarySearch(int arr[], int l, int r, int x){\n        \n        if(r >= l){\n            \n            //Finding middle index.\n            int mid = l + (r-l)/2;\n            \n            //We check for the element also at mid-1 and mid+1 since  \n            //some elements are moved to either of the adjacent positions,\n            //i.e, maybe to the arr[i+1] or arr[i-1].\n            \n            //If the element is present at any one of the 3 middle\n            //positions i.e. (mid, mid-1, mid+1), we return the index.\n            if(arr[mid] == x){\n                return mid;\n            }\n            \n            if(mid > l && arr[mid-1] == x){\n                return mid-1;\n            }\n            \n            if(mid < r && arr[mid+1] == x){\n                return mid+1;\n            }\n            \n            //If element is smaller than element at mid, then it can only be \n            //present in left subarray so we call the function recursively.\n            if(arr[mid] > x){\n                return binarySearch(arr, l, mid-2, x);\n            }\n            \n            //If element is greater than element at mid, then it can only be \n            //present in right subarray so we call the function recursively.\n            return binarySearch(arr, mid+2, r, x);\n        }\n        \n        //If the element is not present in the array we return -1.\n        return -1;\n        \n    }\n    \n    //Function to find index of element x in the array if it is present.\n    int closer(int arr[],int n, int x)\n    {\n        return binarySearch(arr, 0, n-1, x);\n    }\n    \n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    //Function to find index of element x in the array if it is present.\n    static long closer(int arr[], int n, long x)\n    {\n        return binarySearch(arr, 0, n-1, x);\n    }\n    \n    // arr[]: input array\n    // l: lower index\n    // r: higher index\n    // x: element to find\n    //Binary search function to find x in the array.\n    public static long binarySearch(int arr[], int l, int r, long x){\n        \n        if(r>=l){\n            \n            //Finding middle index.\n            int mid = l+(r-l)/2;\n            \n            //We check for the element also at mid-1 and mid+1 since  \n            //some elements are moved to either of the adjacent positions,\n            //i.e. maybe to the arr[i+1] or arr[i-1].\n            \n            //If the element is present at any one of the 3 middle\n            //positions i.e. (mid, mid-1, mid+1), we return the index.\n            if(arr[mid]==x)return mid;\n            \n            if(mid > l && arr[mid-1]==x)return mid-1;\n            \n            if(mid < r && arr[mid+1]==x)return mid+1;\n            \n            //If element is smaller than element at mid, then it can only be \n            //present in left subarray so we call the function recursively.\n            if(arr[mid] > x){\n                return binarySearch(arr, l, mid-2, x);\n            }\n            \n            //If element is greater than element at mid, then it can only be \n            //present in right subarray so we call the function recursively.\n            return binarySearch(arr, mid+2, r, x);\n        }\n        \n        //If the element is not present in the array we return -1.\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    \n    #Binary search function to find x in the array.\n    def binarySearch(self, arr,  l,  r,  x):\n        \n        if(r >= l):\n            \n            #Finding middle index.\n            mid = l + (r-l)//2\n            \n            #We check for the element also at mid-1 and mid+1 since  \n            #some elements are moved to either of the adjacent positions,\n            #i.e. maybe to the arr[i+1] or arr[i-1].\n            \n            #If the element is present at any one of the 3 middle\n            #positions i.e. (mid, mid-1, mid+1), we return the index.\n            if(arr[mid] == x):\n                return mid\n            \n            if(mid >l and arr[mid-1] == x):\n                return mid-1\n            \n            if(mid < r and arr[mid+1] == x):\n                return mid+1\n            \n            #If element is smaller than element at mid, then it can only be \n            #present in left subarray so we call the function recursively.\n            if(arr[mid] > x):\n                return self.binarySearch(arr, l, mid-2, x)\n                \n            #If element is greater than element at mid, then it can only be \n            #present in right subarray so we call the function recursively.\n            return self.binarySearch(arr, mid+2, r, x)\n            \n        #If the element is not present in the array we return -1.\n        return -1;\n    \n    #Function to find index of element x in the array if it is present.\n    def closer(self, arr, n,  x):\n        return self.binarySearch(arr, 0, n-1, x)\n        \n        ",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n * @param {number} x\n * @returns {number}\n*/\n\nclass Solution {\n    //Binary search function to find x in the array.\n    binarySearch(arr, l, r, x){\n    \n        if(r >= l){\n            \n            //Finding middle index.\n            let mid = l + Math.floor((r-l)/2);\n            \n            //We check for the element also at mid-1 and mid+1 since  \n            //some elements are moved to either of the adjacent positions,\n            //i.e. maybe to the arr[i+1] or arr[i-1].\n            \n            //If the element is present at any one of the 3 middle\n            //positions i.e. (mid, mid-1, mid+1), we return the index.\n            if(arr[mid] == x){\n                return mid;\n            }\n            \n            if(mid > l && arr[mid-1] == x){\n                return mid-1;\n            }\n            \n            if(mid < r && arr[mid+1] == x){\n                return mid+1;\n            }\n            \n            //If element is smaller than element at mid, then it can only be \n            //present in left subarray so we call the function recursively.\n            if(arr[mid] > x){\n                return this.binarySearch(arr, l, mid-2, x);\n            }\n            \n            //If element is greater than element at mid, then it can only be \n            //present in right subarray so we call the function recursively.\n            return this.binarySearch(arr, mid+2, r, x);\n            \n        }\n        \n        //If the element is not present in the array we return -1.\n        return -1;\n        \n    }\n    \n    //Function to find index of element x in the array if it is present.\n    closer(arr, n, x)\n    {\n        return this.binarySearch(arr, 0, n-1, x);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find index of element x in the array if it is present.\n    public int closer(int[] arr, int n, int x)\n    {\n        //Your code here\n        int l = 0;\n        int r = n - 1;\n        \n        while (l <= r)\n        {\n            int mid = l + (r - l) / 2;\n            \n            if (arr[mid] == x)\n            {\n                return mid;\n            }\n            if (mid > l && arr[mid - 1] == x)\n            {\n                return mid - 1;\n            }\n            if (mid < r && arr[mid + 1] == x)\n            {\n                return mid + 1;\n            }\n            \n            if (arr[mid] > x)\n            {\n                r = mid - 2;\n            }\n            else\n            {\n                l = mid + 2;\n            }\n        }\n        \n        return -1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}