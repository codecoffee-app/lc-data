{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700677,
            "title": "Closest Neighbour in BST",
            "titleSlug": "closest-neighbor-in-bst",
            "content": "<p><span >Given the <strong>root</strong> of a<strong> <a title=\"BST\" href=\"https://www.geeksforgeeks.org/binary-search-tree-data-structure/\" target=\"_blank\" rel=\"noopener\">binary search tree</a></strong> and a number <strong>k</strong>, find the greatest number in the binary search tree that is less than or equal to <strong>k</strong>.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>root = [</span><span style=\"font-size: 18.6667px;\">5, 2, 12, 1, 3, 9, 21, N, N, N, N, N, N, 19, 25</span><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">], k = 24</span><br /><span ><input style=\"white-space: normal;\" alt=\"\" src=\"http://contribute.geeksforgeeks.org/wp-content/uploads/g.png\" type=\"image\" />\n<strong>Output:</strong> 21\n<strong>Explanation:</strong> The greatest element in the tree which is less than or equal to 24, is 21. <br /></span></pre>\n<pre><span ><strong>Input:</strong> root = [<span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5, 2, 12, 1, 3, 9, 21, N, N, N, N, N, N, 19, 25</span><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">], k = 4</span><br /><input style=\"white-space: normal;\" alt=\"\" src=\"http://contribute.geeksforgeeks.org/wp-content/uploads/g.png\" type=\"image\" />\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The greatest element in the tree which is less than or equal to 4, is 3. </span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5<br /></sup>1 &lt;= elements of the BST, k &lt;= 10<sup>5<br /></sup>All nodes are unique in the BST</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary search tree (BST) and a number k, find the largest value in the BST that is less than or equal to k.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= elements of the BST, k <= 10^5",
                    "All nodes are unique in the BST"
                ],
                "testcases": [
                    {
                        "input": "root = [5, 2, 12, 1, 3, 9, 21, null, null, null, null, null, null, 19, 25], k = 24",
                        "output": "21",
                        "explanation": "The largest element in the tree that is less than or equal to 24 is 21."
                    },
                    {
                        "input": "root = [5, 2, 12, 1, 3, 9, 21, null, null, null, null, null, null, 19, 25], k = 4",
                        "output": "3",
                        "explanation": "The largest element in the tree that is less than or equal to 4 is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"box-sizing: border-box; line-height: 1.6rem; font-family: arial, helvetica, sans-serif; font-size: 14pt;\">Utilize the properties of the Binary Search Tree to efficiently find the required value.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n/*\nstruct Node {\n    int key;\n    Node* left, *right;\n};\n*/\n\nclass Solution {\n  public:\n    int findMaxFork(Node* root, int k) {\n        if (root == NULL)\n            return -1;\n        if (root->key == k)\n            return k;\n\n        // If root's value is smaller, try in rght\n        // subtree\n        else if (root->key < k) {\n            int ans = findMaxFork(root->right, k);\n            if (ans == -1)\n                return root->key;\n            else\n                return ans;\n        }\n\n        // If root's key is greater, return value\n        // from left subtree.\n        else if (root->key > k)\n            return findMaxFork(root->left, k);\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    static int findMaxFork(Node root, int k) {\n        // Base cases\n        if (root == null) return -1;\n        if (root.key == k) return k;\n\n        // If root's value is smaller, try in rght\n        // subtree\n        else if (root.key < k) {\n            int ans = findMaxFork(root.right, k);\n            if (ans == -1)\n                return root.key;\n            else\n                return ans;\n        }\n\n        // If root's key is greater, return value\n        // from left subtree.\n        else if (root.key > k)\n            return findMaxFork(root.left, k);\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def findMaxFork(self, root, k):\n\n        # Base cases\n        if root == None:\n            return -1\n        if root.key == k:\n            return k\n\n        # If root's value is smaller, try in\n        # right subtree\n        elif root.key < k:\n            ans = self.findMaxFork(root.right, k)\n            if ans == -1:\n                return root.key\n            else:\n                return ans\n\n        # If root's key is greater, return\n        # value from left subtree.\n        elif root.key > k:\n            return self.findMaxFork(root.left, k)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n * @param {number} k\n * @return {number}\n */\n\nclass Solution {\n    findMaxFork(root, k) {\n        // code here\n        if (root === null) return -1;\n        if (root.data === k) return k;\n\n        // If root's value is smaller, try in right\n        // subtree\n        else if (root.data < k) {\n            let ans = this.findMaxFork(root.right, k);\n            if (ans === -1)\n                return root.data;\n            else\n                return ans;\n        }\n\n        // If root's key is greater, return value\n        // from left subtree.\n        else if (root.data > k)\n            return this.findMaxFork(root.left, k);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}