{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703961,
            "title": "Closest Number",
            "titleSlug": "closest-number5728",
            "content": "<p><span >Given two integers <strong>n</strong> and <strong>m</strong>. The problem is to find the number closest to <strong>n</strong> and divisible by <strong>m</strong>. If there is more than one such number, then output the one having the <strong>maximum absolute value</strong>.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>n<strong> </strong>=<strong> </strong>13 , m<strong> </strong>=<strong> </strong>4\n<strong>Output: </strong>12\n<strong>Explanation: </strong>12 is the Closest Number to 13 which is divisible by 4.</span></pre>\n<pre><span ><strong>Input:</strong> n<strong> </strong>= -15 , m<strong> </strong>= 6\n<strong>Output: -</strong>18\n<strong>Explanation: </strong>-12 and -18 are both similarly close to -15 and divisible by 6. but -18 has the maximum absolute value. So, Output is -18</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >-10<sup>5</sup> &lt;= n, m &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, `n` and `m`, find the integer closest to `n` that is divisible by `m`. If multiple such numbers exist, return the one with the largest absolute value.",
                "constraints": [
                    "-10<sup>5</sup> <= n <= 10<sup>5</sup>",
                    "-10<sup>5</sup> <= m <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "n = 13, m = 4",
                        "output": "12",
                        "explanation": "12 is the closest number to 13 that is divisible by 4."
                    },
                    {
                        "input": "n = -15, m = 6",
                        "output": "-18",
                        "explanation": "Both -12 and -18 are equally close to -15 and divisible by 6. However, -18 has a larger absolute value, so it is the desired output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>To find the closest number divisible by <code>M</code>, calculate both the lower and upper multiples of <code>M</code> relative to <code>N</code>, and return the one with the smallest absolute difference from <code>N</code>.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the closest number to N which is divisible by M.\n    int closestNumber(int n, int m) {\n\n        // calculating the quotient of N divided by M.\n        int q = n / m;\n        // calculating the closest number to N which is divisible by M using the\n        // quotient.\n        int n1 = q * m;\n        int n2;\n\n        // checking if the product of N and M is greater than 0.\n        if (n * m > 0)\n            n2 = (m * (q + 1));\n        // if the product of N and M is not greater than 0, then it is less than 0.\n        else\n            n2 = (m * (q - 1));\n\n        // comparing the absolute difference between n2 and N with that of n1 and N.\n        if (abs(n2 - n) > abs(n - n1))\n            return n1;\n        else\n            return n2;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int closestNumber(int n, int m) {\n\n        // dividing N by M to find the quotient\n        int q = n / m;\n\n        // finding the nearest number less than or equal to N which is divisible by M\n        int n1 = q * m;\n\n        // finding the nearest number greater than N which is divisible by M\n        int n2;\n        if (n * m > 0)\n            n2 = (m * (q + 1));\n        else\n            n2 = (m * (q - 1));\n\n        // comparing the absolute difference between n2 and N and n1 and N\n        // returning the closest number to N between n1 and n2\n        if (Math.abs(n2 - n) > Math.abs(n - n1))\n            return n1;\n        else\n            return n2;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\n\nclass Solution:\n\n    def closestNumber(self, n, m):\n        # code here\n        # Find the quotient\n        q = int(n / m)\n\n        # 1st possible closest number\n        n1 = m * q\n\n        # 2nd possible closest number\n        if ((n * m) > 0):\n            n2 = (m * (q + 1))\n        else:\n            n2 = (m * (q - 1))\n\n        # if true, then n1 is the required closest number\n        if (abs(n - n1) < abs(n - n2)):\n            return n1\n\n        # else n2 is the required closest number\n        return n2\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    public int closestNumber(int n, int m) {\n        // calculating the quotient of N divided by M.\n        int q = n / m;\n        // calculating the closest number to N which is divisible by M using the\n        // quotient.\n        int n1 = q * m;\n        int n2;\n\n        // checking if the product of N and M is greater than 0.\n        if (n * m > 0) n2 = (m * (q + 1));\n        // if the product of N and M is not greater than 0, then it is less than 0.\n        else\n            n2 = (m * (q - 1));\n\n        // comparing the absolute difference between n2 and N with that of n1 and N.\n        if (Math.Abs(n2 - n) > Math.Abs(n - n1))\n            return n1;\n        else\n            return n2;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the closest number to N which is divisible by M.\n    closestNumber(n, m) {\n        // calculating the quotient of N divided by M.\n        let q = parseInt(n / m); // Use 'let' instead of 'const' for q\n\n        // Reversing the sign of q if needed\n\n        // q = q * (-1);\n\n        // calculating the closest number to N which is divisible by M using the\n        // quotient.\n        const n1 = q * m;\n        let n2;\n\n        // checking if the product of N and M is greater than 0.\n        if (n * m > 0) {\n            n2 = m * (q + 1);\n        }\n        // if the product of N and M is not greater than 0, then it is less than 0.\n        else {\n            n2 = m * (q - 1);\n        }\n\n        // comparing the absolute difference between n2 and N with that of n1 and N.\n        if (Math.abs(n2 - n) > Math.abs(n - n1)) {\n            return n1;\n        } else {\n            return n2;\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}