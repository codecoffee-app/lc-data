{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702914,
            "title": "Closest Strings",
            "titleSlug": "closest-strings0611",
            "content": "<p><span style=\"font-size: 20px;\">Given a list of words, <strong>S</strong> followed by two specific words, <strong>word1 </strong>and<strong> word2</strong>, the task is to find the minimum distance between the indices of these two words in the list.</span></p>\n<p><strong style=\"font-size: 18px;\">Note:</strong><span style=\"font-size: 18px;\">&nbsp;word1 and word2 are both in the list, and there can be multiple occurrences of words in the list.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>S = {</span><span style=\"font-size: 20px;\"> \"the\", \"quick\", \"brown\", \"fox\", \"quick\"</span><span style=\"font-size: 18px;\">}\nword1 = \"the\"\nword2 = \"fox\"\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>Minimum distance between the words \"the\" and \"fox\" is 3</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>S = {\"geeks\", \"for\", \"geeks\", \"contribute\", \"practice\"}\nword1 = \"geeks\"\nword2 = \"practice\"\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>Minimum distance between the words \"geeks\" and \"practice\" is 2</span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">Sum of lengths of words &le; 10<sup>5</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Each time we find a new occurrence of one of the words, we do not need to search the entire array for the other word, we can precompute the index of its most recent occurrence.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "linkedin"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n    //Function to calculate the shortest distance between two words in a vector.\n\tint shortestDistance(vector<string> &s, string word1, string word2)\n\t{\n\t\t//Initializing the indices for word1 and word2 to -1.\n\t    int i1 = -1, i2 = -1;\n\n\t    //Initializing the minimum distance to maximum possible value.\n\t    int minDistance = INT_MAX;\n\t    \n\t    //Iterating through the vector.\n\t    for (int i = 0; i < s.size(); i++) \n\t    {\n\t    \t//If the current word is equal to word1, updating i1 to current index.\n\t        if (s[i] == word1)\n\t            i1 = i;\n\t        \n\t        //If the current word is equal to word2, updating i2 to current index.\n\t        if (s[i] == word2)\n\t            i2 = i;\n\n\t        //If both i1 and i2 have been updated, calculating the distance between them.\n\t        if (i1 != -1 && i2 != -1) {\n\t            minDistance = min(minDistance, abs(i1 - i2));\n\t        }\n\t    }\n\n\t    //Returning the minimum distance.\n\t    return minDistance;\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Backend complete function Template for Java\r\n\r\nclass Solution {\r\n    \r\n    // Function to find the shortest distance between two words in a given list of strings\r\n    int shortestDistance(ArrayList<String> s, String word1, String word2) {\r\n        \r\n        // Initializing variables to store the indices of the two words\r\n        int i1 = -1, i2 = -1;\r\n        \r\n        // Initializing the minimum distance to a large number\r\n        int minDistance = 100000000;\r\n\t    \r\n\t    // Looping through the list of strings\r\n\t    for (int i = 0; i < s.size(); i++) \r\n\t    {\r\n\t        // Checking if the current string is equal to the first word\r\n\t        if (s.get(i).equals(word1))\r\n\t            i1 = i;\r\n\t        \r\n\t        // Checking if the current string is equal to the second word\r\n\t        if (s.get(i).equals(word2))\r\n\t            i2 = i;\r\n\r\n\t        // Checking if both words have been found\r\n\t        if (i1 != -1 && i2 != -1) {\r\n\t            // Calculating the distance between the indices and updating the minimum distance\r\n\t            minDistance = Math.min(minDistance, Math.abs(i1 - i2));\r\n\t        }\r\n\t    }\r\n\r\n\t    // Returning the minimum distance\r\n\t    return minDistance;\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\n\nclass Solution:\n    #Function to find the shortest distance between two words.\n    def shortestDistance(self, s, word1, word2):\n        i1 = -1  #initialize index of word1\n        i2 = -1  #initialize index of word2\n\n        minDistance = 100000000  #initialize minimum distance to a high value\n\n        #loop through the given list of words\n        for i in range(len(s)):\n            if s[i] == word1:  #if current word is equal to word1\n                i1 = i  #update index of word1 to the current index\n            if s[i] == word2:  #if current word is equal to word2\n                i2 = i  #update index of word2 to the current index\n\n            if i1 != -1 and i2 != -1:  #if both word1 and word2 have been found\n                minDistance = min(\n                    minDistance, abs(i1 - i2))  #calculate the minimum distance\n\n        return minDistance  #return the minimum distance\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string[]} s\n * @param {string} word1\n * @param {string} word2\n * @returns {number}\n*/\n\nclass Solution {\n\t//Function to find the shortest distance between two words.\n\tshortestDistance(s, word1, word2) {\n\t\tlet i1 = -1;   //initialize index of word1\n        let i2 = -1;   //initialize index of word2\n        \n        let minDistance = 100000000;   //initialize minimum distance to a high value\n        \n        //loop through the given list of words\n        for (let i = 0; i < s.length; i++) {\n            if (s[i] === word1) {   //if current word is equal to word1\n                i1 = i;   //update index of word1 to the current index\n            }\n            if (s[i] === word2) {   //if current word is equal to word2\n                i2 = i;   //update index of word2 to the current index\n            }\n        \n            if (i1 !== -1 && i2 !== -1) {   //if both word1 and word2 have been found\n                minDistance = Math.min(minDistance, Math.abs(i1 - i2));   //calculate the minimum distance\n            }\n        }\n        \n        return minDistance;   //return the minimum distance\n\t}\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}