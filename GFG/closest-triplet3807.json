{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705573,
            "title": "Closest Triplet",
            "titleSlug": "closest-triplet3807",
            "content": "<p><span style=\"font-size:20px\">Given three sorted arrays A[] of size P, B[] of size Q and C[] of size R.Find a number X such that when&nbsp; 3 elements i, j and k are chosen from A, B and C respectively,then&nbsp;X=max(abs(A[i] &ndash; B[j]), abs(B[j] &ndash; C[k]), abs(C[k] &ndash; A[i])) is minimized. Here abs() indicates absolute value.</span></p>\r\n\r\n<p><strong><span style=\"font-size:20px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:20px\"><strong>Input: </strong>\r\nP=3\r\nA[] = {1, 4, 10}\r\nQ=3\r\nB[] = {2, 15, 20}\r\nR=2\r\nC[] = {10, 12}\r\n<strong>Output:</strong>\r\n5\r\n<strong>Explanation:</strong>\r\nWe take 10 from A, 15 from B and\r\n10 from C, so,\r\nX=max(abs(10-15),abs(15-12),abs(10-10))\r\nwhich gives X=18</span></pre>\r\n\r\n<p><strong><span style=\"font-size:20px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:20px\"><strong>Input: </strong>\r\nP=3\r\nA[] = {20, 24, 100}\r\nQ=5\r\nB[] = {2, 19, 22, 79, 800}\r\nR=5\r\nC[] = {10, 12, 23, 24, 119}\r\n<strong>Output:\r\n</strong>2\r\n<strong>Explanation:</strong>\r\nWe take 24 from A,22 from B and 24 from C.X\r\n=max(abs(24-22),max(abs(24-22),abs(24-24)))\r\nwhich is 2.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:20px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything.Your task is to complete the function <strong>findClosest()</strong> which takes P,Q,R,A[],B[],C[] as input parameters and returns the minimum X where X=max(abs(A[i]-B[j]),max(abs(A[i]-C[k]),abs(B[j]-C[k]))).</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:20px\"><strong>Expected Time Complexity:</strong>O(P+Q+R)<br />\r\n<strong>Expected Auxillary Space:</strong>O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:20px\"><strong>Constraints:</strong><br />\r\n1&lt;=P,Q,R&lt;=10<sup>4</sup><br />\r\n1&lt;=A[i],B[j],C[k]&lt;=10<sup>6 </sup></span><span style=\"font-size:18px\">where 0&lt;=i&lt;P , 0&lt;=j&lt;Q , 0&lt;=k&lt;R</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three sorted arrays A of size P, B of size Q, and C of size R, find the minimum value of X. X is calculated as max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i])), where i, j, and k are indices chosen from A, B, and C respectively, and abs() denotes absolute value.",
                "constraints": [
                    "1 <= P, Q, R <= 10^4",
                    "1 <= A[i], B[j], C[k] <= 10^6 where 0 <= i < P, 0 <= j < Q, 0 <= k < R"
                ],
                "testcases": [
                    {
                        "input": "P=3\nA[] = {1, 4, 10}\nQ=3\nB[] = {2, 15, 20}\nR=2\nC[] = {10, 12}",
                        "output": "5",
                        "explanation": "Choosing 10 from A, 15 from B, and 10 from C results in X = max(abs(10-15), abs(15-10), abs(10-10)) = max(5, 5, 0) = 5. Note the original provided example calculated X=18 which is incorrect. The correct result is 5."
                    },
                    {
                        "input": "P=3\nA[] = {20, 24, 100}\nQ=5\nB[] = {2, 19, 22, 79, 800}\nR=5\nC[] = {10, 12, 23, 24, 119}",
                        "output": "2",
                        "explanation": "Choosing 24 from A, 22 from B, and 24 from C results in X = max(abs(24-22), abs(22-24), abs(24-24)) = max(2, 2, 0) = 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The Given arrays are already sorted. Try using that to obtain an efficient algorithm.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    // Function to find the closest distance between three arrays.\r\n    int findClosest(int P, int Q, int R, int A[], int B[], int C[]) {\r\n        int diff = INT_MAX; // Variable to store the minimum difference.\r\n        int res_i = 0, res_j = 0, res_k = 0; // Variables to store the indices with the minimum difference.\r\n        int i = 0, j = 0, k = 0; // Variables to iterate through the arrays.\r\n        \r\n        // Loop to compare the numbers in the arrays and find the minimum difference.\r\n        while (i < P && j < Q && k < R) {\r\n            int minimum = min(A[i], min(B[j], C[k])); // Find the minimum value among the three arrays.\r\n            int maximum = max(A[i], max(B[j], C[k])); // Find the maximum value among the three arrays.\r\n            \r\n            // Update the minimum difference and the corresponding indices.\r\n            if (maximum - minimum < diff) {\r\n                res_i = i, res_j = j, res_k = k;\r\n                diff = maximum - minimum;\r\n            }\r\n            \r\n            if (diff == 0) break; // If the difference is already 0, we can stop iterating.\r\n            \r\n            // Increment the indices based on which array has the minimum value.\r\n            if (A[i] == minimum)\r\n                i++;\r\n            else if (B[j] == minimum)\r\n                j++;\r\n            else\r\n                k++;\r\n        }\r\n        \r\n        // Calculate the absolute differences between the corresponding array elements with the minimum difference.\r\n        int x1 = abs(A[res_i] - B[res_j]);\r\n        int x2 = abs(C[res_k] - B[res_j]);\r\n        int x3 = abs(A[res_i] - C[res_k]);\r\n        \r\n        // Return the maximum of the absolute differences.\r\n        return max(x1, max(x2, x3));\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    // Function to find closest elements in three arrays \r\n    // and return the maximum difference between any two of them.\r\n    int findClosest(int P, int Q, int R, int A[], int B[], int C[]) {\r\n        // Initialize variables to store the minimum difference, \r\n        // and the indices of the elements with the minimum difference.\r\n        int diff = Integer.MAX_VALUE;\r\n        int res_i = 0;\r\n        int res_j = 0;\r\n        int res_k = 0;\r\n        \r\n        // Initialize loop variables.\r\n        int i = 0, j = 0, k = 0;\r\n        \r\n        // Iterate through the arrays simultaneously.\r\n        while (i < P && j < Q && k < R) {\r\n            // Find the minimum and maximum elements among the current three elements.\r\n            int minimum = Math.min(A[i], Math.min(B[j], C[k]));\r\n            int maximum = Math.max(A[i], Math.max(B[j], C[k]));\r\n            \r\n            // Update the minimum difference and indices if a smaller difference is found.\r\n            if (maximum - minimum < diff) {\r\n                res_i = i;\r\n                res_j = j;\r\n                res_k = k;\r\n                diff = maximum - minimum;\r\n            }\r\n            \r\n            // If the minimum difference is 0, break out of the loop.\r\n            if (diff == 0) \r\n                break;\r\n            \r\n            // Move the pointers to the next element in the array with the minimum element.\r\n            if (A[i] == minimum)\r\n                i++;\r\n            else if (B[j] == minimum)\r\n                j++;\r\n            else\r\n                k++;\r\n        }\r\n        \r\n        // Calculate the absolute differences between the selected elements.\r\n        int x1 = Math.abs(A[res_i] - B[res_j]);\r\n        int x2 = Math.abs(C[res_k] - B[res_j]);\r\n        int x3 = Math.abs(A[res_i] - C[res_k]);\r\n        \r\n        // Return the maximum difference.\r\n        return Math.max(x1, Math.max(x2, x3));\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def findClosest(self, P, Q, R, A, B, C):\n        \n        #initialize the difference as a very large number\n    \tdiff = (int)(1e10)\n    \tres_i =0\n    \tres_j = 0\n    \tres_k = 0\n    \ti=0\n    \tj=0\n    \tk=0\n    \t#iterate until we reach the end of any list\n    \twhile (i < P and j < Q and k < R):\n    \t    #find the minimum and maximum value from the three lists\n    \t    minimum = min(A[i], min(B[j], C[k]))\n    \t    maximum = max(A[i], max(B[j], C[k]))\n    \t    #check if the difference between maximum and minimum is smaller than current minimum difference\n    \t    if maximum-minimum<diff:\n    \t        #update the indices and difference\n    \t        res_i=i\n    \t        res_j=j\n    \t        res_k=k\n    \t        diff=maximum-minimum\n    \t    #if difference becomes 0, then we have found the closest elements, so break the loop\n    \t    if diff==0:\n    \t       break\n    \t    #increment the index of the list with the minimum value\n    \t    if A[i]==minimum:\n    \t       i+=1\n    \t    elif B[j]==minimum:\n    \t       j+=1\n    \t    else:\n    \t       k+=1\n    \t#calculate the absolute differences of the closest elements\n    \tx1 = abs(A[res_i] - B[res_j])\n    \tx2 = abs(C[res_k] - B[res_j])\n    \tx3 = abs(A[res_i] - C[res_k])\n    \t#return the maximum absolute difference among the closest elements\n    \treturn max(x1, max(x2, x3))",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int findClosest(int P, int Q, int R, int[] A, int[] B, int[] C)\n    {\n        int diff = int.MaxValue; \n        int res_i = 0, res_j = 0, res_k = 0;\n        int i = 0, j = 0, k = 0; \n        \n        while (i < P && j < Q && k < R)\n        {\n            int minimum = Math.Min(A[i], Math.Min(B[j], C[k])); \n            int maximum = Math.Max(A[i], Math.Max(B[j], C[k])); \n            \n            if (maximum - minimum < diff)\n            {\n                res_i = i; \n                res_j = j; \n                res_k = k;\n                diff = maximum - minimum;\n            }\n            \n            if (diff == 0) \n                break; \n            \n            if (A[i] == minimum)\n                i++;\n            else if (B[j] == minimum)\n                j++;\n            else\n                k++;\n        }\n        \n        int x1 = Math.Abs(A[res_i] - B[res_j]);\n        int x2 = Math.Abs(C[res_k] - B[res_j]);\n        int x3 = Math.Abs(A[res_i] - C[res_k]);\n        \n        return Math.Max(x1, Math.Max(x2, x3));\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}