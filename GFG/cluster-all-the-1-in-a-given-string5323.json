{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704697,
            "title": "Cluster all the 1 in a given string",
            "titleSlug": "cluster-all-the-1-in-a-given-string5323",
            "content": "<p><span style=\"font-size:18px\">Given a binary string S which only contains &#39;0&#39; and &#39;1&#39; such that the &#39;0&#39; or &#39;1&#39; at the 1<sup>st&nbsp;</sup>position is just next to &#39;0&#39; or &#39;1&#39; at the last position i.e. string is cyclic. Your task is to re arrange the string such that all the &#39;1&#39; in the string are next to each other (Note : the string is cyclic ).&nbsp;<br />\r\nYou can choose any &#39;1&#39; in the string&nbsp;and swap its position with the first &#39;1&#39;&nbsp;in any of the two direction.<br />\r\nFind the minimum number of moves in which the task can be done.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>S = &quot;010110101&quot;\r\n<strong>Output: </strong>3\r\n<strong>Explanation: </strong>In the first move 01011010<strong>1&nbsp;</strong>&nbsp;\r\nis changed to&nbsp;0101101<strong>1</strong>0.In the second move&nbsp;\r\n0101101<strong>1</strong>0 is changed to 01011<strong>1</strong>100. In the \r\nthird move 0<strong>1</strong>0111100 is change to&nbsp;00<strong>1</strong>111100.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>S = &quot;111&quot;\r\n<strong>Output: </strong>0\r\n<strong>Explanation: </strong>All one&#39;s are clustred. So answer will\r\nbe zero.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">You don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>minimumMoves()</strong>&nbsp;which takes string S as input parameter and returns the minimum number of moves.<br />\r\n<br />\r\n<strong>Expected Time Complexity:&nbsp;&nbsp;</strong>O(|S|)<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; |S| &le; 100000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Think of greedy approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n\tpublic:\r\n\tint minimumMoves(string s){\r\n\t\tint n=s.length();\r\n\t\t\r\n\t\tint zero=0; //initialize zero counter\r\n\t\t\r\n\t\tint m=0; //initialize maximum consecutive zero counter\r\n\t\tint c=0; //initialize consecutive zero counter\r\n\t\t\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tif(s[i]=='0')\r\n\t\t\tzero++; //increment zero counter\r\n\t\t\t\r\n\t\t\tif(s[i]=='0')\r\n\t\t\tc++; // increment consecutive zero counter\r\n\t\t\telse\r\n\t\t\tc=0; //reset consecutive zero counter\r\n\t\t\t\r\n\t\t\tm=max(m,c); //update maximum consecutive zero counter\r\n\t\t}\r\n\t\t\r\n\t\tc=0; //reset consecutive zero counter\r\n\t\t\r\n\t\tint i=0;\r\n\t\twhile(i<n && s[i]=='0') //count consecutive zeros from start\r\n\t\t{\r\n\t\t\tc++; //increment consecutive zero counter\r\n\t\t\ti++;\t//move to next index\r\n\t\t}\r\n\t\ti=n-1;\r\n\t\twhile(i>=0 && s[i]=='0') //count consecutive zeros from end\r\n\t\t{\r\n\t\t\ti--;\r\n\t\t\tc++;\r\n\t\t}\r\n\t\t\r\n\t\tm=max(c,m); //update maximum consecutive zero counter\r\n\t\t\r\n\t\treturn (zero-m); //return minimum number of moves required to remove all zeros\r\n\t}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution{\n        //Complete this function\n        public int minimumMoves(string s){\n            int n = s.Length;\n\n            int zero = 0; //initialize zero counter\n\n            int m = 0; //initialize maximum consecutive zero counter\n            int c = 0; //initialize consecutive zero counter\n\n            for(int i=0;i<n;i++)\n            {\n                if(s[i]=='0')\n                zero++; //increment zero counter\n\n                if(s[i]=='0')\n                c++; // increment consecutive zero counter\n                else\n                c=0; //reset consecutive zero counter\n\n                m=Math.Max(m,c); //update maximum consecutive zero counter\n            }\n\n            c=0; //reset consecutive zero counter\n\n            int index = 0;\n            while(index<n && s[index]=='0') //count consecutive zeros from start\n            {\n                c++; //increment consecutive zero counter\n                index++;    //move to next index\n            }\n            \n            index=n-1;\n            while(index>=0 && s[index]=='0') //count consecutive zeros from end\n            {\n                index--;\n                c++;\n            }\n\n            m=Math.Max(c,m); //update maximum consecutive zero counter\n\n            return (zero - m); //return minimum number of moves required to remove all zeros\n        }\n    }",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}