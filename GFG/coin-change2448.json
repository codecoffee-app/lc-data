{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704100,
            "title": "Coin Change (Count Ways)",
            "titleSlug": "coin-change2448",
            "content": "<p><span >Given an integer&nbsp;array&nbsp;<strong>coins[ ]</strong><strong>&nbsp;</strong>representing different denominations of currency and an integer&nbsp;<strong>sum</strong>, find the number of ways you can make&nbsp;<strong>sum</strong>&nbsp;by using different combinations from coins[ ].&nbsp;<br /><strong>Note:</strong>&nbsp;Assume that you have an <strong>infinite</strong> supply of each type of coin. Therefore, you can use any coin as many times as you want.<br />Answers are guaranteed to fit into a 32-bit integer.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>coins[] = [1, 2, 3], sum = 4\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: Four Possible ways are: [1, 1, 1, 1], [1, 1, 2], [2, 2], [1, 3].\n</span></pre>\n<pre><span ><strong>Input</strong>: coins[] = [2, 5, 3, 6], sum = 10\n<strong>Output:</strong> 5\n<strong>Explanation</strong>: Five Possible ways are: [2, 2, 2, 2, 2], [2, 2, 3, 3], [2, 2, 6], [2, 3, 5] and [5, 5].<br /></span></pre>\n<pre><span ><strong>Input</strong>: coins[] = [5, 10], sum = 3\n<strong>Output:</strong> 0<br /><strong>Explanation:</strong> Since all coin denominations are greater than sum, no combination can make the target sum.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= sum &lt;= 10<sup>3</sup><br />1 &lt;= coins[i] &lt;= 10<sup>4</sup><sup><br /></sup></span><span >1 &lt;= coins.size() &lt;=&nbsp;</span><span style=\"font-size: 18.6667px;\">10</span><sup>3</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use bottom up dynamic programming.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "flipkart",
            "morgan-stanley",
            "accolite",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "samsung",
            "snapdeal",
            "zoho"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count the number of ways to get the sum using the given coins.\n    int count(vector<int> &coins, int sum) {\n        int n = coins.size();\n\n        // 2d dp array where n is the number of coin\n        // denominations and sum is the target sum\n        vector<vector<int> > dp(n + 1, vector<int>(sum + 1, 0));\n\n        // Represents the base case where the target sum is 0,\n        // and there is only one way to make change: by not\n        // selecting any coin\n        dp[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= sum; j++) {\n\n                // Add the number of ways to make change without\n                // using the current coin,\n                dp[i][j] += dp[i - 1][j];\n\n                if ((j - coins[i - 1]) >= 0) {\n\n                    // Add the number of ways to make change\n                    // using the current coin\n                    dp[i][j] += dp[i][j - coins[i - 1]];\n                }\n            }\n        }\n        return dp[n][sum];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to count the number of ways to make a sum using given coins\n    public int count(int[] coins, int sum) {\n        int n = coins.length;\n\n        // 2d dp array where n is the number of coin\n        // denominations and sum is the target sum\n        int[][] dp = new int[n + 1][sum + 1];\n\n        // Represents the base case where the target sum is 0,\n        // and there is only one way to make change: by not\n        // selecting any coin\n        dp[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= sum; j++) {\n\n                // Add the number of ways to make change without\n                // using the current coin\n                dp[i][j] += dp[i - 1][j];\n\n                if ((j - coins[i - 1]) >= 0) {\n\n                    // Add the number of ways to make change\n                    // using the current coin\n                    dp[i][j] += dp[i][j - coins[i - 1]];\n                }\n            }\n        }\n        return dp[n][sum];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def count(self, coins, sum):\n        n = len(coins)\n\n        # 2d dp array where n is the number of coin\n        # denominations and sum is the target sum\n        dp = [[0] * (sum + 1) for _ in range(n + 1)]\n\n        # Represents the base case where the target sum is 0,\n        # and there is only one way to make change: by not\n        # selecting any coin\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(sum + 1):\n\n                # Add the number of ways to make change without\n                # using the current coin\n                dp[i][j] += dp[i - 1][j]\n\n                if (j - coins[i - 1]) >= 0:\n\n                    # Add the number of ways to make change\n                    # using the current coin\n                    dp[i][j] += dp[i][j - coins[i - 1]]\n\n        return dp[n][sum]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to count the number of ways to get the sum using the given coins.\n    count(coins, sum) {\n        const n = coins.length;\n\n        // 2d dp array where n is the number of coin\n        // denominations and sum is the target sum\n        const dp = Array.from({length : n + 1}, () => Array(sum + 1).fill(0));\n\n        // Represents the base case where the target sum is 0,\n        // and there is only one way to make change: by not\n        // selecting any coin\n        dp[0][0] = 1;\n        for (let i = 1; i <= n; i++) {\n            for (let j = 0; j <= sum; j++) {\n\n                // Add the number of ways to make change without\n                // using the current coin\n                dp[i][j] += dp[i - 1][j];\n\n                if ((j - coins[i - 1]) >= 0) {\n\n                    // Add the number of ways to make change\n                    // using the current coin\n                    dp[i][j] += dp[i][j - coins[i - 1]];\n                }\n            }\n        }\n        return dp[n][sum];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}