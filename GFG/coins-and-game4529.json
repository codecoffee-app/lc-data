{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704862,
            "title": "Coins and Game",
            "titleSlug": "coins-and-game4529",
            "content": "<p><span style=\"font-size:18px\">There are N coins and K people. Each of them can propose a method of distribution of the coins amongst themselves when their chance comes and a vote will occur in favour or against his distribution method between all those members. The person proposing that method of distribution wins the vote if he gets equal or more votes in favour&nbsp;than in against his proposal else he loses. Loosing he would be eliminated and then the next member will now propose his method of distribution amongst the remaining members.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Each person while proposing his method of distribution wants to get the maximum number of coins as well as win the vote.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Each person is smart and knows all the possibilities that may occur from their vote and will cast their vote&nbsp;accordingly.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">The first proposal will always be given by 1 if he loses will be followed by 2 and so on (till the Kth person).</span></p>\r\n\r\n<p><span style=\"font-size:18px\">In the distribution of the 1<sup>st</sup> person print the amount of coins each of K people is proposed to get so that he wins the vote.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 100 and K = 2\r\n<strong>Output:</strong>&nbsp;100 0\r\n<strong>Explanation</strong>:\r\nTo get the maximum coins the 1<sup>st</sup> person will propose the \r\ndistribution 100,0 when the vote occurs he will obviously\r\nvote for himself and the second person against him. \r\nThe result of the vote will be 1-1 which means he will \r\nsurvive (tie here means victory) the vote.\r\n</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 100 and K = 1\r\n<strong>Output: </strong>100\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>coinsGame()</strong>&nbsp;which takes the integer N and an integer K&nbsp;as input parameters and returns the&nbsp;K space-separated Integers denoting the distribution proposed by the 1<sup>st</sup> person.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong> O(K)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1&lt;=N&lt;=10<sup>9</sup></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1&lt;=K&lt;=10<sup>4</sup></span></p>\r\n\r\n<p><span style=\"font-size:18px\">N&gt;=K</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>This question can be solved by back tracking. Suppose there are 10 coins and 5 people. Let them be a,b,c,d,e.</p>\n\n<p>Now if all the proposals by a , b and c gets rejected and the distribution comes between d and e(i.e. the last two). d will propse the distribution such that he gets all the coins as beacuse in the vote there is no way that he can loose. He will obviously vote for himself. So when the power of distributions comes to d , e will get no coins so when the distribution was suppose to happen between c d and e, e will not let c get eliminated if he gets any thing more than zero coins in distibutionn proposed by c. So when c will distribute he will give one coin to e and keep the rest of the coins to himself knowing that e will always vote for him if he gets coins greater than zero. In this distribution d gets 0 coins. So he will not let the power of distribution come to c if he gets any number of coins greater than 0. So when b has the power of distibution he will give one coin to d so that he votes for him and take the rest of the coins to himself. With this distribution b will get two votes for him and two votes against and still win the vote.</p>\n\n<p>In this distribution by b, c and e gets 0 coins so they will vote for a in his distribution if they get any number of coins greater than 0. So in a&#39;s distribution he will give both c and e one one coins and keep the rest to himself.</p>\n\n<p>&nbsp;</p>\n\n<p>Similarly if we have more than 5 peoples we can back track to get our answer. The best distribution for the first person will always be giving the odd person one coins each and keeping the rest of them with himselves.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Game Theory",
                "slug": "game-theory"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\npublic:\n    //Function to find the distribution of coins in the game.\n    vector<int> coinsGame(int N, int K){\n        vector<int> v;\n        //calculating the number of coins for the first player.\n        int ans=N-(K-1)/2;\n        v.push_back(ans);\n        //iterating from 1 to K to determine the distribution of remaining coins.\n        for(int i=1;i<K;i++)\n        {\n            //if i is odd, the player gets 0 coins.\n            if(i%2)\n                v.push_back(0);\n            //if i is even, the player gets 1 coin.\n            else\n                v.push_back(1);\n        }\n        //returning the vector containing the distribution of coins.\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    public List<int> coinsGame(int N, int K)\n    {\n        List<int> v = new List<int>();\n        int ans = N - (K - 1) / 2;\n        v.Add(ans);\n        for (int i = 1; i < K; i++)\n        {\n            if (i % 2 != 0)\n                v.Add(0);\n            else\n                v.Add(1);\n        }\n        return v;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}