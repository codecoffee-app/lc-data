{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706062,
            "title": "Coins of Geekland",
            "titleSlug": "coins-of-geekland--141631",
            "content": "<p><span style=\"font-size: 18px;\">In Geekland there is a grid&nbsp;of coins of size <strong>N x</strong> <strong>N</strong>. You have to find the maximum sum of coins in any&nbsp;sub-grid&nbsp;of size<strong> K x K</strong>.<br /><strong>Note:</strong> Coins of the negative denomination are&nbsp;also possible at Geekland.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 5, K = 3 \nmat[[]] = {1, 1, 1, 1, 1}&nbsp;\n\\t    {2, 2, 2, 2, 2}&nbsp;\n\\t    {3, 8, 6, 7, 3}&nbsp;\n\\t    {4, 4, 4, 4, 4}&nbsp;\n\\t    {5, 5, 5, 5, 5}</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 48</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong> {8, 6, 7}\n\\t\\t {4, 4, 4}\n\\t\\t {5, 5, 5}\nhas the maximum sum</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 1, K = 1\nmat[[]] = {{4}} </span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 4</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task: </strong>&nbsp;<br />You don't need to read input or print anything. Complete the function <strong>Maximum_Sum()</strong> which takes the matrix mat[], size of Matrix N, and value K as input parameters and returns the maximum sum.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(N<sup>2</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; K&nbsp;&le; N &le; 10<sup>3</sup><br />-5*10<sup>5</sup> &le; mat[i][j] &le; 5*10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Apply 2d prefix sum</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    \r\n    public:\r\n    // Function to calculate maximum sum of submatrix\r\n    int Maximum_Sum(vector<vector<int>> &mat,int N,int K){\r\n        // Array to store the sum of each column in each strip\r\n        int stripSum[N][N]; \r\n        \r\n        // Calculating sum of each column in each strip\r\n        for (int j=0;j<N;j++) \r\n        { \r\n            int sum = 0; \r\n            // Iterating through each row in the strip\r\n            for (int i=0; i<K; i++) \r\n                sum += mat[i][j]; // Calculating sum of each column in the strip\r\n            stripSum[0][j] = sum; // Storing the sum in the stripSum array for the first row\r\n    \r\n            // Iterating through each row after the first row\r\n            for (int i=1; i<N-K+1; i++) \r\n            { \r\n                // Adding the value of the new row and subtracting the value of the previous row\r\n                sum += (mat[i+K-1][j] - mat[i-1][j]); \r\n                stripSum[i][j] = sum; // Storing the sum in the stripSum array for the current row\r\n            } \r\n        } \r\n    \r\n        int max_sum = INT_MIN, *pos = NULL; \r\n    \r\n        // Iterating through each row\r\n        for (int i=0; i<N-K+1; i++) \r\n        { \r\n            int sum = 0; \r\n            // Calculating sum of columns for the current row in the strip\r\n            for (int j = 0; j<K; j++) \r\n                sum += stripSum[i][j]; \r\n            if (sum > max_sum) \r\n            { \r\n                max_sum = sum; \r\n                pos = &(mat[i][0]); // Storing the pointer to the first element of the current row as the position with maximum sum\r\n            } \r\n    \r\n            // Iterating through each column after the first column\r\n            for (int j=1; j<N-K+1; j++) \r\n            { \r\n                // Adding the value of the new column and subtracting the value of the previous column\r\n                sum += (stripSum[i][j+K-1] - stripSum[i][j-1]); \r\n    \r\n                if (sum > max_sum) \r\n                { \r\n                    max_sum = sum; \r\n                    pos = &(mat[i][j]); // Storing the pointer to the current element as the position with maximum sum\r\n                } \r\n            } \r\n        }\r\n        return max_sum; // Returning the maximum sum\r\n    }  \r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int Maximum_Sum(int mat[][],int N,int K) {\n        // Initialize an array to store the sum of each strip\n        int stripSum[][] = new int[N][N];\n        int sum = 0;\n\n        // Calculate the sum of each strip in the matrix\n        for(int j=0; j<N; j++) {\n            sum = 0;\n\n            // Calculate the sum of the first K elements in each column\n            for (int i=0; i<K; i++) \n                sum += mat[i][j];\n\n            // Store the sum in the stripSum array\n            stripSum[0][j] = sum;\n\n            // Calculate the sum of the remaining elements in each column\n            for (int i=1; i<N-K+1; i++) {\n                sum += (mat[i+K-1][j] - mat[i-1][j]);\n                stripSum[i][j] = sum;\n            }\n        }\n\n        // Find the maximum sum among all possible submatrices\n        int max_sum = Integer.MIN_VALUE;\n        for (int i=0; i<N-K+1; i++) {\n            sum = 0;\n\n            // Calculate the sum of the first K columns in each row\n            for (int j = 0; j<K; j++) {\n                sum += stripSum[i][j];\n            }\n            \n            // Update the maximum sum if necessary\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n\n            // Calculate the sum of the remaining columns in each row\n            for (int j=1; j<N-K+1; j++) {\n                sum += (stripSum[i][j+K-1] - stripSum[i][j-1]);\n                \n                // Update the maximum sum if necessary\n                if (sum > max_sum) {\n                    max_sum = sum;\n                }\n            }\n        }\n        \n        // Return the maximum sum\n        return max_sum;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\r\n\r\nclass Solution:\r\n    def Maximum_Sum(self, mat, N, K):\r\n        stripSum=[[0]*N for i in range(N)] \r\n        \r\n        for j in range(N): \r\n            sum = 0; \r\n            for i in range(K):\r\n                sum += mat[i][j]; \r\n            stripSum[0][j] = sum; \r\n    \r\n            for i in range(1,N-K+1):\r\n                sum += (mat[i+K-1][j] - mat[i-1][j]); \r\n                stripSum[i][j] = sum;\r\n    \r\n        max_sum =-10**9\r\n    \r\n        for i in range(N-K+1):\r\n            sum = 0; \r\n            for j in range(K):\r\n                sum += stripSum[i][j]; \r\n            if (sum > max_sum):\r\n                max_sum = sum; \r\n    \r\n            for j in range(1,N-K+1): \r\n                sum += (stripSum[i][j+K-1] - stripSum[i][j-1]); \r\n    \r\n                if (sum > max_sum):\r\n                    max_sum = sum; \r\n        return max_sum;",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution {\n    public int Maximum_Sum(List<List<int>> mat, int N, int K) {\n        int[,] stripSum = new int[N, N];\n\n        for (int j = 0; j < N; j++) {\n            int sum = 0;\n            for (int i = 0; i < K; i++) sum += mat[i][j];\n            stripSum[0, j] = sum;\n\n            for (int i = 1; i < N - K + 1; i++) {\n                sum += (mat[i + K - 1][j] - mat[i - 1][j]);\n                stripSum[i, j] = sum;\n            }\n        }\n\n        int max_sum = int.MinValue;\n\n        for (int i = 0; i < N - K + 1; i++) {\n            int sum = 0;\n            for (int j = 0; j < K; j++) sum += stripSum[i, j];\n\n            if (sum > max_sum) {\n                max_sum = sum;\n            }\n\n            for (int j = 1; j < N - K + 1; j++) {\n                sum += (stripSum[i, j + K - 1] - stripSum[i, j - 1]);\n\n                if (sum > max_sum) {\n                    max_sum = sum;\n                }\n            }\n        }\n        return max_sum;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\r\n * @param {number[][]} mat\r\n * @param {number} N\r\n * @param {number} K\r\n * @returns {number}\r\n*/\r\nclass Solution{\r\n  Maximum_Sum(mat, N, K){\r\n    let stripSum = new Array(N).fill().map(() => new Array(N).fill(0));\r\n    \r\n    for(let j=0; j<N; j++){\r\n      let sum = 0;\r\n      for(let i=0; i<K; i++){\r\n        sum += mat[i][j];\r\n      }\r\n      stripSum[0][j] = sum;\r\n\r\n      for(let i=1; i<N-K+1; i++){\r\n        sum += (mat[i+K-1][j] - mat[i-1][j]);\r\n        stripSum[i][j] = sum;\r\n      }\r\n    }\r\n\r\n    let max_sum = Number.MIN_SAFE_INTEGER;\r\n    let pos = null;\r\n\r\n    for(let i=0; i<N-K+1; i++){\r\n      let sum = 0;\r\n      for(let j=0; j<K; j++){\r\n        sum += stripSum[i][j];\r\n      }\r\n      if(sum > max_sum){\r\n        max_sum = sum;\r\n        pos = mat[i][0];\r\n      }\r\n\r\n      for(let j=1; j<N-K+1; j++){\r\n        sum += (stripSum[i][j+K-1] - stripSum[i][j-1]);\r\n\r\n        if(sum > max_sum){\r\n          max_sum = sum;\r\n          pos = mat[i][j];\r\n        }\r\n      }\r\n    }\r\n\r\n    return max_sum;\r\n  }  \r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}