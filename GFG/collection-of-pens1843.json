{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705258,
            "title": "Collection of pens",
            "titleSlug": "collection-of-pens1843",
            "content": "<p><span style=\"font-size: 18px;\">There are three piles of pens. A pens in the first pile&nbsp;and B pens in the second Pile.Find the minimum number of pens that should be there in the third pile so that&nbsp;sum of all three piles produces either a prime number or unity.</span><span style=\"font-size: 18px;\">&nbsp;<br /><strong>Note:</strong>&nbsp;there should be atleast one pen in the third pile.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: A = 1, B = 3\n<strong>Output:</strong>&nbsp;1\n<strong>Explanation</strong>: A + B + K = prime\nK = 1, 1 + 3 + 1 = 5.So answer = 1\nbecuase 5 is minimum possible prime. </span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>A = 4, B = 3\n<strong>Output:&nbsp;</strong>4\n<strong>Explanation</strong>: A + B + K = prime\nK = 4, 4 + 3 + 4 = 11.So answer = 4\nbecuase 11 is minimum possible prime.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You dont need to read input or print anything. Complete the function <strong>minThirdPiles()&nbsp;</strong>which takes A&nbsp;and B&nbsp;as input parameter and returns the&nbsp;the minimum number of pens that should be there in the third pile so that&nbsp;sum of all three piles produces a prime number.<br /><br /><strong>Expected Time Complexity:</strong> O(nlogn)<br /><strong>Expected Auxiliary Space:</strong> O(1)<br /><br /><strong>Constraints:</strong><br />1 &lt;= A&nbsp;&lt;=1000</span><br /><span style=\"font-size: 18px;\">1 &lt;= B&nbsp;&lt;=1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Try brute force.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n  //Function to find the minimum number of third piles needed.\n  int minThirdPiles(int A, int B){\n        int flag=1;\n        int sum=A+B;\n        int k=1;\n        while(k && flag==1)\n        {\n            sum=sum+1;\n            //checking for factors of sum\n            for(int i=2;i*i<=sum;i++)\n            {\n                //if sum is divisible by any number, set flag to 0 and break\n                if(sum%i==0)\n                {\n                    flag=0;\n                    break;\n                }\n            }\n            //if flag is still 1 after the loop, it means sum is prime\n            if(flag==1)\n            {\n                return k;\n                //returning the value of k, the minimum number of third piles needed\n                flag=0;\n            }\n            else //if sum is not prime, increment k and set flag to 1\n            {\n                flag=1;\n                k++;\n            }\n        }\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    public int minThirdPiles(int A, int B) {\n        int flag = 1;\n        int sum = A + B;\n        int k = 1;\n        while (k != 0 && flag == 1) {\n            sum = sum + 1;\n            // checking for factors of sum\n            for (int i = 2; i * i <= sum; i++) {\n                // if sum is divisible by any number, set flag to 0 and break\n                if (sum % i == 0) {\n                    flag = 0;\n                    break;\n                }\n            }\n            // if flag is still 1 after the loop, it means sum is prime\n            if (flag == 1) {\n                return k;\n                // returning the value of k, the minimum number of third piles needed\n\n            } else // if sum is not prime, increment k and set flag to 1\n            {\n                flag = 1;\n                k++;\n            }\n        }\n        return k;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}