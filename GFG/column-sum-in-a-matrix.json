{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878161,
            "title": "Column Sum in a Matrix",
            "titleSlug": "column-sum-in-a-matrix",
            "content": "<p><span >Given a 2-D integer matrix&nbsp;<strong>mat[][]</strong>&nbsp;of size&nbsp;<strong>n</strong>*<strong>m</strong>. Return a list of integers where&nbsp;<strong>list[i]&nbsp;</strong>represents the sum of elements of the&nbsp;<strong>i<sup>th</sup>&nbsp;</strong>column of the matrix.</span></p>\n<p><strong><span >Examples:</span></strong></p>\n<pre><strong><span >Input: </span></strong><span >mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]<br /></span><strong><span >Output: </span></strong><span >[12, 15, 18]<br /><strong>Explanation: </strong>Column 1 -&gt; 1+4+7=12, Column 2 -&gt; 2+5+8=15, Column 3 -&gt; 3+6+9=18 </span></pre>\n<pre><strong><span >Input: </span></strong><span >mat = [[1, 2], [10, 2], [3, 3]]<br /></span><strong><span >Output: </span></strong><span >[14, 7]<br /><strong>Explanation: </strong>Column 1 -&gt; 1+10+3=14, Column 2 -&gt; 2+2+3=7 </span></pre>\n<p><strong><span >Constraints:<br /></span></strong><span >1 &nbsp;&lt;= &nbsp;n, m &nbsp;&lt;= &nbsp;1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2-D integer matrix `mat[][]` of size `n*m`, return a list of integers where `list[i]` represents the sum of elements in the `i`-th column of the matrix.",
                "constraints": [
                    "1 <= n, m <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
                        "output": "[12, 15, 18]",
                        "explanation": "The sum of the first column (1, 4, 7) is 12. The sum of the second column (2, 5, 8) is 15. The sum of the third column (3, 6, 9) is 18."
                    },
                    {
                        "input": "[[1, 2], [10, 2], [3, 3]]",
                        "output": "[14, 7]",
                        "explanation": "The sum of the first column (1, 10, 3) is 14. The sum of the second column (2, 2, 3) is 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<int> colSum(vector<vector<int>>& mat) {\n        vector<int> ans;\n        int n = mat.size();\n        int m = mat[0].size();\n        for (int i = 0; i < m; i++) {\n            int sum = 0;\n            for (int j = 0; j < n; j++) {\n                sum += mat[j][i];\n            }\n            ans.push_back(sum);\n        }\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public static int[] colSum(int mat[][]) {\n        int ans[] = new int[mat[0].length];\n        int n = mat.length;\n        int m = mat[0].length;\n        for (int i = 0; i < m; i++) {\n            int sum = 0;\n            for (int j = 0; j < n; j++) {\n                sum += mat[j][i];\n            }\n            ans[i] = sum;\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def colSum(self, mat):\n        ans = []\n        n = len(mat)\n        m = len(mat[0])\n        for i in range(m):\n            sum = 0\n            for j in range(n):\n                sum = sum + mat[j][i]\n            ans.append(sum)\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\nclass Solution {\n    colSum(mat) {\n        let ans = [];\n        let n = mat.length;\n        let m = mat[0].length;\n        for (let i = 0; i < m; i++) {\n            let sum = 0;\n            for (let j = 0; j < n; j++) {\n                sum += mat[j][i];\n            }\n            ans.push(sum);\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}