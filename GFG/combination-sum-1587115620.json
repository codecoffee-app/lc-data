{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701372,
            "title": "Combination Sum",
            "titleSlug": "combination-sum-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> and a <strong>target</strong>, your task is to find all <strong>unique </strong>combinations in the array where the sum is equal to target. The same number may be chosen from the array <strong>any </strong>number of times to make target.</span></p>\n<p><span style=\"font-size: 18px;\">You can return your answer in <strong>any </strong>order.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [2, 4, 6, 8], target = 8\n<strong>Output: </strong>[[2 2 2 2] [2 2 4] [2 6] [4 4] [8]]<br /><strong>Explanation:</strong> Total number of possible combinations are 5.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [2, 7, 6, 5], target = 16\n<strong>Output: </strong>[[2 2 2 2 2 2 2 2] [2 2 2 2 2 6] [2 2 2 5 5] [2 2 5 7] [2 2 6 6] [2 7 7] [5 5 6]]<br /><strong>Explanation:</strong> Total number of possible combinations are 7.\n</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [6, 5, 7], target = 8\n<strong>Output: </strong>[]<br /><strong>Explanation:</strong> There are no possible combinantions such that target sum is 8.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Constraints:</strong><br /><span style=\"font-size: 18px;\">1 &lt;= arr.size() &lt;= 30</span><br /><span style=\"font-size: 18px;\">2 &lt;= arr[i] &lt;= 40</span><br /><span style=\"font-size: 18px;\">2 &lt;= target &lt;= 40</span><br /><span style=\"font-size: 18px;\">All arr[i] are <strong>distinct</strong>.</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Sort the array(non-decreasing).<br />\nFirst remove all the duplicates from array.<br />\nThen use recursion and backtracking to solve the problem.<br />\nIf:<br />\n&nbsp;&nbsp; &nbsp;at any time subproblem sum==0 then add that array to the result(vector of vectors).<br />\nelse if:<br />\n&nbsp;&nbsp; &nbsp;sum if negative then ignore that subproblem.<br />\nelse:<br />\n&nbsp;&nbsp; &nbsp;insert the present array in that index to the current vector and call the function with sum=sum-A[index] and index=index,<br />\n&nbsp;&nbsp; &nbsp;then pop that element from current index (backtrack) and call the function with sum=sum and index=index+1,</span><br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to generate all combinations\n    // of arr that sums to target.\n    void makeCombination(vector<int> &arr, int remSum, vector<int> &cur,\n                         vector<vector<int>> &res, int index) {\n\n        // If remSum is 0 then add the combination to the result\n        if (remSum == 0) {\n            res.push_back(cur);\n            return;\n        }\n\n        // Invalid Case: If remSum is less than 0 or if ind >= arr.size()\n        if (remSum < 0 || index >= arr.size())\n            return;\n\n        // add the current element to the combination\n        cur.push_back(arr[index]);\n\n        // recur with the same index\n        makeCombination(arr, remSum - arr[index], cur, res, index);\n\n        // remove the current element from the combination\n        cur.pop_back();\n\n        // recur with the next index\n        makeCombination(arr, remSum, cur, res, index + 1);\n    }\n\n    // Function to find all combinations of elements\n    // in array arr that sum to target.\n    vector<vector<int>> combinationSum(vector<int> &arr, int target) {\n\n        // vector to store combinations\n        vector<int> cur;\n\n        // vector to valid combinations\n        vector<vector<int>> res;\n        makeCombination(arr, target, cur, res, 0);\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to return a list of indexes denoting the required\n    // combinations whose sum is equal to given number.\n    static void makeCombination(int[] arr, int remSum, ArrayList<Integer> cur,\n                                ArrayList<ArrayList<Integer>> res, int index) {\n\n        // If remSum is 0 then add the combination to the result\n        if (remSum == 0) {\n            res.add(new ArrayList<>(cur));\n            return;\n        }\n\n        // Invalid Case: If remSum is less than 0 or if index >= arr.length\n        if (remSum < 0 || index >= arr.length) return;\n\n        // Add the current element to the combination\n        cur.add(arr[index]);\n\n        // Recur with the same index\n        makeCombination(arr, remSum - arr[index], cur, res, index);\n\n        // Remove the current element from the combination\n        cur.remove(cur.size() - 1);\n\n        // Recur with the next index\n        makeCombination(arr, remSum, cur, res, index + 1);\n    }\n\n    // Function to find all combinations of elements\n    // in array arr that sum to target.\n    static ArrayList<ArrayList<Integer>> combinationSum(int[] arr, int target) {\n\n        // List to store combinations\n        ArrayList<Integer> cur = new ArrayList<>();\n\n        // List to store valid combinations\n        ArrayList<ArrayList<Integer>> res = new ArrayList<>();\n        makeCombination(arr, target, cur, res, 0);\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def makeCombination(self, arr, remSum, cur, res, index):\n\n        # If remSum is 0 then add the combination to the result\n        if remSum == 0:\n            res.append(list(cur))\n            return\n\n        # Invalid Case: If remSum is less than 0 or if index >= len(arr)\n        if remSum < 0 or index >= len(arr):\n            return\n\n        # Add the current element to the combination\n        cur.append(arr[index])\n\n        # Recur with the same index\n        self.makeCombination(arr, remSum - arr[index], cur, res, index)\n\n        # Remove the current element from the combination\n        cur.pop()\n\n        # Recur with the next index\n        self.makeCombination(arr, remSum, cur, res, index + 1)\n\n    # Function to find all combinations of elements\n    # in array arr that sum to target.\n    def combinationSum(self, arr, target):\n\n        # List to store combinations\n        cur = []\n\n        # List to store valid combinations\n        res = []\n        self.makeCombination(arr, target, cur, res, 0)\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} target\n * @returns {number[][]}\n */\n\nclass Solution {\n\n    // Function to generate all combinations\n    // of arr that sums to target.\n    makeCombination(arr, remSum, cur, res, index) {\n\n        // If remSum is 0 then add the combination to the result\n        if (remSum === 0) {\n            res.push([...cur ]);\n            return;\n        }\n\n        // Invalid Case: If remSum is less than 0 or if index >= arr.length\n        if (remSum < 0 || index >= arr.length) return;\n\n        // Add the current element to the combination\n        cur.push(arr[index]);\n\n        // Recur with the same index\n        this.makeCombination(arr, remSum - arr[index], cur, res, index);\n\n        // Remove the current element from the combination\n        cur.pop();\n\n        // Recur with the next index\n        this.makeCombination(arr, remSum, cur, res, index + 1);\n    }\n\n    // Function to find all combinations of elements\n    // in array arr that sum to target.\n    combinationSum(arr, target) {\n\n        // Array to store combinations\n        const cur = [];\n\n        // Array to store valid combinations\n        const res = [];\n        this.makeCombination(arr, target, cur, res, 0);\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}