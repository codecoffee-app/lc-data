{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712223,
            "title": "Combination Sum II",
            "titleSlug": "combination-sum-ii-1664263832",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr[]</strong>&nbsp;and a&nbsp;<strong>target</strong>, your task is to find all&nbsp;<strong>unique&nbsp;</strong>combinations in the array where the sum is equal to target.&nbsp;</span><span style=\"font-size: 18px;\">Each number in arr[] may only be used <strong>once </strong>in the combination.</span></p>\n<p><span style=\"font-size: 18px;\">You can return your answer in&nbsp;<strong>any&nbsp;</strong>order.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> </span><span style=\"font-size: 18px;\">arr[] = [1, 2, 3, 3, 5], target =7</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">[[1, 3, 3], [2, 5]]</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">Total number of possible combinations are 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Input:</span> </strong></span><span style=\"font-size: 18px;\">arr[] = [5, 10, 15, 20, 25, 30], target = 30</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">[[5, 10, 15], [5, 25], [10, 20], [30]]</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">Total number of possible combinations are 4.<br /></span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [6, 5, 7], target = 8\n<strong>Output: </strong>[]<br /><strong>Explanation:</strong> There are no possible combinantions such that target sum is 8.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= arr.size() &lt;= 100<br />1 &lt;= arr[i] &lt;= 50<br />1 &lt;= target &lt;= 30</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and a `target` integer, find all unique combinations in the array where the sum of the combination equals the target. Each number in `arr[]` may only be used once in each combination.  The order of the combinations in the result does not matter.",
                "constraints": [
                    "1 <= arr.size() <= 100",
                    "1 <= arr[i] <= 50",
                    "1 <= target <= 30"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 3, 3, 5], target = 7",
                        "output": "[[1, 3, 3], [2, 5]]",
                        "explanation": "The unique combinations that sum to 7 are [1, 3, 3] and [2, 5]."
                    },
                    {
                        "input": "arr[] = [5, 10, 15, 20, 25, 30], target = 30",
                        "output": "[[5, 10, 15], [5, 25], [10, 20], [30]]",
                        "explanation": "The unique combinations that sum to 30 are [5, 10, 15], [5, 25], [10, 20], and [30]."
                    },
                    {
                        "input": "arr[] = [6, 5, 7], target = 8",
                        "output": "[]",
                        "explanation": "There are no combinations of elements in the array that sum to 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use backtracking to generate all combinations.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find all unique combination of\n    // arr such that their sum is target\n    void uniqueComb(vector<int> &arr, int index, int target, vector<int> &curr,\n                    vector<vector<int>> &res) {\n\n        // If a unique combination is found\n        if (target == 0) {\n            res.push_back(curr);\n            return;\n        }\n\n        // Target is less than 0 or array is exhausted, return to\n        // explore other options\n        if (target < 0 || index >= arr.size())\n            return;\n\n        // For all other combinations\n        for (int i = index; i < arr.size(); i++) {\n\n            // Check if it is repeated or not\n            if (i > index and arr[i] == arr[i - 1])\n                continue;\n\n            // Take the element into the combination\n            curr.push_back(arr[i]);\n\n            uniqueComb(arr, i + 1, target - arr[i], curr, res);\n\n            // Remove element from the combination\n            curr.pop_back();\n        }\n    }\n\n    // Function to find all combination\n    // of the given elements\n    vector<vector<int>> uniqueCombinations(vector<int> &arr, int target) {\n\n        // Sort the arr to handle duplicates\n        sort(arr.begin(), arr.end());\n\n        // Final list where all unique combinations will be stored\n        vector<vector<int>> res;\n\n        // Store chosen elements in particular combination\n        vector<int> curr;\n\n        uniqueComb(arr, 0, target, curr, res);\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find all unique combination of\n    // arr such that their sum is target\n    static void uniqueComb(int[] arr, int index, int target, ArrayList<Integer> curr,\n                           ArrayList<ArrayList<Integer>> res) {\n\n        // If a unique combination is found\n        if (target == 0) {\n            res.add(new ArrayList<>(curr));\n            return;\n        }\n\n        // Target is less than 0 or array is exhausted,\n        // return to explore other options\n        if (target < 0 || index >= arr.length) return;\n\n        // For all other combinations\n        for (int i = index; i < arr.length; i++) {\n\n            // Check if it is repeated or not\n            if (i > index && arr[i] == arr[i - 1]) continue;\n\n            // Take the element into the combination\n            curr.add(arr[i]);\n\n            // Recursive call\n            uniqueComb(arr, i + 1, target - arr[i], curr, res);\n\n            // Remove element from the combination\n            curr.remove(curr.size() - 1);\n        }\n    }\n\n    // Function to find all combination\n    // of the given elements\n    static ArrayList<ArrayList<Integer>> uniqueCombinations(int[] arr, int target) {\n        Arrays.sort(arr);\n\n        // Final list where all unique combinations will be stored\n        ArrayList<ArrayList<Integer>> res = new ArrayList<>();\n\n        // Store chosen elements in particular combination\n        ArrayList<Integer> curr = new ArrayList<>();\n\n        uniqueComb(arr, 0, target, curr, res);\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    # Function to find all unique combination of\n    # arr such that their sum is target\n    def uniqueComb(self, arr, index, target, curr, res):\n\n        # If a unique combination is found\n        if target == 0:\n            res.append(list(curr))\n            return\n\n        # Target is less than 0 or array is exhausted, return to\n        # explore other options\n        if target < 0 or index >= len(arr):\n            return\n\n        # For all other combinations\n        for i in range(index, len(arr)):\n\n            # Check if it is repeated or not\n            if i > index and arr[i] == arr[i - 1]:\n                continue\n\n            # Take the element into the combination\n            curr.append(arr[i])\n\n            # Recursive call\n            self.uniqueComb(arr, i + 1, target - arr[i], curr, res)\n\n            # Remove element from the combination\n            curr.pop()\n\n    def uniqueCombinations(self, arr, target):\n        # Sort the arr to handle duplicates\n        arr.sort()\n\n        # Final list where all unique combinations will be stored\n        res = []\n\n        # Store chosen elements in particular combination\n        curr = []\n\n        self.uniqueComb(arr, 0, target, curr, res)\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr\n * @param {number} target\n * @returns {number[][]}\n */\n\nclass Solution {\n    // Function to find all unique combination of\n    // arr such that their sum is target\n    uniqueComb(arr, index, target, curr, res) {\n        // If a unique combination is found\n        if (target === 0) {\n            res.push([...curr ]);\n            return;\n        }\n\n        // Target is less than 0 or array isexhausted, return to\n        // explore other options\n        if (target < 0 || index >= arr.length) {\n            return;\n        }\n\n        // For all other combinations\n        for (let i = index; i < arr.length; i++) {\n\n            // Check if it is repeated or not\n            if (i > index && arr[i] === arr[i - 1]) {\n                continue;\n            }\n\n            // Take the element into the combination\n            curr.push(arr[i]);\n\n            // Recursive call\n            this.uniqueComb(arr, i + 1, target - arr[i], curr, res);\n\n            // Remove element from the combination\n            curr.pop();\n        }\n    }\n\n    uniqueCombinations(arr, target) {\n\n        // Sort the arr to handle duplicates\n        arr.sort((a, b) => a - b);\n\n        // Final list where all unique combinations will be stored\n        const res = [];\n\n        // Store chosen elements in particular combination\n        const curr = [];\n\n        this.uniqueComb(arr, 0, target, curr, res);\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}