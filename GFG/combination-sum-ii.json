{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712210,
            "title": "Combination Sum II",
            "titleSlug": "combination-sum-ii",
            "content": "<p><span style=\"font-size: 18px;\">You are given a collection of numbers (<strong>candidates</strong>) and a target number (<strong>target</strong>), find all unique combinations in candidates where the candidate numbers sum to the target. Each number in candidates may only be used once in the combination.<br />Note: The solution set must not contain duplicate combinations.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example:</strong></span><span style=\"font-size: 18px;\"> </span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong> candidates = [10,1,2,7,6,1,5], target = 8. \n<strong>Output: </strong> [[1,1,6], [1,2,5], [1,7], [2,6]]. \n<strong>Explanation: </strong> These are the unique combinations whose sum is equal to the target.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Complete the function vector&gt; combinationSum2(), which takes a vector \"candidates\" and an integer target and returns a vector of vector consisting of all unique combinations whose sum is equal to the target.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(2<sup>n</sup>).<br /><strong>Expected Auxiliary Space:</strong> O(N).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= candidates.length &lt;= 100.<br />1 &lt;= candidates[i] &lt;= 50.<br />1 &lt;= target &lt;= 30.</span></p>\n<p><br />&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to the `target`. Each number in `candidates` may only be used once in the combination.  The solution set must not contain duplicate combinations.",
                "constraints": [
                    "1 <= candidates.length <= 100",
                    "1 <= candidates[i] <= 50",
                    "1 <= target <= 30"
                ],
                "testcases": [
                    {
                        "input": "candidates = [10,1,2,7,6,1,5], target = 8",
                        "output": "[[1,1,6], [1,2,5], [1,7], [2,6]]",
                        "explanation": "The combinations [1,1,6], [1,2,5], [1,7], and [2,6] are the unique combinations that sum up to the target value of 8.  Note that each number in the input array is used at most once in each combination, and duplicate combinations are not included."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find all combinations that sum up to the target\n    vector<vector<int>> combinationSum2(vector<int> &candidates, int target) {\n        // Sorting the candidates array\n        sort(candidates.begin(), candidates.end());\n        // Initializing the answer array\n        vector<vector<int>> ans;\n        // Initializing the temporary array for storing combinations\n        vector<int> ds;\n        // Calling the recursive function to find combinations\n        findCombination(0, target, candidates, ans, ds);\n        // Returning the answer array\n        return ans;\n    }\n\n    // Recursive function to find combinations\n    void findCombination(int ind, int target, vector<int> &arr,\n                         vector<vector<int>> &ans, vector<int> &ds) {\n        // If the target becomes 0, a valid combination is found\n        if (target == 0) {\n            ans.push_back(ds);\n            return;\n        }\n        // Iterating through the candidates array starting from 'ind'\n        for (int i = ind; i < arr.size(); i++) {\n            // Skipping duplicate candidates\n            if (i > ind && arr[i] == arr[i - 1]) continue;\n            // If the current candidate is greater than target, no more valid combinations can be found\n            if (arr[i] > target) break;\n            // Adding the current candidate to the temporary array\n            ds.push_back(arr[i]);\n            // Recursively calling the function to find combinations with remaining target\n            findCombination(i + 1, target - arr[i], arr, ans, ds);\n            // Removing the current candidate from the temporary array\n            ds.pop_back();\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    public static List<List<Integer>> combinationSum2(int[] a, int s) {\n        // List to store all possible combinations\n        List<List<Integer>> all = new ArrayList<List<Integer>>();\n        // Sorting the array for easier comparison\n        Arrays.sort(a);\n        // Calling the solve function to find combinations\n        solve(all, new ArrayList<Integer>(), a, s, 0);\n        return all;\n    }\n    \n    static void solve(List<List<Integer>> all, ArrayList<Integer> cur, int a[],\n                      int s, int start) {\n        // If sum goes below 0, return\n        if (s < 0) return;\n        // If sum becomes 0, add the combination to the list\n        if (s == 0) {\n            all.add(new ArrayList<Integer>(cur));\n            return;\n        }\n\n        // Loop through the array to find combinations\n        for (int i = start; i < a.length; i++) {\n            // Skip duplicate elements\n            if (i > start && a[i] == a[i - 1]) continue;\n            // Add current element to combination\n            cur.add(a[i]);\n            // Recursive call to find combinations with updated sum and start index\n            solve(all, cur, a, s - a[i], i + 1);\n            // Remove the last element from combination to backtrack\n            cur.remove(cur.size() - 1);\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def combinationSum2(self, candidates, target):\r\n        def dfs(idx, path, cur):\r\n            if cur > target: return   # if current sum exceeds target, no need to continue\r\n            if cur == target:         # if current sum equals target, add path to answer\r\n                if path:\r\n                    ans.append(path)\r\n                return\r\n            for i in range(idx, len(candidates)):   # iterate over candidates starting from index idx\r\n                if i > idx and candidates[i] == candidates[i-1]:   # if candidate is a duplicate, skip it\r\n                    continue\r\n                dfs(i+1, path+[candidates[i]], cur+candidates[i])   # recursively call dfs with updated parameters\r\n            \r\n        candidates.sort()   # sort candidates in ascending order\r\n        n = len(candidates)   # store length of candidates\r\n        ans = []   # initialize empty array to store answers\r\n        \r\n        dfs(0, [], 0)   # call dfs function to find combinations\r\n        return sorted(ans)   # return sorted answers",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}