{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703777,
            "title": "Combinational Logic",
            "titleSlug": "combinational-logic1908",
            "content": "<p><span style=\"font-size:18px\">Construct a 6&nbsp;input gate which performs the following logical operation:<br />\n<em>&nbsp;(not(A)).B + C.D +E.(not(F))</em><br />\nwhere A, B, C,&nbsp;D, E and F are the inputs to the 6&nbsp;input gate.</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: A = 1, B = 1, C = 0\n&nbsp;\\tD = 0, E = 1, F = 1\n<strong>Output:</strong>&nbsp;0&nbsp;\n<strong>Explanation</strong>: <em>(not(A)).B + C.D +E.(not(F))\n= (not(1)).1 + 0.0 +1.(not(1)) = 0.</em></span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>A = 1, B = 1, C = 1\n&nbsp;\\tD = 1, E = 1, F = 1\n<strong>Output:&nbsp;1</strong>\n<strong>Explanation</strong>: <em>(not(A)).B + C.D +E.(not(F))\n= (not(1)).1 + 1.1 +1.(not(1)) = 1.</em></span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>logicalOperation()&nbsp;</strong>which takes A, B, C, D, E, F&nbsp;as input parameter and returns the result after executing the given opearation.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n0 &lt;= A,B,C,D,E,F &lt;= 1</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Construct a 6-input gate that performs the following logical operation:\n(not(A)).B + C.D + E.(not(F))\nwhere A, B, C, D, E, and F are the inputs to the gate.\n\nComplete the function `logicalOperation()` which takes A, B, C, D, E, and F as input parameters and returns the result after executing the given operation.",
                "constraints": [
                    "0 <= A, B, C, D, E, F <= 1"
                ],
                "testcases": [
                    {
                        "input": "A = 1, B = 1, C = 0, D = 0, E = 1, F = 1",
                        "output": "0",
                        "explanation": "The logical operation is evaluated as follows:\n(not(1)).1 + 0.0 + 1.(not(1)) = 0.1 + 0 + 1.0 = 0 + 0 + 0 = 0"
                    },
                    {
                        "input": "A = 1, B = 1, C = 1, D = 1, E = 1, F = 1",
                        "output": "1",
                        "explanation": "The logical operation is evaluated as follows:\n(not(1)).1 + 1.1 + 1.(not(1)) = 0.1 + 1 + 1.0 = 0 + 1 + 0 = 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Just put those values in the logical operation and simplify this.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    //Function to perform a logical operation on input variables A, B, C, D, E, F.\n    int logicalOperation(int A,int B,int C,int D,int E,int F){\n        //Returning the result of the logical operation (((!A)&&B)||(C&&D)||(E&&(!F))).\n        return (((!A)&&B)||(C&&D)||(E&&(!F)));\n    }\n \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int logicalOperation(int A, int B, int C, int D, int E, int F)\n    {\n        //Returning the result of the logical operation (((!(A != 0)) && (B != 0)) || ((C != 0) && (D != 0)) || ((E != 0) && (!(F != 0))));\n        if(((!(A != 0)) && (B != 0)) || ((C != 0) && (D != 0)) || ((E != 0) && (!(F != 0))))\n            return 1;\n        else\n            return 0;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}