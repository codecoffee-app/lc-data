{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703064,
            "title": "Combine the strings",
            "titleSlug": "combine-the-strings3459",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>s </strong>containing <strong>n </strong>strings, find the <strong>max length</strong> of the string obtained by combining the strings. Two strings can be combined only if the last character of the first string and the first character of the second string are the same.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note: If no two strings can be combined then return 0.</span></strong></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 3\ns[] = {\"RBR\", \"BBR\", \"RRR\"}\n<strong>Output: </strong>9\n<strong>Explanation: </strong>Combined string can \n&nbsp;\\t\\tbe: BBR + RBR + RRR</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 2\ns[] = {\"RRR\", \"BBB\"}\n<strong>Output: </strong>0\n<strong>Explanation: </strong>Since combining condition\n&nbsp;\\t\\tisn't fulfilled answer is 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Your task is to complete the function&nbsp;<strong>combine()&nbsp;</strong>which takes 2 arguments(integer n and array of n strings) and returns the maximum length of combined strings possible. If no 2 strings can be combined return 0.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2&lt;=n&lt;=10<sup>4</sup><br />1&lt;=|s<sub>i</sub>|&lt;=100, where 0&lt;=i&lt;n<br />s will only contain {R,B}</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of strings, find the maximum length of the string that can be formed by combining the strings in the array. Two strings can be combined only if the last character of the first string is the same as the first character of the second string. If no two strings can be combined, return 0.",
                "constraints": [
                    "2 <= n <= 10^4, where n is the number of strings.",
                    "1 <= |s_i| <= 100, where |s_i| is the length of the i-th string.",
                    "Each string will only contain the characters 'R' and 'B'."
                ],
                "testcases": [
                    {
                        "input": "n = 3\ns[] = {\"RBR\", \"BBR\", \"RRR\"}",
                        "output": "9",
                        "explanation": "The strings can be combined as: BBR + RBR + RRR. The total length of the combined string is 9."
                    },
                    {
                        "input": "n = 2\ns[] = {\"RRR\", \"BBB\"}",
                        "output": "0",
                        "explanation": "Since no two strings can be combined (the last character of the first string is not equal to the first character of the second string), the answer is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>4 types of strings can be made using 'R' &amp; 'B'. RR, RB, BB, BR. Count all of them individually. Now BB and RR can be merged easily if RB or BR types strings are there.</p>\n<p>But not RB and BR. They can combine if the difference of their count is 1.&nbsp;</p>",
            "<p>So total maximum&nbsp; length=</p>\n<p>let m is the minimum count of RB and BR then maximum length will be</p>\n<p>(m+(m+1))*l + (Total count of BB &amp; RR)*l.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "walmart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // Function to combine strings and calculate minimum length\n    int combine(int n, string s[]) {\n        int a[5] = {0}, sum2 = 0, max2 = 0, max3 = 0;\n        int l = s[0].length();\n\n        // Loop to check each string\n        for (int i = 0; i < n; i++) {\n            // If first and last character of string is 'R', increment count and max2\n            if (s[i][0] == 'R' && s[i][l - 1] == 'R') {\n                a[1]++;\n                max2++;\n            }\n            // If first and last character of string is 'B', increment count and max3\n            else if (s[i][0] == 'B' && s[i][l - 1] == 'B') {\n                a[2]++;\n                max3++;\n            }\n            // If first character is 'B' and last character is 'R', only increment count\n            else if (s[i][0] == 'B' && s[i][l - 1] == 'R') {\n                a[3]++;\n\n            }\n            // If first character is 'R' and last character is 'B', only increment count\n            else if (s[i][0] == 'R' && s[i][l - 1] == 'B') {\n                a[4]++;\n            }\n        }\n\n        // If no 'B' to 'R' or 'R' to 'B' string present\n        if (a[3] == 0 && a[4] == 0) {\n            // If only one 'R' string and one 'B' string is present, return 0\n            if (a[1] == 1 && a[2] == 1)\n                return 0;\n            // Otherwise, return the maximum length of 'R' to 'R' strings or 'B' to 'B'\n            // strings\n            else {\n                max2 = l * max2;\n                max3 = l * max3;\n                return max(max2, max3);\n            }\n        }\n\n        // If both 'B' to 'R' and 'R' to 'B' strings are present\n        else {\n            // If count of 'B' to 'R' strings is more\n            if (a[3] > a[4]) {\n                // Calculate total length by adding the lengths of 'R' to 'B' strings,\n                // 'B' to 'R' strings, count of 'R' strings and count of 'B' strings\n                sum2 += l * a[4];\n                sum2 += l * (a[4] + 1);\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n\n                // If total length is equal to l, return 0\n                if (sum2 == l)\n                    return 0;\n                // Otherwise, return the calculated total length\n                else\n                    return sum2;\n            }\n            // If count of 'R' to 'B' strings is more\n            else if (a[4] > a[3]) {\n                // Calculate total length by adding the lengths of 'B' to 'R' strings,\n                // 'R' to 'B' strings, count of 'R' strings and count of 'B' strings\n                sum2 += l * a[3];\n                sum2 += l * (a[3] + 1);\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n\n                // If total length is equal to l, return 0\n                if (sum2 == l)\n                    return 0;\n                // Otherwise, return the calculated total length\n                else\n                    return sum2;\n            }\n            // If count of 'B' to 'R' strings is equal to count of 'R' to 'B' strings\n            else if (a[4] == a[3]) {\n                // Calculate total length by adding the lengths of 'B' to 'R' strings,\n                // 'R' to 'B' strings, count of 'R' strings and count of 'B' strings\n                sum2 += l * a[3];\n                sum2 += l * a[3];\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n\n                // If total length is equal to l, return 0\n                if (sum2 == l)\n                    return 0;\n                // Otherwise, return the calculated total length\n                else\n                    return sum2;\n            }\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int combine(int n, String[] s) {\n        int[] a = new int[5];\n        int sum2 = 0, max2 = 0, max3 = 0;\n        int l = s[0].length();\n\n        for (int i = 0; i < n; i++) {\n            if (s[i].charAt(0) == 'R' && s[i].charAt(l - 1) == 'R') {\n                a[1]++;\n                max2++;\n            } else if (s[i].charAt(0) == 'B' && s[i].charAt(l - 1) == 'B') {\n                a[2]++;\n                max3++;\n            } else if (s[i].charAt(0) == 'B' && s[i].charAt(l - 1) == 'R') {\n                a[3]++;\n            } else if (s[i].charAt(0) == 'R' && s[i].charAt(l - 1) == 'B') {\n                a[4]++;\n            }\n        }\n\n        if (a[3] == 0 && a[4] == 0) {\n            if (a[1] == 1 && a[2] == 1)\n                return 0;\n            else {\n                max2 = l * max2;\n                max3 = l * max3;\n                return Math.max(max2, max3);\n            }\n        } else {\n            if (a[3] > a[4]) {\n                sum2 += l * a[4];\n                sum2 += l * (a[4] + 1);\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n                return (sum2 == l) ? 0 : sum2;\n            } else if (a[4] > a[3]) {\n                sum2 += l * a[3];\n                sum2 += l * (a[3] + 1);\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n                return (sum2 == l) ? 0 : sum2;\n            } else {\n                sum2 += l * a[3];\n                sum2 += l * a[3];\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n                return (sum2 == l) ? 0 : sum2;\n            }\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def combine(self, n, s):\n        a = [0] * 5\n        sum2, max2, max3 = 0, 0, 0\n        l = len(s[0])\n\n        for i in range(n):\n            if s[i][0] == 'R' and s[i][-1] == 'R':\n                a[1] += 1\n                max2 += 1\n            elif s[i][0] == 'B' and s[i][-1] == 'B':\n                a[2] += 1\n                max3 += 1\n            elif s[i][0] == 'B' and s[i][-1] == 'R':\n                a[3] += 1\n            elif s[i][0] == 'R' and s[i][-1] == 'B':\n                a[4] += 1\n\n        if a[3] == 0 and a[4] == 0:\n            if a[1] == 1 and a[2] == 1:\n                return 0\n            else:\n                max2 = l * max2\n                max3 = l * max3\n                return max(max2, max3)\n        else:\n            if a[3] > a[4]:\n                sum2 += l * a[4]\n                sum2 += l * (a[4] + 1)\n                sum2 += l * a[1]\n                sum2 += l * a[2]\n                return 0 if sum2 == l else sum2\n            elif a[4] > a[3]:\n                sum2 += l * a[3]\n                sum2 += l * (a[3] + 1)\n                sum2 += l * a[1]\n                sum2 += l * a[2]\n                return 0 if sum2 == l else sum2\n            else:\n                sum2 += l * a[3]\n                sum2 += l * a[3]\n                sum2 += l * a[1]\n                sum2 += l * a[2]\n                return 0 if sum2 == l else sum2\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    public int combine(int n, string[] s) {\n        int[] a = new int[5];\n        int sum2 = 0, max2 = 0, max3 = 0;\n        int l = s[0].Length;\n\n        for (int i = 0; i < n; i++) {\n            if (s[i][0] == 'R' && s[i][l - 1] == 'R') {\n                a[1]++;\n                max2++;\n            } else if (s[i][0] == 'B' && s[i][l - 1] == 'B') {\n                a[2]++;\n                max3++;\n            } else if (s[i][0] == 'B' && s[i][l - 1] == 'R') {\n                a[3]++;\n            } else if (s[i][0] == 'R' && s[i][l - 1] == 'B') {\n                a[4]++;\n            }\n        }\n\n        if (a[3] == 0 && a[4] == 0) {\n            if (a[1] == 1 && a[2] == 1)\n                return 0;\n            else {\n                max2 = l * max2;\n                max3 = l * max3;\n                return Math.Max(max2, max3);\n            }\n        } else {\n            if (a[3] > a[4]) {\n                sum2 += l * a[4];\n                sum2 += l * (a[4] + 1);\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n                return (sum2 == l) ? 0 : sum2;\n            } else if (a[4] > a[3]) {\n                sum2 += l * a[3];\n                sum2 += l * (a[3] + 1);\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n                return (sum2 == l) ? 0 : sum2;\n            } else {\n                sum2 += l * a[3];\n                sum2 += l * a[3];\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n                return (sum2 == l) ? 0 : sum2;\n            }\n        }\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    combine(n, s) {\n        let a = [ 0, 0, 0, 0, 0 ];\n        let sum2 = 0;\n        let max2 = 0;\n        let max3 = 0;\n        let l = s[0].length;\n\n        for (let i = 0; i < n; i++) {\n            if (s[i][0] === 'R' && s[i][l - 1] === 'R') {\n                a[1]++;\n                max2++;\n            } else if (s[i][0] === 'B' && s[i][l - 1] === 'B') {\n                a[2]++;\n                max3++;\n            } else if (s[i][0] === 'B' && s[i][l - 1] === 'R') {\n                a[3]++;\n            } else if (s[i][0] === 'R' && s[i][l - 1] === 'B') {\n                a[4]++;\n            }\n        }\n\n        if (a[3] === 0 && a[4] === 0) {\n            if (a[1] === 1 && a[2] === 1)\n                return 0;\n            else {\n                max2 = l * max2;\n                max3 = l * max3;\n                return Math.max(max2, max3);\n            }\n        } else {\n            if (a[3] > a[4]) {\n                sum2 += l * a[4];\n                sum2 += l * (a[4] + 1);\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n                if (sum2 === l)\n                    return 0;\n                else\n                    return sum2;\n            } else if (a[4] > a[3]) {\n                sum2 += l * a[3];\n                sum2 += l * (a[3] + 1);\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n                if (sum2 === l)\n                    return 0;\n                else\n                    return sum2;\n            } else if (a[4] === a[3]) {\n                sum2 += l * a[3];\n                sum2 += l * a[3];\n                sum2 += l * a[1];\n                sum2 += l * a[2];\n                if (sum2 === l)\n                    return 0;\n                else\n                    return sum2;\n            }\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}