{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703332,
            "title": "Common Divisor",
            "titleSlug": "common-divisor0847",
            "content": "<p><span style=\"font-size:18px\">Given two numbers, A and B. Find the number of common divisors of A and B.&nbsp;</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039Input :</strong> A = 2 and B = 4\r\n<strong>Output :</strong> 2\r\n<strong>Explanation:</strong>\r\nThere are only two common divisor of 2 and 4.\r\nThat is 1 and 2.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> A = 3 and B = 5 <strong>\r\nOutput :</strong>  1</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>common_divisor()</strong> that takes an integer <strong>A</strong>, another integer <strong>B</strong>, and return the number of the common divisor of <strong>A</strong> and <strong>B</strong>. The driver code takes care of the printing.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(SQRT(min(A,B))).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1 &le; A, B &le; 10<sup>7</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, A and B, determine the number of common divisors they share.",
                "constraints": [
                    "1 <= A, B <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "A = 2, B = 4",
                        "output": "2",
                        "explanation": "The common divisors of 2 and 4 are 1 and 2.  Therefore, the count is 2."
                    },
                    {
                        "input": "A = 3, B = 5",
                        "output": "1",
                        "explanation": "The only common divisor of 3 and 5 is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Calculate the GCD of A and B. Then count the number of&nbsp;divisors of GCD(A, B).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Function to find the common divisor of two numbers\nint common_divisor(int a, int b)\n{\n    int n = __gcd(a,b); //Finding the greatest common divisor of a and b\n    int ans = 0; //Initializing the counter for common divisors\n    \n    //Iterating from 1 to square root of n\n    for(int i=1;i*i<=n;i++){\n        \n        //Checking if i is a divisor of n\n        if(n%i==0){\n            if(n/i != i)\n                ans++; //Incrementing the counter for distinct divisors\n            ans++; //Incrementing the counter for divisors\n        }\n    }\n    return ans; //Returning the total count of common divisors\n    \n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}