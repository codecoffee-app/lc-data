{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702768,
            "title": "Common in 3 Sorted Arrays",
            "titleSlug": "common-elements1132",
            "content": "<p><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">Given three sorted arrays in&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">non-decreasing</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;order, print all common elements in&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">non-decreasing</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;order across these arrays. If there are no such elements return an empty array. In this case, the output will be -1.</span></p>\n<p><span style=\"font-size: 18px;\"><em>Note</em><strong>:&nbsp;</strong></span><span style=\"font-size: 18px;\">can you handle the duplicates without using any additional Data Structure?</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1 = [1, 5, 10, 20, 40, 80] , arr2 = [6, 7, 20, 80, 100] , arr3 = [3, 4, 15, 20, 30, 70, 80, 120]\n<strong>Output:</strong> [20, 80]\n<strong>Explanation:</strong> 20 and 80 are the only common elements in arr, brr and crr.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1 = [1, 2, 3, 4, 5] , arr2 = [6, 7] , arr3 = [8,9,10]\n<strong>Output:</strong> [-1]\n<strong>Explanation:</strong> There are no common elements in arr, brr and crr.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"color: #222222; text-wrap: wrap; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Input: </strong><span style=\"color: #222222; text-wrap: wrap; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">arr1</span> = [1, 1, 1, 2, 2, 2], B = [1, 1, 2, 2, 2], arr3 = [1, 1, 1, 1, 2, 2, 2, 2]<br /><strong style=\"color: #222222; text-wrap: wrap; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Output:</strong><span style=\"background-color: #ffffff; color: #222222; text-wrap: wrap; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> [1, 2]<br /></span></span><strong style=\"color: #222222; text-wrap: wrap; font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong><span style=\"background-color: #ffffff; color: #222222; text-wrap: wrap; font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> We do not need to consider duplicates</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr1.size(), arr2.size(), arr3.size() &lt;= 10<sup>5</sup><br />-10<sup>5</sup> &lt;= arr1<sub>i</sub> , arr2<sub>i</sub> , 1arr3<sub>i</sub> &lt;= 10<sup>5</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three sorted arrays `arr1`, `arr2`, and `arr3` in non-decreasing order, find all common elements that appear in all three arrays, also in non-decreasing order. Return an array containing these common elements.  If no common elements exist, return an array containing only -1.",
                "constraints": [
                    "1 <= arr1.size(), arr2.size(), arr3.size() <= 10^5",
                    "-10^5 <= arr1[i], arr2[i], arr3[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [1, 5, 10, 20, 40, 80] , arr2 = [6, 7, 20, 80, 100] , arr3 = [3, 4, 15, 20, 30, 70, 80, 120]",
                        "output": "[20, 80]",
                        "explanation": "The elements 20 and 80 are present in all three arrays."
                    },
                    {
                        "input": "arr1 = [1, 2, 3, 4, 5] , arr2 = [6, 7] , arr3 = [8,9,10]",
                        "output": "[-1]",
                        "explanation": "There are no elements common to all three arrays."
                    },
                    {
                        "input": "arr1 = [1, 1, 1, 2, 2, 2], arr2 = [1, 1, 2, 2, 2], arr3 = [1, 1, 1, 1, 2, 2, 2, 2]",
                        "output": "[1, 2]",
                        "explanation": "The common elements are 1 and 2. Duplicates are only included once in the result."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use three-pointers to traverse through the arrays simultaneously, adding elements to the result when all three arrays contain the same element while skipping duplicates and moving the pointers accordingly.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "vmware",
            "microsoft",
            "maq-software"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find common elements in three arrays.\n    vector<int> commonElements(vector<int> &arr1, vector<int> &arr2,\n                               vector<int> &arr3) {\n        int n1 = arr1.size();\n        int n2 = arr2.size();\n        int n3 = arr3.size();\n        // Initializing variables i, j, k to track array indices.\n        int i = 0, j = 0, k = 0;\n\n        // Initializing vector to store common elements.\n        vector<int> res;\n\n        // Initializing variable last to track previous common element.\n        int last = INT_MIN;\n\n        // Loop until reach the end of any array.\n        while (i < n1 and j < n2 and k < n3) {\n            // If current elements in all arrays are equal and not the same as the\n            // previous common element.\n            if (arr1[i] == arr2[j] and arr1[i] == arr3[k] and arr1[i] != last) {\n                // Add common element to the result vector.\n                res.push_back(arr1[i]);\n\n                // Update last variable to current common element.\n                last = arr1[i];\n\n                // Move to next elements in all arrays.\n                i++;\n                j++;\n                k++;\n            }\n            // Move to the next smallest element among the three arrays.\n            else if (min({arr1[i], arr2[j], arr3[k]}) == arr1[i])\n                i++;\n            else if (min({arr1[i], arr2[j], arr3[k]}) == arr2[j])\n                j++;\n            else\n                k++;\n        }\n\n        // Return the result vector with common elements.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find common elements in three arrays.\n    public List<Integer> commonElements(List<Integer> arr, List<Integer> brr,\n                                        List<Integer> crr) {\n        int n1 = arr.size();\n        int n2 = brr.size();\n        int n3 = crr.size();\n\n        // Initializing variables i, j, k to track array indices.\n        int i = 0, j = 0, k = 0;\n\n        // Initializing list to store common elements.\n        List<Integer> res = new ArrayList<>();\n\n        // Initializing variable last to track previous common element.\n        int last = Integer.MIN_VALUE;\n\n        // Loop until reach the end of any array.\n        while (i < n1 && j < n2 && k < n3) {\n            // If current elements in all arrays are equal and not the same as the\n            // previous common element.\n            if (arr.get(i).equals(brr.get(j)) && arr.get(i).equals(crr.get(k)) &&\n                !arr.get(i).equals(last)) {\n                // Add common element to the result list.\n                res.add(arr.get(i));\n\n                // Update last variable to current common element.\n                last = arr.get(i);\n\n                // Move to next elements in all arrays.\n                i++;\n                j++;\n                k++;\n            } else if (Collections.min(Arrays.asList(arr.get(i), brr.get(j),\n                                                     crr.get(k))) == arr.get(i))\n                i++;\n            else if (Collections.min(Arrays.asList(arr.get(i), brr.get(j),\n                                                   crr.get(k))) == brr.get(j))\n                j++;\n            else\n                k++;\n        }\n\n        // Return the result list with common elements.\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def commonElements(self, arr, brr, crr):\n        n1 = len(arr)\n        n2 = len(brr)\n        n3 = len(crr)\n\n        # Initializing variables i, j, k to track array indices.\n        i = 0\n        j = 0\n        k = 0\n\n        # Initializing list to store common elements.\n        res = []\n\n        # Initializing variable last to track previous common element.\n        last = float('-inf')\n\n        # Loop until reach the end of any array.\n        while i < n1 and j < n2 and k < n3:\n            # If current elements in all arrays are equal and not the same as the\n            # previous common element.\n            if arr[i] == brr[j] == crr[k] and arr[i] != last:\n                # Add common element to the result list.\n                res.append(arr[i])\n\n                # Update last variable to current common element.\n                last = arr[i]\n\n                # Move to next elements in all arrays.\n                i += 1\n                j += 1\n                k += 1\n            elif min(arr[i], brr[j], crr[k]) == arr[i]:\n                i += 1\n            elif min(arr[i], brr[j], crr[k]) == brr[j]:\n                j += 1\n            else:\n                k += 1\n\n        # Return the result list with common elements.\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find common elements in three arrays.\n    commonElements(arr, brr, crr) {\n        let n1 = arr.length;\n        let n2 = brr.length;\n        let n3 = crr.length;\n        // Initializing variables i, j, k to track array indices.\n        let i = 0, j = 0, k = 0;\n\n        // Initializing array to store common elements.\n        let res = [];\n\n        // Initializing variable last to track previous common element.\n        let last = -Infinity;\n\n        // Loop until reach the end of any array.\n        while (i < n1 && j < n2 && k < n3) {\n            // If current elements in all arrays are equal and not the same as the\n            // previous common element.\n            if (arr[i] === brr[j] && arr[i] === crr[k] && arr[i] !== last) {\n                // Add common element to the result array.\n                res.push(arr[i]);\n\n                // Update last variable to current common element.\n                last = arr[i];\n\n                // Move to next elements in all arrays.\n                i++;\n                j++;\n                k++;\n            }\n            // Move to the next smallest element among the three arrays.\n            else if (Math.min(arr[i], brr[j], crr[k]) === arr[i])\n                i++;\n            else if (Math.min(arr[i], brr[j], crr[k]) === brr[j])\n                j++;\n            else\n                k++;\n        }\n\n        // Return the result array with common elements.\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}