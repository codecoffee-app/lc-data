{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701733,
            "title": "Common Elements",
            "titleSlug": "common-elements5420",
            "content": "<p><span style=\"font-size: 18px;\">Given two integer arrays <strong>a[] </strong>and <strong>b[]</strong>. Return the list of elements common to both the lists and return the list in sorted order. Duplicates may be there in the output list.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><span style=\"font-size: 18px;\"> a[] = [3, 4, 2, 2, 4] , b[] = [3, 2, 2, 7]</span>\n<strong><span style=\"font-size: 18px;\">Output:</span> </strong><span style=\"font-size: 18px;\">2 2 3</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span> </strong><span style=\"font-size: 18px;\">The common elements in sorted order are [2, 2, 3]</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><span style=\"font-size: 18px;\"> a[] = [3, 6, 1, 7, 9, 8, 2, 2] , b[] = [9, 7, 3, 4, 9]<br /><strong>Output: </strong>3 7 9<br /><strong>Explanation: </strong>The common elements in sorted order are [3, 7, 9]</span></pre>\n<p><strong style=\"font-size: 18px;\">Constraints:</strong></p>\n<p><span style=\"font-size: 18px;\">1 &le; a.size(), b.size() &le; 10</span><sup>5<br /></sup><span style=\"font-size: 18px;\">1 &le; a[i], b[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integer arrays `a` and `b`, find the elements common to both arrays, including duplicates. Return the list of common elements in sorted order.",
                "constraints": [
                    "1 <= a.length, b.length <= 100000",
                    "1 <= a[i], b[i] <= 100000"
                ],
                "testcases": [
                    {
                        "input": "a = [3, 4, 2, 2, 4], b = [3, 2, 2, 7]",
                        "output": "2 2 3",
                        "explanation": "The elements 2, 2, and 3 are present in both arrays. After sorting, the output is [2, 2, 3]."
                    },
                    {
                        "input": "a = [3, 6, 1, 7, 9, 8, 2, 2], b = [9, 7, 3, 4, 9]",
                        "output": "3 7 9",
                        "explanation": "The elements 3, 7, and 9 are present in both arrays. After sorting, the output is [3, 7, 9]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:16px\"><strong>CPP:</strong>1.use a map to store the frequency of each element in each vector.<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2.print the element min frequency of each map&#39;s times if present in both the maps.</span></p>\n\n<p><span style=\"font-size:16px\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Algorithm:</span></p>\n\n<p><span style=\"font-size:16px\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;map1 stores the frequency of each element of vector1<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;map2&nbsp; stores the frequency of each element of vector2.<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if the element is present in map1 and map2, print the element min(map1[x],map2[x])&#39;s times in the output&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;vector.</span></p>\n\n<p><span style=\"font-size:16px\"><strong>Java:&nbsp;</strong>For java use TreeMap and ArrayList follow the above algorithm</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find common elements in two vectors.\n    vector<int> commonElements(vector<int> a, vector<int> b) {\n        vector<int> ans;\n\n        // creating maps to store element frequency in each vector.\n        map<int, int> m1, m2, m3;\n        // iterating over first vector, updating element frequency in map m1.\n        for (auto i : a) {\n            if (m1.find(i) == m1.end()) {\n                m1[i] = 1;\n            } else {\n                m1[i]++;\n            }\n        }\n        // iterating over second vector, updating element frequency in map m2.\n        for (auto i : b) {\n            if (m2.find(i) == m2.end()) {\n                m2[i] = 1;\n            } else {\n                m2[i]++;\n            }\n        }\n        // iterating over map m1, if corresponding element is also present in m2,\n        // then adding it to map m3 with the minimum frequency.\n        for (auto i : m1) {\n            if (m2.find(i.first) != m2.end()) {\n                m3[i.first] = min(i.second, m2[i.first]);\n            }\n        }\n        // iterating over map m3, adding the elements to the answer vector\n        // with their corresponding frequencies.\n        for (auto i : m3) {\n            for (int j = 0; j < i.second; j++) {\n                ans.push_back(i.first);\n            }\n        }\n        // returning the final answer vector with common elements.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public static ArrayList<Integer> commonElements(int a[], int b[]) {\n\n        // Creating 3 TreeMaps for storing count\n        // of frequencies of different ArrayList\n        // and 1 for common elements frequencies\n        TreeMap<Integer, Integer> mp1 = new TreeMap<>();\n        TreeMap<Integer, Integer> mp2 = new TreeMap<>();\n        TreeMap<Integer, Integer> mp3 = new TreeMap<>();\n\n        // incrementing the value if\n        // the key already exists in TreeMap\n        // else initializing 1 to that key\n        for (int i = 0; i < a.length; i++) {\n            if (mp1.containsKey(a[i])) {\n                mp1.put(a[i], mp1.get(a[i]) + 1);\n            } else {\n                mp1.put(a[i], 1);\n            }\n        }\n\n        // incrementing the value if\n        // the key already exists in TreeMap\n        // else initializing 1 to that key\n        for (int i = 0; i < b.length; i++) {\n            if (mp2.containsKey(b[i])) {\n                mp2.put(b[i], mp2.get(b[i]) + 1);\n            } else {\n                mp2.put(b[i], 1);\n            }\n        }\n\n        // Iterating map1 and taking out common elements frequencies\n        for (Map.Entry<Integer, Integer> entry : mp1.entrySet()) {\n            int key = entry.getKey();\n            int value = entry.getValue();\n\n            if (mp2.containsKey(key)) {\n                mp3.put(key, Math.min(value, mp2.get(key)));\n            }\n        }\n\n        // Declaring and Initializing a new ArrayList\n        ArrayList<Integer> ans = new ArrayList<>();\n\n        // Adding the common elements the\n        // number of times their frequencies\n        for (Map.Entry<Integer, Integer> entry : mp3.entrySet()) {\n            int key = entry.getKey();\n            int value = entry.getValue();\n            for (int i = 0; i < value; i++) ans.add(key);\n        }\n\n        // returing the sorted common elements\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\n\nclass Solution:\n    #Function to find the common elements in two arrays.\n    def commonElements(self, a, b):\n        #Creating dictionaries to store the count of elements in each array.\n        d = dict()\n        d1 = dict()\n\n        #Iterating over the first array and updating its count in dictionary d.\n        for i in a:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n\n        #Iterating over the second array and updating its count in dictionary d1.\n        for i in b:\n            if i not in d1:\n                d1[i] = 1\n            else:\n                d1[i] += 1\n\n        #Creating a list to store the common elements.\n        ans = []\n\n        #Iterating over the sorted dictionary d.\n        for i in sorted(d):\n            #Checking if the element is present in dictionary d1.\n            if i in d1:\n                #Appending the common element to the ans list, minimum of the counts.\n                l = [i] * min(d[i], d1[i])\n                ans += l\n\n        #Returning the list of common elements.\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    commonElements(a, b) {\n        let ans = [];\n\n        let m1 = new Map();\n        let m2 = new Map();\n        let m3 = new Map();\n\n        for (let i of a) {\n            if (!m1.has(i)) {\n                m1.set(i, 1);\n            } else {\n                m1.set(i, m1.get(i) + 1);\n            }\n        }\n\n        for (let i of b) {\n            if (!m2.has(i)) {\n                m2.set(i, 1);\n            } else {\n                m2.set(i, m2.get(i) + 1);\n            }\n        }\n\n        for (let [key, value] of m1.entries()) {\n            if (m2.has(key)) {\n                m3.set(key, Math.min(value, m2.get(key)));\n            }\n        }\n\n        for (let [key, value] of m3.entries()) {\n            for (let i = 0; i < value; i++) {\n                ans.push(key);\n            }\n        }\n\n        ans.sort((a, b) => a - b);\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}