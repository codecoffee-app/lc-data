{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703647,
            "title": "Common Subsequence OldP",
            "titleSlug": "common-subsequence-oldp3752",
            "content": "<p><span style=\"font-size:18px\">Given two strings S1&nbsp;and S2 print whether they contain any common subsequence (non empty)&nbsp;or not.<br />\n<strong>NOTE:&nbsp;</strong>Print 1 if they have a common subsequence (non empty) else 0.</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: S1 = &quot;ABEF</span><span style=\"font-size:18px\">&quot; , S2 = &quot;CADE</span><span style=\"font-size:18px\">&quot;\n<strong>Output:</strong>&nbsp;1\n<strong>Explanation</strong>: &quot;A&quot;, &quot;E&quot;, &quot;AE&quot; are in \nboth S1 and S2.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>S1 = &quot;ABCDE</span><span style=\"font-size:18px\">&quot; , S2 = &quot;FGHIJ</span><span style=\"font-size:18px\">&quot;\n<strong>Output:&nbsp;0</strong>\n<strong>Explanation</strong>: There is no common\nsubsequences .</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>commonSubseq</strong><strong>()&nbsp;</strong>which takes S1 and S2 as input parameter and returns 1 if they have a common subsequence (non empty) else 0.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(|S|)<br />\n<strong>Expected Auxiliary Space:</strong> O(K), Where K = Constant.<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;= |S1|=|S2|&nbsp;&lt;=1000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings S1 and S2, determine if they share at least one common subsequence (non-empty). Return 1 if a common subsequence exists, otherwise return 0.",
                "constraints": [
                    "1 <= |S1| = |S2| <= 1000"
                ],
                "testcases": [
                    {
                        "input": "S1 = \"ABEF\", S2 = \"CADE\"",
                        "output": "1",
                        "explanation": "The strings share common subsequences such as \"A\" and \"E\"."
                    },
                    {
                        "input": "S1 = \"ABCDE\", S2 = \"FGHIJ\"",
                        "output": "0",
                        "explanation": "The strings do not share any common characters or subsequences."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    int commonSubseq(string S1, string S2){\n        //size of strings\n        int len=S1.size();\n        //hash1 for storing frequencies of S1\n        int hash1[27]={0};\n        //hash2 for storing frequencies of S2\n        int hash2[27]={0};\n        //iterate for storing\n        for(int i = 0; i < len; i++){\n            //store S1 in hash1\n            hash1[S1[i]-'A'] = 1;\n            //store S2 in hash2\n            hash2[S2[i]-'A'] = 1;\n        }\n        //initializing i=0\n        int i = 0;\n        for( i = 0; i < 27; i++)\n        {\n            //check if present in both string\n            if(hash1[i] == 1 && hash2[i] == 1)\n            break;\n        }\n        //check if its reached last position or not\n        if(i !=27 ){\n            //return 1 if its not reached\n            return 1;\n        }\n        else{\n            //return 0 if its reached it means there is no common subsequences \n            return 0;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static int commonSubseq(String S1, String S2){\n        //size of strings\n        int len=S1.length();\n        //hash1 for storing frequencies of S1\n        int hash1[]=new int[27];\n        //hash2 for storing frequencies of S2\n        int hash2[]=new int[27];\n        //iterate for storing\n        for(int i = 0; i < len; i++){\n            //store S1 in hash1\n            hash1[S1.charAt(i)-'A'] = 1;\n            //store S2 in hash2\n            hash2[S2.charAt(i)-'A'] = 1;\n        }\n        //initializing i=0\n        int i = 0;\n        for( i = 0; i < 27; i++)\n        {\n            //check if present in both string\n            if(hash1[i] == 1 && hash2[i] == 1)\n            break;\n        }\n        //check if its reached last position or not\n        if(i !=27 ){\n            //return 1 if its not reached\n            return 1;\n        }\n        else{\n            //return 0 if its reached it means there is no common subsequences \n            return 0;\n        }\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n  commonSubseq(s1, s2) {\n    const len = s1.length;\n    const hash1 = new Array(27).fill(0);\n    const hash2 = new Array(27).fill(0);\n\n    for (let i = 0; i < len; i++) {\n      hash1[s1[i].charCodeAt(0) - 'A'.charCodeAt(0)] = 1;\n      hash2[s2[i].charCodeAt(0) - 'A'.charCodeAt(0)] = 1;\n    }\n\n    let i = 0;\n    for (i = 0; i < 27; i++) {\n      if (hash1[i] === 1 && hash2[i] === 1) {\n        break;\n      }\n    }\n\n    if (i !== 27) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int commonSubseq(string S1, string S2)\n    {\n        int len = S1.Length;\n        int[] hash1 = new int[27];\n        int[] hash2 = new int[27];\n        \n        for(int i = 0; i < len; i++)\n        {\n            hash1[S1[i]-'A'] = 1;\n            hash2[S2[i]-'A'] = 1;\n        }\n        \n        int commonFound = 0;\n        for(int j = 0; j < 27; j++)\n        {\n            if(hash1[j] == 1 && hash2[j] == 1)\n            {\n                commonFound = 1;\n                break;\n            }\n        }\n        \n        return commonFound;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}