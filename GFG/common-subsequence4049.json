{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702962,
            "title": "Common Subsequence",
            "titleSlug": "common-subsequence4049",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings<strong> a</strong> and<strong> b.</strong> Check&nbsp;whether they contain any common subsequence (non empty)&nbsp;or not.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\na = \"ABEF\" b = \"CADE\"\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: Subsequence \"AE\" occurs\nin both the strings.\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\">&acirc;&euro;&lsaquo;<strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \na = \"ABCD\", b = \"EFGH\"\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: There's no common subsequence\nin both the strings.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>commonSubseq()&nbsp;</strong>which takes the string <strong>a</strong> and string <strong>b</strong> as inputs and <strong>returns</strong> true if there's a common subsequence in both the strings. Else, it returns false.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|a| + |b|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= |a|, |b| &lt;=10<sup>5</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings `a` and `b`, determine if they share at least one common subsequence (non-empty).",
                "constraints": [
                    "2 <= |a|, |b| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "a = \"ABEF\", b = \"CADE\"",
                        "output": "1",
                        "explanation": "The subsequence \"AE\" is present in both strings."
                    },
                    {
                        "input": "a = \"ABCD\", b = \"EFGH\"",
                        "output": "0",
                        "explanation": "There is no common subsequence between the two strings."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The common subsequence can even be of length 1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\n\t//Function to check if there is a common character in both strings.\n\tbool commonSubseq (string a, string b)\n\t{\n\t\tbool f1[26]; //array to store presence of characters in string a\n\t\tmemset (f1, false, sizeof (f1)); \n\n\t\t//marking the presence of characters in string a\n\t\tfor (int i = 0; i < a.length (); ++i)\n\t\t\tf1[a[i] - 'A'] = true;\n\n\t\t//checking for common characters in string b\n\t\tfor (int i = 0; i < b.length (); ++i)\n\t\t\tif (f1[b[i] - 'A'])\n\t\t\t\treturn 1; //if common character found, return true\n\n\t\treturn 0; //if no common character found, return false\n\t}\n\n\t// Contributed By: Pranay Bansal\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Sol\n{\n    // Function to check if there is a common subsequence between two strings.\n    Boolean commonSubseq (String a, String b)\n    {\n        // Boolean array to store the presence of each character in string a.\n        Boolean []f1 = new Boolean[26];\n        for (int i = 0; i < 26; i++)\n            f1[i] = false;\n        \n        // Marking the presence of each character in string a.\n        for (int i = 0; i < a.length (); ++i)\n            f1[(int)(a.charAt(i) - 'A')] = true;\n        \n        // Checking if any character in string b is present in string a.\n        for (int i = 0; i < b.length (); ++i)\n            if (f1[(int)(b.charAt(i) - 'A')])\n                return true;\n        \n        // Returning false if no common subsequence is found.\n        return false;\n    }\n}\n\n// Contributed By: Pranay Bansal",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def commonSubseq(self, a, b):\n        f1 = [0 for i in range(26)]\n        for i in a:\n            f1[ord(i) - ord('A')] = 1\n\n        for i in b:\n            if f1[ord(i) - ord('A')] == 1:\n                return True\n\n        return False\n\n    # Contributed By: Pranay Bansal\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n*/\n\nclass Solution {\n    //Function to find the largest common subsequence of two strings.\n    commonSubseq(a, b)\n    {\n        let f1 = new Array(26).fill(0);\n        for (let i = 0; i < a.length; i++) {\n            f1[a.charCodeAt(i) - 'A'.charCodeAt(0)] = 1;\n        }\n\n        for (let i = 0; i < b.length; i++) {\n            if (f1[b.charCodeAt(i) - 'A'.charCodeAt(0)] == 1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}