{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703447,
            "title": "Comparator Sort Coordinates",
            "titleSlug": "comparator-sort-coordinates",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr[] </strong>of n <strong>coordinates.</strong> These coordinates are objects of the class Point and contain x and y. You need to sort the<strong>&nbsp;</strong>array by <strong>increasing </strong>order of x, and if two x are <strong>same </strong>then sort by increasing order of y.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 0]]</span>\n<strong><span style=\"font-size: 18px;\">Output:</span> </strong><span style=\"font-size: 18px;\">(1,2) (3,4) (5,6) (7,8) (9,0)</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Sort it in increasing order of x, and if two x are same then sort in increasing order of y. So, by following the logic we get (1,2) (3,4) (5,6) (7,8) (9,0)</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [[1, 2], [1, 9], [1, 0], [1, 1]]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong></span><span style=\"font-size: 18px;\">(1,0) (1,1) (1,2) (1,9)</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Sort it in increasing order of x, and if two x are same then sort in increasing order of y. Here we see that x are same for all the coordinates so we sort in increasing order of y. Hence we get (1,0) (1,1) (1,2) (1,9).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.length &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of `n` coordinates, where each coordinate is a Point object with x and y attributes. Sort the array in increasing order of the x-coordinate. If two points have the same x-coordinate, sort them in increasing order of the y-coordinate.",
                "constraints": [
                    "1 <= arr.length <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "[[1, 2], [3, 4], [5, 6], [7, 8], [9, 0]]",
                        "output": "(1,2) (3,4) (5,6) (7,8) (9,0)",
                        "explanation": "The array is sorted primarily by the x-coordinate.  Since all x-coordinates are distinct, the original order is preserved."
                    },
                    {
                        "input": "[[1, 2], [1, 9], [1, 0], [1, 1]]",
                        "output": "(1,0) (1,1) (1,2) (1,9)",
                        "explanation": "All points have the same x-coordinate (1).  Therefore, the array is sorted based on the increasing order of the y-coordinate."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:20px\">Just check if x are same for two then compare by y.</span></p>",
            "<p><span style=\"font-size:20px\">(p1,p2)-&gt;p1.x-p2.x==0?p1.y-p2.y:p1.x-p2.x)</span></p>\n\n<p><span style=\"font-size:20px\">Use this in the Arrays.sort() comparator.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\npublic static void coordinatesSort(Point[] arr) {\n    // using In-built sort method with lambda expressions\n    // if both points have same x cordinates then\n    // sorting them non-decreasing by y cordinates\n    // else sorting them non-decreasing by x cordinates\n    Arrays.sort(arr, (p1, p2) -> p1.x - p2.x == 0 ? p1.y - p2.y : p1.x - p2.x);\n}",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}