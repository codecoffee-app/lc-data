{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700071,
            "title": "Compare two linked lists",
            "titleSlug": "compare-two-linked-lists",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings,&nbsp;</span><strong><span style=\"font-size: 18px;\">head1</span></strong><span style=\"font-size: 18px;\">&nbsp;and&nbsp;</span><strong><span style=\"font-size: 18px;\">head2</span></strong><span style=\"font-size: 18px;\">, represented as linked lists where each character is stored in a node's data field, complete the function compare() that mimics the behavior of strcmp(). Specifically, the function should return:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">0 if both strings are identical,</span></li>\n<li><span style=\"font-size: 18px;\">1 if the first linked list is lexicographically greater, and</span></li>\n<li><span style=\"font-size: 18px;\">-1 if the second linked list is lexicographically greater.</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>head1 = a-&gt;b-&gt;a-&gt;b-&gt;a , head2 = a-&gt;b-&gt;a-&gt;a<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700071/Web/Other/blobid0_1720504840.png\" width=\"400\" height=\"130\" /><br /><strong>Output: </strong>1<br /><strong>Explanation:</strong> String consisting of nodes of first linked list is lexicographically greater than the second one. So, the result is 1.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">head1 = a-&gt;a-&gt;b , head2 = a-&gt;a-&gt;b<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700071/Web/Other/blobid1_1720504861.png\" width=\"400\" height=\"130\" /><br /></span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">0<br /></span></span><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> String consisting of nodes of first linked list is same as the second one. So, the result is 0.</span></span></pre>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> head1 = a-&gt;b-&gt;c-&gt;d , head2 = a-&gt;b-&gt;c-&gt;e\n<strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Output:</strong> -1<br /></span></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> String consisting of nodes of second linked list is lexicographically greater than the first one. So, the result is -1.</span></pre>\n<p><strong style=\"font-size: 18px;\">Constraints:</strong><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">1 &lt;= no. of nodes in head1 and head2 &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `head1` and `head2`, represented as linked lists where each character is stored in a node's data field, implement the `compare()` function. This function should mimic the behavior of `strcmp()`, returning:\n\n*   `0` if both strings are identical.\n*   `1` if the first linked list is lexicographically greater.\n*   `-1` if the second linked list is lexicographically greater.",
                "constraints": [
                    "1 <= no. of nodes in head1 and head2 <= 100"
                ],
                "testcases": [
                    {
                        "input": "head1 = a->b->a->b->a , head2 = a->b->a->a",
                        "output": "1",
                        "explanation": "The string formed by the first linked list ('ababa') is lexicographically greater than the string formed by the second linked list ('abaa')."
                    },
                    {
                        "input": "head1 = a->a->b , head2 = a->a->b",
                        "output": "0",
                        "explanation": "The strings formed by both linked lists ('aab') are identical."
                    },
                    {
                        "input": "head1 = a->b->c->d , head2 = a->b->c->e",
                        "output": "-1",
                        "explanation": "The string formed by the second linked list ('abce') is lexicographically greater than the string formed by the first linked list ('abcd')."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse both linked lists simultaneously. Compare nodes character by character until a difference is found or one list ends.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to compare two linked lists\nclass Solution {\n  public:\n    int compare(Node *head1, Node *head2) {\n        // Iterate over the lists while both nodes have the same value\n        while (head1 && head2 && head1->data == head2->data) {\n            head1 = head1->next;\n            head2 = head2->next;\n        }\n\n        // If both nodes still have value, compare their values and return 1 if head1's\n        // value is greater, -1 otherwise\n        if (head1 && head2)\n            return (head1->data > head2->data) ? 1 : -1;\n\n        // If head1 still has value but head2 does not, return 1\n        if (head1 && !head2)\n            return 1;\n\n        // If head2 still has value but head1 does not, return -1\n        if (head2 && !head1)\n            return -1;\n\n        // If both lists have been completely compared and have the same values, return\n        // 0\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to compare two linked lists\n    int compare(Node head1, Node head2) {\n        // If both lists are empty, return 1\n        if (head1 == null && head2 == null) {\n            return 1;\n        }\n\n        // Iterate through the lists and compare the data of each node\n        while (head1 != null && head2 != null && head1.data == head2.data) {\n            head1 = head1.next;\n            head2 = head2.next;\n        }\n\n        // If both lists have not reached the end\n        if (head1 != null && head2 != null) {\n            // Return 1 if data in the first list is greater, -1 otherwise\n            return (head1.data > head2.data) ? 1 : -1;\n        }\n\n        // If the first list has reached the end and the second list has not\n        if (head1 != null && head2 == null) {\n            return 1;\n        }\n\n        // If the second list has reached the end and the first list has not\n        if (head1 == null && head2 != null) {\n            return -1;\n        }\n\n        // Return 0 if both lists have reached the end\n        return 0;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def compare(self, head1, head2):\n        # Traverse both lists. Stop when either end of linked\n        # list is reached or current nodes don't match\n        while head1 and head2 and head1.data == head2.data:\n            head1 = head1.next\n            head2 = head2.next\n\n        # If both lists are not empty, compare mismatching nodes\n        if head1 and head2:\n            return 1 if head1.data > head2.data else -1\n\n        # If either of the two lists has reached end\n        if head1 and not head2:\n            return 1\n\n        if head2 and not head1:\n            return -1\n\n        # If both lists have been completely compared and have the same values, return 0\n        return 0\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/* LINKED LIST NODE\nclass Node {\n    constructor(x) {\n        this.data = x;\n        this.next = null;\n    }\n}\n*/\n/**\n * @param {Node} head1\n * @param {Node} head2\n * @return {number}\n */\nclass Solution {\n    compare(head1, head2) {\n        // Traverse both lists. Stop when either end of linked\n        // list is reached or current nodes don't match\n        while (head1 !== null && head2 !== null && head1.data === head2.data) {\n            head1 = head1.next; // Move to the next node in head1\n            head2 = head2.next; // Move to the next node in head2\n        }\n\n        // If both lists are not empty, compare mismatching nodes\n        if (head1 !== null && head2 !== null) {\n            return (head1.data > head2.data) ? 1 : -1;\n        }\n\n        // If either of the two lists has reached end\n        if (head1 !== null && head2 === null) {\n            return 1; // head1 is longer\n        }\n\n        if (head1 === null && head2 !== null) {\n            return -1; // head2 is longer\n        }\n\n        // Both lists have been completely compared and have the same values\n        return 0;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}