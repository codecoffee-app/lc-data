{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702679,
            "title": "Complement",
            "titleSlug": "complement3911",
            "content": "<p><span style=\"font-size: 18px;\">You are given a binary string <strong>str</strong>. In a single operation, you can choose two indices <strong>L</strong> and <strong>R</strong> such that <strong>1 &le; L &le; R &le; N</strong> and complement the characters between <strong>L</strong> and <strong>R</strong> i.e <strong>str<sub>L</sub>, str<sub>L+1</sub>, , str<sub>R</sub></strong>. By complement, we mean change character <strong>0</strong> to <strong>1</strong> and vice-versa. </span></p>\n<p><span style=\"font-size: 18px;\">You task is to perform <strong>ATMOST</strong> one operation such that in final string number of <strong>1</strong>s is maximised. If there is no need to completement, i.e., string contains all <strong>1</strong>s, return <strong>-1</strong>. Else, return the two values denoting <strong>L</strong> and <strong>R</strong>. If there are multiple solutions, return the <strong>lexicographically smallest pair of L and R</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 3\nstr = \"111\"\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> As all characters are&nbsp;'1', \nso don't need to complement any.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 2\nstr = \"01\"\n<strong>Output:</strong> 1 1\n<strong>Explanation:</strong>&nbsp;After complementing [1, 1] \nthe string becomes \"11\".\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything</span><strong>.&nbsp;</strong><span style=\"font-size: 18px;\">Complete the function <strong>findRange()</strong>&nbsp;which takes the string <strong>str</strong>&nbsp;and the size of the string, <strong>n</strong>,&nbsp;as input parameters&nbsp;and returns an array of length 2 or 1 representing the answer.&nbsp;<br />You don't have to print answer or take inputs.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br /><br /><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br />Str is a binary string i.e. contains only '0' and '1'.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string `str` of length `N`, you can perform at most one operation. In this operation, you choose a range `L` to `R` (inclusive, where `1 <= L <= R <= N`) and complement all characters within that range (0 becomes 1, and 1 becomes 0).  The goal is to maximize the number of 1s in the string after performing at most one such operation. If the initial string already contains all 1s, return -1. Otherwise, find the lexicographically smallest pair `(L, R)` that achieves the maximum number of 1s.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "Str is a binary string i.e. contains only '0' and '1'."
                ],
                "testcases": [
                    {
                        "input": "N = 3\nstr = \"111\"",
                        "output": "-1",
                        "explanation": "The string already consists of all 1s. Therefore, no operation is needed."
                    },
                    {
                        "input": "N = 2\nstr = \"01\"",
                        "output": "1 1",
                        "explanation": "Complementing the range [1, 1] changes the string to \"11\", which maximizes the number of 1s."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Convert the string to an array of -1 or 1, where each &#39;0&#39; and &#39;1&#39; converted to 1 and&nbsp;-1 respectively. Now find the maximum subarray sum and the indices. If string&nbsp;contains all &#39;0&#39; then return -1 as an array. Use Kadane&#39;s Algo to find maximum subarray sum.</p>",
            "<pre>\nKadane&#39;s Algo\nInitialize:\n    max_so_far = 0\n    max_ending_here = 0\n\nLoop for each element of the array\n  (a) max_ending_here = max_ending_here + a[i]\n  (b) if(max_ending_here &lt; 0)\n            max_ending_here = 0\n  (c) if(max_so_far &lt; max_ending_here)\n            max_so_far = max_ending_here\nreturn max_so_far</pre>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution{\npublic:\n    // Function to find the range of substring with maximum number of 0's\n    vector<int> findRange(string str, int n) {\n        // Initialize variables to track maximum substring range\n        int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n        bool allOne = true;\n        \n        // Check if all characters in the string are 1, if so return -1\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') allOne = false;\n        }\n    \n        vector<int> ans;\n        if (allOne) {\n            ans.push_back(-1);\n            return ans;\n        }\n        \n        // Iterate through the string to find the maximum substring range\n        for (int i = 0; i < n; i++) {\n            // Update the count of 0's and 1's in the current substring\n            max_ending_here += (str[i] == '1' ? -1 : 1);\n    \n            // Check if the maximum substring range needs to be updated\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n    \n            // If the count of 0's and 1's becomes negative, reset the count and update the starting index of the substring\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n    \n        // Add the range of the maximum substring to the answer vector and return it\n        ans.push_back(start + 1);\n        ans.push_back(end + 1);\n    \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solve {\n\n    // Function to find the range in a binary string\n    Vector<Integer> findRange(String str, int n) {\n        int max_so_far = Integer.MIN_VALUE, max_ending_here = 0, start = 0,\n            end = 0, s = 0;\n        boolean allOne = true;\n\n        // Check if all characters in the string are 1s\n        for (int i = 0; i < n; i++) {\n            if (str.charAt(i) == '0') allOne = false;\n        }\n\n        Vector<Integer> ans = new Vector<Integer>();\n\n        // If all characters are 1s, no range can be found\n        if (allOne) {\n            ans.add(-1);\n            return ans;\n        }\n\n        // Kadane's algorithm to find maximum subarray sum\n        for (int i = 0; i < n; i++) {\n            max_ending_here += (str.charAt(i) == '1' ? -1 : 1);\n\n            // Update maximum subarray sum and range\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n\n            // Reset current subarray sum if it becomes negative\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n\n        // Add start and end indices of the range to the vector\n        ans.add(start + 1);\n        ans.add(end + 1);\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nfrom sys import maxsize\n\n\nclass Solution:\n\n    # Function to find the maximum contiguous subarray\n    # and print its starting and end index\n    def findRange(self, a, size):\n\n        max_so_far = -maxsize - 1\n        max_ending_here = 0\n        start = 0\n        end = 0\n        s = 0\n        ans = []\n        allOne = True\n        for x in a:\n            if x == '0':\n                allOne = False\n        if allOne:\n            ans.append(-1)\n            return ans\n\n        for i in range(0, size):\n\n            max_ending_here += -1 if (a[i] == '1') else 1\n\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n                start = s\n                end = i\n\n            if max_ending_here < 0:\n                max_ending_here = 0\n                s = i + 1\n        ans.append(start + 1)\n        ans.append(end + 1)\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n  findRange(a, size) {\n    let max_so_far = -Number.MAX_VALUE - 1;\n    let max_ending_here = 0;\n    let start = 0;\n    let end = 0;\n    let s = 0;\n    let ans = [];\n\n    for (let i = 0; i < size; i++) {\n      max_ending_here += a[i] === '1' ? -1 : 1;\n\n      if (max_so_far < max_ending_here) {\n        max_so_far = max_ending_here;\n        start = s;\n        end = i;\n      }\n\n      if (max_ending_here < 0) {\n        max_ending_here = 0;\n        s = i + 1;\n      }\n    }\n    \n    if (start === end && a[start] !== '0') {\n      ans.push(-1);\n    } else {\n      ans.push(start + 1);\n      ans.push(end + 1);\n    }\n    \n    return ans;\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}