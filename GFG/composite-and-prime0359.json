{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705277,
            "title": "Composite and  Prime",
            "titleSlug": "composite-and-prime0359",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers l and r find the <strong>absolute</strong> difference between the <strong>number of composites</strong> and the <strong>number of primes</strong> between the range <strong>l</strong> and <strong>r</strong> (both inclusive).<br /><br /><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: l</strong> = 4, r = 6\n<strong>Output: </strong>1\n<strong>Explanation: </strong>Composite no. are 4 and 6.\nAnd prime is 5.\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: l</strong> = 4, r = 4\n<strong>Output: </strong>1\n<strong>Explanation: </strong>There is no prime no. in [l,r]</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>Count()&nbsp;</strong>which takes L and R as input parameters and returns the difference between no. of composites and primes between [l, r].</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>: O(nlog(n)) where n = r - l + 1<br /><strong>Expected Space Complexity:</strong> O(n)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= l &lt;= r &lt;= 10<sup>6</sup>&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers `l` and `r`, determine the absolute difference between the number of composite numbers and the number of prime numbers within the inclusive range of `l` to `r`.",
                "constraints": [
                    "1 <= l <= r <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "l = 4, r = 6",
                        "output": "1",
                        "explanation": "The composite numbers in the range [4, 6] are 4 and 6. The prime number is 5. The absolute difference between the count of composites (2) and primes (1) is |2 - 1| = 1."
                    },
                    {
                        "input": "l = 4, r = 4",
                        "output": "1",
                        "explanation": "The number 4 is composite. There are no prime numbers in the range [4, 4]. Thus the absolute difference between composite and prime numbers is |1-0| = 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Every number can be expressed as product of primes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<bool> prime;\n\n    void sieve(int x) {\n        prime.resize(x + 1);\n        prime.assign(x, true);\n        prime[0] = prime[1] = false;\n        for (int i = 2; i * i <= x; i++) {\n            if (prime[i]) {\n                for (int j = i * i; j <= x; j += i)\n                    prime[j] = false;\n            }\n        }\n    }\n\n    int Count(int L, int R) {\n        sieve(R + 1);\n        int ans = 0;\n        for (int i = L; i <= R; i++)\n            if (prime[i])\n                ans++;\n        return L == 1 ? R - L + 1 - 2 * ans - 1 : R - L + 1 - 2 * ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    boolean prime[]; // Array to store whether a number is prime or not\n\n    // Function to implement the Sieve of Eratosthenes algorithm\n    public void sieve(int x) {\n        prime = new boolean[x + 1];  // Initializing the prime array to store whether a\n                                     // number is prime or not, with size x+1\n        Arrays.fill(prime, true);    // Setting all elements of prime array as true\n        prime[0] = prime[1] = false; // Marking 0 and 1 as not prime\n        for (int i = 2; i * i <= x; i++) { // Iterating from 2 to the square root of x\n            if (prime[i]) {                // If i is prime\n                for (int j = i * i; j <= x;\n                     j += i) // Marking all multiples of i as not prime\n                    prime[j] = false;\n            }\n        }\n    }\n\n    // Function to count the number of prime numbers between L and R\n    public int Count(int L, int R) {\n        sieve(R + 1);                // Generating the prime array for numbers up to R\n        int ans = 0;                 // Counter for prime numbers between L and R\n        for (int i = L; i <= R; i++) // Iterating from L to R\n            if (prime[i])            // If i is prime\n                ans++;               // Increment the counter\n        return (L == 1 ? R - L + 1 - 2 * ans - 1\n                       : R - L + 1 - 2 * ans); // Returning the number of non-prime\n                                               // numbers between L and R\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def Count(self, L, R):\n        # initializing a boolean list to store whether a number is prime or not\n        prime = [True] * (R + 1)\n        # setting the first two numbers (0 and 1) as not prime\n        prime[0], prime[1] = False, False\n        i = 2\n        # iterating from 2 to the square root of R to find prime numbers\n        while i * i <= R:\n            if prime[i]:\n                # marking all multiples of the current number as not prime\n                for j in range(i * i, R + 1, i):\n                    prime[j] = False\n            i += 1\n\n        ans = 0\n        # counting the number of prime numbers between L and R (inclusive)\n        for i in range(L, R + 1):\n            if (prime[i]):\n                ans += 1\n        # calculating the number of non-prime numbers between L and R (inclusive)\n        if L == 1:\n            return R - L + 1 - 2 * ans - 1\n        else:\n            return R - L + 1 - 2 * ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number} L\n * @param {number} R\n * @returns {number}\n */\n\nclass Solution {\n    // Function to count the numbers between L and R (both inclusive) having a given\n    // frequency.\n    Count(L, R) {\n        // initializing a boolean list to store whether a number is prime or not\n        let prime = new Array(R + 1).fill(true);\n        // setting the first two numbers (0 and 1) as not prime\n        prime[0] = prime[1] = false;\n        let i = 2;\n        // iterating from 2 to the square root of R to find prime numbers\n        while (i * i <= R) {\n            if (prime[i]) {\n                // marking all multiples of the current number as not prime\n                for (let j = i * i; j <= R; j += i) {\n                    prime[j] = false;\n                }\n            }\n            i++;\n        }\n\n        let ans = 0;\n        // counting the number of prime numbers between L and R (inclusive)\n        for (let i = L; i <= R; i++) {\n            if (prime[i]) {\n                ans++;\n            }\n        }\n        // calculating the number of non-prime numbers between L and R (inclusive)\n        if (L === 1) {\n            return R - L + 1 - 2 * ans - 1;\n        } else {\n            return R - L + 1 - 2 * ans;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}