{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704769,
            "title": "Composite Series",
            "titleSlug": "composite-series1258",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>N</strong>, print all the composite numbers less than or equal to N. The number should be printed in ascending order.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 10\r\n<strong>Output:</strong> 4, 6, 8, 9, 10\r\n<strong>Explaination:</strong> From 1 to 10 these are \r\nthe only composite numbers.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 6\r\n<strong>Output:</strong> 4, 6\r\n<strong>Explaination:</strong> From 1 to 6 these are \r\nthe only composite numbers.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>compositeNumbers()</strong> which takes N as input parameters and returns a list containing all the composite numbers from 1 to N.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N* sqrt(N))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n4 &le; N &le; 10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer N, find all composite numbers less than or equal to N. Return the composite numbers in ascending order.",
                "constraints": [
                    "4 <= N <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "4, 6, 8, 9, 10",
                        "explanation": "The composite numbers between 1 and 10 (inclusive) are 4, 6, 8, 9, and 10."
                    },
                    {
                        "input": "6",
                        "output": "4, 6",
                        "explanation": "The composite numbers between 1 and 6 (inclusive) are 4 and 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A composite number is a number which has factors other than 1 and the number itself.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to find composite numbers up to N.\n    vector<int> compositeNumbers(int N){\n        vector<int> val;\n\n        //iterating from 1 to N.\n        for(int i = 1;i <= N;i++){\n            \n            //iterating from 2 to square root of current number i.\n            for(int j = 2;j <= sqrt(i);j++){\n                //if i is divisible by j, it is a composite number.\n                if(i%j == 0){\n                    //adding the composite number to the vector.\n                    val.push_back(i);\n                    //breaking the loop as we found a divisor of i.\n                    break;\n                }\n            }\n        }\n        return val; //returning the vector of composite numbers.\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution{\n    // Function to find and return the list of composite numbers up to N\n    static List<Integer> compositeNumbers(int N)\n    {\n        // Create a list to store the composite numbers\n        List<Integer> val = new ArrayList<Integer>();\n        \n        // Iterate from 1 to N\n        for(int i = 1;i <= N;i++){\n            // Iterate from 2 to square root of i\n            // to check if i is divisible by any number\n            for(int j = 2;j*j <= i;j++){\n                // If i is divisible by j, add it to the list\n                if(i%j == 0){\n                    val.add(i);\n                    // Break the loop since i is already determined to be composite\n                    break;\n                }\n            }\n        }\n        \n        // Return the list of composite numbers\n        return val;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}