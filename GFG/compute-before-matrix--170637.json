{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710023,
            "title": "Compute Before Matrix",
            "titleSlug": "compute-before-matrix--170637",
            "content": "<p><span style=\"font-size:18px\">For a given 2D Matrix&nbsp;<strong>before,</strong>&nbsp;the corresponding cell (x, y) of the <strong>after</strong> matrix is calculated as follows:&nbsp;</span></p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">\r\n<pre>\r\n<span style=\"font-size:18px\">res = 0;\r\nfor(i = 0; i &lt;= x; i++){\r\n    for( j = 0; j &lt;= y; j++){\\t\\t  \r\n&nbsp;\\t res += before(i,j);\r\n    }\r\n}\r\nafter(x,y) = res;\r\n</span></pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\">Given an&nbsp;<strong>N*M&nbsp;</strong>2D-Matrix&nbsp;<strong>after,</strong>&nbsp;your task is to find the corresponding&nbsp;<strong>before&nbsp;</strong>matrix for the given matrix.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 2, M = 3\r\nafter[][] = {{1, 3, 6},\r\n&nbsp;\\t     {3, 7, 11}}\r\n<strong>Output:</strong>\r\n1 2 3\r\n2 2 1\r\n<strong>Explanation:</strong>\r\nThe before matrix for the given after matrix\r\nmatrix is {{1, 2, 3}, {2, 2, 1}}.\r\nReason:\r\nAccording to the code given in problem,\r\n</span><span style=\"font-size:18px\">after(0,0) = before(0,0) = 1\r\nafter(0,1) = before(0,0) + before(0,1)\r\n= 1 + 2 = 3.\r\nafter(0, 2) = before(0,0) + before(0, 1)\r\n+ before(0, 2) = 1 + 2 + 3 = 6.\r\nSimilarly we can calculate values for every\r\ncell of the after matrix.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 1, M = 3\r\nafter[][] = {{1, 3, 5}}\r\n<strong>Output:</strong>\r\n1 2 2\r\n<strong>Explanation: </strong>\r\nThe before matrix for the given after matrix\r\nis {{1, 2, 2}}.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nComplete the function <strong>c</strong><strong>omputeBeforeMatrix() </strong>which takes the integers <strong>N</strong>, <strong>M,&nbsp;</strong>and the 2D Matrix&nbsp;<strong>after</strong>&nbsp;as the input parameters, and returns the before matrix of the given after matrix.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*M)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N, M, after[i][j]&nbsp; &le;&nbsp; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Each cell&nbsp;of the after matrix should store&nbsp;the prefix sum of the submatrix.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "dunzo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    // Function to compute the Before matrix\n    vector<vector<int>> computeBeforeMatrix(int N, int M, vector<vector<int>> after){\n        \n        // Iterating through each element in reverse order\n        for(int i=N-1; i>=0;i--){\n            for(int j=M-1;j>=0;j--){\n                \n                // Subtracting the value from the previous row\n                if(i){\n                    after[i][j]-=after[i-1][j];\n                } \n                \n                // Subtracting the value from the previous column\n                if(j){\n                    after[i][j]-=after[i][j-1];\n                } \n                \n                // Adding back the value from the diagonal element\n                if(i&&j){\n                    after[i][j]+=after[i-1][j-1];\n                }\n            }\n            \n        }\n        return after;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    \r\n    // Function to compute the \"before\" matrix based on the \"after\" matrix.\r\n    public int[][] computeBeforeMatrix(int N, int M, int[][] after){\r\n    \r\n        // Looping through each element of the \"after\" matrix in reverse order.\r\n        for(int i=N-1; i>=0;i--){\r\n            for(int j=M-1;j>=0;j--){\r\n                \r\n                // Subtracting the value of element above from the current element if i > 0.\r\n                if(i>0){\r\n                    after[i][j]-=after[i-1][j];\r\n                } \r\n                \r\n                // Subtracting the value of element left from the current element if j > 0.\r\n                if(j>0){\r\n                    after[i][j]-=after[i][j-1];\r\n                } \r\n                \r\n                // Adding the value of element top-left from the current element if i > 0 and j > 0.\r\n                if(i>0 && j>0){\r\n                    after[i][j]+=after[i-1][j-1];\r\n                }\r\n            }\r\n            \r\n        }\r\n        \r\n        // Returning the modified \"after\" matrix.\r\n        return after;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def computeBeforeMatrix(self, N, M, after):\r\n       \r\n        for i in range(N-1,-1,-1):\r\n            for  j in range(M-1,-1,-1):\r\n                \r\n                if(i):\r\n                    after[i][j]-=after[i-1][j]\r\n                if(j):\r\n                    after[i][j]-=after[i][j-1]\r\n                \r\n                if(i and j):\r\n                    after[i][j]+=after[i-1][j-1]\r\n            \r\n        return after\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution{\n    //Complete this function\n    //Function to compute the before matrix based on the after matrix.\n    public List<List<int>> computeBeforeMatrix(int N, int M, List<List<int>> after){\n        //Iterating through each element in reverse order\n        for(int i=N-1; i>=0;i--){\n            for(int j=M-1;j>=0;j--){\n                \n                // Subtracting the value from the previous row\n                if(i>0){\n                    after[i][j]-=after[i-1][j];\n                } \n                \n                // Subtracting the value from the previous column\n                if(j>0){\n                    after[i][j]-=after[i][j-1];\n                } \n                \n                // Adding back the value from the diagonal element\n                if(i>0 && j>0){\n                    after[i][j]+=after[i-1][j-1];\n                }\n            }\n            \n        }\n        return after;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}