{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703784,
            "title": "Compute sum of digits in all numbers from 1 to n",
            "titleSlug": "compute-sum-of-digits-in-all-numbers-from-1-to-n2855",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>N</strong>, find the total sum of digits of all the numbers from <strong>1</strong> to <strong>N</strong>.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\n<strong>Output:</strong>\n15\n<strong>Explanation:</strong>\nSum of digits of number from 1 to 5:\n1 + 2 + 3 + 4 + 5 = 15</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 12\n<strong>Output</strong>\n51</span>\n<strong><span style=\"font-size:18px\">Explanation:\n</span></strong><span style=\"font-size:18px\">Sum of all digits from 1 to 12 is:\n1+2+3+4+5+6+7+8+9+(1+0)+(1+1)+(1+2) = 51</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>sumOfDigits()</strong>&nbsp;which takes an integer <strong>N</strong>&nbsp;as input parameter&nbsp;and returns the total sum of digits of all the numbers from 1 to N.&nbsp;</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(D<sup>2</sup>) (D is the number of digits in N)<br />\n<strong>Expected Space Complexity:</strong> O(D) (D is the number of digits in N)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;= N &lt;=1000000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N, find the sum of the digits of all numbers from 1 to N.",
                "constraints": [
                    "1 <= N <= 1000000"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "15",
                        "explanation": "The sum of digits from 1 to 5 is: 1 + 2 + 3 + 4 + 5 = 15"
                    },
                    {
                        "input": "12",
                        "output": "51",
                        "explanation": "The sum of digits from 1 to 12 is: 1+2+3+4+5+6+7+8+9+(1+0)+(1+1)+(1+2) = 51"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find the sum of all the digits occurring at one&#39;s place, tens place, hundreds place&nbsp;and so on.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    int sumOfDigits(int N){\n        // base case: if n<10 return sum of\n        // first n natural numbers\n        if (N<10)\n            return N*(N+1)/2;\n        \n        // d = number of digits minus one in n. For 328, d is 2\n        int d = log10(N);\n        \n        // computing sum of digits from 1 to 10^d-1,\n        // d=1 a[0]=0;\n        // d=2 a[1]=sum of digit from 1 to 9 = 45\n        // d=3 a[2]=sum of digit from 1 to 99 = a[1]*10 + 45*10^1 = 900\n        // d=4 a[3]=sum of digit from 1 to 999 = a[2]*10 + 45*10^2 = 13500\n        int a[d+1];\n        a[0] = 0, a[1] = 45;\n        for (int i=2; i<=d; i++)\n            a[i] = a[i-1]*10 + 45*ceil(pow(10,i-1));\n        \n        // computing 10^d\n        int p = ceil(pow(10, d));\n        \n        // Most significant digit (msd) of n,\n        // For 328, msd is 3 which can be obtained using 328/100\n        int msd = N/p;\n        \n        // EXPLANATION FOR FIRST and SECOND TERMS IN BELOW LINE OF CODE\n        // First two terms compute sum of digits from 1 to 299\n        // (sum of digits in range 1-99 stored in a[d]) +\n        // (sum of digits in range 100-199, can be calculated as 1*100 + a[d]\n        // (sum of digits in range 200-299, can be calculated as 2*100 + a[d]\n        //  The above sum can be written as 3*a[d] + (1+2)*100\n        \n        // EXPLANATION FOR THIRD AND FOURTH TERMS IN BELOW LINE OF CODE\n        // The last two terms compute sum of digits in number from 300 to 328\n        // The third term adds 3*29 to sum as digit 3 occurs in all numbers \n        //                from 300 to 328\n        // The fourth term recursively calls for 28\n        return msd*a[d] + (msd*(msd-1)/2)*p +  \n           msd*(1+N%p) + sumOfDigits(N%p); \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    static int sumOfDigits(int N){\n        // base case: if n<10 return sum of \n        // first n natural numbers \n        if (N < 10) \n          return (N * (N + 1) / 2); \n       \n        // d = number of digits minus one in \n        // n. For 328, d is 2 \n        int d = (int)(Math.log10(N)); \n       \n        // computing sum of digits from 1 to 10^d-1, \n        // d=1 a[0]=0; \n        // d=2 a[1]=sum of digit from 1 to 9 = 45 \n        // d=3 a[2]=sum of digit from 1 to 99 =  \n        // a[1]*10 + 45*10^1 = 900 \n        // d=4 a[3]=sum of digit from 1 to 999 = \n        // a[2]*10 + 45*10^2 = 13500 \n        int a[] = new int[d+1]; \n        a[0] = 0; a[1] = 45; \n        for (int i = 2; i <= d; i++) \n            a[i] = a[i-1] * 10 + 45 *  \n                 (int)(Math.ceil(Math.pow(10, i-1))); \n       \n        // computing 10^d \n        int p = (int)(Math.ceil(Math.pow(10, d))); \n       \n        // Most significant digit (msd) of n, \n        // For 328, msd is 3 which can be obtained \n        // using 328/100 \n        int msd = N/ p; \n       \n        // EXPLANATION FOR FIRST and SECOND TERMS IN \n        // BELOW LINE OF CODE \n        // First two terms compute sum of digits from \n        // 1 to 299  \n        // (sum of digits in range 1-99 stored in a[d]) + \n        // (sum of digits in range 100-199, can be  \n        // calculated as 1*100 + a[d] \n        // (sum of digits in range 200-299, can be  \n        // calculated as 2*100 + a[d] \n        //  The above sum can be written as 3*a[d] +  \n        // (1+2)*100 \n       \n        // EXPLANATION FOR THIRD AND FOURTH TERMS IN  \n        // BELOW LINE OF CODE \n        // The last two terms compute sum of digits in  \n        // number from 300 to 328. The third term adds \n        // 3*29 to sum as digit 3 occurs in all numbers  \n        // from 300 to 328. The fourth term recursively \n        // calls for 28 \n        return (msd * a[d] + (msd * (msd - 1) / 2) * p +   \n              msd * (1 + N % p) + sumOfDigits(N % p)); \n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nimport math\nclass Solution:\n    def sumOfDigits (self,N):\n        # base case: if n<10 return sum of \n        # first n natural numbers \n        if (N<10) : \n            return (N*(N+1)//2) \n        \n        # d = number of digits minus one in n. \n        # For 328, d is 2 \n        d = (int)(math.log10(N)) \n        \n        \"\"\"computing sum of digits from 1 to 10^d-1, \n        d=1 a[0]=0; \n        d=2 a[1]=sum of digit from 1 to 9 = 45 \n        d=3 a[2]=sum of digit from 1 to 99 = a[1]*10  \n        + 45*10^1 = 900 \n        d=4 a[3]=sum of digit from 1 to 999 = a[2]*10  \n        + 45*10^2 = 13500\"\"\"\n        a = [0] * (d + 1) \n        a[0] = 0\n        a[1] = 45\n        for i in range(2, d+1) : \n            a[i] = a[i-1] * 10 + 45 * (int)(math.ceil(math.pow(10,i-1))) \n        \n        # computing 10^d \n        p = (int)(math.ceil(math.pow(10, d))) \n        \n        # Most significant digit (msd) of n, \n        # For 328, msd is 3 which can be obtained \n        # using 328/100 \n        msd = N//p \n        \n        \"\"\"EXPLANATION FOR FIRST and SECOND TERMS IN \n        BELOW LINE OF CODE \n        First two terms compute sum of digits from 1 to 299 \n        (sum of digits in range 1-99 stored in a[d]) + \n        (sum of digits in range 100-199, can be calculated  \n        as 1*100 + a[d]. (sum of digits in range 200-299, \n        can be calculated as 2*100 + a[d] \n        The above sum can be written as 3*a[d] + (1+2)*100 \n        \n        EXPLANATION FOR THIRD AND FOURTH TERMS IN BELOW \n        LINE OF CODE \n        The last two terms compute sum of digits in number \n        from 300 to 328. The third term adds 3*29 to sum \n        as digit 3 occurs in all numbers from 300 to 328. \n        The fourth term recursively calls for 28\"\"\"\n        return (int)(msd * a[d] + (msd*(msd-1) // 2) * p +  \n               msd * (1 + N % p) + self.sumOfDigits(N % p)) ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to find sum of digits of a number.\n    sumOfDigits(N)\n    {\n        // base case: if n<10 return sum of \n        // first n natural numbers \n        if (N<10) { \n            return (N*(N+1)/2); \n        }\n        \n        // d = number of digits minus one in n. \n        // For 328, d is 2 \n        let d = Math.floor(Math.log10(N));\n        \n        /**computing sum of digits from 1 to 10^d-1, \n        d=1 a[0]=0; \n        d=2 a[1]=sum of digit from 1 to 9 = 45 \n        d=3 a[2]=sum of digit from 1 to 99 = a[1]*10  \n        + 45*10^1 = 900 \n        d=4 a[3]=sum of digit from 1 to 999 = a[2]*10  \n        + 45*10^2 = 13500*/\n        let a = new Array(d+1);\n        a[0] = 0;\n        a[1] = 45;\n        for (let i = 2; i <= d; i++) { \n            a[i] = a[i-1] * 10 + 45 * Math.ceil(Math.pow(10, i-1));\n        }\n        \n        // computing 10^d \n        let p = Math.ceil(Math.pow(10, d));\n        \n        // Most significant digit (msd) of n,\n        // For 328, msd is 3 which can be obtained \n        // using 328/100 \n        let msd = Math.floor(N/p);\n        \n        /**EXPLANATION FOR FIRST and SECOND TERMS IN \n        BELOW LINE OF CODE \n        First two terms compute sum of digits from 1 to 299 \n        (sum of digits in range 1-99 stored in a[d]) + \n        (sum of digits in range 100-199, can be calculated  \n        as 1*100 + a[d]. (sum of digits in range 200-299, \n        can be calculated as 2*100 + a[d] \n        The above sum can be written as 3*a[d] + (1+2)*100 \n        \n        EXPLANATION FOR THIRD AND FOURTH TERMS IN BELOW \n        LINE OF CODE \n        The last two terms compute sum of digits in number \n        from 300 to 328. The third term adds 3*29 to sum \n        as digit 3 occurs in all numbers from 300 to 328. \n        The fourth term recursively calls for 28*/\n        return (msd * a[d] + (msd*(msd-1) / 2) * p +  \n               msd * (1 + N % p) + this.sumOfDigits(N % p));\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int sumOfDigits(int N)\n    {\n        // base case: if n<10 return sum of\n        // first n natural numbers\n        if (N<10)\n            return N*(N+1)/2;\n        \n        // d = number of digits minus one in n. For 328, d is 2\n        int d = (int)Math.Log10(N);\n        \n        // computing sum of digits from 1 to 10^d-1,\n        // d=1 a[0]=0;\n        // d=2 a[1]=sum of digit from 1 to 9 = 45\n        // d=3 a[2]=sum of digit from 1 to 99 = a[1]*10 + 45*10^1 = 900\n        // d=4 a[3]=sum of digit from 1 to 999 = a[2]*10 + 45*10^2 = 13500\n        int[] a = new int[d+1];\n        a[0] = 0; \n        a[1] = 45;\n        for (int i=2; i<=d; i++)\n            a[i] = a[i-1]*10 + 45*(int)Math.Ceiling(Math.Pow(10,i-1));\n        \n        // computing 10^d\n        int p = (int)Math.Ceiling(Math.Pow(10, d));\n        \n        // Most significant digit (msd) of n,\n        // For 328, msd is 3 which can be obtained using 328/100\n        int msd = N/p;\n        \n        // EXPLANATION FOR FIRST and SECOND TERMS IN BELOW LINE OF CODE\n        // First two terms compute sum of digits from 1 to 299\n        // (sum of digits in range 1-99 stored in a[d]) +\n        // (sum of digits in range 100-199, can be calculated as 1*100 + a[d]\n        // (sum of digits in range 200-299, can be calculated as 2*100 + a[d]\n        //  The above sum can be written as 3*a[d] + (1+2)*100\n        \n        // EXPLANATION FOR THIRD AND FOURTH TERMS IN BELOW LINE OF CODE\n        // The last two terms compute sum of digits in number from 300 to 328\n        // The third term adds 3*29 to sum as digit 3 occurs in all numbers \n        //                from 300 to 328\n        // The fourth term recursively calls for 28\n        return msd*a[d] + (msd*(msd-1)/2)*p +  \n           msd*(1+N%p) + sumOfDigits(N%p); \n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}