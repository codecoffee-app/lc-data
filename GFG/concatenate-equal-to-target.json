{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710018,
            "title": "Concatenate Equal to Target",
            "titleSlug": "concatenate-equal-to-target",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of&nbsp;<strong>digit</strong>&nbsp;strings&nbsp;<code>nums</code>&nbsp;and a&nbsp;<strong>digit</strong>&nbsp;string&nbsp;<code>target</code>, return&nbsp;the number of pairs of indices&nbsp;<code>(i,j)</code><em>&nbsp;</em>(where&nbsp;<code>i != j</code>) such that the&nbsp;<strong>concatenation</strong>&nbsp;of&nbsp;<code>nums[i] + nums[j]</code>&nbsp;equals&nbsp;<strong><code>target.</code></strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong><code>Note:</code></strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">nums[i] &amp; target consists of digits</span></li>\n<li><span style=\"font-size: 18px;\">nums[i] &amp; target do not have leading zeros.</span></li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 4 \n<code>nums</code>[] = {\"1\",\"212\",\"12\",\"12\"} target = \"1212\" <strong>Output:</strong> 3 <strong>Explanation:</strong> We can obtain target = \"1212\" by concatenating: <code>nums</code>[0] = \"1\" with <code>nums</code>[1] = \"212\" <code>nums</code>[2] = \"12\" with <code>nums</code>[3] = \"12\" <code>nums</code>[3] = \"12\" with <code>nums</code>[2] = \"12\" </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>\nN = 3\n<code>nums</code>[] = {\"11\",\"11\",\"110\"} target = \"11011\" <strong>Output:</strong> 2 <strong>Explanation: </strong>We can obtain target = \"11011\" by concatenating: <code>nums</code>[2] = \"110\" with <code>nums</code>[0] = \"11\" <code>nums</code>[2] = \"110\" with <code>nums</code>[1] = \"11\"</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 3:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>\nN = 3\n<code>nums</code>[] = {\"1\",\"1\",\"1\"} target = \"11\" <strong>Output:</strong> 6 <strong>Explanation: </strong>We can obtain target = \"11\" by concatenating: <code>nums</code>[0] = \"1\" with <code>nums</code>[1] = \"1\" <code>nums</code>[1] = \"1\" with <code>nums</code>[0] = \"1\" <code>nums</code>[0] = \"1\" with <code>nums</code>[2] = \"1\" <code>nums</code>[2] = \"1\" with <code>nums</code>[0] = \"1\" <code>nums</code>[1] = \"1\" with <code>nums</code>[2] = \"1\" <code>nums</code>[2] = \"1\" with <code>nums</code>[1] = \"1\"</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>countPairs()&nbsp;</strong>which takes<strong>&nbsp;</strong>the integer&nbsp;<strong>N,&nbsp;</strong>the string&nbsp;<strong>target</strong>&nbsp;and the string array&nbsp;<strong>nums[]&nbsp;</strong>as the input parameters and returns the number of pairs which satisfies the above condition.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; N&nbsp;&le; 10<sup>5</sup><br />1 &le; nums[]&nbsp;&le; 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">2 &le; target &le; 10<sup>5</sup></span><br />&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of digit strings `nums` and a digit string `target`, determine the number of pairs of indices `(i, j)` (where `i != j`) such that the concatenation of `nums[i] + nums[j]` equals `target`.\n\n**Note:**\n\n*   `nums[i]` and `target` consist of digits.\n*   `nums[i]` and `target` do not have leading zeros.",
                "constraints": [
                    "2 <= N <= 10^5",
                    "1 <= length of nums[i] <= 10^5",
                    "2 <= length of target <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nnums[] = {\"1\",\"212\",\"12\",\"12\"}\ntarget = \"1212\"",
                        "output": "3",
                        "explanation": "The target \"1212\" can be formed by concatenating:\n\n*   nums[0] = \"1\" with nums[1] = \"212\"\n*   nums[2] = \"12\" with nums[3] = \"12\"\n*   nums[3] = \"12\" with nums[2] = \"12\""
                    },
                    {
                        "input": "N = 3\nnums[] = {\"11\",\"11\",\"110\"}\ntarget = \"11011\"",
                        "output": "2",
                        "explanation": "The target \"11011\" can be formed by concatenating:\n\n*   nums[2] = \"110\" with nums[0] = \"11\"\n*   nums[2] = \"110\" with nums[1] = \"11\""
                    },
                    {
                        "input": "N = 3\nnums[] = {\"1\",\"1\",\"1\"}\ntarget = \"11\"",
                        "output": "6",
                        "explanation": "The target \"11\" can be formed by concatenating:\n\n*   nums[0] = \"1\" with nums[1] = \"1\"\n*   nums[1] = \"1\" with nums[0] = \"1\"\n*   nums[0] = \"1\" with nums[2] = \"1\"\n*   nums[2] = \"1\" with nums[0] = \"1\"\n*   nums[1] = \"1\" with nums[2] = \"1\"\n*   nums[2] = \"1\" with nums[1] = \"1\""
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to concatenate every two different strings from the list.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Map",
                "slug": "map"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n     int countPairs(int N, vector<string> &nums, string target) {\r\n        unordered_map<string  , int> allNums;\r\n        for(string i : nums){\r\n            allNums[i]++;\r\n        }\r\n\r\n        int ans = 0;\r\n\r\n        for(int i = 1; i < target.length(); i++){\r\n            string s1 = target.substr(0 , i);\r\n            string s2 = target.substr(i , target.length() - i);\r\n\r\n            if(allNums.find(s1) != allNums.end() && allNums.find(s2) != allNums.end()){\r\n                if(s1 != s2){\r\n                    ans += (allNums[s1] * allNums[s2]);\r\n                } else {\r\n                    ans += (allNums[s1] * (allNums[s2] - 1));\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        return ans;\r\n    }\r\n}; ",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int countPairs(int N, String[] nums, String target) {\r\n        //Create a HashMap to store the count of all numbers\r\n        HashMap<String, Integer> allNums = new HashMap<>();\r\n\r\n        //Iterate through the nums array and count the occurrences of each number\r\n        for (String i : nums) {\r\n            if (allNums.containsKey(i)) {\r\n                allNums.put(i, allNums.get(i) + 1);\r\n            } else {\r\n                allNums.put(i, 1);\r\n            }\r\n        }\r\n\r\n        //Initialize a variable to store the final answer\r\n        int ans = 0;\r\n\r\n        //Iterate through the target string and split it into two parts\r\n        for (int i = 1; i < target.length(); i++) {\r\n            String s1 = target.substring(0, i);\r\n            String s2 = target.substring(i, target.length());\r\n\r\n            //Check if both parts exist in the HashMap\r\n            if (allNums.containsKey(s1) && allNums.containsKey(s2)) {\r\n                //If the two parts are different, add the product of their counts to the answer\r\n                if (!s1.equals(s2)) {\r\n                    ans += (allNums.get(s1) * allNums.get(s2));\r\n                } else {\r\n                    //If the two parts are the same, add the product of their counts minus 1 to the answer\r\n                    ans += (allNums.get(s1) * (allNums.get(s2) - 1));\r\n                }\r\n            }\r\n        }\r\n\r\n        //Return the final answer\r\n        return ans;\r\n\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "\r\nfrom typing import List\r\nfrom collections import defaultdict\r\n\r\nclass Solution:\r\n    def countPairs(self, N: int, nums: List[str], target: str) -> int:\r\n        allNums = defaultdict(int)\r\n        for i in nums:\r\n            allNums[i] += 1\r\n\r\n        ans = 0\r\n\r\n        for i in range(1, len(target)):\r\n            s1 = target[0:i]\r\n            s2 = target[i:len(target)]\r\n\r\n            if s1 in allNums and s2 in allNums:\r\n                if s1 != s2:\r\n                    ans += (allNums[s1] * allNums[s2])\r\n                else:\r\n                    ans += (allNums[s1] * (allNums[s2] - 1))\r\n\r\n        return ans\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {string[]} nums\n * @param {string} target\n * @returns {number}\n */\n\nclass Solution {\n    //Function to count the pairs of strings which are equal to the given target\n    countPairs(N, nums, target) {\n        let allNums = {};\n        for (let i = 0; i < nums.length; i++) {\n            if (allNums[nums[i]]) {\n                allNums[nums[i]] += 1;\n            } else {\n                allNums[nums[i]] = 1;\n            }\n        }\n\n        let ans = 0;\n\n        for (let i = 1; i < target.length; i++) {\n            let s1 = target.substring(0, i);\n            let s2 = target.substring(i, target.length);\n\n            if (allNums[s1] && allNums[s2]) {\n                if (s1 !== s2) {\n                    ans += (allNums[s1] * allNums[s2]);\n                } else {\n                    ans += (allNums[s1] * (allNums[s2] - 1));\n                }\n            }\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}