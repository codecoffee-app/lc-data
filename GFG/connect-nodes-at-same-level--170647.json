{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713966,
            "title": "Connect Nodes at Same Level",
            "titleSlug": "connect-nodes-at-same-level--170647",
            "content": "<div class=\"entry-content\">\n<p><span style=\"font-size: 18px;\">Given a binary tree, connect the nodes that are at the same level. The structure of the tree Node contains&nbsp;an addition&nbsp;nextRight&nbsp;pointer for this purpose.</span></p>\n<p><span style=\"font-size: 18px;\">Initially, all the nextRight pointers point to garbage values. Your&nbsp;should set these pointers to point next right for each node.</span><br /><br /><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 10 ------&gt; NULL<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; / \\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\<br />&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; &nbsp;&nbsp;&nbsp; 3 ------&gt; 5 --------&gt; NULL<br />&nbsp;&nbsp;&nbsp; / \\&nbsp; &nbsp;&nbsp; \\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; /&nbsp; \\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\<br />&nbsp;&nbsp; 4&nbsp;&nbsp; 1&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; 4 --&gt; 1 -----&gt; 2 -------&gt; NULL</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>The generated output will contain 2 lines. First line contains the level order traversal of the tree and second line contains the inorder traversal of the tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [3, 1, 2]\n     3\n&nbsp;  /  \\\n&nbsp; 1    2\n<strong>Output:\n</strong>[3, 1, 2]\n[1, 3, 2]<strong>\nExplanation: </strong>The connected tree is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3 ------&gt; NULL\n&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp; \\\n&nbsp;&nbsp;  1---&gt; 2 -----&gt; NULL</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [10, 20, 30, 40, 60]\n\\t10\n&nbsp;   /   \\\n&nbsp;  20   30\n&nbsp; /  \\\n 40  60\n<strong>Output:\n</strong>[10, 20, 30, 40, 60]\n[40, 20, 60, 10, 30]<strong>\nExplanation: </strong>The connected tree is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10 ---&gt; NULL\n&nbsp;&nbsp;&nbsp;  &nbsp; /&nbsp;&nbsp;&nbsp;\\\n&nbsp;&nbsp;&nbsp;&nbsp; 20---&gt; 30 ---&gt; NULL\n&nbsp;&nbsp; /&nbsp;&nbsp; \\\n&nbsp;40---&gt; 60 ---&gt; NULL</span></pre>\n<p><strong style=\"font-size: 18px;\">Constraints:</strong></p>\n</div>\n<p><span style=\"font-size: 18px;\">1 &le; number of nodes &le; 10<sup>5</sup><br />0 &le; node-&gt;data &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, connect the nodes at the same level using the `nextRight` pointer. Initially, all `nextRight` pointers are set to garbage values. You must set these pointers to point to the next node on the same level, or NULL if it's the last node on that level.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "0 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[3, 1, 2]",
                        "output": "[3, 1, 2]\n[1, 3, 2]",
                        "explanation": "The connected tree has the following structure:\n3 --> NULL\n/  \\\n1 --> 2 --> NULL"
                    },
                    {
                        "input": "[10, 20, 30, 40, 60]",
                        "output": "[10, 20, 30, 40, 60]\n[40, 20, 60, 10, 30]",
                        "explanation": "The connected tree has the following structure:\n10 --> NULL\n/   \\\n20 --> 30 --> NULL\n/  \\\n40 --> 60 --> NULL"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to solve using BFS traversal</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "ola-cabs",
            "oracle",
            "adobe",
            "google",
            "boomerang-commerce",
            "xome"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n  \r\n    public:\r\n    void connect(Node *root)\r\n    {\r\n        // creating queue for level order traversal of tree\r\n        queue <Node*> q;\r\n        q.push(root);\r\n        \r\n        Node* prev=NULL;\r\n        // prev hold the value of previous node on the particular level\r\n        Node* end = root, *nextend;\r\n        // end will hold value of last node of a level\r\n        // and nextend will store the same for the next level\r\n        \r\n        while(!q.empty())\r\n        {\r\n            Node* temp = q.front();\r\n            q.pop();\r\n            if(temp->left) { q.push(temp->left); nextend = temp->left; }\r\n            if(temp->right){ q.push(temp->right); nextend = temp->right; }\r\n            // storing all available nodes and updating nextend\r\n            \r\n            if(prev) prev->nextRight = temp;\r\n            // setting nextRight of previous node of that level\r\n            \r\n            if(temp == end)\r\n            {\r\n                // If we've reached the end of a level, we need to :\r\n                // 1. Set nextRight of the node to NULL\r\n                temp->nextRight = NULL;\r\n                // 2. Make sure that it doesnt get connected to node of next level\r\n                prev = NULL;\r\n                // 3. Set the value of end for next level\r\n                end = nextend;\r\n            }\r\n            // If not at end of a level, we need to make sure that 'prev' gets\r\n            // the address of current node before we move to the next one\r\n            else prev = temp;\r\n        }\r\n    }\r\n    \r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    \r\n    public void connect(Node root)\r\n    {\r\n        // creating queue for level order traversal of tree\r\n        Queue<Node> q = new LinkedList<>(); \r\n        q.add(root);\r\n        \r\n        Node prev=null;\r\n        // prev hold the value of previous node on the particular level\r\n        Node end = root;\r\n        Node nextend = null;\r\n        // end will hold value of last node of a level\r\n        // and nextend will store the same for the next level\r\n        \r\n        while(!q.isEmpty())\r\n        {\r\n            Node temp = q.peek();\r\n            q.poll();\r\n            if(temp.left!=null) { q.add(temp.left); nextend = temp.left; }\r\n            if(temp.right!=null){ q.add(temp.right); nextend = temp.right; }\r\n            // storing all available nodes and updating nextend\r\n            \r\n            if(prev!=null) prev.nextRight = temp;\r\n            // setting nextRight of previous node of that level\r\n            \r\n            if(temp == end)\r\n            {\r\n                // If we've reached the end of a level, we need to :\r\n                // 1. Set nextRight of the node to NULL\r\n                temp.nextRight = null;\r\n                // 2. Make sure that it doesnt get connected to node of next level\r\n                prev = null;\r\n                // 3. Set the value of end for next level\r\n                end = nextend;\r\n            }\r\n            // If not at end of a level, we need to make sure that 'prev' gets\r\n            // the address of current node before we move to the next one\r\n            else prev = temp;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def connect(self, root):\r\n        '''\r\n        :param root: root of the given tree\r\n        :return: none, just connect accordingly.\r\n        '''\r\n        q = [] # our queue to be used\r\n        q.append(root)\r\n    \r\n        while len(q):\r\n            curr_level_size = len(q) # no of nodes in current level\r\n            for i in range(curr_level_size):\r\n                curr_node = q[0]\r\n                if i != curr_level_size-1:     # if this is not the last node at this level, update its nextRight\r\n                    curr_node.nextRight = q[1]\r\n    \r\n                if curr_node.left:  # put left child in queue\r\n                    q.append(curr_node.left)\r\n                if curr_node.right:  # put right child in queue\r\n                    q.append(curr_node.right)\r\n    \r\n                q.pop(0) # pop from queue\r\n\r\n\r\n\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    connect(root) {\n        if (!root) return;\n\n        const queue = [];\n        queue.push(root);\n\n        let prev = null;\n        let end = root;\n        let nextEnd = null;\n\n        while (queue.length > 0) {\n            const temp = queue.shift();\n\n            if (temp.left) {\n                queue.push(temp.left);\n                nextEnd = temp.left;\n            }\n\n            if (temp.right) {\n                queue.push(temp.right);\n                nextEnd = temp.right;\n            }\n\n            if (prev) prev.nextRight = temp;\n\n            if (temp === end) {\n                temp.nextRight = null;\n                prev = null;\n                end = nextEnd;\n            } else {\n                prev = temp;\n            }\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}