{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711972,
            "title": "Connecting the graph",
            "titleSlug": "connecting-the-graph",
            "content": "<p><span style=\"font-size: 18px;\">You are given a graph with <strong>n</strong> vertices (0 to n-1) and <strong>m</strong> edges. </span><span style=\"font-size: 18px;\">You can remove <strong>one</strong> edge from anywhere and add that edge between&nbsp;<strong>any </strong>two vertices in <strong>one </strong>operation. </span><span style=\"font-size: 18px;\">Find the <strong>minimum</strong> number of operations that will be required to connect the graph.<br /></span><span style=\"font-size: 18px;\">If it is not possible to connect the graph, return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong>&nbsp;</span></p>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />n = 4<br />m = 3<br />Edges = [ [0, 1] , [0, 2] , [1, 2] ]<br /><strong>Output:<br /></strong>1<strong><br />Explanation:</strong><br />Remove edge&nbsp;between vertices&nbsp;1 and 2 and add&nbsp;between vertices&nbsp;1 and 3.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />n = 6<br />m = 5<br />Edges = [ [0,1] , [0,2] , [0,3] , [1,2] , [1,3] ]<br /><strong>Output:</strong><br />2<br /><strong>Explanation:</strong><br />Remove edge between (1,2) and(0,3) and add edge between (1,4) and (3,5)</span><br />&nbsp;</pre>\n<p><strong>Your Task:<br /></strong><span style=\"font-size: 18px;\">You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>Solve()</strong>&nbsp;which takes an integer<strong> n</strong> denoting a number of vertices and a 2d matrix denoting the edges of a graph and returns the<strong> minimum</strong> number of operations to connect a graph.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(m*n)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(m*n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1&lt;=n&lt;=10<sup>5</sup><br />0&lt;=m&lt;=10<sup>2</sup><br />1&lt;=edge[i][0],edge[i][1]&lt;=n-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a graph with 'n' vertices (numbered 0 to n-1) and 'm' edges, determine the minimum number of operations to connect the graph. In one operation, you can remove any existing edge and add it between any two vertices. If it is impossible to connect the graph, return -1.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= m <= 10^2",
                    "0 <= edge[i][0], edge[i][1] < n"
                ],
                "testcases": [
                    {
                        "input": "n = 4\nm = 3\nEdges = [ [0, 1] , [0, 2] , [1, 2] ]",
                        "output": "1",
                        "explanation": "The graph consists of one connected component. Removing the edge between vertices 1 and 2 and adding an edge between vertices 1 and 3 will connect all vertices."
                    },
                    {
                        "input": "n = 6\nm = 5\nEdges = [ [0,1] , [0,2] , [0,3] , [1,2] , [1,3] ]",
                        "output": "2",
                        "explanation": "The graph consists of two connected component ({0,1,2,3},{4,5}). Removing an edge between (1,2) and (0,3) and adding edge between (1,4) and (3,5) will connect all vertices."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the concept of Disjoint Set Union.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Disjoint Set",
                "slug": "disjoint-set"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the parent of the current element using path compression technique.\n    int find(int x, vector<int>& par) {\n\n        // If the current element is its own parent, then it is the representative of its set.\n        if (par[x] == x) {\n            return x;\n        }\n        \n        // Recursively find the parent of the current element and update the parent array.\n        int temp = find(par[x], par);\n        par[x] = temp;\n\n        return temp;\n    }\n\n    // Function to find the minimum number of connections required to make a tree.\n    int Solve(int n, vector<vector<int>>& connections) {\n\n        // If the number of edges is less than n-1, then it is not possible to form a tree.\n        if (n - 1 > connections.size()) {\n            return -1;\n        }\n\n        // Initialize the parent array with initial values.\n        vector<int> par(n);\n        for (int i = 0; i < n; i++) {\n            par[i] = i;\n        }\n\n        // Iterate through all the connections.\n        for (auto it : connections) {\n\n            // Find the parent of the two vertices of the current connection.\n            int lx = find(it[0], par);\n            int ly = find(it[1], par);\n\n            // If the two vertices have different parents, then merge the two sets.\n            if (lx != ly) {\n                par[lx] = ly;\n            }\n        }\n        \n        // Count the number of distinct sets after merging.\n        int cnt = 0;\n        for (int i = 0; i < n; i++) {\n            if (par[i] == i) {\n                cnt++;\n            }\n        }\n        \n        // Return the minimum number of connections required to make a tree.\n        return cnt - 1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Find function to find the root of an element in the set\n    int find(int x, int a[]) { return a[x] < 0 ? x : find(a[x], a); }\n    \n    // Solve function to find the minimum edges needed to connect all nodes\n    public int Solve(int n, int[][] e) {\n        int a[] = new int[n];\n        Arrays.fill(a, -1);\n        int available = 0;\n        \n        // Iterate through all edges \n        for (int i = 0; i < e.length; i++) {\n            int p1 = find(e[i][0], a);\n            int p2 = find(e[i][1], a);\n            \n            // Check if the two nodes are already in the same set\n            if (p1 == p2) {\n                available++;\n            } else if (a[p1] < a[p2]) {\n                // Union the two sets by updating the parent and size\n                a[p1] = a[p1] + a[p2];\n                a[p2] = p1;\n                a[e[i][1]] = p1;\n            } else {\n                // Union the two sets by updating the parent and size\n                a[p2] = a[p2] + a[p1];\n                a[p1] = p2;\n                a[e[i][0]] = p2;\n            }\n        }\n        \n        int cnt = 0;\n        // Count the number of sets\n        for (int i = 0; i < n; i++)\n            if (a[i] < 0) cnt++;\n        \n        if (available < cnt - 1) {\n            // Return -1 if the available edges are less than required to connect all nodes\n            return -1;\n        } else {\n            // Return the minimum edges needed to connect all nodes\n            return cnt - 1;\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to find the minimum number of edges needed to connect all nodes.\n    def Solve(self, n, connections):\n        #Function to find the parent of the given node.\n        def find(x):\n            if par[x] == x:\n                return x\n            temp = find(par[x])\n            par[x] = temp\n            return temp\n        \n        #If the number of edges needed is greater than the given connections,\n        #it is impossible to connect all nodes.\n        if (n - 1 > len(connections)):\n            return -1\n        \n        #Initializing the parent array where each node is its own parent.\n        par = [i for i in range(n)]\n        \n        #Iterating over the given connections.\n        for x, y in connections:\n            #Finding the parent of x and y.\n            lx = find(x)\n            ly = find(y)\n            \n            #If the parents are different, connect them by assigning\n            #the parent of lx as ly.\n            if lx != ly:\n                par[lx] = ly\n        \n        #Counting the number of connected components.\n        cnt = 0\n        for i in range(n):\n            if par[i] == i:\n                cnt += 1\n        \n        #Returning the minimum number of edges needed to connect all nodes.\n        return (cnt - 1)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number[][]} adj\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to solve the given problem.\n    Solve(n, adj) {\n        //If the number of edges needed is greater than the given connections,\n        //it is impossible to connect all nodes.\n        if(n - 1 > adj.length) {\n            return -1;\n        }\n        \n        //Function to find the parent of the given node.\n        const find = (x) => {\n            if(par[x] == x) {\n                return x;\n            }\n            let temp = find(par[x]);\n            par[x] = temp;\n            return temp;\n        }\n        \n        //Initializing the parent array where each node is its own parent.\n        let par = new Array(n);\n        for(let i = 0; i < n; i++) {\n            par[i] = i;\n        }\n        \n        //Iterating over the given connections.\n        for(let i = 0; i < adj.length; i++) {\n            let x = adj[i][0];\n            let y = adj[i][1];\n            \n            //Finding the parent of x and y.\n            let lx = find(x);\n            let ly = find(y);\n            \n            //If the parents are different, connect them by assigning\n            //the parent of lx as ly.\n            if(lx != ly) {\n                par[lx] = ly;\n            }\n        }\n        \n        //Counting the number of connected components.\n        let cnt = 0;\n        for(let i = 0; i < n; i++) {\n            if(par[i] == i) {\n                cnt += 1;\n            }\n        }\n        \n        //Returning the minimum number of edges needed to connect all nodes.\n        return (cnt - 1);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}