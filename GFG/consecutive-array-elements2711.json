{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703191,
            "title": "Consecutive Array Elements",
            "titleSlug": "consecutive-array-elements2711",
            "content": "<p><span style=\"font-size: 18px;\">Given an unsorted array&nbsp;<strong>arr</strong>. Find whether the array consists of consecutive numbers or not.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 4, 2, 1, 3]\n<strong>Output:</strong> true\n<strong>Explanation</strong>: All are consecutive elements, according to this order 1, 2, 3, 4 and 5.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [2, 1, 4]\n<strong>Output:</strong> false<br /><strong>Explanation: </strong>All elements are not consecutive.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(n).<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup>1 &le; arr[i] &le; 10<sup>6</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >The sum of consecutive numbers starting from any number is fixed. Take out the sum and array sum and match their value.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n\n  public:\n    bool areConsecutives(vector<int>& arr) {\n        // Find minimum element in array\n        int n = arr.size();\n        long long first_term = *min_element(arr.begin(), arr.end());\n\n        // Calculate AP sum\n        long long ap_sum = (n * (2 * first_term + (n - 1) * 1)) / 2;\n\n        // Calculate given array sum\n        long long arr_sum = 0;\n        for (int i = 0; i < n; i++)\n            arr_sum += arr[i];\n\n        // Compare both sums and return\n        return ap_sum == arr_sum;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean areConsecutives(int[] arr) {\n        int n = arr.length;\n\n        // Find minimum element in array\n        int first_term = Integer.MAX_VALUE;\n        for (int num : arr) {\n            if (num < first_term) {\n                first_term = num;\n            }\n        }\n\n        // Calculate AP sum\n        long ap_sum = (long)n * (2 * first_term + (n - 1)) / 2;\n\n        // Calculate given array sum\n        long arr_sum = 0;\n        for (int num : arr) {\n            arr_sum += num;\n        }\n\n        // Compare both sums and return\n        return ap_sum == arr_sum;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def areConsecutives(self, arr):\n        n = len(arr)\n\n        # Find minimum element in array\n        first_term = min(arr)\n\n        # Calculate AP sum\n        ap_sum = n * (2 * first_term + (n - 1)) // 2\n\n        # Calculate given array sum\n        arr_sum = sum(arr)\n\n        # Compare both sums and return\n        return ap_sum == arr_sum\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    areConsecutives(arr) {\n        let n = arr.length;\n\n        // Find minimum element in array using a loop\n        let first_term = arr[0]; // Initialize with the first element\n        for (let i = 1; i < n; i++) {\n            if (arr[i] < first_term) {\n                first_term = arr[i];\n            }\n        }\n\n        // Calculate the given array sum using a loop\n        let arr_sum = 0;\n        for (let i = 0; i < n; i++) {\n            arr_sum += arr[i];\n        }\n\n        // Calculate AP sum\n        let ap_sum = (n * (2 * first_term + (n - 1))) / 2;\n\n        // Compare both sums and return\n        return ap_sum === arr_sum;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}