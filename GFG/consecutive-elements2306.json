{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702960,
            "title": "Remove Consecutive Characters",
            "titleSlug": "consecutive-elements2306",
            "content": "<p><span >You are given a string <strong>s</strong>, consisting of lowercase alphabets. Your task is to remove consecutive duplicate characters from the string.&nbsp;</span></p>\n<p><span ><strong>Example:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"aabb\"\n<strong>Output:  \"</strong>ab\" \n<strong>Explanation:</strong> <br />The character 'a' at index 2 is the same as 'a' at index 1, so it is removed.\nSimilarly, the character 'b' at index 4 is the same as 'b' at index 3, so it is removed.\nThe final string is \"ab\".\n</span></pre>\n<pre><span ><strong>Input:</strong>s = \"aabaa\"\n<strong>Output: </strong>\"aba\"\n<strong>Explanation:</strong> <br />The character 'a' at index 2 is the same as 'a' at index 1, so it is removed.\nThe character 'a' at index 5 is the same as 'a' at index 4, so it is removed.\nThe final string is \"aba\".</span></pre>\n<pre><span ><strong>Input: </strong>s = \"abcddcba\"\n<strong>Output: </strong>\"abcdcba\"\n<strong>Explanation:</strong> <br />The character 'd' at index 5 is the same as 'd' at index 4, so it is removed.\nNo other consecutive duplicates exist.\nThe final string is \"abcdcba\".</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; n &le;</span><span >&nbsp;10<sup>6</sup><br />All characters in the string are lowercase English alphabets.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use Stack</span></p>",
            "<p><span >Iterate through the string, adding characters to the result only if they differ from the previous one.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string removeConsecutiveCharacter(string& s) {\n        // only entering those elements in stack which are unique consecutively.\n        stack<char> st;\n        for (int i = 0; i < s.length(); i++) {\n            if ((st.empty() == 0 && st.top() != s[i]) || st.empty() == 1)\n                st.push(s[i]);\n        }\n        // storing stack elements in string.\n        string res;\n        while (st.empty() == 0) {\n            res += st.top();\n            st.pop();\n        }\n\n        // reversing the string because stack is a LIFO data structure.\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public String removeConsecutiveCharacter(String s) {\n        // Stack to store unique consecutive characters\n        Stack<Character> st = new Stack<>();\n\n        // Only pushing unique consecutive characters into the stack\n        for (int i = 0; i < s.length(); i++) {\n            if ((st.isEmpty() == false && st.peek() != s.charAt(i)) ||\n                st.isEmpty() == true) {\n                st.push(s.charAt(i));\n            }\n        }\n\n        // Storing stack elements in a StringBuilder (more efficient than String\n        // concatenation)\n        StringBuilder res = new StringBuilder();\n        while (!st.isEmpty()) {\n            res.append(st.pop());\n        }\n\n        // Reversing the string since stack is LIFO (Last In First Out)\n        return res.reverse().toString();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to remove consecutive characters from a string.\n    def removeConsecutiveCharacter(self, s):\n\n        #Initializing an empty stack.\n        st = []\n\n        #Iterating over each character in the given string.\n        for i in range(len(s)):\n\n            #Checking if the stack is empty or the current character\n            #does not match the top element of the stack.\n            if (st and st[-1] != s[i]) or not st:\n\n                #If the conditions are met, we push the current\n                #character to the stack.\n                st.append(s[i])\n\n        #Initializing an empty string.\n        res = ''\n\n        #Popping elements from the stack and appending them\n        #to the result string.\n        while st:\n            res += st.pop()\n\n        #Returning the reversed result string.\n        return res[::-1]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    public string removeConsecutiveCharacter(string s) {\n        if (s.Length == 0) return s;\n\n        StringBuilder res = new StringBuilder();\n        res.Append(s[0]); // Add the first character\n\n        // Traverse the string, adding non-duplicate consecutive characters\n        for (int i = 1; i < s.Length; i++) {\n            if (s[i] != s[i - 1]) {\n                res.Append(s[i]);\n            }\n        }\n\n        return res.ToString();\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {string} s\n * @returns {string}\n*/\n\nclass Solution{\n    removeConsecutiveCharacter(s){\n        let stack = [];\n        for(let i=0;i<s.length;i++){\n            if((stack.length!==0 && stack[stack.length-1]!==s[i]) || stack.length === 0){\n                stack.push(s[i]);\n            }\n        }\n        let res = \"\";\n        while(stack.length!==0){\n            res += stack[stack.length-1];\n            stack.pop();\n        }\n        return res.split(\"\").reverse().join(\"\");\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}