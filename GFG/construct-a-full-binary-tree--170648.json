{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714518,
            "title": "Construct a Full Binary Tree",
            "titleSlug": "construct-a-full-binary-tree--170648",
            "content": "<p style=\"text-align: justify;\"><span style=\"font-size: 18px;\">Given two arrays that represent Preorder traversals of a Full binary tree <strong>preOrder[]</strong> and its mirror tree <strong>preOrderMirror[]</strong>, your task is to complete the function&nbsp;<strong>constructBinaryTree()</strong>, that&nbsp;constructs the full binary tree using these two Preorder traversals.</span></p>\n<p style=\"text-align: justify;\"><span style=\"font-size: 16px;\"><strong>N</strong></span><span style=\"font-size: 18px;\"><strong>ote</strong>: It is not possible to construct a general binary tree using these two traversal. But it is possible to create a full binary tree using the above traversals without any ambiguity.</span></p>\n<p style=\"text-align: justify;\"><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong>\npreOrder[] = {0,1,2}\npreOrderMirror[] = {0,2,1} </span>\n\n<span style=\"font-size: 18px;\"><strong>Output :</strong></span><span style=\"font-size: 18px;\">\n\\t\\t    0\n\\t\\t  /   \\\n\\t\\t 1     2<br /></span><span style=\"font-size: 18px;\"><strong>Explanation :<br /></strong><span >Tree in the output and it's mirror tree matches the </span></span><span >preOrder and preOrderMirror.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong>  \npreOrder[] = {1,2,4,5,3,6,7}\npreOrderMirror[] = {1,3,7,6,2,5,4}\n\n<strong>Output :  </strong>\\t  \n&nbsp;\\t\\t    1\n\\t\\t   /    \\\n\\t\\t  2\\t3\n\\t\\t/   \\   /  \\\n\\t     4     5 6    7<br /></span><strong><span >Explanation :</span><br /></strong><span >Tree in the output and it's mirror tree matches the </span><span >preOrder and preOrderMirror.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">You don't need to read, input, or print anything. Your task is to complete the function&nbsp;<strong>constructBTree</strong><strong>,&nbsp;</strong>The function takes three arguments as input, first the array&nbsp;that represent Preorder traversals of a Full binary tree&nbsp;<strong>preOrder[],&nbsp;</strong>second the array that represents the preorder traversal of<strong>&nbsp;</strong>its mirror tree&nbsp;<strong>preOrderMirror[]&nbsp;</strong>and last the&nbsp;<strong>size</strong>&nbsp;of both the array,and returns root of the full binary tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N^2)<br /><strong>Expected Auxiliary Space:</strong> O(N), where N indicates number of nodes.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 20px;\">1&nbsp;</span><span style=\"font-size: 18px;\">&lt;= Number of Nodes &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `preOrder[]` and `preOrderMirror[]`, representing the Preorder traversals of a Full binary tree and its mirror tree, respectively, construct the full binary tree. Return the root of the constructed binary tree.",
                "constraints": [
                    "1 <= Number of Nodes <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "preOrder[] = {0,1,2}\npreOrderMirror[] = {0,2,1}",
                        "output": "    0\n  /   \\\n 1     2",
                        "explanation": "The constructed tree's pre-order traversal is {0, 1, 2}, and its mirror tree's pre-order traversal is {0, 2, 1}, matching the given input arrays."
                    },
                    {
                        "input": "preOrder[] = {1,2,4,5,3,6,7}\npreOrderMirror[] = {1,3,7,6,2,5,4}",
                        "output": "    1\n   /    \\\n  2    3\n /  \\  /  \\\n4    5 6    7",
                        "explanation": "The constructed tree's pre-order traversal is {1, 2, 4, 5, 3, 6, 7}, and its mirror tree's pre-order traversal is {1, 3, 7, 6, 2, 5, 4}, matching the given input arrays."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">To construct the full binary tree from the preOrder and preOrderMirror arrays, identify the root node from the preOrder array. Then, find the index of the same node in the preOrderMirror array. Divide the arrays based on this index to determine the left and right subtrees. Recursively apply the same process to construct the left and right subtrees.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n  public:\n    //Recursive utility function to construct binary tree from given pre-order traversal and mirror of pre-order traversal\n    Node* constructBinaryTreeUtil(int pre[], int preM[], int &preIndex, int l,int h,int size)\n    {\n        //base cases\n    \tif (preIndex >= size || l > h)\n    \t\treturn NULL;\n\n        //create a new node with the pre-order value at preIndex, and increment preIndex\n    \tNode* root = new Node(pre[preIndex]);\n    \t++(preIndex);\n\n        //if there is only one element, return the root\n    \tif (l == h)\n            return root;\n\n        //find index of the current pre-order value in the mirror pre-order array\n    \tint i;\n    \tfor (i = l; i <= h; ++i)\n            if (pre[preIndex] == preM[i])\n                break;\n\n        //if the value is found, recursively construct the left and right subtrees\n    \tif (i <= h)\n    \t{\n    \t\troot->left = constructBinaryTreeUtil (pre, preM, preIndex, i, h, size);\n    \t\troot->right = constructBinaryTreeUtil (pre, preM, preIndex, l+1, i-1, size);\n    \t}\n    \treturn root; \n    }\n    \n    //Function to construct binary tree from given pre-order traversal and mirror of pre-order traversal\n    Node* constructBinaryTree(int pre[], int preMirror[], int size)\n    {\n        //initialize preIndex and preMIndex to 0\n    \tint preIndex = 0;\n    \tint preMIndex = 0;\n\n    \t//call the utility function to construct the binary tree\n    \tNode *root = constructBinaryTreeUtil(pre, preMirror, preIndex, 0, size-1, size);\n    \t\n        //return the root of the binary tree\n        return root;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    class gfg\r\n    {\r\n       \r\n            int preIndex = 0;\r\n        \r\n    }\r\n    \r\n    public Node constructBTree(int pre[], int preM[], int size)\r\n    {\r\n        gfg r = new gfg();\r\n        Node root = constructBTreeUtil(pre, preM, r, 0, size-1, size);\r\n        \r\n        return root;\r\n    }\r\n    \r\n    public  Node constructBTreeUtil(int pre[], int preM[], gfg r, int l, int h, int size)\r\n    {\r\n        if (r.preIndex >= size || l > h)\r\n\t\treturn null;\r\n    \tNode root = new Node(pre[r.preIndex]);\r\n    \t++(r.preIndex);\r\n    \tif (l == h)\treturn root;\r\n    \tint i;\r\n    \tfor (i = l; i <= h; ++i)\r\n    \tif (pre[r.preIndex] == preM[i])\r\n    \t    break;\r\n    \tif (i <= h)\r\n    \t{\r\n    \t\troot.left = constructBTreeUtil (pre, preM, r, i, h, size);\r\n    \t\troot.right = constructBTreeUtil (pre, preM, r, l+1, i-1, size);\r\n    \t}\r\n\t    return root; \r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}