{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700683,
            "title": "Construct a Full Binary Tree",
            "titleSlug": "construct-a-full-binary-tree",
            "content": "<p style=\"text-align: justify;\"><span style=\"font-size: 20px;\">Given two arrays that represent Preorder traversals of a Full binary tree <strong>preOrder[]</strong> and its mirror tree <strong>preOrderMirror[]</strong>, your task is to complete the function&nbsp;<strong>constructBinaryTree()</strong>, that&nbsp;constructs the full binary tree using these two Preorder traversals.</span></p>\n<p><span style=\"font-size: 20px;\">Examples:</span></p>\n<pre><span style=\"font-size: 18px;\">Input :  preOrder[] = {1,2,4,5,3,6,7}\n\\t   preOrderMirror[] = {1,3,7,6,2,5,4}\n\nOutput :\\t    1\n\\t\\t   /    \\\n\\t\\t  2\\t3\n\\t\\t/   \\   /  \\\n\\t     4     5 6    7</span>\n</pre>\n<p style=\"text-align: justify;\"><span style=\"font-size: 16px;\"><strong>Note</strong>: It is not possible to construct a general binary tree using these two traversal. But it is possible to create a full binary tree using the above traversals without any ambiguity. For more details refer to&nbsp;<a href=\"http://www.geeksforgeeks.org/if-you-are-given-two-traversal-sequences-can-you-construct-the-binary-tree/\">this</a>&nbsp;article.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Input</strong>:<br />The function takes three arguments as input, first the array&nbsp;that represent Preorder traversals of a Full binary tree <strong>preOrder[], </strong>second the array that represents the preorder traversal of<strong>&nbsp;</strong>its mirror tree <strong>preOrderMirror()&nbsp;</strong>and last the <strong>size</strong> of both the array.<br />There will be <strong>T&nbsp;</strong>test cases and for each test case the function will be called separately.<br /><br /><strong>Output:</strong><br />For each test case the function must return the root to the new binary tree formed. Ouput will be the inorder traversal of the binary tree.<br /><br /><strong>Constraints:</strong><br />1&lt;=T&lt;=500<br />1&lt;=N&lt;=10<sup>3</sup><br /><br /><strong>Example:<br />Input:</strong><br />2<br />3<br />0 1 2&nbsp;<br />0 2 1<br />7<br />1 2 4 5 3 6 7<br />1 3 7 6 2 5 4<br /><strong>Output:</strong><br />1 0 2&nbsp;<br />4 2 5 1 6 3 7&nbsp;</span><br />&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the preorder traversal of a full binary tree (`preOrder[]`) and the preorder traversal of its mirror image (`preOrderMirror[]`), construct the original full binary tree.  Return the root of the constructed tree.  The output will be the inorder traversal of the generated binary tree.",
                "constraints": [
                    "1 <= T <= 500 (Number of test cases)",
                    "1 <= N <= 1000 (Size of the arrays preOrder and preOrderMirror)"
                ],
                "testcases": [
                    {
                        "input": "N = 3\npreOrder = [0, 1, 2]\npreOrderMirror = [0, 2, 1]",
                        "output": "1 0 2",
                        "explanation": null
                    },
                    {
                        "input": "N = 7\npreOrder = [1, 2, 4, 5, 3, 6, 7]\npreOrderMirror = [1, 3, 7, 6, 2, 5, 4]",
                        "output": "4 2 5 1 6 3 7",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nNode* constructBinaryTreeUtil(int pre[], int preM[], int &preIndex, int l,int h,int size)\r\n{\r\n\tif (preIndex >= size || l > h)\r\n\t\treturn NULL;\r\n\tNode* root = new Node(pre[preIndex]);\r\n\t++(preIndex);\r\n\tif (l == h)\treturn root;\r\n\tint i;\r\n\tfor (i = l; i <= h; ++i)if (pre[preIndex] == preM[i])break;\r\n\tif (i <= h)\r\n\t{\r\n\t\troot->left = constructBinaryTreeUtil (pre, preM, preIndex, i, h, size);\r\n\t\troot->right = constructBinaryTreeUtil (pre, preM, preIndex, l+1, i-1, size);\r\n\t}\r\n\treturn root; \r\n}\r\n\r\nNode* constructBinaryTree(int pre[], int preMirror[], int size)\r\n{\r\n    // Code here\r\n\tint preIndex = 0;\r\n\tint preMIndex = 0;\r\n\tNode *root = constructBinaryTreeUtil(pre, preMirror, preIndex, 0, size-1, size);\r\n\treturn root;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass GfG\n{\n    //inner class to keep track of preIndex\n    class gfg\n    {\n        int preIndex = 0;\n    }\n    \n    //function to construct binary tree from preorder and preorder mirror arrays\n    public Node constructBTree(int pre[], int preM[], int size)\n    {\n        gfg r = new gfg();\n        Node root = constructBTreeUtil(pre, preM, r, 0, size-1, size);\n        \n        return root;\n    }\n    \n    //recursive function to construct binary tree\n    public  Node constructBTreeUtil(int pre[], int preM[], gfg r, int l, int h, int size)\n    {\n        //base cases\n        if (r.preIndex >= size || l > h)\n            return null;\n        \n        //creating the root node\n        Node root = new Node(pre[r.preIndex]);\n        ++(r.preIndex);\n        \n        //if leaf node, return root\n        if (l == h)\n            return root;\n        \n        int i;\n        //finding the index of root in preorder mirror array\n        for (i = l; i <= h; ++i)\n            if (pre[r.preIndex] == preM[i])\n                break;\n        \n        //if root index is within range, construct left and right subtrees\n        if (i <= h)\n        {\n            root.left = constructBTreeUtil (pre, preM, r, i, h, size);\n            root.right = constructBTreeUtil (pre, preM, r, l+1, i-1, size);\n        }\n        \n        return root; \n    }\n}",
                "lang_text": "java"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}