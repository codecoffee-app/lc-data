{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700571,
            "title": "Construct expression tree",
            "titleSlug": "construct-an-expression-tree",
            "content": "<p><span style=\"font-size:18px\">Given a postfix expression. Your task is to complete the method constructTree(). The output of the program will print the infix expression of the given postfix expression.<br />\r\n<br />\r\n<strong>Input:</strong><br />\r\nThe constructTree() function takes a single argument as input, character array containing the given postfix expression.<br />\r\n<strong>Output:</strong><br />\r\nInfix expression should be printed for each given postfix expression.<br />\r\n<strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=50<br />\r\n1&lt;=length_of_expression&lt;=40<br />\r\n<strong>Example:<br />\r\nInput:</strong><br />\r\n2<br />\r\nab+ef*g*-<br />\r\nwlrb+-*<br />\r\n<strong>Output:</strong><br />\r\na + b - e * f * g<br />\r\nw * l - r + b<br />\r\n<strong>Note:</strong>The <strong>Input/Ouput</strong> format and <strong>Example</strong> given are used for system&#39;s internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a postfix expression, construct an expression tree and return its infix representation. The input is a character array representing the postfix expression. The output should be the infix equivalent of the postfix expression.",
                "constraints": [
                    "1 <= Number of test cases (T) <= 50",
                    "1 <= Length of expression <= 40"
                ],
                "testcases": [
                    {
                        "input": "ab+ef*g*-",
                        "output": "a + b - e * f * g",
                        "explanation": null
                    },
                    {
                        "input": "wlrb+-*",
                        "output": "w * l - r + b",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to construct a binary expression tree from a postfix expression\net* constructTree(char postfix[])\n{\n    stack<et *> st;\n    et *t, *t1, *t2;\n    \n    // Iterating over the characters in the postfix expression\n    for (int i=0; i<strlen(postfix); i++)\n    {\n        // If the character is not an operator, create a new node with the character and push it onto the stack\n        if (!isOperator(postfix[i]))\n        {\n            t = new et(postfix[i]);\n            st.push(t);\n        }\n        // If the character is an operator, pop the top two nodes from the stack, create a new node with the operator as its value,\n        // set the popped nodes as its left and right children, and push the new node back onto the stack\n        else \n        {\n            t = new et(postfix[i]);\n            t1 = st.top(); \n            st.pop();\n            t2 = st.top();\n            st.pop();\n            t->right = t1;\n            t->left = t2;\n            st.push(t);\n        }\n    }\n\n    // Return the root of the binary expression tree\n    t = st.top();\n    st.pop();\n\n    return t;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// The GfG class is used to construct a binary tree from a postfix expression.\nclass GfG {\n    \n    // The constructTree method takes a postfix expression as input and returns the root of the constructed binary tree.\n    public static Node constructTree(char postfix[]) {\n        Stack<Node> st = new Stack<Node>(); // Create a stack to store the nodes of the binary tree.\n        Node t, t1, t2; // Create Node variables to store the nodes extracted from the stack.\n        \n        Construct obj = new Construct(); // Create an instance of the Construct class.\n        for(int i = 0; i < postfix.length; i++) { // Iterate through each character in the postfix expression.\n            if(!obj.isOperator(postfix[i])) // If the character is not an operator, create a new Node and push it onto the stack.\n              {\n                  t = new Node(postfix[i]);\n                  st.push(t);\n              }\n              else // If the character is an operator, pop two Nodes from the stack and create a new Node with the operator as the root and the popped Nodes as its children. Push the new Node onto the stack.\n              {\n                  t = new Node(postfix[i]);\n                  \n                  t1 = st.peek();\n                  st.pop();\n                  \n                  t2 = st.peek();\n                  st.pop();\n                  \n                  t.left = t2;\n                  t.right = t1;\n                  \n                  st.push(t);\n              }\n        }\n        \n        t = st.peek(); // Get the root of the binary tree from the top of the stack.\n        st.pop();\n        \n        return t; // Return the root of the constructed binary tree.\n    }\n    \n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}