{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700180,
            "title": "Construct Binary Tree from Parent Array",
            "titleSlug": "construct-binary-tree-from-parent-array",
            "content": "<p><span style=\"font-size: 18px;\">Given an array<strong> parent</strong> that is used to represent a tree. The array indices (0-based indexing) are the values of the tree nodes and <strong>parent[i] </strong>denotes the parent node of a particular node. The parent of the root node would always be <strong>-1,</strong> as there is no parent for the root. Construct the standard linked representation of Binary Tree from this array representation and </span><span style=\"font-size: 18px;\"><strong>return the root</strong> node of the constructed tree</span><span style=\"font-size: 18px;\">.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note: </span></strong><span style=\"font-size: 18px;\">If two elements have the same parent, the one that appears first in the array will be the left child and the other is the right child. You don't need to print anything, the driver code will print the level order traversal of the returned root node to verify the output.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">parent[] = [-1, 0, 0, 1, 1, 3,5]\n<strong>Output: </strong>0 1 2 3 4 5 6<strong>\nExplanation: </strong>the tree generated\nwill have a structure like \n&nbsp;\\t &nbsp; 0\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  /&nbsp;&nbsp; \\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  1&nbsp;&nbsp;&nbsp;&nbsp; 2\n&nbsp;&nbsp;&nbsp;&nbsp;  / \\\n&nbsp;&nbsp;&nbsp;  3&nbsp;&nbsp; 4\n&nbsp;&nbsp;  /\n&nbsp;  5\n /\n6</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">parent[] = [2, 0, -1]\n<strong>Output: </strong>2 0 1<strong>\nExplanation: </strong>the tree generated will\nhave a structure like\n&nbsp; &nbsp; &nbsp; &nbsp;  &nbsp;&nbsp; &nbsp;2\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;/&nbsp;&nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  0&nbsp;  &nbsp;  \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /&nbsp;&nbsp; \n&nbsp; &nbsp; &nbsp; &nbsp;  1   &nbsp; </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; parent.size() &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `parent` representing a tree, where `parent[i]` denotes the parent node of node `i` (0-based indexing). The root node's parent is represented by -1. Construct a binary tree from this representation and return the root of the tree. If two nodes share the same parent, the node appearing earlier in the `parent` array becomes the left child.",
                "constraints": [
                    "1 <= parent.size() <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "[-1, 0, 0, 1, 1, 3, 5]",
                        "output": "0 1 2 3 4 5 6",
                        "explanation": "The constructed tree has root 0. Node 1 and 2 are children of 0, 3 and 4 are children of 1, 5 is child of 3 and 6 is child of 5. A level order traversal yields 0 1 2 3 4 5 6."
                    },
                    {
                        "input": "[2, 0, -1]",
                        "output": "2 0 1",
                        "explanation": "The constructed tree has root 2. Node 0 is a child of 2, and node 1 is a child of 0. A level order traversal yields 2 0 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>To construct the binary tree, iterate twice through the parent array: first, create nodes for each index and store them in a map, and second, link each node to its parent as either the left or right child based on availability.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "snapdeal"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    // Function to create nodes.\n    void createNode(vector<int> parent, int i, Node *created[], Node **root) {\n\n        // base case if this node is already created.\n        if (created[i] != NULL)\n            return;\n\n        // creating a new node and setting created[i].\n        created[i] = new Node(i);\n\n        // if 'i' is root, changing root pointer.\n        if (parent[i] == -1) {\n            *root = created[i];\n            return;\n        }\n\n        // if parent is not created then we create parent first.\n        if (created[parent[i]] == NULL)\n            createNode(parent, parent[i], created, root);\n\n        // finding parent pointer.\n        Node *p = created[parent[i]];\n\n        // if this is first child of parent, we store it as left child.\n        if (p->left == NULL)\n            p->left = created[i];\n        // else we store it as right child.\n        else\n            p->right = created[i];\n    }\n\n    // Function to construct binary tree from parent array.\n    Node *createTree(vector<int> parent) {\n        // creating an array created[] to keep track of created nodes,\n        // initializing all entries as NULL.\n        int n = parent.size();\n        Node *created[n];\n        for (int i = 0; i < n; i++)\n            created[i] = NULL;\n\n        Node *root = NULL;\n        for (int i = 0; i < n; i++)\n            createNode(parent, i, created, &root);\n\n        // returning root of created tree.\n        return root;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Backend complete function template for JAVA\n\nclass Solution {\n    static Node root;\n\n    // Function to construct binary tree from parent array.\n    public Node createTree(int arr[]) {\n        root = null;\n        int n = arr.length;\n        // creating an array created[] to keep track of created nodes,\n        // initializing all entries as NULL.\n        Node[] created = new Node[n];\n        for (int i = 0; i < n; i++) created[i] = null;\n\n        for (int i = 0; i < n; i++) createNode(arr, i, created);\n\n        // returning root of created tree.\n        return root;\n    }\n\n    // Function to create nodes.\n    public void createNode(int arr[], int i, Node created[]) {\n        // base case if this node is already created.\n        if (created[i] != null) return;\n\n        // creating a new node and setting created[i].\n        created[i] = new Node(i);\n\n        // if 'i' is root, changing root pointer.\n        if (arr[i] == -1) {\n            root = created[i];\n            return;\n        }\n\n        // if parent is not created then we create parent first.\n        if (created[arr[i]] == null) createNode(arr, arr[i], created);\n\n        // finding parent pointer.\n        Node p = created[arr[i]];\n\n        // if this is first child of parent, we store it as left child.\n        if (p.left == null) p.left = created[i];\n        // else we store it as right child.\n        else\n            p.right = created[i];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n#Function to create nodes.\ndef createNode(parent, i, created, root):\n\n    #base case if this node is already created.\n    if created[i] is not None:\n        return\n\n    #creating a new node and setting created[i].\n    created[i] = Node(i)\n\n    #if 'i' is root, changing root pointer.\n    if parent[i] == -1:\n        root[0] = created[i]\n        return\n\n    #if parent is not created then we create parent first.\n    if created[parent[i]] is None:\n        createNode(parent, parent[i], created, root)\n\n    #finding parent pointer.\n    p = created[parent[i]]\n\n    #if this is first child of parent, we store it as left child.\n    if p.left is None:\n        p.left = created[i]\n    #else we store it as right child.\n    else:\n        p.right = created[i]\n\n\nclass Solution:\n    #Function to construct binary tree from parent array.\n    def createTree(self, parent):\n        n = len(parent)\n\n        #creating an array created[] to keep track of created nodes,\n        #initializing all entries as NULL.\n        created = [None for i in range(n + 1)]\n\n        root = [None]\n        for i in range(n):\n            createNode(parent, i, created, root)\n\n        #returning root of created tree.\n        return root[0]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\nclass Solution {\n    // Function to create nodes.\n    void createNode(int[] parent, int i, Node[] created, ref Node root) {\n\n        // base case if this node is already created.\n        if (created[i] != null) return;\n\n        // creating a new node and setting created[i].\n        created[i] = new Node(i);\n\n        // if 'i' is root, changing root pointer.\n        if (parent[i] == -1) {\n            root = created[i];\n            return;\n        }\n\n        // if parent is not created then we create parent first.\n        if (created[parent[i]] == null)\n            createNode(parent, parent[i], created, ref root);\n\n        // finding parent pointer.\n        Node p = created[parent[i]];\n\n        // if this is first child of parent, we store it as left child.\n        if (p.left == null) p.left = created[i];\n        // else we store it as right child.\n        else\n            p.right = created[i];\n    }\n\n    // Function to construct binary tree from parent array.\n    public Node createTree(int[] parent) {\n        // code here\n        // creating an array created[] to keep track of created nodes,\n        // initializing all entries as NULL.\n        int N = parent.Length;\n        Node[] created = new Node[N];\n        for (int i = 0; i < N; i++) created[i] = null;\n\n        Node root = null;\n        for (int i = 0; i < N; i++) createNode(parent, i, created, ref root);\n\n        // returning root of created tree.\n        return root;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} parent\n * @param {number} n\n * @returns {Node}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n\n    constructor() { this.root = null; }\n\n    // Function to create nodes.\n    createNode(parent, i, created) {\n        // base case if this node is already created.\n        if (created[i] !== null) return;\n\n        // creating a new node and setting created[i].\n        created[i] = new Node(i);\n\n        // if 'i' is root, changing root pointer.\n        if (parent[i] == -1) {\n            this.root = created[i];\n            return;\n        }\n\n        // if parent is not created then we create parent first.\n        if (created[parent[i]] === null) this.createNode(parent, parent[i], created);\n\n        // finding parent pointer.\n        let p = created[parent[i]];\n\n        // if this is first child of parent, we store it as left child.\n        if (p.left === null) p.left = created[i];\n        // else we store it as right child.\n        else\n            p.right = created[i];\n    }\n\n    // Function to construct binary tree from parent array.\n    createTree(parent) {\n        // creating an array created[] to keep track of created nodes,\n        // initializing all entries as NULL.\n        let n = parent.length;\n        let created = [];\n        for (let i = 0; i < n; i++) created.push(null);\n\n        for (let i = 0; i < n; i++) this.createNode(parent, i, created);\n\n        // returning root of created tree.\n        return this.root;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}