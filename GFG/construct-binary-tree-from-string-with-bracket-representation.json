{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710350,
            "title": "Construct Binary Tree from String with bracket representation",
            "titleSlug": "construct-binary-tree-from-string-with-bracket-representation",
            "content": "<p><span style=\"font-size:18px\">Construct a binary tree from a string consisting of parenthesis and integers. The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the roots value and a pair of parenthesis contains a child binary tree with the same structure. Always start to construct the left child node of the parent first if it exists. The integer values will be less than or equal to 10^5.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> &quot;1(2)(3)&quot; \r\n<strong>Output:</strong> 2 1 3\r\n<strong>Explanation:</strong>\r\n\\t     1\r\n\\t    / \\\r\n\\t   2   3\r\nExplanation: first pair of parenthesis contains \r\nleft subtree and second one contains the right \r\nsubtree. Inorder of above tree is &quot;2 1 3&quot;.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> &quot;4(2(3)(1))(6(5))&quot;\r\n<strong>Output:</strong> 3 2 1 4 5 6\r\n<strong>Explanation:</strong>\r\n\\t     4\r\n\\t   /   \\\r\n\\t  2     6\r\n\\t / \\   / \r\n\\t3   1 5   </span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>treeFromString()&nbsp;</strong>which takes a string <strong>str </strong>as input parameter and returns the root node of the tree.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= |str| &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Construct a binary tree from a string representation. The input string consists of an integer (the root's value) followed by zero, one, or two pairs of parentheses. Each pair of parentheses contains a child binary tree represented in the same string format.  The integer represents the node value, and parenthesis enclose the left and right subtrees. Always construct the left child node of the parent first if it exists. The integer values will be less than or equal to 10^5.",
                "constraints": [
                    "1 <= |str| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "\"1(2)(3)\"",
                        "output": "2 1 3",
                        "explanation": "The input string represents the tree with root 1, left child 2, and right child 3. The inorder traversal is 2 1 3."
                    },
                    {
                        "input": "\"4(2(3)(1))(6(5))\"",
                        "output": "3 2 1 4 5 6",
                        "explanation": "The input string represents the tree with root 4, left child 2 (with left child 3 and right child 1), and right child 6 (with left child 5). The inorder traversal is 3 2 1 4 5 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:16px\">If the next two consecutive elements are &ldquo;(&rdquo; and &ldquo;)&rdquo;, this means there is no left child otherwise we will create and add the left child to the parent node recursively.</span></p>",
            "<p><span style=\"font-size:16px\">Once the left child is added recursively, we will look for consecutive &ldquo;(&rdquo; and add the right child to the parent node.</span></p>\n\n<p><span style=\"font-size:16px\">Encountering &ldquo;)&rdquo; means the end of either left or right node and we will increment the start index</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\npublic:\r\n    map<int, int> mapping;\r\n    void mapOpenToClose(string str)\r\n    {\r\n        stack<int> s;\r\n        for (int i = 0; i < str.length(); i++)\r\n        {\r\n            if (str[i] == '(')\r\n            {\r\n                s.push(i);\r\n            }\r\n            else if (str[i] == ')')\r\n            {\r\n                mapping[s.top()] = i;\r\n                s.pop();\r\n            }\r\n        }\r\n    }\r\n    \r\n    bool isDigit(char d)\r\n    {\r\n        return (d >= '0' && d <= '9');\r\n    }\r\n    \r\n    Node *treeFromString(string str, int si, int ei)\r\n    {\r\n        // Base case\r\n        if (si > ei)\r\n            return NULL;\r\n\r\n        int num = 0;\r\n        while (si < str.length() && isDigit(str[si]))\r\n        {\r\n            num = num * 10 + (str[si] - '0');\r\n            si++;\r\n        }\r\n        si--;\r\n        // new root\r\n        Node *root = new Node(num);\r\n        int index = -1;\r\n\r\n        // if next char is '(' find the index of\r\n        // its complement ')'\r\n        if (si + 1 <= ei && str[si + 1] == '(')\r\n            index = mapping[si + 1];\r\n\r\n        // if index found\r\n        if (index != -1)\r\n        {\r\n\r\n            // call for left subtree\r\n            root->left = treeFromString(str, si + 2, index - 1);\r\n\r\n            // call for right subtree\r\n            root->right = treeFromString(str, index + 2, ei - 1);\r\n        }\r\n        return root;\r\n    }\r\n    // function to construct tree from string\r\n    Node *treeFromString(string str)\r\n    {\r\n       mapOpenToClose(str);\r\n       return treeFromString(str, 0, str.length() - 1);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    static Node treeFromString(String s)\r\n    {\r\n        return FromString(s, 0, s.length() - 1);\r\n    }\r\n     \r\n    /* Helper function that allocates a new node */\r\n    static Node newNode(int data)\r\n    {\r\n        Node node = new Node(data);\r\n        node.left = node.right = null;\r\n        return (node);\r\n    }\r\n     \r\n    // function to return the index of close parenthesis\r\n    static int findIndex(String str, int si, int ei)\r\n    {\r\n        if (si > ei)\r\n          return -1;\r\n     \r\n        // Inbuilt stack\r\n        Stack<Character> s = new Stack<>();\r\n        for (int i = si; i <= ei; i++)\r\n        {\r\n     \r\n            // if open parenthesis, push it\r\n            if (str.charAt(i) == '(')\r\n                s.add(str.charAt(i));\r\n     \r\n            // if close parenthesis\r\n            else if (str.charAt(i) == ')')\r\n            {\r\n                if (s.peek() == '(')\r\n                {\r\n                    s.pop();\r\n     \r\n                    // if stack is empty, this is\r\n                    // the required index\r\n                    if (s.isEmpty())\r\n                        return i;\r\n                }\r\n            }\r\n        }\r\n     \r\n        // if not found return -1\r\n        return -1;\r\n    }\r\n     \r\n    // function to construct tree from String\r\n    static Node FromString(String str, int si, int ei)\r\n    {\r\n     \r\n        // Base case\r\n        if (si > ei)\r\n            return null;\r\n     \r\n        // new root\r\n        String num=\"\";\r\n        while(si<str.length() && str.charAt(si)>='0' && str.charAt(si)<='9'){\r\n            num+=str.charAt(si);\r\n            si++;\r\n        }\r\n        Node root = newNode(Integer.parseInt(num));\r\n        int index = -1;\r\n     \r\n        // if next char is '(' find the index of\r\n        // its complement ')'\r\n        if (si <= ei && str.charAt(si) == '(')\r\n            index = findIndex(str, si, ei);\r\n     \r\n        // if index found\r\n        if (index != -1)\r\n        {\r\n     \r\n            // call for left subtree\r\n            root.left = FromString(str, si + 1, index - 1);\r\n     \r\n            // call for right subtree\r\n            root.right = FromString(str, index + 2, ei - 1);\r\n        }\r\n        return root;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import Optional\nfrom collections import deque\n\nclass Node:\n    def _init_(self,val):\n        self.data = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # Function to find the index of the closing parenthesis for a given opening parenthesis\n    def findIndex(self,str,si,ei):\n        if si>ei:\n            return -1\n        s=[]\n        for i in range(si,ei+1):\n            if str[i]==\"(\":\n                s.append(\"(\")\n            elif str[i]==\")\":\n                if s:\n                    s.pop()\n                    if not s:\n                        return i\n        return -1\n                    \n    # Function to recursively build the tree from the string\n    def fromString(self,str,si,ei):\n        if si>ei:\n            return None\n        num=\"\"\n        while si<len(str) and ord(\"0\")<=ord(str[si])<=ord(\"9\"):\n            num+=str[si]\n            si+=1\n        root=Node(int(num))\n        index=-1\n        if si<=ei and str[si]==\"(\":\n            index=self.findIndex(str,si,ei)\n        if index!=-1:\n            root.left=self.fromString(str,si+1,index-1)\n            root.right=self.fromString(str,index+2,ei-1)\n        return root\n        \n    # Function to construct binary tree from string\n    def treeFromString(self, s : str) -> Optional['Node']:\n        return self.fromString(s,0,len(s)-1)",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}