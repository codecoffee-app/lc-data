{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706297,
            "title": "Construct list using given q XOR queries",
            "titleSlug": "construct-list-using-given-q-xor-queries",
            "content": "<p><span style=\"font-size: 18px;\">Given a list <strong>s</strong> that initially contains only a single value <strong>0</strong>. There will be <strong>q</strong> queries of the following types:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\"><strong>0 x</strong>: Insert x in the list</span></li>\n<li><span style=\"font-size: 18px;\"><strong>1 x</strong>: For every element a in s, replace it with a ^ x. ('^' denotes the bitwise XOR operator)</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\">Return the sorted list after performing the given <strong>q</strong>&nbsp;queries.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>q = 5\nqueries[] = {{0, 6}, {0, 3}, {0, 2}, {1, 4}, {1, 5}}\n<strong>Output:\n</strong>1 2 3 7\n<strong>Explanation:</strong>\n[0] (initial value)\n[0 6] (add 6 to list)\n[0 6 3] (add 3 to list)\n[0 6 3 2] (add 2 to list)\n[4 2 7 6] (XOR each element by 4)\n[1 7 2 3] (XOR each element by 5)\nThe sorted list after performing all the queries is [1 2 3 7]. </span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>q = 3\nqueries[] = {{0, 2}, {1, 3}, {0, 5}}</span> <span style=\"font-size: 18px;\">\n<strong>Output :</strong>\n1 3 5</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\n[0] (initial value)\n[0 2] (add 2 to list)\n[3 1] (XOR each element by 3)\n[3 1 5] (add 5 to list)\nThe sorted list after performing all the queries is [1 3 5].</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>constructList()</strong> which takes an integer <strong>q</strong> the number of queries and <strong>queries[]</strong> a list of lists of length 2 denoting the queries as input parameters and returns the final constructed list.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(q*log(q))<br /><strong>Expected Auxiliary Space:</strong> O(l), where l is only used for output-specific requirements.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; q &le; 10<sup>5</sup></span></p>\n<p><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">0 </span><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&le; x </span><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&le;10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a list `s` initialized with a single value `0`.  You need to process `q` queries of two types:\n\n*   **0 x**: Insert the integer `x` into the list `s`.\n*   **1 x**: Perform a bitwise XOR operation between each element `a` in the list `s` and `x` (i.e., replace `a` with `a ^ x`).\n\nAfter processing all `q` queries, return the sorted list `s`.",
                "constraints": [
                    "1 <= q <= 10^5",
                    "0 <= x <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "q = 5\nqueries[] = {{0, 6}, {0, 3}, {0, 2}, {1, 4}, {1, 5}}",
                        "output": "1 2 3 7",
                        "explanation": "Initial list: [0]\nAdd 6: [0, 6]\nAdd 3: [0, 6, 3]\nAdd 2: [0, 6, 3, 2]\nXOR by 4: [4, 2, 7, 6]\nXOR by 5: [1, 7, 2, 3]\nSorted list: [1, 2, 3, 7]"
                    },
                    {
                        "input": "q = 3\nqueries[] = {{0, 2}, {1, 3}, {0, 5}}",
                        "output": "1 3 5",
                        "explanation": "Initial list: [0]\nAdd 2: [0, 2]\nXOR by 3: [3, 1]\nAdd 5: [3, 1, 5]\nSorted list: [1, 3, 5]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">It is much easier to process the numbers in reverse order by keeping track of the cumulative <a href=\"https://www.geeksforgeeks.org/bitwise-operators-in-c-cpp/\">Bitwise XOR</a> working from right to left </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    vector<int> constructList(int q, vector<vector<int>> &queries) {\n        using namespace std;\n\n        // Store cumulative Bitwise XOR\n        int xr = 0;\n\n        // Initialize final list to return\n        vector<int> ans;\n\n        // Perform each query\n        for (int i = q - 1; i >= 0; i--) {\n            if (queries[i][0] == 0) {\n                ans.push_back(queries[i][1] ^ xr);\n            } else {\n                xr ^= queries[i][1];\n            }\n        }\n\n        // The initial value of 0\n        ans.push_back(xr);\n\n        // Sort the list\n        sort(ans.begin(), ans.end());\n\n        // Return final list\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static ArrayList<Integer> constructList(int q, int[][] queries) {\n        // Store cumulative Bitwise XOR\n        int xor = 0;\n\n        // Initialize final list to return\n        ArrayList<Integer> ans = new ArrayList<>();\n\n        // Perform each query\n        for (int i = queries.length - 1; i >= 0; i--) {\n            if (queries[i][0] == 0) {\n                ans.add(queries[i][1] ^ xor);\n            } else {\n                xor ^= queries[i][1];\n            }\n        }\n\n        // The initial value of 0\n        ans.add(xor);\n\n        // Sort the list\n        Collections.sort(ans);\n\n        // Return final list\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def constructList(self, q: int, queries: List[List[int]]) -> List[int]:\n        # Store cumulative Bitwise XOR\n        xr = 0\n\n        # Initialize final list to return\n        ans = []\n\n        # Perform each query\n        for i in range(len(queries) - 1, -1, -1):\n            if queries[i][0] == 0:\n                ans.append(queries[i][1] ^ xr)\n            else:\n                xr ^= queries[i][1]\n\n        # The initial value of 0\n        ans.append(xr)\n\n        # Sort the list\n        ans.sort()\n\n        # Return final list\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}