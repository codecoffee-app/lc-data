{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701939,
            "title": "Container With Most Water",
            "titleSlug": "container-with-most-water0535",
            "content": "<p><span >Given an array&nbsp;<strong>arr[]&nbsp;</strong>of non-negative integers,&nbsp;where each element <code>arr[i]</code> represents the height of the <strong>vertical lines,&nbsp;</strong>find the <strong>maximum amount of water</strong> that can be contained between any two lines, together with the x-axis.</span></p>\n<p><span >Note: In the case of a single vertical line it will not be able to hold water.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 5, 4, 3]\n<strong>Output: </strong>6<strong>\nExplanation: </strong>5 and 3 are 2 distance apart. So the size of the base is 2. Height of container = min(5, 3) = 3. So, total area to hold water = 3 * 2 = 6.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [3, 1, 2, 4, 5]\n<strong>Output: </strong>12<strong>\nExplanation: </strong>5 and 3 are 4 distance apart. So the size of the base is 4. Height of container = min(5, 3) = 3. So, total area to hold water = 4 * 3 = 12.</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [2, 1, 8, 6, 4, 6, 5, 5]<br /><strong>Output</strong>: 25 <br /><strong>Explanation</strong>: 8 and 5 are 5 distance apart. So the size of the base is 5. Height of container = min(8, 5) = 5. So, the total area to hold water = 5 * 5 = 25.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1&lt;= arr.size() &lt;=10<sup>5</sup><br />1&lt;= arr[i] &lt;=10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of non-negative integers, where each element `arr[i]` represents the height of a vertical line, find the maximum amount of water that can be contained between any two lines and the x-axis. Note that a single vertical line cannot hold water.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[1, 5, 4, 3]",
                        "output": "6",
                        "explanation": "The lines with heights 5 and 3 can hold water. The distance between them is 2. The height of the water is limited by the shorter line, which is 3. Therefore, the area (water) is 2 * 3 = 6."
                    },
                    {
                        "input": "[3, 1, 2, 4, 5]",
                        "output": "12",
                        "explanation": "The lines with heights 3 and 5 can hold water. The distance between them is 4. The height of the water is limited by the shorter line, which is 3. Therefore, the area (water) is 4 * 3 = 12."
                    },
                    {
                        "input": "[2, 1, 8, 6, 4, 6, 5, 5]",
                        "output": "25",
                        "explanation": "The lines with heights 8 and 5 can hold water. The distance between them is 5. The height of the water is limited by the shorter line, which is 5. Therefore, the area (water) is 5 * 5 = 25."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The maximum width of the container is the outermost line. So, to find the maximum area, we need to find the maximum possible height.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Puzzles",
                "slug": "puzzles"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    int maxWater(vector<int>& arr) {\n        int n = arr.size();\n        int l = 0;     // left wall of container\n        int r = n - 1; // right wall of container\n        int area = 0;\n\n        while (l < r) {\n            // Calculating the max area\n            area = max(area, min(arr[l], arr[r]) * (r - l));\n\n            // maximise height of container\n            if (arr[l] < arr[r])\n                l += 1;\n            else\n                r -= 1;\n        }\n        return area;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    public int maxWater(int arr[]) {\n        int l = 0;              // left wall of container\n        int r = arr.length - 1; // right wall of container\n        int area = 0;\n\n        while (l < r) {\n            // Calculating the max area\n            area = Math.max(area, (int)Math.min(arr[l], arr[r]) * (r - l));\n\n            // maximise height of container\n            if (arr[l] < arr[r])\n                l += 1;\n            else\n                r -= 1;\n        }\n        return area;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxWater(self, arr):\n        left = 0\n        right = len(arr) - 1\n        res = 0\n        while left < right:\n\n            # Find the water stored in the container between\n            # arr[left] and arr[right]\n            water = min(arr[left], arr[right]) * (right - left)\n            res = max(res, water)\n\n            if arr[left] < arr[right]:\n                left += 1\n            else:\n                right -= 1\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    maxWater(arr) {\n        let l = 0;              // left wall of container\n        let r = arr.length - 1; // right wall of container\n        let area = 0;\n\n        while (l < r) {\n            // Calculating the max area\n            area = Math.max(area, Math.min(arr[l], arr[r]) * (r - l));\n\n            // maximise height of container\n            if (arr[l] < arr[r])\n                l += 1;\n            else\n                r -= 1;\n        }\n        return area;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}