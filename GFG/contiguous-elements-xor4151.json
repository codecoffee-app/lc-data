{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701769,
            "title": "Contiguous Elements XOR",
            "titleSlug": "contiguous-elements-xor4151",
            "content": "<p><span style=\"font-size:18px\">You are given an array <strong>arr</strong>[] of <strong>N</strong> positive integers. This time you are supposed to choose numbers from a contiguous sub-sequence of the given array, so that <a href=\"https://www.geeksforgeeks.org/find-xor-of-two-number-without-using-xor-operator/\"><strong>BITWISE XOR</strong></a> of all the chosen numbers is maximum.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">N = 4\narr[] = {8,1,2,12}\n<strong>Output: </strong>15<strong>\nExplanation: 1</strong>, <strong>2</strong> and <strong>12</strong> can be chosen\nfrom the array as contiguous sub\nsequence which given us maximum\nXOR value equal to 15.</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">N = 4\narr[] = {1,2,3,4}\n<strong>Output: </strong>7<strong>\nExplanation: 3</strong> and <strong>4</strong> from the array\ncan be chosen&nbsp; as contiguous sub\nsequence which given us maximum XOR\nvalue equal to 7.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nComplete <strong>maxSubarrayXOR&nbsp;</strong>function and return&nbsp;the maximum XOR value.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>5</sup><br />\n1 &lt;= arr[i] &lt;= 10<sup>6</sup> (Must be in range of 32 bits signed integer)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong> : O(NlogN)<br />\n<strong>Expected Auxilliary Space </strong>: O(N)</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\n// A Trie Node \nstruct TrieNode \n{ \n\tint value; // Only used in leaf nodes \n\tTrieNode *arr[2]; \n}; \n\n// Utility function to create a Trie node \nTrieNode *newNode(){\n  \n  TrieNode *temp = new TrieNode;\n  temp->value = 0;\n  temp->arr[0] = temp->arr[1] = NULL;\n  return temp;\n\n}\n\n\n//Function to insert pre_xor to trie with given root. \nvoid insert(TrieNode *root, int pre_xor) \n{ \n\tTrieNode *temp = root; \n\n\t//starting from the msb and inserting all bits of pre_xor into Trie. \n\tfor (int i=INT_SIZE-1; i>=0; i--) \n\t{ \n\t\t//finding current bit in given prefix. \n\t\tbool val = pre_xor & (1<<i); \n\n\t\t//creating a new node if needed. \n\t\tif (temp->arr[val] == NULL) \n\t\t\ttemp->arr[val] = newNode(); \n\n\t\ttemp = temp->arr[val]; \n\t} \n    //storing value at leaf node.\n\ttemp->value = pre_xor; \n} \n\n\n//Function to find the maximum XOR ending with last number in \n//prefix XOR 'pre_xor'  and return the XOR of this maximum ith pre_xor \n//which is maximum XOR ending with last element of pre_xor.\nint query(TrieNode *root, int pre_xor) \n{ \n\tTrieNode *temp = root; \n\tfor (int i=INT_SIZE-1; i>=0; i--) \n\t{ \n\t\t//finding current bit in given prefix. \n\t\tbool val = pre_xor & (1<<i); \n\n\t\t//traverse Trie and looking for a prefix that has opposite bit,\n\t\tif (temp->arr[1-val]!=NULL) \n\t\t\ttemp = temp->arr[1-val]; \n\n\t\t//if there is no prefix with opposite bit then looking for same bit. \n\t\telse if (temp->arr[val] != NULL) \n\t\t\ttemp = temp->arr[val]; \n\t} \n\treturn pre_xor^(temp->value); \n} \n\n\nclass Solution\n{\n    public:\n    //Function to return maximum XOR value. \n    int maxSubarrayXOR(int arr[], int n) \n    { \n    \t//creating a Trie and inserting 0 into it. \n    \tTrieNode *root = newNode(); \n    \tinsert(root, 0); \n    \n    \t//initializing answer and xor of current prefix.\n    \tint result = INT_MIN, pre_xor =0; \n    \n    \t//traversing all input array elements. \n    \tfor (int i=0; i<n; i++) \n    \t{ \n    \t\t//updating current prefix xor and inserting it into Trie .\n    \t\tpre_xor = pre_xor^arr[i]; \n    \t\tinsert(root, pre_xor); \n    \n    \t\t//Query for current prefix xor in Trie and updating \n    \t\t//result if required.\n    \t\tresult = max(result, query(root, pre_xor)); \n    \t} \n    \treturn result; \n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\t\nclass Solution\n{\n\t// Assumed int size \n\tstatic final int INT_SIZE = 32; \n\t\n\t// A Trie Node \n\tstatic class TrieNode \n\t{ \n\t\tint value; // Only used in leaf nodes \n\t\tTrieNode[] arr = new TrieNode[2]; \n\t\tpublic TrieNode() { \n\t\t\tvalue = 0; \n\t\t\tarr[0] = null; \n\t\t\tarr[1] = null; \n\t\t} \n\t} \n\tstatic TrieNode root; \n\t\n\t//Function to insert pre_xor to trie with given root.\n\tstatic void insert(int pre_xor) \n\t{ \n\t\tTrieNode temp = root; \n\t\n\t\t//starting from the msb and inserting all bits of pre_xor into Trie.\n\t\tfor (int i=INT_SIZE-1; i>=0; i--) \n\t\t{ \n\t\t\t//finding current bit in given prefix.\n\t\t\tint val = (pre_xor & (1<<i)) >=1 ? 1 : 0; \n\t\n\t\t\t//creating a new node if needed.\n\t\t\tif (temp.arr[val] == null) \n\t\t\t\ttemp.arr[val] = new TrieNode(); \n\t\n\t\t\ttemp = temp.arr[val]; \n\t\t} \n\t\n\t\t//storing value at leaf node.\n\t\ttemp.value = pre_xor; \n\t} \n\t\n\t//Function to find the maximum XOR ending with last number in \n    //prefix XOR 'pre_xor'  and return the XOR of this maximum ith pre_xor \n    //which is maximum XOR ending with last element of pre_xor.\n\tstatic int query(int pre_xor) \n\t{ \n\t\tTrieNode temp = root; \n\t\tfor (int i=INT_SIZE-1; i>=0; i--) \n\t\t{ \n\t\t\t//finding current bit in given prefix.\n\t\t\tint val = (pre_xor & (1<<i)) >= 1 ? 1 : 0; \n\t\n\t\t\t//traversing Trie and looking for a prefix that has opposite bit.\n\t\t\tif (temp.arr[1-val] != null) \n\t\t\t\ttemp = temp.arr[1-val]; \n\t\n\t\t\t//if there is no prefix with opposite bit then looking for same bit. \n\t\t\telse if (temp.arr[val] != null) \n\t\t\t\ttemp = temp.arr[val]; \n\t\t} \n\t\treturn pre_xor^(temp.value); \n\t}\n\t\n\t//Function to return maximum XOR value.\n\tstatic int maxSubarrayXOR(int arr[], int n) \n\t{ \n\t\t//creating a Trie and inserting 0 into it.\n\t\troot = new TrieNode(); \n\t\tinsert(0); \n\t\n\t\t//initializing answer and xor of current prefix.\n\t\tint result = Integer.MIN_VALUE; \n\t\tint pre_xor =0; \n\t\n\t\t//traversing all input array elements.\n\t\tfor (int i=0; i<n; i++) \n\t\t{ \n\t\t\t//updating current prefix xor and inserting it into Trie. \n\t\t\tpre_xor = pre_xor^arr[i]; \n\t\t\tinsert(pre_xor); \n\t\n\t\t\t//Query for current prefix xor in Trie and \n\t\t\t//updating result if required.\n\t\t\tresult = Math.max(result, query(pre_xor)); \n\n\t\t} \n\t\treturn result; \n\t}    \n}\n\t",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nINT_SIZE = 32\nclass TrieNode:\n    def __init__(self):\n        self.children = [None]*2\n        self.value=0\n\ndef getNode():\n    return TrieNode()\n\ndef _charToIndex(ch):\n\n    return ord(ch)-ord('a')\n\n#Function to insert pre_xor to trie with given root.\ndef insert(root, pre_xor):\n    \n    tmp = root\n    #starting from the msb and inserting all bits of pre_xor into Trie.\n    for i in range(INT_SIZE-1, -1, -1):\n        \n        #finding current bit in given prefix.\n        val = pre_xor&(1<<i)\n        if(val>0):\n            val=1\n            \n        #creating a new node if needed.\n        if(tmp.children[val]==None):\n            tmp.children[val] = getNode()\n        tmp = tmp.children[val]\n    \n    #storing value at leaf node.\n    tmp.value = pre_xor\n\n#Function to find the maximum XOR ending with last number in \n#prefix XOR 'pre_xor'  and return the XOR of this maximum ith pre_xor \n#which is maximum XOR ending with last element of pre_xor.\ndef query(root, pre_xor):\n    \n    tmp = root\n    for i in range(INT_SIZE-1, -1, -1):\n        \n        #finding current bit in given prefix.\n        val = pre_xor&(1<<i)\n        if(val>0):\n            val=1\n            \n        #traversing Trie and looking for a prefix that has opposite bit.\n        if(tmp.children[1-val]!=None):\n            tmp = tmp.children[1-val]\n            \n        #if there is no prefix with opposite bit then looking for same bit.\n        elif(tmp.children[val]!=None):\n            tmp = tmp.children[val]\n    return pre_xor^(tmp.value)\n\nclass Solution:\n    \n    #Function to return maximum XOR value.\n    def maxSubarrayXOR(self,arr, n):\n        \n        #creating a Trie and inserting 0 into it.\n        root = getNode()\n        insert(root, 0)\n        \n        #initializing answer and xor of current prefix.\n        result = 0\n        pre_xor=0\n        \n        #traversing all input array elements.\n        for i in range(n):\n            \n            #updating current prefix xor and inserting it into Trie. \n            pre_xor=pre_xor^arr[i]\n            insert(root, pre_xor)\n            \n            #Query for current prefix xor in Trie and \n\t\t\t#updating result if required.\n            result = max(result, query(root, pre_xor))\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass TrieNode{\n    constructor(){ \n        \n        this.value = 0; // Only used in leaf nodes \n        \n        this.arr = new Array(2);\n        this.arr.fill(null);\n    }\n}\n\n\nlet INT_SIZE = 32;\n\n/**\n * @param {number[]} arr\n * @param {number} n\n*/\nclass Solution\n{\n    //Function to insert pre_xor to trie with given root. \n    insert(root, pre_xor) \n    { \n    \tlet temp = root; \n    \n    \t//starting from the msb and inserting all bits of pre_xor into Trie.\n    \tfor (let i=INT_SIZE-1; i>=0; i--) \n    \t{ \n    \t\t//finding current bit in given prefix.\n    \t\tlet val = (pre_xor>>i) & (1); \n    \n    \t\t//creating a new node if needed. \n    \t\tif (temp.arr[val] == null) \n    \t\t\ttemp.arr[val] = new TrieNode (); \n    \n    \t\ttemp = temp.arr[val]; \n    \t} \n    \n    \t//storing value at leaf node. \n    \ttemp.value = pre_xor; \n    }\n    \n    //Function to find the maximum XOR ending with last number in \n    //prefix XOR 'pre_xor'  and return the XOR of this maximum ith pre_xor \n    //which is maximum XOR ending with last element of pre_xor.\n    query(root, pre_xor) \n    { \n    \tlet temp = root;\n    \tfor (let i=INT_SIZE-1; i>=0; i--) \n    \t{ \n    \t\t//finding current bit in given prefix.\n    \t\tlet val = (pre_xor>>i) & (1); \n    \t\t\n    \t\t//traversing Trie and looking for a prefix that has opposite bit. \n    \t\tif (temp.arr[1-val]!=null) \n    \t\t\ttemp = temp.arr[1-val]; \n    \n    \t\t//if there is no prefix with opposite bit then looking for same bit. \n    \t\telse if (temp.arr[val] != null) \n    \t\t\ttemp = temp.arr[val]; \n    \t} \n    \treturn pre_xor^(temp.value); \n    } \n\n    //Function to return maximum XOR value.    \n    maxSubarrayXOR(arr, n)\n    {\n        //creating a Trie and inserting 0 into it.\n    \tlet root = new TrieNode(); \n    \tthis.insert(root, 0); \n    \n    \t//initializing answer and xor of current prefix.\n    \tlet result = arr[0], pre_xor =0; \n    \n    \t//traversing all input array elements. \n    \tfor (let i=0; i<n; i++) \n    \t{ \n    \t\t//updating current prefix xor and inserting it into Trie.\n    \t\tpre_xor = pre_xor^arr[i]; \n    \t\tthis.insert(root, pre_xor); \n    \n    \t\t//Query for current prefix xor in Trie and updating \n    \t\t//result if required.\n    \t\tresult = Math.max(result, this.query(root, pre_xor)); \n    \t} \n    \treturn result; \n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\n\n// arr : given array\n// n : size of the given array\nclass Solution\n{\n    // A Trie Node \n    class TrieNode\n    {\n        public int value; // Only used in leaf nodes \n        public TrieNode[] arr = new TrieNode[2];\n    }\n\n    //Function to return maximum XOR value.\n    public int maxSubarrayXOR(int[] arr, int n)\n    {\n        //creating a Trie and inserting 0 into it.\n        TrieNode root = newNode();\n        insert(root, 0);\n\n        //initializing answer and xor of current prefix.\n        int result = int.MinValue, pre_xor = 0;\n\n        //traversing all input array elements.\n        for (int i = 0; i < n; i++)\n        {\n            //updating current prefix xor and inserting it into Trie.\n            pre_xor = pre_xor ^ arr[i];\n            insert(root, pre_xor);\n\n            //Query for current prefix xor in Trie and updating \n            //result if required.\n            result = Math.Max(result, query(root, pre_xor));\n        }\n        return result;\n    }\n\n    // Utility function to create a Trie node \n    TrieNode newNode()\n    {\n        TrieNode temp = new TrieNode();\n        temp.value = 0;\n        temp.arr[0] = temp.arr[1] = null;\n        return temp;\n    }\n\n    //Function to insert pre_xor to trie with given root. \n    void insert(TrieNode root, int pre_xor)\n    {\n        TrieNode temp = root;\n\n        //starting from the msb and inserting all bits of pre_xor into Trie. \n        for (int i = 31; i >= 0; i--)\n        {\n            //finding current bit in given prefix. \n            int val = (pre_xor & (1 << i)) != 0 ? 1 : 0;\n\n            //creating a new node if needed. \n            if (temp.arr[val] == null)\n                temp.arr[val] = newNode();\n\n            temp = temp.arr[val];\n        }\n        //storing value at leaf node.\n        temp.value = pre_xor;\n    }\n\n\n    //Function to find the maximum XOR ending with last number in \n    //prefix XOR 'pre_xor'  and return the XOR of this maximum ith pre_xor \n    //which is maximum XOR ending with last element of pre_xor.\n    int query(TrieNode root, int pre_xor)\n    {\n        TrieNode temp = root;\n        for (int i = 31; i >= 0; i--)\n        {\n            //finding current bit in given prefix. \n            int val = (pre_xor & (1 << i)) != 0 ? 1 : 0;\n\n            //traverse Trie and looking for a prefix that has opposite bit,\n            if (temp.arr[1 - val] != null)\n                temp = temp.arr[1 - val];\n\n            //if there is no prefix with opposite bit then looking for same bit. \n            else if (temp.arr[val] != null)\n                temp = temp.arr[val];\n        }\n        return pre_xor ^ (temp.value);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}