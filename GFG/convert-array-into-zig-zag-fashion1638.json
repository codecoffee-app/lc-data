{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703090,
            "title": "Convert array into Zig-Zag fashion",
            "titleSlug": "convert-array-into-zig-zag-fashion1638",
            "content": "<p><span >Given an array&nbsp;<strong>arr</strong> of <strong>distinct </strong>elements, the task is to rearrange the elements of the array in a <strong>zig-zag fashion</strong> so that the converted array should be in the below form:&nbsp;</span></p>\n<blockquote>\n<p><span >arr[0] &lt; arr[1] &nbsp;&gt; arr[2] &lt; arr[3] &gt; arr[4] &lt; . . . . arr[n-2] &lt; arr[n-1] &gt; arr[n].&nbsp;</span></p>\n</blockquote>\n<p><span >Note: Modify the given arr[] only,<strong> </strong>If your transformation is correct, the output will be \"<strong>true\"</strong> else the output will be <strong>\"false\"</strong>.&nbsp;</span></p>\n<p><span ><strong>Examples</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [4, 3, 7, 8, 6, 2, 1]\n<strong>Output: </strong>true\n<strong>Explanation:</strong>  After modification the array will look like 3 &lt; 7 &gt; 4 &lt; 8 &gt; 2 &lt; 6 &gt; 1, the checker in the driver code will produce 1.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [4, 7, 3, 8, 2]\n<strong>Output:</strong> true\n<strong>Explanation: </strong>After<strong> </strong>modification the array will look like 4 &lt; 7 &gt; 3 &lt; 8 &gt; 2 hence output will be 1.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 8, 1, 7, 5, 9]\n<strong>Output:</strong> true</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />0 &lt;= arr<sub>i</sub> &lt;= 10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Maintain a flag &amp; if the current two elements are not in that order then swap those elements otherwise not.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "amazon",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Program for zig-zag conversion of array\n    void zigZag(vector<int>& arr) {\n        int n = arr.size();\n        // Flag true indicates relation \"<\" is expected,\n        // else \">\" is expected. The first expected relation\n        // is \"<\"\n        bool flag = true;\n\n        for (int i = 0; i <= n - 2; i++) {\n            if (flag) /* \"<\" relation expected */\n            {\n                /* If we have a situation like A > B > C,\n                we get A > B < C by swapping B and C */\n                if (arr[i] > arr[i + 1])\n                    swap(arr[i], arr[i + 1]);\n            } else /* \">\" relation expected */\n            {\n                /* If we have a situation like A < B < C,..\n                we get A < C > B by swapping B and C */\n                if (arr[i] < arr[i + 1])\n                    swap(arr[i], arr[i + 1]);\n            }\n            flag = !flag; /* flip flag */\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static void zigZag(int[] arr) {\n        int n = arr.length;\n        boolean flag = true;\n\n        for (int i = 0; i <= n - 2; i++) {\n            if (flag) { // \"<\" relation expected\n                if (arr[i] > arr[i + 1]) {\n                    // Swap arr[i] and arr[i + 1]\n                    int temp = arr[i];\n                    arr[i] = arr[i + 1];\n                    arr[i + 1] = temp;\n                }\n            } else { // \">\" relation expected\n                if (arr[i] < arr[i + 1]) {\n                    // Swap arr[i] and arr[i + 1]\n                    int temp = arr[i];\n                    arr[i] = arr[i + 1];\n                    arr[i + 1] = temp;\n                }\n            }\n            flag = !flag; // flip flag\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def zigZag(self, arr: List[int]) -> None:\n        flag = True\n        n = len(arr)\n\n        for i in range(1, n):\n            if flag:  # \"<\" relation expected\n                if arr[i - 1] > arr[i]:\n                    arr[i - 1], arr[i] = arr[i], arr[\n                        i - 1]  # Swap arr[i - 1] and arr[i]\n            else:  # \">\" relation expected\n                if arr[i - 1] < arr[i]:\n                    arr[i - 1], arr[i] = arr[i], arr[\n                        i - 1]  # Swap arr[i - 1] and arr[i]\n            flag = not flag  # flip flag\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n\n    * @param number[] arr\n\n    * @returns none\n    */\n    zigZag(arr) {\n        let n = arr.length;\n        // code here\n        var i, j, t;\n        for (i = 0, j = 1; j < n; i++, j++)\n            if (i % 2 != 0 ? arr[i] < arr[j] : arr[i] > arr[j]) {\n                t = arr[i];\n                arr[i] = arr[j];\n                arr[j] = t;\n            }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}