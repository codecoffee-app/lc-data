{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700686,
            "title": "Convert Level Order Traversal to BST",
            "titleSlug": "convert-level-order-traversal-to-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>BST[]</strong> of size <strong>N</strong> containing level order traversal of a <strong>Binary Search Tree</strong>. The task is to complete the function <strong>constructBst()</strong>, which constructs the BST (Binary Search Tree) from its given level order traversal.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 9\nBST[] = {7,4,12,3,6,8,1,5,10}\n<strong>Output: </strong>7 4 3 1 6 5 12 8 10<strong>\nExplanation: </strong>After constructing BST, the\npreorder traversal of BST is\n7 4 3 1 6 5 12 8 10.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 6\nBST[] = {1,3,4,6,7,8}\n<strong>Output: </strong>1 3 4 6 7 8<strong>\nExplanation: </strong>After constructing BST, the\npreorder traversal of BST is 1 3 4 6 7 8.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Your task is to complete the function <strong>constructBst</strong>() which has two arguments, first as the array containing level order traversal of BST and next argument as the length of array which returns the root of the newly constructed BST. The preorder traversal of the tree is printed by the driver's code.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `BST[]` of size `N` containing the level order traversal of a Binary Search Tree, construct the BST from the given level order traversal. Return the root of the newly constructed BST. The preorder traversal of the tree will be printed by the driver code.",
                "constraints": [
                    "1 <= N <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "N = 9\nBST[] = {7,4,12,3,6,8,1,5,10}",
                        "output": "7 4 3 1 6 5 12 8 10",
                        "explanation": "The level order traversal is used to construct the BST. The preorder traversal of the resulting BST is 7 4 3 1 6 5 12 8 10."
                    },
                    {
                        "input": "N = 6\nBST[] = {1,3,4,6,7,8}",
                        "output": "1 3 4 6 7 8",
                        "explanation": "The level order traversal is used to construct the BST. The preorder traversal of the resulting BST is 1 3 4 6 7 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n\r\nstruct NodeDetails\r\n{\r\n\tNode *ptr;\r\n\tint min, max;\r\n};\r\n\r\n//Function to construct the BST from its given level order traversal.\r\nNode* constructBst(int arr[], int n)\r\n{\r\n    // base case\r\n\tif (n == 0)\r\n\t    return NULL;\r\n\tNode *root;\r\n\t\r\n\t//using a queue to store NodeDetails of a node. \r\n\tqueue<NodeDetails> q;\r\n\t\r\n\tint i=0;\r\n\t\r\n\t//node details for the root of the BST.\r\n\tNodeDetails newNode;\r\n\tnewNode.ptr = new Node(arr[i++]);\r\n\tnewNode.min = INT_MIN;\r\n\tnewNode.max = INT_MAX;\r\n\tq.push(newNode);\r\n\t\r\n\t//getting the root of the BST\r\n\troot = newNode.ptr;\r\n\t\r\n\twhile (i != n)\t \r\n\t{\r\n\t    //extracting NodeDetails of a node from the queue.\r\n\t\tNodeDetails temp = q.front();\r\n\t\tq.pop();\r\n\t\t\r\n\t\t//checking whether there are more elements in the arr[] and arr[i] \r\n        //can be left child of 'temp.ptr' or not.\r\n\t\tif (i<n&&(arr[i]<temp.ptr->data&&arr[i]>temp.min))\r\n\t\t{\r\n\t\t    //creating NodeDetails for new node and adding it to the queue.\r\n\t\t\tnewNode.ptr = new Node(arr[i++]);\r\n\t\t\tnewNode.min = temp.min;\r\n\t\t\tnewNode.max = temp.ptr->data;\r\n\t\t\tq.push(newNode);\r\n\t\t\t\r\n\t\t\t//making this 'newNode' as left child of 'temp.ptr'.\r\n\t\t\ttemp.ptr->left = newNode.ptr;\t\t \r\n\t\t}\r\n\t\t\r\n\t\t//checking whether there are more elements in the arr[] and arr[i] \r\n        //can be right child of 'temp.ptr' or not.\r\n\t\tif (i<n&&(arr[i]>temp.ptr->data&&arr[i]<temp.max))\r\n\t\t{\r\n\t\t    //creating NodeDetails for new node and adding it to the queue.\r\n\t\t\tnewNode.ptr = new Node(arr[i++]);\r\n\t\t\tnewNode.min = temp.ptr->data;\r\n\t\t\tnewNode.max = temp.max;\r\n\t\t\tq.push(newNode);\r\n\t\t\t\r\n\t\t\t//making this 'newNode' as right child of 'temp.ptr'.\r\n\t\t\ttemp.ptr->right = newNode.ptr;\r\n\t\t}\t \r\n\t}\r\n\t//returning root of the required BST.\r\n\treturn root;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass GFG \r\n{\r\n    class QNode \r\n    {\r\n        Node node;\r\n        int min, max;\r\n        public QNode(Node node){\r\n            this.node = node;\r\n            this.min = Integer.MIN_VALUE;\r\n            this.max = Integer.MAX_VALUE;\r\n        }\r\n    }\r\n    \r\n    //Function to construct the BST from its given level order traversal.\r\n    public Node constructBST(int[] arr)\r\n    {\r\n        //getting the root of the BST\r\n        Node root = new Node(arr[0]);\r\n        \r\n        //using a queue to store NodeDetails of a node.\r\n        Queue<QNode> q = new LinkedList<>();\r\n        q.add(new QNode(root));\r\n        \r\n        QNode curr;\r\n        \r\n        for(int i=1; i<arr.length;)\r\n        {\r\n            //extracting NodeDetails of a node from the queue.\r\n            curr = q.poll();\r\n\r\n            //checking whether there are more elements in the arr[] and arr[i] \r\n            //can be left child of curr.node or not.\r\n            if(i<arr.length&&arr[i]<curr.node.data &&arr[i]>curr.min)\r\n            {\r\n                //making this newNode as left child of curr.node.\r\n                Node leftNode = new Node(arr[i]);\r\n                curr.node.left = leftNode;\r\n                \r\n                //creating NodeDetails for new node and adding it to the queue.\r\n                QNode newQnode = new QNode(leftNode);\r\n                newQnode.min = curr.min;\r\n                newQnode.max = curr.node.data;\r\n                q.add(newQnode);\r\n                i++;\r\n            } \r\n            \r\n            //checking whether there are more elements in the arr[] and arr[i] \r\n            //can be right child of curr.node or not.\r\n            if (i<arr.length&& arr[i]>curr.node.data&&arr[i]<curr.max)\r\n            {\r\n                //making this newNode as right child of curr.node.\r\n                Node rightNode = new Node(arr[i]);\r\n                curr.node.right = rightNode;\r\n                \r\n                //creating NodeDetails for new node and adding it to the queue.\r\n                QNode newQnode = new QNode(rightNode);\r\n                newQnode.min = curr.node.data;\r\n                newQnode.max = curr.max;\r\n                q.add(newQnode);\r\n                i++;\r\n            }\r\n        }\r\n        //returning root of the required BST.\r\n        return root;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n\r\n#Function to construct the BST from its given level order traversal.\r\ndef constructBst(a,n):\r\n    \r\n    #base case\r\n    if n>0:\r\n        root=Node(a[0])\r\n    else:\r\n        return None\r\n        \r\n    #iterating over array and inserting elements in BST.\r\n    for i in range(1,n):\r\n        insert(root,a,n,i)\r\n        \r\n    return root\r\n\r\n#Function to insert a node.\r\ndef insert(root,a,n,i):\r\n    \r\n    #if data at current node is more than a[i], and left child exists, we\r\n    #call the function recursively for left child.\r\n    if root.data>a[i]:\r\n        if root.left:\r\n            insert(root.left,a,n,i)\r\n        else:\r\n            root.left=Node(a[i])\r\n            \r\n    #if data at current node is less than a[i], and right child exists, we\r\n    #call the function recursively for right child.\r\n    if root.data<a[i]:\r\n        if root.right:\r\n            insert(root.right,a,n,i)\r\n        else:\r\n            root.right=Node(a[i])\r\n    ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\r\n\r\nclass Solution{\r\n    \r\n    constructBst(arr,n){\r\n        if (arr.length === 0) return null;\r\n \r\n        // Create root node and store a copy of it in head\r\n        let root = new Node(arr[0]), head = root;\r\n     \r\n        // Create queue to store the tree nodes\r\n        let queue = [{ node: root, range: { min: Number.MIN_SAFE_INTEGER, max: Number.MAX_SAFE_INTEGER } }];\r\n     \r\n        for (let i = 1; i < arr.length; i++) {\r\n            let { node, range } = queue[0];\r\n     \r\n            // Check if arr[i] can be a child of the temp node\r\n            if (arr[i] > range.min && arr[i] < range.max) {\r\n                // Check if arr[i] can be left child\r\n                if (arr[i] < node.data) {\r\n                    // Set the left child and range\r\n                    node.left = new Node(arr[i]);\r\n                    queue.push({ node: node.left, range: { min: range.min, max: node.data } });\r\n                }\r\n                // Check if arr[i] can be left child\r\n                else {\r\n                    // Pop the temp node from queue, set the right child and new range\r\n                    queue.shift();\r\n                    node.right = new Node(arr[i]);\r\n                    queue.push({ node: node.right, range: { min: node.data, max: range.max } });\r\n                }\r\n            }\r\n            else {\r\n                queue.shift();\r\n                i--;\r\n            }\r\n        }\r\n \r\n        return head;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}