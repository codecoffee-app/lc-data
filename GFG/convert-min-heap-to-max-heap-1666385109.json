{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712527,
            "title": "Convert Min Heap to Max Heap",
            "titleSlug": "convert-min-heap-to-max-heap-1666385109",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr</strong> of <strong>N</strong> integers representing&nbsp;a min Heap. The task is to convert it to max Heap.</span></p>\n<p><span style=\"font-size: 18px;\">A max-heap&nbsp;is a complete binary tree in which the value in each internal node is greater than or equal to the values in the children of that node.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1</strong>:</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 4\narr = [1, 2, 3, 4]\n<strong>Output</strong>:\n</span><span style=\"font-size: 18px;\">[4, 2, 3, 1]<strong>\nExplanation</strong>:</span>\n\n<span style=\"font-size: 18px;\">The given min Heap:</span>\n\n<span style=\"font-size: 18px;\">\\t    1\n\\t  /   \\\n\\t2\\t 3\n     /\n   4</span>\n\n<span style=\"font-size: 18px;\">Max Heap after conversion:</span>\n\n<span style=\"font-size: 18px;\">\\t   4\n\\t /   \\\n\\t2     3\n    /\n   1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2</strong>:</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 5\narr = [3, 4, 8, 11, 13]\n<strong>Output</strong>:\n<strong>[</strong>13, 11, 8, 3, 4]</span><span style=\"font-size: 18px;\"><strong>\nExplanation</strong>:</span>\n\n<span style=\"font-size: 18px;\">The given min Heap:</span>\n\n<span style=\"font-size: 18px;\">\\t    3\n\\t  /   \\\n\\t4\\t8\n    /   \\ \n  11     13</span>\n\n<span style=\"font-size: 18px;\">Max Heap after conversion:</span>\n\n<span style=\"font-size: 18px;\">\\t    13\n\\t  /    \\\n\\t11\\t8\n    /   \\ \n   3     4</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Complete the function int <strong>convertMinToMaxHeap</strong>(), which takes integer N and array represented minheap as input and converts it to the array representing maxheap. You don't need to return or print anything, modify the original array itself.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: Only an unique solution is possible under the expected time complexity.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>: O(N * log N)<br /><strong>Expected Auxiliary Space</strong>: O(N)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<p><span style=\"font-size: 18px;\">1 &lt;= N &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of `N` integers representing a min-heap, convert it to a max-heap. A max-heap is a complete binary tree where the value in each internal node is greater than or equal to the values in its children. Modify the original array in-place.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 4\narr = [1, 2, 3, 4]",
                        "output": "[4, 2, 3, 1]",
                        "explanation": "The min-heap [1, 2, 3, 4] is converted to the max-heap [4, 2, 3, 1] as shown in the example."
                    },
                    {
                        "input": "N = 5\narr = [3, 4, 8, 11, 13]",
                        "output": "[13, 11, 8, 3, 4]",
                        "explanation": "The min-heap [3, 4, 8, 11, 13] is converted to the max-heap [13, 11, 8, 3, 4] as shown in the example."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n\n    // Function to max heapify the subtree rooted at node i with N elements\n    void MaxHeapify(vector<int> &arr, int i, int N){\n        int l = 2 * i + 1;\n        int r = 2 * i + 2;\n        int largest = i;\n\n        // check if left child is larger than root\n        if (l < N && arr[l] > arr[i])\n            largest = l;\n\n        // check if right child is larger than current largest\n        if (r < N && arr[r] > arr[largest])\n            largest = r;\n\n        // if largest is not the root, swap and max heapify the affected subtree\n        if (largest != i) {\n            swap(arr[i], arr[largest]);\n            MaxHeapify(arr, largest, N);\n        }\n    }\n\n    // This function converts a given min heap to max heap\n    void convertMinToMaxHeap(vector<int> &arr, int N){\n        // starting from the last non-leaf node and max heapify each of them\n        for (int i = (N - 2) / 2; i >= 0; --i)\n            MaxHeapify(arr, i, N);\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static void convertMinToMaxHeap(int N, int arr[]) {\r\n    // code here\r\n      for (int i = (N - 2) / 2; i >= 0; --i)\r\n            MaxHeapify(arr, i, N);\r\n  }\r\n  static void MaxHeapify(int arr[], int i, int N)\r\n    {\r\n        int l = 2 * i + 1;\r\n        int r = 2 * i + 2;\r\n        int largest = i;\r\n        if (l < N && arr[l] > arr[i])\r\n            largest = l;\r\n        if (r < N && arr[r] > arr[largest])\r\n            largest = r;\r\n        if (largest != i) {\r\n            // swap arr[i] and arr[largest]\r\n            int temp = arr[i];\r\n            arr[i] = arr[largest];\r\n            arr[largest] = temp;\r\n            MaxHeapify(arr, largest, N);\r\n        }\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    # Function to convert array to a max heap\r\n    def convertMinToMaxHeap(self, N, arr):\r\n        # Function to max heapify a subtree rooted at node i\r\n        def MaxHeapify(arr, i, N):\r\n            l = 2 * i + 1  # index of left child\r\n            r = 2 * i + 2  # index of right child\r\n            largest = i  # index of the largest element\r\n\r\n            # if left child is larger than root\r\n            if l < N and arr[l] > arr[i]:\r\n                largest = l\r\n\r\n            # if right child is larger than current largest\r\n            if r < N and arr[r] > arr[largest]:\r\n                largest = r\r\n\r\n            # if largest is not the root, swap elements and max heapify the affected subtree\r\n            if largest != i:\r\n                arr[i], arr[largest] = arr[largest], arr[i]\r\n                MaxHeapify(arr, largest, N)\r\n\r\n        # heapify each subtree in reverse order starting from the last non-leaf node\r\n        for i in range(int((N - 2) / 2), -1, -1):\r\n            MaxHeapify(arr, i, N)  # perform max heapify operation for subtree rooted at i",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public void convertMinToMaxHeap(List<int> arr, int N)\n    {\n        // starting from the last non-leaf node and max heapify each of them\n        for (int i = (N - 2) / 2; i >= 0; --i)\n            MaxHeapify(arr, i, N);\n    }\n\n    // Function to max heapify the subtree rooted at node i with N elements\n    void MaxHeapify(List<int> arr, int i, int N)\n    {\n        int l = 2 * i + 1;\n        int r = 2 * i + 2;\n        int largest = i;\n\n        // check if left child is larger than root\n        if (l < N && arr[l] > arr[i])\n            largest = l;\n\n        // check if right child is larger than current largest\n        if (r < N && arr[r] > arr[largest])\n            largest = r;\n\n        // if largest is not the root, swap and max heapify the affected subtree\n        if (largest != i)\n        {\n            int temp = arr[i];\n            arr[i] = arr[largest];\n            arr[largest] = temp;\n            MaxHeapify(arr, largest, N);\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}