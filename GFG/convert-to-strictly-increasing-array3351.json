{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704557,
            "title": "Strictly Increasing Array",
            "titleSlug": "convert-to-strictly-increasing-array3351",
            "content": "<p><span >Given an array <strong>nums</strong> of <strong>n</strong> positive integers. Find the minimum number of operations required to modify the array such that array elements are in <strong>strictly increasing</strong> order (nums[i] &lt; nums[i+1]).<br />Changing&nbsp;a number to <strong>greater </strong>or <strong>lesser </strong>than an original number is counted as one operation.</span></p>\n<p><span ><strong>Note:</strong> Array elements can become negative after applying the operation.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 6, nums = [1, 2, 3, 6, 5, 4]\n<strong>Output: </strong>2\n<strong>Explanation: </strong>By decreasing 6 by 2 and increasing 4 by 2, nums will be like [1, 2, 3, 4, 5, 6] which is stricly increasing.\n</span></pre>\n<pre><span ><strong>Input:</strong> n = 4, nums = [1, 1, 1, 1]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>One such array after operation can be [-2, -1, 0, 1]. We require atleast 3 operations for this example.\n</span></pre>\n<p><span ><strong>Constraints:&nbsp;</strong><br />1 &lt;= n &lt;= 10<sup>3</sup><br />1 &lt;= nums[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Find the longest increasing subsequence.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    int min_operations(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> dp(n, 1);\n        for (int i = 1; i < n; i++) {\n            int temp = 0;\n            for (int j = 0; j < i; j++) {\n                // If nums[i] is greater than nums[j] then it can be added to the set of\n                // LIS\n                if (nums[i] > nums[j])\n                    if (nums[i] - nums[j] > i - j - 1)\n                        temp = max(temp, dp[j]);\n            }\n            // length of maximum increasing subsequnce whose last element is nums[i]\n            dp[i] = max(dp[i], 1 + temp);\n        }\n        // total opeartion needs to  apply\n        return n - *max_element(dp.begin(), dp.end());\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\nclass Solution {\r\n    public int min_operations(int[] nums) {\r\n        int n = nums.length;\r\n        int[] dp = new int[n];\r\n        Arrays.fill(dp, 1);\r\n\r\n        for (int i = 1; i < n; i++) {\r\n            int temp = 0;\r\n            for (int j = 0; j < i; j++) {\r\n                // If nums[i] is greater than nums[j], then it can be added to the set of LIS\r\n                if (nums[i] > nums[j] && nums[i] - nums[j] > i - j - 1) {\r\n                    temp = Math.max(temp, dp[j]);\r\n                }\r\n            }\r\n            // Length of maximum increasing subsequence whose last element is nums[i]\r\n            dp[i] = Math.max(dp[i], 1 + temp);\r\n        }\r\n        // Total operations needed to apply\r\n        return n - Arrays.stream(dp).max().getAsInt();\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to calculate the Longest Increasing Subsequence (LIS)\n    def LIS(self, arr, n):\n        # Initializing a result list with all elements set to 1\n        res = [1] * n\n\n        # Nested loops to compare all pairs of elements in the array\n        for i in range(1, n):\n            for j in range(i):\n                # Checking if the current element is greater than the previous element\n                # and if the difference between the current and previous element is equal to the difference\n                # in their indices. If this condition is satisfied, update the value in the result list.\n                if arr[j] < arr[i] and arr[i] - arr[j] >= i - j:\n                    res[i] = max(res[i], res[j] + 1)\n\n        # Return the result list which represents the length of the longest increasing subsequence for each element.\n        return res\n\n    # Function to find the minimum number of operations required\n    def min_operations(self, nums):\n        # Get the length of the input list\n        n = len(nums)\n\n        # Calculate the Longest Increasing Subsequence\n        lis = self.LIS(nums, n)\n\n        # Return the difference between the input list length and the maximum value in the LIS list\n        return n - max(lis)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to return the minimum number of operations required to make all elements equal.\n    public int min_operations(List<int> nums)\n    {\n        int n = nums.Count;\n        List<int> dp = new List<int>(n);\n        for (int i = 0; i < n; i++)\n        {\n            dp.Add(1);\n        }\n        for (int i = 1; i < n; i++)\n        {\n            int temp = 0;\n            for (int j = 0; j < i; j++)\n            {\n                // If nums[i] is greater than nums[j] then it can be added to the set of LIS\n                if (nums[i] > nums[j])\n                {\n                    if (nums[i] - nums[j] > i - j - 1)\n                    {\n                        temp = Math.Max(temp, dp[j]);\n                    }\n                }\n            }\n            // length of maximum increasing subsequnce whose last element is nums[i]\n            dp[i] = Math.Max(dp[i], 1 + temp);\n        }\n        // total opeartion needs to apply\n        return n - dp.Max();\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    min_operations(nums, n) {\n        let dp = new Array(n);\n        for (let i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for (let i = 1; i < n; i++) {\n            let temp = 0;\n            for (let j = 0; j < i; j++) {\n                // If nums[i] is greater than nums[j] then it can be added to the set of\n                // LIS\n                if (nums[i] > nums[j])\n                    if (nums[i] - nums[j] > i - j - 1) temp = Math.max(temp, dp[j]);\n            }\n            // length of maximum increasing subsequnce whose last element is nums[i]\n            dp[i] = Math.max(dp[i], 1 + temp);\n        }\n        // total opeartion needs to  apply\n        let res = 0;\n        for (let i = 0; i < n; i++) {\n            res = Math.max(res, dp[i]);\n        }\n        return n - res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}