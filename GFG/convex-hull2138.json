{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705586,
            "title": "Convex Hull",
            "titleSlug": "convex-hull2138",
            "content": "<p><span style=\"font-size:18px\">Convex Hull of a set of points, in 2D plane, is a convex polygon with minimum area such that each point lies either on the boundary of polygon or inside it.&nbsp;Now given a set of points the task is to find the convex hull of points.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>points_list = {{1,2},{3,1},{5,6}}\n<strong>Output: </strong>{{1,2},{3,1},{5,6}}</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input : </strong>points_list = {{5,1},{4,4},{1,2}}\n<strong>Output: </strong>{{1,2},{4,4},{5,1}}</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>FindConvexHull()&nbsp;</strong>which takes points_list as input parameter and returns Convex Hull of given points in a list. If not possible returns a list containing -1.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(nlog(n))<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(n) where n = total no. of points</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= n &lt;= 10<sup>4</sup><br />\n-10<sup>5</sup>&nbsp;&lt;= x, y &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of points in a 2D plane, find the convex hull. The convex hull is a convex polygon with the minimum area such that each point either lies on the boundary of the polygon or inside it.  Return the points that form the convex hull. If the input results in an invalid convex hull, return a list containing only -1.",
                "constraints": [
                    "1 <= n <= 10^4 (where n is the number of points)",
                    "-10^5 <= x, y <= 10^5 (where x and y are the coordinates of a point)"
                ],
                "testcases": [
                    {
                        "input": "[[1,2],[3,1],[5,6]]",
                        "output": "[[1,2],[3,1],[5,6]]",
                        "explanation": null
                    },
                    {
                        "input": "[[5,1],[4,4],[1,2]]",
                        "output": "[[1,2],[4,4],[5,1]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Graham Scan&#39;s algorithm for finding convex hull.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Geometric",
                "slug": "geometric"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley",
            "samsung",
            "ola-cabs",
            "goldman-sachs",
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\npublic:\nstruct pt {\n    double x, y;\n};\n\nstatic bool cmp(pt a, pt b) {\n    return a.x < b.x || (a.x == b.x && a.y < b.y);\n}\n\nbool cw(pt a, pt b, pt c) {\n    return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y) < 0;\n}\n\nbool ccw(pt a, pt b, pt c) {\n    return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y) > 0;\n}\n\nvoid convex_hull(vector<pt>& a) {\n    if (a.size() == 1)\n        return;\n\n    sort(a.begin(), a.end(), &cmp);\n    pt p1 = a[0], p2 = a.back();\n    vector<pt> up, down;\n    up.push_back(p1);\n    down.push_back(p1);\n    for (int i = 1; i < (int)a.size(); i++) {\n        if (i == a.size() - 1 || cw(p1, a[i], p2)) {\n            while (up.size() >= 2 && !cw(up[up.size()-2], up[up.size()-1], a[i]))\n                up.pop_back();\n            up.push_back(a[i]);\n        }\n        if (i == a.size() - 1 || ccw(p1, a[i], p2)) {\n            while(down.size() >= 2 && !ccw(down[down.size()-2], down[down.size()-1], a[i]))\n                down.pop_back();\n            down.push_back(a[i]);\n        }\n    }\n\n    a.clear();\n    for (int i = 0; i < (int)up.size(); i++)\n        a.push_back(up[i]);\n    for (int i = down.size() - 2; i > 0; i--)\n        a.push_back(down[i]);\n}\nvector<vector<int>>FindConvexHull(vector<vector<int>>points_list){\n\tvector<pt>a;\n\tfor(auto i: points_list){\n\t\tpt p;\n\t\tp.x = i[0];\n\t\tp.y = i[1];\n\t\ta.push_back(p);\n\t}\n\tconvex_hull(a);\n\tsort(a.begin(), a.end(), &cmp);\n\tvector<vector<int>>ans;\n\tfor(auto i: a){\n\t\tvector<int>v = {int(i.x), int(i.y)};\n\t\tans.push_back(v);\n\t}\n\tif(ans.size() <= 2)return {{-1}};\n\treturn ans;\n}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}