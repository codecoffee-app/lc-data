{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706076,
            "title": "Corona Vaccine",
            "titleSlug": "corona-vaccine--141631",
            "content": "<p><span style=\"font-size: 18px;\">Geek has successfully developed an effective vaccine for the Coronavirus and aims to ensure that every house in Geek Land has access to it. The houses in Geek Land are structured as a <strong>binary tree</strong>, where each node represents a house, and the edges denote direct connections between houses.</span></p>\n<p><span style=\"font-size: 18px;\">Each house that receives a <strong>vaccine kit</strong> can provide coverage to:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">Itself</span></li>\n<li><span style=\"font-size: 18px;\">Its direct parent house (if it exists)</span></li>\n<li><span style=\"font-size: 18px;\">Its immediate child houses (if any exist)</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\">Your task is to determine the minimum number of houses that must be supplied with a vaccine kit to ensure that every house is covered.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [1, 2, 3, N, N, N, 4, N, 5, N, 6]<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/886892/Web/Other/blobid0_1739010580.png\" alt=\"\" width=\"400\" height=\"356\" /></span>\n\n<span style=\"font-size: 18px;\"><strong>Output: </strong>2\n<strong>Explanation: </strong>The vaccine kits should be supplied to house numbers 1 and 5.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [1, 2, 3]<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/886892/Web/Other/blobid1_1739010580.png\" alt=\"\" width=\"337\" height=\"308\" /></span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>1\n<strong>Explanation: </strong>The vaccine kits should be supplied to house number 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>5</sup></span></p>\n<p><span style=\"font-size: 18px;\">1 &le;&nbsp; node-&gt;data&nbsp; &le;&nbsp;</span><span style=\"font-size: 18px;\">10</span><sup>5</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A vaccine has been developed for the Coronavirus, and the goal is to distribute it to every house in Geek Land. The houses are represented as a binary tree, where each node is a house and edges are direct connections. A house with a vaccine kit covers itself, its parent (if any), and its immediate children (if any). Determine the minimum number of houses that need a vaccine kit to cover all houses.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, N, N, N, 4, N, 5, N, 6]",
                        "output": "2",
                        "explanation": "The vaccine kits should be supplied to house numbers 1 and 5 to cover all houses."
                    },
                    {
                        "input": "[1, 2, 3]",
                        "output": "1",
                        "explanation": "The vaccine kit should be supplied to house number 1 to cover all houses."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Greedy approach to take care of the following types of cases<br />\n1. Node is a leaf node<br />\n2. Node is already covered by another node<br />\n3. Node itself has the vaccine kit</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n    int ans;\n\n    // Postorder traversal to check the vaccination status of each node.\n    int post(Node* node) {\n        bool zero = false, two = false;\n        if (node->left == NULL && node->right == NULL)\n            return 0;\n\n        // Checking left subtree\n        if (node->left) {\n            int get = post(node->left);\n            if (get == 0)\n                zero = true;\n            if (get == 2)\n                two = true;\n        }\n\n        // Checking right subtree\n        if (node->right) {\n            int get = post(node->right);\n            if (get == 0)\n                zero = true;\n            if (get == 2)\n                two = true;\n        }\n\n        // Updating the vaccination status of the current node\n        if (zero == true) {\n            ans++;\n            return 2;\n        }\n\n        if (two == true) {\n            return 1;\n        }\n        return 0;\n    }\n\n  public:\n    // Function to calculate the minimum number of vaccines needed.\n    int supplyVaccine(Node* root) {\n        ans = 0;\n        // Calling postorder traversal to check vaccination status of each node.\n        int result = post(root);\n\n        // Checking the vaccination status of the root node to determine the final\n        // result.\n        if (result == 0)\n            return (ans + 1);\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int ans = 0; // variable to store the number of vaccines needed\n\n    // Recursive function to traverse the tree in post-order to check if vaccines are\n    // needed or not\n    public static int post(Node node) {\n        boolean zero = false,\n                two = false; // variables to check if subtree needs vaccine or not\n\n        if (node.left == null &&\n            node.right == null) // base case: if leaf node, no vaccine needed\n            return 0;\n\n        if (node.left != null) // check if left child exists\n        {\n            int get = post(node.left); // recursively traverse left subtree\n            if (get ==\n                0) // if left child needs vaccine (no vaccines provided from left child)\n                zero = true;\n            if (get == 2) // if left child is already vaccinated (already provided\n                          // vaccines from left child)\n                two = true;\n        }\n\n        if (node.right != null) // check if right child exists\n        {\n            int get = post(node.right); // recursively traverse right subtree\n            if (get == 0) // if right child needs vaccine (no vaccines provided from\n                          // right child)\n                zero = true;\n            if (get == 2) // if right child is already vaccinated (already provided\n                          // vaccines from right child)\n                two = true;\n        }\n\n        if (zero == true) // if any child needs vaccine\n        {\n            ans++;    // increment the number of vaccines needed\n            return 2; // return 2 to indicate that this subtree is vaccinated\n        }\n\n        if (two == true) // if any child is already vaccinated\n        {\n            return 1; // return 1 to indicate that this subtree is already vaccinated\n        }\n        return 0; // return 0 to indicate that this subtree needs vaccine\n    }\n\n    // Main function to supply vaccines to the tree and calculate the number of vaccines\n    // needed\n    public static int supplyVaccine(Node root) {\n        ans = 0;                 // reset the number of vaccines needed\n        int result = post(root); // call the post() function to traverse the tree and\n                                 // calculate vaccines needed\n        if (result == 0)         // if the root needs vaccine\n            return ans +\n                1;  // add 1 to the number of vaccines needed (for the root node)\n        return ans; // return the number of vaccines needed\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Recursive function to traverse the tree\n    def traverse(self, n):\n        # Base case: if node is empty, return (0,2)\n        if not n:\n            return (0, 2)\n\n        # Recursively traverse left and right subtrees\n        vaccineKitL, distL = self.traverse(n.left)\n        vaccineKitR, distR = self.traverse(n.right)\n\n        # If maximum distance from the root is 3, increment vaccineKit by 1\n        if max(distL, distR) == 3:\n            return (vaccineKitL + vaccineKitR + 1, 1)\n\n        # Otherwise, return number of vaccine kits and distance\n        return (vaccineKitL + vaccineKitR, 1 + min(distL, distR))\n\n    # Function to calculate minimum number of vaccine kits needed\n    def supplyVaccine(self, root):\n        # Call traverse function to get number of vaccine kits and distance\n        vaccineKit, dist = self.traverse(root)\n\n        # If distance is 3, increment vaccineKit by 1\n        if dist == 3:\n            return vaccineKit + 1\n\n        # Otherwise, return number of vaccine kits\n        return vaccineKit\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    constructor() { this.ans = 0; }\n\n    // Postorder traversal to check the vaccination status of each node\n    post(node) {\n        if (!node) return 1; // A null node is considered covered (state 1)\n\n        let leftState = this.post(node.left);\n        let rightState = this.post(node.right);\n\n        // If any child is uncovered (state 0), place a vaccine here (state 2)\n        if (leftState === 0 || rightState === 0) {\n            this.ans++;\n            return 2; // This node now has a vaccine\n        }\n\n        // If any child has a vaccine (state 2), this node is covered (state 1)\n        if (leftState === 2 || rightState === 2) {\n            return 1; // This node is covered\n        }\n\n        // If both children are covered but don't have vaccines, this node is uncovered\n        // (state 0)\n        return 0;\n    }\n\n    // Function to calculate the minimum number of vaccines needed\n    supplyVaccine(root) {\n        this.ans = 0;\n        let result = this.post(root);\n\n        // If the root itself is uncovered, add one more vaccine\n        if (result === 0) {\n            this.ans++;\n        }\n\n        return this.ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}