{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701219,
            "title": "Count 1's in binary array",
            "titleSlug": "count-1s-in-binary-array-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary sorted non-increasing array of 1s and 0s<strong>. </strong>You need to print the <strong>count of 1s </strong>in the binary array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 8\narr[] = {1,1,1,1,1,0,0,0}\n<strong>Output: </strong>5<strong>\nExplanation: </strong>Number of 1's in given \nbinary array : 1 1 1 1 1 0 0 0 is 5.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 8\narr[] = {1,1,0,0,0,0,0,0}\n<strong>Output: </strong>2<strong>\nExplanation: </strong>Number of 1's in given \nbinary array : 1 1 0 0 0 0 0 0 is 2.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your&nbsp;Task:</strong><br />The task is to complete the function <strong>countOne</strong>() which takes the array arr[] and its size N as inputs and returns the count of 1s in the input array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraint:</strong><br />1 &lt;= N &lt;= 10<sup>6</sup><br />arr[i] = 0,1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted non-increasing binary array of 1s and 0s, determine the total number of 1s present in the array.",
                "constraints": [
                    "1 <= N <= 10^6",
                    "arr[i] = 0, 1"
                ],
                "testcases": [
                    {
                        "input": "N = 8\narr[] = {1,1,1,1,1,0,0,0}",
                        "output": "5",
                        "explanation": "The array contains five 1s."
                    },
                    {
                        "input": "N = 8\narr[] = {1,1,0,0,0,0,0,0}",
                        "output": "2",
                        "explanation": "The array contains two 1s."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Binary Search</p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\n    public:\n        int countOnes(int arr[], int n)\n    {\n        int low = 0, high = n-1;\n        int mid = (low+high)/2;\n        \n        // binary search to count 1s\n        while(low <= high){\n            mid = (low+high)/2;\n            \n            // check if mid is 1\n            if(arr[mid] == 1 && mid+1 < n && arr[mid+1] == 1){\n                low = mid+1;\n            }\n            \n            // if mid is not 0, then iterate for lower half\n            else if(arr[mid] == 0){\n                high = mid-1;\n            }\n            \n            // else iterate for upper half\n            else if(arr[mid] == 1 && ((mid+1 < n && arr[mid+1] == 0) || (mid == n-1))){\n                return mid+1;\n            }\n        }\n        \n        return 0;\n        \n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    \n    public static int countOnes(int arr[], int n){\n        \n        int low = 0, high = n-1;\n        \n        int mid = (low+high)/2;\n        \n        // Binary Search\n        while(low <= high){\n            \n            mid = (low + high)/2;\n            \n            // if mid is 1, then check for upper half\n            if(arr[mid] == 1 && mid+1 < n && arr[mid+1] == 1){\n                low = mid+1;\n            }\n            \n            // if mid is 0, then iterate for upper half\n            else if(arr[mid] == 0){\n                high = mid-1;\n            }\n            \n            // else, iterate for lower half\n            else if(arr[mid] == 1 && ((mid+1 < n && arr[mid+1] == 0) || (mid == n-1))){\n                return mid+1;\n            }\n            \n        }\n        return 0;\n    }\n    \n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def countO(self,arr,low,high): \n          \n        if high>=low: \n              \n            # get the middle index \n            mid = int(low + (high-low)/2)\n              \n            # check if the element at middle index is last 1 \n            if ((mid == high or arr[mid+1]==0) and (arr[mid]==1)): \n                return mid+1\n                  \n            # If element is not last 1, recur for right side \n            if arr[mid]==1: \n                return self.countO(arr, (mid+1), high) \n                  \n            # else recur for left side \n            return self.countO(arr, low, mid-1) \n          \n        return 0\n        \n    def countOnes(self,A,N):\n        return self.countO(A,0,len(A)-1)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    \n    countOnes(arr, N)\n    {\n        let low = 0, high = N-1;\n        let mid = Math.floor((low+high)/2);\n        \n        // binary search to count 1s\n        while(low <= high){\n            mid = Math.floor((low+high)/2);\n            \n            // check if mid is 1\n            if(arr[mid] == 1 && mid+1 < N && arr[mid+1] == 1){\n                low = mid+1;\n            }\n            \n            // if mid is not 0, then iterate for lower half\n            else if(arr[mid] == 0){\n                high = mid-1;\n            }\n            \n            // else iterate for upper half\n            else if(arr[mid] == 1 && ((mid+1 < N && arr[mid+1] == 0) || (mid == N-1))){\n                return mid+1;\n            }\n        }\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}