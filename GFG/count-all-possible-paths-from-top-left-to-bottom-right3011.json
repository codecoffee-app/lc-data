{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705736,
            "title": "Count all possible paths from top left to bottom right",
            "titleSlug": "count-all-possible-paths-from-top-left-to-bottom-right3011",
            "content": "<p><span style=\"font-size: 18px;\">The task&nbsp;is to count all the possible paths from top left to bottom right of a <strong>m&nbsp;</strong>X&nbsp;<strong>n</strong> matrix with the constraints that&nbsp;from each cell you can either move only to right or down.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: m = 2, n = 2\n<strong>Output:</strong>&nbsp;2&nbsp;\n<strong>Explanation</strong>: Two possible ways are RD and DR.  </span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>m = 3, n = 3\n<strong>Output:&nbsp;</strong>6\n<strong>Explanation</strong>: Six possible ways are RRDD, DDRR, RDDR, DRRD, RDRD, DRDR. </span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= m &lt;= 17<br />1 &lt;= n &lt;=17</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of size m x n, determine the number of distinct paths from the top-left cell to the bottom-right cell. You are only allowed to move right or down from each cell.",
                "constraints": [
                    "1 <= m <= 17",
                    "1 <= n <= 17"
                ],
                "testcases": [
                    {
                        "input": "m = 2, n = 2",
                        "output": "2",
                        "explanation": "There are two possible paths: Right-Down (RD) and Down-Right (DR)."
                    },
                    {
                        "input": "m = 3, n = 3",
                        "output": "6",
                        "explanation": "There are six possible paths: RRDD, DDRR, RDDR, DRRD, RDRD, and DRDR."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming to calculate the number of unique paths by iteratively summing the paths from the top and left cells</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "amazon",
            "ola-cabs",
            "walmart",
            "adobe",
            "linkedin",
            "cisco"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to find the number of paths from top left to bottom right.\n    int numberOfPaths(int m, int n) {\n        // creating a 2D array to store the count of paths.\n        int count[m][n];\n\n        // initializing the first column of count array to 1.\n        for (int i = 0; i < m; i++)\n            count[i][0] = 1;\n\n        // initializing the first row of count array to 1.\n        for (int j = 0; j < n; j++)\n            count[0][j] = 1;\n\n        // iterating through the rest of the array.\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++)\n                // computing the count by adding the value from top and left cell.\n                count[i][j] = (count[i - 1][j] + count[i][j - 1]);\n        }\n\n        // returning the count of paths.\n        return count[m - 1][n - 1];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to calculate the number of paths\n    int numberOfPaths(int m, int n) {\n        // Creating a 2D array to store the count of paths\n        // Initializing the first row and column with 1\n        int count[][] = new int[m][n];\n        for (int i = 0; i < m; i++) count[i][0] = 1;\n\n        for (int j = 0; j < n; j++) count[0][j] = 1;\n\n        // Calculating the number of paths for each cell\n        // by adding the count of paths from the above cell and the left cell\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) count[i][j] = count[i - 1][j] + count[i][j - 1];\n        }\n        // Returning the number of paths for the last cell\n        return count[m - 1][n - 1];\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countPaths(self, i, j, m, n, dp):\n        #Base case: if already computed, return the stored value\n        if dp[i][j] != -1:\n            return dp[i][j]\n\n        #Base case: if at the bottom right corner, return 1 because there is only one path\n        if i == m - 1 and j == n - 1:\n            return 1\n        #Base case: if at the bottom row, can only move right\n        elif i == m - 1:\n            dp[i][j] = self.countPaths(i, j + 1, m, n, dp)\n\n        #Base case: if at the rightmost column, can only move down\n        elif j == n - 1:\n            dp[i][j] = self.countPaths(i + 1, j, m, n, dp)\n\n        #Recursive case: compute the number of paths by moving right and down\n        else:\n            dp[i][j] = self.countPaths(i + 1, j, m, n, dp) + self.countPaths(\n                i, j + 1, m, n, dp)\n\n        return dp[i][j]\n\n    def numberOfPaths(self, m, n):\n        #Create a dynamic programming table to store values\n        dp = []\n        for i in range(m):\n            dp.append([-1] * n)\n\n        #Start counting paths from the top left corner\n        return self.countPaths(0, 0, m, n, dp)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number} m\n * @param {number} n\n * @returns {number}\n */\n\nclass Solution {\n    numberOfPaths(m, n) {\n        // initialize a 2D array to store the count of paths\n        let count = [];\n        for (let i = 0; i < m; i++) {\n            count[i] = [];\n        }\n\n        // initialize the first row and first column with 1\n        for (let i = 0; i < m; i++) {\n            count[i][0] = 1;\n        }\n        for (let j = 0; j < n; j++) {\n            count[0][j] = 1;\n        }\n\n        // calculate the count of paths for each cell\n        for (let i = 1; i < m; i++) {\n            for (let j = 1; j < n; j++) {\n                count[i][j] = (count[i - 1][j] + count[i][j - 1]);\n            }\n        }\n\n        // return the count of paths for the last cell\n        return count[m - 1][n - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}