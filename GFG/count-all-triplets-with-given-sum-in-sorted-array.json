{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 882859,
            "title": "Count all triplets with given sum in sorted array",
            "titleSlug": "count-all-triplets-with-given-sum-in-sorted-array",
            "content": "<p dir=\"ltr\"><span >Given a sorted array&nbsp;<strong>arr[]</strong> and a <strong>target</strong> value, the task is to count triplets <strong>(i, j, k)</strong> of valid indices, such that <strong>arr[i] + arr[j] + arr[k] = target</strong> and <strong>i &lt; j &lt; k</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [-3, -1, -1, 0, 1, 2], target = -2</span><br /><span ><strong>Output: </strong>4</span><br /><span ><strong>Explanation</strong>: Four triplets that add up to -2 are:</span><br /><span >arr[0] + arr[3] + arr[4] = (-3) + 0 + (1) = -2</span><br /><span >arr[0] + arr[1] + arr[5] = (-3) + (-1) + (2) = -2</span><br /><span >arr[0] + arr[2] + arr[5] = (-3) + (-1) + (2) = -2</span><br /><span >arr[1] + arr[2] + arr[3] = (-1) + (-1) + (0) = -2</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [-2, 0, 1, 1, 5], target = 1</span><br /><span ><strong>Output:</strong> 0</span><br /><span ><strong>Explanation</strong>: There is no triplet whose sum is equal to 1. </span></pre>\n<p><span ><strong>Constraints:<br /></strong></span><span >3 &le; arr.size() &le; 10<sup>4<br /></sup></span><span ><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">-10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5</sup> &le; arr[i], target &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr[]` and a `target` value, find the number of triplets `(i, j, k)` of valid indices such that `arr[i] + arr[j] + arr[k] = target` and `i < j < k`.",
                "constraints": [
                    "3 \u2264 arr.size() \u2264 10^4",
                    "-10^5 \u2264 arr[i], target \u2264 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [-3, -1, -1, 0, 1, 2], target = -2",
                        "output": "4",
                        "explanation": "The triplets that sum to -2 are: (-3, 0, 1), (-3, -1, 2), (-3, -1, 2), and (-1, -1, 0)."
                    },
                    {
                        "input": "arr[] = [-2, 0, 1, 1, 5], target = 1",
                        "output": "0",
                        "explanation": "There are no triplets that sum to 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int countTriplets(vector<int> &arr, int target) {\n        int n = arr.size();\n        int res = 0;\n\n        // Iterate through each element as the first element of the triplet\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1, right = n - 1;\n\n            // Use two-pointer approach to find triplets\n            while (left < right) {\n\n                // Calculate the sum of the triplet\n                int sum = arr[i] + arr[left] + arr[right];\n\n                // If sum is smaller, move to bigger values\n                if (sum < target) {\n                    left += 1;\n                }\n\n                // If sum is greater, move to smaller values\n                else if (sum > target) {\n                    right -= 1;\n                } else if (sum == target) {\n                    int ele1 = arr[left], ele2 = arr[right];\n                    int cnt1 = 0, cnt2 = 0;\n\n                    // Count frequency of the current value at 'left'\n                    while (left <= right && arr[left] == ele1) {\n                        left++;\n                        cnt1++;\n                    }\n\n                    // Count frequency of the current value at 'right'\n                    while (left <= right && arr[right] == ele2) {\n                        right--;\n                        cnt2++;\n                    }\n\n                    // If both the elements are same, then count of\n                    // pairs = the number of ways to choose 2\n                    // elements among cnt1 elements\n                    if (ele1 == ele2)\n                        res += (cnt1 * (cnt1 - 1)) / 2;\n\n                    // If the elements are different, then count of\n                    // pairs = product of the count of both elements\n                    else\n                        res += (cnt1 * cnt2);\n                }\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int countTriplets(int[] arr, int target) {\n        int n = arr.length;\n        int res = 0;\n\n        // Iterate through each element as the first element\n        // of the triplet\n        for (int i = 0; i < n - 2; i++) {\n            int left = i + 1, right = n - 1;\n\n            // Use two-pointer approach to find triplets\n            while (left < right) {\n\n                // Calculate the sum of the triplet\n                int sum = arr[i] + arr[left] + arr[right];\n\n                // If sum is smaller, move to bigger values\n                if (sum < target) {\n                    left += 1;\n                }\n\n                // If sum is greater, move to smaller values\n                else if (sum > target) {\n                    right -= 1;\n                }\n\n                // If sum is equal, check for frequency of elements\n                else if (sum == target) {\n                    int ele1 = arr[left], ele2 = arr[right];\n                    int cnt1 = 0, cnt2 = 0;\n\n                    // Count frequency of the current value at 'left'\n                    while (left <= right && arr[left] == ele1) {\n                        left++;\n                        cnt1++;\n                    }\n\n                    // Count frequency of the current value at 'right'\n                    while (left <= right && arr[right] == ele2) {\n                        right--;\n                        cnt2++;\n                    }\n\n                    // If both the elements are the same, then count\n                    // of pairs = the number of ways to choose 2\n                    // elements among cnt1 elements\n                    if (ele1 == ele2) res += (cnt1 * (cnt1 - 1)) / 2;\n\n                    // If the elements are different, then count of\n                    // pairs = product of the count of both elements\n                    else\n                        res += (cnt1 * cnt2);\n                }\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countTriplets(self, arr, target):\n        n = len(arr)\n        res = 0\n\n        # Iterate through each element as the first element of the triplet\n        for i in range(n - 2):\n            left = i + 1\n            right = n - 1\n\n            # Use two-pointer approach to find triplets\n            while left < right:\n\n                # Calculate the sum of the triplet\n                sum = arr[i] + arr[left] + arr[right]\n\n                # If sum is smaller, move to bigger values\n                if sum < target:\n                    left += 1\n\n                # If sum is greater, move to smaller values\n                elif sum > target:\n                    right -= 1\n\n                # If sum is equal to target\n                else:\n                    ele1 = arr[left]\n                    ele2 = arr[right]\n                    cnt1 = 0\n                    cnt2 = 0\n\n                    # Count frequency of the current value at 'left'\n                    while left <= right and arr[left] == ele1:\n                        left += 1\n                        cnt1 += 1\n\n                    # Count frequency of the current value at 'right'\n                    while left <= right and arr[right] == ele2:\n                        right -= 1\n                        cnt2 += 1\n\n                    # If both the elements are the same, then count of pairs\n                    # = the number of ways to choose 2 elements among cnt1 elements\n                    if ele1 == ele2:\n                        res += (cnt1 * (cnt1 - 1)) // 2\n\n                    # If the elements are different, then count of pairs\n                    # = product of the count of both elements\n                    else:\n                        res += (cnt1 * cnt2)\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countTriplets(arr, target) {\n        let n = arr.length;\n        let res = 0;\n\n        // Iterate through each element as the first element of the triplet\n        for (let i = 0; i < n - 2; i++) {\n            let left = i + 1, right = n - 1;\n\n            // Use two-pointer approach to find triplets\n            while (left < right) {\n\n                // Calculate the sum of the triplet\n                let sum = arr[i] + arr[left] + arr[right];\n\n                // If sum is smaller, move to bigger values\n                if (sum < target) {\n                    left += 1;\n                }\n\n                // If sum is greater, move to smaller values\n                else if (sum > target) {\n                    right -= 1;\n                } else if (sum === target) {\n                    let ele1 = arr[left], ele2 = arr[right];\n                    let cnt1 = 0, cnt2 = 0;\n\n                    // Count frequency of the current value at 'left'\n                    while (left <= right && arr[left] === ele1) {\n                        left++;\n                        cnt1++;\n                    }\n\n                    // Count frequency of the current value at 'right'\n                    while (left <= right && arr[right] === ele2) {\n                        right--;\n                        cnt2++;\n                    }\n\n                    // If both the elements are same, then count of\n                    // pairs = the number of ways to choose 2\n                    // elements among cnt1 elements\n                    if (ele1 === ele2) res += (cnt1 * (cnt1 - 1)) / 2;\n\n                    // If the elements are different, then count of\n                    // pairs = product of the count of both elements\n                    else\n                        res += (cnt1 * cnt2);\n                }\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}