{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714078,
            "title": "Count Cyclic Paths",
            "titleSlug": "count-cyclic-paths--170647",
            "content": "<p><span style=\"font-size:18px\">Given a&nbsp;<strong>triangular pyramid</strong>&nbsp;with its vertices marked as&nbsp;<strong>O, A, B and C</strong>&nbsp;and a number&nbsp;<strong>N</strong>, the task is to find the number of ways such that a person starting from the origin&nbsp;<strong>O</strong>&nbsp;initially, reaches back to the origin in <strong>N</strong> steps. In a single step, a person can go to any of its adjacent vertices.</span></p>\r\n\r\n<p><img alt=\"Lightbox\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20200520133822/pyramid1.jpg\" /></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 1\r\n<strong>Output:</strong>&nbsp;0\r\n<strong>Explanation</strong>: The minimum length of\r\na cyclic path is 2.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 2\r\n<strong>Output:&nbsp;</strong>3\r\n<strong>Explanation</strong>: The three paths are :\r\nO-A-O, O-B-O, O-C-O</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>countPaths()</strong>&nbsp;which takes&nbsp;an integer N<strong>&nbsp;</strong>as input parameter&nbsp;and returns the number of possible paths. Since the answer may be big, return it&nbsp;modulo&nbsp;<strong>(10^9+7)</strong>.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le;&nbsp;N &le; 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find the transition of number of paths from O to A,B and C, and vice- versa.</span></p>",
            "<p><span style=\"font-size:18px\">Since we&nbsp;just need previous step values to compute the present step values, so by just taking 2&nbsp;variables to store the previous step values, we can solve the given problem in constant space.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "oyo-rooms"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{   \npublic:\n    // Function to count the number of paths\n    int countPaths(int N){\n        // Set the modulo value\n        long long int mod=1000000007;\n        // Initialize the low and high values\n        long long int low=1l,high=0l;\n        long long int tlow=1l,thigh=0l;\n        // Iterate from 2 to N\n        for(int i=2;i<=N;i++)\n        {\n            // Calculate the new high and low values using the previous values\n            high=(3*tlow)%mod;\n            low=(((2*tlow)%mod)+thigh)%mod;\n            // Update the tlow and thigh values\n            tlow=low;\n            thigh=high;\n        }\n        // Return the high value as the number of paths\n        return (int)high;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    public static int countPaths(int N){\n        // code here\n        \n        // initialize variables\n        long mod=1000000007l;\n        long low=1l,high=0l;\n        long tlow=1l,thigh=0l;\n        \n        // iterate from 2 to N\n        for(int i=2;i<=N;i++){\n            \n            // calculate the new high value\n            high=(3*tlow)%mod;\n            \n            // calculate the new low value\n            low=(((2*tlow)%mod)+thigh)%mod;\n            \n            // update temporary low and high variables\n            tlow=low;\n            thigh=high;\n        }\n        \n        // return the final high value\n        return (int)high;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def countPaths (self, N):\r\n        # code here \r\n        mod=1000000007\r\n        low,high = 1,0\r\n        tlow,thigh = 1,0\r\n        for i in range(2,N+1):\r\n            high=(3*tlow)%mod\r\n            low=(((2*tlow)%mod)+thigh)%mod\r\n            tlow=low\r\n            thigh=high\r\n        return high",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to count the total number of possible paths\n    countPaths(N) {\n        // code here \n        let mod=1000000007;\n        let low=1,high=0;\n        let tlow=1,thigh=0;\n        for (let i = 2; i <= N; i++) {\n            high=(3*tlow)%mod;\n            low=(((2*tlow)%mod)+thigh)%mod;\n            tlow=low;\n            thigh=high;\n        }\n        return high;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public int countPaths(int N)\n    {\n        // Set the modulo value\n        long mod=1000000007;\n        // Initialize the low and high values\n        long low=1L,high=0L;\n        long tlow=1L,thigh=0L;\n        // Iterate from 2 to N\n        for(int i=2;i<=N;i++)\n        {\n            // Calculate the new high and low values using the previous values\n            high=(3*tlow)%mod;\n            low=(((2*tlow)%mod)+thigh)%mod;\n            // Update the tlow and thigh values\n            tlow=low;\n            thigh=high;\n        }\n        // Return the high value as the number of paths\n        return (int)high;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}