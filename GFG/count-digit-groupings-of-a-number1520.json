{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704677,
            "title": "Count digit groupings of a number",
            "titleSlug": "count-digit-groupings-of-a-number1520",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>str</strong>&nbsp;consisting of digits, you can divide it into <strong>sub-groups</strong> by separating the string into substrings. For example, \"112\" can be divided as {\"1\", \"1\", \"2\"}, {\"11\", \"2\"}, {\"1\", \"12\"}, and {\"112\"}.</span></p>\n<p><span style=\"font-size: 18px;\">A v<strong>alid grouping</strong> can be done if you are able to divide <strong>sub-groups</strong> where the <strong>sum of digits</strong> in a <strong>sub-group </strong>is <strong>less than or equal to</strong> the <strong>sum of the digits </strong>of the <strong>sub-group </strong>immediately right to it. Your task is to determine the <strong>total number </strong>of <strong>valid groupings</strong> that could be done for a given string.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:&nbsp;</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>str = \"1119\"\n<strong>Output: <br /></strong>7\n<strong>Explanation: <br /></strong>One valid grouping is {\"1\", \"11\", \"9\"}.<br />Sum of digits of first sub-group (\"1\") is 1,<br />for the second sub-group (\"11\"), it is 2,<br />and for the third one (\"9\"), it is 9.<br />As the sum of digits of the sub-groups is <br />in increasing order, it forms a valid grouping.<br /></span><span style=\"font-size: 18px;\">Other valid grouping are {\"1\", \"119\"}, {\"1\",\"1\",\"19\"}, \n{\"1\",\"1\",\"1\",\"9\"}, {\"11\",\"19\"}, {\"111\",\"9\"} and {\"1119\"}\nare six other valid groupings.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>str = \"12\"\n<strong>Output: <br /></strong>2\n<strong>Explanation: <br /></strong>{\"1\",\"2\"} and {\"12\"} are two valid groupings.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>TotalCount()</strong>&nbsp;which takes the string <strong>str </strong>as input parameter and returns total possible groupings.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;O(N<sup>3</sup>)</strong> where N is the length of the string.<br /><strong>Expected Space Complexity: O(N<sup>2</sup>)</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 100<br />str<sub>i&nbsp;</sub>&isin; {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n\tpublic:\r\n\t \r\n\t// A memoization table to store results of subprobllems\r\n\t// length of string is 40 and maximum sum will\r\n\t// be 9*40 = 360.\r\n\tvector<vector<int>>dp;\r\n\t \r\n\t// Function to find the count of splits with given condition\r\n\tint countGroups(int position, int previous_sum, int length,\r\n\t                string num)\r\n\t{\r\n\t    /* Terminating Condition */\r\n\t    if (position == length)\r\n\t        return 1;\r\n\t \r\n\t    /* If already evaluated for a given sub problem then\r\n\t      return the value */\r\n\t    if (dp[position][previous_sum] != -1)\r\n\t        return dp[position][previous_sum];\r\n\t \r\n\t    // countGroups for current sub-group is 0\r\n\t    dp[position][previous_sum] = 0;\r\n\t \r\n\t    int res = 0;\r\n\t    int sum = 0; // sum of digits\r\n\t \r\n\t    // Traverse all digits from current position to rest\r\n\t    // of the length of string\r\n\t    for (int i = position; i < length; i++)\r\n\t    {\r\n\t        sum += (num[i] - '0');\r\n\t \r\n\t        // If forward_sum is greater than the previous sum,\r\n\t        // then call the method again\r\n\t        if (sum >= previous_sum)\r\n\t \r\n\t           // Note : We pass current sum as previous sum\r\n\t           res += countGroups(i + 1, sum, length, num);\r\n\t    }\r\n\t \r\n\t    dp[position][previous_sum] = res;\r\n\t \r\n\t    // total number of subgroups till current position\r\n\t    return res;\r\n\t}\r\n\tint TotalCount(string str){\r\n\t\tint n = str.size();\r\n\t\tdp.assign(n,vector<int>(n*9+1,-1));\r\n\t\treturn countGroups(0,0,n,str);\r\n\t}\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//User function Template for Java\r\nclass Solution\r\n{\r\n    static int MAX = 400;\r\n    // A memoization table to store\r\n    // results of subproblems length\r\n    // of string is 40 and maximum\r\n    // sum will be 9 * 40 = 360.\r\n    static int dp[][] = new int[MAX][9 * MAX + 1];\r\n    static int countGroups(int position,\r\n                int previous_sum,\r\n                int length, String num)\r\n    {\r\n        // Terminating Condition\r\n        if (position == length)\r\n            return 1;\r\n \r\n        // If already evaluated for\r\n        // a given sub problem then\r\n        // return the value\r\n        if (dp[position][previous_sum] != -1)\r\n            return dp[position][previous_sum];\r\n \r\n        // countGroups for current\r\n        // sub-group is 0\r\n        dp[position][previous_sum] = 0;\r\n \r\n        int res = 0;\r\n     \r\n        // sum of digits\r\n        int sum = 0;\r\n \r\n        // Traverse all digits from\r\n        // current position to rest\r\n        // of the length of string\r\n        for (int i = position; i < length; i++)\r\n        {\r\n            sum += (num.charAt(i) - '0');\r\n \r\n            // If forward_sum is greater\r\n            // than the previous sum,\r\n            // then call the method again\r\n            if (sum >= previous_sum)\r\n    \r\n            // Note : We pass current\r\n            // sum as previous sum\r\n            res += countGroups(i + 1, sum,\r\n                            length, num);\r\n        }\r\n \r\n        dp[position][previous_sum] = res;\r\n \r\n        // total number of subgroups\r\n        // till current position\r\n        return res;\r\n    }\r\n    public int TotalCount(String str)\r\n    {\r\n        // Code here\r\n        int n = str.length();\r\n        // Initialize dp table\r\n        for(int i = 0; i < dp.length; i++)\r\n        {\r\n            for(int j = 0;j < 9 * MAX + 1; j++){\r\n                dp[i][j] = -1;\r\n            }\r\n        }\r\n        return countGroups(0, 0, n, str);\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def TotalCount(self, s):\n        # Code here\n        n = len(s)  #Get the length of the string\n        maxl = 100  #Set the maximum length for dp array\n        dp = [[-1 for i in range(9 * maxl + 1)]\n              for i in range(maxl)]  #Initialize dp array with -1\n\n        # Define a recursive helper function\n        def helper(p, psum):\n            if p == n:  # If we have reached the end of the string\n                return 1  # Return 1 to indicate a valid combination\n            if dp[p][psum] != (-1):  # If the value is already evaluated\n                return dp[p][psum]  # Return the stored value\n\n            ans = 0\n            sumd = 0\n            dp[p][psum] = 0\n\n            # Iterate over the string starting from position p\n            for i in range(p, n):\n                sumd += int(\n                    s[i])  # Calculate the sum of digits from position p to i\n                if sumd >= psum:  # If the sum is greater than or equal to psum\n                    ans += helper(i + 1,\n                                  sumd)  # Recursively call the helper function\n            dp[p][psum] = (ans)  # Store the result in dp array\n            return dp[p][psum]  # Return the result\n\n        return helper(0, 0)  # Call the helper function to get the final answer\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    // A memoization table to store results of subprobllems\n    // length of string is 40 and maximum sum will\n    // be 9*40 = 360.\n    int[][] dp;\n\n    // Function to find the count of splits with given condition\n    public int countGroups(int position, int previous_sum, int length, string num)\n    {\n        /* Terminating Condition */\n        if (position == length)\n            return 1;\n\n        /* If already evaluated for a given sub problem then\n          return the value */\n        if (dp[position][previous_sum] != -1)\n            return dp[position][previous_sum];\n\n        // countGroups for current sub-group is 0\n        dp[position][previous_sum] = 0;\n\n        int res = 0;\n        int sum = 0; // sum of digits\n\n        // Traverse all digits from current position to rest\n        // of the length of string\n        for (int i = position; i < length; i++)\n        {\n            sum += (num[i] - '0');\n\n            // If forward_sum is greater than the previous sum,\n            // then call the method again\n            if (sum >= previous_sum)\n\n               // Note : We pass current sum as previous sum\n               res += countGroups(i + 1, sum, length, num);\n        }\n\n        dp[position][previous_sum] = res;\n\n        // total number of subgroups till current position\n        return res;\n    }\n    \n    //Complete this function\n    //Function to count the total number of times 'z' appears in the given string.\n    public int TotalCount(string str)\n    {\n        int n = str.Length;\n        dp = new int[n][];\n        for (int i = 0; i < n; i++)\n        {\n            dp[i] = new int[n * 9 + 1];\n            for (int j = 0; j < n * 9 + 1; j++)\n            {\n                dp[i][j] = -1;\n            }\n        }\n        return countGroups(0, 0, n, str);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to count the total number of times digit 1 appears \n\t//in the numbers from 0 to n.\n    TotalCount(s)\n    {\n        let n = s.length; //Get the length of the string\n        let maxl = 100; //Set the maximum length for dp array\n        let dp = Array.from(Array(maxl), () => Array(9 * maxl + 1).fill(-1)); //Initialize dp array with -1\n\n        // Define a recursive helper function\n        let helper = function(p, psum) {\n            if (p === n) { // If we have reached the end of the string\n                return 1; // Return 1 to indicate a valid combination\n            }\n            if (dp[p][psum] !== -1) { // If the value is already evaluated\n                return dp[p][psum]; // Return the stored value\n            }\n\n            let ans = 0;\n            let sumd = 0;\n            dp[p][psum] = 0;\n\n            // Iterate over the string starting from position p\n            for (let i = p; i < n; i++) {\n                sumd += parseInt(s[i]); // Calculate the sum of digits from position p to i\n                if (sumd >= psum) { // If the sum is greater than or equal to psum\n                    ans += helper(i + 1, sumd); // Recursively call the helper function\n                }\n            }\n            dp[p][psum] = ans; // Store the result in dp array\n            return dp[p][psum]; // Return the result\n        }\n\n        return helper(0, 0); // Call the helper function to get the final answer\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}