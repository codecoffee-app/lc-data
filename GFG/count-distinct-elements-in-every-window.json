{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700444,
            "title": "Count distinct elements in every window",
            "titleSlug": "count-distinct-elements-in-every-window",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer array <strong>arr[]</strong>&nbsp;and a number <strong>k</strong>. Find the count of distinct elements in every window of size <strong>k</strong> in the array.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><span style=\"font-size: 18px;\"> arr[] = [1, 2, 1, 3, 4, 2, 3], k = 4\n<strong>Output:  </strong>[3, 4, 4, 3]<strong>\nExplanation: </strong>Window 1 of size k = 4 is 1 2 1 3. Number of distinct elements in this window are 3.&nbsp;\nWindow 2 of size k = 4 is 2 1 3 4. </span><span style=\"font-size: 18px;\">Number of distinct elements in this window are 4.</span>\n<span style=\"font-size: 18px;\">Window 3&nbsp;of size k = 4 is&nbsp;1 3 4 2.&nbsp;</span><span style=\"font-size: 18px;\">Number of distinct elements in this window are 4.</span>\n<span style=\"font-size: 18px;\">Window 4&nbsp;of size k = 4 is&nbsp;</span><span style=\"font-size: 18px;\">3 4 2 3. Number of distinct elements in this window are 3.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [4, 1, 1], k = 2\n<strong>Output: </strong>[2, 1]<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Window 1 of size k = 2 is 4 1. Number of distinct elements in this window are 2. <br /></span>Window 2 of size k = 2 is 1 1. <span style=\"font-size: 18px;\">Number of distinct elements in this window is 1. </span></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1, 1, 1, 1], k = 3\n<strong>Output: </strong>[1, 1, 1]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= k &lt;= arr.size() &lt;= 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">1 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]` and a window size `k`, find the count of distinct elements in every window of size `k` in the array.",
                "constraints": [
                    "1 <= k <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 1, 3, 4, 2, 3], k = 4",
                        "output": "[3, 4, 4, 3]",
                        "explanation": "For the window [1, 2, 1, 3], the distinct elements are 1, 2, and 3.  For the window [2, 1, 3, 4], the distinct elements are 2, 1, 3, and 4.  For the window [1, 3, 4, 2], the distinct elements are 1, 3, 4, and 2. For the window [3, 4, 2, 3], the distinct elements are 3, 4, and 2."
                    },
                    {
                        "input": "arr[] = [4, 1, 1], k = 2",
                        "output": "[2, 1]",
                        "explanation": "For the window [4, 1], the distinct elements are 4 and 1. For the window [1, 1], the only distinct element is 1."
                    },
                    {
                        "input": "arr[] = [1, 1, 1, 1, 1], k = 3",
                        "output": "[1, 1, 1]",
                        "explanation": "For each window of size 3, the only distinct element is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a hash map and calculate the number of distinct elements of every window of size k.</span></p>",
            "<p><span >An&nbsp;<strong>Efficient Solution</strong>&nbsp;is to use the count of the previous window while sliding the window. The idea is to create a hash map that stores elements of the current window. When we slide the window, we remove an element from the hash and add an element. We also keep track of distinct elements. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> countDistinct(vector<int> &arr, int k) {\n        unordered_map<int, int> um;\n        int n = arr.size();\n        vector<int> result;\n\n        // count number of distinct elements for first window of size k\n        for (int i = 0; i < k; i++)\n            um[arr[i]]++;\n\n        result.push_back(um.size());\n\n        // calculate answer for rest of the windows\n        for (int i = 1; i < n - k + 1; i++) {\n            um[arr[i - 1]]--;\n            if (um[arr[i - 1]] <= 0)\n                um.erase(arr[i - 1]);\n\n            um[arr[i + k - 1]]++;\n\n            result.push_back(um.size());\n        }\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    ArrayList<Integer> countDistinct(int arr[], int k) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n        int n = arr.length;\n        // count number of distinct elements for first window of size k\n        for (int i = 0; i < k; i++) {\n            if (hm.containsKey(arr[i]))\n                hm.put(arr[i], hm.get(arr[i]) + 1);\n            else\n                hm.put(arr[i], 1);\n        }\n        result.add(hm.size());\n\n        // calculate answer for rest of the windows\n        for (int i = k; i < n; i++) {\n            // if frequency of last element of the window is greater than 1\n            // then decrease the frequency\n            if (hm.get(arr[i - k]) > 1) {\n                hm.put(arr[i - k], hm.get(arr[i - k]) - 1);\n                // insert new element into the window\n                if (hm.containsKey(arr[i]))\n                    hm.put(arr[i], hm.get(arr[i]) + 1);\n                else\n                    hm.put(arr[i], 1);\n            } else {\n                // remove last element from window\n                hm.remove(arr[i - k]);\n                // insert new element into the window\n                if (hm.containsKey(arr[i]))\n                    hm.put(arr[i], hm.get(arr[i]) + 1);\n                else\n                    hm.put(arr[i], 1);\n            }\n\n            result.add(hm.size());\n        }\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from collections import defaultdict\n\n\nclass Solution:\n\n    def countDistinct(self, arr, k):\n        # Creates an empty hashmap mp\n        mp = defaultdict(lambda: 0)\n        n = len(arr)\n        # initialize distinct element\n        # count for current window\n        dist_count = 0\n        # Traverse the first window and store count\n        # of every element in hash map\n        for i in range(k):\n            if mp[arr[i]] == 0:\n                dist_count += 1\n            mp[arr[i]] += 1\n\n        res = []\n        # Print count of first window\n        res.append(dist_count)\n\n        # Traverse through the remaining array\n        for i in range(k, n):\n\n            # Remove first element of previous window\n            # If there was only one occurrence,\n            # then reduce distinct count.\n            if mp[arr[i - k]] == 1:\n                dist_count -= 1\n            mp[arr[i - k]] -= 1\n\n            # Add new element of current window\n            # If this element appears first time,\n            # increment distinct element count\n            if mp[arr[i]] == 0:\n                dist_count += 1\n            mp[arr[i]] += 1\n\n            # Print count of current window\n            res.append(dist_count)\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countDistinct(arr, k) {\n        let result = [];\n        let um = new Map();\n        let n = arr.length;\n\n        // Count number of distinct elements for the first window of size k\n        for (let i = 0; i < k; i++) {\n            um.set(arr[i], (um.get(arr[i]) || 0) + 1);\n        }\n\n        result.push(um.size);\n\n        // Calculate the result for the rest of the windows\n        for (let i = 1; i <= n - k; i++) {\n            // Remove the element going out of the window\n            let prevElement = arr[i - 1];\n            if (um.get(prevElement) === 1) {\n                um.delete(prevElement);\n            } else {\n                um.set(prevElement, um.get(prevElement) - 1);\n            }\n\n            // Add the new element coming into the window\n            let newElement = arr[i + k - 1];\n            um.set(newElement, (um.get(newElement) || 0) + 1);\n\n            result.push(um.size);\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}