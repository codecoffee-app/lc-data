{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705046,
            "title": "Count Divisors of Factorial",
            "titleSlug": "count-divisors-of-factorial4508",
            "content": "<div class=\"entry-content\">\n<p><span style=\"font-size:18px\">Given a number <strong>N</strong>, count total number of divisors of <strong>N!</strong>.</span></p>\n</div>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input :</strong> N = 4\n<strong>Output:</strong> 8\n<strong>Explaination:</strong> 4! is 24. Divisors of 24 are \n1, 2, 3, 4, 6, 8, 12 and 24.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input :</strong> N = 5\n<strong>Output :</strong> 16\n<strong>Explaination:</strong> 5! is 120. Divisors of 120 are \n1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 20, 24 30, \n40, 60 and 120.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>totalDivisors()</strong> which takes N as input parameter and returns total number of divisors of N!.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*logN)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 100</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We can get total divisors of number x only from the prime factors of that number.&nbsp;</span></p>",
            "<p><span style=\"font-size:18px\">If a number N&nbsp;= P1<sup>e1</sup>&nbsp;x P2<sup>e2</sup>&nbsp;x ... , where P1, P2 are all prime numbers, then total number of&nbsp; divisors are<br />\n(e1 + 1)x(e2+1)x . . .</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the total number of divisors of N\n    long long totalDivisors(int N){\n        // If N is 1 or 2, return N as the total number of divisors\n        if(N <= 2)\n            return (long long)N;\n        long long ans = 1;\n        unordered_map<int, int> mp;\n        // Loop through all numbers from 2 to N\n        for(int i = 2;i <= N;i++){\n            int x = i;\n            // Find prime factors of N\n            for(int j = 2;j <= sqrt(x);j++){\n                while(x%j == 0){\n                    x /= j;\n                    mp[j]++;\n                }\n            }\n            // If there is any remaining prime factor greater than sqrt(N)\n            if(x >= 2)\n                mp[x]++;\n        }\n        // Multiply the count of each prime factor + 1 to get the total number of divisors\n        for(auto it = mp.begin();it != mp.end();it++)\n            ans *= (it->second + 1);\n        // Return the total number of divisors of N\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution{\n    // Complete this function\n    public long totalDivisors(int N){\n        if(N <= 2)\n            return (long)N;\n        \n        long ans = 1;\n        Dictionary<int, int> mp = new Dictionary<int, int>();\n        \n        for(int i = 2;i <= N;i++){\n            int x = i;\n            for(int j = 2;j <= Math.Sqrt(x);j++){\n                while(x%j == 0){\n                    x /= j;\n                    if(!mp.ContainsKey(j)){\n                        mp[j] = 0;\n                    }\n                    mp[j]++;\n                }\n            }\n            \n            if(x >= 2){\n                if(!mp.ContainsKey(x)){\n                    mp[x] = 0;\n                }\n                mp[x]++;\n            }\n        }\n        \n        foreach(var item in mp){\n            ans *= (item.Value + 1);\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}