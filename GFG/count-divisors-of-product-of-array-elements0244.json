{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703720,
            "title": "Count divisors of product of array elements",
            "titleSlug": "count-divisors-of-product-of-array-elements0244",
            "content": "<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\">Given an array <strong>arr</strong>, the task is to find the count of factors of a number x which is a product of all array elements</span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Input: </strong>arr[] = [2, 4, 6]\n<strong>Output: </strong>10\n<strong>Explanation: </strong>2 * 4 * 6 = 48, the factors of 48 are 1, 2, 3, 4, 6, 8, 12, 16, 24, 48 whose count is 10.</span></pre>\n<pre><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Input: </strong>arr[] = [3, 5, 7]\n<strong>Output: </strong>8\n<strong>Explanation: </strong>3 * 5 * 7 = 105, the factors of 105 are 1, 3, 5, 7, 15, 21, 35, 105 whose count is 8.</span></pre>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Expected Time Complexity:</strong> O(n. sqrt(n))<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Constraints:</strong><br />2&lt;= arr.size() &lt;=10<sup>4</sup><br />1&lt;= arr[i] &lt;=10<sup>2</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, `arr`, determine the number of factors of the product of all elements in the array.",
                "constraints": [
                    "2 <= arr.size() <= 10^4",
                    "1 <= arr[i] <= 10^2"
                ],
                "testcases": [
                    {
                        "input": "[2, 4, 6]",
                        "output": "10",
                        "explanation": "The product of the array elements is 2 * 4 * 6 = 48. The factors of 48 are 1, 2, 3, 4, 6, 8, 12, 16, 24, and 48, resulting in a total of 10 factors."
                    },
                    {
                        "input": "[3, 5, 7]",
                        "output": "8",
                        "explanation": "The product of the array elements is 3 * 5 * 7 = 105. The factors of 105 are 1, 3, 5, 7, 15, 21, 35, and 105, resulting in a total of 8 factors."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Find prime factors of all array elements using the Sieve of Eratosthenes. Store factor counts in a map, then calculate divisors by multiplying (count + 1) for each prime factor.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to find all prime numbers up to largest using Sieve of Eratosthenes.\n    void SieveOfEratosthenes(int largest, vector<int>& prime) {\n        // Boolean array to store whether a number is prime or not.\n        vector<bool> isPrime(largest + 1, true);\n\n        // Loop to iterate through numbers up to the square root of the largest.\n        for (int p = 2; p * p <= largest; p++) {\n            // Check if current number is prime.\n            if (isPrime[p]) {\n                // Mark all multiples of the prime number as non-prime.\n                for (int i = p * 2; i <= largest; i += p)\n                    isPrime[i] = false;\n            }\n        }\n\n        // Add all prime numbers to the vector.\n        for (int p = 2; p <= largest; p++) {\n            if (isPrime[p])\n                prime.push_back(p);\n        }\n    }\n\n    // Function to count the number of divisors.\n    long long countDivisorsMult(vector<int>& arr) {\n        // Finding the largest number in the array.\n        int largest = *max_element(arr.begin(), arr.end());\n        vector<int> prime;\n\n        // Finding all prime numbers up to the largest number.\n        SieveOfEratosthenes(largest, prime);\n\n        // HashMap to store the count of prime factors.\n        unordered_map<int, int> mp;\n\n        // Loop to iterate through the array elements.\n        for (int i = 0; i < arr.size(); i++) {\n            // Loop to iterate through all prime numbers.\n            for (int j = 0; j < prime.size(); j++) {\n                // Check if the current element has any prime factor.\n                while (arr[i] > 1 && arr[i] % prime[j] == 0) {\n                    // If it has a prime factor, divide it and increment the count.\n                    arr[i] /= prime[j];\n                    mp[prime[j]]++;\n                }\n            }\n\n            // If the current element is not 1, it means it is a prime factor itself.\n            if (arr[i] != 1)\n                mp[arr[i]]++;\n        }\n\n        // Calculate the count of divisors by multiplying the count of each prime factor\n        // + 1.\n        long long res = 1;\n        for (auto it : mp)\n            res *= (it.second + 1LL);\n\n        // Return the result.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to find all prime numbers up to the largest using the Sieve of\n    // Eratosthenes.\n    public void sieveOfEratosthenes(int largest, List<Integer> primes) {\n        boolean[] isPrime = new boolean[largest + 1];\n        Arrays.fill(isPrime, true);\n\n        for (int p = 2; p * p <= largest; p++) {\n            if (isPrime[p]) {\n                for (int i = p * 2; i <= largest; i += p) {\n                    isPrime[i] = false;\n                }\n            }\n        }\n\n        for (int p = 2; p <= largest; p++) {\n            if (isPrime[p]) {\n                primes.add(p);\n            }\n        }\n    }\n\n    // Function to count the number of divisors.\n    public long countDivisorsMult(int[] arr) {\n        int largest = Arrays.stream(arr).max().orElse(1);\n        List<Integer> primes = new ArrayList<>();\n\n        // Find all prime numbers up to the largest number.\n        sieveOfEratosthenes(largest, primes);\n\n        // HashMap to store the count of prime factors.\n        Map<Integer, Integer> primeFactorCounts = new HashMap<>();\n\n        for (int num : arr) {\n            for (int prime : primes) {\n                while (num > 1 && num % prime == 0) {\n                    num /= prime;\n                    primeFactorCounts.put(prime,\n                                          primeFactorCounts.getOrDefault(prime, 0) + 1);\n                }\n            }\n            // If the number is still greater than 1, it is prime.\n            if (num > 1) {\n                primeFactorCounts.put(num, primeFactorCounts.getOrDefault(num, 0) + 1);\n            }\n        }\n\n        // Calculate the number of divisors.\n        long result = 1;\n        for (int count : primeFactorCounts.values()) {\n            result *= (count + 1);\n        }\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "import math\nfrom collections import defaultdict\n\n\nclass Solution:\n\n    def checkprimebysieve(self, largest, prime):\n        # Create a boolean array \"isPrime[0..n]\" and initialize\n        # all entries as True. A value in isPrime[i] will be\n        # False if i is not prime, else True.\n        isPrime = [True] * (largest + 1)\n\n        p = 2\n        while p * p <= largest:\n            # If isPrime[p] is True, then it's a prime\n            if isPrime[p]:\n                # Update all multiples of p\n                for i in range(p * 2, largest + 1, p):\n                    isPrime[i] = False\n            p += 1\n\n        # Collect all prime numbers\n        for p in range(2, largest + 1):\n            if isPrime[p]:\n                prime.append(p)\n\n    def countDivisorsMult(self, a):\n        # Find the largest number in the array\n        largest = max(a)\n        prime = []\n        self.checkprimebysieve(largest, prime)\n\n        # Find counts of occurrences of each prime factor\n        mp = defaultdict(int)\n        for num in a:\n            for p in prime:\n                while num > 1 and num % p == 0:\n                    num //= p\n                    mp[p] += 1\n            if num != 1:\n                mp[num] += 1\n\n        # Compute the count of all divisors using prime factors\n        res = 1\n        for count in mp.values():\n            res *= (count + 1)\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    countDivisorsMult(arr) {\n        let largest = Math.max(...arr); // Find the largest number in the input array.\n        let prime = [];\n\n        function checkPrimeBySieve(largest, prime) {\n            let isPrime = Array(largest + 1)\n                              .fill(true); // Create an array to store prime numbers.\n            let p = 2;\n\n            while (p * p <= largest) {\n                if (isPrime[p]) {\n                    for (let i = p * 2; i <= largest; i += p) {\n                        isPrime[i] =\n                            false; // Mark multiples of prime numbers as not prime.\n                    }\n                }\n                p++;\n            }\n\n            for (let p = 2; p <= largest; p++) {\n                if (isPrime[p]) {\n                    prime.push(p); // Add prime numbers to the 'prime' array.\n                }\n            }\n        }\n\n        checkPrimeBySieve(largest, prime);\n\n        let mp = new Map(); // Create a map to store prime factors and their counts.\n        for (let num of arr) {\n            for (let p of prime) {\n                while (num > 1 && num % p === 0) {\n                    num /= p;\n                    mp.set(p, (mp.get(p) || 0) +\n                                  1); // Count the occurrences of prime factors.\n                }\n            }\n            if (num !== 1) {\n                mp.set(num,\n                       (mp.get(num) || 0) + 1); // Handle remaining non-prime factors.\n            }\n        }\n\n        let res = 1;\n        for (let count of mp.values()) {\n            res *= (count + 1); // Calculate the total number of divisors.\n        }\n\n        return res; // Return the result.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}