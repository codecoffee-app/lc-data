{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700551,
            "title": "More than n/k Occurrences",
            "titleSlug": "count-element-occurences",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong>&nbsp;and an element <strong>k</strong>. The task is to find the count of elements in the array that appear more than <strong>n/k</strong> times and n is length of arr.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [3, 1, 2, 2, 1, 2, 3, 3], k = 4\n<strong>Output: </strong>2<strong>\nExplanation: </strong>In the given array, 3 and 2 are the only elements that appears more than n/k times.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [2, 3, 3, 2], k = 3\n<strong>Output: </strong>2<strong>\nExplanation: </strong>In the given array, 3 and 2 are the only elements that appears more than n/k times. So the count of elements are 2.<br /></span></pre>\n<pre><strong>Input: </strong>arr = [1, 4, 7, 7], k = 2\n<strong>Output: </strong>0<strong>\nExplanation: </strong>In the given array, no element appears more than n/k times.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10</span><sup><span style=\"font-size: 15px;\">6</span></sup><br /><span style=\"font-size: 18px;\">0 &lt;= arr[i] &lt;= 10</span><sup>8</sup><br /><span style=\"font-size: 18px;\">1 &lt;= k &lt;= arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` and an integer `k`, find the number of elements in the array that appear more than `n/k` times, where `n` is the length of `arr`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^8",
                    "1 <= k <= arr.size()"
                ],
                "testcases": [
                    {
                        "input": "arr = [3, 1, 2, 2, 1, 2, 3, 3], k = 4",
                        "output": "2",
                        "explanation": "The elements 2 and 3 each appear more than 8/4 = 2 times in the array."
                    },
                    {
                        "input": "arr = [2, 3, 3, 2], k = 3",
                        "output": "2",
                        "explanation": "The elements 2 and 3 each appear more than 4/3 = 1.33 times in the array. Since they appear twice, both satisfy the condition."
                    },
                    {
                        "input": "arr = [1, 4, 7, 7], k = 2",
                        "output": "0",
                        "explanation": "No element appears more than 4/2 = 2 times in the array.  Element 7 appears exactly twice, which does not satisfy the 'more than' condition."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a frequency map to count occurrences and check how many exceed <span class=\"katex\">nk\\frac{n}{k}</span>.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // Function to find all elements in array that appear more than n/k times.\n    int countOccurence(vector<int>& arr, int k) {\n        int n = arr.size();\n        unordered_map<int, int>\n            mp;        // create an unordered map to store the count of each element\n        int a = n / k; // calculate the minimum count required for an element to appear\n                       // more than n/k times\n\n        // iterate over the array and store the count of each element in the map\n        for (int i = 0; i < n; i++) {\n            mp[arr[i]]++;\n        }\n\n        int count = 0; // initialize a count variable to keep track of elements\n                       // appearing more than n/k times\n\n        // iterate over the map and check if the count of each element is more than a\n        for (auto it : mp) {\n            if (it.second >\n                a) { // if count is more than a, increment the count variable\n                count++;\n            }\n        }\n\n        return count; // return the count of elements appearing more than n/k times\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find all elements in array that appear more than n/k times.\n    public int countOccurence(int[] arr, int k) {\n        int n = arr.length;\n        // calculating the frequency barrier\n        int barrier = n / k;\n        // creating a HashMap to store the frequency of elements\n        HashMap<Integer, Integer> map = new HashMap<>();\n        // count for elements that appear more than n/k times\n        int count = 0;\n        // iterating through the array\n        for (int i = 0; i < n; i++) {\n            // updating the frequency of each element in the HashMap\n            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);\n        }\n\n        // iterating through the HashMap\n        for (Map.Entry<Integer, Integer> element : map.entrySet()) {\n            // if frequency of an element is greater than the barrier, increment count\n            if (element.getValue() > barrier) count++;\n        }\n        // returning the count of elements that appear more than n/k times\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    #Function to find all elements in array that appear more than n/k times.\n    def countOccurence(self, arr, k):\n        n = len(arr)\n        count = {\n        }  # empty dictionary to store occurrence count of each element\n        res = 0  # variable to store the count of elements appearing more than n/k times\n\n        # iterating over the array\n        for i in range(n):\n            # if the element is not present in the dictionary, add it with count 1\n            if arr[i] not in count:\n                count[arr[i]] = 1\n            # if the element is already present, increment its count by 1\n            else:\n                count[arr[i]] += 1\n\n        # iterating over the dictionary\n        for occurs in count:\n            # if the occurrence of the element is more than n/k, increment the result count\n            if count[occurs] > n // k:\n                res += 1\n\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\nclass Solution {\n    // Function to find all elements in array that appear more than n/k times.\n    public int CountOccurrence(int[] arr, int k) {\n        int n = arr.Length;\n        var mp = new Dictionary<int, int>();\n        int a = n / k;\n\n        foreach (var num in arr) {\n            if (mp.ContainsKey(num))\n                mp[num]++;\n            else\n                mp[num] = 1;\n        }\n\n        int count = 0;\n\n        foreach (var item in mp) {\n            if (item.Value > a) count++;\n        }\n\n        return count;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countOccurence(arr, k) {\n        let n = arr.length;\n        let mp = new Map();\n        let a = Math.floor(n / k);\n\n        for (let i = 0; i < n; i++) {\n            if (mp.has(arr[i])) {\n                mp.set(arr[i], mp.get(arr[i]) + 1);\n            } else {\n                mp.set(arr[i], 1);\n            }\n        }\n\n        let count = 0;\n        for (let [key, value] of mp.entries()) {\n            if (value > a) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}