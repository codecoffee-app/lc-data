{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712118,
            "title": "Count Good numbers",
            "titleSlug": "count-good-numbers",
            "content": "<p><span style=\"font-size:18px\">A digit string is <strong>good</strong> if the digits <strong>(0-indexed)</strong> at <strong>even</strong> indices are even and digits at <strong>odd</strong> indices are <strong>prime</strong> ( 2 , 3 , 5 or 7 ).</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">For example, &quot;4562&quot; is good because the digits (4&nbsp;and 6) at even positions are even and the digits (5 and 2) at odd positions are prime. However, &quot;3245&quot; is <strong>not</strong> good.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\">Given an integer <strong>N</strong>&nbsp;, return the <strong>total</strong> number of <strong>good digit strings</strong> of length N.<br />\r\nSince the answer may be too large, return it <strong>modulo 10<sup>9</sup> + 7</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Note : A <strong>digit string</strong> is a string consisting of digits 0 through 9 that may contain leading zeros.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<div style=\"background: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor:#222426; --darkreader-inline-border-top:#3e4446; --darkreader-inline-border-right:#3e4446; --darkreader-inline-border-bottom:#3e4446; --darkreader-inline-border-left:#3e4446;\"><span style=\"font-size:18px\"><strong>Input:</strong><br />\r\nN = 1<br />\r\n<strong>Output:</strong><br />\r\n5<br />\r\n<strong>Explanation:</strong><br />\r\nThe good digit string of length of 1 are &quot;0&quot; , &quot;2&quot; , &quot;4&quot; ,&quot;6&quot; and &quot;8&quot;.</span></div>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<div style=\"background: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor:#222426; --darkreader-inline-border-top:#3e4446; --darkreader-inline-border-right:#3e4446; --darkreader-inline-border-bottom:#3e4446; --darkreader-inline-border-left:#3e4446;\"><span style=\"font-size:18px\"><strong>Input:</strong><br />\r\nN = 3<br />\r\n<strong>Output:</strong><br />\r\n100</span></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function<strong> countGoodNumbers()</strong>&nbsp;which takes an integer N as inputs&nbsp;returns the total number of good digit strings of length N&nbsp;. As this result can be very large return the result under modulo 10<sup>9</sup>+7.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(logN)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>1</sup><sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A digit string is considered **good** if all digits at even indices are even (0, 2, 4, 6, 8) and all digits at odd indices are prime (2, 3, 5, 7). Given an integer N, determine the total number of good digit strings of length N. Since the answer may be very large, return it modulo 10<sup>9</sup> + 7. Note that a digit string can have leading zeros.",
                "constraints": [
                    "1 <= N <= 10<sup>15</sup>"
                ],
                "testcases": [
                    {
                        "input": "N = 1",
                        "output": "5",
                        "explanation": "The good digit strings of length 1 are \"0\", \"2\", \"4\", \"6\", and \"8\"."
                    },
                    {
                        "input": "N = 3",
                        "output": "100",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\r\n  public:\r\n    //Function to calculate power using modular exponentiation.\r\n    long long power(long long x, long long y, long long p = 1000000007) {\r\n        long long res = 1;\r\n\r\n        //Reducing x to its equivalent modulo p, if x is divisible by p.\r\n        x = x % p;\r\n\r\n        //If x is 0, then return 0.\r\n        if (x == 0) return 0;\r\n\r\n        //Calculating power using bitwise AND and bitwise right shift.\r\n        while (y > 0) {\r\n            if (y & 1) res = (res * x) % p;\r\n            y = y >> 1;\r\n            x = (x * x) % p;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    //Function to count the number of good numbers.\r\n    int countGoodNumbers(long long N) {\r\n\r\n        //Calculating x using power function.\r\n        long long x = power(5, (N + 1) / 2);\r\n\r\n        //Calculating y using power function.\r\n        long long y = power(4, N / 2);\r\n\r\n        //Calculating final answer using modular multiplication.\r\n        long long ans = (x * y) % 1000000007;\r\n\r\n        //Returning the answer as integer.\r\n        return (int)ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // function to calculate powers of x modulo 1000000007\n    static long modPow(long x, long y) {\n        // base case\n        if (y == 0) return 1;\n        \n        // calculating power recursively\n        long p = modPow(x, y / 2);\n        \n        // checking if y is odd or even to determine the multiplier\n        return p * p * (y % 2 > 0 ? x : 1) % 1000000007;\n    }\n    \n    // function to count the number of good numbers\n    public static int countGoodNumbers(long n) {\n        // returning the product of modPow with appropriate exponents and modulo operation\n        return (int)(modPow(5, (n + 1) / 2) * modPow(4, n / 2) % 1000000007);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n#class Solution defined\nclass Solution:\n    #function to count good numbers\n    def countGoodNumbers(self, n):\n        #function for modular exponentiation\n        def modExp(base, power, M):\n            ans = 1\n            #calculating the exponentiation using bitwise operations\n            while power:\n                if power & 1:\n                    ans = (ans * base) % M\n                power >>= 1\n                base = (base * base) % M\n            return ans\n        \n        M = 10**9 + 7\n        #calculating the count of good numbers\n        return (modExp(5, (n + 1) // 2, M) * modExp(4, n // 2, M) )% M",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Function to calculate power using modular exponentiation.\n    public long power(long x, long y, long p = 1000000007)\n    {\n        long res = 1;\n\n        //Reducing x to its equivalent modulo p, if x is divisible by p.\n        x = x % p;\n\n        //If x is 0, then return 0.\n        if (x == 0) return 0;\n\n        //Calculating power using bitwise AND and bitwise right shift.\n        while (y > 0)\n        {\n            if ((y & 1) == 1) res = (res * x) % p;\n            y = y >> 1;\n            x = (x * x) % p;\n        }\n        return res;\n    }\n\n    //Function to count the number of good numbers.\n    public int countGoodNumbers(long N)\n    {\n        //Calculating x using power function.\n        long x = power(5, (N + 1) / 2);\n\n        //Calculating y using power function.\n        long y = power(4, N / 2);\n\n        //Calculating final answer using modular multiplication.\n        long ans = (x * y) % 1000000007;\n\n        //Returning the answer as integer.\n        return (int)ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}