{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705083,
            "title": "Count in array",
            "titleSlug": "count-in-array2138",
            "content": "<p><span style=\"font-size:18px\">Given two positive integer&nbsp;<strong>N</strong>&nbsp;and <strong>M.</strong>&nbsp;The task is to find the number of arrays of size N&nbsp;that can be formed such that:</span></p>\n\n<p><span style=\"font-size:18px\">1. Each element is in the range [1, M].</span></p>\n\n<p><span style=\"font-size:18px\">2. All adjacent element are such that one of them divide the another i.e element A<sub>i</sub>&nbsp;divides A<sub>i + 1&nbsp;</sub>or A<sub>i+1</sub>&nbsp;divides A<sub>i</sub>.</span></p>\n\n<p><br />\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> \nN = 3\nM = 3\n<strong>Output :</strong> \n17\n<strong>Explanation:</strong>\n{1,1,1}, {1,1,2}, {1,1,3}, {1,2,1}, \n{1,2,2}, {1,3,1}, {1,3,3}, {2,1,1},\n{2,1,2}, {2,1,3}, {2,2,1}, {2,2,2},\n{3,1,1}, {3,1,2}, {3,1,3}, {3,3,1}, \n{3,3,3} are possible arrays.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>\nN = 1\nM = 10 \n<strong>Output:</strong> \n10\n<strong>Explanation:</strong> \n{1}, {2}, {3}, {4}, {5}, \n{6}, {7}, {8}, {9}, {10}\nare possible arrays.</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>count()</strong>&nbsp;which take&nbsp;integers&nbsp;<strong>N and M</strong>&nbsp;as input parameter&nbsp;and returns the total the number of arrays of size N&nbsp;that can be formed with given constraints. The return value may long so take modulo 10<sup>9</sup>+7.&nbsp;<br />\n<br />\n<strong>Expected Time Complexity:</strong>&nbsp;O(N*M*Log M)&nbsp;<br />\n<strong>Expected Space Complexity:</strong>&nbsp;O(N*M)&nbsp;<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;=N,M&lt;=100</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two positive integers N and M, find the number of arrays of size N that can be formed such that:\n\n1. Each element is in the range [1, M].\n2. For all adjacent elements A<sub>i</sub> and A<sub>i+1</sub>, either A<sub>i</sub> divides A<sub>i+1</sub> or A<sub>i+1</sub> divides A<sub>i</sub>.",
                "constraints": [
                    "1 <= N, M <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nM = 3",
                        "output": "17",
                        "explanation": "The possible arrays are:\n{1,1,1}, {1,1,2}, {1,1,3}, {1,2,1}, {1,2,2}, {1,3,1}, {1,3,3}, {2,1,1}, {2,1,2}, {2,1,3}, {2,2,1}, {2,2,2}, {3,1,1}, {3,1,2}, {3,1,3}, {3,3,1}, {3,3,3}"
                    },
                    {
                        "input": "N = 1\nM = 10",
                        "output": "10",
                        "explanation": "The possible arrays are: {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to find a number of possible values at each index of the array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    long long count(long long  n, long long m)\n    {\n        long long dp[1000][1000];\n        long long M = 1000000007;\n        \n        // For storing factors.\n        vector<long long> di[1000];\n     \n        // For storing multiples.\n        vector<long long> mu[1000];\n     \n        memset(dp, 0, sizeof dp);\n        memset(di, 0, sizeof di);\n        memset(mu, 0, sizeof mu);\n     \n        // calculating the factors and multiples\n        // of elements [1...m].\n        for (long long i = 1; i <= m; i++)\n        {\n            for (long long j = 2*i; j <= m; j += i)\n            {\n                di[j].push_back(i);\n                mu[i].push_back(j);\n            }\n            di[i].push_back(i);\n        }\n     \n        // Initalising for size 1 array for\n        // each i <= m.\n        for (long long i = 1; i <= m; i++)\n            dp[1][i] = 1;\n     \n        // Calculating the number of array possible\n        // of size i and starting with j.\n        for (long long i = 2; i <= n; i++)\n        {\n            for (long long j = 1; j <= m; j++)\n            {\n                dp[i][j] = 0;\n     \n                // For all previous possible values.\n                // Adding number of factors.\n                for (auto x:di[j])\n                    dp[i][j] = (dp[i][j]%M +  dp[i-1][x]%M)%M;\n     \n                // Adding number of multiple.\n                for (auto x:mu[j])\n                    dp[i][j] = (dp[i][j]%M+ dp[i-1][x]%M)%M;\n            }\n        }\n     \n        // Calculating the total count of array\n        // which start from [1...m].\n        long long ans = 0;\n        for (long long i = 1; i <= m; i++)\n        {\n            ans = (ans%M+dp[n][i]%M)%M;\n            di[i].clear();\n            mu[i].clear();\n        }\n     \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    def count(self,n, m):  \n        \n        MAX = 1000\n        MOD = 1000000007\n       \n        dp = [[0 for i in range(MAX)] for j in range(MAX)]  \n      \n        # For storing factors.  \n        di = [[] for i in range(MAX)]  \n      \n        # For storing multiples.  \n        mu = [[] for i in range(MAX)] \n      \n        # calculating the factors and multiples  \n        # of elements [1...m].  \n        for i in range(1, m+1):  \n           \n            for j in range(2*i, m+1, i):  \n               \n                di[j].append(i)  \n                mu[i].append(j)  \n               \n            di[i].append(i)  \n      \n        # Initalising for size 1 array for each i <= m.  \n        for i in range(1, m+1):  \n            dp[1][i] = 1 \n      \n        # Calculating the number of array possible  \n        # of size i and starting with j.  \n        for i in range(2, n+1):  \n           \n            for j in range(1, m+1):  \n               \n                dp[i][j] = 0 \n      \n                # For all previous possible values.  \n                # Adding number of factors.  \n                for x in di[j]:  \n                    dp[i][j] = ((dp[i][j]%MOD) + (dp[i-1][x]%MOD))%MOD\n      \n                # Adding number of multiple.  \n                for x in mu[j]:  \n                    dp[i][j] = ((dp[i][j]%MOD) + (dp[i-1][x]%MOD))%MOD   \n               \n        # Calculating the total count of array  \n        # which start from [1...m].  \n        ans = 0 \n        for i in range(1, m+1):  \n           \n            ans = ((ans%MOD) + (dp[n][i]%MOD))%MOD;  \n            di[i].clear()  \n            mu[i].clear()  \n          \n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to count the number of pairs (x, y) in the array such that x^y > y^x.\n    count(N, M) {\n        //declaring MAX and MOD\n        const MAX = 1000;\n        const MOD = 1000000007;\n       \n        //creating a 2D matrix\n        let dp = [];\n        for(let i=0; i<MAX; i++){\n            dp.push(new Array(MAX).fill(0));\n        }\n      \n        //creating arrays to store factors and multiples\n        let di = new Array(MAX);\n        let mu = new Array(MAX);\n        for(let i=0; i<MAX; i++){\n            di[i] = [];\n            mu[i] = [];\n        }\n      \n        //calculating the factors and multiples of elements [1...m]\n        for(let i=1; i<=M; i++){\n            for(let j=2*i; j<=M; j+=i){\n                di[j].push(i);\n                mu[i].push(j);\n            }\n            di[i].push(i);\n        }\n      \n        //initializing for size 1 array for each i <= m\n        for(let i=1; i<=M; i++){\n            dp[1][i] = 1;\n        }\n      \n        //calculating the number of arrays possible of size i and starting with j\n        for(let i=2; i<=N; i++){\n            for(let j=1; j<=M; j++){\n                dp[i][j] = 0;\n      \n                //adding the number of factors\n                for(let x of di[j]){\n                    dp[i][j] = ((dp[i][j]%MOD) + (dp[i-1][x]%MOD))%MOD;\n                }\n      \n                //adding the number of multiples\n                for(let x of mu[j]){\n                    dp[i][j] = ((dp[i][j]%MOD) + (dp[i-1][x]%MOD))%MOD;\n                }   \n            }\n        }\n      \n        //calculating the total count of arrays which start from [1...m]\n        let ans = 0;\n        for(let i=1; i<=M; i++){\n            ans = ((ans%MOD) + (dp[N][i]%MOD))%MOD;  \n            di[i] = [];\n            mu[i] = [];\n        }\n        \n        //returning the answer\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}