{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702917,
            "title": "Count increasing Subarrays",
            "titleSlug": "count-increasing-subarrays5301",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]&nbsp;</strong>of integers, count the number of subarrays in <strong>arr[]</strong> which are strictly increasing with size greater or equal to <strong>2</strong>. A subarray is a contiguous part of array. A subarray is strictly increasing if each element is greater then it's previous element if it exists.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 3, 3, 2, 3, 5]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>Increasing Subarrays are : arr[0,1], arr[3,4], arr[3,5], arr[4,5].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 5] \n<strong>Output:</strong> 1\n<strong>Explanation:</strong>The only Increasing Subarray is arr[0,1].</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr<sub>i</sub> &lt;= 10<sup>7</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >The idea is based on fact that a sorted subarray of length &lsquo;len&rsquo; adds len*(len-1)/2 to result. For example, {10, 20, 30, 40} adds 6 to the result.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int countIncreasing(vector<int>& arr) {\n        int n = arr.size();\n        int cnt = 0; // Initialize result\n\n        // Initialize length of current increasing\n        // subarray\n        int len = 1;\n\n        // Traverse through the array\n        for (int i = 0; i < n - 1; ++i) {\n            // If arr[i+1] is greater than arr[i],\n            // then increment length\n            if (arr[i + 1] > arr[i])\n                len++;\n\n            // Else Update count and reset length\n            else {\n                cnt += (((len - 1) * len) / 2);\n                len = 1;\n            }\n        }\n\n        // If last length is more than 1\n        if (len > 1)\n            cnt += (((len - 1) * len) / 2);\n\n        return cnt;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int countIncreasing(int[] arr) {\n        int n = arr.length;\n        int cnt = 0; // Initialize result\n\n        // Initialize length of current increasing subarray\n        int len = 1;\n\n        // Traverse through the array\n        for (int i = 0; i < n - 1; i++) {\n            // If arr[i+1] is greater than arr[i], increment length\n            if (arr[i + 1] > arr[i]) {\n                len++;\n            } else {\n                // Update count and reset length\n                cnt += ((len - 1) * len) / 2;\n                len = 1;\n            }\n        }\n\n        // If last subarray was increasing\n        if (len > 1) {\n            cnt += ((len - 1) * len) / 2;\n        }\n\n        return cnt;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countIncreasing(self, arr):\n        n = len(arr)\n        cnt = 0  # Initialize result\n\n        # Initialize length of current increasing subarray\n        length = 1\n\n        # Traverse through the array\n        for i in range(n - 1):\n            # If arr[i+1] is greater than arr[i], increment length\n            if arr[i + 1] > arr[i]:\n                length += 1\n            else:\n                # Update count and reset length\n                cnt += ((length - 1) * length) // 2\n                length = 1\n\n        # If last subarray was increasing\n        if length > 1:\n            cnt += ((length - 1) * length) // 2\n\n        return cnt\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countIncreasing(arr) {\n        const n = arr.length;\n        let cnt = 0; // Initialize result\n\n        // Initialize length of current increasing subarray\n        let len = 1;\n\n        // Traverse through the array\n        for (let i = 0; i < n - 1; i++) {\n            // If arr[i+1] is greater than arr[i], increment length\n            if (arr[i + 1] > arr[i]) {\n                len++;\n            } else {\n                // Update count and reset length\n                cnt += ((len - 1) * len) / 2;\n                len = 1;\n            }\n        }\n\n        // If last subarray was increasing\n        if (len > 1) {\n            cnt += ((len - 1) * len) / 2;\n        }\n\n        return cnt;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}