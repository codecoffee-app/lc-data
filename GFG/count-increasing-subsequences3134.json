{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702720,
            "title": "Count Increasing Subsequences",
            "titleSlug": "count-increasing-subsequences3134",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[] </strong>consisting of digits (where each digit ranges from 0 to 9), the task is to count all possible subsequences within the array where each digit in the subsequence is strictly greater than the previous digit. The final count should be returned modulo <strong>10<sup>9</sup>+7.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4]\n<strong>Output: </strong>15\n<strong>Explanation: </strong>There are total increasing subsequences {1}, {2}, {3}, {4}, {1,2}, {1,3}, {1,4}, {2,3}, {2,4}, {3,4}, {1,2,3}, {1,2,4}, {1,3,4}, {2,3,4}, {1,2,3,4}.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 3, 6, 5]\n<strong>Output: </strong>8\n<strong>Explanation: </strong>Sub-sequences are {4}, {3}, {6}, {5}, {4,6}, {4,5}, {3,6}, {3,5}.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 2, 4, 5, 4]\n<strong>Output: </strong>14\n<strong>Explanation: </strong>Sub-sequences are {3}, {2}, {4}, {3,4}, {2,4}, {5}, {3,5}, {2,5}, {4,5}, {3,2,5}, {3,4,5}, {4}, {3,4}, {2,4}.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span><br /><br /><span style=\"font-size: 18px;\"><strong>Constraints: </strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 9</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of digits `arr[]`, count the number of strictly increasing subsequences. A strictly increasing subsequence is one where each digit is greater than the previous digit. Return the count modulo 10^9 + 7.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4]",
                        "output": "15",
                        "explanation": "The increasing subsequences are: {1}, {2}, {3}, {4}, {1,2}, {1,3}, {1,4}, {2,3}, {2,4}, {3,4}, {1,2,3}, {1,2,4}, {1,3,4}, {2,3,4}, {1,2,3,4}."
                    },
                    {
                        "input": "[4, 3, 6, 5]",
                        "output": "8",
                        "explanation": "The increasing subsequences are: {4}, {3}, {6}, {5}, {4,6}, {4,5}, {3,6}, {3,5}."
                    },
                    {
                        "input": "[3, 2, 4, 5, 4]",
                        "output": "14",
                        "explanation": "The increasing subsequences are: {3}, {2}, {4}, {3,4}, {2,4}, {5}, {3,5}, {2,5}, {4,5}, {3,2,5}, {3,4,5}, {2,4}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a dynamic programming approach where each element counts the number of subsequences ending at that element by adding the counts of all smaller previous elements, and ensure results are kept modulo </span><span class=\"katex\"><span class=\"katex-mathml\" >10<sup>9</sup> + 7</span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord\"><span >.</span></span></span></span></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count all the sub-sequences\n    // possible in which digit is greater than\n    // all previous digits\n    int countSub(vector<int>& arr) {\n        int n = arr.size();\n        const int MOD = 1e9 + 7;\n\n        // count[] array is used to store all sub-\n        // sequences possible using that digit\n        // count[] array covers all the digits\n        // from 0 to 9\n        int count[10] = {0};\n\n        // Scan each digit in arr[]\n        for (int i = 0; i < n; i++) {\n            // Count all possible sub-sequences by\n            // the digits less than arr[i] digit\n            for (int j = arr[i] - 1; j >= 0; j--) {\n                count[arr[i]] = (count[arr[i]] + count[j]) % MOD;\n            }\n\n            // Store sum of all sub-sequences plus\n            // 1 in count[] array\n            count[arr[i]] = (count[arr[i]] + 1) % MOD;\n        }\n\n        // Now sum up all sequences possible in\n        // the count[] array\n        int result = 0;\n        for (int i = 0; i < 10; i++) {\n            result = (result + count[i]) % MOD;\n        }\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to count all the sub-sequences\n    // possible in which digit is greater than\n    // all previous digits\n    public static int countSub(int[] arr) {\n        int n = arr.length;\n        final int MOD = 1000000007;\n\n        // count[] array is used to store all sub-\n        // sequences possible using that digit\n        // count[] array covers all the digits\n        // from 0 to 9\n        int[] count = new int[10];\n\n        // Scan each digit in arr[]\n        for (int i = 0; i < n; i++) {\n            // Count all possible sub-sequences by\n            // the digits less than arr[i] digit\n            for (int j = arr[i] - 1; j >= 0; j--) {\n                count[arr[i]] = (count[arr[i]] + count[j]) % MOD;\n            }\n\n            // Store sum of all sub-sequences plus\n            // 1 in count[] array\n            count[arr[i]] = (count[arr[i]] + 1) % MOD;\n        }\n\n        // Now sum up all sequences possible in\n        // the count[] array\n        int result = 0;\n        for (int i = 0; i < 10; i++) {\n            result = (result + count[i]) % MOD;\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countSub(self, arr):\n        MOD = 10**9 + 7\n\n        # Initialize count array to store sub-sequences counts\n        count = [0] * 10\n\n        # Scan each digit in arr[]\n        for i in range(len(arr)):\n            # Count all possible sub-sequences by the digits less than arr[i]\n            for j in range(arr[i] - 1, -1, -1):\n                count[arr[i]] = (count[arr[i]] + count[j]) % MOD\n\n            # Store sum of all sub-sequences plus 1 in count[] array\n            count[arr[i]] = (count[arr[i]] + 1) % MOD\n\n        # Sum up all sequences possible in the count[] array\n        result = sum(count) % MOD\n\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to count the number of subarrays\n    countSub(arr) {\n        const MOD = 1e9 + 7;\n\n        // Initialize count array to store sub-sequences counts\n        let count = new Array(10).fill(0);\n\n        // Scan each digit in arr\n        for (let i = 0; i < arr.length; i++) {\n            // Count all possible sub-sequences by the digits less than arr[i]\n            for (let j = arr[i] - 1; j >= 0; j--) {\n                count[arr[i]] = (count[arr[i]] + count[j]) % MOD;\n            }\n\n            // Store sum of all sub-sequences plus 1 in count array\n            count[arr[i]] = (count[arr[i]] + 1) % MOD;\n        }\n\n        // Sum up all sequences possible in the count array\n        let result = count.reduce((acc, val) => (acc + val) % MOD, 0);\n\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}