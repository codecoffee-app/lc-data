{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700145,
            "title": "Count Leaves in Binary Tree",
            "titleSlug": "count-leaves-in-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree of size <strong>n</strong>, You have to count leaves in it. For example, there are two leaves in the following&nbsp;tree</span></p>\n<p><span style=\"font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; 1<br />&nbsp; &nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\<br />&nbsp;&nbsp; 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 39<br />&nbsp; /<br />5</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong><span style=\"font-size: 18px;\">\nGiven Tree is \n\\t\\t   4\n\\t\\t /   \\\n\\t\\t8     10\n\\t     /     /   \\\n\\t    7     5     1\n\\t   /\n\\t  3 \n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">3\n</span><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\">Three leaves are 3, 5 and 1.<br /></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:<br /></strong><span >Given Tree is</span><strong style=\"font-size: 18px;\"><br /></strong><span style=\"font-size: 18px;\">\\t    50\n\\t  /    \\\n\\t30\\t70\n     /  \\    /  \\\n    20   40 60   80\n\\t\\t \\\n\\t\\t 65\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">4\n</span><strong style=\"font-size: 18px;\">Explanation:</strong><span style=\"font-size: 18px;\"> Four leaves are 20, 40, 65 and 80.<br /></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong><span style=\"font-size: 18px;\">\nGiven Tree is \n\\t    30\n\\t  /    \\\n\\t25\\t35\n     /  \\\\t\\\n    20   28     40\n\\t  /\n\\t 27\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">3\n</span><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\">Three leaves are 20, 27 and 40.</span></span></pre>\n<p>&nbsp;<span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= number of nodes &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1&lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Check whether the root is leaf or not, If yes then total number of leaves will be 1 otherwise calculate the answer recursively with the help of children.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "samsung",
            "ola-cabs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Class Solution\nclass Solution {\n  public:\n    // Function to count the number of leaf nodes in a binary tree.\n    int countLeaves(Node* root) {\n        // If the root node is null, there are no leaf nodes.\n        if (root == NULL)\n            return 0;\n\n        // If the current node is a leaf node, return 1.\n        if (root->left == NULL && root->right == NULL)\n            return 1;\n\n        // Recursively count the number of leaf nodes in the left and right subtrees\n        // and return the sum of them.\n        return countLeaves(root->left) + countLeaves(root->right);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to count the number of leaves in a binary tree.\n    // It takes the root node as an input.\n    int countLeaves(Node node) {\n        // Base case: if the node is null, return 0 leaves.\n        if (node == null) return 0;\n        // If the current node is a leaf node (i.e., has no children), return 1.\n        if (node.left == null && node.right == null) return 1;\n        // Recursively count the number of leaves in the left subtree and right subtree\n        // and return the sum of the two counts.\n        else\n            return countLeaves(node.left) + countLeaves(node.right);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import deque\n\n\nclass Solution:\n    # Function to count the number of leaf nodes in a binary tree.\n    def countLeaves(self, root):\n        if root is None:  # Checking if the root is None\n            return 0\n        if root.left is None and root.right is None:  # Checking if the root has no left and right child\n            return 1  # If it has no child, then it is a leaf node\n        # Recursively counting the number of leaf nodes in the left and right subtree\n        return self.countLeaves(root.left) + self.countLeaves(root.right)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public int countLeaves(Node root)\n    {\n        //if the root node is null, there are no leaf nodes.\n        if (root==null)\n            return 0;\n    \n        //if the current node is a leaf node, return 1.\n        if (root.left == null && root.right == null)\n            return 1; \n    \n        //recursively count the number of leaf nodes in the left and right subtrees\n        //and return the sum of them.\n        return countLeaves(root.left) + countLeaves(root.right);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/*\nclass Node\n{\n    constructor(x){\n        this.data=x;\n        this.left=null;\n        this.right=null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n * @return {number}\n */\n/* Should return count of leaves. For example, return\n    value should be 2 for following tree.\n         10\n      /      \\\n   20       30 */\n\nclass Solution {\n    countLeaves(root) {\n        // If the root node is null, there are no leaf nodes.\n        if (root == null) return 0;\n        // If the current node is a leaf node, return 1.\n        if (root.left == null && root.right == null) return 1;\n\n        // Recursively count the number of leaf nodes in the left and right subtrees\n        // and return the sum of them.\n        return this.countLeaves(root.left) + this.countLeaves(root.right);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}