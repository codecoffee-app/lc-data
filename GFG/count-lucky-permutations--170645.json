{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713146,
            "title": "Count Lucky Permutations",
            "titleSlug": "count-lucky-permutations--170645",
            "content": "<p><span style=\"font-size:18px\">You are given an array <strong>arr[ ]&nbsp;</strong>of integers having <strong>N&nbsp;</strong>elements and a non-weighted&nbsp;undirected graph having <strong>N</strong> nodes and&nbsp;<strong>M&nbsp;</strong>edges. The details of each edge in the graph is given to you in the form of list of list.&nbsp;<br />\r\nYour task is to find the number of lucky permutations of the&nbsp;given array.<strong>&nbsp;</strong></span></p>\r\n\r\n<blockquote>\r\n<p><span style=\"font-size:18px\">An array permutation is said to be lucky if for every node <strong>V<sub>i&nbsp; </sub>[1 &lt;= i &lt;= N-1]</strong> in the array there exists an edge between the nodes&nbsp;<strong>V</strong><sub><strong>i</strong>&nbsp;</sub>and <strong>V<sub>i+1&nbsp;</sub></strong>in the given graph.</span></p>\r\n</blockquote>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 3, M = 2\r\narr = {1, 2, 3}\r\ngraph = {{3, 1}, {1, 2}}\r\n<strong>Output:\r\n</strong>2\r\n<strong>Explanation:\r\n</strong>All possible permutations of the \r\narray are as follows-\r\n{1,2,3}: There is an edge between 1 and \r\n2 in the graph but not betwen 2 and 3.\r\n\r\n{2,1,3}: There is an edge between (2,1)\r\nand (1,3) in the graph.\r\n\r\n{3,1,2}: There is an edge between (3,1)\r\nand (1,2) in the graph.\r\n\r\nOut of the 3 possible permutations, \r\n2 are lucky. Therefore, answer is 2.</span>\r\n\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 2, M = 1\r\narr = {1, 1}\r\ngraph = {{1, 2}}\r\n<strong>Output :</strong>\r\n0\r\n<strong>Explanation:</strong>\r\nThere is no lucky permutation in the \r\ngiven graph. \r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>luckyPermutations()</strong>&nbsp;which takes the two integers <strong>N </strong>and <strong>M,&nbsp;</strong>an array <strong>arr[ ]&nbsp;</strong>and a list of lists named <strong>graph&nbsp;</strong>of size <strong>M</strong>&nbsp;as input parameters and returns the count of lucky permutations.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>*2<sup>N</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N*2<sup>N</sup>)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n2 &le; N &le; 15<br />\r\n1 &le; M&nbsp;&le; (N*(N-1))/2<br />\r\n1&nbsp;&le;&nbsp; arr[i], graph[i][j] &le; N&nbsp;<br />\r\nThere are no self-loops and repeated edges in the graph.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of N integers and a non-weighted undirected graph with N nodes and M edges, determine the number of 'lucky' permutations of the array. A permutation is considered 'lucky' if, for every consecutive pair of elements (V<sub>i</sub>, V<sub>i+1</sub>) in the permutation, there exists an edge between nodes V<sub>i</sub> and V<sub>i+1</sub> in the given graph.",
                "constraints": [
                    "2 <= N <= 15",
                    "1 <= M <= (N*(N-1))/2",
                    "1 <= arr[i], graph[i][j] <= N",
                    "There are no self-loops and repeated edges in the graph."
                ],
                "testcases": [
                    {
                        "input": "N = 3, M = 2\narr = {1, 2, 3}\ngraph = {{3, 1}, {1, 2}}",
                        "output": "2",
                        "explanation": "The lucky permutations are {2, 1, 3} and {3, 1, 2}. In {2,1,3}, there exists an edge between (2,1) and (1,3). Similarly, In {3,1,2} there exists an edge between (3,1) and (1,2)."
                    },
                    {
                        "input": "N = 2, M = 1\narr = {1, 1}\ngraph = {{1, 2}}",
                        "output": "0",
                        "explanation": "There are no lucky permutations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The constraints are very small which suggests that using Dynamic Programmic with Bitmasking can work.</span></p>",
            "<p><span style=\"font-size:18px\">Let <strong>dp</strong> be a 2-Dimensional array having&nbsp;<strong>N*2<sup>N</sup></strong><strong><sup>&nbsp;&nbsp;</sup></strong>states. Use&nbsp;<strong>dp[i][j]&nbsp;</strong>to store the number of permutations that end at the node&nbsp;<strong>arr[i]&nbsp;</strong>and all the array indices corresponding to the set bits in the number&nbsp;<strong>j&nbsp;</strong>have been visited.</span></p>",
            "<p><span style=\"font-size:18px\">For an edge (i, j) of the graph:</span></p>\n\n<pre>\n<span style=\"font-size:18px\">dp[i][bitmask] = dp[j][bitmask^(1&lt;&lt;i)]</span></pre>\n\n<p><span style=\"font-size:18px\">Given that (1&lt;&lt;i &amp; bitmask) and (1&lt;&lt;j &amp; bitmask) are positive.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "intuit"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to calculate the number of lucky permutations.\n    long long int luckyPermutations(int N, int M, vector<int> arr,\n                                    vector<vector<int>> graph) {\n\n        // Initializing the DP array with 0s.\n        vector<vector<long long int>> dp(N, vector<long long int>(1 << N, 0));\n\n        // Setting the base cases for DP array.\n        for (int i = 0; i < N; i++) {\n            dp[i][1 << i] = 1;\n        }\n\n        // Creating an adjacency matrix from the given graph.\n        vector<vector<int>> adj(N, vector<int>(N, 0));\n        for (vector<int> edge : graph) {\n            adj[edge[0] - 1][edge[1] - 1] = 1;\n            adj[edge[1] - 1][edge[0] - 1] = 1;\n        }\n\n        // Iterating through all possible bitmasks.\n        for (int bitmask = 1; bitmask < (1 << N); bitmask++) {\n            // Iterating through all vertices.\n            for (int i = 0; i < N; i++) {\n                // Checking if the vertex is present in the bitmask.\n                if ((1 & (bitmask >> i))) {\n                    // Checking for all adjacent vertices of i.\n                    for (int j = 0; j < N; j++) {\n                        // Checking if j is not equal to i and j is present in the bitmask and there is an edge between i and j.\n                        if (j != i && arr[j] != arr[i] &&\n                            (1 & (bitmask >> j)) && adj[arr[i]-1][arr[j] - 1]) {\n                            // Updating the DP array by adding the number of lucky permutations.\n                            dp[i][bitmask] += dp[j][bitmask ^ (1 << i)];\n                        }\n                    }\n                }\n            }\n        }\n\n        // Calculating and returning the final answer.\n        long long int ans = 0;\n        for (int i = 0; i < N; i++) {\n            ans += dp[i][(1 << N) - 1];\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n\n    // Function to calculate the number of lucky permutations\n    long luckyPermutations(int N, int M, int arr[], int[][] graph) {\n        \n        // Initialize the dynamic programming array\n        // dp[i][j] represents the number of lucky permutations ending at index i and having the bitmask j\n        long dp[][] = new long[N][1 << N];\n        \n        // Initialize the adjacency matrix\n        int adj[][] = new int[N][N];\n\n        // Initialize the base case\n        // Each element in the array is a lucky permutation itself, so initialize dp[i][1<<i] as 1\n        for (int i = 0; i < N; i++) {\n            dp[i][1 << i] = 1;\n        }\n\n        // Create the adjacency matrix from the given graph\n        for (int i = 0; i < M; i++) {\n            adj[graph[i][0] - 1][graph[i][1] - 1] = 1;\n            adj[graph[i][1] - 1][graph[i][0] - 1] = 1;\n        }\n        \n        // Iterate through all possible bitmasks\n        for (int bitmask = 1; bitmask < (1 << N); bitmask++) {\n            // Iterate through each index\n            for (int i = 0; i < N; i++) {\n                // Check if the i-th bit of the bitmask is set\n                if ((1 & (bitmask >> i)) > 0) {\n                    // Iterate through each element in the array\n                    for (int j = 0; j < N; j++) {\n                        // Check if j is not equal to i, arr[j] is not equal to arr[i],\n                        // the j-th bit of the bitmask is set, and there is an edge between arr[i] and arr[j]\n                        if (j != i && arr[j] != arr[i] && ((1 & (bitmask >> j)) > 0) && adj[arr[i]-1][arr[j] - 1]==1) {\n                            // Update the dp value using the recurrence relation\n                            dp[i][bitmask] += dp[j][bitmask ^ (1 << i)];\n                        }\n                    }\n                }\n            }\n        }\n\n        // Calculate the total number of lucky permutations\n        long ans = 0;\n        for (int i = 0; i < N; i++) {\n            ans += dp[i][(1 << N) - 1];\n        }\n        \n        // Return the answer\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution: \r\n    def luckyPermutations(self, N, M, arr, graph):\r\n        \r\n        dp = [[0 for j in range(1<<N)] for j in range(N)]\r\n\r\n        # Initializing dp array with 0\r\n        for i in range(N):\r\n            dp[i][1<<i]=1\r\n        \r\n        adj = [[0 for j in range(N)]for j in range(N)]\r\n\r\n        # Constructing adjacency matrix from graph\r\n        for edge in graph:\r\n            adj[edge[0]-1][edge[1]-1]=1\r\n            adj[edge[1]-1][edge[0]-1]=1\r\n        \r\n        # Filling dp array using bitmasking\r\n        for bitmask in range(1, 1<<N):\r\n            for i in range(N):\r\n                if((1&(bitmask>>i))):\r\n                    for j in range(N):\r\n\r\n                        # Checking conditions and updating dp array\r\n                        if(j!=i and arr[j]!=arr[i] and (1&(bitmask>>j)) and adj[arr[i]-1][arr[j]-1]):\r\n                            dp[i][bitmask]+=dp[j][bitmask^(1<<i)]\r\n                        \r\n        ans = 0\r\n        \r\n        # Calculating final answer\r\n        for i in range(N):\r\n            ans+=dp[i][(1<<N)-1]\r\n        \r\n        return ans\r\n    ",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    // Function to calculate the number of lucky permutations.\n    public long luckyPermutations(int N, int M, List<int> arr, List<List<int>> graph)\n    {\n        // Initializing the DP array with 0s.\n        long[,] dp = new long[N, 1 << N];\n\n        // Setting the base cases for DP array.\n        for (int i = 0; i < N; i++)\n        {\n            dp[i, 1 << i] = 1;\n        }\n\n        // Creating an adjacency matrix from the given graph.\n        int[,] adj = new int[N, N];\n        foreach (List<int> edge in graph)\n        {\n            int u = edge[0] - 1;\n            int v = edge[1] - 1;\n            adj[u, v] = 1;\n            adj[v, u] = 1;\n        }\n\n        // Iterating through all possible bitmasks.\n        for (int bitmask = 1; bitmask < (1 << N); bitmask++)\n        {\n            // Iterating through all vertices.\n            for (int i = 0; i < N; i++)\n            {\n                // Checking if the vertex is present in the bitmask.\n                if ((1 & (bitmask >> i)) != 0)\n                {\n                    // Checking for all adjacent vertices of i.\n                    for (int j = 0; j < N; j++)\n                    {\n                        // Checking if j is not equal to i and j is present in the bitmask and there is an edge between i and j.\n                        if (j != i && arr[j] != arr[i] && (1 & (bitmask >> j)) != 0 && adj[arr[i] - 1, arr[j] - 1] != 0)\n                        {\n                            // Updating the DP array by adding the number of lucky permutations.\n                            dp[i, bitmask] += dp[j, bitmask ^ (1 << i)];\n                        }\n                    }\n                }\n            }\n        }\n\n        // Calculating and returning the final answer.\n        long ans = 0;\n        for (int i = 0; i < N; i++)\n        {\n            ans += dp[i, (1 << N) - 1];\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}