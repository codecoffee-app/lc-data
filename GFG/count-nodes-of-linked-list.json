{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700039,
            "title": "Count Linked List Nodes",
            "titleSlug": "count-nodes-of-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Given a singly linked list. The task is to find the length of the linked list, where length is defined as the number of nodes in the linked list.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">LinkedList : 1-&gt;2-&gt;3-&gt;4-&gt;5<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700039/Web/Other/blobid0_1720505073.png\" width=\"400\" height=\"90\" /><br /><strong>Output: </strong>5<strong>\nExplanation: </strong>Count of nodes in the linked list is 5, which is its length.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">LinkedList : 2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1-&gt;0<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700039/Web/Other/blobid1_1720505089.png\" width=\"400\" height=\"90\" /> <br /><strong>Output: </strong>7<strong>\nExplanation: </strong>Count of nodes in the linked list is 7. Hence, the output is 7.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>: O(n)<br /><strong>Expected Auxilliary Space</strong>: O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, determine its length, which is defined as the number of nodes it contains.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1->2->3->4->5",
                        "output": "5",
                        "explanation": "The linked list contains 5 nodes."
                    },
                    {
                        "input": "LinkedList: 2->4->6->7->5->1->0",
                        "output": "7",
                        "explanation": "The linked list contains 7 nodes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a loop to traverse the linked list and count the number of nodes until reaching the end (null).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to count nodes of a linked list.\n    int getCount(struct Node* head) {\n        int count = 0;\n\n        // using a pointer for the linked list.\n        struct Node* current = head;\n\n        // using a loop to count nodes until we get null in link part of node.\n        while (current != NULL) {\n            // updating counter.\n            count++;\n\n            // updating pointer to the next node.\n            current = current->next;\n        }\n\n        // returning the number of nodes.\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to count nodes of a linked list.\n    public int getCount(Node head) {\n        int count = 0;\n\n        // using a pointer for the linked list.\n        Node current = head;\n\n        // using a loop to count nodes until we get null in link part of node.\n        while (current != null) {\n            count++;\n            current = current.next;\n        }\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to count nodes of a linked list.\n    def getCount(self, head):\n        count = 0\n\n        # using a pointer for the linked list.\n        current = head\n\n        # using a loop to count nodes until we get null in link part of node.\n        while current is not None:\n            # updating counter.\n            count += 1\n\n            # updating pointer to the next node.\n            current = current.next\n\n        # returning the number of nodes.\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} head\n * @returns {number}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to count nodes of a linked list.\n    getCount(head) {\n        let count = 0;\n\n        // Using a pointer for the linked list.\n        let current = head;\n\n        // Using a loop to count nodes until we get null in the link part of the node.\n        while (current !== null) {\n            // Updating counter.\n            count++;\n\n            // Updating pointer to the next node.\n            current = current.next;\n        }\n\n        // Returning the number of nodes.\n        return count;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}