{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700690,
            "title": "Count Non-Leaf Nodes in Tree",
            "titleSlug": "count-non-leaf-nodes-in-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree of size <strong>n</strong>, your task is to return the count of all the non-leaf nodes of the given binary tree.</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Example:</strong></span><br /><br /><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong><span style=\"font-size: 18px;\"> \n<input style=\"height: 156px; width: 259px;\" alt=\"Image\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/tree121.gif\" type=\"image\" /></span></span><br /><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">2\n</span><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\">Nodes 1 and 2 are the only non leaf nodes.</span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Input:</strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> </span></span><br /><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">\\t    8\n\\t  /   \\\n\\t 3     9\n\\t/ \\\n     1   6\n\\t  / \\\n\\t 4   7\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">3\n</span><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\">Nodes 8, 3 and 6 are the only non leaf nodes.</span></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong><span style=\"font-size: 18px;\"> <br />\\t    10\n\\t  /    \\\n\\t5\\t 20\n     / \\     /  \\\n    3   7   15   25\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">3\n</span><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\">Nodes 10, 5 and 20 are the only non leaf nodes.</span></span></span></pre>\n<p><span style=\"font-size: 18px;\"><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Constraints:<br /></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &le; number of nodes &le; 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5<br /></sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &le; node-&gt;data &le; 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of size **n**, determine the number of non-leaf nodes within the tree.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "Binary tree represented by the following structure:\n\n    1\n   / \\\n  2   3\n",
                        "output": "2",
                        "explanation": "Nodes 1 and 2 are the only non-leaf nodes."
                    },
                    {
                        "input": "Binary tree represented by the following structure:\n\n        8\n       /  \\\n      3    9\n     /  \\\n    1    6\n       /  \\\n      4    7\n",
                        "output": "3",
                        "explanation": "Nodes 8, 3, and 6 are the only non-leaf nodes."
                    },
                    {
                        "input": "Binary tree represented by the following structure:\n\n        10\n       /   \\\n      5    20\n     / \\   / \\\n    3   7 15  25",
                        "output": "3",
                        "explanation": "Nodes 10, 5, and 20 are the only non-leaf nodes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Recursively traverse the given tree. While traversing, we count non-leaf nodes in the left and right subtrees and add 1 to the result. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    //Function to count the number of non-leaf nodes in a binary tree.\r\n    int countNonLeafNodes(Node* root) {\r\n        // if the root is null or a leaf node, return 0.\r\n    \tif (root == NULL || (root->left == NULL && root->right == NULL))\r\n            return 0;\r\n        \r\n        // return the count of non-leaf nodes in the left subtree, \r\n        // the count of non-leaf nodes in the right subtree, and 1 (for the current node).\r\n    \treturn 1 + countNonLeafNodes(root->left) + countNonLeafNodes(root->right);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    // Function to count the number of non-leaf nodes in a binary tree\n    int countNonLeafNodes(Node root) {\n        if(root==null)\n            return 0;\n        // If the node is a leaf node, return 0\n        if(root.left==null && root.right==null)\n            return 0;\n        // Recursively count the non-leaf nodes in the left and right subtrees\n        return 1 + countNonLeafNodes(root.left) + countNonLeafNodes(root.right);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to count the number of non-leaf nodes in a binary tree.\r\n    def countNonLeafNodes(self, root):\r\n        \r\n        #If root is None, return 0\r\n        if(root is None):\r\n            return 0\r\n        \r\n        #If root has no left or right child, return 0\r\n        if(root.left is None and root.right is None):\r\n            return 0\r\n        \r\n        #Recursively count non-leaf nodes in the left and right subtrees\r\n        return 1 + self.countNonLeafNodes(root.left) + self.countNonLeafNodes(root.right)",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countNonLeafNodes(root) {\n        // if the root is null or a leaf node, return 0.\n        if (root == null || (root.left == null && root.right == null)) return 0;\n        // return the count of non-leaf nodes in the left subtree,\n        // the count of non-leaf nodes in the right subtree, and 1 (for the current\n        // node).\n        return 1 + this.countNonLeafNodes(root.left) +\n               this.countNonLeafNodes(root.right);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}