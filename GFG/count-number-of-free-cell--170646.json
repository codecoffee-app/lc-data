{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713587,
            "title": "Count number of free cell",
            "titleSlug": "count-number-of-free-cell--170646",
            "content": "<p><span style=\"font-size:18px\">Suppose you have a Matrix size <strong>n*n</strong>, and given an integer <strong>k</strong> and a set of coordinates <strong>arr</strong>&nbsp;of size&nbsp;<strong>k*2</strong>. Initially, the matrix contains only 0. You are given k tasks and for each task, you are given two coordinates (r = arr[i][0],c = arr[i][1]) [1 based index r and c]. Where coordinates (r,c) denotes r<sup>th&nbsp;</sup>row and c<sup>th&nbsp;</sup>column of the given matrix.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">You have to perform each task sequentially in the given order. F</span><span style=\"font-size:18px\">or each task, You have to put 1 in all cells of r<sup>th</sup> row&nbsp; and all cells of c<sup>th</sup> column.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">After each task, You have to calculate the number of 0 present in the matrix and return it.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>n = 3, k= 3\r\narr =\r\n{{2, 2},\r\n {2, 3},\r\n {3, 2}}\r\n<strong>Output: </strong>4 2 1<strong>\r\nExplanation: \r\n</strong>After 1st Operation, all the 2nd row\r\nand all the 2nd column will be filled by\r\n1. So remaning cell with value 0 will be 4\r\nAfter 2nd Operation, all the 2nd row and all\r\nthe 3rd column will be filled by 1. So \r\nremaning cell with value 0 will be 2<strong>.\r\n</strong>After 3rd Operation cells having value 0 will\r\nbe 1.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>n = 2, k = 2\r\narr = \r\n{{1, 2},\r\n {1, 1}}\r\n<strong>Output: </strong>1 0\r\n<strong>Explanation: \r\n</strong>After 1st Operation, all the 1st row and \r\nall the 2nd column will be filled by 1. \r\nSo remaning cell with value 0 will be 1.\r\nAfter 2nd Operation, all the 1st row and \r\nall the 1st column will be filled by 1. \r\nSo remaning cell with value 0 will be 0<strong>. </strong></span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your&nbsp;Task:</strong><br />\r\nThe task is to complete the function <strong>countZero</strong>(), which takes parameter&nbsp;<strong>n,&nbsp;</strong>size of<br />\r\nthe matrix, k no of operation and array <strong>arr[][],&nbsp;</strong>which denotes the position of the cells.</span><br />\r\n<span style=\"font-size:18px\">You have to return an array that contains all the results.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O( k ).<br />\r\n<strong>Expected Auxiliary Space:</strong> O( n+n+k ).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= n, k &lt;= 10<sup>5</sup></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= r, c&nbsp;&lt;= n</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a square matrix of size n*n, initially filled with 0s. You are also given an integer k, representing the number of tasks, and a 2D array 'arr' of size k*2. Each row in 'arr' represents a task, where arr[i][0] and arr[i][1] are the row and column indices (1-based) to be updated in the matrix. For each task, you need to set all cells in the specified row and column to 1. After each task, calculate the number of 0s remaining in the matrix and store it. Return an array containing the number of 0s after each task.",
                "constraints": [
                    "1 <= n, k <= 10^5",
                    "1 <= r, c <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 3\narr = {{2, 2}, {2, 3}, {3, 2}}",
                        "output": "[4, 2, 1]",
                        "explanation": "After the first operation (2, 2), row 2 and column 2 are filled with 1s. The number of 0s remaining is 4.\nAfter the second operation (2, 3), row 2 and column 3 are filled with 1s. The number of 0s remaining is 2.\nAfter the third operation (3, 2), row 3 and column 2 are filled with 1s. The number of 0s remaining is 1."
                    },
                    {
                        "input": "n = 2, k = 2\narr = {{1, 2}, {1, 1}}",
                        "output": "[1, 0]",
                        "explanation": "After the first operation (1, 2), row 1 and column 2 are filled with 1s. The number of 0s remaining is 1.\nAfter the second operation (1, 1), row 1 and column 1 are filled with 1s. The number of 0s remaining is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to solve the problem without traverse the matrix</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "intuit"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n  public:\r\n  //Function to count the number of zeros in the given matrix after \r\n  //each insertion of 1.\r\n  vector<long long int> countZero(int n, int k, vector<vector<int>>& arr){\r\n      long long int ans = n * 1LL * n; //total number of zeros in the matrix\r\n      vector<bool> row(n+1,false); //to keep track of rows with 1s\r\n      vector<bool> col(n+1,false); //to keep track of columns with 1s\r\n      int r = n, c = n; //initialize number of rows and columns\r\n      vector<long long int> v; //vector to store the count of zeros after each insertion\r\n\r\n      for(int i=0;i<k;i++) {\r\n        int x = arr[i][0]; //get the row number of the inserted 1\r\n        int y = arr[i][1]; //get the column number of the inserted 1\r\n\r\n        //if the row and column both don't contain any 1\r\n        if (!row[x] && !col[y]) {\r\n          ans = ans - c - r + 1; //subtract the count of zeros in current row and column, and also the duplicate zero at the common position\r\n          r--; //decrement the number of rows\r\n          c--; //decrement the number of columns\r\n        } \r\n        //if the row contains a 1 but the column doesn't\r\n        else if (!row[x] && col[y]) {\r\n          ans = ans - c; //subtract the count of zeros in current column only\r\n          r--; //decrement the number of rows\r\n        } \r\n        //if the column contains a 1 but the row doesn't\r\n        else if (row[x] && !col[y]) {\r\n          ans = ans - r; //subtract the count of zeros in current row only\r\n          c--; //decrement the number of columns\r\n        }\r\n\r\n        v.push_back(ans); //store the count of zeros after each insertion\r\n        row[x] = col[y] = true; //mark the inserted position as containing 1\r\n      }  \r\n\r\n      return v; //return the vector containing the count of zeros after each insertion\r\n  }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    long[] countZero(int n, int k, int[][] arr){\r\n        long ans = n * 1l * n; // calculate the total number of zeros initially assuming all elements are zero\r\n        boolean row[] = new boolean[n + 1]; // array to keep track of whether a row is counted as zero or not\r\n        boolean col[] = new boolean[n + 1]; // array to keep track of whether a column is counted as zero or not\r\n        int r = n, c = n; // initialize the number of rows and columns\r\n        long res[] = new long[k]; // array to store the results\r\n\r\n        for(int i = 0; i < k; i++){ // iterate over the given array\r\n            int x = arr[i][0], y = arr[i][1]; // get the row and column index\r\n            if(!row[x] && !col[y]){ // if both row and column are not counted as zero\r\n                ans = ans - c - r  + 1; // decrement the total number of zeros by the number of rows and columns and add one (as (0,0) also gets counted)\r\n                --r; --c; // decrement the number of rows and columns\r\n            }else if(!row[x] && col[y]){ // if only row is not counted as zero and column is counted as zero\r\n                ans -= c; // decrement the total number of zeros by the number of columns\r\n                --r; // decrement the number of rows\r\n            }else if(row[x] && !col[y]){ // if only column is not counted as zero and row is counted as zero\r\n                ans -= r; // decrement the total number of zeros by the number of rows\r\n                --c; // decrement the number of columns\r\n            }\r\n            res[i] = ans; // store the current number of zeros after each iteration\r\n            row[x] = (col[y] = true); // mark the row and column as counted\r\n        }\r\n        return res; // return the array with results\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution():\r\n    # Function to count the number of cells with zero values\r\n    def countZero(self, n, k ,arr):\r\n        # creating sets to store unique row and column values\r\n        rowSet = set()\r\n        colSet = set()\r\n        ans = []\r\n        \r\n        # iterating over each coordinate in the given array\r\n        for i in arr:\r\n            # adding the row and column values to the respective sets\r\n            rowSet.add(i[0])\r\n            colSet.add(i[1])\r\n            \r\n            # calculating the count of cells with non-zero values\r\n            ct1 = (n*len(rowSet))+(n*len(colSet)) - len(rowSet)*len(colSet)\r\n            \r\n            # calculating the count of cells with zero values and appending it to the answer list\r\n            ans.append(n**2 - ct1)\r\n        \r\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} n\r\n * @param {number} k\r\n * @param {number[]} arr\r\n * @returns {number[]}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to count zeroes in the given array.\r\n    countZero(n, k, arr) {\r\n        let rowSet = new Set();\r\n        let colSet = new Set();\r\n        let ans = [];\r\n        \r\n        //iterating over each coordinate in the given array\r\n        for (let i of arr) {\r\n            //adding the row and column values to the respective sets\r\n            rowSet.add(i[0]);\r\n            colSet.add(i[1]);\r\n            \r\n            //calculating the count of cells with non-zero values\r\n            let ct1 = n * rowSet.size + n * colSet.size - rowSet.size * colSet.size;\r\n            \r\n            //calculating the count of cells with zero values and appending it to the answer list\r\n            ans.push(n ** 2 - ct1);\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}