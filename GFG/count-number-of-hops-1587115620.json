{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701423,
            "title": "Count number of hops",
            "titleSlug": "count-number-of-hops-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">A frog jumps either 1, 2, or 3 steps to go to the top. In how many ways can it reach the top of <strong>nth</strong> step.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4\n<strong>Output: </strong>7<strong>\nExplanation: </strong>Below are the 7 ways to reach 4th step:\n1 step + 1 step + 1 step + 1 step\n1 step + 2 step + 1 step\n2 step + 1 step + 1 step\n1 step + 1 step + 2 step\n2 step + 2 step\n3 step + 1 step\n1 step + 3 step<br /></span></pre>\n<pre><span ><strong>Input: </strong>n = 2\n<strong>Output: </strong>2<strong>\nExplanation: </strong>Below are the 2 ways to reach 2nd step:\n1 step + 1 step \n2 step </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 1\n<strong>Output: </strong>1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 30</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A frog can jump 1, 2, or 3 steps at a time. Determine the number of distinct ways the frog can reach the top of an nth step staircase.",
                "constraints": [
                    "1 <= n <= 30"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "7",
                        "explanation": "There are 7 possible ways for the frog to reach the 4th step: (1+1+1+1), (1+2+1), (2+1+1), (1+1+2), (2+2), (3+1), (1+3)"
                    },
                    {
                        "input": "2",
                        "output": "2",
                        "explanation": "There are 2 possible ways for the frog to reach the 2nd step: (1+1), (2)"
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Think of the problem as counting the ways to reach the <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord mathnormal\">n</span></span></span></span>-th step by jumping 1, 2, or 3 steps at a time. For each step, add the ways to reach the previous three steps, since the frog can jump from any of those to the current step.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to count the number of ways in which frog can reach the top.\n    int countWays(int n) {\n        // we use similar algorithm as Fibonacci series to find the\n        // number of ways in which frog can reach the top.\n\n        // base cases\n        if (n == 1)\n            return 1;\n        if (n == 2)\n            return 2;\n        if (n == 3)\n            return 4;\n\n        // initializng base values.\n        int a = 1, b = 2, c = 4, temp;\n\n        for (int i = 4; i <= n; i++) {\n            temp = (a + b + c);\n            // updating a as b and b as c and c as temp (sum of a, b and c).\n            a = b;\n            b = c;\n            c = temp;\n        }\n        // returning the result.\n        return c;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to count the number of ways in which frog can reach the top.\n    static int countWays(int n) {\n        // we use similar algorithm as Fibonacci series to find the\n        // number of ways in which frog can reach the top.\n\n        // base cases\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 4;\n\n        // initializing base values.\n        int a = 1, b = 2, c = 4, temp;\n\n        for (int i = 4; i <= n; i++) {\n            temp = (a + b + c);\n            // updating a as b and b as c and c as temp (sum of a, b and c).\n            a = b;\n            b = c;\n            c = temp;\n        }\n        // returning the result.\n        return c;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to count the number of ways in which frog can reach the top.\n    def countWays(self, n):\n\n        #we use similar algorithm as Fibonacci series to find the\n        #number of ways in which frog can reach the top.\n\n        #base cases\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n\n        #initializing base values.\n        a = 1\n        b = 2\n        c = 4\n\n        for i in range(4, n + 1):\n            temp = (a + b + c)\n            #updating a as b and b as c and c as temp (sum of a, b and c).\n            a = b\n            b = c\n            c = temp\n\n        #returning the result.\n        return c\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} n\n * @returns {int}\n */\n\nclass Solution {\n    // Function to count the number of ways in which frog can reach the top.\n    countWays(n) {\n        // we use similar algorithm as Fibonacci series to find the\n        // number of ways in which frog can reach the top.\n\n        // base cases\n        if (n == 1) return 1;\n        if (n == 2) return 2;\n        if (n == 3) return 4;\n\n        // initializing base values.\n        let a = 1, b = 2, c = 4, temp;\n\n        for (let i = 4; i <= n; i++) {\n            temp = (a + b + c);\n            // updating a as b and b as c and c as temp (sum of a, b and c).\n            a = b;\n            b = c;\n            c = temp;\n        }\n\n        // returning the result.\n        return c;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}