{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712545,
            "title": "Count Number of Nodes in a Binary Tree",
            "titleSlug": "count-number-of-nodes-in-a-binary-tree",
            "content": "<p dir=\"ltr\"><span style=\"font-size:18px\">You are given the root of a <strong>complete</strong> binary tree. Your task is to find the <strong>count </strong>of nodes.</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">A complete binary tree is a binary tree whose, all levels except the last one are completely filled, the last level may or may not be completely filled and Nodes in the last level are as left as possible.</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">Design an algorithm that runs better than O(n).</span></p>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Example:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\">Input: </span>\r\n<span style=\"font-size:18px\">root = [1,2,3,4,5,6]</span>\r\n<span style=\"font-size:18px\">Output: </span>\r\n<span style=\"font-size:18px\">6</span>\r\n<span style=\"font-size:18px\">Explanation: </span>\r\n<span style=\"font-size:18px\">There are a total of 6 nodes in the given tree.</span></pre>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">Complete the function int cnt_nodes(Node *root), which takes the pointer of the root of the given Binary tree and returns the count of its number of nodes.</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O((LogN)<sup>2</sup>).</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong> O(Log N).</span></p>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Constraints:</span></strong></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">0 &lt;= N (number of nodes) &lt;= 5 * 10<sup>4</sup>&nbsp;</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">0 &lt;= value of nodes&nbsp;&lt;= 5 * 10<sup>4</sup></span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">The tree is guaranteed to be complete.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given the root of a complete binary tree. Your task is to efficiently determine the number of nodes in the tree.\n\nA complete binary tree is defined as a binary tree in which all levels except possibly the last are completely filled, and all nodes at the last level are as far left as possible.\n\nDesign an algorithm that achieves a time complexity better than O(n).",
                "constraints": [
                    "0 <= N (number of nodes) <= 5 * 10^4",
                    "0 <= value of nodes <= 5 * 10^4",
                    "The tree is guaranteed to be complete."
                ],
                "testcases": [
                    {
                        "input": "[1,2,3,4,5,6]",
                        "output": "6",
                        "explanation": "The provided complete binary tree contains a total of 6 nodes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int countNodes(Node *root) {\r\n        // if(root == NULL) return 0;\r\n\r\n        // int lh = findHeightLeft(root);\r\n        // int rh = findHeightRight(root);\r\n\r\n        // if(lh == rh) return (1<<lh) - 1;\r\n\r\n        // return 1 + countNodes(root->left) + countNodes(root->right);\r\n        if (!root) return 0;\r\n\r\n        int l = 1, r = 1;\r\n        Node *ptr_r = root, *ptr_l = root;\r\n        while (ptr_l = ptr_l->left) l++;\r\n        while (ptr_r = ptr_r->right) r++;\r\n\r\n        if (l == r) return pow(2, l) - 1;\r\n        return 1 + countNodes(root->left) + countNodes(root->right);\r\n    }\r\n    // int findHeightLeft(Node* node) {\r\n    //     int hght = 0;\r\n    //     while(node) {\r\n    //         hght++;\r\n    //         node = node->left;\r\n    //     }\r\n    //     return hght;\r\n    // }\r\n    // int findHeightRight(Node* node) {\r\n    //     int hght = 0;\r\n    //     while(node) {\r\n    //         hght++;\r\n    //         node = node->right;\r\n    //     }\r\n    //     return hght;\r\n    // }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    \r\n    // Function to find the height of the left subtree\r\n    public static int findHeightLeft(Node root) {\r\n        int h = 0;\r\n        while (root != null) {\r\n            h++;\r\n            root = root.left;\r\n        }\r\n        return h;\r\n    }\r\n\r\n    // Function to find the height of the right subtree\r\n    public static int findHeightRight(Node root) {\r\n        int h = 0;\r\n        while (root != null) {\r\n            h++;\r\n            root = root.right;\r\n        }\r\n        return h;\r\n    }\r\n\r\n    // Function to count the number of nodes in the tree\r\n    public static int countNodes(Node root) {\r\n        // If tree is empty, return 0\r\n        if (root == null) {\r\n            return 0;\r\n        }\r\n\r\n        // Find the height of the left subtree and right subtree\r\n        int lh = findHeightLeft(root);\r\n        int rh = findHeightRight(root);\r\n\r\n        // If height of left subtree is equal to height of right subtree,\r\n        // the tree is a perfect binary tree and the total number of nodes can be computed\r\n        if (lh == rh) {\r\n            return (1 << lh) - 1;\r\n        }\r\n\r\n        // If height of left subtree is not equal to height of right subtree,\r\n        // recursively count the nodes in left subtree and right subtree\r\n        return 1 + countNodes(root.left) + countNodes(root.right);\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n'''\r\n# Node Class:\r\nclass Node:\r\n    def init(self, val):\r\n        self.data = val\r\n        self.left = None\r\n        self.right = None\r\n'''\r\n\r\nclass Solution:\r\n    #Function to count the total number of nodes in a binary tree.\r\n    def countNodes(self, root):\r\n        #Helper function to find the height of the left subtree.\r\n        def findHeightLeft(node):\r\n            ht = 0\r\n            while node:\r\n                ht += 1\r\n                node = node.left\r\n            return ht\r\n        \r\n        #Helper function to find the height of the right subtree.\r\n        def findHeightRight(node):\r\n            ht = 0\r\n            while node:\r\n                ht += 1\r\n                node = node.right\r\n            return ht\r\n        \r\n        #Recursive function to count the total number of nodes.\r\n        def fn(root):\r\n            if not root:\r\n                return 0\r\n            lh, rh = findHeightLeft(root), findHeightRight(root)\r\n            #If the height of the left and right subtrees are the same, \r\n            #then the tree is a perfect binary tree and the total number of nodes \r\n            #can be calculated using the formula (2^height) - 1.\r\n            if lh == rh:\r\n                return (1<<lh) - 1\r\n            #If the height of the left and right subtree are not the same, \r\n            #then recursively count the nodes in the left and right subtree.\r\n            return 1 + fn(root.left) + fn(root.right)\r\n        \r\n        #Return the result of the recursive function.\r\n        return fn(root)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {Node} root\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to count the number of nodes in a binary tree.\r\n    countNodes(root)\r\n    {\r\n        //Helper function to find the height of the left subtree.\r\n        function findHeightLeft(node) {\r\n            let ht = 0;\r\n            while (node) {\r\n                ht += 1;\r\n                node = node.left;\r\n            }\r\n            return ht;\r\n        }\r\n\r\n        //Helper function to find the height of the right subtree.\r\n        function findHeightRight(node) {\r\n            let ht = 0;\r\n            while (node) {\r\n                ht += 1;\r\n                node = node.right;\r\n            }\r\n            return ht;\r\n        }\r\n\r\n        //Recursive function to count the total number of nodes.\r\n        function fn(root) {\r\n            if (!root) {\r\n                return 0;\r\n            }\r\n            let lh = findHeightLeft(root);\r\n            let rh = findHeightRight(root);\r\n            //If the height of the left and right subtrees are the same, \r\n            //then the tree is a perfect binary tree and the total number of nodes \r\n            //can be calculated using the formula (2^height) - 1.\r\n            if (lh === rh) {\r\n                return (1 << lh) - 1;\r\n            }\r\n            //If the height of the left and right subtree are not the same, \r\n            //then recursively count the nodes in the left and right subtree.\r\n            return 1 + fn(root.left) + fn(root.right);\r\n        }\r\n\r\n        //Return the result of the recursive function.\r\n        return fn(root);\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}