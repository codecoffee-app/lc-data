{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700689,
            "title": "Count Number of SubTrees having given Sum",
            "titleSlug": "count-number-of-subtrees-having-given-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree&nbsp;and an integer <strong>X</strong>. Your task is to complete the function <strong>countSubtreesWithSumX()</strong> that returns the count of the number of subtress having total node&rsquo;s data sum equal to the&nbsp;value <strong>X</strong>.<br /><strong>Note</strong> that a subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants.<br /></span><span style=\"font-size: 18px;\"><strong>Example:</strong> For the tree given below: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>\n<p><span style=\"font-size: 18px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp; \\<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -10&nbsp;&nbsp;&nbsp;&nbsp; 3<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp; \\ &nbsp;&nbsp; /&nbsp; \\<br />&nbsp; &nbsp; &nbsp; 9 &nbsp;&nbsp;&nbsp; 8&nbsp; -4 7</span></p>\n<p><span style=\"font-size: 18px;\">Subtree with sum 7:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -10<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8</span></p>\n<p><span style=\"font-size: 18px;\">and one node 7.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>\\t 5\n&nbsp;   /    \\\n&nbsp; -10     3\n&nbsp;/   \\   /  \\\n&nbsp;9   8 -4    7\nX = 7\n<strong>Output: </strong>2<strong>\nExplanation: </strong>Subtrees with sum 7 are\n[9, 8, -10] and [7] (refer the example\nin the problem description).</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>    1\n&nbsp; /  \\\n&nbsp;2    3\nX = 5\n<strong>Output: </strong>0<strong>\nExplanation: </strong>No subtree has sum equal\nto 5.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your&nbsp;task is to complete the function&nbsp;<strong>countSubtreesWithSumX</strong>() which takes the root node and an integer X as inputs and returns the number of subtrees of the given Binary Tree having sum exactly equal to X.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(N).<br /><strong>Expected Auxiliary Space: </strong>O(Height of the Tree).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= N &lt;= 10</span><sup>3</sup><br /><span style=\"font-size: 18px;\">-10</span><sup>3</sup><span style=\"font-size: 18px;\"> &lt;= Node Value &lt;= 10</span><sup>3</sup><br />&nbsp;</p>\n<p><span style=\"font-size: 14px;\"><strong>Note</strong>:The <strong>Input/Ouput</strong> format and <strong>Example</strong> given are used for system's internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n\n//Function to find the sum of nodes in given subtree.\nint countSubtreesWithSumXUtil(Node* root, int& count, int x)\n{\n    \n\tif (!root)\n\treturn 0;\n\t\n\t//finding sum of nodes in the left and right subtrees recursively.\n\tint ls = countSubtreesWithSumXUtil(root->left, count, x);\n\tint rs = countSubtreesWithSumXUtil(root->right, count, x);\n\tint sum = ls + rs + root->data;\n\t\n\t//if sum of ls, rs and current node data is equal to x,\n\t//we increment the counter.\n\tif (sum == x)\n\tcount++;\n\t\n\t//returning the sum.\n\treturn sum;\n}\n\n//Function to count number of subtrees having sum equal to given sum.\nint countSubtreesWithSumX(Node* root, int x)\n{ \n\tif (!root)\n\treturn 0;\n\tint count = 0;\n\t\n\t//finding sum of nodes in the left subtrees.\n\tint ls = countSubtreesWithSumXUtil(root->left, count, x);\n\t\n\t//finding sum of nodes in the right subtrees. \n\tint rs = countSubtreesWithSumXUtil(root->right, count, x);\n\t\n\t//if sum of ls,rs and current node data is equal to x,\n\t//we increment the counter.\n\tif ((ls + rs + root->data) == x)\n\tcount++;\n\t\n\t//returning the count.\n\treturn count;\n}\n\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Tree\n{\n    int c=0;\n    Tree()\n    {\n        c=0;\n    }\n    \n    //Function to find the sum of nodes in given subtree.\n    int countSubtreesWithSumXUtil(Node root,int x)\n    { \n    \tif (root==null)return 0;\n    \t\n    \t//finding sum of nodes in the left and right subtrees recursively.\n    \tint ls = countSubtreesWithSumXUtil(root.left,x);\n    \tint rs = countSubtreesWithSumXUtil(root.right, x);\n    \t\n    \t\n    \tint sum = ls + rs + root.data;\n    \t//if sum of ls, rs and current node data is equal to x,\n\t    //we increment the counter.\n    \tif (sum == x)\n    \tc++;\n    \t\n    \t//returning the sum.\n    \treturn sum;\n    }\n\n    //Function to count number of subtrees having sum equal to given sum.\n    int countSubtreesWithSumX(Node root, int x)\n    {\n    \tif (root==null)return 0;\n    \t\n    \t//finding sum of nodes in the left subtrees. \n    \tint ls = countSubtreesWithSumXUtil(root.left, x);\n    \t//finding sum of nodes in the right subtrees.\n    \tint rs = countSubtreesWithSumXUtil(root.right, x);\n    \t\n    \t//if sum of ls, rs and current node data is equal to x,\n    \t//we increment the counter.\n    \tif ((ls + rs + root.data) == x)\n    \tc++;\n    \t\n    \t//returning the count.\n    \treturn c;\n    }\n    \n}\n\n\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\n\n#Function to find the sum of nodes in given subtree.\ndef util(root,x):\n    if root is None:\n        return 0\n        \n    #finding sum of nodes in the left and right subtrees recursively.\n    ls = util(root.left,x)\n    rs = util(root.right,x)\n    sum = ls + rs + root.data\n    \n    #if sum of ls, rs and current node data is equal to x,\n\t#we increment the counter.\n    if (sum == x):\n        util.count += 1\n        \n    #returning the sum.\n    return sum\n\n\n#Function to count number of subtrees having sum equal to given sum.\ndef countSubtreesWithSumX(root ,x):\n\n    if root is None:\n        return 0\n    util.count = 0 \n    \n    #finding sum of nodes in the left subtrees.\n    ls = util(root.left,x)\n    #finding sum of nodes in the right subtrees.\n    rs = util(root.right,x)\n    \n    sum_of_current = ls + rs + root.data\n\n    #if sum of ls, rs and current node data is equal to x,\n\t#we increment the counter.\n    if sum_of_current == x:\n        util.count += 1\n\n    #returning the count.\n    return util.count\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\n\nclass Solution\n{\n    //Function to find the sum of nodes in given subtree.\n    int countSubtreesWithSumXUtil(Node root,ref int count, int x)\n    {\n        \n    \tif (root == null)\n    \t    return 0;\n    \t\n    \t//finding sum of nodes in the left and right subtrees recursively.\n    \tint ls = countSubtreesWithSumXUtil(root.left,ref count, x);\n    \tint rs = countSubtreesWithSumXUtil(root.right,ref count, x);\n    \tint sum = ls + rs + root.data;\n    \t\n    \t//if sum of ls, rs and current node data is equal to x,\n    \t//we increment the counter.\n    \tif (sum == x)\n    \t    count++;\n    \t\n    \t//returning the sum.\n    \treturn sum;\n    }\n\n    //Function to count number of subtrees having sum equal to given sum.\n    public int countSubtreesWithSumX(Node root,int x)\n    {\n        if (root == null)\n    \t    return 0;\n    \tint count = 0;\n    \t\n    \t//finding sum of nodes in the left subtrees.\n    \tint ls = countSubtreesWithSumXUtil(root.left,ref count, x);\n    \t\n    \t//finding sum of nodes in the right subtrees. \n    \tint rs = countSubtreesWithSumXUtil(root.right,ref count, x);\n    \t//if sum of ls,rs and current node data is equal to x,\n    \t//we increment the counter.\n    \tif ((ls + rs + root.data) == x)\n    \tcount++;\n    \t\n    \t//returning the count.\n    \treturn count;\n    }\n}\n\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n * @param {number} x\n * @returns {number}\n*/\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    \n    constructor(){\n        this.count = 0;\n    }\n    \n    //Function to find the sum of nodes in given subtree.\n    countSubtreesWithSumXUtil(root, x)\n    {\n    \tif (!root)\n    \treturn 0;\n    \t\n    \t//finding sum of nodes in the left and right subtrees recursively.\n    \tlet ls = this.countSubtreesWithSumXUtil(root.left, x);\n    \tlet rs = this.countSubtreesWithSumXUtil(root.right, x);\n    \t\n    \tlet sum = ls + rs + root.data;\n    \t\n    \t//if sum of ls, rs and current node data is equal to x,\n\t    //we increment the counter.\n    \tif (sum == x) \n    \tthis.count++;\n    \t\n    \t//returning the sum.\n    \treturn sum;\n    }\n    \n    //Function to count number of subtrees having sum equal to given sum.\n    countSubtreesWithSumX(root, x)\n    {\n    \tif (!root)\n    \treturn 0;\n    \t\n    \t//finding sum of nodes in the left subtrees.\n    \tlet ls = this.countSubtreesWithSumXUtil(root.left, x);\n    \t\n    \t//finding sum of nodes in the right subtrees.\n    \tlet rs = this.countSubtreesWithSumXUtil(root.right, x);\n    \t\n    \t//if sum of ls, rs and current node data is equal to x,\n\t    //we increment the counter.\n    \tif ((ls + rs + root.data) == x) \n    \tthis.count++;\n    \t\n    \t//returning the count.\n    \treturn this.count;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}