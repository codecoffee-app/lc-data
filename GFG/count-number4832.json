{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702769,
            "title": "Count Number",
            "titleSlug": "count-number4832",
            "content": "<p><span >You are given an integer array <code>arr</code> of size <code>n</code>, along with two additional integers <code>k</code> and <code>x</code>. Your objective is to determine the number of distinct subsets of size <code>k</code> from the array where the absolute difference between the maximum and minimum elements of each subset is at most <code>x</code>. Return the number of valid subsets of size <code>k</code>, modulo&nbsp;</span><span ><span class=\"katex\"><span class=\"katex-mathml\">10<sup>9</sup>+7</span>.</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>k = <span class=\"hljs-number\">3</span>, x = <span class=\"hljs-number\">5, a</span>rr<span class=\"hljs-selector-attr\">[]</span> = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5]</span>\n<strong>Output: </strong>10\n<strong>Explanation :</strong>\nThe possible subsets of size 3 are:\n{1, 2, 3}, {1, 2, 4}, {1, 2, 5}, {1, 3, 4}, {1, 3, 5}, {1, 4, 5}, {2, 3, 4}, {2, 3, 5}, {2, 4, 5}, {3, 4, 5}. All these subsets have a maximum-minimum difference of at most 5.</span></pre>\n<pre><span ><strong>Input: </strong>k = <span class=\"hljs-number\">4</span>, x = <span class=\"hljs-number\">6, </span>arr<span class=\"hljs-selector-attr\">[]</span> = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">16]</span>\n<strong>Output: </strong>5\n<strong>Explanation:</strong>The valid subsets of size 4 are:</span><br /><span >{2, 4, 6, 8}, {4, 6, 8, 10}, {6, 8, 10, 12}, {8, 10, 12, 14}, {10, 12, 14, 16}. Each of these subsets meets the condition of having a maximum-minimum difference of at most 6.</span></pre>\n<p><span ><strong>Expected Time Complexity: </strong>O(n. log(n))<br /><strong>Expected Auxiliary Space: </strong>O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; k &le; arr.size()<br />1 &le; arr[i], x &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr` of size `n`, and two integers `k` and `x`, determine the number of distinct subsets of size `k` from the array where the absolute difference between the maximum and minimum elements of each subset is at most `x`. Return the number of valid subsets of size `k`, modulo 10^9 + 7.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= k <= arr.size()",
                    "1 <= arr[i], x <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "k = 3, x = 5, arr = [1, 2, 3, 4, 5]",
                        "output": "10",
                        "explanation": "There are 10 possible subsets of size 3: {1, 2, 3}, {1, 2, 4}, {1, 2, 5}, {1, 3, 4}, {1, 3, 5}, {1, 4, 5}, {2, 3, 4}, {2, 3, 5}, {2, 4, 5}, {3, 4, 5}.  For each, the difference between the maximum and minimum element is at most 5."
                    },
                    {
                        "input": "k = 4, x = 6, arr = [2, 4, 6, 8, 10, 12, 14, 16]",
                        "output": "5",
                        "explanation": "The valid subsets of size 4 are: {2, 4, 6, 8}, {4, 6, 8, 10}, {6, 8, 10, 12}, {8, 10, 12, 14}, {10, 12, 14, 16}. Each of these subsets meets the condition of having a maximum-minimum difference of at most 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the array, use two pointers to find ranges with valid differences, and then compute combinations for subsets of size <code>k</code> within these ranges using combinatorics.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "const int MOD = 1e9 + 7;\n\nclass Solution {\n  public:\n    vector<long long> fac; // Array to store factorial values\n\n    // Modular exponentiation to calculate (x^y) % p\n    long long power(long long x, long long y, long long p) {\n        long long res = 1;\n        x = x % p;\n\n        while (y > 0) {\n            if (y & 1) // If y is odd\n                res = (res * x) % p;\n            y >>= 1;         // y = y / 2\n            x = (x * x) % p; // x = x^2\n        }\n        return res % p;\n    }\n\n    // Modular multiplicative inverse using Fermat's Little Theorem\n    long long modInverse(long long n, long long p) { return power(n, p - 2, p); }\n\n    // Calculate nCr % p using precomputed factorials and their inverses\n    long long nCrModPFermat(long long n, long long r, long long p) {\n        if (r == 0)\n            return 1;\n        if (n < r) // If n < r, return 0\n            return 0;\n        return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;\n    }\n\n    // Precompute factorials up to n\n    void factorial(int n) { // Added type for parameter n\n        fac.resize(n + 1);  // Resize the factorial vector\n        fac[0] = 1;\n        for (long long i = 1; i <= n; i++)\n            fac[i] = fac[i - 1] * i % MOD;\n    }\n\n    // Get the count of combinations satisfying the condition\n    long long getAnswer(vector<int>& arr, long long k, long long x) {\n        int n = arr.size();\n        factorial(n);                 // Precompute factorials up to n\n        sort(arr.begin(), arr.end()); // Sort the array\n        long long ans = 0, i = 0, j = 0;\n\n        while (j < n) {\n            while (j < n && arr[j] - arr[i] <= x) {\n                j++;\n            }\n            // Here, j is one past the valid range, so (j - i) is the count\n            if ((j - i) >= k) // Check if enough elements in range\n                ans = (ans + nCrModPFermat(j - i - 1, k - 1, MOD)) %\n                      MOD; // Use j - i - 1 for valid range\n            i++;\n        }\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    private static final long MOD = (long)(1e9 + 7); // Changed to long\n    private long[] fac;\n\n    public Solution() {\n        fac = new long[0]; // Initialize the factorial array\n    }\n\n    // Modular exponentiation to calculate (x^y) % p\n    private long power(long x, long y, long p) {\n        long res = 1;\n        x = x % p;\n        while (y > 0) {\n            if ((y & 1) != 0) { // If y is odd\n                res = (res * x) % p;\n            }\n            y >>= 1;         // y = y / 2\n            x = (x * x) % p; // x = x^2\n        }\n        return res % p;\n    }\n\n    // Modular multiplicative inverse using Fermat's Little Theorem\n    private long modInverse(long n, long p) { return power(n, p - 2, p); }\n\n    // Calculate nCr % p using precomputed factorials and their inverses\n    private long nCrModPFermat(long n, long r, long p) { // Changed n and r to long\n        if (r == 0) {\n            return 1;\n        }\n        if (n < r) { // If n < r, return 0\n            return 0;\n        }\n        return (fac[(int)n] * modInverse(fac[(int)r], p) % p *\n                modInverse(fac[(int)(n - r)], p) % p) %\n            p; // Cast back to int\n    }\n\n    // Precompute factorials up to n\n    private void factorial(long n) { // Changed parameter to long\n        fac = new long[(int)n + 1];  // Resize the factorial array\n        fac[0] = 1;\n        for (long i = 1; i <= n; i++) {                  // Use long in loop\n            fac[(int)i] = (fac[(int)(i - 1)] * i) % MOD; // Cast back to int\n        }\n    }\n\n    // Get the count of combinations satisfying the condition\n    public long getAnswer(long[] arr, int k, int x) { // Change arr to long[]\n        int n = arr.length;\n        factorial(n);     // Precompute factorials up to n\n        Arrays.sort(arr); // Sort the array\n        long ans = 0;\n        int i = 0, j = 0;\n\n        while (j < n) {\n            while (j < n && arr[j] - arr[i] <= x) {\n                j++;\n            }\n            // Here, j is one past the valid range, so (j - i) is the count\n            if ((j - i) >= k) { // Check if enough elements in range\n                ans = (ans + nCrModPFermat(j - i - 1, k - 1, MOD)) %\n                      MOD; // Use j - i - 1 for valid range\n            }\n            i++;\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    MOD = int(1e9 + 7)\n\n    def __init__(self):\n        self.fac = []  # Array to store factorial values\n\n    # Modular exponentiation to calculate (x^y) % p\n    def power(self, x, y, p):\n        res = 1\n        x = x % p\n\n        while y > 0:\n            if y & 1:  # If y is odd\n                res = (res * x) % p\n            y >>= 1  # y = y // 2\n            x = (x * x) % p  # x = x^2\n        return res % p\n\n    # Modular multiplicative inverse using Fermat's Little Theorem\n    def modInverse(self, n, p):\n        return self.power(n, p - 2, p)\n\n    # Calculate nCr % p using precomputed factorials and their inverses\n    def nCrModPFermat(self, n, r, p):\n        if r == 0:\n            return 1\n        if n < r:  # If n < r, return 0\n            return 0\n        return (self.fac[n] * self.modInverse(self.fac[r], p) % p *\n                self.modInverse(self.fac[n - r], p) % p) % p\n\n    # Precompute factorials up to n\n    def factorial(self, n):\n        self.fac = [0] * (n + 1)  # Resize the factorial array\n        self.fac[0] = 1\n        for i in range(1, n + 1):\n            self.fac[i] = (self.fac[i - 1] * i) % self.MOD\n\n    # Get the count of combinations satisfying the condition\n    def getAnswer(self, arr, k, x):\n        n = len(arr)\n        self.factorial(n)  # Precompute factorials up to n\n        arr.sort()  # Sort the array\n        ans = 0\n        i, j = 0, 0\n\n        while j < n:\n            while j < n and arr[j] - arr[i] <= x:\n                j += 1\n            # Here, j is one past the valid range, so (j - i) is the count\n            if (j - i) >= k:  # Check if enough elements in range\n                ans = (ans + self.nCrModPFermat(j - i - 1, k - 1, self.MOD)\n                       ) % self.MOD  # Use j - i - 1 for valid range\n            i += 1\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "const MOD = BigInt(1e9 + 7); // Convert MOD to BigInt\n\nclass Solution {\n    constructor() {\n        this.fac = []; // Array to store factorial values\n    }\n\n    // Modular exponentiation to calculate (x^y) % p\n    power(x, y, p) {\n        let res = BigInt(1);\n        x = x % p;\n\n        while (y > 0) {\n            if (y & BigInt(1)) // If y is odd\n                res = (res * x) % p;\n            y = y / BigInt(2); // y = y / 2\n            x = (x * x) % p;   // x = x^2\n        }\n        return res % p;\n    }\n\n    // Modular multiplicative inverse using Fermat's Little Theorem\n    modInverse(n, p) { return this.power(n, p - BigInt(2), p); }\n\n    // Calculate nCr % p using precomputed factorials and their inverses\n    nCrModPFermat(n, r, p) {\n        if (r === BigInt(0)) return BigInt(1);\n        if (n < r) return BigInt(0); // If n < r, return 0\n        return ((this.fac[n] * this.modInverse(this.fac[r], p) % p *\n                 this.modInverse(this.fac[n - r], p)) %\n                p);\n    }\n\n    // Precompute factorials up to n\n    factorial(n) {\n        this.fac = new Array(n + 1).fill(BigInt(0)); // Resize the factorial array\n        this.fac[0] = BigInt(1);\n        for (let i = 1; i <= n; i++) {\n            this.fac[i] = (this.fac[i - 1] * BigInt(i)) % MOD;\n        }\n    }\n\n    // Get the count of combinations satisfying the condition\n    getAnswer(arr, k, x) {\n        const n = arr.length;\n        this.factorial(n);         // Precompute factorials up to n\n        arr.sort((a, b) => a - b); // Sort the array\n        let ans = BigInt(0), i = 0, j = 0;\n\n        while (j < n) {\n            while (j < n && BigInt(arr[j]) - BigInt(arr[i]) <= x) {\n                j++;\n            }\n            // Here, j is one past the valid range, so (j - i) is the count\n            if (BigInt(j - i) >= k) {\n                ans =\n                    (ans + this.nCrModPFermat(BigInt(j - i - 1), k - BigInt(1), MOD)) %\n                    MOD; // Use j - i - 1 for valid range\n            }\n            i++;\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}