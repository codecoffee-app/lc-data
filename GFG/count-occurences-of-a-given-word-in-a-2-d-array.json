{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706363,
            "title": "Count occurrences of a given word in a 2-d array",
            "titleSlug": "count-occurences-of-a-given-word-in-a-2-d-array",
            "content": "<p><span style=\"font-size:18px\">Find the number of occurrences of a given search word in a 2d-Array of characters where the word can go up, down, left, right, and around 90-degree bends.<br />\r\n<strong>Note:</strong>&nbsp;While making a word you can use one cell only once.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: \r\n</strong>R = 4, C = 5\r\nmat = {{S,N,B,S,N},\r\n\\t {B,A,K,E,A},\r\n&nbsp;\\t{B,K,B,B,K},\r\n\\t {S,E,B,S,E}}\r\ntarget = SNAKES\r\n<strong>Output:</strong>\r\n3\r\n<strong>Explanation</strong>: \r\n<span style=\"color:#800080\">S</span> <span style=\"color:#800080\">N</span> B <span style=\"color:#800080\">S N</span>\r\nB <span style=\"color:#800080\">A K E</span> <span style=\"color:#800080\">A</span>\r\nB <span style=\"color:#800080\">K</span> B B <span style=\"color:#800080\">K</span>\r\n<span style=\"color:#800080\">S E</span> B <span style=\"color:#800080\">S E</span>\r\nTotal occurrence of the word is 3\r\nand denoted by color.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nR = 3, C = 3 \r\nmat = {{c,a,t},\r\n&nbsp;\\t{a,t,c},\r\n&nbsp;\\t{c,t,a}}\r\ntarget = cat\r\n<strong>Output:</strong>\r\n5\r\n<strong>Explanation</strong>: Same explanation\r\nas first example.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>findOccurrence()</strong>&nbsp;which takes the mat&nbsp;containing N*M 2-d array of characters&nbsp;and target as input parameters and returns the number of occurrences of the target.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(R*C*2<sup>2*len</sup>), Where len is the length of the target String.<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; len&nbsp;&le; 15<br />\r\n1 &le; R, C&nbsp;&le; 50</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use DFS.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    //Function to find the number of occurrences of a target string in a matrix.\n    int findOccurrence(vector<vector<char> > &mat, string target){\n        int count = 0;\n        //iterating over the matrix elements.\n        for(int i = 0; i < mat.size() ; i++){\n            for(int j = 0; j < mat[i].size(); j++){\n                //calling the findPath function to find if target string is present\n                //starting from the current element.\n                count += findPath(mat, target, i, j, 0);\n            }\n        }\n        //returning the total count of occurrences of the target string.\n        return count;\n    }\n    \n    //Function to find the target string path starting from a particular element.\n    int findPath(vector<vector<char> > mat, string target, int startX, int startY, int targetIndex){\n        \n        //if the current element is out of bounds, return 0.\n        if(startX < 0 || startY < 0 || startX >= mat.size() || startY >= mat[startX].size()){\n            return 0;\n        }\n        \n        //storing the original value of the current element.\n        char original = mat[startX][startY];\n        \n        //if the original value of the current element is not equal to the target character,\n        //return 0.\n        if(original != target[targetIndex])\n            return 0;\n        \n        //if we reach the last character of the target string, return 1 as path found.\n        if(targetIndex == target.size() - 1)\n            return 1;\n\n        int count = 0;\n        //changing the value of the current element to '\\0' to mark it as visited\n        //and avoid returning back to this element.\n        mat[startX][startY] = '\\0';\n\n        //recursively calling findPath function for all possible neighboring elements.\n        count += findPath(mat, target, startX+1, startY, targetIndex+1);\n        count += findPath(mat, target, startX, startY+1, targetIndex+1);\n        count += findPath(mat, target, startX-1, startY, targetIndex+1);\n        count += findPath(mat, target, startX, startY-1, targetIndex+1);\n        \n        //restoring the original value of the current element.\n        mat[startX][startY] = original;\n        //returning the count of paths found.\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findOccurrence(char mat[][], String target) {\n        // variables to store the number of rows and columns in the matrix\n        int n = mat.length;\n        int m = mat[0].length;\n        \n        // variable to store the final result\n        int ans = 0;\n        \n        // variable to store the temporary count for each occurrence\n        int cnt = 0;\n        \n        // iterating over each element in the matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                // if the current element matches the first character of the target string\n                if (mat[i][j] == target.charAt(0)) {\n                    // calling the helper function to find the occurrence starting from this position\n                    cnt = findOccurrences(mat, target, 1, i, j, -1, -1, n, m);\n                    // updating the final count\n                    ans += cnt;\n                }\n            }\n        }\n        \n        // returning the final result\n        return ans;\n    }\n    \n    // arrays to store the possible directions to move\n    int dx[] = {0, 0, -1, 1};\n    int dy[] = {-1, 1, 0, 0};\n    \n    public int findOccurrences(char mat[][], String s, int in, int i, int j, int previ, int prevj, int n, int m) {\n        // if we have found all the characters of the target string\n        if (in == s.length()) {\n            return 1;\n        }\n        \n        // variable to store the count of occurrences\n        int ans = 0;\n        \n        // storing the current element to restore it later\n        char temp = mat[i][j];\n        \n        // marking the current element as visited\n        mat[i][j] = '*';\n        \n        // iterating over all possible directions to move\n        for (int k = 0; k < 4; k++) {\n            // calculating the new coordinates based on the direction\n            int nx = i + dx[k];\n            int ny = j + dy[k];\n            \n            // skipping the previous position to avoid revisiting\n            if (nx == previ && ny == prevj) continue;\n            \n            // checking if the new coordinates are within the matrix boundaries\n            // and if the current element matches the next character of the target string\n            if (nx >= 0 && nx < n && ny >= 0 && ny < m && mat[nx][ny] == s.charAt(in)) {\n                // finding the occurrences from the new position and adding it to the count\n                ans += findOccurrences(mat, s, in + 1, nx, ny, i, j, n, m);\n            }\n        }\n        \n        // restoring the original element\n        mat[i][j] = temp;\n        \n        // returning the count of occurrences\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Importing the sys module to set the recursion limit\nimport sys\n\n# Setting the recursion limit to 10^9\nsys.setrecursionlimit(10**9)\n\n# Defining the Solution class\nclass Solution:\n    \n    # Initializing the count variable\n    def __init__(self):\n        self.count = 0\n    \n    # Helper function to perform depth-first search\n    def helper(self,mat,i,j,k,target,stack):\n        \n        # If all characters of target have been found, increment count and return\n        if k == len(target):\n            self.count += 1\n            return \n        \n        # Add the current position to the stack\n        stack.add((i,j)) \n        r,c = len(mat),len(mat[0])\n        \n        # Check if the character above the current position matches the next character of target\n        if i-1 >= 0 and mat[i-1][j] == target[k] and (i-1,j) not in stack:\n            # Recursive call to helper function\n            self.helper(mat,i-1,j,k+1,target,stack)\n            \n        # Check if the character to the left of the current position matches the next character of target\n        if j-1 >= 0 and mat[i][j-1] == target[k] and (i,j-1) not in stack:\n            # Recursive call to helper function\n            self.helper(mat,i,j-1,k+1,target,stack)\n            \n        # Check if the character below the current position matches the next character of target\n        if i+1 < r and mat[i+1][j] == target[k] and (i+1,j) not in stack:\n            # Recursive call to helper function\n            self.helper(mat,i+1,j,k+1,target,stack)\n            \n        # Check if the character to the right of the current position matches the next character of target\n        if j+1 < c and mat[i][j+1] == target[k] and (i,j+1) not in stack:\n            # Recursive call to helper function\n            self.helper(mat,i,j+1,k+1,target,stack)\n            \n        # Remove the current position from the stack\n        stack.remove((i,j))\n            \n        \n    # Function to find the number of occurrences of a target string in a matrix\n    def findOccurrence(self,mat,target):\n        r,c = len(mat),len(mat[0])\n        stack = set()\n        count = 0\n        for i in range(r):\n            for j in range(c):\n                # If the current character matches the first character of target\n                if mat[i][j] == target[0]:\n                    # Recursive call to helper function\n                    self.helper(mat,i,j,1,target,stack)\n        \n        # Returning the count of occurrences\n        return self.count",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {string[][]} mat\r\n * @param {string} target \r\n * @return {number}\r\n*/\r\nclass Solution {\r\n  findOccurrence(mat,target){\r\n    let count = 0;\r\n    for(let i=0; i<mat.length; i++) {\r\n        for(let j=0; j<mat[i].length; j++) {\r\n            count += this.findPath(mat, target, i, j, 0);\r\n        }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  findPath(mat, target, startX, startY, targetIndex) {\r\n\r\n    if(startX < 0 || startY < 0 || startX >= mat.length || startY >= mat[startX].length) {\r\n        return 0;\r\n    }\r\n\r\n    let original = mat[startX][startY];\r\n\r\n    if(original != target[targetIndex]) {\r\n        return 0;\r\n    }\r\n\r\n    if(targetIndex == target.length - 1) {\r\n        return 1;\r\n    }\r\n\r\n    let count = 0;\r\n    mat[startX][startY] = '\\0';         // avoid return back to visited node\r\n\r\n    count += this.findPath(mat, target, startX+1, startY, targetIndex+1);\r\n    count += this.findPath(mat, target, startX, startY+1, targetIndex+1);\r\n    count += this.findPath(mat, target, startX-1, startY, targetIndex+1);\r\n    count += this.findPath(mat, target, startX, startY-1, targetIndex+1);\r\n\r\n    mat[startX][startY] = original;\r\n    return count;\r\n  }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int findOccurrence(List<List<char>> mat, string target)\n    {\n        int count = 0;\n        //iterating over the matrix elements.\n        for(int i = 0; i < mat.Count ; i++){\n            for(int j = 0; j < mat[i].Count; j++){\n                //calling the findPath function to find if target string is present\n                //starting from the current element.\n                count += findPath(mat, target, i, j, 0);\n            }\n        }\n        //returning the total count of occurrences of the target string.\n        return count;\n    }\n    \n    //Function to find the target string path starting from a particular element.\n    public int findPath(List<List<char>> mat, string target, int startX, int startY, int targetIndex){\n        \n        //if the current element is out of bounds, return 0.\n        if(startX < 0 || startY < 0 || startX >= mat.Count || startY >= mat[startX].Count){\n            return 0;\n        }\n        \n        //storing the original value of the current element.\n        char original = mat[startX][startY];\n        \n        //if the original value of the current element is not equal to the target character,\n        //return 0.\n        if(original != target[targetIndex])\n            return 0;\n        \n        //if we reach the last character of the target string, return 1 as path found.\n        if(targetIndex == target.Length - 1)\n            return 1;\n\n        int count = 0;\n        //changing the value of the current element to '\\0' to mark it as visited\n        //and avoid returning back to this element.\n        mat[startX][startY] = '\\0';\n\n        //recursively calling findPath function for all possible neighboring elements.\n        count += findPath(mat, target, startX+1, startY, targetIndex+1);\n        count += findPath(mat, target, startX, startY+1, targetIndex+1);\n        count += findPath(mat, target, startX-1, startY, targetIndex+1);\n        count += findPath(mat, target, startX, startY-1, targetIndex+1);\n        \n        //restoring the original value of the current element.\n        mat[startX][startY] = original;\n        //returning the count of paths found.\n        return count;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}