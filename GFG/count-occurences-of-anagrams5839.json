{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702781,
            "title": "Count Occurences of Anagrams",
            "titleSlug": "count-occurences-of-anagrams5839",
            "content": "<p><span style=\"font-size: 18px;\">Given a word <strong>pat</strong>&nbsp;and a text <strong>txt</strong>. Return the count of the occurrences of anagrams of the word in the text.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>txt = \"forxxorfxdofr\", pat = \"for\"\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> <strong>for, orf</strong> and <strong>ofr </strong>appears in the <strong>txt, </strong>hence answer is 3.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>txt = \"aabaabaa\", pat = \"aaba\"\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>&nbsp;<strong>aaba</strong> is present 4 times in <strong>txt</strong>.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;=&nbsp;|pat| &lt;= |txt|&nbsp;&lt;= 10<sup>5</sup><br />Both strings contain lowercase English letters.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a pattern string `pat` and a text string `txt`, find the number of occurrences of anagrams of `pat` within `txt`.",
                "constraints": [
                    "1 <= |pat| <= |txt| <= 10^5",
                    "Both strings contain lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "txt = \"forxxorfxdofr\", pat = \"for\"",
                        "output": "3",
                        "explanation": "The anagrams \"for\", \"orf\", and \"ofr\" of the pattern \"for\" appear in the text \"forxxorfxdofr\" at different starting positions."
                    },
                    {
                        "input": "txt = \"aabaabaa\", pat = \"aaba\"",
                        "output": "4",
                        "explanation": "The string \"aaba\" appears 4 times in the text \"aabaabaa\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We can achieve O(n) time complexity under the assumption that alphabet size is fixed which is typically true as we have maximum 256 possible characters in ASCII. The idea is to use two count arrays:</span></p>\n\n<p><span style=\"font-size:18px\">1) The first count array store frequencies of characters in pattern.<br />\n2) The second count array stores frequencies of characters in current window of text.</span></p>\n\n<p><span style=\"font-size:18px\">The important thing to note is, time complexity to compare two count arrays is O(1) as the number of elements in them are fixed (independent of pattern and text sizes). Following are steps of this algorithm.<br />\n1) Store counts of frequencies of pattern in first count array&nbsp;<em>countP[]</em>. Also store counts of frequencies of characters in first window of text in array&nbsp;<em>countTW[]</em>.</span></p>\n\n<p><span style=\"font-size:18px\">2) Now run a loop from i = M to N-1. Do following in loop.<br />\n&hellip;..a) If the two count arrays are identical, we found an occurrence.<br />\n&hellip;..b) Increment count of current character of text in countTW[]<br />\n&hellip;..c) Decrement count of first character in previous window in countWT[]</span></p>\n\n<p><span style=\"font-size:18px\">3) The last window is not checked by above loop, so explicitly check it.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "intuit"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nconst int MAX = 256;\n\nclass Solution {\n\n    // This function returns true if contents of arr1[] and arr2[]\n    // are same, otherwise false.\n    bool compare(char arr1[], char arr2[]) {\n        for (int i = 0; i < MAX; i++)\n            if (arr1[i] != arr2[i])\n                return false;\n        return true;\n    }\n\n  public:\n    // This function search for all permutations of pat[] in txt[]\n    int search(string pat, string txt) {\n        int M = pat.size(), N = txt.size();\n\n        // countP[]: Store count of all characters of pattern\n        // countTW[]: Store count of current window of text\n        char countP[MAX] = {0}, countTW[MAX] = {0};\n        for (int i = 0; i < M; i++) {\n            (countP[pat[i]])++;\n            (countTW[txt[i]])++;\n        }\n        int ans = 0;\n\n        // Traverse through remaining characters of pattern\n        for (int i = M; i < N; i++) {\n            // Compare counts of current window of text with\n            // counts of pattern[]\n            if (compare(countP, countTW))\n                ans++;\n\n            // Add current character to current window\n            (countTW[txt[i]])++;\n\n            // Remove the first character of previous window\n            countTW[txt[i - M]]--;\n        }\n\n        // Check for the last window in text\n        if (compare(countP, countTW))\n            ans++;\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    final int MAX = 256;\r\n\r\n    // This function returns true if contents\r\n    // of arr1[] and arr2[] are same, otherwise\r\n    // false.\r\n    boolean compare(char arr1[], char arr2[]) {\r\n        for (int i = 0; i < MAX; i++)\r\n            if (arr1[i] != arr2[i]) return false;\r\n        return true;\r\n    }\r\n\r\n    // This function search for all permutations\r\n    // of pat[] in txt[]\r\n    int search(String pat, String txt) {\r\n        int M = pat.length();\r\n        int N = txt.length();\r\n\r\n        // countP[]: Store count of all\r\n        // characters of pattern\r\n        // countTW[]: Store count of current\r\n        // window of text\r\n        char[] countP = new char[MAX];\r\n        char[] countTW = new char[MAX];\r\n        for (int i = 0; i < M; i++) {\r\n            (countP[pat.charAt(i)])++;\r\n            (countTW[txt.charAt(i)])++;\r\n        }\r\n        int ans = 0;\r\n        // Traverse through remaining characters\r\n        // of pattern\r\n        for (int i = M; i < N; i++) {\r\n            // Compare counts of current window\r\n            // of text with counts of pattern[]\r\n            if (compare(countP, countTW)) ans++;\r\n\r\n            // Add current character to current\r\n            // window\r\n            (countTW[txt.charAt(i)])++;\r\n\r\n            // Remove the first character of previous\r\n            // window\r\n            countTW[txt.charAt(i - M)]--;\r\n        }\r\n\r\n        // Check for the last window in text\r\n        if (compare(countP, countTW)) ans++;\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\nclass Solution:\r\n\r\n\t# This function returns true \r\n\t# if contents of arr1[] and arr2[] \r\n\t# are same, otherwise false. \r\n\tdef compare(self,arr1, arr2): \r\n\t\tMAX=256\r\n\t\tfor i in range(MAX): \r\n\t\t\tif arr1[i] != arr2[i]: \r\n\t\t\t\treturn False\r\n\t\treturn True\r\n\t\t\r\n\t# This function search for all \r\n\t# permutations of pat[] in txt[] \r\n\tdef search(self,pat, txt): \r\n\t\tMAX=256\r\n\t\tM = len(pat) \r\n\t\tN = len(txt) \r\n\r\n\t\t# countP[]: Store count of \r\n\t\t# all characters of pattern \r\n\t\t# countTW[]: Store count of \r\n\t\t# current window of text \r\n\t\tcountP = [0]*MAX\r\n\r\n\t\tcountTW = [0]*MAX\r\n\r\n\t\tfor i in range(M): \r\n\t\t\t(countP[ord(pat[i]) ]) += 1\r\n\t\t\t(countTW[ord(txt[i]) ]) += 1\r\n\r\n\t\tans=0\r\n\t\t# Traverse through remaining \r\n\t\t# characters of pattern \r\n\t\tfor i in range(M,N): \r\n\r\n\t\t\t# Compare counts of current \r\n\t\t\t# window of text with \r\n\t\t\t# counts of pattern[] \r\n\t\t\tif self.compare(countP, countTW): \r\n\t\t\t\tans+=1;\r\n\r\n\t\t\t# Add current character to current window \r\n\t\t\t(countTW[ ord(txt[i]) ]) += 1\r\n\r\n\t\t\t# Remove the first character of previous window \r\n\t\t\t(countTW[ ord(txt[i-M]) ]) -= 1\r\n\t\t\r\n\t\t# Check for the last window in text\t \r\n\t\tif self.compare(countP, countTW): \r\n\t\t\tans+=1\r\n\t\treturn ans\r\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\nclass Solution{\n    // This function returns true if contents of arr1[] and arr2[]\n    // are same, otherwise false.\n    bool Compare(char[] arr1, char[] arr2) {\n        int MAX = 256;\n        \n        for (int i = 0; i < MAX; i++) {\n            if (arr1[i] != arr2[i]) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    //Complete this function\n    public int search(string pat, string txt) {\n        int MAX = 256;\n        int M = pat.Length, N = txt.Length;\n \n        // countP[]: Store count of all characters of pattern\n        // countTW[]: Store count of current window of text\n        char[] countP = new char[MAX];\n        char[] countTW = new char[MAX];\n        \n        for (int i = 0; i < M; i++) {\n            countP[pat[i]]++;\n            countTW[txt[i]]++;\n        }\n        \n        int ans = 0;\n \n        // Traverse through remaining characters of pattern\n        for (int i = M; i < N; i++) {\n            // Compare counts of current window of text with\n            // counts of pattern[]\n            if (Compare(countP, countTW)) {\n                ans++;\n            }\n \n            // Add current character to current window\n            countTW[txt[i]]++;\n \n            // Remove the first character of previous window\n            countTW[txt[i - M]]--;\n        }\n \n        // Check for the last window in text\n        if (Compare(countP, countTW)) {\n            ans++;\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n\n/**\n * @param {string} pat\n * @param {string} txt\n * @return {number}\n*/\n\nclass Solution {\n    search(pat,txt){\n        const MAX = 256;\n\n        // This function returns true if contents of arr1[] and arr2[]\n        // are same, otherwise false.\n        const compare = (arr1, arr2) => {\n            for (let i = 0; i < MAX; i++)\n                if (arr1[i] !== arr2[i]) return false;\n            return true;\n        }\n\n        let M = pat.length, N = txt.length;\n\n        // countP[]: Store count of all characters of pattern\n        // countTW[]: Store count of current window of text\n        let countP = new Array(MAX).fill(0);\n        let countTW = new Array(MAX).fill(0);\n        for (let i = 0; i < M; i++) {\n            (countP[pat.charCodeAt(i)])++;\n            (countTW[txt.charCodeAt(i)])++;\n        }\n        let ans = 0;\n\n        // Traverse through remaining characters of pattern\n        for (let i = M; i < N; i++) {\n            // Compare counts of current window of text with\n            // counts of pattern[]\n            if (compare(countP, countTW)) ans++;\n\n            // Add current character to current window\n            (countTW[txt.charCodeAt(i)])++;\n\n            // Remove the first character of previous window\n            countTW[txt.charCodeAt(i - M)]--;\n        }\n\n        // Check for the last window in text\n        if (compare(countP, countTW)) ans++;\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}