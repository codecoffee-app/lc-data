{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704106,
            "title": "Count Odd Factors",
            "titleSlug": "count-odd-factors0844",
            "content": "<p><span style=\"font-size:18px\">Given an integer <strong>N</strong>, count the numbers having<strong>&nbsp;an odd number of factors from 1 to N</strong> (inclusive).</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\n<strong>Output:</strong>\n2\n<strong>Explanation:</strong>\nFrom 1 - 5 only 2 numbers,\n1 and 4 are having odd number\nof factors.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 1\n<strong>Output:</strong>\n1\n<strong>Explanation:</strong>\n1 have only 1(odd)\nfactor\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>count()</strong>&nbsp;which takes&nbsp;an integer <strong>N</strong>&nbsp;as input parameters&nbsp;and returns an integer, the total count of numbers&nbsp;from 1 to N having an odd number of factors.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(sqrt(N))<br />\n<strong>Expected Space Complexity:</strong> O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n0 &lt;= N &lt;= 10<sup>9</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, determine the count of numbers between 1 and N (inclusive) that possess an odd number of factors.",
                "constraints": [
                    "0 <= N <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "2",
                        "explanation": "The numbers between 1 and 5 with an odd number of factors are 1 and 4. Therefore, the count is 2."
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "The number 1 has only one factor, which is 1 itself.  Since 1 is odd, the count is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Look out for a pattern.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "wipro"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    // Function to count the square root of N\n    int count(int N)\n    {\n        // return the square root of N as answer\n        int ans = (int)(sqrt(N));\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Solution{\n    static long count(int N)        \n    {\n        // return the square root of N as answer\n        int ans = (int)(Math.sqrt(N));\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nimport math\n\nclass Solution:\n\n    #Function to count the square root of N.\n    def count (self, N):\n        # return the square root of N as answer\n        return int(math.sqrt(N))",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    count(N) { // Function to count the number of perfect squares up to N.\n        let cnt = 0; // Initialize a variable to store the count of perfect squares.\n        for (let i = 1; i <= N; i++) { // Iterate from 1 to N (inclusive).\n            let rt = Math.floor(Math.sqrt(i)); // Calculate the square root of i and round it down.\n            if ((rt * rt) === i) { // Check if i is a perfect square by comparing the square of the rounded square root with i.\n                cnt++; // Increment the count if i is a perfect square.\n            }\n        }\n        return cnt; // Return the count of perfect squares.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}