{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704110,
            "title": "Count numbers with given sum",
            "titleSlug": "count-of-n-digit-numbers-whose-sum-of-digits-equals-to-given-sum0733",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers <strong>&lsquo;n&rsquo;</strong> and <strong>&lsquo;sum&rsquo;</strong>, find the count of all n digit numbers whose sum of digits is&nbsp;&lsquo;sum&rsquo;. Leading 0&rsquo;s are not counted as digits.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">Since the answer can be large, output it modulo 10<sup>9</sup>+7.</span></p>\n<p><br /><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 2, sum = 2\n<strong>Output:</strong> 2\n<strong>Explaination:</strong> \nThe 2 digit numbers are 11 and 20.</span></pre>\n<p><br /><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 1, sum = 10\n<strong>Output:</strong> -1\n<strong>Explaination:</strong> \nWe cannot get sum as 10 from a single digit.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>countWays()</strong> which takes the value <strong>n</strong> and <strong>sum</strong> as input parameters and returns the number of possible ways modulo 10<sup>9</sup>+7. If there is no possible way then it returns -1.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*sum)<br /><strong>Expected Auxiliary Space:</strong> O(n*sum)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>3</sup><br />1 &le; sum &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers 'n' representing the number of digits and 'sum' representing the desired sum of digits, determine the number of 'n' digit numbers whose digits sum up to 'sum'.  Leading zeros are not allowed. Since the answer can be very large, return the count modulo 10^9 + 7. If no such numbers exist, return -1.",
                "constraints": [
                    "1 <= n <= 10^3",
                    "1 <= sum <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "n = 2, sum = 2",
                        "output": "2",
                        "explanation": "The valid 2-digit numbers whose digits sum to 2 are 11 and 20."
                    },
                    {
                        "input": "n = 1, sum = 10",
                        "output": "-1",
                        "explanation": "It is impossible to achieve a sum of 10 using a single digit (0-9)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">For each possible value&nbsp;of each digit check if we can achieve the sum.</span></p>",
            "<p><span style=\"font-size: 18px;\">Use memoization to reduce time complexity.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to calculate the number of ways to achieve the given sum\n    long int cal(int n, int sum, vector<vector<int>> &dp) {\n        // Base case: if n is 0 and sum is 0, return 1 because there is one way to\n        // achieve the sum\n        if (n == 0) {\n            if (sum == 0)\n                return 1;\n            else\n                return 0;\n        }\n        // If the result for the current values of n and sum is already calculated,\n        // return it\n        else if (dp[n][sum] != -1)\n            return dp[n][sum];\n        // Variable to store the total number of ways to achieve the sum\n        long int val = 0;\n        // Loop through all the possible digits (0 to 9) and calculate the number of\n        // ways using recursion\n        for (int i = 0; i < 10; i++) {\n            if (sum - i >= 0) {\n                val = (val + cal(n - 1, sum - i, dp)) % 1000000007;\n            }\n        }\n        // Store the calculated value in dp array and return it\n        return dp[n][sum] = val;\n    }\n\n    // Function to count the number of ways to achieve the given sum\n    long int countWays(int n, int Sum) {\n        // Variable to store the final answer\n        long int ans = 0, mod = 1000000007;\n        // 2D vector to store the calculated values for each combination of n and sum\n        vector<vector<int>> dp(n + 1, vector<int>(Sum + 1, -1));\n        // Loop through all possible starting digits (1 to 9) and calculate the number\n        // of ways\n        for (int i = 1; i <= 9; i++) {\n            // Check if the current starting digit can be subtracted from the sum\n            if (Sum - i >= 0)\n                ans = (ans + cal(n - 1, Sum - i, dp)) % mod;\n        }\n        // If no ways to achieve the sum are found, return -1, else return the answer\n        if (ans == 0)\n            return -1;\n        else\n            return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    static long mod = 1000000007;\n\n    // Function to calculate the number of ways to achieve the given sum\n    static long cal(int n, int sum, long[][] dp) {\n        // Base case: if n is 0 and sum is 0, return 1 because there is one way to\n        // achieve the sum\n        if (n == 0) {\n            if (sum == 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n        // If the result for the current values of n and sum is already calculated,\n        // return it\n        else if (dp[n][sum] != -1) {\n            return dp[n][sum];\n        }\n        // Variable to store the total number of ways to achieve the sum\n        long val = 0;\n        // Loop through all the possible digits (0 to 9) and calculate the number of\n        // ways using recursion\n        for (int i = 0; i < 10; i++) {\n            if (sum - i >= 0) {\n                val = (val + cal(n - 1, sum - i, dp)) % mod;\n            }\n        }\n        // Store the calculated value in dp array and return it\n        dp[n][sum] = val;\n        return val;\n    }\n\n    // Function to count the number of ways to achieve the given sum\n    static long countWays(int n, int Sum) {\n        // Variable to store the final answer\n        long ans = 0;\n        // 2D array to store the calculated values for each combination of n and sum\n        long[][] dp = new long[n + 1][Sum + 1];\n\n        // Initialize the dp array with -1\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Sum; j++) {\n                dp[i][j] = -1;\n            }\n        }\n\n        // Loop through all possible starting digits (1 to 9) and calculate the number\n        // of ways\n        for (int i = 1; i <= 9; i++) {\n            // Check if the current starting digit can be subtracted from the sum\n            if (Sum - i >= 0) {\n                ans = (ans + cal(n - 1, Sum - i, dp)) % mod;\n            }\n        }\n\n        // If no ways to achieve the sum are found, return -1, else return the answer\n        if (ans == 0) {\n            return -1;\n        } else {\n            return ans;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number} n\n * @param {number} Sum\n * @returns {number}\n */\n\nclass Solution {\n    // Function to count the number of ways to reach the given score in a game.\n    countWays(n, Sum) {\n        const MOD = 1000000007;\n        const dp = Array.from({length : n}, () => Array(Sum + 1).fill(0));\n\n        for (let s = 1; s < Math.min(Sum + 1, 10); ++s) {\n            dp[0][s] = 1;\n        }\n\n        for (let i = 1; i < n; ++i) {\n            for (let s = 1; s <= Sum; ++s) {\n                for (let digit = 0; digit < Math.min(s, 10); ++digit) {\n                    if (s > digit) {\n                        dp[i][s] = (dp[i][s] + dp[i - 1][s - digit]) % MOD;\n                    }\n                }\n            }\n        }\n\n        return dp[n - 1][Sum] === 0 ? -1 : dp[n - 1][Sum];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}