{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 702997,
      "title": "Count of Palindromic substrings in an Index range",
      "titleSlug": "count-of-palindromic-substrings-in-an-index-range3752",
      "content": "<p><span style=\"font-size:18px\">Given a string <strong>S</strong> of lowercase english&nbsp;alphabetic characters and a substring range starting from <strong>q1</strong> and ending at <strong>q2</strong>,&nbsp;the task is to find out the count of palindromic substrings in the given substring range.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 7 \nS = &quot;xyaabax&quot;\nq1 = 3\nq2 = 5\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: The substring in the given range \nis &quot;aba&quot;. Hence, the palindromic substrings are:\n&quot;a&quot;, &quot;b&quot;, &quot;a&quot; and &quot;aba&quot;.</span>\n</pre>\n\n<p><span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nN = 7\nS = &quot;xyaabax&quot; \nq1 = 2 \nq2 = 3. \n<strong>Output:</strong> 3\n<strong>Explanation</strong>: The substring in the given range\nis &quot;aa&quot;. Hence, the palindromic substrings are: \n&quot;a&quot;, &quot;a&quot; and &quot;aa&quot;.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>countPalinInRange()&nbsp;</strong>which takes the string S, its length N and the range variables q1 and q2 as input parameters&nbsp;and returns the count of the Palindromic substrings in the given substring range.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|<sup>2</sup>).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le;&nbsp;|S| &le;&nbsp;1000<br />\n0 &le; q1, q2 &lt; |S|</span></p>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given a string S of lowercase English alphabetic characters and a substring range defined by indices q1 and q2 (inclusive), determine the number of palindromic substrings within that range.",
        "constraints": ["1 <= |S| <= 1000", "0 <= q1, q2 < |S|"],
        "testcases": [
          {
            "input": "N = 7\nS = \"xyaabax\"\nq1 = 3\nq2 = 5",
            "output": "4",
            "explanation": "The substring within the range [3, 5] is \"aba\". The palindromic substrings are \"a\", \"b\", \"a\", and \"aba\". Therefore, the count is 4."
          },
          {
            "input": "N = 7\nS = \"xyaabax\"\nq1 = 2\nq2 = 3",
            "output": "3",
            "explanation": "The substring within the range [2, 3] is \"aa\". The palindromic substrings are \"a\", \"a\", and \"aa\". Therefore, the count is 3."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p><span style=\"font-size:18px\">A palindrome mirrors around its centre. Use this fact to solve in qaudratic time complexity.</span></p>\n\n<p><span style=\"font-size:18px\">For every character in range, try mirroring it around the current character. This will generate all the palindromes of odd length around the current character.</span></p>\n\n<p><span style=\"font-size:18px\">Also, if the current character is equal to the next character, you can try mirroring it around these two&nbsp;characters to generate the even length palindromes around the current two&nbsp;characters.</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Strings",
        "slug": "strings"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "palindrome",
        "slug": "palindrome"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      },
      {
        "name": "Algorithms",
        "slug": "algorithms"
      }
    ],
    "companies": ["sap"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "int countPalinInRange (int n, string A, int q1, int q2)\n{\n    if (q1 > q2) swap (q1, q2);\n\tint res = 0;\n\tint j, k;\n    \n    // solved using the fact that a palindrome mirrors around its centre\n\tfor (int i = q1; i <= q2; i++)\n\t{\n\t\tj = i - 1;\n\t\tk = i + 1;\n\t\tres++;\n\t\t\n\t\t// generating the mirror around the current element \n\t\t// to have a palindrome with odd length\n\t\twhile (j >= q1 and k <= q2)\n\t\t{\n\t\t\tif (A[j] == A[k])\n\t\t\t\tres++;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t\tj--;\n\t\t\tk++;\n\t\t}\n\n        // if the current character is same as the next,\n        // a plaindrome can be mirrored around these 2 characters\n        // this way, we'll have a palindrome of even length\n\t\tif (i < n - 1 and A[i] == A[i + 1])\n\t\t{\n\t\t\tj = i;\n\t\t\tk = i + 1;\n\n\t\t\twhile (j >= q1 and k <= q2)\n\t\t\t{\n\t\t\t\tif (A[j] == A[k])\n\t\t\t\t\tres++;\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t\tj--;\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn res;\n}\n\n// Contributed By: Pranay Bansal\n",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "//Back-end complete function Template for Java\n\nclass Sol\n{\n    int countPalinInRange (int n, String A, int q1, int q2)\n    {\n        if (q1 > q2)\n        {\n            int temp = q1;\n            q1 = q2;\n            q2 = temp;\n        }\n    \tint res = 0;\n    \tint j, k;\n        \n        // solved using the fact that a palindrome mirrors around its centre\n    \tfor (int i = q1; i <= q2; i++)\n    \t{\n    \t\tj = i - 1;\n    \t\tk = i + 1;\n    \t\tres++;\n    \t\t\n    \t\t// generating the mirror around the current element \n    \t\t// to have a palindrome with odd length\n    \t\twhile (j >= q1 && k <= q2)\n    \t\t{\n    \t\t\tif (A.charAt(j) == A.charAt(k))\n    \t\t\t\tres++;\n    \t\t\telse\n    \t\t\t\tbreak;\n    \t\t\tj--;\n    \t\t\tk++;\n    \t\t}\n    \n            // if the current character is same as the next,\n            // a plaindrome can be mirrored around these 2 characters\n            // this way, we'll have a palindrome of even length\n    \t\tif (i < n - 1 && A.charAt(i) == A.charAt(i+1))\n    \t\t{\n    \t\t\tj = i;\n    \t\t\tk = i + 1;\n    \n    \t\t\twhile (j >= q1 && k <= q2)\n    \t\t\t{\n    \t\t\t\tif (A.charAt(j) == A.charAt(k))\n    \t\t\t\t\tres++;\n    \t\t\t\telse\n    \t\t\t\t\tbreak;\n    \t\t\t\tj--;\n    \t\t\t\tk++;\n    \t\t\t}\n    \t\t}\n    \t}\n    \n    \treturn res;\n    }\n}\n\n// Contributed By: Pranay Bansal\n",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Back-end complete function Template for Python 3\n\ndef countPalinInRange (n, A, q1, q2):\n    res = 0\n    if q1 > q2:\n        q1, q2 = q2, q1\n    \n    # solved using the fact that a palindrome mirrors around its centre\n    for i in range (q1, q2 + 1):\n        j = i - 1\n        k = i + 1\n        \n        res += 1\n        \n        # generating the mirror around the current element \n        # to have a palindrome with odd length\n        while (j >= q1 and k <= q2):\n            if (A[j] == A[k]):\n                res += 1\n                \n            else:\n                break\n            j -= 1\n            k += 1\n         \n        # if the current character is same as the next,\n        # a plaindrome can be mirrored around these 2 characters\n        # this way, we'll have a palindrome of even length\n        if (i < n - 1 and A[i] == A[i + 1]):\n            j = i\n            k = i + 1\n            \n            while (j >= q1 and k <= q2):\n                if (A[j] == A[k]):\n                    res += 1\n                else:\n                    break\n                j -= 1\n                k += 1\n                \n    return res\n    \n# Contributed By: Pranay Bansal\n",
        "lang_text": "py"
      },
      {
        "lang": "C#",
        "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to count palindrome in a range.\n    public int countPalinInRange(int n, string A, int q1, int q2)\n    {\n        //Variable to store the count of palindromic substrings in the given range.\n        int res = 0;\n\n        //Swapping q1 and q2 if q1 is greater than q2.\n        if (q1 > q2)\n        {\n            int temp = q1;\n            q1 = q2;\n            q2 = temp;\n        }\n\n        int j, k;\n\n        //Solved using the fact that a palindrome mirrors around its center.\n        for (int i = q1; i <= q2; i++)\n        {\n            j = i - 1;\n            k = i + 1;\n            res++;\n\n            //Generating the mirror around the current element \n            //to have a palindrome with odd length.\n            while (j >= q1 && k <= q2)\n            {\n                if (A[j] == A[k])\n                    res++;\n                else\n                    break;\n                j--;\n                k++;\n            }\n\n            //If the current character is same as the next,\n            //a palindrome can be mirrored around these 2 characters\n            //this way, we'll have a palindrome of even length.\n            if (i < n - 1 && A[i] == A[i + 1])\n            {\n                j = i;\n                k = i + 1;\n\n                while (j >= q1 && k <= q2)\n                {\n                    if (A[j] == A[k])\n                        res++;\n                    else\n                        break;\n                    j--;\n                    k++;\n                }\n            }\n        }\n\n        //Returning the count of palindromic substrings in the given range.\n        return res;\n    }\n}",
        "lang_text": "csharp"
      }
    ],
    "platform": "GFG"
  }
}
