{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703197,
            "title": "String's Count",
            "titleSlug": "count-of-strings-that-can-be-formed-using-a-b-and-c-under-given-constraints1135",
            "content": "<p><span style=\"font-size: 18px;\">Given a length <strong>n</strong>, count the number of strings of length <strong>n</strong> that can be made using <strong>a</strong>, <strong>b</strong> and <strong>c</strong> with at-most one <strong>b</strong> and two <strong>c</strong>&nbsp;allowed.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 1</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 3\n<strong>Explanation:</strong> Possible strings are: \"a\",\n\"b\" and \"c\"</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 3\n<strong>Output:</strong> 19\n<strong>Explanation:</strong> Number of strings with 3 \noccurrances of a: 1\n2-a and 1-b: 3\n2-a and 1-c: 3\n1-a, 1-b and 1-c: 6\n1-a and 2-c: 3\n1-b and 2-c: 3\nSo, total number of strings of length 3\nis 1 + 3 + 3 + 6 + 3 + 3 = 19\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>countStr</strong><strong>()</strong>&nbsp;which takes the <strong>n</strong></span><span style=\"font-size: 18px;\"><strong> </strong>as inputs and returns the <strong>total number</strong> of valid strings.<br /><br /><strong>Expected Time Complexity:</strong>&nbsp;O(1)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br /><br /><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Try to find why answer is&nbsp;1+(n*2)+(n*((n*n)-1)/2).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "long long int countStr(long long int n) { \n    long long ans = 1+(n*2)+(n*((n*n)-1)/2);\n    return ans; \n} ",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution \n{ \n    static long countStr(long n)\n\t{\n\t    long ans = 1+(n*2)+(n*((n*n)-1)/2);\n        return ans; \n\t}\n} ",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countStr(self, n):\n        # calculating the total number of strings for given value of n\n        res = 0\n        # counting the number of string combinations with only one character\n        res += 1 + (n * 2)\n        # counting the number of string combinations with two characters using the formula (n*(n*n-1))/2\n        res += n * ((n * n) - 1) / 2\n        \n        return int(res)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to count strings of n length such that each string can be formed from a, b and c\n    countStr(n) {\n        let res = 0;\n        // counting the number of string combinations with only one character\n        res += 1 + (n * 2);\n        // counting the number of string combinations with two characters using the formula (n*(n*n-1))/2\n        res += n * ((n * n) - 1) / 2;\n        \n        return parseInt(res);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\npublic class Solution{\n    //Complete this function\n    public long countStr(long n){\n        long ans = 1+(n*2)+(n*((n*n)-1)/2);\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}