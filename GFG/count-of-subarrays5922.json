{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702783,
            "title": "Count of Subarrays",
            "titleSlug": "count-of-subarrays5922",
            "content": "<p><span style=\"font-size:18px\">Given an array of <strong>N</strong> positive integers&nbsp; <strong>Arr<sub>1</sub>, Arr<sub>2</sub> ............ Arr<sub>n</sub></strong>. The value of each contiguous subarray of given array is the <strong>maximum element present in that subarray</strong>. The task is to return the number of subarrays having value strictly greater than <strong>K</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 3, K = 2\nArr[] = {3, 2, 1}\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The subarrays having value\nstrictly greater than K are: [3], [3, 2]\nand [3, 2, 1]. Thus there are 3 such\nsubarrays.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4, K = 1\nArr[] = {1, 2, 3, 4}\n<strong>Output:</strong> 9\n<strong>Explanation:</strong>&nbsp;There are 9 subarrays having\nvalue strictly greater than K.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nComplete the function <strong>countSubarray()</strong>&nbsp;which takes an array <strong>arr,</strong> two integers <strong>n, k,</strong>&nbsp;as input parameters&nbsp;and returns an integer&nbsp;denoting the answer.&nbsp;You don&#39;t to print answer or take inputs.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>5</sup><br />\n1 &lt;= Arr[i] &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `Arr` of `N` positive integers (Arr<sub>1</sub>, Arr<sub>2</sub>, ..., Arr<sub>n</sub>), determine the number of contiguous subarrays where the maximum element within the subarray is strictly greater than `K`.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= Arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 3, K = 2\nArr[] = {3, 2, 1}",
                        "output": "3",
                        "explanation": "The subarrays with a maximum element strictly greater than 2 are: [3], [3, 2], and [3, 2, 1]. Therefore, there are 3 such subarrays."
                    },
                    {
                        "input": "N = 4, K = 1\nArr[] = {1, 2, 3, 4}",
                        "output": "9",
                        "explanation": "There are 9 subarrays where the maximum element is strictly greater than 1. These are [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], [1,2,3,4]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a reverse idea?</p>",
            "<p>It is easier to calculate the number of sub-arrays with maximum value less than or equal to k</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n#define MAX 256\n\nclass Solution{\npublic:\n\t// Return number of subarrays whose maximum\n\t// element is less than or equal to K.\n\tll countSubarray(int arr[], int n, int k) {\n\t    // To store count of subarrays with all\n\t    // elements less than or equal to k.\n\t    ll s = 0;\n\n\t    // Traversing the array.\n\t    int i = 0;\n\t    while (i < n) {\n\t        // If element is greater than k, ignore.\n\t        if (arr[i] > k) {\n\t            i++;\n\t            continue;\n\t        }\n\n\t        // Counting the subarray length whose\n\t        // each element is less than equal to k.\n\t        ll count = 0;\n\t        while (i < n && arr[i] <= k) {\n\t            i++;\n\t            count++;\n\t        }\n\n\t        // Suming number of subarray whose\n\t        // maximum element is less than equal to k.\n\t        s += ((count * (count + 1)) / 2);\n\t    }\n\n\t    return (((ll)n * (ll)(n + 1) / 2) - s);\n\t}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    // Return number of subarrays whose maximum\n    // element is less than or equal to K.\n    long countSubarray(int arr[], int n, int k) {\n\n        // To store count of subarrays with all\n        // elements less than or equal to k.\n        long s = 0;\n\n        // Traversing the array.\n        int i = 0;\n        while (i < n) {\n\n            // If element is greater than k, ignore.\n            if (arr[i] > k) {\n                i++;\n                continue;\n            }\n\n            // Counting the subarray length whose\n            // each element is less than equal to k.\n            long count = 0;\n            while (i < n && arr[i] <= k) {\n                i++;\n                count++;\n            }\n\n            // Suming number of subarray whose\n            // maximum element is less than equal to k.\n            s += ((count * (count + 1)) / 2);\n        }\n\n        return ((long)n * (long)(n + 1) / 2 - s);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n\n\n#Back-end complete function Template for Python 3\nclass Solution:\n\n\t# Return number of \n\t# subarrays whose maximum \n\t# element is less than or equal to K. \n\tdef countSubarray(self,arr, n, k): \n\n\t\t# To store count of \n\t\t# subarrays with all \n\t\t# elements less than \n\t\t# or equal to k. \n\t\ts = 0\n\n\t\t# Traversing the array. \n\t\ti = 0\n\t\twhile (i < n): \n\t\t\n\t\t\t# If element is greater \n\t\t\t# than k, ignore. \n\t\t\tif (arr[i] > k): \n\t\t\t\n\t\t\t\ti = i + 1\n\t\t\t\tcontinue\n\t\t\t\n\t\t\t# Counting the subarray \n\t\t\t# length whose \n\t\t\t# each element is less \n\t\t\t# than equal to k. \n\t\t\tcount = 0\n\t\t\twhile (i < n and arr[i] <= k): \n\t\t\t\n\t\t\t\ti = i + 1\n\t\t\t\tcount = count + 1\n\t\t\t\n\n\t\t\t# Suming number of subarray whose \n\t\t\t# maximum element is less \n\t\t\t# than equal to k. \n\t\t\ts = s + ((count*(count + 1))//2) \n\t\t\n\n\t\treturn (n*(n + 1)//2 - s) \n\t\t",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @param {number} k\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to count subarrays with sum less than or equal to k.\n    countSubarray(arr, n, k) {\n        let s = 0;\n        let i = 0;\n        while (i < n) {\n            if (arr[i] > k) {\n                i = i + 1;\n                continue;\n            }\n\n            let count = 0;\n            while (i < n && arr[i] <= k) {\n                i = i + 1;\n                count = count + 1;\n            }\n            \n            s = s + ((count*(count + 1))/2);\n        }\n        \n        return (n*(n + 1)/2 - s);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}