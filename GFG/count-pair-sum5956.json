{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702779,
            "title": "Count pair sum",
            "titleSlug": "count-pair-sum5956",
            "content": "<p><span style=\"font-size: 18px;\">Given two sorted arrays <strong>arr</strong>1 and <strong>arr</strong>2 of distinct elements. Given a value <strong>x</strong>. The problem is to count all pairs from both arrays whose sum equals <strong>x.</strong><br /><strong>Note:</strong> The pair has an element from each array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>x = 10, arr1[] = [1, 3, 5, 7], arr2[] = [2, 3, 5, 8] \n<strong>Output:</strong> 2\n<strong>Explanation</strong>: The pairs are: (5, 5) and (7, 3).  </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> x = 5, arr1[] = [1, 2, 3, 4], arr2[] = [5, 6, 7, 8]\n<strong>Output:</strong> 0<br /><strong>Explanation: </strong>There are no valid pairs.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n+m).<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>1 &le; x &le; 10<sup>9</sup><br />1 &le; arr1.size(), arr2.size() &le; 10<sup>6<br /></sup>1 &le; arr1[i], arr2[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted arrays, `arr1` and `arr2`, containing distinct elements, find the number of pairs (one element from each array) whose sum equals a target value `x`.",
                "constraints": [
                    "1 <= x <= 10^9",
                    "1 <= arr1.size(), arr2.size() <= 10^6",
                    "1 <= arr1[i], arr2[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "x = 10, arr1 = [1, 3, 5, 7], arr2 = [2, 3, 5, 8]",
                        "output": "2",
                        "explanation": "The pairs that sum to 10 are (5, 5) and (7, 3)."
                    },
                    {
                        "input": "x = 5, arr1 = [1, 2, 3, 4], arr2 = [5, 6, 7, 8]",
                        "output": "0",
                        "explanation": "There are no pairs that sum to 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>This approach uses the concept of two pointers, one to traverse 1st array from left to right and another to traverse the 2nd array from right to left.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    int countPairs(vector<int>& arr1, vector<int>& arr2, int x) {\n        int m = arr1.size();\n        int n = arr2.size();\n        int count = 0;\n        int l = 0, r = n - 1;\n\n        // traverse 'arr1[]' from\n        // left to right\n        // traverse 'arr2[]' from\n        // right to left\n        while (l < m && r >= 0) {\n            // if this sum is equal\n            // to 'x', then increment 'l',\n            // decrement 'r' and\n            // increment 'count'\n            if ((arr1[l] + arr2[r]) == x) {\n                l++;\n                r--;\n                count++;\n            }\n\n            // if this sum is less\n            // than x, then increment l\n            else if ((arr1[l] + arr2[r]) < x)\n                l++;\n\n            // else decrement 'r'\n            else\n                r--;\n        }\n\n        // required count of pairs\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    // function to count all pairs\n    // from both the sorted arrays\n    // whose sum is equal to a given\n    // value\n    static int countPairs(int arr1[], int arr2[], int x) {\n        int m = arr1.length;\n        int n = arr2.length;\n        int count = 0;\n        int l = 0, r = n - 1;\n\n        // traverse 'arr1[]' from\n        // left to right\n        // traverse 'arr2[]' from\n        // right to left\n        while (l < m && r >= 0) {\n\n            // if this sum is equal\n            // to 'x', then increment 'l',\n            // decrement 'r' and\n            // increment 'count'\n            if ((arr1[l] + arr2[r]) == x) {\n                l++;\n                r--;\n                count++;\n            }\n\n            // if this sum is less\n            // than x, then increment l\n            else if ((arr1[l] + arr2[r]) < x)\n                l++;\n\n            // else decrement 'r'\n            else\n                r--;\n        }\n\n        // required count of pairs\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def countPairs(self, arr1, arr2, x):\n        m = len(arr1)\n        n = len(arr2)\n        count, l, r = 0, 0, n - 1\n\n        # traverse 'arr1[]' from\n        # left to right\n        # traverse 'arr2[]' from\n        # right to left\n        while (l < m and r >= 0):\n\n            # if this sum is equal\n            # to 'x', then increment 'l',\n            # decrement 'r' and\n            # increment 'count'\n            if ((arr1[l] + arr2[r]) == x):\n                l += 1\n                r -= 1\n                count += 1\n\n            # if this sum is less\n            # than x, then increment l\n            elif ((arr1[l] + arr2[r]) < x):\n                l += 1\n\n            # else decrement 'r'\n            else:\n                r -= 1\n\n        # required count of pairs\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    countPairs(arr1, arr2, x) {\n        // code here\n        let m = arr1.length;\n        let n = arr2.length;\n        let count = 0;\n        let l = 0, r = n - 1;\n\n        // Traverse 'arr1' from left to right\n        // Traverse 'arr2' from right to left\n        while (l < m && r >= 0) {\n            // If this sum is equal to 'x', then increment 'l',\n            // decrement 'r' and increment 'count'\n            if ((arr1[l] + arr2[r]) === x) {\n                l++;\n                r--;\n                count++;\n            }\n            // If this sum is less than x, then increment 'l'\n            else if ((arr1[l] + arr2[r]) < x) {\n                l++;\n            }\n            // Else decrement 'r'\n            else {\n                r--;\n            }\n        }\n\n        // Return the required count of pairs\n        return count;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}