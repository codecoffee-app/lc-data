{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702789,
            "title": "Count Pairs in an Array",
            "titleSlug": "count-pairs-in-an-array4145",
            "content": "<p><span >Given an array <strong>arr</strong> of <strong>n</strong> integers, count all pairs (<strong>arr[i]</strong>,<strong> arr[j]</strong>) in it&nbsp;such that <strong>i*arr[i]</strong> &gt; <strong>j*arr[j] </strong>and <strong>0 &le; i &lt; j &lt; n</strong>.</span></p>\n<p><span ><strong>Note</strong>: 0-based Indexing is followed.</span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>Input :</strong>\nn = 4<br />arr[] = {8, 4, 2, 1}\n<strong>Output :</strong>\n2<br /><strong>Explanation:<br /></strong>If we see the array after operations<br />[0*8, 1*4, 2*2, 3*1] =&gt; [0, 4, 4, 3]<br />Pairs which hold the condition i*arr[i] &gt; j*arr[j] are (4,1) and (2,1), so in total 2 pairs are available.</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input :</strong>\nn = 7<br />arr[] = {5, 0, 10, 2, 4, 1, 6}\n<strong>Output:</strong>\n5\n<strong>Explanation :</strong>\nPairs which hold the condition i*arr[i] &gt; j*arr[j] are (10,2), (10,4), (10,1), (2,1) and (4,1), so in total 5 pairs are there.</span></pre>\n<p><span ><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>countPairs()</strong> which takes the array <strong>arr[]</strong> and its size <strong>n</strong><strong> </strong>as inputs and returns the required result.</span></p>\n<p><span ><strong>Expected Time Complexity: </strong>O(n*log(n))<br /><strong>Expected Auxiliary Space: </strong>O(n*log(n))</span></p>\n<p><span ><strong>Constraints:</strong><br />1<strong> &le;</strong> n&nbsp;<strong>&le; </strong>10<sup>4</sup><br />0 &le; arr[i] <strong>&le; </strong>10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of `n` integers, determine the number of pairs (`arr[i]`, `arr[j]`) such that `i * arr[i] > j * arr[j]` where `0 <= i < j < n`. Indexing starts at 0.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "0 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 4\narr[] = {8, 4, 2, 1}",
                        "output": "2",
                        "explanation": "Calculate the value of `i * arr[i]` for each element: [0*8, 1*4, 2*2, 3*1] resulting in [0, 4, 4, 3].  The pairs satisfying the condition `i * arr[i] > j * arr[j]` are (4, 3) at indices (1,3) and (4, 3) at indices (2,3). Therefore, there are 2 such pairs."
                    },
                    {
                        "input": "n = 7\narr[] = {5, 0, 10, 2, 4, 1, 6}",
                        "output": "5",
                        "explanation": "Calculate the value of `i * arr[i]` for each element: [0*5, 1*0, 2*10, 3*2, 4*4, 5*1, 6*6] resulting in [0, 0, 20, 6, 16, 5, 36]. The pairs satisfying the condition `i * arr[i] > j * arr[j]` are (20, 6) at indices (2,3), (20, 16) at indices (2,4), (20, 5) at indices (2,5), (16, 5) at indices (4,5), and (36,5) at indices (6,5).  Therefore, there are 5 such pairs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\"><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; white-space-collapse: preserve; background-color: #ffffff;\">Transform the array elements to </span><span class=\"math math-inline\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; color: #0d0d0d; white-space-collapse: preserve; background-color: #ffffff;\"><span class=\"katex\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; line-height: 1.2; text-rendering: auto;\"><span class=\"katex-mathml\" style=\"font-family: KaTeX_Main, 'Times New Roman', serif; border: 0px; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; clip: rect(1px, 1px, 1px, 1px); height: 1px; overflow: hidden; padding: 0px; position: absolute; width: 1px;\">????&sdot;????????????[????] </span><span class=\"katex-html\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\" aria-hidden=\"true\"><span class=\"base\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; position: relative; white-space: nowrap; width: min-content; display: inline-block;\"><span class=\"mord mathnormal\" style=\"font-family: KaTeX_Math; border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-style: italic;\">i</span><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\"><span style=\"font-family: KaTeX_Main, Times New Roman, serif;\">*</span></span></span><span class=\"base\" style=\"font-family: KaTeX_Main, 'Times New Roman', serif; border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; position: relative; white-space: nowrap; width: min-content; display: inline-block;\"><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic;\">a</span><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic; margin-right: 0.02778em;\">rr</span><span class=\"mopen\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\">[</span><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic;\">i</span><span class=\"mclose\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\">]</span></span></span></span></span><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; white-space-collapse: preserve; background-color: #ffffff;\"> and use a modified merge sort to count inversions, which represent pairs </span><span class=\"math math-inline\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; white-space-collapse: preserve; background-color: #ffffff;\"><span class=\"katex\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; line-height: 1.2; font-family: KaTeX_Main, 'Times New Roman', serif; text-rendering: auto;\"><span class=\"katex-mathml\" style=\"border: 0px; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; clip: rect(1px, 1px, 1px, 1px); height: 1px; overflow: hidden; padding: 0px; position: absolute; width: 1px;\">(????,????)</span><span class=\"katex-html\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\" aria-hidden=\"true\"><span class=\"base\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; position: relative; white-space: nowrap; width: min-content; display: inline-block;\"><span class=\"mopen\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\">(</span><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic;\">i</span><span class=\"mpunct\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\">,</span><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic; margin-right: 0.05724em;\">j</span><span class=\"mclose\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\">)</span></span></span></span></span><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; white-space-collapse: preserve; background-color: #ffffff;\"> satisfying </span><span class=\"math math-inline\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; white-space-collapse: preserve; background-color: #ffffff;\"><span class=\"katex\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; line-height: 1.2; font-family: KaTeX_Main, 'Times New Roman', serif; text-rendering: auto;\"><span class=\"katex-mathml\" style=\"border: 0px; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; clip: rect(1px, 1px, 1px, 1px); height: 1px; overflow: hidden; padding: 0px; position: absolute; width: 1px;\">????&sdot;????????????[????]&gt;????&sdot;????????????[????]</span></span></span></span></p>\n<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\"><span class=\"math math-inline\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; color: #0d0d0d; white-space-collapse: preserve; background-color: #ffffff;\"><span class=\"katex\" style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-variant-position: normal; font-stretch: normal; line-height: 1.2; text-rendering: auto;\"><span class=\"katex-html\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\" aria-hidden=\"true\"><span class=\"base\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; position: relative; white-space: nowrap; width: min-content; display: inline-block;\"><span class=\"mord mathnormal\" style=\"font-family: KaTeX_Math; border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-style: italic;\">i</span><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\"><span style=\"font-family: KaTeX_Main, Times New Roman, serif;\">*</span></span></span><span class=\"base\" style=\"font-family: KaTeX_Main, 'Times New Roman', serif; border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; position: relative; white-space: nowrap; width: min-content; display: inline-block;\"><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic;\">a</span><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic; margin-right: 0.02778em;\">rr</span><span class=\"mopen\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\">[</span><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic;\">i</span><span class=\"mclose\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\">]</span><span class=\"mrel\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\">&gt;</span></span><span class=\"base\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; position: relative; white-space: nowrap; width: min-content; display: inline-block;\"><span class=\"mord mathnormal\" style=\"font-family: KaTeX_Math; border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-style: italic; margin-right: 0.05724em;\">j</span><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; margin-right: 0.05724em;\"><span style=\"font-family: KaTeX_Main, Times New Roman, serif;\">*</span></span></span><span class=\"base\" style=\"font-family: KaTeX_Main, 'Times New Roman', serif; border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; position: relative; white-space: nowrap; width: min-content; display: inline-block;\"><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic;\">a</span><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic; margin-right: 0.02778em;\">rr</span><span class=\"mopen\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\">[</span><span class=\"mord mathnormal\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent; font-family: KaTeX_Math; font-style: italic; margin-right: 0.05724em;\">j</span><span class=\"mclose\" style=\"border: 0px solid currentcolor; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(69,89,164,.5); --tw-ring-offset-shadow: 0 0 transparent; --tw-ring-shadow: 0 0 transparent; --tw-shadow: 0 0 transparent; --tw-shadow-colored: 0 0 transparent;\">]</span></span></span></span></span><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; white-space-collapse: preserve; background-color: #ffffff;\">.</span></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\n    public:\n    // Return count of pair in given array \n    // such that  i*arr[i] > j*arr[j] \n    int merge(int arr[], int temp[], int left, \n                           int mid, int right) \n    { \n        int inv_count = 0; \n      \n        int i = left; /* index for left subarray*/\n        int j = mid;  /* index for right subarray*/\n        int k = left; /* ndex for resultant subarray*/\n        while ((i <= mid - 1) && (j <= right)) \n        { \n            if (arr[i] <= arr[j]) \n                temp[k++] = arr[i++]; \n            else\n            { \n                temp[k++] = arr[j++]; \n      \n                inv_count = inv_count + (mid - i); \n            } \n        } \n      \n        /* Copy the remaining elements of left \n         subarray (if there are any) to temp*/\n        while (i <= mid - 1) \n            temp[k++] = arr[i++]; \n      \n        /* Copy the remaining elements of right \n         subarray (if there are any) to temp*/\n        while (j <= right) \n            temp[k++] = arr[j++]; \n      \n        /* Copy back the merged elements to original \n          array*/\n        for (i=left; i <= right; i++) \n            arr[i] = temp[i]; \n      \n        return inv_count; \n    } \n      \n    /* An auxiliary recursive function that sorts \n       the input array and returns the number of \n       inversions in the array. */\n    int _mergeSort(int arr[], int temp[], int left, \n                                          int right) \n    { \n        int mid, inv_count = 0; \n        if (right > left) \n        { \n            /* Divide the array into two parts and call \n              _mergeSortAndCountInv() for each of \n              the parts */\n            mid = (right + left)/2; \n      \n            /* Inversion count will be sum of inversions in \n               left-part, right-part and number of inversions \n               in merging */\n            inv_count  = _mergeSort(arr, temp, left, mid); \n            inv_count += _mergeSort(arr, temp, mid+1, right); \n      \n            /*Merge the two parts*/\n            inv_count += merge(arr, temp, left, mid+1, right); \n        } \n      \n        return inv_count; \n    } \n      \n    /* This function sorts the input array and \n       returns the number of inversions in the \n       array */\n    int countPairs(int arr[], int n) \n    { \n        // Modify the array so that problem reduces to \n        // count inversion problem. \n        for (int i=0; i<n; i++) \n            arr[i] = i*arr[i]; \n      \n        // Count inversions using same logic as \n        // below post \n        // https://www.geeksforgeeks.org/counting-inversions/ \n        int temp[n]; \n        return _mergeSort(arr, temp, 0, n - 1); \n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Solution { \n    static int merge(int arr[], int temp[], int left, \n                                   int mid, int right) \n    { \n        int inv_count = 0; \n          \n        /* index for left subarray*/ \n        int i = left;  \n          \n        /* index for right subarray*/\n        int j = mid;  \n        /* ndex for resultant subarray*/\n        int k = left;  \n          \n        while ((i <= mid - 1) && (j <= right)) \n        { \n            if (arr[i] <= arr[j]) \n                temp[k++] = arr[i++]; \n            else\n            { \n                temp[k++] = arr[j++]; \n      \n                inv_count = inv_count + (mid - i); \n            } \n        } \n      \n        /* Copy the remaining elements of left \n        subarray (if there are any) to temp*/\n        while (i <= mid - 1) \n            temp[k++] = arr[i++]; \n      \n        /* Copy the remaining elements of right \n        subarray (if there are any) to temp*/\n        while (j <= right) \n            temp[k++] = arr[j++]; \n      \n        // Copy back the merged elements  \n        // to original array \n        for (i = left; i <= right; i++) \n            arr[i] = temp[i]; \n      \n        return inv_count; \n    } \n      \n    /* An auxiliary recursive function  \n    that sorts the input array and  \n    returns the number of inversions  \n    in the array. */\n    static int _mergeSort(int arr[], int temp[],  \n                               int left,int right) \n    { \n        int mid, inv_count = 0; \n        if (right > left) \n        { \n            /* Divide the array into two parts and call \n            _mergeSortAndCountInv() for each of \n            the parts */\n            mid = (right + left) / 2; \n      \n            // Inversion count will be sum of inversions in \n            // left-part, right-part and number of inversions \n            // in merging  \n            inv_count = _mergeSort(arr, temp, left, mid); \n            inv_count += _mergeSort(arr, temp, mid+1, right); \n      \n            /*Merge the two parts*/\n            inv_count += merge(arr, temp, left, mid+1, right); \n        } \n      \n        return inv_count; \n    } \n      \n    // This function sorts the input array and \n    // returns the number of inversions in the \n    // array  \n    static int countPairs(int arr[], int n) \n    { \n        // Modify the array so that problem reduces to \n        // count inversion problem. \n        for (int i = 0; i < n; i++) \n            arr[i] = i * arr[i]; \n      \n        // Count inversions using same logic as \n        // below post \n        // https://www.geeksforgeeks.org/counting-inversions/ \n        int temp[] = new int [n]; \n        return _mergeSort(arr, temp, 0, n - 1); \n    } \n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    # This function merges two \n    # sorted arrays and returns \n    # inversion count in the arrays. \n    def merge(self, arr, temp, left, mid, right): \n    \n    \tinv_count = 0\n    \n    \ti = left # index for left subarray \n    \tj = mid # index for right subarray \n    \tk = left # ndex for resultant subarray \n    \twhile ((i <= mid - 1) and (j <= right)): \n    \t\n    \t\tif (arr[i] <= arr[j]): \n    \t\t\ttemp[k] = arr[i] \n    \t\t\ti += 1\n    \t\t\tk += 1\n    \t\telse: \n    \t\t\n    \t\t\ttemp[k] = arr[j] \n    \t\t\tk += 1\n    \t\t\tj += 1\n    \n    \t\t\tinv_count = inv_count + (mid - i) \n    \n    \t# Copy the remaining elements of left \n    \t# subarray (if there are any) to temp \n    \twhile (i <= mid - 1): \n    \t\ttemp[k] = arr[i] \n    \t\ti += 1\n    \t\tk += 1\n    \n    \t# Copy the remaining elements of right \n    \t# subarray (if there are any) to temp \n    \twhile (j <= right): \n    \t\ttemp[k] = arr[j] \n    \t\tk += 1\n    \t\tj += 1\n    \n    \t# Copy back the merged elements \n    \t# to original array \n    \tfor i in range(left, right + 1): \n    \t\tarr[i] = temp[i] \n    \n    \treturn inv_count \n    \n    # An auxiliary recursive function \n    # that sorts the input array and \n    # returns the number of inversions \n    # in the array. \n    def _mergeSort(self,arr, temp, left, right): \n    \n    \tinv_count = 0\n    \tif (right > left): \n    \t\n    \t\t# Divide the array into two parts \n    \t\t# and call _mergeSortAndCountInv() \n    \t\t# for each of the parts \n    \t\tmid = (right + left) // 2\n    \n    \t\t# Inversion count will be sum of \n    \t\t# inversions in left-part, right-part x \n    \t\t# and number of inversions in merging \n    \t\tinv_count = self._mergeSort(arr, temp, left, mid) \n    \t\tinv_count += self._mergeSort(arr, temp, \n    \t\t\t\t\t\t\t\tmid + 1, right) \n    \n    \t\t# Merge the two parts \n    \t\tinv_count += self.merge(arr, temp, left,\t \n    \t\t\t\t\t\tmid + 1, right) \n    \n    \treturn inv_count \n    \n    # This function sorts the input \n    # array and returns the number \n    # of inversions in the array \n    def countPairs(self,arr, n): \n    \t\n    \t# Modify the array so that problem \n    \t# reduces to count inversion problem. \n    \tfor i in range(n): \n    \t\tarr[i] = i * arr[i] \n    \n    \t# Count inversions using same \n    \t# logic as below post \n    \t# https://www.geeksforgeeks.org/counting-inversions/ \n    \ttemp = [0] * n \n    \treturn self._mergeSort(arr, temp, 0, n - 1) \n\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to count pairs with given sum.\n    public int countPairs(int[] arr, int n) \n    {\n        // Modify the array so that problem reduces to \n        // count inversion problem. \n        for (int i=0; i<n; i++) \n            arr[i] = i*arr[i]; \n\n        // Count inversions using same logic as \n        // below post \n        // https://www.geeksforgeeks.org/counting-inversions/ \n        int[] temp = new int[n];\n        return _mergeSort(arr, temp, 0, n - 1); \n    }\n\n    // Return count of pair in given array \n    // such that i*arr[i] > j*arr[j] \n    int merge(int[] arr, int[] temp, int left, int mid, int right) \n    { \n        int inv_count = 0; \n\n        int i = left; /* index for left subarray*/\n        int j = mid; /* index for right subarray*/\n        int k = left; /* ndex for resultant subarray*/\n        while ((i <= mid - 1) && (j <= right)) \n        { \n            if (arr[i] <= arr[j]) \n                temp[k++] = arr[i++]; \n            else\n            { \n                temp[k++] = arr[j++]; \n\n                inv_count = inv_count + (mid - i); \n            } \n        } \n\n        /* Copy the remaining elements of left \n         subarray (if there are any) to temp*/\n        while (i <= mid - 1) \n            temp[k++] = arr[i++]; \n\n        /* Copy the remaining elements of right \n         subarray (if there are any) to temp*/\n        while (j <= right) \n            temp[k++] = arr[j++]; \n\n        /* Copy back the merged elements to original \n          array*/\n        for (i=left; i <= right; i++) \n            arr[i] = temp[i]; \n\n        return inv_count; \n    } \n\n    /* An auxiliary recursive function that sorts \n       the input array and returns the number of \n       inversions in the array. */\n    int _mergeSort(int[] arr, int[] temp, int left, int right) \n    { \n        int mid, inv_count = 0; \n        if (right > left) \n        { \n            /* Divide the array into two parts and call \n              _mergeSortAndCountInv() for each of \n              the parts */\n            mid = (right + left)/2; \n\n            /* Inversion count will be sum of inversions in \n               left-part, right-part and number of inversions \n               in merging */\n            inv_count = _mergeSort(arr, temp, left, mid); \n            inv_count += _mergeSort(arr, temp, mid+1, right); \n\n            /*Merge the two parts*/\n            inv_count += merge(arr, temp, left, mid+1, right); \n        } \n\n        return inv_count; \n    } \n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the count of all pairs with given sum.\n    countPairs(arr, n) {\n        // Modify the array so that problem \n    \t// reduces to count inversion problem. \n    \tfor (let i = 0; i < n; i++) {\n    \t    arr[i] = i * arr[i];\n    \t}\n\n    \t// Count inversions using same \n    \t// logic as below post \n    \t// https://www.geeksforgeeks.org/counting-inversions/ \n    \tconst temp = new Array(n).fill(0);\n    \treturn this._mergeSort(arr, temp, 0, n - 1);\n    }\n    \n    merge(arr, temp, left, mid, right) { \n        let inv_count = 0;\n        let i = left; // index for left subarray \n        let j = mid; // index for right subarray \n        let k = left; // index for resultant subarray \n        while (i <= mid - 1 && j <= right) { \n            if (arr[i] <= arr[j]) { \n                temp[k] = arr[i]; \n                i++;\n                k++;\n            } else { \n                temp[k] = arr[j]; \n                k++;\n                j++;\n\n                inv_count = inv_count + (mid - i); \n            }\n        }\n        \n        // Copy the remaining elements of left \n    \t// subarray (if there are any) to temp \n        while (i <= mid - 1) { \n            temp[k] = arr[i]; \n            i++;\n    \t\tk++;\n        }\n\n        // Copy the remaining elements of right \n    \t// subarray (if there are any) to temp \n        while (j <= right) { \n            temp[k] = arr[j]; \n            k++;\n    \t\tj++;\n        }\n\n        // Copy back the merged elements \n    \t// to original array \n        for (let i = left; i <= right; i++) { \n            arr[i] = temp[i]; \n        }\n\n        return inv_count; \n    }\n    \n    _mergeSort(arr, temp, left, right) { \n        let inv_count = 0;\n    \tif (right > left) { \n\n    \t\t// Divide the array into two parts \n    \t\t// and call _mergeSortAndCountInv() \n    \t\t// for each of the parts \n    \t\tconst mid = Math.floor((right + left) / 2);\n\n    \t\t// Inversion count will be sum of \n    \t\t// inversions in left-part, right-part x \n    \t\t// and number of inversions in merging \n    \t\tinv_count = this._mergeSort(arr, temp, left, mid); \n    \t\tinv_count += this._mergeSort(arr, temp, mid + 1, right); \n\n    \t\t// Merge the two parts \n    \t\tinv_count += this.merge(arr, temp, left, mid + 1, right); \n    \t}\n\n    \treturn inv_count; \n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}