{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702835,
            "title": "Count pairs Sum in matrices",
            "titleSlug": "count-pairs-sum-in-matrices4332",
            "content": "<p><span style=\"font-size: 18px;\">Given two <strong>sorted</strong> matrices <strong>mat1</strong> and <strong>mat2</strong> of size <strong>n</strong><strong>&nbsp;x n</strong> of elements. Each matrix contains numbers arranged in <strong>strictly</strong> <strong>ascending order</strong>, with <strong>each row sorted </strong>from <strong>left to right</strong>, and the last element of a row being <strong>smaller </strong>than the first element of the next row. You're given a target value, <strong>x,</strong> your task is to find and <strong>count all pairs</strong> <strong>{a, b} </strong>such that <strong>a </strong>is from <strong>mat1 </strong>and <strong>b </strong>is from <strong>mat2 </strong>where sum of <strong>a </strong>and <strong>b</strong> is equal to <strong>x</strong>.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \nn = 3, x = 21\nmat1 = {{1, 5, 6},\n\\t  {8, 10, 11},\n\\t  {15, 16, 18}}\nmat2 = {{2, 4, 7},\n\\t  {9, 10, 12},\n\\t  {13, 16, 20}}\n<strong>OUTPUT: </strong>4\n<strong>Explanation: </strong>The pairs whose sum is found to be 21 are (1, 20), (5, 16), (8, 13), (11, 10).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 2, x = 10\nmat1 = {{1, 2},\n\\t  {3, 4}}\nmat2 = {{4, 5},\n\\t  {6, 7}}\n<strong>Output: </strong>2\n<strong>Explanation: </strong>The pairs whose sum found to be 10 are (4, 6), (3, 7).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>User Task:</strong><br />Your task is to complete the function&nbsp;<strong><code>countPairs()</code></strong><strong> </strong>which takes 4 arguments&nbsp;<strong>mat1</strong>, <strong>mat2</strong>, <strong>n</strong>, <strong>x</strong>, and returns the count of pairs whose sum equals to <strong>x</strong>. You don't need to take any input or print anything.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>).<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br />1 &le; mat1[i][j] , mat2[i][j] &le; 10<sup>5<br /></sup></span><span style=\"font-size: 20px;\">1 &le; n &le; 100<br />1 &le; x &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted matrices `mat1` and `mat2` of size `n x n`. Both matrices contain numbers arranged in strictly ascending order, with each row sorted from left to right, and the last element of a row being smaller than the first element of the next row. You are given a target value `x`. Your task is to find and count all pairs `{a, b}` such that `a` is from `mat1` and `b` is from `mat2` where the sum of `a` and `b` equals `x`.",
                "constraints": [
                    "1 <= mat1[i][j], mat2[i][j] <= 10^5",
                    "1 <= n <= 100",
                    "1 <= x <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 3, x = 21\nmat1 = {{1, 5, 6},\n          {8, 10, 11},\n          {15, 16, 18}}\nmat2 = {{2, 4, 7},\n          {9, 10, 12},\n          {13, 16, 20}}",
                        "output": "4",
                        "explanation": "The pairs that sum to 21 are (1, 20), (5, 16), (8, 13), and (11, 10)."
                    },
                    {
                        "input": "n = 2, x = 10\nmat1 = {{1, 2},\n          {3, 4}}\nmat2 = {{4, 5},\n          {6, 7}}",
                        "output": "2",
                        "explanation": "The pairs that sum to 10 are (4, 6) and (3, 7)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>From the top leftmost element traverse mat1[][] in forward direction and from the bottom rightmost element traverse mat2[][] in backward direction.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "factset"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\tint countPairs(vector<vector<int>> &mat1, vector<vector<int>> &mat2, int n, int x)\n\t{\n\t\t// 'r1' and 'c1' for pointing current element \n\t    // of mat1[][] \n\t    // 'r2' and 'c2' for pointing current element \n\t    // of mat2[][] \n\t    int r1 = 0, c1 = 0; \n\t    int r2 = n - 1, c2 = n - 1; \n\t  \n\t    // While there are more elements \n\t    // in both the matrices \n\t    int count = 0; \n\t    while ((r1 < n) && (r2 >= 0)) { \n\t        int val = mat1[r1][c1] + mat2[r2][c2]; \n\t  \n\t        // If true \n\t        if (val == x) { \n\t  \n\t            // Increment 'count' \n\t            count++; \n\t  \n\t            // Move mat1[][] column 'c1' to right \n\t            // Move mat2[][] column 'c2' to left \n\t            c1++; \n\t            c2--; \n\t        } \n\t  \n\t        // If true, move mat1[][] column 'c1' to right \n\t        else if (val < x) \n\t            c1++; \n\t  \n\t        // Else move mat2[][] column 'c2' to left \n\t        else\n\t            c2--; \n\t  \n\t        // If 'c1' crosses right boundary \n\t        if (c1 == n) { \n\t  \n\t            // Reset 'c1' \n\t            c1 = 0; \n\t  \n\t            // Increment row 'r1' \n\t            r1++; \n\t        } \n\t  \n\t        // If 'c2' crosses left boundary \n\t        if (c2 == -1) { \n\t  \n\t            // Reset 'c2' \n\t            c2 = n - 1; \n\t  \n\t            // Decrement row 'r2' \n\t            r2--; \n\t        } \n\t    } \n\t  \n\t    // Required count of pairs \n\t    return count; \n\t}\n \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    int countPairs(int[][] mat1, int[][] mat2, int n, int x) {\r\n        int r1 = 0, c1 = 0; \r\n        int r2 = n - 1, c2 = n - 1; \r\n        \r\n        int count = 0; \r\n        while (r1 < n && r2 >= 0) { \r\n            int val = mat1[r1][c1] + mat2[r2][c2]; \r\n            \r\n            if (val == x) { \r\n                count++; \r\n                c1++; \r\n                c2--; \r\n            } else if (val < x) {\r\n                c1++; \r\n            } else {\r\n                c2--; \r\n            } \r\n            \r\n            if (c1 == n) { \r\n                c1 = 0; \r\n                r1++; \r\n            } \r\n            \r\n            if (c2 == -1) { \r\n                c2 = n - 1; \r\n                r2--; \r\n            } \r\n        } \r\n        \r\n        return count; \r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countPairs(self, mat1, mat2, n, x):\n        # Initialize pointers for matrices\n        r1, c1 = 0, 0\n        r2, c2 = n - 1, n - 1\n\n        # Initialize count of pairs\n        count = 0\n\n        # Iterate while there are more elements in both matrices\n        while r1 < n and r2 >= 0:\n            val = mat1[r1][c1] + mat2[r2][c2]\n\n            # If the sum of the current pair equals x\n            if val == x:\n                # Increment count\n                count += 1\n\n                # Move to the next columns in mat1 and mat2\n                c1 += 1\n                c2 -= 1\n\n            # If the sum of the current pair is less than x\n            elif val < x:\n                # Move to the next column in mat1\n                c1 += 1\n\n            # If the sum of the current pair is greater than x\n            else:\n                # Move to the next column in mat2\n                c2 -= 1\n\n            # If the column pointer c1 crosses the right boundary\n            if c1 == n:\n                # Reset c1 to 0 and move to the next row in mat1\n                c1 = 0\n                r1 += 1\n\n            # If the column pointer c2 crosses the left boundary\n            if c2 == -1:\n                # Reset c2 to n - 1 and move to the previous row in mat2\n                c2 = n - 1\n                r2 -= 1\n\n        # Return the count of pairs\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}