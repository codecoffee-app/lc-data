{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700607,
            "title": "Count Pairs whose sum is equal to X",
            "titleSlug": "count-pairs-whose-sum-is-equal-to-x",
            "content": "<p><span style=\"font-size: 18px;\">Given two linked lists <strong>head</strong><strong>1</strong><strong>&nbsp;</strong>and <strong>head2</strong> with <strong>distinct </strong>elements, determine the <strong>count of all distinct pairs</strong> from both lists whose sum equals the given value <strong>x</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: A valid pair would be in the form <strong>(x, y) </strong>where <strong>x</strong> is from the first linked list and <strong>y</strong> is from the second linked list. (1, 3) and (3, 1) are considered different.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>head1 = 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6, head2 = 11-&gt;12-&gt;13, x = 15<br /><img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700607/Web/Other/blobid1_1725335639.png\" width=\"374\" height=\"187\" />\n<strong>Output: </strong>3<strong>\nExplanation: </strong>There are total 3 pairs whose sum is 15 : (4,11) , (3,12) and (2,13)<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>head1 = 7-&gt;5-&gt;1-&gt;3, head2 = 3-&gt;5-&gt;2-&gt;8, x = 10<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700607/Web/Other/blobid2_1725335674.png\" width=\"366\" height=\"183\" /><br /><strong>Output: </strong>2<strong>\nExplanation: </strong>There are total 2 pairs whose sum is 10 : (7,3) and (5,5)</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= size of both LinkedList &lt;=10<sup>6</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>9</sup><br />1&lt;= x &lt;= 10<sup>9<br /></sup></span><span style=\"font-size: 18px;\"><strong>Note</strong>: All elements in each linked list are unique.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two linked lists, `head1` and `head2`, containing distinct elements, determine the number of distinct pairs (x, y) where `x` is a node value from `head1`, `y` is a node value from `head2`, and their sum equals the given value `x`.",
                "constraints": [
                    "1 <= size of both LinkedList <= 10^6",
                    "1 <= node->data <= 10^9",
                    "1 <= x <= 10^9",
                    "All elements in each linked list are unique."
                ],
                "testcases": [
                    {
                        "input": "head1 = 1->2->3->4->5->6, head2 = 11->12->13, x = 15",
                        "output": "3",
                        "explanation": "The pairs that sum to 15 are: (4, 11), (3, 12), and (2, 13)."
                    },
                    {
                        "input": "head1 = 7->5->1->3, head2 = 3->5->2->8, x = 10",
                        "output": "2",
                        "explanation": "The pairs that sum to 10 are: (7, 3) and (5, 5)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to store elements of one list in a set. Then look for ( sum - list2[i] ) in the set, where the sum is the required sum of pairs.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to count pairs in two linked lists whose sum is equal to x\n    int countPairs(struct Node* head1, struct Node* head2, int x) {\n        int count = 0;\n        unordered_set<int> us; // Using unordered set to store numbers from list1\n\n        // Adding all numbers in list1 to the set\n        while (head1 != NULL) {\n            us.insert(head1->data);\n            head1 = head1->next;\n        }\n\n        // Checking whether there is a corresponding number in the set for each number\n        // in list2\n        while (head2 != NULL) {\n            if (us.find(x - head2->data) != us.end())\n                count++; // Incrementing count if pair is found\n            head2 = head2->next;\n        }\n        return count;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to count pairs in two linked lists whose sum is equal to x\n    public int countPairs(Node head1, Node head2, int x) {\n        int count = 0;\n        Set<Integer> set = new HashSet<>();\n\n        // Add all elements from the first linked list to the set\n        while (head1 != null) {\n            set.add(head1.data);\n            head1 = head1.next;\n        }\n\n        // Check if there exists a complement element in the second list that forms a\n        // pair\n        while (head2 != null) {\n            if (set.contains(x - head2.data)) {\n                count++;\n            }\n            head2 = head2.next;\n        }\n\n        return count;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countPairs(self, head1, head2, x):\n        # Set to store elements\n        s = set()\n        # Counter for pairs\n        count = 0\n\n        # Add all elements from the first linked list to the set\n        while head1:\n            s.add(head1.data)\n            head1 = head1.next\n\n        # Check the second linked list for pairs\n        while head2:\n            if x - head2.data in s:\n                count += 1\n            head2 = head2.next\n\n        return count\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    countPairs(head1, head2, x) {\n        let count = 0;\n        let hashMap = {}; // A hash map to store the values from the first linked list\n\n        // Traverse the first linked list and store its values in the hash map\n        while (head1 !== null) {\n            hashMap[head1.data] = true;\n            head1 = head1.next;\n        }\n\n        // Traverse the second linked list\n        while (head2 !== null) {\n            // Check if there exists a value in the first list that adds to the target\n            // sum\n            if (hashMap[x - head2.data]) {\n                count++;\n            }\n            head2 = head2.next;\n        }\n\n        return count; // Return the total number of valid pairs\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}