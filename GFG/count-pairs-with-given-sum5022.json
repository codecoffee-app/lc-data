{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703284,
            "title": "Two sum -Pairs with 0 Sum",
            "titleSlug": "count-pairs-with-given-sum5022",
            "content": "<p><span >Given an integer array&nbsp;<strong>arr</strong>, return all the&nbsp;<strong>unique&nbsp;</strong>pairs [arr[i], arr[j]] such that<strong>&nbsp;i != j </strong>and<strong> arr[i] + arr[j] == 0.</strong></span></p>\n<p><span >Note: The pairs must be returned in&nbsp;<strong>sorted&nbsp;</strong>order, the&nbsp;solution array<strong> </strong>should also be&nbsp;<strong>sorted</strong>, and the answer must not contain any&nbsp;<strong>duplicate&nbsp;</strong>pairs.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [-1, 0, 1, 2, -1, -4]\n<strong>Output: </strong>[[-1, 1]]<strong>\nExplanation: </strong>arr[0] + arr[2] = (-1)+ 1 = 0.\narr[2] + arr[4] = 1 + (-1) = 0.\nThe distinct pair are [-1,1].</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [6, 1, 8, 0, 4, -9, -1, -10, -6, -5]\n<strong>Output: </strong>[[-6, 6],[-1, 1]]<strong>\nExplanation: </strong>The distinct pairs are [-1, 1] and [-6, 6].</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n log n)<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>3 &lt;= arr.size &lt;= 10<sup>5</sup><br />-10<sup>5</sup> &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use the two-pointer technique to find pairs with a sum of zero in a sorted array, ensuring to skip duplicate values.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            }
        ],
        "companies": [
            "flipkart",
            "accolite",
            "amazon",
            "factset",
            "hike",
            "makemytrip",
            "goldman-sachs",
            "adobe",
            "salesforce"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<vector<int>> getPairs(vector<int>& arr) {\n        int n = arr.size();\n        sort(arr.begin(), arr.end());\n        vector<vector<int>> result;\n        int left = 0, right = n - 1;\n        while (left < right) {\n            if (arr[left] + arr[right] < 0) {\n                left++;\n            } else if (arr[left] + arr[right] > 0) {\n                right--;\n            } else {\n                result.push_back({arr[left], arr[right]});\n                int tempLeft = left, tempRight = right;\n                while (left < right && arr[left] == arr[tempLeft])\n                    left++;\n                while (left < right && arr[right] == arr[tempRight])\n                    right--;\n            }\n        }\n\n        return result;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static ArrayList<ArrayList<Integer>> getPairs(int[] arr) {\n        ArrayList<ArrayList<Integer>> result = new ArrayList<>();\n        int n = arr.length;\n        Arrays.sort(arr);\n        int left = 0;\n        int right = n - 1;\n        while (left < right) {\n            int sum = arr[left] + arr[right];\n            if (sum < 0) {\n                left++;\n            } else if (sum > 0) {\n                right--;\n            } else {\n                ArrayList<Integer> triplet = new ArrayList<>();\n                triplet.add(arr[left]);\n                triplet.add(arr[right]);\n                result.add(triplet);\n                left++;\n                right--;\n                while (left < right && arr[left] == arr[left - 1]) {\n                    left++;\n                }\n                while (left < right && arr[right] == arr[right + 1]) {\n                    right--;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def getPairs(self, arr):\n        result = []\n        n = len(arr)\n        arr.sort()\n        left = 0\n        right = n - 1\n        while left < right:\n            sum = arr[left] + arr[right]\n            if sum < 0:\n                left += 1\n            elif sum > 0:\n                right -= 1\n            else:\n                triplet = [arr[left], arr[right]]\n                result.append(triplet)\n                left += 1\n                right -= 1\n                # Skip duplicates\n                while left < right and arr[left] == arr[left - 1]:\n                    left += 1\n                while left < right and arr[right] == arr[right + 1]:\n                    right -= 1\n\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number[]} arr\n     * @returns {number[][]}\n     */\n    getPairs(arr) {\n        let result = [];\n        let n = arr.length;\n        arr.sort((a, b) => a - b);\n\n        let left = 0;\n        let right = n - 1;\n        while (left < right) {\n            let sum = arr[left] + arr[right];\n            if (sum < 0) {\n                left += 1;\n            } else if (sum > 0) {\n                right -= 1;\n            } else {\n                let triplet = [ arr[left], arr[right] ];\n                result.push(triplet);\n                left += 1;\n                right -= 1;\n                while (left < right && arr[left] == arr[left - 1]) {\n                    left += 1;\n                }\n                while (left < right && arr[right] == arr[right + 1]) {\n                    right -= 1;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}