{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 703003,
      "title": "Palindrome SubStrings",
      "titleSlug": "count-palindrome-sub-strings-of-a-string0652",
      "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>, count all palindromic sub-strings present in the string. The length of the <strong>palindromic sub-string</strong> must be greater than or equal to 2.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"abaab\"\n<strong>Output: </strong>3\n<strong>Explanation</strong>: All palindromic substrings are : \"aba\" , \"aa\" , \"baab\".<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"aaa\"\n<strong>Output: </strong>3\n<strong>Explanation</strong>: All palindromic substrings are : \"aa\", \"aa\", \"aaa\".</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">s = \"abbaeae\"\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">4\n</span><strong style=\"font-size: 18px;\">Explanation</strong><span style=\"font-size: 18px;\">: All palindromic substrings are : \"bb\" , \"abba\" , \"aea\", \"eae\".</span></span></pre>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium; white-space: normal;\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /></span><span style=\"font-size: 18px;\"><span style=\"font-size: 18.6667px;\">2 &le; s.size() &le; 10</span><sup>3</sup><br /></span><span style=\"font-size: 18px;\"><span style=\"font-size: 18.6667px;\">string contains only lowercase english characters</span></span></p>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA"
    },
    "similar": [],
    "hints": [
      "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">Counts palindromic substrings in a given string using dynamic programming. It initializes arrays to track palindrome status and counts, iterates over substrings to update these arrays, and returns the total count of palindromic substrings found.</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Strings",
        "slug": "strings"
      },
      {
        "name": "Dynamic Programming",
        "slug": "dynamic-programming"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      },
      {
        "name": "Algorithms",
        "slug": "algorithms"
      }
    ],
    "companies": ["morgan-stanley", "amazon", "ola-cabs", "sap"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "// Function to count the number of palindromic substrings in a given string\nclass Solution {\n  public:\n    int countPS(string& s) {\n        int n = s.length();\n        int res = 0;\n\n        vector<vector<bool>> dp(n, vector<bool>(n, false));\n\n        // One length string is always palindrome\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = true;\n        }\n\n        // Two length string is plaindrome if\n        // both characters are same\n        for (int i = 0; i < n - 1; i++) {\n            if (s[i] == s[i + 1]) {\n                dp[i][i + 1] = true;\n                res++;\n            }\n        }\n\n        // Handle palindromes of length\n        // greater than 2 (gap >= 2)\n        for (int gap = 2; gap < n; gap++) {\n            for (int i = 0; i < n - gap; i++) {\n                int j = i + gap;\n\n                // Check if the current string is a palindrome\n                if (s[i] == s[j] && dp[i + 1][j - 1]) {\n                    dp[i][j] = true;\n                    res++;\n                }\n            }\n        }\n\n        return res;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "class Solution {\n    static int countPS(String s) {\n        int n = s.length();\n        int res = 0;\n\n        boolean[][] dp = new boolean[n][n];\n\n        // One length string is always palindrome\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = true;\n        }\n\n        // Two length string is palindrome if\n        // both characters are same\n        for (int i = 0; i < n - 1; i++) {\n            if (s.charAt(i) == s.charAt(i + 1)) {\n                dp[i][i + 1] = true;\n                res++;\n            }\n        }\n\n        // Handle palindromes of length greater than 2\n        for (int gap = 2; gap < n; gap++) {\n            for (int i = 0; i < n - gap; i++) {\n                int j = i + gap;\n\n                // Check if the current string is a palindrome\n                if (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]) {\n                    dp[i][j] = true;\n                    res++;\n                }\n            }\n        }\n\n        return res;\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "class Solution:\n\n    def countPS(self, s):\n        n = len(s)\n        res = 0\n\n        dp = [[False] * n for i in range(n)]\n\n        # One length string is always palindrome\n        for i in range(n):\n            dp[i][i] = True\n\n        # Two length string is palindrome if\n        # both characters are same\n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                dp[i][i + 1] = True\n                res += 1\n\n        # Handle palindromes of length\n        # greater than 2 (gap >= 2)\n        for gap in range(2, n):\n            for i in range(n - gap):\n                j = i + gap\n\n                # Check if the current string is a palindrome\n                if s[i] == s[j] and dp[i + 1][j - 1]:\n                    dp[i][j] = True\n                    res += 1\n\n        return res\n",
        "lang_text": "python3"
      },
      {
        "lang": "C#",
        "full_func": "class Solution {\n    public int countPS(string s) {\n        int n = s.Length;\n        int res = 0;\n\n        bool[,] dp = new bool[n, n];\n\n        // One length string is always palindrome\n        for (int i = 0; i < n; i++) {\n            dp[i, i] = true;\n        }\n\n        // Two length string is palindrome if\n        // both characters are same\n        for (int i = 0; i < n - 1; i++) {\n            if (s[i] == s[i + 1]) {\n                dp[i, i + 1] = true;\n                res++;\n            }\n        }\n\n        // Handle palindromes of length\n        // greater than 2 (gap >= 2)\n        for (int gap = 2; gap < n; gap++) {\n            for (int i = 0; i < n - gap; i++) {\n                int j = i + gap;\n\n                // Check if the current string is a palindrome\n                if (s[i] == s[j] && dp[i + 1, j - 1]) {\n                    dp[i, j] = true;\n                    res++;\n                }\n            }\n        }\n\n        return res;\n    }\n}\n",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "class Solution {\n    countPS(s) {\n        const n = s.length;\n        let res = 0;\n\n        const dp = Array.from({length : n}, () => Array(n).fill(false));\n\n        // One length string is always palindrome\n        for (let i = 0; i < n; i++) {\n            dp[i][i] = true;\n        }\n\n        // Two length string is palindrome if\n        // both characters are same\n        for (let i = 0; i < n - 1; i++) {\n            if (s[i] === s[i + 1]) {\n                dp[i][i + 1] = true;\n                res++;\n            }\n        }\n\n        // Handle palindromes of length\n        // greater than 2 (gap >= 2)\n        for (let gap = 2; gap < n; gap++) {\n            for (let i = 0; i < n - gap; i++) {\n                const j = i + gap;\n\n                // Check if the current string is a palindrome\n                if (s[i] === s[j] && dp[i + 1][j - 1]) {\n                    dp[i][j] = true;\n                    res++;\n                }\n            }\n        }\n\n        return res;\n    }\n}\n",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
