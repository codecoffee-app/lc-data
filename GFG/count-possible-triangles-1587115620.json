{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701238,
            "title": "Count the number of possible triangles",
            "titleSlug": "count-possible-triangles-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer array <strong>arr[]</strong>. Find the number of triangles that can be formed with three different array elements as lengths of three sides of the triangle.&nbsp;</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\">A triangle with three given sides is only possible if sum of any two sides is always greater than the third side.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [4, 6, 3, 7]\n<strong>Output</strong>: 3\n<strong>Explanation</strong>: There are three triangles possible [3, 4, 6], [4, 6, 7] and [3, 6, 7]. Note that [3, 4, 7] is not a possible triangle.  <br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [10, 21, 22, 100, 101, 200, 300]\n<strong>Output</strong>: 6\n<strong>Explanation</strong>: There can be 6 possible triangles: [10, 21, 22], [21, 100, 101], [22, 100, 101], [10, 100, 101], [100, 101, 200] and [101, 200, 300]</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [1, 2, 3]\n<strong>Output</strong>: 0\n<strong>Explanation</strong>: No triangles are possible.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>3</sup></span><br /><span style=\"font-size: 18px;\">0 &lt;= arr[i] &lt;= 10</span><sup>5</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]`, determine the number of distinct triangles that can be formed using three different elements from the array as the lengths of the sides. A valid triangle requires the sum of any two sides to be strictly greater than the third side.",
                "constraints": [
                    "1 <= arr.size() <= 10^3",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[4, 6, 3, 7]",
                        "output": "3",
                        "explanation": "The valid triangles are [3, 4, 6], [4, 6, 7], and [3, 6, 7]."
                    },
                    {
                        "input": "[10, 21, 22, 100, 101, 200, 300]",
                        "output": "6",
                        "explanation": "The valid triangles are [10, 21, 22], [21, 100, 101], [22, 100, 101], [10, 100, 101], [100, 101, 200], and [101, 200, 300]."
                    },
                    {
                        "input": "[1, 2, 3]",
                        "output": "0",
                        "explanation": "No valid triangles can be formed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Sort the array, then use a two-pointer approach for each element starting from the largest side.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count the number of possible triangles.\n    int countTriangles(vector<int>& arr) {\n        int n = arr.size(); // Get the size of the array\n\n        // Sorting the input array.\n        sort(arr.begin(), arr.end());\n\n        int count = 0;\n\n        // Traversing the array.\n        for (int i = 0; i < n - 2; ++i) {\n            // Storing the third index starting from ith index in k.\n            int k = i + 2;\n\n            // Traversing all the elements after ith index.\n            for (int j = i + 1; j < n; ++j) {\n                // Traversing all the elements after jth index to check if there\n                // exists any element which can satisfy the condition of triangle\n                // with the elements at ith, jth and kth index.\n                while (k < n && arr[i] + arr[j] > arr[k])\n                    ++k;\n\n                // Incrementing the count of triangles.\n                if (k > j)\n                    count += k - j - 1;\n            }\n        }\n        // Returning the count of triangles.\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to count the number of possible triangles.\n    static int countTriangles(int arr[]) {\n        int n = arr.length; // Getting the length of the array\n\n        // Sorting the input array.\n        Arrays.sort(arr);\n        int count = 0;\n\n        // Traversing the array.\n        for (int i = 0; i < n - 2; i++) {\n            // Storing the third index starting from ith index in k.\n            int k = i + 2;\n\n            // Traversing all the elements after ith index.\n            for (int j = i + 1; j < n; j++) {\n                // Traversing all the elements after jth index to check if there\n                // exists any element which can satisfy the condition of triangle\n                // with the elements at ith, jth, and kth index.\n                while (k < n && arr[i] + arr[j] > arr[k]) ++k;\n\n                // Incrementing the count of triangles.\n                if (k > j) count += k - j - 1;\n            }\n        }\n        // Returning the count of triangles.\n        return count;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to count the number of possible triangles.\n    def countTriangles(self, arr):\n        n = len(arr)\n        #Sorting the input array.\n        arr.sort()\n        count = 0\n\n        #Traversing the array.\n        for i in range(n - 2):\n            #Storing the third index starting from ith index in k.\n            k = i + 2\n            #Traversing all the elements after ith index.\n            for j in range(i + 1, n):\n\n                #Traversing all the elements after jth index to check if there\n                #exists any element which can satisfy the condition of triangle\n                #with the elements at ith, jth and kth index.\n                while (k < n and arr[i] + arr[j] > arr[k]):\n                    k += 1\n\n                #Incrementing the count of triangles.\n                if k > j:\n                    count += k - j - 1\n\n        #returning the count of triangles.\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    // Function to count the number of possible triangles.\n    countTriangles(arr) {\n        // Sorting the input array.\n        arr.sort((a, b) => a - b);\n\n        let count = 0;\n        const n = arr.length; // Get the length of the array\n\n        // Traversing the array.\n        for (let i = 0; i < n - 2; ++i) {\n            // Storing the third index starting from the ith index in k.\n            let k = i + 2;\n\n            // Traversing all the elements after the ith element.\n            for (let j = i + 1; j < n; ++j) {\n                // Traversing all the elements after the jth index to check if there\n                // exists any element that can satisfy the condition of triangle\n                // with the elements at ith, jth, and kth index.\n                while (k < n && arr[i] + arr[j] > arr[k]) {\n                    ++k;\n                }\n\n                // Incrementing the count of triangles.\n                if (k > j) count += k - j - 1;\n            }\n        }\n\n        // Returning the count of triangles.\n        return count;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}