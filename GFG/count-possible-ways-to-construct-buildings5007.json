{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704629,
            "title": "Count possible ways to construct buildings",
            "titleSlug": "count-possible-ways-to-construct-buildings5007",
            "content": "<p><span style=\"font-size: 18px;\">There is a road passing through a city with <strong>N</strong> plots on both sides of the road. Plots are arranged in a straight line on either side of the road. Determine the <strong>total number </strong>of ways to construct buildings in these plots, ensuring that no two buildings are adjacent to each other. Specifically, buildings on opposite sides of the road cannot be adjacent.</span></p>\n<p><span style=\"font-size: 18px;\">Using <strong>*</strong> to represent a plot and <strong>||</strong> for the road, the arrangement for <strong>N = 3 </strong>can be visualized as follows: <strong>* * * || * * </strong>*.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> As the answer can be very large, print it <strong>mod 10<sup>9</sup>+7</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 1\n<strong>Output: </strong>4\n<strong>Explanation: <br /></strong>Possible ways for the arrangement are </span><span style=\"font-size: 18px;\">B||*, *||B, B||B, *||*<br />where B represents a building.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 3\n<strong>Output: </strong>25\n<strong>Explanation: <br /></strong>Possible ways for one side are BSS, BSB, SSS, SBS,<br />SSB where B represents a building and S\nrepresents an empty space. Pairing up with <br />possibilities on the other side of the road,<br />total possible ways are 25.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>TotalWays()</strong>&nbsp;which takes <strong>N</strong> as input parameter and returns the total possible ways modulo <strong>10<sup>9</sup>&nbsp;+ 7</strong>.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(N)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 100000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A city has a road with N plots on each side. The plots are arranged linearly on both sides of the road.  Determine the total number of ways to construct buildings on these plots such that no two buildings are adjacent to each other, even across the road.  Calculate the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= N <= 100000"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "4",
                        "explanation": "With N=1, possible arrangements are Building||Empty, Empty||Building, Building||Building, Empty||Empty.  Representing building as B and empty plot as *, we have B||*, *||B, B||B, *||*.  Therefore, there are 4 possible ways."
                    },
                    {
                        "input": "3",
                        "output": "25",
                        "explanation": "With N=3, the possible arrangements for one side are BSS, BSB, SSS, SBS, SSB, where B represents a building and S represents an empty space. Since we can pair up each possibility on one side of the road with each possibility on the other side, the total possible ways are 5 * 5 = 25."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we think of a famous series?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Fibonacci",
                "slug": "fibonacci"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "payu"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n\tpublic:\n\t//Function to find the total number of ways to reach Nth step.\n\tint TotalWays(int N)\n\t{\n\t\tlong long int mod = 1000000007;\n\t\t//declaring a vector of size N+1 to store Fibonacci numbers.\n\t\tvector<long long int>f(N+1);\n\n\t\t//setting the first two Fibonacci numbers.\n\t\tf[0] = f[1] = 1;\n\n\t\t//calculating Fibonacci numbers up to N.\n\t\tfor(int i = 2; i <= N; i++)\n\t\t\tf[i]  = (f[i-1]%mod + f[i-2]%mod)%mod;\n\n\t\t//calculating the total number of ways using the sum of\n\t\t//Nth and (N - 1)th Fibonacci numbers.\n\t\tlong long int x = (f[N] + f[N-1])%mod;\n\n\t\t//calculating x^2 modulo mod.\n\t\tx = x * x;\n\t\tx %= mod;\n\n\t\t//returning the result as an integer.\n\t\treturn int(x);\n\t}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    public int TotalWays(int N)\n    {\n        long mod = 1000000007;\n\t\tlong [] f = new long[N+1];\n\t\tf[0] = f[1] = 1;\n\t\tfor(int i = 2; i <= N; i++)\n\t\t\tf[i]  = (f[i-1]%mod + f[i-2]%mod)%mod; // calculating Fibonacci numbers using dynamic programming\n\t\tlong x = (f[N] + f[N-1])%mod; // calculating the sum of the last two Fibonacci numbers\n\t\tx = x * x; // squaring the sum\n\t\tx %= mod; // taking modulo\n\t\treturn (int)x; // returning the result as an integer\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def TotalWays(self, N):\n        # initializing two arrays for storing the number of ways to reach\n        # the current step with an odd or even number of steps taken\n        # dpO stores the number of ways with an odd number of steps\n        # dpI stores the number of ways with an even number of steps\n        dpO = [0 for _ in range(0, N)]\n        dpI = [0 for _ in range(0, N)]\n\n        # there is only one way to reach the first step, so set both dpO[0] and dpI[0] to 1\n        dpO[0] = 1\n        dpI[0] = 1\n\n        # we need to take modulo with a large number to avoid integer overflow\n        mod = 10**9 + 7\n\n        # iterate from 1 to N-1 to calculate the number of ways for each step\n        for i in range(1, N):\n            # the number of ways to reach the current step with an odd number of steps\n            # is equal to the sum of the number of ways to reach the previous step with an odd number of steps\n            # and the number of ways to reach the previous step with an even number of steps\n            dpO[i] = (dpO[i - 1] + dpI[i - 1]) % mod\n\n            # the number of ways to reach the current step with an even number of steps\n            # is equal to the number of ways to reach the previous step with an odd number of steps\n            dpI[i] = dpO[i - 1]\n\n        # the total number of ways to reach the Nth step is the sum of the number of ways to reach the Nth step\n        # with an odd number of steps and the number of ways to reach the Nth step with an even number of steps\n        # we need to take modulo with a large number to avoid integer overflow\n        return ((dpO[N - 1] + dpI[N - 1]) % mod *\n                (dpO[N - 1] + dpI[N - 1]) % mod) % mod\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}