{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875839,
            "title": "4 Sum \u2013 Count quadruplets with given sum",
            "titleSlug": "count-quadruplets-with-given-sum",
            "content": "<p><span >Given an array <strong>arr[]</strong> and an integer <strong>target</strong>, you need to find and return the <strong>count</strong> of quadruplets such that the index of each element of the&nbsp;</span><span style=\"font-size: 18.6667px;\">quadruplet is unique and the sum of the elements is equal to <strong>target</strong>.</span><br /><br /><strong><span >Examples:</span></strong></p>\n<pre><span ><strong>Input:</strong> arr[] = [1, 5, 3, 1, 2, 10], target = 20</span><br /><span ><strong>Output:</strong> 1</span><br /><span ><strong>Explanation:</strong> Only quadruplet satisfying the condition is arr[1] + arr[2] + arr[4] + arr[5] = 5 + 3 + 2 + 10 = 20. Hence, the answer is 1.<br /></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [1, 1, 1, 1, 1], target = 4</span><br /><span ><strong>Output:</strong> 5</span><br /><span ><strong>Explanation:</strong> Three quadruplets with sum 4 are:</span><br /><span >arr[0] + arr[1] + arr[2] + arr[3] = 1 + 1 + 1 + 1 = 4</span><br /><span ><span >arr[1] + arr[2] + arr[3] + arr[4] = 1 + 1 + 1 + 1 = 4<br /></span><span style=\"font-size: 18.6667px;\">arr[0] + arr[2] + arr[3] + arr[4] = 1 + 1 + 1 + 1 = 4<br />arr[0] + arr[1] + arr[3] + arr[4] = 1 + 1 + 1 + 1 = 4</span><span ><br /></span><span style=\"font-size: 18.6667px;\">arr[0] + arr[1] + arr[2] + arr[4] = 1 + 1 + 1 + 1 = 4</span></span></pre>\n<pre><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>arr = [4, 3, -13, 3], target = -3<strong>\nOutput: </strong>1<strong>\nExplanation: </strong>There is only 1 quadruplet with sum = -3, that is [4, 3, -13, 3].</span></pre>\n<p><span ><strong>Constraints:<br /></strong></span><span >1 &lt;= arr.length &lt;= 10<sup>3</sup></span><br /><span ><span >-10<sup>5</sup></span><sup > </sup><span >&lt;=arr[i]&lt;= 10</span><sup >5</sup><br /><span ><span >-10<sup>5</sup></span><sup >&nbsp;</sup><span >&lt;=</span>target&lt;= 10</span><sup >5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Try to store sum of pairs in a hashmap.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Map",
                "slug": "map"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int countSum(vector<int>& arr, int target) {\n        int n = arr.size();\n\n        // Initialize answer\n        int count = 0;\n\n        // Store the frequency of sum of first two elements\n        unordered_map<int, int> m;\n\n        // Traverse from 0 to n-1, where arr[i]\n        // is the 3rd element\n        for (int i = 0; i < n - 1; i++) {\n\n            // All possible 4th elements\n            for (int j = i + 1; j < n; j++) {\n\n                // Sum of last two elements\n                int temp = arr[i] + arr[j];\n\n                // Check for valid sum of the first two elements\n                count += m[target - temp];\n            }\n\n            // Store frequency of all possible sums\n            // of first two elements\n            for (int j = 0; j < i; j++) {\n                int temp = arr[i] + arr[j];\n                m[temp]++;\n            }\n        }\n\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int countSum(int arr[], int target) {\n        int count = 0;\n        int n = arr.length;\n\n        // Store the frequency of sum of first two elements\n        HashMap<Integer, Integer> map = new HashMap<>();\n\n        // Traverse from 0 to n-1, where arr[i] is the 3rd element\n        for (int i = 0; i < n - 1; i++) {\n\n            // All possible 4th elements\n            for (int j = i + 1; j < n; j++) {\n                int temp = arr[i] + arr[j];\n                count += map.getOrDefault(target - temp, 0);\n            }\n\n            // Store frequency of all possible sums of first two elements\n            for (int j = 0; j < i; j++) {\n                int temp = arr[i] + arr[j];\n                map.put(temp, map.getOrDefault(temp, 0) + 1);\n            }\n        }\n\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import defaultdict\n\n\nclass Solution:\n\n    def countSum(self, arr, target):\n        count = 0\n        n = len(arr)\n        # Store the frequency of sum of first two elements\n        m = defaultdict(int)\n\n        # Traverse from 0 to n-1, where arr[i] is the 3rd element\n        for i in range(n - 1):\n            # All possible 4th elements\n            for j in range(i + 1, n):\n                temp = arr[i] + arr[j]\n                count += m[target - temp]\n\n            # Store frequency of all possible sums of first two elements\n            for j in range(i):\n                temp = arr[i] + arr[j]\n                m[temp] += 1\n\n        return count\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int CountSum(int[] arr, int target) {\n        int count = 0;\n        int n = arr.Length;\n\n        // Store the frequency of sum of first two elements\n        Dictionary<int, int> map = new Dictionary<int, int>();\n\n        // Traverse from 0 to n-1, where arr[i] is the 3rd element\n        for (int i = 0; i < n - 1; i++) {\n\n            // All possible 4th elements\n            for (int j = i + 1; j < n; j++) {\n                int temp = arr[i] + arr[j];\n                if (map.ContainsKey(target - temp)) {\n                    count += map[target - temp];\n                }\n            }\n\n            // Store frequency of all possible sums of first two elements\n            for (int j = 0; j < i; j++) {\n                int temp = arr[i] + arr[j];\n                if (!map.ContainsKey(temp)) {\n                    map[temp] = 0;\n                }\n                map[temp]++;\n            }\n        }\n\n        return count;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countSum(arr, target) {\n        let count = 0;\n        let n = arr.length;\n        // Store the frequency of sum of first two elements\n        let map = {};\n\n        // Traverse from 0 to n-1, where arr[i] is the 3rd element\n        for (let i = 0; i < n - 1; i++) {\n            // All possible 4th elements\n            for (let j = i + 1; j < n; j++) {\n                let temp = arr[i] + arr[j];\n                if (map[target - temp]) {\n                    count += map[target - temp];\n                }\n            }\n            // Store frequency of all possible sums of first two elements\n            for (let j = 0; j < i; j++) {\n                let temp = arr[i] + arr[j];\n                if (!map[temp]) {\n                    map[temp] = 0;\n                }\n                map[temp]++;\n            }\n        }\n        return count;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}