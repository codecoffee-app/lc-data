{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704804,
            "title": "Count rotations divisible by 4",
            "titleSlug": "count-rotations-divisible-by-43523",
            "content": "<p><span style=\"font-size:18px\">Given a large positive number <strong>N</strong> having <strong>x</strong> digits, the task is to&nbsp;count all rotations of the given number which are divisible by 4.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 8\n<strong>Output:</strong> 1\n<strong>Explaination:</strong> The number 8 is divisible by 4.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 20\n<strong>Output:</strong> 1\n<strong>Explaination:</strong> The number 20 is divisible by 4. \nBut after rotation 02 is not divisible by 4.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>countRotations()</strong> which takes N as input parameter and returns the number of rotations divisible by 4.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(x)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; x &le; 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a large positive number N with x digits, determine the number of rotations of N that are divisible by 4.",
                "constraints": [
                    "1 <= x <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "8",
                        "output": "1",
                        "explanation": "The number 8 is divisible by 4. Therefore, one rotation is divisible by 4."
                    },
                    {
                        "input": "20",
                        "output": "1",
                        "explanation": "The number 20 is divisible by 4. The rotation '02' (or 2) is not divisible by 4. So, only one rotation satisfies the condition."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A number is divisible 4 if the number formed by its last two digits is divisible by 4.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to count the number of rotations\n    int countRotations(string N){\n        int count = 0;\n        string s = N;\n        int n = s.size();\n        \n        // If the number has only one digit\n        if(n == 1){\n            if(((int)(s[0]-'0'))%4 == 0)\n                count++;\n        }\n        \n        // If the number has more than one digit\n        else{\n            // Double the string to consider all rotations\n            s += s;\n            \n            // Iterate over the second half of the doubled string\n            for(int i = 2*n - 1; i >= n; i--){\n                // Get the current two-digit number\n                int x = (int)(s[i]-'0') + ((int)(s[i-1]-'0'))*10;\n                \n                // Check if the two-digit number is divisible by 4\n                if(x%4 == 0)\n                    count++;\n            }\n        }\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}