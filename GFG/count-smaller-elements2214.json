{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703132,
            "title": "Count Smaller elements",
            "titleSlug": "count-smaller-elements2214",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr</strong> containing non-negative integers. Count and return an array&nbsp;<strong>res</strong> where <strong>res[i]</strong>&nbsp;denotes the number of smaller elements on right side of&nbsp;<strong>arr[i]</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [12, 1, 2, 3, 0, 11, 4]\n<strong>Output:</strong> [6, 1, 1, 1, 0, 1, 0]\n<strong>Explanation:</strong> There are 6 smaller elements right after 12. There is 1 smaller element right after 1. And so on.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5]\n<strong>Output:</strong> [0, 0, 0, 0, 0]\n<strong>Explanation:</strong> There are 0 smaller elements right after 1. There are 0 smaller elements right after 2. And so on.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i]<sub>&nbsp;&nbsp;</sub>&le; 10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` containing non-negative integers, determine the count of smaller elements to the right of each element. Return a new array `res` where `res[i]` represents the number of elements in `arr` to the right of `arr[i]` that are strictly smaller than `arr[i]`.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "0 <= arr[i] <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "[12, 1, 2, 3, 0, 11, 4]",
                        "output": "[6, 1, 1, 1, 0, 1, 0]",
                        "explanation": "For the first element 12, there are 6 smaller elements to its right (1, 2, 3, 0, 11, 4). For the second element 1, there is 1 smaller element to its right (0), and so on."
                    },
                    {
                        "input": "[1, 2, 3, 4, 5]",
                        "output": "[0, 0, 0, 0, 0]",
                        "explanation": "For each element in the array, there are no smaller elements to its right since the array is sorted in ascending order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"box-sizing: border-box; line-height: 1.6rem; font-family: Nunito; color: #1e2229; font-size: 16px; background-color: #ffffff;\">Try to use a </span><a style=\"box-sizing: border-box; background-color: #ffffff; text-decoration-line: none; line-height: 1.6rem; font-family: Nunito; word-break: break-all; font-size: 16px;\" href=\"https://www.geeksforgeeks.org/binary-indexed-tree-or-fenwick-tree-2/\" target=\"_blank\" rel=\"noopener\"><span style=\"box-sizing: border-box; line-height: 1.6rem; font-family: var(--gfg-font-primary);\">Fenwick Tree</span></a><span style=\"box-sizing: border-box; line-height: 1.6rem; font-family: Nunito; color: #1e2229; font-size: 16px; background-color: #ffffff;\">&nbsp;(Binary Indexed Tree, BIT) to efficiently count the number of smaller elements to the right of each element in the input array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google",
            "codenation"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\n// Global array for Fenwick Tree (BIT)\nvector<int> bit((int)1e6 + 1);\n\nclass Solution {\n  public:\n    // Update function of BIT\n    void update(int i, int p) {\n        for (; i < (int)1e6 + 1; i += i & (-i)) {\n            bit[i] += p;\n        }\n    }\n\n    // Get function of BIT\n    int get(int i) {\n        int ans = 0;\n        for (; i > 0; i -= i & (-i)) {\n            ans += bit[i];\n        }\n        return ans;\n    }\n\n    // Function to construct the lower array\n    vector<int> constructLowerArray(vector<int>& a) {\n        int n = a.size();\n        vector<pair<int, int>> p;\n\n        // Compressing array value\n        for (int i = 0; i < n; i++) {\n            p.emplace_back(a[i], i);\n        }\n        sort(p.begin(), p.end(),\n             [](const pair<int, int>& p1, const pair<int, int>& p2) {\n                 return p1.first < p2.first;\n             });\n\n        int in = 1;\n        unordered_map<int, int> hm;\n        for (int i = 0; i < n; i++) {\n            if (hm.find(p[i].first) == hm.end()) {\n                hm[p[i].first] = in++;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            a[i] = hm[a[i]];\n        }\n        // Compressing array values finish. Now the values in the array are from range 1\n        // to 1e6.\n\n        // Initializing our BIT array\n        fill(bit.begin(), bit.end(), 0);\n\n        vector<int> ans(n);\n        for (int i = n - 1; i >= 0; i--) {\n            ans[i] = get(a[i] - 1);\n            update(a[i], 1);\n        }\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\n/*In order to implement Policy Based Data Structures in Java we need to use\nFenwick Tree/Binary Indexed Tree.*/\nclass Solution {\n\n    // A global array for Fenwick Tree.\n    int bit[];\n\n    int[] constructLowerArray(int[] a) {\n        // code here\n\n        /*As the constraints are of size 10^8, hence such a large value cannot be used\n        as the index in an array hence we need to compress our input values.\n        There could be many ways to compress the values one them is demonstrated\n        below.*/\n        int n = a.length;\n        // Compressing array value\n        pair p[] = new pair[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = new pair(a[i], i);\n        }\n        Arrays.sort(p, (p1, p2) -> p1.a - p2.a);\n        int in = 1;\n        HashMap<Integer, Integer> hm = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            if (!hm.containsKey(p[i].a)) {\n                hm.put(p[i].a, in++);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            a[i] = hm.get(a[i]);\n        }\n        /*Compressing array values finish. Now the values in the array are from range 1\n        to 1o^6. And these can be used as indexes of an array.*/\n\n        // Initializing our BIT array\n        bit = new int[(int)1e6 + 1];\n\n        int ans[] = new int[n];\n        for (int i = n - 1; i >= 0; i--) {\n            ans[i] = get(a[i] - 1);\n            update(a[i], 1);\n        }\n        return ans;\n    }\n\n    // Update function of BIT.\n    void update(int i, int p) {\n        for (; i < (int)1e6 + 1; i += i & (-1 * i)) {\n            bit[i] += p;\n        }\n    }\n\n    // Get function of BIT.\n    int get(int i) {\n        int ans = 0;\n        for (; i > 0; i -= i & (-1 * i)) {\n            ans += bit[i];\n        }\n        return ans;\n    }\n\n    // Standard pair class.\n    class pair {\n        int a, b;\n\n        public pair(int a, int b) {\n            this.a = a;\n            this.b = b;\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def merge(self, left, right):\n        i, j = 0, 0\n        cnt = 0\n        m, n = len(left), len(right)\n        sorted_arr = []\n\n        # merging the left and right arrays while counting the inversions\n        while i < m and j < n:\n            if left[i][1] > right[j][1]:\n                cnt += 1\n                sorted_arr.append(right[j])\n                j += 1\n            else:\n                sorted_arr.append(left[i])\n                self.ans[left[i][0]] += cnt\n                i += 1\n\n        # appending remaining elements from left array\n        while i < m:\n            sorted_arr.append(left[i])\n            self.ans[left[i][0]] += cnt\n            i += 1\n\n        # appending remaining elements from right array\n        while j < n:\n            sorted_arr.append(right[j])\n            cnt += 1\n            j += 1\n\n        return sorted_arr\n\n    def split(self, nums):\n        # base case: if list has only one element, return the list\n        if len(nums) == 1:\n            return nums\n\n        # finding the mid index of the list\n        mid = (len(nums)) // 2\n\n        # recursively splitting the list into left and right halves\n        left, right = self.split(nums[:mid]), self.split(nums[mid:])\n\n        # merging the left and right halves\n        return self.merge(left, right)\n\n    def constructLowerArray(self, arr):\n        n = len(arr)\n        # initializing ans list with zeros of length n\n        self.ans = [0 for _ in range(n)]\n\n        nums = []\n        # creating a list of tuples with index and value pairs\n        for i, num in enumerate(arr):\n            nums.append((i, num))\n\n        # splitting and merging the list of tuples while counting inversions\n        sorted_arr = self.split(nums)\n\n        return self.ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    merge(left, right) {\n        let i = 0, j = 0;\n        let cnt = 0;\n        let m = left.length, n = right.length;\n        let sorted_arr = [];\n\n        while (i < m && j < n) {\n            if (left[i][1] > right[j][1]) {\n                cnt++;\n                sorted_arr.push(right[j]);\n                j++;\n            } else {\n                sorted_arr.push(left[i]);\n                this.ans[left[i][0]] += cnt\n                i++;\n            }\n        }\n\n        while (i < m) {\n            sorted_arr.push(left[i]);\n            this.ans[left[i][0]] += cnt;\n            i++;\n        }\n\n        while (j < n) {\n            sorted_arr.push(right[j]);\n            cnt++;\n            j++;\n        }\n\n        return sorted_arr;\n    }\n\n    split(nums) {\n        if (nums.length === 1) {\n            return nums;\n        }\n\n        let mid = Math.floor(nums.length / 2);\n\n        let left = this.split(nums.slice(0, mid));\n        let right = this.split(nums.slice(mid));\n\n        return this.merge(left, right);\n    }\n\n    constructLowerArray(arr) {\n        let n = arr.length;\n        this.ans = new Array(n).fill(0);\n\n        let nums = [];\n        arr.forEach((num, i) => { nums.push([ i, num ]); });\n\n        let sorted_arr = this.split(nums);\n\n        return this.ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}