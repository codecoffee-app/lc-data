{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705230,
            "title": "Count Sorted Rows",
            "titleSlug": "count-sorted-rows2702",
            "content": "<p><span style=\"font-size:18px\">Given two integers N and M and a matrix of dimensions N*M.&nbsp;Count all the rows in a matrix that are sorted either in strictly increasing order or in strictly decreasing order.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=3,M=3\r\nMat=[[1,2,3],[6,5,4],[7,9,8]]\r\n<strong>Output:</strong>\r\n2\r\n<strong>Explanation:</strong>\r\nThe first row is sorted in strictly \r\nincreasing order while the second row \r\nis sorted in strictly decreasing order.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=3,M=3\r\nMat=[[1,2,3],[4,5,6],[7,8,9]]\r\n<strong>Output:</strong>\r\n3\r\n<strong>Explanation:</strong>\r\nAll the rows are sorted in strictly \r\nincreasing order.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything.Your task is to complete the function <strong>sortedCount() </strong>which takes the two integers N,M and the matrix Mat as input parameters and returns the number of rows which are sorted in either strictly increasing order or strictly decreasing order.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(N*M)<br />\r\n<strong>Expected Auxillary Space:</strong>O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=N,M,Mat[i][j]&lt;=1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers N and M representing the dimensions of an N*M matrix, determine the number of rows within the matrix that are sorted in either strictly increasing or strictly decreasing order.",
                "constraints": [
                    "1 <= N, M, Mat[i][j] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N=3, M=3, Mat=[[1,2,3],[6,5,4],[7,9,8]]",
                        "output": "2",
                        "explanation": "The matrix has 3 rows and 3 columns. The first row [1, 2, 3] is strictly increasing, and the second row [6, 5, 4] is strictly decreasing. The third row [7, 9, 8] is neither strictly increasing nor strictly decreasing, so the total count of sorted rows is 2."
                    },
                    {
                        "input": "N=3, M=3, Mat=[[1,2,3],[4,5,6],[7,8,9]]",
                        "output": "3",
                        "explanation": "The matrix has 3 rows and 3 columns. All three rows ([1, 2, 3], [4, 5, 6], and [7, 8, 9]) are sorted in strictly increasing order, so the total count of sorted rows is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If two consecutive numbers in an array are equal, then it can neither be strictly increasing nor strictly decreasing.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int sortedCount(int N, int M, vector<vector<int>> Mat) {\r\n        int result = 0; // Initialize result\r\n\r\n        // Start from left side of matrix to\r\n        // count increasing order rows\r\n        for (int i = 0; i < N; i++) {\r\n            // Check if there is any pair ofs element\r\n            // that are  not in increasing order.\r\n            int j;\r\n            for (j = 0; j < M - 1; j++)\r\n                if (Mat[i][j + 1] <= Mat[i][j]) break;\r\n\r\n            // If the loop didn't break (All elements\r\n            // of current row were in increasing order)\r\n            if (j == M - 1) result++;\r\n        }\r\n\r\n        // Start from right side of matrix to\r\n        // count increasing order rows ( refrence\r\n        // to left these are in decreasing order )\r\n        for (int i = 0; i < N; i++) {\r\n            // Check if there is any pair ofs element\r\n            // that are  not in decreasing order.\r\n            int j;\r\n            for (j = M - 1; j > 0; j--)\r\n                if (Mat[i][j - 1] <= Mat[i][j]) break;\r\n\r\n            // If the loop didn't break (All elements\r\n            // of current row were in decreasing order)\r\n            if (M > 1 && j == 0) result++;\r\n        }\r\n        return result;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    int sortedCount(int N, int M, int Mat[][]) {\r\n        int result = 0; // Initialize result\r\n\r\n        // Start from left side of matrix to\r\n        // count increasing order rows\r\n        for (int i = 0; i < N; i++) {\r\n            // Check if there is any pair ofs element\r\n            // that are  not in increasing order.\r\n            int j;\r\n            for (j = 0; j < M - 1; j++)\r\n                if (Mat[i][j + 1] <= Mat[i][j]) break;\r\n\r\n            // If the loop didn't break (All elements\r\n            // of current row were in increasing order)\r\n            if (j == M - 1) result++;\r\n        }\r\n\r\n        // Start from right side of matrix to\r\n        // count increasing order rows ( refrence\r\n        // to left these are in decreasing order )\r\n        for (int i = 0; i < N; i++) {\r\n            // Check if there is any pair ofs element\r\n            // that are  not in decreasing order.\r\n            int j;\r\n            for (j = M - 1; j > 0; j--)\r\n                if (Mat[i][j - 1] <= Mat[i][j]) break;\r\n\r\n            // If the loop didn't break (All elements\r\n            // of current row were in decreasing order)\r\n            if (M > 1 && j == 0) result++;\r\n        }\r\n        return result;\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def sortedCount(self,N,M,Mat):\r\n        result = 0 # Initialize result\r\n\r\n        # Start from left side of matrix to\r\n        # count increasing order rows\r\n        for i in range(N):\r\n            # Check if there is any pair ofs element\r\n            # that are  not in increasing order.\r\n            j=0\r\n            while (j<M-1):\r\n                if Mat[i][j+1] <= Mat[i][j]:\r\n                 break\r\n                j+=1\r\n            # If the loop didn't break (All elements\r\n            # of current row were in increasing order)\r\n            if j == M-1:\r\n                result+=1\r\n        # Start from right side of matrix to\r\n        # count increasing order rows ( refrence\r\n        # to left these are in decreasing order )\r\n        for i in range(N):\r\n            # Check if there is any pair ofs element\r\n            # that are  not in decreasing order.\r\n            j=M-1\r\n            while (j>0):\r\n                if Mat[i][j-1] <= Mat[i][j]:\r\n                    break\r\n                j-=1\r\n            # If the loop didn't break (All elements\r\n            # of current row were in decreasing order)\r\n            if M > 1 and j == 0:\r\n                result+=1\r\n        return result\r\n        ",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number} M\n * @param {number[][]} Mat\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to count all elements in matrix in sorted order.\n    sortedCount(N, M, Mat)\n    {\n        let result = 0; // Initialize result\n\n        // Start from left side of matrix to\n        // count increasing order rows\n        for (let i = 0; i < N; i++) {\n            // Check if there is any pair of elements\n            // that are not in increasing order.\n            let j = 0;\n            while (j < M-1) {\n                if (Mat[i][j+1] <= Mat[i][j]) {\n                    break;\n                }\n                j++;\n            }\n            // If the loop didn't break (All elements\n            // of current row were in increasing order)\n            if (j == M-1) {\n                result++;\n            }\n        }\n        // Start from right side of matrix to\n        // count increasing order rows (reference\n        // to left, these are in decreasing order )\n        for (let i = 0; i < N; i++) {\n            // Check if there is any pair of elements\n            // that are not in decreasing order.\n            let j = M-1;\n            while (j > 0) {\n                if (Mat[i][j-1] <= Mat[i][j]) {\n                    break;\n                }\n                j--;\n            }\n            // If the loop didn't break (All elements\n            // of current row were in decreasing order)\n            if (M > 1 && j == 0) {\n                result++;\n            }\n        }\n        return result;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int sortedCount(int N, int M, List<List<int>> Mat)\n    {\n        int result = 0; // Initialize result\n\n        // Start from left side of matrix to\n        // count increasing order rows\n        for (int i = 0; i < N; i++)\n        {\n            // Check if there is any pair of elements\n            // that are not in increasing order.\n            int j;\n            for (j = 0; j < M - 1; j++)\n                if (Mat[i][j + 1] <= Mat[i][j]) break;\n\n            // If the loop didn't break (All elements\n            // of current row were in increasing order)\n            if (j == M - 1) result++;\n        }\n\n        // Start from right side of matrix to\n        // count increasing order rows (reference\n        // to left, these are in decreasing order)\n        for (int i = 0; i < N; i++)\n        {\n            // Check if there is any pair of elements\n            // that are not in decreasing order.\n            int j;\n            for (j = M - 1; j > 0; j--)\n                if (Mat[i][j - 1] <= Mat[i][j]) break;\n\n            // If the loop didn't break (All elements\n            // of current row were in decreasing order)\n            if (M > 1 && j == 0) result++;\n        }\n        return result;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}