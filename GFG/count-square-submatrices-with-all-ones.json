{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712541,
            "title": "Count Square Submatrices with All Ones",
            "titleSlug": "count-square-submatrices-with-all-ones",
            "content": "<p><span style=\"font-size:18px\">Given a <strong>N*M</strong>&nbsp;matrix of ones and zeros, return how many <strong>square</strong> <strong>submatrices</strong> have all ones.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\"><span style=\"font-size:18px\"><strong>Input:</strong><br />\r\nN = 3<br />\r\nM = 4<br />\r\nmatrix [ ][ ] =<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;[&nbsp;[0, 1, 1, 1],<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [1, 1, 1, 1],&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [0, 1, 1, 1] ]<br />\r\n<strong>Output: </strong>15<br />\r\n<strong>Explanation:</strong>&nbsp;<br />\r\nThere are <strong>10 </strong>squares of side 1.<br />\r\nThere are <strong>4</strong> squares of side 2.<br />\r\nThere are <strong>1</strong>&nbsp;squares of side 3.<br />\r\nTotal number of squares = 10 + 4 + 1 =<strong>15</strong></span></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\"><span style=\"font-size:18px\"><strong>Input:</strong><br />\r\nN = 3<br />\r\nM = 3<br />\r\nmatrix [ ][ ] =<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [&nbsp;[1, 0, 1],<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [1, 1, 0],&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; [1, 1, 0] ]<br />\r\n<strong>Output: </strong>7<br />\r\n<strong>Explanation:</strong>&nbsp;<br />\r\nThere are <strong>6&nbsp;</strong>squares of side 1.<br />\r\nThere are <strong>1</strong> squares of side 2.<br />\r\nTotal number of squares = 6&nbsp;&nbsp;+ 1 =<strong>7</strong></span></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>countSquares()</strong>&nbsp;which takes the interger <strong>N</strong>, integer <strong>M</strong>&nbsp;and 2D integer&nbsp;array&nbsp;<strong>matrix[ ][ ]&nbsp;</strong>as parameters and returns the&nbsp;number of <strong>square</strong> <strong>submatrices</strong> have all ones.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*M)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N,M &le;&nbsp; 3*10<sup>3</sup></span><br />\r\n<span style=\"font-size:18px\">0 &le; matrix [ i ][ j ]</span><span style=\"font-size:18px\">&nbsp;&le; 1</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to count the number of squares in the given matrix.\n    int countSquares(int N, int M, vector<vector<int>> &matrix) {\n        int res = 0;\n        // Iterating over each row and column in the matrix.\n        for (int i = 0; i < N; ++i)\n            for (int j = 0; j < M; res += matrix[i][j++]) // Adding the value in the matrix to the result.\n                // Checking if the current element is 1 and not in the first row or first column.\n                if (matrix[i][j] && i && j)\n                    // Adding the minimum value from the previous horizontal, vertical, and diagonal element to the current element.\n                    matrix[i][j] += min({matrix[i - 1][j - 1], matrix[i - 1][j], matrix[i][j - 1]});\n        // Returning the result, which represents the total number of squares in the matrix.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int countSquares(int N, int M, int mat[][]) {\n        int res = 0; // initial result is 0\n        for (int i = 0; i < N; i++) {  // iterate through rows of matrix\n            for (int j = 0; j < M; res += mat[i][j++]) { // iterate through columns of matrix\n                if (mat[i][j] != 0 && i != 0 && j != 0) { // check if current element is not 0 and not in first row or column\n                    mat[i][j] += // add minimum of three adjacent elements to current element\n                        Math.min(mat[i - 1][j - 1],\n                                 Math.min(mat[i - 1][j], mat[i][j - 1]));\n                }\n            }\n        }\n        return res; // return the final result\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n\r\n    # Function to count the number of squares in the matrix.\r\n    def countSquares(self, N, M, a):\r\n\r\n        r,c=len(a), len(a[0])\r\n        # Creating a dp matrix to store the count of squares.\r\n        dp=[[0 for i in range(c)] for i in range(r)]\r\n\r\n        # Iterating over the matrix.\r\n        for i in range(r):\r\n            for j in range(c):\r\n                if a[i][j]:\r\n                    \r\n                    up=dup=left=0\r\n                    # Checking if there is an element above the current element.\r\n                    if i-1>=0:up=dp[i-1][j]\r\n                    \r\n                    # Checking if there is an element to the left of the current element.\r\n                    if j-1>=0:left=dp[i][j-1]\r\n                    \r\n                    # Checking if there is an element diagonally up to the left of the current element.\r\n                    if i-1>=0 and j-1>=0:dup=dp[i-1][j-1]\r\n                    \r\n                    # Calculating the count of squares at dp[i][j] by taking minimum of above three counts and adding 1.\r\n                    dp[i][j]=min(up, left, dup)+1\r\n        \r\n        # Calculating the total count of squares in the matrix.\r\n        return (sum([sum(l) for l in dp]))",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number} M\n * @param {number[][]} matrix\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to count number of squares.\n    countSquares(N, M, matrix)\n    {\n        let r = N, c = M;\n        // Creating a dp matrix to store the count of squares.\n        let dp = new Array(r).fill(0).map(() => new Array(c).fill(0));\n        \n        // Iterating over the matrix.\n        for (let i = 0; i < r; i++){\n            for (let j = 0; j < c; j++){\n                if (matrix[i][j]){\n                    \n                    let up = 0, dup = 0, left = 0;\n                    // Checking if there is an element above the current element.\n                    if (i-1 >= 0) up = dp[i-1][j];\n                    \n                    // Checking if there is an element to the left of the current element.\n                    if (j-1 >= 0) left = dp[i][j-1];\n                    \n                    // Checking if there is an element diagonally up to the left of the current element.\n                    if (i-1 >= 0 && j-1 >= 0) dup = dp[i-1][j-1];\n                    \n                    // Calculating the count of squares at dp[i][j] by taking minimum of above three counts and adding 1.\n                    dp[i][j] = Math.min(up, left, dup) + 1;\n                }\n            }\n        }\n        \n        // Calculating the total count of squares in the matrix.\n        return dp.map(item => item.reduce((a, b) => a + b)).reduce((a, b) => a + b);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int countSquares(int N, int M, List<List<int>> matrix)\n    {\n        int res = 0;\n        // Iterating over each row and column in the matrix.\n        for (int i = 0; i < N; ++i)\n            for (int j = 0; j < M; res += matrix[i][j++]) // Adding the value in the matrix to the result.\n                // Checking if the current element is 1 and not in the first row or first column.\n                if (matrix[i][j] != 0 && i != 0 && j != 0)\n                    // Adding the minimum value from the previous horizontal, vertical, and diagonal element to the current element.\n                    matrix[i][j] += Math.Min(Math.Min(matrix[i - 1][j - 1], matrix[i - 1][j]), matrix[i][j - 1]);\n        // Returning the result, which represents the total number of squares in the matrix.\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}