{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 874827,
            "title": "Count Subarrays with given XOR",
            "titleSlug": "count-subarray-with-given-xor",
            "content": "<p><span >Given an array of integers <strong>arr[]</strong> and a number <strong>k</strong>, count the number of subarrays having <strong>XOR</strong> of their elements as <strong>k</strong>.</span></p>\n<p><span ><strong>Examples:&nbsp;<br /></strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [4, 2, 2, 6, 4], k = 6</span><br /><span ><strong>Output:</strong> 4</span><br /><span ><strong>Explanation:</strong> The subarrays having XOR of their elements as 6 are [4, 2], [4, 2, 2, 6, 4], [2, 2, 6], and [6]. Hence, the answer is 4.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [5, 6, 7, 8, 9], k = 5</span><br /><span ><strong>Output:</strong> 2</span><br /><span ><strong>Explanation:</strong> The subarrays having XOR of their elements as 5 are [5] and [5, 6, 7, 8, 9]. Hence, the answer is 2.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [1, 1, 1, 1], k = 0</span><br /><span ><strong>Output:</strong> 4</span><br /><span ><strong>Explanation:</strong> The subarrays are [1, 1], [1, 1], [1, 1] and [1, 1, 1, 1].</span></pre>\n<p><span ><strong>Constraints:</strong></span></p>\n<ul>\n<li><span >1&nbsp;<span style=\"color: #1e2229; font-family: Nunito; font-size: 17px; background-color: #ffffff;\">&le;</span>&nbsp;arr.size()&nbsp;<span style=\"color: #1e2229; font-family: Nunito; font-size: 17px; background-color: #ffffff;\">&le;</span>&nbsp;10<sup>5</sup></span></li>\n<li><span >0&nbsp;<span style=\"color: #1e2229; font-family: Nunito; font-size: 17px; background-color: #ffffff;\">&le; </span>arr[i] <span style=\"color: #1e2229; font-family: Nunito; font-size: 17px; background-color: #ffffff;\">&le;</span>10<sup>5</sup></span></li>\n<li><span >0&nbsp;<span style=\"color: #1e2229; font-family: Nunito; font-size: 17px; background-color: #ffffff;\">&le;</span> k&nbsp;<span style=\"color: #1e2229; font-family: Nunito; font-size: 17px; background-color: #ffffff;\">&le;</span>&nbsp;10<sup>5</sup></span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]` and a target number `k`, determine the total number of subarrays within `arr[]` whose elements, when XORed together, equal `k`.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^5",
                    "0 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [4, 2, 2, 6, 4], k = 6",
                        "output": "4",
                        "explanation": "The subarrays with an XOR sum of 6 are: [4, 2], [4, 2, 2, 6, 4], [2, 2, 6], and [6]."
                    },
                    {
                        "input": "arr[] = [5, 6, 7, 8, 9], k = 5",
                        "output": "2",
                        "explanation": "The subarrays with an XOR sum of 5 are: [5] and [5, 6, 7, 8, 9]."
                    },
                    {
                        "input": "arr[] = [1, 1, 1, 1], k = 0",
                        "output": "4",
                        "explanation": "The subarrays with an XOR sum of 0 are: [1, 1], [1, 1], [1, 1] and [1, 1, 1, 1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to create a map and then take xor of elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Map",
                "slug": "map"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    long subarrayXor(vector<int> &arr, int k) {\n        int res = 0;\n\n        // Create hash map that stores number of prefix arrays\n        // corresponding to a XOR value\n        unordered_map<int, int> mp;\n\n        int prefXOR = 0;\n\n        for (int val : arr) {\n\n            // Find XOR of current prefix\n            prefXOR ^= val;\n\n            // If prefXOR ^ k exist in mp then there is a subarray\n            // ending at i with XOR equal to k\n            res = res + mp[prefXOR ^ k];\n\n            // If this prefix subarray has XOR equal to k\n            if (prefXOR == k)\n                res++;\n\n            // Add the XOR of this subarray to the map\n            mp[prefXOR]++;\n        }\n\n        // Return total count of subarrays having XOR of\n        // elements as given value k\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public long subarrayXor(int arr[], int k) {\n        int res = 0;\n\n        // Create map that stores number of prefix arrays\n        // corresponding to a XOR value\n        HashMap<Integer, Integer> mp = new HashMap<>();\n\n        int prefXOR = 0;\n\n        for (int val : arr) {\n\n            // Find XOR of current prefix\n            prefXOR ^= val;\n\n            // If prefXOR ^ k exists in mp then there is a subarray\n            // ending at i with XOR equal to k\n            res += mp.getOrDefault(prefXOR ^ k, 0);\n\n            // If this prefix subarray has XOR equal to k\n            if (prefXOR == k) res++;\n\n            // Add the XOR of this subarray to the map\n            mp.put(prefXOR, mp.getOrDefault(prefXOR, 0) + 1);\n        }\n\n        // Return total count of subarrays having XOR of\n        // elements as given value k\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def subarrayXor(self, arr, m):\n        res = 0\n\n        # Create map that stores number of prefix arrays\n        # corresponding to a XOR value\n        mp = {}\n\n        prefXOR = 0\n\n        for val in arr:\n            # Find XOR of current prefix\n            prefXOR ^= val\n\n            # If prefXOR ^ k exists in mp then there is a subarray\n            # ending at i with XOR equal to k\n            res += mp.get(prefXOR ^ k, 0)\n\n            # If this prefix subarray has XOR equal to k\n            if prefXOR == k:\n                res += 1\n\n            # Add the XOR of this subarray to the map\n            mp[prefXOR] = mp.get(prefXOR, 0) + 1\n\n        # Return total count of subarrays having XOR of\n        # elements as given value k\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    subarrayXor(arr, k) {\n        let res = 0;\n\n        // Create map that stores number of prefix arrays\n        // corresponding to a XOR value\n        const mp = new Map();\n\n        let prefXOR = 0;\n\n        // Calculate the answer\n        for (const val of arr) {\n            // Find XOR of current prefix\n            prefXOR ^= val;\n\n            // If prefXOR ^ k exists in mp then there is a subarray\n            // ending at i with XOR equal to k\n            res += mp.get(prefXOR ^ k) || 0;\n\n            // If this prefix subarray has XOR equal to k\n            if (prefXOR === k) res++;\n\n            // Add the XOR of this subarray to the map\n            mp.set(prefXOR, (mp.get(prefXOR) || 0) + 1);\n        }\n\n        // Return total count of subarrays having XOR of\n        // elements as given value k\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}