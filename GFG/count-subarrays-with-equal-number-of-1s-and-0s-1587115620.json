{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701293,
            "title": "Subarrays with equal 1s and 0s",
            "titleSlug": "count-subarrays-with-equal-number-of-1s-and-0s-1587115620",
            "content": "<p><span style=\"font-size:18px\">Given an array containing 0s and 1s. Find the number of&nbsp;subarrays having equal number of 0s and 1s. </span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">n = 7\nA[] = {1,0,0,1,0,1,1}\n<strong>Output: </strong>8<strong>\nExplanation: </strong></span><span style=\"font-family:arial,helvetica,sans-serif\"><span style=\"font-size:18px\">The index range for the 8 \nsub-arrays are: (</span></span><span style=\"font-family:arial,helvetica,sans-serif\"><span style=\"font-size:18px\">0, 1), (2, 3), (0, 3), (3, 4), \n(4, 5) ,</span></span><span style=\"font-family:arial,helvetica,sans-serif\"><span style=\"font-size:18px\">(2, 5), (0, 5), (1, 6)</span></span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">n = 5\nA[] = {1,1,1,1,0}\n<strong>Output: </strong>1<strong>\nExplanation: </strong></span><span style=\"font-family:arial,helvetica,sans-serif\"><span style=\"font-size:18px\">The index range for the \nsubarray is (3,4).</span></span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>countSubarrWithEqualZeroAndOne()</strong>&nbsp;which takes the array arr[] and the size of the array as inputs and returns the number of subarrays with equal number of 0s and 1s.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(n).<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(n).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= n&nbsp;&lt;= 10<sup>6</sup><br />\n0 &lt;= A[i] &lt;= 1</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array containing 0s and 1s, find the number of subarrays that have an equal number of 0s and 1s.",
                "constraints": [
                    "1 <= n <= 10^6",
                    "0 <= A[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "n = 7\nA[] = {1,0,0,1,0,1,1}",
                        "output": "8",
                        "explanation": "The subarrays with an equal number of 0s and 1s are: (0, 1), (2, 3), (0, 3), (3, 4), (4, 5), (2, 5), (0, 5), (1, 6)."
                    },
                    {
                        "input": "n = 5\nA[] = {1,1,1,1,0}",
                        "output": "1",
                        "explanation": "The subarray with an equal number of 0s and 1s is: (3,4)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "",
            ""
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution{\n  public:\n    //Function to count subarrays with 1s and 0s.\n    long long int countSubarrWithEqualZeroAndOne(int arr[], int n)\n    {\n        //using a map to store frequency of values obtained for prefix sum.\n    \tunordered_map<int, int> um;\n    \tint curr_sum = 0;\n    \t\n    \t//iterating over the array.\n    \tfor (int i = 0; i < n; i++) {\n    \t    \n    \t    //calculating prefix sum by considering 0 as -1 and adding 1 if \n    \t    //value of arr[i] is 1 or adding -1 if it is 0.\n    \t\tcurr_sum += (arr[i] == 0) ? -1 : arr[i];\n    \t\t\n    \t\t//updating the value in map.\n    \t\tum[curr_sum]++;\n    \t}\n    \tlong long int count = 0;\n    \t\n    \t//iterating over the map.\n    \tfor (auto itr = um.begin(); itr != um.end(); itr++){\n    \t    \n    \t    //if value of any element in map is more than 1, then we \n    \t    //update the count of subarrays.\n    \t    //count=(value*(value-1))/2 where value is value of key in map.\n    \t\tif (itr->second > 1)\n    \t\t\tcount += ((itr->second * (itr->second - 1)) / 2);\n    \t}\n    \t\n    \t//adding frequency of sum 0 in the map to the final result.\n    \tif(um.find(0) != um.end())\n    \t\tcount += um[0];\n    \t\t\n    \t//returning the count of subarrays. \n    \treturn count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    //Function to count subarrays with 1s and 0s.\n    static int countSubarrWithEqualZeroAndOne(int arr[], int n)\n    {\n        //using a map to store frequency of values obtained for prefix sum.\n        Map<Integer,Integer> um = new HashMap<>(); \n        \n        int curr_sum = 0; \n      \n        //iterating over the array.\n        for (int i = 0; i < n; i++) { \n            \n            //calculating prefix sum by considering 0 as -1 and adding 1 if \n    \t    //value of arr[i] is 1 or adding -1 if it is 0.\n            curr_sum += (arr[i] == 0) ? -1 : arr[i]; \n            \n            //updating the value in map.\n            um.put(curr_sum, um.get(curr_sum)==null?1:um.get(curr_sum)+1); \n        } \n      \n        int count = 0; \n          \n        //iterating over the map.\n        for (Map.Entry<Integer,Integer> itr : um.entrySet()) \n        { \n            //if value of any element in map is more than 1, then we \n    \t    //update the count of subarrays.\n    \t    //count=(value*(value-1))/2 where value is value of key in map.\n            if (itr.getValue() > 1) \n                count += ((itr.getValue()* (itr.getValue()- 1)) / 2); \n        } \n        \n        //adding frequency of sum 0 in the map to the final result.\n        if (um.containsKey(0)) \n            count += um.get(0); \n      \n        //returning the count of subarrays.\n        return count; \n    }\n}\n\n\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n   \n    #Function to count subarrays with 1s and 0s.\n    def countSubarrWithEqualZeroAndOne(self,arr, n):\n        \n        #using a map to store frequency of values obtained for prefix sum.\n        mp={}\n        curr_sum=0\n        count=0\n        \n        #iterating over the array.\n        for i in range(n):\n            \n            #calculating prefix sum by considering 0 as -1 and adding 1 if \n    \t    #value of arr[i] is 1 or adding -1 if it is 0.\n            if arr[i]==0:\n                curr_sum+=-1\n            else:\n                curr_sum+=arr[i]\n                \n            #updating the value in map.\n            mp[curr_sum]=mp.get(curr_sum,0)+1\n        \n        #iterating over the map.    \n        for key,value in mp.items():\n            \n            #if value of any element in map is more than 1, then we \n    \t    #update the count of subarrays.\n    \t    #count=(value*(value-1))/2 where value is value of key in map.\n            if value>1:\n                count+=(value*(value-1))//2\n        \n        #adding frequency of sum 0 in the map to the final result.\n        if 0 in mp.keys():\n            count+=mp[0]\n            \n        #returning the count of subarrays.\n        return count\n    \n    \n    ",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {BigInt}\n*/\n\nclass Solution {\n    //Function to count subarrays with 1s and 0s.\n    countSubarrWithEqualZeroAndOne(arr, n){\n        \n        //using a map to store frequency of values obtained for prefix sum.\n        let um = new Map();\n    \tlet curr_sum = 0;\n    \t\n    \t//iterating over the array.\n    \tfor (let i = 0; i < n; i++) {\n    \t    \n    \t    //calculating prefix sum by considering 0 as -1 and adding 1 if \n    \t    //value of arr[i] is 1 or adding -1 if it is 0.\n    \t\tcurr_sum += (arr[i] == 0) ? -1 : arr[i];\n    \t\t\n    \t\t//updating the value in map.\n    \t\tif(!um.has(curr_sum))\n    \t\t    um.set(curr_sum,1);\n    \t\telse\n    \t\t    um.set(curr_sum,um.get(curr_sum)+1);\n    \t}\n    \tlet count = BigInt(0);\n    \t\n    \t//iterating over the map.\n    \tfor (const [key,value] of um.entries()){\n    \t    \n    \t    //if value of any element in map is more than 1, then we \n    \t    //update the count of subarrays.\n    \t    //count=(value*(value-1))/2 where value is value of key in map.\n    \t\tif (value > 1)\n    \t\t\tcount += (BigInt(value)*(BigInt(value - 1))) / 2n;\n    \t}\n    \t\n    \t//adding frequency of sum 0 in the map to the final result.\n    \tif(um.has(0))\n    \t\tcount += BigInt(um.get(0));\n    \t\t\n    \t//returning the count of subarrays.\n    \treturn count;\n    }\n}\n",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    //Function to count subarrays with 1s and 0s.\n    public long countSubarrWithEqualZeroAndOne(int[] arr, int n)\n    {\n        //using a dictionary to store frequency of values obtained for prefix sum.\n        Dictionary<int, int> um = new Dictionary<int, int>();\n        int curr_sum = 0;\n\n        //iterating over the array.\n        for (int i = 0; i < n; i++)\n        {\n\n            //calculating prefix sum by considering 0 as -1 and adding 1 if \n            //value of arr[i] is 1 or adding -1 if it is 0.\n            curr_sum += (arr[i] == 0) ? -1 : arr[i];\n\n            //updating the value in dictionary.\n            if (um.ContainsKey(curr_sum))\n            {\n                um[curr_sum]++;\n            }\n            else\n            {\n                um[curr_sum] = 1;\n            }\n        }\n        \n        long count = 0;\n\n        //iterating over the dictionary.\n        foreach (var pair in um)\n        {\n            //if value of any element in dictionary is more than 1, then we \n            //update the count of subarrays.\n            //count=(value*(value-1))/2 where value is value of key in dictionary.\n            if (pair.Value > 1)\n                count += ((pair.Value * (pair.Value - 1)) / 2);\n        }\n\n        //adding frequency of sum 0 in the dictionary to the final result.\n        if (um.ContainsKey(0))\n            count += um[0];\n\n        //returning the count of subarrays. \n        return count;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}