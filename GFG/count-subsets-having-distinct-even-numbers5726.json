{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703269,
            "title": "Count subsets having distinct even numbers",
            "titleSlug": "count-subsets-having-distinct-even-numbers5726",
            "content": "<p><span >Given an array <strong>arr </strong>of integers, you need to count all unique subsets that contain only even numbers from the array. Two subsets are considered identical if they contain the same set of elements, regardless of their order.</span></p>\n<p><span ><strong>Note:</strong> Only distinct even numbers should be considered when generating subsets. For example, if an even number appears multiple times, it should be counted only once in the subset generation.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [4, 2, 1, 9, 2, 6, 5, 3]\n<strong>Output: </strong>7\n<strong>Explanation: </strong>The subsets are: [4], [2], [6], [4, 2], [2, 6], [4, 6], [4, 2, 6]</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [10, 3, 4, 2, 4, 20, 10, 6, 8, 14, 2, 6, 9]\n<strong>Output: </strong>127<br /><strong>Explanation:</strong> The distinct even numbers are {2, 4, 6, 8, 10, 14, 20}. The number of unique subsets that can be formed from these numbers is 127.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1&lt;= arr.size() &lt;=10<sup>6</sup><br />1&lt;=arr[i]&lt;=10<sup>4</sup><br />It is Guaranteed that answers will fit in <strong>64-bits</strong>.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, count the number of unique subsets containing only even numbers. A subset is considered unique if it contains a distinct set of elements, irrespective of their order. Even numbers appearing multiple times in the input array should be considered only once when forming subsets.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^4",
                    "Answers will fit in 64-bits."
                ],
                "testcases": [
                    {
                        "input": "[4, 2, 1, 9, 2, 6, 5, 3]",
                        "output": "7",
                        "explanation": "The unique even numbers in the array are {4, 2, 6}. The possible subsets are: [4], [2], [6], [4, 2], [2, 6], [4, 6], [4, 2, 6]. Therefore, the count is 7."
                    },
                    {
                        "input": "[10, 3, 4, 2, 4, 20, 10, 6, 8, 14, 2, 6, 9]",
                        "output": "127",
                        "explanation": "The distinct even numbers are {2, 4, 6, 8, 10, 14, 20}. The number of unique subsets that can be formed from these numbers is 2^7 - 1 = 127 (excluding the empty set)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a set to collect distinct even numbers from the array. The number of unique subsets can be calculated using 2^n - 1, where n is the count of distinct even numbers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "subset",
                "slug": "subset"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to count the number of subsets with distinct even numbers\nclass Solution {\n  public:\n    long long countSubsets(vector<int>& arr) {\n        set<int> st; // Create a set to store distinct even numbers\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr[i] % 2 == 0) {\n                st.insert(arr[i]); // Add even numbers to the set\n            }\n        }\n        return ((1LL << st.size()) -\n                1); // Calculate the number of subsets using bitwise operations\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n// Function to count the number of subsets with distinct even numbers\nclass Solution {\n    public long countSubsets(int[] arr) {\n        Set<Integer> st =\n            new HashSet<>(); // Create a set to store distinct even numbers\n        for (int num : arr) {\n            if (num % 2 == 0) {\n                st.add(num); // Add even numbers to the set\n            }\n        }\n        // Calculate the number of subsets using bitwise operations\n        return (1L << st.size()) - 1;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countSubsets(self, arr):\n        st = set()  # Create a set to store distinct even numbers\n        for num in arr:\n            if num % 2 == 0:\n                st.add(num)  # Add even numbers to the set\n        # Calculate the number of subsets using bitwise operations\n        return (1 << len(st)) - 1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Function to count the number of subsets with distinct even numbers\nclass Solution {\n    countSubsets(arr) {\n        const st = new Set(); // Create a set to store distinct even numbers\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] % 2 === 0) {\n                st.add(arr[i]); // Add even numbers to the set\n            }\n        }\n        // Calculate the number of subsets using bitwise operations\n        return (1n << BigInt(st.size)) - 1n; // Use BigInt to handle large numbers\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}