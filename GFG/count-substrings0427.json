{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703061,
            "title": "Count Substrings",
            "titleSlug": "count-substrings0427",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary string<strong> S.</strong> The task is to count the number of substrings that starts and end with 1.<br />Note: The starting and the ending 1s should be different.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS = \"10101\"\n<strong>Output:</strong> 3\n<strong>Explanation</strong>: The 3 substrings are \"101\",\n\"10101\" and \"101\".\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\">&acirc;&euro;&lsaquo;<strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nS = \"100\"\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: No substring that starts and\nends with 1.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>countSubstr()&nbsp;</strong>which takes the string <strong>S</strong> as input and <strong>returns</strong> the count of the substrings that start and end with 1.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |S| &lt;= 1000</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string S, determine the number of substrings that begin and end with '1'.  The substring must have distinct starting and ending '1's.",
                "constraints": [
                    "1 <= |S| <= 1000"
                ],
                "testcases": [
                    {
                        "input": "10101",
                        "output": "3",
                        "explanation": "The substrings that start and end with '1' are '101' (appears twice) and '10101'. Therefore, the count is 3."
                    },
                    {
                        "input": "100",
                        "output": "0",
                        "explanation": "There are no substrings that both start and end with '1'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Any 2 ones in the string will form the required substring. Hence, count the number of ones first and then calculate the required answer from that.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\t\n\t// Function to count the number of occurrences of '1' in the string\n\tint countSubstr (string s)\n\t{\n\t    int cnt = 0;\n\t    // iterating over each character in the string\n\t    for (int i = 0; i < s.length (); ++i)\n\t    {\n\t        // if character is '1', increment count\n\t        if (s[i] == '1')\n\t            cnt++;\n\t    }\n\n\t    // if the count is less than or equal to 1, return 0\n\t    if (cnt <= 1)\n\t        return 0;\n\t        \n\t    // return the number of possible substrings with '1' multiplied by (cnt-1)\n\t    return ((cnt) * (cnt - 1)) / 2;\n\t}\n\t\n\t// Contributed By: Pranay Bansal\n\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    //countSubstr function to count the number of substrings in a string\n    int countSubstr (String s)\n    {\n        int cnt = 0; //initialize a counter variable to keep track of the number of occurrences of '1' in the string\n        for (int i = 0; i < s.length (); ++i) //iterate through each character in the string\n        {\n            if (s.charAt (i) == '1') //if the character is '1'\n                cnt++; //increment the counter\n        }\n    \n        if (cnt <= 1) //if the counter is less than or equal to 1 (only one or no occurrences of '1' in the string)\n            return 0; //return 0\n        \n        //calculate the number of substrings using the formula\n        return ((cnt) * (cnt - 1)) / 2;\n    }\n}\n\n// Contributed By: Pranay Bansal",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    #Function to count the number of binary substrings.\n    def countSubstr(self, s):\n        cnt = 0\n\n        #iterating over each character in the string.\n        for i in s:\n            #checking if the character is '1'.\n            if i == '1':\n                #if yes, incrementing the count.\n                cnt = cnt + 1\n\n        #returning the count of binary substrings.\n        return (cnt * (cnt - 1)) // 2\n        # Contributed By: Pranay Bansal\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution{\n    countSubstr(s){\n        let cnt = 0;\n        for (let i = 0; i < s.length; i++){\n            if (s[i] == '1'){\n                cnt++;\n            }\n        }\n        if (cnt <= 1){\n            return 0;\n        }\n        return ((cnt) * (cnt - 1)) / 2;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}