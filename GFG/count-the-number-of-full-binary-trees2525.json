{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702855,
            "title": "Count Full Binary Trees",
            "titleSlug": "count-the-number-of-full-binary-trees2525",
            "content": "<div><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\">Given an array <strong>arr[]</strong> of <strong>n</strong> integers, where each integer is greater than 1. The task is to find the number of <a href=\"http://quiz.geeksforgeeks.org/binary-tree-set-3-types-of-binary-tree/\">Full binary tree</a> from the given integers, such that each non-leaf node value is the product of its children value.<br /><br /><strong>Note:</strong> Each integer can be used multiple times in a full binary tree. The answer can be large, return&nbsp; answer modulo 1000000007<br /><br /><strong>Example 1:</strong></span></span></div>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\"><strong>Input:</strong>\nn = 4\narr[] = {2, 3, 4, 6}\n<strong>Output:\n</strong>7\n<strong>Explanation:</strong>\nThere are 7 full binary tree with\nthe given product property.\nFour trees with single nodes\n2  3  4  6\nThree trees with three nodes\n    4   \n   / \\\n  2   2 ,\n   6    \n  / \\\n 2   3 ,\n   6\n  / \\\n 3   2</span></span></pre>\n<p>&nbsp;</p>\n<div><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\"><strong>Example 2:</strong></span></span></div>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\">Input: \nn = 3\narr[] = {2, 4, 5} \n<strong>Output: </strong>4\n<strong>Explanation:</strong> There are 4 full binary tree\nwith the given product property. \nThree trees with single nodes 2 4 5\nOne tree with three nodes\n   4\n  / \\\n 2  2</span></span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>numoffbt()</strong>&nbsp;which takes the array <strong>arr[]</strong>and its size <strong>n</strong><strong> </strong>as inputs and returns the number of Full binary tree.<br /><br /><strong>Expected Time Complexity:</strong> O(n. Log(n))<br /><strong>Expected Auxiliary Space:</strong> O(n)<br /><br /><strong>Constraints:</strong><br />1 &le; n&nbsp;&le; 10<sup>5</sup><br />2 &le; arr[i] &le; 10<sup>5</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We find maximum value in given array and create an array to store presence of elements in this array. The idea is, for all multiples of each integer less than the maximum value of the array, try to make full binary tree if the multiple is present in the array.<br />\nObserve that for any full binary tree with given property, the smaller values will always be at the last level. So, try to find the number of such full binary tree from the minimum value of the array to maximum value of the array.</span></p>\n\n<p><span style=\"font-size:18px\">Algorithm to solve the problem:<br />\n1. Initialize possible number of such full binary tree for each element equal to 1. Since single node also contribute to the answer.<br />\n2. For each element of the array, arr[i], from minimum value to maximum value of array.<br />\n&hellip;&hellip;a) For each multiple of arr[i], find if multiple is present or not.<br />\n&hellip;&hellip;b) If yes, then the number of such possible full binary tree for multiple of arr[i], say m, is equal to the product of the number of such possible full binary tree of arr[i] and number of such possible full binary tree of arr[i]/m.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\npublic:\r\n    long long int numoffbt(long long int arr[], int n){\r\n        // Finding the minimum and maximum values in\r\n        // given array.\r\n        long long int maxvalue = INT_MIN, minvalue = INT_MAX;\r\n        for (int i = 0; i < n; i++){\r\n            maxvalue = max(maxvalue, arr[i]);\r\n            minvalue = min(minvalue, arr[i]);\r\n        }\r\n     \r\n        long long int mark[maxvalue + 2]={0};\r\n        long long int value[maxvalue + 2]={0};\r\n     \r\n        // Marking the presence of each array element\r\n        // and initialising the number of possible\r\n        // full binary tree for each integer equal\r\n        // to 1 because single node will also\r\n        // contribute as a full binary tree.\r\n        for (int i = 0; i < n; i++){\r\n            mark[arr[i]] = value[arr[i]] = 1;\r\n        }\r\n     \r\n        // From minimum value to maximum value of array\r\n        // finding the number of all possible Full\r\n        // Binary Trees.\r\n        long long int ans = 0, mod=1000000007;\r\n        for (long long int i = minvalue; i <= maxvalue; i++)\r\n        {\r\n            // Find if value present in the array\r\n            if (mark[i])\r\n            {\r\n                // For each multiple of i, less than\r\n                // equal to maximum value of array\r\n                for (int j = i + i; j <= maxvalue && j/i <= i; j += i)\r\n                {\r\n                    // If multiple is not present in the\r\n                    // array then continue.\r\n                    if (!mark[j])\r\n                        continue;\r\n     \r\n                    // Finding the number of possible Full\r\n                    // binary trees for multiple j by\r\n                    // multiplying number of possible Full\r\n                    // binary tree from the number i and\r\n                    // number of possible Full binary tree\r\n                    // from i/j.\r\n                    value[j] = (value[j] + (value[i] * value[j/i]))%mod;\r\n     \r\n                    // Condition for possiblity when left\r\n                    // chid became right child and vice versa.\r\n                    if (i != j/i)\r\n                        value[j] = (value[j] + (value[i] * value[j/i]))%mod;\r\n                }\r\n            }\r\n     \r\n            ans = (ans+value[i])%mod;\r\n        }\r\n     \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int numoffbt(int arr[], int n) {\r\n        // Finding the maximum and minimum values in the given array\r\n        int maxvalue=Integer.MIN_VALUE;\r\n        int minvalue=Integer.MAX_VALUE;\r\n        for(int i=0;i<n;i++){\r\n            maxvalue=Math.max(maxvalue,arr[i]);\r\n            minvalue=Math.min(minvalue,arr[i]);\r\n        }\r\n        \r\n        // Creating arrays to mark and store values\r\n        int mark[]=new int[maxvalue+2];\r\n        int value[]=new int[maxvalue+2];\r\n        \r\n        // Marking and storing values from the input array\r\n        for(int i=0;i<n;i++){\r\n            mark[arr[i]]=1;\r\n            value[arr[i]]=1;\r\n        }\r\n        \r\n        // Calculating the number of offbeat pairs\r\n        int ans=0;\r\n        int mod=1000000007;\r\n        for(int i=minvalue;i<=maxvalue;i++){\r\n            // Checking if the current number is marked\r\n            if(mark[i]!=0){\r\n                // Calculating the offbeat pairs for multiples of the current number\r\n                for(int j=i+i;j<=maxvalue && j/i<=i;j+=i){\r\n                    if(mark[j]!=0){\r\n                        value[j]=(value[j]+(value[i]*value[j/i])%mod)%mod;\r\n                        if(i!=j/i){\r\n                            value[j]=(value[j]+(value[i]*value[j/i])%mod)%mod;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Calculating the total number of offbeat pairs\r\n        for(int i:value){\r\n            ans=(ans+i)%mod;\r\n        }\r\n        \r\n        // Returning the final result\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def numoffbt(self, arr, n):\n        maxvalue = -float(\"inf\")  # initialize maxvalue as negative infinity\n        minvalue = float(\"inf\")  # initialize minvalue as infinity\n\n        # find the maximum and minimum values in the array\n        for i in range(n):\n            maxvalue = max(maxvalue, arr[i])  # update maxvalue if arr[i] is greater\n            minvalue = min(minvalue, arr[i])  # update minvalue if arr[i] is smaller\n\n        mark = [0] * (maxvalue + 2)  # create a list with size maxvalue+2, initialize all elements as 0\n        value = [0] * (maxvalue + 2)  # create a list with size maxvalue+2, initialize all elements as 0\n\n        # mark the presence of each element in the array\n        for i in range(n):\n            mark[arr[i]] = 1\n            value[arr[i]] = 1\n\n        ans = 0  # initialize ans as 0\n        mod = 10**9 + 7  # set mod as 10^9+7\n\n        # iterate from minvalue to maxvalue\n        for i in range(minvalue, maxvalue + 1):\n            if mark[i]:  # if the element is present in the array\n\n                j = i + i  # set j as double of i\n\n                # perform calculations until j is less than or equal to maxvalue\n                # and (j/i) is less than or equal to i\n                while j <= maxvalue and (j // i) <= i:\n\n                    if not mark[j]:  # if the element is not present in the array, continue\n                        j += i\n                        continue\n\n                    # update value[j] by adding the product of value[i] and value[j//i]\n                    value[j] = (value[j] + (value[i] * value[j // i])) % mod\n\n                    if i != j // i:  # if i and j//i are not equal, update value[j] again\n                        value[j] = (value[j] + (value[i] * value[j // i])) % mod\n\n                    j += i  # increment j by i\n\n            ans = (ans + value[i]) % mod  # update ans by adding value[i] mod mod\n\n        return ans  # return the final result",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    //Complete this function\n    //Function to return the number of all possible unique BST.\n    public long numoffbt(long[] arr, int n)\n    {\n        // Finding the minimum and maximum values in\n        // given array.\n        long maxvalue = long.MinValue, minvalue = long.MaxValue;\n        for (int i = 0; i < n; i++)\n        {\n            maxvalue = Math.Max(maxvalue, arr[i]);\n            minvalue = Math.Min(minvalue, arr[i]);\n        }\n\n        long[] mark = new long[maxvalue + 2];\n        long[] value = new long[maxvalue + 2];\n\n        // Marking the presence of each array element\n        // and initializing the number of possible\n        // full binary trees for each integer equal\n        // to 1 because single node will also\n        // contribute as a full binary tree.\n        for (int i = 0; i < n; i++)\n        {\n            mark[(int)arr[i]] = value[(int)arr[i]] = 1;\n        }\n\n        // From minimum value to maximum value of array\n        // finding the number of all possible Full\n        // Binary Trees.\n        long ans = 0, mod = 1000000007;\n        for (long i = minvalue; i <= maxvalue; i++)\n        {\n            // Find if value present in the array\n            if (mark[i] != 0)\n            {\n                // For each multiple of i, less than\n                // equal to maximum value of array\n                for (long j = i + i; j <= maxvalue && j / i <= i; j += i)\n                {\n                    // If multiple is not present in the\n                    // array then continue.\n                    if (mark[j] == 0)\n                        continue;\n\n                    // Finding the number of possible Full\n                    // binary trees for multiple j by\n                    // multiplying the number of possible Full\n                    // binary trees from the number i and\n                    // the number of possible Full binary trees\n                    // from i/j.\n                    value[j] = (value[j] + (value[i] * value[j / i])) % mod;\n\n                    // Condition for possibility when left\n                    // child became right child and vice versa.\n                    if (i != j / i)\n                        value[j] = (value[j] + (value[i] * value[j / i])) % mod;\n                }\n            }\n\n            ans = (ans + value[i]) % mod;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number[]} arr\r\n * @param {number} n\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution\r\n{\r\n    //Function to count the number of full binary trees.\r\n    numoffbt(arr, n)\r\n    {\r\n        let maxvalue = -Infinity;  // initialize maxvalue as negative infinity\r\n        let minvalue = Infinity;  // initialize minvalue as infinity\r\n\r\n        // find the maximum and minimum values in the array\r\n        for (let i = 0; i < n; i++) {\r\n            maxvalue = Math.max(maxvalue, arr[i]);  // update maxvalue if arr[i] is greater\r\n            minvalue = Math.min(minvalue, arr[i]);  // update minvalue if arr[i] is smaller\r\n        }\r\n\r\n        let mark = new Array(maxvalue + 2).fill(0);  // create a list with size maxvalue+2, initialize all elements as 0\r\n        let value = new Array(maxvalue + 2).fill(0);  // create a list with size maxvalue+2, initialize all elements as 0\r\n\r\n        // mark the presence of each element in the array\r\n        for (let i = 0; i < n; i++) {\r\n            mark[arr[i]] = 1;\r\n            value[arr[i]] = 1;\r\n        }\r\n\r\n        let ans = 0;  // initialize ans as 0\r\n        let mod = Math.pow(10, 9) + 7;  // set mod as 10^9+7\r\n\r\n        // iterate from minvalue to maxvalue\r\n        for (let i = minvalue; i <= maxvalue; i++) {\r\n            if (mark[i]) {  // if the element is present in the array\r\n\r\n                let j = i + i;  // set j as double of i\r\n\r\n                // perform calculations until j is less than or equal to maxvalue\r\n                // and (j/i) is less than or equal to i\r\n                while (j <= maxvalue && Math.floor(j / i) <= i) {\r\n\r\n   if (!mark[j]) {  // if the element is not present in the array, continue\r\n                        j += i;\r\n                        continue;\r\n                    }\r\n\r\n                    // update value[j] by adding the product of value[i] and value[j//i]\r\n                    value[j] = (value[j] + (value[i] * value[Math.floor(j / i)])) % mod;\r\n\r\n                    if (i !== Math.floor(j / i)) {  // if i and j//i are not equal, update value[j] again\r\n                        value[j] = (value[j] + (value[i] * value[Math.floor(j / i)])) % mod;\r\n                    }\r\n\r\n                    j += i;  // increment j by i\r\n\r\n                }\r\n\r\n            }\r\n\r\n            ans = (ans + value[i]) % mod;  // update ans by adding value[i] mod mod\r\n\r\n        }\r\n\r\n        return ans;  // return the final result\r\n        \r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}