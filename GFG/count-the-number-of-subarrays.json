{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707621,
            "title": "Count the number of subarrays",
            "titleSlug": "count-the-number-of-subarrays",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>A[]</strong> of <strong>N</strong>&nbsp;integers and a range<strong>(L</strong>,&nbsp;<strong>R)</strong>.<strong>&nbsp;</strong>The task is to find the number of subarrays having sum in the range L to R (inclusive).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 3, L = 3, R = 8\nA[] = {1, 4, 6}\n<strong>Output:</strong> \n3\n<strong>Explanation: \n</strong>The subarrays are [1,4], [4] and [6]\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4, L = 4, R = 13\nA[] = {2, 3, 5, 8}\n<strong>Output: \n</strong>6\n<strong>Explanation: \n</strong>The subarrays are [2,3], [2,3,5], \n[3,5],[5], [5,8] and [8]\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Complete the function<strong>&nbsp;countSubarray( )</strong>&nbsp;which takes the integer&nbsp;<strong>N</strong>&nbsp;, the array&nbsp;<strong>A[],</strong>&nbsp;the integer<strong>&nbsp;L</strong>&nbsp;and the integer <strong>R</strong> as input parameters and returns the number of subarays.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N&nbsp;&le;&nbsp;10<sup>6</sup><br />\n1 &le; A[]&nbsp;&le; 10<sup>9</sup><br />\n1 &le; L&nbsp;&le; R&nbsp;&le; 10<sup>15</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `A` of `N` integers and a range `[L, R]`, determine the number of subarrays whose sum falls within the specified range (inclusive).",
                "constraints": [
                    "1 <= N <= 10^6",
                    "1 <= A[i] <= 10^9",
                    "1 <= L <= R <= 10^15"
                ],
                "testcases": [
                    {
                        "input": "N = 3, L = 3, R = 8\nA = [1, 4, 6]",
                        "output": "3",
                        "explanation": "The subarrays with sums in the range [3, 8] are: [1, 4] (sum 5), [4] (sum 4), and [6] (sum 6)."
                    },
                    {
                        "input": "N = 4, L = 4, R = 13\nA = [2, 3, 5, 8]",
                        "output": "6",
                        "explanation": "The subarrays with sums in the range [4, 13] are: [2, 3] (sum 5), [2, 3, 5] (sum 10), [3, 5] (sum 8), [5] (sum 5), [5, 8] (sum 13), and [8] (sum 8)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">First try to count the number of subarrays whose sum is less than X.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to find number of subarrays having\n    // sum less than or equal to x.\n    long long countSub(vector<int> &arr, int n, long long x)\n    {\n        \n        // Starting index of sliding window.\n        int st = 0;\n     \n        // Ending index of sliding window.\n        int end = 0;\n     \n        // Sum of elements currently present\n        // in sliding window.\n        long long sum = 0;\n     \n        // To store required number of subarrays.\n        long long cnt = 0;\n     \n        // Increment ending index of sliding\n        // window one step at a time.\n        while (end < n) {\n     \n            // Update sum of sliding window on\n            // adding a new element.\n            sum += arr[end];\n     \n            // Increment starting index of sliding\n            // window until sum is greater than x.\n            while (st <= end && sum > x) {\n                sum -= arr[st];\n                st++;\n            }\n     \n            // Update count of number of subarrays.\n            cnt += (end - st + 1);\n            end++;\n        }\n     \n        return cnt;\n    }\n    long long countSubarray(int N,vector<int> A,long long L,long long R) {\n        // Number of subarrays having sum less\n        // than or equal to R.\n        long long Rcnt = countSub(A, N, R);\n     \n        // Number of subarrays having sum less\n        // than or equal to L-1.\n        long long Lcnt = countSub(A, N, L - 1);\n        return Rcnt - Lcnt;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to find number of subarrays having\n    // sum less than or equal to x.\n    public long countSub(int arr[], int n, long x)\n    {\n        \n        // Starting index of sliding window.\n        int st = 0;\n     \n        // Ending index of sliding window.\n        int end = 0;\n     \n        // Sum of elements currently present\n        // in sliding window.\n        long sum = 0;\n     \n        // To store required number of subarrays.\n        long cnt = 0;\n     \n        // Increment ending index of sliding\n        // window one step at a time.\n        while (end < n) {\n     \n            // Update sum of sliding window on\n            // adding a new element.\n            sum += (long)arr[end];\n     \n            // Increment starting index of sliding\n            // window until sum is greater than x.\n            while (st <= end && sum > x) {\n                sum -= (long)arr[st];\n                st++;\n            }\n     \n            // Update count of number of subarrays.\n            cnt += (end - st + 1);\n            end++;\n        }\n        return cnt;\n    }\n    public long countSubarray(int N, int A[],long L,long R) {\n        // Number of subarrays having sum less\n        // than or equal to R.\n        long Rcnt = countSub(A, N, R);\n     \n        // Number of subarrays having sum less\n        // than or equal to L-1.\n        long Lcnt = countSub(A, N, L - 1);\n        return Rcnt - Lcnt;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    #  Function to find number of subarrays having\n    #  sum less than or equal to x.\n    def countSub(self, arr, n, x):\n        #  Starting index of sliding window.\n        st = 0\n        #  Ending index of sliding window.\n        end = 0\n        #  Sum of elements currently present\n        #  in sliding window.\n        sum = 0\n        #  To store required number of subarrays.\n        cnt = 0\n        #  Increment ending index of sliding\n        #  window one step at a time.\n        while end < n:\n            #  Update sum of sliding window on\n            #  adding a new element.\n            sum += arr[end]\n            #  Increment starting index of sliding\n            #  window until sum is greater than x.\n            while st <= end and sum > x:\n                sum -= arr[st]\n                st+=1\n            #  Update count of number of subarrays.\n            cnt += (end - st + 1)\n            end+=1\n        return cnt\n    def countSubarray(self, N, A, L, R):\n        #  Number of subarrays having sum less\n        #  than or equal to R.\n        Rcnt = self.countSub(A, N, R)\n        #  Number of subarrays having sum less\n        #  than or equal to L-1.\n        Lcnt = self.countSub(A, N, L - 1)\n        return Rcnt - Lcnt\n",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}