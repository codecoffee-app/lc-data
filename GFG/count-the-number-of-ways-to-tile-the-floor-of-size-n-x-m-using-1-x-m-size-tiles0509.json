{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704694,
            "title": "Count the number of ways to tile the floor of size n x m using 1 x m size tiles",
            "titleSlug": "count-the-number-of-ways-to-tile-the-floor-of-size-n-x-m-using-1-x-m-size-tiles0509",
            "content": "<p><span style=\"font-size: 18px;\">Given a floor of size n x m and tiles of size 1 x m. The problem is to count the number of ways to tile the given floor using 1 x m tiles. A tile can either be placed horizontally or vertically.<br />Both n and m are positive integers and 2 &lt; = m.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1 :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 2, m = 3\n<strong>Output: </strong>1\n</span><strong><span style=\"font-size: 18px;\">Expanation: </span></strong><span style=\"font-size: 18px;\">There is only one way to tile the\ngiven floor.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2 :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4, m = 4\n<strong>Output: </strong>2\n<strong>Explanation: </strong>There is two ways to tile the\ngiven floor.One way is to place 1 x 4 size \nof tile vertically and another one is to \nplace them horizontally.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>countWays()</strong>&nbsp;which takes n and m as input parameter and returns the total ways modulo&nbsp;<strong>10<sup>9</sup>&nbsp;+ 7.</strong></span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(n)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 100000</span><br /><span style=\"font-size: 18px;\">2 &lt;= m &lt;= 100000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a floor of size n x m and tiles of size 1 x m, determine the number of ways to tile the floor using the given tiles. A tile can be placed either horizontally or vertically. Both n and m are positive integers, and m is greater than or equal to 2. Return the total number of ways modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= n <= 100000",
                    "2 <= m <= 100000"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 3",
                        "output": "1",
                        "explanation": "With a 2x3 floor and 1x3 tiles, there is only one way to tile the floor: placing two tiles vertically."
                    },
                    {
                        "input": "n = 4, m = 4",
                        "output": "2",
                        "explanation": "With a 4x4 floor and 1x4 tiles, there are two ways to tile the floor: either place all four tiles vertically or all four tiles horizontally."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of dynamic programming.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution{\n\tpublic:\n\t\tint countWays(int n, int m)\n\t{\n\t    // table to store values\n\t    // of subproblems\n\t    int mod = 1000000007;\n\t    int count[n+1];\n\t    count[0] = 0;\n\t     \n\t    // Fill the table upto value n\n\t    for (int i=1;i<=n;i++)\n\t    {\n\t        // recurrence relation\n\t        if (i > m)\n\t            count[i] = (count[i-1]%mod + count[i-m]%mod)%mod;\n\t         \n\t        // base cases    \n\t        else if (i < m)    \n\t            count[i] = 1;\n\t \n\t        // i = = m    \n\t        else\n\t            count[i] = 2;\n\t    }\n\t     \n\t    // required number of ways\n\t    return count[n]%mod;\n\t}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def countWays(self, n, m):\n        count = []\n        for i in range(n + 2):\n            count.append(0)\n        count[0] = 0\n        for i in range(1, n + 1):\n            # recurrence relation\n            if (i > m):\n                count[i] = count[i - 1] + count[i - m]\n            # base cases\n            elif (i < m or i == 1):\n                count[i] = 1\n            # i = = m\n            else:\n                count[i] = 2\n        # required number of ways\n        return count[n] % (10**9 + 7)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countWays(n, m) {\n        let count = [];\n\n        for (let i = 0; i < n + 2; i++) {\n            count.push(0);\n        }\n        \n        count[0] = 0;\n\n        for (let i = 1; i < n + 1; i++) {\n            if (i > m) {\n                count[i] = (count[i - 1] + count[i - m]) % (Math.pow(10, 9) + 7);\n            }\n            else if (i < m || i === 1) {\n                count[i] = 1;\n            }\n            else {\n                count[i] = 2;\n            }\n        }\n        \n        return count[n];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}