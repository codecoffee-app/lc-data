{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702648,
            "title": "Count the pairs with maximum difference",
            "titleSlug": "count-the-pairs-with-maximum-difference4807",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[] </strong>of integers, the task is to find the number of ways to choose pairs <strong>{arr[i], arr[j]}</strong> such that their absolute difference is&nbsp;maximum.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 2, 1, 1, 3]\n<strong>Output: </strong>4</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nThe maximum difference you can find is 2\nwhich is from 3 - 1 = 2.\nNumber of ways of choosing it:\n1) Choosing the first and third element\n2) Choosing the first and fourth element\n3) Choosing the third and fifth element\n4) Choosing the fourth and fifth element\nHence, the answer is 4.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1,2]\n<strong>Output: </strong>1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(n).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the number of pairs where the absolute difference between the elements of each pair is equal to the maximum absolute difference achievable within the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[3, 2, 1, 1, 3]",
                        "output": "4",
                        "explanation": "The maximum absolute difference in the array is 2 (e.g., |3-1|).  The pairs with this difference are: (3, 1), (3, 1), (3, 1), (3, 1). So there are four ways to choose pairs with an absolute difference of 2."
                    },
                    {
                        "input": "[1, 2]",
                        "output": "1",
                        "explanation": "The maximum absolute difference is |2 - 1| = 1. The only pair is (1, 2), so there is 1 way."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Identify the maximum and minimum elements, then calculate the number of pairs where these values occur.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    long long countPairs(vector<int>& arr) {\n        int n = arr.size();\n\n        // Initialize variables to track maximum and minimum values\n        int mx = -1;  // Initialize maximum as -1\n        int mn = 1e9; // Initialize minimum as 10^9\n\n        // Loop through the array to find the maximum and minimum values\n        for (int i = 0; i < n; i++) {\n            mx = max(mx, arr[i]);\n            mn = min(mn, arr[i]);\n        }\n\n        // Calculate the range between maximum and minimum values\n        int m = mx - mn;\n\n        // Initialize counters for occurrences of maximum and minimum values\n        long long c1 = 0; // Counter for maximum value\n        long long c2 = 0; // Counter for minimum value\n\n        // Loop through the array to count occurrences of maximum and minimum values\n        for (int i = 0; i < n; i++) {\n            // Increment counter for maximum value\n            if (arr[i] == mx)\n                c1 += 1;\n            // Increment counter for minimum value\n            if (arr[i] == mn)\n                c2 += 1;\n        }\n\n        // If the range is 0, it means all elements are the same\n        if (m == 0)\n            return (c1 * (c1 - 1)) / 2;\n        else {\n            // Return the number of pairs where arr[i] == mx and arr[j] == mn\n            return (c1 * c2);\n        }\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\nclass Solution {\n    public static long countPairs(int arr[]) {\n        int n = arr.length;\n\n        // Initialize variables to track maximum and minimum values\n        int mx = -1;       // Initialize maximum as -1\n        int mn = (int)1e9; // Initialize minimum as 10^9\n\n        // Loop through the array to find the maximum and minimum values\n        for (int i = 0; i < n; i++) {\n            mx = Math.max(mx, arr[i]);\n            mn = Math.min(mn, arr[i]);\n        }\n\n        // Calculate the range between maximum and minimum values\n        int m = mx - mn;\n\n        // Initialize counters for occurrences of maximum and minimum values\n        long c1 = 0; // Counter for maximum value\n        long c2 = 0; // Counter for minimum value\n\n        // Loop through the array to count occurrences of maximum and minimum values\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == mx) {\n                c1++; // Increment counter for maximum value\n            }\n            if (arr[i] == mn) {\n                c2++; // Increment counter for minimum value\n            }\n        }\n\n        // If the range is 0, it means all elements are the same\n        if (m == 0) {\n            // Calculate the number of pairs (nC2) when all elements are the same\n            return (c1 * (c1 - 1)) / 2;\n        } else {\n            // Return the number of pairs where arr[i] == mx and arr[j] == mn\n            return (c1 * c2);\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# User function Template for python3\n\n\nclass Solution:\n\n    def countPairs(self, arr):\n        n = len(arr)\n\n        # Initialize variables to track maximum and minimum values\n        mx = -1  # Initialize maximum as -1\n        mn = int(1e9)  # Initialize minimum as 10^9\n\n        # Loop through the array to find the maximum and minimum values\n        for i in range(n):\n            mx = max(mx, arr[i])\n            mn = min(mn, arr[i])\n\n        # Calculate the range between maximum and minimum values\n        m = mx - mn\n\n        # Initialize counters for occurrences of maximum and minimum values\n        c1 = 0  # Counter for maximum value\n        c2 = 0  # Counter for minimum value\n\n        # Loop through the array to count occurrences of maximum and minimum values\n        for i in range(n):\n            if arr[i] == mx:\n                c1 += 1  # Increment counter for maximum value\n            if arr[i] == mn:\n                c2 += 1  # Increment counter for minimum value\n\n        # If the range is 0, it means all elements are the same\n        if m == 0:\n            # Calculate the number of pairs (nC2) when all elements are the same\n            return (c1 * (c1 - 1)) // 2\n        else:\n            # Return the number of pairs where arr[i] == mx and arr[j] == mn\n            return c1 * c2\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to count the number of pairs such that value of one is\n    // less than equal to value of other element.\n    countPairs(arr) {\n        const n = arr.length;\n\n        // Initialize variables to track maximum and minimum values\n        let mx = -1;  // Initialize maximum as -1\n        let mn = 1e9; // Initialize minimum as 10^9\n\n        // Loop through the array to find the maximum and minimum values\n        for (let i = 0; i < n; i++) {\n            mx = Math.max(mx, arr[i]);\n            mn = Math.min(mn, arr[i]);\n        }\n\n        // Calculate the range between maximum and minimum values\n        const m = mx - mn;\n\n        // Initialize counters for occurrences of maximum and minimum values\n        let c1 = 0; // Counter for maximum value\n        let c2 = 0; // Counter for minimum value\n\n        // Loop through the array to count occurrences of maximum and minimum values\n        for (let i = 0; i < n; i++) {\n            if (arr[i] === mx) {\n                c1++; // Increment counter for maximum value\n            }\n            if (arr[i] === mn) {\n                c2++; // Increment counter for minimum value\n            }\n        }\n\n        // If the range is 0, it means all elements are the same\n        if (m === 0) {\n            // Calculate the number of pairs (nC2) when all elements are the same\n            return (c1 * (c1 - 1)) / 2;\n        } else {\n            // Return the number of pairs where arr[i] == mx and arr[j] == mn\n            return c1 * c2;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}