{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705707,
            "title": "Count the paths",
            "titleSlug": "count-the-paths4332",
            "content": "<p><span style=\"font-size: 18px;\">Given a Directed acyclic graph(DAG) with V nodes labeled from 0 to V-1. Given edges, start, and destination, count the number of ways to reach from start to destination. </span><span style=\"font-size: 18px;\">There is a directed Edge from vertex edges[i][0] to the vertex edges[i][1]. Your task is to find the </span><span style=\"font-size: 18px;\">number of ways to reach from start to destination.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>edges = [[0,1],[0,3],[2,0],[2,1],[1,3]], V = 4, start = 2, destination = 3<br /><strong>Output: </strong>3\n<strong>Explanation: </strong>There are three ways to reach at 3 from 2. These are : 2-&gt;1-&gt;3 , 2-&gt;0-&gt;3 and 2-&gt;0-&gt;1-&gt;3.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>edges = [[0,1]], V = 2, start = 0, destination = 1\n<strong>Output: </strong>1\n<strong>Explanation: </strong>There is only one way to reach at 1 from 0 that is : 0-&gt;1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= V &lt;= 15<br />0 &lt;= start, destination, edges[i][0], edges[i][1] &lt;= V-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed acyclic graph (DAG) with V nodes labeled from 0 to V-1, and a list of directed edges, determine the number of distinct paths from a given start node to a destination node. Each edge in the 'edges' list is represented as [u, v], indicating a directed edge from node u to node v.",
                "constraints": [
                    "1 <= V <= 15",
                    "0 <= start, destination, edges[i][0], edges[i][1] <= V-1"
                ],
                "testcases": [
                    {
                        "input": "edges = [[0,1],[0,3],[2,0],[2,1],[1,3]], V = 4, start = 2, destination = 3",
                        "output": "3",
                        "explanation": "There are three distinct paths from node 2 to node 3: 2 -> 1 -> 3, 2 -> 0 -> 3, and 2 -> 0 -> 1 -> 3."
                    },
                    {
                        "input": "edges = [[0,1]], V = 2, start = 0, destination = 1",
                        "output": "1",
                        "explanation": "There is only one path from node 0 to node 1: 0 -> 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use backtracking to calculate all paths from start to destination.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to count the number of possible paths\n    int count_dfs(vector<vector<int>> graph, int u, int d, vector<bool>& vis) {\n        // If we reach the destination node, return 1\n        if (u == d)\n            return 1;\n\n        // Mark the current node as visited\n        vis[u] = true;\n\n        // Initialize the answer variable\n        int ans = 0;\n\n        // Iterate over the adjacent nodes of the current node\n        for (auto v : graph[u]) {\n            // If the node is not visited, recursively call the function\n            if (!vis[v])\n                ans += count_dfs(graph, v, d, vis);\n        }\n\n        // Mark the current node as unvisited before returning the answer\n        vis[u] = false;\n\n        // Return the total number of paths found\n        return ans;\n    }\n\n    // Function to find the number of possible paths\n    int possible_paths(vector<vector<int>>& edges, int n, int start, int destination) {\n        // Create an adjacency list to represent the graph\n        vector<vector<int>> graph(n);\n        for (auto i : edges)\n            graph[i[0]].push_back(i[1]);\n\n        // Initialize a visited array to keep track of visited nodes\n        vector<bool> vis(n, false);\n\n        // Call the helper function to count the number of paths\n        return count_dfs(graph, start, destination, vis);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    int count_dfs(ArrayList<Integer>[] graph, int u, int d, boolean[] vis) {\n        if (u == d) return 1;\n        vis[u] = true;\n        int ans = 0;\n        for (int v : graph[u]) {\n            if (!vis[v]) ans += count_dfs(graph, v, d, vis);\n        }\n        vis[u] = false;\n        return ans;\n    }\n\n    public int possible_paths(int[][] edges, int n, int start, int destination) {\n        ArrayList<Integer>[] graph = new ArrayList[n];\n        for (int i = 0; i < n; i++) graph[i] = new ArrayList<>();\n        for (int i = 0; i < edges.length; i++) {\n            graph[edges[i][0]].add(edges[i][1]);\n        }\n        boolean[] vis = new boolean[n];\n        return count_dfs(graph, start, destination, vis);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to count the number of paths from starting node s to destination node d\n    def count_dfs(self, graph, u, d, vis):\n        # If the current node is the destination, return 1\n        if (u == d):\n            return 1\n        # Mark the current node as visited\n        vis[u] = True\n        ans = 0\n        # Iterate through each adjacent node of the current node\n        for v in graph[u]:\n            # If the adjacent node has not been visited, recursively count the number of paths\n            if (vis[v] == False):\n                ans += self.count_dfs(graph, v, d, vis)\n        # Mark the current node as unvisited\n        vis[u] = False\n        # Return the number of paths from starting node s to destination node d\n        return ans\n\n    # Function to find all possible paths from starting node s to destination node d\n    def possible_paths(self, edges, n, start, destination):\n        # Create adjacency list representation of the graph\n        graph = [[] for i in range(n)]\n        for e in edges:\n            graph[e[0]].append(e[1])\n        # Create a boolean array to keep track of visited nodes\n        vis = [False for i in range(n)]\n        # Call the count_dfs function to count the number of paths\n        return self.count_dfs(graph, start, destination, vis)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    possible_paths(edges, n, start, destination) {\n        const count_dfs =\n            (graph, u, d, vis) => {\n                if (u === d) return 1;\n\n                vis[u] = true;\n                let ans = 0;\n                graph[u].forEach(v => {\n                    if (!vis[v]) ans += count_dfs(graph, v, d, vis);\n                });\n                vis[u] = false;\n                return ans;\n            }\n\n        const graph = new Array(n).fill(0).map(() => []);\n\n        edges.forEach(edge => {\n            const [u, v] = edge;\n            graph[u].push(v);\n        });\n\n        const vis = new Array(n).fill(false);\n\n        return count_dfs(graph, start, destination, vis);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}