{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700816,
            "title": "Count the Specials",
            "titleSlug": "count-the-specials",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> (may contain duplicates) and a positive integer <strong>k,</strong> your task is to count the number of elements whose occurrence is exactly equal to the size of array <strong>arr[]</strong> divided by <strong>k</strong> times.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k = 2, arr[] = [1, 4, 1, 2, 4]\n<strong>Output: </strong>2\n<strong>Explanation:</strong>In the given array, 1 and 4 occurs floor(5/2) = 2 times.So count is 2.<br /></span></pre>\n<pre><span ><strong>Input: </strong>k = 4, arr[] = [1, 1, 7, 1]\n<strong>Output: </strong>1\n<strong>Explanation:</strong>In the given array, only 7 occurs floor(4/4) = 1 times.So count is 1.</span></pre>\n<p><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">Expected Time Complexity:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\"> O(n).&nbsp;<br /></span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">Expected Auxiliary Space:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\"> O(n).</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr<sub>i</sub> &lt;= 10<sup>6</sup><br />1 &lt;= k &lt;= arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Try storing the count of elements, count the number of elements whose count is equal to the required counts, and return.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int countSpecials(int k, vector<int> &arr) {\n        int n = arr.size();\n        int target_count = n / k;\n        unordered_map<int, int> freq;\n\n        // Count frequency of each element\n        for (int num : arr) {\n            freq[num]++;\n        }\n\n        // Count how many elements appear exactly target_count times\n        int special_count = 0;\n        for (auto &entry : freq) {\n            if (entry.second == target_count) {\n                special_count++;\n            }\n        }\n\n        return special_count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int countSpecials(int k, List<Integer> arr) {\n        int n = arr.size();\n        int targetCount = n / k;\n\n        // Count frequency of each element\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : arr) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n\n        // Count how many elements appear exactly targetCount times\n        int specialCount = 0;\n        for (int count : freq.values()) {\n            if (count == targetCount) {\n                specialCount++;\n            }\n        }\n\n        return specialCount;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def countSpecials(self, k, arr):\n        n = len(arr)\n        target_count = n // k\n\n        # Count frequency of each element\n        freq = Counter(arr)\n\n        # Count how many elements appear exactly target_count times\n        special_count = sum(1 for count in freq.values()\n                            if count == target_count)\n\n        return special_count\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countSpecials(k, arr) {\n        const n = arr.length;\n        const targetCount = Math.floor(n / k);\n        const freq = new Map();\n\n        // Count frequency of each element\n        for (const num of arr) {\n            freq.set(num, (freq.get(num) || 0) + 1);\n        }\n\n        // Count how many elements appear exactly targetCount times\n        let specialCount = 0;\n        for (const [key, value] of freq.entries()) {\n            if (value === targetCount) {\n                specialCount++;\n            }\n        }\n\n        return specialCount;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}