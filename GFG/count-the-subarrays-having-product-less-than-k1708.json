{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703804,
            "title": "Subarrays Product Less than K",
            "titleSlug": "count-the-subarrays-having-product-less-than-k1708",
            "content": "<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\">Given an array of positive numbers, the task is to find the number of possible contiguous subarrays having product less than a given number k. </span></span></p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\"><strong>Example 1:</strong></span></span></p>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\"><strong>Input : \n</strong>n = 4, k = 10\na[] = [1, 2, 3, 4]\n<strong>Output : </strong>\n7\n<strong>Explanation:</strong>\nThe contiguous subarrays are {1}, {2}, {3}, {4} \n{1, 2}, {1, 2, 3} and {2, 3}, in all these subarrays<br /></span></span><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\">product of elements is less than 10, count of<br />such subarray is 7.<br />{2,3,4} will not be a valid subarray, because <br />2*3*4=24 which is greater than 10.</span></span></pre>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\"><strong>Example 2:</strong></span></span></p>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\"><strong>Input:\n</strong>n = 7 , k = 100\na[] = [1, 9, 2, 8, 6, 4, 3]\n<strong>Output:</strong>\n16</span></span></pre>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>countSubArrayProductLessThanK()</strong>&nbsp;which takes the array <strong>a[]</strong>, its size <strong>n</strong><strong> </strong>and an integer <strong>k</strong> as inputs and returns the count of required subarrays.</span></span></p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br />1&lt;=n&lt;=10<sup>6</sup></span><span style=\"font-size: 20px;\"><br /><span style=\"font-size: 20px;\">1&lt;=k&lt;=10</span><sup style=\"font-size: 20px;\">15</sup><br /><span style=\"font-size: 20px;\">1&lt;=a[i]&lt;=10</span><sup style=\"font-size: 20px;\">5</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive numbers, find the number of contiguous subarrays having a product less than a given number k.",
                "constraints": [
                    "1 <= n <= 10^6",
                    "1 <= k <= 10^15",
                    "1 <= a[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 4, k = 10\na[] = [1, 2, 3, 4]",
                        "output": "7",
                        "explanation": "The contiguous subarrays with product less than 10 are: {1}, {2}, {3}, {4}, {1, 2}, {1, 2, 3}, and {2, 3}. The product of elements in each of these subarrays is less than 10.  {2,3,4} is not a valid subarray because 2*3*4 = 24, which is greater than 10."
                    },
                    {
                        "input": "n = 7 , k = 100\na[] = [1, 9, 2, 8, 6, 4, 3]",
                        "output": "16",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can think of a <a href=\"https://www.geeksforgeeks.org/window-sliding-technique/\">sliding window technique</a> for a better approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            }
        ],
        "companies": [
            "goldman-sachs",
            "facebook",
            "walmart",
            "yatra.com",
            "amazon",
            "linkedin",
            "microsoft",
            "uber"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    long long countSubArrayProductLessThanK(const vector<int>& arr, int n,\n                                            long long k) {\n        long long p = 1;\n        long long res = 0;\n        for (int start = 0, end = 0; end < n; end++) {\n\n            // Move right bound by 1 step. Update the product.\n            p *= arr[end];\n\n            // Move left bound so guarantee that p is again\n            // less than k.\n            while (start < end && p >= k)\n                p /= arr[start++];\n\n            // If p is less than k, update the counter.\n            // Note that this is working even for (start == end):\n            // it means that the previous window cannot grow\n            // anymore and a single array element is the only\n            // addendum.\n            if (p < k) {\n                int len = end - start + 1;\n                res += len;\n            }\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public long countSubArrayProductLessThanK(long arr[], int n, long k) {\n        long p = 1;\n        long res = 0;\n        for (int start = 0, end = 0; end < n; end++) {\n\n            // Move right bound by 1 step. Update the product.\n            p *= arr[end];\n\n            // Move left bound so guarantee that p is again\n            // less than k.\n            while (start < end && p >= k) p /= arr[start++];\n\n            // If p is less than k, update the counter.\n            // Note that this is working even for (start == end):\n            // it means that the previous window cannot grow\n            // anymore and a single array element is the only\n            // addendum.\n            if (p < k) {\n                int len = end - start + 1;\n                res += len;\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def countSubArrayProductLessThanK(self, arr, n, k):\n        p = 1\n        res = 0\n        start = 0\n\n        for end in range(n):\n            # Move right bound by 1 step. Update the product.\n            p *= arr[end]\n\n            # Move left bound so guarantee that p is again less than k.\n            while start < end and p >= k:\n                p //= arr[start]\n                start += 1\n\n            # If p is less than k, update the counter.\n            # Note that this is working even for (start == end):\n            # it means that the previous window cannot grow\n            # anymore and a single array element is the only\n            # addendum.\n            if p < k:\n                length = end - start + 1\n                res += length\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} a\n * @param {number} n\n * @param {number} k\n * @returns {number}\n */\n\nclass Solution {\n    // Function to count number of subarrays with product less than k.\n    countSubArrayProductLessThanK(arr, n, k) {\n        let p = 1;\n        let res = 0;\n        let start = 0;\n\n        for (let end = 0; end < n; end++) {\n            // Move right bound by 1 step. Update the product.\n            p *= arr[end];\n\n            // Move left bound so guarantee that p is again less than k.\n            while (start < end && p >= k) {\n                p /= arr[start];\n                start += 1;\n            }\n\n            // If p is less than k, update the counter.\n            // Note that this is working even for (start == end):\n            // it means that the previous window cannot grow\n            // anymore and a single array element is the only\n            // addendum.\n            if (p < k) {\n                let length = end - start + 1;\n                res += length;\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}