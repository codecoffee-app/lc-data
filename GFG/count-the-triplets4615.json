{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702837,
            "title": "Count the triplets",
            "titleSlug": "count-the-triplets4615",
            "content": "<div><span >Given an array <strong>arr</strong>. The task is to count all the triplets such that the sum of two elements equals the third element.</span></div>\n<p><span ><strong>Examples:</strong> </span></p>\n<pre><span ><strong>Input:</strong> arr[] = [1, 5, 3, 2]\n<strong>Output:</strong> 2 \n<strong>Explanation</strong>: There are 2 triplets: 1 + 2 = 3 and 3 +2 = 5</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [2, 3, 4]\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: No such triplet exits</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>3</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >1. Sort the given array, then the problem reduces to find the triplet where two numbers giving sum X.</span></p>",
            "<p><span >2. Try a pointer algorithm</span><br /><span >&nbsp; &nbsp; Step 1: Maintain two pointers one starting from 0 and the other one from n-2.</span><br /><span >&nbsp; &nbsp; Step 2: Check if the sum of two such elements is equal to the (n-1)th element of the array. If so, increase the count, increment one pointer ahead by 1, and decrement&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; the other pointer by 1.</span><br /><span >&nbsp;&nbsp;&nbsp; Step 3: If the sum is less, then move the starting pointer ahead only</span><br /><span >&nbsp; &nbsp; Step 4: if the sum is more, then decrement the end pointer by 1 only.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "arcesium"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to count the number of triplets with the given condition.\n    int countTriplet(vector<int>& arr) {\n        int n = arr.size();\n        // Sorting the array in ascending order.\n        sort(arr.begin(), arr.end());\n\n        // Initializing the count of triplets as 0.\n        int ans = 0;\n\n        // Iterating over the array in reverse order.\n        for (int i = n - 1; i >= 0; i--) {\n            // Initializing two pointers, one at the beginning and one at i-1.\n            int j = 0;\n            int k = i - 1;\n\n            // Using two-pointer approach to find the triplets.\n            while (j < k) {\n                // If the given condition is satisfied, increment the count and move the\n                // pointers.\n                if (arr[i] == arr[j] + arr[k]) {\n                    ans++;\n                    j++;\n                    k--;\n                }\n                // If the sum is less than the target, move the left pointer.\n                else if (arr[i] > arr[j] + arr[k])\n                    j++;\n                // If the sum is greater than the target, move the right pointer.\n                else\n                    k--;\n            }\n        }\n        // Returning the count of triplets.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to count the number of triplets with the given condition.\n    int countTriplet(int arr[]) {\n        int n = arr.length;\n        // Sorting the array in ascending order.\n        Arrays.sort(arr);\n\n        // Initializing the count of triplets as 0.\n        int ans = 0;\n\n        // Iterating over the array in reverse order.\n        for (int i = n - 1; i >= 0; i--) {\n            // Initializing two pointers, one at the beginning and one at i-1.\n            int j = 0;\n            int k = i - 1;\n\n            // Using two-pointer approach to find the triplets.\n            while (j < k) {\n                // If the given condition is satisfied, increment the count and move the\n                // pointers.\n                if (arr[i] == arr[j] + arr[k]) {\n                    ans++;\n                    j++;\n                    k--;\n                }\n                // If the sum is less than the target, move the left pointer.\n                else if (arr[i] > arr[j] + arr[k])\n                    j++;\n                // If the sum is greater than the target, move the right pointer.\n                else\n                    k--;\n            }\n        }\n        // Returning the count of triplets.\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countTriplet(self, arr):\n        # Sorting the array in ascending order.\n        n = len(arr)\n        arr.sort()\n\n        # Initializing the count of triplets as 0.\n        ans = 0\n\n        # Iterating over the array in reverse order.\n        for i in range(n - 1, -1, -1):\n\n            # Initializing two pointers, one at the beginning and one at i-1.\n            j = 0\n            k = i - 1\n\n            # Using two-pointer approach to find the triplets.\n            while j < k:\n                # If the given condition is satisfied, increment the count and move the pointers.\n                if arr[i] == arr[j] + arr[k]:\n                    ans += 1\n                    j += 1\n                    k -= 1\n                # If the sum is less than the target, move the left pointer.\n                elif arr[i] > arr[j] + arr[k]:\n                    j += 1\n                # If the sum is greater than the target, move the right pointer.\n                else:\n                    k -= 1\n\n        # Returning the count of triplets.\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n\n    countTriplet(arr) {\n        let n = arr.length;\n        arr.sort((a, b) => a - b); // Sort the array in ascending order.\n        let ans = 0; // Initialize a variable to store the count of triplets.\n\n        for (let i = n - 1; i >= 0; i--) {\n            let j = 0; // Initialize two pointers at the start and end of the array.\n            let k = i - 1;\n            while (j < k) {\n                if (arr[i] == arr[j] + arr[k]) // Check if the current element is equal\n                                               // to the sum of the other two elements.\n                {\n                    ans++; // Increment the count of triplets.\n                    j++;   // Move the left pointer to the right.\n                    k--;   // Move the right pointer to the left.\n                } else if (arr[i] >\n                           arr[j] + arr[k]) // If the current element is greater than\n                                            // the sum of the other two elements.\n                    j++;                    // Move the left pointer to the right.\n                else\n                    k--; // Move the right pointer to the left.\n            }\n        }\n\n        return ans; // Return the count of triplets found.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}