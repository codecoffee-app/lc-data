{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878366,
            "title": "Zeros count",
            "titleSlug": "count-the-zeros2550--141153",
            "content": "<p><span >Given an array a<strong>rr</strong> of only 0's and 1's. The array&nbsp;is<strong> sorted</strong> in such a manner that all the 1's are placed first and then they are&nbsp;followed by all the 0's. Find&nbsp;the<strong> count</strong> of all the 0's.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 0's in the given array.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [0, 0, 0, 0, 0]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>&nbsp;There are 5 0's in the array.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size &lt;= 10<sup>5</sup><br />0 &lt;= arr[i] &lt;= 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr` consisting of only 0s and 1s, where all 1s appear before all 0s, determine the number of 0s present in the array.",
                "constraints": [
                    "1 <= arr.size <= 10^5",
                    "0 <= arr[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0]",
                        "output": "3",
                        "explanation": "The array contains three 0s."
                    },
                    {
                        "input": "[0, 0, 0, 0, 0]",
                        "output": "5",
                        "explanation": "The array contains five 0s."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use binary search to look for the first occurance of 0.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "yahoo"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Function to find the first occurrence of 0 using binary search\nint firstZero(int arr[], int low, int high) {\n    if (high >= low) {\n        int mid = low + (high - low) / 2;\n\n        // Check if mid element is the first 0\n        if ((mid == 0 || arr[mid - 1] == 1) && arr[mid] == 0)\n            return mid;\n\n        // If mid element is 1, search in the right half\n        if (arr[mid] == 1)\n            return firstZero(arr, mid + 1, high);\n\n        // If mid element is 0 but not the first, search in the left half\n        return firstZero(arr, low, mid - 1);\n    }\n\n    return -1; // No 0 found\n}\n\n// Function to count the number of 0s in the array\nint countZeroes(int arr[], int n) {\n    // Find the index of the first 0\n    int first = firstZero(arr, 0, n - 1);\n\n    // If 0 is not present at all, return 0\n    if (first == -1)\n        return 0;\n\n    // Count all elements from the first 0 to the end of the array\n    return n - first;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    int firstZero(int arr[], int low, int high) {\n        if (high >= low) {\n            int mid = low + (high - low) / 2;\n\n            // Check if mid element is first 0\n            if ((mid == 0 || arr[mid - 1] == 1) && arr[mid] == 0)\n                return mid;\n\n            // If mid element is not 0\n            if (arr[mid] == 1)\n                return firstZero(arr, (mid + 1), high);\n\n            // If mid element is 0, but not first 0\n            else\n                return firstZero(arr, low, (mid - 1));\n        }\n        return -1;\n    }\n\n    int countZeroes(int arr[], int n) {\n        // Find index of first zero in given array\n        int first = firstZero(arr, 0, n - 1);\n\n        // If 0 is not present at all, return 0\n        if (first == -1)\n            return 0;\n\n        return (n - first);\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\n// User function Template for Java\n\nclass Solution {\n    int countZeroes(int[] arr) {\n        // code here\n        int n = arr.length;\n        int start = 0;\n        int end = n - 1;\n        int lastIndexOfOne = -1;\n\n        while (start <= end) {\n            int mid = start + (end - start) / 2;\n\n            if (arr[mid] == 1) {\n                lastIndexOfOne = mid;\n                start = mid + 1;\n            } else\n                end = mid - 1;\n        }\n        return n - lastIndexOfOne - 1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\n\nclass Solution:\n\n    def countZeroes(self, arr):\n        n = len(arr)\n        # if the first element is already 0, then all elements are 0, so return n\n        if arr[0] == 0:\n            return n\n\n        l = 0\n        r = n - 1\n\n        # binary search to find the index of the first occurrence of 0 in arr\n        while l <= r:\n            mid = (l + r) // 2\n\n            # if the mid element is 1, move the left pointer to mid + 1\n            if arr[mid] == 1:\n                l = mid + 1\n            # if the mid element is 0, check if the previous element is also 0\n            # if it is, move the right pointer to mid - 1\n            # if it is not, return the number of zeroes in the array which is n minus the index of mid\n            elif arr[mid] == 0:\n                if mid > 0 and arr[mid - 1] == 0:\n                    r = mid - 1\n                else:\n                    return n - mid\n\n        return 0\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to find the first occurrence of 0 using binary search\n    public int FirstZero(List<int> arr, int low, int high) {\n        if (high >= low) {\n            int mid = low + (high - low) / 2;\n\n            // Check if mid element is the first 0\n            if ((mid == 0 || arr[mid - 1] == 1) && arr[mid] == 0) return mid;\n\n            // If mid element is not 0, search in the right half\n            if (arr[mid] == 1) return FirstZero(arr, mid + 1, high);\n\n            // If mid element is 0 but not the first, search in the left half\n            return FirstZero(arr, low, mid - 1);\n        }\n        return -1;\n    }\n\n    // Function to count the number of 0s in the array\n    public int CountZeroes(List<int> arr) {\n        int n = arr.Count;\n        // Find the index of the first 0\n        int first = FirstZero(arr, 0, n - 1);\n\n        // If 0 is not present at all, return 0\n        if (first == -1) return 0;\n\n        // Return the count of 0s\n        return (n - first);\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n\n    countZeroes(arr) {\n        let cnt = 0;            // Initialize a variable to store the count of zeros.\n        for (let it of arr) {   // Iterate through each element in the array.\n            if (it == 0) cnt++; // If the element is zero, increment the count.\n        }\n\n        return cnt; // Return the count of zeros.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}