{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701158,
            "title": "Count total set bits",
            "titleSlug": "count-total-set-bits-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">You are given a number<strong> n</strong>. Find the total count of set bits for all numbers from 1 to n (both inclusive).</span><br /><br /><span style=\"font-size: 18px;\"><strong>Examples :<br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 4\n<strong>Output</strong>: 5\n<strong>Explanation</strong>: For numbers from 1 to 4. For 1: 0 0 1 = 1 set bits For 2: 0 1 0 = 1 set bits For 3: 0 1 1 = 2 set bits For 4: 1 0 0 = 1 set bits Therefore, the total set bits is 5.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 17\n<strong>Output</strong>: 35\n<strong>Explanation</strong>: From numbers 1 to 17(both inclusive), the total number of set bits is 35.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(logn)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span><br /><br /><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1 &le; n &le; 10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, determine the total number of set bits (bits equal to 1) present in the binary representation of all integers from 1 to `n` (inclusive).",
                "constraints": [
                    "1 <= n <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "5",
                        "explanation": "The binary representations of numbers from 1 to 4 are: 1 (001), 2 (010), 3 (011), and 4 (100). The number of set bits in each is 1, 1, 2, and 1 respectively. Therefore, the total number of set bits is 1 + 1 + 2 + 1 = 5."
                    },
                    {
                        "input": "17",
                        "output": "35",
                        "explanation": "The total number of set bits for numbers from 1 to 17 (inclusive) is 35."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    //Function to return sum of count of set bits in the integers from 1 to n. \r\n    int countSetBits(int n)\r\n    {\r\n        //Ignoring 0 as all the bits are unset. \r\n        n++;\r\n        int count=0;\r\n        \r\n        //Counting set bits from 1 to n.\r\n        for( int x=2 ; x/2<n ; x=x*2 )\r\n        {\r\n            //Total count of pairs of 0s and 1s.\r\n            int quotient = n/x;\r\n            //quotient gives the complete count of pairs of 1s.\r\n            //Multiplying it with the (current power of 2)/2 will \r\n            //give the count of 1s in the current bit.\r\n            count += quotient * x / 2;\r\n            \r\n            int remainder = n%x;\r\n            //If the count of pairs is odd then we add the remaining 1s \r\n            //which could not be grouped together. \r\n            if(remainder > x/2)\r\n                count += remainder - x/2;\r\n        }\r\n        \r\n        //returning count of set bits.\r\n        return count;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //Function to return sum of count of set bits in the integers from 1 to n.\r\n    static int countSetBits(int n)\r\n    {\r\n        //Ignoring 0 as all the bits are unset. \r\n        n+=1;\r\n        int count=0;\r\n        \r\n        //Counting set bits from 1 to n.\r\n        for( int x=2 ; x/2<n ; x=x*2 )\r\n        {\r\n            //Total count of pairs of 0s and 1s.\r\n            int quotient = n/x;\r\n            //quotient gives the complete count of pairs of 1s.\r\n            //Multiplying it with the (current power of 2)/2 will give\r\n            //the count of 1s in the current bit.\r\n            count += quotient * x / 2;\r\n            \r\n            int remainder = n%x;\r\n            //If the count of pairs is odd then we add the remaining 1s \r\n            //which could not be grouped together. \r\n            if(remainder > x/2)\r\n                count += remainder - x/2;\r\n        }\r\n        \r\n        //returning count of set bits.\r\n        return count;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to return sum of count of set bits in the integers from 1 to n.\r\n    def countSetBits(self,n):\r\n        #Ignoring 0 as all the bits are unset. \r\n        n += 1\r\n        count = 0\r\n        \r\n        x = 2\r\n        #Counting set bits from 1 to n.\r\n        while x//2 < n:\r\n            #Total count of pairs of 0s and 1s.\r\n            quotient = n//x\r\n            #quotient gives the complete count of pairs of 1s.\r\n            #Multiplying it with the (current power of 2)/2 will give\r\n            #the count of 1s in the current bit.\r\n            count += quotient * x // 2\r\n            \r\n            remainder = n % x\r\n            #If the count of pairs is odd then we add the remaining 1s \r\n            #which could not be grouped together. \r\n            if remainder > x//2:\r\n                count += remainder - x//2\r\n            \r\n            x = x*2\r\n        #returning count of set bits.\r\n        return count\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Number} N\r\n * @returns {Number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to return sum of count of set bits in the integers from 1 to n.\r\n    countSetBits(N)\r\n    {\r\n        //Ignoring 0 as all the bits are unset. \r\n        N++;\r\n        let count=0;\r\n        \r\n        //Counting set bits from 1 to n.\r\n        for(let x=2 ; Math.floor(x/2)<N ; x=x*2 )\r\n        {\r\n            //Total count of pairs of 0s and 1s.\r\n            let quotient = Math.floor(N/x);\r\n            //quotient gives the complete count of pairs of 1s.\r\n            //Multiplying it with the (current power of 2)/2 will give\r\n            //the count of 1s in the current bit.\r\n            count += quotient * Math.floor(x / 2);\r\n            \r\n            let remainder = N%x;\r\n            //If the count of pairs is odd then we add the remaining 1s \r\n            //which could not be grouped together. \r\n            if(remainder > Math.floor(x/2))\r\n                count += remainder - Math.floor(x/2);\r\n        }\r\n        \r\n        //returning count of set bits.\r\n        return count;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}