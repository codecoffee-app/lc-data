{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706071,
            "title": "Triplets in Sorted Linked List",
            "titleSlug": "count-triplets--141631",
            "content": "<p><span >Given a sorted linked list&nbsp;of <strong>distinct</strong> nodes (no two nodes have the same data) and an integer <strong>x</strong>. Count <strong>distinct </strong>triplets in the list that sum up to a given integer <strong>x</strong>.<br /><strong>Note:</strong> The Linked List is sorted in descending order.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList: 9-&gt;8-&gt;6-&gt;5-&gt;4-&gt;2-&gt;1,  x= 17\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Distinct triplets are (2, 6, 9) and (4, 5, 8) which have sum equal to x i.e 17.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/706071/Web/Other/blobid0_1722172011.png\" width=\"400\" height=\"70\" /><br /></span></pre>\n<pre><span ><strong>Input: </strong>LinkedList: 9-&gt;8-&gt;6-&gt;5-&gt;4-&gt;2-&gt;1, x= 15</span><br /><span ><strong>Output:</strong> 5\n<strong>Explanation:</strong> (1, 5, 9), (1, 6, 8), (2, 4, 9), (2, 5, 8), (4, 5, 6) are the distinct triplets<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/706071/Web/Other/blobid2_1722172048.png\" width=\"400\" height=\"70\" /> </span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>3</sup>&nbsp;<br />1 &le; node-&gt;data &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted linked list of distinct nodes (no two nodes have the same data) and an integer x, count the number of distinct triplets in the list that sum up to x. The Linked List is sorted in descending order.",
                "constraints": [
                    "1 <= number of nodes <= 10^3",
                    "1 <= node->data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 9->8->6->5->4->2->1,  x= 17",
                        "output": "2",
                        "explanation": "There are two distinct triplets that sum to 17: (2, 6, 9) and (4, 5, 8)."
                    },
                    {
                        "input": "LinkedList: 9->8->6->5->4->2->1, x= 15",
                        "output": "5",
                        "explanation": "There are five distinct triplets that sum to 15: (1, 5, 9), (1, 6, 8), (2, 4, 9), (2, 5, 8), and (4, 5, 6)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Think how hashing will work here!</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int countTriplets(struct Node* head, int x) {\n        struct Node *ptr, *ptr1, *ptr2;\n        int count = 0;\n\n        // unordered_map 'um' implemented as hash table\n        unordered_map<int, Node*> um;\n\n        // insert the <node data, node pointer> tuple in 'um'\n        for (ptr = head; ptr != NULL; ptr = ptr->next)\n            um[ptr->data] = ptr;\n\n        // generate all possible pairs\n        for (ptr1 = head; ptr1 != NULL; ptr1 = ptr1->next)\n            for (ptr2 = ptr1->next; ptr2 != NULL; ptr2 = ptr2->next) {\n\n                // p_sum - sum of elements in the current pair\n                int p_sum = ptr1->data + ptr2->data;\n\n                // if 'x-p_sum' is present in 'um' and either of the two nodes\n                // are not equal to the 'um[x-p_sum]' node\n                if (um.find(x - p_sum) != um.end() && um[x - p_sum] != ptr1 &&\n                    um[x - p_sum] != ptr2)\n\n                    // increment count\n                    count++;\n            }\n\n        // required count of triplets\n        // division by 3 as each triplet is counted 3 times\n        return (count / 3);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int countTriplets(Node head, int x) {\n        Node ptr, ptr1, ptr2;\n        int count = 0;\n\n        // unordered_map 'um' implemented as hash table\n        HashMap<Integer, Node> um = new HashMap<Integer, Node>();\n\n        // insert the <node data, node pointer> tuple in 'um'\n        for (ptr = head; ptr != null; ptr = ptr.next) um.put(ptr.data, ptr);\n\n        // generate all possible pairs\n        for (ptr1 = head; ptr1 != null; ptr1 = ptr1.next)\n            for (ptr2 = ptr1.next; ptr2 != null; ptr2 = ptr2.next) {\n\n                // p_sum - sum of elements in the current pair\n                int p_sum = ptr1.data + ptr2.data;\n\n                // if 'x-p_sum' is present in 'um' and either of the two nodes\n                // are not equal to the 'um[x-p_sum]' node\n                if (um.containsKey(x - p_sum) && um.get(x - p_sum) != ptr1 &&\n                    um.get(x - p_sum) != ptr2)\n\n                    // increment count\n                    count++;\n            }\n\n        // required count of triplets\n        // division by 3 as each triplet is counted 3 times\n        return (count / 3);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "'''\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n'''\n\n\nclass Solution:\n\n    def countTriplets(self, head, x):\n        ptr = head\n        ptr1 = head\n        ptr2 = head\n        count = 0\n\n        # Dictionary to store <node data, node pointer> tuples\n        um = {}\n\n        # Insert the <node data, node pointer> tuple in 'um'\n        current = head\n        while current is not None:\n            um[current.data] = current\n            current = current.next\n\n        # Generate all possible pairs\n        ptr1 = head\n        while ptr1 is not None:\n            ptr2 = ptr1.next\n            while ptr2 is not None:\n                # p_sum - sum of elements in the current pair\n                p_sum = ptr1.data + ptr2.data\n\n                # If 'x-p_sum' is present in 'um' and either of the two nodes\n                # are not equal to the 'um[x-p_sum]' node\n                if (x - p_sum) in um and um[x - p_sum] != ptr1 and um[\n                        x - p_sum] != ptr2:\n                    # Increment count\n                    count += 1\n\n                ptr2 = ptr2.next\n            ptr1 = ptr1.next\n\n        # Required count of triplets\n        # Division by 3 as each triplet is counted 3 times\n        return count // 3\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countTriplets(head, x) {\n        let ptr = head;\n        let ptr1 = head;\n        let ptr2 = head;\n        let count = 0;\n\n        let um = {};\n\n        let current = head;\n        while (current !== null) {\n            um[current.data] = current;\n            current = current.next;\n        }\n\n        ptr1 = head;\n        while (ptr1 !== null) {\n            ptr2 = ptr1.next;\n            while (ptr2 !== null) {\n                let p_sum = ptr1.data + ptr2.data;\n\n                if ((x - p_sum) in um && um[x - p_sum] !== ptr1 &&\n                    um[x - p_sum] !== ptr2) {\n                    count += 1;\n                }\n\n                ptr2 = ptr2.next;\n            }\n            ptr1 = ptr1.next;\n        }\n\n        return Math.floor(count / 3);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}