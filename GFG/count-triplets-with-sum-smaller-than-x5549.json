{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 703292,
      "title": "Triplets with Smaller Sum",
      "titleSlug": "count-triplets-with-sum-smaller-than-x5549",
      "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of distinct integers of size <strong>n </strong>and a value <strong>sum</strong>, the task is to find the count of triplets <strong>(i, j, k)</strong>, having <strong>(i&lt;j&lt;k)&nbsp;</strong>with the sum of<strong> <strong>(arr[i] + arr[j] + arr[k])</strong>&nbsp;</strong>smaller than the given value sum.</span></p>\n<p><br /><strong><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></strong></p>\n<pre><strong>\n<span style=\"font-size: 18px;\"><strong>Input: n</strong></span></strong><span style=\"font-size: 18px;\"> = 4, sum = 2, arr[] = {-2, 0, 1, 3}</span><strong><span style=\"font-size: 18px;\">\n<strong>Output:</strong>  </span></strong><span style=\"font-size: 18px;\">2</span><strong><span style=\"font-size: 18px;\">\n<strong>Explanation</strong>: </span></strong><span style=\"font-size: 18px;\">Below are triplets with sum less than 2 (-2, 0, 1) and (-2, 0, 3). </span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\"><strong>Input: n</strong></span></strong><span style=\"font-size: 18px;\"> = 5, sum = 12, arr[] = {5, 1, 3, 4, 7}</span><strong><span style=\"font-size: 18px;\">\n<strong>Output:</strong> </span></strong><span style=\"font-size: 18px;\">4</span><strong><span style=\"font-size: 18px;\">\n<strong>Explanation</strong>: </span></strong><span style=\"font-size: 18px;\">Below are triplets with sum less than 12 (1, 3, 4), (1, 3, 5), (1, 3, 7) and (1, 4, 5).\n</span></pre>\n<p><strong><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> </span></strong><span style=\"font-size: 18px;\">O(N<sup>2</sup>).</span><br /><strong><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:</strong> </span></strong><span style=\"font-size: 18px;\">O(1).</span></p>\n<div><br /><strong><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></strong><br /><span style=\"font-size: 18px;\">3 &le; N &le; 10<sup>3</sup></span></div>\n<div><span style=\"font-size: 18px;\">-10<sup>3</sup>&nbsp;&le; arr[i]&nbsp;&le; 10<sup>3</sup></span></div>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given an array `arr[]` of distinct integers of size `n` and a target value `sum`, find the number of triplets `(i, j, k)` such that `i < j < k` and the sum `arr[i] + arr[j] + arr[k]` is less than `sum`.",
        "constraints": ["3 <= N <= 10^3", "-10^3 <= arr[i] <= 10^3"],
        "testcases": [
          {
            "input": "n = 4, sum = 2, arr[] = {-2, 0, 1, 3}",
            "output": "2",
            "explanation": "The triplets with a sum less than 2 are (-2, 0, 1) and (-2, 0, 3)."
          },
          {
            "input": "n = 5, sum = 12, arr[] = {5, 1, 3, 4, 7}",
            "output": "4",
            "explanation": "The triplets with a sum less than 12 are (1, 3, 4), (1, 3, 5), (1, 3, 7), and (1, 4, 5)."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<pre>\n1) Sort the input array in increasing order.\n2) Initialize result as 0.\n3) Run a loop from i = 0 to n-2.  An iteration of this loop finds all\n   triplets with arr[i] as first element.\n     a) Initialize other two elements as corner elements of subarray\n        arr[i+1..n-1], i.e., j = i+1 and k = n-1\n     b) Move j and k toward each other until they meet, i.e., while (j = sum), then do k--\n\n            // Else for current i and j, there can (k-j) possible third elements\n            // that satisfy the constraint.\n            (ii) Else Do ans += (k - j) followed by j++ </pre>"
    ],
    "relatedTopics": [
      {
        "name": "two-pointer-algorithm",
        "slug": "two-pointer-algorithm"
      },
      {
        "name": "Arrays",
        "slug": "arrays"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      },
      {
        "name": "Algorithms",
        "slug": "algorithms"
      }
    ],
    "companies": ["amazon", "sap"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n\n  public:\n\n    // Function to count triplets with sum less than a given value.\n    long long countTriplets(int n, long long sum, long long arr[]) {\n        // sorting the array in increasing order.\n        sort(arr, arr + n);\n\n        // variable to store the count of triplets.\n        long long ans = 0;\n\n        // iterating over each element till the last two elements.\n        for (int i = 0; i < n - 2; i++) {\n            // pointers j and k pointing to i+1 and last element respectively.\n            int j = i + 1, k = n - 1;\n\n            // loop till j becomes less than k.\n            while (j < k) {\n                // if sum of current triplet is greater than or equal to given sum,\n                // decrement k to decrease the sum.\n                if (arr[i] + arr[j] + arr[k] >= sum)\n                    k--;\n                // if sum of current triplet is less than given sum,\n                // then all the elements from j to k will form valid triplets,\n                // so add (k-j) to ans to count all those triplets.\n                // then increment j to increase the sum.\n                else {\n                    ans += (k - j);\n                    j++;\n                }\n            }\n        }\n        // returning the count of triplets with sum less than given sum.\n        return ans;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": null,
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "class Solution:\n\n    def countTriplets(self, n, sum, arr):\n        arr.sort()  # Sort the array in ascending order\n        ans = 0  # Initialize a variable to store the count of triplets\n\n        # Iterate through the array from the first element to the third-to-last element\n        for i in range(0, n - 2):\n            j = i + 1  # Initialize a pointer j to the element next to i\n            k = n - 1  # Initialize a pointer k to the last element\n\n            # Loop until j is less than k\n            while (j < k):\n                if (\n                        arr[i] + arr[j] + arr[k] >= sum\n                ):  # If the sum of the elements is greater than or equal to the target sum\n                    k = k - 1  # Decrease the value of k\n                else:\n                    ans += (\n                        k - j\n                    )  # Add the difference between k and j to the count of triplets\n                    j = j + 1  # Increase the value of j\n\n        return ans  # Return the count of triplets\n",
        "lang_text": "py"
      },
      {
        "lang": "C#",
        "full_func": "class Solution\n{\n    //Complete this function\n    //Function to count the triplets.\n    public long countTriplets(long[] arr, int n, long sum)\n    {\n        //sorting the array in increasing order.\n        Array.Sort(arr);\n        \n        //variable to store the count of triplets.\n        long ans = 0;\n        \n        //iterating over each element till the last two elements.\n        for (int i = 0; i < n - 2; i++)\n        {\n            //pointers j and k pointing to i+1 and last element respectively.\n            int j = i + 1, k = n - 1;\n            \n            //loop till j becomes less than k.\n            while (j < k)\n            {\n                //if sum of current triplet is greater than or equal to given sum,\n                //decrement k to decrease the sum.\n                if (arr[i] + arr[j] + arr[k] >= sum)\n                    k--;\n                //if sum of current triplet is less than given sum,\n                //then all the elements from j to k will form valid triplets,\n                //so add (k-j) to ans to count all those triplets.\n                //then increment j to increase the sum.\n                else\n                {\n                    ans += (k - j);\n                    j++;\n                }\n            }\n        }\n        //returning the count of triplets with sum less than given sum.\n        return ans;\n    }\n}",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "class Solution {\n  countTriplets(arr, n, sum) {\n    arr.sort((a, b) => a - b);\n    let ans = 0;\n    for (let i = 0; i < n - 2; i++) {\n      let j = i + 1,\n        k = n - 1;\n      while (j < k) {\n        if (arr[i] + arr[j] + arr[k] >= sum) k--;\n        else {\n          ans += k - j;\n          j++;\n        }\n      }\n    }\n    return ans;\n  }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
