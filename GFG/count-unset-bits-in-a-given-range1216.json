{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704971,
            "title": "Count unset bits in a given Range",
            "titleSlug": "count-unset-bits-in-a-given-range1216",
            "content": "<p><span style=\"font-size:18px\">Given a non-negative number&nbsp;<strong>n</strong>&nbsp;and two values&nbsp;<strong>l</strong>&nbsp;and&nbsp;<strong>r</strong>. The problem is to count the number of unset bits in the range&nbsp;<strong>l</strong>&nbsp;to&nbsp;<strong>r</strong>&nbsp;in the binary representation of&nbsp;<strong>n</strong>, i.e. to count unset bits from the rightmost&nbsp;<strong>lth</strong>&nbsp;bit to the rightmost&nbsp;<strong>rth</strong>&nbsp;bit.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>n =</strong> 42, <strong>l =</strong> 2, <strong>r =</strong> 5\r\n<strong>Output:</strong>\r\n2\r\n<strong>Explanation:</strong>\r\n(42)<sub>10</sub> = (1<strong>0101</strong>0)<sub>2</sub>\r\nThere are &#39;2&#39; unset bits in the range 2 to 5.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>n =</strong> 80, <strong>l =</strong> 1, <strong>r =</strong> 4\r\n<strong>Output:</strong>\r\n4\r\n<strong>Explanation:</strong>\r\n(80)<sub>10</sub> = (101<strong>0000</strong>)<sub>2</sub>\r\nThere are &#39;4&#39; unset bits in the range 1 to 4.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>countUnsetBits()</strong> which takes 3 Integers n, a, and b as input and returns the count of unset bits in the given range of [l, r].</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log(n))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= n &lt;= 10<sup>5</sup></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= l &lt;= r &lt;= 17</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">An easy solution would be to convert n into binary and then check in the range of l to r.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    \n    // Method to count number of set bits in n\n    int countSetBits(int n)\n    {\n        int count = 0;\n        while (n) {\n            n &= (n - 1); // Clear the least significant bit\n            count++; // Increment count\n        }\n        return count;\n    }\n    \n    // Funcion to find unset bits in the range [l,r] \n    int countUnsetBitsInGivenRange(int n, int l, int r)\n    {\n        int num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1); // Create a mask with all bits set except the range [l,r]\n        return (r - l + 1) - countSetBits(n & num); // Count the number of set bits in the range [l,r] and subtract it from the total length of the range [l,r] to get the number of unset bits\n    }\n    \n    int countUnsetBits(int n, int l, int r) {\n        \n        int ans = countUnsetBitsInGivenRange(n, l, r); // Calculate the number of unset bits in the given range\n        \n        return ans; // Return the ans\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Method to count number of set bits in n\n    private int CountSetBits(int n)\n    {\n        int count = 0;\n        while (n != 0)\n        {\n            n &= (n - 1); // Clear the least significant bit\n            count++; // Increment count\n        }\n        return count;\n    }\n\n    // Method to count number of unset bits in the range [l,r]\n    public int countUnsetBits(int n, int l, int r)\n    {\n        int num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1); // Create a mask with all bits set except the range [l,r]\n        return (r - l + 1) - CountSetBits(n & num); // Count the number of set bits in the range [l,r] and subtract it from the total length of the range [l,r] to get the number of unset bits\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}