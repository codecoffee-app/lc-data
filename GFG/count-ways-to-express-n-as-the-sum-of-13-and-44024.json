{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704754,
            "title": "Count ways to express N as the sum of 1,3 and 4",
            "titleSlug": "count-ways-to-express-n-as-the-sum-of-13-and-44024",
            "content": "<div class=\"entry-content\">\n<p><span style=\"font-size: 18px;\">Given a positive integer <strong>n</strong>, count the number of ways to express <strong>n&nbsp;</strong>as a sum of 1, 3 and 4.<br />Note: The answer will always fit into a 32-bit integer.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span><span style=\"font-size: 18px;\"> </span><span style=\"font-size: 18px;\"> </span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\">n<strong> = </strong>4</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">4</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">There is 4 ways to represent 4 as sum of 1, 3 and 4: (1+1+1+1), (1+3), (3+1) and (4).</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\">n<strong> = </strong>3</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">2</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">There is 2 ways to represent 3 as sum of 1, 3 and 4: (1+1+1) and (3).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 45</span></p>\n</div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer n, determine the number of distinct ways to express n as a sum of 1, 3, and 4.  The order of the addends matters.",
                "constraints": [
                    "1 <= n <= 45"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "4",
                        "explanation": "There are four ways to represent 4 as a sum of 1, 3, and 4: (1+1+1+1), (1+3), (3+1), and (4)."
                    },
                    {
                        "input": "3",
                        "output": "2",
                        "explanation": "There are two ways to represent 3 as a sum of 1, 3, and 4: (1+1+1) and (3)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Divide the problem into sub-problems for solving it.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to count the number of possible ways.\n    int countWays(int n) {\n        // base case\n        if (n <= 2)\n            return 1;\n        // creating an array to store the values.\n        int dp[n + 1];\n\n        // initializing base cases of the dp array.\n        dp[0] = dp[1] = dp[2] = 1;\n        dp[3] = 2;\n\n        // iterate for all values from 4 to N\n        // calculating values from 4 to N using the recursive formula.\n        for (int i = 4; i <= n; i++)\n            dp[i] = (dp[i - 1] + dp[i - 3] + dp[i - 4]);\n\n        // returning the count for N.\n        return dp[n];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to count the number of possible ways.\n    public int countWays(int n) {\n        // Base cases\n        if (n <= 2) return 1;\n\n        // Creating an array to store the values.\n        int[] dp = new int[n + 1];\n\n        // Initializing base cases of the dp array.\n        dp[0] = 1;\n        dp[1] = 1;\n        dp[2] = 1;\n        dp[3] = 2;\n\n        // Calculating values from 4 to N using the recursive formula.\n        for (int i = 4; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 3] + dp[i - 4];\n        }\n\n        // Returning the count for N.\n        return dp[n];\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to count the number of possible ways.\n    def countWays(self, n):\n        # Base cases\n        if n <= 2:\n            return 1\n\n        # Creating a list to store the values.\n        dp = [0] * (n + 1)\n\n        # Initializing base cases of the dp list.\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 1\n        dp[3] = 2\n\n        # Calculating values from 4 to N using the recursive formula.\n        for i in range(4, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 3] + dp[i - 4]\n\n        # Returning the count for N.\n        return dp[n]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to count the number of possible ways.\n    countWays(n) {\n        // Base case\n        if (n <= 2) return 1;\n\n        // Creating an array to store the values.\n        const dp = new Array(n + 1).fill(0);\n\n        // Initializing base cases of the dp array.\n        dp[0] = 1;\n        dp[1] = 1;\n        dp[2] = 1;\n        dp[3] = 2;\n\n        // Calculating values from 4 to N using the recursive formula.\n        for (let i = 4; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 3] + dp[i - 4];\n        }\n\n        // Returning the count for N.\n        return dp[n];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}