{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701419,
            "title": "Count ways to N'th Stair",
            "titleSlug": "count-ways-to-nth-stairorder-does-not-matter1322",
            "content": "<table style=\"border-collapse: collapse; width: 100.013%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 99.2396%; text-align: center;\"><strong><a href=\"https://forms.gle/vehKoPPpBZ9g6vf8A\" target=\"_blank\" rel=\"noopener\">Share Your Path: Journey with POTD</a></strong><br /><a href=\"https://forms.gle/vehKoPPpBZ9g6vf8A\" target=\"_blank\" rel=\"noopener\"><strong>https://forms.gle/vehKoPPpBZ9g6vf8A</strong></a></td>\n</tr>\n</tbody>\n</table>\n<p><span >There are<strong> n</strong> stairs, and a person standing at the bottom wants to reach the top. The person can climb either <strong>1 stair </strong>or<strong> 2 stairs </strong>at a time. Count the number of ways, the person can reach the top (<strong>order does not matter</strong>).<br /></span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>Input:\n</strong>n = 4\n<strong>Output: <br /></strong>3<strong>\nExplanation: <br /></strong>You can reach 4th stair in 3 ways.\n3 possible ways are:\n1, 1, 1, 1\n1, 1, 2\n2, 2<br />Here, note that {1, 1, 2}, {1, 2, 1} and {2, 1, 1} are considered same as their order does not matter. </span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input:\n</strong>n = 5\n<strong>Output: <br /></strong>3\n<strong>Explanation</strong>:\nYou may reach the 5th stair in 3 ways.\nThe 3 possible ways are:\n1, 1, 1, 1, 1\n1, 1, 1, 2\n1, 2, 2\n</span></pre>\n<p><span ><strong>Your Task:</strong><br />Your task is to complete the function&nbsp;<strong>countWays()&nbsp;</strong>which takes a single argument <strong>n</strong> and returns the answer.</span></p>\n<p><span ><strong>Expected Time Complexity</strong>: O(n)<br /><strong>Expected Auxiliary Space</strong>: O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'n' stairs, determine the number of distinct ways a person can reach the top, climbing either 1 or 2 stairs at a time. The order of steps does not matter.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "3",
                        "explanation": "There are 3 ways to reach the 4th stair: (1, 1, 1, 1), (1, 1, 2), and (2, 2). Note that the order of steps doesn't matter, so (1, 1, 2), (1, 2, 1), and (2, 1, 1) are considered the same."
                    },
                    {
                        "input": "5",
                        "output": "3",
                        "explanation": "There are 3 ways to reach the 5th stair: (1, 1, 1, 1, 1), (1, 1, 1, 2), and (1, 2, 2)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: arial, helvetica, sans-serif; font-size: 14pt; white-space-collapse: preserve; background-color: #ffffff;\">Think about the relationship between reaching the nth stair and the number of ways to reach the (n-1)th and (n-2)th stairs.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to count number of ways to reach the nth stair\n    // when order does not matter.\n    long long countWays(int n) {\n        long long res[n + 1];\n\n        // base cases\n        res[0] = 1;\n        res[1] = 1;\n\n        // storing number of ways to reach the ith index as\n        // number of ways to reach (i-2)th index +1.\n        for (int i = 2; i <= n; i++)\n            res[i] = (res[i - 2] + 1);\n\n        // returning the result.\n        return res[n];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    // Function to count number of ways to reach the nth stair\n    // when order does not matter.\n    Long countWays(int n) {\n        Long res[] = new Long[n + 1];\n\n        // base cases\n        res[0] = 1L;\n        res[1] = 1L;\n\n        // storing number of ways to reach the ith index as\n        // number of ways to reach (i-2)th index +1.\n        for (int i = 2; i <= n; i++) res[i] = (res[i - 2] + 1);\n\n        // returning the result.\n        return res[n];\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to count number of ways to reach the nth stair\n    #when order does not matter.\n    def countWays(self, n):\n\n        dp = [0 for i in range(n + 1)]\n\n        #base cases\n        dp[0] = 1\n        dp[1] = 1\n\n        #storing number of ways to reach the ith index as\n        #number of ways to reach (i-2)th index +1.\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 2] + 1\n\n        #returning the result.\n        return dp[n]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} m\n * @returns {BigInt}\n */\n\nclass Solution {\n    // Function to count number of ways to reach the nth stair\n    // when order does not matter.\n    countWays(n) {\n        let res = new Array(n + 1);\n\n        // base cases\n        res[0] = BigInt(1);\n        res[1] = BigInt(1);\n\n        // storing number of ways to reach the ith index as\n        // number of ways to reach (i-2)th index +1.\n        for (let i = 2; i <= n; i++) res[i] = (res[i - 2] + 1n);\n\n        // returning the result.\n        return res[n];\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}