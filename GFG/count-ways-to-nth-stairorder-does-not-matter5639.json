{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704431,
            "title": "Count ways to N'th Stair(Order does not matter)",
            "titleSlug": "count-ways-to-nth-stairorder-does-not-matter5639",
            "content": "<p><span style=\"font-size: 18px;\">There are<strong> n</strong> stairs, and a person standing at the bottom wants to reach the top. The person can climb either <strong>1 stair or 2 stairs at a time</strong>. Count the number of ways, the person can reach the top (<strong>order does not matter</strong>).<br /></span><span style=\"font-size: 18px;\"><strong>Note: </strong>Order does not matter means for <strong>n</strong> = 4:- {1 2 1},{2 1 1},{1 1 2} are considered same.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n =<strong> </strong>4\n<strong>Output: </strong>3\n<strong>Explanation:</strong> Three ways to reach at 4th stair. They are {1, 1, 1, 1}, {1, 1, 2}, {2, 2}.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5\n<strong>Output: </strong>3\n<strong>Explanation: </strong>Three ways to reach at 5th stair. They are {1, 1, 1, 1, 1}, {1, 1, 2, 1} and {1, 2, 2}.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(1)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A person is standing at the bottom of n stairs and wants to reach the top.  The person can climb 1 or 2 stairs at a time.  Determine the number of distinct ways the person can reach the top. Note that the order of steps (1s and 2s) does not matter.",
                "constraints": [
                    "1 <= n <= 10000"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "3",
                        "explanation": "The distinct ways to reach the 4th stair are: {1, 1, 1, 1}, {1, 1, 2}, and {2, 2}."
                    },
                    {
                        "input": "5",
                        "output": "3",
                        "explanation": "The distinct ways to reach the 5th stair are: {1, 1, 1, 1, 1}, {1, 1, 1, 2}, and {1, 2, 2}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Find the number</span><span style=\"font-size: 18px;\"> of ways to reach the step i, using Dynamic Programming.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int nthStair(int n) {\n        return (n / 2) + 1;\n        // \t\t\tint dp[n+1]={0};\n        // \t\t\tdp[0] = 1; // 1 way to reach 0 stair.\n        // \t\t\tdp[1] = 1; // 1 stair can be reached only by taking 1 stair.\n        // \t\t\tfor(int i = 2; i <= n; i++)\n        // \t\t\t\tdp[i] = dp[i-2] + 1; // Number of ways to reach i stairs is formed by\n        // 1(number of ways by all 1 + ways to reach N-2th stair \t\t\treturn dp[n];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int nthStair(int n) {\n        int[] dp = new int[n + 1];\n        dp[0] = 1; // 1 way to reach 0 stair.\n        dp[1] = 1; // 1 stair can be reached only by taking 1 stair.\n        for (int i = 2; i <= n; i++)\n            dp[i] =\n                dp[i - 2] + 1; // Number of ways to reach i stairs is formed by 1(number\n                               // of ways by all 1 + ways to reach N-2th stair\n        return dp[n];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function template for Python 3\n\nclass Solution:\n    #Function to find the number of ways to reach the nth stair.\n    def nthStair(self,n):\n        #creating a list of size n+1 and initializing it with -1.\n        dp = [-1]*(n+1)\n        \n        #recursive function to solve the problem.\n        def solve(n):\n            #if n is negative, then there are 0 ways to reach that stair.\n            if n<0:\n                return 0\n            #if n is 0 or 1, then there is only 1 way to reach that stair.\n            if n<=1:\n                return 1\n            #if the subproblem has already been solved, return the stored value.\n            if dp[n] != -1:\n                return dp[n]\n            #otherwise, calculate the number of ways to reach the current stair\n            #by adding the number of ways to reach the previous 2 stairs.\n            dp[n] = 1 + solve(n-2)\n            return dp[n]\n        \n        #calling the recursive function to find the number of ways to reach the nth stair.\n        return solve(n)",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution{\n    nthStair(n){\n        let dp = new Array(n+1).fill(0);\n        dp[0] = 1; // 1 way to reach 0 stair.\n        dp[1] = 1; // 1 stair can be reached only by taking 1 stair.\n        for(let i = 2; i <= n; i++)\n            dp[i] = dp[i-2] + 1; // Number of ways to reach i stairs is formed by 1(the ways to climb stairs one step at a time) + ways to reach (i-2)th stair\n        return dp[n];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}