{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700563,
            "title": "Counting elements in two arrays",
            "titleSlug": "counting-elements-in-two-arrays",
            "content": "<p><span >You are given two unsorted arrays <strong><code>a[]</code></strong> and <strong><code>b[]</code></strong>. Both arrays may contain duplicate elements. For each element in <code>a[]</code>, your task is to count how many elements in <code>b[]</code> are less than or equal to that element.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> a[] = [1, 2, 3, 4, 7, 9], b = [0, 1, 2, 1, 1, 4]\n<strong>Output: </strong>[4, 5, 5, 6, 6, 6]<strong>\nExplanation: </strong>\nFor a[0] = 1, there are 4 elements in b (0, 1, 1, 1) that are &le; 1.\nFor a[1] = 2, there are 5 elements in b (0, 1, 1, 1, 2) that are &le; 2.\nFor a[2] = 3, there are 5 elements in b that are &le; 3.\nSimilarly, for a[3] = 4, there are 6 elements in b that are &le; 4, and for a[4] = 7 and a[5] = 9, there are also 6 elements in b that are &le; 7 and &le; 9, respectively.</span></pre>\n<pre><span ><strong>Input:</strong> a[] = [4, 8, 7, 5, 1], b = [4, 48, 3, 0, 1, 1, 5]\n<strong>Output: </strong>[5, 6, 6, 6, 3]\n<strong>Explanation: <br /></strong>For a[0] = 4, there are 5 elements in b (4, 3, 0, 1, 1) that are &le; 4.\nFor a[1] = 8 and a[2] = 7, there are 6 elements in b that are &le; 8 and &le; 7.\nFor a[3] = 5, there are 6 elements in b that are &le; 5.\nFor a[4] = 1, there are 3 elements in b (0, 1, 1) that are &le; 1.</span></pre>\n<pre><span ><strong>Input:</strong> a[] = [10, 20], b = [30, 40, 50]\n<strong>Output: </strong>[0, 0]\n<strong>Explanation: <br /></strong>For a[0] = 10 and a[1] = 20, there are no elements in b that are less than or equal to 10 or 20. Hence, the output is [0, 0].</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; a.size(), b.size() &le; 10<sup>5</sup><br />0 &le; a[i], b[j] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two unsorted arrays, `a[]` and `b[]`, which may contain duplicate elements, determine, for each element in `a[]`, the number of elements in `b[]` that are less than or equal to it.",
                "constraints": [
                    "1 <= a.size(), b.size() <= 10^5",
                    "0 <= a[i], b[j] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "a[] = [1, 2, 3, 4, 7, 9], b = [0, 1, 2, 1, 1, 4]",
                        "output": "[4, 5, 5, 6, 6, 6]",
                        "explanation": "For a[0] = 1, there are 4 elements in b (0, 1, 1, 1) that are <= 1. For a[1] = 2, there are 5 elements in b (0, 1, 1, 1, 2) that are <= 2. For a[2] = 3, there are 5 elements in b that are <= 3. Similarly, for a[3] = 4, there are 6 elements in b that are <= 4, and for a[4] = 7 and a[5] = 9, there are also 6 elements in b that are <= 7 and <= 9, respectively."
                    },
                    {
                        "input": "a[] = [4, 8, 7, 5, 1], b = [4, 48, 3, 0, 1, 1, 5]",
                        "output": "[5, 6, 6, 6, 3]",
                        "explanation": "For a[0] = 4, there are 5 elements in b (4, 3, 0, 1, 1) that are <= 4. For a[1] = 8 and a[2] = 7, there are 6 elements in b that are <= 8 and <= 7. For a[3] = 5, there are 6 elements in b that are <= 5. For a[4] = 1, there are 3 elements in b (0, 1, 1) that are <= 1."
                    },
                    {
                        "input": "a[] = [10, 20], b = [30, 40, 50]",
                        "output": "[0, 0]",
                        "explanation": "For a[0] = 10 and a[1] = 20, there are no elements in b that are less than or equal to 10 or 20. Hence, the output is [0, 0]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort <strong>b</strong> and use binary search to calculate the count for each element in <strong>a</strong>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Binary search to find the index of the largest element in arr that is <= x\n    int binarySearch(int arr[], int l, int h, int x) {\n        while (l <= h) {\n            int mid = (l + h) / 2;\n\n            // If element at mid is less than or equal to x,\n            // move to the right half of the array.\n            if (arr[mid] <= x)\n                l = mid + 1;\n            else\n                h = mid - 1;\n        }\n\n        // Return the index of the largest element <= x.\n        return h;\n    }\n\n    // Function to count the number of elements in b that are less than or equal to each\n    // element in a\n    vector<int> countEleLessThanOrEqual(vector<int>& a, vector<int>& b) {\n        // Create a result vector to store the answer\n        vector<int> res;\n\n        // Sort array b in ascending order to enable binary search\n        sort(b.begin(), b.end());\n\n        // Iterate over each element in a\n        for (int i = 0; i < a.size(); i++) {\n            // Perform binary search on b to find the count of elements <= a[i]\n            int index = binarySearch(b.data(), 0, b.size() - 1, a[i]);\n\n            // Append the count (index + 1) to the result vector\n            res.push_back(index + 1);\n        }\n\n        // Return the result vector containing counts for each element in a\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to perform binary search to find the index of the largest element in arr\n    // that is <= x\n    public static int binarySearch(int arr[], int l, int h, int x) {\n        while (l <= h) {\n            int mid = (l + h) / 2;\n\n            // If the middle element is less than or equal to x,\n            // search in the right half of the array.\n            if (arr[mid] <= x)\n                l = mid + 1;\n            else\n                h = mid - 1;\n        }\n\n        // Return the index of the largest element less than or equal to x.\n        return h;\n    }\n\n    // Function to count the number of elements in b that are less than or equal to each\n    // element in a\n    public static ArrayList<Integer> countEleLessThanOrEqual(int a[], int b[]) {\n        // Create an ArrayList to store the result\n        ArrayList<Integer> res = new ArrayList<>();\n\n        // Sort array b in ascending order to prepare for binary search\n        Arrays.sort(b);\n\n        // Iterate through each element in a\n        for (int i = 0; i < a.length; i++) {\n            // Perform binary search on b to find the count of elements <= a[i]\n            int index = binarySearch(b, 0, b.length - 1, a[i]);\n\n            // Add the result (index + 1) to the ArrayList\n            res.add(index + 1);\n        }\n\n        // Return the ArrayList containing the counts for each element in a\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to count elements in a that are less than or equal to each element in b\n    def countEleLessThanOrEqual(self, a, b):\n        # Function to perform binary search and find the count of elements <= target\n        def binary_search(arr, target):\n            l, r = 0, len(arr) - 1\n            while l <= r:\n                mid = (l + r) // 2\n\n                # If element at mid is less than or equal to target,\n                # move to the right half of the array\n                if arr[mid] <= target:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n\n            # Return the count of elements <= target\n            return r + 1\n\n        # Sort array b in ascending order to enable binary search\n        b.sort()\n\n        # Initialize the result list\n        ans = []\n\n        # Iterate through each element in a\n        for num in a:\n            # Get the count of elements in b that are <= num and add to the result list\n            ans.append(binary_search(b, num))\n\n        # Return the list containing the counts\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to perform binary search\n    binarySearch(arr, target) {\n        let l = 0, r = arr.length - 1;\n        while (l <= r) {\n            let mid = Math.floor((l + r) / 2);\n\n            // If the middle element is less than or equal to the target,\n            // search in the right half of the array.\n            if (arr[mid] <= target) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n\n        // Return the number of elements less than or equal to the target.\n        return r + 1;\n    }\n\n    // Function to count the number of elements in b that are less than or equal to each\n    // element in a\n    countEleLessThanOrEqual(a, b) {\n        b.sort((x, y) => x - y); // Sort array b in ascending order\n\n        let result = [];\n        // For each element in a, use binary search to find how many elements in b are\n        // <= a[i]\n        for (let i = 0; i < a.length; i++) {\n            result.push(this.binarySearch(b, a[i]));\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}