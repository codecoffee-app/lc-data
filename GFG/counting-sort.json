{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700555,
            "title": "Counting Sort",
            "titleSlug": "counting-sort",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>arr</strong> consisting of lowercase english&nbsp;letters, arrange all its letters in lexicographical order using Counting Sort.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 5\r\nS = &quot;edsab&quot;\r\n<strong>Output</strong>:\r\nabdes\r\n<strong>Explanation</strong>: \r\nIn lexicographical order, string will be \r\nabdes.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 13\r\nS = &quot;geeksforgeeks&quot;\r\n<strong>Output</strong>:\r\neeeefggkkorss\r\n<strong>Explanation</strong>:\r\nIn lexicographical order, string will be \r\neeeefggkkorss.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function<strong> </strong>problem. You only need to complete the function<strong> countSort()&nbsp;</strong>that takes string<strong> arr&nbsp;</strong>as a&nbsp;<strong>parameter </strong>and<strong> returns </strong>the sorted string. The printing is done by the&nbsp;driver code.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup></span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Video:</span></strong></p>\r\n\r\n<p><iframe frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/7zuGmKfUt7s\" width=\"560\"></iframe></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `arr` consisting of lowercase English letters, arrange all its letters in lexicographical order using Counting Sort. Implement the `countSort()` function that takes the string `arr` as a parameter and returns the sorted string.",
                "constraints": [
                    "1 <= N <= 10^5, where N is the length of the input string."
                ],
                "testcases": [
                    {
                        "input": "edsab",
                        "output": "abdes",
                        "explanation": "The lexicographically sorted order of 'edsab' is 'abdes'."
                    },
                    {
                        "input": "geeksforgeeks",
                        "output": "eeeefggkkorss",
                        "explanation": "The lexicographically sorted order of 'geeksforgeeks' is 'eeeefggkkorss'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft",
            "goldman-sachs",
            "cisco"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    //Function to arrange all letters of a string in lexicographical \r\n    //order using Counting Sort.\r\n    string countSort(string arr){\r\n        \r\n        //Declaring output character array that will have sorted letters.\r\n        char output[arr.length()];\r\n    \r\n        //Creating a count array to store count of individual\r\n        //characters and initialize count array as 0.\r\n        int count[RANGE + 1], i;\r\n        memset(count, 0, sizeof(count));\r\n    \r\n        //Storing count of each character.\r\n        for(i = 0; arr[i]; ++i)\r\n            ++count[arr[i]];\r\n    \r\n        //Modifying the count array such that each element at each index \r\n        //stores the sum of previous counts. \r\n        //The modified count array indicates the position of each object in \r\n        //the output sequence.\r\n        for (i = 1; i <= RANGE; ++i)\r\n            count[i] += count[i-1];\r\n    \r\n        //Building the output character array.\r\n        for (i = 0; arr[i]; ++i)\r\n        {\r\n            output[count[arr[i]]-1] = arr[i];\r\n            --count[arr[i]];\r\n        }\r\n    \r\n        //Copying the output array to arr, so that arr now\r\n        //contains sorted characters.\r\n        for (i = 0; arr[i]; ++i)\r\n            arr[i] = output[i];\r\n            \r\n        //returning the sorted string.    \r\n        return arr;\r\n    }\r\n};   \r\n\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    //Function to arrange all letters of a string in lexicographical \r\n    //order using Counting Sort.\r\n    public static String countSort(String arr)\r\n    {\r\n        char seq[] = arr.toCharArray();\r\n        int n = seq.length;\r\n        \r\n        //Declaring output character array that will have sorted letters.\r\n        char output[] = new char[n];\r\n        \r\n        //Creating a count array to store count of individual\r\n        //characters and initialize count array as 0.\r\n        int count[] = new int[256];\r\n        Arrays.fill(count, 0);\r\n        \r\n        //Storing count of each character.\r\n        for (int i=0; i<n; ++i)\r\n            ++count[seq[i]];\r\n            \r\n        //Modifying the count array such that each element at each index \r\n        //stores the sum of previous counts. \r\n        //The modified count array indicates the position of each object in \r\n        //the output sequence.\r\n        for (int i=1; i<=255; ++i)\r\n            count[i] += count[i-1];\r\n            \r\n        //Building the output character array.\r\n        for (int i = 0; i<n; ++i)\r\n        {\r\n            output[count[seq[i]]-1] = seq[i];\r\n            --count[seq[i]];\r\n        }\r\n        \r\n        //Copying the output array to arr, so that arr now\r\n        //contains sorted characters.\r\n        \r\n        for (int i = 0; i<n; ++i)\r\n            seq[i] = output[i];\r\n        String ans = \"\";\r\n        for(int i = 0; i < n; i++)\r\n            ans+=seq[i];\r\n        //returning the sorted string.     \r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to arrange all letters of a string in lexicographical \r\n    #order using Counting Sort.\r\n    def countSort(self,arr):\r\n        n = len(arr)\r\n        #Storing frequency of all characters present in the given string.\r\n        freq=[0 for i in range(256)] \r\n    \r\n        #Increasing the count of character frequency encountered.\r\n        for char in arr:\r\n            freq[ord(char)]+=1\r\n        \r\n        arr = \"\"\r\n        #Now, iterating the frequency table and storing the ith \r\n        #character , f[i] times.\r\n        for i in range(256):\r\n            for j in range(freq[i]):\r\n                arr += chr(i)\r\n                \r\n        #returning the sorted string. \r\n        return arr\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {string} arr\r\n * @returns {string}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to arrange all letters of a string in lexicographical \r\n    //order using Counting Sort.\r\n    countSort(arr)\r\n    {\r\n        //Declaring output character array that will have sorted letters.\r\n        let output = [];\r\n        for(let i = 0; i<arr.length; ++i)\r\n            output.push('a');\r\n\r\n        //Creating a count array to store count of individual\r\n        //characters and initializing count array as 0.\r\n        let count = [];\r\n        let i;\r\n        for(let i=0;i<256;i++){\r\n            count.push(0);\r\n        }\r\n    \r\n        //Storing count of each character.\r\n        for(i = 0; i<arr.length; ++i)\r\n            ++count[arr.charCodeAt(i)];\r\n    \r\n        //Modifying the count array such that each element at each index \r\n        //stores the sum of previous counts. \r\n        //The modified count array indicates the position of each object in \r\n        //the output sequence.\r\n        for (i = 1; i <= 255; ++i)\r\n            count[i] += count[i-1];\r\n    \r\n        //Building the output character array.\r\n        for (i = 0; i<arr.length; ++i)\r\n        {\r\n            let temp = count[arr.charCodeAt(i)];\r\n            output[temp-1] = arr.charAt(i);\r\n            --count[arr.charCodeAt(i)];\r\n        }\r\n        \r\n        //returning the sorted string. \r\n        return output.join(\"\");\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}