{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703277,
            "title": "Counts Zeros Xor Pairs",
            "titleSlug": "counts-zeros-xor-pairs0349",
            "content": "<p><span style=\"font-size:18px\">Given an array A[] of size N. Find the number of pairs (i, j) such that<br />\nA<sub>i&nbsp;</sub>XOR A<sub>j</sub>&nbsp;= 0, and 1 &le; i &lt; j &le; N.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039Input :</strong> arr[ ] = {1, 3, 4, 1, 4}\n<strong>Output :</strong> 2\n<strong>Explanation:</strong>\nIndex( 0, 3 ) and (2 ,&nbsp;4 ) are&nbsp;only&nbsp;pairs \nwhose xors is zero so&nbsp;count&nbsp;is 2.\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {2, 2, 2} <strong>\nOutput :</strong>  3\n\n</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>calculate()</strong> that takes an array <strong>(arr)</strong>, sizeOfArray <strong>(n)</strong>, and return the count&nbsp;of Zeros Xor&#39;s Pairs. The driver code takes care of the printing.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*Log(N)).<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n\n<p><br />\n<br />\n<span style=\"font-size:18px\"><strong>Output:</strong><br />\nFor each test case, output a single integer i.e counts of Zeros Xors Pairs</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints</strong><br />\n2 &le; N &le; 10^5<br />\n1 &le; A[i] &le; 10^5</span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><img alt=\" A_i \" src=\"https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-7368ac6a4dd052d5a77f46b7d14cd9c8_l3.svg\" style=\"height:24px; width:27px\" title=\"Click to enlarge\" />&nbsp;XOR&nbsp;<img alt=\" A_j \" src=\"https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-42c859915610a0a004e0fe9521232d65_l3.svg\" style=\"height:28px; width:28px\" title=\"Click to enlarge\" />&nbsp;= 0 is only satisfied when&nbsp;<img alt=\" A_i = A_j \" src=\"https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-63a0a60ac379243993fd9258242bae00_l3.svg\" style=\"height:28px; width:91px\" title=\"Click to enlarge\" />. Therefore, we will first sort the array and then count the frequency of each element. By combinatorics, we can observe that if frequency of some element is&nbsp;<img alt=\"count\" src=\"https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-5651813c177c746925fdc04507acd703_l3.svg\" style=\"height:18px; width:63px\" title=\"Click to enlarge\" />&nbsp;then, it will contribute&nbsp;<img alt=\"count*(count-1)/2\" src=\"https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-d03c81e582a2cf708cbfb28546d477d1_l3.svg\" style=\"height:27px; width:244px\" title=\"Click to enlarge\" />&nbsp;to the answer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "long long int calculate(int a[], int n)\n{\n\t// Sorting the list using\n\t// built in function\n\tsort(a, a + n);\n\n\tlong long int count = 1;\n\tlong long int answer = 0;\n\n\t// Traversing through the\n\t// elements\n\tfor (int i = 1; i < n; i++) {\n\t\n\t\tif (a[i] == a[i - 1]){\n\n\t\t\t// Counting frequency of each \n\t\t\t// elements\n\t\t\tcount += 1;\n\t\t\t\n\t\t} \n\t\telse\n\t\t{\n\t\t\t// Adding the contribution of\n\t\t\t// the frequency to the answer\n\t\t\tanswer = answer + (count * (count - 1)) / 2;\n\t\t\tcount = 1;\n\t\t}\n\t}\n\n\tanswer = answer + (count * (count - 1)) / 2;\n\n\treturn answer;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    calculate(arr, n) {\n        let mp = {}; // Initialize an empty object to store the count of each element in the array.\n        for (let it of arr) {\n            if (!mp[it]) // If the element is not present in the object, add it and set its count to 1.\n                mp[it] = 1;\n            else // If the element is already present in the object, increment its count by 1.\n                mp[it]++;\n        }\n\n        let ans = 0; // Initialize a variable to store the answer.\n        Object.keys(mp).forEach(function(it, index) { // Iterate through each element in the object.\n            ans += Math.floor((mp[it] * (mp[it] - 1)) / 2); // Calculate the number of pairs that can be formed using the count of each element.\n        });\n        return ans; // Return the final answer.\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long calculate(int[] a, int n)\n    {\n        // Sorting the list        // built in function\n        Array.Sort(a, 0, n);\n\n        long count = 1;\n        long answer = 0;\n\n        // Traversing through the\n        // elements\n        for (int i = 1; i < n; i++)\n        {\n\n            if (a[i] == a[i - 1])\n            {\n\n                // Counting frequency of each \n                // elements\n                count += 1;\n\n            }\n            else\n            {\n                // Adding the contribution of\n                // the frequency to the answer\n                answer = answer + (count * (count - 1)) / 2;\n                count = 1;\n            }\n        }\n\n        answer = answer + (count * (count - 1)) / 2;\n\n        return answer;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}