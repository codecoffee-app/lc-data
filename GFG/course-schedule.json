{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707516,
            "title": "Course Schedule",
            "titleSlug": "course-schedule",
            "content": "<p><span style=\"font-size: 18px;\">There are a total of <strong>n</strong> tasks you have to pick, labelled from 0 to n-1. Some tasks may have <strong>prerequisite </strong>tasks, for example to pick task 0 you have to first finish tasks 1, which is expressed as a pair: [0, 1]<br />Given the total number of <strong>n</strong> tasks and a list of prerequisite pairs of size <strong>m</strong>. Find a ordering of tasks you should pick to finish all tasks.</span><br /><span style=\"font-size: 18px;\"><strong>Note: </strong>There may be multiple correct orders, you just need to return any one of them. If it is impossible to finish all tasks, return an empty array. </span><span style=\"font-size: 18px;\">Driver code will print&nbsp;</span><strong style=\"font-size: 18px;\">\"No Ordering Possible\"</strong><span style=\"font-size: 18px;\">, on returning an empty array.</span><span style=\"font-size: 18px;\">&nbsp;Returning any correct order will give the output as </span><strong style=\"font-size: 18px;\">1</strong><span style=\"font-size: 18px;\">, whereas any invalid order will give the output </span><strong style=\"font-size: 18px;\">0</strong><span style=\"font-size: 18px;\">.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 2, m = 1\nprerequisites = {{1, 0}}\n<strong>Output:\n</strong>1<strong>\nExplanation:\n</strong>The output 1 denotes that the order is valid. So, if you have, implemented your function correctly, then output would be 1 for all test cases. </span><span style=\"font-size: 18px;\">One possible order is [0, 1].</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 4, m = 4\nprerequisites = {{1, 0},\n\\t\\t   {2, 0},\n\\t\\t   {3, 1},\n\\t\\t   {3, 2}}\n<strong>Output:\n</strong>1<strong>\nExplanation:\n</strong>There are a total of 4 tasks to pick. To pick task 3 you should have finished both tasks 1 and 2. Both tasks 1 and 2 should be pick after you finished task 0. So one correct task order is [0, 1, 2, 3]. Another correct ordering is [0, 2, 1, 3]. Returning any of these order will result in an output of 1.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />The task is to complete the function <strong>findOrder</strong>() which takes two integers n, and m and a list of lists of size m*2 denoting the prerequisite pairs as input and returns any correct order to finish all the tasks. Return an empty array if it's impossible to finish all tasks.</span></p>\n<div><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n+m).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n+m).</span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>5</sup></span>\n<div><span style=\"font-size: 18px;\">0 &le; m &le; <strong>min</strong>(n*(n-1),10<sup>5</sup>)<br />0 &le; prerequisites[i][0], prerequisites[i][1] &lt; n<br />All prerequisite pairs are unique</span></div>\n<div><span style=\"font-size: 18px;\">prerequisites[i][0] &ne; prerequisites[i][1]</span></div>\n</div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a set of `n` tasks, labeled from 0 to `n-1`. Some tasks have prerequisites; to complete task `i`, you must first complete task `j`, represented as the pair `[i, j]`. Given the total number of tasks `n` and a list of prerequisite pairs of size `m`, find an order in which you can complete all tasks. If multiple valid orders exist, return any one of them. If it is impossible to finish all tasks due to a cycle, return an empty array.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= m <= min(n*(n-1), 10^5)",
                    "0 <= prerequisites[i][0], prerequisites[i][1] < n",
                    "All prerequisite pairs are unique",
                    "prerequisites[i][0] != prerequisites[i][1]"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 1\nprerequisites = [[1, 0]]",
                        "output": "1",
                        "explanation": "One possible order is [0, 1]. The output '1' indicates a valid task order was found."
                    },
                    {
                        "input": "n = 4, m = 4\nprerequisites = [[1, 0],[2, 0],[3, 1],[3, 2]]",
                        "output": "1",
                        "explanation": "One correct task order is [0, 1, 2, 3]. Another correct ordering is [0, 2, 1, 3]. The output '1' indicates a valid task order was found."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses. </span></p>",
            "<p><span style=\"font-size:18px\">Use BFS or DFS to solve this using Toplogical Sorting.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n  public:\r\n    // Returns adjacency list representation of graph from\r\n    // given set of pairs.\r\n    vector<vector<int> > make_graph(int numTasks,\r\n                 vector<vector<int>>& prerequisites)\r\n    {\r\n        vector<vector<int> > graph(numTasks);\r\n        for (auto pre : prerequisites)\r\n            graph[pre[1]].push_back(pre[0]);\r\n        return graph;\r\n    }\r\n\r\n    // Computes in-degree of every vertex\r\n    vector<int> compute_indegree(vector<vector<int> >& graph)\r\n    {\r\n        vector<int> degrees(graph.size(), 0);\r\n        for (auto neighbors : graph)\r\n            for (int neigh : neighbors)\r\n                degrees[neigh]++;\r\n        return degrees;\r\n    }\r\n    vector<int> findOrder(int n, int m, vector<vector<int>> prerequisites) \r\n    {\r\n        // Create an adjacency list\r\n        vector<vector<int>> graph =\r\n                make_graph(n, prerequisites);\r\n\r\n        // Find vertices of zero degree\r\n        vector<int> degrees = compute_indegree(graph);\r\n        queue<int> zeros;\r\n        for (int i = 0; i < n; i++)\r\n            if (!degrees[i])\r\n                zeros.push(i);\r\n\r\n        // Find vertices in topological order\r\n        // starting with vertices of 0 degree\r\n        // and reducing degrees of adjacent.\r\n        vector<int> toposort;\r\n        for (int i = 0; i < n; i++) {\r\n            if (zeros.empty())\r\n                return {};\r\n            int zero = zeros.front();\r\n            zeros.pop();\r\n            toposort.push_back(zero);\r\n            for (int neigh : graph[zero]) {\r\n                if (!--degrees[neigh])\r\n                    zeros.push(neigh);\r\n            }\r\n        }\r\n        return toposort;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    // Depth-first search function for checking if there's a cycle in the graph\r\n    static public boolean dfs(ArrayList<ArrayList<Integer>> adjList, int numCourses, int index, boolean[] visited, boolean[] recStack, Stack<Integer> topologicalStack){\r\n        visited[index] = true;\r\n        recStack[index] = true;\r\n        \r\n        // Traverse through all the adjacent vertices\r\n        for(Integer courseIndex : adjList.get(index)){\r\n            if(!visited[courseIndex]){\r\n                // Recursive call to continue traversing\r\n                boolean isCycle = dfs(adjList, numCourses, courseIndex, visited, recStack, topologicalStack );\r\n                if(isCycle){\r\n                    return true;\r\n                }\r\n            }else if(recStack[courseIndex]){\r\n                // If there's a back edge, which means a cycle is found\r\n                return true;\r\n            }\r\n        }\r\n        recStack[index] = false;\r\n        topologicalStack.push(index);\r\n        return false;\r\n    }\r\n    \r\n    // Function to create an adjacency list from the prerequisites\r\n    static public ArrayList<ArrayList<Integer>> getadjList(int numCourses, ArrayList<ArrayList<Integer>> prerequisites){\r\n        ArrayList<ArrayList<Integer>> adjList = new ArrayList<ArrayList<Integer>>(numCourses);\r\n        for(int index = 0; index< numCourses; index++){\r\n            adjList.add(new ArrayList<Integer>());\r\n        }\r\n        \r\n        // Add the prerequisites to the adjacency list\r\n        for(ArrayList<Integer> prereqPair:  prerequisites){\r\n             adjList.get(prereqPair.get(1)).add(prereqPair.get(0));\r\n         }\r\n        return adjList;\r\n    }\r\n    \r\n    // Function to find the order of courses\r\n    static int[] findOrder(int n, int m, ArrayList<ArrayList<Integer>> prerequisites) \r\n    {\r\n        // add your code here\r\n        boolean[] visited = new boolean[n];\r\n        boolean[] recStack = new boolean[n];\r\n        boolean isCycle = false;\r\n        Stack<Integer> topologicalStack = new Stack<Integer>();\r\n        \r\n        // Create the adjacency list from the prerequisites\r\n        ArrayList<ArrayList<Integer>> adjList =  getadjList(n, prerequisites);\r\n        \r\n        // Perform depth-first search on all unvisited vertices\r\n        for(int i=0; i<n;i++){\r\n            if(!visited[i])\r\n                isCycle = isCycle | dfs(adjList, n, i, visited, recStack, topologicalStack);\r\n        }\r\n        \r\n        if(!isCycle){\r\n            // If there's no cycle, return the order of courses\r\n            int[] courseOrder = new int[n];\r\n            for(int i=0; i< n; i++){\r\n                courseOrder[i] = topologicalStack.pop();            \r\n            }\r\n            return courseOrder;\r\n        }else{\r\n            // If there's a cycle, return an empty array\r\n            int[] courseOrder = {};\r\n            return courseOrder;\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#User function Template for Python\r\n\r\nfrom collections import defaultdict\r\nclass Solution:\r\n    WHITE = 1\r\n    GRAY = 2\r\n    BLACK = 3\r\n    def findOrder(self, n, m, prerequisites):\r\n        # Code here\r\n        numCourses = n\r\n        # Create the adjacency list representation of the graph\r\n        adj_list = defaultdict(list)\r\n\r\n        # A pair [a, b] in the input represents edge from b --> a\r\n        for dest, src in prerequisites:\r\n            adj_list[src].append(dest)\r\n\r\n        topological_sorted_order = []\r\n        is_possible = True\r\n\r\n        # By default all vertces are WHITE\r\n        color = {k: Solution.WHITE for k in range(numCourses)}\r\n        def dfs(node):\r\n            nonlocal is_possible\r\n\r\n            # Don't recurse further if we found a cycle already\r\n            if not is_possible:\r\n                return\r\n\r\n            # Start the recursion\r\n            color[node] = Solution.GRAY\r\n\r\n            # Traverse on neighboring vertices\r\n            if node in adj_list:\r\n                for neighbor in adj_list[node]:\r\n                    if color[neighbor] == Solution.WHITE:\r\n                        dfs(neighbor)\r\n                    elif color[neighbor] == Solution.GRAY:\r\n                         # An edge to a GRAY vertex represents a cycle\r\n                        is_possible = False\r\n\r\n            # Recursion ends. We mark it as black\r\n            color[node] = Solution.BLACK\r\n            topological_sorted_order.append(node)\r\n\r\n        for vertex in range(numCourses):\r\n            # If the node is unprocessed, then call dfs on it.\r\n            if color[vertex] == Solution.WHITE:\r\n                dfs(vertex)\r\n\r\n        return topological_sorted_order[::-1] if is_possible else []\r\n        \r\n        ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    makeGraph(numTasks, prerequisites) {\n        let graph = new Array(numTasks).fill(0).map(() => []);\n        for (let pre of prerequisites)\n            graph[pre[1]].push(pre[0]);\n        return graph;\n    }\n\n    computeIndegree(graph) {\n        let degrees = new Array(graph.length).fill(0);\n        for (let neighbors of graph)\n            for (let neigh of neighbors)\n                degrees[neigh]++;\n        return degrees;\n    }\n\n    findOrder(n, m, prerequisites) {\n        // Create an adjacency list\n        let graph = this.makeGraph(n, prerequisites);\n\n        // Find vertices of zero degree\n        let degrees = this.computeIndegree(graph);\n        let zeros = [];\n        for (let i = 0; i < n; i++)\n            if (!degrees[i])\n                zeros.push(i);\n\n        // Find vertices in topological order\n        // starting with vertices of 0 degree\n        // and reducing degrees of adjacent.\n        let toposort = [];\n        for (let i = 0; i < n; i++) {\n            if (zeros.length === 0)\n                return [];\n            let zero = zeros.shift();\n            toposort.push(zero);\n            for (let neigh of graph[zero]) {\n                if (--degrees[neigh] === 0)\n                    zeros.push(neigh);\n            }\n        }\n        return toposort;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}