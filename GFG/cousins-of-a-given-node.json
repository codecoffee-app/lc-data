{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706384,
            "title": "Cousins of a given node",
            "titleSlug": "cousins-of-a-given-node",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree and a node, print all cousins of given node in order of their appearance. Note that siblings should not be printed.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input : </span></strong>\n<span style=\"font-size: 18px;\">\\t\\t 1\n\\t     /   \\\n\\t    2     3\n\\t  /   \\  /  \\\n\\t 4    5  6   7</span>\n\n<span style=\"font-size: 18px;\">Given node : 5</span>\n<span style=\"font-size: 18px;\"><strong>Output :</strong> 6 7</span>\n<strong><span style=\"font-size: 18px;\">Explanation :</span></strong>\n<span style=\"font-size: 18px;\">Nodes 6 and 7 are on the same level \nas 5 and have different parents.</span>\n\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2 :</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input :</span>\n</strong><span style=\"font-size: 18px;\">\\t   9</span>\n<span style=\"font-size: 18px;\">\\t  /</span>\n<span style=\"font-size: 18px;\">\\t 5</span>\n<span style=\"font-size: 18px;\">Given node : 5</span>\n<span style=\"font-size: 18px;\"><strong>Output :</strong> -1</span>\n<strong><span style=\"font-size: 18px;\">Explanation :</span></strong>\n<span style=\"font-size: 18px;\">There no other nodes than 5 in the same level.</span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Your task :</strong></span></div>\n<div><span style=\"font-size: 18px;\">You don't have to read input or print anything. Your task is to complete the function<strong> printCousins() </strong>which takes the root node of the tree and&nbsp;the node whose cousins need to be found,&nbsp;as input and returns a list containing the cousins of the given node in order of their appearance in the tree. If there is no cousin of the given node, return<strong> -1</strong> as the first element of the list.</span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Expected Time Complexity : </strong>O(n)</span></div>\n<div><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space : </strong>O(n)</span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Constraints :</strong></span></div>\n<div><span style=\"font-size: 18px;\">1 &lt;= n &lt;=10^5</span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and a target node, find all cousins of the target node. Cousins are nodes that share the same level in the tree but have different parents. Return the cousins in the order they appear in a level-order traversal. Siblings of the target node should not be included in the output.",
                "constraints": [
                    "1 <= n <= 10^5, where n is the number of nodes in the binary tree."
                ],
                "testcases": [
                    {
                        "input": "Binary Tree:\n\t\t 1\n\t     /   \\\n\t    2     3\n\t  /   \\  /  \\\n\t 4    5  6   7\n\nTarget Node: 5",
                        "output": "[6, 7]",
                        "explanation": "Nodes 6 and 7 are at the same level as node 5, but their parents are different. Therefore, they are cousins of node 5."
                    },
                    {
                        "input": "Binary Tree:\n\t   9\n\t  /\n\t 5\n\nTarget Node: 5",
                        "output": "[-1]",
                        "explanation": "Node 5 is at level 1. There are no other nodes at this level with different parents. Therefore, node 5 has no cousins."
                    },
                    {
                        "input": "Binary Tree: null\n\nTarget Node: null",
                        "output": "[-1]",
                        "explanation": "If the tree is null, then there are no cousins to be found."
                    },
                    {
                        "input": "Binary Tree:\n\t1\n\t / \\\n\t2 3\n\nTarget Node: 2",
                        "output": "[3]",
                        "explanation": "Node 3 is at same level as node 2 but different parent. Therefore, it is a cousin of node 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the idea of level order traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    vector<int> printCousins(Node* root, Node* node_to_find)\r\n    {\r\n    \r\n    \tvector<int> ans;\r\n    \t// if the given node is the root itself,\r\n    \t// then no nodes would be printed\r\n    \tif (root == node_to_find) {\r\n    \r\n    \t\tans.push_back(-1);\r\n    \t\treturn ans;\r\n    \t}\r\n    \r\n    \tqueue<Node*> q;\r\n    \tbool found = false;\r\n    \tint size_;\r\n    \tNode* p;\r\n    \tq.push(root);\r\n    \r\n    \r\n    \t// the following loop runs until found is\r\n    \t// not true, or q is not empty.\r\n    \t// if found has become true => we have found\r\n    \t// the level in which the node is present\r\n    \t// and the present queue will contain all the\r\n    \t// cousins of that node\r\n    \twhile (!q.empty() && !found) {\r\n    \r\n    \t\tsize_ = q.size();\r\n    \t\twhile (size_) {\r\n    \t\t\tp = q.front();\r\n    \t\t\tq.pop();\r\n    \r\n    \t\t\t// if current node's left or right child\r\n    \t\t\t// is the same as the node to find,\r\n    \t\t\t// then make found = true, and don't push\r\n    \t\t\t// any of them into the queue, as\r\n    \t\t\t// we don't have to print the siblings\r\n    \t\t\tif ((p->left == node_to_find ||\r\n    \t\t\t        p->right == node_to_find)) {\r\n    \t\t\t\tfound = true;\r\n    \t\t\t}\r\n    \t\t\telse {\r\n    \t\t\t\tif (p->left)\r\n    \t\t\t\t\tq.push(p->left);\r\n    \t\t\t\tif (p->right)\r\n    \t\t\t\t\tq.push(p->right);\r\n    \t\t\t}\r\n    \r\n    \t\t\tsize_--;\r\n    \t\t}\r\n    \t}\r\n    \r\n    \t// if found == true then the queue will contain the\r\n    \t// cousins of the given node\r\n    \tif (found)\r\n    \t{\r\n    \t\tsize_ = q.size();\r\n    \r\n    \t\t// size_ will be 0 when the node was at the\r\n    \t\t// level just below the root node.\r\n    \t\tif (size_ == 0)\r\n    \t\t\tans.push_back(-1);\r\n    \t\tfor (int i = 0; i < size_; i++) {\r\n    \t\t\tp = q.front();\r\n    \t\t\tq.pop();\r\n    \t\t\tans.push_back(p->data);\r\n    \t\t}\r\n    \t}\r\n    \r\n    \telse\r\n    \t\tans.push_back(-1);\r\n    \r\n    \r\n    \treturn ans;\r\n    }\r\n    \r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}