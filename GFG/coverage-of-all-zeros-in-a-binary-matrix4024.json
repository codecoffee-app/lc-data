{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705233,
            "title": "Coverage of all Zeros in a Binary Matrix",
            "titleSlug": "coverage-of-all-zeros-in-a-binary-matrix4024",
            "content": "<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">Given a binary <strong>matrix </strong>contains <strong>0s</strong> and <strong>1s </strong>only, we need to find the sum of <strong>coverage</strong> of all zeros of the matrix where coverage for a particular 0 is defined as a total number of ones around a zero in immediate left, right, up and bottom directions.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><strong><span >Input:</span></strong><br /><span >matrix = [[0, 1, 0],<br />\\t    [0, 1, 1],</span><br /><span >\\t    [0, 0, 0]]<br /></span><span style=\"font-size: 14pt; font-family: Arial, sans-serif; font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-variant-position: normal; vertical-align: baseline; white-space-collapse: preserve;\"><strong>Output</strong>: 6<br /></span><span style=\"font-size: 14pt; font-family: Arial, sans-serif; font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-variant-position: normal; vertical-align: baseline; white-space-collapse: preserve;\"><strong>Explanation:</strong> There are a total of 6 coverage are there</span></pre>\n<p><span id=\"docs-internal-guid-1235b0a7-7fff-bf71-d97f-b742714a175e\"></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>matrix = [[0, 1]]\n<strong>Output: </strong>1<br /></span><span ><strong>Explanation: </strong>There are only 1 coverage.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n&nbsp;</span><span style=\"font-size: 15px;\">*&nbsp;<span style=\"font-size: 18px;\">m)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span></span></p>\n<p><span style=\"font-size: 15px;\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= matrix.size, matrix[0].size &lt;= 100</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<div class=\"flex flex-grow flex-col max-w-full\">\n<div class=\"min-h-[20px] text-message flex flex-col items-start whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 juice:w-full juice:items-end overflow-x-auto gap-2\" dir=\"auto\" data-message-author-role=\"assistant\" data-message-id=\"35a5ed98-a1e7-4a1b-8588-0e96ed860b2d\">\n<div class=\"flex w-full flex-col gap-1 juice:empty:hidden juice:first:pt-[3px]\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<p><span style=\"font-size: 14pt;\">Traverse each cell of the matrix, and for every zero, count ones in all four directions until a boundary or another zero. Sum these counts.</span></p>\n</div>\n</div>\n</div>\n</div>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the number of cells with a value of 0 adjacent to a cell with a\n    // value of 1 in a binary matrix.\n    int findCoverage(vector<vector<int>>& matrix) {\n        int ans = 0;\n        int n = matrix.size();        // getting the number of rows in the matrix.\n        int m = matrix[0].size();     // getting the number of columns in the matrix.\n        for (int i = 0; i < n; i++) { // iterating over each row.\n            for (int j = 0; j < m; j++) { // iterating over each column.\n                if (matrix[i][j] == 1) // if the current cell has a value of 1, continue\n                                       // to the next iteration.\n                    continue;\n                if (i - 1 >= 0 and matrix[i - 1][j]) // checking if the cell above the\n                                                     // current cell has a value of 1.\n                    ans++; // incrementing the count of adjacent cells.\n                if (i + 1 < n and matrix[i + 1][j]) // checking if the cell below the\n                                                    // current cell has a value of 1.\n                    ans++; // incrementing the count of adjacent cells.\n                if (j - 1 >= 0 and\n                    matrix[i][j - 1]) // checking if the cell to the left of the current\n                                      // cell has a value of 1.\n                    ans++;            // incrementing the count of adjacent cells.\n                if (j + 1 < m and\n                    matrix[i][j + 1]) // checking if the cell to the right of the\n                                      // current cell has a value of 1.\n                    ans++;            // incrementing the count of adjacent cells.\n            }\n        }\n        return ans; // returning the total count of adjacent cells with a value of 0.\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\nclass Solution {\n    public int findCoverage(int[][] matrix) {\n        int ans = 0;\n        int n = matrix.length;    // getting the number of rows in the matrix.\n        int m = matrix[0].length; // getting the number of columns in the matrix.\n\n        // iterating over each cell in the matrix.\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (matrix[i][j] == 1) { // if the current cell has a value of 1,\n                                         // continue to the next iteration.\n                    continue;\n                }\n                if (i - 1 >= 0 &&\n                    matrix[i - 1][j] == 1) { // checking if the cell above the current\n                                             // cell has a value of 1.\n                    ans++; // incrementing the count of adjacent cells.\n                }\n                if (i + 1 < n &&\n                    matrix[i + 1][j] == 1) { // checking if the cell below the current\n                                             // cell has a value of 1.\n                    ans++; // incrementing the count of adjacent cells.\n                }\n                if (j - 1 >= 0 &&\n                    matrix[i][j - 1] == 1) { // checking if the cell to the left of the\n                                             // current cell has a value of 1.\n                    ans++; // incrementing the count of adjacent cells.\n                }\n                if (j + 1 < m &&\n                    matrix[i][j + 1] == 1) { // checking if the cell to the right of the\n                                             // current cell has a value of 1.\n                    ans++; // incrementing the count of adjacent cells.\n                }\n            }\n        }\n\n        return ans; // returning the total count of adjacent cells with a value of 0.\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findCoverage(self, matrix):\n        ans = 0\n        n = len(matrix)  # getting the number of rows in the matrix.\n        m = len(matrix[0])  # getting the number of columns in the matrix.\n\n        # iterating over each cell in the matrix.\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][\n                        j] == 1:  # if the current cell has a value of 1, continue to the next iteration.\n                    continue\n                if i - 1 >= 0 and matrix[i - 1][\n                        j]:  # checking if the cell above the current cell has a value of 1.\n                    ans += 1  # incrementing the count of adjacent cells.\n                if i + 1 < n and matrix[i + 1][\n                        j]:  # checking if the cell below the current cell has a value of 1.\n                    ans += 1  # incrementing the count of adjacent cells.\n                if j - 1 >= 0 and matrix[i][\n                        j -\n                        1]:  # checking if the cell to the left of the current cell has a value of 1.\n                    ans += 1  # incrementing the count of adjacent cells.\n                if j + 1 < m and matrix[i][\n                        j +\n                        1]:  # checking if the cell to the right of the current cell has a value of 1.\n                    ans += 1  # incrementing the count of adjacent cells.\n\n        return ans  # returning the total count of adjacent cells with a value of 0.\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}