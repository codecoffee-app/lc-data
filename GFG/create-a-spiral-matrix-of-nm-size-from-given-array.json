{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878374,
            "title": "Create a spiral matrix of N*M size from given array",
            "titleSlug": "create-a-spiral-matrix-of-nm-size-from-given-array",
            "content": "<p><span ><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">You are given two positive integers </span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">n </strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">and</span><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;<strong>m</strong></span><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">, and an integer array <strong>arr</strong>[] containing total (<strong>n*m)</strong> elements. R</span></span><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; font-size: 14pt;\">eturn a 2D matrix of dimensions <strong>n x m</strong> by filling it in a clockwise spiral order using the elements from the given array.</span><br /></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 4, m = 4, arr[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n<strong>Output:</strong> [[1, 2, 3, 4],<br />\\t  [12, 13, 14, 5],<br />\\t  [11, 16, 15, 6],<br />\\t  [10, 9, 8, 7]]</span></pre>\n<pre><span ><strong>Input:</strong> n = 3, m = 4, arr[] =[1, 8, 6, 3, 8, 6, 1, 6, 3, 2, 5, 3]\n<strong>Output:</strong> [[1, 8, 6, 3],<br />\\t  [2, 5, 3, 8],<br />\\t  [3, 6, 1, 6]]<br /></span></pre>\n<pre><span ><strong>Input:</strong> n = 2, m = 2, arr[] =[1, 8, 6, 3]\n<strong>Output:</strong> [[1, 8],<br />\\t  [3, 6]]</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; n, m &le; 10<sup>3</sup><br />arr.size() = n x m<br />1 &le; arr[i] &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two positive integers `n` and `m`, and an integer array `arr` of size `n*m`, construct a 2D matrix of dimensions `n x m`.  Fill the matrix in a clockwise spiral order using the elements from the given array `arr`.",
                "constraints": [
                    "1 <= n, m <= 10^3",
                    "arr.size() = n * m",
                    "1 <= arr[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 4, arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]",
                        "output": "[[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]]",
                        "explanation": "The array elements are filled into the 4x4 matrix in a clockwise spiral, starting from the top-left corner."
                    },
                    {
                        "input": "n = 3, m = 4, arr = [1, 8, 6, 3, 8, 6, 1, 6, 3, 2, 5, 3]",
                        "output": "[[1, 8, 6, 3], [2, 5, 3, 8], [3, 6, 1, 6]]",
                        "explanation": "The array elements are filled into the 3x4 matrix in a clockwise spiral manner."
                    },
                    {
                        "input": "n = 2, m = 2, arr = [1, 8, 6, 3]",
                        "output": "[[1, 8], [3, 6]]",
                        "explanation": "The 2x2 matrix is filled in clockwise spiral order starting with 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">The problem can be solved using </span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">matrix traversal with the special condition of turn</strong><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    bool outOfBound(int i, int n) { return (i < 0 || i >= n); }\n\n    vector<vector<int>> spiralFill(int n, int m, vector<int> &arr) {\n        vector<vector<int>> mat(n, vector<int>(m, 0));\n\n        int dir = 0; // Direction: 0 = R, 1 = D, 2 = L, 3 = U\n        int value = 0, end = arr.size();\n\n        // Direction array for R, D, L, U\n        vector<vector<int>> dirArr = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n        // Starting position\n        int i = 0, j = 0;\n\n        while (value < end) {\n            mat[i][j] = arr[value];\n            value++;\n\n            // Check if next position is out of bounds or non-zero, and turn if\n            // necessary\n            if (outOfBound(i + dirArr[dir][0], n) ||\n                outOfBound(j + dirArr[dir][1], m) ||\n                mat[i + dirArr[dir][0]][j + dirArr[dir][1]] != 0) {\n                dir = (dir + 1) % 4;\n            }\n\n            // Move to the next cell\n            i += dirArr[dir][0];\n            j += dirArr[dir][1];\n        }\n\n        return mat;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean outOfBound(int i, int n) { return (i < 0 || i >= n); }\n\n    public int[][] spiralFill(int n, int m, int[] arr) {\n        // Initialize the matrix as a 2D array\n        int[][] mat = new int[n][m];\n\n        int dir = 0; // Direction: 0 = R, 1 = D, 2 = L, 3 = U\n        int value = 0, end = arr.length;\n\n        // Direction array for R, D, L, U\n        int[][] dirArr = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n        // Starting position\n        int i = 0, j = 0;\n\n        while (value < end) {\n            mat[i][j] = arr[value]; // Set the value at the current position\n            value++;\n\n            // Check if next position is out of bounds or non-zero, and turn if\n            // necessary\n            int nextI = i + dirArr[dir][0];\n            int nextJ = j + dirArr[dir][1];\n\n            if (outOfBound(nextI, n) || outOfBound(nextJ, m) ||\n                mat[nextI][nextJ] != 0) {\n                dir = (dir + 1) % 4; // Change direction\n            }\n\n            // Move to the next cell\n            i += dirArr[dir][0];\n            j += dirArr[dir][1];\n        }\n\n        return mat;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def outOfBound(self, i, n):\n        return i < 0 or i >= n\n\n    def spiralFill(self, n, m, arr):\n        mat = [[0] * m for _ in range(n)]\n\n        dir = 0  # Direction: 0 = R, 1 = D, 2 = L, 3 = U\n        value = 0\n        end = len(arr)\n\n        # Direction array for R, D, L, U\n        dirArr = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n        # Starting position\n        i, j = 0, 0\n\n        while value < end:\n            mat[i][j] = arr[value]\n            value += 1\n\n            # Check if next position is out of bounds or non-zero, and turn if necessary\n            next_i = i + dirArr[dir][0]\n            next_j = j + dirArr[dir][1]\n\n            if (self.outOfBound(next_i, n) or self.outOfBound(next_j, m)\n                    or mat[next_i][next_j] != 0):\n                dir = (dir + 1) % 4\n\n            # Move to the next cell\n            i += dirArr[dir][0]\n            j += dirArr[dir][1]\n\n        return mat\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number} n\n     * @param {number} m\n     * @param {number[]} arr\n     * @returns {number[][]}\n     */\n    spiralFill(n, m, arr) {\n        // Initialize an empty n x m matrix filled with 0s\n        let mat = Array.from({length : n}, () => Array(m).fill(0));\n\n        let dir = 0; // Direction index: 0 = R, 1 = D, 2 = L, 3 = U\n        let value = 0;\n\n        // Direction array for R, D, L, U\n        const directions = [\n            [ 0, 1 ],  // Right\n            [ 1, 0 ],  // Down\n            [ 0, -1 ], // Left\n            [ -1, 0 ]  // Up\n        ];\n\n        // Starting position\n        let i = 0, j = 0;\n\n        while (value < arr.length) {\n            // Fill current position with the next value from arr\n            mat[i][j] = arr[value++];\n\n            // Calculate next position\n            let nextI = i + directions[dir][0];\n            let nextJ = j + directions[dir][1];\n\n            // Check if next position is out of bounds or already filled\n            if (nextI < 0 || nextI >= n || nextJ < 0 || nextJ >= m ||\n                mat[nextI][nextJ] !== 0) {\n                // Change direction clockwise\n                dir = (dir + 1) % 4;\n                nextI = i + directions[dir][0];\n                nextJ = j + directions[dir][1];\n            }\n\n            // Update current position\n            i = nextI;\n            j = nextJ;\n        }\n\n        return mat;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}