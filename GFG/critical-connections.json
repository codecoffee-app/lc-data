{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706303,
            "title": "Find all Critical Connections in the Graph",
            "titleSlug": "critical-connections",
            "content": "<p><span style=\"font-size: 18px;\">A <strong>critical connection </strong>refers to an edge that, upon removal, will make it impossible for certain nodes to reach each other through any path. You are given an <strong>undirected connected graph </strong>with <strong>v</strong> vertices and <strong>e</strong> edges where each vertex is distinct and ranges from <strong>0 to v-1</strong>, and you have to find all <strong>critical connections </strong>in the graph. It is ensured that there is at least one such edge present.</span></p>\n<p><span style=\"font-size: 18px;\">Note: You can return connections in any order.</span></p>\n<p><strong style=\"font-size: 18px;\">Example :</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/706303/Web/Other/bbe726f7-e9f7-4a0c-b9fa-c649299d9784_1685087730.png\" alt=\"\" /><span style=\"font-size: 18px;\">\n<strong>Output: </strong>\n0 1\n0 2\n<strong>Explanation</strong>: \nOn removing edge (0, 1), you will not be able to reach node 0 and 2 from node 1. Also, on removing edge (0, 2), you will not be able to reach node 0<br />and 1 from node 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/706303/Web/Other/730505a5-24f6-41de-bd11-84a0a9e56d49_1685087731.png\" alt=\"\" /><span style=\"font-size: 18px;\">\n<strong>Output:</strong>\n2 3\n<strong>Explanation</strong>:\nThe edge between nodes 2 and 3 is the only Critical connection in the given graph.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; v, e &le; 10<sup>4<br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A critical connection is an edge in an undirected connected graph that, if removed, would disconnect the graph, making it impossible for some nodes to reach others. Given an undirected connected graph with 'v' vertices (numbered from 0 to v-1) and 'e' edges, identify and return all the critical connections present.  It is guaranteed that the graph has at least one critical connection.",
                "constraints": [
                    "1 <= v, e <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "Graph with edges:\n0--1\n0--2",
                        "output": "0 1\n0 2",
                        "explanation": "Removing the edge (0, 1) disconnects node 1 from nodes 0 and 2. Removing the edge (0, 2) disconnects node 2 from nodes 0 and 1.  Therefore, both (0, 1) and (0, 2) are critical connections."
                    },
                    {
                        "input": "Graph with edges:\n2--3",
                        "output": "2 3",
                        "explanation": "Removing the edge (2, 3) disconnects node 2 from node 3 and vice versa, making it a critical connection."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Tarjan&#39;s Algo.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n\n    vector<vector<int>> g, ans;\n    vector<int> disc, low, par;\n\n    int time = 0;\n\n    void dfs(int u) // u is the  parent\n    {\n        disc[u] = low[u] = time++;\n\n        int l = g[u].size();\n        for (int i = 0; i < l; i++) {\n\n            int v = g[u][i];\n            if ((disc[v] == -1)) // if not visited then just start a new dfs from the\n                                 // adjacent node and hope it will discover a back-edge.\n            {\n                // v-> adjacent node\n                // u->parent node\n\n                par[v] = u; // making u the parent\n                dfs(v);     // low values updated\n                // you can also update low value of parent here..\n\n                if (low[v] > disc[u])\n                    ans.push_back({u, v});    // condition of back edge NOT found\n                low[u] = min(low[u], low[v]); // updating low value of parent\n            } else if (v != par[u]) // this part is for the  responsiblity of parent\n                                    // node as a child node,it wants to update it's low\n                                    // value from the visited part but not tamper with\n                                    // it's own  parent's values.\n                low[u] = min(low[u], low[v]);\n            // you can also do low[u]=min(low[u],disc[v]);\n            // Explanation:as discussed,the parent low value updation is alone enough\n            // for the low value propogation...the first time updation from a back edge\n            // is only what is required,so low[u]=min(low[u],disc[v]); for the first\n            // back edge will also work and that will be propagated through parent low\n            // value updation...also low[k]<=disc[k],so we can be assured.\n        }\n    }\n\n    vector<vector<int>> criticalConnections(int v, vector<vector<int>>& edges) {\n        // build adjacency list\n        vector<int> adj[v];\n        for (int i = 0; i < edges.size(); i++) {\n            adj[edges[i][0]].push_back(edges[i][1]);\n            adj[edges[i][1]].push_back(edges[i][0]);\n        }\n        g = vector<vector<int>>(v);\n        par = vector<int>(v, -1);\n        low = vector<int>(v, -1);\n\n        disc = low;\n\n        for (int i = 0; i < v; i++)\n            for (int j = 0; j < adj[i].size(); j++)\n                g[i].push_back(adj[i][j]);\n\n        for (int i = 0; i < v; i++)\n            if (disc[i] == -1)\n                dfs(i);\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    int time = 0; // Initialize a variable to keep track of time\n\n    public ArrayList<ArrayList<Integer>> criticalConnections(\n        int v, ArrayList<ArrayList<Integer>> adj) {\n        int[] id =\n            new int[v]; // Initialize an array to store discovery times of vertices\n        boolean[] visited =\n            new boolean[v];     // Initialize an array to keep track of visited vertices\n        int[] low = new int[v]; // Initialize an array to store the lowest discovery\n                                // time reachable from a vertex\n        ArrayList<ArrayList<Integer>> out =\n            new ArrayList<>(); // Initialize a list to store critical connections\n\n        // Loop through all vertices\n        for (int i = 0; i < v; i++) {\n            if (!visited[i]) {\n                // Perform Depth First Search (DFS) on unvisited vertices\n                DFSUtil(i, -1, adj, visited, id, low, out);\n            }\n        }\n\n        // Sort the list of critical connections\n        Collections.sort(out, new Comparator<ArrayList<Integer>>() {\n            @Override\n            public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {\n                return (o1.get(0) - o2.get(0) == 0) ? o1.get(1) - o2.get(1)\n                                                    : o1.get(0) - o2.get(0);\n            }\n        });\n\n        return out; // Return the list of critical connections\n    }\n\n    // Depth First Search utility function\n    private void DFSUtil(int u, int parent, ArrayList<ArrayList<Integer>> adj,\n                         boolean[] visited, int[] id, int[] low,\n                         ArrayList<ArrayList<Integer>> out) {\n        visited[u] = true;       // Mark the current vertex as visited\n        id[u] = low[u] = ++time; // Initialize discovery time and lowest reachable time\n                                 // for the current vertex\n        Iterator<Integer> it =\n            adj.get(u).iterator(); // Initialize an iterator for the adjacency list of\n                                   // the current vertex\n\n        // Iterate through the adjacency list of the current vertex\n        while (it.hasNext()) {\n            int v = it.next();         // Get the next adjacent vertex\n            if (v == parent) continue; // Skip if the adjacent vertex is the parent\n\n            if (!visited[v]) {\n                // If the adjacent vertex is not visited, perform DFS recursively\n                DFSUtil(v, u, adj, visited, id, low, out);\n                low[u] = Math.min(\n                    low[v],\n                    low[u]); // Update the lowest reachable time for the current vertex\n\n                // Check if the edge is a critical connection\n                if (low[v] > id[u]) {\n                    ArrayList<Integer> edge =\n                        new ArrayList<Integer>(); // Create a new array list to store\n                                                  // the edge\n                    edge.add(u < v ? u : v);      // Add the smaller vertex to the edge\n                    edge.add(u < v ? v : u);      // Add the larger vertex to the edge\n                    out.add(edge); // Add the edge to the list of critical connections\n                }\n            } else {\n                // If the adjacent vertex is visited, update the lowest reachable time\n                // for the current vertex\n                low[u] = Math.min(id[v], low[u]);\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def criticalConnections(self, v, adj):\n        # Function to find critical connections in a graph\n\n        def Articulation_Point(u):\n            # Function to find Articulation Point and critical connections\n\n            low[u] = time[0]\n            disc[u] = time[0]\n            time[0] += 1\n            visited[u] = True\n            for v in adj[u]:\n                if visited[v] == False:\n                    parent[v] = u\n                    Articulation_Point(v)\n\n                    low[u] = min(low[u], low[v])\n\n                    if low[v] > disc[u]:\n                        ans.append(sorted([u, v]))\n\n                elif parent[u] != v:\n                    low[u] = min(low[u], disc[v])\n\n        ans = []\n\n        # Initializing low, disc, parent, time, and visited arrays\n        low = [sys.maxsize for i in range(v)]\n        disc = [sys.maxsize for i in range(v)]\n        parent = [-1 for i in range(v)]\n        time = [0]\n        visited = [False for i in range(v)]\n\n        # Calling Articulation_Point function for each unvisited vertex\n        for i in range(v):\n            if visited[i] == False:\n                Articulation_Point(i)\n\n        return sorted(ans)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution {\n    private List<List<int>> g, ans;\n    private List<int> disc, low, par;\n    private int time = 0;\n\n    private void Dfs(int u) {\n        disc[u] = low[u] = time++;\n\n        foreach (int v in g[u]) {\n            if (disc[v] == -1) {\n                par[v] = u;\n                Dfs(v);\n                if (low[v] > disc[u]) {\n                    ans.Add(new List<int>() { u, v });\n                }\n                low[u] = Math.Min(low[u], low[v]);\n            } else if (v != par[u]) {\n                low[u] = Math.Min(low[u], disc[v]);\n            }\n        }\n    }\n\n    public List<List<int>> criticalConnections(int V, List<int>[] adj) {\n        g = new List<List<int>>(V);\n        par = Enumerable.Repeat(-1, V).ToList();\n        low = Enumerable.Repeat(-1, V).ToList();\n        disc = new List<int>(low);\n        ans = new List<List<int>>();\n\n        for (int i = 0; i < V; i++) {\n            g.Add(new List<int>(adj[i]));\n        }\n\n        for (int i = 0; i < V; i++) {\n            if (disc[i] == -1) {\n                Dfs(i);\n            }\n        }\n\n        foreach (var connection in ans) {\n            if (connection[0] > connection[1]) {\n                int temp = connection[0];\n                connection[0] = connection[1];\n                connection[1] = temp;\n            }\n        }\n\n        ans.Sort((a, b) => a[0].CompareTo(b[0]) == 0 ? a[1].CompareTo(b[1])\n                                                     : a[0].CompareTo(b[0]));\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\nclass Solution {\n    /**\n     * Function to find critical connections in a graph.\n     * @param {number} V - The number of vertices in the graph.\n     * @param {number[][]} adj - The adjacency list representation of the graph.\n     * @return {number[][]} - The critical connections in the graph.\n     */\n    criticalConnections(V, adj) {\n        // Create adjacency list\n        let g = new Array(V);\n        for (let i = 0; i < V; i++) {\n            g[i] = [];\n            for (let j = 0; j < adj[i].length; j++) {\n                g[i].push(adj[i][j]);\n            }\n        }\n\n        let ans = []; // Initialize array to store critical connections\n        let disc = new Array(V).fill(-1); // Initialize array to store discovery times\n        let low = new Array(V).fill(\n            -1); // Initialize array to store lowest reachable vertices\n        let par = new Array(V).fill(-1); // Initialize array to store parent vertices\n        let time = 0;                    // Initialize variable to keep track of time\n\n        // Depth First Search (DFS) function\n        function dfs(u) {\n            disc[u] = low[u] = time++;\n\n            // Iterate through adjacent vertices of u\n            for (let i = 0; i < g[u].length; i++) {\n                let v = g[u][i];\n\n                if (disc[v] === -1) {\n                    par[v] = u;\n                    dfs(v);\n\n                    // Check if edge (u, v) is a critical connection\n                    if (low[v] > disc[u]) {\n                        ans.push([ u, v ]);\n                    }\n\n                    low[u] = Math.min(low[u], low[v]);\n                } else if (v !== par[u]) {\n                    low[u] = Math.min(low[u], low[v]);\n                }\n            }\n        }\n\n        // Apply DFS to each vertex if not visited\n        for (let i = 0; i < V; i++) {\n            if (disc[i] === -1) {\n                dfs(i);\n            }\n        }\n\n        // Sort the critical connections based on vertex numbers\n        for (let i = 0; i < ans.length; i++) {\n            if (ans[i][0] > ans[i][1]) {\n                [ans[i][0], ans[i][1]] = [ ans[i][1], ans[i][0] ];\n            }\n        }\n\n        // Sort the critical connections based on vertex numbers\n        ans.sort((a, b) => {\n            if (a[0] === b[0]) {\n                return a[1] - b[1];\n            } else {\n                return a[0] - b[0];\n            }\n        });\n\n        return ans; // Return the critical connections\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}