{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703676,
            "title": "Cross the Bridge",
            "titleSlug": "cross-the-bridge4916",
            "content": "<p><span style=\"font-size:18px\">Given a string&nbsp;S of &#39;$&#39;s and &#39;.&#39;s. &#39;$&#39; are planks on the bridge and &#39;.&#39;s are the broken sections of the bridge. You can jump up to only that much gap (number of &#39;.&#39;)&nbsp;of the broken section which you have already jumped over previously&nbsp;otherwise it takes you 1 day to learn how to jump that far.&nbsp;You have to find how many days will you take to cross the bridge.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS = $$..$$...$.$</span><span style=\"font-size:18px\">\n<strong>Output:</strong>\n2\n<strong>Explanation:</strong>\n1 day is required to practice\nfor 2 dots.Then next time 3 \ndots are encountered so 1 more\nday to practice. Then since 1 \ndot is there you can easily do\nthat because you have already \nmastered for 3 dots.</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS = $$$$.$\n<strong>Output:</strong></span><span style=\"font-size:20px\">\n</span><span style=\"font-size:18px\">1\n<strong>Explanation:\n</strong>Only one is required to learn\nto jump 1 gap.</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>findDays()</strong>&nbsp;which takes the string S<strong>&nbsp;</strong>as input&nbsp;parameters&nbsp;and returns&nbsp;the total number of days you would take to cross the bridge.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|S|)<br />\n<strong>Expected Space Complexity: </strong>O(|S|)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; T &le; 100<br />\n1 &le; |S| &le; 10<sup>4</sup><br />\n<strong>S</strong> will consist of only the characters &#39;$&#39; and &#39;.&#39;<br />\nThe first and the last characters of <strong>S</strong> will be &#39;$&#39;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S consisting of '$' (planks) and '.' (broken sections) representing a bridge, determine the minimum number of days required to cross the bridge. You can jump over a broken section ('.'s) if you have previously jumped over a section of equal or greater length. Otherwise, it takes one day to learn to jump that far.",
                "constraints": [
                    "1 <= |S| <= 10^4",
                    "S consists only of '$' and '.' characters.",
                    "The first and last characters of S will be '$'."
                ],
                "testcases": [
                    {
                        "input": "$$..$$...$.$",
                        "output": "2",
                        "explanation": "Initially, you can jump 0 spaces.  The first gap is of length 2, requiring 1 day of practice.  The next gap is of length 3, requiring another day of practice since you've only jumped a max of 2.  The last gap is of length 1, which you can now jump since you've practiced jumping up to 3 spaces."
                    },
                    {
                        "input": "$$$$.$",
                        "output": "1",
                        "explanation": "Only one day is required to learn to jump 1 space."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Perform brute force.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution{   \npublic:\n    int findDays(string S){\n        int count=0;\n\t    int max=0;\n\t    int f=0;\n\t    // Loop For every character in S\n\t    for(int i=1;i<S.length();i++)\n\t    {\n\t        // Character at i is '.' increase count by 1\n\t        if(S[i]=='.')\n\t            count++;\n\t        // if sequence of '.' ends\n\t        if(S[i]=='$' && S[i-1]=='.')\n\t        {\n\t            // check if i have jumped greater than length\n\t            // if not then increase your answer by 1\n\t            // else do nothing and continue\n\t            if(max<count)\n\t            {\n\t                max=count;\n\t                f++;\n\t                \n\t            }\n\t            count=0;\n\t        }\n\t    }\n\t    return f;\n    }\n};\n    ",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution{   \n    static int findDays(String S){\n        int count=0;\n\t    int max=0;\n\t    int f=0;\n\t    // Loop For every character in S\n\t    for(int i=1;i<S.length();i++)\n\t    {\n\t        // Character at i is '.' increase count by 1\n\t        if(S.charAt(i)=='.')\n\t            count++;\n\t        // if sequence of '.' ends\n\t        if(S.charAt(i)=='$' && S.charAt(i-1)=='.')\n\t        {\n\t            // check if i have jumped greater than length\n\t            // if not then increase your answer by 1\n\t            // else do nothing and continue\n\t            if(max<count)\n\t            {\n\t                max=count;\n\t                f++;\n\t            }\n\t            count=0;\n\t        }\n\t    }\n\t    return f;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    def findDays (self, S):\n        count=0\n        maxi=0\n        f=0\n        # Loop For every character in S\n        for i in range(1,len(S)):\n            # Character at i is '.' increase count by 1\n            if S[i]=='.':\n                count=count+1\n            # if sequence of '.' ends\n            if S[i]=='$' and S[i-1]=='.':\n                # check if i have jumped greater than length\n                # if not then increase your answer by 1\n                # else do nothing and continue\n                if(maxi<count):\n                    maxi=count\n                    f=f+1\n                count=0\n        return f",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find number of days since 1st January of given year.\n    findDays(S)\n    {\n        let count = 0;\n        let maxi = 0;\n        let f = 0;\n        // Loop For every character in S\n        for (let i = 1; i < S.length; i++) {\n            // Character at i is '.' increase count by 1\n            if (S[i] == '.') {\n                count = count + 1;\n            }\n            // if sequence of '.' ends\n            if (S[i] == '$' && S[i - 1] == '.') {\n                // check if i have jumped greater than length\n                // if not then increase your answer by 1\n                // else do nothing and continue\n                if (maxi < count) {\n                    maxi = count;\n                    f = f + 1;\n                }\n                count = 0;\n            }\n        }\n        return f;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}