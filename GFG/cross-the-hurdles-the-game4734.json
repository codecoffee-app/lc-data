{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703279,
            "title": "Cross the hurdles: The Game",
            "titleSlug": "cross-the-hurdles-the-game4734",
            "content": "<p><span style=\"font-size:18px\">You are playing a video-game in which your character has to cross N hurdles. Initially, your character has N energies states corresponding to each hurdle. All the hurdles have their respective heights.<br />\r\nNow, your character can only jump over a hurdle if its energy at that instant is greater than or equal to the hurdle&#39;s height.<br />\r\nWhen you cross a hurdle of height h, your current energy gets reduced by h. The remaining energy can be rolled over for subsequent hurdles.<br />\r\nAlso, after your character crosses a hurdle, it gets an energy boost that is equal to the position of that hurdle(1,2,3....).<br />\r\nSo, given N, N energy states, and N hurdle heights; you need to find whether you can win the game or not. You can only win if your character can successfully cross all the hurdles.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039Input :</strong> \r\noriginal_energies[ ] = {1, 1, 1}\r\nhurdles_heights[ ] = {0, 2, 4}\r\n<strong>Output :</strong> You Win! 3\r\n<strong>Explanation:\r\n</strong>Your inital energy for 1st hurdle is 1. \r\nThe hurdle height is 0. You can cross it. \r\nThe energy 1-0 =1 get rolled over to the \r\nnext state. Also, you gets a boost of 1 since \r\nyou crossed the first hurdle. The total \r\nenergy of the next state becomes 1(rolled over)\r\n+1(boost)+1(2nd states energy)=3. Now 3&gt;= 2, \r\nso you can cross it. The energy 3-2=1 get rolled \r\nover. Also, you get a boost of 2 since you \r\ncrossed 2nd hurdle. So, the next state&#39;s total \r\nenergy becomes 1(rolled over)+2(boost)+\r\n1(state&#39;s energy)=4. Now, 4&gt;=4, so you can cross \r\nit. The remeining energy is 4 - 4=0 plus the \r\nboost of 3 since you crossed hurdle 3. \r\nThe return energy at the end is <strong>3</strong>. \r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> \r\noriginal_energies[ ] = {1, 1, 1} \r\nhurdles_heights[ ] = {8, 4, 6}<strong>\r\nOutput :</strong>  Game Over\r\n</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>game()</strong> that takes an array of original energy&nbsp;<strong>(original_energies)</strong>, array of hurdles&nbsp;height&nbsp;<strong>(hurdles_heights),&nbsp;</strong>sizeOfArray <strong>(n),</strong>&nbsp;and return the remaining energy at the end if it is not possible then return <strong>-1</strong>. The driver code takes care of the printing.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup><br />\r\n0 &le; A[i] &le; 10<sup>7</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A character in a video game must cross N hurdles. The character starts with N energy states, one for each hurdle. To jump a hurdle, the character's current energy must be greater than or equal to the hurdle's height. When a hurdle of height 'h' is crossed, the character's energy is reduced by 'h', and the remaining energy carries over to the next hurdle. Additionally, after each successful jump, the character gains an energy boost equal to the hurdle's position (1, 2, 3...). Determine if the character can successfully cross all hurdles and win the game.  If they can, return the remaining energy at the end. If not, return -1.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= A[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "original_energies[] = {1, 1, 1}\nhurdles_heights[] = {0, 2, 4}",
                        "output": "3",
                        "explanation": "The character starts with 1 energy. The first hurdle has a height of 0, which is less than or equal to the starting energy. So the character can cross it. The energy 1 - 0 = 1 rolls over to the next state. A boost of 1 is received. The total energy is now 1(rolled over) + 1(boost) + 1(initial energy) = 3. The second hurdle has a height of 2. Since 3 >= 2, the character can cross it. The energy 3 - 2 = 1 rolls over, and a boost of 2 is applied. The total energy is now 1 + 2 + 1 = 4. The third hurdle has a height of 4. Since 4 >= 4, the character can cross it. The remaining energy is 4 - 4 = 0, and a boost of 3 is added. The final energy is 0 + 3 = 3. The character wins the game."
                    },
                    {
                        "input": "original_energies[] = {1, 1, 1}\nhurdles_heights[] = {8, 4, 6}",
                        "output": "-1",
                        "explanation": "The character starts with 1 energy. The first hurdle has a height of 8, which is greater than the starting energy. The character cannot cross the hurdle and the game is over."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse the array and store the energy</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to calculate the energy remaining after crossing the hurdles\nlong long int game(int original_energies[], int hurdles_heights[], int n)\n{\n    // Variable to store the remaining energy\n    long long energy = 0;\n    // Flag to check if energy is not enough to cross a hurdle\n    bool flag = false;\n    \n    // Loop over all the hurdles\n    for(int i = 0; i < n; i++)\n    {\n        // Check if current energy plus original energy is enough to cross the hurdle\n        if(energy + original_energies[i] >= hurdles_heights[i])\n        {\n            // Update the energy after crossing the hurdle\n            energy = (i + 1) + energy + original_energies[i] - hurdles_heights[i];\n        }\n        else\n        {\n            // Set flag to true if energy is not enough to cross the hurdle\n            flag = true;\n            // Break out of the loop as energy is not enough to continue\n            break;\n        }\n    }\n    \n    // Check if all hurdles are crossed successfully\n    if(flag == false)\n        return energy; // Return the remaining energy\n    \n    // Return -1 if energy is not enough to cross all hurdles\n    else\n        return -1;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long game(int[] original_energies, int[] hurdles_heights, int sizeOfArray)\n    {\n        // Variable to store the remaining energy\n        long energy = 0;\n        // Flag to check if energy is not enough to cross a hurdle\n        bool flag = false;\n        \n        // Loop over all the hurdles\n        for(int i = 0; i < sizeOfArray; i++)\n        {\n            // Check if current energy plus original energy is enough to cross the hurdle\n            if(energy + original_energies[i] >= hurdles_heights[i])\n            {\n                // Update the energy after crossing the hurdle\n                energy = (i + 1) + energy + original_energies[i] - hurdles_heights[i];\n            }\n            else\n            {\n                // Set flag to true if energy is not enough to cross the hurdle\n                flag = true;\n                // Break out of the loop as energy is not enough to continue\n                break;\n            }\n        }\n        \n        // Check if all hurdles are crossed successfully\n        if(flag == false)\n            return energy; // Return the remaining energy\n        \n        // Return -1 if energy is not enough to cross all hurdles\n        else\n            return -1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}