{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710253,
            "title": "Cut woods",
            "titleSlug": "cut-woods",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>A[]&nbsp;</strong>of&nbsp;<strong>N</strong>&nbsp;integers, where&nbsp;<strong>A[i]</strong>&nbsp;denotes the height of&nbsp;<strong>i<sup>th</sup>&nbsp;</strong>tree.&nbsp;<br /><strong>Geek</strong>&nbsp;needs to cut down&nbsp;<strong>M</strong>&nbsp;meters of wood. He has a woodcutting machine that works as follows:&nbsp; Set the blade at a height parameter&nbsp;<strong>H,&nbsp;</strong>and the machine cuts off all trees having a height greater than&nbsp;<strong>H</strong>. The trees having less than height&nbsp;<strong>H</strong>&nbsp;remains intact.<br />Since <strong>Geek</strong>&nbsp;is an environmentalist, he doesn't want to cut woods more than necessary, so he set the height&nbsp;<strong>H</strong>&nbsp;as high as possible.<br />Find the maximum height <strong>H&nbsp;</strong>of the blade that still allows to cutoff at least <strong>M</strong>&nbsp;meters of wood.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nA[] = {20, 15, 10, 17}\nM = 7\n<strong>Output: </strong>15\n<strong>Explanation:</strong> \nSet the height parameter to 15, then Geek can chop:\n  1.5 metres from first tree\n  2. 0 metres from second tree\n  3. 0 metres from third tree\n  4. 2 metres from fourth tree\n  So in total Geek chopped 5 + 2 = 7 metres of wood.\n\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Example 2:\n\nInput:</strong>\nA[] = {4, 42, 40, 26, 46}\nM = 20\n<strong>Output: </strong>36\n</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>maxHeight</strong><strong>()</strong>&nbsp;which takes an array and an integer and returns an integer as output.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N *logN)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N&nbsp;&lt;= 10<sup>6</sup><br />1 &lt;= A[i]&nbsp;&lt;=10<sup>6</sup><br />1 &lt;= M &lt;=2 * 10</span><sup><span style=\"font-size: 18px;\">6</span></sup></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `A` of `N` integers, where `A[i]` represents the height of the i-th tree.  The task is to find the maximum height `H` of a blade for a woodcutting machine that allows to cut off at least `M` meters of wood. The machine cuts all trees having a height greater than `H`. The goal is to maximize `H` while still meeting or exceeding the wood requirement `M`.",
                "constraints": [
                    "1 <= N <= 10^6",
                    "1 <= A[i] <= 10^6",
                    "1 <= M <= 2 * 10^6"
                ],
                "testcases": [
                    {
                        "input": "A = {20, 15, 10, 17}, M = 7",
                        "output": "15",
                        "explanation": "If the height is set to 15, the machine cuts 5 meters from the first tree (20 - 15 = 5) and 2 meters from the fourth tree (17 - 15 = 2), totaling 7 meters."
                    },
                    {
                        "input": "A = {4, 42, 40, 26, 46}, M = 20",
                        "output": "36",
                        "explanation": "If the height is set to 36, the machine cuts 6 meters from the second tree (42 - 36 = 6), 4 meters from the third tree (40 - 36 = 4), and 10 meters from the last tree (46 - 36 = 10), totaling 20 meters."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If you set a height parameter to something let&rsquo;s say&nbsp;<strong>x</strong>&nbsp;and you are able to remove atleast&nbsp;<strong>B</strong>&nbsp;metres amount of wood then for every parameter less than&nbsp;<strong>x</strong>&nbsp;you can remove atleast&nbsp;<strong>B</strong>&nbsp;metres of wood.</span></p>",
            "<p><span style=\"font-size:18px\">This means you need to find the last&nbsp;<strong>x</strong>&nbsp;such that for every height parameter greater than&nbsp;<strong>x</strong>&nbsp;you cannot remove atleast&nbsp;<strong>B</strong>&nbsp;metres of wood.</span></p>\n\n<p><span style=\"font-size:18px\">So we just to binary search for this&nbsp;<strong>x</strong>.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    //Function to find the maximum height of the box.\n    int maxHeight(vector<int>&A, int B){\n        int hi = 0,ans, n = A.size();\n        \n        //finding the maximum height among all the boxes.\n        for(int i = 0; i < n; i++){\n          hi = max(hi,A[i]);\n        }\n        int lo = 0;\n        \n        //applying binary search to find the maximum height possible\n        //by comparing with the given maximum allowed height.\n        while(lo <= hi)\n        {\n            long long int mid = (lo+hi)/2,sum = 0;\n            \n            //calculating the total difference of heights of each box\n            //from the current mid height.\n            for(int i = 0; i < n; i++)\n                if(A[i] > mid)\n                    sum += A[i] - mid;\n            \n            //if the total difference is greater than the given maximum\n            //allowed sum, then we store the mid height and update the\n            //lowest possible height by setting start = mid + 1.\n            if(sum > B)\n            {\n                ans = mid;\n                lo = mid+1;              \n            }\n            \n            //if the total difference is less than the given maximum\n            //allowed sum, then we update the highest possible height\n            //by setting end = mid - 1.\n            else if(sum < B)\n                hi = mid-1;\n            \n            //if the total difference is equal to the given maximum\n            //allowed sum, then we return the mid height as the maximum\n            //possible height.\n            else\n                return mid;\n        }\n        //returning the maximum height of the box.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}