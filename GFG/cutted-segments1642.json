{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701901,
            "title": "Maximize The Cut Segments",
            "titleSlug": "cutted-segments1642",
            "content": "<p><span >Given an integer <strong>n</strong> denoting the Length of a line segment. You need to cut the line segment in such&nbsp;a way that the cut length of a line segment each time is either <strong>x</strong> , <strong>y</strong> or <strong>z</strong>. Here x, y, and z are integers.<br />After performing&nbsp;all the cut operations, your<strong> </strong>total number of cut segments must be maximum. Return the maximum number of cut segments possible.</span></p>\n<p><span ><strong>Note</strong>:&nbsp;if no segment can be cut then return 0.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 4, x = 2, y = 1, z = 1\n<strong>Output: </strong>4<strong>\nExplanation: </strong>Total length is 4, and the cut lengths are 2, 1 and 1.&nbsp; We can make maximum 4 segments each of length 1.\n</span></pre>\n<pre><span ><strong>Input: </strong>n = 5, x = 5, y = 3, z = 2\n<strong>Output: </strong>2<strong>\nExplanation: </strong>Here total length is 5, and the cut lengths are 5, 3 and 2. We can make two segments of lengths 3 and 2.<br /></span></pre>\n<pre><span ><strong>Input: </strong>n = 7, x = 8, y = 9, z = 10\n<strong>Output: </strong>0<strong>\nExplanation: </strong>Here the total length is 7, and the cut lengths are 8, 9, and 10. We cannot cut the segment into lengths that fully utilize the segment, so the output is 0.</span></pre>\n<p><span ><strong>Constraints</strong><br />1 &lt;= n, x, y, z &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use dynamic programming to maximize the number of segments by checking cuts of length x, y, and z for each segment length up to n.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "oyo-rooms"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the maximum number of cuts.\n    int maximizeTheCuts(int n, int x, int y, int z) {\n        vector<int> arr(3);\n        arr[0] = x;\n        arr[1] = y;\n        arr[2] = z;\n\n        // creating a dp[] array and initializing all values with 0.\n        vector<int> dp(n + 1, 0);\n\n        for (int j = 0; j < 3; j++) {\n            // updating the point where we can reach from x,y,z.\n            for (int i = 1; i <= n; i++) {\n                // we will update dp[i] if the point is x,y,z or if the\n                // points are visited by some combination of x,y,z.\n                if (i == arr[j] or (i > arr[j] and dp[i - arr[j]] > 0))\n                    dp[i] = max(dp[i - arr[j]] + 1, dp[i]);\n            }\n        }\n        // returning the result.\n        return dp[n];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find the maximum number of cuts.\n    public int maximizeCuts(int n, int x, int y, int z) {\n        int arr[] = new int[3];\n        arr[0] = x;\n        arr[1] = y;\n        arr[2] = z;\n\n        // creating a dp[] array and initializing all values with 0.\n        int dp[] = new int[n + 1];\n        Arrays.fill(dp, 0);\n\n        for (int j = 0; j < 3; j++) {\n            // updating the point where we can reach from x,y,z.\n            for (int i = 1; i <= n; i++) {\n                // we will update dp[i] if the point is x,y,z or if the\n                // points are visited by some combination of x,y,z.\n                if (i == arr[j] || (i > arr[j] && dp[i - arr[j]] > 0))\n                    dp[i] = Math.max(dp[i - arr[j]] + 1, dp[i]);\n            }\n        }\n        // returning the result.\n        return dp[n];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nimport sys\n\nsys.setrecursionlimit(10500)\n\n\nclass Solution:\n    #Function to find the maximum number of cuts.\n    def maximizeTheCuts(self, n, x, y, z):\n\n        #creating a dp[] array to store cut at each length\n        #and initializing all values with -1.\n        dp = [-1] * (n + 1)\n\n        dp[0] = 0\n\n        for i in range(n + 1):\n\n            #if certain length is not possible we continue.\n            if (dp[i] == -1):\n                continue\n\n            #we will update dp[i] if a segment of x,y or z is possible.\n            if (i + x <= n):\n                dp[i + x] = (max(dp[i + x], dp[i] + 1))\n\n            if (i + y <= n):\n                dp[i + y] = (max(dp[i + y], dp[i] + 1))\n\n            if (i + z <= n):\n                dp[i + z] = (max(dp[i + z], dp[i] + 1))\n\n        #if no segment can be cut then we return 0.\n        if (dp[n] == -1):\n            return 0\n\n        #returning the result.\n        return dp[n]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    // Function to find the maximum number of cuts.\n    public int maximizeTheCuts(int n, int x, int y, int z) {\n        int[] arr = new int[3];\n        arr[0] = x;\n        arr[1] = y;\n        arr[2] = z;\n\n        // creating a dp[] array and initializing all values with 0.\n        int[] dp = new int[n + 1];\n        for (int i = 0; i <= n; i++) {\n            dp[i] = 0;\n        }\n\n        for (int j = 0; j < 3; j++) {\n            // updating the point where we can reach from x,y,z.\n            for (int i = 1; i <= n; i++) {\n                // we will update dp[i] if the point is x,y,z or if the\n                // points are visited by some combination of x,y,z.\n                if (i == arr[j] || (i > arr[j] && dp[i - arr[j]] > 0)) {\n                    dp[i] = Math.Max(dp[i - arr[j]] + 1, dp[i]);\n                }\n            }\n        }\n        // returning the result.\n        return dp[n];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} n\n * @param {number} x\n * @param {number} y\n * @param {number} z\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the maximum number of cuts.\n    maximizeTheCuts(n, x, y, z) {\n        let arr = new Array(3);\n        arr[0] = x;\n        arr[1] = y;\n        arr[2] = z;\n\n        // creating a dp[] array and initializing all values with 0.\n        let dp = new Array(n + 1);\n        dp.fill(0);\n\n        for (let j = 0; j < 3; j++) {\n            // updating the point where we can reach from x,y,z.\n            for (let i = 1; i <= n; i++) {\n                // we will update dp[i] if the point is x,y,z or if the\n                // points are visited by some combination of x,y,z.\n                if (i == arr[j] || (i > arr[j] && dp[i - arr[j]] > 0))\n                    dp[i] = Math.max(dp[i - arr[j]] + 1, dp[i]);\n            }\n        }\n        // returning the result.\n        return dp[n];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}