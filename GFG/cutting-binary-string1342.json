{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703077,
            "title": "Cutting Binary String",
            "titleSlug": "cutting-binary-string1342",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong> containing 0's and 1's. You have to return the smallest positive integer <strong>C</strong>, such that the binary string can be cut into <strong>C</strong> pieces and each piece should be of the <strong>power of 5&nbsp;</strong> with no leading zeros.<br /><strong>Note:&nbsp;</strong>The string <strong>s&nbsp;</strong>is a binary string. And if no such cuts are possible, then return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\ns = \"101101101\"<strong>\nOutput: \n</strong>3\n<strong>Explanation: \n</strong>We can split the given string into \nthree 101s, where 101 is the binary \nrepresentation of 5.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>s = \"00000\"\n<strong>Output: \n</strong>-1\n<strong>Explanation: \n</strong>0 is not a power of 5.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Your task is to complete the function&nbsp;<strong>cuts()&nbsp;</strong>which take a single argument(string s). You need not take any input or print anything. Return an <strong>int C</strong> if the&nbsp;<strong>cut&nbsp;</strong>is possible else return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|s|*|s|*|s|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(|s|).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= |s| &lt;=50</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string **s** containing only 0's and 1's, determine the minimum number of cuts, **C**, needed to divide the string into substrings, where each substring represents a power of 5 in binary, and contains no leading zeros.  If no such division is possible, return -1.",
                "constraints": [
                    "1 <= |s| <= 50"
                ],
                "testcases": [
                    {
                        "input": "101101101",
                        "output": "3",
                        "explanation": "The string can be split into three substrings: \"101\", \"101\", and \"101\".  Each substring represents 5 in binary, which is a power of 5 (5^1)."
                    },
                    {
                        "input": "00000",
                        "output": "-1",
                        "explanation": "It's impossible to cut the string because \"0\" is not a power of 5, and substrings with leading zeros are not valid."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Using dynamic&nbsp;programming and storing the&nbsp;number of cuts till that point in the array and in last returning the Last element of the array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "walmart",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n\r\n    long long int num(int y)\r\n    {\r\n        if(y==0){return 1;}\r\n        long long int x=2;\r\n        for(int i=1;i<y;i++)\r\n        {\r\n            x=x<<1;\r\n        }\r\n        return x;\r\n    }\r\n    bool check(long long int n)\r\n    {\r\n        if(n==0){return false;}\r\n        if(n==1){return true;}\r\n        if(n%5!=0){return false;}\r\n        else{return check(n/5);}\r\n    }\r\n    int cuts(string s)\r\n    {\r\n        int l=s.length();\r\n        int dp[l+1];\r\n        dp[0]=0;\r\n        for(int i=1;i<=l;i++)\r\n        {\r\n            int index=i-1;\r\n            if(s[index]=='0'){dp[i]=-1;}\r\n            else\r\n            {\r\n                dp[i]=-1;\r\n                int t=1000;\r\n                long long int count=0;\r\n                for(int j=0;j<i;j++)\r\n                {\r\n                    if(s[index-j]=='1')\r\n                    {\r\n                        count+=num(j);\r\n                        if(check(count)&dp[index-j]!=-1)\r\n                        {\r\n                            int w=1+dp[index-j];\r\n                            t=(w<t)?w:t;\r\n                        }\r\n                    }\r\n                }\r\n                if(t!=1000){dp[i]=t;}\r\n            }\r\n        }\r\n        \r\n        return dp[l];\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    // Method to calculate the minimum number of cuts required\n    static int cuts(String s)\n    {\n        char c[]=s.toCharArray(); // Convert the string to a character array\n        int l=c.length; // Get the length of the array\n        int dp[]=new int[l+1]; // Create an array to store the minimum cuts for each position\n        dp[0]=0; // Set the first position to 0\n\n        // Loop through the array and calculate the minimum cuts for each position\n        for(int i=1;i<=l;i++)\n        {\n            int index=i-1;\n\n            // If the character is '0', set the minimum cuts to -1\n            if(c[index]=='0')\n            {\n                dp[i]=-1;\n            }\n            else\n            {\n                dp[i]=-1; // Set the minimum cuts to -1\n                int t=1000; // Initialize a variable to store the minimum cuts value\n                long count=0; // Initialize a variable to store the count of '1's\n\n                // Loop through the previous positions and calculate the count and minimum cuts\n                for(int j=0;j<i;j++)\n                {\n                    if(c[index-j]=='1') // If the character is '1'\n                    {\n                        count+=num(j); // Calculate the count by using a helper function\n                        if(check(count)&dp[index-j]!=-1) // Check if the count is valid and the previous position has a valid minimum cuts value\n                        {\n                            int w=1+dp[index-j]; // Calculate the minimum cuts for the current position\n                            t=(w<t)?w:t; // Update the minimum cuts value if necessary\n                        }\n                    }\n                }\n                if(t!=1000){\n                    dp[i]=t;\n                }\n            }\n        }\n        return dp[l]; // Return the minimum cuts value for the last position\n    }\n    \n    // Helper function to calculate the power of 2\n    static long num(int y)\n    {\n        if(y==0)return 1; // If the power is 0, return 1\n        long x=2; // Initialize x to 2\n        for(int i=1;i<y;i++)\n        {\n            x=x<<1; // Shift x to the left by 1\n        }\n        return x; // Return the result\n    }\n    \n    // Helper function to check if the number is divisible by 5\n    static boolean check(long n)\n    {\n        if(n==0){return false;} // If the number is 0, return false\n        if(n==1){return true;} // If the number is 1, return true\n        if(n%5!=0){return false;} // If the number is not divisible by 5, return false\n        else{return check(n/5);} // Recursively call the function with the quotient\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Method that returns the minimum number of cuts required\nclass Solution:\n    \n    # Function to calculate the minimum number of cuts\n    @staticmethod\n    def cuts(s: str) -> int:\n        \n        # Converting the string into a list of characters\n        c = list(s)\n        \n        # Getting the length of the list\n        l = len(c)\n        \n        # Creating a dynamic programming array\n        dp = [0] * (l+1)\n        \n        # Initializing the first element of the dp array\n        dp[0] = 0\n\n        # Looping from 1 to l+1\n        for i in range(1, l+1):\n            \n            # Getting the index of the current character\n            index = i-1\n            \n            # Checking if the current character is '0'\n            if c[index] == '0':\n                # If it is '0', then set dp[i] to -1 indicating that it is not possible to cut at this position\n                dp[i] = -1\n            else:\n                # If it is not '0'\n                dp[i] = -1\n                \n                # Initializing a variable t to store the minimum number of cuts\n                t = 1000\n                \n                # Initializing a variable count to keep track of the number of '1's encountered\n                count = 0\n                \n                # Looping from i-1 to 0\n                for j in range(i):\n                    \n                    # Checking if the character at index-j is '1'\n                    if c[index-j] == '1':\n                        # Updating the count by calculating the corresponding number using the num() function\n                        count += Solution.num(j)\n                        \n                        # Checking if the count satisfies the conditions and if the previous position dp[index-j] is not -1\n                        if Solution.check(count) and dp[index-j] != -1:\n                            # Calculating the number of cuts and storing it in variable w\n                            w = 1 + dp[index-j]\n                            \n                            # Updating the minimum number of cuts if w is smaller than t\n                            t = min(w, t)\n                \n                # Checking if t has been updated indicating that it is possible to make the current cut\n                if t != 1000:\n                    dp[i] = t\n        \n        # Returning the minimum number of cuts required\n        return dp[l]\n    \n    # Function to calculate the corresponding number\n    @staticmethod\n    def num(y):\n        # Checking the value of y\n        if y == 0:\n            # If y is 0, then return 1\n            return 1\n        else:\n            # If y is greater than 0, then calculate the number using bitwise left shift operator (<<)\n            x = 2\n            for i in range(1, y):\n                x = x << 1\n            return x\n    \n    # Function to check if the given number satisfies the conditions\n    @staticmethod\n    def check(n):\n        # Checking the value of n\n        if n == 0:\n            # If n is 0, then return False\n            return False\n        elif n == 1:\n            # If n is 1, then return True\n            return True\n        elif n % 5 != 0:\n            # If n is not divisible by 5, then return False\n            return False\n        else:\n            # If n is divisible by 5, then recursively call the check() function with n/5\n            return Solution.check(n//5)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to check whether the list is palindrome.\n    cuts(s) {\n        let c = s.split('');\n        let l = c.length;\n        let dp = Array(l + 1).fill(0);\n        dp[0] = 0;\n\n        for (let i = 1; i <= l; i++) {\n            let index = i - 1;\n            if (c[index] === '0') {\n                dp[i] = -1;\n            } else {\n                dp[i] = -1;\n                let t = 1000;\n                let count = 0;\n\n                for (let j = 0; j < i; j++) {\n                    if (c[index - j] === '1') {\n                        count += this.num(j);\n                        if (this.check(count) && dp[index - j] !== -1) {\n                            let w = 1 + dp[index - j];\n                            t = Math.min(w, t);\n                        }\n                    }\n                }\n\n                if (t !== 1000) {\n                    dp[i] = t;\n                }\n            }\n        }\n\n        return dp[l];\n    }\n\n    num(y) {\n        if (y === 0) {\n            return 1;\n        } else {\n            let x = 2;\n            for (let i = 1; i < y; i++) {\n                x = x << 1;\n            }\n            return x;\n        }\n    }\n\n    check(n) {\n        if (n === 0) {\n            return false;\n        } else if (n === 1) {\n            return true;\n        } else if (n % 5 !== 0) {\n            return false;\n        } else {\n            return this.check(Math.floor(n / 5));\n        }\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public int cuts(string s)\n    {\n        if (s == null || s.Length == 0)\n        {\n            return -1;\n        }\n        \n        int l = s.Length;\n        int[] dp = new int[l+1];\n        dp[0] = 0;\n        for (int i = 1; i <= l; i++)\n        {\n            int index = i-1;\n            if (s[index] == '0')\n            {\n                dp[i] = -1;\n            }\n            else\n            {\n                dp[i] = -1;\n                int t = 1000;\n                long count = 0;\n                for (int j = 0; j < i; j++)\n                {\n                    if (s[index-j] == '1')\n                    {\n                        count += num(j);\n                        if (check(count) && dp[index-j] != -1)\n                        {\n                            int w = 1 + dp[index-j];\n                            t = (w < t) ? w : t;\n                        }\n                    }\n                }\n                if (t != 1000)\n                {\n                    dp[i] = t;\n                }\n            }\n        }\n        \n        return dp[l];\n    }\n    \n    private long num(int y)\n    {\n        if (y == 0)\n        {\n            return 1;\n        }\n        long x = 2;\n        for (int i = 1; i < y; i++)\n        {\n            x = x << 1;\n        }\n        return x;\n    }\n    \n    private bool check(long n)\n    {\n        if (n == 0)\n        {\n            return false;\n        }\n        if (n == 1)\n        {\n            return true;\n        }\n        if (n % 5 != 0)\n        {\n            return false;\n        }\n        else\n        {\n            return check(n / 5);\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}