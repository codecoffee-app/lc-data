{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713980,
            "title": "Cutting Rectangles",
            "titleSlug": "cutting-rectangles--170647",
            "content": "<p><span style=\"font-size:18px\">Given a&nbsp;rectangle of dimensions <strong>L</strong>&nbsp;x&nbsp;<strong>B</strong>&nbsp;find the minimum number (<strong>N</strong>) of identical squares of maximum side that can be cut out&nbsp;from that rectangle so that no residue remains in the rectangle. Also find the dimension <strong>K</strong>&nbsp;of that square.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> L = 2, B = 4\r\n<strong>Output:</strong> N = 2, K = 2\r\n<strong>Explaination:</strong> 2 squares of 2x2 dimension.</span>\r\n\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> L = 6, B = 3\r\n<strong>Output:</strong> N = 2, K = 3\r\n<strong>Explaintion:</strong> 2 squares of 3x3 dimension. </span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>minimumSquares()</strong> which takes L and&nbsp;B as input parameters and returns a list of 2 integers containing&nbsp;the values of N and K respectively.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log min(L, B))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; L, B &le; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a rectangle with length **L** and breadth **B**, determine the minimum number (**N**) of identical squares with the maximum possible side length that can be cut from the rectangle without any remaining area. Also, find the side length (**K**) of each square.",
                "constraints": [
                    "1 <= L, B <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "L = 2, B = 4",
                        "output": "N = 2, K = 2",
                        "explanation": "The rectangle can be divided into 2 squares of size 2x2."
                    },
                    {
                        "input": "L = 6, B = 3",
                        "output": "N = 2, K = 3",
                        "explanation": "The rectangle can be divided into 2 squares of size 3x3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try using the common factors of length and breadth.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amdocs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n// Function to calculate the greatest common divisor of two numbers using Euclidean algorithm\nclass Solution{\npublic:\n    long long int gcd(long long int n, long long int m){\n        if(m == 0)\n            return n;\n        return gcd(m, n%m);\n    }\n\n    // Function to calculate the minimum number of squares that can be formed from given length and breadth\n    vector<long long int> minimumSquares(long long int L, long long int B)\n    {\n        long long int x = gcd(L, B);\n        // Array to store the minimum number of squares and the greatest common divisor\n        vector<long long int> ans;\n        // Calculating the minimum number of squares\n        ans.push_back((L*B)/(x*x));\n        // Storing the greatest common divisor\n        ans.push_back(x);\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    // Function to calculate the greatest common divisor of two numbers\n    long gcd(long n, long m){\n        if(m == 0)\n            return n;\n        return gcd(m, n%m);\n    }\n\n    // Function to find the minimum number of squares that can be formed with two given dimensions\n    List<Long> minimumSquares(long L, long B)\n    {\n        // Calculating the greatest common divisor of L and B\n        long x = gcd(L, B);\n        List<Long> ans = new ArrayList<>();\n        \n        // Calculating the minimum number of squares\n        ans.add((L*B)/(x*x));\n        \n        // Adding the greatest common divisor to the list\n        ans.add(x);\n        \n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import math\r\n\r\nclass Solution:\r\n    def minimumSquares(self, L, B):\r\n        # Finding the greatest common divisor of L and B\r\n        x = math.gcd(L,B)\r\n        # Calculating the minimum number of squares required by dividing L*B by the square of the gcd\r\n        return (L*B//(x*x), x)",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} L\n * @param {number} B\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to find the minimum number of squares.\n    minimumSquares(L, B)\n    {\n        // Finding the greatest common divisor of L and B\n        const x = this.gcd(L, B);\n        // Calculating the minimum number of squares required by dividing L*B by the square of the gcd\n        return [L*B/(x*x), x];\n    }\n\n    //Function to find the greatest common divisor of two numbers.\n    gcd(a, b) {\n        if (b === 0) {\n            return a;\n        }\n        return this.gcd(b, a % b);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public List<long> minimumSquares(long L, long B)\n    {\n        long x = gcd(L, B);\n        // Array to store the minimum number of squares and the greatest common divisor\n        List<long> ans = new List<long>();\n        // Calculating the minimum number of squares\n        ans.Add((L*B)/(x*x));\n        // Storing the greatest common divisor\n        ans.Add(x);\n        return ans;\n    }\n\n    public long gcd(long n, long m)\n    {\n        if(m == 0)\n            return n;\n        return gcd(m, n%m);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}