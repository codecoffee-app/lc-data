{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704686,
            "title": "Cutting Rectangles",
            "titleSlug": "cutting-rectangles3659",
            "content": "<p><span style=\"font-size:18px\">Given a&nbsp;rectangle of dimensions <strong>L</strong>&nbsp;x&nbsp;<strong>B</strong>&nbsp;find the minimum number (<strong>N</strong>) of identical squares of maximum side that can be cut out&nbsp;from that rectangle so that no residue remains in the rectangle. Also find the dimension <strong>K</strong>&nbsp;of that square.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> L = 2, B = 4\r\n<strong>Output:</strong> N = 2, K = 2\r\n<strong>Explaination:</strong> 2 squares of 2x2 dimension.</span>\r\n\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> L = 6, B = 3\r\n<strong>Output:</strong> N = 2, K = 3\r\n<strong>Explaintion:</strong> 2 squares of 3x3 dimension. </span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>minimumSquares()</strong> which takes L and&nbsp;B as input parameters and returns a list of 2 integers containing&nbsp;the values of N and K respectively.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log min(L, B))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; L, B &le; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a rectangle with dimensions L x B, find the minimum number (N) of identical squares of maximum side length that can be cut out from the rectangle so that no residue remains. Also, find the dimension (K) of that square.",
                "constraints": [
                    "1 <= L, B <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "L = 2, B = 4",
                        "output": "N = 2, K = 2",
                        "explanation": "Two 2x2 squares can be cut from the 2x4 rectangle."
                    },
                    {
                        "input": "L = 6, B = 3",
                        "output": "N = 2, K = 3",
                        "explanation": "Two 3x3 squares can be cut from the 6x3 rectangle."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try using the common factors of length and breadth.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amdocs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution{\r\npublic:\r\n    long long int gcd(long long int n, long long int m){\r\n        if(m == 0)\r\n            return n;\r\n        return gcd(m, n%m);\r\n    }\r\n\r\n    vector<long long int> minimumSquares(long long int L, long long int B)\r\n    {\r\n        long long int x = gcd(L, B);\r\n        vector<long long int> ans;\r\n        ans.push_back((L*B)/(x*x));\r\n        ans.push_back(x);\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public List<long> minimumSquares(long L, long B)\n    {\n        long x = gcd(L, B);\n        List<long> ans = new List<long>();\n        ans.Add((L*B)/(x*x));\n        ans.Add(x);\n        return ans;\n    }\n    \n    public long gcd(long n, long m){\n        if(m == 0)\n            return n;\n        return gcd(m, n%m);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}