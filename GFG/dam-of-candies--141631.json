{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706064,
            "title": "Dam of Candies",
            "titleSlug": "dam-of-candies--141631",
            "content": "<p><span style=\"font-size:18px\">Geek wants to make a special space for candies on his bookshelf. Currently, it has <strong>N</strong> books, each of whose height is represented by the array&nbsp;<strong>height[]</strong>&nbsp;and has&nbsp;<strong>unit width</strong>.<br />\nHelp him select <strong>2</strong> books such that he can store maximum candies between them by removing all the other books from between the selected books. The task is to find out the area between two&nbsp;books that can hold the maximum candies without changing the original position of selected books.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 3, height[] = {1, 3, 4}</span>\n<span style=\"font-size:18px\"><strong>Output:</strong> 1</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\n1. Area between book of height 1 and book of \nheight 3 is 0 as there is no space between \nthem.\n2. Area between book of height 1 and book of \nheight 4 is 1 by removing book of height 3.\n3. Area between book of height 3 and book of \nheight 4 is 0 as there is no space between them.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 6, height[] = {2, 1, 3, 4, 6, 5}</span>\n<span style=\"font-size:18px\"><strong>Output:</strong> 8</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong> Remove the 4 books in the middle \ncreating length = 4 for the candy dam. Height \nfor dam will be min(2,5) = 2. \nArea between book of height 2 and book \nof height 5 is 2 x 4 = 8.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: </strong>&nbsp;<br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>maxCandy()</strong> which takes the array height[] and size of array N as input parameters and returns the maximum candies geek can store</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><strong>Constraints:</strong><br />\n<span style=\"font-size:18px\">1 &le; N &le; 10</span><sup>5</sup><br />\n<span style=\"font-size:18px\">1 &le; height[i]&nbsp;&le; 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `height` of `N` integers representing the heights of books on a bookshelf, where each book has a unit width, find two books such that the maximum amount of candies can be stored between them after removing all the books in between. The amount of candies that can be stored is determined by the area between the two selected books, where the height of the area is the minimum of the heights of the two books, and the width is the distance between them.  The order of books must be maintained.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= height[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 3, height[] = {1, 3, 4}",
                        "output": "1",
                        "explanation": "Consider all pairs of books: (1,3) - Area 0. (1,4) - Area min(1,4) * 1 = 1. (3,4) - Area 0. The maximum area is 1."
                    },
                    {
                        "input": "N = 6, height[] = {2, 1, 3, 4, 6, 5}",
                        "output": "8",
                        "explanation": "Consider the pair (2, 5). There are 4 books between them, so the width is 4. The height is min(2, 5) = 2. The area is 2 * 4 = 8. This is the maximum possible area."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The aim is to maximize the area formed between the 2 vertical books. The shorter book forms the length of the candy dam and the distance between the books is the width of the rectangle.</span></p>",
            "<p><span style=\"font-size:18px\">Use two pointer approach.<br />\nStart with the maximum width possible for the candy dam, ie first and last book. Go to a shorter width only if there is a book longer than the current book.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    \n    public:\n    int maxCandy(int height[], int n) \n    { \n    \n    \t// To store the maximum water so far \n    \tint maximum = 0; \n    \n    \t// Both the pointers are pointing at the first \n    \t// and the last buildings respectively \n    \tint i = 0, j = n - 1; \n    \n    \t// While the water can be stored between \n    \t// the currently chosen buildings \n    \twhile (i < j) \n    \t{ \n    \n    \t\t// Update maximum water so far and increment i \n    \t\tif (height[i] < height[j]) \n    \t\t{ \n    \t\t\tmaximum = max(maximum, (j - i - 1) * height[i]); \n    \t\t\ti++; \n    \t\t} \n    \n    \t\t// Update maximum water so far and decrement j \n    \t\telse if (height[j] < height[i]) \n    \t\t{ \n    \t\t\tmaximum = max(maximum, (j - i - 1) * height[j]); \n    \t\t\tj--; \n    \t\t} \n    \n    \t\t// Any of the pointers can be updated (or both) \n    \t\telse\n    \t\t{ \n    \t\t\tmaximum = max(maximum, (j - i - 1) * height[i]); \n    \t\t\ti++; \n    \t\t\tj--; \n    \t\t} \n    \t} \n    \n    \treturn maximum; \n    }   \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution { \n\tstatic int maxCandy(int height[], int n) \n\t{ \n\n\t\t// To store the maximum water so far \n\t\tint max = 0; \n\n\t\t// Both the pointers are pointing at the first \n\t\t// and the last buildings respectively \n\t\tint i = 0, j = n - 1; \n\n\t\t// While the water can be stored between \n\t\t// the currently chosen buildings \n\t\twhile (i < j) { \n\n\t\t\t// Update maximum water so far and increment i \n\t\t\tif (height[i] < height[j]) { \n\t\t\t\tmax = Math.max(max, (j - i - 1) * height[i]); \n\t\t\t\ti++; \n\t\t\t} \n\n\t\t\t// Update maximum water so far and decrement j \n\t\t\telse if (height[j] < height[i]) { \n\t\t\t\tmax = Math.max(max, (j - i - 1) * height[j]); \n\t\t\t\tj--; \n\t\t\t} \n\n\t\t\t// Any of the pointers can be updated (or both) \n\t\t\telse { \n\t\t\t\tmax = Math.max(max, (j - i - 1) * height[i]); \n\t\t\t\ti++; \n\t\t\t\tj--; \n\t\t\t} \n\t\t} \n\n\t\treturn max; \n\t} \n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n \nclass Solution:\n    def maxCandy(self, height, n): \n\n    \t# To store the maximum water so far \n    \tmaximum = 0; \n    \n    \t# Both the pointers are pointing at the first \n    \t# and the last buildings respectively \n    \ti = 0\n    \tj = n - 1\n    \n    \t# While the water can be stored between \n    \t# the currently chosen buildings \n    \twhile (i < j): \n    \t\n    \t\t# Update maximum water so far and increment i \n    \t\tif (height[i] < height[j]):\t \n    \t\t\tmaximum = max(maximum, (j - i - 1) * height[i]); \n    \t\t\ti += 1; \n    \t\t\n    \t\t# Update maximum water so far and decrement j \n    \t\telif (height[j] < height[i]): \n    \t\t\tmaximum = max(maximum, (j - i - 1) * height[j]); \n    \t\t\tj -= 1; \n    \t\t\n    \t\t# Any of the pointers can be updated (or both) \n    \t\telse:\t \n    \t\t\tmaximum = max(maximum, (j - i - 1) * height[i]); \n    \t\t\ti += 1; \n    \t\t\tj -= 1; \n    \t\t\n    \treturn maximum; \n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution { \n\tmaxCandy(height,  n) \n\t{ \n\n\t\t// To store the maximum water so far \n\t\tlet max = 0; \n\n\t\t// Both the pointers are pointing at the first \n\t\t// and the last buildings respectively \n\t\tlet i = 0, j = n - 1; \n\n\t\t// While the water can be stored between \n\t\t// the currently chosen buildings \n\t\twhile (i < j) { \n\n\t\t\t// Update maximum water so far and increment i \n\t\t\tif (height[i] < height[j]) { \n\t\t\t\tmax = Math.max(max, (j - i - 1) * height[i]); \n\t\t\t\ti++; \n\t\t\t} \n\n\t\t\t// Update maximum water so far and decrement j \n\t\t\telse if (height[j] < height[i]) { \n\t\t\t\tmax = Math.max(max, (j - i - 1) * height[j]); \n\t\t\t\tj--; \n\t\t\t} \n\n\t\t\t// Any of the pointers can be updated (or both) \n\t\t\telse { \n\t\t\t\tmax = Math.max(max, (j - i - 1) * height[i]); \n\t\t\t\ti++; \n\t\t\t\tj--; \n\t\t\t} \n\t\t} \n\n\t\treturn max; \n\t} \n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}