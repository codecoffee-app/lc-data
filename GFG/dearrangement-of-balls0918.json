{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704016,
            "title": "Disarrangement of balls",
            "titleSlug": "dearrangement-of-balls0918",
            "content": "<p><span style=\"font-size: 18px;\">You are given <strong>n </strong>balls numbered from 1 to <strong>n</strong> and there are <strong>n</strong> baskets numbered from 1 to <strong>n</strong> in front of you. The <strong>i</strong><sup>th</sup> basket is meant for the <strong>i</strong><sup>th</sup> ball. Calculate the number of ways in which <strong>no</strong>&nbsp;ball&nbsp;goes into its&nbsp;respective basket.</span></p>\n<p><span >Note: The answer will always fit into a 32-bit integer.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> For two balls {1, 2}, there is only one possible derangement {2, 1}.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> For three balls {1, 2, 3}, there are two possible derangements {3, 1, 2} and {2, 3, 1}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 12</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'n' balls numbered from 1 to 'n' and 'n' baskets also numbered from 1 to 'n', where the i-th basket is intended for the i-th ball, determine the number of ways to arrange the balls such that *no* ball is placed in its corresponding basket.",
                "constraints": [
                    "1 <= n <= 12"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "1",
                        "explanation": "With two balls, the only possible derangement is swapping their positions, resulting in the arrangement {2, 1}."
                    },
                    {
                        "input": "3",
                        "output": "2",
                        "explanation": "With three balls, there are two possible derangements: {3, 1, 2} and {2, 3, 1}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use the standard recursive formula of disarrangement.<br /></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//  Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int countDer(int n) {\n\n        // base case\n        if (n == 1 or n == 2) {\n            return n - 1;\n        }\n\n        // Variable for just storing\n        // previous values\n        int a = 0;\n        int b = 1;\n\n        // using above recursive formula\n        for (int i = 3; i <= n; ++i) {\n            int cur = (i - 1) * (a + b);\n            a = b;\n            b = cur;\n        }\n\n        // Return result for n\n        return b;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static int countDer(int n) {\n        // Base case\n        if (n == 1 || n == 2) {\n            return n - 1;\n        }\n\n        // Variable for storing prev values\n        int a = 0;\n        int b = 1;\n\n        // manner using above recursive formula\n        for (int i = 3; i <= n; ++i) {\n            int cur = (i - 1) * (a + b);\n            a = b;\n            b = cur;\n        }\n\n        // Return result for n\n        return b;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\n\nclass Solution:\n\n    def countDer(self, n):\n        # Base Case\n        if n == 1 or n == 2:\n            return n - 1\n\n        # Variables for storing previous values\n        a = 0\n        b = 1\n\n        # using above recursive formula\n        for i in range(3, n + 1):\n            cur = (i - 1) * (a + b)\n            a = b\n            b = cur\n\n        # Return result for n\n        return b\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countDer(n) {\n\n        // Base case\n        if (n == 1 || n == 2) {\n            return n - 1;\n        }\n\n        // Variable for just storing\n        // previous values\n        let a = 0;\n        let b = 1;\n\n        // Using above recursive formula\n        for (let i = 3; i <= n; ++i) {\n            let cur = (i - 1) * (a + b);\n            a = b;\n            b = cur;\n        }\n\n        // Return result for n\n        return b;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}