{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700183,
            "title": "Decimal Equivalent of Binary Linked List",
            "titleSlug": "decimal-equivalent-of-binary-linked-list",
            "content": "<p><span style=\"font-size: 12pt;\">Given a singly linked list. The link list represents a <strong>binary number, </strong>ie- it contains only&nbsp;0s and 1s. Find its decimal equivalent. <br />The significance of the bits <strong>decreases </strong>with the increasing index in the linked list. An empty linked list is considered to represent the decimal value <strong>0</strong>.&nbsp;</span></p>\n<p><span style=\"font-size: 12pt;\">Since the answer can be very large, the <strong>answer modulo 10<sup>9</sup>+7</strong> should be returned.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>Linked List = 1 -&gt; 1 -&gt; 1 -&gt; 0<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700183/Web/Other/blobid0_1724049739.png\" height=\"100\" /><br /><strong>Output: </strong>14<strong><br /></strong><strong>Explanation: </strong>1*2<sup>3</sup>&nbsp;+ 1*2<sup>2</sup>&nbsp;+&nbsp;1*2<sup>1</sup> + 0*2<sup>0</sup> =&nbsp; 8 + 4 + 2 + 0 = 14</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>Linked List: 0 -&gt; 1 -&gt; 1<br /><strong>Output: </strong>3<br /><strong>Explanation: </strong>0*2<sup>2</sup>&nbsp;+ 1*2<sup>1</sup> + 1*2<sup>0</sup> =&nbsp; 1 + 2 + 0 = 3</span></pre>\n<p><span style=\"font-size: 12pt;\"><span style=\"font-family: arial, helvetica, sans-serif;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Space </strong><strong>Complexity</strong><strong>:</strong>&nbsp;O(1)</span></span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong></span><br style=\"font-size: 18px;\" /><span style=\"font-size: 12pt;\">0 &lt;= size of linked lists &lt;= 10<sup>6</sup></span><br style=\"font-size: 18px;\" /><span style=\"font-size: 12pt;\">data of each node is either 0 or 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list representing a binary number (containing only 0s and 1s), find its decimal equivalent. The significance of the bits decreases with increasing index in the linked list. An empty linked list represents the decimal value 0. Return the answer modulo 10<sup>9</sup>+7.",
                "constraints": [
                    "0 <= size of linked lists <= 10<sup>6</sup>",
                    "data of each node is either 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "Linked List = 1 -> 1 -> 1 -> 0",
                        "output": "14",
                        "explanation": "The linked list 1 -> 1 -> 1 -> 0 represents the binary number 1110.  This is equivalent to 1*2<sup>3</sup> + 1*2<sup>2</sup> + 1*2<sup>1</sup> + 0*2<sup>0</sup> = 8 + 4 + 2 + 0 = 14."
                    },
                    {
                        "input": "Linked List: 0 -> 1 -> 1",
                        "output": "3",
                        "explanation": "The linked list 0 -> 1 -> 1 represents the binary number 011. This is equivalent to 0*2<sup>2</sup> + 1*2<sup>1</sup> + 1*2<sup>0</sup> = 0 + 2 + 1 = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 16px;\">Traverse the linked list and for each node, multiply the result by 2 and add the node's data to it.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "juniper-networks"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to calculate the decimal value of a linked list\n    long long unsigned int decimalValue(struct Node *head) {\n        // Initialize result variable\n        long long unsigned int res = 0;\n\n        // Traverse the linked list\n        while (head != NULL) {\n            // Calculate the decimal value by multiplying the result by 2 and adding\n            // current node's data Also, use modular division to ensure the result\n            // doesn't exceed the maximum value\n            res = ((res * 2) % MOD + head->data) % MOD;\n\n            // Move to the next node\n            head = head->next;\n        }\n\n        // Return the final decimal value\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to calculate the decimal value of a binary linked list\n    long DecimalValue(Node head) {\n        // Modulo value for use in calculations\n        long MOD = 1000000007;\n        // Variable to store the resulting decimal value\n        long result = 0;\n\n        // Iterating through the linked list\n        while (head != null) {\n            // Calculating the result by multiplying it with 2, taking modulo with MOD,\n            // and adding the data of the current node\n            result = ((result * 2) % MOD + head.data % MOD) % MOD;\n            // Moving to the next node in the linked list\n            head = head.next;\n        }\n\n        // Returning the final decimal value\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def decimalValue(self, head):\n        # Define the MOD constant to avoid overflow for large numbers\n        MOD = 10**9 + 7\n\n        # Initialize the result to store the decimal value of the binary linked list\n        res = 0\n\n        # Traverse the linked list until reaching the end (None)\n        while head is not None:\n            # Update the result by shifting it left by 1 (equivalent to multiplying by 2)\n            # and add the current node's data, applying MOD to keep the result within limits\n            res = ((res * 2) % MOD + head.data) % MOD\n\n            # Move to the next node in the linked list\n            head = head.next\n\n        # Return the final computed decimal value\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/* LINKED LIST NODE\nclass Node {\n  constructor(x){\n    this.data = x;\n    this.next = null;\n  }\n}\n*/\n\n/**\n * @param {Node} head - Head node of the binary linked list\n * @return {number} - Decimal equivalent of the binary number\n */\n\nclass Solution {\n    decimalValue(head) {\n        // Define the MOD constant to prevent overflow for large numbers\n        const MOD = 1000000007;\n\n        // Initialize result to store the decimal value of the binary linked list\n        let res = 0;\n\n        // Traverse through the linked list until the end (null)\n        while (head != null) {\n            // Multiply the current result by 2 (shifting left in binary),\n            // add the node's data, and take modulo to avoid overflow\n            res = ((res * 2) % MOD + head.data) % MOD;\n\n            // Move to the next node in the linked list\n            head = head.next;\n        }\n\n        // Return the final decimal value\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}