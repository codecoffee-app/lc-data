{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706225,
            "title": "Decimal number to binary number",
            "titleSlug": "decimal-number-to-binary-number--141631",
            "content": "<p><span style=\"font-size: 18px;\">Given a decimal number <strong>n (positive)</strong> in string format, compute its binary string equivalent and return it.&nbsp;<br /></span><span style=\"font-size: 18px;\">Note: Don't add a new line at the end.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 7\n<strong>Output:</strong> 111</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 33\n<strong>Output: </strong>100001</span><span style=\"font-size: 18px;\"><br /></span></pre>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Convert a positive decimal number, given as a string, into its binary string representation. Return the binary string. Do not include a newline character at the end of the output.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "7",
                        "output": "111",
                        "explanation": null
                    },
                    {
                        "input": "33",
                        "output": "100001",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use an array to store bit sets.</p>"
        ],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nstring toBinary(int n) {\n    string s;\n    while (n) {\n        s.push_back((n & 1) ? '1' : '0');\n        n >>= 1;\n    }\n    reverse(s.begin(), s.end());\n    return s;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\npublic static String toBinary(int n) {\n    return Integer.toBinaryString(n);\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\ndef toBinary(n):\n    #Your code here\n    s = \"\"\n    while n:\n        s += '1' if (n & 1) else '0'\n        n >>= 1\n    return s[::-1]",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    toBinary(n) { return n.toString(2); }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}