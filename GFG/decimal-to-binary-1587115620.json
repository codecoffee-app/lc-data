{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701111,
            "title": "Decimal to binary",
            "titleSlug": "decimal-to-binary-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a decimal number <strong>n</strong>, return its binary equivalent.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 7\n<strong>Output:</strong> 111</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 33\n<strong>Output: </strong>100001</span>\n</pre>\n<p><strong>Constraints:<br /></strong>1 &lt;= n &lt;= 2<sup>31 </sup>- 1</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Practice-Problems",
                "slug": "practice-problems"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "void reverse(char* bin, int left, int right) {\n    while (left < right) {\n        char temp = bin[left];\n        bin[left] = bin[right];\n        bin[right] = temp;\n        left++;\n        right--;\n    }\n}\n\nchar* decToBinary(int n) {\n    int index = 0;\n    char* bin = (char*)malloc(32 * sizeof(char));\n\n    if (n == 0) {\n        bin[index++] = '0';\n    }\n\n    while (n > 0) {\n        int bit = n & 1;\n        bin[index++] = '0' + bit;\n        n = n >> 1;\n    }\n\n    bin[index] = '\\0';\n    reverse(bin, 0, index - 1);\n    return bin;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "// Function to convert decimal to binary\nclass Solution {\n  public:\n    string decToBinary(int n) {\n\n        // String to store the binary representation\n        string bin = \"\";\n\n        while (n > 0) {\n\n            // Finding (n % 2) using bitwise AND operator\n            // (n & 1) gives the least significant bit (LSB)\n            int bit = n & 1;\n            bin.push_back('0' + bit);\n\n            // Right shift n by 1 (equivalent to n = n / 2)\n            // This removes the least significant bit (LSB)\n            n = n >> 1;\n        }\n\n        reverse(bin.begin(), bin.end());\n        return bin;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static String decToBinary(int n) {\n\n        // String to store the binary representation\n        StringBuilder bin = new StringBuilder();\n\n        while (n > 0) {\n\n            // Finding (n % 2) using bitwise AND operator\n            // (n & 1) gives the least significant bit (LSB)\n            int bit = n & 1;\n            bin.append(bit);\n\n            // Right shift n by 1 (equivalent to n = n / 2)\n            // This removes the least significant bit (LSB)\n            n = n >> 1;\n        }\n\n        return bin.reverse().toString();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Function to convert decimal to binary\nclass Solution:\n\n    def decToBinary(self, n):\n        bin_rep = \"\"\n\n        while n > 0:\n            # Find the least significant bit (LSB)\n            bit = n & 1\n            bin_rep = str(bit) + bin_rep  # Prepend bit\n            n = n >> 1  # Right shift n by 1\n\n        return bin_rep\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    public string DecToBinary(int n) {\n        StringBuilder bin = new StringBuilder();\n\n        while (n > 0) {\n            int bit = n & 1;\n            bin.Append(bit);\n            n = n >> 1;\n        }\n\n        char[] arr = bin.ToString().ToCharArray();\n        Array.Reverse(arr);\n        return new string(arr);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    decToBinary(n) {\n        if (n === 0) {\n            return \"0\";\n        }\n        let bin = \"\";\n        while (n > 0) {\n            let bit = n & 1;\n            bin += bit;\n            n = n >> 1;\n        }\n        return bin.split(\"\").reverse().join(\"\");\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}