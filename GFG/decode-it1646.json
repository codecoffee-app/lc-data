{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703563,
            "title": "Decode It",
            "titleSlug": "decode-it1646",
            "content": "<p><span style=\"font-size:18px\">An encoded string S consisting of alphabets(lowercase) and integers(1&lt;=<strong>num</strong>&lt;=9) is given, the task is to decode it and print the character at the &#39;<strong>K</strong>&#39;th position in the string. The pattern in which the strings were encoded were as follows :<br />\noriginal string: jonjonsnowjonjonsnowjonjonsnow<br />\nencoded string: jon2snow3</span></p>\n\n<p><span style=\"font-size:18px\">Note: encoded string will always start with an alphabet and end with a number.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nstr = &quot;jon2snow3&quot;\nk = 8</span>\n\n<span style=\"font-size:18px\"><strong>Output:</strong>\nn</span>\n\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\nThe given string after decoding it will be \nas such: jonjonsnowjonjonsnowjonjonsnow. \n8th character in the string after decoding is:&#39;n&#39;.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nstr = &quot;q3&quot;\nk = 3</span>\n\n<span style=\"font-size:18px\"><strong>Output:</strong>\nq\n\n<strong>Explanation:\n</strong>The given string after decoding it will be\nas such: qqq. 3rd character in the string \nafter decoding is:&#39;q&#39;.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>decodeIt()</strong>&nbsp;which takes the string str and an integer <strong>k&nbsp;</strong>as input parameters&nbsp;and returns the kth character of the mentioned string.</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N), Where N is the size of the original&nbsp;string.<br />\n<strong>Expected Auxiliary Space:</strong> O(N)<br />\n<br />\n<strong>Constraints:</strong><br />\n2 &lt;= |str|&nbsp;&lt;= 35<br />\n1 &lt;= k&nbsp;&lt;= N</span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an encoded string `S` consisting of lowercase alphabets and integers (1 <= num <= 9), decode it and find the character at the 'K'th position in the decoded string. The encoding pattern repeats substrings a specified number of times. For example, 'jon2snow3' means 'jon' is repeated twice and 'snow' is repeated three times, resulting in 'jonjonsnowjonjonsnowjonjonsnow'.",
                "constraints": [
                    "2 <= |str| <= 35",
                    "1 <= k <= N, where N is the length of the decoded string"
                ],
                "testcases": [
                    {
                        "input": "str = \"jon2snow3\"\nk = 8",
                        "output": "n",
                        "explanation": "The decoded string is 'jonjonsnowjonjonsnowjonjonsnow'. The 8th character is 'n'."
                    },
                    {
                        "input": "str = \"q3\"\nk = 3",
                        "output": "q",
                        "explanation": "The decoded string is 'qqq'. The 3rd character is 'q'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Run a loop from i=0 to n , if s[i] is an alphabet then appent that alphabet in a string naming b. else if s[i] is an integer &nbsp;then take a new string and append string b as many times as that integer . Do b=c; and initialise c=&quot;&quot;.&nbsp;<br />\nHence b is the original string.<br />\nPrint b[k-1].</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "national-instruments"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution{   \npublic:\n    //Function to decode the given string and return the kth character.\n    char decodeIt(string str, int k)\n    {\n        int n = str.size();\n    \n        string decoded = \"\", helper = \"\";\n        //iterating over the string to decode it.\n        for (int i = 0; i < n; i++)\n        {\n            //if the current character is a digit (1-9), repeat the decoded string p times.\n            if (str[i] >= '1' && str[i] <= '9')\n            {\n                int p = str[i] - '0';\n                //repeating the decoded string p times.\n                for (int j = 0; j < p; j++)\n                {\n                    helper += decoded;\n                }\n                //updating the decoded string.\n                decoded = helper;\n                helper = \"\";\n            }\n            //if the current character is not a digit, simply add it to the decoded string.\n            else\n                decoded = decoded + str[i];\n        }\n        //returning the kth character from the decoded string.\n        return decoded[k - 1];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    static char decodeIt(String str,int k){\n        //convert the input string to a character array\n        char ch[]=str.toCharArray();\n        //get the length of the string\n        int n = str.length();\n        //initialize two empty strings for the decoding process\n        String decoded = \"\", helper = \"\";\n        //iterate through each character in the input string\n        for (int i = 0; i < n; i++)\n        {\n            //if the character is a digit\n            if (ch[i] >= '1' && ch[i] <= '9')\n            {\n                //convert the character to an integer to get the repeat count\n                int p = ch[i] - '0';\n                //repeat the previously decoded string p times\n                for (int j = 0; j < p; j++)\n                {\n                    //append the repeated string to the helper string\n                    helper += decoded;\n                }\n                //set the helper string as the new decoded string\n                decoded = helper;\n                //reset the helper string\n                helper = \"\";\n            }\n            //if the character is not a digit, it is part of the decoded string\n            else\n                //append the character to the decoded string\n                decoded = decoded + ch[i];\n        }\n        //return the kth character of the decoded string\n        return decoded.charAt(k-1);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to decode the character at the kth index.\n    public char decodeIt(string str, int k)\n    {\n        int n = str.Length;\n\n        string decoded = \"\", helper = \"\";\n        //iterating over the string to decode it.\n        for (int i = 0; i < n; i++)\n        {\n            //if the current character is a digit (1-9), repeat the decoded string p times.\n            if (str[i] >= '1' && str[i] <= '9')\n            {\n                int p = str[i] - '0';\n                //repeating the decoded string p times.\n                for (int j = 0; j < p; j++)\n                {\n                    helper += decoded;\n                }\n                //updating the decoded string.\n                decoded = helper;\n                helper = \"\";\n            }\n            //if the current character is not a digit, simply add it to the decoded string.\n            else\n                decoded = decoded + str[i];\n        }\n        //returning the kth character from the decoded string.\n        return decoded[k - 1];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}