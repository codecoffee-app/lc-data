{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703224,
            "title": "Look and Say Pattern",
            "titleSlug": "decode-the-pattern1138",
            "content": "<p><span style=\"font-size:18px\">Given an integer n.&nbsp;Return&nbsp;the nth row of the following look-and-say pattern.<br />\r\n1<br />\r\n11<br />\r\n21<br />\r\n1211<br />\r\n111221<br />\r\n<strong>Look-and-Say Pattern:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">To generate a member of the sequence from the previous member, read off the digits of the previous member, counting the number of digits in groups of the same digit. For example:</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">1 is read off as &quot;one 1&quot; or 11.</span></li>\r\n\t<li><span style=\"font-size:18px\">11 is read off as &quot;two 1s&quot; or 21.</span></li>\r\n\t<li><span style=\"font-size:18px\">21 is read off as &quot;one 2, then one 1&quot; or 1211.</span></li>\r\n\t<li><span style=\"font-size:18px\">1211 is read off as &quot;one 1, one 2, then two 1s&quot; or 111221.</span></li>\r\n\t<li><span style=\"font-size:18px\">111221 is read off as &quot;three 1s, two 2s, then one 1&quot; or 312211.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 5\r\n<strong>Output:</strong> 111221\r\n<strong>Explanation: </strong>The 5<sup>th</sup> row of the given pattern\r\nwill be 111221.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 3\r\n<strong>Output:</strong> 21\r\n<strong>Explanation: </strong>The 3<sup>rd</sup> row of the given pattern\r\nwill be 21.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\r\nYou dont need to read input or print anything. Complete the function <strong>lookandsay()</strong> which takes integer n as input parameter and returns a string denoting the contents of the nth row of given pattern.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(2<sup>n</sup>)<br />\r\n<strong>Expected Auxiliary Space: </strong>O(2<sup>n-1</sup>) &nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n &le; 30</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Each row contains the count of all identical contiguous numbers in the previous row.<br />\nFor Example:<br />\nRow 4 : 1211<br />\nwhich contains&nbsp;<br />\n1 contiguous instance of 1<br />\n1 contiguous instance of 2<br />\n2 contiguous instances of 1<br />\nTherefore row 5 : 111221</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "pattern-printing",
                "slug": "pattern-printing"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho",
            "amazon",
            "microsoft",
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Backend complete function template for C++\n\nclass Solution\n{\n  public:\n    //Function to generate the look-and-say sequence.\n    string lookandsay(int n) {\n        //base cases\n        if (n == 1)\n            return \"1\";\n        if (n == 2)\n            return \"11\";\n\n        //recursive call to generate the previous sequence\n        string result = lookandsay(n-1);\n\n        //new sequence to be generated\n        string newresult = \"\";\n        int count = 1;\n        for(int i = 1; i < result.size(); ++i){\n\n            //if current digit is different from the previous digit,\n            //append the count and the previous digit to the new sequence\n            if(result[i]!=result[i-1]){\n                newresult.push_back('0'+count);\n                newresult.push_back(result[i-1]);\n                count = 1;\n            }\n            else\n                count++;\n\n            //if we reach the end of the sequence, append the count and the current digit\n            if(i == result.size()-1){\n                newresult.push_back('0'+count);\n                newresult.push_back(result[i]);\n            }\n        }\n        //return the new sequence\n        return newresult;\n    }   \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Backend complete function template for JAVA\n\nclass Solution\n{\n    // Function to generate the look-and-say sequence\n    public String lookandsay(int n) {\n        // Base cases for n = 1 and n = 2\n        if (n == 1)\n            return \"1\";\n        if (n == 2)\n            return \"11\";\n\n        // Recursive call to generate the look-and-say sequence for n-1\n        String result = lookandsay(n-1);\n\n        // Append the count and the digit to the new result string\n        String newresult = \"\";\n        int count = 1;\n        for(int i = 1; i < result.length(); ++i){\n            \n            // If the current digit is different from the previous digit,\n            // append the count and the previous digit to the new result string\n            if(result.charAt(i)!=result.charAt(i-1)){\n                newresult+=(char)('0'+count);\n                newresult+=(char)(result.charAt(i-1));\n                count = 1;\n            }\n            else\n                count++;\n\n            // If it is the last digit of the result string, append the count\n            // and the digit to the new result string\n            if(i == result.length()-1){\n                newresult+=(char)('0'+count);\n                newresult+=(char)(result.charAt(i));\n            }\n        }\n        // Return the new result string\n        return newresult;\n    }   \n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function template for Python\n\nclass Solution:\n    # Recursive function to generate the \"look and say\" sequence up to the given number\n    def lookandsay(self, n):\n        # Base case: when n is 1, return \"1\"\n        if n == 1:\n            return \"1\"\n        # Base case: when n is 2, return \"11\"\n        if n == 2:\n            return \"11\"\n\n        # Recursive call to generate the \"look and say\" sequence for n-1\n        result = self.lookandsay(n-1)\n\n        newresult = \"\"\n        count = 1\n        for i in range(1,len(result)):\n            # Counting consecutive numbers and updating the count\n            if result[i] != result[i-1]:\n                newresult+=str(count+0)\n                newresult+=result[i-1]\n                count = 1\n            else:\n                count += 1\n\n            # Checking if we have reached the end of the sequence and adding the last count and number\n            if i == len(result)-1:\n                newresult+=str(0 + count)\n                newresult+=result[i]\n\n        # Return the new \"look and say\" sequence\n        return newresult",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// Function to generate look-and-say sequence based on the input number\nclass Solution {\n    \n    // Recursive function to generate look-and-say sequence\n    lookandsay(n) {\n        if (n == 1)\n            return \"1\"; // Base case: return \"1\" for n = 1\n        if (n == 2)\n            return \"11\"; // Base case: return \"11\" for n = 2\n    \n        let result = this.lookandsay(n - 1); // Recursive call to generate look-and-say sequence for n-1\n        \n        let newresult = \"\"; // Initialize an empty string to store the new look-and-say sequence\n        let count = 1; // Initialize a count variable to keep track of the consecutive digits\n        for (let i = 1; i < result.length; ++i) {\n            \n            if (result[i] != result[i - 1]) {\n                newresult += String.fromCharCode(48 + count); // Convert count to ASCII code and add it to the new sequence\n                newresult += result[i - 1]; // Add the digit to the new sequence\n                count = 1; // Reset the count to 1 for the new digit\n            }\n            else {\n                count++; // Increment the count for the consecutive digit\n            }\n    \n            if (i == result.length - 1) {\n                newresult += String.fromCharCode(48 + count); // Convert count to ASCII code and add it to the new sequence\n                newresult += result[i]; // Add the digit to the new sequence\n            }\n        }\n        return newresult; // Return the new look-and-say sequence\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public string lookandsay(int n)\n    {\n        //base cases\n        if (n == 1)\n            return \"1\";\n        if (n == 2)\n            return \"11\";\n\n        //recursive call to generate the previous sequence\n        string result = lookandsay(n-1);\n\n        //new sequence to be generated\n        string newresult = \"\";\n        int count = 1;\n        for(int i = 1; i < result.Length; ++i){\n\n            //if current digit is different from the previous digit,\n            //append the count and the previous digit to the new sequence\n            if(result[i]!=result[i-1]){\n                newresult += count.ToString();\n                newresult += result[i-1];\n                count = 1;\n            }\n            else\n                count++;\n\n            //if we reach the end of the sequence, append the count and the current digit\n            if(i == result.Length-1){\n                newresult += count.ToString();\n                newresult += result[i];\n            }\n        }\n        //return the new sequence\n        return newresult;\n    }   \n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}