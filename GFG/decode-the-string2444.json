{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705287,
            "title": "Decode the string",
            "titleSlug": "decode-the-string2444",
            "content": "<p><span style=\"font-size: 18px;\">Given an encoded string&nbsp;<strong>s</strong>, the task is to decode it.&nbsp;</span><span style=\"font-size: 18px;\">The encoding rule is :</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\"><strong>k[encodedString],</strong>&nbsp;where the&nbsp;<strong>encodedString</strong>&nbsp;inside the square brackets is being repeated exactly&nbsp;<strong>k</strong>&nbsp;times. Note that&nbsp;<strong>k</strong>&nbsp;is guaranteed to be a positive integer, and encodedString contains only lowercase english alphabets.<br /></span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Note:&nbsp;</strong></span><span style=\"font-size: 18px;\">The test cases are generated so that the length of the output string will never exceed&nbsp;</span><span style=\"font-size: 18px;\">10</span><sup>5</sup><span style=\"font-size: 18px;\">&nbsp;.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"1[b]\"\n<strong>Output:</strong> \"b\"\n<strong>Explanation:</strong> \"b\" is present only one time.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"3[b2[ca]]\"\n<strong>Output:</strong> \"bcacabcacabcaca\"\n<strong>Explanation:<br /></strong>1. Inner substring &ldquo;2[ca]&rdquo; breakdown into &ldquo;caca&rdquo;.<br />2. Now, new string becomes &ldquo;3[bcaca]&rdquo;\n3. Similarly &ldquo;3[bcaca]&rdquo; becomes &ldquo;bcacabcacabcaca &rdquo; which is final result.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |s| &le; 10<sup>5</sup>&nbsp;<br />1 &lt;= k &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Decode an encoded string `s` according to the following rule: `k[encodedString]` means the `encodedString` inside the square brackets is repeated exactly `k` times. `k` is a positive integer, and `encodedString` contains only lowercase English alphabets. The length of the output string will not exceed 10^5.",
                "constraints": [
                    "1 <= |s| <= 10^5",
                    "1 <= k <= 100"
                ],
                "testcases": [
                    {
                        "input": "1[b]",
                        "output": "b",
                        "explanation": "The encoded string 'b' is repeated once."
                    },
                    {
                        "input": "3[b2[ca]]",
                        "output": "bcacabcacabcaca",
                        "explanation": "First, the inner part '2[ca]' is decoded to 'caca'. Then, the string becomes '3[bcaca]' which is decoded to 'bcacabcacabcaca'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find out how many times you need to repeat each string start from the innermost portion.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft",
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    string decodedString(string &s) {\n        stack<char> st;\n\n        // Traverse the input string\n        for (int i = 0; i < s.length(); i++) {\n            // Push characters into the stack until ']' is encountered\n            if (s[i] != ']') {\n                st.push(s[i]);\n            }\n            // Decode when ']' is found\n            else {\n                string temp;\n\n                // Pop characters until '[' is found\n                while (!st.empty() && st.top() != '[') {\n                    temp.push_back(st.top());\n                    st.pop();\n                }\n                reverse(temp.begin(), temp.end()); // Reverse extracted string\n                // Remove '[' from the stack\n                st.pop();\n\n                string num;\n                // Extract the number (repetition count) from the stack\n                while (!st.empty() && isdigit(st.top())) {\n                    num = st.top() + num;\n                    st.pop();\n                }\n\n                // Convert extracted number to integer\n                int number = stoi(num);\n                string repeat;\n\n                // Repeat the extracted string 'number' times\n                for (int j = 0; j < number; j++)\n                    repeat.append(temp);\n\n                // Push the expanded string back onto the stack\n                for (char c : repeat)\n                    st.push(c);\n            }\n        }\n\n        string res;\n        // Pop all characters from stack to form the final result\n        while (!st.empty()) {\n            res.push_back(st.top());\n            st.pop();\n        }\n\n        // Reverse to get the correct order\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static String decodeString(String s) {\n        Stack<Character> st = new Stack<>();\n\n        // Traverse the input string\n        for (int i = 0; i < s.length(); i++) {\n            // Push characters into the stack until ']' is encountered\n            if (s.charAt(i) != ']') {\n                st.push(s.charAt(i));\n            }\n            // Decode when ']' is found\n            else {\n                StringBuilder temp = new StringBuilder();\n\n                // Pop characters until '[' is found\n                while (!st.isEmpty() && st.peek() != '[') {\n                    temp.insert(0, st.pop());\n                }\n                // Remove '[' from the stack\n                st.pop();\n\n                StringBuilder num = new StringBuilder();\n                // Extract the number (repetition count) from the stack\n                while (!st.isEmpty() && Character.isDigit(st.peek())) {\n                    num.insert(0, st.pop());\n                }\n\n                // Convert extracted number to integer\n                int number = Integer.parseInt(num.toString());\n                StringBuilder repeat = new StringBuilder();\n\n                // Repeat the extracted string 'number' times\n                for (int j = 0; j < number; j++) repeat.append(temp);\n\n                // Push the expanded string back onto the stack\n                for (char c : repeat.toString().toCharArray()) st.push(c);\n            }\n        }\n\n        StringBuilder res = new StringBuilder();\n        // Pop all characters from stack to form the final result\n        while (!st.isEmpty()) {\n            res.insert(0, st.pop());\n        }\n\n        // Reverse to get the correct order\n        return res.toString();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def decodedString(self, s):\n        st = []\n\n        # Traverse the input string\n        for i in range(len(s)):\n            # Push characters into the stack until ']' is encountered\n            if s[i] != ']':\n                st.append(s[i])\n            # Decode when ']' is found\n            else:\n                temp = []\n\n                # Pop characters until '[' is found\n                while st and st[-1] != '[':\n                    temp.append(st.pop())\n                temp.reverse()  # Reverse extracted string\n                # Remove '[' from the stack\n                st.pop()\n\n                num = []\n                # Extract the number (repetition count) from the stack\n                while st and st[-1].isdigit():\n                    num.insert(0, st.pop())\n\n                # Convert extracted number to integer\n                number = int(\"\".join(num))\n                repeat = \"\".join(\n                    temp\n                ) * number  # Repeat the extracted string 'number' times\n\n                # Push the expanded string back onto the stack\n                st.extend(repeat)\n\n        # Pop all characters from stack to form the final result\n        return \"\".join(st)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public string decodedString(string s) {\n        Stack<char> st = new Stack<char>();\n\n        // Traverse the input string\n        for (int i = 0; i < s.Length; i++) {\n            // Push characters into the stack until ']' is encountered\n            if (s[i] != ']') {\n                st.Push(s[i]);\n            }\n            // Decode when ']' is found\n            else {\n                StringBuilder temp = new StringBuilder();\n\n                // Pop characters until '[' is found\n                while (st.Count > 0 && st.Peek() != '[') {\n                    temp.Insert(0, st.Pop()); // Insert at beginning to simulate reverse\n                }\n                // Remove '[' from the stack\n                st.Pop();\n\n                StringBuilder num = new StringBuilder();\n                // Extract the number (repetition count) from the stack\n                while (st.Count > 0 && char.IsDigit(st.Peek())) {\n                    num.Insert(0, st.Pop());\n                }\n\n                // Convert extracted number to integer\n                int number = int.Parse(num.ToString());\n                StringBuilder repeat = new StringBuilder();\n\n                // Repeat the extracted string 'number' times\n                for (int j = 0; j < number; j++) repeat.Append(temp);\n\n                // Push the expanded string back onto the stack\n                foreach (char c in repeat.ToString()) st.Push(c);\n            }\n        }\n\n        StringBuilder res = new StringBuilder();\n        // Pop all characters from stack to form the final result\n        while (st.Count > 0) {\n            // Insert at beginning to maintain order\n            res.Insert(0, st.Pop());\n        }\n\n        return res.ToString();\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    decodedString(s) {\n        let stack = [];\n        let temp = \"\";\n        let res = \"\";\n\n        for (let i = 0; i < s.length; i++) {\n            let cnt = 0;\n\n            // If number, convert it into number\n            if (s[i] >= '0' && s[i] <= '9') {\n                while (s[i] >= '0' && s[i] <= '9') {\n                    cnt = cnt * 10 + (s[i] - '0');\n                    i++;\n                }\n\n                i--;\n                // converting the integer into\n                // char in order to store in a stack.\n                stack.push(cnt.toString());\n            }\n\n            // If closing bracket ']', pop element until\n            // '[' opening bracket is not found in the\n            // stack.\n            else if (s[i] === ']') {\n                temp = \"\";\n                while (stack[stack.length - 1] !== '[') {\n                    temp = stack.pop() + temp;\n                }\n\n                // Now top element of stack is '['.\n                // Let's pop it to get the integer\n                stack.pop();\n\n                // Top element of stack will give the integer in char form.\n                // converting into integer.\n                cnt = parseInt(stack.pop(), 10);\n\n                // Repeating the popped string 'temp' count number of times.\n                for (let j = 0; j < cnt; j++) {\n                    res += temp;\n                }\n\n                // Push it in the character stack.\n                for (let j = 0; j < res.length; j++) {\n                    stack.push(res[j]);\n                }\n\n                res = \"\";\n            } else {\n                stack.push(s[i]);\n            }\n        }\n\n        // Pop all the element, make a string and return.\n        while (stack.length > 0) {\n            res = stack.pop() + res;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}