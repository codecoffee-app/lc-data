{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703302,
            "title": "Decreasing Sequence",
            "titleSlug": "decreasing-sequence2722",
            "content": "<p><span style=\"font-size: 18px;\">A sequence <strong>arr[0], arr[1], &hellip;, arr[n-1]</strong> is called decreasing if <strong>arr[i] &gt;= arr[i+1] </strong>for each <strong>i: 0 &lt;= i &lt; n-1</strong>. You are given a sequence of numbers represented by array <strong>arr[]&nbsp;</strong> and a positive integer <strong>k</strong>. In each operation, you may subtract <strong>k</strong> from any element of the sequence. You are required to find the minimum number of operations to make the given sequence decreasing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>As the answer can be large return your answer modulo <strong>10<sup>9</sup>+7</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 1, 2, 3] , k = 5\n<strong>Output: </strong>3\n<strong>Explanation: </strong>One operation is required to change a[2] = 2 into -3 and two opertations are required to change a[3] = 3 into -7. The resulting sequence will be 1 1 -3 -7. Hence, in total 3 operations are required.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 4, 3, 2, 1] , k = 2\n<strong>Output: </strong>0\n<strong>Explanation: </strong>The sequence is already decreasing. Hence, no operations are required in both the cases.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= k&lt;= 100<br />-10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup> </span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sequence of integers `arr[0], arr[1], ..., arr[n-1]` and a positive integer `k`, determine the minimum number of operations needed to make the sequence decreasing.  A sequence is considered decreasing if `arr[i] >= arr[i+1]` for each `i` such that `0 <= i < n-1`.  In each operation, you can subtract `k` from any element of the sequence.  Return the minimum number of operations modulo 10<sup>9</sup>+7.",
                "constraints": [
                    "1 <= arr.size() <= 10<sup>6</sup>",
                    "1 <= k <= 100",
                    "-10<sup>6</sup> <= arr[i] <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 1, 2, 3] , k = 5",
                        "output": "3",
                        "explanation": "To make the sequence decreasing, we can subtract 5 from arr[2] once, making it -3, and subtract 5 from arr[3] twice, making it -7. The sequence becomes [1, 1, -3, -7], which is decreasing. This requires 1 + 2 = 3 operations."
                    },
                    {
                        "input": "arr[] = [5, 4, 3, 2, 1] , k = 2",
                        "output": "0",
                        "explanation": "The sequence is already decreasing, so no operations are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Iterate through the array, adjust the first element based on the current element, and calculate the minimum moves by using modular arithmetic to avoid overflow.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minMoves(vector<int>& arr, int k) {\n        long long moves = 0, x;\n        int MOD = 1e9 + 7;\n        int n = arr.size(); // Get the size of the array\n\n        // Iterate through the array starting from the second element\n        for (int i = 1; i < n; i++) {\n            // If the current element is less than or equal to the first element\n            if (arr[i] <= arr[0]) {\n                arr[0] = arr[i];\n            } else {\n                // Calculate the number of moves required to make arr[0] equal to arr[i]\n                x = ((arr[i] - arr[0] - 1) / k) + 1;\n                moves += x;\n                moves = moves % MOD;     // Take mod to avoid overflow\n                arr[0] = arr[i] - x * k; // Adjust arr[0] accordingly\n            }\n        }\n\n        // Return the minimum number of moves, with result modulo MOD\n        return moves % MOD;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    static int MOD = 1000000007;\n\n    // Function to calculate the minimum number of moves\n    static int minMoves(int arr[], int k) {\n        long moves = 0;\n        long x;\n        int n = arr.length; // Get the size of the array\n\n        // Iterate through the array starting from the second element\n        for (int i = 1; i < n; i++) {\n            // If the current element is less than or equal to the first element\n            if (arr[i] <= arr[0]) {\n                arr[0] = arr[i]; // Adjust arr[0]\n            } else {\n                // Calculate the number of moves required to make arr[0] equal to arr[i]\n                x = ((arr[i] - arr[0] - 1) / k) + 1;\n                moves += x;\n                moves = moves % MOD;            // Take mod to avoid overflow\n                arr[0] = arr[i] - (int)(x * k); // Adjust arr[0] accordingly\n            }\n        }\n\n        // Return the minimum number of moves, with result modulo MOD\n        return (int)(moves % MOD);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    MOD = 1000000007  # Define the modulo value\n\n    def minMoves(self, arr, k):\n        moves = 0  # Initialize the number of moves\n        n = len(arr)  # Get the size of the array\n\n        # Iterate through the array starting from the second element\n        for i in range(1, n):\n            # If the current element is less than or equal to the first element\n            if arr[i] <= arr[0]:\n                arr[0] = arr[i]\n            else:\n                # Calculate the number of moves required to make arr[0] equal to arr[i]\n                x = ((arr[i] - arr[0] - 1) // k) + 1\n                moves += x\n                moves %= self.MOD  # Take mod to avoid overflow\n                arr[0] = arr[i] - x * k  # Adjust arr[0] accordingly\n\n        # Return the minimum number of moves, with result modulo MOD\n        return moves % self.MOD\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr - The input array of numbers\n * @param {number} k - The step size\n * @returns {number} - The minimum number of moves required to make all elements equal\n */\n\nclass Solution {\n    // Define the modulo value\n    constructor() { this.MOD = 1000000007; }\n\n    // Function to find the minimum number of moves\n    minMoves(arr, k) {\n        let moves = 0;        // Initialize the number of moves\n        const n = arr.length; // Get the size of the array\n\n        // Iterate through the array starting from the second element\n        for (let i = 1; i < n; i++) {\n            // If the current element is less than or equal to the first element\n            if (arr[i] <= arr[0]) {\n                arr[0] = arr[i];\n            } else {\n                // Calculate the number of moves required to make arr[0] equal to arr[i]\n                const x = Math.floor((arr[i] - arr[0] - 1) / k) + 1;\n                moves += x;\n                moves %= this.MOD;       // Take mod to avoid overflow\n                arr[0] = arr[i] - x * k; // Adjust arr[0] accordingly\n            }\n        }\n\n        // Return the minimum number of moves, with result modulo MOD\n        return moves % this.MOD;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}