{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704818,
            "title": "Deficient Number",
            "titleSlug": "deficient-number1612",
            "content": "<p><span style=\"font-size:18px\">\u00e2\u20ac\u2039Given a number x, your&nbsp;task is to find if this number is Deficient number or not. A number x&nbsp;is said to be Deficient Number if sum of all the divisors of the number denoted by&nbsp;<em>divisorsSum(x)</em>&nbsp;is less than twice the value of the number x. And the difference between these two values is called the&nbsp;<strong>deficiency</strong>.</span></p>\n\n<p><span style=\"font-size:18px\">Mathematically, if below condition holds the number is said to be Deficient:<br />\n<strong>divisorsSum(x) </strong>&lt; 2*x<br />\n<strong>deficiency</strong> = (2*x) - divisorsSum(x)<br />\n<br />\n<strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: x = 21\n<strong>Output:</strong>&nbsp;YES&nbsp;\n<strong>Explanation</strong>: Divisors are 1, 3, 7 and\n21.Sum of divisors is 32. \nThis sum is less than 2*21 or 42.</span><span style=\"font-size:18px\">\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: x</strong> = 12\n<strong>Output:&nbsp;</strong>NO\n<strong>Explanation</strong>: Divisors are 1, 2, 3, 4,\n6 and 12.Sum of divisors is 28.\nThis sum is not less than 2*12 or 24.\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>isDeficient</strong></span><span style=\"font-size:18px\"><strong>()&nbsp;</strong>which takes x&nbsp;as input parameter and returns <strong>YES</strong> if the number is Deficient otherwise returns <strong>NO</strong>.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(sqrt(n))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;= x&nbsp;&lt;=10000000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `x`, determine if it is a deficient number. A deficient number is a number where the sum of its proper divisors (excluding the number itself) is less than `x`.  In other words, the sum of *all* divisors (including the number itself) is less than `2*x`. Return 'YES' if it is deficient, and 'NO' otherwise.",
                "constraints": [
                    "1 <= x <= 10000000"
                ],
                "testcases": [
                    {
                        "input": "21",
                        "output": "YES",
                        "explanation": "The divisors of 21 are 1, 3, 7, and 21. Their sum is 1 + 3 + 7 + 21 = 32. Since 32 < 2 * 21 (42), 21 is a deficient number."
                    },
                    {
                        "input": "12",
                        "output": "NO",
                        "explanation": "The divisors of 12 are 1, 2, 3, 4, 6, and 12. Their sum is 1 + 2 + 3 + 4 + 6 + 12 = 28. Since 28 is not less than 2 * 12 (24), 12 is not a deficient number."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to find the divisors of x in efficient way.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "series",
                "slug": "series"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    long long int divisorsSum(long long int n) \n{ \n    long long int sum = 0; // Initialize sum of prime factors \n  \n    // Note that this loop runs till square root of n \n    for (long long int i = 1; i <= sqrt(n); i++) { \n        if (n % i == 0) { \n            // If divisors are equal, take only one \n            // of them \n            if (n / i == i) { \n                sum = sum + i; \n            } \n            else // Otherwise take both \n            { \n                sum = sum + i; \n                sum = sum + (n / i); \n            } \n        } \n    } \n    return sum; \n} \n// Function to check Deficient Number \nstring isDeficient(long long int x) \n{ \n    // Check if sum(n) < 2 * n \n    if(divisorsSum(x) < (2 * x))return \"YES\";\n\n    return \"NO\"; \n}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}