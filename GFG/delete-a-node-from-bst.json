{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700209,
            "title": "Delete a node from BST",
            "titleSlug": "delete-a-node-from-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Search Tree and a node value <strong>x</strong></span><span style=\"font-size: 18px;\">. Delete the node with the given value x from the BST. If no node with value x exists, then <strong>do not</strong> make any change.&nbsp;</span><span style=\"font-size: 18px;\">Return the root of the BST after deleting the node with value x.</span></p>\n<p><strong style=\"font-size: 18px;\">Note:&nbsp;</strong><span style=\"font-size: 18px;\">The generated output will be the inorder traversal of the modified tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [2, 1, 3]\n\\t2\n&nbsp;   /   \\\n&nbsp;  1     3\nx = 12\n<strong>Output: </strong>1 2 3<strong>\nExplanation: </strong>In the given input there is no node with value 12 , so the tree will remain same.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [1, N, 2, N, 8, 5, 11, 4, 7, 9, 12]<br />  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\\\n &nbsp; &nbsp;    &nbsp; &nbsp; &nbsp; 2\n &nbsp; &nbsp;&nbsp; &nbsp;\\t &nbsp;&nbsp;\\\n &nbsp; &nbsp; &nbsp;\\t  &nbsp;  8 \n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/&nbsp; &nbsp; \\\n &nbsp; &nbsp; &nbsp; &nbsp;     &nbsp;5&nbsp;  &nbsp;  11\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/&nbsp; \\&nbsp; &nbsp; /  \\\n &nbsp; &nbsp; &nbsp;     4 &nbsp; &nbsp;7&nbsp; 9 &nbsp;&nbsp;12\nx = 11\n<strong>Output: </strong>1 2 4 5 7 8 9 12<strong>\nExplanation: </strong>In the given input, tree after deleting 11 will be\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  1\n&nbsp; &nbsp; &nbsp; &nbsp;   &nbsp; &nbsp;&nbsp;\\\n&nbsp; &nbsp;     &nbsp;  &nbsp; &nbsp; 2\n&nbsp; &nbsp;&nbsp; &nbsp;\\t  &nbsp; &nbsp;\\\n&nbsp; &nbsp; &nbsp;\\t  &nbsp;  &nbsp; 8\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp;  &nbsp;/  \\\n&nbsp; &nbsp; &nbsp; &nbsp;\\t  &nbsp;5&nbsp; &nbsp; 12\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; / \\&nbsp;&nbsp; /\n&nbsp; &nbsp; &nbsp;\\t   4 &nbsp; 7 9</span>&nbsp;</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [2, 1, 3]<strong><br /></strong>\\t2\n&nbsp;   /   \\\n&nbsp;  1     3\nx = 3\n<strong>Output: </strong>1 2<br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">In the given input, tree after deleting 3 will be<br /></span>     2\n&nbsp;   /   \n&nbsp;  1    </pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and a node value 'x', delete the node with the value 'x' from the BST. If a node with value 'x' does not exist in the BST, do not make any changes. Return the root of the BST after the deletion. The output should be the inorder traversal of the modified tree.",
                "constraints": [
                    "1 <= n <= 10^5, where n is the number of nodes in the BST."
                ],
                "testcases": [
                    {
                        "input": "root = [2, 1, 3]\n       2\n      / \\\n     1   3\nx = 12",
                        "output": "1 2 3",
                        "explanation": "Since the value 12 is not present in the BST, the tree remains unchanged."
                    },
                    {
                        "input": "root = [1, N, 2, N, 8, 5, 11, 4, 7, 9, 12]\n            1\n             \\\n              2\n               \\\n                8\n               / \\\n              5   11\n             / \\ /  \\\n            4   7 9   12\nx = 11",
                        "output": "1 2 4 5 7 8 9 12",
                        "explanation": "After deleting the node with value 11, the tree is restructured such that its inorder traversal is 1 2 4 5 7 8 9 12."
                    },
                    {
                        "input": "root = [2, 1, 3]\n       2\n      / \\\n     1   3\nx = 3",
                        "output": "1 2",
                        "explanation": "After deleting the node with value 3, the tree becomes:\n       2\n      /\n     1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use recursion to locate the node to delete, handle three cases (no child, one child, two children), and for two children, replace with the in-order successor and delete it from the right subtree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "samsung",
            "adobe",
            "qualcomm"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the node with minimum element.\n    Node *minValueNode(Node *nod) {\n        Node *current = nod;\n        while (current->left != NULL)\n            current = current->left;\n        return current;\n    }\n\n    // Function to delete a node from BST.\n    Node *deleteNode(Node *root, int key) {\n\n        // base case\n        if (root == NULL)\n            return root;\n\n        // if given value is less than data at current node, we call function\n        // recursively to delete in left subtree.\n        if (key < root->data)\n            root->left = deleteNode(root->left, key);\n\n        // else if given value is more than data at current node, we call function\n        // recursively to delete in right subtree.\n        else if (key > root->data)\n            root->right = deleteNode(root->right, key);\n\n        // else we need to delete the current node.\n        else {\n            // if node is with only one child or no child.\n            if (root->left == NULL) {\n                struct Node *temp = root->right;\n                delete root;\n                return temp;\n            } else if (root->right == NULL) {\n                struct Node *temp = root->left;\n                delete root;\n                return temp;\n            }\n\n            // if node has two children, getting the inorder successor\n            //(smallest in the right subtree).\n            struct Node *temp = minValueNode(root->right);\n\n            // copying the inorder successor's data to this node.\n            root->data = temp->data;\n\n            // deleting the inorder successor.\n            root->right = deleteNode(root->right, temp->data);\n        }\n        return root;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\n\r\n// Back-end complete function Template for Java\r\n\r\nclass Tree {\r\n    // Function to find the node with minimum element.\r\n    public static Node minimumElement(Node root) {\r\n        if (root.left == null)\r\n            return root;\r\n        else {\r\n            return minimumElement(root.left);\r\n        }\r\n    }\r\n\r\n    // Function to delete a node from BST.\r\n    public static Node deleteNode(Node root, int value) {\r\n        // base case\r\n        if (root == null) return null;\r\n\r\n        // if given value is less than data at current node, we call function\r\n        // recursively to delete in left subtree.\r\n        if (root.data > value) {\r\n            root.left = deleteNode(root.left, value);\r\n        }\r\n        // else if given value is more than data at current node, we call\r\n        // function recursively to delete in right subtree.\r\n        else if (root.data < value) {\r\n            root.right = deleteNode(root.right, value);\r\n        }\r\n        // else we need to delete the current node.\r\n        else {\r\n            // if node to be deleted has both children\r\n            if (root.left != null && root.right != null) {\r\n                Node temp = root;\r\n                // finding minimum element from right.\r\n                Node minNodeForRight = minimumElement(temp.right);\r\n\r\n                // replacing current node with minimum node from right subtree.\r\n                root.data = minNodeForRight.data;\r\n\r\n                // deleting minimum node from right now.\r\n                root.right = deleteNode(root.right, minNodeForRight.data);\r\n\r\n            }\r\n            // if node to be deleted has only left child\r\n            else if (root.left != null) {\r\n                root = root.left;\r\n            }\r\n            // if node to be deleted has only right child\r\n            else if (root.right != null) {\r\n                root = root.right;\r\n            }\r\n            // if node to be deleted do not have child (Leaf node)\r\n            else\r\n                root = null;\r\n        }\r\n        return root;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n#Function to find the node with minimum element. \r\ndef minValueNode( node): \r\n    current = node  \r\n    while(current.left is not None): \r\n        current = current.left  \r\n  \r\n    return current  \r\n  \r\n#Function to delete a node from BST. \r\ndef deleteNode(root, key): \r\n  \r\n    #base Case \r\n    if root is None: \r\n        return root  \r\n  \r\n    #if given value is less than data at current node, we call function \r\n\t#recursively to delete in left subtree.\r\n    if key < root.data: \r\n        root.left = deleteNode(root.left, key) \r\n  \r\n    #else if given value is more than data at current node, we call function \r\n    #recursively to delete in right subtree.\r\n    elif(key > root.data): \r\n        root.right = deleteNode(root.right, key) \r\n  \r\n    #else we need to delete the current node.\r\n    else: \r\n          \r\n        #if node is with only one child or no child.\r\n        if root.left is None : \r\n            temp = root.right  \r\n            root = None \r\n            return temp  \r\n              \r\n        elif root.right is None : \r\n            temp = root.left  \r\n            root = None\r\n            return temp \r\n  \r\n        #if node has two children, getting the inorder successor  \r\n        #(smallest in the right subtree).\r\n        temp = minValueNode(root.right) \r\n  \r\n        #copying the inorder successor's data to this node.\r\n        root.data = temp.data \r\n  \r\n        #deleting the inorder successor.\r\n        root.right = deleteNode(root.right , temp.data) \r\n  \r\n  \r\n    return root \r\n    \r\n    \r\n    \r\n    ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} root\r\n * @param {number} key\r\n * @returns {Node}\r\n*/\r\n\r\nclass Solution {\r\n    // Function to find the node with minimum element.\r\n    minValueNode(nod) {\r\n        let current = nod;\r\n        while (current.left !== null) current = current.left;\r\n        return current;\r\n    }\r\n\r\n    // Function to delete a node from BST.\r\n    deleteNode(root, key) {\r\n        // base case\r\n        if (root === null) return root;\r\n\r\n        // if given value is less than data at current node, we call function\r\n        // recursively to delete in left subtree.\r\n        if (key < root.data) root.left = this.deleteNode(root.left, key);\r\n\r\n        // else if given value is more than data at current node, we call\r\n        // function recursively to delete in right subtree.\r\n        else if (key > root.data)\r\n            root.right = this.deleteNode(root.right, key);\r\n\r\n        // else we need to delete the current node.\r\n        else {\r\n            // if node is with only one child or no child.\r\n            if (root.left === null) {\r\n                let temp = root.right;\r\n                root = null;\r\n                return temp;\r\n            } else if (root.right === null) {\r\n                let temp = root.left;\r\n                root = null;\r\n                return temp;\r\n            }\r\n\r\n            // if node has two children, getting the inorder successor\r\n            //(smallest in the right subtree).\r\n            let temp = this.minValueNode(root.right);\r\n\r\n            // copying the inorder successor's data to this node.\r\n            root.data = temp.data;\r\n\r\n            // deleting the inorder successor.\r\n            root.right = this.deleteNode(root.right, temp.data);\r\n        }\r\n        return root;\r\n    }\r\n}\r\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}