{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712304,
            "title": "Delete all occurrences of a given key in a doubly linked list",
            "titleSlug": "delete-all-occurrences-of-a-given-key-in-a-doubly-linked-list",
            "content": "<p dir=\"ltr\"><span style=\"font-size: 18px;\">You are given the <strong>head_ref</strong> of a doubly Linked List and a <strong>Key</strong>. Your task is to <strong>delete all occurrences</strong> of the given key if it is present and return the new DLL.</span></p>\n<p dir=\"ltr\"><strong><span style=\"font-size: 18px;\">Example1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> </span>\n<span style=\"font-size: 18px;\">2&lt;-&gt;2&lt;-&gt;10&lt;-&gt;8&lt;-&gt;4&lt;-&gt;2&lt;-&gt;5&lt;-&gt;2</span>\n<span style=\"font-size: 18px;\">2</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> </span>\n<span style=\"font-size: 18px;\">10&lt;-&gt;8&lt;-&gt;4&lt;-&gt;5</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong>\n<span style=\"font-size: 18px;\">All Occurences of 2 have been deleted.<br /><br /></span></pre>\n<p dir=\"ltr\" style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium; white-space: normal;\"><strong><span style=\"font-size: 18px;\">Example2:</span></strong></p>\n<pre><strong>Input:</strong> \n9&lt;-&gt;1&lt;-&gt;3&lt;-&gt;4&lt;-&gt;5&lt;-&gt;1&lt;-&gt;8&lt;-&gt;4\n9\n<strong>Output:</strong> \n1&lt;-&gt;3&lt;-&gt;4&lt;-&gt;5&lt;-&gt;1&lt;-&gt;8&lt;-&gt;4\n<strong>Explanation: </strong>\nAll Occurences of 9 have been deleted.</pre>\n<p dir=\"ltr\"><strong><span style=\"font-size: 18px;\">Your Task:</span></strong></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\">Complete the function void <strong>deleteAllOccurOfX(struct Node** head_ref, int key)</strong>, which takes the reference of the head pointer and an integer value key. Delete all occurrences of the key from the given DLL.</span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N).</span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p dir=\"ltr\"><strong><span style=\"font-size: 18px;\">Constraints:</span></strong></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\">1&lt;=Number of Nodes&lt;=10<sup>5</sup></span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\">0&lt;=Node Value &lt;=10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head_ref of a doubly Linked List and a Key, delete all occurrences of the given key from the DLL. Return the updated DLL's head.",
                "constraints": [
                    "1 <= Number of Nodes <= 10^5",
                    "0 <= Node Value <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "2<->2<->10<->8<->4<->2<->5<->2\n2",
                        "output": "10<->8<->4<->5",
                        "explanation": "All occurrences of the key '2' have been removed from the doubly linked list."
                    },
                    {
                        "input": "9<->1<->3<->4<->5<->1<->8<->4\n9",
                        "output": "1<->3<->4<->5<->1<->8<->4",
                        "explanation": "All occurrences of the key '9' have been removed from the doubly linked list."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse the list until the end.</p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to delete a specified node from the linked list\n    void deleteNode(struct Node** head_ref, struct Node* del) {\n\n        // If the linked list is empty or the node to be deleted is NULL, return\n        if (*head_ref == NULL || del == NULL) return;\n\n        // If the node to be deleted is the head node, update the head pointer\n        if (*head_ref == del) *head_ref = del->next;\n\n        // If the node to be deleted is not the last node, update the next pointer of the previous node\n        if (del->next != NULL) del->next->prev = del->prev;\n\n        // If the node to be deleted is not the first node, update the previous pointer of the next node\n        if (del->prev != NULL) del->prev->next = del->next;\n\n        // Free the memory occupied by the deleted node\n        free(del);\n    }\n    // Function to delete all occurrences of a specific element from the linked list\n    void deleteAllOccurOfX(struct Node** head_ref, int x) {\n        // If the linked list is empty, return\n        if ((*head_ref) == NULL) return;\n\n        struct Node* current = *head_ref;\n        struct Node* next;\n\n        // Traverse the list until the end\n        while (current != NULL) {\n\n            // If a node with value 'x' is found\n            if (current->data == x) {\n\n                // Save the next node in the pointer 'next'\n                next = current->next;\n\n                // Delete the current node\n                deleteNode(head_ref, current);\n\n                // Update current to the next node\n                current = next;\n            }\n\n            // If the node does not have the value 'x', move to the next node\n            else\n                current = current->next;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    /* Function to delete a node in a Doubly Linked List.\r\n       head_ref --> pointer to head node pointer.\r\n       del --> pointer to node to be deleted. */\r\n    static Node deleteNode(Node head, Node del) {\r\n        // base case\r\n        if (head == null || del == null) return null;\r\n\r\n        /* If node to be deleted is head node */\r\n        if (head == del) head = del.next;\r\n\r\n        /* Change next only if node to be deleted\r\n            is NOT the last node */\r\n\r\n        if (del.next != null) del.next.prev = del.prev;\r\n\r\n        /* Change prev only if node to be deleted\r\n            is NOT the first node */\r\n        if (del.prev != null) del.prev.next = del.next;\r\n\r\n        del = null;\r\n\r\n        return head;\r\n    }\r\n\r\n    /* function to delete all occurrences of the given\r\n        key 'x' */\r\n    static Node deleteAllOccurOfX(Node head, int x) {\r\n        // Write your code here\r\n        // if list is empty\r\n        if (head == null) return null;\r\n\r\n        Node current = head;\r\n        Node next;\r\n\r\n        /* traverse the list up to the end */\r\n        while (current != null) {\r\n            // if node found with the value 'x'\r\n            if (current.data == x) {\r\n\r\n                /* save current's next node in the\r\n                pointer 'next' */\r\n                next = current.next;\r\n\r\n                /* delete the node pointed to by\r\n                'current' */\r\n                head = deleteNode(head, current);\r\n\r\n                /* update current */\r\n                current = next;\r\n            }\r\n\r\n            /* else simply move to the next node */\r\n            else\r\n                current = current.next;\r\n        }\r\n\r\n        return head;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n'''\r\n# Node Class\r\n\tclass Node:\r\n\t    def __init__(self, data):   # data -> value stored in node\r\n\t        self.data = data\r\n\t        self.next = None\r\n\t        self.prev = None\r\n'''\r\nclass Solution:\r\n    #Function to delete all the occurances of a key from the linked list.\r\n    def deleteAllOccurOfX(self, head, x):\r\n        def deleteNode(head, delete):\r\n            if (head == None or delete == None):\r\n                return None\r\n         \r\n            # If node to be deleted is head node\r\n            if (head == delete):\r\n                head = delete.next\r\n         \r\n            # Change next only if node to be deleted\r\n            # is NOT the last node\r\n            if (delete.next != None):\r\n                delete.next.prev = delete.prev\r\n         \r\n            # Change prev only if node to be deleted\r\n            # is NOT the first node\r\n            if (delete.prev != None):\r\n                delete.prev.next = delete.next\r\n         \r\n            # Finally, free the memory occupied by del\r\n            # free(del)\r\n            delete = None\r\n            return head\r\n     \r\n        if (head == None):\r\n            return\r\n     \r\n        current = head\r\n     \r\n        # traverse the list up to the end\r\n        while (current != None):\r\n     \r\n            # if node found with the value 'x'\r\n            if (current.data == x):\r\n     \r\n                # save current's next node in the\r\n                #pointer 'next'\r\n                next = current.next\r\n     \r\n                # delete the node pointed to by\r\n                # 'current'\r\n                head = deleteNode(head, current)\r\n     \r\n                # update current\r\n                current = next\r\n             \r\n            # else simply move to the next node\r\n            else:\r\n                current = current.next\r\n         \r\n        return head",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    deleteNode(head, del) {\n        // base case\n        if (head == null || del == null) return null;\n\n        /* If node to be deleted is head node */\n        if (head == del) head = del.next;\n\n        /*\n         * Change next only if node to be deleted is NOT the last node\n         */\n\n        if (del.next != null) del.next.prev = del.prev;\n\n        /*\n         * Change prev only if node to be deleted is NOT the first node\n         */\n        if (del.prev != null) del.prev.next = del.next;\n\n        del = null;\n\n        return head;\n    }\n\n    /*\n     * function to delete all occurrences of the given key 'x'\n     */\n    deleteAllOccurOfX(head, x) {\n        // if list is empty\n        if (head == null) return null;\n\n        var current = head;\n        var next;\n\n        /* traverse the list up to the end */\n        while (current != null) {\n            // if node found with the value 'x'\n            if (current.data == x) {\n\n                /*\n                 * save current's next node in the pointer 'next'\n                 */\n                next = current.next;\n\n                /*\n                 * delete the node pointed to by 'current'\n                 */\n                head = this.deleteNode(head, current);\n\n                /* update current */\n                current = next;\n            }\n\n            /* else simply move to the next node */\n            else\n                current = current.next;\n        }\n\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}