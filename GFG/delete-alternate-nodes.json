{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700584,
            "title": "Delete Alternate Nodes",
            "titleSlug": "delete-alternate-nodes",
            "content": "<p><span style=\"font-size: 18px;\">Given a Singly Linked List, Delete all <strong>alternate</strong> nodes of the list ie delete all the nodes present in even positions.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700584/Web/Other/blobid0_1720609786.png\" width=\"400\" height=\"76\" /> <br /><strong>Output: </strong>1-&gt;3-&gt;5<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700584/Web/Other/blobid1_1720609803.png\" width=\"400\" height=\"88\" /><strong>\nExplanation: </strong>Deleting alternate nodes ie 2, 4, 6 results in the linked list with elements 1-&gt;3-&gt;5.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList: 99-&gt;59-&gt;42-&gt;20<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700584/Web/Other/blobid2_1720609822.png\" width=\"400\" height=\"77\" /> <br /><strong>Output: </strong>99-&gt;42<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700584/Web/Other/blobid3_1720609839.png\" width=\"400\" height=\"82\" /> </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n<p><strong style=\"font-size: 18px;\">Constraints:</strong><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">1 &lt;= number of nodes &lt;= 10</span><sup>5</sup><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">1 &lt;= node-&gt;data &lt;= 10</span><sup>3</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, remove all nodes located at even positions. In other words, delete every alternate node in the list.",
                "constraints": [
                    "The number of nodes in the linked list will be between 1 and 10^5, inclusive.",
                    "The data value of each node will be between 1 and 10^3, inclusive."
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1->2->3->4->5->6",
                        "output": "1->3->5",
                        "explanation": "Deleting the alternate nodes (2, 4, and 6) results in the linked list 1->3->5."
                    },
                    {
                        "input": "LinkedList: 99->59->42->20",
                        "output": "99->42",
                        "explanation": "Deleting the alternate nodes (59 and 20) results in the linked list 99->42."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use two pointers to iterate through the list, updating links to skip alternate nodes and deallocate the memory of the skipped nodes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to delete alternate nodes in a linked list\nclass Solution {\n  public:\n    void deleteAlt(struct Node *head) {\n        // If the list is empty, return\n        if (head == NULL)\n            return;\n\n        // Initialize two pointers, prev and node, to keep track of current and next\n        // nodes\n        struct Node *prev = head;\n        struct Node *node = head->next;\n\n        // Iterate through the list and delete alternate nodes\n        while (prev != NULL && node != NULL) {\n            // Point the previous node to the next next node\n            prev->next = node->next;\n\n            // Free the memory of the current node\n            free(node);\n\n            // Update the previous and node pointers\n            prev = prev->next;\n            if (prev != NULL)\n                node = prev->next;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public void deleteAlt(Node head) {\n        if (head == null) return;\n\n        Node prev = head;\n        Node node = head.next;\n\n        while (prev != null && node != null) {\n            prev.next = node.next;\n            node = prev.next;\n            if (node != null) {\n                prev = node;\n                node = node.next;\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\n# Linked List class\nclass Solution:\n\n    def deleteAlt(self, head):\n        if not head:\n            return\n\n        prev = head\n        node = head.next\n\n        while prev and node:\n            prev.next = node.next\n            node = prev.next\n            if node:\n                prev = node\n                node = node.next\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/*LINKED LIST NODE\nclass Node {\n  constructor(x){\n    this.data = x;\n    this.next = null;\n  }\n}\n*/\n\n/**\n * @param {Node} head\n */\n\nclass Solution {\n    deleteAlt(head) {\n        if (!head) return;\n\n        let prev = head;\n        let node = head.next;\n\n        while (prev !== null && node !== null) {\n            prev.next = node.next;\n            node = prev.next;\n            if (node !== null) {\n                prev = node;\n                node = node.next;\n            }\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}