{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703465,
            "title": "Delete Array Elements",
            "titleSlug": "delete-array-elements-which-are-smaller-than-next-or-become-smaller3115",
            "content": "<p><span style=\"font-size: 18px;\">Given an array<strong> arr[] </strong>and a number <strong>k</strong>. The task is to delete <strong>k</strong> elements that are smaller than the next element (i.e., we delete arr[i] if arr[i] &lt; arr[i+1]) or become smaller than the next because the next element is deleted.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [20, 10, 25, 30, 40], k = 2\n<strong>Output: </strong>[25, 30, 40]\n<strong>Explanation: </strong>First we delete 10 because it follows arr[i] &lt; arr[i+1]. Then we delete 20 because 25 is moved next to it and it also starts following the condition.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [3, 100, 1] , k = 1<strong>\nOutput: </strong>[100, 1] </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; k &lt; arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and an integer `k`, remove `k` elements from the array. An element `arr[i]` is removed if it is smaller than the next element `arr[i+1]` or becomes smaller than the next element due to previous removals.",
                "constraints": [
                    "2 \u2264 arr.size() \u2264 10^6",
                    "1 \u2264 k < arr.size()"
                ],
                "testcases": [
                    {
                        "input": "[20, 10, 25, 30, 40], k = 2",
                        "output": "[25, 30, 40]",
                        "explanation": "Initially, 10 is smaller than 25, so it's removed.  Then, 20 is smaller than the next element (now 25), so it's also removed.  The remaining elements are [25, 30, 40]."
                    },
                    {
                        "input": "[3, 100, 1], k = 1",
                        "output": "[100, 1]",
                        "explanation": "3 is smaller than 100, so it's removed. The remaining elements are [100, 1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a stack to iteratively remove smaller elements while tracking deletions, then store the remaining stack elements in an array after reaching the deletion limit</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to delete elements from the array based on some conditions.\nclass Solution {\n  public:\n\n    vector<int> deleteElement(vector<int>& arr, int k) {\n        int n = arr.size();\n        stack<int> s;\n        s.push(arr[0]);\n        int countt = 0;\n\n        // iterating over the elements of the array\n        for (int i = 1; i < n; i++) {\n            // removing elements from the stack if they are smaller than the current\n            // element and the count is less than k\n            while (!s.empty() && s.top() < arr[i] && countt < k) {\n                s.pop();\n                countt++;\n            }\n            // pushing the current element into the stack\n            s.push(arr[i]);\n        }\n        int m = s.size();\n        vector<int> v(m);\n\n        // populating the vector with elements from the stack\n        while (!s.empty()) {\n            v[--m] = s.top();\n            s.pop();\n        }\n\n        // returning the vector\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n\n    // Function for finding maximum and value pair\n    public static ArrayList<Integer> deleteElement(int arr[], int k) {\n        int n = arr.length;\n        Stack<Integer> s = new Stack<>();\n        // Push the first element into the stack\n        s.push(arr[0]);\n        // Counter to keep track of deletions\n        int count = 0;\n\n        // Iterating over the elements of the array\n        for (int i = 1; i < n; i++) {\n            // Removing elements from the stack if they are smaller than the current\n            // element and the count of removed elements is less than k\n            while (!s.isEmpty() && s.peek() < arr[i] && count < k) {\n                s.pop();\n                count++;\n            }\n            // Pushing the current element into the stack\n            s.push(arr[i]);\n        }\n\n        // Creating an ArrayList to store the elements in the stack\n        ArrayList<Integer> result = new ArrayList<>();\n        while (!s.isEmpty()) {\n            result.add(0, s.pop());\n        }\n\n        // Returning the result as ArrayList\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# User function Template for Python\n\n\nclass Solution:\n\n    def deleteElement(self, arr, k):\n        stack = []\n        count = 0  # Counter to keep track of deletions\n\n        # Pushing the first element of the array into the stack\n        stack.append(arr[0])\n\n        # Iterating over the elements of the array\n        for i in range(1, len(arr)):\n            # Removing elements from the stack if they are smaller than the current element\n            # and the count of removed elements is less than k\n            while stack and stack[-1] < arr[i] and count < k:\n                stack.pop()\n                count += 1\n            # Pushing the current element into the stack\n            stack.append(arr[i])\n\n        # Return the stack as the final result\n        return stack\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    deleteElement(arr, k) {\n        let stack = [];\n        let count = 0; // Counter to keep track of deletions\n\n        // Pushing the first element of the array into the stack\n        stack.push(arr[0]);\n\n        // Iterating over the elements of the array\n        for (let i = 1; i < arr.length; i++) {\n            // Removing elements from the stack if they are smaller than the current\n            // element and the count of removed elements is less than k\n            while (stack.length > 0 && stack[stack.length - 1] < arr[i] && count < k) {\n                stack.pop();\n                count++;\n            }\n            // Pushing the current element into the stack\n            stack.push(arr[i]);\n        }\n\n        // Return the stack as the final result\n        return stack;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}