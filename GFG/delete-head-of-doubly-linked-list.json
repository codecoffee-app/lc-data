{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702124,
            "title": "Delete Head of Doubly Linked List",
            "titleSlug": "delete-head-of-doubly-linked-list",
            "content": "<p><span style=\"font-size:18px\">Given a doubly linked list of size <strong>n</strong>, you have to<strong> delete the head </strong>of the linked list and return the new head.<br />\n<strong>Note: </strong>Please set the previous of new head to null, and set the next of old head to null, and then delete the old head.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>LinkedList: 1&lt;--&gt;2\n<strong>Output:\n</strong>2\n2\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>LinkedList: 2&lt;--&gt;5&lt;--&gt;7&lt;--&gt;8&lt;--&gt;99&lt;--&gt;100\n<strong>Output:</strong>\n5 7 8 99 100\n100 99 8 7 5</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nThe task is to complete the function <strong>deleteHead()</strong> which takes<strong> head reference</strong><strong>&nbsp;and returns</strong> reference to the <strong>new head </strong>node, which is then used to display the list. (The driver&#39;s code print the modified list twice, once forward and once backward)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n2 &lt;= number of nodes &lt;= 10<sup>3</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a doubly linked list, remove the head node and return the new head of the list. Ensure that the previous pointer of the new head is set to null, and the next pointer of the old head is set to null before deleting the old head to prevent memory leaks.",
                "constraints": [
                    "2 <= number of nodes <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1<-->2",
                        "output": "2\n2",
                        "explanation": "The original list is 1<-->2. Deleting head (1) results in a list with only 2.  Forward and backward traversal both yield 2."
                    },
                    {
                        "input": "LinkedList: 2<-->5<-->7<-->8<-->99<-->100",
                        "output": "5 7 8 99 100\n100 99 8 7 5",
                        "explanation": "The original list is 2<-->5<-->7<-->8<-->99<-->100. Deleting head (2) results in 5<-->7<-->8<-->99<-->100.  The output shows forward and backward traversals."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Node * temp=head;<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp; head=head-&gt;next;<br />\n&nbsp;&nbsp;&nbsp; head-&gt;prev=NULL;<br />\n&nbsp;&nbsp;&nbsp; temp-&gt;next=NULL;<br />\n&nbsp;&nbsp;&nbsp; delete temp;<br />\n&nbsp;&nbsp;&nbsp; return head;</p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nNode *deleteHead(Node * head)\n{\n    Node * temp=head;\n    \n    head=head->next;\n    head->prev=NULL;\n    temp->next=NULL;\n    delete temp;\n    return head;\n    \n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\npublic static Node deleteHead(Node head)\n{\n     Node temp=head;\n    \n    head = head.next;\n    head.prev = null;\n    temp.next = null;\n    \n    return head;\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\ndef deleteHead(head):\n    h=head.next\n\n    head.next.prev=None\n    return h",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {Node} head\n * @returns {Node}\n*/\n\nclass Solution {\n    //Function to delete the head of singly linked list.\n    deleteHead(head) {\n        let h = head.next;\n\n        head.next.prev = null;\n        return h;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}