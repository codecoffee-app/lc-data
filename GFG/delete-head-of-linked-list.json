{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702080,
            "title": "Delete Head of Linked List",
            "titleSlug": "delete-head-of-linked-list",
            "content": "<p><span style=\"font-size:18px\">Given a linked list of size <strong>n</strong>, you have to<strong> delete the head </strong>of the linked list and return the new head.<br />\n<strong>Note: </strong>Please also set the next of the original head to null.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>LinkedList: 1-&gt;2\n<strong>Output: </strong>2</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>LinkedList: 2-&gt;5-&gt;7-&gt;8-&gt;99-&gt;100\n<strong>Output: </strong>5 7 8 99 100</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nThe task is to complete the function <strong>deleteHead()</strong> which takes<strong> head reference</strong><strong>and returns</strong> reference to the <strong>new head </strong>node, which is then used to display the list. The <strong>printing </strong>is done <strong>automatically </strong>by the <strong>driver code</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(1).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n2 &lt;= number of nodes &lt;= 10<sup>3</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, remove the head node and return the new head of the list.  Ensure the original head node's `next` pointer is set to `null` after deletion.",
                "constraints": [
                    "The linked list will contain at least two nodes and at most 1000 nodes.",
                    "2 <= number of nodes <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1->2",
                        "output": "2",
                        "explanation": "The original head '1' is deleted. The new head is '2'."
                    },
                    {
                        "input": "LinkedList: 2->5->7->8->99->100",
                        "output": "5 7 8 99 100",
                        "explanation": "The original head '2' is deleted. The new head is '5'.  The rest of the list remains: 5->7->8->99->100"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Store head in temp and move head to temp-&gt;next</p>\n\n<p>now set next of temp to null</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nstruct Node * deleteHead(struct Node *head)\n{\n    if (head == NULL) return head;\n    struct Node * temp = head;\n    head=head->next;\n    temp->next=NULL;\n    \n    \n    return head;\n    \n    \n}\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n\nNode * deleteHead(Node *head)\n{\n    if (head == NULL) return head;\n    Node * temp=head;\n    head=head->next;\n    temp->next=NULL;\n    \n    delete temp;\n    \n    \n    return head;\n    \n    \n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Delete\n{\n    Node deleteHead(Node head)\n    {\n        if (head == null) return head;\n        Node temp = head;\n        head = head.next;\n        temp.next = null;\n        \n        return head;\n        \n        \n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\ndef deleteHead(head):\n    if head == None:\n        return head\n    h=head.next\n    head.next=None\n    return h",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    deleteHead(head) {\n        if (!head)\n            return null;\n        return head.next;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}