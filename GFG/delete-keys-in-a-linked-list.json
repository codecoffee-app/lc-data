{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700429,
            "title": "Delete keys in a Linked list",
            "titleSlug": "delete-keys-in-a-linked-list",
            "content": "<p>Given a single linked list and an integer <strong>x.</strong> Your task is to complete the function <strong>deleteAllOccurances()</strong> which deletes all occurences of a key x present in the linked list. The function takes two arguments: the head of the linked list and an integer x. The function should&nbsp;returns the head of the modified linked list.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong>LinkedList = 2-&gt;2-&gt;1-&gt;4-&gt;4\r\nx = 4\r\n<strong>Output: \r\n</strong>3\r\n2 2 1<strong> </strong>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong>LinkedList = 1-&gt;2-&gt;2-&gt;3-&gt;2-&gt;3\r\nx = 2\r\n<strong>Output: \r\n</strong>3\r\n1 3 3<strong>\r\nExplanation:</strong> Given number to delete is 2.\r\nFirst line of output contains the \r\nnumber of remaining elements in the list.\r\nAfter deleting all occurrences of 2, we\r\nhave elements in the list as 1, 3, and 3.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Your Task:</strong><br />\r\nThe task is to complete the function&nbsp;<strong>deleteAllOccurances</strong>() which should delete all the occurrences of given number x from the list and&nbsp;return the head of the modified linked list.</p>\r\n\r\n<p><strong>Expected Time Complexity</strong> : O(N)<br />\r\n<strong>Expected Auxilliary Space</strong> : O(1)</p>\r\n\r\n<p><strong>Constraints:</strong><br />\r\n1 &lt;= size of the linkedlist&nbsp;&lt;= 100<br />\r\n1 &lt;= x &lt;= N</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list and an integer `x`, remove all occurrences of `x` from the list. Return the head of the modified linked list.",
                "constraints": [
                    "1 <= size of the linkedlist <= 100",
                    "1 <= x <= N, where N is the size of the linked list"
                ],
                "testcases": [
                    {
                        "input": "LinkedList = 2->2->1->4->4, x = 4",
                        "output": "2 2 1",
                        "explanation": "All occurrences of 4 are removed from the linked list, resulting in the list 2->2->1. The number of remaining elements is 3."
                    },
                    {
                        "input": "LinkedList = 1->2->2->3->2->3, x = 2",
                        "output": "1 3 3",
                        "explanation": "All occurrences of 2 are removed from the linked list, resulting in the list 1->3->3. The number of remaining elements is 3."
                    },
                    {
                        "input": "LinkedList = 1->2->3->4->5, x=6",
                        "output": "1 2 3 4 5",
                        "explanation": "The integer x is not present in the linked list, thus, the original linked list is returned."
                    },
                    {
                        "input": "LinkedList = 5->5->5->5->5, x = 5",
                        "output": null,
                        "explanation": "All nodes in the list have value 5 which is equal to x, thus the list becomes empty, and the head is null."
                    },
                    {
                        "input": "LinkedList = 1, x = 1",
                        "output": null,
                        "explanation": "The only node in the linked list has value 1 which is equal to x, thus the list becomes empty, and the head is null."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We need to first check for all occurrences at head node and change the head node appropriately. Then we need to check for all occurrences inside a loop and delete them one by one.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "/* Function to get the middle of the linked list*/\r\nstruct Node* deleteAllOccurances(struct Node *head,int k)\r\n{\r\n    if (head == NULL)\r\n      return NULL;\r\n    Node *temp = head;\r\n    Node *prev;\r\n    \r\n    while(temp!=NULL and temp->data == k)\r\n    {\r\n        // if nodes at start of list hold the value k,\r\n        // head node will keep changing as we delete those nodes\r\n    \thead = temp->next;\r\n    \tfree(temp);             // freeing memory assigned\r\n    \ttemp  = head;\r\n    }\r\n    \r\n    while(temp!=NULL)\r\n    // this while loop starts only when head node doesnt hold the value k\r\n    {\r\n    \twhile(temp!=NULL and temp->data !=k)\r\n    \t{\r\n    \t    // moving to next node looking for 'k'\r\n    \t\tprev = temp;\r\n    \t\ttemp = temp->next;\r\n    \t\t\r\n    \t\t// this while loop starts if NULL node or 'k' is encountered\r\n    \t}\r\n    \tif(temp == NULL)return head;\r\n    \t// returning if NULL found\r\n    \t\r\n    \t// removing node:\r\n    \tprev->next = temp->next;     // resetting the link to that node\r\n    \tfree(temp);\r\n    \ttemp = prev->next;\r\n    }\r\n    \r\n    return head;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class GfG\r\n{\r\n\tpublic static Node deleteAllOccurances(Node head, int x)\r\n\t{\r\n\t\tif (head == null)\r\n        return null;\r\n        Node temp = head;\r\n        Node prev = null;\r\n        \r\n        while(temp!=null && temp.data == x)\r\n        {\r\n            head = temp.next;           \r\n            temp  = head;\r\n        }\r\n        \r\n        while(temp!=null)\r\n        {\r\n            while(temp!=null && temp.data !=x)\r\n            {\r\n                prev = temp;\r\n                temp = temp.next;\r\n                \r\n            }\r\n            if(temp == null)return head;\r\n            prev.next = temp.next;\r\n            temp = prev.next;\r\n        }\r\n        \r\n        return head;\r\n\t}\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "\r\nclass Solution:\r\n    \r\n    def deleteAllOccurances(self,head, x):\r\n        if not head:\r\n            return head\r\n        temp=head\r\n        prev=None\r\n        while temp and temp.data==x:\r\n            head=temp.next\r\n            temp=head\r\n        while temp:\r\n            while temp and temp.data!=x:\r\n                prev=temp\r\n                temp=temp.next\r\n            if temp==None:\r\n                return head\r\n            prev.next=temp.next\r\n            temp=prev.next\r\n        return head\r\n            ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\r\n    \r\n\tdeleteAllOccurances(head, x)\r\n\t{\r\n\t\tif (head == null)\r\n            return null;\r\n        let temp = head;\r\n\t\tlet prev = head;\r\n\t\twhile(temp != null && temp.data == x)\r\n\t\t{\r\n\t\t\thead = temp.next;\r\n\t\t\ttemp = head;\r\n\t\t}\r\n\t\twhile(temp != null)\r\n\t\t{\r\n\t\t\twhile(temp != null && temp.data != x)\r\n\t\t\t{\r\n\t\t\t\tprev = temp;\r\n\t\t\t\ttemp = temp.next;\r\n\t\t\t}\r\n\t\t\tif(temp == null) \r\n\t\t\t\treturn head;\r\n\t\t\tprev.next = temp.next;\r\n\t\t\t\ttemp = prev.next;\r\n\t\t}\r\n\t\treturn head;\r\n\t}\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}