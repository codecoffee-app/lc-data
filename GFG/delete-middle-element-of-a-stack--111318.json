{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 880820,
            "title": "Delete Mid of a Stack",
            "titleSlug": "delete-middle-element-of-a-stack--111318",
            "content": "<p><span style=\"font-size: 18px;\">Given a stack <strong>s</strong>, delete the <strong>middle element </strong>of the stack without using any additional data structure.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Middle element:- </strong>floor((size_of_stack+1)/2) (1-based indexing) from the bottom of the stack.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\">Note</span><span style=\"font-size: 18px;\">: The output shown by the compiler is the stack from top to bottom.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = [10, 20, 30, 40, 50]\n<strong>Output</strong>: [10, 20, 40, 50]\n<strong>Explanation</strong>: The bottom-most element will be 10 and the top-most element will be 50. Middle element will be element at index 3 from bottom, which is 30. Deleting 30, stack will look like {10 20 40 50}.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = [10, 20, 30, 40]\n<strong>Output</strong>: [10, 30, 40]\n<strong>Explanation</strong>: T</span><span >he bottom-most element will be 10 and the top-most element will be 40. Middle element will be element at index 2 from bottom, which is 20. Deleting 20, stack will look like {10 30 40}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; s.size() &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a stack `s`, remove the middle element of the stack. You are not allowed to use any additional data structures.\n\nThe middle element is defined as the element at index `floor((size_of_stack + 1) / 2)` from the bottom of the stack, using 1-based indexing.",
                "constraints": [
                    "2 <= s.size() <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[10, 20, 30, 40, 50]",
                        "output": "[10, 20, 40, 50]",
                        "explanation": "The stack contains the elements [10, 20, 30, 40, 50] with 10 at the bottom and 50 at the top. The middle element is at index floor((5+1)/2) = 3 from the bottom, which is 30. After removing 30, the stack becomes [10, 20, 40, 50]."
                    },
                    {
                        "input": "[10, 20, 30, 40]",
                        "output": "[10, 30, 40]",
                        "explanation": "The stack contains the elements [10, 20, 30, 40] with 10 at the bottom and 40 at the top. The middle element is at index floor((4+1)/2) = 2 from the bottom, which is 20. After removing 20, the stack becomes [10, 30, 40]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively remove and restore stack elements to isolate and delete the middle one.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to delete middle element of a stack.\n    void deleteMid_util(stack<int>& s, int sizeOfStack, int current) {\n        // if current pointer is half of the size of stack then we\n        // are accessing the middle element of stack.\n        if (current == sizeOfStack / 2) {\n            s.pop();\n            return;\n        }\n\n        // storing the top element in a variable and popping it.\n        int x = s.top();\n        s.pop();\n        current += 1;\n\n        // calling the function recursively.\n        deleteMid_util(s, sizeOfStack, current);\n\n        // pushing the elements (except middle element) back\n        // into stack after recursion calls.\n        s.push(x);\n    }\n\n    void deleteMid(stack<int>& s) { deleteMid_util(s, s.size(), 0); }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to delete middle element of a stack.\n    public void deleteMid_util(Stack<Integer> s, int sizeOfStack, int current) {\n        // if current pointer is half of the size of stack then we\n        // are accessing the middle element of stack.\n        if (current == sizeOfStack / 2) {\n            s.pop();\n            return;\n        }\n        // storing the top element in a variable and popping it.\n        int x = s.peek();\n        s.pop();\n        current += 1;\n\n        // calling the function recursively.\n        deleteMid_util(s, sizeOfStack, current);\n\n        // pushing the elements (except middle element) back\n        // into stack after recursion calls.\n        s.push(x);\n    }\n\n    public void deleteMid(Stack<Integer> s) { deleteMid_util(s, s.size(), 0); }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n//   User function Template for JavaScript\n\nclass Solution {\n    // Function to delete middle element of a stack.\n    deleteMid_util(stack, sizeOfStack, current) {\n        // If current pointer is half of the size of stack,\n        // we are accessing the middle element of the stack.\n        if (current === Math.floor(sizeOfStack / 2)) {\n            stack.pop();\n            return;\n        }\n\n        // Storing the top element in a variable and popping it.\n        const x = stack.pop();\n        current++;\n\n        // Calling the function recursively.\n        this.deleteMid_util(stack, sizeOfStack, current);\n\n        // Pushing the elements (except middle element) back\n        // into the stack after recursion calls.\n        stack.push(x);\n    }\n\n    deleteMid(s) { this.deleteMid_util(s, s.length, 0); }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}