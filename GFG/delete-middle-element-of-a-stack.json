{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700698,
            "title": "Delete Mid of a Stack",
            "titleSlug": "delete-middle-element-of-a-stack",
            "content": "<p><span style=\"font-size: 18px;\">Given a stack <strong>s</strong>, delete the <strong>middle element </strong>of the stack without using any additional data structure.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Middle element:- </strong>floor((size_of_stack+1)/2) (1-based indexing) from the bottom of the stack.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\">Note</span><span style=\"font-size: 18px;\">: The output shown by the compiler is the stack from top to bottom.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = [10, 20, 30, 40, 50]\n<strong>Output</strong>: [50, 40, 20, 10]\n<strong>Explanation</strong>: The bottom-most element will be 10 and the top-most element will be 50. Middle element will be element at index 3 from bottom, which is 30. Deleting 30, stack will look like {10 20 40 50}.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = [10, 20, 30, 40]\n<strong>Output</strong>: [40, 30, 10]\n<strong>Explanation</strong>: T</span><span >he bottom-most element will be 10 and the top-most element will be 40. Middle element will be element at index 2 from bottom, which is 20. Deleting 20, stack will look like {10 30 40}.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = [5, 8, 6, 7, 6, 6, 5, 10, 12, 9]\n<strong>Output</strong>: [9, 12, 10, 5, 6, 7, 6, 8, 5]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; element of stack &le; 10<sup>5<br /></sup>2 &le; s.size() &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use recursion to temporarily remove elements until you reach the middle, then rebuild the stack without the middle element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to delete middle element of a stack.\n    void deleteMid_util(stack<int>& s, int sizeOfStack, int current) {\n        // if current pointer is half of the size of stack then we\n        // are accessing the middle element of stack.\n        if (current == sizeOfStack / 2) {\n            s.pop();\n            return;\n        }\n\n        // storing the top element in a variable and popping it.\n        int x = s.top();\n        s.pop();\n        current += 1;\n\n        // calling the function recursively.\n        deleteMid_util(s, sizeOfStack, current);\n\n        // pushing the elements (except middle element) back\n        // into stack after recursion calls.\n        s.push(x);\n    }\n\n    void deleteMid(stack<int>& s) { deleteMid_util(s, s.size(), 0); }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to delete middle element of a stack.\n    public void deleteMid_util(Stack<Integer> s, int sizeOfStack, int current) {\n        // if current pointer is half of the size of stack then we\n        // are accessing the middle element of stack.\n        if (current == sizeOfStack / 2) {\n            s.pop();\n            return;\n        }\n        // storing the top element in a variable and popping it.\n        int x = s.peek();\n        s.pop();\n        current += 1;\n\n        // calling the function recursively.\n        deleteMid_util(s, sizeOfStack, current);\n\n        // pushing the elements (except middle element) back\n        // into stack after recursion calls.\n        s.push(x);\n    }\n\n    public void deleteMid(Stack<Integer> s) { deleteMid_util(s, s.size(), 0); }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def deleteMid_util(self, stack, sizeOfStack, current):\n        # If current pointer is half of the size of stack then we\n        # are accessing the middle element of stack.\n        if current == sizeOfStack // 2:\n            stack.pop()\n            return\n\n        # Storing the top element in a variable and popping it.\n        x = stack.pop()\n        current += 1\n\n        # Calling the function recursively.\n        self.deleteMid_util(stack, sizeOfStack, current)\n\n        # Pushing the elements (except middle element) back\n        # into stack after recursion calls.\n        stack.append(x)\n\n    def deleteMid(self, stack):\n        self.deleteMid_util(stack, len(stack), 0)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Helper function to delete the middle element\n    deleteMid_util(stack, sizeOfStack, current) {\n        // Base case: if current equals half the size of the stack\n        if (current === Math.floor(sizeOfStack / 2)) {\n            stack.pop();\n            return;\n        }\n\n        // Store the top element and pop it\n        let x = stack.pop();\n        current++;\n\n        // Recursive call\n        this.deleteMid_util(stack, sizeOfStack, current);\n\n        // Push back all elements except the middle\n        stack.push(x);\n    }\n\n    deleteMid(stack) { this.deleteMid_util(stack, stack.length, 0); }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}