{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700175,
            "title": "Delete Middle of Linked List",
            "titleSlug": "delete-middle-of-linked-list",
            "content": "<p><span >Given a singly linked list, delete the <strong>middle&nbsp;</strong>of the linked list.</span></p>\n<p><span >Note:</span></p>\n<ul>\n<li><span >If there are <strong>even</strong> nodes, then there would be two middle nodes, we need to delete the <strong>second </strong>middle element. </span></li>\n<li><span >If the input linked list has a single node, then it should return <strong>NULL.</strong></span></li>\n</ul>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5\n<strong>Output: </strong>1-&gt;2-&gt;4-&gt;5<br /><strong>Explanation:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700175/Web/Other/blobid0_1720811038.png\" width=\"400\" height=\"90\" /><br /></strong></span></pre>\n<pre><span ><strong>Input: </strong>LinkedList: 2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1\n<strong>Output: </strong>2-&gt;4-&gt;6-&gt;5-&gt;1<br /><strong>Explaination:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700175/Web/Other/blobid1_1720811069.png\" width=\"400\" height=\"90\" /></strong></span></pre>\n<pre><span ><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>LinkedList: 7 <strong><br />Output: </strong>&lt;empty linked list&gt;<br /><strong>Explanation: </strong>There was only one node and it was deleted.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, delete the middle node. If the linked list has an even number of nodes, delete the second middle element. If the linked list contains only one node, return NULL.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "1->2->3->4->5",
                        "output": "1->2->4->5",
                        "explanation": "The middle element is 3, so after deletion linked list will be 1->2->4->5"
                    },
                    {
                        "input": "2->4->6->7->5->1",
                        "output": "2->4->6->5->1",
                        "explanation": "There are two middle elements 6 and 7, second middle element is 7, so after deletion linked list will be 2->4->6->5->1."
                    },
                    {
                        "input": "7",
                        "output": "null",
                        "explanation": "The linked list has only one node, so it is deleted, and NULL is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Find the middle node&nbsp;of the linked list and connect the node previous to middle node with the node successor to the middle node.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//\n\nclass Solution {\n  public:\n    Node *deleteMid(Node *head) {\n        if (head == NULL)\n            return NULL;\n\n        if (head->next == NULL) {\n            delete head;\n            return NULL;\n        }\n\n        Node *prev = NULL;\n        Node *slow_ptr = head;\n        Node *fast_ptr = head;\n\n        while (fast_ptr != NULL && fast_ptr->next != NULL) {\n            fast_ptr = fast_ptr->next->next;\n            // fast pointer moves 2 nodes ahead everytime loop is run\n            prev = slow_ptr;\n            // updating prev, prev holds previous value of slow pointer\n            slow_ptr = slow_ptr->next;\n            // slow pointer moves 1 node ahead everytime loop is run\n        }\n        // since slow pointer was moving at half speed, it points at\n        // mid node when fast pointer reaches the end\n        prev->next = slow_ptr->next; // bypassing mid node\n        delete slow_ptr;\n\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to delete the middle node of a linked list\n    Node deleteMid(Node head) {\n        // If the linked list is empty, return null\n        if (head == null) return null;\n\n        // If the linked list has only one node, return null\n        if (head.next == null) return null;\n\n        // Initialize pointers for traversal\n        Node prev = null;\n        Node slow_ptr = head;\n        Node fast_ptr = head;\n\n        // Traverse the linked list to find the middle node\n        while (fast_ptr != null && fast_ptr.next != null) {\n            fast_ptr = fast_ptr.next.next;\n            prev = slow_ptr;\n            slow_ptr = slow_ptr.next;\n        }\n\n        // Delete the middle node by updating the pointers\n        if (prev != null) {\n            prev.next = slow_ptr.next;\n        }\n\n        // Return the head of the updated linked list\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def deleteMid(self, head):\n        if head is None or head.next is None:\n            return None\n\n        prev, slow, fast = None, head, head\n\n        while fast and fast.next:\n            fast = fast.next.next\n            # fast pointer moves 2 nodes ahead everytime loop is run\n\n            prev = slow\n            # updating prev, prev holds previous value of slow pointer\n\n            slow = slow.next\n            # slow pointer moves 1 node ahead everytime loop is run\n\n        # since slow pointer was moving at half speed, it points at\n        # mid node when fast pointer reaches the end\n        prev.next = slow.next\n        # bypassing mid node\n\n        return head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    deleteMid(head) {\n        if (head == null) return null;\n\n        if (head.next == null) return null;\n\n        let prev = null;\n        let slow_ptr = head;\n        let fast_ptr = head;\n\n        while (fast_ptr != null && fast_ptr.next != null) {\n            fast_ptr = fast_ptr.next.next;\n            // fast pointer moves 2 nodes ahead everytime loop is run\n\n            prev = slow_ptr;\n            // updating prev, prev holds previous value of slow pointer\n\n            slow_ptr = slow_ptr.next;\n            // slow pointer moves 1 node ahead everytime loop is run\n        }\n\n        // since slow pointer was moving at half speed, it points at\n        // mid node when fast pointer reaches the end\n        prev.next = slow_ptr.next; // bypassing mid node\n\n        return head;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}