{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700021,
            "title": "Delete N nodes after M nodes of a linked list",
            "titleSlug": "delete-n-nodes-after-m-nodes-of-a-linked-list",
            "content": "<p><span ><span style=\"font-family: arial, helvetica, sans-serif;\">Given a linked list, delete <strong>n</strong> nodes after skipping <strong>m</strong> nodes of a linked list until the last of the linked list.<br /></span><strong style=\"font-family: arial, helvetica, sans-serif;\">Examples:</strong></span></p>\n<pre><span ><span style=\"font-family: arial, helvetica, sans-serif;\"><strong>Input</strong>: Linked List: 9-&gt;1-&gt;3-&gt;5-&gt;9-&gt;4-&gt;10-&gt;1, n = 1, m = 2<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700021/Web/Other/blobid0_1720698284.png\" width=\"482\" height=\"58\" /><br /></span><strong style=\"font-family: arial, helvetica, sans-serif;\">Output</strong><span style=\"font-family: arial, helvetica, sans-serif;\">: 9-&gt;1-&gt;5-&gt;9-&gt;10-&gt;1</span></span><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700021/Web/Other/blobid4_1720698395.png\" width=\"401\" height=\"60\" /><br /><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Explanation</strong>: Deleting 1 node after skipping 2 nodes each time, we have list as 9-&gt; 1-&gt; 5-&gt; 9-&gt; 10-&gt; 1.</span></pre>\n<pre><span ><strong style=\"font-family: arial, helvetica, sans-serif;\">Input</strong><span style=\"font-family: arial, helvetica, sans-serif;\">: Linked List: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6, n = 1, m = 6<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700021/Web/Other/blobid2_1720698315.png\" width=\"403\" height=\"55\" /><br /></span><strong style=\"font-family: arial, helvetica, sans-serif;\">Output</strong><span style=\"font-family: arial, helvetica, sans-serif;\">: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6<br /></span></span><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700021/Web/Other/blobid3_1720698324.png\" width=\"403\" height=\"55\" /><br /><span ><strong style=\"font-family: arial, helvetica, sans-serif;\">Explanation</strong><span style=\"font-family: arial, helvetica, sans-serif;\">: After skipping 6 nodes for the first time , we will reach of end of the linked list, so, we will get the given linked list itself.</span></span></pre>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><span style=\"box-sizing: border-box; line-height: 1.7em; color: #1e2229; background-color: #ffffff;\"><span style=\"box-sizing: border-box; line-height: 1.7em;\"><strong>Expected Time Complexity</strong>:</span><span style=\"box-sizing: border-box; line-height: 1.7em;\">&nbsp;O(n)<br style=\"box-sizing: border-box; line-height: 1.7em; color: var(--text-color) !important; background-color: var(--background) !important;\" /></span></span><strong><span style=\"box-sizing: border-box; line-height: 1.7em; color: #1e2229; background-color: #ffffff;\"><span style=\"box-sizing: border-box; line-height: 1.7em;\">Expected Space&nbsp;</span></span><span style=\"box-sizing: border-box; line-height: 1.7em; color: #1e2229; background-color: #ffffff;\">Complexity</span></strong><span style=\"box-sizing: border-box; line-height: 1.7em; color: #1e2229; background-color: #ffffff;\">:</span><span style=\"box-sizing: border-box; line-height: 1.7em; color: #1e2229; background-color: #ffffff;\">&nbsp;O(1)</span></span></p>\n<p><span ><span style=\"font-family: arial, helvetica, sans-serif;\"><strong>Constraints</strong>:<br /></span><span style=\"font-family: arial, helvetica, sans-serif;\">1 &lt;= size of linked list &lt;= 1000<br /></span><span style=\"font-family: arial, helvetica, sans-serif;\">0 &lt; n, m &lt;= size of linked list</span><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, delete 'n' nodes after skipping 'm' nodes. Repeat this process until the end of the linked list.",
                "constraints": [
                    "1 <= size of linked list <= 1000",
                    "0 < n, m <= size of linked list"
                ],
                "testcases": [
                    {
                        "input": "Linked List: 9->1->3->5->9->4->10->1, n = 1, m = 2",
                        "output": "9->1->5->9->10->1",
                        "explanation": "Skip 2 nodes, delete 1 node. Repeat until the end of the list. After skipping 9->1, 3 is deleted. After skipping 5->9, 4 is deleted."
                    },
                    {
                        "input": "Linked List: 1->2->3->4->5->6, n = 1, m = 6",
                        "output": "1->2->3->4->5->6",
                        "explanation": "Since m (the number of nodes to skip) is equal to the length of the list, we reach the end of the list after the first skip. Therefore, no nodes are deleted, and the original list is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<div class=\"flex flex-grow flex-col max-w-full\">\n<div class=\"min-h-[20px] text-message flex flex-col items-start whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 juice:w-full juice:items-end overflow-x-auto gap-2\" dir=\"auto\" data-message-author-role=\"assistant\" data-message-id=\"a17b4de8-a18a-457d-a3da-36257f7fd50e\">\n<div class=\"flex w-full flex-col gap-1 juice:empty:hidden juice:first:pt-[3px]\">\n<div class=\"markdown prose w-full break-words dark:prose-invert light\">\n<p><span style=\"font-size: 14pt;\">Traverse the linked list, skip <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord mathnormal\">m</span></span></span></span> nodes, and then delete the next <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord mathnormal\">n</span></span></span></span> nodes, and repeat until the end.</span></p>\n</div>\n</div>\n</div>\n</div>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node* linkdelete(Node* head, int n, int m) {\n        Node* curr = head;\n        Node* t;\n        int count;\n\n        // The main loop that traverses through the whole list\n        while (curr) {\n            // Skip m nodes\n            for (count = 1; count < m && curr != NULL; count++) {\n                curr = curr->next;\n            }\n\n            // If we reached the end of the list, return the head\n            if (curr == NULL || curr->next == NULL) {\n                return head;\n            }\n\n            // Start from next node and delete n nodes\n            t = curr->next;\n            for (count = 1; count <= n && t != NULL; count++) {\n                Node* temp = t;\n                t = t->next;\n                delete temp; // Use delete for nodes created with new\n            }\n\n            // Link the previous list with remaining nodes\n            curr->next = t;\n\n            // Set current pointer for next iteration\n            curr = t;\n        }\n\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static void linkdelete(Node head, int n, int m) {\n        Node temp = head, t; // Initializing pointers\n        int count = 0;       // Initializing count variable\n        while (temp != null) // Loop until end of linked list\n        {\n            for (count = 1; count < m && temp != null; count++) // Traverse m nodes\n                temp = temp.next; // Move temp pointer to next node\n\n            if (temp == null) // If temp becomes null, return\n                return;\n            t = temp.next; // Store next node after m nodes\n            for (count = 1; count <= n && t != null; count++) // Traverse n nodes\n            {\n\n                t = t.next; // Move t pointer to next node\n            }\n            temp.next = t; // Connect current node to next n nodes\n            temp = t;      // Move temp to next node after n nodes\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# your task is to complete this Function\n# Function shouldn't return anything\nclass Solution:\n\n    def linkdelete(self, head, n, m):\n        # Code here\n        curr = head\n        while (curr):\n            # Skip m nodes\n            for count in range(1, m):\n                if curr is None:\n                    return\n                curr = curr.next\n            if curr is None:\n                return\n            t = curr.next\n            for count in range(1, n + 1):\n                if t is None:\n                    break\n                t = t.next\n            curr.next = t\n            curr = t\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/*LINKED LIST NODE\nclass Node {\n  constructor(x){\n    this.data = x;\n    this.next = null;\n  }\n}\n*/\n\n/**\n * @param {Node} head\n * @param {number} n\n * @param {number} m\n */\n\nclass Solution {\n    linkdelete(head, n, m) {\n        // code here\n        let curr = head;\n        let count;\n\n        // The main loop that traverses through the whole list\n        while (curr) {\n            // Skip m nodes\n            for (count = 1; count < m && curr != null; count++) curr = curr.next;\n\n            // If we reached end of list, then return\n            if (curr == null) return;\n\n            // Start from next node and delete N nodes\n            let t = curr.next;\n            for (count = 1; count <= n && t != null; count++) {\n                let temp = t;\n                t = t.next;\n                temp = null;\n            }\n            curr.next = t; // Link the previous list with remaining nodes\n\n            // Set current pointer for next iteration\n            curr = t;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}