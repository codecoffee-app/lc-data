{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700131,
            "title": "Delete in a Doubly Linked List",
            "titleSlug": "delete-node-in-doubly-linked-list",
            "content": "<p><span >Given a <strong>Doubly</strong> <strong>Linked list</strong> and a <strong>position</strong>. The task is to <strong>delete</strong> a node from a given position (position starts from 1) in a doubly linked list and return the head of the doubly Linked list. </span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList = 1 &lt;--&gt; 3 &lt;--&gt; 4, x = 3\n<strong>Output: </strong>1 &lt;--&gt; 3<strong>\nExplanation: </strong>After deleting the node at position 3 (position starts from 1),the linked list will be now as 1 &lt;--&gt; 3.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700131/Web/Other/blobid1_1719574036.png\" width=\"400\" height=\"200\" /> </span></pre>\n<pre><span ><strong>Input: </strong>LinkedList = 1 &lt;--&gt; 5 &lt;--&gt; 2 &lt;--&gt; 9, x = 1\n<strong>Output: </strong>5 &lt;--&gt; 2 &lt;--&gt; 9<strong><br /></strong><strong>Explanation:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700131/Web/Other/blobid2_1719574060.png\" width=\"400\" height=\"200\" /><br /></strong></span></pre>\n<p><span ><strong>Constraints:</strong><br />2 &lt;= size of the linked list &lt;= 10<sup>6</sup><br />1 &lt;= x &lt;=&nbsp;<span style=\"font-size: 18.6667px;\">size of the linked list&nbsp;</span><br />1 &lt;= node-&gt;data &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a doubly linked list and a position (starting from 1), delete the node at the given position and return the head of the updated doubly linked list.",
                "constraints": [
                    "2 <= size of the linked list <= 10^6",
                    "1 <= x <= size of the linked list",
                    "1 <= node->data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "LinkedList = 1 <--> 3 <--> 4, x = 3",
                        "output": "1 <--> 3",
                        "explanation": "After deleting the node at position 3, the linked list becomes 1 <--> 3."
                    },
                    {
                        "input": "LinkedList = 1 <--> 5 <--> 2 <--> 9, x = 1",
                        "output": "5 <--> 2 <--> 9",
                        "explanation": "After deleting the node at position 1, the linked list becomes 5 <--> 2 <--> 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Locate the node to be deleted. If the next node is not NULL, make sure its (next node's) 'prev' variable is changed to whatever node was there before the node was deleted. Similarly, if there is a non-NULL node before the target node, change its 'next' variable.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "walmart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to delete a node at given position.\n    Node* deleteNode(Node* head, int x) {\n        // initializing del node with head.\n        Node* del = head;\n        x = x - 1;\n\n        // iterating till the position given in parameter.\n        while (x--)\n            del = del->next;\n\n        /* base case */\n        // if head or del is null, return null.\n        if (head == NULL || del == NULL)\n            return NULL;\n\n        /* If Node to be deleted is head Node */\n        // if del is equal to head, update head to next node.\n        if (head == del)\n            head = del->next;\n\n        /* Change next only if Node to be deleted is NOT the last Node */\n        // if del next is not null, update previous node of del next to del previous.\n        if (del->next != NULL)\n            del->next->prev = del->prev;\n\n        /* Change prev only if Node to be deleted is NOT the first Node */\n        // if del previous is not null, update next node of del previous to del next.\n        if (del->prev != NULL)\n            del->prev->next = del->next;\n\n        /* Finally, free the memory occupied by del*/\n        // free up the memory of del node.\n        delete del;\n        // return updated head.\n        return head;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// class Node {\n//     int data;\n//     Node next;\n//     Node prev;\n\n//     Node(int val) {\n//         data = val;\n//         next = null;\n//         prev = null;\n//     }\n// }\n\nclass Solution {\n    // Function to delete a node at a given position.\n    public Node deleteNode(Node head, int x) {\n        // Initializing del node with head.\n        Node del = head;\n        x = x - 1;\n\n        // Iterating till the position given in parameter.\n        while (x-- > 0) {\n            del = del.next;\n        }\n\n        /* Base case */\n        // If head or del is null, return null.\n        if (head == null || del == null) {\n            return null;\n        }\n\n        /* If Node to be deleted is head Node */\n        // If del is equal to head, update head to next node.\n        if (head == del) {\n            head = del.next;\n        }\n\n        /* Change next only if Node to be deleted is NOT the last Node */\n        // If del next is not null, update previous node of del next to del previous.\n        if (del.next != null) {\n            del.next.prev = del.prev;\n        }\n\n        /* Change prev only if Node to be deleted is NOT the first Node */\n        // If del previous is not null, update next node of del previous to del next.\n        if (del.prev != null) {\n            del.prev.next = del.next;\n        }\n\n        // Return updated head.\n        return head;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def delete_node(self, head, x):\n        del_node = head\n        x -= 1\n        while x > 0:\n            del_node = del_node.next\n            x -= 1\n\n        # base case\n        if head is None or del_node is None:\n            return None\n\n        # If Node to be deleted is head Node\n        if head == del_node:\n            head = del_node.next\n\n        # Change next only if Node to be deleted is NOT the last Node\n        if del_node.next is not None:\n            del_node.next.prev = del_node.prev\n\n        # Change prev only if Node to be deleted is NOT the first Node\n        if del_node.prev is not None:\n            del_node.prev.next = del_node.next\n\n        # return updated head\n        return head\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    deleteNode(head, x) {\n        // Adjust x to be 0-based index\n        let del_node = head;\n        let index = x - 1;\n\n        // Traverse to the node to be deleted\n        while (index > 0 && del_node !== null) {\n            del_node = del_node.next;\n            index--;\n        }\n\n        // Base case: if the node to be deleted is not found\n        if (del_node === null) {\n            return head;\n        }\n\n        // If the node to be deleted is the head node\n        if (head === del_node) {\n            head = del_node.next;\n        }\n\n        // Change next only if node to be deleted is not the last node\n        if (del_node.next !== null) {\n            del_node.next.prev = del_node.prev;\n        }\n\n        // Change prev only if node to be deleted is not the first node\n        if (del_node.prev !== null) {\n            del_node.prev.next = del_node.next;\n        }\n\n        // Return the updated head\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}