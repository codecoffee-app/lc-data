{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700515,
            "title": "Delete nodes greater than k",
            "titleSlug": "delete-nodes-greater-than-k",
            "content": "<p><span style=\"font-size:18px\">Given a <strong>BST</strong> and a <strong>value k</strong>, the task is to delete the nodes having values <strong>greater than or equal to k</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n    4 &nbsp; \r\n   / \\ <strong> </strong>\r\n  1   9 \r\nk = 2<strong> </strong>\r\n<strong>Output:</strong>\r\n1</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThe task is to complete the function <strong>deleteNode()</strong> which takes root, k as the argument, and returns the root of tree after deleting values greater than or equal to k. The driver code will print the inorder traversal of the updated tree in output itself. </span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(Size of tree)<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= T &lt;= 100<br />\r\n1 &lt;= N &lt;= 10<sup>3</sup><br />\r\n1 &lt;= A[] &lt;= 10<sup>3</sup><br />\r\n1 &lt;= k&nbsp;&lt;= N</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and a value 'k', remove all nodes from the BST whose values are greater than or equal to 'k'.  Return the root of the modified BST.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 10^3 (Number of nodes in the BST)",
                    "1 <= A[i] <= 10^3 (Value of each node in the BST)",
                    "1 <= k <= N"
                ],
                "testcases": [
                    {
                        "input": "BST: [4, 1, 9], k = 2",
                        "output": "[1]",
                        "explanation": "Nodes with values 4 and 9 are greater than or equal to 2, and are removed. The remaining tree contains only the node with value 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do a postorder traversal and delete all nodes which are greater than or equal to k.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Algorithm to delete a node from a binary tree\r\nclass Solution{\r\n    public:\r\n    // Function to delete a node from a binary tree\r\n    Node* deleteNode(Node* root, int k)\r\n    {\r\n    \t// base case, if the root is null, return null\r\n    \tif (root == NULL) return NULL;\r\n    \t\r\n    \t// Recursively delete the node from the right subtree\r\n        root->right = deleteNode(root->right,k);\r\n    \t\r\n    \t// Recursively delete the node from the left subtree\r\n    \troot->left = deleteNode(root->left,k);\r\n    \t\r\n    \t// If the value in the current node is greater or equal to k\r\n    \tif(root->data>=k)\r\n    \t{\r\n    \t    // Delete the current node and return the left subtree\r\n    \t    Node *temp = root->left;\r\n    \t    delete(root);\r\n    \t    return temp;\r\n    \t}\r\n    \t\r\n    \t// If the value in the current node is less than k, return the current node\r\n    \treturn root;\r\n    \t\r\n    }\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n\tpublic static Node root1=null; //declaration of root1 variable\n\tpublic static int flag=0; //declaration of flag variable\n\tpublic Node deleteNode(Node root,int k){ //method to delete node\n\t\tSolution g=new Solution(); //creating an object of Solution class\n\t\troot1=null; //initialize root1 to null\n\t\tflag=0; //initialize flag to 0\n\t\tg.deleteNodeUtil(root,k); //calling deleteNodeUtil method\n\t\treturn root1; //returning the updated root\n\t}\n\tpublic static void deleteNodeUtil(Node root,int k){ //method to delete node util\n\t\tif(root==null) //if root is null\n\t\t\treturn; //exit the method\n\t\tdeleteNodeUtil(root.left,k); //recursive call to deleteNodeUtil on left subtree\n\t\tif(root.data>=k){ //if the data in current root is greater or equal to k\n\t\t\tk=0; //set k to 0\n\t\t\tflag=1; //set flag to 1\n\t\t\treturn; //exit the method\n\t\t}\n\t\tif(flag==0){ //if flag is 0\n\t\tif(root1==null) //if root1 is null\n\t\troot1=new Node(root.data); //assign root.data to root1\n\t\telse{\n\t\t\tinsert(root1,root.data); //call insert method to add root.data to root1\n\t\t}\n\t\t}\n\t\tdeleteNodeUtil(root.right,k); //recursive call to deleteNodeUtil on right subtree\n\t}\n\tpublic static Node insert(Node root,int a){ //method to insert a node\n\t\tif(root==null){ //if root is null\n\t\t\treturn new Node(a); //return a new node with data a\n\t\t}\n\t\telse if(a<root.data){ //if a is less than root.data\n\t\t\troot.left=insert(root.left,a); //recursively call insert method on left subtree\n\t\t}\n\t\telse\n\t\t\troot.right=insert(root.right,a); //recursively call insert method on right subtree\n\t\t\n\t\treturn root; //return the updated root\n\t}\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n# class representing the Solution\nclass Solution:\n    \n    # function to delete a node with value k from the tree\n    def deleteNode(self, root, k):\n        \n        # if tree is empty, return None\n        if root is None:\n            return None\n        \n        # recursively delete the node from the right subtree\n        root.right = self.deleteNode(root.right, k)\n        \n        # recursively delete the node from the left subtree\n        root.left = self.deleteNode(root.left, k)\n        \n        # if current node's value is greater than or equal to k, delete it\n        if root.data >= k:\n            return root.left\n        \n        # otherwise, return the current node\n        return root",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}