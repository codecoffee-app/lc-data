{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700101,
            "title": "Delete nodes having greater value on right",
            "titleSlug": "delete-nodes-having-greater-value-on-right",
            "content": "<p>Given a singly linked list, remove all nodes that have a node with a greater value anywhere to their right in the list. Return the head of the modified linked list.</p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input:\n</strong>LinkedList = 12-&gt;15-&gt;10-&gt;11-&gt;5-&gt;6-&gt;2-&gt;3\n<strong>Output: </strong>15-&gt;11-&gt;6-&gt;3<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700101/Web/Other/blobid0_1723577084.png\" width=\"430\" height=\"97\" /><strong>\nExplanation: </strong>Since, 12, 10, 5 and 2 are the elements which have greater elements on the following nodes. So, after deleting them, the linked list would like be 15, 11, 6, 3.\n</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input:\n</strong>LinkedList = 10-&gt;20-&gt;30-&gt;40-&gt;50-&gt;60\n<strong>Output: </strong>60<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700101/Web/Other/blobid1_1723577204.png\" width=\"430\" height=\"97\" /><br /><strong>Explanation: </strong>All the nodes except the last node has a greater value node on its right, so all the nodes except the last node must be removed.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &le; size of linked list &le; 10<sup>6</sup><br />1 &le; element of linked list &le; 10<sup>6</sup><br /><br /><strong>Note: Try to solve the problem without using any extra space.</strong></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, remove all nodes that have a node with a greater value located anywhere to their right. Return the head of the modified linked list after removing such nodes.",
                "constraints": [
                    "1 <= size of linked list <= 10^6",
                    "1 <= element of linked list <= 10^6",
                    "Solve the problem without using any extra space."
                ],
                "testcases": [
                    {
                        "input": "LinkedList = 12->15->10->11->5->6->2->3",
                        "output": "15->11->6->3",
                        "explanation": "The nodes with values 12, 10, 5, and 2 are removed because each of them is followed by at least one node with a larger value. The resulting linked list is 15->11->6->3."
                    },
                    {
                        "input": "LinkedList = 10->20->30->40->50->60",
                        "output": "60",
                        "explanation": "All nodes except the last node (60) have a greater value to their right. Therefore, all nodes except the last one are removed, leaving only the node with value 60."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Reverse the linked list twice to efficiently remove nodes with greater values on the left.</span></p>",
            "<p><span style=\"font-size:18px\">2. Remove nodes which have bigger value on the left.</span></p>\n\n<p><span style=\"font-size:18px\">To do this, simply iterate from left to right, and store the max value seen. Keep comparing all nodes to the stored max value.</span></p>\n\n<p><span style=\"font-size:18px\">In the end reverse the list again.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node *compute(Node *head) {\n        // First reversed the linked list\n\n        Node *cur = head;\n        Node *prev = NULL;\n        Node *next;\n\n        while (cur != NULL) {\n            next = cur->next;\n            cur->next = prev;\n            prev = cur;\n            cur = next;\n        }\n\n        head = prev;\n\n        // Link list is reversed till here\n\n        // Computing and deleting the nodes which have larger nodes\n        // on the left\n\n        Node *current = head;\n\n        Node *maxNode = head;\n        Node *temp;\n\n        while (current != NULL && current->next != NULL) {\n            if (current->next->data < maxNode->data) {\n                temp = current->next;\n                current->next = temp->next;\n                free(temp);\n            } else {\n                current = current->next;\n                maxNode = current;\n            }\n        }\n\n        // reversing list again to get required result :-\n\n        cur = head;\n        prev = NULL;\n        next;\n        while (cur != NULL) {\n            next = cur->next;\n            cur->next = prev;\n            prev = cur;\n            cur = next;\n        }\n\n        head = prev;\n\n        // head of list can be returned now\n\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "/*\nclass Node {\n   int data;\n   Node next;\n\n  Node(int data) {\n      this.data = data;\n  }\n}\n*/\nclass Solution {\n\n    Node compute(Node head) {\n        // First reversed the linked list\n\n        Node cur = head;\n        Node prev = null;\n        Node next;\n\n        while (cur != null) {\n            next = cur.next;\n            cur.next = prev;\n            prev = cur;\n            cur = next;\n        }\n\n        head = prev;\n\n        // Link list is reversed till here\n\n        // Computing and deleting the nodes which have larger nodes\n        // on the left\n\n        Node current = head;\n\n        Node maxNode = head;\n        Node temp;\n\n        while (current != null && current.next != null) {\n            if (current.next.data < maxNode.data) {\n                temp = current.next;\n                current.next = temp.next;\n\n            } else {\n                current = current.next;\n                maxNode = current;\n            }\n        }\n\n        // reversing list again to get required result :-\n\n        cur = head;\n        prev = null;\n\n        while (cur != null) {\n            next = cur.next;\n            cur.next = prev;\n            prev = cur;\n            cur = next;\n        }\n\n        head = prev;\n\n        // head of list can be returned now\n\n        return head;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def compute(self, head):\n        curr = head\n        prev = None\n        nextt = None\n\n        # Reversing the linked list\n        while (curr is not None):\n            nextt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nextt\n\n        head = prev\n\n        current = head\n        maxNode = head\n        temp = None\n\n        # Removing nodes which are smaller than the current maximum node\n        while (current is not None and current.next is not None):\n            if current.next.data < maxNode.data:\n                temp = current.next\n                current.next = temp.next\n            else:\n                current = current.next\n                maxNode = current\n        curr = head\n        prev = None\n\n        # Reversing the linked list again and updating the head\n        while (curr is not None):\n            nextt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nextt\n        head = prev\n        return head\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {Node} head\n * @returns {Node}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n*/\n\nclass Solution {\n\n    compute(head) {\n        // First reversed the linked list\n\n        let cur = head;\n        let prev = null;\n        let next;\n\n        while (cur != null) {\n            next = cur.next;\n            cur.next = prev;\n            prev = cur;\n            cur = next;\n        }\n\n        head = prev;\n\n        // Link list is reversed till here\n\n        // Computing and deleting the nodes which have larger nodes\n        // on the left\n\n        let current = head;\n\n        let maxNode = head;\n        let temp;\n\n        while (current != null && current.next != null) {\n            if (current.next.data < maxNode.data) {\n                temp = current.next;\n                current.next = temp.next;\n                temp = null;\n            } else {\n                current = current.next;\n                maxNode = current;\n            }\n        }\n\n        // reversing list again to get required result :-\n\n        cur = head;\n        prev = null;\n        next;\n        while (cur != null) {\n            next = cur.next;\n            cur.next = prev;\n            prev = cur;\n            cur = next;\n        }\n\n        head = prev;\n\n        // head of list can be returned now\n\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}