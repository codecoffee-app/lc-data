{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700161,
            "title": "Delete without head pointer",
            "titleSlug": "delete-without-head-pointer",
            "content": "<p><span style=\"font-size: 18px;\">You are given a node <strong>del_node</strong> of a Singly Linked List where you have to <strong>delete</strong> a <strong>value </strong>of the given node from the linked list but you are not given the <strong>head</strong> of the list.</span></p>\n<p><span style=\"font-size: 18px;\">By deleting the node value, we do not mean removing it from memory. We mean:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">The value of the given node should not exist in the linked list.</span></li>\n<li><span style=\"font-size: 18px;\">The number of nodes in the linked list should decrease by one.</span></li>\n<li><span style=\"font-size: 18px;\">All the values before &amp; after the <strong>del_node </strong>node should be in the same order.</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong></span></p>\n<ol>\n<li><span style=\"font-size: 18px;\">Multiple nodes can have the same values as the del_node, but you must only remove the node whose pointer del_node is given to you.</span></li>\n<li><span style=\"font-size: 18px;\">It is guaranteed that there exists a node with a value equal to the del_node value<strong> </strong>and it will <strong>not be the last node</strong> of the linked list.</span></li>\n</ol>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Linked List = 1 -&gt; 2, del_node = 1\n<strong>Output: </strong></span><span style=\"font-size: 18px;\">2<strong>\nExplanation: </strong>After deleting 1 from the linked list, we have remaining nodes as 2.<br /></span><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700161/Web/Other/blobid0_1724435615.png\" width=\"398\" height=\"159\" /> </pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Linked List = 10 -&gt; 20 -&gt; 4 -&gt; 30, del_node = 20\n<strong>Output: </strong>10-&gt;4-&gt;30<strong>\nExplanation: </strong>After deleting 20 from the linked list, we have remaining nodes as 10, 4, 30.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700161/Web/Other/blobid1_1724435635.png\" width=\"390\" height=\"156\" /><br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= number of nodes &lt;= 10<sup>6&nbsp;</sup>&nbsp;<br />1 &lt;= node-&gt;data &lt;= 10<sup>6</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a node `del_node` within a Singly Linked List. Your task is to effectively delete the value associated with this given node from the list, given only a pointer to `del_node` and **not** the head of the list.\n\nDeleting the node's value implies the following:\n\n*   The value originally held by `del_node` should no longer be considered part of the linked list.\n*   The effective length of the linked list is reduced by one.\n*   The relative order of all other nodes in the list (before and after `del_node`) must remain unchanged.",
                "constraints": [
                    "2 <= number of nodes <= 10^6",
                    "1 <= node->data <= 10^6",
                    "It is guaranteed that a node with value equal to `del_node`'s value exists, and this node will not be the last node in the list."
                ],
                "testcases": [
                    {
                        "input": "Linked List = 1 -> 2, del_node = 1",
                        "output": "2",
                        "explanation": "After deleting the node with value 1, the remaining linked list is simply the node with value 2."
                    },
                    {
                        "input": "Linked List = 10 -> 20 -> 4 -> 30, del_node = 20",
                        "output": "10 -> 4 -> 30",
                        "explanation": "After deleting the node with value 20, the remaining linked list consists of the nodes with values 10, 4, and 30, in that order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to Copy the data from the next node to the current node &amp; update the current node's next pointer to skip over the next node.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "samsung",
            "visa",
            "goldman-sachs",
            "kritikal-solutions"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "/* Solution class definition */\nclass Solution {\n  public:\n    // Function to delete a node without any reference to the head pointer.\n    void deleteNode(Node* del_node) {\n        if (del_node == NULL || del_node->next == NULL) {\n            return; // Cannot delete if node is NULL or has no next node\n        }\n\n        // Storing the node next to the given node in a pointer.\n        Node* temp = del_node->next;\n\n        // Copying the data of the next node to the given current node.\n        del_node->data = temp->data;\n\n        // Storing the next node's next pointer in the current node's link part.\n        del_node->next = temp->next;\n\n        // Deleting the next node to free up memory.\n        delete temp;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Solution class containing the method to delete a node\nclass Solution {\n    // Function to delete a node in a singly linked list\n    void deleteNode(Node node) {\n        // Check if the node or its next node is null\n        if (node == null || node.next == null) {\n            return;\n        }\n        // Copy data of the next node to the current node\n        Node nextNode = node.next;\n        node.data = nextNode.data;\n        // Update the next pointer of the current node to skip the next node\n        node.next = nextNode.next;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to delete a node in the middle of a singly linked list.\n    def deleteNode(self, node):\n        # Checking if node is valid and not the last node.\n        if node is None or node.next is None:\n            return\n        # Storing the next node in a variable.\n        next_node = node.next\n        # Copying data of the next node to the current node.\n        node.data = next_node.data\n        # Updating the next of the current node to the next of the next node.\n        node.next = next_node.next\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "/**\n * Deletes a node in the middle of a singly linked list.\n * @param {Node} node - The node to be deleted.\n */\nclass Solution {\n    deleteNode(node) {\n        // Check if the node is valid and not the last node.\n        if (node === null || node.next === null) {\n            return;\n        }\n        // Copy data of the next node to the current node.\n        node.data = node.next.data;\n        // Update the next pointer of the current node to skip the next node.\n        node.next = node.next.next;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}