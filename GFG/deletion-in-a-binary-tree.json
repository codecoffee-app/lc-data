{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700673,
            "title": "Deletion in a Binary Tree",
            "titleSlug": "deletion-in-a-binary-tree",
            "content": "<p><span >Given a <strong>binary tree</strong> with nodes where all elements are unique, implement a function that deletes a node with a specified value (<strong>key</strong>) from the tree. When a node is deleted, the tree should shrink from the bottom, meaning the deleted node is replaced by the bottom-most, right-most node in the tree. After deletion, the binary tree will be printed using <strong>in-order</strong> traversal.</span></p>\n<p><span ><strong>Example:</strong></span></p>\n<p><span ><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700673/Web/Other/blobid0_1733418092.jpg\" width=\"482\" height=\"337\" /><br /><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>root[] = [10, 20, 30], key = 10<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700673/Web/Other/blobid0_1733321134.jpg\" width=\"267\" height=\"237\" /> <br /><strong>Output: </strong>[20, 30]\n<strong>Explanation:</strong>\nThe node with the key <code>10</code> (the root) is to be deleted. The bottom-most, right-most node (<code>30</code>) replaces node <code>10</code>. The modified tree becomes: <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700673/Web/Other/blobid2_1733321183.jpg\" width=\"257\" height=\"227\" /><br />The inorder traversal of the modified tree is <code>[20, 30]</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span><br /></span></pre>\n<pre><span ><strong>Input: </strong>root[] = [10, 20, 30, N, N, N, 40], key = 20</span><br /><span ><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700673/Web/Other/blobid3_1733321259.jpg\" width=\"251\" height=\"222\" /> <br /><strong>Output: </strong>[40, 10, 30]\n<strong>Explanation: <br /></strong>The node with the key <code>20</code> is to be deleted. The bottom-most, right-most node (<code>40</code>) replaces node <code>20</code>. The modified tree becomes:</span><br /><span ><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700673/Web/Other/blobid4_1733321285.jpg\" width=\"243\" height=\"215\" /><br />The inorder traversal of the modified tree is <code>[40, 10, 30]</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1&nbsp;&le; number of nodes &le; 10<sup>4</sup></span><br /><span >1&nbsp;&le; node-&gt;data &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Replace the key node&rsquo;s value with the deepest node&rsquo;s, then delete the deepest node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Solution class containing the deletion functions\nclass Solution {\n  public:\n    // Function to delete the deepest node in the binary tree\n    void deleteDeepest(Node* root, Node* targetNode) {\n        queue<Node*> q;\n        q.push(root);\n        Node* temp;\n\n        // Perform level-order traversal to find and delete the deepest node\n        while (!q.empty()) {\n            temp = q.front();\n            q.pop();\n\n            // If the right child is the target node, delete it\n            if (temp->right) {\n                if (temp->right == targetNode) {\n                    temp->right = NULL;\n                    return;\n                } else {\n                    q.push(temp->right);\n                }\n            }\n\n            // If the left child is the target node, delete it\n            if (temp->left) {\n                if (temp->left == targetNode) {\n                    temp->left = NULL;\n                    return;\n                } else {\n                    q.push(temp->left);\n                }\n            }\n        }\n    }\n\n    // Function to delete the node with the given key from the binary tree\n    Node* deleteNode(Node* root, int key) {\n        if (root == NULL)\n            return root;\n\n        queue<Node*> q;\n        q.push(root);\n        Node* temp;\n        Node* keyNode = NULL;\n\n        // Perform level-order traversal to find the node with the given key\n        while (!q.empty()) {\n            temp = q.front();\n            q.pop();\n\n            if (temp->data == key) {\n                keyNode = temp;\n            }\n\n            if (temp->left)\n                q.push(temp->left);\n            if (temp->right)\n                q.push(temp->right);\n        }\n\n        // If the keyNode is found, replace its value with the deepest node's value\n        if (keyNode != NULL) {\n            int deepestNodeData = temp->data; // Temp holds the deepest node\n            deleteDeepest(root, temp);\n            keyNode->data = deepestNodeData;\n        }\n\n        return root;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\n// Class containing the solution for deleting a node from a binary tree\nclass Solution {\n\n    // Method to delete a node with the given key value from the binary tree\n    public Node deleteNode(Node root, int key) {\n\n        // If the tree is empty, return null\n        if (root == null) return root;\n\n        // Variables to store the last node visited and the node to be deleted\n        Node last = null;\n        Node toDelete = null;\n\n        // Queue for level-order traversal\n        Queue<Node> q = new LinkedList<>();\n        q.add(root);\n\n        // Perform level-order traversal to find the node to delete and the last node\n        while (!q.isEmpty()) {\n            last = q.poll();\n\n            // Check if the current node is the one to be deleted\n            if (last.data == key) {\n                toDelete = last;\n            }\n\n            // Add the left and right children to the queue if they exist\n            if (last.left != null) q.add(last.left);\n            if (last.right != null) q.add(last.right);\n        }\n\n        // If the node to be deleted is found, proceed with the deletion\n        if (toDelete != null) {\n            // Copy the value of the last node to the node to delete\n            toDelete.data = last.data;\n\n            // Perform level-order traversal again to remove the last node\n            q = new LinkedList<>();\n            q.add(root);\n            Node currNode;\n\n            while (!q.isEmpty()) {\n                currNode = q.poll();\n\n                // Check if the left child is the last node\n                if (currNode.left != null) {\n                    if (currNode.left == last) {\n                        currNode.left = null; // Remove the last node\n                    } else {\n                        q.add(currNode.left);\n                    }\n                }\n\n                // Check if the right child is the last node\n                if (currNode.right != null) {\n                    if (currNode.right == last) {\n                        currNode.right = null; // Remove the last node\n                    } else {\n                        q.add(currNode.right);\n                    }\n                }\n            }\n        }\n\n        // Return the updated root of the tree\n        return root;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Solution class containing the deletion functions\nclass Solution:\n    # Function to delete the deepest node in a binary tree\n    def deleteDeepest(self, root, d_node):\n        q = []\n        q.append(root)\n\n        # Iterating over the tree level by level.\n        while (len(q)):\n            temp = q.pop(0)\n\n            # If the current node is the deepest node, delete it.\n            if temp is d_node:\n                temp = None\n                return\n\n            # Checking the right child of the current node.\n            if temp.right:\n                if temp.right is d_node:\n                    # If the right child of the current node is the deepest node, delete it.\n                    temp.right = None\n                    return\n                else:\n                    # If not, add it to the queue for further processing.\n                    q.append(temp.right)\n\n            # Checking the left child of the current node.\n            if temp.left:\n                if temp.left is d_node:\n                    # If the left child of the current node is the deepest node, delete it.\n                    temp.left = None\n                    return\n                else:\n                    # If not, add it to the queue for further processing.\n                    q.append(temp.left)\n\n    # Function to delete an element in a binary tree\n    def deleteNode(self, root, key):\n        if root is None:\n            return None\n\n        # Case when the root itself is the node to be deleted.\n        if root.left is None and root.right is None:\n            if root.data == key:\n                return None\n            else:\n                return root\n\n        key_node = None\n        q = []\n        q.append(root)\n\n        # Iterating over the tree level by level.\n        while (len(q)):\n            temp = q.pop(0)\n\n            # Finding the node to be deleted.\n            if temp.data == key:\n                key_node = temp\n\n            # Adding the left child of the current node to the queue for further processing.\n            if temp.left:\n                q.append(temp.left)\n\n            # Adding the right child of the current node to the queue for further processing.\n            if temp.right:\n                q.append(temp.right)\n\n        if key_node:\n            x = temp.data\n\n            # Deleting the deepest node in the tree.\n            self.deleteDeepest(root, temp)\n\n            # Replacing the node to be deleted with the value of the deepest node.\n            key_node.data = x\n\n        return root\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n * @param {number} key\n * @returns {Node}\n */\n\nclass Solution {\n    deleteNode(root, key) {\n        if (root == null) return root;\n        let q = [];\n        q.push(root);\n        let temp;\n        let key_node = null;\n\n        // Level order traversal to find the key_node and last node\n        while (q.length > 0) {\n            temp = q[0];\n            q.shift();\n\n            if (temp.data === key) key_node = temp;\n\n            if (temp.left) q.push(temp.left);\n            if (temp.right) q.push(temp.right);\n        }\n\n        if (key_node) {\n            let x = temp.data;\n            this.deleteDeepest(root, temp);\n            key_node.data = x;\n        }\n\n        return root;\n    }\n\n    deleteDeepest(root, d_node) {\n        let q = [];\n        q.push(root);\n        let temp;\n\n        while (q.length > 0) {\n            temp = q[0];\n            q.shift();\n\n            if (temp.right) {\n                if (temp.right === d_node) {\n                    temp.right = null;\n                    return;\n                } else {\n                    q.push(temp.right);\n                }\n            }\n\n            if (temp.left) {\n                if (temp.left === d_node) {\n                    temp.left = null;\n                    return;\n                } else {\n                    q.push(temp.left);\n                }\n            }\n        }\n    }\n}\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n * @param {number} key\n * @returns {Node}\n */\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}