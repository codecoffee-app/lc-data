{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700610,
            "title": "Depth of node",
            "titleSlug": "depth-of-node",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree of size <strong>n</strong>, find the <strong>depth of the deepest odd-level leaf</strong> node in a binary tree. If there is <strong>no leaf </strong>at the odd level then<strong> return 0</strong>. Consider that the level starts with 1. The depth of a leaf node is a number of nodes on the path from root to leaf (including both leaf and root).</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">\n&nbsp;\\t   1\n&nbsp;\\t /    \\\n&nbsp;\\t2\\t3\n&nbsp;     / \\    / \\\n&nbsp;    4   5  6   7</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>In the above tree 4,5,6 and 7 are</span> <span style=\"font-size: 18px;\">odd level leaf nodes at depth 3.So the answer is 3.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">\n     1\n    / \\</span>\n   <span style=\"font-size: 18px;\"> 2   4</span>\n<span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Output:</strong><span style=\"font-size: 18px;\"> 0<br /></span><span ><strong>Explanation: </strong>In the above tree,no leaf node is at odd level</span><span style=\"font-size: 18px;\"><span >. So the answer is 0.</span></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">\n&nbsp;\\t </span><span style=\"font-size: 18px;\">  10\n\\t   /  \\\n\\t  5    15\n\\t / \\   \n\\t3   7     \n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>In the above tree 3 and 7 are </span><span style=\"font-size: 18px;\">odd level leaf nodes at depth 3. So the answer is 3.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=number of nodes&lt;=10<sup>5</sup><br />1&lt;= node-&gt;data &lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of size *n*, find the depth of the deepest leaf node located at an odd level. The root node is considered to be at level 1. If no leaf node exists at an odd level, return 0. The depth of a leaf node is the number of nodes from the root to the leaf, inclusive.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "     1\n    /    \\\n   2      3\n  / \\    / \\\n 4   5  6   7",
                        "output": "3",
                        "explanation": "Leaf nodes 4, 5, 6, and 7 are at odd level (level 3) and have depth 3. Therefore, the answer is 3."
                    },
                    {
                        "input": "   1\n  / \\\n 2   4",
                        "output": "0",
                        "explanation": "There are no leaf nodes at odd levels in the tree, so the answer is 0."
                    },
                    {
                        "input": "   10\n  /  \\\n 5    15\n/ \\\n3   7",
                        "output": "3",
                        "explanation": "Leaf nodes 3 and 7 are at odd level (level 3) and have depth 3. Thus, the answer is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use recursion and tree traversal.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\npublic:\n    int depthOfOddLeaf(Node *root)\n    {\n        int level = 1;\n        return depthOfOddLeafUtil(root, level);\n    }\n    int depthOfOddLeafUtil(Node *root, int level)\n    {\n        // Base Case\n        if (root == NULL)\n            return 0;\n\n        // If this node is a leaf and its level is odd, return its level\n        if (root->left == NULL && root->right == NULL && level & 1)\n            return level;\n\n        // If not leaf, return the maximum value from left and right subtrees\n        return max(depthOfOddLeafUtil(root->left, level + 1),\n                   depthOfOddLeafUtil(root->right, level + 1));\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    // Function to find the depth of the odd leaf node in a binary tree\n    public static int depthOfOddLeaf(Node root)\n    {\n        int level = 1;\n        // Call to the utility function to calculate the depth\n        return depthOfOddLeafUtil(root, level);\n    }\n    \n    // Utility function to calculate the depth of the odd leaf node\n    public static int depthOfOddLeafUtil(Node root, int level)\n    {\n        // If the root is null, return 0\n        if(root == null)\n          return 0;\n          \n        // If the root is a leaf node\n        if(root.left == null && root.right == null)\n        {\n            // Check if the level is odd\n            int res = level&1;\n            if(res == 1)\n            return level;\n        }\n          \n        // Recursively calculate the maximum depth of the odd leaf node\n        return Math.max(depthOfOddLeafUtil(root.left, level+1),\n\t\t    \tdepthOfOddLeafUtil(root.right, level+1));\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n\n    #Function to find the depth of the deepest odd-level leaf in the given binary tree.\n    def depthOfOddLeaf(self, root):\n        level = 1\n        #calling helper function to recursively find the depth of odd-level leaf nodes.\n        return self.depthOfOddLeafUtil(root, level)\n\n    #Helper function to find the depth of odd-level leaf nodes.\n    def depthOfOddLeafUtil(self, root, level):\n        #if root is None, return 0 (base case)\n        if root == None:\n            return 0\n\n        #if root has no children and the current level is odd, return the level\n        if root.left == None and root.right == None and level % 2 == 1:\n            return level\n\n        #recursively find the maximum depth of odd-level leaf nodes in the left and right subtrees.\n        return max(self.depthOfOddLeafUtil(root.left, level + 1),\n                   self.depthOfOddLeafUtil(root.right, level + 1))",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n * @return {number}\n */\n\nclass Solution {\n  depthOfOddLeaf(root) {\n    //code here\n    function depthOfOddLeafUtil(root, level) {\n      // Base Case\n      if (root === null)\n        return 0;\n  \n      // If this node is a leaf and its level is odd, return its level\n      if (root.left === null && root.right === null && level % 2 !== 0)\n        return level;\n  \n      // If not leaf, return the maximum value from left and right subtrees\n      return Math.max(depthOfOddLeafUtil(root.left, level + 1),\n                     depthOfOddLeafUtil(root.right, level + 1));\n    }\n    \n    return depthOfOddLeafUtil(root, 1);\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}