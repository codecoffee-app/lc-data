{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701660,
            "title": "Deque deletion",
            "titleSlug": "deque-deletion",
            "content": "<p><span style=\"font-size: 18px;\">Given a Deque <strong>deq</strong>&nbsp;containing non-negative integers. </span></p>\n<p><span style=\"font-size: 18px;\">Complete below functions&nbsp;depending type of query as mentioned and&nbsp;provided to you (indexing starts from 0):<br /><strong>1</strong>. <strong>eraseAt(x):</strong> this function should remove the element from specified position <strong>x</strong> in deque.<br /><strong>2</strong>. <strong>eraseInRange(start, end):</strong> this function should remove the elements in range <strong>start</strong> (inclusive), <strong>end</strong> (exclusive) specified in the argument of the function. </span><br /><span style=\"font-size: 18px;\"><strong>Note:</strong> If start is equal to end then simply return.<br /><strong>3</strong>. <strong>eraseAll():</strong> remove all the elements from the deque.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>deq = [1 2 4 5 6], query = [1 2]\n<strong>Output:</strong> 1 2 5 6&nbsp;\n<strong>Explanation:</strong> Here the query type is 1 and the position is 2. So we remove element at position 2. The element at position 2 is 1 2 4 5 6. So, we remove 4 and get 1 2 5 6.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> deq = [1 2 3 4], query = [2 1 3]\n<strong>Output:</strong> 1 4&nbsp;\n<strong>Explanation:</strong> Here the query type is 2 and the range is [1, 3). So we need to delete 1 2 3 4. Remember that end is exclusive. So the updated dequeue is 1 4.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>deq = [1 2 3], query = [3]\n<strong>Output:</strong> Empty\n<strong>Explanation:</strong> Here the query is of type 3 so we remove all the elements of dequeue.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1 &le; deq.size() &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a Deque `deq` containing non-negative integers. Implement the following functions based on the provided query type:\n\n1. `eraseAt(x)`: Remove the element at index `x` from the deque (0-based indexing).\n2. `eraseInRange(start, end)`: Remove elements from the deque within the range [`start`, `end`). If `start` is equal to `end`, return without any changes.\n3. `eraseAll()`: Remove all elements from the deque, making it empty.",
                "constraints": [
                    "1 <= deq.size() <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "deq = [1, 2, 4, 5, 6], query = [1, 2]",
                        "output": "[1, 2, 5, 6]",
                        "explanation": "Query type is 1 (eraseAt) and the index is 2.  The element at index 2 (which is 4) is removed, resulting in [1, 2, 5, 6]."
                    },
                    {
                        "input": "deq = [1, 2, 3, 4], query = [2, 1, 3]",
                        "output": "[1, 4]",
                        "explanation": "Query type is 2 (eraseInRange) and the range is [1, 3).  Elements at index 1 (2) and index 2 (3) are removed, resulting in [1, 4]."
                    },
                    {
                        "input": "deq = [1, 2, 3], query = [3]",
                        "output": "[]",
                        "explanation": "Query type is 3 (eraseAll), so all elements are removed, resulting in an empty deque."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "void eraseAt(deque<int> &deq, int x) {\n    // using an iterator to reach specified position and erasing that element.\n    deque<int>::iterator itr;\n    itr = deq.begin() + x;\n    deq.erase(itr);\n}\n\n// Function to erase the elements in range start (inclusive), end (exclusive).\nvoid eraseInRange(deque<int> &deq, int start, int end) {\n    // using two iterators and deleting all the elements in that range.\n    deque<int>::iterator itr1, itr2;\n    itr1 = deq.begin() + start;\n    itr2 = deq.begin() + end;\n\n    deq.erase(itr1, itr2);\n}\n\n// Function to erase all the elements in the deque.\nvoid eraseAll(deque<int> &deq) {\n    // erasing all the elements.\n    deq.clear();\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n// Function to erase the element from specified position X in deque.\npublic static void eraseAt(ArrayDeque<Integer> deq, int X) {\n    // Declaring and Initializing a Stack.\n    Stack<Integer> stack = new Stack<Integer>();\n\n    // pushing all the elements form 0 to X-1 range in Stack.\n    for (int i = 0; i < X; i++) {\n        stack.push(deq.pollFirst());\n    }\n\n    // removing element at position X.\n    deq.pollFirst();\n\n    // adding the elements in front of the deque from the Stack.\n    while (stack.isEmpty() == false) {\n        deq.addFirst(stack.peek());\n        stack.pop();\n    }\n}\n\n// Function to erase the elements in range start (inclusive), end (exclusive).\npublic static void eraseInRange(ArrayDeque<Integer> deq, int start, int end) {\n    // Declaring and Initializing a Stack.\n    Stack<Integer> stack = new Stack<Integer>();\n\n    int c = 0;\n\n    // pushing all elements form range 0 to start-1 and end to size-1 in Stack.\n    while (deq.isEmpty() == false) {\n        if (c >= start && c < end) {\n            deq.pollFirst();\n        } else\n            stack.push(deq.pollFirst());\n        c++;\n    }\n\n    // erasing the leftover elements i.e. in range from start to end.\n    deq.clear();\n\n    // adding all the elements of Stack in deque.\n    while (stack.isEmpty() == false) {\n        deq.addFirst(stack.peek());\n        stack.pop();\n    }\n}\n\n// Function to erase all the elements in the deque.\npublic static void eraseAll(ArrayDeque<Integer> deq) {\n    // erasing all the elements.\n    deq.clear();\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n#Function to erase the element from specified position X in deque.\ndef eraseAt(deq, x):\n\n    ad = deque()\n\n    #pushing all the elements form 0 to X-1 range in another deque.\n    for i in range(x):\n        ad.append(deq.popleft())\n\n    #removing element at position X.\n    deq.popleft()\n\n    #adding the elements in front of the original deque from another deque.\n    while ad:\n        deq.appendleft(ad.pop())\n\n\n#Function to erase the elements in range start (inclusive), end (exclusive).\ndef eraseInRange(deq, s, e):\n\n    if s == e:\n        return\n\n    i = 0\n    ad = deque()\n\n    #pushing all elements form range 0 to start-1 in another deque.\n    while i < s:\n        ad.append(deq.popleft())\n        i += 1\n    #erasing the elements in range from start to end.\n    while i < e:\n        deq.popleft()\n        i += 1\n    #adding the elements in front of the  original deque from another deque.\n    while ad:\n        deq.appendleft(ad.pop())\n\n\n#Function to erase all the elements in the deque.\ndef eraseAll(deq):\n\n    #erasing all the elements.\n    deq.clear()\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n\n    /**\n     * @param {Deque} deq\n     * @param {number} X\n     */\n    // Function to erase the element from specified position X in deque.\n    eraseAt(deq, X) {\n        deq.arr.splice(X, 1);\n        deq.size -= 1;\n    }\n\n    /**\n     * @param {Deque} deq\n     * @param {number} start\n     * @param {number} end\n     */\n    // Function to erase elements in range start (inclusive), end (exclusive).\n    eraseInRange(deq, start, end) {\n        let sz = end - start;\n        if (sz > 0) {\n            deq.arr.splice(start, sz);\n        }\n        deq.size -= sz;\n    }\n\n    /**\n     * @param {Deque} deq\n     */\n    // Function to erase all the elements in the deque.\n    eraseAll(deq) {\n        // erasing all the elements.\n        while (!deq.empty()) {\n            deq.pop_back();\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}