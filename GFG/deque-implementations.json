{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700904,
            "title": "Deque Implementations",
            "titleSlug": "deque-implementations",
            "content": "<p><em><span style=\"font-size: 18px;\">A deque is a double-ended queue that allows enqueue and dequeue operations from both the ends.</span></em></p>\n<p><span style=\"font-size: 18px;\">Given a deque and <strong>q</strong> queries. The task is to perform some operation on dequeue according to the queries as given below:<br />1.<strong> pb</strong>: query to <strong>push back </strong>the <strong>element x</strong>.<br />2.<strong> pf</strong>: query to<strong> push element x</strong>(given with query) to the <strong>front of the deque</strong>.<br />3<strong>. pp_b()</strong>: query to <strong>delete element from the back</strong> of the deque.<br />4.<strong> f</strong>: query to<strong> return a front element</strong> from the deque.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>queries = [[ pf 5 ],[ pf 10 ],[ pb 6 ],[ f ],[ pp_b ]]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> \n1. After push front deque will be [5]\n2. After push front deque will be [10, 5]\n3. After push back deque will be [10, 5, 6]\n4. Return front element which is 10\n5. After pop back deque will be [10, 5]</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> queries = [[ pf 5 ],[ f ]]\n<strong>Output:</strong> 5 \n<strong>Explanation:</strong>\n1. After push front deque will be [5]\n2. Return front element which is 5\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; Number of queries &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a deque data structure to handle a series of queries. A deque (double-ended queue) allows insertion and deletion of elements from both the front and the back.\n\nYou are given a list of queries `queries`. Process each query and perform the corresponding operation on the deque. The possible queries are:\n\n*   `pb x`: Push element `x` to the back of the deque.\n*   `pf x`: Push element `x` to the front of the deque.\n*   `pp_b()`: Delete the element from the back of the deque.\n*   `f`: Return the front element of the deque. If the deque is empty, the behavior is undefined (you can return null or an error, depending on the implementation language).",
                "constraints": [
                    "1 <= Number of queries <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "queries = [[\"pf\", 5], [\"pf\", 10], [\"pb\", 6], [\"f\"], [\"pp_b()\"]]",
                        "output": "10",
                        "explanation": "1. `pf 5`: deque becomes [5]\n2. `pf 10`: deque becomes [10, 5]\n3. `pb 6`: deque becomes [10, 5, 6]\n4. `f`: Returns the front element, which is 10\n5. `pp_b()`: Removes the last element (6), deque becomes [10, 5]"
                    },
                    {
                        "input": "queries = [[\"pf\", 5], [\"f\"]]",
                        "output": "5",
                        "explanation": "1. `pf 5`: deque becomes [5]\n2. `f`: Returns the front element, which is 5"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void pb(deque<int>& dq, int x) { dq.push_back(x); }\n\n    void ppb(deque<int>& dq) {\n        if (!dq.empty())\n            dq.pop_back();\n    }\n\n    int front_dq(deque<int>& dq) {\n        if (!dq.empty())\n            return dq.front();\n        return -1;\n    }\n\n    void pf(deque<int>& dq, int x) { dq.push_front(x); }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "public static void pb(ArrayDeque<Integer> dq, int x) {\n    dq.addLast(x);\n}\n\n// Function to pop element from back of the deque.\npublic static void ppb(ArrayDeque<Integer> dq) {\n    if (!dq.isEmpty())\n        dq.removeLast();\n    else\n        return;\n}\n\n// Function to return element from front of the deque.\npublic static int front_dq(ArrayDeque<Integer> dq) {\n    if (!dq.isEmpty())\n        return dq.peekFirst();\n    else\n        return -1;\n}\n\n// Function to push element x to the front of the deque.\npublic static void pf(ArrayDeque<Integer> dq, int x) {\n    dq.addFirst(x);\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\ndef pf(dq, x):\n    dq.appendleft(x)\n\n\ndef pb(dq, x):\n    dq.append(x)\n\n\ndef front_dq(dq):\n    if dq:\n        return dq[0]\n    else:\n        return -1\n\n\ndef ppb(dq):\n    if dq:\n        dq.pop()\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\n\n/*\nclass Deque{\n    constructor(){\n        this.arr = [];\n        this.size = 0;\n    }\n}\n*/\n\nclass Solution {\n\n    /**\n     * @param {Deque} dq\n     * @param {number} x\n    */\n    // Function to push element x to the back of the deque.\n    push_back_pb(dq, x) {\n        dq.arr.push(x);\n        dq.size++;\n    }\n\n    /**\n     * @param {Deque} dq\n    */\n    // Function to pop element from back of the deque.\n    pop_back_ppb(dq) {\n        if (dq.size > 0) {\n            dq.arr.pop();\n            dq.size--;\n        }\n    }\n\n    /**\n     * @param {Deque} dq\n     * @returns {number}\n    */\n    // Function to return element from front of the deque.\n    front_dq(dq) {\n        if (dq.size > 0) {\n            return dq.arr[0];\n        }\n        return -1;\n    }\n\n    /**\n     * @param {Deque} dq\n     * @param {number} x\n    */\n    // Function to push element x to the front of the deque.\n    push_front_pf(dq, x) {\n        dq.arr.unshift(x);\n        dq.size++;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}