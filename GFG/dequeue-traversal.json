{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701658,
            "title": "Deque Traversal",
            "titleSlug": "dequeue-traversal",
            "content": "<p><span style=\"font-size: 18px;\">Given a deque <strong>dq </strong>containing integer elements, the task is to traverse the <strong>dq</strong> and print its elements of it.&nbsp;<br /></span><span style=\"font-size: 18px;\"><strong>Note</strong>: Print a newline at the end.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> dq = [1, 2, 3, 4, 5]\n<strong>Output:</strong> 1 2 3 4 5\n<strong>Explanation:</strong> dq will look like [1, 2, 3, 4, 5].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>dq = [1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> dq will look like [1].</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; dq.size() &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "void printDeque(deque<int> dq) {\n    for (auto itr = dq.begin(); itr != dq.end(); itr++) {\n        cout << *itr << \" \";\n    }\n    cout << endl;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "public static void printDeque(ArrayDeque<Integer> deq) {\n    for (int x : deq) {\n        System.out.print(x + \" \");\n    }\n    System.out.println();\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def printDeque(deq):\n    for e in deq:\n\n        print(e, end=' ')\n    print()\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {Deque} Deq\n */\nclass Solution {\n    printDeque(Deq) {\n        let res = '';\n        while (!Deq.empty()) {\n            res += Deq.front() + \" \";\n            Deq.pop_front();\n        }\n        console.log(res);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}