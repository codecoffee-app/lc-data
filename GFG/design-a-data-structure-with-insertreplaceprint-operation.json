{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705537,
            "title": "Design a Data Structure with insert/replace/print Operation",
            "titleSlug": "design-a-data-structure-with-insertreplaceprint-operation",
            "content": "<p><span style=\"font-size: 18px;\">Design a data structure to perform the following operations.</span></p>\n<p><span style=\"font-size: 18px;\">1.&nbsp;<strong>insert(x):</strong>&nbsp;inserts an element at the end of the data structure.<br />2.&nbsp;<strong>print():&nbsp;</strong>prints the elements of the data structure(space separated)<br />3.<strong>&nbsp;replace(x, sequence):</strong>&nbsp;replaces the first index of x with the given sequence.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>insert(3), insert(10), print(), insert(3), replace(3,[1,2,3]), print()<strong>\nOutput:\n</strong>3 10\n1 2 3 10 3<strong>\nExplanation: </strong>After the two insert operations, the data structure contains [3, 10], after the third insert operation the DS will be <br />[3, 10, 3]. The replace operation replaces the first index of 3 with the sequence [1, 2, 3] and the data structure will contain [1, 2, 3, 10, 3]</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Note:&nbsp;</strong>The driver code will print the new line after calling the print() function.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a data structure that supports the following operations:\n\n1. **insert(x):** Inserts the element `x` at the end of the data structure.\n2. **print():** Prints all elements of the data structure, separated by spaces.\n3. **replace(x, sequence):** Replaces the *first* occurrence of the element `x` in the data structure with the given `sequence` of elements.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "insert(3), insert(10), print(), insert(3), replace(3,[1,2,3]), print()",
                        "output": "3 10\n1 2 3 10 3",
                        "explanation": "Initially, `insert(3)` and `insert(10)` result in the data structure containing `[3, 10]`.  The first `print()` outputs \"3 10\". Next, `insert(3)` adds another `3`, resulting in `[3, 10, 3]`. Finally, `replace(3, [1, 2, 3])` finds the first `3` and replaces it with the sequence `[1, 2, 3]`, so the data structure becomes `[1, 2, 3, 10, 3]`. The second `print()` outputs \"1 2 3 10 3\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nlist<int> l;\n\nvoid insert(int x) {\n    l.push_back(x);\n}\n\nvoid print() {\n    for (int x : l) {\n        cout << x << \" \";\n    }\n    cout << endl;\n}\n\nvoid replace(int x, vector<int> sequence) {\n\n    auto it = find(l.begin(), l.end(), x);\n\n    if (it == l.end())\n        return;\n\n    it = l.erase(it);\n\n    l.insert(it, sequence.begin(), sequence.end());\n}",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}