{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702986,
            "title": "Design a tiny URL or URL shortener",
            "titleSlug": "design-a-tiny-url-or-url-shortener2031",
            "content": "<p><span style=\"font-size: 18px;\">Design a system that takes big URLs like &ldquo;<strong>http://www.geeksforgeeks.org/count-sum-of-digits-in-numbers-from-1-to-n/</strong>&rdquo; and converts them into a short<strong>&nbsp;URL</strong>. It is given that URLs are stored in the database and every URL has an associated integer <strong>ID</strong>.&nbsp; So your program should take an integer ID and generate a URL.&nbsp; </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: A URL character can be one of the following</span></p>\n<ol>\n<li><span style=\"font-size: 18px;\">A lowercase alphabet [&lsquo;a&rsquo; to &lsquo;z&rsquo;], total 26 characters</span></li>\n<li><span style=\"font-size: 18px;\">An upper case alphabet [&lsquo;A&rsquo; to &lsquo;Z&rsquo;], a total of 26 characters</span></li>\n<li><span style=\"font-size: 18px;\">A digit [&lsquo;0&prime; to &lsquo;9&rsquo;], a total of 10 characters</span></li>\n</ol>\n<p><span style=\"font-size: 18px;\">There are total of 26 + 26 + 10 = 62 possible characters.</span></p>\n<p><span style=\"font-size: 18px;\">So the task is to convert an integer ID to a short URL and convert a short URL back to the integer ID.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 12345\n<strong>Output:</strong> \ndnh\n12345\n<strong>Explanation:</strong> \"dnh\" is the url for id 12345</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 30540\n<strong>Output:</strong> \nh6K\n30540\n<strong>Explanation:</strong> \"h6K\" is the url for id 30540</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(log<sub>62</sub><sup>n</sup>)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>15</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 12pt;\"><span style=\"white-space-collapse: preserve; background-color: #ffffff;\">Make a hash table of size 62, containing all characters of base 62.</span></span></p>",
            "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">To generate a short URL, create a character map with 62 characters (a-z , A-Z, 0-9). Convert the integer ID to base 62 by mapping each digit using the character map and appending the characters. Finally, reverse the resulting string to complete the conversion.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [
            "microsoft",
            "hike"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\t// Function to generate a short url from integer ID\n\tstring idToShortURL(long long int n) {\n\t    // Map to store 62 possible characters\n\t    char map[] =\n\t        \"abcdefghijklmnopqrstuvwxyzABCDEF\"\n\t        \"GHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n\t    string shorturl;\n\n\t    // Convert given integer id to a base 62 number\n\t    while (n) {\n\t        // use above map to store actual character\n\t        // in short url\n\t        shorturl.push_back(map[n % 62]);\n\t        n = n / 62;\n\t    }\n\n\t    // Reverse shortURL to complete base conversion\n\t    reverse(shorturl.begin(), shorturl.end());\n\n\t    return shorturl;\n\t}\n\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    String idToShortURL(long n) {\n        // Map to store 62 possible characters\n        char[] map = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                         .toCharArray();\n\n        StringBuilder shorturl = new StringBuilder();\n\n        // Convert given integer id to a base 62 number\n        while (n > 0) {\n            // Use above map to store actual character in short url\n            shorturl.append(map[(int)(n % 62)]);\n            n = n / 62;\n        }\n\n        // Reverse shortURL to complete base conversion\n        return shorturl.reverse().toString();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def idToShortURL(self,n):\n        map = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n        shortURL = \"\" \n        # for each digit find the base 62 \n        while(n > 0): \n            shortURL += map[n % 62] \n            n //= 62\n        return shortURL[len(shortURL): : -1]",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to generate a short url from integer ID\n    idToShortURL(n) {\n        // Map to store 62 possible characters\n        const map = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n        let shorturl = '';\n\n        // Convert given integer id to a base 62 number\n        while (n) {\n            // use above map to store actual character in short url\n            shorturl += map[n % 62];\n            n = Math.floor(n / 62);\n        }\n\n        // Reverse shortURL to complete base conversion\n        shorturl = shorturl.split('').reverse().join('');\n\n        return shorturl;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}