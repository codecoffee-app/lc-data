{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876601,
            "title": "Design Add and Search Words Data Structure",
            "titleSlug": "design-add-and-search-words-data-structure--154618",
            "content": "<p><span >Design a data structure that supports adding new words and finding if a string matches any already existing string.<br /><br /></span><span >Implement the <strong>WordDictionary</strong> class:</span></p>\n<ul>\n<li><span ><strong>WordDictionary()</strong>: Initializes the object</span></li>\n<li><span ><strong>void addWord(word)</strong>: Adds <strong>word</strong> to the data structure</span></li>\n<li><span ><strong>bool search(word)</strong>: Returns <strong>true</strong> if <strong>word</strong> exists in the data structure or <strong>false</strong> otherwise, <strong>word</strong> may contain dosts <strong>'.'</strong> which can be matched with any letter.</span></li>\n</ul>\n<p><strong><span >Example:</span></strong></p>\n<pre><strong><span >Input: <br /></span></strong><span >Function calls - </span><span >[ \"WordDictionary\", \"addWord\", \"addWord\", \"addWord\", \"search\", \"search\", \"search\", \"search\" ]<br /></span><span >word passed - [ [\"\"], [\"bad\"], [\"dad\"], [\"mad\"], [\"pad\"], [\"bad\"], [\".ad\"], [\"b..\"] ] </span><br /><strong><span >Output:</span></strong><span > [ null, null, null, null, false, true, true, true]</span><br /><strong><span >Explanation: <br /></span></strong><span >WordDictionary wd = new WordDictionary(); // Class Object created</span><br /><span >wd.addWord(\"bad\"); // word inserted</span><br /><span >wd.addWord(\"dad\"); // word inserted</span><br /><span >wd.addWord(\"mad\"); // word inserted</span><br /><span >wd.search(\"pad\"); // no match found // return false</span><br /><span >wd.search(\"bad\"); // match found // return true</span><br /><span >wd.search(\".ad\"); // matches found ( \"bad\", \"dad\", \"mad\" ) // return true</span><br /><span >wd.search(\"b..\"); // match found ( \"bad\" ) // return true</span></pre>\n<pre><strong><span >Input: <br /></span></strong><span >Function calls - </span><span >[ \"WordDictionary\", \"addWord\", \"addWord\", \"search\", \"search\", \"addWord\", \"search\" ]<br /></span><span >word passed - [ [\"\"], [\"apple\"], [\"bread\"], [\"apple\"], [\"b.oad\"], [\"chair\"], [\"bread\"], [\"table\"] ] </span><br /><strong><span >Output:</span></strong><span > [ null, null, null, true, false, null, true]</span><br /><strong><span >Explanation: <br /></span></strong><span >WordDictionary wd = new WordDictionary(); // Class Object created<br /></span><span >wd.addWord(\"apple\"); // word inserted</span><br /><span >wd.addWord(\"bread\"); // word inserted</span><br /><span >wd.search(\"apple\"); // match found // return true</span><br /><span >wd.search(\"b.oad\"); // no match found // return false</span><br /><span >wd.addWord(\"chair\"); // word inserted</span><br /><span >wd.search(\"table\"); // matche found // return true</span></pre>\n<p><strong><span >Constraints:<br /></span></strong><span >1&nbsp; &lt;=&nbsp; word.length&nbsp; &lt;=&nbsp; 25<br /><strong>word</strong> in <strong>addWord</strong> consists of only lowercase letters<br /><strong>word</strong> in <strong>search</strong> consists of '.' and lowercase letters<br />There will be atmost <strong>2</strong> dots <strong>'.'</strong> in <strong>word</strong> for <strong>search</strong> queries<br />Atmost <strong>10<sup>4</sup></strong> calls will be made for <strong>addWord</strong> and <strong>search</strong> queries<sup>&nbsp;&nbsp;</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a data structure that supports adding new words and finding if a string matches any already existing string. Implement the `WordDictionary` class with the following methods:\n\n*   `WordDictionary()`: Initializes the object.\n*   `void addWord(word)`: Adds `word` to the data structure.\n*   `bool search(word)`: Returns `true` if `word` exists in the data structure or `false` otherwise. `word` may contain dots `'.'` which can be matched with any letter.",
                "constraints": [
                    "1 <= word.length <= 25",
                    "word in addWord consists of only lowercase letters",
                    "word in search consists of '.' and lowercase letters",
                    "There will be at most 2 dots '.' in word for search queries",
                    "At most 10^4 calls will be made for addWord and search queries"
                ],
                "testcases": [
                    {
                        "input": "[ \"WordDictionary\", \"addWord\", \"addWord\", \"addWord\", \"search\", \"search\", \"search\", \"search\" ]\n[ [\"\"], [\"bad\"], [\"dad\"], [\"mad\"], [\"pad\"], [\"bad\"], [\".ad\"], [\"b..\"] ]",
                        "output": "[ null, null, null, null, false, true, true, true]",
                        "explanation": "First, a WordDictionary object is initialized. Then, the words \"bad\", \"dad\", and \"mad\" are added. The search for \"pad\" returns false as it's not present. The search for \"bad\" returns true. The search for \".ad\" returns true because \"bad\", \"dad\", and \"mad\" all match. Finally, the search for \"b..\" returns true as \"bad\" matches."
                    },
                    {
                        "input": "[ \"WordDictionary\", \"addWord\", \"addWord\", \"search\", \"search\", \"addWord\", \"search\" ]\n[ [\"\"], [\"apple\"], [\"bread\"], [\"apple\"], [\"b.oad\"], [\"chair\"], [\"bread\"], [\"table\"] ]",
                        "output": "[ null, null, null, true, false, null, true]",
                        "explanation": "First, a WordDictionary object is initialized. Then, the words \"apple\" and \"bread\" are added. The search for \"apple\" returns true. The search for \"b.oad\" returns false because no word matches this pattern. The word \"chair\" is added. Finally, the search for \"bread\" returns true."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use Trie Data Structure</p>"
        ],
        "relatedTopics": [
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    bool word = false;\n};\n\nclass WordDictionary {\n    TrieNode* trie;\n\n  public:\n    /** Initialize your data structure here. */\n    WordDictionary() { trie = new TrieNode(); }\n\n    /** Adds a word into the data structure. */\n    void addWord(string word) {\n        TrieNode* node = trie;\n\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->word = true;\n    }\n\n    /** Returns if the word is in the node. */\n    bool searchInNode(string word, TrieNode* node) {\n        for (int i = 0; i < word.length(); ++i) {\n            char ch = word[i];\n            if (!node->children.count(ch)) {\n                // If the current character is '.'\n                // check all possible nodes at this level\n                if (ch == '.') {\n                    for (auto x : node->children) {\n                        TrieNode* child = x.second;\n                        if (searchInNode(word.substr(i + 1), child)) {\n                            return true;\n                        }\n                    }\n                }\n                // If no nodes lead to answer\n                // or the current character != '.'\n                return false;\n            } else {\n                // If the character is found\n                // go down to the next level in trie\n                node = node->children[ch];\n            }\n        }\n        return node->word;\n    }\n\n    /** Returns if the word is in the data structure. A word could contain the\n     * dot character '.' to represent any one letter. */\n    bool search(string word) { return searchInNode(word, trie); }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class TrieNode {\n    Map<Character, TrieNode> children = new HashMap();\n    boolean word = false;\n\n    public TrieNode() {}\n}\n\nclass WordDictionary {\n    TrieNode trie;\n\n    /** Initialize your data structure here. */\n    public WordDictionary() { trie = new TrieNode(); }\n\n    /** Adds a word into the data structure. */\n    public void addWord(String word) {\n        TrieNode node = trie;\n\n        for (char ch : word.toCharArray()) {\n            if (!node.children.containsKey(ch)) {\n                node.children.put(ch, new TrieNode());\n            }\n            node = node.children.get(ch);\n        }\n        node.word = true;\n    }\n\n    /** Returns if the word is in the node. */\n    public boolean searchInNode(String word, TrieNode node) {\n        for (int i = 0; i < word.length(); ++i) {\n            char ch = word.charAt(i);\n            if (!node.children.containsKey(ch)) {\n                // if the current character is '.'\n                // check all possible nodes at this level\n                if (ch == '.') {\n                    for (char x : node.children.keySet()) {\n                        TrieNode child = node.children.get(x);\n                        if (searchInNode(word.substring(i + 1), child)) {\n                            return true;\n                        }\n                    }\n                }\n\n                // if no nodes lead to answer\n                // or the current character != '.'\n                return false;\n            } else {\n                // if the character is found\n                // go down to the next level in trie\n                node = node.children.get(ch);\n            }\n        }\n        return node.word;\n    }\n\n    /**\n     * Returns if the word is in the data structure. A word could contain the dot\n     * character '.' to represent any one letter.\n     */\n    public boolean search(String word) { return searchInNode(word, trie); }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass TrieNode:\n\n    def __init__(self):\n        self.children = {}\n        self.word = False\n\n\nclass WordDictionary:\n\n    def __init__(self):\n        self.trie = TrieNode()\n\n    def addWord(self, word):\n        node = self.trie\n        for ch in word:\n            if ch not in node.children:\n                node.children[ch] = TrieNode()\n            node = node.children[ch]\n        node.word = True\n\n    def searchInNode(self, word, node):\n        for i in range(len(word)):\n            ch = word[i]\n            if ch not in node.children:\n                if ch == '.':\n                    for child in node.children.values():\n                        if self.searchInNode(word[i + 1:], child):\n                            return True\n                return False\n            else:\n                node = node.children[ch]\n        return node.word\n\n    def search(self, word):\n        return self.searchInNode(word, self.trie)\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass TrieNode {\n    constructor() {\n        this.children = {};\n        this.word = false;\n    }\n}\n\nclass WordDictionary {\n    constructor() { this.trie = new TrieNode(); }\n\n    addWord(word) {\n        let node = this.trie;\n        for (const ch of word) {\n            if (!node.children[ch]) {\n                node.children[ch] = new TrieNode();\n            }\n            node = node.children[ch];\n        }\n        node.word = true;\n    }\n\n    searchInNode(word, node) {\n        for (let i = 0; i < word.length; i++) {\n            const ch = word[i];\n            if (!node.children[ch]) {\n                if (ch === '.') {\n                    for (const child of Object.values(node.children)) {\n                        if (this.searchInNode(word.slice(i + 1), child)) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            } else {\n                node = node.children[ch];\n            }\n        }\n        return node.word;\n    }\n\n    search(word) { return this.searchInNode(word, this.trie); }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}