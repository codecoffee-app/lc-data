{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706550,
            "title": "Design Browser History",
            "titleSlug": "design-browser-history",
            "content": "<p><span style=\"font-size:18px\">You have a&nbsp;<strong>browser</strong>&nbsp;of one tab where you start on the&nbsp;<code>homepage</code>&nbsp;and you can visit another&nbsp;<code>url</code>, get back in the history number of&nbsp;<code>steps</code>&nbsp;or move forward in the history number of&nbsp;<code>steps</code>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Implement the&nbsp;<code>BrowserHistory</code>&nbsp;class:</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\"><code>BrowserHistory (string homepage)</code>&nbsp;Initializes the object with the&nbsp;<code>homepage</code>&nbsp;of the browser.</span></li>\r\n\t<li><span style=\"font-size:18px\"><code>void visit (string url)</code>&nbsp;Visits&nbsp;<code>url</code>&nbsp;from the current page. It clears up all the forward history.</span></li>\r\n\t<li><span style=\"font-size:18px\"><code>string back (int steps)</code>&nbsp;Move&nbsp;<code>steps</code>&nbsp;back in history. If you can only return&nbsp;<code>x</code>&nbsp;steps in the history and&nbsp;<code>steps &gt; x</code>, you will&nbsp;return only&nbsp;<code>x</code>&nbsp;steps. Return the current&nbsp;<code>url</code>&nbsp;after moving back in history&nbsp;<strong>at most</strong>&nbsp;<code>steps</code>.</span></li>\r\n\t<li><span style=\"font-size:18px\"><code>string forward (int steps)</code>&nbsp;Move&nbsp;<code>steps</code>&nbsp;forward in history. If you can only forward&nbsp;<code>x</code>&nbsp;steps in the history and&nbsp;<code>steps &gt; x</code>, you will&nbsp;forward only&nbsp;<code>x</code>&nbsp;steps. Return the current&nbsp;<code>url</code>&nbsp;after forwarding in history&nbsp;<strong>at most</strong>&nbsp;<code>steps</code>.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nhomepage = &quot;gfg.org&quot;\r\nvisit(&quot;google.com&quot;);\r\nvisit(&quot;facebook.com&quot;);\r\nvisit(&quot;youtube.com&quot;);\r\nback(1);\r\nback(1);\r\nforward(1);\r\nvisit(&quot;linkedin.com&quot;);\r\nforward(2);\r\nback(2);\r\nback(7);\r\n\r\n<strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">facebook.com</span>\r\n<span style=\"font-size:18px\">google.com</span>\r\n<span style=\"font-size:18px\">facebook.com</span>\r\n<span style=\"font-size:18px\">linkedin.com</span>\r\n<span style=\"font-size:18px\">google.com</span>\r\n<span style=\"font-size:18px\">gfg.org\r\n\r\n<strong>Explanation: </strong>\r\nquery1: you are now at &quot;google.com&quot;\r\nquery2: you are now at &quot;facebook.com&quot;\r\nquery3: you are now at &quot;youtube.com&quot;\r\nquery4: move one step back, you will be at\r\n&nbsp;\\t &quot;facebook.com&quot; again.\r\nquery5: move one more step back, you will be\r\n&nbsp;\\t at &quot;google.com&quot;\r\nquery6: move one step forward, you will be \r\n&nbsp;\\t at &quot;facebook.com&quot;\r\nquery7: jump to &quot;linkedin.com&quot;\r\nquery8: No forward steps available, be at \r\n&nbsp;\\t &quot;linkedin.com&quot;\r\nquery9: move two steps back, you will go to \r\n&nbsp;\\t &quot;facebook.com&quot; and then &quot;google.com&quot;\r\nquery10: required 7 steps backward but only \r\n&nbsp;\\t  1 step available, so move 1 step  \r\n&nbsp;\\t  back, you will be at &quot;gfg.org&quot;</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nhomepage = &quot;google.com&quot;\r\nvisit(&quot;youtube.com&quot;);\r\nback(2);\r\n\r\n<strong>Output:\r\n</strong>google.com\r\n\r\n<strong>Explanation:</strong>\r\nRequired 2 steps backward, but only 1 step\r\navailable. So move 1 step back and you will\r\nbe at &quot;google.com&quot;</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to design your data structure inside&nbsp;<strong>class&nbsp;BrowserHistory</strong>&nbsp;and&nbsp;complete&nbsp;the functions <strong>visit()</strong>, <strong>back(),&nbsp;forward()&nbsp;</strong>and the <strong>constructor</strong>.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1) for back(), forward() and O(n) for visit()</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Space Complexity:</strong> O(n)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\"><code>1 &lt;= no. of queries &lt;= 5000</code></span></li>\r\n\t<li><span style=\"font-size:18px\"><code>1 &lt;= homepage.length &lt;= 20</code></span></li>\r\n\t<li><span style=\"font-size:18px\"><code>1 &lt;= url.length &lt;= 20</code></span></li>\r\n\t<li><span style=\"font-size:18px\"><code>1 &lt;= steps &lt;= 100</code></span></li>\r\n\t<li><span style=\"font-size:18px\"><code>homepage</code>&nbsp;and&nbsp;<code>url</code>&nbsp;consist of&nbsp; &#39;.&#39; or lower case English letters.</span></li>\r\n</ul>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a `BrowserHistory` class to simulate a web browser's history functionality.\n\nThe class should support the following operations:\n\n*   `BrowserHistory(string homepage)`: Initializes the object with the `homepage` of the browser.\n*   `void visit(string url)`: Visits `url` from the current page, clearing all forward history.\n*   `string back(int steps)`: Moves `steps` back in history. If `steps` exceeds the available history, move back as far as possible. Returns the current URL after moving back.\n*   `string forward(int steps)`: Moves `steps` forward in history. If `steps` exceeds the available forward history, move forward as far as possible. Returns the current URL after moving forward.",
                "constraints": [
                    "1 <= number of queries <= 5000",
                    "1 <= homepage.length <= 20",
                    "1 <= url.length <= 20",
                    "1 <= steps <= 100",
                    "`homepage` and `url` consist of '.' or lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "homepage = \"gfg.org\"\nvisit(\"google.com\")\nvisit(\"facebook.com\")\nvisit(\"youtube.com\")\nback(1)\nback(1)\nforward(1)\nvisit(\"linkedin.com\")\nforward(2)\nback(2)\nback(7)",
                        "output": "facebook.com\ngoogle.com\nfacebook.com\nlinkedin.com\ngoogle.com\ngfg.org",
                        "explanation": "After initializing with 'gfg.org' and visiting 'google.com', 'facebook.com', and 'youtube.com', the history is ['gfg.org', 'google.com', 'facebook.com', 'youtube.com'].\nback(1) moves to 'facebook.com'.\nback(1) moves to 'google.com'.\nforward(1) moves to 'facebook.com'.\nvisit('linkedin.com') clears the forward history and adds 'linkedin.com'.\nforward(2) does nothing because there is no forward history, remaining at 'linkedin.com'.\nback(2) moves to 'facebook.com' then 'google.com'.\nback(7) moves back to the beginning of the history, 'gfg.org'."
                    },
                    {
                        "input": "homepage = \"google.com\"\nvisit(\"youtube.com\")\nback(2)",
                        "output": "google.com",
                        "explanation": "After initializing with 'google.com' and visiting 'youtube.com', the history is ['google.com', 'youtube.com'].\nback(2) attempts to move back 2 steps, but can only move back 1 step to 'google.com'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use two stack one for back history and one for forward history and simulate the functions.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Design-Pattern",
                "slug": "design-pattern"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass BrowserHistory {\r\npublic:\r\n    vector<string> vec;\r\n    int curr;\r\n    \r\n    // constructor to initialize object with homepage\r\n    BrowserHistory(string homepage) {\r\n        curr = 0;\r\n        vec.push_back(homepage);\r\n    }\r\n    \r\n     // visit current url\r\n    void visit(string url) {\r\n        \r\n        // delete all pages that are available for forward moves\r\n        while(curr != vec.size()-1)\r\n            vec.pop_back();\r\n        \r\n        // move to current url\r\n        vec.push_back(url);\r\n        curr++;\r\n    }\r\n    \r\n    string back(int steps) {\r\n        \r\n        // check if 'steps' moves are available or not\r\n        int moves = min(steps, curr);\r\n        curr -= moves;\r\n        return vec[curr];\r\n    }\r\n    \r\n    string forward(int steps) {\r\n        \r\n        // check if 'steps' moves are available or not\r\n        int moves = min(steps, vec.size()-curr-1);\r\n        curr += moves;\r\n        return vec[curr];\r\n    }\r\n    \r\n    int min(int a, int b) {\r\n        if(a <= b)\r\n            return a;\r\n        return b;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass BrowserHistory {\r\n\r\n    List<String> vec=new ArrayList<>();\r\n    int curr;\r\n    \r\n    // constructor to initialize object with homepage\r\n    BrowserHistory(String homepage) {\r\n        curr = 0;\r\n        vec.add(homepage);\r\n    }\r\n    \r\n     // visit current url\r\n    void visit(String url) {\r\n        \r\n        // delete all pages that are available for forward moves\r\n        while(curr != vec.size()-1)\r\n            vec.remove(vec.size()-1);\r\n        \r\n        // move to current url\r\n        vec.add(url);\r\n        curr++;\r\n    }\r\n    \r\n    String back(int steps) {\r\n        \r\n        // check if 'steps' moves are available or not\r\n        int moves =Math.min(steps, curr);\r\n        curr -= moves;\r\n        return vec.get(curr);\r\n    }\r\n    \r\n    String forward(int steps) {\r\n        \r\n        // check if 'steps' moves are available or not\r\n        int moves = Math.min(steps, vec.size()-curr-1);\r\n        curr += moves;\r\n        return vec.get(curr);\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass BrowserHistory {\n    private List<string> vec;\n    private int curr;\n    \n    // constructor to initialize object with homepage\n    public BrowserHistory(string homepage) {\n        curr = 0;\n        vec = new List<string>();\n        vec.Add(homepage);\n    }\n\n    // visit current url\n    public void visit(string url) {\n        // delete all pages that are available for forward moves\n        while (curr != vec.Count-1)\n            vec.RemoveAt(vec.Count-1);\n        \n        // move to current url\n        vec.Add(url);\n        curr++;\n    }\n\n    // 'steps' move backward in history and return current page\n    public string back(int steps) {\n        // check if 'steps' moves are available or not\n        int moves = Math.Min(steps, curr);\n        curr -= moves;\n        return vec[curr];\n    }\n\n    // 'steps' move forward and return current page\n    public string forward(int steps) {\n        // check if 'steps' moves are available or not\n        int moves = Math.Min(steps, vec.Count-curr-1);\n        curr += moves;\n        return vec[curr];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}