{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706593,
            "title": "Design Twitter",
            "titleSlug": "design-twitter",
            "content": "<p><span style=\"font-size: 18px;\">Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. Your design should support the following methods:</span></p>\n<ol>\n<li><span style=\"font-size: 18px;\"><strong>postTweet (userId, tweetId)</strong>: Compose a new tweet.</span></li>\n<li><span style=\"font-size: 18px;\"><strong>getNewsFeed (userId)</strong>: Retrieve the 10 most recent tweet ids in the user's news feed (If total number of tweets in news feed is less than 10, then return all). Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.</span></li>\n<li><span style=\"font-size: 18px;\"><strong>follow (followerId, followeeId)</strong>: Follower follows a followee.</span></li>\n<li><span style=\"font-size: 18px;\"><strong>unfollow (followerId, followeeId)</strong>: Follower unfollows a followee.</span></li>\n</ol>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">postTweet(1, 5);</span>\n<span style=\"font-size: 18px;\">getNewsFeed(1);</span>\n<span style=\"font-size: 18px;\">follow(1, 2);</span>\n<span style=\"font-size: 18px;\">postTweet(2, 6);</span>\n<span style=\"font-size: 18px;\">getNewsFeed(1);</span>\n<span style=\"font-size: 18px;\">unfollow(1, 2);</span>\n<span style=\"font-size: 18px;\">getNewsFeed(1);</span>\n\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">[5]</span>\n<span style=\"font-size: 18px;\">[6, 5]</span>\n<span style=\"font-size: 18px;\">[5]</span>\n<span style=\"font-size: 18px;\">\n<strong>Explanation: </strong>\npostTweet(1,5): User 1 posts a new tweet (id=5)\ngetNewsFeed(1): Return a list with 1 tweet [5]</span>\n<span style=\"font-size: 18px;\">follow(1,2)   : User 1 follows user 2.\npostTweet(2,6): User 2 posts a new tweet (id=6)</span>\n<span style=\"font-size: 18px;\">getNewsFeed(1): Return a list with 2 tweets \n[6,5]. One his own tweet and one followee's tweet\n(sorted from most recent to least recent).</span>\n<span style=\"font-size: 18px;\">unfollow(1,2) : User 1 unfollows user 2</span>\n<span style=\"font-size: 18px;\">getNewsFeed(1): Return a list with 1 tweet [5],\nbecause user 1 is no longer following anyone.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>follow(1, 2);\npostTweet(1, 3);\ngetNewsFeed(2);</span>\n<span style=\"font-size: 18px;\"><strong>Output:\n</strong>[]</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nfollow(1,2)   : User 1 follows user 2.\npostTweet(1,3): User 1 posts a new tweet (id=3)\ngetNewsFeed(2): Return a list with 0 tweet [],\nbecause user2 have no tweets and don't follow\nanyone (user1 follows user 2 but user 2 don't\nfollow anyone)</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp; </strong><br />You don't need to read input or print anything. Your task is to design your data structure inside the&nbsp;<strong>class Twitter</strong> and complete the functions <strong>postTweet()</strong>, <strong>getNewsFeed()</strong>, <strong>follow()</strong>, <strong>unfollow(),</strong> and the <strong>constructor</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<p><span style=\"font-size: 18px;\"><code>1 &lt;= no. of queries&nbsp;&lt;= 1000</code></span><br /><span style=\"font-size: 18px;\"><code>1 &lt;= userId, tweetId, followerId, followeeId&nbsp;&lt;= 10<sup>5</sup></code></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a simplified version of Twitter. Users can post tweets, follow/unfollow other users, and view the 10 most recent tweets in their news feed. Implement the following methods:\n\n*   `postTweet(userId, tweetId)`: Compose a new tweet.\n*   `getNewsFeed(userId)`: Retrieve the 10 most recent tweet IDs in the user's news feed. The feed should include tweets from users the user follows and the user's own tweets, ordered from most recent to least recent. If there are fewer than 10 tweets available, return all tweets.\n*   `follow(followerId, followeeId)`: `followerId` follows `followeeId`.\n*   `unfollow(followerId, followeeId)`: `followerId` unfollows `followeeId`.",
                "constraints": [
                    "1 <= number of queries <= 1000",
                    "1 <= userId, tweetId, followerId, followeeId <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "postTweet(1, 5);\ngetNewsFeed(1);\nfollow(1, 2);\npostTweet(2, 6);\ngetNewsFeed(1);\nunfollow(1, 2);\ngetNewsFeed(1);",
                        "output": "[5]\n[6, 5]\n[5]",
                        "explanation": "1.  User 1 posts tweet 5. Newsfeed for User 1 contains [5].\n2.  User 1 follows User 2.\n3.  User 2 posts tweet 6. Newsfeed for User 1 now contains [6, 5] (User 2's tweet and User 1's tweet).\n4.  User 1 unfollows User 2. Newsfeed for User 1 is now [5] (only User 1's tweets are shown)."
                    },
                    {
                        "input": "follow(1, 2);\npostTweet(1, 3);\ngetNewsFeed(2);",
                        "output": "[]",
                        "explanation": "1.  User 1 follows User 2.\n2.  User 1 posts tweet 3.\n3.  User 2's newsfeed is empty because User 2 has not posted any tweets and does not follow anyone who has."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Map of Sets&nbsp;to store followers and followee efficiently.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Design-Pattern",
                "slug": "design-pattern"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Twitter {\r\n  public:\r\n    vector<pair<int, int>> posts;\r\n    map<int, set<int>> followee;\r\n\r\n    // Initialize your data structure here\r\n    Twitter() {}\r\n\r\n    // Compose a new tweet\r\n    void postTweet(int userId, int tweetId) {\r\n        posts.push_back({userId, tweetId});\r\n    }\r\n\r\n    // Retrieve the 10 most recent tweet ids as mentioned in question\r\n    vector<int> getNewsFeed(int userId) {\r\n        int cnt = 0;\r\n        vector<int> res;\r\n\r\n        // find 10 most recent tweets such that either tweet by userId or by any\r\n        // followee\r\n        for (int i = posts.size() - 1; i >= 0 and cnt < 10; i--) {\r\n            pair<int, int> x = posts[i];\r\n            if ((x.first == userId) or\r\n                (followee[userId].find(x.first) != followee[userId].end())) {\r\n                cnt++;\r\n                res.push_back(x.second);\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    // Follower follows a followee. If the operation is invalid, it should be a\r\n    // no-op.\r\n    void follow(int followerId, int followeeId) {\r\n        followee[followerId].insert(followeeId);\r\n    }\r\n\r\n    // Follower unfollows a followee. If the operation is invalid, it should be\r\n    // a no-op.\r\n    void unfollow(int followerId, int followeeId) {\r\n        followee[followerId].erase(followeeId);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Pair {\r\n    int first, second;\r\n    Pair(int first, int second) {\r\n        this.first = first;\r\n        this.second = second;\r\n    }\r\n} class Twitter {\r\n\r\n    List<Pair> posts = new ArrayList<>();\r\n    Map<Integer, Set<Integer>> followee = new HashMap<>();\r\n\r\n    // Initialize your data structure here\r\n    Twitter() {}\r\n\r\n    // Compose a new tweet\r\n    void postTweet(int userId, int tweetId) {\r\n        posts.add(new Pair(userId, tweetId));\r\n    }\r\n\r\n    // Retrieve the 10 most recent tweet ids as mentioned in question\r\n    List<Integer> getNewsFeed(int userId) {\r\n        int cnt = 0;\r\n        List<Integer> res = new ArrayList<>();\r\n\r\n        // find 10 most recent tweets such that either tweet by userId or by any\r\n        // followee\r\n        for (int i = posts.size() - 1; i >= 0 && cnt < 10; i--) {\r\n            Pair x = posts.get(i);\r\n            if ((x.first == userId)) {\r\n                cnt++;\r\n                res.add(x.second);\r\n            } else if (followee.containsKey(userId)) {\r\n                Set<Integer> cur = followee.get(userId);\r\n                if (cur.contains(x.first)) {\r\n                    cnt++;\r\n                    res.add(x.second);\r\n                }\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    // Follower follows a followee. If the operation is invalid, it should be a\r\n    // no-op.\r\n    void follow(int followerId, int followeeId) {\r\n        // followee[followerId].insert(followeeId);\r\n        if (followee.containsKey(followerId)) {\r\n            Set<Integer> cur = followee.get(followerId);\r\n            cur.add(followeeId);\r\n            followee.put(followerId, cur);\r\n        } else {\r\n            Set<Integer> cur = new HashSet<>();\r\n            cur.add(followeeId);\r\n            followee.put(followerId, cur);\r\n        }\r\n    }\r\n\r\n    // Follower unfollows a followee. If the operation is invalid, it should be\r\n    // a no-op.\r\n    void unfollow(int followerId, int followeeId) {\r\n        if (followee.containsKey(followerId)) {\r\n            Set<Integer> set = followee.get(followerId);\r\n            set.remove(new Integer(followeeId));\r\n            followee.put(followerId, set);\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import defaultdict\n\n\nclass Twitter:\n\n    # Initialize your data structure here\n    def __init__(self):\n        self.users = defaultdict(set)\n        self.tweets = []\n\n    # Compose a new tweet\n    def postTweet(self, userId: int, tweetId: int):\n        self.tweets.append((userId, tweetId))\n\n    # Retrieve the 10 most recent tweet ids as mentioned in question\n    def getNewsFeed(self, userId: int):\n        res = []\n        i = len(self.tweets) - 1\n        while i >= 0 and len(res) < 10:\n            if self.tweets[i][0] in self.users[userId] or self.tweets[i][\n                    0] == userId:\n                res.append(self.tweets[i][1])\n            i -= 1\n        return res\n\n    # Follower follows a followee. If the operation is invalid, it should be a no-op.\n    def follow(self, followerId: int, followeeId: int):\n        self.users[followerId].add(followeeId)\n\n    # Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n    def unfollow(self, followerId: int, followeeId: int):\n        if followeeId in self.users[followerId]:\n            self.users[followerId].remove(followeeId)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} userId\n * @param {number} tweetId\n * @returns {void}\n */\n\nclass Twitter {\n    // Initialize your data structure here\n    constructor() {\n        this.users = new Map();\n        this.tweets = [];\n    }\n    \n    // Compose a new tweet\n    postTweet(userId, tweetId) {\n        this.tweets.push([userId, tweetId]);\n    }\n    \n    /**\n     * @param {number} userId\n     * @returns {number[]}\n     */\n    // Retrieve the 10 most recent tweet ids as mentioned in question\n    getNewsFeed(userId) {\n        const res = [];\n        let i = this.tweets.length - 1;\n        while (i >= 0 && res.length < 10) {\n            if (this.tweets[i][0] === userId || (this.users.get(userId) && this.users.get(userId).has(this.tweets[i][0]))) {\n                res.push(this.tweets[i][1]);\n            }\n            i--;\n        }\n        return res;\n    }\n    \n    /**\n     * @param {number} followerId\n     * @param {number} followeeId\n     * @returns {void}\n     */\n    // Follower follows a followee. If the operation is invalid, it should be a no-op.\n    follow(followerId, followeeId) {\n        if (!this.users.get(followerId)) {\n            this.users.set(followerId, new Set());\n        }\n        this.users.get(followerId).add(followeeId);\n    }\n    \n    /**\n     * @param {number} followerId\n     * @param {number} followeeId\n     * @returns {void}\n     */\n    // Follower unfollows a followee. If the operation is invalid, it should be a no-op.\n    unfollow(followerId, followeeId) {\n        if (this.users.get(followerId)) {\n            this.users.get(followerId).delete(followeeId);\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}