{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700218,
            "title": "Cycle in a Directed Graph",
            "titleSlug": "detect-cycle-in-a-directed-graph",
            "content": "<p><span style=\"font-size: 18px;\">Given a Directed Graph with <strong>V</strong> vertices (Numbered from <strong>0</strong> to <strong>V-1</strong>) and <strong>E</strong> edges, check whether it contains any cycle or not.<br />The graph is represented as an adjacency list, where <code>adj[i]</code> contains a list of vertices that are directly reachable from vertex <span class=\"katex\"><span class=\"katex-mathml\">i</span></span>. Specifically, <code>adj[i][j]</code> represents an edge from vertex <span class=\"katex\"><span class=\"katex-mathml\">i</span></span> to vertex <span class=\"katex\"><span class=\"katex-mathml\">j</span></span>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n\n<span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700218/Web/Other/9a013355-2510-4ab0-b554-1a2b9f6cb44f_1685086462.png\" alt=\"\" /></span>\n\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 1\n<strong>Explanation</strong>: 3 -&gt; 3 is a cycle</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Example 2:<br /></strong></span><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700218/Web/Other/b1096e14-7c18-47d8-a4e9-8dd42b2e466f_1685086462.png\" alt=\"\" />\n\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 0\n<strong>Explanation</strong>: no cycle in the graph</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; V, E &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with V vertices (numbered from 0 to V-1) and E edges, determine if it contains a cycle. The graph is represented by an adjacency list, where adj[i] contains a list of vertices directly reachable from vertex i. Specifically, adj[i][j] indicates an edge from vertex i to vertex j.",
                "constraints": [
                    "1 <= V, E <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "V = 4, E = 1\nadj = [[], [], [3], [3]]",
                        "output": "1",
                        "explanation": "The graph contains a cycle because vertex 3 has a self-loop (3 -> 3)."
                    },
                    {
                        "input": "V = 4, E = 3\nadj = [[1], [2], [3], []]",
                        "output": "0",
                        "explanation": "The graph does not contain a cycle. The vertices form a chain: 0 -> 1 -> 2 -> 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "",
            ""
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "samsung",
            "makemytrip",
            "oracle",
            "goldman-sachs",
            "adobe",
            "bankbazaar",
            "rockstand"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to detect cycle in a directed graph.\n    bool isCyclic(vector<vector<int>> &adj) {\n        int V = adj.size();\n        vector<int> inDegree(V, 0);\n\n        // Calculate in-degrees of all vertices\n        for (int vertex = 0; vertex < V; vertex++) {\n            for (int neighbor : adj[vertex]) {\n                inDegree[neighbor]++;\n            }\n        }\n\n        queue<int> nodesQueue;\n\n        // Enqueue all vertices with in-degree of 0\n        for (int vertex = 0; vertex < V; vertex++) {\n            if (inDegree[vertex] == 0) {\n                nodesQueue.push(vertex);\n            }\n        }\n\n        int processedCount = 0;\n\n        // Process nodes\n        while (!nodesQueue.empty()) {\n            int currentNode = nodesQueue.front();\n            nodesQueue.pop();\n            processedCount++;\n\n            // Decrease in-degree of neighbors\n            for (int neighbor : adj[currentNode]) {\n                inDegree[neighbor]--;\n                if (inDegree[neighbor] == 0) {\n                    nodesQueue.push(neighbor);\n                }\n            }\n        }\n\n        // If processedCount is not equal to V, a cycle exists\n        return processedCount != V;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to detect cycle in a directed graph using BFS\n    public boolean isCyclic(ArrayList<ArrayList<Integer>> adj) {\n        int V = adj.size();\n        int[] inDegree = new int[V]; // Array to store in-degrees of each vertex\n\n        // Calculate in-degrees of all vertices\n        for (int vertex = 0; vertex < V; vertex++) {\n            for (int neighbor : adj.get(vertex)) {\n                inDegree[neighbor]++;\n            }\n        }\n\n        Queue<Integer> queue = new LinkedList<>();\n\n        // Enqueue all vertices with in-degree of 0\n        for (int vertex = 0; vertex < V; vertex++) {\n            if (inDegree[vertex] == 0) {\n                queue.offer(vertex);\n            }\n        }\n\n        int processedCount = 0; // Counter for processed nodes\n\n        // Process nodes\n        while (!queue.isEmpty()) {\n            int currentNode = queue.poll();\n            processedCount++;\n\n            // Decrease in-degree of neighbors\n            for (int neighbor : adj.get(currentNode)) {\n                inDegree[neighbor]--;\n                if (inDegree[neighbor] == 0) {\n                    queue.offer(neighbor);\n                }\n            }\n        }\n\n        // If processedCount is not equal to V, a cycle exists\n        return processedCount != V;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from collections import deque\n\n\nclass Solution:\n\n    # Function to detect cycle in a directed graph using BFS\n    def isCyclic(self, adj):\n        V = len(adj)\n        in_degree = [0] * V  # Array to store in-degrees of each vertex\n\n        # Calculate in-degrees of all vertices\n        for vertex in range(V):\n            for neighbour in adj[vertex]:\n                in_degree[neighbour] += 1\n\n        # Create a queue for nodes with in-degree of 0\n        queue = deque()\n\n        # Enqueue all vertices with in-degree of 0\n        for vertex in range(V):\n            if in_degree[vertex] == 0:\n                queue.append(vertex)\n\n        processed_count = 0  # Counter for processed nodes\n\n        # Process nodes\n        while queue:\n            current_node = queue.popleft()\n            processed_count += 1\n\n            # Decrease in-degree of neighbors\n            for neighbour in adj[current_node]:\n                in_degree[neighbour] -= 1\n                if in_degree[neighbour] == 0:\n                    queue.append(neighbour)\n\n        # If processed_count is not equal to V, a cycle exists\n        return processed_count != V\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() {\n        this.visited = []; // Initialize an array to keep track of visited vertices\n    }\n\n    // Function to detect cycle in a directed graph using BFS\n    isCyclic(adj) {\n        const V = adj.length;\n        const inDegree =\n            new Array(V).fill(0); // Array to store in-degrees of each vertex\n\n        // Calculate in-degrees of all vertices\n        for (let vertex = 0; vertex < V; vertex++) {\n            for (let neighbour of adj[vertex]) {\n                inDegree[neighbour]++;\n            }\n        }\n\n        const queue = []; // Create a queue for vertices with in-degree of 0\n\n        // Enqueue all vertices with in-degree of 0\n        for (let vertex = 0; vertex < V; vertex++) {\n            if (inDegree[vertex] === 0) {\n                queue.push(vertex);\n            }\n        }\n\n        let processedCount = 0; // Counter for processed nodes\n\n        // Process nodes\n        while (queue.length > 0) {\n            const currentNode = queue.shift();\n            processedCount++;\n\n            // Decrease in-degree of neighbors\n            for (let neighbour of adj[currentNode]) {\n                inDegree[neighbour]--;\n                if (inDegree[neighbour] === 0) {\n                    queue.push(neighbour);\n                }\n            }\n        }\n\n        // If processedCount is not equal to V, a cycle exists\n        return processedCount !== V;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}