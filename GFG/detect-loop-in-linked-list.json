{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700099,
            "title": "Detect Loop in linked list",
            "titleSlug": "detect-loop-in-linked-list",
            "content": "<p><span style=\"font-size: 18.6667px;\">You are given the <strong>head </strong>of a singly linked list. Your task is to determine if the linked list contains a <strong>loop</strong>. A loop exists in a linked list if the next pointer of the last node points to any other node in the list (including itself), rather than being null.</span></p>\n<p><span ><strong>Custom Input format:</strong><br />A<strong> head </strong>of a singly linked list<strong> </strong>and a<strong> </strong><strong>pos </strong>(1-based index) which denotes the position of the node to which the last node points to. </span><span style=\"font-size: 18.6667px;\">If <strong>pos </strong>= 0, it means the last node points to null, indicating there is no loop.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>head: 1 -&gt; 3 -&gt; 4, pos = 2\n<strong>Output: </strong>true<strong>\nExplanation: </strong>There exists a loop as last node is connected back to the second node.<strong><br /></strong><strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700099/Web/Other/blobid1_1718699705.png\" width=\"400\" height=\"160\" /></strong><br /></span></pre>\n<pre><span ><strong>Input: </strong>head:<strong> </strong>1 -&gt; 8 -&gt; 3 -&gt; 4, pos = 0\n<strong>Output: </strong>false<strong>\nExplanation: </strong>There exists no loop in given linked list.<strong><br /></strong><strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700099/Web/Other/blobid2_1718699755.png\" width=\"400\" height=\"100\" /></strong><br /></span></pre>\n<pre><span ><strong>Input: </strong>head: 1 -&gt; 2 -&gt; 3 -&gt; 4, pos = 1\n<strong>Output: </strong>true<strong>\nExplanation: </strong>There exists a loop as last node is connected back to the first node.<strong><br /></strong></span><span ><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700332/Web/Other/blobid2_1718609744.png\" width=\"400\" height=\"160\" /></span><br /><br /></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &le; number of nodes &le; 10<sup>4</sup><br />1 &le; node-&gt;data &le; 10<sup>3&nbsp; &nbsp; &nbsp; &nbsp;</sup></span><span style=\"font-size: 18.6667px;\"><br /></span><span >0&nbsp;</span><span style=\"font-size: 18.6667px;\">&le;&nbsp;</span><span >pos&nbsp;</span><span style=\"font-size: 18.6667px;\">&le; Number of nodes in Linked List</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use two pointers moving at different speeds to detect a loop.</span></p>",
            "<p><span >Use two pointers: move one slowly (1 step) and the other quickly (2 steps). If they meet, there's a loop; if a pointer reaches the end, no loop exists.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "vmware",
            "accolite",
            "amazon",
            "oyo-rooms",
            "samsung",
            "snapdeal",
            "d-e-shaw",
            "hike",
            "makemytrip",
            "walmart",
            "maq-software",
            "adobe",
            "sap-labs",
            "qualcomm",
            "veritas",
            "mahindra-comviva",
            "lybrate"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if the linked list has a loop.\n    bool detectLoop(Node* head) {\n        if (!head)\n            return false;\n\n        Node* slow = head;\n        Node* fast = head;\n\n        while (fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n            if (slow == fast)\n                return true;\n        }\n\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Backend complete function template for JAVA\n\nclass Solution {\n    // Function to check if the linked list has a loop.\n    public static boolean detectLoop(Node head) {\n\n        // using two pointers and moving one pointer(slow) by one node and\n        // another pointer(fast) by two nodes in each iteration.\n        Node fast = head.next;\n        Node slow = head;\n\n        while (fast != slow) {\n            // if the node pointed by first pointer(fast) or the node\n            // next to it is null, we return false.\n            if (fast == null || fast.next == null) return false;\n\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        // if we reach here it means both the pointers fast and slow point to\n        // same node which shows the presence of loop so we return true.\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n'''\n\n\t\t# Node Class\n\t\tclass Node:\n\t\t    def __init__(self, data):   # data -> value stored in node\n\t\t        self.data = data\n\t\t        self.next = None\n\n'''\n\n\nclass Solution:\n    #Function to check if the linked list has a loop.\n    def detectLoop(self, head):\n\n        #using two pointers and moving one pointer(slow) by one node and\n        #another pointer(fast) by two nodes in each iteration.\n        slow = head\n        fast = head\n\n        #using a loop to move the pointers which stops when any of the pointers\n        #or the pointer next to fast becomes null.\n        while slow and fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n            #if both the pointers fast and slow point to same node which\n            #shows the presence of loop so we return true.\n            if slow == fast:\n                return True\n\n        #if we reach here it means both the pointers fast and slow never\n        #point to same node so we return false.\n        return False\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} head\n * @returns {boolean}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to check if the linked list has a loop.\n    detectLoop(head) {\n        if (!head) return false;\n\n        // using two pointers and moving one pointer(slow) by one node and\n        // another pointer(fast) by two nodes in each iteration.\n        let fast = head.next;\n        let slow = head;\n\n        while (fast !== slow) {\n            // if the node pointed by first pointer(fast) or the node\n            // next to it is null, we return false.\n            if (!fast || !fast.next) return false;\n\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n\n        // if we reach here it means both the pointers fast and slow point to\n        // same node which shows the presence of loop so we return true.\n        return true;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}