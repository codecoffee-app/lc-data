{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701269,
            "title": "Determinant of a Matrix",
            "titleSlug": "determinant-of-a-matrix-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a square matrix of size <strong>n*n</strong>. The task is to find the <a href=\"https://en.wikipedia.org/wiki/Determinant\"><strong>determinant</strong></a> of this matrix.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nn = 4\nmatrix[][] = {{1, 0, 2, -1},\n&nbsp;\\t\\t {3, 0, 0, 5},\n&nbsp;\\t\\t {2, 1, 4, -3},\n&nbsp;\\t\\t {1, 0, 5, 0}}\n<strong>Output</strong>: 30\n<strong>Explanation</strong>:\nDeterminant of the given matrix is 30.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nn = 3\nmatrix[][] = {{1, 2, 3},\n&nbsp;\\t\\t {4, 5, 6},\n&nbsp;\\t\\t {7, 10, 9}}\n<strong>Output</strong>: 12\n<strong>Explanation</strong>:\nDeterminant of the given matrix is 12.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Complete the function <strong>determinantOfMatrix()&nbsp;</strong>that takes<strong> </strong>matrix<strong> </strong>and its size <strong>n</strong> as input parameters<strong> </strong>and returns the determinant of the matrix.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N<sup>4</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(N<sup>2</sup>)</span><br /><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<br />-10&nbsp;&lt;= mat[i][j] &lt;= 10</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square matrix of size n*n, calculate its determinant.",
                "constraints": [
                    "1 <= N <= 10",
                    "-10 <= mat[i][j] <= 10"
                ],
                "testcases": [
                    {
                        "input": "n = 4\nmatrix[][] = {{1, 0, 2, -1},\n\t\t {3, 0, 0, 5},\n\t\t {2, 1, 4, -3},\n\t\t {1, 0, 5, 0}}",
                        "output": "30",
                        "explanation": "The determinant of the provided 4x4 matrix is 30."
                    },
                    {
                        "input": "n = 3\nmatrix[][] = {{1, 2, 3},\n\t\t {4, 5, 6},\n\t\t {7, 10, 9}}",
                        "output": "12",
                        "explanation": "The determinant of the given 3x3 matrix is 12."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution\n{   \n    public:\n    //Function to get cofactor of matrix[p][q] in temp[][].\n    void getCofactor(vector<vector<int>> & matrix,vector<vector<int>>&temp,int p,int q,int n)\n    {\n        int i = 0, j = 0;\n        for (  int row = 0; row < n; row++)\n        {\n            for (  int col = 0; col < n; col++)\n            {\n                //copying only those elements into temporary matrix \n                //which are not in given row and column.\n                if (row != p && col != q)\n                {\n                    temp[i][j++] = matrix[row][col];\n\n                    //if row is filled, we increase row index and\n                    //reset column index.\n                    if (j == n - 1)\n                    {\n                        j = 0;\n                        i++;\n                    }\n                }\n            }\n        }\n    }\n\n\n    //Function for finding determinant of matrix.\n    int determinantOfMatrix(vector<vector<int> > matrix, int n)\n    {\n        int D = 0; \n\n        //base case\n        if (n == 1)\n            return matrix[0][0];\n\n        //creating a list to store Cofactors.\n        vector<vector<int> > temp(n, vector<int>(n)); \n        int sign = 1; \n\n        //iterating for each element of first row.\n        for (  int i = 0; i < n; i++)\n        {\n            //getting Cofactor of matrix[0][i].\n            getCofactor(matrix, temp, 0, i, n);\n            D += sign * matrix[0][i] * determinantOfMatrix(temp, n - 1);\n\n            //terms are to be added with alternate sign so changing the sign.\n            sign = -sign;\n        }\n        //returning the determinant.\n        return D;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution\n{\n    //Function to get cofactor of matrix[p][q] in temp[][]. \n    static void getCofactor(int matrix[][], int temp[][], int p, int q, int n)\n    {\n        int i = 0, j = 0;\n\n        for (int row = 0; row < n; row++)\n        {\n            for (int col = 0; col < n; col++)\n            {\n                //copying only those elements into temporary matrix \n                //which are not in given row and column.\n                if(row != p && col != q)\n                {\n                    temp[i][j++] = matrix[row][col];\n\n                    //if row is filled, we increase row index and\n                    //reset column index.\n                    if(j == n - 1)\n                    {\n                        j = 0;\n                        i++;\n                    }\n                }\n            }\n         }\n    }\n    \n    \n    //Function for finding determinant of matrix.\n    static int determinantOfMatrix(int matrix[][], int n)\n    {\n        int D = 0; \n\n        //base case\n        if (n == 1)\n            return matrix[0][0];\n\n        //creating a list to store Cofactors.\n        int temp[][]  = new int[n][n];\n\n        int sign = 1;\n\n        //iterating for each element of first row.\n        for (int i = 0; i < n; i++)\n        {\n            //getting Cofactor of matrix[0][i].\n            getCofactor(matrix, temp, 0, i, n);\n            D += sign * matrix[0][i] * determinantOfMatrix(temp, n - 1);\n\n            //terms are to be added with alternate sign so changing the sign.\n            sign = -sign;\n        }\n        //returning the determinant.\n        return D;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "\n#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to get cofactor of matrix[p][q] in temp[][].\n    def getCofactor(self,matrix, temp, p, q, n):\n        \n        i,j = 0,0\n        for row in range(n):\n            for col in range(n):\n                \n                #copying only those elements into temporary matrix \n                #which are not in given row and column.\n                if row != p and col != q:\n                    temp[i][j] = matrix[row][col]\n                    j+=1\n    \n                    #if row is filled, we increase row index and\n                    #reset column index.\n                    if j==n-1:\n                        j=0\n                        i+=1\n    \n    \n    #Function for finding determinant of matrix.\n    def determinantOfMatrix(self,matrix,n):\n        \n        d = 0 \n        #base case \n        if n==1:\n            return matrix[0][0]\n    \n        #creating a list to store Cofactors.\n        temp = [ [0 for i in range(n)] for i in range(n)]\n\n        sign = 1\n    \n        #iterating for each element of first row.\n        for i in range(n):\n    \n            #getting Cofactor of matrix[0][i].\n            self.getCofactor(matrix, temp, 0, i, n)\n            d += sign * matrix[0][i] * self.determinantOfMatrix(temp,n-1)\n    \n            #terms are to be added with alternate sign so changing the sign.\n            sign = -sign \n    \n        #returning the determinant.\n        return d\n        \n        \n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[][]} matrix\n * @param {number} n\n * @returns {number}\n*/\nclass Solution \n{\n    //Function to get cofactor of matrix[p][q] in temp[][].\n    getCofactor(matrix, temp, p, q, n)\n    {\n        let i = 0, j = 0;\n        for (let row = 0; row < n; row++)\n        {\n            for (let col = 0; col < n; col++)\n            {\n                //copying only those elements into temporary matrix \n                //which are not in given row and column.\n                if (row != p && col != q)\n                {\n                    temp[i][j++] = matrix[row][col];\n\n                    //if row is filled, we increase row index and\n                    //reset column index.\n                    if (j == n - 1)\n                    {\n                        j = 0;\n                        i++;\n                    }\n                }\n            }\n        }\n    }\n\n\n    //Function for finding determinant of matrix.\n    determinantOfMatrix(matrix, n)\n    {\n        let D = 0; \n\n        //base case\n        if (n == 1)\n            return matrix[0][0];\n\n        //creating a list to store Cofactors.\n        let temp = new Array(n);\n        for(let i=0;i<n;i++)\n        {\n            temp[i] = new Array(n);\n            temp[i].fill(0);\n        }\n        let sign = 1; \n\n        //iterating for each element of first row.\n        for (let i = 0; i < n; i++)\n        {\n            //getting Cofactor of matrix[0][i].\n            this.getCofactor(matrix, temp, 0, i, n);\n            D += sign * matrix[0][i] * this.determinantOfMatrix(temp, n - 1);\n\n            //terms are to be added with alternate sign so changing the sign.\n            sign = -sign;\n        }\n        //returning the determinant.\n        return D;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}