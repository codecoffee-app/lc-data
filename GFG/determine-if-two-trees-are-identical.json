{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700222,
            "title": "Identical Trees",
            "titleSlug": "determine-if-two-trees-are-identical",
            "content": "<p><span >Given two binary trees with their root nodes <strong>r1</strong> and <strong>r2</strong>, return true if both of them are identical, otherwise, false.<br /></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:\n</strong>    1\\t    1\n&nbsp;  /   \\\\t /   \\\n&nbsp; 2     3    2    3\n<strong>Output: </strong>true<strong>\nExplanation: <br /></strong>There are two trees both having 3 nodes and 2 edges, both trees are identical having the root as 1, left child of 1 is 2 and right child of 1 is 3.</span></pre>\n<pre><span ><strong>Input:\n</strong>    1\\t   1\n&nbsp;  /   \\\\t/  \\\n&nbsp; 2     3   3   2\n<strong>Output: </strong>false<strong>\nExplanation: </strong>There are two trees both having 3 nodes and 2 edges, but both trees are not identical.</span></pre>\n<pre><span ><strong>Input:\n</strong>    1   1\n&nbsp;  /\\t\\\n&nbsp; 2\\t  2\n<strong>Output: </strong>false<strong>\nExplanation: </strong>Although both trees have the same node values (1 and 2), they are arranged differently, making the trees non-identical.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root nodes `r1` and `r2` of two binary trees, determine if the two trees are structurally identical and have the same node values. Return `true` if they are identical; otherwise, return `false`.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node.data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "    1\t    1\n  /   \\t /   \\\n 2     3    2    3",
                        "output": "true",
                        "explanation": "Both trees have the same structure and node values.  The root is 1, the left child of the root is 2, and the right child of the root is 3 in both trees."
                    },
                    {
                        "input": "    1\t   1\n  /   \\t/  \\\n 2     3   3   2",
                        "output": "false",
                        "explanation": "Although both trees have the same number of nodes and the same node values, the structure differs. The left and right children of the root are swapped between the two trees."
                    },
                    {
                        "input": "    1   1\n  /\\\t\\\n 2\t  2",
                        "output": "false",
                        "explanation": "While both trees contain the same node values, they are arranged differently. The second tree is missing the left subtree and is non-identical"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively compare both trees starting from the root. If nodes match, continue checking their left and right subtrees; return 1 if identical, else 0.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\n  public:\n    // Function to check if two trees are identical.\n    bool isIdentical(Node* a, Node* b) {\n        // if both nodes are null then we return true.\n        if (a == NULL && b == NULL)\n            return true;\n\n        if (a != NULL && b != NULL) {\n            // we check if data at both nodes and left and right subtree of\n            // both the nodes are equal then we return true else return false.\n            return (a->data == b->data && isIdentical(a->left, b->left) &&\n                    isIdentical(a->right, b->right));\n        }\n\n        // returning false if one of the nodes is null and other isn't.\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to check if two trees are identical.\n    boolean isIdentical(Node root1, Node root2) {\n        // if both nodes are null then we return true.\n        if (root1 == null && root2 == null) return true;\n\n        if (root1 != null && root2 != null) {\n            // we check if data at both nodes and left and right subtree of\n            // both the nodes are equal then we return true else return false.\n            return (root1.data == root2.data && isIdentical(root1.left, root2.left) &&\n                    isIdentical(root1.right, root2.right));\n        }\n        // returning false if one of the nodes is null and other isn't.\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to check if two trees are identical.\n    def isIdentical(self, root1, root2):\n\n        #if both nodes are null then we return true.\n        if root1 is None and root2 is None:\n            return 1\n\n        if root1 is not None and root2 is not None:\n\n            #we check if data at both nodes and left and right subtree of\n            #both the nodes are equal then we return true else return false.\n            if (root1.data != root2.data):\n                return 0\n\n            return self.isIdentical(root1.left,\n                                    root2.left) and self.isIdentical(\n                                        root1.right, root2.right)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\nclass Solution {\n    // Function to check if two trees are identical.\n    public bool isIdentical(Node r1, Node r2) {\n        // if both nodes are null then we return true.\n        if (r1 == null && r2 == null) return true;\n\n        if (r1 != null && r2 != null) {\n            // we check if data at both nodes and left and right subtree of\n            // both the nodes are equal then we return true else return false.\n            return (r1.data == r2.data && isIdentical(r1.left, r2.left) &&\n                    isIdentical(r1.right, r2.right));\n        }\n\n        // returning false if one of the nodes is null and other isn't.\n        return false;\n    }\n}\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} root1\n * @param {Node} root2\n * @returns {boolean}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to check if two trees are identical.\n    isIdentical(root1, root2) {\n        // if both nodes are null then we return true.\n        if (root1 === null && root2 === null) return true;\n\n        if (root1 !== null && root2 !== null) {\n            // we check if data at both nodes and left and right subtree of\n            // both the nodes are equal then we return true else return false.\n            if (root1.data !== root2.data) return false;\n\n            return (this.isIdentical(root1.left, root2.left) &&\n                    this.isIdentical(root1.right, root2.right));\n        }\n\n        // returning false if one of the nodes is null and other isn't.\n        return false;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}