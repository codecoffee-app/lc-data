{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706277,
            "title": "Sort a 2D vector diagonally",
            "titleSlug": "diagonal-morning-assembly0028",
            "content": "<p><span style=\"font-size: 18px;\">Given an <strong>NxM</strong> 2D matrix, rearrange such that&nbsp;<br />Each diagonal in the lower left triangle of the rectangular grid is sorted in ascending order.&nbsp;<br />Each diagonal in the upper right triangle of the rectangular grid is sorted in descending order.&nbsp;<br />The major diagonal in the grid starting from the top-left corner is not rearranged.&nbsp;</span></p>\n<p><br /><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 4, M = 5 \nmatrix = {{3 6 3 8 2},\n\\t    {4 1 9 5 9},\n\\t    {5 7 2 4 8},\n\\t    {8 3 1 7 6}}\n<strong>Output:</strong>\n3 9 8 9 2\n1 1 6 5 8\n3 4 2 6 3\n8 5 7 7 4\n<strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">Before:\n<img style=\"height: 139px; width: 180px;\" src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/20201012182216/after1.png\" alt=\"\" /></span>\n<span style=\"font-size: 18px;\">After:\n<img style=\"height: 150px; width: 185px;\" src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/20201012182218/before.png\" alt=\"\" /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>diagonalSort()</strong> which takes the matrix, n and m as input parameter and rearranges the elements of the matrix.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N*M*log(min(N,M)))<br /><strong>Expected Auxiliary Space: </strong>O(min(N,M))</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N,M &lt;= 10<sup>4&nbsp;</sup>,&nbsp;1&lt;=N*M&lt;=10<sup>5</sup><br />1 &lt;= matrix[i] &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><img alt=\"Lightbox\" id=\"lightbox-image\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20200327121556/Diagonal5.jpg\" /></p>\n\n<p>The above images shows the difference between the column index and row index at each cell. The cells having same difference from top-left to bottom-down cell forms a diagonal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void diagonalSort(vector<vector<int> >& matrix, int n, int m) \n    { \n        vector<int> lower_triangle[n]; \n        vector<int> upper_triangle[m]; \n        vector<int> major_diagonal;\n    \n        for (int i = 0; i < n; i++) { \n            for (int j = 0; j < m; j++) { \n                if (j < i) { \n                    lower_triangle[i-j].push_back(matrix[i][j]); \n                } \n                else if (j > i) { \n                    upper_triangle[j-i].push_back(matrix[i][j]); \n                } \n                else { \n                    major_diagonal.push_back(matrix[i][j]); \n                } \n            } \n        } \n    \n    \n        // Sort the array of vectors \n        for (int i = 1; i < n; i++) { \n            sort(lower_triangle[i].begin(), lower_triangle[i].end(),greater<int>()); //error \n        } \n    \n        for (int i = 1; i < m; i++) { \n            sort(upper_triangle[i].begin(), upper_triangle[i].end()); \n        } \n    \n        // Update the value to matrix[][] \n        // using the sorted array of vectors \n        for (int i = 0; i < n; i++) { \n            for (int j = 0; j < m; j++) { \n                // If (j-i) is negative \n                if (j < i) { \n                    int d = i-j; \n                    int l = lower_triangle[d].size() - 1; \n                    matrix[i][j] = lower_triangle[d][l]; \n                    lower_triangle[d].pop_back(); \n                } \n                // If (j-i) is positive \n                else if (j > i) { \n                    int d = j-i; \n                    int l = upper_triangle[d].size() - 1; \n                    matrix[i][j] = upper_triangle[d][l]; \n                    upper_triangle[d].pop_back(); \n                } \n            } \n        } \n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    void diagonalSort(int matrix[][], int n, int m)\n    {\n        // code here \n        ArrayList<ArrayList<Integer>> lower_triangle = new ArrayList<ArrayList<Integer>>();\n        ArrayList<ArrayList<Integer>> upper_triangle = new ArrayList<ArrayList<Integer>>(); \n        ArrayList<Integer> major_diagonal = new ArrayList<Integer>();\n\n        for(int i=0;i<n;i++){\n                ArrayList<Integer> empty = new ArrayList<Integer>();\n                lower_triangle.add(empty);\n        }\n        \n        for(int i=0;i<m;i++){\n                ArrayList<Integer> empty = new ArrayList<Integer>();\n                upper_triangle.add(empty);\n        }\n\n        for (int i = 0; i < n; i++) { \n            for (int j = 0; j < m; j++) { \n                if (j < i) { \n                    lower_triangle.get(i-j).add(matrix[i][j]); \n                } \n                else if (j > i) { \n                    upper_triangle.get(j-i).add(matrix[i][j]); \n                } \n                else { \n                    major_diagonal.add(matrix[i][j]); \n                } \n            } \n        } \n\n        for (int i = 1; i < n; i++) { \n            Collections.sort(lower_triangle.get(i), Collections.reverseOrder());\n        } \n    \n        for (int i = 1; i < m; i++) { \n            Collections.sort(upper_triangle.get(i));\n        } \n    \n        // Update the value to matrix[][] \n        // using the sorted array of vectors \n        for (int i = 0; i < n; i++) { \n            for (int j = 0; j < m; j++) { \n                // If (j-i) is negative \n                if (j < i) { \n                    int d = i-j; \n                    int l = lower_triangle.get(d).size() - 1; \n                    matrix[i][j] = lower_triangle.get(d).get(l); \n                    lower_triangle.get(d).remove(l); \n                } \n                // If (j-i) is positive \n                else if (j > i) { \n                    int d = j-i; \n                    int l = upper_triangle.get(d).size() - 1; \n                    matrix[i][j] = upper_triangle.get(d).get(l); \n                    upper_triangle.get(d).remove(l); \n                } \n            } \n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def diagonalSort(self, matrix, n, m):\n        # creating empty lists to store the elements in the lower triangle and upper triangle\n        lower_triangle = [[] for i in range(n)]\n        upper_triangle = [[] for i in range(m)]\n        # creating an empty list to store the elements on the major diagonal\n\n        major_diagonal = []\n\n        # looping through the matrix and storing elements in the appropriate lists\n        for i in range(n):\n            for j in range(m):\n                if j < i :\n                    lower_triangle[i-j].append(matrix[i][j])\n                elif j>i :\n                    upper_triangle[j-i].append(matrix[i][j])\n                else :\n                    major_diagonal.append(matrix[i][j])\n\n        # sorting and reversing the elements in the lower triangle\n        for i in range(n):\n            lower_triangle[i].sort()\n            lower_triangle[i] = lower_triangle[i][::-1]\n\n        # sorting the elements in the upper triangle\n        for i in range(m):\n            upper_triangle[i].sort()\n\n        # replacing the elements in the matrix with the sorted elements from the lower and upper triangles\n        for i in range(n):\n            for j in range(m):\n                if j<i :\n                    d = i-j\n                    l = len(lower_triangle[d])-1\n                    matrix[i][j] = lower_triangle[d][l]\n                    lower_triangle[d].pop()\n                elif j>i : \n                    d = j-i\n                    l = len(upper_triangle[d])-1\n                    matrix[i][j] = upper_triangle[d][l]\n                    upper_triangle[d].pop()",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}