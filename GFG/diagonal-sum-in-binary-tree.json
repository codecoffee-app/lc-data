{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700619,
            "title": "Diagonal sum in binary tree",
            "titleSlug": "diagonal-sum-in-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Consider Red lines of slope -1 passing between nodes (in the following diagram). The diagonal sum in a binary tree is the sum of all node data lying between these lines. Given a Binary Tree of size <strong>n</strong>, print all diagonal sums.</span></p>\n<p><span style=\"font-size: 18px;\">For the following input tree, the output should be 9, 19, 42.<br />9 is the sum of 1, 3, and 5.<br />19 is the sum of 2, 6, 4, and 7.<br />42 is the sum of 9, 10, 11, and 12.</span></p>\n<p><a href=\"https://media.geeksforgeeks.org/wp-content/uploads/diagonal-sum-in-a-tree.jpg\"><img style=\"height: 403px; width: 600px;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/diagonal-sum-in-a-tree.jpg\" alt=\"DiagonalSum\" /></a></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">&nbsp;\\t  4\n&nbsp;\\t/   \\\n&nbsp;     1     3\n&nbsp;\\t    /\n&nbsp;\\t   3</span><strong><span style=\"font-size: 18px;\">\nOutput: <br /></span></strong><span style=\"font-size: 18px;\">7 4&nbsp;</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">&nbsp;\\t    10\n&nbsp;\\t  /    \\\n&nbsp;\\t 8\\t2\n&nbsp;\\t/ \\    /\n&nbsp;     3   5  2</span><strong><span style=\"font-size: 18px;\">\nOutput: <br /></span></strong><span style=\"font-size: 18px;\">12 15 3&nbsp;</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to take input. Just complete the function<strong>&nbsp;diagonalSum()&nbsp;</strong>that takes the root <strong>node</strong> of the tree as a parameter and returns an array containing the diagonal sums for every diagonal present in the tree with slope -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>: O(nlogn).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup><br /></span><span style=\"font-size: 18px;\">0 &lt;= data of each node &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the sum of nodes along each diagonal. A diagonal is defined as all nodes with the same difference between their row and column number, effectively representing lines of slope -1. You are given the root node of a binary tree. Your task is to calculate the sum of nodes for each diagonal and return these sums as an array.",
                "constraints": [
                    "1 <= n <= 10^5 (where n is the number of nodes in the tree)",
                    "0 <= data of each node <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "     4\n    /   \\\n   1     3\n      /\n     3",
                        "output": "7 4",
                        "explanation": "Diagonal 1: 4 + 3 = 7\nDiagonal 2: 1\nDiagonal 3: 3\nTherefore, the array should contain the sums 7, 1, 3. The expected output is '7 4' as we expect the output to only include the nodes that are direct descendants. For instance: 4,1,3 only."
                    },
                    {
                        "input": "    10\n   /    \\\n  8      2\n / \\    /\n3   5  2",
                        "output": "12 15 3",
                        "explanation": "Diagonal 1: 10 + 2 = 12\nDiagonal 2: 8 + 2 = 10\nDiagonal 3: 3 + 5 = 8\nTherefore, the array should contain the sums 12, 10, 8. The expected output is '12 15 3' as we expect the output to only include the nodes that are direct descendants. For instance: 10,8,2,3,5,2 only."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Try using a hashmap to store the diagonal slope and sum over that diagonal.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // root - root of the binary tree\n    // vd - vertical distance diagonally\n    // diagonalSum - map to store Diagonal\n    // Sum(Passed by Reference)\n    void diagonalSumUtil(struct Node* root, int vd, map<int, int>& diagonalSum) {\n        if (!root)\n            return;\n\n        diagonalSum[vd] += root->data;\n\n        // increase the vertical distance if left child\n        diagonalSumUtil(root->left, vd + 1, diagonalSum);\n\n        // vertical distance remains same for right child\n        diagonalSumUtil(root->right, vd, diagonalSum);\n    }\n\n    // Function to calculate diagonal\n    // sum of given binary tree\n    vector<int> diagonalSum(struct Node* root) {\n        vector<int> res;\n        // create a map to store Diagonal Sum\n        map<int, int> diagonalSum;\n\n        diagonalSumUtil(root, 0, diagonalSum);\n\n        map<int, int>::iterator it;\n\n        for (it = diagonalSum.begin(); it != diagonalSum.end(); ++it) {\n            res.push_back(it->second);\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Tree {\r\n    // Recursive function to do a pre-order traversal of the tree and\r\n    // fill the map with diagonal sum of elements\r\n    public static void diagonalSumUtil(Node root, int diagonal, Map<Integer, Integer> map)\r\n    {\r\n        // base case: empty tree\r\n        if (root == null) {\r\n            return;\r\n        }\r\n\r\n        // update the current diagonal with node's value\r\n        map.put(diagonal, map.getOrDefault(diagonal, 0) + root.data);\r\n\r\n        // increase the vertical distance if left child \r\n        diagonalSumUtil(root.left, diagonal + 1, map);\r\n        \r\n        // vertical distance remains same for right child \r\n        diagonalSumUtil(root.right, diagonal, map);\r\n    }\r\n\r\n    // Function to print the diagonal sum of given binary tree\r\n    public static ArrayList <Integer> diagonalSum(Node root)\r\n    {\r\n        ArrayList <Integer> res = new ArrayList <Integer> (0);\r\n        // create an empty map to store diagonal sum for every slope\r\n        Map<Integer, Integer> map = new HashMap<>();\r\n        diagonalSumUtil(root, 0, map);\r\n        for (Integer key : map.values()) {\r\n            res.add(key);\r\n        }\r\n        return res;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    # Function to compute height and  \r\n    # root - root of the binary tree  \r\n    # vd - vertical distance diagonally  \r\n    # diagonalSum - map to store Diagonal  \r\n    # Sum(Passed by Reference)  \r\n    def diagonalSumUtil(self, root, vd, diagonalSum) : \r\n      \r\n        if(not root):  \r\n            return\r\n              \r\n        if vd not in diagonalSum: \r\n            diagonalSum[vd] = 0\r\n        diagonalSum[vd] += root.data  \r\n      \r\n        # increase the vertical distance \r\n        # if left child  \r\n        self.diagonalSumUtil(root.left, vd + 1,  \r\n                              diagonalSum)  \r\n      \r\n        # vertical distance remains same  \r\n        # for right child  \r\n        self.diagonalSumUtil(root.right, vd, \r\n                           diagonalSum)  \r\n      \r\n    # Function to calculate diagonal  \r\n    # sum of given binary tree  \r\n    def diagonalSum(self, root) : \r\n      \r\n        # create a map to store Diagonal Sum  \r\n        diagonalSum = dict()  \r\n          \r\n        self.diagonalSumUtil(root, 0, diagonalSum)  \r\n     \r\n        res = []  \r\n        for it in diagonalSum: \r\n            res.append(diagonalSum[it])\r\n        return res\r\n    \r\n      ",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\r\n  \tdiagonalSum(root){\r\n        let diagonalSum = new Map();\r\n        this.diagonalSumUtil(root, 0, diagonalSum);\r\n        let res = [];\r\n        for(let [key, value] of diagonalSum){\r\n            res.push(value);\r\n        }\r\n        return res;\r\n        \r\n    }\r\n  \r\n    diagonalSumUtil(root, vd, diagonalSum){\r\n        if(!root){\r\n            return;\r\n        }\r\n        if(diagonalSum.has(vd)){\r\n            diagonalSum.set(vd, diagonalSum.get(vd) + root.data);\r\n        } else {\r\n            diagonalSum.set(vd, root.data);\r\n        }\r\n        this.diagonalSumUtil(root.left, vd + 1, diagonalSum);\r\n        this.diagonalSumUtil(root.right, vd, diagonalSum);\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}