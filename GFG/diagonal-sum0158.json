{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705142,
            "title": "Diagonal sum",
            "titleSlug": "diagonal-sum0158",
            "content": "<p><span style=\"font-size:18px\">Given a square matrix of size <strong>n</strong><strong>&times;n</strong>. Your task is to calculate the sum of its diagonals.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>matrix = {{1, 1, 1}, \n{1, 1, 1}, {1, 1, 1}}\n<strong>Output: </strong>6</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>matrix = {{1, 2}, {3, 4}}\n<strong>Output: </strong>10</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anyhting.&nbsp;Your task is to complete the function&nbsp;<strong>DiagonalSum()</strong>&nbsp;which takes the matrix as input parameter and returns the sum of its diagonals.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &lt;= n &lt;= 100<br />\n1 &lt;= matrix elements &lt;= 10000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square matrix of size n x n, calculate the sum of its main and secondary diagonals. Note that if the matrix has an odd dimension, the element at the center should only be counted once.",
                "constraints": [
                    "1 <= n <= 100",
                    "1 <= matrix elements <= 10000"
                ],
                "testcases": [
                    {
                        "input": "[[1, 1, 1], [1, 1, 1], [1, 1, 1]]",
                        "output": "6",
                        "explanation": "The main diagonal is 1 + 1 + 1 = 3. The secondary diagonal is 1 + 1 + 1 = 3. Total is 3+3=6"
                    },
                    {
                        "input": "[[1, 2], [3, 4]]",
                        "output": "10",
                        "explanation": "The main diagonal is 1 + 4 = 5. The secondary diagonal is 2 + 3 = 5. Total is 5+5=10"
                    },
                    {
                        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
                        "output": "30",
                        "explanation": "The main diagonal is 1 + 5 + 9 = 15. The secondary diagonal is 3 + 5 + 7 = 15.  Total is 15 + 15 = 30"
                    },
                    {
                        "input": "[[1]]",
                        "output": "1",
                        "explanation": "The main diagonal is 1. The secondary diagonal is 1. Total is 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>FInd the pattern to iterate through diagonals</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\npublic:\n    //Function to find the sum of diagonal elements of a matrix.\n    int DiagonalSum(vector<vector<int> >& matrix) {\n    \tint sum = 0;\n    \t\n    \t//iterating over the rows of the matrix.\n    \tfor(int i = 0; i < matrix.size(); i++){\n    \t\tsum += matrix[i][i];\n    \t}\n    \t\n    \t//iterating over the columns of the matrix.\n    \t//starting from the last column and first row.\n    \tfor(int j  = matrix.size() - 1 , i = 0; j >= 0; j--){\n    \t\t//adding the element at matrix[i][j] to the sum.\n    \t\tsum += matrix[i++][j];\n    \t}\t\n    \t\n    \t//returning the sum of diagonal elements.\n    \treturn sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution \n{\n    //Complete this function\n    public int DiagonalSum(List<List<int>> matrix) \n    {\n        int sum = 0;\n        \n        //iterating over the rows of the matrix.\n        for(int i = 0; i < matrix.Count; i++){\n            sum += matrix[i][i];\n        }\n        \n        //iterating over the columns of the matrix.\n        //starting from the last column and first row.\n        for(int j  = matrix.Count - 1 , i = 0; j >= 0; j--){\n            //adding the element at matrix[i][j] to the sum.\n            sum += matrix[i++][j];\n        }   \n        \n        //returning the sum of diagonal elements.\n        return sum;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}