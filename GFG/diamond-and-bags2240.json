{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704805,
            "title": "Diamond in a Bag",
            "titleSlug": "diamond-and-bags2240",
            "content": "<p><span style=\"font-size:18px\">A big diamond is hidden in one of N identical bags. A balance scale is being used to determine which bag is the heaviest in order to locate the diamond.&nbsp;Find the minimum number of time you need to use the balance scale to find the bag containing the diamond.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\n<strong>Output:</strong> 1\r\n<strong>Explaination:</strong> \r\nThe balance scale is needed only once. \r\nTake any two bags and put them on the \r\nscale. Either one of them will turn out \r\nto be heavier or they will be of equal \r\nweight and the left out third bag will \r\ncontain the diamond.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 10\r\n<strong>Output:</strong> 3\r\n<strong>Explaination: \r\n</strong>The balance scale is needed 3 times. \r\n1st Put 5 bags on each side and determine \r\nwhich side is heavier. Take those 5 bags \r\nand put 2 on one side and 2 on the other \r\nleaving 1 out of the balance scale. If the \r\nscale is perfectly balanced, then the left \r\nout bag has teh diamond. Otherwise if one \r\nside is heavier, put those two in the balance. </span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>minScale() </strong>which takes N as input parameter and returns the minimum number of times you need to use the balance scale to get the bag with diamond.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A large diamond is hidden in one of N identical bags. You have a balance scale to determine which bag is the heaviest, thus locating the diamond. Find the minimum number of times you need to use the balance scale to identify the bag containing the diamond.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "1",
                        "explanation": "Only one weighing is required. Weigh two bags against each other. If one is heavier, it contains the diamond. If they balance, the remaining bag contains the diamond."
                    },
                    {
                        "input": "10",
                        "output": "3",
                        "explanation": "Three weighings are needed. First, split the bags into two groups of 5 and weigh them. Take the heavier group of 5. From this group, weigh 2 bags against 2 bags. If one side is heavier, weigh those two bags against each other to find the diamond. If the 2 vs 2 weighing is balanced, the remaining bag from the initial group of 5 contains the diamond."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Breaking N in 3 equal segments is helpful.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Temmplate for C++\n\nclass Solution{\npublic:\n    // Function to find the minimum scale value for a given number N\n    int minScale(int N){\n        // Calculate the value of x using logarithm base 3\n        int x = ceil(log(N)/log(3));\n        return x;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}