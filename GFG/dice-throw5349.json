{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704185,
            "title": "Dice throw",
            "titleSlug": "dice-throw5349",
            "content": "<p><span style=\"font-size: 18px;\">Given&nbsp;<strong>n</strong>&nbsp;dice each with&nbsp;<strong>m</strong>&nbsp;faces. Find the number of ways to get sum&nbsp;<strong>x&nbsp;</strong>which&nbsp;is the summation of values on each face when all the dice are thrown.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> <span >m</span></span><span style=\"font-size: 18px;\"> =<strong> </strong>6, n =<strong> </strong>3, x = 12</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong></span><span style=\"font-size: 18px;\">25</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><span style=\"font-size: 18px;\">There are 25 total ways to get the Sum 12 using 3 dices with faces from 1 to 6.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> <span >m</span> =<strong> </strong>2, n =<strong> </strong>3, x = 6</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong></span><span style=\"font-size: 18px;\">1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><span style=\"font-size: 18px;\">There is only 1 way to get the Sum 6 using 3 dices with faces from 1 to 2. All the dices will have to land on 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= m,n,x &lt;= 50</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'n' dice, each with 'm' faces numbered from 1 to 'm', determine the number of distinct ways to achieve a target sum 'x' when rolling all 'n' dice. The sum 'x' represents the total value obtained by adding the numbers appearing on each die's face after the roll.",
                "constraints": [
                    "1 <= m, n, x <= 50"
                ],
                "testcases": [
                    {
                        "input": "m = 6, n = 3, x = 12",
                        "output": "25",
                        "explanation": "There are 25 different combinations of values on the three dice (each having faces 1 to 6) that add up to a total of 12."
                    },
                    {
                        "input": "m = 2, n = 3, x = 6",
                        "output": "1",
                        "explanation": "With three dice, each having faces 1 and 2, there is only one possible way to obtain a sum of 6. All three dice must show a face value of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The <strong>Naive approach</strong> is to find all the possible combinations of values from n dice and keep on counting the results that sum to X.<br /></span><span >This problem can be efficiently solved using <strong>Dynamic Programming (DP)</strong>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int noOfWays(int m, int n, int x) {\n\n        // Create a table to store results of subproblems.  One extra\n        // row and column are used for simpilicity (number of dice\n        // is directly used as row index and sum is directly used\n        // as column index).  The entries in 0th row and 0th column\n        // are never used.\n        int table[n + 1][x + 1];\n        memset(table, 0, sizeof(table)); // Initialize all entries as 0\n\n        // Table entries for only one dice\n        for (int j = 1; j <= m && j <= x; j++)\n            table[1][j] = 1;\n\n        // Fill rest of the entries in table using recursive relation\n        // i: number of dice, j: sum\n        for (int i = 2; i <= n; i++)\n            for (int j = 1; j <= x; j++)\n                for (int k = 1; k <= m && k < j; k++)\n                    table[i][j] += table[i - 1][j - k];\n\n        return table[n][x];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    // Function to calculate the number of ways\n    static int noOfWays(int m, int n, int x) {\n\n        /* Create a table to store the results of subproblems.\n        One extra row and column are used for simplicity\n        (number of dice is directly used as row index and sum is directly used as column\n        index). The entries in 0th row and 0th column are never used. */\n        int[][] table = new int[n + 1][x + 1];\n\n        /* Table entries for only one dice */\n        for (int j = 1; j <= m && j <= x; j++) table[1][j] = 1;\n\n        /* Fill rest of the entries in table using recursive relation\n        i: number of dice, j: sum */\n        for (int i = 2; i <= n; i++) {\n            for (int j = 1; j <= x; j++) {\n                for (int k = 1; k < j && k <= m; k++)\n                    table[i][j] += table[i - 1][j - k];\n            }\n        }\n\n        // Return the final result\n        return table[n][x];\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def noOfWays(self, m, n, x):\n\n        # Create a table to store results of subproblems. One extra\n        # row and column are used for simpilicity (number of dice\n        # is directly used as row index and sum is directly used\n        # as column index). The entries in 0th row and 0th column\n        # are never used.\n        table = [[0] * (x + 1)\n                 for i in range(n + 1)]  #Initialize all entries as 0\n\n        for j in range(1, min(m + 1, x + 1)):  #Table entries for only one dice\n            table[1][j] = 1\n\n        # Fill rest of the entries in table using recursive relation\n        # i: number of dice, j: sum\n        for i in range(2, n + 1):\n            for j in range(1, x + 1):\n                for k in range(1, min(m + 1, j)):\n                    table[i][j] += table[i - 1][j - k]\n\n        #print(dt)\n        # Uncomment above line to see content of table\n\n        return table[-1][-1]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    maxGold(m, n, x) {\n        // code here\n        let table = Array.from({length : n + 1}, () => Array(x + 1).fill(0));\n\n        // Table entries for only one die\n        for (let j = 1; j <= m && j <= x; j++) {\n            table[1][j] = 1;\n        }\n\n        // Fill rest of the entries in table using recursive relation\n        // i: number of dice, j: sum\n        for (let i = 2; i <= n; i++) {\n            for (let j = 1; j <= x; j++) {\n                for (let k = 1; k <= m && k < j; k++) {\n                    table[i][j] += table[i - 1][j - k];\n                }\n            }\n        }\n\n        return table[n][x];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}