{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703670,
            "title": "Difference between highest and lowest occurrence",
            "titleSlug": "difference-between-highest-and-lowest-occurrence4613",
            "content": "<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\">Given an array, the task is to find the difference between the highest occurrence and lowest occurrence of any number in an array.<br /><strong>Note: </strong>If only one type of element is present in the array return 0</span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Examples:</strong></span></p>\n<pre><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input: </strong></span><span style=\"font-family: arial,helvetica,sans-serif;\">arr[] = [1, 2, 2]\n<strong>Output: </strong>1\n<strong>Explanation:  </strong>Lowest occurring element (1) occurs once. Highest occurring element (2) occurs 2 times</span></span></pre>\n<pre><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input: </strong></span><span style=\"font-family: arial,helvetica,sans-serif;\">arr[] = [7, 8, 4, 5, 4, 1, 1, 7, 7, 2, 5]\n<strong>Output: </strong>2\n<strong>Explanation : </strong>Lowest occurring element (2) occurs once. Highest occurring element (7) occurs 3 times</span></span></pre>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Constraints:</strong><br />1&lt;= arr.size() &lt;=10<sup>6</sup><br />1&lt;= arr[i] &lt;=10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the difference between the highest and lowest occurrence counts of any number within the array. If the array contains only one distinct element, return 0.",
                "constraints": [
                    "1 <= array size <= 10^6",
                    "1 <= array element <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 2]",
                        "output": "1",
                        "explanation": "The element 1 occurs once (lowest occurrence), and the element 2 occurs twice (highest occurrence). The difference is 2 - 1 = 1."
                    },
                    {
                        "input": "[7, 8, 4, 5, 4, 1, 1, 7, 7, 2, 5]",
                        "output": "2",
                        "explanation": "The element 2 occurs once (lowest occurrence), and the element 7 occurs three times (highest occurrence). The difference is 3 - 1 = 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >An <strong>efficient solution</strong> is to use hashing. We count all elements' frequencies and traverse the hash table to find the maximum and minimum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the difference between the maximum and minimum frequency of\n    // elements.\n    int findDiff(vector<int>& arr) {\n        // Creating an unordered map to store frequency of elements.\n        unordered_map<int, int> hm;\n\n        // Looping through the array and incrementing count of each element.\n        for (int num : arr)\n            hm[num]++;\n\n        // Initializing max_count as 0 and min_count as the size of the array.\n        int max_count = 0, min_count = arr.size();\n\n        // Looping through the map to find maximum and minimum frequency.\n        for (const auto& x : hm) {\n            max_count = max(max_count, x.second);\n            min_count = min(min_count, x.second);\n        }\n\n        // Calculating the difference between maximum and minimum frequency.\n        return (max_count - min_count);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to find the difference between the maximum and minimum frequency of\n    // elements.\n    public int findDiff(int[] arr) {\n        // Creating a HashMap to store frequency of elements.\n        HashMap<Integer, Integer> hm = new HashMap<>();\n\n        // Looping through the array and incrementing count of each element.\n        for (int num : arr) {\n            hm.put(num, hm.getOrDefault(num, 0) + 1);\n        }\n\n        // Initializing max_count as 0 and min_count as the size of the array.\n        int max_count = 0, min_count = arr.length;\n\n        // Looping through the map to find maximum and minimum frequency.\n        for (int count : hm.values()) {\n            max_count = Math.max(max_count, count);\n            min_count = Math.min(min_count, count);\n        }\n\n        // Calculating the difference between maximum and minimum frequency.\n        return (max_count - min_count);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def findDiff(self, arr):\n        from collections import Counter\n\n        # Count the frequency of each element using Counter\n        freq = Counter(arr)\n\n        # Extract the frequencies and compute max and min frequency\n        counts = list(freq.values())\n        max_count = max(counts)\n        min_count = min(counts)\n\n        # Return the difference between maximum and minimum frequency\n        return max_count - min_count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findDiff(arr) {\n        let freq = new Map(); // Create a map to store the frequency of each number in\n                              // the array.\n\n        for (let num of arr) {\n            // Update the frequency of each number in the map.\n            freq.set(num, freq.has(num) ? freq.get(num) + 1 : 1);\n        }\n\n        let counts = Array.from(freq.values()); // Get an array of frequency counts.\n        let max_count = Math.max(...counts);    // Find the maximum frequency count.\n        let min_count = Math.min(...counts);    // Find the minimum frequency count.\n\n        return max_count - min_count; // Return the difference between the maximum and\n                                      // minimum frequency counts.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}