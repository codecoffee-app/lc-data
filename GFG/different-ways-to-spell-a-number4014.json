{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704159,
            "title": "Spell a Number",
            "titleSlug": "different-ways-to-spell-a-number4014",
            "content": "<p><span style=\"font-size:18px\">Given a&nbsp; number <strong>N </strong>such that it&nbsp;may contain many&nbsp;continuous digits. Find the&nbsp;number of ways to spell the number.<br />\r\nFor example, consider 8884441100, one can spell it simply as triple eight triple four double two and double zero. One can also spell as double eight, eight, four, double four, two, two, double zero.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>N</strong> <strong>=</strong> 100\r\n<strong>Output:</strong>\r\n2\r\n<strong>Explanation:</strong>\r\nThe number 100 has only 2 possibilities, \r\n1) one zero zero \r\n2) one double zero.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>N</strong> <strong>=</strong> </span><span style=\"font-size:20px\">11112</span><span style=\"font-size:18px\">\r\n<strong>Output:</strong>\r\n8\r\n<strong>Explanation:</strong>\r\n</span><span style=\"font-size:18px\">1 1 1 1 2, 11 1 1 2, 1 1 11 2, 1 11 1 2,\r\n11 11 2, 1 111 2, 111 1 2, 1111 2</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 3:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>N</strong> <strong>=</strong> 12345\r\n<strong>Output:</strong>\r\n1\r\n<strong>Explanation:</strong>\r\nThe number 12345 has only 1 possibility, \r\none two three four five</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>differentWaysToSpell()</strong> which takes a <strong>String N </strong>as input and returns the number of possible ways.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|N|)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= |N| &lt;= 10<sup>50</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">This is a simple problem of permutation and combination. If we take example test case given in the question, 11112. The answer depends on the number of possible combinations of 1111. The number of combinations of &ldquo;1111&rdquo; is 2^3 = 8.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    long long differentWaysToSpell(string N) {\r\n        \r\n        int n = N.length();\r\n    \r\n        // final count of total possible spells\r\n        long long result = 1;\r\n    \r\n        // iterate through complete number\r\n        for (int i=0; i<n; i++)\r\n        {\r\n           // count contiguous frequency of particular\r\n           // digit N[i]\r\n           int count = 1;\r\n           while (i < n-1 && N[i+1] == N[i])\r\n           {\r\n               count++;\r\n               i++;\r\n           }\r\n    \r\n           // Compute 2^(count-1) and multiply with result\r\n           result = result * pow(2, count-1);\r\n        }\r\n        return result;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static long differentWaysToSpell(String N) {\r\n        \r\n        int n = N.length();\r\n    \r\n        // final count of total possible spells\r\n        long result = 1L;\r\n    \r\n        // iterate through complete number\r\n        for (int i=0; i<n; i++)\r\n        {\r\n           // count contiguous frequency of particular\r\n           // digit N[i]\r\n           int count = 1;\r\n           while (i < n-1 && N.charAt(i+1) == N.charAt(i))\r\n           {\r\n               count++;\r\n               i++;\r\n           }\r\n    \r\n           // Compute 2^(count-1) and multiply with result\r\n           result *= (long)Math.pow(2, count-1);\r\n        }\r\n        return result;\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public long differentWaysToSpell(string N)\n    {\n        int n = N.Length;\n\n        // final count of total possible spells\n        long result = 1;\n\n        // iterate through complete number\n        for (int i = 0; i < n; i++)\n        {\n            // count contiguous frequency of particular\n            // digit N[i]\n            int count = 1;\n            while (i < n - 1 && N[i + 1] == N[i])\n            {\n                count++;\n                i++;\n            }\n\n            // Compute 2^(count-1) and multiply with result\n            result = result * (long)Math.Pow(2, count - 1);\n        }\n        return result;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}