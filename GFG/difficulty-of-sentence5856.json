{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703067,
            "title": "Difficulty of sentence",
            "titleSlug": "difficulty-of-sentence5856",
            "content": "<p><span style=\"font-size:18px\">Given a sentence as a string <strong>S</strong>. Calculate difficulty of a given sentence. </span></p>\n\n<p><span style=\"font-size:18px\">Difficulty of sentence is defined as <strong>5*(number of hard words) + 3*(number of easy words)</strong>. A word in the given string is considered hard if it has 4 consecutive consonants or number of consonants are more than number of vowels. Else the word is easy.<br />\n<strong>Note</strong>: uppercase and lowercase characters are same.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:\nS = &quot;Difficulty of sentence&quot;\n<strong>Output</strong>:\n13\n<strong>Explanation</strong>:\n2 hard words + 1 easy word</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:\nS = &quot;I am good&quot;\n<strong>Output</strong>:\n9\n<strong>Explanation</strong>:\n3 easy words</span></pre>\n\n<div><span style=\"font-size:18px\"><strong>Your task:</strong></span></div>\n\n<div><span style=\"font-size:18px\">You don&#39;t have to read input or print anything. Your task is to complete the functioin <strong>calcDiff() </strong>which takes the string <strong>S</strong> as input and returns the difficulty of the sentence.</span></div>\n\n<div>&nbsp;</div>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong> : O(len(s)<br />\n<strong>Expected Auxilliary Space</strong> : O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints</strong>:<br />\n1&lt;= length( S ) &lt;= 105</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sentence S, calculate its difficulty. The difficulty is calculated as 5 * (number of hard words) + 3 * (number of easy words). A word is considered 'hard' if it has 4 consecutive consonants or if the number of consonants is greater than the number of vowels. Otherwise, the word is considered 'easy'. Note that uppercase and lowercase characters are treated the same.",
                "constraints": [
                    "1 <= length(S) <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "Difficulty of sentence",
                        "output": "13",
                        "explanation": "The sentence contains 2 hard words and 1 easy word. Difficulty = (5 * 2) + (3 * 1) = 10 + 3 = 13."
                    },
                    {
                        "input": "I am good",
                        "output": "9",
                        "explanation": "The sentence contains 3 easy words. Difficulty = (3 * 3) = 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Maintain seperate variables for consonants and vowels.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to check if given character is a vowel\nbool isVowel(char ch)\n{\n    return (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u');\n}\n\n// Function to calculate the difference\nint calcDiff(string str)\n{\n    int count_vowels = 0, count_conso = 0;\n    int hard_words = 0, easy_words = 0;\n    int consec_conso = 0;\n\n    // Loop through each character in the string\n    for (int i = 0; i < str.length(); i++)\n    {\n        // Check if the character is a vowel\n        if (str[i] != ' ' && isVowel(tolower(str[i])))\n        {\n            count_vowels++; // increment vowel count\n            consec_conso = 0; // reset consecutive consonant count\n        }\n        else if (str[i] != ' ')\n        {\n            count_conso++; // increment consonant count\n            consec_conso++; // increment consecutive consonant count\n        }\n\n        // Check if there are 4 consecutive consonants\n        if (consec_conso == 4)\n        {\n            hard_words++; // increment hard word count\n\n            // Continue traversing until a space is encountered\n            while (i < str.length() && str[i] != ' ')\n                i++;\n\n            count_conso = 0; // reset consonant count\n            count_vowels = 0; // reset vowel count\n            consec_conso = 0; // reset consecutive consonant count\n        }\n        // Check if word is complete\n        else if (i < str.length() && (str[i] == ' ' || i == str.length() - 1))\n        {\n            // Check if it is a hard word or easy word based on consonant and vowel counts\n            count_conso > count_vowels ? hard_words++ : easy_words++;\n\n            count_conso = 0; // reset consonant count\n            count_vowels = 0; // reset vowel count\n            consec_conso = 0; // reset consecutive consonant count\n        }\n    }\n\n    // Return the calculated difference\n    return 5 * hard_words + 3 * easy_words;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n     // Function to check if given character is a vowel\n    bool isVowel(char ch)\n    {\n        return (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u');\n    }\n    \n    // Complete this function\n    // Function to calculate the difference\n    public int calcDiff(string str)\n    {\n        int count_vowels = 0, count_conso = 0;\n        int hard_words = 0, easy_words = 0;\n        int consec_conso = 0;\n\n        // Loop through each character in the string\n        for (int i = 0; i < str.Length; i++)\n        {\n            // Check if the character is a vowel\n            if (str[i] != ' ' && isVowel(char.ToLower(str[i])))\n            {\n                count_vowels++; // increment vowel count\n                consec_conso = 0; // reset consecutive consonant count\n            }\n            else if (str[i] != ' ')\n            {\n                count_conso++; // increment consonant count\n                consec_conso++; // increment consecutive consonant count\n            }\n\n            // Check if there are 4 consecutive consonants\n            if (consec_conso == 4)\n            {\n                hard_words++; // increment hard word count\n\n                // Continue traversing until a space is encountered\n                while (i < str.Length && str[i] != ' ')\n                    i++;\n\n                count_conso = 0; // reset consonant count\n                count_vowels = 0; // reset vowel count\n                consec_conso = 0; // reset consecutive consonant count\n            }\n            // Check if word is complete\n            else if (i < str.Length && (str[i] == ' ' || i == str.Length - 1))\n            {\n                // Check if it is a hard word or easy word based on consonant and vowel counts\n                if(count_conso > count_vowels)\n                    hard_words++;\n                else\n                    easy_words++;\n\n                count_conso = 0; // reset consonant count\n                count_vowels = 0; // reset vowel count\n                consec_conso = 0; // reset consecutive consonant count\n            }\n        }\n\n        // Return the calculated difference\n        return 5 * hard_words + 3 * easy_words;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}