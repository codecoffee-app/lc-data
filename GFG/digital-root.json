{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701390,
            "title": "Digital Root",
            "titleSlug": "digital-root",
            "content": "<p><span style=\"font-size:18px\">You are given a number <strong>n</strong>. You need to find the<strong> digital root </strong>of n.&nbsp;DigitalRoot of a number is the recursive sum of its digits until we get a single digit number.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>n = 1\r\n<strong>Output:  </strong>1<strong>\r\n</strong><strong>Explanation: </strong>Digital root of 1 is 1</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 99999\r\n<strong>Output: </strong>9\r\n<strong>Explanation: </strong>Sum of digits of 99999 is 45\r\nwhich is not a single digit number, hence\r\nsum of digit of 45 is 9 which is a single\r\ndigit number.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function</span> <span style=\"font-size:18px\"> <strong>digitalRoot </strong>that takes<strong> n</strong> as <strong>parameter </strong>and <strong>returns </strong>the <strong>digital root</strong> of n.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(Num of Digits).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(Num of Digits).</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Constraints: </span></strong><br />\r\n<span style=\"font-size:18px\">1 &lt;= n &lt;= 10<sup>7</sup></span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number 'n', find its digital root. The digital root of a number is the recursive sum of its digits until a single-digit number is obtained.",
                "constraints": [
                    "1 <= n <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "The digital root of 1 is 1."
                    },
                    {
                        "input": "99999",
                        "output": "9",
                        "explanation": "The sum of the digits of 99999 is 45.  The sum of the digits of 45 is 9, which is a single-digit number."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\r\n\r\n// function to calculate digit sum of a number\r\nint sumDigits(int n)\r\n{\r\n    // returning n if n / 10 is 0\r\n    if(n / 10 == 0)\r\n        return n;\r\n    // else adding digit sum\r\n    else\r\n        return n % 10 + sumDigits(n/10);\r\n}\r\n    \r\n    \r\n// function to calculate the single digit answer\r\nint digitalRoot(int n)\r\n{\r\n    // if n is less than n then \r\n    // returning the n\r\n    if(n / 10 == 0)\r\n        return n;\r\n    // else calling sumDigits function\r\n    else\r\n        return digitalRoot(sumDigits(n));\r\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n\r\n\r\nclass Solution{\r\n  public:\r\n    // function to calculate digit sum of a number\r\n    int sumDigits(int n)\r\n    {\r\n        // returning n if n / 10 is 0\r\n        if(n / 10 == 0)\r\n            return n;\r\n        // else adding digit sum\r\n        else\r\n            return n % 10 + sumDigits(n/10);\r\n    }\r\n    \r\n    \r\n    // function to calculate the single digit answer\r\n    int digitalRoot(int n)\r\n    {\r\n        // if n is less than n then \r\n        // returning the n\r\n        if(n / 10 == 0)\r\n            return n;\r\n        // else calling sumDigits function\r\n        else\r\n            return digitalRoot(sumDigits(n));\r\n        \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    // method to calculate digit sum of a number\r\n    static int sumDigits(int n)\r\n    {\r\n        // returning n if n / 10 is 0\r\n        if(n/10==0)\r\n            return n;\r\n         //else adding digit sum\r\n        else\r\n            return n%10+sumDigits(n/10);\r\n    }\r\n    \r\n    // method to calculate the single digit answer\r\n    public static int digitalRoot(int n)\r\n    {\r\n        // if n is less than n then returning the n\r\n        if(n/10==0)\r\n            return n;\r\n         // else calling sumDigits function \r\n        else\r\n            return digitalRoot(sumDigits(n));\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def sumOfDigits(self, n):\r\n        '''\r\n        :param n: given number\r\n        :return: sum of digits of n.\r\n        '''\r\n        # returning n if n / 10 is 0\r\n        if n<10: \r\n            return n\r\n    \r\n        # else add least significant digit and recur for\r\n        return (n%10) + (self.sumOfDigits(n//10))\r\n    \r\n    def digitalRoot(self, n):\r\n        '''\r\n        # one line solution :  return (n%9) if n%9 else 9\r\n        :param n: given number \r\n        :return: digital root as defined\r\n        '''\r\n        # get sum of digits of current value\r\n        sum_of_digits = self.sumOfDigits(n) \r\n        # if we reached single digit, return this value\r\n        if sum_of_digits <10: \r\n            return sum_of_digits\r\n        \r\n        # else recur for this value\r\n        return self.digitalRoot(sum_of_digits)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {number} n\r\n * @returns {number}\r\n*/\r\nclass Solution {\r\n    \r\n    sumDigits(n)\r\n    {\r\n        // returning n if n / 10 is 0\r\n        if(Math.floor(n / 10) === 0)\r\n            return n;\r\n        // else adding digit sum\r\n        else\r\n            return (n % 10) + this.sumDigits(Math.floor(n/10));\r\n    }\r\n  \r\n    digitalRoot(n)\r\n    {\r\n        // if n is less than n then returning the n\r\n        if(Math.floor(n / 10) === 0)\r\n            return n;\r\n        // else calling sumDigits function\r\n        else\r\n            return this.digitalRoot(this.sumDigits(n));\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    // function to calculate digit sum of a number\n    public int sumDigits(int n)\n    {\n        // returning n if n / 10 is 0\n        if(n / 10 == 0)\n            return n;\n        // else adding digit sum\n        else\n            return n % 10 + sumDigits(n/10);\n    }\n    \n    \n    // function to calculate the single digit answer\n    public int digitalRoot(int n)\n    {\n        // if n is less than n then \n        // returning the n\n        if(n / 10 == 0)\n            return n;\n        // else calling sumDigits function\n        else\n            return digitalRoot(sumDigits(n));\n        \n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}