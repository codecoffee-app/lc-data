{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704172,
            "title": "Disarium Number",
            "titleSlug": "disarium-number1045",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>N</strong>, find if it is Disarium or not. A number is called Disarium if sum of its digits powered with their respective positions is equal to the number itself. Output 1 if it&#39;s Disarium, and 0 if not.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>89</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">1</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:20px\">8^1+9^2 = 89 thus output is 1.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>81</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">0</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:20px\">8^1+1^2 = 9 thus output is 0.</span> </pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>isDisarium()</strong> which takes an Integer N as input and returns the answer.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log(N))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">0 &lt;= N &lt;= 10<sup>8</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N, determine if it is a Disarium number. A Disarium number is one where the sum of its digits raised to the power of their respective positions equals the original number.",
                "constraints": [
                    "0 <= N <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "89",
                        "output": "1",
                        "explanation": "89 is a Disarium number because 8^1 + 9^2 = 8 + 81 = 89."
                    },
                    {
                        "input": "81",
                        "output": "0",
                        "explanation": "81 is not a Disarium number because 8^1 + 1^2 = 8 + 1 = 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The idea is to fist count digits in given numbers. Once we have count, we traverse all digits from right most (using % operator), raise its power to digit count and decrement the digit count. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // helper method to get count of digits of the number\n    int cnt_digits(int n)\n    {\n        int c = 0;\n        while(n!=0)\n        {\n            n/=10;\n            c++;\n        }\n        return c;\n    }\n    \n    bool check(int n)\n    {\n        int c = cnt_digits(n);\n        int dup = n;          // Making a duplicate value of n to later compare the sum with\n        int sum = 0;\n        while(n!=0)\n        {\n            int r = n%10;\n            sum += pow(r,c);      // Adding the sum to the power of the digit to the place\n            n/=10;\n            c--;\n        }\n        \n        if(sum == dup)       \n            return true;          // If sum and n are equal then it's Disarium\n        else\n            return false;\n    }\n    \n    int isDisarium(int N) {\n        if(check(N))\n            return 1;\n        else\n            return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    \n    // helper method to get count of digits of the number\n    static int cnt_digits(int n)\n    {\n        int c = 0;\n        while(n!=0)\n        {\n            n/=10;\n            c++;\n        }\n        return c;\n    }\n    \n    static boolean check(int n)\n    {\n        int c = cnt_digits(n);\n        int dup = n;      // Making a duplicate value of n to later compare the sum with\n        int sum = 0;\n        while(n!=0)\n        {\n            int r = n%10;\n            sum += Math.pow(r,c);   // Adding the sum to the power of the digit to the place\n            n/=10;\n            c--;\n        }\n        \n        if(sum == dup)      // If sum and n are equal then it's Disarium\n            return true;\n        else\n            return false;\n    }\n    \n    static int isDisarium(int N) {\n        if(check(N))\n            return 1;\n        else\n            return 0;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n\n/**\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution{\n    isDisarium(n){\n        // helper method to get count of digits of the number\n        let cnt_digits = (n) => {\n            let c = 0;\n            while(n!=0)\n            {\n                n=Math.floor(n/10);\n                c++;\n            }\n            return c;\n        }\n        \n        let check = (n) => {\n            let c = cnt_digits(n);\n            let dup = n;          // Making a duplicate value of n to later compare the sum with\n            let sum = 0;\n            while(n!=0)\n            {\n                let r = n%10;\n                sum += Math.pow(r,c);      // Adding the sum to the power of the digit to the place\n                n=Math.floor(n/10);\n                c--;\n            }\n            \n            if(sum == dup)       \n                return true;          // If sum and n are equal then it's Disarium\n            else\n                return false;\n        }\n        \n        if(check(n))\n            return 1;\n        else\n            return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}