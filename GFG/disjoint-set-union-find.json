{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700539,
            "title": "Disjoint set (Union-Find)",
            "titleSlug": "disjoint-set-union-find",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>par[]</strong>&nbsp;that stores all number from <strong>1</strong> to <strong>n</strong> (both inclusive and sorted) and <strong>k</strong> queries.</span></p>\n<p><span style=\"font-size: 18px;\">The task is to do the following operations on array elements :</span></p>\n<p><span style=\"font-size: 18px;\">1.&nbsp;<strong>UNION</strong> x z : Perform union of <strong>x</strong> and <strong>z</strong> i.e. parent of <strong>z</strong> will become the parent of <strong>x</strong>.<br />2.&nbsp;<strong>FIND</strong> x: Find the ultimate parent of <strong>x</strong> and print it.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: Initially all are the parent of themselves.T</span><span style=\"color: #001d35; font-family: 'Google Sans', Roboto, 'Helvetica Neue', Arial, sans-serif; font-size: 18px; background-color: #ffffff;\">he ultimate parent is the topmost node such that par[node]=node.</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5, k = 4, queries[] = {{find 4}, {find 1}, {unionSet 3 1}, {find 3}}\n<strong>Output: </strong>4 1 1\n<strong>Explanation:</strong>\n1. The parent of 4 is 4. Hence the output is 4.\n2. The parent of 1 is 1. Hence the output is 1.\n3. After performing unionSet 3 1, parent of 3 becomes 1, since, parent of 1 is currently 1 itself.\n4. The parent of 3 is now 1. Hence, the output is 1.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n,k &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `par[]` of size `n` representing numbers from 1 to `n` (sorted), and `k` queries. Initially, each element is its own parent (i.e., `par[i] = i`). Process the following queries:\n\n1. `UNION x z`: Make the parent of `z` the parent of `x`.  Effectively, merge the set containing `x` into the set containing `z`.\n2. `FIND x`: Find and print the ultimate parent (root) of `x`. The ultimate parent is the topmost node where `par[node] = node`.",
                "constraints": [
                    "1 <= n, k <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 5, k = 4, queries[] = {{find 4}, {find 1}, {unionSet 3 1}, {find 3}}",
                        "output": "4 1 1",
                        "explanation": "Initially, par = [1, 2, 3, 4, 5].\n- FIND 4:  The parent of 4 is 4, so the output is 4.\n- FIND 1:  The parent of 1 is 1, so the output is 1.\n- UNION 3 1:  The parent of 3 becomes the parent of 1, so par[3] = 1.  par becomes [1, 2, 1, 4, 5].\n- FIND 3:  The parent of 3 is now 1, so the output is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The naive O(N) approach is simple. Can you solve it in O(log N)?</span></p>\n\n<p><span style=\"font-size:18px\">Try union by rank.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "union-find",
                "slug": "union-find"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "int find(int par[], int x) {\n    // finding the root of the element using recursion\n    return par[par[x]] == par[x] ? par[x] : find(par, par[x]);\n}\n\nvoid unionSet(int par[], int x, int z) {\n    // joining two sets by updating the root element\n    par[find(par, x)] = find(par, z);\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class GfG {\n    // find method recursively finds the root parent of x in the array par\n    int find(int par[], int x) {\n        // if par[x] is the root parent of x, return par[x]\n        // otherwise, recursively call find on par[par[x]]\n        return par[par[x]] == par[x] ? par[x] : find(par, par[x]);\n    }\n\n    // unionSet method connects the set containing x with the set containing z\n    void unionSet(int par[], int x, int z) {\n        // find the root parent of x and z, and set their parent to be the same in the\n        // array par\n        par[find(par, x)] = find(par, z);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def find(par, x):\n    # Function to find the representative of the set containing element x\n    if par[par[x - 1] -\n           1] == par[x -\n                     1]:  # If the current element is its own representative\n        return par[x - 1]  # Return the representative\n    else:\n        return find(par, par[x - 1])  # Recursively find the representative\n\n\ndef unionSet(par, x, z):\n    # Function to perform union of sets containing elements x and z\n    par[find(par, x) - 1] = find(\n        par,\n        z)  # Set the representative of set x as the representative of set z\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n\n    /*Complete the functions below*/\n\n    find(par, x) { return par[par[x]] == par[x] ? par[x] : this.find(par, par[x]); }\n\n    unionSet(par, x, z) { par[this.find(par, x)] = this.find(par, z); }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}