{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 871249,
            "title": "Doubly Linked List Traversal",
            "titleSlug": "display-doubly-linked-list--154650",
            "content": "<p><span >Given a doubly linked list of n elements. The task is to&nbsp;return the doubly linked list as an array.</span></p>\n<p><span >Note: The driver code will print the list forward and backward.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList: 1&lt;-&gt;2&lt;-&gt;3&lt;-&gt;4&lt;-&gt;5\n<strong>Output:\n</strong>[1, 2, 3, 4, 5]\n[5, 4, 3, 2, 1]<br /><strong>Explanation: </strong>After traversing forward the linked list will look like [1, 2, 3, 4, 5] and from backward will [5, 4, 3, 2, 1].<br /></span></pre>\n<pre><span ><strong>Input: </strong>LinkedList: 34&lt;-&gt;22\n<strong>Output:\n</strong>[34, 22]\n[22, 34]<br /><strong>Explanation: </strong>After traversing forward the linked list will look like [34, 22] and from backward will [22, 34].</span></pre>\n<p><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Expected Time Complexity: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">O(n)<br /></span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Expected Auxiliary Space:&nbsp;</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">O(n)</span></span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>3</sup><br />0 &lt;= value of nodes &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Traverse the Linked List and store it in an array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nvoid displayList(struct Node* node)\n{\n    struct Node* last;\n    while (node != NULL) {\n        printf(\"%d \", node->data);\n        last = node;\n        node = node->next;\n    }\n \n    printf(\"\\n\");\n    while (last != NULL) {\n        printf(\"%d \", last->data);\n        last = last->prev;\n    }\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nvector<int> displayList(Node *head)\n{\n    //Head to Tail\n    vector<int> list;\n    while(head->next)\n    {\n        \n        list.push_back(head->data);\n        head=head->next;\n    }\n    list.push_back(head->data);\n    return list;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\n\npublic static ArrayList<Integer> displayList(Node head)\n{\n    //Head to Tail\n    ArrayList<Integer> list = new ArrayList<Integer>();\n    while(head.next != null)\n    {\n        list.add(head.data);\n        head = head.next;\n    }\n    list.add(head.data);\n    return list;\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def displayList(head):\n\n    l = []\n    while head:\n        l.append(head.data)\n        pvs=head\n        head=head.next\n    return l",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n  displayList(head) {\n    let ret = [];\n    while (head !== null) {\n      ret.push(head.data);\n      head = head.next;\n    }\n    return ret;\n  }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}