{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703206,
            "title": "Display longest name",
            "titleSlug": "display-longest-name0853",
            "content": "<p><span style=\"font-size: 18px;\">Given an array arr[] containing strings of names. Your task is to return the longest string. If there are multiple names of the longest size, return the <strong>first</strong> occurring name.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [\"Geek\", \"Geeks\", \"Geeksfor\", \"GeeksforGeek\", \"GeeksforGeeks\"]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>\"GeeksforGeeks\"<br /><strong>Explanation:</strong> name \"<strong>GeeksforGeeks</strong>\" has maximum length among all names. <br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [\"Apple\", \"Mango\", \"Orange\", \"Banana\"]<br /><strong>Output: </strong>\"Orange\"</span><br /><span ><strong>Explanation:</strong> names \"Orange\" and \"Banana\" both have maximum length among all names but Orange comes first so answer will be \"<strong>Orange</strong>\". </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= arr.size()&lt;= 1000</span><br /><span style=\"font-size: 18px;\">1 &lt;= arr[i] &lt;= 1000<br />arr[i] has only lowercase and uppercase letters</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of strings representing names, find and return the longest string in the array. If multiple strings have the same maximum length, return the string that appears first in the array.",
                "constraints": [
                    "The array size is between 1 and 1000, inclusive.",
                    "Each string in the array has a length between 1 and 1000, inclusive.",
                    "Strings contain only uppercase and lowercase letters."
                ],
                "testcases": [
                    {
                        "input": "[\"Geek\", \"Geeks\", \"Geeksfor\", \"GeeksforGeek\", \"GeeksforGeeks\"]",
                        "output": "\"GeeksforGeeks\"",
                        "explanation": "The string \"GeeksforGeeks\" is the longest string in the array."
                    },
                    {
                        "input": "[\"Apple\", \"Mango\", \"Orange\", \"Banana\"]",
                        "output": "\"Orange\"",
                        "explanation": "Both \"Orange\" and \"Banana\" are the longest strings, but \"Orange\" appears earlier in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use a loop to compare the lengths of strings and track the index of the longest string.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to find the longest string in the given vector of strings.\nclass Solution {\n  public:\n    string longest(vector<string> &names) {\n        int n = names.size();\n        // Initializing index of the longest string as 0.\n        int m = 0;\n\n        // Looping through all strings to find the longest one.\n        for (int i = 1; i < n; i++) {\n            // Comparing lengths of strings and updating index of longest string.\n            if (names[i].size() > names[m].size())\n                m = i;\n        }\n\n        // Returning the longest string.\n        return names[m];\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public String longest(List<String> names) {\n        int n = names.size();\n        // Initializing index of the longest string as 0.\n        int m = 0;\n\n        // Looping through all strings to find the longest one.\n        for (int i = 1; i < n; i++) {\n            // Comparing lengths of strings and updating index of longest string.\n            if (names.get(i).length() > names.get(m).length()) m = i;\n        }\n\n        // Returning the longest string.\n        return names.get(m);\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def longest(self, names):\n        n = len(names)\n        # Initializing index of the longest string as 0.\n        m = 0\n\n        # Looping through all strings to find the longest one.\n        for i in range(1, n):\n            # Comparing lengths of strings and updating index of longest string.\n            if len(names[i]) > len(names[m]):\n                m = i\n\n        # Returning the longest string.\n        return names[m]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    longest(names) {\n        let n = names.length;\n        // Initializing index of the longest string as 0.\n        let m = 0;\n\n        // Looping through all strings to find the longest one.\n        for (let i = 1; i < n; i++) {\n            // Comparing lengths of strings and updating index of longest string.\n            if (names[i].length > names[m].length) m = i;\n        }\n\n        // Returning the longest string.\n        return names[m];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}