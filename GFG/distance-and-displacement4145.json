{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704813,
            "title": "Distance and Displacement",
            "titleSlug": "distance-and-displacement4145",
            "content": "<p><span style=\"font-size:18px\">You are given two arrays of length <strong>n</strong>. An array <strong>a</strong> consisting of integers and another array <strong>d</strong>&nbsp;consisting of directions &#39;N&#39;, &#39;S&#39;, &#39;E&#39;, and &#39;W&#39;&nbsp;denoting North, South, East, and West respectively.For every &#39;i&#39; you move a[i] distance in d[i]th direction. You have to give the ceil of total distance covered through all the movements and then back to the starting&nbsp; point. From the end of the journey you come to the starting point using the shortest distance.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 3\r\na = {1, 3, 3}\r\nd = {N, E, S}\r\n<strong>Output:</strong> 11\r\n<strong>Explaination:</strong> The total distance covered is \r\nceil(1 + 3 + 3 + 3.6056) = 11.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 4\r\na = {10, 10, 10, 10}\r\nd = {N, E, S, W}\r\n<strong>Output:</strong> 40\r\n<strong>Explaination:</strong> The total distance covered is \r\nceil(10 + 10 + 10 + 10 + 0) = 40.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>distance()</strong> which takes n, a, and d as input parameters and returns the ceil of total distance covered.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n &le; 1000<br />\r\n1 &le; a[i] &le; 1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given two arrays of length **n**: an integer array **a** and a character array **d** representing directions ('N', 'S', 'E', 'W' for North, South, East, and West, respectively).  For each index *i*, you move *a[i]* units in the *d[i]* direction. Your task is to calculate the total distance traveled, including the shortest path back to the starting point, and return the ceiling of this total distance.",
                "constraints": [
                    "1 <= n <= 1000",
                    "1 <= a[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 3\na = {1, 3, 3}\nd = {N, E, S}",
                        "output": "11",
                        "explanation": "The total distance covered is 1 + 3 + 3. The shortest distance to return to the start is sqrt((3-0)^2 + (1-3)^2) = sqrt(9 + 4) = sqrt(13) = 3.6056.  The ceil(1 + 3 + 3 + 3.6056) = 11."
                    },
                    {
                        "input": "n = 4\na = {10, 10, 10, 10}\nd = {N, E, S, W}",
                        "output": "40",
                        "explanation": "The total distance covered is 10 + 10 + 10 + 10. Because the net North-South and East-West movements cancel each other out, you return to the starting point. The shortest distance to the start is 0. Therefore ceil(10 + 10 + 10 + 10 + 0) = 40."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The shortest distance from point A&nbsp;to point B&nbsp;is the direct disance between A and B or can say the straight line length of AB.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the total distance\n    int distance(int n, int a[], char d[]){\n        int horizontal = 0, vertical = 0, dist = 0;\n        \n        // Iterating over the array of distances and directions\n        for(int i = 0;i < n;i++){\n            // If the direction is North, add the distance to the vertical distance\n            if(d[i] == 'N')\n                vertical += a[i];\n            \n            // If the direction is South, subtract the distance from the vertical distance\n            else if(d[i] == 'S')\n                vertical -= a[i];\n            \n            // If the direction is East, add the distance to the horizontal distance\n            else if(d[i] == 'E')\n                horizontal += a[i];\n            \n            // If the direction is West, subtract the distance from the horizontal distance\n            else\n                horizontal -= a[i];\n            \n            // Add the distance to the total distance\n            dist += a[i];\n        }\n        \n        // Calculating the square of the sum of vertical and horizontal distances\n        int x = (vertical*vertical + horizontal*horizontal);\n        \n        // Taking the square root of x and rounding it up if necessary\n        int y = sqrt(x);\n        if(y*y != x)\n            y++;\n        \n        // Adding the rounded-up square root to the total distance and returning it\n        return (dist + y);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}