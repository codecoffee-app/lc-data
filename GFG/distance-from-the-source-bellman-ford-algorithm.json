{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706218,
            "title": "Bellman-Ford",
            "titleSlug": "distance-from-the-source-bellman-ford-algorithm",
            "content": "<p><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\">Given a weighted and directed graph of <strong>v</strong> vertices and <strong>edges</strong>, Find the shortest distance of all the vertex's from the source vertex, <strong>src</strong> and </span><span style=\"font-family: arial, helvetica, sans-serif; font-size: 12pt;\">return a list of integers where the ith integer denotes the distance of the ith node from the source node. </span><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><span style=\"background-color: #ffffff;\"><span style=\"color: rgba(0, 0, 0, 0.87);\"><span style=\"color: #000000;\">If a vertices can't be reach from the <strong>s</strong> then mark the distance as 10^8.</span> <br /></span></span></span><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Note</strong>: If there exist a path to a negative weighted cycle from the source node then return {-1}.</span></p>\n<p><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Input: </strong>edges<span style=\"font-size: 12pt;\"> </span><span style=\"font-size: 12pt;\">= [[0,1,9]], src</span><span style=\"font-size: 12pt;\"> </span><span style=\"font-size: 12pt;\">= 0</span>\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/706218/Web/Other/c8d8b64c-f87e-4b44-ad81-5069e9698985_1685087173.png\" alt=\"\" />\n<strong>Output:</strong> [0, 9]\n<strong>Explanation</strong>: Shortest distance of all nodes from source is printed.\n</span></pre>\n<pre><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Input: </strong>edges<span style=\"font-size: 12pt;\"> = [[0,1,5], [1,0,3], [1,2,-1], [2,0,1]], src</span><span style=\"font-size: 12pt;\"> </span><span style=\"font-size: 12pt;\">= 2</span>\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/706218/Web/Other/46db67e8-b4da-46d6-a9ab-604249bea60a_1685087173.png\" alt=\"\" />\n<strong>Output: </strong>[1, 6, 0]\n<strong>Explanation</strong>: For nodes 2 to 0, we can follow the path: 2-0. This has a distance of 1. For nodes 2 to 1, we cam follow the path: 2-0-1, which has a distance of 1+5 = 6,\n</span></pre>\n<p><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Constraints:</strong><br />1 &le; V &le; 500<br />1 &le; E &le; V*(V-1)<br />-1000 &le; data of nodes, weight &le; 1000<br />0 &le; S &lt; V</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a weighted and directed graph with 'v' vertices and 'edges', find the shortest distance from a source vertex 'src' to all other vertices. Return a list where the i-th element represents the shortest distance from 'src' to the i-th vertex. If a vertex is unreachable from 'src', mark its distance as 10^8. If there is a negative weight cycle reachable from the source node return {-1}.",
                "constraints": [
                    "1 <= V <= 500",
                    "1 <= E <= V*(V-1)",
                    "-1000 <= data of nodes, weight <= 1000",
                    "0 <= S < V"
                ],
                "testcases": [
                    {
                        "input": "edges = [[0,1,9]], src = 0",
                        "output": "[0, 9]",
                        "explanation": "The shortest distance from node 0 to itself is 0, and the shortest distance from node 0 to node 1 is 9."
                    },
                    {
                        "input": "edges = [[0,1,5], [1,0,3], [1,2,-1], [2,0,1]], src = 2",
                        "output": "[1, 6, 0]",
                        "explanation": "The shortest distance from node 2 to node 0 is 1 (2 -> 0). The shortest distance from node 2 to node 1 is 6 (2 -> 0 -> 1). The shortest distance from node 2 to itself is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use Bellman-ford Algorithm to solve the Problem.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to perform Bellman-Ford algorithm to find the shortest distance from a\n    // source node to all other nodes in a weighted graph.\n    vector<int> bellmanFord(int N, vector<vector<int> >& edges, int src) {\n        int inf = 100000000;\n        vector<int> dist(N, inf); // Initialize distance array with infinity.\n\n        dist[src] = 0; // Set distance of source node to 0.\n\n        // Run the relaxation process N-1 times.\n        for (int i = 1; i <= N - 1; i++) {\n            for (size_t j = 0; j < edges.size(); j++) {\n                vector<int>& it = edges[j];\n                // If there is a shorter path from the source node to the current node,\n                // update the distance.\n                if (dist[it[0]] != inf && dist[it[0]] + it[2] < dist[it[1]]) {\n                    dist[it[1]] = dist[it[0]] + it[2];\n                }\n            }\n        }\n\n        // Check for negative weight cycles.\n        for (size_t j = 0; j < edges.size(); j++) {\n            vector<int>& it = edges[j];\n            if (dist[it[0]] != inf && dist[it[0]] + it[2] < dist[it[1]]) {\n                return vector<int>(1, -1); // Return -1 if a negative cycle is detected.\n            }\n        }\n\n        // Return the distance array.\n        return dist;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int[] bellmanFord(int V, int[][] edges, int S) {\n        // Initialize distance of all vertices as infinite.\n        int[] dis = new int[V];\n        int inf = 100000000;\n        for (int i = 0; i < V; i++) dis[i] = 100000000;\n\n        // initialize distance of source as 0\n        dis[S] = 0;\n\n        // Relax all edges |V| - 1 times. A simple\n        // shortest path from src to any other\n        // vertex can have at-most |V| - 1 edges\n        // int E=edges.length;\n        for (int i = 0; i < V - 1; i++) {\n            for (int j = 0; j < edges.length; j++) {\n                if (dis[edges[j][0]] != inf &&\n                    dis[edges[j][0]] + edges[j][2] < dis[edges[j][1]])\n                    dis[edges[j][1]] = dis[edges[j][0]] + edges[j][2];\n            }\n        }\n        for (int j = 0; j < edges.length; j++) {\n            if (dis[edges[j][0]] != inf &&\n                dis[edges[j][0]] + edges[j][2] < dis[edges[j][1]]) {\n                return new int[] {-1};\n            }\n        }\n        return dis;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    # Function to find the shortest path using the Bellman-Ford algorithm.\n    def bellmanFord(self, V, edges, S):\n        # Initialize distance of all vertices as infinite.\n        inf = 100000000\n        dist = [inf] * V\n\n        # Distance from source vertex to itself is 0.\n        dist[S] = 0\n\n        # Relax edges V-1 times.\n        for i in range(1, V):\n            for u, v, wt in edges:\n                # Update the distance if a shorter path is found.\n                if dist[u] != inf and dist[u] + wt < dist[v]:\n                    dist[v] = dist[u] + wt\n\n        # Check for negative weight cycles.\n        for u, v, wt in edges:\n            if dist[u] != inf and dist[u] + wt < dist[v]:\n                # If a negative weight cycle is found, return -1.\n                return [-1]\n\n        # Return distances from source vertex to all other vertices.\n        return dist\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    bellmanFord(V, edges, S) {\n        const inf = 100000000;\n        let dist = new Array(V).fill(inf);\n        dist[S] = 0;\n\n        for (let i = 1; i < V; i++) {\n            for (let [u, v, wt] of edges) {\n                if (dist[u] !== inf && dist[u] + wt < dist[v]) {\n                    dist[v] = dist[u] + wt;\n                }\n            }\n        }\n\n        for (let [u, v, wt] of edges) {\n            if (dist[u] !== inf && dist[u] + wt < dist[v]) {\n                return [ -1 ];\n            }\n        }\n\n        return dist;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}