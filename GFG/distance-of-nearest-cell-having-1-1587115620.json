{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701275,
            "title": "Distance of nearest cell having 1",
            "titleSlug": "distance-of-nearest-cell-having-1-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary grid of <strong>n*m</strong>. Find the distance of the nearest 1 in the grid&nbsp;for each cell.<br />The distance is calculated as&nbsp;<strong>|i<sub>1</sub>&nbsp; - i<sub>2</sub>| + |j<sub>1</sub>&nbsp;- j<sub>2</sub>|</strong>, where i<sub>1</sub>, j<sub>1</sub>&nbsp;are the row number and column number of the current cell, and i<sub>2</sub>, j<sub>2</sub>&nbsp;are the row number and column number of the nearest cell having value 1.</span>&nbsp;<span style=\"font-size: 18px;\">There should be atleast one 1 in the grid.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>grid = [[0,1,1,0], [1,1,0,0], [0,0,1,1]]\n<strong>Output: <br /></strong>[[1,0,0,1], [0,0,1,1], [1,1,0,0]]\n<strong>Explanation: <br /></strong>The grid is-\n0 1 1 0&nbsp;\n1 1 0 0&nbsp;\n0 0 1 1&nbsp;\n- 0's at (0,0), (0,3), (1,2), (1,3), (2,0) and (2,1) are at a distance of 1 from 1's at (0,1), (0,2), (0,2), (2,3), (1,0) and (1,1) respectively.\n<img style=\"height: 168px; width: 198px;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20221107154436/WhatsAppImage20221107at34408PM.jpeg\" alt=\"\" /></span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>grid = [[1,0,1], [1,1,0], [1,0,0]]\n<strong>Output: <br /></strong>[[0,1,0], [0,0,1], [0,1,2]]\n<strong>Explanation:</strong></span><span style=\"font-size: 18px;\">&nbsp;<br />The grid is-\n1 0 1\n1 1 0\n1 0 0\n- 0's at (0,1), (1,2), (2,1) and (2,2) are at a  distance of 1, 1, 1 and 2 from 1's at (0,0), (0,2), (2,0) and (1,1) respectively.\n<img style=\"height: 153px; width: 152px;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20221107155306/WhatsAppImage20221107at35249PM.jpeg\" alt=\"\" /></span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Yout Task:</strong><br />You don't need to read or print anything, Your task is to complete the function&nbsp;<strong>nearest()&nbsp;</strong>which takes the grid as an input parameter and returns a matrix of the same dimensions where the value at index (i, j) in the resultant matrix signifies the <strong>minimum distance</strong> of 1 in the matrix from grid[i][j].</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n, m &le; 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary grid of n*m, find the distance of the nearest 1 in the grid for each cell. The distance is calculated as |i1 - i2| + |j1 - j2|, where (i1, j1) is the coordinate of the current cell and (i2, j2) is the coordinate of the nearest cell containing the value 1.  It is guaranteed that the grid contains at least one 1.",
                "constraints": [
                    "1 <= n, m <= 500"
                ],
                "testcases": [
                    {
                        "input": "[[0,1,1,0], [1,1,0,0], [0,0,1,1]]",
                        "output": "[[1,0,0,1], [0,0,1,1], [1,1,0,0]]",
                        "explanation": "For the cell (0,0) containing 0, the nearest 1 is at (0,1), with a distance of |0-0| + |0-1| = 1.  For cell (0,1), the nearest 1 is itself so the distance is 0. For the cell (1,2) containing 0, the nearest 1 is at (0,2) with a distance of |1-0| + |2-2| = 1. The rest can be calculated similarly."
                    },
                    {
                        "input": "[[1,0,1], [1,1,0], [1,0,0]]",
                        "output": "[[0,1,0], [0,0,1], [0,1,2]]",
                        "explanation": "For the cell (0,1) containing 0, the nearest 1 is at (0,0), with a distance of |0-0| + |1-0| = 1. For cell (1,2), the nearest 1 is at (1,1) with distance |1-1| + |2-1| = 1.  For the cell (2,2) containing 0, the nearest 1 is at (1,1) with a distance of |2-1| + |2-1| = 2. The rest can be calculated similarly."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> dx = {1, -1, 0, 0};\n    vector<int> dy = {0, 0, 1, -1};\n\n    // Function to check whether the cell is within the matrix bounds.\n    bool isValid(int x, int y, int n, int m) {\n        return (x >= 0 and x < n and y >= 0 and y < m);\n    }\n\n    // Function to find distance of nearest 1 in the grid for each cell.\n    vector<vector<int>> nearest(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n\n        // queue to store the cell indexes which have grid value 1.\n        queue<pair<int, int>> q;\n\n        // using dp list which will store the output.\n        vector<vector<int>> dp(n, vector<int>(m, INT_MAX));\n\n        // traversing all the cells of the matrix.\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                // if grid value is 1, we update the dp value at same cell as 0\n                // and push the cell indexes into queue.\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 0;\n                    q.push({i, j});\n                }\n            }\n        }\n\n        while (!q.empty()) {\n            // storing the cell indexes at top of queue and popping them.\n            int x = q.front().first;\n            int y = q.front().second;\n            q.pop();\n\n            // iterating over the adjacent cells.\n            for (int i = 0; i < 4; i++) {\n                int n_x = x + dx[i];\n                int n_y = y + dy[i];\n                if (isValid(n_x, n_y, n, m) and dp[n_x][n_y] > dp[x][y] + 1) {\n                    // updating dp and pushing cell indexes in queue.\n                    dp[n_x][n_y] = dp[x][y] + 1;\n                    q.push({n_x, n_y});\n                }\n            }\n        }\n        // returning the dp list.\n        return dp;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end Complete function Template for JAVA\r\n\r\nclass Solution\r\n{\r\n    int[] dx = {1, -1, 0, 0};\r\n    int[] dy = {0, 0, 1, -1};\r\n    \r\n    //Function to check whether the cell is within the matrix bounds.\r\n    boolean isValid(int x, int y, int n, int m)\r\n    {\r\n\t\tif (x>=0 && x<n && y>=0 && y<m)\r\n\t\t    return true;\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t//Function to find distance of nearest 1 in the grid for each cell.\r\n    public int[][] nearest(int[][] grid)\r\n    {\r\n        int n = grid.length;\r\n        int m = grid[0].length;\r\n        \r\n        //using dp list which will store the output.\r\n        int[][] dp = new int[n][m];\r\n        \r\n        for(int i=0; i<n; i++)\r\n            for(int j=0; j<m; j++)\r\n                dp[i][j] = 10000000;\r\n        \r\n        //queue to store the cell indexes which have grid value 1.\r\n        Queue<ArrayList<Integer>> q = new LinkedList<>(); \r\n        \r\n        \r\n        //traversing all the cells of the matrix.\r\n        for(int i = 0; i < n; i++)\r\n        {\r\n\t\t\tfor(int j = 0; j < m; j++)\r\n\t\t\t{\r\n\t\t\t    //if grid value is 1, we update the dp value at same cell as 0 \r\n\t\t\t    //and push the cell indexes into queue.\r\n\t\t\t\tif(grid[i][j] == 1){\r\n\t\t\t\t\tdp[i][j] = 0;\r\n\t\t\t\t\tArrayList<Integer> temp = new ArrayList<>();\r\n\t\t\t\t\ttemp.add(i);\r\n\t\t\t\t\ttemp.add(j);\r\n\t\t\t\t\tq.add(temp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twhile(!q.isEmpty())\r\n\t\t{\r\n\t\t    //storing the cell indexes at top of queue and popping them.\r\n\t\t\tArrayList <Integer> curr = q.poll();\r\n\t\t\tint x = curr.get(0);\r\n\t\t\tint y = curr.get(1);\r\n\t\t\t\r\n\t\t\t//iterating over the adjacent cells.\r\n\t\t\tfor(int i = 0; i < 4; i++)\r\n\t\t\t{\r\n\t\t\t\tint n_x = x + dx[i];\r\n\t\t\t\tint n_y = y + dy[i];\r\n\t\t\t\t\r\n\t\t\t\tif(isValid(n_x, n_y, n, m) && dp[n_x][n_y] > dp[x][y] + 1)\r\n\t\t\t\t{\r\n\t\t\t\t    //updating dp and pushing cell indexes in queue.\r\n\t\t\t\t\tdp[n_x][n_y] = dp[x][y] + 1;\r\n\t\t\t\t\tArrayList<Integer> temp = new ArrayList<>();\r\n\t\t\t\t\ttemp.add(n_x);\r\n\t\t\t\t\ttemp.add(n_y);\r\n\t\t\t\t\tq.add(temp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//returning the dp list.\r\n\t\treturn dp;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import deque\n\n\nclass Solution:\n\n    #Function to check whether the cell is within the matrix bounds.\n    def isValid(self, x, y, n, m):\n        return (x >= 0 and x < n and y >= 0 and y < m)\n\n    #Function to find distance of nearest 1 in the grid for each cell.\n    def nearest(self, grid):\n\n        dx = [-1, 1, 0, 0]\n        dy = [0, 0, -1, 1]\n        n = len(grid)\n        m = len(grid[0])\n\n        #using dp list which will store the output.\n        dp = [[100000 for i in range(m)] for j in range(n)]\n\n        #queue to store the cell indexes which have grid value 1.\n        q = deque()\n\n        #traversing all the cells of the matrix.\n        for i in range(n):\n            for j in range(m):\n\n                #if grid value is 1, we update the dp value at same cell as 0\n                #and push the cell indexes into queue.\n                if (grid[i][j] == 1):\n                    dp[i][j] = 0\n                    q.append([i, j])\n\n        while (len(q)):\n\n            #storing the cell indexes at top of queue and popping them.\n            cur = q.popleft()\n            x = cur[0]\n            y = cur[1]\n\n            #iterating over the adjacent cells.\n            for i in range(4):\n                n_x = x + dx[i]\n                n_y = y + dy[i]\n                if (self.isValid(n_x, n_y, n, m)\n                        and dp[n_x][n_y] > dp[x][y] + 1):\n\n                    #updating dp and pushing cell indexes in queue.\n                    dp[n_x][n_y] = dp[x][y] + 1\n                    q.append([n_x, n_y])\n\n        #returning the dp list.\n        return dp\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public List<List<int>> nearest(List<List<int>> grid)\n    {\n        int n = grid.Count;\n        int m = grid[0].Count;\n\n        List<int> dx = new List<int> { 1, -1, 0, 0 };\n        List<int> dy = new List<int> { 0, 0, 1, -1 };\n\n        Queue<KeyValuePair<int, int>> q = new Queue<KeyValuePair<int, int>>();\n        List<List<int>> dp = new List<List<int>>(n);\n        for (int i = 0; i < n; i++)\n        {\n            dp.Add(new List<int>(m));\n            for (int j = 0; j < m; j++)\n            {\n                dp[i].Add(int.MaxValue);\n            }\n        }\n\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < m; j++)\n            {\n                if (grid[i][j] == 1)\n                {\n                    dp[i][j] = 0;\n                    q.Enqueue(new KeyValuePair<int, int>(i, j));\n                }\n            }\n        }\n\n        while (q.Count > 0)\n        {\n            KeyValuePair<int, int> cell = q.Dequeue();\n            int x = cell.Key;\n            int y = cell.Value;\n\n            for (int i = 0; i < 4; i++)\n            {\n                int n_x = x + dx[i];\n                int n_y = y + dy[i];\n                if (isValid(n_x, n_y, n, m) && dp[n_x][n_y] > dp[x][y] + 1)\n                {\n                    dp[n_x][n_y] = dp[x][y] + 1;\n                    q.Enqueue(new KeyValuePair<int, int>(n_x, n_y));\n                }\n            }\n        }\n\n        return dp;\n    }\n\n    public bool isValid(int x, int y, int n, int m)\n    {\n        return (x >= 0 && x < n && y >= 0 && y < m);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    constructor() {\n        this.dx = [ 1, -1, 0, 0 ];\n        this.dy = [ 0, 0, 1, -1 ];\n    }\n\n    // Function to check whether the cell is within the matrix bounds.\n    isValid(x, y, n, m) { return (x >= 0 && x < n && y >= 0 && y < m); }\n\n    // Function to find the distance of the nearest 1 in the grid for each cell.\n    nearest(grid) {\n        let n = grid.length;\n        let m = grid[0].length;\n\n        // We will use a deque (double-ended queue) to store the cell indexes that have\n        // grid value 1.\n        let q = [];\n\n        // dp array to store the output, initialized to a high value.\n        let dp = Array.from({length : n}, () => Array(m).fill(Number.MAX_SAFE_INTEGER));\n\n        // Traversing all the cells of the matrix.\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n                // If the grid value is 1, update the dp value at the same cell as 0\n                // and push the cell indexes into the deque.\n                if (grid[i][j] === 1) {\n                    dp[i][j] = 0;\n                    q.push([ i, j ]);\n                }\n            }\n        }\n\n        // BFS traversal from all 1's in the grid.\n        let front = 0; // Pointer to the front of the deque\n\n        while (front < q.length) {\n            let [x, y] = q[front++];\n\n            // Iterating over the adjacent cells.\n            for (let i = 0; i < 4; i++) {\n                let n_x = x + this.dx[i];\n                let n_y = y + this.dy[i];\n\n                // Check if the new position is valid and if updating the dp table\n                // improves the distance.\n                if (this.isValid(n_x, n_y, n, m) && dp[n_x][n_y] > dp[x][y] + 1) {\n                    dp[n_x][n_y] = dp[x][y] + 1;\n                    q.push([ n_x, n_y ]); // Add to the back of the deque\n                }\n            }\n        }\n\n        // Returning the dp array.\n        return dp;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}