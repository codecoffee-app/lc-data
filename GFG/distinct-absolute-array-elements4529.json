{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703367,
            "title": "Distinct absolute array elements",
            "titleSlug": "distinct-absolute-array-elements4529",
            "content": "<p><span style=\"font-size: 18px;\">Given a sorted array <strong>arr[]</strong>. Count the number of distinct absolute values present in the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-3, -2, 0, 3, 4, 5]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> There are 5 distinct absolute values i.e. 0, 2, 3, 4 and 5.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-1, -1, -1, -1, 0, 1, 1, 1, 1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are 2 distinct absolute values among the elements of this array, i.e. 0 and 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;=<strong> </strong>arr.size()<strong>&nbsp;</strong>&lt;= 10<sup>6</sup><br />-10<sup>8</sup>&nbsp;&lt;=<strong> </strong>arr[i]<strong> </strong>&lt;= 10<sup>8</sup></span><br /><span style=\"font-size: 18px;\">The array may contain duplicates</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr[]`, determine the number of unique absolute values present within the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-10^8 <= arr[i] <= 10^8",
                    "The array may contain duplicates"
                ],
                "testcases": [
                    {
                        "input": "[-3, -2, 0, 3, 4, 5]",
                        "output": "5",
                        "explanation": "The distinct absolute values are 0, 2, 3, 4, and 5. Therefore, the count is 5."
                    },
                    {
                        "input": "[-1, -1, -1, -1, 0, 1, 1, 1, 1]",
                        "output": "2",
                        "explanation": "The distinct absolute values are 0 and 1. Therefore, the count is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Extra memory in the form of a set can be used to solve in O(n) time. But can you further optimize the space complexity?</span></p>",
            "<p><span >Take advantage of the fact that the array is already Sorted. </span></p>\n<p><span >Initialize the count of distinct elements to the number of elements in the array. We start with two index variables from two corners of the array and check for a pair in the input array with a sum of 0. If a pair with 0 sum is found or duplicates are encountered, we decrease the count of distinct elements. Finally, we return the updated count.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution {\n  public:\n    int distinctCount(vector<int> &arr) {\n        int n = arr.size();\n        // initialize count as number of elements\n        int count = n;\n        int i = 0, j = n - 1, sum = 0;\n\n        while (i < j) {\n            // Remove duplicate elements from the\n            // left of the current window (i, j)\n            // and also decrease the count\n            while (i != j && arr[i] == arr[i + 1])\n                count--, i++;\n\n            // Remove duplicate elements from the\n            // right of the current window (i, j)\n            // and also decrease the count\n            while (i != j && arr[j] == arr[j - 1])\n                count--, j--;\n\n            // break if only one element is left\n            if (i == j)\n                break;\n\n            // Now look for the zero sum pair\n            // in current window (i, j)\n            sum = arr[i] + arr[j];\n\n            if (sum == 0) {\n                // decrease the count if (positive,\n                // negative) pair is encountered\n                count--;\n                i++, j--;\n            } else if (sum < 0)\n                i++;\n            else\n                j--;\n        }\n        return count;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int distinctCount(int[] arr) {\n        int n = arr.length;\n        int count = n;\n        int i = 0, j = n - 1;\n\n        while (i < j) {\n            while (i != j && arr[i] == arr[i + 1]) {\n                count--;\n                i++;\n            }\n\n            while (i != j && arr[j] == arr[j - 1]) {\n                count--;\n                j--;\n            }\n\n            if (i == j) break;\n\n            int sum = arr[i] + arr[j];\n\n            if (sum == 0) {\n                count--;\n                i++;\n                j--;\n            } else if (sum < 0) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def distinctCount(self, arr):\n        n = len(arr)\n        count = n\n        i = 0\n        j = n - 1\n\n        while i < j:\n            while i != j and arr[i] == arr[i + 1]:\n                count -= 1\n                i += 1\n\n            while i != j and arr[j] == arr[j - 1]:\n                count -= 1\n                j -= 1\n\n            if i == j:\n                break\n\n            sum = arr[i] + arr[j]\n\n            if sum == 0:\n                count -= 1\n                i += 1\n                j -= 1\n            elif sum < 0:\n                i += 1\n            else:\n                j -= 1\n\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    distinctCount(arr) {\n        let n = arr.length;\n        let count = n;\n        let i = 0, j = n - 1;\n\n        while (i < j) {\n            while (i != j && arr[i] === arr[i + 1]) {\n                count--;\n                i++;\n            }\n\n            while (i != j && arr[j] === arr[j - 1]) {\n                count--;\n                j--;\n            }\n\n            if (i === j) break;\n\n            let sum = arr[i] + arr[j];\n\n            if (sum === 0) {\n                count--;\n                i++;\n                j--;\n            } else if (sum < 0) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n\n        return count;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}