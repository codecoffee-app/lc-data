{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703222,
            "title": "Distinct Adjacent Element",
            "titleSlug": "distinct-adjacent-element2121",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of integers, the task is to check whether obtaining an array with distinct adjacent elements is possible by swapping two neighboring array elements.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 1, 2]\n<strong>Output:</strong> true\n<strong>Explanation</strong>: Swapping last 2 elements can result in [1, 2, 1].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [7, 7, 7, 7]\n<strong>Output:</strong> false\n<strong>Explanation: </strong>We can't swap to obtain distinct elements in neighbor.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; arr.size() &le; 10<sup>6<br /></sup>1 &le; arr[i] &le; 10<sup>5</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, determine if it's possible to obtain an array where no two adjacent elements are the same by swapping two neighboring elements.",
                "constraints": [
                    "2 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 1, 2]",
                        "output": "true",
                        "explanation": "By swapping the last two elements, we get [1, 2, 1], which satisfies the condition of having distinct adjacent elements."
                    },
                    {
                        "input": "[7, 7, 7, 7]",
                        "output": "false",
                        "explanation": "No matter which adjacent elements are swapped, it's impossible to achieve distinct adjacent elements."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You need to check if the most occurring elements are not greater than <strong>(n+1/2)</strong>. If they are you cannot get distinct adjacent.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool distinctAdjacentElement(vector<int> &arr) {\n        int n = arr.size();\n        // map used to count the frequency\n        // of each element occurring in the\n        // array\n        unordered_map<int, int> m;\n\n        // In this loop we count the frequency\n        // of element through map m .\n        for (int i = 0; i < n; ++i)\n            m[arr[i]]++;\n\n        // mx store the frequency of element which\n        // occurs most in array .\n        int mx = 0;\n\n        // In this loop we calculate the maximum\n        // frequency and store it in variable mx.\n        for (int i = 0; i < n; ++i)\n            if (mx < m[arr[i]])\n                mx = m[arr[i]];\n\n        // By swapping we can adjust array only\n        // when the frequency of the element\n        // which occurs most is less than or\n        // equal to (n + 1)/2 .\n        if (mx > (n + 1) / 2)\n            return false;\n        else\n            return true;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean distinctAdjacentElement(int[] arr) {\n        int n = arr.length;\n        HashMap<Integer, Integer> frequencyMap = new HashMap<>();\n\n        // Count the frequency of each element\n        for (int value : arr) {\n            frequencyMap.put(value, frequencyMap.getOrDefault(value, 0) + 1);\n        }\n\n        // Find the maximum frequency\n        int maxFrequency = Collections.max(frequencyMap.values());\n\n        // Check if the array can be rearranged so that no two adjacent elements are the\n        // same\n        return maxFrequency <= (n + 1) / 2;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def distinctAdjacentElement(self, arr):\n        n = len(arr)\n        frequency_map = {}\n\n        # Count the frequency of each element\n        for value in arr:\n            frequency_map[value] = frequency_map.get(value, 0) + 1\n\n        # Find the maximum frequency\n        max_frequency = max(frequency_map.values(), default=0)\n\n        # Check if the array can be rearranged so that no two adjacent elements are the same\n        return max_frequency <= (n + 1) // 2\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    distinctAdjacentElement(arr) {\n        const frequencyMap = {};\n        const n = arr.length;\n\n        // Count the frequency of each element\n        arr.forEach(value => { frequencyMap[value] = (frequencyMap[value] || 0) + 1; });\n\n        // Find the maximum frequency\n        const maxFrequency = Math.max(...Object.values(frequencyMap));\n\n        // Check if the array can be rearranged so that no two adjacent elements are the\n        // same\n        return maxFrequency <= Math.floor((n + 1) / 2);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}