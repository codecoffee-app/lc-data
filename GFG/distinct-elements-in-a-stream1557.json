{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702916,
            "title": "Distinct Elements in a Stream",
            "titleSlug": "distinct-elements-in-a-stream1557",
            "content": "<p><span >Given an array of integers <strong>arr[]</strong>, the task is to return the no of distinct elements in subarray <strong>arr[0, i]</strong> for <strong>0</strong> &lt;= <strong>i </strong>&lt;<strong>arr.size()</strong>.<br />The array will have positive and negative values. positive value means you have to append it into your data and negative value means you have to remove it from your data.<br /><strong>Note:</strong> If the element is not present in the data and you get the -ve of that element then no changes should occur.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [5, 5, 7, -5, -7, 1, 2, -2]\n<strong>Output: </strong>[1, 1, 2, 2, 1, 2, 3, 2]\n<strong>Explanation: </strong>Proper adding and removal of intgers will give this output.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [9, 9, 3, -9, -3, -9]\n<strong>Output: </strong>[1, 1, 2, 2, 1, 0]\n<strong>Explanation: </strong>Proper adding and removal of intgers will give this output.</span></pre>\n<p><span ><strong>Expected Time Complexity: </strong>O(n).<strong><br />Expected Auxiliary Space:&nbsp;</strong>O(n).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />-10<sup>6</sup> &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]`, determine the number of distinct elements present in the subarray `arr[0, i]` for each index `i` from 0 to `arr.size() - 1`.  A positive value in the array signifies appending the element to your data, while a negative value signifies removing the element from your data. If you encounter the negative of an element that is not currently in your data, no changes should occur.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-10^6 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[5, 5, 7, -5, -7, 1, 2, -2]",
                        "output": "[1, 1, 2, 2, 1, 2, 3, 2]",
                        "explanation": "The data evolves as follows: [5], [5], [5, 7], [7], [], [1], [1, 2], [1]. The number of distinct elements in each stage corresponds to the output."
                    },
                    {
                        "input": "[9, 9, 3, -9, -3, -9]",
                        "output": "[1, 1, 2, 2, 1, 0]",
                        "explanation": "The data evolves as follows: [9], [9], [9, 3], [3], [], []. The number of distinct elements in each stage corresponds to the output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >We will be using hashing for stroring the previous number. More Clearly&nbsp;we will be using map for storing value .</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate distinct positive integers after each integer in the array.\n    vector<int> getDistinct(vector<int> &arr) {\n        vector<int> ans;            // Stores the results\n        unordered_map<int, int> mp; // Tracks occurrences of each integer\n        int cnt = 0;                // Counter for distinct positive integers\n\n        // Iterate through each number in the array\n        for (auto &num : arr) {\n            if (num > 0) {\n                // Process positive numbers\n                mp[num]++;\n                if (mp[num] == 1)\n                    cnt++; // Increase count for first occurrence\n            } else {\n                // Process negative numbers as positive\n                int number = abs(num);\n                mp[number]--;\n                if (mp[number] == 0)\n                    cnt--; // Decrease count if no occurrences left\n                if (mp[number] < 0)\n                    mp[number] = 0; // Ensure count does not go negative\n            }\n            ans.push_back(cnt); // Append current count of distinct numbers\n        }\n        return ans; // Return the result vector\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to get distinct elements count at each step\n    public List<Integer> getDistinct(int[] arr) {\n        List<Integer> ans = new ArrayList<>();\n        Map<Integer, Integer> mp = new HashMap<>();\n        int cnt = 0;\n\n        // Loop through the array\n        for (int num : arr) {\n            // If number is positive\n            if (num > 0) {\n                // Increment frequency in map\n                mp.put(num, mp.getOrDefault(num, 0) + 1);\n                // If frequency becomes 1, increment count\n                if (mp.get(num) == 1) {\n                    cnt++;\n                }\n            } else {\n                // If number is negative\n                int number = Math.abs(num);\n                // Decrease frequency in map\n                if (mp.containsKey(number) && mp.get(number) > 0) {\n                    mp.put(number, mp.get(number) - 1);\n                    // If frequency becomes 0, decrement count\n                    if (mp.get(number) == 0) {\n                        cnt--;\n                    }\n                }\n            }\n            // Add current count to the result list\n            ans.add(cnt);\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    #Function to get distinct elements count.\n    def getDistinct(self, arr):\n        ans = []\n        mp = {}\n        cnt = 0\n\n        #iterating over the array\n        for num in arr:\n\n            #checking if number is positive\n            if num > 0:\n\n                #checking if number is not in map or count is 0\n                if num not in mp or mp[num] == 0:\n                    cnt += 1\n\n                #updating count in map\n                mp[num] = mp.get(num, 0) + 1\n\n            #if number is negative\n            else:\n                number = abs(num)\n\n                #decreasing count if number is in map\n                if number in mp and mp[number] > 0:\n                    mp[number] -= 1\n\n                    #updating count if count becomes 0\n                    if mp[number] == 0:\n                        cnt -= 1\n                else:\n                    mp[number] = 0  # Ensures that negative counts are not allowed\n\n            ans.append(cnt)\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    getDistinct(arr) {\n        let ans = [];       // Initialize an empty array to store the result.\n        let mp = new Map(); // Initialize a Map to keep track of distinct elements.\n        let cnt = 0;        // Initialize a counter for distinct elements.\n\n        for (let num of arr) {\n            if (num > 0) {\n                mp.set(num,\n                       (mp.get(num) || 0) + 1); // Update count for positive numbers.\n                if (mp.get(num) === 1) {\n                    cnt++; // Increment counter for new distinct element.\n                }\n            } else {\n                let number = Math.abs(num); // Get absolute value for negative numbers.\n                if (mp.has(number) && mp.get(number) > 0) {\n                    mp.set(number,\n                           mp.get(number) - 1); // Update count for negative numbers.\n                    if (mp.get(number) === 0) {\n                        cnt--; // Decrement counter for removed distinct element.\n                    }\n                }\n            }\n            ans.push(cnt); // Add current count to the result array.\n        }\n        return ans; // Return the final result array.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}