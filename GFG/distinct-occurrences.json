{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700337,
            "title": "Distinct occurrences",
            "titleSlug": "distinct-occurrences",
            "content": "<p><span >You are given two strings <strong><code>txt</code></strong> and <strong><code>pat</code></strong>, find the count of <strong>distinct </strong>occurrences of <code>pat</code> as a subsequence in <code>txt</code>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>txt = \"abba\", pat = \"aba\"\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: There are 3 sub-sequences: [<span style=\"text-decoration: underline;\">ab</span>b<span style=\"text-decoration: underline;\">a</span>], [<span style=\"text-decoration: underline;\">a</span>b<span style=\"text-decoration: underline;\">ba</span>].</span></pre>\n<pre><span ><strong>Input</strong>: txt = \"banana\", pat = \"ban\"\n<strong>Output:</strong> 3\n<strong>Explanation</strong>: There are 3 sub-sequences: [<span style=\"text-decoration: underline;\">ban</span>ana], [<span style=\"text-decoration: underline;\">ba</span>na<span style=\"text-decoration: underline;\">n</span>a], [<span style=\"text-decoration: underline;\">b</span>an<span style=\"text-decoration: underline;\">an</span>a].\n</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; txt.size() &le; pat.size() &le; 10<sup>3</sup><br />Both <code>txt</code> and <code>pat</code> contain only lowercase alphabets.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `txt` and `pat`, determine the number of distinct times `pat` appears as a subsequence within `txt`.  A subsequence is formed by deleting zero or more characters from the original string, without changing the order of the remaining characters.",
                "constraints": [
                    "1 <= txt.size() <= 1000",
                    "1 <= pat.size() <= 1000",
                    "txt.size() >= pat.size()",
                    "Both `txt` and `pat` contain only lowercase alphabets."
                ],
                "testcases": [
                    {
                        "input": "txt = \"abba\", pat = \"aba\"",
                        "output": "2",
                        "explanation": "The pattern 'aba' occurs twice as a subsequence in 'abba'. One occurrence is formed by taking the first 'a', the first 'b', and the last 'a' [**ab**b**a**]. The second is the first 'a', the last 'ba' [**a**b**ba**]."
                    },
                    {
                        "input": "txt = \"banana\", pat = \"ban\"",
                        "output": "3",
                        "explanation": "The pattern 'ban' occurs three times as a subsequence in 'banana'.  These occurrences are [**ban**ana], [**ba**na**n**a], and [**b**an**an**a]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use Dynamic Programming</span></p>",
            "<p>Create a DP table to store counts. Initialize base cases for empty subsequences and fill based on character matches.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int subseqCount(string &txt, string &pat) {\n        int m = pat.length(), n = txt.length();\n\n        // If pattern is longer than the text, return 0\n        if (m > n)\n            return 0;\n\n        // Create two 1D arrays for dynamic programming\n        vector<int> prev(m + 1, 0);\n        vector<int> curr(m + 1, 0);\n\n        // Base case: An empty pattern can be\n        // formed from any text\n        prev[0] = 1;\n\n        // Iterate over each character in the text\n        for (int i = 1; i <= n; i++) {\n\n            // Base case: An empty pattern is always\n            // a subsequence\n            curr[0] = 1;\n\n            // Iterate over each character in the pattern\n            for (int j = 1; j <= m; j++) {\n\n                // If characters match, include or\n                // exclude the current character\n                if (txt[i - 1] == pat[j - 1]) {\n                    curr[j] = (prev[j - 1] + prev[j]);\n                } else {\n                    curr[j] = prev[j];\n                }\n            }\n\n            // Update prev array for\n            // the next iteration\n            prev = curr;\n        }\n\n        // Return the count of distinct\n        // subsequences matching the complete pattern\n        return prev[m];\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int subseqCount(String txt, String pat) {\n        int m = pat.length();\n        int n = txt.length();\n\n        // If pattern is longer than the\n        // text, return 0\n        if (m > n) return 0;\n\n        // Create two 1D arrays for dynamic\n        // programming\n        int[] prev = new int[m + 1];\n        int[] curr = new int[m + 1];\n\n        // Base case: An empty pattern can be\n        // formed from any text\n\n        prev[0] = 1;\n\n        // Iterate over each character in the text\n        for (int i = 1; i <= n; i++) {\n\n            // Base case: An empty pattern is always a\n            // subsequence\n            curr[0] = 1;\n\n            // Iterate over each character in the pattern\n            for (int j = 1; j <= m; j++) {\n\n                // If characters match, include or exclude\n                // the current character\n                if (txt.charAt(i - 1) == pat.charAt(j - 1)) {\n                    curr[j] = (prev[j - 1] + prev[j]);\n                } else {\n                    curr[j] = prev[j];\n                }\n            }\n\n            // Update prev array for the next iteration\n            System.arraycopy(curr, 0, prev, 0, curr.length);\n        }\n\n        // Return the count of distinct subsequences\n        // matching the complete pattern\n        return (int)prev[m];\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def subseqCount(self, txt, pat):\n        m, n = len(pat), len(txt)\n\n        # If pattern is longer than the\n        # text, return 0\n        if m > n:\n            return 0\n\n        # Create two 1D arrays for\n        # dynamic programming\n        prev = [0] * (m + 1)\n        curr = [0] * (m + 1)\n\n        # Base case: An empty pattern can\n        # be formed from any text\n        prev[0] = 1\n\n        # Iterate over each character in the text\n        for i in range(1, n + 1):\n            curr[0] = 1\n\n            # Iterate over each character in the pattern\n            for j in range(1, m + 1):\n\n                # If characters match, include or\n                # exclude the current character\n                if txt[i - 1] == pat[j - 1]:\n                    curr[j] = (prev[j - 1] + prev[j])\n                else:\n                    curr[j] = prev[j]\n\n            # Update prev array for the\n            # next iteration\n            prev = curr.copy()\n\n        return prev[m]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    subseqCount(txt, pat) {\n        const m = pat.length;\n        const n = txt.length;\n\n        // If pattern is longer than the text, return 0\n        if (m > n) return 0;\n\n        // Create two arrays for dynamic programming\n        const prev = new Array(m + 1).fill(0);\n        const curr = new Array(m + 1).fill(0);\n\n        // Base case: An empty pattern can\n        // be formed from any text\n        prev[0] = 1;\n\n        // Iterate over each character in the text\n        for (let i = 1; i <= n; i++) {\n            curr[0] = 1;\n\n            // Iterate over each character in the pattern\n            for (let j = 1; j <= m; j++) {\n\n                // If characters match, include or exclude the\n                // current character\n                if (txt[i - 1] === pat[j - 1]) {\n                    curr[j] = (prev[j - 1] + prev[j]);\n                } else {\n                    curr[j] = prev[j];\n                }\n            }\n\n            // Update prev array for the next iteration\n            for (let k = 0; k <= m; k++) {\n                prev[k] = curr[k];\n            }\n        }\n\n        // Return the count of distinct subsequences matching\n        // the complete pattern\n        return prev[m];\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}