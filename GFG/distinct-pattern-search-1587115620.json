{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701279,
            "title": "Pattern Search",
            "titleSlug": "distinct-pattern-search-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>S</strong> and a pattern <strong>P</strong> consisting of lowercase characters. The task is to check if pattern P exists in the given string S or not.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>S = abceabcdabceabcd\nP = abcd\n<strong>Output: </strong>Yes<strong>\nExplanation: </strong>Given pattern abcd is\npresent at index 4.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>S = abceabcdabceabcd\nP = gfhij\n<strong>Output: </strong>No<strong>\nExplanation: </strong>Given pattern gfhij is\nnot found in the string.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />The task is to complete the function <strong>search</strong>() which&nbsp;takes string and pattern as parameters and returns either<strong> true or false</strong>. Return true if pattern is found else return false.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N + M).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).<br />Note: N = |S|, M = |P|.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |S|, |P| &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": null,
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int[] LPS(String s) {\n        int n = s.length();\n        int[] vec = new int[n];\n        int j = 1;\n        int c = 0;\n        while (j < n) {\n            if (s.charAt(c) == s.charAt(j)) {\n                c++;\n                vec[j] = c;\n                j++;\n            } else {\n                if (c != 0) {\n                    c = vec[c - 1];\n                } else {\n                    vec[j] = 0;\n                    j++;\n                }\n            }\n        }\n        return vec;\n    }\n\n    public boolean search(String p, String s) {\n        int[] lps = LPS(p);\n        int i = 0;\n        int j = -1;\n        while (i < s.length()) {\n            if (s.charAt(i) == p.charAt(j + 1)) {\n                j++;\n                i++;\n            } else {\n                if (j != -1) {\n                    int ind = lps[j];\n                    j = ind - 1;\n                } else {\n                    i++;\n                }\n            }\n            if (j == p.length() - 1) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom typing import List\r\nclass Solution:\r\n    def LPS(self, s: str) -> List[int]:\r\n        n = len(s)\r\n        vec = [0] * n\r\n        j = 1\r\n        c = 0\r\n        while j < n:\r\n            if s[c] == s[j]:\r\n                c += 1\r\n                vec[j] = c\r\n                j += 1\r\n            else:\r\n                if c != 0:\r\n                    c = vec[c - 1]\r\n                else:\r\n                    vec[j] = 0\r\n                    j += 1\r\n        return vec\r\n    \r\n    def search(self, p: str, s: str) -> int:\r\n        lps = self.LPS(p)\r\n        i = 0\r\n        j = -1\r\n        while i < len(s):\r\n            if s[i] == p[j + 1]:\r\n                j += 1\r\n                i += 1\r\n            else:\r\n                if j != -1:\r\n                    ind = lps[j]\r\n                    j = ind - 1\r\n                else:\r\n                    i += 1\r\n            if j == len(p) - 1:\r\n                return True\r\n        return False",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}