{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703074,
            "title": "Distinct Substrings",
            "titleSlug": "distinct-substrings2516",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>s</strong>&nbsp;consisting of uppercase and lowercase&nbsp;alphabetic characters. Return the &nbsp;number of distinct substrings of size 2 that appear in<strong> s</strong>&nbsp;as contiguous substrings.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input </strong>:\ns = &quot;ABCAB&quot;\n<strong>Output </strong>:\n3\n<strong>Explanation</strong>:  For &quot;ABCAB&quot;, the \nthree distinct substrings of size \n2 are &quot;AB&quot;, &quot;BC&quot; and &quot;CA&quot;. </span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input </strong>:\ns = &quot;XYZ&quot;\n<strong>Output </strong>:\n2\n<strong>Explanation</strong>: For &quot;XYZ&quot;, the \ntwo distinct substrings of size 2 are\n&quot;XY&quot; and &quot;YZ&quot;.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task</strong> :</span></p>\n\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. You have to complete the function <em>fun()&nbsp;</em>which takes the string<strong> s</strong>&nbsp;as input parameter and returns the number of distinct contiguous substring of size 2.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity </strong>: O(|s|)<br />\n<strong>Expected Auxilliary Space</strong> : O(|s|)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints</strong>:<br />\n1&lt;=|s|&lt;=100</span></p>\n\n<p><span style=\"font-size:18px\">|s| denotes the length of the string s.</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of uppercase and lowercase alphabetic characters, determine the number of distinct substrings of size 2 that appear in `s` as contiguous substrings.",
                "constraints": [
                    "1 <= |s| <= 100",
                    "|s| denotes the length of the string s."
                ],
                "testcases": [
                    {
                        "input": "ABCAB",
                        "output": "3",
                        "explanation": "The distinct substrings of size 2 are \"AB\", \"BC\", and \"CA\"."
                    },
                    {
                        "input": "XYZ",
                        "output": "2",
                        "explanation": "The distinct substrings of size 2 are \"XY\" and \"YZ\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Maximum&nbsp;Number of distinct substring of length 2 will be 52*52</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "linkedin"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to calculate the frequency of pairs of characters in a string\nint fun(string s)\n{\n    // Create a map to store the frequency of pairs of characters\n    map<string, int> freq;\n    \n    // Initialize the answer with 0\n    int ans = 0;\n    \n    // Iterate over the string excluding the last character\n    for (int i = 0; i < (int)(s.size()) - 1; i++) {\n        // Create a string by concatenating the current character and the next character\n        string t = \"\";\n        t = t + s[i];\n        t = t + s[i + 1];\n        \n        // If the pair of characters has not been encountered before,\n        // update the frequency count and increment the answer\n        if (!freq[t]) {\n            ++freq[t];\n            ++ans;\n        }\n    }\n    \n    // Return the final answer\n    return ans;   \n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution \n{ \n    // function to count the number of distinct pairs of characters in a string\n    int fun(String s) \n    {\n        // create a HashMap to store frequency of pairs of characters\n        HashMap<String,Integer> freq = new HashMap<String,Integer>();\n        int ans = 0;\n        \n        // iterate through the string and create pairs of characters\n        for (int i = 0; i+1 < s.length(); i++) {\n            String t = \"\";\n            t = t + s.charAt(i);\n            t = t + s.charAt(i + 1);\n            \n            // put the pair in the HashMap with a frequency of 1\n            freq.put(t,1);\n        }\n        \n        // return the number of distinct pairs in the HashMap\n        return freq.size();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Function to return the frequency of pairs of characters in the given string.\n    public int fun(string s)\n    {\n        // Create a dictionary to store the frequency of pairs of characters\n        Dictionary<string, int> freq = new Dictionary<string, int>();\n\n        // Initialize the answer with 0\n        int ans = 0;\n\n        // Iterate over the string excluding the last character\n        for (int i = 0; i < s.Length - 1; i++)\n        {\n            // Create a string by concatenating the current character and the next character\n            string t = \"\" + s[i] + s[i + 1];\n\n            // If the pair of characters has not been encountered before,\n            // update the frequency count and increment the answer\n            if (!freq.ContainsKey(t))\n            {\n                freq[t] = 1;\n                ans++;\n            }\n        }\n\n        // Return the final answer\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}