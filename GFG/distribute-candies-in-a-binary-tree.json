{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706446,
            "title": "Distribute candies in a binary tree",
            "titleSlug": "distribute-candies-in-a-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">You are given a binary tree with <strong>n</strong> nodes, where each node contains a certain number of candies, and the total number of candies across all nodes is <strong>n</strong>. In one move, we can select two <strong>adjacent </strong>nodes and transfer one candy from one node to the other. The transfer can occur between a parent and child in <strong>either </strong>direction.</span></p>\n<p><span style=\"font-size: 18px;\">The task is to determine the <strong>minimum </strong>number of moves required to ensure that every node in the tree has <strong>exactly</strong> <strong>one </strong>candy.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> The testcases are framed such that it is always possible to achieve a configuration in which every node has exactly one candy, after some moves.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: root[] = [3, 0, 0]<br />&nbsp; &nbsp; &nbsp; &nbsp;<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/706446/Web/Other/blobid0_1737544183.jpg\" width=\"210\" height=\"186\" /> <br /><strong>Output: </strong>2</span><br /><span style=\"font-size: 18px;\"><strong>Explanation</strong>: From the root of the tree, we move one candy to its left child, and one candy to its right child. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: root[] = [0, 3, 0]<br />&nbsp; &nbsp; &nbsp; &nbsp;<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/706446/Web/Other/blobid1_1737544324.jpg\" width=\"201\" height=\"178\" /> &nbsp;<br /><strong>Output: </strong>3</span><br /><span style=\"font-size: 18px;\"><strong>Explanation</strong>: From the left child of the root, we move two candies to the root [taking two moves]. Then, we move one candy from the root of the tree to the right child.</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></div>\n<p><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 10<sup>4<br /></sup></span><span style=\"font-size: 18px;\">0 &lt;= <span >Node-&gt;data</span> &lt;= n<br /></span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">The sum of all Node-&gt;data is equal to n</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>The idea is to traverse the tree from leaf to root and consecutively balance all of the nodes. To balance a node, the number of candy at that node must be 1.&nbsp;<br />\nThere can be two cases:&nbsp;<br />\n&nbsp;</p>\n\n<ol>\n\t<li>If a node needs candies, if the node of the tree has 0 candies (an excess of -1 from what it needs), then we should push a candy from its parent onto the node.</li>\n\t<li>If the node has more than 1 candy. If it has say, 4 candies (an excess of 3), then we should push 3 candies off the node to its parent.</li>\n</ol>\n\n<p>So, the total number of moves from that leaf to or from its parent is excess =&nbsp;<strong>abs(num_candies &ndash; 1)</strong>.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Utility function to find the number of\n    // moves to distribute all of the candies\n    int distributeCandyUtil(Node* root, int& ans) {\n\n        // Base Case\n        if (root == nullptr)\n            return 0;\n\n        // Traverse left subtree\n        int l = distributeCandyUtil(root->left, ans);\n\n        // Traverse right subtree\n        int r = distributeCandyUtil(root->right, ans);\n\n        // Update number of moves\n        ans += abs(l) + abs(r);\n\n        // Return number of moves to balance\n        // current node\n        return root->data + l + r - 1;\n    }\n\n    // Function to find the number of moves to\n    // distribute all of the candies\n    int distributeCandy(Node* root) {\n        int ans = 0;\n\n        distributeCandyUtil(root, ans);\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Utility function to find the number of\n    // moves to distribute all of the candies\n    static int distributeCandyUtil(Node root, int[] ans) {\n\n        // Base Case\n        if (root == null) return 0;\n\n        // Traverse left subtree\n        int l = distributeCandyUtil(root.left, ans);\n\n        // Traverse right subtree\n        int r = distributeCandyUtil(root.right, ans);\n\n        // Update number of moves\n        ans[0] += Math.abs(l) + Math.abs(r);\n\n        // Return number of moves to balance\n        // current node\n        return root.data + l + r - 1;\n    }\n\n    // Function to find the number of moves to\n    // distribute all of the candies\n    static int distributeCandy(Node root) {\n        int[] ans = new int[1];\n\n        distributeCandyUtil(root, ans);\n\n        return ans[0];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    # Utility function to find the number of\n    # moves to distribute all of the candies\n    def distributeCandyUtil(self, root, ans):\n\n        # Base Case\n        if root is None:\n            return 0\n\n        # Traverse left subtree\n        l = self.distributeCandyUtil(root.left, ans)\n\n        # Traverse right subtree\n        r = self.distributeCandyUtil(root.right, ans)\n\n        # Update number of moves\n        ans[0] += abs(l) + abs(r)\n\n        # Return number of moves to balance\n        # current node\n        return root.data + l + r - 1\n\n    # Function to find the number of moves to\n    # distribute all of the candies\n    def distributeCandy(self, root):\n        ans = [0]\n\n        self.distributeCandyUtil(root, ans)\n\n        return ans[0]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Utility function to find the number of\n    // moves to distribute all of the candies\n    distributeCandyUtil(root, ans) {\n\n        // Base Case\n        if (root === null) return 0;\n\n        // Traverse left subtree\n        let l = this.distributeCandyUtil(root.left, ans);\n\n        // Traverse right subtree\n        let r = this.distributeCandyUtil(root.right, ans);\n\n        // Update number of moves\n        ans.moves += Math.abs(l) + Math.abs(r);\n\n        // Return number of moves to balance\n        // current node\n        return root.data + l + r - 1;\n    }\n\n    // Function to find the number of moves to\n    // distribute all of the candies\n    distributeCandy(root) {\n        let ans = {moves : 0};\n\n        this.distributeCandyUtil(root, ans);\n\n        return ans.moves;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}