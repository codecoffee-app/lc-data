{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706288,
            "title": "Distribute N candies among K people",
            "titleSlug": "distribute-n-candies",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>N</strong> candies and <strong>K</strong> people. In the first turn, the first person gets 1 candy, the second gets 2 candies, and so on till K people. In the next turn, the first person gets K+1 candies, the second person gets K+2 candies and so on. If the number of candies is less than the required number of candies at every turn, then the person receives the remaining number of candies. Find the total number of candies every person has at the end.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 7, K = 4\n<strong>Output:\n</strong>1 2 3 1\n<strong>Explanation:</strong>\nAt the first turn, the fourth person\nhas to be given 4 candies, but there is\nonly 1 left, hence he takes only one. </span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 10, K = 3\n<strong>Output :</strong>\n5 2 3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nAt the second turn first one receives\n4 and then we have no more candies left. </span>\n\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>distributeCandies()</strong>&nbsp;which takes 2 integers N and K as input and returns a list, where the ith integer denotes the number of candies the ith person gets.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(logN+K)<br /><strong>Expected Auxiliary Space:</strong> O(K)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>8</sup><br />1 &le; K &le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "We have N candies to distribute among K people. In each turn, people receive candies in increasing order. The first person gets 1 candy, the second gets 2, and so on until the Kth person. In the next turn, the first person gets K+1 candies, the second gets K+2, and so on. If there are fewer candies than needed, a person receives the remaining candies. Determine the total number of candies each person has at the end.",
                "constraints": [
                    "1 <= N <= 10^8",
                    "1 <= K <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 7, K = 4",
                        "output": "1 2 3 1",
                        "explanation": "Initially, we have 7 candies and 4 people. The first person gets 1 candy, the second gets 2, the third gets 3, and the fourth needs 4 but only 1 remains, so they get 1."
                    },
                    {
                        "input": "N = 10, K = 3",
                        "output": "5 2 3",
                        "explanation": "Initially, we have 10 candies and 3 people. The first turn distributes 1, 2, and 3 candies to the first, second, and third people respectively. Then first person receives 4, and then we have no more candies left."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Be careful with overflow of integers.</span></p>",
            "<p><span style=\"font-size:18px\">Use Binary Search.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    vector<long long> distributeCandies(int n, int k) {\n        \n        vector<long long> arr(k,0);\n        \n        long long low = 0, high = n; \n        long long count = 0, ind = 1;\n  \n        // Do a binary search to find the number whose \n        // sum is less than N. \n        while (low <= high) { \n      \n            // Get mid \n            long long mid = (low + high) >> 1; \n            long long  sum = (mid * (mid + 1)) >> 1; \n      \n            // If sum is below N \n            if (sum <= n) { \n      \n                // Find number of complete turns \n                count = mid / k; \n      \n                // Right halve \n                low = mid + 1; \n            } \n            else { \n      \n                // Left halve \n                high = mid - 1; \n            } \n        } \n      \n        // Last term of last complete series \n        long long last = (count * k); \n      \n        // Subtract the sum till \n        n -= (last * (last + 1)) / 2; \n      \n        long long i = 0; \n      \n        // First term of incomplete series \n        long long term = (count * k) + 1; \n      \n        while (n) { \n            if (term <= n) { \n                arr[i++] = term; \n                n -= term; \n                term++; \n            } \n            else { \n                arr[i] += n; \n                n = 0; \n            } \n        } \n      \n        // Count the total candies \n        for (int i = 0; i < k; i++) \n            arr[i] += (count * (i + 1)) \n                   + (k * (count * (count - 1)) / 2); \n        \n        return arr;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\n// } Driver Code Ends\n\n// User function Template for javascript\n\n/**\n * @param {number} n\n * @param {number} k\n * @returns {number[]}\n */\n\nclass Solution {\n    distributeCandies(n, k) {\n        // code here\n        let ans = new Array(k).fill(0);\n        let turn = 0;\n        let i = 0;\n\n        while (n > 0) {\n            if (i === k) {\n\n                i = 0;\n                turn++;\n            }\n            let currCandies = (turn * k) + (i + 1);\n            if (n - currCandies < 0) {\n                ans[i] += n\n                break;\n            } else {\n                ans[i] += currCandies\n            }\n            i++;\n            n -= currCandies;\n        }\n        return ans\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}