{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705658,
            "title": "Minimum Exchange",
            "titleSlug": "distributing-question-papers2513",
            "content": "<p><span style=\"font-size:18px\">Given a matrix of size n*m. Every cell of matrix contains either &#39;A&#39; or &#39;B&#39;. Exchange is defined as swaping the characters between two cells. Your task is to find the minimum number of exchange needed to rearrange the given matrix such that no adjacent cell contains the same characters.<br />\r\nTwo cells&nbsp;are adjacent if they share one of their common sides (left,right,front or back if exists).&nbsp;</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Note: </span></strong><span style=\"font-size:18px\">There will not be any case that answer does not exist.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>matrix = {{A,A,B,A},{B,A,B,A},{B,B,A,B}}\r\n<strong>Output: </strong>2\r\n<strong>Explanation: </strong>Minimum number of students whose \r\nsets got changed are 4 (indexes: ((0,1),(0,2),\r\n(0,3),(2,0))). The final alloted sets are:\r\nA B A B\r\nB A B A\r\nA B A B\r\nHere 2 exchange are done so answer is 2.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>matrix = {{A,B},{B,A}}\r\n<strong>Output: </strong>0\r\n<strong>Explanation: </strong>No two adjacent cell contains same\r\ncharacter.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39; t need to read or print anything. Your task is to complete the function&nbsp;<strong>MinimumExchange()&nbsp;</strong>which takes matrix as input parameter and returns minimum number of&nbsp; exchange needed.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n*m</span><span style=\"font-size:18px\">)</span><br />\r\n<strong>Expected Space Compelxity:&nbsp;</strong><span style=\"font-size:18px\">O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= n, m &lt;= 100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an n*m matrix where each cell contains either 'A' or 'B', determine the minimum number of exchanges needed to rearrange the matrix such that no two adjacent cells (cells sharing a common side) contain the same character. An exchange is defined as swapping the characters between two cells.",
                "constraints": [
                    "1 <= n, m <= 100"
                ],
                "testcases": [
                    {
                        "input": "{{\"A\",\"A\",\"B\",\"A\"},{\"B\",\"A\",\"B\",\"A\"},{\"B\",\"B\",\"A\",\"B\"}}",
                        "output": "2",
                        "explanation": "The minimum number of exchanges required is 2.  One possible arrangement to satisfy the condition is:\nA B A B\nB A B A\nA B A B\n"
                    },
                    {
                        "input": "{{\"A\",\"B\"},{\"B\",\"A\"}}",
                        "output": "0",
                        "explanation": "No two adjacent cells contain the same character, so no exchanges are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about the frequency of &#39;A&#39; and&nbsp;&#39;B&#39;. Find a pattern.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n\n    public:\n        //Function to find the minimum number of exchanges.\n        int MinimumExchange(vector<vector<char>>&mat) {\n        int n = mat.size();\n        int m = mat[0].size();\n        int a = 0 , b = 0;\n        \n        //count number of 'A' and 'B' characters in the matrix.\n        for (int i = 0 ; i < n ; i++) {\n            for (int j = 0 ; j < m ; j++) {\n                if (mat[i][j] == 'A') {\n                    a++;\n                } else {\n                    b++;\n                }\n            }\n        }\n        \n        //helper function to calculate the number of exchanges needed\n        auto helper = [&] (char x, char y) {\n            int cnt = 0;\n            for (int i = 0 ; i < n;  i++) {\n                for (int j = 0 ; j < m; j++) {\n                    if (i % 2 == j % 2) {\n                        if (mat[i][j] == x) {\n                            cnt++;\n                        }\n                    } else {\n                        if (mat[i][j] == y) {\n                            cnt++;\n                        }\n                    }\n                }\n            }\n            return cnt / 2;\n        };\n        \n        int x=INT_MAX;\n        \n        //if total number of cells is odd and 'A' characters are more than 'B' characters\n        //or total number of cells is even, calculate minimum exchanges for 'B' characters.\n        if ((((n * m) & 1) && a > b) || ((n * m) % 2 == 0)) {\n            x = helper('B', 'A');\n        }\n        \n        //if total number of cells is odd and 'B' characters are more than 'A' characters\n        //or total number of cells is even, calculate minimum exchanges for 'A' characters.\n        if ((((n * m) & 1) && b > a) || ((n * m) % 2 == 0)) {\n            x = min(x, helper('A', 'B'));\n        }\n        \n        //returning the minimum number of exchanges.\n        return x;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}