{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714003,
            "title": "Divide in Incremental Groups",
            "titleSlug": "divide-in-incremental-groups--170647",
            "content": "<p><span style=\"font-size:18px\">Given two integers <strong>N</strong> and <strong>K</strong>, the task is to count the number of ways to divide <strong>N</strong> into groups of <strong>positive integers</strong>. Such that <strong>each group</strong> shall have <strong>K elements</strong> and their <strong>sum is N</strong>. Also the number of elements in the groups follows a <strong>non-decreasing</strong> order <strong>(i.e. group[i] &lt;= group[i+1])</strong>. Find the number of such groups</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 8\r\nK = 4\r\n<strong>Output:</strong>\r\n5\r\n<strong>Explanation:</strong>\r\nThere are 5 groups such that their sum is 8 \r\nand the number of positive integers in each \r\ngroup is 4.&nbsp;The 5 groups are [1, 1, 1, 5], \r\n[1, 1, 2, 4], [1, 1, 3, 3], [1, 2, 2, 3] and \r\n[2, 2, 2, 2].</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 4\r\nK = 3\r\n<strong>Output:</strong>\r\n1\r\n<strong>Explanation: </strong>\r\nThe only possible grouping is {1, 1, 2}. Hence,</span>\r\n<span style=\"font-size:18px\">the answer is 1 in this case.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nComplete the function <strong>countWaystoDivide</strong><strong>() </strong>which takes the integers&nbsp;<strong>N</strong>&nbsp;and <strong>K&nbsp;</strong>as the input parameters, and returns the number of ways to divide the sum <strong>N </strong>into<strong> K&nbsp;</strong>groups.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N<sup>2</sup>*K)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N<sup>2</sup></span><span style=\"font-size:18px\">*K)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; K &le;&nbsp;N &le; 100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers N and K, determine the number of ways to partition N into K positive integer groups, such that the elements within each group are in non-decreasing order (group[i] <= group[i+1]) and the sum of the elements is equal to N.",
                "constraints": [
                    "1 <= K <= N <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 8\nK = 4",
                        "output": "5",
                        "explanation": "There are 5 valid partitions of 8 into 4 groups where the numbers are in non-decreasing order: [1, 1, 1, 5], [1, 1, 2, 4], [1, 1, 3, 3], [1, 2, 2, 3], and [2, 2, 2, 2]."
                    },
                    {
                        "input": "N = 4\nK = 3",
                        "output": "1",
                        "explanation": "The only possible valid partition of 4 into 3 groups is [1, 1, 2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to think of using Dynamic Programming with the DP array having N<sup>2</sup>*K states.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "expedia"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n    \r\n\r\n  public:\r\n    // Function to count the number\r\n    // of ways to divide the number N\r\n    // in groups such that each group\r\n    // has K number of elements\r\n    int calculate(int pos, int prev, int left, int K,\r\n                  vector<vector<vector<int>>> &dp) {\r\n        // Base Case\r\n        if (pos == K) {\r\n            if (left == 0)\r\n                return 1;\r\n            else\r\n                return 0;\r\n        }\r\n        // if N is divides completely\r\n        // into less than K groups\r\n        if (left == 0) return 0;\r\n\r\n        // If the subproblem has been\r\n        // solved, use the value\r\n        if (dp[pos][prev][left] != -1) return dp[pos][prev][left];\r\n\r\n        int answer = 0;\r\n        // put all possible values\r\n        // greater equal to prev\r\n        for (int i = prev; i <= left; i++) {\r\n            answer += calculate(pos + 1, i, left - i, K, dp);\r\n    \r\n        }\r\n\r\n        return dp[pos][prev][left] = answer;\r\n    }\r\n\r\n    // Function to count the number of\r\n    // ways to divide the number N in groups\r\n    int countWaystoDivide(int N, int K) {\r\n        // Intialize DP Table as -1\r\n        vector<vector<vector<int>>> dp(\r\n            K + 1, vector<vector<int>>(N + 1, vector<int>(N + 1, -1)));\r\n\r\n        return calculate(0, 1, N, K, dp);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    \r\n\r\n    // Function to count the number\r\n    // of ways to divide the number N\r\n    // in groups such that each group\r\n    // has K number of elements\r\n    public int calculate(int pos, int prev, int left, int K, int[][][] dp) {\r\n        // Base Case\r\n        if (pos == K) {\r\n            if (left == 0)\r\n                return 1;\r\n            else\r\n                return 0;\r\n        }\r\n        // if N is divides completely\r\n        // into less than K groups\r\n        if (left == 0) return 0;\r\n\r\n        // If the subproblem has been\r\n        // solved, use the value\r\n        if (dp[pos][prev][left] != -1) return dp[pos][prev][left];\r\n\r\n        int answer = 0;\r\n        // put all possible values\r\n        // greater equal to prev\r\n        for (int i = prev; i <= left; i++) {\r\n            answer += calculate(pos + 1, i, left - i, K, dp);\r\n           \r\n        }\r\n\r\n        return dp[pos][prev][left] = answer;\r\n    }\r\n\r\n    // Function to count the number of\r\n    // ways to divide the number N in groups\r\n    int countWaystoDivide(int N, int K) {\r\n        // Intialize DP Table as -1\r\n        int dp[][][] = new int[K + 1][N + 1][N + 1];\r\n        for (int i = 0; i <= K; i++) {\r\n            for (int j = 0; j <= N; j++) {\r\n                Arrays.fill(dp[i][j], -1);\r\n            }\r\n        }\r\n\r\n        return calculate(0, 1, N, K, dp);\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n\r\n\r\nclass Solution:\r\n    # Function to count the number\r\n    # of ways to divide the number N\r\n    # in groups such that each group\r\n    # has K number of elements\r\n    def calculate(self, pos, prev, left, K, dp):\r\n        \r\n        # Base Case\r\n        if (pos == K):\r\n            if (left == 0):\r\n                return 1\r\n            else:\r\n                return 0\r\n    \r\n        # If N is divides completely\r\n        # into less than K groups\r\n        if (left == 0):\r\n            return 0\r\n        if(dp[pos][left][prev]!=-1):\r\n            return dp[pos][left][prev]\r\n        answer = 0\r\n    \r\n        # Put all possible values\r\n        # greater equal to prev\r\n        for i in range(prev, left + 1):\r\n            answer += self.calculate(pos + 1, i, left - i, K,dp)\r\n           \r\n        dp[pos][left][prev]= answer\r\n        return answer\r\n        \r\n    def countWaystoDivide(self, N, K):\r\n        dp = [[[-1 for j in range(N+1)] for j in range(N+1)] for j in range(K+1)]\r\n        return self.calculate(0, 1, N, K, dp)\r\n     \r\n    \r\n\r\n\r\n",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}