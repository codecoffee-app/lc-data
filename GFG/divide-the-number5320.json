{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704107,
            "title": "Divide the number",
            "titleSlug": "divide-the-number5320",
            "content": "<p><span style=\"font-size:18px\">Given a positive integer <strong>N</strong>, count the number of possible ways to represent <strong>N</strong> as the sum of four positive integers.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\n<strong>Output:</strong>\n1\n<strong>Explanation:</strong>\nWe can represent 5 as\na sum of 4 positive integers,\nonly in 1 way as 1+1+1+2 = 5\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 41\n<strong>Output:</strong>\n511\n<strong>Explanation:</strong>\nWe can represent 41 as\nsum of 4 positive integers\nin 511 ways\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>countWays()</strong>&nbsp;which takes&nbsp;an integer <strong>N</strong>&nbsp;as input parameter&nbsp;and returns an integer, the total count of the number of ways&nbsp;N can be represented as sum of 4 positive numbers.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>4</sup>)<br />\n<strong>Expected Space Complexity:</strong> O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n0 &lt;= N &lt;= 100</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Check for every possible combination.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    int countWays(int N){ \n        int counter = 0; // Initialize result \n      \n        // Generate all possible quadruplet and increment \n        // counter when sum of a quadruplet is equal to N \n        for (int i = 1; i < N; i++) \n            for (int j = i; j < N; j++) \n                for (int k = j; k < N; k++) \n                    for (int l = k; l < N; l++) \n                        if (i + j + k + l == N) \n                           counter++; \n        return counter; \n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    static int countWays(int N){  \n        int counter = 0; // Initialize result  \n      \n        // Generate all possible quadruplet and increment  \n        // counter when sum of a quadruplet is equal to N  \n        for (int i = 1; i < N; i++)  \n            for (int j = i; j < N; j++)  \n                for (int k = j; k < N; k++)  \n                    for (int l = k; l < N; l++)  \n                        if (i + j + k + l == N)  \n                        counter++;  \n        return counter;  \n    } \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\nclass Solution:\n    def countWays(self,N): \n  \n        counter = 0 # Initialize result \n      \n        # Generate all possible quadruplet  \n        # and increment counter when sum of \n        # a quadruplet is equal to N \n        for i in range(1, N): \n            for j in range(i, N): \n                for k in range(j, N): \n                    for l in range(k, N): \n                        if (i + j + k + l == N): \n                            counter += 1\n        return counter \n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to count the number of ways to reach the nth stair.\n    countWays(N)\n    {\n        let counter = 0; // Initialize result \n      \n        // Generate all possible quadruplet  \n        // and increment counter when sum of \n        // a quadruplet is equal to N \n        for (let i = 1; i < N; i++) {\n            for (let j = i; j < N; j++) {\n                for (let k = j; k < N; k++) {\n                    for (let l = k; l < N; l++) {\n                        if (i + j + k + l === N) {\n                            counter += 1;\n                        }\n                    }\n                }\n            }\n        }\n        return counter;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to count the number of ways to reach the nth stair.\n    public int countWays(int N)\n    {\n        int counter = 0; // Initialize result \n\n        // Generate all possible quadruplet and increment \n        // counter when sum of a quadruplet is equal to N \n        for (int i = 1; i < N; i++)\n            for (int j = i; j < N; j++)\n                for (int k = j; k < N; k++)\n                    for (int l = k; l < N; l++)\n                        if (i + j + k + l == N)\n                           counter++;\n        return counter;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}