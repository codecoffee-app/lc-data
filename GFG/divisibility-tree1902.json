{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705738,
            "title": "Divisibility tree",
            "titleSlug": "divisibility-tree1902",
            "content": "<p><span style=\"font-size: 18px;\">Given a tree with n nodes where <strong>n</strong> is <strong>even</strong>. The tree is numbered from 1 to n, has n - 1 edges and is rooted at node 1. </span><span style=\"font-size: 18px;\">Your task is to eliminate the <strong>maximum </strong>number of edges resulting in a set of disjoint trees where the number of nodes in each tree is divisible by <strong>2</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">n = 10, edges = [[2,1],[3,1],[4,3],[5,2],[6,1],[7,2],[8,6],[9,8],[10,8]]\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">2\n</span><strong style=\"font-size: 18px;\">Explanation:<br /></strong><span style=\"font-size: 18px;\">Original tree:<br /></span></span><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/880846/Web/Other/blobid0_1732601788.png\" width=\"432\" height=\"428\" /><br />After removing edge 1-3 and 1-6, each remaining component consists of even number of nodes. <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/880846/Web/Other/blobid1_1732601873.png\" width=\"430\" height=\"426\" /><br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">n = 4, edges = [[2,1],[4,2],[1,3]]\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">1\n</span><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Explanation: <br /></strong><span style=\"font-size: 18px;\">Original tree:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/880846/Web/Other/blobid2_1732602037.png\" width=\"424\" height=\"420\" /></span><strong style=\"font-size: 18px;\"><br /></strong></span><span style=\"font-size: 18px;\">After removing 1-2, each remaining component consists of even number of nodes.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/880846/Web/Other/blobid3_1732602310.png\" width=\"421\" height=\"417\" /><br /></span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup><br />edges.size() = n - 1<br />1 &lt;= edges[i][0], </span><span style=\"font-size: 18px;\">edges[i][1] &lt;= n</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a tree with *n* nodes, where *n* is an even number. The nodes are numbered from 1 to *n*, and the tree has *n* - 1 edges and is rooted at node 1. Your task is to find the maximum number of edges that can be removed such that each resulting connected component (disjoint tree) has an even number of nodes.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "edges.size() = n - 1",
                    "1 <= edges[i][0], edges[i][1] <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 10, edges = [[2,1],[3,1],[4,3],[5,2],[6,1],[7,2],[8,6],[9,8],[10,8]]",
                        "output": "2",
                        "explanation": "By removing the edges (1, 3) and (1, 6), the resulting components are of sizes 2, 2, 2, and 4.  Each component has an even number of nodes."
                    },
                    {
                        "input": "n = 4, edges = [[2,1],[4,2],[1,3]]",
                        "output": "1",
                        "explanation": "By removing the edge (1, 2), the resulting components are of sizes 2 and 2. Each component has an even number of nodes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The problem could be solved using DFS.</p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    int ans = 0;\n\n    // Function to perform depth-first search and count the number of edges to be\n    // removed.\n    int dfs(int v, vector<bool> &vis, vector<vector<int>> &adj) {\n        int cnt = 0;\n        int res = 0;\n        // Marking vertex v as visited.\n        vis[v] = true;\n        // Iterating over the adjacent vertices of v.\n        for (auto u : adj[v]) {\n            // If u is not visited, recursively calling dfs on u.\n            if (!vis[u]) {\n                res = dfs(u, vis, adj);\n                // If the result from dfs is even, incrementing the answer by 1.\n                if (res % 2 == 0)\n                    ans++;\n                else\n                    cnt += res;\n            }\n        }\n        // Returning the total count of edges to be removed from the subtree rooted at\n        // v.\n        return cnt + 1;\n    }\n\n    // Function to find the minimum number of edges to be removed to make the graph\n    // disconnected.\n    int maxEdgeRemoval(int n, vector<vector<int>> &edges) {\n        // Creating a adjacency list representation of the graph.\n        vector<vector<int>> adj(n);\n        // Creating a visited array to keep track of visited vertices.\n        vector<bool> vis(n, false);\n        // Filling the adjacency list representation.\n        for (auto i : edges) {\n            adj[i[0] - 1].push_back(i[1] - 1);\n            adj[i[1] - 1].push_back(i[0] - 1);\n        }\n        // Calling dfs on the root vertex (0).\n        dfs(0, vis, adj);\n        // Returning the minimum number of edges to be removed to make the graph\n        // disconnected.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    int ans = 0;\n\n    private int dfs(int v, boolean[] vis, List<List<Integer>> adj) {\n        int cnt = 0;\n        int res = 0;\n        // Marking vertex v as visited.\n        vis[v] = true;\n        // Iterating over the adjacent vertices of v.\n        for (int u : adj.get(v)) {\n            // If u is not visited, recursively calling dfs on u.\n            if (!vis[u]) {\n                res = dfs(u, vis, adj);\n                // If the result from dfs is even, incrementing the answer by 1.\n                if (res % 2 == 0)\n                    ans++;\n                else\n                    cnt += res;\n            }\n        }\n        // Returning the total count of edges to be removed from the subtree rooted at\n        // v.\n        return cnt + 1;\n    }\n\n    public int maxEdgeRemoval(int n, int[][] edges) {\n        // Creating an adjacency list representation of the graph.\n        List<List<Integer>> adj = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            adj.add(new ArrayList<>());\n        }\n        // Creating a visited array to keep track of visited vertices.\n        boolean[] vis = new boolean[n];\n        // Filling the adjacency list representation.\n        for (int[] edge : edges) {\n            adj.get(edge[0] - 1).add(edge[1] - 1);\n            adj.get(edge[1] - 1).add(edge[0] - 1);\n        }\n        // Calling dfs on the root vertex (0).\n        dfs(0, vis, adj);\n        // Returning the minimum number of edges to be removed to make the graph\n        // disconnected.\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def __init__(self):\n        self.ans = 0\n\n    def dfs(self, v, vis, adj):\n        cnt = 0\n        res = 0\n        vis[v] = True\n        for u in adj[v]:\n            if not vis[u]:\n                res = self.dfs(u, vis, adj)\n                if res % 2 == 0:\n                    self.ans += 1\n                else:\n                    cnt += res\n        return cnt + 1\n\n    def maxEdgeRemoval(self, n: int, edges: List[List[int]]) -> int:\n        adj = [[] for _ in range(n)]\n        vis = [False] * n\n        for i in edges:\n            adj[i[0] - 1].append(i[1] - 1)\n            adj[i[1] - 1].append(i[0] - 1)\n        self.dfs(0, vis, adj)\n        return self.ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number} n - Number of vertices in the graph\n     * @param {number[][]} edges - List of edges in the graph\n     * @returns {number} - Minimum number of edges to be removed to make the graph\n     *     disconnected\n     */\n    maxEdgeRemoval(n, edges) {\n        let ans = 0;\n\n        // Helper function to perform depth-first search (DFS)\n        const dfs = (v, vis, adj) => {\n            let cnt = 0;\n            let res = 0;\n            // Marking vertex v as visited.\n            vis[v] = true;\n\n            // Iterating over the adjacent vertices of v.\n            for (let u of adj[v]) {\n                // If u is not visited, recursively calling dfs on u.\n                if (!vis[u]) {\n                    res = dfs(u, vis, adj);\n                    // If the result from dfs is even, incrementing the answer by 1.\n                    if (res % 2 === 0) {\n                        ans++;\n                    } else {\n                        cnt += res;\n                    }\n                }\n            }\n            // Returning the total count of edges to be removed from the subtree rooted\n            // at v.\n            return cnt + 1;\n        };\n\n        // Creating an adjacency list representation of the graph.\n        const adj = Array.from({length : n}, () => []);\n        // Creating a visited array to keep track of visited vertices.\n        const vis = Array(n).fill(false);\n\n        // Filling the adjacency list representation.\n        for (let i of edges) {\n            adj[i[0] - 1].push(i[1] - 1);\n            adj[i[1] - 1].push(i[0] - 1);\n        }\n\n        // Calling dfs on the root vertex (0).\n        dfs(0, vis, adj);\n\n        // Returning the minimum number of edges to be removed to make the graph\n        // disconnected.\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}