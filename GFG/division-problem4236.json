{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704814,
            "title": "Division Problem",
            "titleSlug": "division-problem4236",
            "content": "<p><span style=\"font-size:18px\">You will be given two positive integers <strong>A</strong> and <strong>B </strong>and you have to find the smallest positive integer <strong>x </strong>such that <strong>B</strong> divides <strong>Ax - 1</strong>. </span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> A = 8, B = 10\r\n<strong>Output:</strong> -1\r\n<strong>Explaination:</strong> There is no such x that \r\n8x - 1 is divisible by 10.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> A = 4, B = 9\r\n<strong>Output:</strong> 7\r\n<strong>Explaination:</strong> 7 is the least integer such \r\nthat the conditioin satisfies.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>findX()</strong> which takes A and B as input parameter and return the least x such that Ax - 1 is divisible by B. Return -1 if no such x exists.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log(max(A, B)))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; A, B &le; 10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two positive integers A and B, find the smallest positive integer x such that B divides Ax - 1. In other words, find the smallest x for which (Ax - 1) % B == 0.",
                "constraints": [
                    "1 <= A, B <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "A = 8, B = 10",
                        "output": "-1",
                        "explanation": "There is no positive integer x such that (8x - 1) is divisible by 10."
                    },
                    {
                        "input": "A = 4, B = 9",
                        "output": "7",
                        "explanation": "x = 7 is the smallest positive integer such that (4 * 7 - 1) = 27 is divisible by 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">x has a range of [1, B].</span></p>",
            "<p><span style=\"font-size:18px\">For optimal time use Extended Euclidean algorithm.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate extended euclidean algorithm\n    pair<int, pair<int, int> > extendedEuclid(int a, int b){\n        // Base case: if a is 0, return gcd as b and coefficients as (0, 1)\n        if(a == 0) \n            return make_pair(b, make_pair(0, 1));\n        \n        // Recursive call to extendedEuclid with b%a and a as arguments\n        pair<int, pair<int, int> > p;\n        p = extendedEuclid(b % a, a);\n        \n        // Return gcd, and coefficients of Bezout's identity\n        return make_pair(p.first, make_pair(p.second.second - p.second.first*(b/a), p.second.first));\n    }\n    \n    // Function to find x in Bezout's identity\n    int findX(int A, int B){\n        // If A and B are not equal to 1, perform extended euclidean algorithm\n        if(A != 1 && B != 1){\n            pair<int, pair<int, int> > temp = extendedEuclid(A, B);\n            \n            // If gcd is 1, return positive form of x\n            if(temp.first == 1)\n                return (temp.second.first + B) % B;\n            \n            // If gcd is not 1, return -1 to indicate no solution\n            else \n                return -1;\n        }\n        // If A or B is 1, x is always 1\n        else\n            return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}