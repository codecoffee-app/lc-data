{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703173,
            "title": "Does array represent Heap",
            "titleSlug": "does-array-represent-heap4345",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr&nbsp;</strong>of size&nbsp;<strong>n</strong>, the task is to check if the given array can be a level order representation of a&nbsp;<a href=\"https://www.geeksforgeeks.org/difference-between-min-heap-and-max-heap/\">Max Heap</a>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:<br /></strong>n = 6<br />arr[] = {90, 15, 10, 7, 12, 2}\n<strong>Output: <br /></strong>1<br /><strong>Explanation:</strong> \nThe given array represents below tree\n\\t 90\n     /    \\\n   15\\t10\n  /  \\     /\n7    12  2\nThe tree follows max-heap property as every\nnode is greater than all of its descendants.\n</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input:  <br /></strong>n = 6<br />arr[] = {9, 15, 10, 7, 12, 11}\n<strong>Output:<br /></strong>0\n<strong>Explanation:</strong><br />The given array represents below tree\n\\t 9\n     /    \\\n   15\\t10\n  /  \\     /\n7    12  11\nThe tree doesn't follows max-heap property 9 is\nsmaller than 15 and 10, and 10 is smaller than 11. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>isMaxHeap()</strong>&nbsp;which takes the array&nbsp;<strong>arr[]</strong>&nbsp;and its size&nbsp;<strong>n</strong><strong>&nbsp;</strong>as inputs and returns&nbsp;<strong>True</strong>&nbsp;if the given array could represent a valid level order representation of a&nbsp;<strong>Max Heap</strong>, or else, it will return&nbsp;<strong>False</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>5</sup><br />1 &le; arr<sub>i</sub>&nbsp;&le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `n`, determine if it represents a valid level order representation of a Max Heap. A Max Heap follows the property where each node is greater than or equal to all of its descendants.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 6\narr[] = {90, 15, 10, 7, 12, 2}",
                        "output": "1",
                        "explanation": "The array represents a Max Heap because each parent node is greater than or equal to its children.  For example, 90 > 15 and 90 > 10, 15 > 7 and 15 > 12, 10 > 2."
                    },
                    {
                        "input": "n = 6\narr[] = {9, 15, 10, 7, 12, 11}",
                        "output": "0",
                        "explanation": "The array does not represent a Max Heap.  For instance, the root node 9 is smaller than its children 15 and 10, and 10 is smaller than 11."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Try to compare the root only with its children, if the root is greater than its children and the same is true for all nodes, then the tree is max-heap.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "cisco"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution{\n    public:\n        bool isMaxHeap(int arr[], int n)\n    {\n        for(int i =0;i<=n/2;i++){\n           if((arr[i] < arr[(2*i)+1]) || (arr[i] < arr[(2*i)+2])){\n                return false;\n           }\n       }\n       return true;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    \n    public boolean countSub(long arr[], long n)\n    {\n         for(int i = 0; i <= n / 2; i++)\n        {\n            if((2 * i + 1 < n && arr[i] < arr[2 * i + 1]) || (2 * i + 2 < n && arr[i] < arr[2 * i + 2]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\nclass Solution:\n    def isMaxHeap(self,arr,n):\n        for i in range(((n - 2) // 2) + 1): \n              \n            # If left child is greater,  \n            # return false  \n            if arr[2 * i + 1] > arr[i]:  \n                    return False\n      \n            # If right child is greater, \n            # return false  \n            if (2 * i + 2 < n and\n                arr[2 * i + 2] > arr[i]):  \n                    return False\n        return True\n\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public bool isMaxHeap(int[] arr, int n)\n    {\n        for(int i = 0; i <= n / 2; i++)\n        {\n            if((2 * i + 1 < n && arr[i] < arr[2 * i + 1]) || (2 * i + 2 < n && arr[i] < arr[2 * i + 2]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    isMaxHeap(n, a) { // Function to check if the given array represents a max heap\n        for (let i = 0; i <= Math.floor(n/2); i++) { // Iterate through the array up to half of its length\n            if (a[i] < a[(2*i)+1] || a[i] < a[(2*i)+2]) { // If parent node is smaller than any of the child nodes\n                return false; // Return false, as it does not represent a max heap\n            }\n        }\n        return true; // If the loop completes without returning false, return true, as it represents a max heap\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}