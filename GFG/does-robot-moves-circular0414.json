{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703518,
            "title": "Does robot moves circular",
            "titleSlug": "does-robot-moves-circular0414",
            "content": "<p><span style=\"font-size:18px\">Given a sequence of moves for a robot.&nbsp;Check if the sequence is circular&nbsp;or not. </span></p>\n\n<p><span style=\"font-size:18px\">A sequence of moves is circular if the first and last positions of the robot are the same. A move can be one of the following :<br />\n&nbsp; &nbsp; G - Go one unit<br />\n&nbsp;&nbsp; &nbsp;L - Turn left<br />\n&nbsp;&nbsp; &nbsp;R - Turn right</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>path = &quot;GLGLGLG&quot;\n<strong>Output:</strong> &quot;Circular&quot;\n<strong>Explanation</strong>: If we start form \n(0,0) in a plane then we will \nback to (0,0) by the end of the \nsequence.\n</span></pre>\n\n<p><span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: path = &quot;GGGGL&quot;\n<strong>Output:</strong> &quot;Not Circular&quot;\n<strong>Explanation</strong>: We can&#39;t return to \nsame place at the end of the path.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>isCircular</strong><strong>()</strong>&nbsp;which takes the string&nbsp;<strong>path&nbsp;</strong>as input&nbsp;and returns&nbsp;<strong>&quot;Circular&quot;</strong> if the path is circular else returns&nbsp;<strong>&quot;Not Circular&quot;</strong>.<br />\n<br />\n<strong>Expected Time Complexity:</strong>&nbsp;O(|S|)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &le; |S| &le;&nbsp;10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sequence of moves for a robot, determine if the sequence results in a circular path. A circular path is one where the robot returns to its starting position after executing all the moves. The possible moves are:\n\n*   `G`: Go one unit forward in the current direction.\n*   `L`: Turn 90 degrees to the left.\n*   `R`: Turn 90 degrees to the right.",
                "constraints": [
                    "1 <= |S| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "GLGLGLG",
                        "output": "Circular",
                        "explanation": "Starting at (0,0), the robot follows a path that returns to the origin."
                    },
                    {
                        "input": "GGGGL",
                        "output": "Not Circular",
                        "explanation": "The robot does not return to its original location after following this path."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use maths.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "visa"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "string isCircular(string path){\n    int x = 0, y = 0; //initialize x and y coordinates\n    int dir = 0; //initialize direction as 0 (North)\n\n  for (int i=0; i < path.length(); i++)  { \n      char move = path[i]; //get the current move\n\n      //update direction based on the move\n      if (move == 'R') \n        dir = (dir + 1)%4; \n      else if (move == 'L') \n        dir = (4 + dir - 1)%4; \n\n      //update x and y coordinates based on the direction\n      else { \n         if (dir == 0) \n            y++; \n         else if (dir == 1) \n            x++; \n         else if (dir == 2) \n            y--; \n         else \n            x--; \n      } \n  } \n  \n    //check if the final coordinates are (0,0) and return the result\n    if (x == 0 && y == 0) return \"Circular\";\n    else return \"Not Circular\";\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}