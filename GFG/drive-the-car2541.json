{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702875,
            "title": "Drive the car",
            "titleSlug": "drive-the-car2541",
            "content": "<p><span >You are a car driver tasked with driving on a track divided into sub-tracks. The car can travel \"k\" kilometers on each sub-track. If the car can't cover a sub-track, you can add petrol, with each unit increasing the car's range by one kilometer. Return the <strong>minimum units of petrol</strong> needed for the car to cover all sub-tracks. If no extra petrol is required, return<strong> -1</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 5, 4, 5, 2], k = 7\n<strong>Output: </strong>-1\n<strong>Explanation: </strong>No extra petrol required, as k is greater than all the elemnts in the array hence <strong>-1</strong>.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 6, 3, 5, 2], k = 4\n<strong>Output: </strong>2\n<strong>Explanation: </strong>You are given 5 sub-tracks with different kilometers. Your car can travel 4 km on each sub-track. So, when you come on sub-track 2nd you have to cover 6 km of distance, so you need to have 2 unit of petrol more to cover the distance, for 3rd sub-track, your car can travel 4km  and you need extra 1 unit of pertrol.So if you add 2 units of petrol at each sub-track you can cover all the subtracks.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup></span><br /><span >1 &le; k &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A car driver needs to navigate a track divided into sub-tracks. The car can travel 'k' kilometers on each sub-track. If 'k' is insufficient to cover a sub-track, petrol can be added, increasing the car's range by one kilometer per unit. Determine the minimum units of petrol required to complete all sub-tracks. If no extra petrol is needed, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= k <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [2, 5, 4, 5, 2], k = 7",
                        "output": "-1",
                        "explanation": "The car's initial range 'k' is 7, which is greater than or equal to the distance of each sub-track. Therefore, no additional petrol is needed."
                    },
                    {
                        "input": "arr[] = [1, 6, 3, 5, 2], k = 4",
                        "output": "2",
                        "explanation": "The car's initial range is 4. To complete the second sub-track (6 km), 2 units of petrol are required. No further petrol is needed for any other subtrack as 2 is already greater or equal to rest of the petrol needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Find the maximum sub-track distance. If <code>k</code> is greater than or equal to the maximum, return <code>-1</code>. Otherwise, return the difference between the maximum sub-track distance and <code>k</code>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the difference between the maximum element in the array and\n    // a given number k\n    int required(vector<int>& arr, int k) {\n        int n = arr.size();  // Get the size of the array\n        int maxElement = -1; // Initializing the maximum element to -1\n\n        // Iterating over the array to find the maximum element\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > maxElement)\n                maxElement = arr[i];\n        }\n\n        // If k is greater than or equal to the maximum element, return -1\n        if (k >= maxElement)\n            return -1;\n\n        // Return the difference between the maximum element and k\n        return (maxElement - k);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to calculate the difference between the maximum element in the array and\n    // a given number k\n    public int required(int[] arr, int k) {\n        int maxElement = -1; // Initializing the maximum element to -1\n\n        // Iterating over the array to find the maximum element\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > maxElement) maxElement = arr[i];\n        }\n\n        // If k is greater than or equal to the maximum element, return -1\n        if (k >= maxElement) return -1;\n\n        // Return the difference between the maximum element and k\n        return maxElement - k;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to calculate the difference between the maximum element in the array and a given number k\n    def required(self, arr, k):\n        max_element = max(arr)  # Find the maximum element in the array\n\n        # If k is greater than or equal to the maximum element, return -1\n        if k >= max_element:\n            return -1\n\n        # Return the difference between the maximum element and k\n        return max_element - k\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to calculate the difference between the maximum element in the array and\n    // a given number k\n    required(arr, k) {\n        // Initialize maxElement to the smallest possible value\n        let maxElement = -Infinity;\n\n        // Iterate through the array to find the maximum element\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] > maxElement) {\n                maxElement = arr[i];\n            }\n        }\n\n        // If k is greater than or equal to the maximum element, return -1\n        if (k >= maxElement) return -1;\n\n        // Return the difference between the maximum element and k\n        return maxElement - k;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}