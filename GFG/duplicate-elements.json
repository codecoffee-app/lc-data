{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700914,
            "title": "Duplicate Elements",
            "titleSlug": "duplicate-elements",
            "content": "<div class=\"problemQuestion\">\n<p dir=\"ltr\"><span style=\"font-size: 18px;\">You are given an array <strong>A</strong> of size <strong>N.&nbsp;</strong></span><span style=\"font-size: 18px;\">The array contains almost distinct elements with some duplicated. You have to print the elements in sorted order which appears more than once.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Input Format:</strong><br />The first line of input contains <strong>T</strong>, denoting the number of testcases. T testcases follow. Each testcase contains two lines of input.&nbsp; The first line of input contains size of array N. The second line contains N integers separated by spaces.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Output Format:</strong><br />For each test case, in a new line, print the required answer. If there are no duplicates print <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span><br /><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; color: #000000; font-family: arial;\">Your task is to complete the function </span><strong>SortedDuplicates(arr, n)</strong><span style=\"background-color: transparent; color: #000000; font-family: arial;\"> which accepts array and its size as an argument. </span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= T &lt;= 100<br />1 &lt;= N &lt;= 100<br />1 &lt;= A<sub>i</sub> &lt;= 10<sup>6</sup></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:<br />Input:</strong><br />1<br />9<br />3 4 5 7 8 1 2 1 3</span><br /><span style=\"font-size: 18px;\"><strong>Output:</strong><br />1 3</span></p>\n</div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array **A** of size **N**, identify and print the elements that appear more than once, sorted in ascending order.  The array contains potentially duplicated elements.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 100 (Size of the array)",
                    "1 <= A<sub>i</sub> <= 10<sup>6</sup> (Value range of array elements)"
                ],
                "testcases": [
                    {
                        "input": "9\n3 4 5 7 8 1 2 1 3",
                        "output": "1 3",
                        "explanation": "The numbers 1 and 3 appear more than once in the input array. After sorting, the output is 1 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": null,
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Geeks\n{\n    public static void SortedDuplicates(int arr[], int n)\n    {\n       // Create a HashMap to store the frequency of elements\n       HashMap<Integer, Integer> hm = new HashMap<>();\n       \n       // Iterate through the array and increment the frequency of each element in the HashMap\n       for(int i = 0; i < n; i++)\n       {\n           int key = arr[i];\n           if(hm.containsKey(key))\n           {\n               int freq = hm.get(key);\n               freq++;\n               hm.put(key, freq);\n           }\n           else\n           hm.put(key, 1);\n       }\n       \n       // Create a TreeSet to store the duplicate elements in sorted order\n       TreeSet<Integer> ts = new TreeSet<>(); \n       \n       // Iterate through the HashMap and add the duplicate elements to the TreeSet\n       for(Map.Entry<Integer, Integer> itr: hm.entrySet())\n       {\n           if(itr.getValue() > 1)\n           ts.add(itr.getKey());\n       }\n       \n       // Iterate through the TreeSet and print the duplicate elements\n       Iterator itr = ts.iterator();\n       if(ts.size()> 0)\n       {\n           while(itr.hasNext())\n           System.out.print(itr.next() + \" \");\n       }\n       else\n       System.out.print(-1);\n       \n    }\n    \n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}