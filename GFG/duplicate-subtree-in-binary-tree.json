{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700470,
            "title": "Duplicate Subtree",
            "titleSlug": "duplicate-subtree-in-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree, find out whether it&nbsp;contains a duplicate sub-tree of size two&nbsp;or more, or not.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> Two same leaf nodes are not considered as subtree as size of a leaf node is one.&nbsp;</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1 :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input : </strong>\n\\t\\t   1\n\\t\\t /   \\ \n\\t     2\\t 3\n\\t   /   \\\\t \\    \n\\t  4     5\\t 2     \n\\t\\t\\t   /  \\    \n\\t\\t\\t  4    5\n<strong>Output :</strong> 1\n<strong>Explanation : </strong>\n    2     \n  /   \\    \n 4     5\nis the duplicate sub-tree.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2 :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input : </strong>\n\\t\\t   1\n\\t\\t /   \\ \n\\t     2\\t 3\n<strong>Output: </strong>0\n<strong>Explanation:</strong> There is no duplicate sub-tree \nin the given binary tree.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>dupSub()</strong>&nbsp;which takes root of the tree as the only argument and returns 1 if the binary tree contains a duplicate sub-tree of size two&nbsp;or more, else 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> </span><span style=\"font-size: 18px;\">O(N)<br /></span><span style=\"font-size: 18px;\"><strong>Expected Space Complexity:</strong> O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />0 &le; Data of nodes &le; 12<br /></span>1&nbsp;<span style=\"font-size: 18px;\">&le; Number of nodes&nbsp;</span><span style=\"font-size: 18px;\">&le; 10<sup>5</sup></span>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, determine if it contains a duplicate subtree of size two or more. Note that two identical leaf nodes are not considered a duplicate subtree because a leaf node has a size of one.",
                "constraints": [
                    "0 \u2264 Data of nodes \u2264 12",
                    "1 \u2264 Number of nodes \u2264 10^5"
                ],
                "testcases": [
                    {
                        "input": "    1\n   /   \\ \n  2\t 3\n /   \\    \n4     5\t 2     \n\t\t   /  \\    \n\t\t  4    5",
                        "output": "1",
                        "explanation": "The subtree with root node '2' having children '4' and '5' is present more than once in the given binary tree."
                    },
                    {
                        "input": "    1\n   /   \\ \n  2\t 3",
                        "output": "0",
                        "explanation": "There are no duplicate subtrees of size two or more in the provided binary tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">An Efficient solution based on<a href=\"https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/\"> tree serialization</a> and <a href=\"https://www.geeksforgeeks.org/hashing-set-1-introduction/\">hashing</a>. The idea is to serialize subtrees as strings and store the strings in hash table. Once we find a serialized tree (which is not a leaf) already existing in hash-table, we return true.&nbsp; </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Backend complete function template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    unordered_set<string> subtrees;\r\n    char MARKER = '$'; \r\n    // This function returns empty string if tree\r\n    // contains a duplicate subtree of size 2 or more.\r\n    string dupSubUtil(Node *root)\r\n    {\r\n        string s = \"\";\r\n     \r\n        // If current node is NULL, return marker\r\n        if (root == NULL)\r\n            return s + MARKER;\r\n     \r\n        // If left subtree has a duplicate subtree.\r\n        string lStr = dupSubUtil(root->left);\r\n        if (lStr.compare(s) == 0)\r\n           return s;\r\n     \r\n        // Do same for right subtree\r\n        string rStr = dupSubUtil(root->right);\r\n        if (rStr.compare(s) == 0)\r\n           return s;\r\n     \r\n        // Serialize current subtree\r\n        s = s + root->data + lStr + rStr;\r\n     \r\n        // If current subtree already exists in hash\r\n        // table. [Note that size of a serialized tree\r\n        // with single node is 3 as it has two marker\r\n        // nodes.\r\n        if (s.length() > 3 and \r\n            subtrees.find(s) != subtrees.end())\r\n           return \"\";\r\n     \r\n        subtrees.insert(s);\r\n     \r\n        return s;\r\n    }\r\n    \r\n    int dupSub(Node *root)\r\n    {\r\n    \t//subtrees.clear();\r\n    \tstring str = dupSubUtil(root);\r\n     \r\n        if(str.compare(\"\") == 0)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    private HashSet<String> set; // using a HashSet to store the serialized string representations of subtrees\n    boolean found = false; // flag to indicate if a duplicate subtree has been found\n\n    int dupSub(Node root) {\n        set = new HashSet<String>(); // initialize the HashSet\n        dfs(root); // perform depth-first search on the tree\n        if (found) return 1; // if a duplicate subtree has been found, return 1\n        return 0; // if no duplicate subtree has been found, return 0\n    }\n\n    private String dfs(Node root) {\n        StringBuilder s = new StringBuilder(); // create a StringBuilder to construct the serialized string representation of the subtree\n        if (root == null) {\n            return \"#\"; // return \"#\" to represent a null node\n        }\n        if (root.left==null && root.right==null) return root.data+\" \"; // return the data of a leaf node followed by a space\n\n        s.append(root.data+\" \"); // append the data of the current node followed by a space\n        s.append(dfs(root.left)); // recursively append the serialized string representation of the left subtree\n        s.append(dfs(root.right)); // recursively append the serialized string representation of the right subtree\n        \n        if (set.contains(s.toString())) found = true; // if the serialized string representation of the subtree is already in the HashSet, set the found flag to true\n        else set.add(s.toString()); // otherwise, add the serialized string representation of the subtree to the HashSet\n        \n        return s.toString(); // return the serialized string representation of the subtree\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "import sys\r\nsys.setrecursionlimit(10**6)\r\n\r\n\r\nclass Solution:\r\n    def __init__(self):\r\n        self.subtrees = set()\r\n        self.MARKER = '$'\r\n    \r\n    def dupSubUtil(self, root):\r\n        s = \"\"\r\n\r\n        # If current node is None, return marker\r\n        if root is None:\r\n            return s + self.MARKER\r\n\r\n        # If left subtree has a duplicate subtree\r\n        lStr = self.dupSubUtil(root.left)\r\n        if lStr == s:\r\n            return s\r\n\r\n        # Do the same for the right subtree\r\n        rStr = self.dupSubUtil(root.right)\r\n        if rStr == s:\r\n            return s\r\n\r\n        # Serialize the current subtree\r\n        s = s + str(root.data) + '_' + lStr + '_' + rStr\r\n\r\n        if (lStr != '$' or rStr != '$') and s in self.subtrees:\r\n            # print(s)\r\n            return \"\"\r\n\r\n        self.subtrees.add(s)\r\n\r\n        return s\r\n\r\n    def dupSub(self, root):\r\n        result = self.dupSubUtil(root)\r\n\r\n        if result == \"\":\r\n            return 1\r\n        else:\r\n            return 0\r\n            ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}