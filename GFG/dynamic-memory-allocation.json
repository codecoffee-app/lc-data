{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706546,
            "title": "Dynamic Memory Allocation",
            "titleSlug": "dynamic-memory-allocation",
            "content": "<p><span style=\"font-size:18px\">You are given a integer <strong>n</strong>. You need to complete the function getArray() which will return an array with n elements all as 1.&nbsp;You have&nbsp;to dynamically allocate memory of size n.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>3\n<strong>Output: \n</strong>1 1 1\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>5\n<strong>Output: \n</strong>1 1 1 1 1</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task</strong>:<br />\nYou only need to complete the function <strong>getArray()</strong> that takes <strong>n</strong>&nbsp;as parameter and returns the required array.&nbsp;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use malloc/calloc for dynamic memory allocation.</p>"
        ],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nint *getArray(int n)\n{   \n    //You can use\n    //int *ptr = calloc(n, sizeof(int)); or int *ptr = malloc(sizeof(int) * n);\n    int *ptr = malloc(sizeof(int) * n);\n    \n    for(int i = 0; i < n; i++)\n        ptr[i] = 1;\n    return ptr;\n}",
                "lang_text": "c"
            }
        ],
        "platform": "GFG"
    }
}