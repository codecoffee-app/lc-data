{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 891315,
            "title": "Earliest Common Slot",
            "titleSlug": "earliest-common-slot",
            "content": "<p><span >You are given two lists of availability time slots, <strong>slots1 and slots2</strong>, for two people. Each slot is represented as [start, end], and it is gurranted that within each list, no two slots overlap (i.e., for any two intervals, either <strong>start1&gt;end2 or start2&gt;end1</strong>). Given a metting duration <strong>d</strong>, return the earliest common time slot of length of least d. If no such slot exits, return an empty array.</span></p>\n<p><strong><span >Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>slots1 = [[10,50], [60,120], [140,210]], slots2 = [[0,15], [60,70]], d = 8\n<strong>Output:</strong> [60,68]\n<strong>Explanation:</strong> </span><span >The only overlap is [60,70] (10 minutes), which is enough for an 8-minute meeting, so answer is [60,68]</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>slots1 = [[10,50], [60,120], [140,210]], slots2 = [[0,15], [60,70]], d = 12<br /></span><span style=\"font-size: 18px;\"><strong>Output:</strong> []<br /><strong>Explanation:</strong> </span><span ><span >The only overlap is [60, 70] (10 minutes), but 12 minutes are needed, so no valid slot exists.</span></span></pre>\n<p><span ><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">Constraints:</strong><br style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px; white-space: normal;\" /><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">1 &le; slots1.size(), slots2.size()&nbsp; &le; 10<sup>5</sup></span><br style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px; white-space: normal;\" /><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">-10<sup>9</sup> &le; slots1[i], slots2[i] &le; 10<sup>9</sup><br /></span></span><span ><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">1 &le; d &le; 10<sup>6</sup><br /></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted lists of availability time slots, `slots1` and `slots2`, where each slot is represented as `[start, end]` and slots within each list do not overlap. Find the earliest common time slot of length at least `d`. Return the common time slot as `[start, start + d]`. If no such slot exists, return an empty array `[]`.",
                "constraints": [
                    "1 <= slots1.length, slots2.length <= 10^5",
                    "-10^9 <= slots1[i], slots2[i] <= 10^9",
                    "1 <= d <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "slots1 = [[10,50], [60,120], [140,210]], slots2 = [[0,15], [60,70]], d = 8",
                        "output": "[60,68]",
                        "explanation": "The intersection between slots1 and slots2 is [60, 70] which has a duration of 10 minutes. Since 10 >= d (8), a valid meeting slot can start at 60 and last for 8 minutes."
                    },
                    {
                        "input": "slots1 = [[10,50], [60,120], [140,210]], slots2 = [[0,15], [60,70]], d = 12",
                        "output": "[]",
                        "explanation": "The intersection between slots1 and slots2 is [60, 70] which has a duration of 10 minutes. Since 10 < d (12), there is no valid meeting slot available."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Consider arranging each list in increasing order based on the start times.</p>",
            "<p>Imagine scanning both lists at once, moving forward where the intervals finish sooner.</p>",
            "<p>Focus on where two intervals overlap and see if that gap meets your meeting time requirement.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "paypal",
            "google",
            "uber"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> commonSlot(vector<vector<int>> &a, vector<vector<int>> &b, int d) {\n        // Sorting the slots arrays based on start times\n        sort(a.begin(), a.end());\n        sort(b.begin(), b.end());\n\n        int pointer1 = 0, pointer2 = 0;\n\n        while (pointer1 < a.size() && pointer2 < b.size()) {\n            // Finding the boundaries of the intersection, or the common slot\n            int intersectLeft = max(a[pointer1][0], b[pointer2][0]);\n            int intersectRight = min(a[pointer1][1], b[pointer2][1]);\n            if (intersectRight - intersectLeft >= d) {\n                return {intersectLeft, intersectLeft + d};\n            }\n\n            // Always move the pointer of the slot that ends earlier\n            if (a[pointer1][1] < b[pointer2][1]) {\n                pointer1++;\n            } else {\n                pointer2++;\n            }\n        }\n        return {}; // Return an empty array if no common time slot found\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n//  Function to compute the earliest common time slot of length at least d\n//  Returns {start, start+d} if such a slot exists, otherwise returns an empty array.\nclass solution {\n    public int[] commonSlot(List<int[]> arr1, List<int[]> arr2, int d) {\n        // Sort both lists based on start times.\n        Collections.sort(arr1, (a, b) -> Integer.compare(a[0], b[0]));\n        Collections.sort(arr2, (a, b) -> Integer.compare(a[0], b[0]));\n\n        int i = 0, j = 0;\n        // Use two pointers to traverse both lists.\n        while (i < arr1.size() && j < arr2.size()) {\n            // Determine the overlapping interval between arr1[i] and arr2[j]\n            int start = Math.max(arr1.get(i)[0], arr2.get(j)[0]);\n            int end = Math.min(arr1.get(i)[1], arr2.get(j)[1]);\n            // Check if the overlap can accommodate the meeting duration d\n            if (end - start >= d) return new int[] {start, start + d};\n            // Move the pointer which has the earlier finishing time\n            if (arr1.get(i)[1] < arr2.get(j)[1])\n                i++;\n            else\n                j++;\n        }\n        return new int[0]; // Return an empty array if no common slot is found\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# Function to compute the earliest common time slot of length at least d\n# Returns [start, start+d] if such a slot exists, otherwise returns an empty list.\nclass solution:\n\n    @staticmethod\n    def commonSlot(arr1, arr2, d):\n        # Sort both lists based on start time.\n        arr1.sort(key=lambda x: x[0])\n        arr2.sort(key=lambda x: x[0])\n        i, j = 0, 0\n        # Use two pointers to traverse both lists.\n        while i < len(arr1) and j < len(arr2):\n            # Determine the overlapping interval between arr1[i] and arr2[j]\n            start = max(arr1[i][0], arr2[j][0])\n            end = min(arr1[i][1], arr2[j][1])\n            # Check if the overlap can accommodate the meeting duration d\n            if end - start >= d:\n                return [start, start + d]\n            # Move the pointer which has the earlier finishing time\n            if arr1[i][1] < arr2[j][1]:\n                i += 1\n            else:\n                j += 1\n        return []  # Return an empty list if no common slot is found\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass solution {\n    static commonSlot(arr1, arr2, d) {\n        // Sort both lists based on start times.\n        arr1.sort((a, b) => a[0] - b[0]);\n        arr2.sort((a, b) => a[0] - b[0]);\n\n        let i = 0, j = 0;\n        // Use two pointers to traverse both lists.\n        while (i < arr1.length && j < arr2.length) {\n            // Determine the overlapping interval between arr1[i] and arr2[j]\n            let start = Math.max(arr1[i][0], arr2[j][0]);\n            let end = Math.min(arr1[i][1], arr2[j][1]);\n            // Check if the overlap can accommodate the meeting duration d\n            if (end - start >= d) return [ start, start + d ];\n            // Move the pointer which has the earlier finishing time\n            if (arr1[i][1] < arr2[j][1])\n                i++;\n            else\n                j++;\n        }\n        return []; // Return an empty array if no common slot is found\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}