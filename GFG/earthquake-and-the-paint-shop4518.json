{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705701,
            "title": "Earthquake and the Paint Shop",
            "titleSlug": "earthquake-and-the-paint-shop4518",
            "content": "<p><span style=\"font-size:18px\">Geek&#39;s&nbsp;Paint Shop is one of the famous shop in Geekland,&nbsp;but 2014 Earthquake caused disarrangement of the items in his shop. Each item in his shop is a 40-digit alpha numeric code .<br />\r\nNow Chunky wants to retain the reputation of his shop, for that he has to arrange all the distinct items in lexicographical order.<br />\r\nYour task is to arrange the all the distinct items in lexicographical ascending order and print them along with their count.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\nA[] =\r\n[&quot;2234597891 zmxvvxbcij 8800654113 jihgfedcba&quot;,\r\n&quot;1234567891 abcdefghij 9876543219 jihgfedcba&quot;,\r\n&quot;2234597891 zmxvvxbcij 8800654113 jihgfedcba&quot;]\r\n<strong>Output:</strong>\r\n1234567891 abcdefghij 9876543219 jihgfedcba 1\r\n2234597891 zmxvvxbcij 8800654113 jihgfedcba 2\r\n<strong>Explanation:</strong>\r\nWe have 3 items (40 digit alphanumeric codes) \r\nhere. We arrange the items based on the \r\nlexicographical order of their alpha-numeric \r\ncode. Distinct items are printed only once. \r\nThe count of the items describes how many \r\nsuch items are there, so items that appear \r\nmore than once have their count greater than 1.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 2\r\nA[] =\r\n[&quot;3122049353 onafrnbhtr 9822827304 yzfhdgzcvx&quot;, \r\n&quot;2992299540 lpvkgykmlk 6946169466 vdqwvywwgg&quot;, \r\n<strong>Output:</strong>\r\n2992299540 lpvkgykmlk 6946169466 vdqwvywwgg  1\r\n3122049353 onafrnbhtr 9822827304 yzfhdgzcvx  1\r\n<strong>Explanation:</strong>\r\nOut of the 2 items here no one is repeated.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>sortedStrings()</strong> which takes an integer <strong>N</strong> and an array of strings <strong>A[ ]</strong> and returns the array in sorted order along with the frequency&nbsp;of each distinct string.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(NlogN)<br />\r\n<strong>Expected Auxillary Space:</strong>O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek's Paint Shop needs help arranging their items after an earthquake. Each item is a 40-digit alphanumeric code. The task is to sort the distinct items lexicographically and output each item along with its count.",
                "constraints": [
                    "1 <= N <= 10000"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nA[] = [\"2234597891 zmxvvxbcij 8800654113 jihgfedcba\", \"1234567891 abcdefghij 9876543219 jihgfedcba\", \"2234597891 zmxvvxbcij 8800654113 jihgfedcba\"]",
                        "output": "1234567891 abcdefghij 9876543219 jihgfedcba 1\n2234597891 zmxvvxbcij 8800654113 jihgfedcba 2",
                        "explanation": "The input contains three 40-digit alphanumeric codes. After sorting lexicographically and counting duplicates, '1234567891 abcdefghij 9876543219 jihgfedcba' appears once, and '2234597891 zmxvvxbcij 8800654113 jihgfedcba' appears twice."
                    },
                    {
                        "input": "N = 2\nA[] = [\"3122049353 onafrnbhtr 9822827304 yzfhdgzcvx\", \"2992299540 lpvkgykmlk 6946169466 vdqwvywwgg\"]",
                        "output": "2992299540 lpvkgykmlk 6946169466 vdqwvywwgg 1\n3122049353 onafrnbhtr 9822827304 yzfhdgzcvx 1",
                        "explanation": "The input contains two distinct 40-digit alphanumeric codes. After sorting lexicographically, each appears once."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use a map or Frequency array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nstruct alphanumeric {\n    string name; // data structure for storing name\n    int count; // data structure for storing count\n};\nclass Solution {\n  public:\n    // Function to sort strings based on count\n    vector<alphanumeric> sortedStrings(int N, vector<string> A) {\n        map<string, int> mp; // map for storing count of strings\n        for (auto u : A) mp[u]++; // Iterate through vector A and update count in map\n        vector<alphanumeric> ans(mp.size()); // Create vector of size equal to number of unique strings\n        int c = 0; // Counter for iterating through the vector\n        for (auto u : mp) {\n            ans[c].name = u.first; // Store string in name field of alphanumeric struct\n            ans[c].count = u.second; // Store count in count field of alphanumeric struct\n            c++;\n        }\n        return ans; // Return the sorted vector\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class alphanumeric {\n    public String name; // declaring a String variable to store the name\n    public int count; // declaring an integer variable to store the count\n\n    alphanumeric(String name, int count) { // constructor to initialize the name and count variables\n        this.name = name; // assigning the passed name value to the name variable\n        this.count = count; // assigning the passed count value to the count variable\n    }\n};\n\nclass Solution {\n    alphanumeric[] sortedStrings(int N, String A[]) {\n        TreeMap<String,Integer> tm=new TreeMap<>(); // creating a TreeMap to store the strings and their counts\n\n        for(int i=0;i<N;i++){ // iterating through the input array\n            tm.put(A[i],tm.getOrDefault(A[i],0)+1); // adding each string to the TreeMap with its count incremented\n        }\n\n        alphanumeric ans[]=new alphanumeric[tm.size()]; // creating an alphanumeric array with the size of the TreeMap\n        int in=0; // initializing an index variable\n\n        for(Map.Entry<String,Integer> e:tm.entrySet()){ // iterating through the entries of the TreeMap\n            ans[in++]=new alphanumeric(e.getKey(),e.getValue()); // creating a new alphanumeric object with the key and value of each entry and storing it in the ans array\n        }\n\n        return ans; // returning the ans array\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class alphanumeric:\n    #defining a class to store alphanumeric data with name and count attributes\n    def __init__(self,name,count):\n        self.name=name\n        self.count=count\n\nclass Solution:\n    def sortedStrings(self,N,A):\n        #creating a dictionary to store counts of each element in A\n        mp={}\n        for el in A:\n            if el not in mp:\n                mp[el]=1\n            else :\n                mp[el]+=1\n\n        #creating a list of alphanumeric objects with empty names and counts 0\n        ans=[alphanumeric(\"\",0) for _ in range(len(mp))]\n        i=0\n        #iterating over the sorted keys of the dictionary\n        for el in sorted(mp):\n            #assigning the name and count attributes of the alphanumeric object\n            ans[i].name=el\n            ans[i].count=mp[el]\n            i+=1\n\n        return ans",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {alphanumeric[]} A\n * @returns {alphanumeric[]}\n*/\n\nclass alphanumeric {\n    //defining a class to store alphanumeric data with name and count attributes\n    constructor(name,count) {\n        this.name = name;\n        this.count = count;\n    }\n}\n\nclass Solution {\n    sortedStrings(N, A) {\n        //creating a dictionary to store counts of each element in A\n        let mp = {};\n        for (let el of A) {\n            if (el in mp) {\n                mp[el]++;\n            } else {\n                mp[el] = 1;\n            }\n        }\n\n        //creating a list of alphanumeric objects with empty names and counts 0\n        let ans = Array(Object.keys(mp).length).fill(0).map(() => new alphanumeric(\"\", 0));\n        let i = 0;\n\n        //iterating over the sorted keys of the dictionary\n        let sortedKeys = Object.keys(mp).sort();\n        for (let el of sortedKeys) {\n            //assigning the name and count attributes of the alphanumeric object\n            ans[i].name = el;\n            ans[i].count = mp[el];\n            i++;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}