{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705483,
            "title": "Easy Query",
            "titleSlug": "easy-query3301",
            "content": "<p><span style=\"font-size:18px\">You are given an array nums&nbsp;of size n&nbsp;and q&nbsp;queries.&nbsp;Now for each query of the form l, r&nbsp;and k, output the kth smallest number in sub-array between l&nbsp;and r.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>nums = {4, 1, 2, 2, 3},\nQuery = {{1, 5, 2}, {3, 5, 3}}\n<strong>Output: </strong>{2, 3}\n<strong>Explanation: </strong>For the 1st query 2nd smallest in\n[1, 5] is 2. For the 2nd query 3rd smallest in\n[3, 5] is 3.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>nums = {1, 2, 3, 4, 5},\nQuery = {{2, 5, 1}}\n<strong>Output: </strong>{2}\n<strong>Explanation: </strong>The 1st smallest in [2, 5] is 2.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anyhting. Your Task is to complete the function&nbsp;<strong>FindQuery()&nbsp;</strong>which takes nums and Query as input parameter and returns a list containing kth smallest for every query.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(nlog(n))<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(n)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= n &lt;= 15000<br />\n1 &lt;= nums[i] &lt;= n<br />\n1 &lt;= no. of queries &lt;= 10<sup>4</sup><br />\n1 &lt;= l &lt;= r &lt;= n<br />\n1 &lt;= k &lt;= r-l+1</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `nums` of size `n` and `q` queries, for each query of the form `l`, `r`, and `k`, find the k-th smallest number in the subarray of `nums` from index `l` to `r` (inclusive). Note that indices are 1-based.",
                "constraints": [
                    "1 <= n <= 15000",
                    "1 <= nums[i] <= n",
                    "1 <= number of queries <= 10^4",
                    "1 <= l <= r <= n",
                    "1 <= k <= r - l + 1"
                ],
                "testcases": [
                    {
                        "input": "nums = {4, 1, 2, 2, 3}, Query = {{1, 5, 2}, {3, 5, 3}}",
                        "output": "{2, 3}",
                        "explanation": "For the first query (1, 5, 2), the subarray [4, 1, 2, 2, 3] is considered, and the 2nd smallest element is 2. For the second query (3, 5, 3), the subarray [2, 2, 3] is considered, and the 3rd smallest element is 3."
                    },
                    {
                        "input": "nums = {1, 2, 3, 4, 5}, Query = {{2, 5, 1}}",
                        "output": "{2}",
                        "explanation": "For the query (2, 5, 1), the subarray [2, 3, 4, 5] is considered, and the 1st smallest element is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>use segment tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Segment-Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// including necessary header files\n\nconst int MAX = 100009;\nint a[MAX], b[MAX], root[MAX], p[MAX];\nint t[MAX * 25], tn, L[MAX * 25], R[MAX * 25];\n\n// Solution class\nclass Solution {\npublic:\n\t// Function to build the tree\n\tint build_tree(int le, int ri) {\n\t\tif(le == ri) return tn++;\n\t\tint mi = (le + ri) / 2;\n\t\tint id = tn++;\n\t\tL[id] = build_tree(le, mi);\n\t\tR[id] = build_tree(mi + 1, ri);\n\t\treturn id;\n\t}\n\n\t// Function to update the tree\n\tint update(int oid, int le, int ri, int x) {\n\t\tint id = tn++;\n\t\tif(le == ri) { t[id] = t[oid] + 1; return id; }\n\t\tL[id] = L[oid]; R[id] = R[oid];\n\t\tint mi = (le + ri) / 2;\n\t\tif(x <= mi) L[id] = update(L[oid], le, mi, x);\n\t\telse R[id] = update(R[oid], mi + 1, ri, x);\n\t\tt[id] = t[L[id]] + t[R[id]];\n\t\treturn id;\n\t}\n\n\t// Function to perform the query\n\tint query(int lid, int rid, int le, int ri, int k) {\n\t\tif(le == ri) return le;\n\t\tint mi = (le + ri) / 2;\n\t\tif(t[L[rid]] - t[L[lid]] >= k) return query(L[lid], L[rid], le, mi, k);\n\t\telse return query(R[lid], R[rid], mi + 1, ri, k - (t[L[rid]] - t[L[lid]]));\n\t}\n\t\n\t// Function to perform the main task\n\tvector<int>FindQuery(vector<int>nums, vector<vector<int>>Query){\n\t\tint n = nums.size();\n        \n        // Initializing necessary arrays\n        memset(a,0,sizeof a);\n        memset(b,0,sizeof b);\n        memset(root,0,sizeof root);\n        memset(p,0,sizeof p);\n        \n        // Storing the elements and their indices in arrays \"a\" and \"p\" respectively\n        for(int i = 0; i < nums.size(); i++){\n        \ta[i] = nums[i];\n        \tp[i] = i;\n        }\n        \n        // Sorting the array \"p\" based on the values in array \"a\"\n    \tsort(p, p + n, [](int i, int j) { return a[i] < a[j]; });\n    \t\n    \t// Updating array \"b\" based on the sorted indices\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tb[p[i]] = i;\n\t\t\n\t\t// Building the initial tree\n\t\troot[0] = build_tree(0, n - 1);\n\t\t\n\t\t// Updating subsequent trees based on the previous tree and the current index\n\t\tfor(int i = 1; i <= n; i++)\n\t\t\troot[i] = update(root[i - 1], 0, n - 1, b[i-1]);\n\t\t\n\t\t// Initializing the answer vector\n\t\tvector<int>ans;\n\t\t\n\t\t// Performing the queries and storing the answers in the answer vector\n\t\tfor(auto i: Query){\n\t\t\tint l = i[0], r = i[1], k = i[2];\n\t\t\tans.push_back(a[p[query(root[l - 1], root[r], 0, n - 1, k)]]);\n\t\t}\n\t\t\n\t\t// Returning the answer vector\n\t\treturn ans;\n\t}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}