{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703517,
            "title": "Easy string",
            "titleSlug": "easy-string2212",
            "content": "<p><span style=\"font-size:20px\">You are given the string S . Compress the string&nbsp;when lower and upper cases are the same. In compressed string characters should be in lowercase.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>S = &quot;aaABBb&quot;\n<strong>Output:</strong> &quot;3a3b&quot;\n<strong>Explanation</strong>: As &#39;a&#39; appears 3 times\nconsecutively and &#39;b&#39; also 3 times,\nand &#39;b&#39; and &#39;B&#39; considered as same. \n</span></pre>\n\n<p><span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: S = &quot;aaacca&quot;\n<strong>Output:</strong> &quot;3a2c1a&quot;\n<strong>Explanation</strong>: As &#39;a&#39; appears 3 times\nconsecutively and &#39;c&#39; also 2 times,\nand then &#39;a&#39; 1 time.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>transform()</strong>&nbsp;which takes the string <strong>S&nbsp;</strong>as inputs and returns the compressed string.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(|S|)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &le; |S| &le; 2 * 10<sup>5</sup></span></p>\n\n<p><span style=\"font-size:18px\">S contains only lowercase and uppercase characters.</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S`, compress it by counting consecutive occurrences of the same character (case-insensitively). The compressed string should consist of the counts followed by the lowercase version of the character.",
                "constraints": [
                    "1 <= |S| <= 2 * 10^5",
                    "S contains only lowercase and uppercase characters."
                ],
                "testcases": [
                    {
                        "input": "aaABBb",
                        "output": "3a3b",
                        "explanation": "The character 'a' (or 'A') appears 3 times consecutively, and 'b' (or 'B') also appears 3 times consecutively. Therefore the compressed string is '3a3b'."
                    },
                    {
                        "input": "aaacca",
                        "output": "3a2c1a",
                        "explanation": "The character 'a' appears 3 times consecutively, then 'c' appears 2 times consecutively, and finally 'a' appears 1 time. The compressed string is '3a2c1a'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the two pointer technique to count the frequency of the consecutive same characters.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "string transform(string s){\n    transform(s.begin(), s.end(), s.begin(), ::tolower); // Convert the string to lowercase.\n    int c = 1; // Initialize a counter variable to keep track of repeated characters.\n    string ans; // Initialize an empty string to store the transformed string.\n    for(int i = 1; i < s.length(); i++){ // Iterate through the string.\n        if(s[i] == s[i - 1]) { // If the current character is equal to the previous character,\n            c++; // increment the counter.\n            continue; // Continue to the next iteration.\n        }\n        else{ // If the current character is different from the previous character,\n            ans += to_string(c); // append the count of repeated characters to the result string.\n            ans += s[i - 1]; // append the previous character to the result string.\n            c = 1; // reset the counter.\n        }\n    }\n    ans += to_string(c); // append the count of the last repeated characters to the result string.\n    ans += s[s.length() - 1]; // append the last character to the result string.\n    return ans; // return the transformed string.\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution \n{ \n    // Function to convert uppercase character to lowercase character\n    char toLower(char ch)\n    {\n        // If the character is between 'A' and 'Z',\n        // add 32 to convert it to lowercase\n        if(ch>='A'&&ch<='Z')\n            return (char)(ch+32);\n        return ch;\n    }\n    \n    // Function to transform the input string\n    String transform(String s) \n    {\n        int c = 0; // Variable to count consecutive characters\n        StringBuilder ans = new StringBuilder(); // StringBuilder to store transformed string\n        \n        for(int i=0;i<s.length();i++)\n        {\n            c++; // Increment the count\n            \n            // Checking if the current character is equal to the next character (ignoring case)\n            if(i+1<s.length()&&toLower(s.charAt(i))==toLower(s.charAt(i+1)))\n                continue; // If equal, continue to next iteration\n            \n            // Append the count and the lowercase character to the answer string\n            ans.append(Integer.toString(c));\n            ans.append(toLower(s.charAt(i)));\n            \n            // Reset the count to 0\n            c=0;\n        }\n        \n        // Return the transformed string as a regular string\n        return ans.toString();     \n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}