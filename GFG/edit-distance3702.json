{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703912,
            "title": "Edit Distance",
            "titleSlug": "edit-distance3702",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings <strong>s1</strong> and <strong>s2. </strong>Return the minimum number of operations required to convert <strong>s1 </strong>to <strong>s2</strong>.<br />The possible operations are permitted:</span></p>\n<ol>\n<li><span style=\"font-size: 18px;\"><strong>Insert </strong>a character at any position of the string.</span></li>\n<li><span style=\"font-size: 18px;\"><strong>Remove </strong>any character from the string.</span></li>\n<li><span style=\"font-size: 18px;\"><strong>Replace </strong>any character from the string with any other character.</span></li>\n</ol>\n<p><span style=\"font-size: 18px;\"><strong>Examples:<br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s1 = \"geek\", s2 = \"gesek\"\n<strong>Output:</strong>&nbsp;1\n<strong>Explanation: </strong>One operation is required, inserting 's' between two 'e' in s1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">s1 = \"gfg\", s2 = \"gfg\"\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">0\n</span><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\">Both strings are same.<br /></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s1 = \"abcd\", s2 = \"bcfe\"\n<strong>Output: </strong>3\n<strong>Explanation:</strong> </span><span style=\"font-size: 18px;\">We can convert s1 into s2 by removing &lsquo;a&rsquo;, replacing &lsquo;d&rsquo; with &lsquo;f&rsquo; and inserting &lsquo;e&rsquo; at the end. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; s1.length(), s2.length() &le; <span style=\"font-size: 18.6667px;\">10</span><sup>3</sup><br />Both the strings are in lowercase.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, determine the minimum number of operations required to transform `s1` into `s2`. You are allowed to perform the following operations:\n\n1.  **Insert:** Add a character at any position within the string.\n2.  **Remove:** Delete any character from the string.\n3.  **Replace:** Change any character in the string with another character.",
                "constraints": [
                    "1 <= s1.length() <= 1000",
                    "1 <= s2.length() <= 1000",
                    "Both strings consist of lowercase letters."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"geek\", s2 = \"gesek\"",
                        "output": "1",
                        "explanation": "Transforming 'geek' to 'gesek' requires a single insertion of 's' between the two 'e' characters."
                    },
                    {
                        "input": "s1 = \"gfg\", s2 = \"gfg\"",
                        "output": "0",
                        "explanation": "The strings are identical, thus no operations are needed."
                    },
                    {
                        "input": "s1 = \"abcd\", s2 = \"bcfe\"",
                        "output": "3",
                        "explanation": "Converting 'abcd' to 'bcfe' involves removing 'a', replacing 'd' with 'f', and inserting 'e' at the end."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use dynamic programming and choose the most optimal option in each stage.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "goldman-sachs",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to compute the edit distance between two strings\n    int editDistance(string &s1, string &s2) {\n\n        int m = s1.length();\n        int n = s2.length();\n\n        // Create a table to store results of subproblems\n        vector<vector<int>> dp(m + 1, vector<int>(n + 1));\n\n        // Fill the known entries in dp[][]\n        // If one string is empty, then answer\n        // is length of the other string\n        for (int i = 0; i <= m; i++)\n            dp[i][0] = i;\n        for (int j = 0; j <= n; j++)\n            dp[0][j] = j;\n\n        // Fill the rest of dp[][]\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (s1[i - 1] == s2[j - 1])\n                    dp[i][j] = dp[i - 1][j - 1];\n                else\n                    dp[i][j] = 1 + min({dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]});\n            }\n        }\n\n        return dp[m][n];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int editDistance(String s1, String s2) {\n        int m = s1.length();\n        int n = s2.length();\n\n        // Create a table to store results of subproblems\n        int[][] dp = new int[m + 1][n + 1];\n\n        // Fill the known entries in dp[][]\n        // If one string is empty, then answer\n        // is length of the other string\n        for (int i = 0; i <= m; i++) dp[i][0] = i;\n        for (int j = 0; j <= n; j++) dp[0][j] = j;\n\n        // Fill the rest of dp[][]\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (s1.charAt(i - 1) == s2.charAt(j - 1))\n                    dp[i][j] = dp[i - 1][j - 1];\n                else\n                    dp[i][j] = 1 + Math.min(Math.min(dp[i][j - 1], dp[i - 1][j]),\n                                            dp[i - 1][j - 1]);\n            }\n        }\n\n        return dp[m][n];\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def editDistance(self, s1, s2):\n        m = len(s1)\n        n = len(s2)\n\n        # Create a table to store results of subproblems\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        # Fill the known entries in dp[][]\n        # If one string is empty, then answer\n        # is length of the other string\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n\n        # Fill the rest of dp[][]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j],\n                                       dp[i - 1][j - 1])\n\n        return dp[m][n]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    editDistance(s1, s2) {\n        let m = s1.length;\n        let n = s2.length;\n\n        // Create a table to store results of subproblems\n        let dp = Array.from({length : m + 1}, () => Array(n + 1).fill(0));\n\n        // Fill the known entries in dp[][]\n        // If one string is empty, then answer\n        // is length of the other string\n        for (let i = 0; i <= m; i++) dp[i][0] = i;\n        for (let j = 0; j <= n; j++) dp[0][j] = j;\n\n        // Fill the rest of dp[][]\n        for (let i = 1; i <= m; i++) {\n            for (let j = 1; j <= n; j++) {\n                if (s1[i - 1] === s2[j - 1])\n                    dp[i][j] = dp[i - 1][j - 1];\n                else\n                    dp[i][j] =\n                        1 + Math.min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]);\n            }\n        }\n\n        return dp[m][n];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}