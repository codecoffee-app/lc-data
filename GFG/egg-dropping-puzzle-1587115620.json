{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701420,
            "title": "Egg Dropping Puzzle",
            "titleSlug": "egg-dropping-puzzle-1587115620",
            "content": "<p><span >You are given <strong>n </strong>identical eggs and you have access to a<strong> k</strong>-floored building from&nbsp;<strong>1</strong> to <strong>k.</strong></span></p>\n<p><span >There exists a floor <strong>f</strong> where <strong>0</strong> &lt;= <strong>f</strong> &lt;= <strong>k </strong>such that any egg dropped from a floor higher than <strong>f</strong>&nbsp;will break, and any egg dropped <strong>from or below </strong>floor f<strong>&nbsp;</strong>will <strong>not break</strong>. <br />There are few rules given below.&nbsp;</span></p>\n<ul>\n<li><span >An egg that survives a fall can be used again.</span></li>\n<li><span >A broken egg must be discarded.</span></li>\n<li><span >The effect of a fall is the same for all eggs.</span></li>\n<li><span >If the egg doesn't break at a certain floor, it will not break at any floor below.</span></li>\n<li><span >If the egg breaks on a certain floor, it will break on any floor above.</span></li>\n</ul>\n<p><span >Return the minimum number of moves&nbsp;<span style=\"box-sizing: border-box; margin: 0px; padding: 0px;\">you need to determine the value of&nbsp;<strong>f</strong> with certainty</span>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre dir=\"ltr\"><span ><strong>Input: </strong>n = 2, k = 36</span><br /><span ><strong>Output: </strong>8</span><br /><span ><strong>Explanation: </strong>In all the situations, 8 maximum moves are required to find the maximum floor. Following is the strategy to do so:<br /></span><span >Drop from <strong>floor 8</strong> &rarr; If breaks, check 1-7 sequentially.<br /></span><span >Drop from <strong>floor 15</strong> &rarr; If breaks, check 9-14.<br /></span><span >Drop from <strong>floor 21</strong>  &rarr; If breaks, check 16-20.<br /></span><span >Drop from <strong>floor 26</strong> &rarr; If breaks, check 22-25.<br /></span><span >Drop from <strong>floor 30</strong> &rarr; If breaks, check 27-29.<br /></span><span >Drop from <strong>floor 33</strong> &rarr; If breaks, check 31-32.<br /></span><span >Drop from <strong>floor 35 </strong>&rarr; If breaks, check 34.<br /></span><span >Drop from <strong>floor 36</strong> &rarr; Final check.</span></pre>\n<pre><span ><strong>Input: </strong>n = 1, k = 36</span><br /><span ><strong>Output: </strong>36</span><br /><span ><strong>Explanation: </strong>Drop the egg from the first-floor window; if it survives, drop it from the second-floor window. Continue upward until it breaks. In the worst case, this method may require 36 droppings.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; n &le;&nbsp;1000<br />1 &le; k &le; 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given *n* identical eggs and access to a *k*-floored building, numbered from 1 to *k*. There exists a floor *f* (0 <= *f* <= *k*) such that any egg dropped from a floor higher than *f* will break, and any egg dropped from or below floor *f* will not break.  You need to determine the minimum number of moves required to find the value of *f* with certainty, given the following rules:\n\n*   An egg that survives a fall can be used again.\n*   A broken egg must be discarded.\n*   The effect of a fall is the same for all eggs.\n*   If the egg doesn't break at a certain floor, it will not break at any floor below.\n*   If the egg breaks on a certain floor, it will break on any floor above.",
                "constraints": [
                    "1 <= n <= 1000",
                    "1 <= k <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 2, k = 36",
                        "output": "8",
                        "explanation": "One possible strategy to find the critical floor in a minimum number of moves is to drop the first egg at floor 8. If it breaks, use the remaining egg to test floors 1 to 7 linearly. If the first egg survives at floor 8, drop it at floor 15. If it breaks, check floors 9 to 14 linearly, and so on. In the worst-case scenario, this strategy requires a maximum of 8 moves."
                    },
                    {
                        "input": "n = 1, k = 36",
                        "output": "36",
                        "explanation": "With only one egg, the only possible strategy is to start dropping the egg from the first floor and move up one floor at a time. In the worst case, the egg breaks at the 36th floor, or it does not break at all. Thus, it takes 36 moves."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<div class=\"flex-shrink-0 flex flex-col relative items-end\">\n<div class=\"pt-0\">\n<div class=\"gizmo-bot-avatar flex h-8 w-8 items-center justify-center overflow-hidden rounded-full\">\n<p class=\"relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8\">Use dynamic programming to minimize trials by considering each possible floor drop and taking the worst case of breaking or not breaking.</p>\n</div>\n</div>\n</div>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "vmware",
            "amazon",
            "microsoft",
            "samsung",
            "d-e-shaw",
            "hike",
            "makemytrip",
            "oracle",
            "goldman-sachs",
            "maq-software",
            "google",
            "myntra",
            "nearbuy",
            "opera",
            "philips",
            "service-now",
            "unisys"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // Function to find minimum number of attempts needed in\n    // order to find the critical floor.\n    int eggDrop(int n, int k) {\n\n        // create a 2D table to store the results\n        vector<vector<int>> dp(k + 1, vector<int>(n + 1, 0));\n\n        // to count the number of moves\n        int cnt = 0;\n\n        // while the number of floors is less than k\n        while (dp[cnt][n] < k) {\n            cnt++;\n\n            // for each egg\n            for (int i = 1; i <= n; i++) {\n                dp[cnt][i] = 1 + dp[cnt - 1][i - 1] + dp[cnt - 1][i];\n            }\n        }\n        return cnt;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to find minimum number of attempts needed in\n    // order to find the critical floor.\n    static int eggDrop(int n, int k) {\n\n        // create a 2D table to store the results\n        int[][] dp = new int[k + 1][n + 1];\n\n        // to count the number of moves\n        int cnt = 0;\n\n        // while the number of floors is less than k\n        while (dp[cnt][n] < k) {\n            cnt++;\n\n            // for each egg\n            for (int i = 1; i <= n; i++) {\n                dp[cnt][i] = 1 + dp[cnt - 1][i - 1] + dp[cnt - 1][i];\n            }\n        }\n        return cnt;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    # Function to find the minimum number of attempts needed\n    # to find the critical floor.\n    def eggDrop(self, n, k):\n\n        # create a 2D table to store the results\n        dp = [[0 for _ in range(n + 1)] for _ in range(k + 1)]\n\n        # to count the number of moves\n        cnt = 0\n\n        # while the number of floors is less than k\n        while dp[cnt][n] < k:\n            cnt += 1\n\n            # for each egg\n            for i in range(1, n + 1):\n                dp[cnt][i] = 1 + dp[cnt - 1][i - 1] + dp[cnt - 1][i]\n        return cnt\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n\n    // Function to find minimum number of attempts needed in\n    // order to find the critical floor.\n    public int eggDrop(int n, int k) {\n\n        // create a 2D table to store the results\n        int[][] dp = new int [k + 1][];\n        for (int i = 0; i <= k; i++) {\n            dp[i] = new int[n + 1];\n        }\n\n        // to count the number of moves\n        int cnt = 0;\n\n        // while the number of floors is less than k\n        while (dp[cnt][n] < k) {\n            cnt++;\n\n            // for each egg\n            for (int i = 1; i <= n; i++) {\n                dp[cnt][i] = 1 + dp[cnt - 1][i - 1] + dp[cnt - 1][i];\n            }\n        }\n        return cnt;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number} n\n * @param {number} k\n * @returns {number}\n */\nclass Solution {\n\n    // Function to find minimum number of attempts needed in\n    // order to find the critical floor.\n    eggDrop(n, k) {\n\n        // create a 2D table to store the results\n        let dp = new Array(k + 1);\n        for (let i = 0; i <= k; i++) {\n            dp[i] = new Array(n + 1).fill(0);\n        }\n\n        // to count the number of moves\n        let cnt = 0;\n\n        // while the number of floors is less than k\n        while (dp[cnt][n] < k) {\n            cnt++;\n\n            // for each egg\n            for (let i = 1; i <= n; i++) {\n                dp[cnt][i] = 1 + dp[cnt - 1][i - 1] + dp[cnt - 1][i];\n            }\n        }\n        return dp[cnt][n] >= k ? cnt : cnt;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}