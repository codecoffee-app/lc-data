{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702787,
            "title": "Single Among Doubles",
            "titleSlug": "element-appearing-once2552",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>sorted </strong>array <strong>arr[]</strong> of <strong>n </strong>positive integers having all the numbers occurring exactly twice, except&nbsp;for one number which will occur only once. Find the number occurring only once.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5, arr[] = {1, 1, 2, 5, 5}<strong>\nOutput: </strong>2\n<strong>Explanation: </strong>Since 2 occurs once, while other numbers occur twice, 2 is the answer.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 7, arr[] = {2, 2, 5, 5, 20, 30, 30}\n<strong>Output: </strong>20\n<strong>Explanation: </strong>Since 20 occurs once, while other numbers occur twice, 20 is the answer.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O( Log(n) ).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong><br />0 &lt; &nbsp;<strong>n</strong>&nbsp; &lt;= 10^6<br />0 &lt;= <strong>arr[i]</strong> &lt;= 10^9</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr[]` of `n` positive integers where all numbers occur exactly twice, except for one number which occurs only once, find that single number.",
                "constraints": [
                    "0 < n <= 10^6",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 5, arr[] = {1, 1, 2, 5, 5}",
                        "output": "2",
                        "explanation": "The number 2 appears only once in the array, while the other numbers appear twice."
                    },
                    {
                        "input": "n = 7, arr[] = {2, 2, 5, 5, 20, 30, 30}",
                        "output": "20",
                        "explanation": "The number 20 appears only once in the array, while the other numbers appear twice."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use binary search to find the answer</p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "qualcomm",
            "codenation"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    int bs(int *arr, int low, int high) {\n        if (low == high) {\n            return arr[low];\n        }\n\n        // Find the middle point\n        int mid = (low + high) / 2;\n\n        // If mid is even and element next to mid is\n        // same as mid, then output element lies on\n        // right side, else on left side\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1])\n                return bs(arr, mid + 2, high);\n            else\n                return bs(arr, low, mid);\n        } else // If mid is odd\n        {\n            if (arr[mid] == arr[mid - 1])\n                return bs(arr, mid + 1, high);\n            else\n                return bs(arr, low, mid - 1);\n        }\n    }\n\n    int search(int n, int arr[]) { return bs(arr, 0, n - 1); }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Sol {\n    public static int bs(int arr[], int low, int high) {\n        if (low == high) {\n            return arr[low];\n        }\n\n        // Find the middle point\n        int mid = (low + high) / 2;\n\n        // If mid is even and element next to mid is\n        // same as mid, then output element lies on\n        // right side, else on left side\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1])\n                return bs(arr, mid + 2, high);\n            else\n                return bs(arr, low, mid);\n        } else // If mid is odd\n        {\n            if (arr[mid] == arr[mid - 1])\n                return bs(arr, mid + 1, high);\n            else\n                return bs(arr, low, mid - 1);\n        }\n    }\n\n    public static int search(int n, int arr[]) { return bs(arr, 0, n - 1); }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\nclass Solution:\n\n    # Binary search function for finding the single non-repeating element\n    def bs(self, arr, low, high):\n        if low == high:\n            return arr[low]\n\n        mid = (low + high) // 2\n\n        # Check if mid is even\n        if mid % 2 == 0:\n            # If mid and next element are the same, the non-repeating element is to the right of mid\n            if arr[mid] == arr[mid + 1]:\n                return self.bs(arr, mid + 2, high)\n            else:\n                return self.bs(arr, low, mid)\n        else:\n            # If mid and previous element are the same, the non-repeating element is to the right of mid\n            if arr[mid] == arr[mid - 1]:\n                return self.bs(arr, mid + 1, high)\n            else:\n                return self.bs(arr, low, mid - 1)\n\n    # Function to search the non-repeating element\n    def search(self, n, arr):\n        # Call the binary search function with initial low and high values\n        return self.bs(arr, 0, n - 1)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Solution {\n    \n    search(a,N)\n    {\n        let low = 0;\n        let high = N - 1;\n        \n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            \n            // Check if mid is even\n            if (mid % 2 === 0) {\n                // If element next to mid is the same as mid,\n                // then the single occurring element is on the right side\n                if (a[mid] === a[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else { // If mid is odd\n                // If element before mid is the same as mid,\n                // then the single occurring element is on the right side\n                if (a[mid] === a[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        \n        return a[low];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}