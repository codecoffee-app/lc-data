{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705171,
            "title": "Element left after performing alternate OR & XOR operation",
            "titleSlug": "element-left-after-performing-alternate-or-xor-operation5106",
            "content": "<p><span style=\"font-size: 18px;\">Given an array A of N integers and a 2D matrix denoting q queries. Each query consists of two elements, index and value. Update value at index in A for each query and then perform the following operations to get the result for that query.<br />1. Perform bitwise OR on each pair&nbsp;<br />2. Perform bitwise XOR on each pair&nbsp;<br />Do this alternately till you are left with only a single element in A.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> <br />1. N%2==0 i.e. size of the array is even<br />2. If index(0-based indexing) is greater than and equal to the size of the array, then the answer to that particular query will be -1.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>\nN = 4\nA = {1, 4, 5, 6}\nq = 2\nquery = {{0, 2}, {3, 5}}\n\n<strong>Output:</strong> 1 3\n\n<strong>Explaination: </strong>\n<strong>1st query: </strong>\nUpdate the value of A[0] to 2 as given in \nthe query pair.The array becomes {2, 4, 5, 6}.\n<u>1st iteration:</u> Perform bitwise OR on pairs \n{2,4} and {5,6}. The array becomes {6,7}.\n<u>2nd iteration:</u> Perform bitwise XOR on pairs \n{6,7}. The array becomes {1}.\n\n\n<strong>2nd query: </strong>\nUpdate the value of A[3] to 5 as given in \nthe query pair. The array becomes {2, 4, 5, 5}.\n<u>1st iteration:</u> Perform bitwise OR on pairs \n{2,4} and {5,5}. The array becomes {6,5}.\n<u>2nd iteration:</u> 6^5=3. The array becomes {3}.\n\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function&nbsp;<strong>left()&nbsp;</strong>which takes N, A[], q and query as input parameters and returns a list of integers denoting the result for each query.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>O(q*logN)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br />1 &le; A[i] &le; 10<sup>5</sup><br />1 &le; q &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `A` of `N` integers and a list of `q` queries, where each query consists of an `index` and a `value`. For each query, update the element at the given `index` in array `A` with the given `value`. After each update, perform the following operations iteratively until only one element remains in `A`:\n\n1.  Perform bitwise OR on each pair of consecutive elements in `A`.\n2.  Perform bitwise XOR on each pair of consecutive elements in `A`.\n\nRepeat steps 1 and 2 alternately. Return a list containing the single element remaining in `A` after performing these operations for each query.\n\n**Note:**\n\n*   `N` is always even (N % 2 == 0).\n*   If the given `index` in the query is out of bounds (index >= N), return -1 for that query.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= A[i] <= 10^5",
                    "1 <= q <= 10^4",
                    "N % 2 == 0"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nA = [1, 4, 5, 6]\nq = 2\nquery = [[0, 2], [3, 5]]",
                        "output": "[1, 3]",
                        "explanation": "1st query: Update A[0] to 2. A becomes [2, 4, 5, 6].\n1st iteration: OR pairs {2,4} and {5,6} -> [6, 7].\n2nd iteration: XOR pairs {6,7} -> [1].\n\n2nd query: Update A[3] to 5. A becomes [2, 4, 5, 5].\n1st iteration: OR pairs {2,4} and {5,5} -> [6, 5].\n2nd iteration: XOR pairs {6,5} -> [3]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each query change the value and calculate the answer.</span></p>",
            "<p><span style=\"font-size:18px\">Pre calculation and modifiaction will reduce the time complaxity. Take help of any such data structure which can update value in optimal time.</span></p>",
            "<p><span style=\"font-size:18px\">Segment tree or Fenwick is&nbsp;such a data structure. Keep track of the level to find out what to perform,&nbsp;OR or XOR.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Segment-Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution{\r\npublic:\r\n    vector<int> tree, level;\r\n    \r\n    void constructTree(int low, int high, int pos, int a[]){\r\n    \tif (low == high){\r\n    \t\t// level of child is always 0\r\n    \t\tlevel[pos] = 0;\r\n    \t\ttree[pos] = a[high];\r\n    \t\treturn;\r\n    \t}\r\n    \tint mid = (low + high) / 2;\r\n        // recursive call\r\n    \tconstructTree(low, mid, 2 * pos + 1, a);\r\n    \tconstructTree(mid + 1, high, 2 * pos + 2, a);\r\n        // increase the level of every parent, which is level of child + 1\r\n    \tlevel[pos] = level[2 * pos + 1] + 1;\r\n        // if the parent is at odd level, then do bitwise OR\r\n    \tif (level[pos] & 1)\r\n    \t\ttree[pos] = tree[2 * pos + 1] | tree[2 * pos + 2];\r\n        // if the parent is at even level, then do a bitwise XOR\r\n    \telse\r\n    \t\ttree[pos] = tree[2 * pos + 1] ^ tree[2 * pos + 2];\r\n    }\r\n    \r\n    void update(int low, int high, int pos, int index, int a[]){\r\n    \t// if it is a leaf and the leaf which is to be updated\r\n    \tif (low == high and low == index){\r\n    \t\ttree[pos] = a[low];\r\n    \t\treturn;\r\n    \t}\r\n    \t// out of range\r\n    \tif (index < low || index > high)\r\n    \t\treturn;\r\n    \t// not a leaf then recurse\r\n    \tif (low != high){\r\n    \t\tint mid = (low + high) / 2;\r\n    \t\t// recursive call\r\n    \t\tupdate(low, mid, 2 * pos + 1, index, a);\r\n    \t\tupdate(mid + 1, high, 2 * pos + 2, index, a);\r\n    \t\t// check if the parent is at odd or even level\r\n    \t\t// and perform OR or XOR according to that\r\n    \t\tif (level[pos] & 1)\r\n    \t\t\ttree[pos] = tree[2 * pos + 1] | tree[2 * pos + 2];\r\n    \t\telse\r\n    \t\t\ttree[pos] = tree[2 * pos + 1] ^ tree[2 * pos + 2];\r\n    \t}\r\n    }\r\n    \r\n    void updateValue(int index, int value, int a[], int n){\r\n    \ta[index] = value;\r\n    \tupdate(0, n - 1, 0, index, a);\r\n    }\r\n    \r\n    vector<int> left(int N, int A[], int q, vector<pair<int, int>> query)\r\n    {\r\n        vector<int> res;\r\n        tree.assign(4*N + 1, 0);\r\n        level.assign(4*N + 1, 0);\r\n        constructTree(0, N - 1, 0, A);\r\n        int index, value;\r\n        int i = 0;\r\n        while(i < q){\r\n            index = query[i].first;\r\n            value = query[i].second;\r\n            if(index > N-1 || N < 0)\r\n                res.emplace_back(-1);\r\n            else{\r\n                updateValue(index, value, A, N);\r\n                res.emplace_back(tree[0]);\r\n\t        }\r\n\t        i++;\r\n        }\r\n        return res;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    static int seg[],odd;\n    static List<Integer> left(int N, int A[], int q, int query[][])\n    {\n        // code here\n        seg=new int[4*N];\n        odd=0;\n        buildTree(0,0,N-1,A,0);\n        List<Integer> ans=new ArrayList<>();\n        for(int i=0;i<q;i++){\n            if(query[i][0]>=N){\n                ans.add(-1);\n                continue;\n            }\n            update(0,0,N-1,query[i][0],query[i][1],0);\n            ans.add(seg[0]);\n        }\n        return ans;\n    }\n    static void buildTree(int si,int ss,int se,int a[],int level)\n    {\n        if(ss==se){\n            seg[si]=a[ss];\n            return;\n        }\n        int mid=(ss+se)/2;\n        buildTree(2*si+1,ss,mid,a,level+1);\n        buildTree(2*si+2,mid+1,se,a,level+1);\n        if(odd==0){\n            if(level%2==0)odd=2;\n            else odd=1;\n        }\n        if(level%2==odd%2){\n            seg[si]=seg[2*si+1]|seg[2*si+2];\n        }else{\n            seg[si]=seg[2*si+1]^seg[2*si+2];\n        }\n    }\n    static void update(int si,int ss,int se,int ind,int val,int level)\n    {\n        if(ss==se){\n            seg[si]=val;\n            return;\n        }\n        int mid=(ss+se)/2;\n        if(ind<=mid){\n            update(2*si+1,ss,mid,ind,val,level+1);\n        }else{\n            update(2*si+2,mid+1,se,ind,val,level+1);\n        }\n        if(level%2==odd%2){\n            seg[si]=seg[2*si+1]|seg[2*si+2];\n        }else{\n            seg[si]=seg[2*si+1]^seg[2*si+2];\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}