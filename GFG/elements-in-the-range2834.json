{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703193,
            "title": "Elements in the Range",
            "titleSlug": "elements-in-the-range2834",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> containing positive elements. A and B are two numbers defining a range. The task is to check if the array contains <strong>all elements</strong> in the given range (inclusive).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;If the array contains all elements in the given range return <strong>true </strong>otherwise return <strong>false.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 7, A = 2, B = 5, arr[] =  {1, 4, 5, 2, 7, 8, 3}\n<strong>Output:</strong> True\n<strong>Explanation</strong>: It has all elements between range 2-5 i.e 2,3,4,5.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 7, A = 2, B = 6, arr[] = {1, 4, 5, 2, 7, 8, 3}\n<strong>Output: </strong>False\n<strong>Explanation</strong>: The array does not contain 6 hence it do not contains all elements in the range 2-6, the output is No.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />This is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function <strong>check_elements</strong>() that takes array<strong> arr, </strong>integer<strong> N,&nbsp;</strong>integer<strong> A, </strong>and&nbsp;integer<strong> B&nbsp;</strong>&nbsp;as parameters and returns the boolean True&nbsp;if array elements contain all elements in the given range&nbsp;else boolean False.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N).<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>7</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Do a linear traversal of the array. If an element is found such that |arr[i]| &gt;= A and |arr[i]|&lt;=B then mark the index | arr[i]-A | and after that count total number of marked elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n\n  public:\n    // Function to check if elements in the array fall within range A and B\n    bool check_elements(int arr[], int n, int A, int B) {\n        // Calculate the range of elements\n        int range = B - A;\n\n        // Iterate through the array\n        for (int i = 0; i < n; i++) {\n            // Check if the absolute value of the element is within the range\n            if ((abs(arr[i])) >= A && (abs(arr[i])) <= B) {\n                // Update the value of the element\n                int z = abs(arr[i]) - A;\n                if (z < n && arr[z] > 0) {\n                    arr[z] = arr[z] * -1;\n                }\n            }\n        }\n\n        // Count the number of elements that fall within the range\n        int count = 0;\n        for (int i = 0; i <= range && i < n; i++) {\n            // Check if the element is positive\n            if (arr[i] > 0)\n                return false;\n            else\n                count++;\n        }\n\n        // Check if the number of elements within the range is equal to the range length\n        if (count != (range + 1))\n            return false;\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    boolean check_elements(int arr[], int n, int A, int B) {\n        // calculate the range of possible values between A and B\n        int range = B - A;\n\n        // iterate over each element in the array\n        for (int i = 0; i < n; i++) {\n\n            // check if the absolute value of the element is within the range\n            if ((Math.abs(arr[i])) >= A && (Math.abs(arr[i])) <= B) {\n\n                // compute the adjusted index based on A\n                int z = Math.abs(arr[i]) - A;\n\n                // if the adjusted index is within the array and the element at that\n                // index is positive, set it to negative to indicate presence\n                if (z < n && arr[z] > 0) {\n                    arr[z] = arr[z] * -1;\n                }\n            }\n        }\n\n        // count the number of negative elements in the range\n        int count = 0;\n        for (int i = 0; i <= range && i < n; i++) {\n\n            // if any element is positive, then the array is not equal\n            if (arr[i] > 0) return false;\n\n            // increment count for every negative element\n            else\n                count++;\n        }\n\n        // if the count is not equal to the range + 1, then the array is not equal\n        if (count != (range + 1)) return false;\n\n        // if all conditions are passed, the array is equal\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def check_elements(self, arr, n, A, B):\n        # iterate through all the elements in arr\n        for i in range(n):\n            # check if the absolute value of the element is within the range A and B\n            if abs(arr[i]) >= A and abs(arr[i]) <= B:\n                # calculate the index to be updated in arr\n                ind = abs(arr[i]) - A\n                # if the index is within the range and the value is positive, update the element to be negative\n                if ind < n and arr[ind] > 0:\n                    arr[ind] = -1 * arr[ind]\n\n        # calculate the new range B\n        B = B - A\n        # check if the new range is greater than the number of elements in arr\n        if B > n:\n            return False\n\n        # iterate through the first B+1 elements in arr\n        for i in range(B + 1):\n            # if any element is positive, return False\n            if arr[i] > 0:\n                return False\n\n        # if all elements in the range are negative, return True\n        return True\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    check_elements(arr, n, A, B) {\n        let range = B - A;\n        for (let i = 0; i < n; i++) {\n            if ((Math.abs(arr[i])) >= A && (Math.abs(arr[i])) <= B) {\n                let z = Math.abs(arr[i]) - A;\n                if (z < n && arr[z] > 0) {\n                    arr[z] = arr[z] * -1;\n                }\n            }\n        }\n        let count = 0;\n        for (let i = 0; i <= range && i < n; i++) {\n            if (arr[i] > 0) {\n                return false;\n            } else {\n                count++;\n            }\n        }\n        if (count !== (range + 1)) {\n            return false;\n        }\n        return true;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}