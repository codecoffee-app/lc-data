{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705014,
            "title": "Emirp numbers",
            "titleSlug": "emirp-numbers4337",
            "content": "<p><span style=\"font-size:18px\">Given a number<strong> N</strong>, the task is to find&nbsp;all the prime number from 13 to N&nbsp; such that its reverse is also prime and is less than or equal to N.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note</strong>: The number should not be palindromic prime (for example: 151, 787)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 40\n<strong>Output: </strong>13 31\n<strong>Explanation: </strong>Only 13 and 31 are prime\nnumbers which are satisfying the given\nconditions.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 80\n<strong>Output: </strong>13 17 31 37 71 73&nbsp;\n<strong>Explanation: </strong>Only 13, 17, 31, 37, 71\nand 73 are prime numbers which are\nsatisfying the given conditions.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything. Your task is&nbsp;to complete the function&nbsp;<strong>EmirpNumbers()</strong>&nbsp;which takes <strong>N</strong> as input parameter and <strong>returns</strong> a list of the<strong>&nbsp;</strong>numbers denoting the answer in ascending order.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N * k) where k is constant.<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(N)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N, find all prime numbers from 13 to N such that their reverse is also prime and less than or equal to N. The number should not be a palindromic prime (e.g., 151, 787).",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "40",
                        "output": "13 31",
                        "explanation": "The prime numbers 13 and 31 are within the range of 13 to 40. The reverse of 13 is 31, which is prime and less than or equal to 40. The reverse of 31 is 13, which is prime and less than or equal to 40. Neither are palindromic."
                    },
                    {
                        "input": "80",
                        "output": "13 17 31 37 71 73",
                        "explanation": "The prime numbers 13, 17, 31, 37, 71 and 73 are within the range of 13 to 80. Their reverses (31, 71, 13, 73, 37, 17) are also prime and less than or equal to 80. None of them are palindromic primes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Optimize your solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution{\n\tpublic:\n\tint reverseNo(int n){\n\t\tstring s = \"\";\n\t\twhile(n){\n\t\t\ts += char((n%10) + '0');\n\t\t\tn /= 10;\n\t\t}\n\t\tint x = 0;\n\t\tfor(auto i : s){\n\t\t\tx  = x*10 + (i-'0');\n\t\t}\n\t\treturn x;\n\t}\n\tvector<int> EmirpNumbers(int N)\n\t{\n\t\tvector<bool>vis(N+5, true);\n\t\tvis[0] = false;\n\t\tvis[1] = false;\n\t\tfor(int i = 2; i*i <= N; i++){\n\t\t\tif(vis[i]){\n\t\t\t\tfor(int j = i*i; j <= N; j+=i)\n\t\t\t\t\tvis[j] = false;\n\t\t\t}\n\t\t}\n\t\tvector<int>prime;\n\t\tfor(int i = 13; i<= N; i++){\n\t\t\tif(vis[i]){\n\t\t\t\tint rev = reverseNo(i);\n\t\t\t\tif(rev <= N and i != rev and vis[rev])\n\t\t\t\t\tprime.push_back(i);\n\t\t\t}\n\t\t}\n\t\treturn prime;\n\t}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}