{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 879231,
            "title": "Encapsulation in Python",
            "titleSlug": "encapsulation-in-python",
            "content": "<p><span >Your task is to create a <code>Person</code> class in Python that demonstrates encapsulation. This class should have two \"private\" attributes:<br /></span></p>\n<ul>\n<li><span ><code>name</code> (String) with a default value of <code>\"Geeks\"</code>.</span></li>\n<li><span ><code>age</code> (int) with a default value of <code>10</code>.</span></li>\n</ul>\n<p><span >The class should provide public methods to access and modify these private attributes:</span></p>\n<ul>\n<li><span ><strong>Getter Methods</strong>: <code>get_name()</code> and <code>get_age()</code></span></li>\n<li><span ><strong>Setter Methods</strong>: <code>set_name(name)</code> and <code>set_age(age)</code></span></li>\n</ul>\n<p><strong><span >Example:</span></strong></p>\n<pre><strong><span >Input: </span></strong><span >Funtion calls: [Person(), get_name(), set_name(\"John\"), set_age(21), get_name(), get_age()] <br /><strong>Output: </strong>Geeks John 21<br /><strong>Explanation: <br /></strong>person = Person() // Person Object Created<br />person.get_name() // Default value \"Geeks\" returned<br />person.set_name(\"John\") // name value set to \"John\"<br />person.set_age(21) // age value set to 21<br />person.get_name() // \"John\" returned<br />person.get_age() // 21 returned</span></pre>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Create a `Person` class in Python that demonstrates encapsulation using private attributes and public getter/setter methods.\n\nThe `Person` class should have the following characteristics:\n\n*   **Private Attributes:**\n    *   `name` (String): Defaults to \"Geeks\".\n    *   `age` (int): Defaults to 10.\n*   **Public Methods:**\n    *   `get_name()`: Returns the value of the `name` attribute.\n    *   `get_age()`: Returns the value of the `age` attribute.\n    *   `set_name(name)`: Sets the value of the `name` attribute to the provided `name` argument.\n    *   `set_age(age)`: Sets the value of the `age` attribute to the provided `age` argument.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "Person()\nget_name()\nset_name(\"John\")\nset_age(21)\nget_name()\nget_age()",
                        "output": "Geeks\nJohn\n21",
                        "explanation": "First, a `Person` object is created. The initial `name` is \"Geeks\". Then the name is updated to \"John\", and the age is set to 21. Finally, the updated `name` and `age` are retrieved."
                    },
                    {
                        "input": "Person()\nget_age()\nset_age(30)\nget_name()\nset_name(\"Alice\")\nget_name()\nget_age()",
                        "output": "10\nGeeks\nAlice\n30",
                        "explanation": "A `Person` object is created. The initial `age` is 10. Then the age is updated to 30,  The initial `name` is \"Geeks\", after that name is updated to \"Alice\". Finally, the updated `name` and `age` are retrieved."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n# Define the Person class\nclass Person:\n\n    def __init__(self):\n        self.__name = \"Geeks\"\n        self.__age = 10\n\n    def get_name(self):\n        return self.__name\n\n    def set_name(self, name):\n        self.__name = name\n\n    def get_age(self):\n        return self.__age\n\n    def set_age(self, age):\n        self.__age = age\n",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}