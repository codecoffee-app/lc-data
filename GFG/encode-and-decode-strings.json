{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875952,
            "title": "Encode and Decode Strings",
            "titleSlug": "encode-and-decode-strings",
            "content": "<p><span >Given an array of strings <strong>s[],</strong> you are required to create an algorithm in the <strong>encode()</strong> function that can convert the given strings into a <strong>single encoded string</strong>, which can be transmitted over the network and then <strong>decoded</strong> back into the <strong>original</strong> array of strings. The decoding will happen in the <strong>decode() </strong>function.</span><br /><br /><span >You need to implement two functions:</span><br /><span >1. <strong>encode()</strong>: This takes an array of strings <strong>s[]</strong> and encodes it into a single string.&nbsp;</span><br /><span >2. <strong>decode()</strong>: This takes the encoded string as input and returns an array of strings containing the original array as given in the encode method.</span><br /><br /><span ><strong>Note:</strong> You are not allowed to use any inbuilt serialize method.&nbsp;&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s =<strong> </strong>[\"Hello\",\"World\"]<strong><br />Output:&nbsp;</strong>[\"Hello\",\"World\"]<strong><br />Explanation: </strong>The encode() function will have the str as input, it will be encoded by one machine. Then another machine will receive the encoded string as the input parameter and then will decode it to its original form.</span></pre>\n<pre><span ><strong>Input: </strong>s =<strong>&nbsp;</strong>[\"abc\",\"!@\"]<strong><br />Output:&nbsp;</strong>[\"abc\",\"!@\"]<strong><br />Explanation:&nbsp;</strong>The encode() function will have the str as input, here there are two strings, one is \"abc\" and the other one has some special characters. It will be encoded by one machine. Then another machine will receive the encoded string as the input parameter and then will decode it to its original form.<br /></span></pre>\n<p><span ><strong>Constraints:<br /></strong>1&lt;=s.size()&lt;=100<br />1&lt;=s[i].size()&lt;=100<br />s[i] contains any possible characters out of the 256 ASCII characters.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Design an algorithm to encode an array of strings into a single string for network transmission and then decode it back to the original array. Implement the `encode()` function to take an array of strings `s[]` and convert it into a single encoded string. Implement the `decode()` function to take the encoded string as input and return the original array of strings.",
                "constraints": [
                    "1 <= s.size() <= 100",
                    "1 <= s[i].size() <= 100",
                    "s[i] contains any possible characters out of the 256 ASCII characters.",
                    "You are not allowed to use any built-in serialize method."
                ],
                "testcases": [
                    {
                        "input": "[\"Hello\",\"World\"]",
                        "output": "[\"Hello\",\"World\"]",
                        "explanation": "The `encode()` function receives the input array of strings. One machine encodes the array into a single string. Another machine receives this encoded string and the `decode()` function reconstructs the original array."
                    },
                    {
                        "input": "[\"abc\",\"!@\"]",
                        "output": "[\"abc\",\"!@\"]",
                        "explanation": "The `encode()` function receives the input array of strings, which in this case contains two strings: \"abc\" and \"!@\", where the second string contains special characters. One machine encodes the array. Another machine receives the encoded string and the `decode()` function recovers the original array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to concatenate the strings by using a special character</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string encode(vector<string>& str) {\n        string encodedString;\n        for (string& s : str) {\n            // Append the length, the delimiter, and the string itself.\n            encodedString += to_string(s.size()) + \"/:\" + s;\n        }\n        return encodedString;\n    }\n\n    vector<string> decode(string s) {\n        vector<string> decodedStrings;\n        size_t i = 0;\n        while (i < s.size()) {\n            // Find the delimiter.\n            size_t delim = s.find(\"/:\", i);\n            // Get the length, which is before the delimiter.\n            int length = stoi(s.substr(i, delim - i));\n            // Get the string, which is of 'length' length after the delimiter.\n            string str = s.substr(delim + 2, length);\n            // Add the string to the list.\n            decodedStrings.push_back(str);\n            // Move the index to the start of the next length.\n            i = delim + 2 + length;\n        }\n        return decodedStrings;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public String encode(String str[]) {\n        StringBuilder sb = new StringBuilder();\n\n        for (String x : str) {\n            sb.append(x);\n            sb.append(\"#\");\n        }\n        return sb.toString();\n    }\n\n    public String[] decode(String s) {\n        String decode[] = s.split(\"#\", -1);\n\n        int n = decode.length;\n\n        String ans[] = new String[n - 1];\n\n        for (int i = 0; i < ans.length; i++) {\n            ans[i] = decode[i];\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def encode(self, strs):\n        encoded_string = \"\"\n        for s in strs:\n            # Append the length, the delimiter, and the string itself.\n            encoded_string += str(len(s)) + \"/:\" + s\n        return encoded_string\n\n    def decode(self, s):\n        decoded_strings = []\n        i = 0\n        while i < len(s):\n            # Find the delimiter.\n            delim = s.find(\"/:\", i)\n            # Get the length, which is before the delimiter.\n            length = int(s[i:delim])\n            # Get the string, which is of 'length' length after the delimiter.\n            str_part = s[delim + 2:delim + 2 + length]\n            # Add the string to the list.\n            decoded_strings.append(str_part)\n            # Move the index to the start of the next length.\n            i = delim + 2 + length\n        return decoded_strings\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}