{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703017,
            "title": "Encrypt the string - 1",
            "titleSlug": "encrypt-the-string-10337",
            "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><span style=\"font-size:18px\">Bingu was testing all the strings he had at his place&nbsp;and found that most of them were prone to a vicious attack by Banju, his arch-enemy. Bingu decided to encrypt all the strings he had, by the following method. Every substring of identical letters is replaced by a single instance of that letter followed by the number of occurrences of that letter. Then, the string thus obtained is further encrypted by reversing it.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n</div>\n</div>\n</div>\n\n<div class=\"challenge_input_format\">\n<div class=\"msB challenge_input_format_title\">\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\ns = &quot;aabc&quot;\n<strong>Output: </strong>1c1b2a\n<strong>Explanation: </strong>aabc\nStep1: a2b1c1\nStep2: 1c1b2a</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>s = &quot;aaaaa&quot;\n<strong>Output: </strong>5a\n<strong>Explanation: </strong>aaaaa\nStep 1: a5\nStep 2: 5a</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t&nbsp;need to read&nbsp;input or print anything.Your task is to complete the function&nbsp;<strong>encryptString()&nbsp;</strong>which takes a single argument(s) and returns the encrypted string. </span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|s|).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(|s|).</span></p>\n</div>\n</div>\n\n<div class=\"challenge_constraints\">\n<div class=\"msB challenge_constraints_title\">\n<p><span style=\"font-size:18px\"><strong>Constraints</strong><br />\n1 &lt;= |s| &lt;=1000</span></p>\n\n<p><span style=\"font-size:18px\">|s| denotes the&nbsp;length of the&nbsp;string s</span></p>\n</div>\n</div>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Bingu wants to protect his strings from Banju's attacks by encrypting them. The encryption method involves two steps: First, replace every substring of identical letters with the letter followed by its count. Second, reverse the resulting string.",
                "constraints": [
                    "1 <= |s| <= 1000",
                    "|s| denotes the length of the string s"
                ],
                "testcases": [
                    {
                        "input": "aabc",
                        "output": "1c1b2a",
                        "explanation": "The string 'aabc' is first transformed to 'a2b1c1' by replacing consecutive identical characters. Then, it is reversed to obtain '1c1b2a'."
                    },
                    {
                        "input": "aaaaa",
                        "output": "5a",
                        "explanation": "The string 'aaaaa' is first transformed to 'a5' by replacing consecutive identical characters. Then, it is reversed to obtain '5a'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the two pointer technique to count the frequency of the consecutive equal characters.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\n    public:\n    string encryptString(string s){\n    int x=0;\n    string ans;\n    for(int i=0;i<s.size();i++)\n    {\n        x++;\n        if(i+1<s.size()&&s[i]==s[i+1])\n        continue;\n        ans+=s[i];\n        ans+=to_string(x);\n        x=0;\n    }\n    reverse(ans.begin(),ans.end());\n\treturn ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution \n{ \n    // Function to encrypt the given string\n    String encryptString(String s) \n    { \n        int x=0; // variable to keep track of character count\n        StringBuilder ans = new StringBuilder(); // StringBuilder to store the encrypted string\n        \n        // Loop through each character in the input string\n        for(int i=0;i<s.length();i++)\n        {\n            x++; // Increment character count\n            \n            // If the current character is the same as the next character,\n            // skip to the next iteration\n            if(i+1<s.length() && s.charAt(i)==s.charAt(i+1))\n            continue;\n            \n            // Append the current character to the StringBuilder\n            ans.append(s.charAt(i));\n            \n            // Append the character count to the StringBuilder\n            ans.append(Integer.toString(x));\n            \n            x=0; // Reset character count\n        }\n        \n        // Reverse the StringBuilder and convert it to a string\n        return ans.reverse().toString();    \n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution {\n    public string encryptString(string s) {\n        int x = 0;\n        StringBuilder ans = new StringBuilder();\n        for (int i = 0; i < s.Length; i++) {\n            x++;\n            if (i + 1 < s.Length && s[i] == s[i + 1])\n                continue;\n            ans.Append(s[i]);\n            ans.Append(x.ToString());\n            x = 0;\n        }\n        char[] charArray = ans.ToString().ToCharArray();\n        Array.Reverse(charArray);\n        return new string(charArray);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}