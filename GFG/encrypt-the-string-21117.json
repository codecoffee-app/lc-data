{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703643,
            "title": "Encrypt the string - 2",
            "titleSlug": "encrypt-the-string-21117",
            "content": "<div class=\"challenge_problem_statement\">\n<div class=\"msB challenge_problem_statement_body\">\n<div class=\"hackdown-content\">\n<p><span style=\"font-size:18px\">You are given a string <strong>S</strong>. Every sub-string of identical letters is replaced by a single instance of that letter followed by the hexadecimal representation of the number of occurrences of that letter. Then, the string thus obtained is further encrypted by reversing it [ See the sample for more clarity ]. Print the Encrypted String.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note: </strong>All Hexadecimal letters should be converted to Lowercase letters.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>S = &quot;</strong>aaaaaaaaaaa&quot;</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">ba </span>\n<span style=\"font-size:18px\"><strong>Explanation: </strong></span>\n<span style=\"font-size:20px\">aaaaaaaaaaa\nStep1: a<strong>11 </strong>(a occurs 11 times)\nStep2: a11 is ab [since 11 is b in\nhexadecimal]\nStep3: ba</span> <span style=\"font-size:18px\">[After reversing]</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>S = &quot;</strong></span><span style=\"font-size:20px\">abc</span><span style=\"font-size:18px\">&quot;</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">1c1b1a</span>\n<span style=\"font-size:18px\"><strong>Explanation: </strong></span>\n<span style=\"font-size:20px\">abc\nStep1: a1b1c1\nStep2: 1c1b1a</span> <span style=\"font-size:18px\">[After reversing]</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>encryptString()</strong> which takes a String S and returns the answer.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|S|)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints</strong><br />\n1 &lt;= |S| &lt;= 10<sup>5</sup></span></p>\n</div>\n</div>\n</div>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S, compress consecutive identical characters by replacing each substring of identical letters with a single instance of the letter followed by the hexadecimal representation of the number of occurrences of that letter. The resulting string is then reversed to produce the encrypted string.  All hexadecimal letters should be converted to lowercase letters.\n\nFor example, 'aaaaaaaaaaa' becomes 'a11', which is then represented as 'ab' in hexadecimal. Finally, reversing 'ab' yields 'ba'.",
                "constraints": [
                    "1 <= |S| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "aaaaaaaaaaa",
                        "output": "ba",
                        "explanation": "The input string 'aaaaaaaaaaa' has 11 consecutive 'a' characters.  This is compressed to 'a11'.  Since 11 in decimal is 'b' in hexadecimal, 'a11' becomes 'ab'.  Reversing 'ab' gives 'ba'."
                    },
                    {
                        "input": "abc",
                        "output": "1c1b1a",
                        "explanation": "The input string 'abc' has no consecutive identical characters.  Therefore, it's transformed to 'a1b1c1'. Reversing this gives '1c1b1a'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Start counting from 1 from a letter and keep incrementing till different letter comes, Convert count to it&#39;s hexadecimal equivalent and then add the letter and the hex value of count. Keep doing the same till the String ends. Finally, reverse the String.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string encryptString(string S) {\n            \n        int count = 0;\n        \n        string ans=\"\";     // To store the answer string.\n        \n        char c = S[0];\n        count = 1;\n        \n        for(int i=1 ; i<S.length() ; i++)\n        {\n            if(S[i]==S[i-1])\n                count++;        // Counting number of continuous repeating Characters.\n            else\n            {\n                ans+=c;        // appending the character\n                string hx=\"\";\n                \n                // Change the value of Count to HexaDecimal value.\n                while(count!=0)\n                {\n                    int rem=count%16;\n                    \n                    if(rem<10)\n                        hx+=('0'+rem);\n                    else\n                        hx+=('a'+(rem-10));\n                        \n                    count/=16;\n                }\n                ans+=hx;    //appending the hex value of count.\n                c=S[i];\n                count=1;\n            }\n        }\n        \n        ans+=c;\n        string hx=\"\";\n        while(count!=0)\n        {\n            int rem=count%16;\n            \n            if(rem<10)\n                hx+=('0'+rem);\n            else\n                hx+=('a'+(rem-10));\n                \n            count/=16;\n        }\n        ans+=hx;\n        \n        string final_ans=\"\";\n        \n        for(int i = ans.length()-1 ; i>=0 ; i--)\n            final_ans+=ans[i];                      // Reversing the answer.\n            \n        return final_ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static String encryptString(String S){\n        int count = 0;\n        \n        String ans=\"\";\n        \n        char c = S.charAt(0);\n        count = 1;\n        \n        for(int i=1 ; i<S.length() ; i++)\n        {\n            if(S.charAt(i)==S.charAt(i-1))\n                count++;          // Counting number of continuous repeating Characters.\n            else\n            {\n                ans+=c;     // appending the character\n                String hx=\"\";\n                \n                // Change the value of Count to HexaDecimal value.\n                while(count!=0)\n                {\n                    int rem=count%16;\n                    \n                    if(rem<10)\n                        hx+=(char)('0'+rem);\n                    else\n                        hx+=(char)('a'+(rem-10));\n                        \n                    count/=16;\n                }\n                ans+=hx;        //appending the hex value of count.\n                c=S.charAt(i);\n                count=1;\n            }\n        }\n        \n        ans+=c;\n        String hx=\"\";\n        while(count!=0)\n        {\n            int rem=count%16;\n            \n            if(rem<10)\n                hx+=(char)('0'+rem);\n            else\n                hx+=(char)('a'+(rem-10));\n                \n            count/=16;\n        }\n        ans+=hx;\n        \n        String final_ans=\"\";\n        \n        for(int i = ans.length()-1 ; i>=0 ; i--)\n            final_ans+=ans.charAt(i);             // Reversing the answer.\n            \n        return final_ans;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def encryptString(self, S):\n        \n        ans=\"\"\n        \n        count=0\n        \n        c=S[0]\n        count=1\n        \n        for i in range(1,len(S)):\n            if S[i]==S[i-1]:\n                count+=1         # Counting number of continuous repeating Characters\n            else:\n                ans+=c     # appending the Character.\n                hx=\"\"\n                #Change the Count value to Hexadecimal.\n                while(count):\n                    rem=count%16\n                    if(rem<10):\n                        hx+=chr(48+rem)\n                    else:\n                        hx+=chr(97+rem-10) \n                    count//=16 \n                ans+=hx      # appending the hex value.\n                c=S[i]\n                count=1\n                \n        ans+=c \n        hx=\"\"\n        while(count):\n            rem=count%16\n            if(rem<10):\n                hx+=chr(48+rem)\n            else:\n                hx+=chr(97+rem-10) \n            count//=16 \n        ans+=hx\n        \n        ans=ans[::-1]      # reversing the answer.\n        \n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @returns {string}\n*/\n\nclass Solution {\n  //Function to encrypt the given string.\n  encryptString(S) {\n    let ans = \"\";\n    let count = 0;\n    let c = S[0];\n    count = 1;\n    \n    for (let i = 1; i < S.length; i++) {\n      if (S[i] == S[i-1]) {\n        count += 1;\n      } else {\n        ans += c;\n        let hx = \"\";\n        \n        while (count) {\n          let rem = count % 16;\n          \n          if (rem < 10) {\n            hx += String.fromCharCode(48 + rem);\n          } else {\n            hx += String.fromCharCode(97 + rem - 10);\n          }\n          count = Math.floor(count / 16);\n        }\n        \n        ans += hx;\n        c = S[i];\n        count = 1;\n      }\n    }\n    \n    ans += c;\n    let hx = \"\";\n    \n    while (count) {\n      let rem = count % 16;\n          \n      if (rem < 10) {\n        hx += String.fromCharCode(48 + rem);\n      } else {\n        hx += String.fromCharCode(97 + rem - 10);\n      }\n      count = Math.floor(count / 16);\n    }\n        \n    ans += hx;\n    ans = ans.split(\"\").reverse().join(\"\");      \n    return ans;\n  }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}