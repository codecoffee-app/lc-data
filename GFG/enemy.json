{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709992,
            "title": "Enemy",
            "titleSlug": "enemy",
            "content": "<p><span style=\"font-size:18px\">You live in Geek land. Geek land can be seen as a grid of shape <strong>N</strong> x&nbsp;<strong>M</strong>.There are <strong>K</strong>&nbsp;enemy at <strong>K</strong>&nbsp;positions. Each enemy blocks the row and column to which it belongs. You have to find the largest continuous area that is not blocked.No two enemies share the same row or the same column.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 2\r\nM = 2\r\nK = 1\r\nenemy[]={{2,2}}\r\n<strong>Output:</strong>\r\n1\r\n<strong>Explanation:</strong>\r\nSince only (1,1) cell is free from the enemy hence answer is 1.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\nM = 3\r\nK = 1\r\nenemy[]={{3,3}}\r\n<strong>Output:</strong>\r\n4\r\n<strong>Explanation:</strong>\r\nThe cells (1,1),(1,2) ,(2,1) and (2,2) are free hence answer =4.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>largestArea()</strong>&nbsp;which takes the size of geek land <strong>n,m</strong> and a 2-D matrix <strong>enemy </strong>of size <strong>k</strong> denoting the coordinates of the enemy&#39;s and need to return the largest area that is free.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(KlogK)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(K)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N,M &lt;= 10<sup>4</sup><br />\r\n0&lt;=K&lt;=min(N,M)<br />\r\n1&lt;=X<sub>i</sub>&lt;=N<br />\r\n1&lt;=Y<sub>i</sub>&lt;=M</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Sorting,Greedy</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\n    public:\n        //Function to find the largest area by placing the enemy at certain positions.\n        int largestArea(int n,int m,int k,vector<vector<int>> &enemy)\n        {\n            //Creating two arrays to store the x and y positions of the enemies.\n            vector <int> x,y;\n            for(auto j:enemy)\n                x.push_back(j[0]);\n            for(auto j:enemy)\n                y.push_back(j[1]);\n\n            //Inserting 0 and n+1 in x array to represent the boundaries.\n            x.push_back(0);\n            x.push_back(n+1);\n\n            //Inserting 0 and m+1 in y array to represent the boundaries.\n            y.push_back(0);\n            y.push_back(m+1);\n\n            //Sorting the x and y arrays.\n            sort(x.begin(),x.end());\n            sort(y.begin(),y.end());\n\n            //Initializing variables to store maximum x and y distances.\n            int maxx=0,maxy=0;\n\n            //Finding the maximum difference between adjacent elements in x array.\n            for(int i=1;i<x.size();i++)\n                maxx=max(maxx,x[i]-x[i-1]-1);\n\n            //Finding the maximum difference between adjacent elements in y array.\n            for(int i=1;i<y.size();i++)\n                maxy=max(maxy,y[i]-y[i-1]-1);\n\n            //Returning the largest area by multiplying the maximum x and y distances.\n            return maxx*maxy;\n        }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int largestArea(int n, int m, int k, int[][] enemy) {\n        // If there are no enemies, the largest area is the entire grid\n        if (k == 0) {\n            return n * m;\n        }\n        \n        // Store the rows and columns of the enemies in lists\n        ArrayList<Integer> row = new ArrayList<>();\n        ArrayList<Integer> col = new ArrayList<>();\n        row.add(0); // Add the starting row\n        col.add(0); // Add the starting column\n        for (int i = 0; i < k; i++) {\n            row.add(enemy[i][0]);\n            col.add(enemy[i][1]);\n        }\n        row.add(n + 1); // Add the ending row\n        col.add(m + 1); // Add the ending column\n        \n        // Sort the row and column lists\n        Collections.sort(row);\n        Collections.sort(col);\n        \n        // Find the maximum gap between rows and columns\n        int mx_row = 0;\n        for (int i = 0; i < row.size() - 1; i++) {\n            mx_row = Math.max(mx_row, row.get(i + 1) - row.get(i) - 1);\n        }\n        int mx_col = 0;\n        for (int i = 0; i < col.size() - 1; i++) {\n            mx_col = Math.max(mx_col, col.get(i + 1) - col.get(i) - 1);\n        }\n        \n        // Calculate the largest area by multiplying the maximum gap between rows and columns\n        return mx_row * mx_col;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\r\n\r\nclass Solution:\r\n    def largestArea(self, n: int, m: int, k: int, enemy: List[List[int]]) -> int:\r\n        \r\n        # creating empty lists for x and y coordinates\r\n        x = []\r\n        y = []\r\n        \r\n        # extracting x coordinates from enemy list\r\n        for j in enemy:\r\n            x.append(j[0])\r\n            \r\n        # extracting y coordinates from enemy list\r\n        for j in enemy:\r\n            y.append(j[1])\r\n            \r\n        # adding additional boundary coordinates (0 and n+1) to x and (0 and m+1) to y\r\n        x.append(0)\r\n        x.append(n+1)\r\n        y.append(0)\r\n        y.append(m+1)\r\n        \r\n        # sorting x and y coordinates\r\n        x.sort()\r\n        y.sort()\r\n        \r\n        # initializing variables to store maximum differences\r\n        maxx = 0\r\n        maxy = 0\r\n        \r\n        # finding maximum difference between adjacent x coordinates\r\n        for i in range(1, len(x)):\r\n            maxx = max(maxx, x[i] - x[i-1] - 1)\r\n            \r\n        # finding maximum difference between adjacent y coordinates\r\n        for i in range(1, len(y)):\r\n            maxy = max(maxy, y[i] - y[i-1] - 1)\r\n            \r\n        # returning the area\r\n        return maxx * maxy",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number} m\n * @param {number} k\n * @param {number[][]} enemy\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the largest area in the grid.\n    largestArea(n, m, k, enemy) {\n        // Extracting x and y coordinates separately\n        let x = enemy.map(e => e[0]);\n        let y = enemy.map(e => e[1]);\n\n        // Adding boundaries \n        x.push(0, n + 1);\n        y.push(0, m + 1);\n\n        // Sorting x and y coordinates\n        x.sort((a, b) => a - b);\n        y.sort((a, b) => a - b);\n\n        // Variables to store maximum differences\n        let maxx = 0;\n        let maxy = 0;\n\n        // Finding maximum difference between two adjacent x coordinates\n        for (let i = 1; i < x.length; i++) {\n            maxx = Math.max(maxx, x[i] - x[i - 1] - 1);\n        }\n        \n        // Finding maximum difference between two adjacent y coordinates\n        for (let i = 1; i < y.length; i++) {\n            maxy = Math.max(maxy, y[i] - y[i - 1] - 1);\n        }\n\n        // Returning the area\n        return maxx * maxy;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int largestArea(int n, int m, int k, List<List<int>> enemy)\n    {\n        //Creating two arrays to store the x and y positions of the enemies.\n        List<int> x = new List<int>();\n        List<int> y = new List<int>();\n        foreach(List<int> j in enemy)\n            x.Add(j[0]);\n        foreach(List<int> j in enemy)\n            y.Add(j[1]);\n\n        //Inserting 0 and n+1 in x array to represent the boundaries.\n        x.Add(0);\n        x.Add(n+1);\n\n        //Inserting 0 and m+1 in y array to represent the boundaries.\n        y.Add(0);\n        y.Add(m+1);\n\n        //Sorting the x and y arrays.\n        x.Sort();\n        y.Sort();\n\n        //Initializing variables to store maximum x and y distances.\n        int maxx=0,maxy=0;\n\n        //Finding the maximum difference between adjacent elements in x array.\n        for(int i=1;i<x.Count;i++)\n            maxx=Math.Max(maxx,x[i]-x[i-1]-1);\n\n        //Finding the maximum difference between adjacent elements in y array.\n        for(int i=1;i<y.Count;i++)\n            maxy=Math.Max(maxy,y[i]-y[i-1]-1);\n\n        //Returning the largest area by multiplying the maximum x and y distances.\n        return maxx*maxy;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}