{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703095,
            "title": "Equal 0, 1 and 2",
            "titleSlug": "equal-0-1-and-23208",
            "content": "<p><span style=\"font-size:20px\">Given a string <strong>str </strong>of length <strong>N</strong> which consists of only 0, 1 or 2s, count the number of substring which have equal number of 0s, 1s and 2s.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> str = &ldquo;0102010&rdquo;</span><span style=\"font-size:18px\">\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> Substring str[2, 4] = &ldquo;102&rdquo; and\r\nsubstring str[4, 6] = &ldquo;201&rdquo; has equal number\r\nof 0, 1 and 2 \r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> str = &ldquo;11100022&rdquo;\r\n<strong>Output:</strong> 0\r\n<strong>Explanation: </strong>There is no substring with\r\nequal number of 0 , 1 and 2.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything.</span><span style=\"font-size:18px\">Your task is to complete the function&nbsp;<strong>getSubstringWithEqual012()</strong> which takes a single string str as input and returns the answer.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:20px\">1 &le; N&nbsp;&le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Go for hashing!&nbsp;</span></p>",
            "<p><span style=\"font-size:18px\">Hash the differences of&nbsp; count of 0 , 1 , 2 at ith index. Think how will this help!</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Backend complete function template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    long long getSubstringWithEqual012(string str)\r\n    {\r\n        long long n = str.length();\r\n    \r\n        // map to store, how many times a difference\r\n        // pair has occurred previously\r\n        unordered_map<string, long long> mp;\r\n        mp[\"0*0\"] = 1;\r\n    \r\n        //  zc (Count of zeroes), oc(Count of 1s)\r\n        //  and tc(count of twos)\r\n        //  In starting all counts are zero\r\n        long long zc = 0, oc = 0, tc = 0;\r\n    \r\n        //  looping llo string\r\n        long long res = 0;  // Initialize result\r\n        for (int i = 0; i < n; ++i)\r\n        {\r\n            // incresing the count of current character\r\n            if (str[i] == '0') zc++;\r\n            else if (str[i] == '1') oc++;\r\n            else tc++;  // Assuming that string doesn't contain\r\n                        // other characters\r\n    \r\n            // making pair of differences (z[i] - o[i],\r\n            // z[i] - t[i])\r\n            string key = to_string(zc - oc) + \"*\" + to_string(zc - tc);\r\n    \r\n            // Count of previous occurrences of above pair\r\n            // indicates that the subarrays forming from\r\n            // every previous occurrence to this occurrence\r\n            // is a subarray with equal number of 0's, 1's\r\n            // and 2's\r\n            res = res + mp[key];\r\n    \r\n            // increasing the count of current difference\r\n            // pair by 1\r\n            mp[key]++;\r\n        }\r\n    \r\n        return res;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Backend complete function Template for Java\r\n\r\nclass Solution \r\n{ \r\n    long getSubstringWithEqual012(String str) \r\n    { \r\n        // map to store, how many times a difference\r\n        // pair has occurred previously (key = diff1 *\r\n        // diff2)\r\n        HashMap<String, Integer> map = new HashMap<>();\r\n        map.put(\"0*0\", 1);\r\n \r\n        //  zc (Count of zeroes), oc(Count of 1s)\r\n        //  and tc(count of twos)\r\n        //  In starting all counts are zero\r\n        int zc = 0, oc = 0, tc = 0;\r\n \r\n        int ans = 0;\r\n \r\n        //  looping into string\r\n        for (int i = 0; i < str.length(); i++) {\r\n            // increasing the count of current character\r\n            if (str.charAt(i) == '0')\r\n                zc++;\r\n            else if (str.charAt(i) == '1')\r\n                oc++;\r\n            else\r\n                tc++;\r\n \r\n            // making key of differences (z[i] - o[i],\r\n            // z[i] - t[i])\r\n            String key = (zc - oc) + \"*\" + (zc - tc);\r\n            // Count of previous occurrences of above pair\r\n            // indicates that the subarrays forming from\r\n            // every previous occurrence to this occurrence\r\n            // is a subarray with equal number of 0's, 1's\r\n            // and 2's\r\n            ans += map.getOrDefault(key, 0);\r\n \r\n            map.put(key, map.getOrDefault(key, 0) + 1);\r\n        }\r\n        // increasing the count of current difference\r\n        // pair by 1\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\r\n\r\nclass Solution:\r\n\r\n    def getSubstringWithEqual012(self, string):\r\n        n = len(string)\r\n \r\n        # map to store, how many times a difference\r\n        # pair has occurred previously\r\n        mp = dict()\r\n        mp[(0, 0)] = 1\r\n     \r\n        # zc (Count of zeroes), oc(Count of 1s)\r\n        # and tc(count of twos)\r\n        # In starting all counts are zero\r\n        zc, oc, tc = 0, 0, 0\r\n     \r\n        # looping into string\r\n        res = 0 # Initialize result\r\n        for i in range(n):\r\n     \r\n            # increasing the count of current character\r\n            if string[i] == '0':\r\n                zc += 1\r\n            elif string[i] == '1':\r\n                oc += 1\r\n            else:\r\n                tc += 1 # Assuming that string doesn't contain\r\n                        # other characters\r\n     \r\n            # making pair of differences (z[i] - o[i],\r\n            # z[i] - t[i])\r\n            tmp = (zc - oc, zc - tc)\r\n     \r\n            # Count of previous occurrences of above pair\r\n            # indicates that the subarrays forming from\r\n            # every previous occurrence to this occurrence\r\n            # is a subarray with equal number of 0's, 1's\r\n            # and 2's\r\n            if tmp not in mp:\r\n                res += 0\r\n            else:\r\n                res += mp[tmp]\r\n     \r\n            # increasing the count of current difference\r\n            # pair by 1\r\n            if tmp in mp:\r\n                mp[tmp] += 1\r\n            else:\r\n                mp[tmp] = 1\r\n     \r\n        return res",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} Str\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the number of substrings with equal 0, 1 and 2\n    getSubstringWithEqual012(Str)\n    {\n        let n = Str.length;\n        let mp = new Map();\n        mp.set(\"0,0\", 1);\n     \n        let zc = 0, oc = 0, tc = 0;\n        let res = 0;\n     \n        for(let i=0; i<n; i++){\n            if(Str[i] === \"0\"){\n                zc += 1;\n            } else if(Str[i] === \"1\"){\n                oc += 1;\n            } else{\n                tc += 1;\n            }\n            let tmp = (zc - oc) + \",\" + (zc - tc);\n     \n            if(!mp.has(tmp)){\n                res += 0;\n            } else{\n                res += mp.get(tmp);\n            }\n     \n            if(mp.has(tmp)){\n                mp.set(tmp, mp.get(tmp)+1);\n            } else{\n                mp.set(tmp, 1);\n            }\n        }\n     \n        return res;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the number of substrings with equal 0s, 1s, and 2s.\n    public long getSubstringWithEqual012(string str)\n    {\n        long n = str.Length;\n\n        // map to store, how many times a difference\n        // pair has occurred previously\n        Dictionary<string, long> mp = new Dictionary<string, long>();\n        mp[\"0*0\"] = 1;\n\n        //  zc (Count of zeroes), oc(Count of 1s)\n        //  and tc(count of twos)\n        //  In starting all counts are zero\n        long zc = 0, oc = 0, tc = 0;\n\n        //  looping llo string\n        long res = 0;  // Initialize result\n        for (int i = 0; i < n; ++i)\n        {\n            // incresing the count of current character\n            if (str[i] == '0') zc++;\n            else if (str[i] == '1') oc++;\n            else tc++;  // Assuming that string doesn't contain\n                        // other characters\n\n            // making pair of differences (z[i] - o[i],\n            // z[i] - t[i])\n            string key = (zc - oc).ToString() + \"*\" + (zc - tc).ToString();\n\n            // Count of previous occurrences of above pair\n            // indicates that the subarrays forming from\n            // every previous occurrence to this occurrence\n            // is a subarray with equal number of 0's, 1's\n            // and 2's\n            if (mp.ContainsKey(key))\n                res += mp[key];\n\n            // increasing the count of current difference\n            // pair by 1\n            if (mp.ContainsKey(key))\n                mp[key]++;\n            else\n                mp[key] = 1;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}