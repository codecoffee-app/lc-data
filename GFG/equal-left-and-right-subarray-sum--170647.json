{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714008,
            "title": "Equal Left and Right Subarray Sum",
            "titleSlug": "equal-left-and-right-subarray-sum--170647",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong>. The task is to find the <strong>first index</strong> in the array such that the sum of elements before it is equal to the sum of elements after it.&nbsp;</span><span style=\"font-size: 18px;\">Return -1 if no such point exists.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1,3,5,2,2] \n<strong>Output: </strong>2<strong> \nExplanation: </strong>For second test case at position 2 elements before it (1+3) = elements after it (2+2).<strong> </strong></span>\n</pre>\n<pre><strong>Input: </strong><span style=\"font-size: 18px;\">arr[] = [1]\n<strong>Output: </strong>0<strong>\nExplanation: </strong>Since its the only element hence it is the only point.<br /></span></pre>\n<pre><strong>Input: </strong>arr[] = [5, 4, 3, 2, 1]\n<strong>Output: -</strong>1</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup>0 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the first index where the sum of elements before the index is equal to the sum of elements after the index. Return -1 if no such index exists.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1,3,5,2,2]",
                        "output": "2",
                        "explanation": "The sum of elements before index 2 (1+3 = 4) is equal to the sum of elements after index 2 (2+2 = 4)."
                    },
                    {
                        "input": "[1]",
                        "output": "0",
                        "explanation": "Since there are no elements before or after index 0, it satisfies the condition."
                    },
                    {
                        "input": "[5, 4, 3, 2, 1]",
                        "output": "-1",
                        "explanation": "There is no index in the array where the sum of elements before it is equal to the sum of elements after it."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the conecpt of prefix sum.</p>",
            "<p>The idea is to use 2 variables to store prefix and suffix sum.</p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the index where the array can be split into two equal sum\n    // subarrays\n    int equalSum(vector<int> &arr) {\n        // Creating two arrays to store the prefix sum and suffix sum\n        int N = arr.size();\n        vector<int> pre(N + 1), suf(N + 1);\n\n        // Calculating the prefix sum of the array\n        for (int i = 1; i <= N; i++) {\n            pre[i] = pre[i - 1] + arr[i - 1];\n        }\n\n        // Calculating the suffix sum of the array\n        for (int i = N - 1; i >= 0; i--) {\n            suf[i] = suf[i + 1] + arr[i];\n        }\n\n        // Checking if there exists an index where the prefix sum equals the suffix sum\n        for (int i = 1; i <= N; i++) {\n            if (pre[i - 1] == suf[i]) {\n                return i - 1; // Returning the index if found\n            }\n        }\n        return -1; // Returning -1 if no such index exists\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    int equalSum(int[] arr) {\n        int N = arr.length;\n        long rem = 0, sum = 0;\n        for (int i = 0; i < N; i++) {\n            rem += arr[i];\n        }\n        for (int i = 0; i < N; i++) {\n            if (sum == (rem - arr[i])) return i;\n            sum += arr[i];\n            rem -= arr[i];\n        }\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\nclass Solution:\n\n    #Function to find equilibrium point in the array.\n    def equalSum(self, arr):\n        N = len(arr)\n        #We store the sum of all array elements.\n        sum = 0\n        for i in range(0, N):\n            sum += arr[i]\n\n        #sum2 is used to store prefix sum.\n        sum2 = 0\n\n        for i in range(0, N, +1):\n\n            #Leaving out the value of current element from suffix sum.\n            sum -= arr[i]\n\n            #Checking if suffix and prefix sums are same.\n            if sum2 == sum:\n                #returning the index or equilibrium point.\n                return (i)\n\n            #Adding the value of current element to prefix sum.\n            sum2 += arr[i]\n\n        return -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n\n * @returns {number}\n*/\n\nclass Solution {\n    // Function to find equilibrium point in the array.\n    equalSum(arr) {\n        // We store the sum of all array elements.\n        let N = arr.length;\n        let sum = 0;\n        for (let i = 0; i < N; i++) {\n            sum += arr[i];\n        }\n\n        // sum2 is used to store prefix sum.\n        let sum2 = 0;\n\n        for (let i = 0; i < N; i++) {\n            // Leaving out the value of current element from suffix sum.\n            sum -= arr[i];\n\n            // Checking if suffix and prefix sums are same.\n            if (sum2 === sum) {\n                // returning the index or equilibrium point.\n                return (i);\n            }\n\n            // Adding the value of current element to prefix sum.\n            sum2 += arr[i];\n        }\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}