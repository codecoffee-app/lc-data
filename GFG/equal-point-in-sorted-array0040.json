{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702766,
            "title": "Equal Point in Sorted Array",
            "titleSlug": "equal-point-in-sorted-array0040",
            "content": "<p><span style=\"font-size:18px\">Given a sorted array <strong>arr[ ]</strong> of <strong>N</strong> positive integers. Your task is to find an index <strong>i</strong> in the array from where the number of elements smaller than <strong>arr[i]</strong> in the left side of the index&nbsp;is equal to the number of elements&nbsp;greater than<strong> arr[i]</strong> in the right side of the index.<br />\nIf no such index exists, print &quot;-1&quot;.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 6\narr[] = {1, 2, 3, 3, 3, 3}\n<strong>Output:</strong>\n1\n<strong>Explanation:\n</strong>2 is the element before which we have one\nelement that is smaller than 2 and we have\none element to its right which is greater\nthan 2. Hence, print the index of 2.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 8\narr[] = {1, 2, 3, 3, 3, 3, 4, 4}\n<strong>Output:</strong>\n-1\n<strong>Explanation:</strong>\nThere is no index as such, so print -1</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>findEqualPoint()</strong>&nbsp;which takes the array <strong>arr[]</strong> and its size <strong>N</strong><strong> </strong>as input parameters&nbsp;and returns the required index. If there are multiple indices, return&nbsp;the smallest one. If such index doesn&#39;t exist&nbsp;then return &quot;-1&quot; (without quotes).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N)<br />\n<strong>Expected Auxiliary Space: </strong>O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup><br />\n1 &le; A<sub>i</sub> &le; 10<sup>12</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr[]` of `N` positive integers, find an index `i` in the array such that the number of elements smaller than `arr[i]` to its left is equal to the number of elements greater than `arr[i]` to its right. If multiple such indices exist, return the smallest one. If no such index exists, return -1.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= A_i <= 10^12"
                ],
                "testcases": [
                    {
                        "input": "N = 6\narr[] = {1, 2, 3, 3, 3, 3}",
                        "output": "1",
                        "explanation": "The element at index 1 (value 2) has one smaller element (1) to its left and one larger element (3) to its right."
                    },
                    {
                        "input": "N = 8\narr[] = {1, 2, 3, 3, 3, 3, 4, 4}",
                        "output": "-1",
                        "explanation": "There is no element in the array that satisfies the given condition."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Approach is to create an auxiliary array and store all distinct elements in it. If the count of distinct elements is even, then Equal Point does not exist. If count is odd, then the equal point is the middle point of the auxiliary array.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Returns value of Equal point in a sorted array arr[] \n// It returns -1 if there is no Equal Point. \nint findEqualPoint(int arr[], int n) \n{ \n\t// To store first indexes of distinct elements of arr[] \n\tint distArr[n]; \n\n\t// Traverse input array and store indexes of first \n\t// occurrences of distinct elements in distArr[] \n\tint i = 0, di = 0; \n\twhile (i < n) \n\t{ \n\t\t// This element must be first occurrence of a \n\t\t// number (this is made sure by below loop), \n\t\t// so add it to distinct array. \n\t\tdistArr[di++] = i++; \n\n\t\t// Avoid all copies of arr[i] and move to next \n\t\t// distinct element. \n\t\twhile (i<n && arr[i] == arr[i-1]) \n\t\t\ti++; \n\t} \n\n\t// di now has total number of distinct elements. \n\t// If di is odd, then equal point exists and is at \n\t// di/2, otherwise return -1. \n\treturn (di & 1)? distArr[di>>1] : -1; \n} ",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Compute \n{ \n\t// Returns value of Equal point in a sorted array arr[] \n\t// It returns -1 if there is no Equal Point. \n\tstatic int findEqualPoint(int arr[], int n) \n\t{ \n\t\t// To store first indexes of distinct elements of arr[] \n\t\tint distArr[] = new int[n]; \n\t\n\t\t// Traverse input array and store indexes of first \n\t\t// occurrences of distinct elements in distArr[] \n\t\tint i = 0, di = 0; \n\t\twhile (i < n) \n\t\t{ \n\t\t\t// This element must be first occurrence of a \n\t\t\t// number (this is made sure by below loop), \n\t\t\t// so add it to distinct array. \n\t\t\tdistArr[di++] = i++; \n\t\n\t\t\t// Avoid all copies of arr[i] and move to next \n\t\t\t// distinct element. \n\t\t\twhile (i<n && arr[i] == arr[i-1]) \n\t\t\t\ti++; \n\t\t} \n\t\n\t\t// di now has total number of distinct elements. \n\t\t// If di is odd, then equal point exists and is at \n\t\t// di/2, otherwise return -1. \n\t\treturn (di & 1)!=0 ? distArr[di>>1] : -1; \n\t} \n} \n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n# Python 3 program to find \n# Equal point in a sorted \n# array which may have \n# many duplicates. \n\n# Returns value of Equal \n# point in a sorted array \n# arr[]. It returns -1 if \n# there is no Equal Point. \ndef findEqualPoint(arr, n): \n\n\t# To store first indexes of \n\t# distinct elements of arr[] \n\tdistArr = [0] * n \n\n\t# Traverse input array and \n\t# store indexes of first \n\t# occurrences of distinct \n\t# elements in distArr[] \n\ti = 0\n\tdi = 0\n\twhile (i < n): \n\t\n\t\t# This element must be \n\t\t# first occurrence of a \n\t\t# number (this is made \n\t\t# sure by below loop), \n\t\t# so add it to distinct array. \n\t\tdistArr[di] = i \n\t\tdi += 1\n\t\ti += 1\n\n\t\t# Avoid all copies of \n\t\t# arr[i] and move to \n\t\t# next distinct element. \n\t\twhile (i < n and\n\t\t\tarr[i] == arr[i - 1]): \n\t\t\ti += 1\n\t\n\t# di now has total number \n\t# of distinct elements. \n\t# If di is odd, then equal \n\t# point exists and is at \n\t# di/2, otherwise return -1. \n\treturn distArr[di >> 1] if (di & 1) else -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to find the equilibrium point.\n    findEqualPoint(arr, n)\n    {\n        //To store first indexes of distinct elements of arr[]\n        let distArr = [];\n\n        //Traverse input array and store indexes of first\n        //occurrences of distinct elements in distArr[]\n        let i = 0;\n        let di = 0;\n        while (i < n) {\n            //This element must be first occurrence of a\n            //number (this is made sure by below loop),\n            //so add it to distinct array.\n            distArr[di] = i;\n            di++;\n            i++;\n\n            //Avoid all copies of arr[i] and move to next distinct element.\n            while (i < n && arr[i] == arr[i - 1]) {\n                i++;\n            }\n        }\n\n        //di now has total number of distinct elements.\n        //If di is odd, then equal point exists and is at\n        //di/2, otherwise return -1.\n        return (di & 1) ? distArr[di >> 1] : -1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}