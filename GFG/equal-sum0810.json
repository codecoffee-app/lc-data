{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702711,
            "title": "Equal Sum",
            "titleSlug": "equal-sum0810",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>a</strong><strong>rr</strong>. Determine if there exists an element in the array such that the sum of the elements on its left is equal to the sum of the elements on its right. If there are no elements to the left/right, then the sum is considered to be zero.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 3]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Consider 1-based indexing i = 3, for [1, 2] sum is 3 and for [3] sum is also 3.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 5]\n<strong>Output:</strong> false\n<strong>Explanation:</strong>&nbsp;No such index present.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup>&nbsp;<br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, determine if there exists an element in the array such that the sum of the elements to its left is equal to the sum of the elements to its right. If there are no elements to the left or right of a specific element, the sum is considered to be zero.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 3]",
                        "output": "true",
                        "explanation": "For the element at index 2 (3 in 1-based indexing), the sum of elements to its left [1, 2] is 3, and the sum of elements to its right [3] is also 3."
                    },
                    {
                        "input": "[1, 5]",
                        "output": "false",
                        "explanation": "There is no index in the array where the sum of the elements to the left equals the sum of the elements to the right."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Take the total sum then subtract one by one element from the total sum and add to removed sum and check the condition.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution {\n  public:\n    string equilibrium(vector<int> &arr) {\n        int n = arr.size();\n        int sum = 0;     // initialize sum of whole array\n        int leftSum = 0; // initialize leftSum\n\n        /* Find sum of the whole array */\n        for (int i = 0; i < n; ++i)\n            sum += arr[i];\n\n        for (int i = 0; i < n; ++i) {\n            sum -= arr[i]; // sum is now right sum for index i\n\n            if (leftSum == sum)\n                return \"true\";\n\n            leftSum += arr[i];\n        }\n\n        /* If no equilibrium index found, then return \"NO\" */\n        return \"false\";\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    String equilibrium(int arr[]) {\n        int n = arr.length;\n        int sum = 0;     // initialize sum of whole array\n        int leftsum = 0; // initialize leftsum\n\n        /* Find sum of the whole array */\n        for (int i = 0; i < n; ++i) sum += arr[i];\n\n        for (int i = 0; i < n; ++i) {\n            sum -= arr[i]; // sum is now right sum for index i\n\n            if (leftsum == sum) return \"true\";\n\n            leftsum += arr[i];\n        }\n\n        /* If no equilibrium index found, then return \"NO\" */\n        return \"false\";\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def equilibrium(self, arr):\n\n        # finding the sum of whole array\n        n = len(arr)\n        total_sum = sum(arr)\n        leftsum = 0\n        for i, num in enumerate(arr):\n\n            # total_sum is now right sum\n            # for index i\n            total_sum -= num\n\n            if leftsum == total_sum:\n                return \"true\"\n            leftsum += num\n\n        # If no equilibrium index found,\n        # then return \"NO\"\n        return \"false\"\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    equilibrium(arr) {\n        let n = arr.length;\n        let sum = 0;     // initialize sum of whole array\n        let leftSum = 0; // initialize leftSum\n\n        /* Find sum of the whole array */\n        for (let i = 0; i < n; ++i) sum += arr[i];\n\n        for (let i = 0; i < n; ++i) {\n            sum -= arr[i]; // sum is now right sum for index i\n            if (leftSum == sum) return \"true\";\n            leftSum += arr[i];\n        }\n        /* If no equilibrium index found, then return \"NO\" */\n        return \"false\";\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}