{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702682,
            "title": "Equal Sums",
            "titleSlug": "equal-sums4801",
            "content": "<p><span >You are given an array <code>arr[]</code> of positive integers. Your task is to find the smallest non-negative integer <code>x</code> (greater than or equal to zero) that can be inserted between any two elements of the array such that the sum of the elements in the subarray before <code>x</code> is equal to the sum of the elements in the subarray after <code>x</code>, with the newly inserted integer <code>x</code> included in either of the two subarrays.</span></p>\n<p><span >Your output should be a list of three integers:</span></p>\n<ol>\n<li><span >The smallest non-negative integer <code>x</code> that can be inserted.</span></li>\n<li><span >The position (1-indexed) where <code>x</code> is inserted.</span></li>\n<li><span >A flag indicating whether <code>x</code> was added to the first subarray (1) or the second subarray (2).</span></li>\n</ol>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [3, 2, 1, 5, 7, 8]\n<strong>Output:</strong> [4, 5, 1]\n<strong>Explanation:</strong> The smallest possible integer x = 4 can be inserted between 5 and 7, making the subarrays:\nFirst subarray: [3, 2, 1, 5, 4] with sum = 15.\nSecond subarray: [7, 8] with sum = 15.\nx is inserted at position 5 and included in the first subarray.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [9, 5, 1, 2, 0]<strong>\nOutput: </strong>[1, 2, 2]<strong>\nExplanation: </strong>The smallest possible integer x = 1 can be inserted between 9 and 5, making the subarrays:\nFirst subarray: [9] with sum = 9.\nSecond subarray: [5, 1, 2, 0, 1] with sum = 9.\nx is inserted at position 2 and included in the second subarray.<br /></span></pre>\n<p><span ><strong>Expected Time Complexity:</strong>&nbsp;O(n).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span ><strong>Constraints:<br /></strong>2 &le; arr.size() &le; 10<sup>6<br /></sup>0 &le; arr[i] &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of positive integers, find the smallest non-negative integer `x` that can be inserted between any two elements of the array such that the sum of the elements in the subarray before `x` equals the sum of the elements in the subarray after `x`. The inserted integer `x` can be included in either the first or the second subarray. The output should be a list containing the smallest `x`, its insertion position (1-indexed), and a flag indicating whether it was added to the first (1) or second (2) subarray.",
                "constraints": [
                    "2 \u2264 arr.size() \u2264 10^6",
                    "0 \u2264 arr[i] \u2264 10^3"
                ],
                "testcases": [
                    {
                        "input": "[3, 2, 1, 5, 7, 8]",
                        "output": "[4, 5, 1]",
                        "explanation": "Inserting x = 4 between 5 and 7 results in two subarrays with equal sums.  First subarray: [3, 2, 1, 5, 4] (sum = 15). Second subarray: [7, 8] (sum = 15). The integer 4 is inserted at position 5 and included in the first subarray."
                    },
                    {
                        "input": "[9, 5, 1, 2, 0]",
                        "output": "[1, 2, 2]",
                        "explanation": "Inserting x = 1 between 9 and 5 results in two subarrays with equal sums. First subarray: [9] (sum = 9). Second subarray: [5, 1, 2, 0, 1] (sum = 9). The integer 1 is inserted at position 2 and included in the second subarray."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Find the smallest integer x, its position, and subarray placement where inserting x makes both subarrays' sums equal.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the equal sum partition.\n    vector<int> EqualSum(vector<int> arr) {\n        int n = arr.size();\n        int totalSum = accumulate(arr.begin(), arr.end(), 0);\n        int leftSum = 0;\n\n        int minDiff = INT_MAX, ans2 = -1, ans3 = -1;\n\n        // Iterating over the array elements.\n        for (int i = 0; i < n; i++) {\n            leftSum += arr[i];\n            int rightSum = totalSum - leftSum;\n\n            // Calculating the absolute difference between leftSum and rightSum.\n            int diff = abs(leftSum - rightSum);\n\n            // Updating the minimum difference and partition indices.\n            if (diff < minDiff) {\n                minDiff = diff;\n                ans2 = i + 2; // Partition starting from next index.\n                ans3 = (leftSum >= rightSum) ? 1 : 2;\n            }\n        }\n\n        // Creating a result vector.\n        vector<int> result;\n        result.push_back(minDiff);\n        result.push_back(ans2);\n        result.push_back(ans3);\n\n        // Returning the result.\n        return result;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n// Solution class\nclass Solution {\n    public ArrayList<Integer> equalSum(ArrayList<Integer> arr) {\n        int n = arr.size();\n        int totalSum = 0;\n        for (int i = 0; i < n; i++) {\n            totalSum += arr.get(i);\n        }\n        int leftSum = 0;\n\n        int minDiff = Integer.MAX_VALUE, ans2 = -1, ans3 = -1;\n\n        // Iterate over the array elements\n        for (int i = 0; i < n; i++) {\n            leftSum += arr.get(i);\n            int rightSum = totalSum - leftSum;\n\n            // Calculate the absolute difference between leftSum and rightSum\n            int diff = Math.abs(leftSum - rightSum);\n\n            // Update the minimum difference and partition indices\n            if (diff < minDiff) {\n                minDiff = diff;\n                ans2 = i + 2; // Partition starting from the next index\n                ans3 = (leftSum >= rightSum) ? 1 : 2;\n            }\n        }\n\n        // Create a result list\n        ArrayList<Integer> result = new ArrayList<>();\n        result.add(minDiff);\n        result.add(ans2);\n        result.add(ans3);\n\n        // Return the result\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def equal_sum(self, arr):\n        n = len(arr)\n        total_sum = sum(arr)\n        left_sum = 0\n\n        min_diff = float('inf')\n        ans2, ans3 = -1, -1\n\n        # Iterate over the array elements\n        for i in range(n):\n            left_sum += arr[i]\n            right_sum = total_sum - left_sum\n\n            # Calculate the absolute difference between left_sum and right_sum\n            diff = abs(left_sum - right_sum)\n\n            # Update the minimum difference and partition indices\n            if diff < min_diff:\n                min_diff = diff\n                ans2 = i + 2  # Partition starting from the next index\n                ans3 = 1 if left_sum >= right_sum else 2\n\n        # Create a result list\n        return [min_diff, ans2, ans3]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\n/**\n * @param {number[]} arr\n * @returns {number[]}\n */\n// Solution class with the equalSum function\nclass Solution {\n    equalSum(arr) {\n        const n = arr.length;\n        const totalSum = arr.reduce((acc, num) => acc + num, 0);\n        let leftSum = 0;\n\n        let minDiff = Infinity, ans2 = -1, ans3 = -1;\n\n        // Iterate over the array elements\n        for (let i = 0; i < n; i++) {\n            leftSum += arr[i];\n            const rightSum = totalSum - leftSum;\n\n            // Calculate the absolute difference between leftSum and rightSum\n            const diff = Math.abs(leftSum - rightSum);\n\n            // Update the minimum difference and partition indices\n            if (diff < minDiff) {\n                minDiff = diff;\n                ans2 = i + 2; // Partition starting from the next index\n                ans3 = (leftSum >= rightSum) ? 1 : 2;\n            }\n        }\n\n        // Create a result array and return it\n        return [ minDiff, ans2, ans3 ];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}