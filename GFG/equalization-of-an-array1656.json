{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703496,
            "title": "Equalization of an array",
            "titleSlug": "equalization-of-an-array1656",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of integers <strong>arr[ ]</strong>, the task is to count the minimum number of operations to equalize the array <em>i.e.</em>&nbsp;to make all array elements equal.<br />In one operation,&nbsp;you can choose two elements <strong>arr[i]</strong> and <strong>arr[j]</strong> such that <strong>arr[i] &gt; arr[j] </strong>and change them to <strong>arr[i] = arr[i] - 1</strong> and <strong>arr[j] = arr[j] +&nbsp;1</strong>.<br />If it is impossible to equalize the array then return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 3, 2, 0, 4]\n<strong>Output:</strong> 3\n<strong>Explanation</strong>: We can equalize the array by making value of all elements equal to 2. To achieve this we need to do minimum 3 operations:\n1. arr[0]++ and arr[1]--\n2. arr[3]++ and arr[4]--\n3. arr[3]++ and arr[4]--</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 7, 1]\n<strong>Output:</strong> 4\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /><span style=\"font-size: 18.6667px;\">1 &le; arr.size()</span><strong style=\"font-size: 18.6667px;\">&nbsp;</strong><span style=\"font-size: 18.6667px;\">&le; 10</span><sup>6</sup><br style=\"font-size: 18.6667px;\" /><span style=\"font-size: 18.6667px;\">1 &le; arr[i]</span><strong style=\"font-size: 18.6667px;\">&nbsp;</strong><span style=\"font-size: 18.6667px;\">&le; 10</span><sup>4</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]`, determine the minimum number of operations required to equalize all elements in the array. In a single operation, you can select two elements `arr[i]` and `arr[j]` such that `arr[i] > arr[j]` and perform the following updates: `arr[i] = arr[i] - 1` and `arr[j] = arr[j] + 1`. If it is impossible to equalize the array, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[1, 3, 2, 0, 4]",
                        "output": "3",
                        "explanation": "The array can be equalized to all elements having a value of 2. This requires 3 operations:\n1. Increment arr[0] and decrement arr[1]\n2. Increment arr[3] and decrement arr[4]\n3. Increment arr[3] and decrement arr[4]"
                    },
                    {
                        "input": "[1, 7, 1]",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >To equalize the array, check if the total sum of elements is divisible by the number of elements. If not, return -1. If divisible, compute the minimum operations using the sum of absolute differences.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end function template in C++\n\nclass Solution {\n  public:\n    // Function to calculate the minimum number of operations required.\n    long minOperations(vector<int> arr) {\n        int n = arr.size(); // Size of the array\n        long sum = 0;\n\n        // Calculating the sum of all elements in the array.\n        for (int i = 0; i < n; i++)\n            sum += arr[i];\n\n        // Checking if the sum is divisible by the number of elements in the array.\n        // If not divisible, return -1.\n        if (sum % n != 0)\n            return -1;\n\n        long diff_sum = 0;\n        long eq = sum / n;\n\n        // Calculating the absolute difference between each element and the equal sum.\n        for (int i = 0; i < n; i++)\n            diff_sum += labs(arr[i] - eq);\n\n        // Returning half of the difference sum as the minimum number of operations.\n        return (diff_sum / 2);\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public long minOperations(int[] arr) {\n        int n = arr.length;\n        long sum = 0;\n\n        // Calculating the sum of all elements in the array.\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n        }\n\n        // Checking if the sum is divisible by the number of elements in the array.\n        if (sum % n != 0) {\n            return -1;\n        }\n\n        long eq = sum / n;\n        long diffSum = 0;\n\n        // Calculating the absolute difference between each element and the equal sum.\n        for (int i = 0; i < n; i++) {\n            diffSum += Math.abs(arr[i] - eq);\n        }\n\n        // Returning half of the difference sum as the minimum number of operations.\n        return diffSum / 2;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minOperations(self, arr):\n        n = len(arr)\n        total_sum = sum(arr)\n\n        # Checking if the sum is divisible by the number of elements in the array.\n        if total_sum % n != 0:\n            return -1\n\n        eq = total_sum // n\n        diff_sum = 0\n\n        # Calculating the absolute difference between each element and the equal sum.\n        for num in arr:\n            diff_sum += abs(num - eq)\n\n        # Returning half of the difference sum as the minimum number of operations.\n        return diff_sum // 2\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    minOperations(arr) {\n        const n = arr.length;\n        const totalSum = arr.reduce((acc, num) => acc + num, 0);\n\n        // Checking if the sum is divisible by the number of elements in the array.\n        if (totalSum % n !== 0) {\n            return -1;\n        }\n\n        const eq = totalSum / n;\n        let diffSum = 0;\n\n        // Calculating the absolute difference between each element and the equal sum.\n        for (const num of arr) {\n            diffSum += Math.abs(num - eq);\n        }\n\n        // Returning half of the difference sum as the minimum number of operations.\n        return Math.floor(diffSum / 2);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}