{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704849,
            "title": "Equalize an array in minimum operations",
            "titleSlug": "equalize-an-array3405",
            "content": "<p><span style=\"font-size:18px\">You are given an array of <strong>N</strong> integers <strong>A[0]</strong>, <strong>A[1]</strong>, &hellip;, <strong>A[N-1]</strong>, and an integer <strong>k</strong>. Your task is to make all the elements of the given array equal in a minimum number of &lsquo;moves&rsquo;. &nbsp;All the elements of the array are non-negative. In each &lsquo;move,&rsquo; you may add or subtract k from any element of the array. Give the answer modulo 10<sup>9</sup>+7.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 4, k = 2\r\nA = {7, 5, 21, 17}\r\n<strong>Output:</strong> 13\r\n<strong>Explaination:</strong> We can add k = 2 to A[1] \r\nonce and subtract k = 2 from A[2] seven \r\ntimes and from A[3] five times.The \r\nresulting array would be- 7 7 7 7. \r\nNumber of moves = 1 + 7 + 5 = 13.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 4, k = 3\r\nA = {7, 5, 21, 17}\r\n<strong>Output:</strong> -1\r\n<strong>Explaination:</strong> No matter how many moves \r\nare made, all the elements of the array \r\ncannot be made equal.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do&nbsp;not need to read input or print anything. Your task is to complete the function <strong>equalizeArray()</strong> which takes N, k, and A as input parameters and returns the minimum number of moves to make all the elements of the array equal. Return <strong>-1</strong> if it is not possible.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*logN)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>6</sup><br />\r\n1 &le; k, A[i] &le; 1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">All the elements can be equalies if all the pair have difference which is a multiple of k.</span></p>",
            "<p><span style=\"font-size:18px\">Moving to the median requires leat steps.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to equalize the array by finding the minimum number of operations\n    int equalizeArray(int N, int k, int A[]){\n        int mod = 1000000007; // setting the modulo value\n        int modulo = A[0]%k; // calculating the modulo of the first element\n        for(int i = 1;i < N;i++){ // checking if all elements have the same modulo\n            if(A[i]%k != modulo)\n                return -1; // return -1 if not all elements have the same modulo\n        }\n        sort(A, A+N); // sorting the array\n        int ans = 0, median = A[N/2]; // initializing the answer and finding the median\n        for(int i = 0;i < N;i++){ // calculating the number of operations\n            ans += abs(median - A[i])/k; // adding the absolute difference divided by k\n            ans = ans%mod; // taking the modulo of the answer\n        }\n        return ans; // return the final answer\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int equalizeArray(int N, int k, int[] A)\n    {\n        int mod = 1000000007;\n        int modulo = A[0] % k;\n        for (int i = 1; i < N; i++)\n        {\n            if (A[i] % k != modulo)\n                return -1;\n        }\n        Array.Sort(A);\n        int ans = 0;\n        int median = A[N / 2];\n        for (int i = 0; i < N; i++)\n        {\n            ans += Math.Abs(median - A[i]) / k;\n            ans = ans % mod;\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}