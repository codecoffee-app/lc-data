{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703417,
            "title": "Equalize the Towers",
            "titleSlug": "equalize-the-towers2804",
            "content": "<p><span >You are given an array <strong><code>heights[]</code></strong> representing the heights of towers and another array <strong><code>cost[]</code></strong> where each element corresponds to the <strong>cost</strong> of modifying the respective tower. The goal is to make all towers the <strong>same height</strong> by either adding or removing blocks from each tower. The <strong>cost</strong> to add or remove a block for a tower is given by the respective value in the <strong><code>cost[]</code></strong> array. Return the <strong>minimum cost</strong> to <strong>equalize the heights</strong> of all towers.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>heights[] = [1, 2, 3], cost[] = [10, 100, 1000]\n<strong>Output:</strong> 120\n<strong>Explanation</strong>: The heights can be equalized by either \"Removing one block from 3 and adding one in 1\" or \"Adding two blocks in 1 and adding one in 2\". Since the cost of operation in tower 3 is 1000, the first process would yield 1010 while the second one yields 120. Since the second process yields the lowest cost of operation, it is the required output.</span></pre>\n<pre><span ><strong>Input: </strong>heights[] = [9, 12, 18, 3, 10], cost[] = [100, 110, 150, 25, 99]\n<strong>Output:</strong> 1623 <br /><strong>Explanation:</strong> The minimum cost <span class=\"hljs-keyword\" style=\"font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; word-spacing: normal; white-space: normal;\">to</span><span style=\"background-color: #f5f2f0; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; word-spacing: normal; white-space: normal;\"> equalize the towers </span><span class=\"hljs-built_in\" style=\"font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; word-spacing: normal; white-space: normal;\">is</span><span style=\"background-color: #f5f2f0; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; word-spacing: normal; white-space: normal;\"> </span><span class=\"hljs-number\" style=\"font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; word-spacing: normal; white-space: normal;\">1623</span><span style=\"background-color: #f5f2f0; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; word-spacing: normal; white-space: normal;\">, achieved </span><span class=\"hljs-keyword\" style=\"font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; word-spacing: normal; white-space: normal;\">by</span><span style=\"background-color: #f5f2f0; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; word-spacing: normal; white-space: normal;\"> adjusting blocks optimally.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; heights.size(), cost.size() &le; 10<sup>5</sup><br />1 &le; heights[i] &le; 10<sup>4<br /></sup>1 &le; cost[i] &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `heights[]` representing the heights of towers and another array `cost[]` representing the cost to modify each tower (add or remove blocks), find the minimum cost to equalize the heights of all towers. The cost to add or remove a block for a tower is given by the respective value in the `cost[]` array.",
                "constraints": [
                    "1 <= heights.size(), cost.size() <= 10^5",
                    "1 <= heights[i] <= 10^4",
                    "1 <= cost[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "heights[] = [1, 2, 3], cost[] = [10, 100, 1000]",
                        "output": "120",
                        "explanation": "The minimum cost is achieved by increasing the height of the first tower by 2 (cost: 2 * 10 = 20) and increasing the height of the second tower by 1 (cost: 1 * 100 = 100). Total cost is 20 + 100 = 120.  Another alternative is reducing the third tower by 1 (cost 1000) and increasing first tower (2 * 10=20), resulting in much larger cost"
                    },
                    {
                        "input": "heights[] = [9, 12, 18, 3, 10], cost[] = [100, 110, 150, 25, 99]",
                        "output": "1623",
                        "explanation": "The minimum cost is 1623, achieved by adjusting the blocks of the towers to equalize their heights optimally. Reaching the optimal tower height requires careful consideration of the individual tower costs. One possible optimal configuration is all towers having height of 10. First tower must increase height by 1, cost = 100. Second tower must decrease height by 2, cost = 220. Third tower must decrease height by 8, cost = 1200. Fourth tower must increase height by 7, cost = 175.  Fifth tower will have no change so cost is 0. 100+220+1200+175= 1695"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The best approach here seems to be Binary search. We store the minimum height &amp; alter our resultant height by a factor of 2 in each step.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  private:\n    // Returns the cost of bringing all towers to the equal height eq_h\n    long long costOfOperation(int n, vector<int>& heights, vector<int>& cost,\n                              int eq_h) {\n        long long total_cost = 0;\n        // Adding cost for each tower\n        for (int i = 0; i < n; i++) {\n            total_cost += abs(heights[i] - eq_h) * cost[i];\n        }\n        return total_cost;\n    }\n\n  public:\n    // Return the minimum possible cost of operation to equalize tower heights\n    long long minCostToEqualizeTowers(vector<int>& heights, vector<int>& cost) {\n        int n = heights.size();\n        int max_h = *max_element(heights.begin(), heights.end());\n        long long ans = LLONG_MAX;\n\n        // Binary search to find the height with the minimum cost\n        int low = 0, high = max_h + 1;\n        while (high > low) {\n            int mid = (low + high) / 2;\n\n            // Calculate cost at mid, below mid, and above mid\n            long long cost_at_mid_minus_1 =\n                (mid > 0) ? costOfOperation(n, heights, cost, mid - 1) : LLONG_MAX;\n            long long cost_at_mid = costOfOperation(n, heights, cost, mid);\n            long long cost_at_mid_plus_1 = costOfOperation(n, heights, cost, mid + 1);\n\n            // Update the answer with the minimum cost\n            ans = min(ans, cost_at_mid);\n\n            // Binary search decision-making\n            if (cost_at_mid_minus_1 <= cost_at_mid) {\n                high = mid;\n            } else if (cost_at_mid_plus_1 <= cost_at_mid) {\n                low = mid + 1;\n            } else {\n                return cost_at_mid;\n            }\n        }\n\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    // Helper function to calculate the cost of equalizing to a given height\n    private long costOfOperation(int[] heights, int[] cost, int targetHeight) {\n        long totalCost = 0;\n        int n = heights.length;\n\n        // Calculate cost for each tower to match targetHeight\n        for (int i = 0; i < n; i++) {\n            totalCost += Math.abs(heights[i] - targetHeight) * cost[i];\n        }\n\n        return totalCost;\n    }\n\n    // Function to find the minimum cost to equalize all towers\n    public long minCostToEqualizeTowers(int[] heights, int[] cost) {\n        int n = heights.length;\n        int max_h = Arrays.stream(heights).max().getAsInt();\n        long minCost = Long.MAX_VALUE;\n\n        // Binary search for the optimal height\n        int low = 0, high = max_h + 1;\n        while (low < high) {\n            int mid = (low + high) / 2;\n\n            // Calculate costs at mid, mid - 1, and mid + 1\n            long costAtMidMinus1 =\n                (mid > 0) ? costOfOperation(heights, cost, mid - 1) : Long.MAX_VALUE;\n            long costAtMid = costOfOperation(heights, cost, mid);\n            long costAtMidPlus1 = costOfOperation(heights, cost, mid + 1);\n\n            // Update minimum cost\n            minCost = Math.min(minCost, costAtMid);\n\n            // Binary search logic\n            if (costAtMidMinus1 <= costAtMid) {\n                high = mid;\n            } else if (costAtMidPlus1 <= costAtMid) {\n                low = mid + 1;\n            } else {\n                return costAtMid;\n            }\n        }\n\n        return minCost;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Solution class to compute minimum cost to equalize towers\nclass Solution:\n    # Helper function to calculate the cost of equalizing to a given height\n    def costOfOperation(self, heights, cost, targetHeight):\n        totalCost = 0\n        for i in range(len(heights)):\n            totalCost += abs(heights[i] - targetHeight) * cost[i]\n        return totalCost\n\n    # Main function to find the minimum cost to equalize towers\n    def minCostToEqualizeTowers(self, heights, cost):\n        max_h = max(heights)\n        minCost = float('inf')\n\n        # Binary search to find the optimal height that minimizes the cost\n        low, high = 0, max_h\n        while low <= high:\n            mid = (low + high) // 2\n\n            # Calculate costs for mid, mid - 1, and mid + 1\n            costAtMid = self.costOfOperation(heights, cost, mid)\n            costAtMidMinus1 = self.costOfOperation(\n                heights, cost, mid - 1) if mid > 0 else float('inf')\n            costAtMidPlus1 = self.costOfOperation(heights, cost, mid + 1)\n\n            # Update the minimum cost\n            minCost = min(minCost, costAtMid)\n\n            # Adjust the binary search bounds based on cost comparisons\n            if costAtMidMinus1 <= costAtMid:\n                high = mid - 1\n            elif costAtMidPlus1 <= costAtMid:\n                low = mid + 1\n            else:\n                break\n\n        return minCost\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Returns the cost of bringing all towers to the equal height eq_h\n    costOfOperation(n, heights, cost, eq_h) {\n        let totalCost = 0;\n        // Adding cost for each tower\n        for (let i = 0; i < n; i++) {\n            totalCost += Math.abs(heights[i] - eq_h) * cost[i];\n        }\n        return totalCost;\n    }\n\n    // Return the minimum possible cost of operation to equalize tower heights\n    minCostToEqualizeTowers(heights, cost) {\n        const n = heights.length;\n        const max_h = Math.max(...heights);\n        let ans = Infinity;\n\n        // Binary search to find the height with the minimum cost\n        let low = 0, high = max_h + 1;\n        while (high > low) {\n            const mid = Math.floor((low + high) / 2);\n\n            // Calculate cost at mid, below mid, and above mid\n            const costAtMidMinus1 =\n                (mid > 0) ? this.costOfOperation(n, heights, cost, mid - 1) : Infinity;\n            const costAtMid = this.costOfOperation(n, heights, cost, mid);\n            const costAtMidPlus1 = this.costOfOperation(n, heights, cost, mid + 1);\n\n            // Update the answer with the minimum cost\n            ans = Math.min(ans, costAtMid);\n\n            // Binary search decision-making\n            if (costAtMidMinus1 <= costAtMid) {\n                high = mid;\n            } else if (costAtMidPlus1 <= costAtMid) {\n                low = mid + 1;\n            } else {\n                return costAtMid;\n            }\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}