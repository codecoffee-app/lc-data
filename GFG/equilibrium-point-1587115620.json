{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701203,
            "title": "Equilibrium Point",
            "titleSlug": "equilibrium-point-1587115620",
            "content": "<p><span >Given an array of integers<strong> arr[]</strong>,<strong> </strong>the task is to find the first <strong>equilibrium point</strong>&nbsp;in the array.</span></p>\n<p><span >The equilibrium point in an array is an index (0-based indexing) such that the sum of all elements before<strong>&nbsp;</strong>that index is the&nbsp;same&nbsp;as the&nbsp;sum<strong>&nbsp;</strong>of elements&nbsp;after<strong>&nbsp;</strong>it.&nbsp;</span><span >Return -1 if no such point exists.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 0, 3]<br /><strong>Output: </strong>2<strong> \nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">The sum of left of index 2 is 1 + 2 = 3 and sum on right of index 2 is 3.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1, 1, 1]<br /><strong>Output: </strong>-1<strong>\nExplanation: </strong>There is no equilibrium index in the array.<br /></span></pre>\n<pre style=\"text-wrap: wrap; color: #222222; background-color: #ffffff;\"><span ><strong>Input: </strong>arr[] = [-7, 1, 5, 2, -4, 3, 0]</span><span style=\"color: #222222;\"><span style=\"text-wrap-mode: wrap;\"><br /></span></span><span ><strong>Output: </strong>3<strong>\nExplanation: </strong></span><span style=\"color: #222222;\"><span style=\"font-size: 18.6667px; text-wrap-mode: wrap;\">The sum of left of index 3 is -7 + 1 + 5 = -1 and sum on right of index 3 is -4 + 3 + 0 = -1.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />3 &lt;= arr.size() &lt;= 10<sup>5</sup><br /><span style=\"font-size: 18.6667px;\">-10</span><sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Think of dividing the array into two halves.</span></p>",
            "<p><span >Think of using prefix-sums.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "adobe",
            "google",
            "facebook",
            "microsoft",
            "uber"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find equilibrium point in the array.\n    int findEquilibrium(vector<int> &arr) {\n        int n = arr.size();\n\n        // We store the sum of all array elements.\n        long long sum = 0;\n        for (int i = 0; i < n; i++)\n            sum += arr[i];\n\n        // sum2 is used to store prefix sum.\n        long long sum2 = 0;\n        for (int i = 0; i < n; i++) {\n\n            // Leaving out the value of current element from suffix sum.\n            sum = sum - arr[i];\n\n            // Checking if suffix and prefix sums are same.\n            if (sum2 == sum) {\n                // returning the index or equilibrium point.\n                return i;\n            }\n\n            // Adding the value of current element to prefix sum.\n            sum2 = sum2 + arr[i];\n        }\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find equilibrium point in the array.\n    public static int findEquilibrium(int arr[]) {\n        int n = arr.length;\n\n        // We store the sum of all array elements in a long to prevent overflow.\n        long sum = 0;\n        for (int i = 0; i < n; i++) sum += arr[i];\n\n        // sum2 is used to store the prefix sum.\n        long sum2 = 0;\n\n        for (int i = 0; i < n; i++) {\n\n            // Leaving out the value of the current element from the suffix sum.\n            sum = sum - arr[i];\n\n            // Checking if suffix and prefix sums are the same.\n            if (sum2 == sum) {\n                // Returning the index or equilibrium point.\n                return i;\n            }\n\n            // Adding the value of the current element to the prefix sum.\n            sum2 = sum2 + arr[i];\n        }\n        return -1;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\nclass Solution:\n\n    #Function to find equilibrium point in the array.\n    def findEquilibrium(self, arr):\n        n = len(arr)\n        #We store the sum of all array elements.\n        sum = 0\n        for i in range(0, n):\n            sum += arr[i]\n\n        #sum2 is used to store prefix sum.\n        sum2 = 0\n\n        for i in range(0, n, +1):\n\n            #Leaving out the value of current element from suffix sum.\n            sum -= arr[i]\n\n            #Checking if suffix and prefix sums are same.\n            if sum2 == sum:\n                #returning the index or equilibrium point.\n                return i\n\n            #Adding the value of current element to prefix sum.\n            sum2 += arr[i]\n\n        return -1\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to find equilibrium point in the array\n    public int FindEquilibrium(int[] arr) {\n        int n = arr.Length;\n\n        long sum = 0;\n        foreach (var num in arr) {\n            sum += num;\n        }\n\n        long sum2 = 0;\n        for (int i = 0; i < n; i++) {\n            sum -= arr[i];\n\n            if (sum2 == sum) {\n                return i;\n            }\n            sum2 += arr[i];\n        }\n\n        return -1;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find equilibrium point in the array.\n    findEquilibrium(arr) {\n        let n = arr.length;\n        // We store the sum of all array elements.\n        let sum = 0;\n        for (let i = 0; i < n; i++) sum += arr[i];\n\n        // sum2 is used to store prefix sum.\n        let sum2 = 0;\n        let ans = -1;\n        for (let i = 0; i < n; i++) {\n\n            // Leaving out the value of current element from suffix sum.\n            sum = sum - arr[i];\n\n            // Checking if suffix and prefix sums are same.\n            if (sum2 == sum) {\n                // returning the index or equilibrium point.\n                return i;\n            }\n\n            // Adding the value of current element to prefix sum.\n            sum2 = sum2 + arr[i];\n        }\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}