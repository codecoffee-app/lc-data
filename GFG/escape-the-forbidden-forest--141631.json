{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706085,
            "title": "Escape the Forbidden Forest",
            "titleSlug": "escape-the-forbidden-forest--141631",
            "content": "<p><span style=\"font-size:18px\">Penelope and her classmates are lost in the Forbidden Forest and the Devil is out to get them. But Penelope has magical powers that can build bridges across the dangerous river and take her friends to safety. The only bridges that can withstand the Devil&#39;s wrath are the ones built between two similar trees in the forest.&nbsp;<br />\r\nGiven str1 and str2 denoting the order of trees on either side of the river, find the maximum number of bridges that Penelope can build and save everyone from the Devil.&nbsp;</span><br />\r\n<span style=\"font-size:18px\"><strong>Note:&nbsp;</strong>Each tree in the forest belongs to one of the 3 categories represented by * or # or @, and it&#39;s easy to understand that bridges do not intersect or cross each other.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nstr1 = &quot;*@#*&quot; </span>\r\n<span style=\"font-size:18px\">str2 = &quot;*#&quot;</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n2</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nstr1 = &quot;*@#*&quot; and str2 = &quot;*#&quot; \r\nTwo bridges can be built between the banks \r\nof the river in the following manner. \r\n* @ # *\r\n|   |\r\n*   #</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">str1 = &quot;***&quot;</span>\r\n<span style=\"font-size:18px\">str2 = &quot;##&quot;</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n0</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>build_bridges()</strong> that takes str1 and str2 as input parameters and returns the maximum number of bridges that can be built.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*M)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N*M)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N, M &le; 100<br />\r\nWhere, N and M are the size of the string str1 and str2 respectively.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find longest common subsequence.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\nclass Solution\n{\n    public:\n    //Recursive function to build bridges between two strings\n    int build_bridges_util(int i , int j , string str1 , string str2 , int n , int m , int dp[105][105])\n    {\n        //Base case: if either string is fully traversed, return 0\n        if(i>=n or j>=m)\n            return 0;\n        \n        //If the solution for the current state is already calculated, return it\n        int ans = dp[i][j];\n        if(ans!=-1)\n            return ans;\n        \n        ans = 0;\n        //If the characters at the current indices are the same, increment the answer and recurse for the next indices\n        if(str1[i]==str2[j])\n            ans = 1 + build_bridges_util(i+1, j+1, str1, str2,n, m, dp);\n        \n        //Recurse for the next index in str1 and same index in str2\n        ans = max(ans, build_bridges_util(i+1, j, str1, str2, n, m, dp));\n        \n        //Recurse for the same index in str1 and next index in str2\n        ans = max(ans, build_bridges_util(i, j+1, str1, str2, n, m, dp));\n        \n        //Store the answer for the current state in the dp array and return it\n        return dp[i][j] = ans;\n    }\n    \n    //Function to find the maximum number of bridges that can be built between two strings\n    int build_bridges(string str1, string str2)\n    {\n        int dp[105][105];\n        memset(dp, -1, sizeof dp);\n        int n = str1.size();\n        int m = str2.size();\n        //Call the utility function to calculate the maximum number of bridges\n        return build_bridges_util(0,0,str1,str2,n,m,dp);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Sol {\n    public static int build_bridges(String str1 , String str2) {\n        // Get the lengths of the two strings\n        int n = str1.length();\n        int m = str2.length();\n        int dp[][] = new int[105][105];\n        \n        // Initialize the dp array with -1\n        for(int i = 0; i < 105; i++) {\n            for(int j = 0; j < 105; j++) {\n                dp[i][j] = -1;\n            }\n        }\n                \n        // Call the utility function to calculate the maximum number of bridges\n        return build_bridges_util(0, 0, str1, str2, n, m, dp);\n    }\n    \n    public static int build_bridges_util(int i, int j, String str1, String str2, int n, int m, int dp[][]) {\n        // Base case: If we reach the end of either string, return 0\n        if(i >= n || j >= m) {\n            return 0;\n        }\n        \n        int ans = dp[i][j];\n        \n        // If the answer is already calculated, return it\n        if(ans != -1) {\n            return ans;\n        }\n        \n        // Initialize the answer as 0 and check if the characters at the current indices are equal\n        ans = 0;\n        if(str1.charAt(i) == str2.charAt(j)) {\n            ans = 1 + build_bridges_util(i+1, j+1, str1, str2, n, m, dp);\n        }\n        \n        // Recursively call the function for the next indices\n        ans = Math.max(ans, build_bridges_util(i+1, j, str1, str2, n, m, dp));\n        ans = Math.max(ans, build_bridges_util(i, j+1, str1, str2, n, m, dp));\n        \n        // Store the answer in the dp array and return it\n        dp[i][j] = ans;\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def build_bridges_util(self,str1, str2, i, j, dp):\r\n        # base case: if either string is empty, return 0\r\n        if i >= len(str1) or j >= len(str2):\r\n            return 0\r\n    \r\n        # if the result is already calculated, return it\r\n        if dp[i][j] != -1:\r\n            return dp[i][j]\r\n    \r\n        # if the characters at current indices are equal, increment count and move to next indices\r\n        if str1[i] == str2[j]:\r\n            dp[i][j] = 1 + self.build_bridges_util(str1, str2, i + 1, j + 1, dp)\r\n            return dp[i][j]\r\n    \r\n        # if the characters are not equal, consider two options: skip current character in str1 or str2\r\n        dp[i][j] = max(self.build_bridges_util(str1, str2, i + 1, j, dp), self.build_bridges_util(str1, str2, i, j + 1, dp))\r\n        \r\n    \r\n        return dp[i][j]\r\n    \r\n    \r\n    def build_bridges(self, str1, str2):\r\n        n1, n2 = len(str1), len(str2)\r\n        \r\n        # initializing a memoization array with -1\r\n        dp = [[-1 for i in range(n2 + 1)] for j in range(n1 + 1)]\r\n    \r\n        # calling the utility function with initial indices 0\r\n        return self.build_bridges_util(str1, str2, 0, 0,dp)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} str1\n * @param {string} str2\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to build the bridges.\n    buildBridges(str1, str2)\n    {\n        //initializing variables for length of str1 and str2\n        let n1 = str1.length;\n        let n2 = str2.length;\n        \n        //initializing a memoization array with -1\n        let dp = new Array(n1+1);\n        for(let i=0; i<n1+1; i++){\n            dp[i] = new Array(n2+1).fill(-1);\n        }\n        \n        //defining a recursive utility function to calculate the maximum number of bridges\n        function buildBridgesUtil(str1, str2, i, j, dp){\n            //base case: if either string is empty, return 0\n            if(i >= n1 || j >= n2)\n                return 0;\n            \n            //if the result is already calculated, return it\n            if(dp[i][j] != -1)\n                return dp[i][j];\n            \n            //if the characters at current indices are equal, increment count and move to next indices\n            if(str1[i] === str2[j]){\n                dp[i][j] = 1 + buildBridgesUtil(str1, str2, i+1, j+1, dp);\n                return dp[i][j];\n            }\n                \n            \n            //if the characters are not equal, consider two options:\n            //skip current character in str1 or str2\n            dp[i][j] = Math.max(buildBridgesUtil(str1, str2, i+1, j, dp), buildBridgesUtil(str1, str2, i, j+1, dp));\n            return dp[i][j];\n        }\n        \n        //calling the utility function with initial indices 0\n        return buildBridgesUtil(str1, str2, 0, 0, dp);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function template in C#\nclass Solution\n{\n    private int build_bridges_util(int i, int j, string str1, string str2, int n, int m, int[,] dp)\n    {\n        if (i >= n || j >= m)\n            return 0;\n\n        if (dp[i, j] != -1)\n            return dp[i, j];\n\n        int ans = 0;\n        if (str1[i] == str2[j])\n            ans = 1 + build_bridges_util(i + 1, j + 1, str1, str2, n, m, dp);\n\n        ans = Math.Max(ans, build_bridges_util(i + 1, j, str1, str2, n, m, dp));\n        ans = Math.Max(ans, build_bridges_util(i, j + 1, str1, str2, n, m, dp));\n\n        dp[i, j] = ans;\n        return ans;\n    }\n\n    public int build_bridges(string str1, string str2)\n    {\n        int n = str1.Length;\n        int m = str2.Length;\n        int[,] dp = new int[n, m];\n\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < m; j++)\n                dp[i, j] = -1;\n\n        return build_bridges_util(0, 0, str1, str2, n, m, dp);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}