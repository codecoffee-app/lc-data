{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700537,
            "title": "Euler circuit and Path",
            "titleSlug": "euler-circuit-and-path",
            "content": "<p><span style=\"font-size: 18px;\"><strong>An Eulerian Path</strong> is a path in graph that visits every edge exactly once. <strong>An Eulerian Circuit </strong>is <strong>an Eulerian Path </strong>which starts and ends on the same vertex. Given an <strong>undirected connected graph</strong> with <strong>V</strong> nodes, and <strong>E</strong> edges, with adjacency list <strong>adj,&nbsp;</strong>return 2 if the graph contains an <strong>eulerian circuit</strong>, else if the graph contains an <strong>eulerian path,&nbsp;</strong>return 1, otherwise, return 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong></span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700537/Web/Other/c191d733-5295-4e4a-81b7-7a1de77ec269_1685086734.png\" alt=\"\" />\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">2\n<strong>Explanation: <br /></strong>Following is an eulerian circuit in the mentioned graph<strong><br /></strong></span><span >1 -&gt; 2 -&gt; 0 -&gt; 1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700537/Web/Other/c5419f69-5051-4865-aabe-4898ff1c92f3_1685086735.png\" alt=\"\" />\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">1\n<strong>Explanation: <br /></strong></span><span >Following is an eulerian path in the mentioned graph<br />1 -&gt; 0 -&gt; 2</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function <strong>isEulerCircuilt()&nbsp;</strong>which takes number of vertices in the graph denoted as <strong>V</strong> and an adjacency list of graph denoted as <strong>adj </strong>and&nbsp;</span><span style=\"font-size: 18px;\">returns 2 if the graph contains an&nbsp;</span><strong style=\"font-size: 18px;\">eulerian circuit</strong><span style=\"font-size: 18px;\">, else if the graph contains an&nbsp;</span><strong style=\"font-size: 18px;\">eulerian path, </strong><span style=\"font-size: 18px;\">it returns 1, otherwise, it will return 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(V+E) where E is the number of edges in graph.<br /><strong>Expected Space Complexity:&nbsp;</strong>O(V)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; V, E &le; 10<sup>4<br /></sup>1 &le; adj[i][j] &le; V-1<sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use dfs.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Class Solution for finding Euler circuit in a graph\n\nclass Solution {\npublic:\n\t// Utility function to perform depth-first search\n\tvoid dfsUtil(int u, vector<bool>&vis, vector<int>adj[]) {\n\t\tvis[u] = true;\n\t\tfor(auto v: adj[u]){\n\t\t\tif(!vis[v])\n\t\t\t\tdfsUtil(v, vis, adj);\n\t\t}\n\t}\n\n\t// Function to check if the graph is connected\n\tbool isConnected(int V, vector<int>adj[]) {\n\t\tvector<bool>vis(V, false);\n\t\tint i;\n\t\t// Find the first non-empty vertex\n\t\tfor(i = 0; i < V; i++){\n\t\t\tif(adj[i].size())\n\t\t\t\tbreak;\n\t\t}\n\t\t// Perform dfs on the first non-empty vertex\n\t\tdfsUtil(i, vis, adj);\n\t\t// Check if there are any vertices not visited but have edges\n\t\tfor(i = 0; i < V; i++){\n\t\t\tif(!vis[i] and adj[i].size() > 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Function to check if the graph has an Euler circuit\n\tint isEulerCircuit(int V, vector<int>adj[]) {\n\t\t// Check if the graph is not connected\n\t\tif(!isConnected(V, adj))\n\t\t\treturn 0; // Not Euler circuit\n\t\tint odd = 0;\n\t\t// Count the number of vertices with odd degree\n\t\tfor(int i = 0; i < V; i++){\n\t\t\tif(adj[i].size() & 1)\n\t\t\t\todd++;\n\t\t}\n\t\t// If there are more than two vertices with odd degree, not Euler circuit\n\t\tif(odd > 2)\n\t\t\treturn 0; // Not Euler circuit\n\t\t// If there is one vertex with odd degree, semi-Euler circuit\n\t\t// If there are no vertices with odd degree, Euler circuit\n\t\treturn odd ? 1 : 2;\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    private void dfsUtil(int u, int[] vis, List<Integer>[] adj) {\n        vis[u] = 1;\n        for (int v : adj[u]) {\n            if (vis[v]==0)\n                dfsUtil(v, vis, adj);\n        }\n    }\n\n    private boolean isConnected(int V, List<Integer>[] adj) {\n        int[] vis = new int[V+1];\n        \n        int i;\n        \n        for (i = 0; i < V; i++) {\n            if (adj[i].size() > 0)\n                break;\n        }\n        \n        dfsUtil(i, vis, adj);\n        \n        for (i = 0; i < V; i++) \n        {\n            if (vis[i] == 0 && adj[i].size() > 0)\n                return false;\n        }\n        return true;\n    }\n\n    public int isEulerCircuit(int V, List<Integer>[] adj) {\n        if (!isConnected(V, adj))\n            return 0; \n\n        int odd = 0;\n        for (int i = 0; i < V; i++) {\n            if ((adj[i].size() % 2) == 1)\n                odd++;\n        }\n\n        if (odd > 2)\n            return 0; \n            \n        return (odd > 0 ? 1 : 2);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import sys\n\nsys.setrecursionlimit(10**6)\n\n\n#Class Solution\nclass Solution:\n    #Utility function for Depth First Search (DFS)\n    def dfsUtil(self, u, vis, adj):\n        vis[u] = True\n        #Iterating over all the adjacent vertices of node u\n        for v in adj[u]:\n            #If the adjacent vertex v is not visited, perform DFS on it\n            if (vis[v] == False):\n                self.dfsUtil(v, vis, adj)\n\n    #Function to check if the graph is connected or not\n    def isConnected(self, V, adj):\n        vis = [False for i in range(V)]\n        idx = 0\n        #Finding the first node with a non-empty adjacency list\n        for i in range(V):\n            if (len(adj[i])):\n                idx = i\n                break\n        #Performing DFS on the first non-empty node\n        self.dfsUtil(i, vis, adj)\n        #Checking if all nodes are visited\n        for i in range(V):\n            if (vis[i] == False and len(adj[i])):\n                return False\n        return True\n\n    #Function to check if an Eulerian circuit exists in the graph\n    def isEulerCircuitExist(self, V, adj):\n        #Checking if the graph is not connected, return 0\n        if (self.isConnected(V, adj) == False):\n            return 0\n        odd = 0\n        #Counting the number of nodes with odd degree\n        for i in range(V):\n            if (len(adj[i]) & 1):\n                odd = odd + 1\n        #If more than 2 nodes have odd degree, return 0\n        if (odd > 2):\n            return 0\n        #If exactly 2 nodes have odd degree, return 1\n        elif (odd):\n            return 1\n        #If all nodes have even degree, return 2\n        return 2\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution\n{\n    // Utility function to perform depth-first search\n    private void dfsUtil(int u, bool[] vis, List<int>[] adj)\n    {\n        vis[u] = true;\n        foreach (int v in adj[u])\n        {\n            if (!vis[v])\n                dfsUtil(v, vis, adj);\n        }\n    }\n\n    // Function to check if the graph is connected\n    private bool isConnected(int V, List<int>[] adj)\n    {\n        bool[] vis = new bool[V];\n        int i;\n        // Find the first non-empty vertex\n        for (i = 0; i < V; i++)\n        {\n            if (adj[i].Count > 0)\n                break;\n        }\n        // Perform dfs on the first non-empty vertex\n        dfsUtil(i, vis, adj);\n        // Check if there are any vertices not visited but have edges\n        for (i = 0; i < V; i++)\n        {\n            if (!vis[i] && adj[i].Count > 0)\n                return false;\n        }\n        return true;\n    }\n\n    // Function to check if the graph has an Euler circuit\n    public int isEulerCircuit(int V, List<int>[] adj)\n    {\n        // Check if the graph is not connected\n        if (!isConnected(V, adj))\n            return 0; // Not Euler circuit\n        int odd = 0;\n        // Count the number of vertices with odd degree\n        for (int i = 0; i < V; i++)\n        {\n            if (adj[i].Count % 2 != 0)\n                odd++;\n        }\n        // If there are more than two vertices with odd degree, not Euler circuit\n        if (odd > 2)\n            return 0; // Not Euler circuit\n        // If there is one vertex with odd degree, semi-Euler circuit\n        // If there are no vertices with odd degree, Euler circuit\n        return odd != 0 ? 1 : 2;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {number} V\r\n * @param {number[][]} Adj\r\n * @return {number}\r\n*/\r\n\r\nclass Solution {\r\n\r\n    isEulerCircuit(V,Adj){\r\n        //code here\r\n        function dfsUtil(u, vis, adj){\r\n            vis[u] = true;\r\n            for(let v of adj[u]){\r\n                if(!vis[v]){\r\n                    dfsUtil(v, vis, adj);\r\n                }\r\n            }\r\n        }\r\n        \r\n        function isConnected(V, adj){\r\n            let vis = new Array(V).fill(false);\r\n            let i;\r\n            for(i = 0; i < V; i++){\r\n                if(adj[i].length)\r\n                    break;\r\n            }\r\n            dfsUtil(i, vis, adj);\r\n            for(i = 0; i < V; i++){\r\n                if(!vis[i] && adj[i].length > 0)\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n        \r\n        if(!isConnected(V, Adj))\r\n            return 0;\r\n        \r\n        let odd = 0;\r\n        \r\n        for(let i = 0; i < V; i++){\r\n            if(Adj[i].length % 2)\r\n                odd++;\r\n        }\r\n        \r\n        if(odd > 2)\r\n            return 0;\r\n        \r\n        return odd ? 1 : 2;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}