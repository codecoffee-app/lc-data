{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704399,
            "title": "Euler Totient Function",
            "titleSlug": "euler-totient-function4604",
            "content": "<p><span style=\"font-size:18px\">Find the&nbsp;<strong>Euler Totient Function (ETF)</strong>&nbsp;&Phi;(N) for an input N. ETF&nbsp;is the count of numbers in {1, 2, 3, &hellip;, N} that are relatively prime to N, i.e., the numbers whose GCD (Greatest Common Divisor) with N&nbsp;is 1.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span><span style=\"font-size:18px\"><strong>\n</strong>N = 11\n<strong>Output:</strong>\n10\n<strong>Explanation:</strong>\nFrom 1 to 11,\n1,2,3,4,5,6,7,8,9,10\nare relatively prime to 11.</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 16\n<strong>Output:</strong>\n8\n<strong>Explanation:</strong>\nFrom 1 to 16\n1,3,5,7,9,11,13,15</span> \n<span style=\"font-size:18px\">are relatively prime\nto 16.</span>\n</pre>\n\n<p><br />\n<strong><span style=\"font-size:18px\">Your Task:</span></strong><br />\n<span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function <strong>ETF()</strong>&nbsp;which takes one integer value&nbsp;N,<strong>&nbsp;</strong>as input parameter&nbsp;and return the value of&nbsp;&Phi;(N).</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(NLog N)<br />\n<strong>Expected Space Complexity:</strong>&nbsp;O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=N&lt;=10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Euler&rsquo;s product formula.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [
            "cisco"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    // function to find totient of n\n    long long ETF(long long N)\n    {\n    \tdouble result = N; // Initialize result as n \n  \n        // Consider all prime factors of n and for every prime \n        // factor p, multiply result with (1 - 1/p) \n        for (int p = 2; p * p <= N; ++p) { \n              \n            // Check if p is a prime factor. \n            if (N % p == 0) { \n                  \n                // If yes, then update n and result \n                while (N % p == 0) \n                    N /= p; \n                result *= (1.0 - (1.0 / (double)p)); \n            } \n        } \n      \n        // If n has a prime factor greater than sqrt(n) \n        // (There can be at-most one such prime factor) \n        if (N > 1) \n            result *= (1.0 - (1.0 / (double)N)); \n      \n        return (long long)result; \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Solution{\n    static long ETF(long N) \n    { \n        double result = N; // Initialize result as n \n  \n        // Consider all prime factors of n and for every prime \n        // factor p, multiply result with (1 - 1/p) \n        for (int p = 2; p * p <= N; ++p) { \n              \n            // Check if p is a prime factor. \n            if (N % p == 0) { \n                  \n                // If yes, then update n and result \n                while (N % p == 0) \n                    N /= p; \n                result *= (1.0 - (1.0 / (double)p)); \n            } \n        } \n      \n        // If n has a prime factor greater than sqrt(n) \n        // (There can be at-most one such prime factor) \n        if (N > 1) \n            result *= (1.0 - (1.0 / (double)N)); \n      \n        return (long)result; \n    } \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    def ETF (self, N):\n        result = N # Initialize result as n \n  \n        # Consider all prime factors of n and for every prime \n        # factor p, multiply result with (1 - 1/p) \n        p = 2\n        while(p*p <= N):\n            # Check if p is a prime factor. \n            if (N % p == 0): \n                  \n                # If yes, then update n and result \n                while (N % p == 0): \n                    N = N/p \n                result *= (1.0 - (1.0 / p)) \n            p+=1\n        # If n has a prime factor greater than sqrt(n) \n        # (There can be at-most one such prime factor) \n        if (N > 1): \n            result *= (1.0 - (1.0 / N)) \n      \n        return int(result)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to calculate Euler's Totient Function for a given number.\n    ETF(N) {\n        let result = N; // Initialize result as n\n\n        // Consider all prime factors of n and for every prime factor p, multiply result with (1 - 1/p)\n        let p = 2;\n        while (p * p <= N) {\n            // Check if p is a prime factor.\n            if (N % p == 0) {\n\n                // If yes, then update n and result\n                while (N % p == 0) {\n                    N = N / p;\n                }\n                result *= (1.0 - (1.0 / p));\n            }\n            p++;\n        }\n        // If n has a prime factor greater than sqrt(n)\n        // (There can be at-most one such prime factor)\n        if (N > 1) {\n            result *= (1.0 - (1.0 / N));\n        }\n\n        return Math.floor(result);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public long ETF(long N)\n    {\n        double result = N;\n        \n        for (int p = 2; p * p <= N; ++p)\n        {\n            if (N % p == 0)\n            {\n                while (N % p == 0)\n                    N /= p;\n                result *= (1.0 - (1.0 / (double)p));\n            }\n        }\n        \n        if (N > 1)\n            result *= (1.0 - (1.0 / (double)N));\n        \n        return (long)result;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}