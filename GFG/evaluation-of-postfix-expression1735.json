{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701339,
            "title": "Postfix Evaluation",
            "titleSlug": "evaluation-of-postfix-expression1735",
            "content": "<p>You are given an array of strings <strong>arr</strong> that represents a valid arithmetic expression written in <strong>Reverse Polish Notation (Postfix Notation)</strong>. Your task is to evaluate the expression and return an integer representing its value.</p>\n<p><strong>Key Details</strong>:</p>\n<ol>\n<li>The valid operators are <strong>'+'</strong>, <strong>'-'</strong>, <strong>'*'</strong>, and <strong>'/'</strong>.</li>\n<li>Each operand is guaranteed to be a valid integer or another expression.</li>\n<li>The division operation between two integers always rounds the result towards zero, discarding any fractional part.</li>\n<li>No division by zero will occur in the input.</li>\n<li>The input is a valid arithmetic expression in Reverse Polish Notation.</li>\n<li>The result of the expression and all intermediate calculations will fit in a 32-bit signed integer.</li>\n</ol>\n<p><strong>Examples:</strong></p>\n<pre><strong>Input: </strong>arr = [\"2\", \"3\", \"1\", \"*\", \"+\", \"9\", \"-\"]<br /><strong>Output:</strong> -4<br /><strong>Explanation:</strong> If the expression is converted into an infix expression, it will be 2 + (3 * 1) &ndash; 9 = 5 &ndash; 9 = -4.</pre>\n<pre><strong>Input:</strong> arr = [\"100\", \"200\", \"+\", \"2\", \"/\", \"5\", \"*\", \"7\", \"+\"]<br /><strong>Output:</strong> 757<br /><strong>Explanation:</strong> If the expression is converted into an infix expression, it will be ((100 + 200) / 2) * 5 + 7  = 150 * 5 + 7 = 757.</pre>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>1 &lt;= arr.size() &lt;= 10<sup>5</sup></li>\n<li>arr[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-10<sup>4</sup>, 10<sup>4</sup>]</li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ol>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int evaluate(vector<string>& arr) {\n        stack<int> st;\n        for (const string& str : arr) {\n            if (isdigit(str.back())) {\n                st.push(stoi(str));\n            } else {\n                int num2 = st.top();\n                st.pop();\n                int num1 = st.top();\n                st.pop();\n                if (str == \"+\") {\n                    st.push(num1 + num2);\n                } else if (str == \"-\") {\n                    st.push(num1 - num2);\n                } else if (str == \"*\") {\n                    st.push(num1 * num2);\n                } else if (str == \"/\") {\n                    st.push(num1 / num2);\n                }\n            }\n        }\n        return st.top();\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public int evaluate(String[] arr) {\n        Stack<Integer> stack = new Stack<>();\n        for (String str : arr) {\n            if (Character.isDigit(str.charAt(str.length() - 1))) {\n                stack.push(Integer.parseInt(str));\n            } else {\n                int num2 = stack.pop();\n                int num1 = stack.pop();\n                switch (str) {\n                    case \"+\":\n                        stack.push(num1 + num2);\n                        break;\n                    case \"-\":\n                        stack.push(num1 - num2);\n                        break;\n                    case \"*\":\n                        stack.push(num1 * num2);\n                        break;\n                    case \"/\":\n                        stack.push(num1 / num2);\n                        break;\n                }\n            }\n        }\n        return stack.peek();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def evaluate(self, arr):\n        stack = []\n        for token in arr:\n            if token[-1].isdigit():  # Check if the token is a number\n                stack.append(int(token))\n            else:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == \"+\":\n                    stack.append(num1 + num2)\n                elif token == \"-\":\n                    stack.append(num1 - num2)\n                elif token == \"*\":\n                    stack.append(num1 * num2)\n                elif token == \"/\":\n                    stack.append(int(num1 / num2))  # Perform integer division\n        return stack[-1]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    evaluate(arr) {\n        const st = [];\n        for (const str of arr) {\n            if (!isNaN(str)) {\n                st.push(parseInt(str, 10));\n            } else {\n                const num2 = st.pop();\n                const num1 = st.pop();\n                if (str === \"+\") {\n                    st.push(num1 + num2);\n                } else if (str === \"-\") {\n                    st.push(num1 - num2);\n                } else if (str === \"*\") {\n                    st.push(num1 * num2);\n                } else if (str === \"/\") {\n                    st.push(Math.trunc(num1 / num2));\n                }\n            }\n        }\n        return st[st.length - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}