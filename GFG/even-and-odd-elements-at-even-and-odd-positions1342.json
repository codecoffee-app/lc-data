{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703246,
            "title": "Even and odd elements at even and odd positions",
            "titleSlug": "even-and-odd-elements-at-even-and-odd-positions1342",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>, the task is to arrange the array such that odd elements occupy the odd positions and even elements occupy the even positions. The order of elements must remain the same. Consider zero-based indexing. After printing according to conditions, if remaining, print the remaining elements as it is.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5, 6]\n<strong>Output:</strong> [2, 1, 4, 3, 6, 5]\n<strong>Explanation</strong>: Even elements are at even position and odd elements are at odd position keeping the order maintained.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong> arr[] = [3, 7, 4, 1]\n<strong>Output:</strong> [4, 3, 7, 1]<br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; arr.size() &le; 10<sup>6<br /></sup></span><span style=\"font-size: 18px;\">1 &le; arr[i] &le;arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Take two iterators and place them at the beginning of an array. Use one iterator for odd elements and the other one for even elements and print them alternatively.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n\n  public:\n    // Function to arrange odd and even numbers in the array.\n    vector<int> arrangeOddAndEven(vector<int>& arr) {\n        int n = arr.size();\n        vector<int> ans;\n        int i = 0;\n        int j = 0;\n        int flag = 0;\n        // iterating over the array.\n        while (i < n || j < n) {\n            // checking if flag is 0.\n            if (flag == 0) {\n                // finding the next even number.\n                while (i < n && arr[i] % 2 != 0)\n                    i++;\n                // pushing the even number to the answer vector.\n                if (i < n) {\n                    ans.push_back(arr[i]);\n                    i++;\n                }\n                flag = 1;\n            }\n            // checking if flag is 1.\n            else if (flag == 1) {\n                // finding the next odd number.\n                while (j < n && arr[j] % 2 == 0)\n                    j++;\n                // pushing the odd number to the answer vector.\n                if (j < n) {\n                    ans.push_back(arr[j]);\n                    j++;\n                }\n                flag = 0;\n            }\n        }\n        // returning the answer vector with arranged odd and even numbers.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "import java.util.*;\n\nclass Solution {\n    // Function to arrange odd and even numbers in the array.\n    public static ArrayList<Integer> arrangeOddAndEven(int[] arr) {\n        int n = arr.length;\n        ArrayList<Integer> ans = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int flag = 0;\n\n        // Iterating over the array.\n        while (i < n || j < n) {\n            // Checking if flag is 0.\n            if (flag == 0) {\n                // Finding the next even number.\n                while (i < n && arr[i] % 2 != 0) i++;\n                // Pushing the even number to the answer list.\n                if (i < n) {\n                    ans.add(arr[i]);\n                    i++;\n                }\n                flag = 1;\n            }\n            // Checking if flag is 1.\n            else if (flag == 1) {\n                // Finding the next odd number.\n                while (j < n && arr[j] % 2 == 0) j++;\n                // Pushing the odd number to the answer list.\n                if (j < n) {\n                    ans.add(arr[j]);\n                    j++;\n                }\n                flag = 0;\n            }\n        }\n        // Returning the answer list with arranged odd and even numbers.\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def arrangeOddAndEven(self, arr):\n        n = len(arr)\n        ans = []\n        i = 0\n        j = 0\n        flag = 0\n\n        # Iterating over the array.\n        while i < n or j < n:\n            # Checking if flag is 0.\n            if flag == 0:\n                # Finding the next even number.\n                while i < n and arr[i] % 2 != 0:\n                    i += 1\n                # Appending the even number to the answer list.\n                if i < n:\n                    ans.append(arr[i])\n                    i += 1\n                flag = 1\n            # Checking if flag is 1.\n            else:\n                # Finding the next odd number.\n                while j < n and arr[j] % 2 == 0:\n                    j += 1\n                # Appending the odd number to the answer list.\n                if j < n:\n                    ans.append(arr[j])\n                    j += 1\n                flag = 0\n\n        # Returning the answer list with arranged odd and even numbers.\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    arrangeOddAndEven(arr) {\n        const n = arr.length;\n        const ans = [];\n        let i = 0;\n        let j = 0;\n        let flag = 0;\n\n        // Iterating over the array.\n        while (i < n || j < n) {\n            // Checking if flag is 0.\n            if (flag === 0) {\n                // Finding the next even number.\n                while (i < n && arr[i] % 2 !== 0) {\n                    i++;\n                }\n                // Pushing the even number to the answer array.\n                if (i < n) {\n                    ans.push(arr[i]);\n                    i++;\n                }\n                flag = 1;\n            }\n            // Checking if flag is 1.\n            else {\n                // Finding the next odd number.\n                while (j < n && arr[j] % 2 === 0) {\n                    j++;\n                }\n                // Pushing the odd number to the answer array.\n                if (j < n) {\n                    ans.push(arr[j]);\n                    j++;\n                }\n                flag = 0;\n            }\n        }\n\n        // Returning the answer array with arranged odd and even numbers.\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}