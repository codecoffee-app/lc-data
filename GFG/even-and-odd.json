{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706234,
            "title": "Even and Odd",
            "titleSlug": "even-and-odd",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr[] </strong>of size <strong>N</strong> containing equal number of odd and even numbers. Arrange the numbers in such a way that all the even numbers get the even index and odd numbers get the odd index.<br />\n<strong>Note: </strong>There are multiple possible solutions, Print any one of them. Also, 0-based indexing is considered.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 6\narr[] = {3, 6, 12, 1, 5, 8}\n<strong>Output:</strong></span>\n<span style=\"font-size:18px\">1\n<strong>Explanation:\n</strong>6 3 12 1 8 5 is a possible solution.\nThe output will always be 1 if your\nrearrangement is correct.</span>\n</pre>\n\n<div><span style=\"font-size:18px\"><strong>Example 2:</strong></span></div>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4\narr[] = {1, 2, 3, 4}\n<strong>Output :</strong>\n1</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>reArrange()</strong>&nbsp;which takes an integer N and an array arr of size N as input and reArranges the array in Place without any extra space.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup><br />\n1 &le; arr[i] &le; 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of size `N` containing an equal number of odd and even numbers, rearrange the numbers such that all even numbers are placed at even indices and all odd numbers are placed at odd indices.  Note that 0-based indexing is used and multiple valid arrangements may exist; return any one of them.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 6\narr[] = {3, 6, 12, 1, 5, 8}",
                        "output": "1",
                        "explanation": "A possible solution is 6 3 12 1 8 5. The output will always be 1 if the rearrangement is correct."
                    },
                    {
                        "input": "N = 4\narr[] = {1, 2, 3, 4}",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<ul>\n\t<li><span style=\"font-size:18px\">Start from the left and keep two index one for even position and other for odd positions.</span></li>\n\t<li><span style=\"font-size:18px\">Traverse these index from left.</span></li>\n\t<li><span style=\"font-size:18px\">At even position there should be even number and at odd positions, there should be odd number.</span></li>\n\t<li><span style=\"font-size:18px\">Whenever there is mismatch , we swap the values at odd and even index.</span></li>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    //Function to rearrange the elements of the array where even elements\n    //are at even positions and odd elements are at odd positions.\n    void reArrange(int arr[], int N) {\n        int oddInd = 1; //initialize oddInd as 1\n        int evenInd = 0; //initialize evenInd as 0\n        while (true) //start an infinite loop\n        {\n            //iterating over the array until evenInd < N and arr[evenInd] is even\n            while (evenInd < N && arr[evenInd] % 2 == 0) \n                evenInd += 2; //increment evenInd by 2\n                \n            //iterating over the array until oddInd < N and arr[oddInd] is odd\n            while (oddInd < N && arr[oddInd] % 2 == 1) \n                oddInd += 2; //increment oddInd by 2\n                \n            //if both evenInd and oddInd are less than N, swap the elements\n            if (evenInd < N && oddInd < N) \n                swap (arr[evenInd], arr[oddInd]); \n\n            //if either evenInd or oddInd is greater than or equal to N, break from the loop\n            else\n                break; \n        } \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    static void reArrange(int[] arr, int N) {\n        int oddInd = 1; // index for odd elements\n        int evenInd = 0; // index for even elements\n        while (true) { // continue until no more swaps can be made\n            while (evenInd < N && arr[evenInd] % 2 == 0) // find next even number\n                evenInd += 2; \n                  \n            while (oddInd < N && arr[oddInd] % 2 == 1) // find next odd number\n                oddInd += 2; \n                  \n            if (evenInd < N && oddInd < N) { // if both even and odd numbers exist\n                int temp = arr[evenInd]; \n                arr[evenInd] = arr[oddInd]; // swap even and odd elements\n                arr[oddInd] = temp;\n            } else {\n                break; // no more swaps can be made, exit the loop\n            } \n        } \n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to rearrange the elements in the given array.\n    def reArrange(self, arr, N):\n        oddInd = 1\n        evenInd = 0\n        \n        while (True): \n            \n            #Finding the next even index.\n            while (evenInd < N and arr[evenInd] % 2 == 0): \n                evenInd += 2\n                   \n            #Finding the next odd index.\n            while (oddInd < N and arr[oddInd] % 2 == 1): \n                oddInd += 2\n                   \n            #Swapping the elements at even and odd indices.\n            if (evenInd < N and oddInd < N): \n                    arr[evenInd],arr[oddInd] = arr[oddInd],arr[evenInd]\n                   \n            else: \n                break",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    reArrange(arr,  N) {\n        let oddInd = 1; // Initialize the index for odd numbers in the array\n        let evenInd = 0; // Initialize the index for even numbers in the array\n        while (true) { // Start an infinite loop\n            while (evenInd < N && arr[evenInd] % 2 === 0) // Move the even index to the next even number in the array\n                evenInd += 2; \n                  \n            while (oddInd < N && arr[oddInd] % 2 === 1) // Move the odd index to the next odd number in the array\n                oddInd += 2; \n                  \n            if (evenInd < N && oddInd < N) { // Check if both even and odd indices are within the array bounds\n                let temp = arr[evenInd]; // Swap the even number with the odd number\n                arr[evenInd] = arr[oddInd]; \n                arr[oddInd] = temp; \n            } \n            else\n                break; // If either even or odd index exceeds the array bounds, exit the loop\n        } \n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}