{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703421,
            "title": "Even occurring elements",
            "titleSlug": "even-occurring-elements4332",
            "content": "<p><span >Given an array <strong>arr[]</strong> of integers, where most numbers occur an odd number of times, except for a few elements that appear an even number of times. Find and return the elements with even occurrences in the array.<br /></span><span >If no such element exists, return -1.<br /><strong>Note:</strong> Elements should be returned in order of occurrence.</span></p>\n<p><span ><strong>Examples</strong>:</span></p>\n<pre><span ><strong>Input:</strong> arr[] = [9, 12, 23, 10, 12, 12, 15, 23, 14, 12, 15]</span><br /><span ><strong>Output:</strong> [12, 15, 23]</span><br /><span ><strong>Explanation:</strong> The numbers 12, 15, and 23 each appear an even number of times.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [23, 12, 56, 34, 32]</span><br /><span ><strong>Output:</strong> [-1]</span><br /><span ><strong>Explanation:</strong> Every number in the array occurs an odd number of times.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)</span><br /><span ><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span ><strong>Constraints</strong>:</span></p>\n<p><span >1 &le; arr.size() &le; 10<sup>6</sup></span><br /><span >1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find all numbers that appear an even number of times. Return these numbers in the order they first appear in the input array. If no such number exists, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[9, 12, 23, 10, 12, 12, 15, 23, 14, 12, 15]",
                        "output": "[12, 15, 23]",
                        "explanation": "The numbers 12, 15, and 23 each appear an even number of times in the input array."
                    },
                    {
                        "input": "[23, 12, 56, 34, 32]",
                        "output": "[-1]",
                        "explanation": "Every number in the array occurs an odd number of times, so the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Can you count the occurrence of elements? then traverse the first element to occur in the array push that first then next and continue.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to find numbers with even occurrences in the given array.\nclass Solution {\n  public:\n\n    vector<int> findEvenOccurrences(vector<int>& arr) {\n        // Creating a frequency map to store occurrences of each number.\n        unordered_map<int, int> freqMap;\n        // Iterating over the array to populate the frequency map.\n        for (int num : arr) {\n            freqMap[num]++;\n        }\n\n        vector<int> result;\n        // Iterating over the array to check for numbers with even occurrences.\n        for (auto& num : arr) {\n            // If the frequency of the number is even, add it to the result and\n            // decrement the frequency.\n            if (freqMap[num] % 2 == 0) {\n                result.push_back(num);\n                freqMap[num]--;\n            }\n        }\n\n        // If no numbers with even occurrences are found, add -1 to the result.\n        if (result.empty()) {\n            result.push_back(-1);\n        }\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find elements in the array that appear an even number of times\n    public List<Integer> findEvenOccurrences(int[] arr) {\n        // Map to store the frequency of each number in the array\n        Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int num : arr) {\n            // Increment the count for each number found in the array\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        // List to store the result - numbers that have even occurrences\n        List<Integer> result = new ArrayList<>();\n        for (int num : arr) {\n            // Check if the number has an even frequency before it's potentially\n            // modified\n            if (freqMap.get(num) % 2 == 0) {\n                result.add(num);\n                // Decrement the count after adding to result to avoid adding the same\n                // number again\n                freqMap.put(num, freqMap.get(num) - 1);\n            }\n        }\n\n        // If no number is found with even occurrences, add -1 to the result\n        if (result.isEmpty()) {\n            result.add(-1);\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findEvenOccurrences(self, arr):\n        # Create a dictionary to store the frequency of each number\n        freq_map = {}\n\n        # Count the occurrences of each number in the array\n        for num in arr:\n            freq_map[num] = freq_map.get(num, 0) + 1\n\n        # List to store the result\n        result = []\n\n        # Iterate through the array again\n        for num in arr:\n            # Check if the current number appears an even number of times\n            if freq_map[num] % 2 == 0:\n                # Add the number to the result list\n                result.append(num)\n                # Decrease the frequency count to avoid duplicates\n                freq_map[num] -= 1\n\n        # If no numbers with even occurrences found, add -1 to the result\n        if not result:\n            result.append(-1)\n\n        # Return the list of numbers with even occurrences\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findEvenOccurrences(arr) {\n        // Create a Map to store the frequency of each number\n        const freqMap = new Map();\n\n        // Count the occurrences of each number in the array\n        for (const num of arr) {\n            freqMap.set(num, (freqMap.get(num) || 0) + 1);\n        }\n\n        // Array to store the result\n        const result = [];\n\n        // Iterate through the array again\n        for (const num of arr) {\n            // Check if the current number appears an even number of times\n            if (freqMap.get(num) % 2 === 0) {\n                // Add the number to the result array\n                result.push(num);\n                // Decrease the frequency count to avoid duplicates\n                freqMap.set(num, freqMap.get(num) - 1);\n            }\n        }\n\n        // If no numbers with even occurrences found, add -1 to the result\n        if (result.length === 0) {\n            result.push(-1);\n        }\n\n        // Return the array of numbers with even occurrences\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}