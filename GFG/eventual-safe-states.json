{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711095,
            "title": "Eventual Safe States",
            "titleSlug": "eventual-safe-states",
            "content": "<p><span style=\"font-size: 18px;\">A directed graph of <strong>V</strong> vertices and <strong>E</strong> edges is given in the form of an adjacency list <strong>adj</strong>. Each node of the graph is labelled with a distinct integer in the range <strong>0</strong> to <strong>V - 1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\">A node is a <strong>terminal node</strong> if there are no outgoing edges. A node is a <strong>safe node</strong> if every possible path starting from that node leads to a <strong>terminal node</strong>.</span></p>\n<p><span style=\"font-size: 18px;\">You have to return an array containing all the <strong>safe nodes</strong> of the graph. The answer should be sorted in <strong>ascending</strong> order.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n\n<img style=\"height: 348px; width: 386px;\" src=\"https://media.geeksforgeeks.org/img-practice/booker1-1655493978.png\" alt=\"\" />\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">2 4 5 6</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">The given graph is shown above.</span>\n<span style=\"font-size: 18px;\">Nodes 5 and 6 are terminal nodes as there are no \noutgoing edges from either of them. </span>\n<span style=\"font-size: 18px;\">Every path starting at nodes 2, 4, 5, and 6 all \nlead to either node 5 or 6.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n\n<strong><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/booker2-1655494315.png\" alt=\"\" /></span></strong>\n<strong><span style=\"font-size: 18px;\">Output:</span></strong>\n<span style=\"font-size: 18px;\">3</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong>\n<span style=\"font-size: 18px;\">Only node 3 is a terminal node, and every path \nstarting at node 3 leads to node 3.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>eventualSafeNodes</strong><strong>()&nbsp;</strong>which takes an integer&nbsp;<strong>V</strong> denoting no. of vertices and <strong>adj</strong> denoting adjacency list of the graph and returns an array of <strong>safe nodes</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(V + E)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Space Complexity:</strong> O(V)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1 &lt;= V &lt;= 10<sup>4</sup></span></li>\n<li><span style=\"font-size: 18px;\">0 &lt;= E &lt;= 10<sup>4</sup></span></li>\n<li><span style=\"font-size: 18px;\">The graph won't contain self loops.</span></li>\n<li><span style=\"font-size: 18px;\">Each node in the graph has a distinct value in the range 0 to V - 1.</span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with V vertices (labeled 0 to V-1) and E edges represented by an adjacency list, identify and return all safe nodes in ascending order. A node is considered a terminal node if it has no outgoing edges. A node is considered a safe node if every possible path starting from that node eventually leads to a terminal node.",
                "constraints": [
                    "1 <= V <= 10^4",
                    "0 <= E <= 10^4",
                    "The graph won't contain self loops.",
                    "Each node in the graph has a distinct value in the range 0 to V - 1."
                ],
                "testcases": [
                    {
                        "input": "V = 7, adj = [[1,2],[2,3],[5],[0],[5],[],[]]",
                        "output": "[2, 4, 5, 6]",
                        "explanation": "Nodes 5 and 6 are terminal nodes.  All paths from nodes 2, 4, 5, and 6 lead to either node 5 or 6."
                    },
                    {
                        "input": "V = 4, adj = [[1],[2],[3],[]]",
                        "output": "[3]",
                        "explanation": "Node 3 is the only terminal node, and any path starting from node 3 will lead to node 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">All the nodes are <strong>safe nodes</strong> except those present in loops.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "bloomberg"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to perform depth-first search to check if there is a cycle\n    // and mark the nodes present in the cycle\n    bool dfs(int u, vector<int> adj[], vector<bool>& is_visited,\n             vector<bool>& in_stack, vector<bool>& nodes_present_in_cycle) {\n        is_visited[u] = true;\n        in_stack[u] = true;\n\n        // Iterate over the adjacent nodes\n        for (auto v : adj[u]) {\n            if (!is_visited[v]) {\n                // Recursively call dfs on unvisited nodes\n                bool is_cycle_present =\n                    dfs(v, adj, is_visited, in_stack, nodes_present_in_cycle);\n\n                // If cycle is present, mark nodes in the cycle and return true\n                if (is_cycle_present) {\n                    return nodes_present_in_cycle[u] = true;\n                }\n            } else if (is_visited[v] && in_stack[v]) {\n                // If the node is visited and in the recursion stack, cycle is present\n                return nodes_present_in_cycle[u] = true;\n            }\n        }\n\n        // Mark the node as not in recursion stack and return false\n        in_stack[u] = false;\n        return false;\n    }\n\n    // Function to find the eventual safe nodes\n    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {\n\n        vector<int> safeNodes;\n        vector<bool> is_visited(V, false);\n        vector<bool> in_stack(V, false);\n        vector<bool> nodes_present_in_cycle(V, false);\n\n        // Iterate over all the nodes\n        for (int i = 0; i < V; i++) {\n            if (!is_visited[i]) {\n                // Call dfs for unvisited nodes\n                dfs(i, adj, is_visited, in_stack, nodes_present_in_cycle);\n            }\n        }\n\n        // Add nodes that are not present in any cycle to the safeNodes list\n        for (int i = 0; i < V; i++) {\n            if (!nodes_present_in_cycle[i]) {\n                safeNodes.push_back(i);\n            }\n        }\n\n        // Return the list of safe nodes\n        return safeNodes;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n\n// Depth First Search function to check for cycles in the graph and identify nodes present in cycles\nboolean dfs(int u, List<List<Integer>> adj, boolean[] is_visited,\n            boolean[] in_stack, boolean[] nodes_present_in_cycle) {\n    is_visited[u] = true;\n    in_stack[u] = true;\n\n    // check each adjacent node\n    for (int v : adj.get(u)) {\n        if (!is_visited[v]) {\n            // recursively call dfs on unvisited nodes\n            boolean is_cycle_present =\n                dfs(v, adj, is_visited, in_stack, nodes_present_in_cycle);\n            if (is_cycle_present) {\n                // if a cycle is present, mark the current node and return true\n                return nodes_present_in_cycle[u] = true;\n            }\n        } else if (is_visited[v] && in_stack[v]) {\n            // if an adjacent node is already visited and is in the current path, mark the current node and return true\n            return nodes_present_in_cycle[u] = true;\n        }\n    }\n\n    // mark the current node as not in the current path and return false\n    in_stack[u] = false;\n    return false;\n}\n\n// Function to find the nodes that are eventually safe\nList<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {\n\n    List<Integer> safeNodes = new ArrayList<>();\n    boolean[] is_visited = new boolean[V];\n    boolean[] in_stack = new boolean[V];\n    boolean[] nodes_present_in_cycle = new boolean[V];\n\n    // iterate over each node in the graph and perform dfs to check for cycles\n    for (int i = 0; i < V; i++) {\n        if (!is_visited[i]) {\n            dfs(i, adj, is_visited, in_stack, nodes_present_in_cycle);\n        }\n    }\n\n    // add nodes that are not present in any cycle to the safeNodes list\n    for (int i = 0; i < V; i++) {\n        if (!nodes_present_in_cycle[i]) {\n            safeNodes.add(i);\n        }\n    }\n\n    // return the list of safe nodes\n    return safeNodes;\n}\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom typing import List\r\nimport sys\r\nsys.setrecursionlimit(10**8)\r\n\r\n# Depth First Search to check if a cycle is present and mark the nodes present in the cycle\r\ndef dfs(u, adj, is_visited, in_stack, nodes_present_in_cycle):\r\n    is_visited[u] = True\r\n    in_stack[u] = True\r\n\r\n    # Explore all the adjacent nodes\r\n    for v in adj[u]:\r\n        if is_visited[v] == False:\r\n            # Recursive call to check if there is a cycle\r\n            is_cycle_present = dfs(v, adj, is_visited, in_stack, nodes_present_in_cycle)\r\n            if is_cycle_present == True:\r\n                # Mark the current node as present in the cycle and return True\r\n                nodes_present_in_cycle[u] = True\r\n                return True\r\n        # If an adjacent node is visited and is in the current recursion stack, a cycle is present\r\n        elif is_visited[v] == True and in_stack[v] == True:\r\n            nodes_present_in_cycle[u] = True\r\n            return True\r\n\r\n    # Mark the current node as not in recursion stack\r\n    in_stack[u] = False\r\n    return False \r\n\r\n\r\nclass Solution:    \r\n    def eventualSafeNodes(self, V : int, adj : List[List[int]]) -> List[int]:\r\n        safeNodes = []\r\n        is_visited = [False] * V\r\n        in_stack = [False] * V\r\n        nodes_present_in_cycle = [False] * V\r\n\r\n        # Traverse each node and perform a DFS\r\n        for i in range(V):\r\n            if is_visited[i] == False:\r\n                dfs(i, adj, is_visited, in_stack, nodes_present_in_cycle)\r\n        \r\n        # Add the nodes that are not present in any cycle to the safeNodes list\r\n        for i in range(V):\r\n            if nodes_present_in_cycle[i] == False:\r\n                safeNodes.append(i)\r\n\r\n        return safeNodes",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}