{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710020,
            "title": "Exactly one swap",
            "titleSlug": "exactly-one-swap--170637",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>S</strong> containing&nbsp;lowercase english alphabet&nbsp;characters. The task is to calculate the number of distinct strings that can be obtained after performing&nbsp;exactly one swap.<br />\r\nIn one swap,Geek can&nbsp;pick two distinct index <strong>i</strong> and <strong><u>j</u></strong> (i.e 1 <u>&lt;</u> i &lt; j <u>&lt;</u> |S|&nbsp;)&nbsp;of the string, then swap the characters at the position i and j.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nS = &quot;geek&quot;\r\n<strong>Output:</strong> \r\n6\r\n<strong>Explanation: \r\n</strong>After one swap, There are only 6 distinct strings \r\npossible.(i.e &quot;egek&quot;,&quot;eegk&quot;,&quot;geek&quot;,&quot;geke&quot;,&quot;gkee&quot; and \r\n&quot;keeg&quot;)\r\n</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>S = &quot;ab&quot;\r\n<strong>Output: \r\n</strong>1\r\n<strong>Explanation:</strong>\r\nOnly one string is possible after one swap(i.e &quot;ba&quot;)</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function<strong>&nbsp;countStrings( )</strong>&nbsp;which takes the string <strong>S</strong>&nbsp;as input parameters and returns the required answer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|) .<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1) .</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n2&nbsp;&le;&nbsp;|S|&nbsp;&le;&nbsp;10<sup>5</sup><br />\r\nS contains lowercase characters</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each i, First calculate the number of j such that S[i] != S[j].&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution\n{\npublic:\n    //Function to count the number of strings with the given properties.\n    long long countStrings(string S)\n    {\n        //Getting the size of the string.\n        long long N=S.size();\n        //Creating an array to store the count of each character in the string.\n        int mp[26]={0};\n        //Iterating over the string and counting the occurrences of each character.\n        for(auto i:S){\n            mp[i-'a']++;\n        }\n        //Initializing a variable to store the final answer.\n        long long ans=0;\n        //Iterating over the string to calculate the number of pairs.\n        for(auto i:S){\n            ans+=N-mp[i-'a'];\n        }\n        //Dividing the number of pairs by 2 to avoid double counting.\n        ans/=2;\n        //Checking if there is a character that occurs at least twice.\n        for(int i=0;i<26;i++){\n            if(mp[i]>=2){\n                //If there is, incrementing the answer by 1.\n                ans++;\n                //Breaking the loop since we only need to check if there is at least one such character.\n                break;\n            }\n        }\n        //Returning the final answer.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution \n{ \n    long countStrings(String S) \n    { \n        long N=S.length();\n        \n        //creating an array to store the frequency of each character in the string\n        int mp[] = new int[26];\n        \n        //initializing the array with all zeros\n        Arrays.fill(mp,0);\n        \n        //calculating the frequency of each character in the string\n        for(int i=0;i<S.length();i++){\n            mp[(int)S.charAt(i)-(int)'a']++;\n        }\n        \n        //calculating the total number of pairs of characters that are not equal in the string \n        //and storing it in the variable 'ans'\n        long ans=0;\n        for(int i=0;i<S.length();i++){\n            ans+=N-mp[(int)S.charAt(i)-(int)'a'];\n        }\n        \n        //dividing 'ans' by 2 to get the total number of pairs of characters that are not equal\n        //in the string (since each pair has been counted twice in the previous loop)\n        ans/=2;\n        \n        //checking if there exists a character that appears at least twice in the string\n        //and incrementing 'ans' by 1 if such a character exists\n        for(int i=0;i<26;i++){\n            if(mp[i]>=2){\n                ans++;\n                break;\n            }\n        }\n        \n        //returning the final value of 'ans'\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to count the number of strings.\r\n    def countStrings(self, S): \r\n        \r\n        N=len(S)\r\n        \r\n        #creating a list to store the count of each character.\r\n        mp = [0]*26\r\n        \r\n        #iterating over the string and updating the count of characters.\r\n        for i in S:\r\n            mp[ord(i)-ord('a')]+=1\r\n        \r\n        ans=0\r\n        \r\n        #iterating over the string again.\r\n        for i in S:\r\n            \r\n            #incrementing the count of characters.\r\n            ans+=N-mp[ord(i)-ord('a')]\r\n        \r\n        #dividing the count by 2 to get the final number of strings.\r\n        ans//=2\r\n        \r\n        #checking if there are at least two characters with count greater than or equal to 2.\r\n        for i in range(26):\r\n            if mp[i]>=2:\r\n                \r\n                #incrementing the count of strings by 1.\r\n                ans+=1\r\n                break\r\n        \r\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {string} S\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to count the total number of distinct strings.\r\n    countStrings(S)\r\n    {\r\n        const N = S.length;\r\n        \r\n        //creating a list to store the count of each character.\r\n        const mp = new Array(26).fill(0);\r\n        \r\n        //iterating over the string and updating the count of characters.\r\n        for (let i = 0; i < N; i++) {\r\n            mp[S.charCodeAt(i)-'a'.charCodeAt(0)] += 1;\r\n        }\r\n        \r\n        let ans = 0;\r\n        \r\n        //iterating over the string again.\r\n        for (let i = 0; i < N; i++) {\r\n            \r\n            //incrementing the count of characters.\r\n            ans += N - mp[S.charCodeAt(i)-'a'.charCodeAt(0)];\r\n        }\r\n        \r\n        //dividing the count by 2 to get the final number of strings.\r\n        ans = Math.floor(ans / 2);\r\n        \r\n        //checking if there are at least two characters with count greater than or equal to 2.\r\n        for (let i = 0; i < 26; i++) {\r\n            if (mp[i] >= 2) {\r\n                \r\n                //incrementing the count of strings by 1.\r\n                ans += 1;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public long countStrings(string S)\n    {\n        //Getting the size of the string.\n        long N=S.Length;\n        //Creating an array to store the count of each character in the string.\n        int[] mp = new int[26];\n        //Iterating over the string and counting the occurrences of each character.\n        foreach(char c in S)\n        {\n            mp[c - 'a']++;\n        }\n        //Initializing a variable to store the final answer.\n        long ans = 0;\n        //Iterating over the string to calculate the number of pairs.\n        foreach(char c in S)\n        {\n            ans += N - mp[c - 'a'];\n        }\n        //Dividing the number of pairs by 2 to avoid double counting.\n        ans /= 2;\n        //Checking if there is a character that occurs at least twice.\n        for (int i = 0; i < 26; i++)\n        {\n            if (mp[i] >= 2)\n            {\n                //If there is, incrementing the answer by 1.\n                ans++;\n                //Breaking the loop since we only need to check if there is at least one such character.\n                break;\n            }\n        }\n        //Returning the final answer.\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}