{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700681,
            "title": "Exchange the Leaf Nodes",
            "titleSlug": "exchange-the-leaf-nodes",
            "content": "<p><span >Given a binary tree. you have to swap leaf nodes in the given binary tree pairwise starting from from left to right.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> \n\n<img style=\"height: 363px; width: 583px;\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/swap1.png\" alt=\"\" />\n<strong>Output:</strong> [7, 2, 1, 4, 5, 9, 3, 8, 6, 10]&nbsp;\n<img style=\"height: 381px; width: 602px;\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/swap2.png\" alt=\"\" />\n<strong>Explanation: </strong>In order traversal of tree after swapping nodes is [7, 2, 1, 4, 5, 9, 3, 8, 6, 10].</span></pre>\n<pre><span ><strong>Input: </strong>\n\\t    1\n\\t /     \\\n\\t2\\t 3\n\\t \\    /    \\\n\\t  5  6\\t7\n<strong>Output:</strong> [2, 6, 1, 5, 3, 7]\n\\t  1\n     /     \\\n    2\\t 3\n     \\    /   \\\n\\t6  5     7 <br /><strong>Explanation:&nbsp;</strong>In order traversal of tree after swapping nodes is<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">&nbsp;[</span>2, 6, 1, 5, 3, 7]<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">.</span></span></pre>\n<p>&nbsp;</p>\n<pre><span ><strong>Input: </strong>\n\\t    2\n\\t /     \\\n\\t6\\t 3\n\\t\\t/    \\\n\\t     9\\t7<br /><strong>Output:</strong> [9, 2, 6, 3, 7]<br /></span><span >\\t    2\n\\t /     \\\n\\t9\\t 3\n\\t\\t/    \\\n\\t     6\\t7<br /></span><span ><strong>Explanation:&nbsp;</strong>In order traversal of tree after swapping nodes is<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">&nbsp;[</span>9, 2, 6, 3, 7]<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1&lt;=number of nodes&lt;=10<sup>5</sup><br />1&lt;=node-&gt;data&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Number leaf nodes from left to right.</span></p>",
            "<p><span >Store the previous leaf node during traversing of the tree.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\npublic:\n    //Function to swap two nodes.\n    void Swap(Node **a, Node **b)\n    {\n        Node *temp = *a;\n        *a = *b;\n        *b = temp;\n    }\n\n    //Pointers to keep track of the first and second nodes.\n    Node **firstPtr;\n    Node **secondPtr;\n\n    //Utility function to perform pairwise swapping.\n    void pairwiseSwapUtil(Node **root, int &count)\n    {\n        //If root is NULL, return.\n        if (!(*root))\n            return;\n\n        //If root is a leaf node, update the secondPtr and\n        //swap the nodes based on the count.\n        if (!(*root)->left && !(*root)->right)\n        {\n            secondPtr = root;\n            count++;\n            if (count % 2 == 0)\n                Swap(firstPtr, secondPtr);\n            else\n                firstPtr = secondPtr;\n        }\n\n        //Recursively call the function for left and right child nodes.\n        if ((*root)->left)\n            pairwiseSwapUtil(&(*root)->left, count);\n\n        if ((*root)->right)\n            pairwiseSwapUtil(&(*root)->right, count);\n    }\n\n    //Function to perform pairwise swapping of nodes.\n    void pairwiseSwap(Node *root)\n    {\n        //Initialize count to 0.\n        int c = 0;\n\n        //Call the utility function to perform pairwise swapping.\n        pairwiseSwapUtil(&root, c);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Utility method to print an object\n    public void po(Object o) { System.out.println(o); }\n\n    // Helper class to hold a node reference\n    class Nodee {\n        Node node; // Holds a Node object\n    }\n\n    // Recursive method to perform pairwise swapping of leaf nodes\n    public void el(Node node, Nodee a, Nodee b, Int count) {\n        // Base case: if node is null, return\n        if (node == null) return;\n\n        // Check if the current node is a leaf node\n        if (node.left == null && node.right == null) {\n            // Increment the leaf count\n            count.i++;\n\n            // If it's an even-numbered leaf\n            if (count.i % 2 == 0) {\n                b.node = node; // Assign current node to b\n\n                // Swap data between the two nodes\n                int temp = a.node.data;\n                a.node.data = b.node.data;\n                b.node.data = temp;\n\n            } else {\n                // If it's an odd-numbered leaf, assign to a\n                a.node = node;\n            }\n            return;\n        }\n\n        // Recur on left subtree\n        if (node.left != null) el(node.left, a, b, count);\n\n        // Recur on right subtree\n        if (node.right != null) el(node.right, a, b, count);\n    }\n\n    // Method to initiate pairwise swapping of leaf nodes\n    public void pairwiseSwap(Node root) {\n        Int count = new Int(0);                    // Initialize the count of leaf nodes\n        el(root, new Nodee(), new Nodee(), count); // Start recursive swapping\n    }\n\n    // Helper class to store an integer value (used for counting)\n    class Int {\n        int i;\n\n        public Int(int i) { this.i = i; }\n    }\n\n    // Utility method to swap data between two nodes\n    public void swap(Node a, Node b) {\n        int temp = a.data;\n        a.data = b.data;\n        b.data = temp;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to swap the values of two nodes.\n    def swap(self,n1,n2):\n        n1.data,n2.data=n2.data,n1.data\n    \n    #Utility function to perform pairwise swapping.\n    def pairwiseSwapu(self,root):\n        global c,n1,n2\n        \n        #Base case: if root is None, return.\n        if not root:\n            return\n        \n        #Base case: if the current node is a leaf node (no children).\n        #Set the second node (n2) as the current node and increment the counter.\n        #If the counter is even, perform the swap between the first node (n1) and n2.\n        #Otherwise, set n1 as the current node.\n        if not root.left and not root.right:\n            n2=root\n            c+=1\n            \n            if c%2==0:\n                self.swap(n1,n2)\n            else:\n                n1=root\n        \n        #If there is a left child, recursively call the function on it.\n        if root.left:\n            self.pairwiseSwapu(root.left)\n        \n        #If there is a right child, recursively call the function on it.\n        if root.right:\n            self.pairwiseSwapu(root.right)\n    \n    #Function to perform pairwise swapping of nodes.\n    def pairwiseSwap(self,root):\n        global c\n        c=0\n        self.pairwiseSwapu(root)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() {\n        this.count = 0; // Initialize count to keep track of leaf nodes\n    }\n\n    // Method to initiate the pairwise swapping of leaf nodes\n    pairwiseSwap(root) {\n        let a = new Node(0); // Placeholder node to store the first leaf node\n        let b = new Node(0); // Placeholder node to store the second leaf node\n        this.el(root, a, b); // Start the recursive swapping process\n    }\n\n    // Recursive method to perform pairwise swapping of leaf nodes\n    el(node, a, b) {\n        // Base case: if the current node is null, return\n        if (node === null) return;\n\n        // Check if the current node is a leaf node\n        if (node.left === null && node.right === null) {\n            // Increment the leaf count\n            this.count++;\n\n            // If it's an even-numbered leaf node\n            if (this.count % 2 === 0) {\n                b.node = node; // Assign the current node to b\n\n                // Swap the data between the two leaf nodes a and b\n                let temp = a.node.data;\n                a.node.data = b.node.data;\n                b.node.data = temp;\n            } else {\n                // If it's an odd-numbered leaf, assign to a\n                a.node = node;\n            }\n            return;\n        }\n\n        // Recur on the left subtree\n        if (node.left !== null) this.el(node.left, a, b);\n\n        // Recur on the right subtree\n        if (node.right !== null) this.el(node.right, a, b);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}