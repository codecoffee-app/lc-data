{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705235,
            "title": "Exit Point in a Matrix",
            "titleSlug": "exit-point-in-a-matrix0905",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>matrix</strong> of size <strong>n x m</strong> with <strong>0&rsquo;s</strong> and <strong>1&rsquo;s</strong>, you enter the matrix at cell <strong>(0,0)</strong> in <strong>left to right</strong> direction. Whenever you encounter a <strong>0</strong> you retain it in the <strong>same</strong> <strong>direction</strong>, else if you encounter a <strong>1</strong> you have to <strong>change</strong> the direction<strong> </strong>to the <strong>right </strong>of the current direction and <strong>change that 1</strong> value to <strong>0</strong>, you have to find out from which index you will <strong>leave </strong>the matrix<strong> </strong>at the end.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>n = 3, m = 3<strong><br /></strong>matrix = {{0, 1, 0},\n\\t    {0, 1, 1}, <br />\\t    {0, 0, 0}}\n<strong>Output: <br /></strong>{1, 0}\n<strong>Explanation: <br /></strong>Enter the matrix at (0, 0) <br />-&gt; then move towards (0, 1) -&gt;  1 is encountered <br />-&gt; turn right towards (1, 1)  -&gt; again 1 is encountered <br />-&gt; turn right again towards (1, 0) <br />-&gt; now, the boundary of matrix will be crossed -&gt;hence, exit point reached at 1, 0..</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>n = 1, m = 2<strong><br /></strong>matrix = {{0, 0}}\n<strong>Output: <br /></strong>{0, 1}<br /><strong>Explanation: <br /></strong>Enter the matrix at cell (0, 0).\nSince the cell contains a 0, we continue moving in the same direction.\nWe reach cell (0, 1), which also contains a 0. So, we continue moving in the same direction, we exit the matrix from cell (0, 1).<br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>FindExitPoint()&nbsp;</strong>which takes the <strong>matrix</strong> as an input parameter and returns a <strong>list</strong> containing the <strong>exit point.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n * m) where n = number of rows and m = number of columns.<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n, m &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of size n x m containing 0s and 1s, you start at cell (0, 0) moving from left to right. If you encounter a 0, you continue in the same direction. If you encounter a 1, you change your direction to the right of the current direction, change the 1 to a 0, and continue. Find the index from which you exit the matrix.",
                "constraints": [
                    "1 <= n, m <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3\nmatrix = {{0, 1, 0},\n\t    {0, 1, 1},\n\t    {0, 0, 0}}",
                        "output": "{1, 0}",
                        "explanation": "Starting at (0, 0), we move to (0, 1) and encounter a 1. We change direction to down (1, 1). Encountering a 1 again, we change direction to left (1, 0). We exit the matrix at (1, 0)."
                    },
                    {
                        "input": "n = 1, m = 2\nmatrix = {{0, 0}}",
                        "output": "{0, 1}",
                        "explanation": "Starting at (0, 0), we move right to (0, 1).  Since (0,1) contains a 0, we continue moving right.  We exit at (0, 1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use simple maths.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> FindExitPoint(int n, int m, vector<vector<int>>& matrix) {\n        int i = 0, j = 0;\n        int dir = 1;\n\n        /*Now we loop till we don't find the boundary */\n\n        while (i < n and j < m and i >= 0 and j >= 0) {\n\n            /*Changes the directions if 1 encountered and resets value to 0*/\n            if (matrix[i][j] == 1) {\n                matrix[i][j] = 0;\n                switch (dir) {\n                    case 1:\n                        dir = 2;\n                        break;\n                    case 2:\n                        dir = 3;\n                        break;\n                    case 3:\n                        dir = 4;\n                        break;\n                    case 4:\n                        dir = 1;\n                        break;\n                }\n            }\n\n            /* moves along  based on the direction*/\n            switch (dir) {\n                case 1:\n                    j++;\n                    break;\n                case 2:\n                    i++;\n                    break;\n                case 3:\n                    j--;\n                    break;\n                case 4:\n                    i--;\n                    break;\n            }\n        }\n\n        /* to compensate for the last move */\n        switch (dir) {\n            case 1:\n                j--;\n                break;\n            case 2:\n                i--;\n                break;\n            case 3:\n                j++;\n                break;\n            case 4:\n                i++;\n                break;\n        }\n\n        return {i, j};\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int[] FindExitPoint(int n, int m, int[][] matrix) {\n        int i = 0, j = 0;\n        int dir = 1;\n\n        while (i < n && j < m && i >= 0 && j >= 0) {\n            if (matrix[i][j] == 1) {\n                matrix[i][j] = 0;\n                switch (dir) {\n                    case 1:\n                        dir = 2;\n                        break;\n                    case 2:\n                        dir = 3;\n                        break;\n                    case 3:\n                        dir = 4;\n                        break;\n                    case 4:\n                        dir = 1;\n                        break;\n                }\n            }\n\n            switch (dir) {\n                case 1:\n                    j++;\n                    break;\n                case 2:\n                    i++;\n                    break;\n                case 3:\n                    j--;\n                    break;\n                case 4:\n                    i--;\n                    break;\n            }\n        }\n\n        switch (dir) {\n            case 1:\n                j--;\n                break;\n            case 2:\n                i--;\n                break;\n            case 3:\n                j++;\n                break;\n            case 4:\n                i++;\n                break;\n        }\n\n        return new int[] {i, j};\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def FindExitPoint(self, n, m, matrix):\n        # Initialize starting position (0, 0)\n        i = 0\n        j = 0\n        # Initialize direction to 1 (1: right, 2: down, 3: left, 4: up)\n        dir = 1\n\n        # Loop until we reach the boundary of the matrix\n        while 0 <= i < n and 0 <= j < m:\n            # If current cell contains 1, change direction and mark the cell as visited (0)\n            if matrix[i][j] == 1:\n                matrix[i][j] = 0\n                dir = (dir % 4) + 1\n\n            # Move to the next cell based on the direction\n            if dir == 1:\n                j += 1\n            elif dir == 2:\n                i += 1\n            elif dir == 3:\n                j -= 1\n            elif dir == 4:\n                i -= 1\n\n        # Compensate for the last move (backtrack)\n        if dir == 1:\n            j -= 1\n        elif dir == 2:\n            i -= 1\n        elif dir == 3:\n            j += 1\n        elif dir == 4:\n            i += 1\n\n        # Return the coordinates of the exit point\n        return [i, j]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    FindExitPoint(n, m, matrix) {\n        let i = 0;\n        let j = 0;\n        let dir = 1;\n\n        /* Now we loop till we don't find the boundary */\n\n        while (i < n && j < m && i >= 0 && j >= 0) {\n\n            /* Changes the directions if 1 encountered and resets value to 0 */\n            if (matrix[i][j] === 1) {\n                matrix[i][j] = 0;\n                switch (dir) {\n                    case 1:\n                        dir = 2;\n                        break;\n                    case 2:\n                        dir = 3;\n                        break;\n                    case 3:\n                        dir = 4;\n                        break;\n                    case 4:\n                        dir = 1;\n                        break;\n                }\n            }\n\n            /* moves along based on the direction */\n            switch (dir) {\n                case 1:\n                    j++;\n                    break;\n                case 2:\n                    i++;\n                    break;\n                case 3:\n                    j--;\n                    break;\n                case 4:\n                    i--;\n                    break;\n            }\n        }\n\n        /* to compensate for the last move */\n        switch (dir) {\n            case 1:\n                j--;\n                break;\n            case 2:\n                i--;\n                break;\n            case 3:\n                j++;\n                break;\n            case 4:\n                i++;\n                break;\n        }\n        let ans = [];\n        ans[0] = i;\n        ans[1] = j;\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}