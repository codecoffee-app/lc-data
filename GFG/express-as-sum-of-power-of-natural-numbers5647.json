{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705641,
            "title": "Express as sum of power of natural numbers",
            "titleSlug": "express-as-sum-of-power-of-natural-numbers5647",
            "content": "<p><span style=\"font-size: 18px;\">Given two numbers<strong>&nbsp;n</strong>&nbsp;and <strong>x</strong>, find out the total number of ways <strong>n</strong> can be expressed as the sum of<strong> the Xth</strong>&nbsp;power of <strong>unique natural numbers</strong>. As the total number of ways can be very large, so return the number of ways modulo 10<sup>9 </sup>+ 7.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: <br />n = 10, x = 2\n<strong>Output:</strong>&nbsp;<br />1&nbsp;\n<strong>Explanation</strong>: <br /></span><span style=\"font-size: 18px;\">10 = 1<sup>2</sup> + 3<sup>2</sup>, Hence total 1 possibility.</span> \n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>n = 100, x = 2\n<strong>Output:&nbsp;<br /></strong>3\n<strong>Explanation</strong>: <br />100 = 10<sup>2</sup> \n6<sup>2</sup> + 8<sup>2</sup> and 1<sup>2</sup> + 3<sup>2</sup> + 4<sup>2</sup> + 5<sup>2</sup> + 7<sup>2</sup> \nHence total 3 possibilities.</span> \n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong>numOfWays()&nbsp;</strong>which takes n and x as input parameters and returns the total number of ways n can be expressed as the sum of xth power of unique natural numbers.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>logn)<br /><strong>Expected Auxiliary Space:</strong> O(n)<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n&nbsp;&lt;= 10<sup>3</sup><br />1 &lt;= x&nbsp;&lt;= 5</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two numbers, `n` and `x`, determine the number of ways `n` can be represented as the sum of the Xth power of unique natural numbers. Return the result modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= n <= 10<sup>3</sup>",
                    "1 <= x <= 5"
                ],
                "testcases": [
                    {
                        "input": "n = 10, x = 2",
                        "output": "1",
                        "explanation": "The only way to express 10 as the sum of squares of unique natural numbers is 1<sup>2</sup> + 3<sup>2</sup>."
                    },
                    {
                        "input": "n = 100, x = 2",
                        "output": "3",
                        "explanation": "There are three ways to express 100 as the sum of squares of unique natural numbers: 10<sup>2</sup>, 6<sup>2</sup> + 8<sup>2</sup>, and 1<sup>2</sup> + 3<sup>2</sup> + 4<sup>2</sup> + 5<sup>2</sup> + 7<sup>2</sup>."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">This problem is similar to subset sum, Try using dynamic programming.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\npublic:\n    //Function to find the number of ways to form the sum.\n    int numOfWays(int n, int x)\n    {\n        //Creating a vector dp of size n+1 to store the number of ways to form each sum.\n        vector<int> dp(n + 1, 0);\n        \n        //Initializing the base case where the sum is 0, which is 1 way.\n        dp[0] = 1;\n        \n        //Setting the value of MOD as 10^9 + 7 for taking modulo while performing operations.\n        int MOD = 1e9 + 7;\n        \n        //Iterating from 1 to n to calculate the number of ways for each sum.\n        for (int i = 1; i <= n; i++)\n        {\n            //Iterating from n to i as we need to go in reverse order to avoid repeated calculations.\n            for (int j = n; j >= i; j--)\n            {\n                //Calculating i raised to the power of x and storing it in y.\n                unsigned long int y = pow(i, x);\n\n                //Checking if the current sum j is greater than or equal to y.\n                if (j >= y)\n                {\n                    //Updating the number of ways to form the sum j by adding the number of ways to form the sum (j-y).\n                    dp[j] = (dp[j] + dp[j - y]) % MOD;\n                }\n            }\n        }\n        \n        //Returning the number of ways to form the sum n.\n        return dp[n];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    // Function to find the number of ways to divide n with powers of x\n    static int numOfWays(int n, int x){\n        // Creating an array to store the number of ways for each index\n        int dp[] = new int[n+1];\n        \n        // Initializing the first element of the array to 1\n        dp[0] = 1;\n        \n        // Modulo value for calculations\n        int mod = 1000000007;\n        \n        // Loop to fill the array\n        for(int i = 1; i <= n; i++){\n            for(int j = n; j >= i; j--){\n                // Calculating the power of x for each index\n                int y = (int)Math.pow(i, x);\n                \n                // Checking if j is greater than or equal to y\n                if(j >= y){\n                    // Updating the number of ways using the formula\n                    dp[j] = (dp[j] + dp[j-y]) % mod;\n                }\n            }\n        }\n        \n        // Returning the number of ways to divide n\n        return dp[n];\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def numOfWays(self, n, x):\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        MOD = int(1e9 + 7)\n        for i in range(1, n + 1):\n            for j in range(n, i - 1, -1):\n                y = i**x\n                if j >= y:\n                    dp[j] = (dp[j] + dp[j - y]) % MOD\n        return dp[n]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}