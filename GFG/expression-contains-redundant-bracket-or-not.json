{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710078,
            "title": "Expression contains redundant bracket or not",
            "titleSlug": "expression-contains-redundant-bracket-or-not",
            "content": "<p><span style=\"font-size: 18px;\">Given a string of balanced expression <strong>str</strong>, find if it contains a redundant parenthesis or not. A set of parenthesis are redundant if the same sub-expression is surrounded by unnecessary or multiple brackets. Return <strong>1</strong> if</span><span style=\"font-size: 18px;\">it contains a redundant parenthesis</span><span style=\"font-size: 18px;\">, else <strong>0</strong>.<br /></span><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;Expression may contain <strong>+ , - ,&nbsp;*,</strong> and<strong> /</strong> operators. Given expression is&nbsp;<strong>valid</strong>&nbsp;and there are&nbsp;<strong>no white</strong>&nbsp;spaces present.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>exp = ((a+b))</span><span style=\"font-size: 18px;\">\n<strong>Output:\n</strong>Yes\n<strong>Explanation:</strong>\n((a+b)) can reduced to (a+b).\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nexp = (a+b+(c+d))</span><span style=\"font-size: 18px;\">\n<strong>Output:</strong>\nNo\n<strong>Explanation:</strong>\n(a+b+(c+d)) doesn't have any redundant or multiple\nbrackets.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your task:<br /></strong></span><span style=\"font-size: 18px;\">You don't have to read input or print anything. Your task is to complete the function <strong>checkRedundancy</strong></span><span style=\"font-size: 18px;\"><strong>()</strong> which takes the string <strong>s</strong> as input and returns <strong>1</strong> if&nbsp;it contains redundant parentheses else <strong>0</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1&lt;=|str|&lt;=10<sup>4</sup></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /></span><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:&nbsp;</strong>O(N)</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a balanced expression string `str` containing operators +, -, *, and /, determine if it contains redundant parentheses. Redundant parentheses are unnecessary brackets surrounding a sub-expression that could be removed without changing the expression's meaning. Return 1 if redundant parentheses exist, otherwise return 0. The given expression is valid and contains no white spaces.",
                "constraints": [
                    "1 <= |str| <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "((a+b))",
                        "output": "1",
                        "explanation": "The expression ((a+b)) can be reduced to (a+b), indicating redundant parentheses."
                    },
                    {
                        "input": "(a+b+(c+d))",
                        "output": "0",
                        "explanation": "The expression (a+b+(c+d)) does not contain any redundant parentheses."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The idea is to use stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "#include <iostream>\n#include <stack>\n#include <string>\n\nusing namespace std;\n\nclass Solution {\n  public:\n    int checkRedundancy(string s) {\n        // Create a stack of characters\n        stack<char> st;\n\n        // Iterate through the given expression\n        for (char ch : s) {\n            // If current character is close parenthesis ')'\n            if (ch == ')') {\n                char top = st.top();\n                st.pop();\n\n                // If immediate pop has open parenthesis '(' duplicate brackets found\n                bool flag = true;\n\n                while (top != '(') {\n                    // Check for operators in expression\n                    if (top == '+' || top == '-' || top == '*' || top == '/') {\n                        flag = false;\n                    }\n\n                    // Fetch top element of stack\n                    top = st.top();\n                    st.pop();\n                }\n\n                // If operators not found\n                if (flag) {\n                    return 1;\n                }\n\n            } else {\n                // Append open parenthesis '(', operators and operands to stack\n                st.push(ch);\n            }\n        }\n        return 0;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution():\r\n\r\n    def checkRedundancy(self, s):\r\n        \r\n        # create a stack of characters\r\n        st = []\r\n    \r\n        # Iterate through the given expression\r\n        for ch in s:\r\n    \r\n            # if current character is close\r\n            # parenthesis ')'\r\n            if (ch == ')'):\r\n                top = st[-1]\r\n                st.pop()\r\n    \r\n                # If immediate pop have open parenthesis\r\n                # '(' duplicate brackets found\r\n                flag = True\r\n    \r\n                while (top != '('):\r\n    \r\n                    # Check for operators in expression\r\n                    if (top == '+' or top == '-' or\r\n                        top == '*' or top == '/'):\r\n                        flag = False\r\n    \r\n                    # Fetch top element of stack\r\n                    top = st[-1]\r\n                    st.pop()\r\n    \r\n                # If operators not found\r\n                if (flag == True):\r\n                    return 1\r\n    \r\n            else:\r\n                st.append(ch) # append open parenthesis '(',\r\n                            # operators and operands to stack\r\n        return 0   \r\n        ",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}