{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704552,
            "title": "Extended Euclidean Algorithm",
            "titleSlug": "extended-euclidean-algorithm3848",
            "content": "<p><span style=\"font-size:18px\">We already know Basic Euclidean Algorithm. Now using the&nbsp;<a href=\"https://www.geeksforgeeks.org/euclidean-algorithms-basic-and-extended/\">Extended Euclidean Algorithm</a>, given a&nbsp;and b calculate the <strong>GCD</strong> and integer coefficients <strong>x, y.</strong>&nbsp;Using the same. x and y must satisfy the equation<strong> </strong></span><strong><span style=\"font-size:18px\">ax + by = gcd(a, b) .</span></strong><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\na = 35\nb = 15\n<strong>Output:</strong>\n5 1 -2</span><span style=\"font-size:18px\">\n<strong>Explanation:</strong>\ngcd(a,b) = 5\n35*1 + 15*(-2) = 5</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\na = 30\nb = 20\n<strong>Output:</strong>\n10 1 -1\n<strong>Explanation:</strong>\ngcd(30,20) = 10\n</span><span style=\"font-size:18px\">30*(1) + 20*(-1) = 10</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>gcd()</strong>&nbsp;which takes&nbsp;an integer <strong>N</strong>&nbsp;as input parameters&nbsp;and returns array of three numbers containing gcd, x, y in the same order.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log max(a,b))<br />\n<strong>Expected Space Complexity:</strong> O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= a,b &lt;= 10<sup>6</sup></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, `a` and `b`, calculate their Greatest Common Divisor (GCD) and find integer coefficients `x` and `y` such that `ax + by = gcd(a, b)` using the Extended Euclidean Algorithm.  Return the GCD, x and y.",
                "constraints": [
                    "1 <= a, b <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "a = 35\nb = 15",
                        "output": "5 1 -2",
                        "explanation": "The GCD of 35 and 15 is 5.  The equation 35 * 1 + 15 * (-2) = 5 is satisfied."
                    },
                    {
                        "input": "a = 30\nb = 20",
                        "output": "10 1 -1",
                        "explanation": "The GCD of 30 and 20 is 10.  The equation 30 * (1) + 20 * (-1) = 10 is satisfied."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Let values of x and y calculated by the recursive call be x<sub>1</sub> and y<sub>1</sub>. x and y are updated using below expressions:</span></p>\n\n<p><span style=\"font-size:18px\">x = y<sub>1</sub> - &lfloor;b/a&rfloor; * x<sub>1</sub><br />\ny = x<sub>1</sub></span></p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\npublic:\n    vector<int> gcd(int a, int b) \n    { \n    \t// Base Case \n    \tvector<int> v;\n    \tif (a == 0) \n    \t{ \n    \t\tv.push_back(b);\n    \t\tv.push_back(0);\n    \t\tv.push_back(1);\n    \t\treturn v;\n    \t} \n    \tvector<int> r = gcd(b%a, a); \n    \t// Update x and y using results of recursive \n    \t// call \n    \tv.push_back(r[0]);\n    \tv.push_back(r[2] - (b/a) * r[1]);\n    \tv.push_back(r[1]);\n        // return the array\n        return v; \n    } \n};\n\n\n\n\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    static int[] gcd(int a,int b)\n    {\n        // Base Case \n    \tint v[] = new int[3];\n    \tif (a == 0) \n    \t{ \n    \t\tv[0] = (b);\n    \t\tv[1] = (0);\n    \t\tv[2] = (1);\n    \t\treturn v;\n    \t} \n    \tint r[] = gcd(b%a, a); \n    \t// Update x and y using results of recursive \n    \t// call \n        v[0] = r[0];\n    \tv[1] = (r[2] - (b/a) * r[1]);\n    \tv[2] = (r[1]);\n        // return the array\n        return v; \n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def gcd(self, a,b):\n        # Base Case \n        v=[]\n        if (a == 0):\n            v.append(b);\n            v.append(0);\n            v.append(1);\n            return v;\n        r = self.gcd(b%a, a); \n        # Update x and y using results of recursive \n        # call \n        v.append(r[0]);\n        v.append(r[2] - (b//a) * r[1]);\n        v.append(r[1]);\n        # return the array\n        return v; ",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number[]}\n*/\n\nclass Solution {\n    //Function to find the GCD of two numbers and the coefficients for the linear combination.\n    gcd(a, b) {\n        if (a === 0) {\n            return [b, 0, 1];\n        }\n        let r = this.gcd(b % a, a);\n        return [r[0], r[2] - Math.floor(b / a) * r[1], r[1]];\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public List<int> gcd(int a, int b)\n    {\n        // Base Case \n        List<int> v = new List<int>();\n        if (a == 0)\n        {\n            v.Add(b);\n            v.Add(0);\n            v.Add(1);\n            return v;\n        }\n        List<int> r = gcd(b % a, a);\n        // Update x and y using results of recursive \n        // call \n        v.Add(r[0]);\n        v.Add(r[2] - (b / a) * r[1]);\n        v.Add(r[1]);\n        // return the array\n        return v;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}