{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703497,
            "title": "Extract Maximum",
            "titleSlug": "extract-maximum2943",
            "content": "<p><span style=\"font-size:18px\">Given a alphanumeric string S, extract maximum numeric value from S.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS = 100klh564abc365bg\n<strong>Output:</strong> 564\n<strong>Explanation:</strong> Maximum numeric value \namong 100, 564 and 365 is 564.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS = abcdefg\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> Return -1 if no numeric \nvalue is present. </span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>extractMaximum()</strong> which takes the string S as input parameters and returns the maximum numeric value. If it is not present in S, return -1.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(|S|)<br />\n<strong>Expected Auxiliary Space: </strong>O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; |S| &le; 10<sup>4</sup><br />\n-1 &le; output value &le; 10<sup>6</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Initialise num=0 and for every time you encounter a consecutive digit use&nbsp;<br />\nnum = num * 10 + (S[i]-&#39;0&#39;);&nbsp;</span></p>\n\n<pre>\n\n&nbsp;</pre>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution\n{\n  public:\n    \n    int extractMaximum(string S) \n    { \n        int num = 0, res = 0, flag =0; \n        for (int i = 0; i<S.length(); i++) \n        { \n            // If a numeric value comes, start converting \n            // it into an integer till there are consecutive \n            // numeric digits \n            if (S[i] >= '0' && S[i] <= '9') \n            {\n                num = num * 10 + (S[i]-'0'); \n                flag = 1; //means that there is a digit present\n            }\n    \n            else\n            { \n                res = max(res, num); \n                num = 0; \n            } \n        } \n        if(flag == 1)\n            return max(res, num); \n        else\n            return -1;\n    } \n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution \n{ \n    static int extractMaximum(String S) \n    { \n        int num = 0, res = 0, flag = 0; \n        for (int i = 0; i<S.length(); i++) \n        { \n            // If a numeric value comes, start converting \n            // it into an integer till there are consecutive \n            // numeric digits \n            if (Character.isDigit(S.charAt(i))) \n            {\n                num = num * 10 + (S.charAt(i)-'0'); \n                flag = 1;\n            }\n            else\n            { \n                res = Math.max(res, num); \n                num = 0; \n            } \n        } \n        if (flag==1)\n            return Math.max(res, num); \n        else\n            return -1;\n    }    \n} \n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to extract the maximum number from the string.\n    def extractMaximum(self,ss): \n        \n        #Initializing variables.\n        num, res, flag = 0, 0, 0\n\n        #Iterating through the string.\n        for i in range(len(ss)): \n\n            #Checking if the character is a digit.\n            if ss[i] >= \"0\" and ss[i] <= \"9\": \n\n                #Constructing the number.\n                num = num * 10 + int(int(ss[i]) - 0) \n                flag = 1\n\n            else: \n                #Updating the maximum number encountered.\n                res = max(res, num) \n                num = 0\n    \n        #returning the maximum number or -1 if no numbers were found.\n        if flag == 1:\n            return max(res, num) \n        else:\n            return -1",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {string} s\n * @return {number}\n*/\n\nclass Solution {\n    extractMaximum(S){\n       let num = 0, res = 0, flag = 0; \n        for (let i = 0; i < S.length; i++) \n        { \n            // If a numeric value comes, start converting \n            // it into an integer till there are consecutive \n            // numeric digits \n            if (S[i] >= '0' && S[i] <= '9') \n            {\n                num = num * 10 + parseInt(S[i]); \n                flag = 1; //means that there is a digit present\n            }\n    \n            else\n            { \n                res = Math.max(res, num); \n                num = 0; \n            } \n        } \n        if(flag === 1)\n            return Math.max(res, num); \n        else\n            return -1;\n    } \n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n  public int extractMaximum(string S) \n  { \n      int num = 0, res = 0, flag =0; \n      for (int i = 0; i<S.Length; i++) \n      { \n          // If a numeric value comes, start converting \n          // it into an integer till there are consecutive \n          // numeric digits \n          if (S[i] >= '0' && S[i] <= '9') \n          {\n              num = num * 10 + (int)(S[i]-'0'); \n              flag = 1; //means that there is a digit present\n          }\n\n          else\n          { \n              res = Math.Max(res, num); \n              num = 0; \n          } \n      } \n      if(flag == 1)\n          return Math.Max(res, num); \n      else\n          return -1;\n  } \n\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}