{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700308,
            "title": "Extreme nodes in alternate order",
            "titleSlug": "extreme-nodes-in-alternate-order",
            "content": "<p><span >You are given a binary tree. You have to return alternating extremes of each level starting from the right extreme. It means you have to return the rightmost node of 1st level then the leftmost of the second level then the rightmost and so on.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:\n&nbsp;\\t</strong>1\n&nbsp;    /  \\\n&nbsp;  2    3<strong>\nOutput: </strong>1 2\n<strong>Explanation: </strong>In level one [1] rightmost is 1 and in level 2 [2, 3] lefmost is 2. <br /></span></pre>\n<pre><span ><strong>Input:</strong><br />\\t2<br />     /  \\<br />   1    3<br />\\t /<br />     4<br /><strong>Output:</strong> [2, 1, 4]<br /><strong>Explanation: </strong>In level one [2] rightmost is 2, In level 2 [1, 3] lefmost is 1 and in level 3 [4] rightmost is 4. </span></pre>\n<p><span ><strong>Expected Time Complexity: </strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n).<br /><br /><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>5</sup><br />1 &le; node-&gt;data &le; 5*10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, return a list of alternating extreme nodes at each level, starting from the rightmost node of the first level. This means returning the rightmost node of the first level, then the leftmost node of the second level, then the rightmost node of the third level, and so on.",
                "constraints": [
                    "The number of nodes in the binary tree is between 1 and 10^5, inclusive.",
                    "The value of each node in the binary tree is between 1 and 5 * 10^5, inclusive."
                ],
                "testcases": [
                    {
                        "input": "   1\n    /  \\\n   2    3",
                        "output": "[1, 2]",
                        "explanation": "At level 1, the rightmost node is 1. At level 2, the nodes are [2, 3], and the leftmost node is 2."
                    },
                    {
                        "input": "2\n     /  \\\n   1    3\n   /\n  4",
                        "output": "[2, 1, 4]",
                        "explanation": "At level 1, the rightmost node is 2. At level 2, the nodes are [1, 3], and the leftmost node is 1. At level 3, the rightmost node is 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The idea is to traverse the tree level by level and take the first and last node of a level in alternating order.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    /* Function to find nodes of extreme corners\n    of each level in alternate order */\n    vector<int> extremeNodes(Node* root) {\n        vector<int> nodes;\n        if (root == NULL)\n            return {};\n\n        // Create a queue and enqueue left and right\n        // children of root\n        queue<Node*> q;\n        q.push(root);\n\n        // flag to indicate whether leftmost node or\n        // the rightmost node has to be printed\n        bool flag = false;\n        while (!q.empty()) {\n            // nodeCount indicates number of nodes\n            // at current level.\n            int nodeCount = q.size();\n            int n = nodeCount;\n\n            // Dequeue all nodes of current level\n            // and Enqueue all nodes of next level\n            while (n--) {\n                Node* curr = q.front();\n\n                // Enqueue left child\n                if (curr->left)\n                    q.push(curr->left);\n\n                // Enqueue right child\n                if (curr->right)\n                    q.push(curr->right);\n\n                // Dequeue node\n                q.pop();\n\n                // if flag is true, print leftmost node\n                if (flag && n == nodeCount - 1)\n                    nodes.push_back(curr->data);\n\n                // if flag is false, print rightmost node\n                if (!flag && n == 0)\n                    nodes.push_back(curr->data);\n            }\n            // invert flag for next level\n            flag = !flag;\n        }\n        return nodes;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// This Code is Developed by: Saksham Raj Seth\n\nclass Solution {\n    public ArrayList<Integer> extremeNodes(Node root) {\n        // Initializing a queue to perform level order traversal\n        Queue<Node> q = new LinkedList<Node>();\n\n        // Initializing an ArrayList to store extreme nodes\n        ArrayList<Integer> nodes = new ArrayList<Integer>();\n\n        // Emptying the queue before adding the root node\n        while (!q.isEmpty()) {\n            q.poll();\n        }\n\n        // Adding the root node to the queue\n        q.add(root);\n\n        // Flag to keep track of the extreme position\n        boolean flag = false;\n\n        // Performing level order traversal\n        try {\n            while (!q.isEmpty()) {\n                // Getting the size of the current level\n                int nodeCount = q.size();\n                int n = nodeCount;\n\n                // Traversing the current level\n                while (n-- > 0) {\n                    // Getting the current node\n                    Node curr = q.peek();\n\n                    // Adding the children of the current node to the queue\n                    if (curr.left != null) q.add(curr.left);\n                    if (curr.right != null) q.add(curr.right);\n\n                    // Removing the current node from the queue\n                    q.poll();\n\n                    // Checking if the current node is an extreme node and adding it to\n                    // the list\n                    if (flag && n == nodeCount - 1) nodes.add(curr.data);\n                    if (!flag && n == 0) nodes.add(curr.data);\n                }\n                // Flipping the flag to switch between extreme positions\n                flag = !flag;\n            }\n        }\n        // Handling NullPointerException if the root is null\n        catch (NullPointerException ex) {\n        }\n\n        // Returning the list of extreme nodes\n        return nodes;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import sys\n\nsys.setrecursionlimit(10000)\n\n\nclass Solution:\n    #Function to return the extreme nodes of a binary tree.\n    def extremeNodes(self, root):\n        #initializing an empty list to store the extreme nodes.\n        nodes = []\n\n        #if the root is None, return the empty list.\n        if root is None:\n            return nodes\n\n        #creating a queue to perform level order traversal.\n        q = []\n\n        #appending the root node to the queue.\n        q.append(root)\n\n        #flag to determine if we need to append the rightmost or leftmost node.\n        flag = False\n\n        #performing level order traversal.\n        while (q != []):\n\n            #finding the number of nodes in the current level.\n            nc = len(q)\n            n = nc\n\n            #iterating through all the nodes of the current level.\n            while (n != 0):\n                n -= 1\n\n                #getting the current node from the front of the queue.\n                curr = q[0]\n\n                #appending the left and right child of the current node to the queue.\n                if curr.left is not None:\n                    q.append(curr.left)\n                if curr.right is not None:\n                    q.append(curr.right)\n\n                #removing the current node from the queue.\n                q.pop(0)\n\n                #appending the extreme node based on the current level and flag value.\n                if flag and n == nc - 1:\n                    nodes.append(curr.data)\n                if not flag and n == 0:\n                    nodes.append(curr.data)\n\n            #flipping the flag value to alternate between leftmost and rightmost nodes.\n            flag = not flag\n\n        #returning the list of extreme nodes.\n        return nodes\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/*\nclass Node\n{\n    constructor(x){\n        this.data=x;\n        this.left=null;\n        this.right=null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n * @return {number[]}\n */\nclass Solution {\n    extremeNodes(root) {\n        let nodes = [];\n        if (root == null) return nodes;\n\n        // Create a queue and enqueue left and right\n        // children of root\n        let q = [];\n        q.push(root);\n\n        // flag to indicate whether leftmost node or\n        // the rightmost node has to be printed\n        let flag = false;\n        while (q.length > 0) {\n            // nodeCount indicates number of nodes\n            // at current level.\n            let nodeCount = q.length;\n            let n = nodeCount;\n\n            // Dequeue all nodes of current level\n            // and Enqueue all nodes of next level\n            while (n > 0) {\n                let curr = q[0];\n\n                // Enqueue left child\n                if (curr.left) q.push(curr.left);\n\n                // Enqueue right child\n                if (curr.right) q.push(curr.right);\n\n                // Dequeue node\n                q.shift();\n\n                // if flag is true, print leftmost node\n                if (flag && n == nodeCount) nodes.push(curr.data);\n\n                // if flag is false, print rightmost node\n                if (!flag && n == 1) nodes.push(curr.data);\n\n                n--;\n            }\n            // invert flag for next level\n            flag = !flag;\n        }\n        return nodes;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}