{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703047,
            "title": "Facing the sun",
            "titleSlug": "facing-the-sun2126",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>height</strong> representing the heights of buildings. You have to count the buildings that will see the sunrise (Assume the sun rises on the side of the array starting point).<br /><em>Note:</em> The height of the building should be strictly greater than the height of the buildings left in order to see the sun.</span><br /><span style=\"font-size: 18px;\"><img style=\"height: 427px; width: 596px;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/Building.png\" alt=\"\" /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> height = [7, 4, 8, 2, 9]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> As 7 is the first element, it can see the sunrise. 4 can't see the sunrise as 7 is hiding it. 8 can see. 2 can't see the sunrise. 9 also can see<br />the sunrise.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> height = [2, 3, 4, 5]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> As 2 is the first element, it can see the sunrise.  3 can see the sunrise as 2 is not hiding it. Same for 4 and 5, they also can see the sunrise.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; height.size() &le; 10<sup>6</sup><br />1 &le; height<sub>i</sub> &le; 10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `height` representing the heights of buildings, determine the number of buildings that have a direct view of the sunrise. Assume the sun rises from the left side of the array. A building can see the sunrise if its height is strictly greater than all the buildings to its left.",
                "constraints": [
                    "1 <= height.size() <= 10^6",
                    "1 <= height[i] <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "[7, 4, 8, 2, 9]",
                        "output": "3",
                        "explanation": "The buildings with heights 7, 8, and 9 can see the sunrise. 7 is the first building. 8 is taller than all buildings to its left. 9 is taller than all buildings to its left.  4 and 2 are blocked by taller buildings to the left."
                    },
                    {
                        "input": "[2, 3, 4, 5]",
                        "output": "4",
                        "explanation": "All buildings can see the sunrise because each building is taller than all buildings to its left."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">It can be easily observed that only the maximum element found so far will see the sunlight</span><br /><span style=\"font-size: 14pt;\">i.e. curr_max will see the sunlight and then only the element greater than curr_max will see the sunlight. We traverse the given array from left to right. We keep track of the maximum element seen so far. Whenever an element becomes more than the current max, increment the result and update the current max.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Returns count buildings that can see sunlight\n    int countBuildings(vector<int> &height) {\n        // Initialize result (Note that first building\n        // always sees sunlight)\n        int n = height.size();\n        int count = 1;\n        // Start traversing element\n        int curr_max = height[0];\n        for (int i = 1; i < n; i++) {\n            // If curr_element is maximum,\n            // update maximum and increment count\n            if (height[i] > curr_max) {\n                count++;\n                curr_max = height[i];\n            }\n        }\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Returns count buildings that can see sunlight\n    public int countBuildings(int[] height) {\n        // Initialize result (Note that first building\n        // always sees sunlight)\n        int n = height.length;\n        int count = 1;\n        // Start traversing element\n        int curr_max = height[0];\n        for (int i = 1; i < n; i++) {\n            // If curr_element is maximum,\n            // update maximum and increment count\n            if (height[i] > curr_max) {\n                count++;\n                curr_max = height[i];\n            }\n        }\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Returns count buildings that can see sunlight\n    def countBuildings(self, height):\n        # Initialize result (Note that first building\n        # always sees sunlight)\n        n = len(height)\n        count = 1\n        # Start traversing element\n        curr_max = height[0]\n        for i in range(1, n):\n            # If curr_element is maximum,\n            # update maximum and increment count\n            if height[i] > curr_max:\n                count += 1\n                curr_max = height[i]\n        return count\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    // Returns count buildings that can see sunlight\n    countBuildings(height) {\n        // Initialize result (Note that first building\n        // always sees sunlight)\n        let n = height.length;\n        let count = 1;\n        // Start traversing element\n        let curr_max = height[0];\n        for (let i = 1; i < n; i++) {\n            // If curr_element is maximum,\n            // update maximum and increment count\n            if (height[i] > curr_max) {\n                count++;\n                curr_max = height[i];\n            }\n        }\n        return count;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}