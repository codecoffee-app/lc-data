{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 891233,
            "title": "Factorial Zero Count",
            "titleSlug": "factorial-zero-count",
            "content": "<p><span >Given an integer <strong>n</strong>, you need to find all the positive integers whose factorial ends with <strong>n</strong> zeros.</span></p>\n<p><span ><strong>Examples:<br /></strong></span></p>\n<pre><span ><strong>Input: </strong>n = 1\n<strong>Output: </strong>[5, 6, 7, 8, 9]</span><br /><span ><strong>Explanation: </strong>Here, 5! = 120, 6! = 720, 7! = 5040, 8! = 40320 and 9! = 362880. Now 10! = 3628800, so there are only 5 positive integers whose factorial ends with 1 zeros.</span></pre>\n<pre><span ><strong >Input</strong><span >: n = 2\n</span><strong >Output: </strong><span >[10, 11, 12, 13, 14]<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><span style=\"font-family: 'andale mono', monospace;\"><span style=\"font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, sans-serif;\"><span style=\"font-size: 18.6667px;\"><strong>Explanation:</strong></span></span></span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 14pt;\">  </strong></span><span >10, 11, 12, 13 and 14 have 2 zeros at the end of their factorial.</span></span></pre>\n<p><span ><strong>Constraints:<br /></strong>1 &le; n &le; 2*10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer n, find all positive integers whose factorial ends with exactly n trailing zeros.",
                "constraints": [
                    "1 <= n <= 2 * 10^5"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "[5, 6, 7, 8, 9]",
                        "explanation": "The factorials of 5, 6, 7, 8, and 9 each end with one trailing zero. For example, 5! = 120, 6! = 720, and so on. 10! has two trailing zeros, so integers greater than or equal to 10 are not valid."
                    },
                    {
                        "input": "2",
                        "output": "[10, 11, 12, 13, 14]",
                        "explanation": "The factorials of 10, 11, 12, 13, and 14 each end with two trailing zeros. 15! will have 3 trailing zeros."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate trailing zeros\n    int trailingZeroes(int n) {\n        int cnt = 0;\n        while (n > 0) {\n            n /= 5;\n            cnt += n;\n        }\n        return cnt;\n    }\n\n    vector<int> binarySearch(int n) {\n        int low = 0;\n        int high = 1e6;\n        while (low < high) {\n            int mid = (low + high) / 2;\n            int count = trailingZeroes(mid);\n            if (count < n)\n                low = mid + 1;\n            else\n                high = mid;\n        }\n\n        // push all numbers after low with n\n        // trailing zeros.\n        vector<int> result;\n        while (trailingZeroes(low) == n) {\n            result.push_back(low);\n            low++;\n        }\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to calculate trailing zeros\n    public int trailingZeroes(int n) {\n        int count = 0;\n        while (n > 0) {\n            n /= 5;\n            count += n;\n        }\n        return count;\n    }\n\n    public List<Integer> binarySearch(int n) {\n        int low = 0;\n        int high = 1000000;\n        while (low < high) {\n            int mid = (low + high) / 2;\n            int count = trailingZeroes(mid);\n            if (count < n)\n                low = mid + 1;\n            else\n                high = mid;\n        }\n\n        // Collect all numbers after low with n trailing zeros.\n        List<Integer> result = new ArrayList<>();\n        while (trailingZeroes(low) == n) {\n            result.add(low);\n            low++;\n        }\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to calculate trailing zeros\n    def trailing_zeroes(self, n):\n        count = 0\n        while n > 0:\n            n //= 5\n            count += n\n        return count\n\n    def binary_search(self, n):\n        low, high = 0, 10**6\n        while low < high:\n            mid = (low + high) // 2\n            count = self.trailing_zeroes(mid)\n            if count < n:\n                low = mid + 1\n            else:\n                high = mid\n\n        # Collect all numbers after low with n trailing zeros.\n        result = []\n        while self.trailing_zeroes(low) == n:\n            result.append(low)\n            low += 1\n\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to calculate trailing zeros\n    trailingZeroes(n) {\n        let count = 0;\n        while (n > 0) {\n            n = Math.floor(n / 5);\n            count += n;\n        }\n        return count;\n    }\n\n    binarySearch(n) {\n        let low = 0, high = 1e6;\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            let count = this.trailingZeroes(mid);\n            if (count < n)\n                low = mid + 1;\n            else\n                high = mid;\n        }\n\n        // Collect all numbers after low with n trailing zeros.\n        let result = [];\n        while (this.trailingZeroes(low) === n) {\n            result.push(low);\n            low++;\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}