{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703114,
            "title": "Factorials of large numbers",
            "titleSlug": "factorials-of-large-numbers2508",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer <strong>n,</strong> find its factorial. Return a list of integers<strong> </strong>denoting the digits that make up the factorial of n.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5\n<strong>Output: </strong>[1, 2, 0]\n<strong>Explanation</strong>: 5! = 1*2*3*4*5 = 120</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 10\n<strong>Output: </strong>[3, 6, 2, 8, 8, 0, 0]\n<strong>Explanation</strong>: 10! = 1*2*3*4*5*6*7*8*9*10 = 3628800<br /></span></pre>\n<pre><span ><strong>Input: </strong>n = 1\n<strong>Output: </strong>[1]\n<strong>Explanation</strong>: 1! = 1 </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong>:<br />1 &le; n &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Calculate the factorial of a given integer 'n' and return the result as a list of its individual digits.",
                "constraints": [
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "[1, 2, 0]",
                        "explanation": "The factorial of 5 (5!) is 1 * 2 * 3 * 4 * 5 = 120. Represented as a list of digits, the output is [1, 2, 0]."
                    },
                    {
                        "input": "10",
                        "output": "[3, 6, 2, 8, 8, 0, 0]",
                        "explanation": "The factorial of 10 (10!) is 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 = 3628800.  The digit representation is [3, 6, 2, 8, 8, 0, 0]."
                    },
                    {
                        "input": "1",
                        "output": "[1]",
                        "explanation": "The factorial of 1 (1!) is 1. The digit representation is [1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a list to store each digit of the result, handling carry-over with each multiplication to manage large numbers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley",
            "microsoft",
            "samsung",
            "makemytrip",
            "maq-software",
            "adobe",
            "philips",
            "browserstack"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to multiply a number with a vector.\n    void multiply(int n, vector<int>& number) {\n        int carry = 0;\n        for (int i = 0; i < number.size(); i++) {\n            int num = n * number[i];\n            number[i] = (char)((num + carry) % 10);\n            carry = (num + carry) / 10;\n        }\n        // Adding remaining carry digits to the vector.\n        while (carry) {\n            number.push_back(carry % 10);\n            carry /= 10;\n        }\n    }\n\n    // Function to calculate factorial of a number.\n    vector<int> factorial(int n) {\n        vector<int> number;\n        number.push_back(1);\n        // Multiplying number with all numbers from 2 to N.\n        for (int i = 2; i <= n; i++)\n            multiply(i, number);\n        // Reversing the vector to get the correct factorial number.\n        reverse(number.begin(), number.end());\n        return number;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Method to calculate the factorial of a number n\n    public ArrayList<Integer> factorial(int n) {\n        // ArrayList to store the result of the factorial\n        ArrayList<Integer> number = new ArrayList<>();\n        // Initializing the result with 1 (since 0! = 1 and 1! = 1)\n        number.add(1);\n\n        // Loop from 2 to n, multiplying the current result by i at each step\n        for (int i = 2; i <= n; i++) {\n            multiply(i, number);\n        }\n\n        Collections.reverse(number);\n        return number; // Return the factorial as a list of digits\n    }\n\n    // Helper method to multiply the current result by n\n    private void multiply(int n, ArrayList<Integer> number) {\n        int carry = 0; // Initialize carry to handle values greater than 9\n\n        // Traverse each digit in the current result\n        for (int i = 0; i < number.size(); i++) {\n            // Multiply n with the current digit\n            int num = n * number.get(i);\n            // Set the last digit of (num + carry) to current position\n            number.set(i, (num + carry) % 10);\n            carry = (num + carry) / 10;\n        }\n\n        // Handle remaining carry, if any, by adding additional digits to the result\n        while (carry > 0) {\n            // Add the last digit of carry to the result\n            number.add(carry % 10);\n            // Update carry by removing the last digit\n            carry /= 10;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    # Method to calculate the factorial of a number n\n    def factorial(self, n):\n        number = [1]  # List to store the result of the factorial as digits\n\n        # Loop from 2 to n, multiplying the current result by each i\n        for i in range(2, n + 1):\n            # Call multiply method to perform i * current result\n            self.multiply(i, number)\n\n\n# Reverse the result to get the most significant digit at the start\n        number.reverse()\n        return number  # Return the factorial as a list of digits\n\n    # Helper method to multiply the current result by n\n    def multiply(self, n, number):\n        carry = 0  # Initialize carry to handle values greater than 9\n\n        # Traverse each digit in the current result\n        for i in range(len(number)):\n            num = n * number[i]\n            # Set the last digit of (num + carry) to the current position\n            number[i] = (num + carry) % 10\n            # Calculate new carry for the next position\n            carry = (num + carry) // 10\n\n        # Handle remaining carry, if any, by adding additional digits to the result\n        while carry > 0:\n            # Add the last digit of carry to the result\n            number.append(carry % 10)\n            # Update carry by removing the last digit\n            carry //= 10\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function template for C#\n\nclass Solution {\n    // Complete this function\n    public List<int> factorial(int n) {\n        List<int> number = new List<int>();\n        number.Add(1);\n        // Multiplying number with all numbers from 2 to N.\n        for (int i = 2; i <= n; i++) multiply(i, number);\n        // Reversing the list to get the correct factorial number.\n        number.Reverse();\n        return number;\n    }\n\n    // Function to multiply a number with a list.\n    void multiply(int n, List<int> number) {\n        int carry = 0;\n        for (int i = 0; i < number.Count; i++) {\n            int num = n * number[i];\n            number[i] = (num + carry) % 10;\n            carry = (num + carry) / 10;\n        }\n        // Adding remaining carry digits to the list.\n        while (carry != 0) {\n            number.Add(carry % 10);\n            carry /= 10;\n        }\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    // Method to calculate the factorial of a number n\n    factorial(n) {\n        let number = [ 1 ]; // Array to store the factorial result as digits\n\n        // Loop from 2 to n, multiplying the current result by each i\n        for (let i = 2; i <= n; i++) {\n            // Call multiply to update result with i * current result\n            this.multiply(i, number);\n        }\n\n        number.reverse();\n        return number; // Return the factorial as an array of digits\n    }\n\n    // Helper method to multiply the current result by n\n    multiply(n, number) {\n        let carry = 0; // Initialize carry to handle values greater than 9\n\n        // Traverse each digit in the current result\n        for (let i = 0; i < number.length; i++) {\n            let num = n * number[i]; // Multiply n with the current digit\n            // Set the last digit of (num + carry) at the current position\n            number[i] = (num + carry) % 10;\n            // / Calculate new carry for the next position\n            carry = Math.floor((num + carry) / 10);\n        }\n\n        // Handle remaining carry, if any, by adding additional digits to the result\n        while (carry) {\n            // Add the last digit of carry to the result\n            number.push(carry % 10);\n            carry = Math.floor(carry / 10); // Update carry by removing the last digit\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}