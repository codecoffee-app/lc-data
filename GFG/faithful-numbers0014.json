{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704207,
            "title": "Faithful Numbers",
            "titleSlug": "faithful-numbers0014",
            "content": "<p><span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\">A number is called faithful if you can write it as the sum of distinct powers of 7.&nbsp;</span><br />\n<span style=\"font-family:arial,helvetica,sans-serif\"><strong>e.g.,&nbsp;</strong> 2457 = 7 + 7<sup>2</sup> + 7<sup>4 .&nbsp;</sup></span><span style=\"font-family:arial,helvetica,sans-serif\">If we order all the faithful numbers, we get the sequence 1 = 7<sup>0</sup>, 7 = 7<sup>1</sup>, 8 = 7<sup>0</sup> + 7<sup>1</sup>, 49 = 7<sup>2</sup>, 50 = 7<sup>0</sup> + 7<sup>2</sup> . . . and so on.</span><br />\n<span style=\"font-family:arial,helvetica,sans-serif\">Given some value of <strong>N</strong>, you have to find the <strong>N&#39;th</strong> faithful number.</span></span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\nN =</strong> 3</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">8</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">8 is the 3rd Faithful number.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\nN =</strong> 7</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">57</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">57 is the 7th Faithful number.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>nthFaithfulNum()</strong> which takes an Integer N as input and returns the answer.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log(N))<br />\n<strong>Expected Auxiliary Space:</strong> O(log(N))</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Express the number in its base 2 representation. And use the powers of 7 for the bits of the number which are set. For Example- (5)<sub>10</sub> = (101)<sub>2</sub>. Therefore, the 5th faithful number will be 7<sup>2</sup>+7<sup>0</sup> = 50.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    //Array to store powers of 7\n    long long powers_7[25];\n    \n    //Function to precompute powers of 7\n    void pc()\n    {\n        //Initializing the first power of 7\n        powers_7[0]=1;\n        \n        //Calculating powers of 7 using previous powers\n        for(int i = 1; i<=23; i++)\n            powers_7[i]=7*powers_7[i-1]; \n    }\n    \n    //Function to find the Nth faithful number\n    long long nthFaithfulNum(int N) {\n        //Precomputing powers of 7\n        pc();\n        \n        //Array to store the binary representation of N\n        int a[30] = {0};\n        int i = 0;\n        \n        int m = N;\n        \n        //Converting N to binary representation\n        while(m>0)\n        {\n            a[i++] = m%2;\n            m/=2;\n        }\n        \n        //Variable to store the sum of faithful numbers\n        long long sum = 0;\n        \n        //Calculating the sum of powers of 7 based on the binary representation of N\n        for(int j = i-1; j>=0; j--)\n        {\n            //Adding the power of 7 corresponding to 1 in the binary representation\n            if(a[j]==1)\n                sum += powers_7[j];\n        }\n        \n        //Returning the sum of faithful numbers\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution{\n    nthFaithfulNum(n){\n        let powers_7 = [];\n        powers_7[0]=1;\n        for(let i = 1; i<=23; i++){\n            powers_7[i]=7*powers_7[i-1]; \n        }\n        \n        let a = [];\n        let i =0;\n        \n        let m = n;\n        \n        while(m>0){\n            a[i++] = m%2;\n            m=Math.floor(m/2);\n        }\n        \n        let sum = 0;\n        \n        for(let j = i-1; j>=0; j--){\n            if(a[j]==1){\n                sum += powers_7[j];\n            }\n        }\n        \n        return sum;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Array to store powers of 7\n    long[] powers_7 = new long[25];\n\n    //Function to precompute powers of 7\n    void pc()\n    {\n        // Initializing the first power of 7\n        powers_7[0] = 1;\n\n        // Calculating powers of 7\n        for (int i = 1; i <= 23; i++)\n        {\n            powers_7[i] = 7 * powers_7[i - 1];\n        }\n    }\n\n    //Function to find the Nth faithful number\n    public long nthFaithfulNum(int N)\n    {\n        // Precomputing powers of 7\n        pc();\n\n        // Array to store the binary representation of N\n        long[] a = new long[30];\n        int i = 0;\n\n        long m = N;\n\n        // Converting N to binary representation\n        while (m > 0)\n        {\n            a[i++] = m % 2;\n            m /= 2;\n        }\n\n        // Variable to store the sum of faithful numbers\n        long sum = 0;\n\n        // Calculating the sum of powers of 7 based on the binary representation of N\n        for (int j = i - 1; j >= 0; j--)\n        {\n            // Adding the power of 7 corresponding to 1 in the binary representation\n            if (a[j] == 1)\n            {\n                sum += powers_7[j];\n            }\n        }\n\n        // Returning the sum of faithful numbers\n        return sum;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}