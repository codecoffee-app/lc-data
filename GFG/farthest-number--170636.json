{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709944,
            "title": "Farthest number",
            "titleSlug": "farthest-number--170636",
            "content": "<p><span style=\"font-size: 18px;\">Given an array<strong> arr[]</strong> of size <strong>n</strong>. For every element in the array, your task is to find the <strong>index</strong> of the <strong>farthest element</strong> in the array to the <strong>right</strong> which is <strong>smaller than</strong> the current element. If no such number exists then print&nbsp;<strong>-1</strong>.</span><br /><strong><span style=\"font-size: 18px;\">Note: </span></strong><span style=\"font-size: 18px;\">0 based indexing is followed.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n </span><span style=\"font-size: 18px;\">= 5, a</span><span style=\"font-size: 18px;\">rr[] = [3, 1, 5, 2, 4]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> [</span><span style=\"font-size: 18px;\">3, -1, 4, -1, -1]</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span> </strong><span style=\"font-size: 18px;\">arr[3] is the farthest smallest element to the right of arr[0], arr[4] is the farthest smallest element to the right of arr[2].\nAnd for the rest of the elements, there is no smaller element to their right.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n </span><span style=\"font-size: 18px;\">= 5, </span><span style=\"font-size: 18px;\">arr[] = [1, 2, 3, 4, 0]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> [</span><span style=\"font-size: 18px;\">4, 4, 4, 4, -1]<br /><strong>Explanation:</strong> arr[4] is the farthest smallest element to the right for arr[0], arr[1], arr[2] and arr[3]. And for arr[4] there is no smaller element to the right.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1 </span> <span style=\"font-size: 18px;\">&le; n</span> <span style=\"font-size: 18px;\">&le; </span> <span style=\"font-size: 18px;\">10<sup>5</sup><br />0</span> <span style=\"font-size: 18px;\">&le; a</span><span style=\"font-size: 18px;\">rr[i]</span>&nbsp;<span style=\"font-size: 18px;\">&le; </span> <span style=\"font-size: 18px;\">10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `n`, for each element in the array, find the index of the farthest element to its right that is smaller than the current element. If no such element exists, the index should be -1. Indexing is 0-based.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 5, arr = [3, 1, 5, 2, 4]",
                        "output": "[3, -1, 4, -1, -1]",
                        "explanation": "For the first element (3), the farthest smaller element to the right is 2, which is at index 3. For the second element (1), there is no smaller element to the right. For the third element (5), the farthest smaller element to the right is 4, which is at index 4. The last two elements don't have any smaller elements to the right."
                    },
                    {
                        "input": "n = 5, arr = [1, 2, 3, 4, 0]",
                        "output": "[4, 4, 4, 4, -1]",
                        "explanation": "For the first four elements (1, 2, 3, 4), the farthest smaller element to the right is 0, which is at index 4. The last element (0) has no smaller element to the right."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Binary serach to find the rightmost smallest element using Suffix minimum array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to find the farthest number for each element in the array\n    vector<int> farNumber(int n, vector<int> &arr) {\n        vector<int> answer; // vector to store the farthest number for each element\n\n        int suffix_min[n]; // array to store the minimum element suffix from each index\n\n        // iterating from right to left to fill the suffix_min array\n        for (int i = n - 1; i >= 0; i--) {\n            suffix_min[i] = arr[i];\n            // comparing the current element with the element next to it,\n            // to get the minimum element in the suffix\n            if (i + 1 < n)\n                suffix_min[i] = min(suffix_min[i], suffix_min[i + 1]);\n        }\n\n        // iterating over the array to find the farthest number for each element\n        for (int i = 0; i < n; i++) {\n            int l = i + 1;\n            int r = n - 1;\n            int x = -1;\n\n            // applying binary search to find the farthest element\n            while (l <= r) {\n                int mid = (l + r) / 2;\n                if (suffix_min[mid] < arr[i]) {\n                    x = mid;\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n            answer.push_back(x);\n        }\n        return answer; // returning the vector with farthest numbers\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int[] farNumber(int n, int[] arr) {\n\n        int[] answer = new int[n];\n\n        // To store minimum element\n        // in the range i to n\n        int[] suffix_min = new int[n];\n\n        suffix_min[n - 1] = arr[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            suffix_min[i] = Math.min(suffix_min[i + 1], arr[i]);\n        }\n\n        for (int i = 0; i < n; i++) {\n            int low = i + 1, high = n - 1, ans = -1;\n\n            while (low <= high) {\n                int mid = (low + high) / 2;\n\n                // If currnet element in the suffix_min\n                // is less than a[i] then move right\n                if (suffix_min[mid] < arr[i]) {\n                    ans = mid;\n                    low = mid + 1;\n                } else\n                    high = mid - 1;\n            }\n\n            answer[i] = ans;\n        }\n        return answer;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def farNumber(self, n, arr):\n        answer = []\n        suffix_min = [0 for i in range(n)]\n        suffix_min[n - 1] = arr[n - 1]\n        for i in range(n - 2, -1, -1):\n            suffix_min[i] = min(suffix_min[i + 1], arr[i])\n\n        for i in range(n):\n            low = i + 1\n            high = n - 1\n            ans = -1\n\n            while (low <= high):\n                mid = (low + high) // 2\n\n                # If currnet element in the suffix_min\n                # is less than a[i] then move right\n                if (suffix_min[mid] < arr[i]):\n                    ans = mid\n                    low = mid + 1\n                else:\n                    high = mid - 1\n\n            # Print the required answer\n            answer.append(ans)\n        return answer\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Function to find the farthest number for each element in the array\n    public List<int> farNumber(int n, List<int> arr) {\n        List<int> answer =\n            new List<int>(); // list to store the farthest number for each element\n\n        int[] suffix_min =\n            new int[n]; // array to store the minimum element suffix from each index\n\n        // iterating from right to left to fill the suffix_min array\n        for (int i = n - 1; i >= 0; i--) {\n            suffix_min[i] = arr[i];\n            // comparing the current element with the element next to it,\n            // to get the minimum element in the suffix\n            if (i + 1 < n) suffix_min[i] = Math.Min(suffix_min[i], suffix_min[i + 1]);\n        }\n\n        // iterating over the array to find the farthest number for each element\n        for (int i = 0; i < n; i++) {\n            int l = i + 1;\n            int r = n - 1;\n            int x = -1;\n\n            // applying binary search to find the farthest element\n            while (l <= r) {\n                int mid = (l + r) / 2;\n                if (suffix_min[mid] < arr[i]) {\n                    x = mid;\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n            answer.Add(x);\n        }\n\n        return answer; // returning the list with farthest numbers\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number} N\n * @param {number[]} Arr\n * @returns {number[]}\n */\n\nclass Solution {\n    // Function to find the first number which is smaller than the current element.\n    farNumber(n, arr) {\n        let answer = [];\n        let suffix_min = [];\n        suffix_min[n - 1] = arr[n - 1];\n        for (let i = n - 2; i >= 0; i--) {\n            suffix_min[i] = Math.min(suffix_min[i + 1], arr[i]);\n        }\n\n        for (let i = 0; i < n; i++) {\n            let low = i + 1;\n            let high = n - 1;\n            let ans = -1;\n\n            while (low <= high) {\n                let mid = Math.floor((low + high) / 2);\n\n                // If current element in the suffix_min\n                // is less than Arr[i] then move right\n                if (suffix_min[mid] < arr[i]) {\n                    ans = mid;\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n\n            // Push the required answer to the answer array\n            answer.push(ans);\n        }\n        return answer;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}