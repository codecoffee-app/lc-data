{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712058,
            "title": "Fibonacci series up to Nth term",
            "titleSlug": "fibonacci-series-up-to-nth-term",
            "content": "<p><span >You are given an integer <strong>n</strong>, return the fibonacci series till the <strong>nth</strong>(0-based indexing) term. Since the terms can become very large return the terms <strong>modulo 10<sup>9</sup>+7</strong>.</span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>Input:\n</strong>n = 5<strong>\nOutput:\n</strong>0 1 1 2 3 5\n<strong>Explanation:</strong>\n0 1 1 2 3 5 is the Fibonacci series up to the 5th term.</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input:\n</strong>n = 10<strong>\nOutput:\n</strong>0 1 1 2 3 5 8 13 21 34 55\n<strong>Explanation:</strong>\n0 1 1 2 3 5 8 13 21 34 55 is the Fibonacci series up to the 10th term.</span></pre>\n<p><span ><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>Series()&nbsp;</strong>which takes an Integer <strong>n</strong> as input and returns a Fibonacci series up to the <strong>nth</strong> term.</span></p>\n<p><span ><strong>Expected Time Complexity: </strong>O(n)</span><br /><span ><strong>Expected Space Complexity: </strong>O(n)</span></p>\n<p><span ><strong>Constraint:</strong></span><br /><span >1 &lt;= n &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n`, generate the Fibonacci series up to the `nth` term (0-based indexing). Since the terms can be very large, return the terms modulo 10<sup>9</sup>+7.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "0 1 1 2 3 5",
                        "explanation": "The Fibonacci series up to the 5th term (0-based index) is 0, 1, 1, 2, 3, 5."
                    },
                    {
                        "input": "10",
                        "output": "0 1 1 2 3 5 8 13 21 34",
                        "explanation": "The Fibonacci series up to the 10th term (0-based index) is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use dynamic programming to find each term.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Fibonacci",
                "slug": "fibonacci"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    vector<int> Series(int N) {\r\n        if (N == 0) {\r\n            return {0};\r\n        }\r\n        if (N == 1) {\r\n            return {0, 1};\r\n        }\r\n        int mod=1e9+7;\r\n        vector<int> fib(N + 1);\r\n        fib[0] = 0;\r\n        fib[1] = 1;\r\n        for (int i = 2; i <= N; i++) {\r\n            fib[i] = (fib[i - 1] + fib[i - 2])%mod;\r\n        }\r\n\r\n        return fib;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\nclass Solution {\r\n\r\n    int[] Series(int n) {\r\n        if (n == 0) {\r\n            return new int[]{0};\r\n        }\r\n        if (n == 1) {\r\n            return new int[]{0, 1};\r\n        }\r\n        int mod = 1000000007;\r\n        int[] fib = new int[n + 1];\r\n        fib[0] = 0;\r\n        fib[1] = 1;\r\n        for (int i = 2; i <= n; i++) {\r\n            fib[i] = (fib[i - 1] + fib[i - 2]) % mod;\r\n        }\r\n\r\n        return fib;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\r\n    def series(self, n):\r\n        if n == 0:\r\n            return [0]\r\n        if n == 1:\r\n            return [0, 1]\r\n        mod = 10**9 + 7\r\n        fib = [0] * (n + 1)\r\n        fib[0] = 0\r\n        fib[1] = 1\r\n        for i in range(2, n + 1):\r\n            fib[i] = (fib[i - 1] + fib[i - 2]) % mod\r\n        return fib\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}