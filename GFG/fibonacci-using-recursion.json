{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701400,
            "title": "Fibonacci Using Recursion",
            "titleSlug": "fibonacci-using-recursion",
            "content": "<p><span style=\"font-size: 18px;\">You are given a number <strong>n</strong>. You need to find<strong> n<sup>th</sup></strong> Fibonacci number.<br />F(n)=F(n-1)+F(n-2); where F(1)=1 and F(2)=1</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 1\n<strong>Output: </strong>1<strong>\nExplanation: </strong>The first fibonacci number is 1\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 20\n<strong>Output: </strong>6765<strong>\nExplanation: </strong>The 20th fibonacci number is 6765</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Constraints: </span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 20</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, determine the `n`th Fibonacci number. The Fibonacci sequence is defined as follows: F(1) = 1, F(2) = 1, and F(n) = F(n-1) + F(n-2) for n > 2.",
                "constraints": [
                    "1 <= n <= 20"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "The first Fibonacci number is defined as 1."
                    },
                    {
                        "input": "20",
                        "output": "6765",
                        "explanation": "The 20th Fibonacci number in the sequence is 6765."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nint fibonacci(int n)\n{\n    // returning 1 if n is 1 or 2\n    if(n == 1 || n == 2)\n        return 1;\n    else\n    // else returning sum of fibonacci(n-1) and fibonacci(n- 2)\n        return fibonacci(n-1) + fibonacci(n-2);\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n      int fibonacci(int n)\n    {\n        // returning 1 if n is 1 or 2\n        if(n == 1 || n == 2)\n            return 1;\n        else\n        // else returning sum of fibonacci(n-1) and fibonacci(n- 2)\n            return fibonacci(n-1) + fibonacci(n-2);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    static int fibonacci(int n)\n    {\n        // returning 1 if n is 1 or 2\n        if(n==1||n==2)\n            return 1;\n        // else returning sum of fib(n-1) and fib(n- 2)\n        else\n            return fibonacci(n-1)+fibonacci(n-2);\n    }\n}\n\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def fibonacci(self,n):\n        # returning 1 if n is 1 or 2\n        if n==1 or n==2:\n            return 1\n        # else returning sum of fib(n-1) and fib(n- 2)\n        else:\n            return self.fibonacci(n-1)+self.fibonacci(n-2)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\r\nclass Solution\r\n{\r\n    //Complete this function\r\n    public int fibonacci(int n)\r\n    {\r\n        // returning 1 if n is 1 or 2\r\n        if(n == 1 || n == 2)\r\n            return 1;\r\n        else\r\n        // else returning sum of fibonacci(n-1) and fibonacci(n- 2)\r\n            return fibonacci(n-1) + fibonacci(n-2);\r\n    }\r\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} n\n * @returns {number}\n*/\nclass Solution {\n  \n    fibonacci(n)\n    {\n        // returning 1 if n is 1 or 2\n        if(n === 1 || n === 2)\n            return 1;\n        // else returning sum of fib(n-1) and fib(n- 2)\n        else\n            return this.fibonacci(n-1) + this.fibonacci(n-2);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}