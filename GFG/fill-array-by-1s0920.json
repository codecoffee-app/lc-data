{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703321,
            "title": "Fill array with 1's",
            "titleSlug": "fill-array-by-1s0920",
            "content": "<p><span >You are given an array consisting of <code>0</code>s and <code>1</code>s. In each iteration, any <code>0</code> that is an immediate neighbor of a <code>1</code> can be converted to a <code>1</code>. Determine the minimum number of iterations required to convert the entire array to all <code>1</code>s. If it is not possible to convert the entire array to <code>1</code>s, return <code>-1</code>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 0, 1, 0]\n<strong>Output: </strong>1\n<strong>Explanation: </strong>Both the 0s has 1 as their immediate neighbour. So, only one iteration is required to fill the array with 1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 0, 1, 0, 0]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 2</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 0, 0]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>-1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />0 &lt;= arr[i]<sub>&nbsp;</sub>&lt;= 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array consisting of 0s and 1s, determine the minimum number of iterations required to convert the entire array to all 1s. In each iteration, any 0 that is an immediate neighbor of a 1 can be converted to a 1. If it is not possible to convert the entire array to 1s, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[1, 0, 1, 0]",
                        "output": "1",
                        "explanation": "Both 0s have 1 as their immediate neighbor. Therefore, only one iteration is required to convert the array to all 1s."
                    },
                    {
                        "input": "[0, 0, 1, 0, 0]",
                        "output": "2",
                        "explanation": "It takes two iterations to convert all 0s to 1s."
                    },
                    {
                        "input": "[0, 0, 0]",
                        "output": "-1",
                        "explanation": "Since there are no 1s in the array, it's impossible to convert all 0s to 1s."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Count isolated zero segments between ones. For each segment, determine how many steps are needed to fill it with ones, then find the maximum among all segments</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minMoves(vector<int>& arr) {\n        int n = arr.size();\n        int longestGap =\n            -1; // Stores the maximum gap between two 1s or leading/trailing zeros\n        int currentGap = 0;    // Counts the number of 0s in the current gap\n        int lastOneIndex = -1; // Tracks the index of the last encountered 1\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 1) {\n                // If it's the first 1, consider leading zeros; otherwise, consider the\n                // gap\n                if (lastOneIndex == -1) {\n                    longestGap = max(longestGap, currentGap);\n                } else {\n                    longestGap = max(longestGap, (currentGap + 1) / 2);\n                }\n                currentGap = 0;   // Reset gap counter\n                lastOneIndex = i; // Update the last 1's index\n            } else {\n                currentGap++; // Count the number of consecutive 0s\n            }\n        }\n        // Handle trailing zeros\n        longestGap = max(longestGap, currentGap);\n        // If the entire array is zeros, return -1\n        return (longestGap == n) ? -1 : longestGap;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int minMoves(int[] arr) {\n        int n = arr.length;\n        int longestGap =\n            -1; // Stores the maximum gap between two 1s or leading/trailing zeros\n        int currentGap = 0;    // Counts the number of 0s in the current gap\n        int lastOneIndex = -1; // Tracks the index of the last encountered 1\n\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 1) {\n                if (lastOneIndex == -1) {\n                    longestGap = Math.max(longestGap, currentGap);\n                } else {\n                    longestGap = Math.max(longestGap, (currentGap + 1) / 2);\n                }\n                currentGap = 0;   // Reset gap counter\n                lastOneIndex = i; // Update the last 1's index\n            } else {\n                currentGap++; // Count the number of consecutive 0s\n            }\n        }\n        // Handle trailing zeros\n        longestGap = Math.max(longestGap, currentGap);\n\n        // If the entire array is zeros, return -1\n        return (longestGap == n) ? -1 : longestGap;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minMoves(self, arr):\n        n = len(arr)\n        longest_gap = -1  # Stores the maximum gap between two 1s or leading/trailing zeros\n        current_gap = 0  # Counts the number of 0s in the current gap\n        last_one_index = -1  # Tracks the index of the last encountered 1\n\n        for i in range(n):\n            if arr[i] == 1:\n                if last_one_index == -1:\n                    longest_gap = max(longest_gap, current_gap)\n                else:\n                    longest_gap = max(longest_gap, (current_gap + 1) // 2)\n                current_gap = 0  # Reset gap counter\n                last_one_index = i  # Update the last 1's index\n            else:\n                current_gap += 1  # Count the number of consecutive 0s\n\n        # Handle trailing zeros\n        longest_gap = max(longest_gap, current_gap)\n\n        # If the entire array is zeros, return -1\n        return -1 if longest_gap == n else longest_gap\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    minMoves(arr) {\n        const n = arr.length;\n        let longestGap =\n            -1; // Stores the maximum gap between two 1s or leading/trailing zeros\n        let currentGap = 0;    // Counts the number of 0s in the current gap\n        let lastOneIndex = -1; // Tracks the index of the last encountered 1\n\n        for (let i = 0; i < n; i++) {\n            if (arr[i] === 1) {\n                if (lastOneIndex === -1) {\n                    longestGap = Math.max(longestGap, currentGap);\n                } else {\n                    longestGap = Math.max(longestGap, Math.floor((currentGap + 1) / 2));\n                }\n                currentGap = 0;   // Reset gap counter\n                lastOneIndex = i; // Update the last 1's index\n            } else {\n                currentGap++; // Count the number of consecutive 0s\n            }\n        }\n        // Handle trailing zeros\n        longestGap = Math.max(longestGap, currentGap);\n\n        // If the entire array is zeros, return -1\n        return (longestGap === n) ? -1 : longestGap;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}