{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713972,
            "title": "Fill the Matrix",
            "titleSlug": "fill-the-matrix--170647",
            "content": "<p><span style=\"font-size: 18px;\">Given a matrix with dimensions <strong>N</strong> x <strong>M</strong>, entirely filled with zeroes except for&nbsp;one position at&nbsp;co-ordinates <strong>X</strong> and <strong>Y </strong>containing '1'. Find the minimum number of iterations in which the whole matrix can be filled with ones.<br /><strong>Note:&nbsp;</strong>In one iteration, '1' can be filled in&nbsp;the 4 neighbouring elements of a cell containing '1'.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 2, M = 3\nX = 2, Y = 3\n<strong>Output:</strong>&nbsp;3&nbsp;\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/713972/Web/Other/26f91e33-013f-40f2-badd-00804adaf31f_1685087947.png\" /><span style=\"font-size: 18px;\">\n<strong>Explanation</strong>: 3 is the minimum possible \nnumber of iterations in which the\nmatrix can be filled.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 1, M = 1\nX = 1, Y = 1 \n<strong>Output:&nbsp;</strong>0\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/713972/Web/Other/7f59ca2a-c242-49bc-b94e-ba0f3e95f43e_1685087947.png\" /><span style=\"font-size: 18px;\">\n<strong>Explanation</strong>: The whole matrix is \nalready filled with ones.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>minIterations()</strong>&nbsp;which takes the dimensions of the matrix N and M and the co-ordinates of the initial position of '1' ie X and Y<strong>&nbsp;</strong>as input parameters&nbsp;and returns the minimum number of iterations required to fill the matrix.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N*M)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le;&nbsp;N, M &le;&nbsp;10<sup>3</sup><br />1<sup>&nbsp;</sup>&le;&nbsp;X &le; N<br />1 &le;&nbsp;Y &le;&nbsp;M&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N x M matrix filled with zeroes, except for a single '1' at coordinates (X, Y), determine the minimum number of iterations required to fill the entire matrix with ones. In each iteration, any cell containing '1' can spread to its four neighboring cells (up, down, left, right).",
                "constraints": [
                    "1 <= N, M <= 10^3",
                    "1 <= X <= N",
                    "1 <= Y <= M"
                ],
                "testcases": [
                    {
                        "input": "N = 2, M = 3, X = 2, Y = 3",
                        "output": "3",
                        "explanation": "Starting with '1' at (2,3), it takes 3 iterations to fill the entire 2x3 matrix."
                    },
                    {
                        "input": "N = 1, M = 1, X = 1, Y = 1",
                        "output": "0",
                        "explanation": "The 1x1 matrix already contains '1', so no iterations are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Manhattan distance is the number of iterations required to reach a point.&nbsp;Since, the given number of &#39;1&#39;s is only one, we can simply check all the points and find the maximum distance.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "oracle"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{   \npublic:\n    //Function to find the minimum number of iterations required.\n    int minIteration(int N, int M, int x, int y){    \n        int ans=0;\n        //iterating over all possible positions (i,j) on the grid.\n        for(int i=1;i<=N;i++)\n            for(int j=1;j<=M;j++)\n                //calculating the maximum absolute difference between\n                //the current position (i,j) and the given position (x,y).\n                ans=max(ans,abs(x-i)+abs(y-j));\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    public static int minIteration(int N, int M, int x, int y){\n        //code here\n        \n        //Initializing the maximum distance variable\n        int max=0;\n        \n        //Iterating through all possible positions\n        for(int i=1;i<=N;i++)\n            for(int j=1;j<=M;j++)\n                //Calculating the Manhattan distance from current position (i,j) to target position (x,y) \n                //And updating the maximum distance if necessary\n                max=Math.max(max,Math.abs(x-i)+Math.abs(y-j));\n        \n        //Returning the maximum distance as the result\n        return max;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def minIteration(self, N, M, x, y):\n        # Initialize variable to keep track of maximum distance\n        ans = 0\n        # Iterate through all possible combinations of i and j\n        for i in range(1, N + 1):\n            for j in range(1, M + 1):\n                # Calculate distance from current point (x, y) to (i, j)\n                distance = abs(x - i) + abs(y - j)\n                # Update maximum distance if the calculated distance is greater\n                ans = max(ans, distance)\n        # Return the maximum distance\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number} M\n * @param {number} x\n * @param {number} y\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the minimum number of iterations required.\n    minIteration(N, M, x, y)\n    {\n        // Initialize variable to keep track of maximum distance\n        let ans = 0;\n        // Iterate through all possible combinations of i and j\n        for (let i = 1; i <= N; i++) {\n            for (let j = 1; j <= M; j++) {\n                // Calculate distance from current point (x, y) to (i, j)\n                let distance = Math.abs(x - i) + Math.abs(y - j);\n                // Update maximum distance if the calculated distance is greater\n                ans = Math.max(ans, distance);\n            }\n        }\n        // Return the maximum distance\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}