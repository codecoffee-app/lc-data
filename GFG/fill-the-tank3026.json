{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704784,
            "title": "Fill the Tank",
            "titleSlug": "fill-the-tank3026",
            "content": "<p><span style=\"font-size:18px\">In a city,&nbsp;<strong>N</strong> water tanks are connected by pipeline(As a tree) where the <strong>ith</strong> tank has a capacity <strong>cap[i]</strong>. The <strong>ith </strong>element of the given <strong>Edge</strong> array of length <strong>N-1</strong> represents that there is a pipeline between <strong>Edge[i][0]</strong> and <strong>Edge[i][1]</strong> tank.&nbsp;Since people working at the city corporation are lazy they usually select one of the tank and pour complete amount of water into it, <strong>when the tank is filled, the excess water evenly flows to the connected tanks.</strong> The head of city corporation has instructed to <strong>pour minimum amount of water into the selected tank so that all other tank is filled</strong>. As the labours of the corporation are not intelligent enough to figure out the minimum amount of water required to fill all the tanks they have asked your help. Also Maximum amount of water available with city corporation is 10<sup>18</sup>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>NOTE</strong>: If the tank if full, the water flows to all of its connected tanks except the tank from which the water had come to it. i.e, to all tanks except the source for that particular tank. If it has no option to flow the water is considered to be wasted.<strong> S</strong> is the source tank.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 4 and S = 1\r\nEdges = [[1, 2], [1, 3], [2, 4]]\r\nCap = [1, 1, 1, 1]\r\n<strong>Output:</strong>&nbsp;5\r\n<strong>Explanation</strong>:\r\nInitially 5 unit of water is poured into \r\ntank 1. 2 unit of it flows to tank 2 <strong>and</strong> \r\n2 unit of it flows into tank 3. From 2 \r\nunit of water in tank 2, 1 unit flows into \r\ntank 4 <strong>and</strong> 1 unit from tank 3 is wasted.\r\n<img alt=\"\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/fill-the-tank.jpg\" style=\"height:500px; width:667px\" />\r\n\r\n</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3 and S = 2\r\nEdges = [[1, 2], [2, 3]]\r\nCap = [1, 1, 1]\r\n<strong>Output: </strong>3\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>minimum_amount()</strong>&nbsp;which takes an integer <strong>N</strong>, an&nbsp;integer&nbsp;<strong>S</strong>, 2-d array <strong>Edges</strong>, and an array <strong>Cap</strong>&nbsp;of length&nbsp;N as input parameters and returns the minimum amount of water required to fill all the tanks. If it is not possible to fill all the tanks print -1.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong> O(N*log(S))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n &le; 100000<br />\r\n1&nbsp;&le; s,u,v &le; n<br />\r\n1 &le; capacity of each tank &le; 1000000007</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "There are N water tanks in a city, connected by pipelines in a tree structure. The i-th tank has a capacity cap[i]. The Edges array (of length N-1) defines the connections, where Edge[i][0] and Edge[i][1] represent a pipeline between those two tanks.  Water is poured into a single tank (the source, S). When a tank is filled to its capacity, excess water flows evenly to all connected tanks, except the one from which it received the water. The task is to determine the minimum amount of water to pour into the source tank (S) such that all other tanks are filled to their capacity. The maximum amount of available water is 10^18.  If it is not possible to fill all the tanks, return -1.",
                "constraints": [
                    "1 <= n <= 100000",
                    "1 <= s, u, v <= n",
                    "1 <= capacity of each tank <= 1000000007"
                ],
                "testcases": [
                    {
                        "input": "N = 4, S = 1\nEdges = [[1, 2], [1, 3], [2, 4]]\nCap = [1, 1, 1, 1]",
                        "output": "5",
                        "explanation": "Pouring 5 units of water into tank 1 fills it. 2 units flow to tank 2 and 2 to tank 3. From tank 2, 1 unit flows to tank 4.  1 unit from tank 3 is wasted."
                    },
                    {
                        "input": "N = 3, S = 2\nEdges = [[1, 2], [2, 3]]\nCap = [1, 1, 1]",
                        "output": "3",
                        "explanation": "null"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Solution: Looking at the constraints i.e, Amount of water available is (10)^18, So answer lies between 1 - (10)^18 and the number of tanks is &lt;= 100000, We can conclude that to find the answer optimally we can do a binary search for the answer by simulating the process for each mid-value.After doing a binary search if the answer is 1e18+1 return -1. Simulation of the process can be done by doing depth-first search Computing the Time Complexity for the solution: Time taken for binary search is log2(1e18+1) and the process is simulated for these many times, Therefore total time taken is n*log(1e18+1), for each test cases it is t*n*log(1e18+1)</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "long long MAX = 1e18; //maximum value for long long integer\n\nclass Solution{\npublic:    \n    bool check(int N,int S,long long water,int *Cap,vector<int> *graph){\n        queue<pair<int,long long>> q; //create a queue to store pairs of node and water level\n        vector<int> vis(100010,0); //empty vector to track visited nodes\n        q.push({S,water}); //push starting node and water level to the queue\n        \n        //iterate while queue is not empty\n        while(q.size()){\n            auto val=q.front(); //get the front element of the queue\n            q.pop(); //pop the front element\n            int curr=val.first; //current node\n            long long curr_water=val.second; //current water level\n            vis[curr] = 1; //mark current node as visited\n            \n            if (Cap[curr-1]>curr_water) //if capacity of current node is greater than current water level, return false\n                return false;\n            \n            curr_water-=Cap[curr-1]; //update current water level\n            \n            int neighbour=0; //variable to count number of unvisited neighbouring nodes\n            \n            for (auto it: graph[curr]){ //iterate over neighbouring nodes\n                int nxt=it; //get next node\n                if(!vis[nxt]) //if next node is not visited\n                    neighbour+=1; //increment neighbour count  \n            }\n            \n            if(neighbour>0) //if there are unvisited neighbouring nodes\n                curr_water/=neighbour; //divide current water level among unvisited neighbours\n            \n            for (auto it: graph[curr]){ //iterate over neighbouring nodes again\n                int nxt=it; //get next node\n                if(!vis[nxt]) //if next node is not visited\n                    q.push({nxt,curr_water}); //push next node and updated water level to the queue\n            }\n        }\n        return true; //return true if all nodes are reachable with given water level\n    }\n    \n    long long minimum_amount(vector<vector<int>> &Edges, int N, int S, int *Cap){\n        vector<int> graph[100010]; //create an array of vectors to represent the graph\n        long long high=1e18,low=0; //initialize high and low variables for binary search\n        \n        //build the graph using the given edges\n        for(int i=0;i<N-1;i++){\n            graph[Edges[i][0]].push_back(Edges[i][1]); //add connected nodes to each other's adjacency list\n            graph[Edges[i][1]].push_back(Edges[i][0]);\n        }\n        \n        //perform binary search to find minimum amount of water required\n        while(low<=high){\n            long long mid=low+(high-low)/2; //calculate mid value\n            if(mid>=MAX) return -1; //if mid value exceeds maximum value, return -1\n            \n            //check if it is feasible to distribute water with current mid value\n            if(check(N,S,mid,Cap,graph)==false){\n                low=mid+1; //if not feasible, update low value\n            }\n            else{\n                high=mid-1; //if feasible, update high value\n            }\n        }\n        return low; //return minimum amount of water required\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    static class Pair{\n        int start; // store the starting node of a path\n        long water; // store the amount of water carried by path\n        Pair(int start, long water){\n            this.start = start;\n            this.water = water;\n        }\n    }\n    boolean check( ArrayList<Integer> []graph , int N, int S, int [] Cap, long water){\n        boolean [] vis = new boolean[100010]; // create a boolean array to mark visited nodes\n        Queue<Pair> q = new LinkedList<>(); // create a queue to perform BFS\n        q.add(new Pair(S,water)); // add the starting node and its carried water to the queue\n        \n        while(!q.isEmpty()){\n            Pair val = q.poll();\n            int curr=val.start; // get the current node\n            long curr_water=val.water; // get the current carried water\n            vis[curr] = true; // mark the current node as visited\n            if (Cap[curr-1]>curr_water)\n                return false; // if the water capacity at this node is greater than the carried water, return false\n            \n            curr_water-=Cap[curr-1]; // subtract the water capacity at this node from the carried water\n            \n            int neighbour=0; // variable to count the number of unvisited neighbors\n            \n            for (int it: graph[curr]){\n                int nxt=it;\n                if(!vis[nxt])\n                    neighbour+=1;  // count the unvisited neighbors\n            }\n            if(neighbour>0)\n                curr_water/=neighbour; // divide the remaining water equally among the unvisited neighbors\n            \n            for (int it: graph[curr]){\n                int nxt=it;\n                if(!vis[nxt])\n                    q.add(new Pair(nxt,curr_water)); // add the unvisited neighbors to the queue with the new carried water\n            }\n        }\n        return true; // return true if all nodes are visited and water is sufficient\n    }\n    long minimum_amount(int [][]Edges, int N, int S, int []Cap){\n        long hi = (long)Math.pow(10,18)+1; // initialize the upper limit of binary search\n        long lo = 0; // initialize the lower limit of binary search\n        long maxx = (long)Math.pow(10,18)+1; // set the maximum value to indicate unlimited water supply\n        ArrayList<Integer> []graph = new ArrayList[N+1]; // create an adjacency list to represent the graph\n    \tfor(int i = 0; i <= N; i++)\n    \t    graph[i] = new ArrayList<>(); // initialize the adjacency list\n\t    for(int i = 1; i < N; i++)\n\t    {\n\t        int u, v;\n\t        u = Edges[i-1][0];\n\t        v = Edges[i-1][1];\n\t        graph[u].add(v); // add the edges to the adjacency list\n\t        graph[v].add(u);\n\t    }\n\t    while(hi>=lo){\n            long mid=(hi+lo)/2; // find the mid point for binary search\n            if(mid>=maxx)\n               return -1; // if the mid point is greater than the maximum value, return -1\n            if(!check(graph,N,S,Cap,mid))\n                lo=mid+1; // if the check function returns false, update the lower limit\n            else\n                hi=mid-1; // if the check function returns true, update the upper limit\n\t    }\n        return lo; // return the final result\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from collections import deque\n\nclass Solution:\n    def minimum_amount(self,Edges,num, start,cap):\n        # Function to check if it is possible to distribute water from start node\n        def check(gr,num,start,cap,water):\n            vis=[0]*100010\n            q=deque();\n            q.append([start,water])\n            \n            while(q):\n                val=q.popleft()\n                curr=val[0]\n                curr_water=val[1]\n                vis[curr]=1;\n        \n                # If the capacity of current node is less than required water, return 0\n                if (cap[curr-1]>curr_water):\n                    return 0;\n                \n                curr_water-=cap[curr-1];\n                \n                neighbour=0;\n                \n                # Counting the number of neighbors of current node\n                for it in gr[curr]:\n                    nxt=it;\n                    if(vis[nxt]==0):\n                        neighbour+=1;  \n              \n                # Distributing the remaining water to the neighbors\n                if(neighbour>0):\n                    curr_water=(curr_water//neighbour);\n                \n                # Adding neighbors to the queue\n                for it in gr[curr]:\n                    nxt=it;\n                    if(vis[nxt]==0):\n                        q.append([nxt,curr_water]);\n            \n            return 1;\n        \n        hi=10**18+1;\n        lo=0;\n        maxx=10**18+1;\n        gr=[[] for i in range(100011)];\n\n        # Creating a graph with the given edges\n        for i in range(num-1):\n            gr[Edges[i][0]].append(Edges[i][1]);\n            gr[Edges[i][1]].append(Edges[i][0]);\n       \n        # Binary search for finding the minimum amount of water required\n        while(hi>=lo):\n            mid=(hi+lo)//2;\n            \n            # If the mid value exceeds the maximum limit, return -1\n            if(mid>=maxx):\n                return -1;\n            \n            # Checking if it is possible to distribute water with current mid value\n            if(check(gr,num,start,cap,mid)==0):\n                lo=mid+1;\n            else:\n                hi=mid-1;\n        \n        return lo;",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}