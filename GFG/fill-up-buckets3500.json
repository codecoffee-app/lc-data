{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704706,
            "title": "Fill up buckets",
            "titleSlug": "fill-up-buckets3500",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>n</strong>&nbsp;buckets and infinite number of balls. The maximum capacity of each bucket is given in an array <strong>capacity[]</strong>. Find the number of ways to fill the buckets with balls such that each bucket has <strong>atleast 1</strong> ball and all the buckets have <strong>distinct</strong> number of balls in them.<br /><strong>Note:&nbsp;</strong>Since the answer may be very large, calculate the answer&nbsp;modulo <strong>10^9+7.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong>n = 1\ncapacity = [6]\n<strong>Output: </strong>6\n<strong>Explanation: </strong>Since there is only one \nbucket. It may hold any number of balls \nranging from 1 to 6.\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong>n = 2 \ncapacity = [5, 8]\n<strong>Output: </strong>35\n<strong>Explanation: </strong>If the first bucket has 1\nball in it then the second bucket cant have 1 \nball, so the second bucket has 8-1 = 7 choices.\nSo the first bucket has 5 choices and for each\nchoice second bucket has 7 choices.\nSo total there are 35 ways.\n</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>totalWays()</strong>&nbsp;which takes <strong>n</strong> and <strong>capacity[]</strong>&nbsp;as input parameters and returns the <strong>number of&nbsp;possible ways</strong> to&nbsp;fill&nbsp;the&nbsp;buckets. Since the answer may be very large, calculate the answer&nbsp;modulo <strong>10^9+7.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n*log(n))&nbsp;<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n&nbsp;&lt;= 100000<br />1 &lt;= capacity[i] &lt;= 100000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given `n` buckets and an infinite number of balls, where the maximum capacity of each bucket is given in the `capacity` array, determine the number of ways to fill the buckets such that each bucket contains at least one ball and all buckets have a distinct number of balls.  The answer should be calculated modulo 10^9 + 7.",
                "constraints": [
                    "1 <= n <= 100000",
                    "1 <= capacity[i] <= 100000"
                ],
                "testcases": [
                    {
                        "input": "n = 1\ncapacity = [6]",
                        "output": "6",
                        "explanation": "Since there is only one bucket, it can hold any number of balls from 1 to 6. Therefore, there are 6 possible ways to fill the bucket."
                    },
                    {
                        "input": "n = 2\ncapacity = [5, 8]",
                        "output": "35",
                        "explanation": "If the first bucket contains 1 ball, the second bucket cannot also have 1 ball. Therefore, the second bucket has 8 - 1 = 7 choices. The first bucket has 5 choices (1 to 5 balls). For each choice of the first bucket, there are 7 choices for the second bucket to have a different number of balls than the first, and also have atleast 1 ball. Therefore, there are a total of 5 * 7 = 35 ways to fill the buckets."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Apply greedy algorithm.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n\tpublic:\n    //Function to find the total number of ways to select captain and crew members.\n    int totalWays(int n, vector<int>capacity) {\n    \tlong long int mod = 1000000007;\n    \tsort(capacity.begin(), capacity.end()); //sorting the capacity vector in ascending order.\n    \tbool flag = false; //flag variable to check if it is possible to select captain and crew members.\n    \tlong long int ans = 1; //variable to store the total number of ways.\n    \t\n    \t//iterating over the capacity vector in reverse.\n    \tfor(int i = n-1; i>=0; i--){\n    \t\t//if capacity[i] is less than i, then it is not possible to select captain and crew members.\n    \t\tif(capacity[i] < i){\n    \t\t\tflag = true;\n    \t\t\tbreak;\n    \t\t}\n    \t\telse\n    \t\t\tans = (ans % mod * (capacity[i] - i)%mod)%mod; //updating the total number of ways.\n    \t}\n    \tif(flag)\n    \t\treturn 0; //returning 0 if it is not possible to select captain and crew members.\n    \treturn int(ans); //returning the total number of ways.\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    public int totalWays(int n, int[] capacity) {\n        // initializing modulo constant\n        long mod = 1000000007;\n    \t\n    \t// sorting the capacity array in ascending order\n    \tArrays.sort(capacity);\n    \t\n    \t// initializing a flag variable\n    \tboolean flag = false;\n    \t\n    \t// initializing answer variable\n    \tlong ans = 1;\n    \t\n    \t// iterating through the capacity array backwards\n    \tfor(int i = n-1; i>=0; i--){\n    \t\t// if capacity of current element is less than its index\n    \t\t// set flag to true and break the loop\n    \t\tif(capacity[i] < i){\n    \t\t\tflag = true;\n    \t\t\tbreak;\n    \t\t}\n    \t\t// else multiply ans with the difference between capacity and index\n    \t\t// and update ans with the modulo operation\n    \t\telse\n    \t\t\tans = ((ans % mod) * ((capacity[i] - i)%mod))%mod;\n    \t}\n    \t\n    \t// if flag is true, return 0\n    \tif(flag)\n    \t\treturn 0;\n    \t\n    \t// return ans as integer\n    \treturn (int)ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def totalWays(self, n, capacity):\n\n        mod = 10**9 + 7\n        capacity.sort()  # Sorting the capacity list in ascending order\n\n        flag = False  # Flag variable to check if any capacity is less than its index\n        ans = 1  # Initializing answer to 1\n\n        for i in range(\n                n - 1, -1,\n                -1):  # Looping through the capacity list in reverse order\n\n            if capacity[\n                    i] < i:  # If any capacity is less than its index, set flag to True and break the loop\n                flag = True\n                break\n\n            else:\n                ans = (\n                    (ans % mod) * (capacity[i] - i) % mod\n                ) % mod  # Otherwise, update the answer by multiplying with the difference between capacity and index modulo mod value\n\n        if flag:  # If flag is True, there is no valid way to distribute the books\n            return 0\n\n        return ans  # Return the answer, which is the total number of valid ways to distribute the books\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int totalWays(int n, List<int> capacity)\n    {\n        long mod = 1000000007;\n        capacity.Sort(); //sorting the capacity list in ascending order.\n        bool flag = false; //flag variable to check if it is possible to select captain and crew members.\n        long ans = 1; //variable to store the total number of ways.\n\n        //iterating over the capacity list in reverse.\n        for(int i = n-1; i>=0; i--){\n            //if capacity[i] is less than i, then it is not possible to select captain and crew members.\n            if(capacity[i] < i){\n                flag = true;\n                break;\n            }\n            else\n                ans = (ans % mod * (capacity[i] - i)%mod)%mod; //updating the total number of ways.\n        }\n        if(flag)\n            return 0; //returning 0 if it is not possible to select captain and crew members.\n        return (int)ans; //returning the total number of ways.\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number[]} capacity\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to return the number of ways in which we can distribute\n    //n objects under given constraints.\n    totalWays(n, capacity) {\n        const mod = 1000000007; // modulo value\n        \n        capacity.sort((a, b) => a - b); // Sorting the capacity list in ascending order\n        \n        let flag = false; // Flag variable to check if any capacity is less than its index\n        let ans = 1; // Initializing answer to 1\n        \n        for (let i = n - 1; i >= 0; i--) { // Looping through the capacity list in reverse order\n            if (capacity[i] < i) { // If any capacity is less than its index, set flag to true and break the loop\n                flag = true;\n                break;\n            } else {\n                ans = ((ans % mod) * ((capacity[i] - i) % mod)) % mod; // Otherwise, update the answer by multiplying with the difference between capacity and index modulo mod value\n            }\n        }\n        \n        if (flag) { // If flag is true, there is no valid way to distribute the books\n            return 0;\n        }\n        \n        return ans; // Return the answer, which is the total number of valid ways to distribute the books\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}