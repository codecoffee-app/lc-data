{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705219,
            "title": "Filling Bucket",
            "titleSlug": "filling-bucket0529",
            "content": "<p><span style=\"font-size:18px\">Given a Bucket&nbsp;having a capacity of&nbsp;<strong>N</strong>&nbsp;litres and the task is&nbsp;to determine that by how many ways you can fill it using two bottles&nbsp;of capacity of&nbsp;<strong>1 Litre and 2 Litre only</strong>. Find the answer modulo 10<sup>8</sup>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n3\r\n<strong>Output:</strong>\r\n3 </span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nLet O denote filling by 1 litre bottle and\r\nT denote filling by 2 litre bottle.\r\nSo for N = 3, we have :\r\n{OOO,TO,OT}. Thus there are 3 total ways.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n4\r\n<strong>Output:</strong>\r\n5 </span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nLet O denote filling by 1 litre bottle and\r\nT denote filling by 2 litre bottle.\r\nSo for N = 4, we have :\r\n{TT,OOOO,TOO,OTO,OOT} thus there are 5 total ways.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>fillingBucket()</strong> which takes an Integer N as input and returns the number of total ways possible.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The number of ways of filling the bucket of&nbsp;<strong>n</strong> liters depends on the number of ways of filling the bucket up to&nbsp;<strong>n-1</strong> and <strong>n-2</strong> liters.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to calculate the Nth term of the series\n    int fillingBucket(int N) {\n        \n        int MOD = 100000000;     // Storing the value of MOD\n        \n        int fib[N+1];\n        fib[0] = fib[1] = 1;      // First two terms of the series are 1.\n        \n        // Calculating the Nth term using the Fibonacci series\n        for(int i=2; i<=N; i++)\n            fib[i] = (fib[i-1]+fib[i-2]) % MOD;\n            \n        return fib[N];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    static int fillingBucket(int N) {\r\n        \r\n        int MOD = 100000000;     // Storing the value of MOD\r\n        \r\n        int[] fib = new int[N+1];\r\n        fib[0] = fib[1] = 1;      // First two terms of the series are 1.\r\n        for(int i=2; i<=N; i++)\r\n            fib[i] = (fib[i-1]+fib[i-2]) % MOD;\r\n            \r\n        return fib[N];\r\n    }\r\n};\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def fillingBucket(self, N):\r\n        \r\n        MOD = 10**8     # Storing the value of MOD\r\n        fib = [0]*(N+1)\r\n        \r\n        fib[0] = fib[1] = 1     # First two terms of the series are 1.\r\n        for i in range(2,N+1):\r\n            fib[i] = (fib[i-1]+fib[i-2]) % MOD\r\n            \r\n        return fib[N]",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to fill the bucket.\n    fillingBucket(N) {\n        let MOD = 10**8;     // Storing the value of MOD\n        let fib = new Array(N+1);\n        \n        fib[0] = fib[1] = 1;     // First two terms of the series are 1.\n        for (let i = 2; i <= N; i++) {\n            fib[i] = (fib[i-1] + fib[i-2]) % MOD;\n        }\n            \n        return fib[N];\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int fillingBucket(int N)\n    {\n        int MOD = 100000000;     \n        int[] fib = new int[N + 1];\n        fib[0] = fib[1] = 1;\n        \n        for (int i = 2; i <= N; i++)\n            fib[i] = (fib[i - 1] + fib[i - 2]) % MOD;\n            \n        return fib[N];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}