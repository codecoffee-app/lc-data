{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704708,
            "title": "Final Destination",
            "titleSlug": "final-destination4628",
            "content": "<p><span style=\"font-size:18px\">Consider a 2d plane and a Robot which is located at (0,0) who&nbsp;can move only one unit step at a time&nbsp;in any direction i.e. if its initial position is (x,y), he can go to positions (x&thinsp;+&thinsp;1,&thinsp;y), (x&thinsp;-&thinsp;1,&thinsp;y),&nbsp;(x,&thinsp;y&thinsp;+&thinsp;1) or (x,&thinsp;y&thinsp;-&thinsp;1). Now Given three integers a,b (denoting the final position where the robot has to reach), and x. Find out if the Robot can reach the final position in exactly x steps.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<strong><span style=\"font-size:18px\">a = </span></strong><span style=\"font-size:18px\">5, <strong>b = </strong>5, <strong>x</strong> <strong>= </strong>11</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">0</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">No matter how the Robot moves,\nthe Robot won&#39;t be able to reach\npoint (5,5) in exactly 11 moves.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<strong><span style=\"font-size:18px\">a = </span></strong><span style=\"font-size:18px\">10, <strong>b = </strong>15, <strong>x</strong> <strong>= </strong>25</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">1</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">The Robot can move 10 times towards\npositive x-axis and then 15 times\ntowards positive y-axis to reach (10,15).\n</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>canReach()</strong> which takes 3 Integers a,b and x as input and returns the answer.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">-10<sup>9</sup> &lt;= a,b &lt;= 10<sup>9</sup><br />\n1 &lt;= x &lt;= 2*10<sup>9</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Consider a 2D plane where a robot is initially located at (0,0). The robot can move one unit step at a time in any of the four cardinal directions: (x+1, y), (x-1, y), (x, y+1), or (x, y-1). Given the target coordinates (a, b) and a fixed number of steps x, determine if the robot can reach (a, b) in exactly x steps.",
                "constraints": [
                    "-10<sup>9</sup> <= a, b <= 10<sup>9</sup>",
                    "1 <= x <= 2*10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "a = 5, b = 5, x = 11",
                        "output": "0",
                        "explanation": "The minimum number of steps to reach (5, 5) is |5| + |5| = 10. To reach the target in 11 steps requires exactly one extra move. As the number of required move is odd but the actual number of moves required is even, so it's impossible to reach (5,5) in exactly 11 steps."
                    },
                    {
                        "input": "a = 10, b = 15, x = 25",
                        "output": "1",
                        "explanation": "The minimum number of steps to reach (10, 15) is |10| + |15| = 25. Since x is equal to the minimum steps required to reach the final position, the robot can reach (10,15) in exactly 25 moves."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We can&#39;t reach the final position if n is less than abs(x)+abs(y).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho",
            "flipkart",
            "amazon",
            "microsoft",
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if it is possible to reach (a,b) in x steps\n    int canReach(long long a, long long b, long long x) {\n        \n        // Subtracting the minimum steps needed to reach (a,b) from x\n        x -= (abs(a) + abs(b));\n        \n        // Checking if x is non-negative and even\n        if(x>=0 && x%2==0)\n            return 1;   // Return 1 if it is possible\n        else\n            return 0;   // Return 0 if it is not possible\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int canReach(Long a, Long b, Long x) {\n        \n        x -= (Math.abs(a) + Math.abs(b));    // Subtracting the sum of absolute values of a and b from x to get the remaining steps\n        \n        if(x>=0 && x%2==0)    // If the remaining steps are non-negative and even, return 1\n            return 1;\n        else\n            return 0;    // Otherwise, return 0\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #function to check if it is possible to reach the point (a,b) in x steps\n    def canReach(self, a, b, x):\n        \n        #subtracting the minimum steps needed to reach (a,b) from x\n        x -= (abs(a) + abs(b))\n        \n        #if x is non-negative and even, it is possible to reach (a,b) in x steps\n        if(x>=0 and x%2==0):\n            return 1\n        else:\n            return 0",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {Number} a - The x-coordinate of the starting point.\n * @param {Number} b - The y-coordinate of the starting point.\n * @param {Number} x - The number of steps available to reach the destination.\n * @returns {Number} - Returns 1 if it is possible to reach the destination using the given number of steps, otherwise returns 0.\n */\nclass Solution {\n    canReach(a, b, x){\n        x -= (Math.abs(a) + Math.abs(b));    // Calculate the remaining number of steps needed to reach the destination.\n        \n        if(x >= 0 && x % 2 === 0)\n            return 1;    // Return 1 if the remaining steps are non-negative and even.\n        else\n            return 0;    // Return 0 if the remaining steps are negative or odd.\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int canReach(long a, long b, long x) \n    {\n        x -= (Math.Abs(a) + Math.Abs(b));\n        \n        if(x>=0 && x%2==0)\n            return 1;\n        else\n            return 0;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}