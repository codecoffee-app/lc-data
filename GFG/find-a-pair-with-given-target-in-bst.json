{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700550,
            "title": "Pair Sum in BST",
            "titleSlug": "find-a-pair-with-given-target-in-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Search Tree(BST) and a <strong>target</strong>. Check whether there's a pair of Nodes in the BST with value summing up to the target.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre dir=\"ltr\"><span ><strong>Input:</strong> root = [7, 3, 8, 2, 4, N, 9], target = 12</span><br /><span >  &nbsp; &nbsp;  <img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20240821183540/bst.webp\" srcset=\"https://media.geeksforgeeks.org/wp-content/uploads/20240821183540/bst.webp 245w,https://media.geeksforgeeks.org/wp-content/uploads/20240821183540/bst-100.webp 100w,https://media.geeksforgeeks.org/wp-content/uploads/20240821183540/bst-200.webp 200w\" alt=\"bst\" width=\"245\" height=\"199\" loading=\"auto\" /></span><br /><span ><strong>Output: </strong>True</span><br /><span ><strong>Explanation:</strong> In the binary tree above, there are two nodes (8 and 4) that add up to 12.</span></pre>\n<pre dir=\"ltr\"><strong style=\"font-size: 18.6667px;\">Input: </strong><span style=\"font-size: 18.6667px;\">root = [9, 5, 10, 2, 6, N, 12],</span><strong style=\"font-size: 18.6667px;\"> </strong><span style=\"font-size: 18.6667px;\">target = 23</span><br />\\t    <img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20240821184007/bst-3.webp\" srcset=\"https://media.geeksforgeeks.org/wp-content/uploads/20240821184007/bst-3.webp 244w,https://media.geeksforgeeks.org/wp-content/uploads/20240821184007/bst-3-100.webp 100w,https://media.geeksforgeeks.org/wp-content/uploads/20240821184007/bst-3-200.webp 200w\" alt=\"bst-3\" width=\"244\" height=\"199\" loading=\"lazy\" /><br /><strong style=\"font-size: 18.6667px;\">Output:&nbsp;</strong><span style=\"font-size: 18.6667px;\">False</span><br /><span ><strong>Explanation:</strong> In the binary tree </span><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">above, there are no such two nodes exists that add up to 23.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<p><span style=\"font-size: 18px;\">1 &le; Number of Nodes &le; 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &le; target &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and a target value, determine if there exist two nodes within the BST whose values sum up to the target.",
                "constraints": [
                    "1 <= Number of Nodes <= 10^5",
                    "1 <= target <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "root = [7, 3, 8, 2, 4, N, 9], target = 12",
                        "output": "True",
                        "explanation": "The nodes with values 8 and 4 sum up to the target value of 12."
                    },
                    {
                        "input": "root = [9, 5, 10, 2, 6, N, 12], target = 23",
                        "output": "False",
                        "explanation": "There are no two nodes in the BST that sum up to the target value of 23."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The inorder traversal of a BST gives us the keys in sorted order.<br />\nHence, you can generate a sorted array of keys and the question then reduces to finding the pair sum in a sorted array.<br />\nThe O(N) solution for this&nbsp;is pretty straightforward using 2-pointers.</p>\n\n<p>But, storing all the keys in an array requires O(N) extra space. Can you use the same idea of the 2-pointers without actually storing the node values in an array? What about doing an iterative in-order traversal of the tree, one normal and the other reverse?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "vmware",
            "flipkart",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "snapdeal"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "/*\nNode is as follows\nclass Node {\n    int data;\n    Node *left;\n    Node *right;\n\n    Node(int val) {\n        data = val;\n        left = right = NULL;\n    }\n};\n*/\n\nclass Solution {\n  public:\n    // Function to perform Inorder traversal and store the\n    // elements in a vector\n    void inorderTraversal(Node* root, vector<int>& inorder) {\n        if (root == nullptr)\n            return;\n\n        inorderTraversal(root->left, inorder);\n\n        // Store the current node's value\n        inorder.push_back(root->data);\n\n        inorderTraversal(root->right, inorder);\n    }\n\n    // Function to find if there exists a pair with a\n    // given sum in the BST\n    bool findTarget(Node* root, int target) {\n\n        // Create an auxiliary array and store Inorder traversal\n        vector<int> inorder;\n        inorderTraversal(root, inorder);\n\n        // Use two-pointer technique to find the pair with given sum\n        int left = 0, right = inorder.size() - 1;\n\n        while (left < right) {\n            int currentSum = inorder[left] + inorder[right];\n\n            // If the pair is found, return true\n            if (currentSum == target)\n                return true;\n\n            // If the current sum is less than the target,\n            // move the left pointer\n            if (currentSum < target)\n                left++;\n\n            // If the current sum is greater than\n            // the target, move the right pointer\n            else\n                right--;\n        }\n\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "/*\nclass Node {\n    int data;\n    Node left, right;\n\n    public Node(int d) {\n        data = d;\n        left = right = null;\n    }\n}\n*/\nclass Solution {\n    // Function to perform Inorder traversal and store the\n    // elements in an array\n    void inorderTraversal(Node root, ArrayList<Integer> inorder) {\n        if (root == null) return;\n\n        inorderTraversal(root.left, inorder);\n\n        // Store the current node's value\n        inorder.add(root.data);\n\n        inorderTraversal(root.right, inorder);\n    }\n\n    // Function to find if there exists a pair with a\n    // given sum in the BST\n    boolean findTarget(Node root, int target) {\n\n        // Create an auxiliary array and store Inorder traversal\n        ArrayList<Integer> inorder = new ArrayList<>();\n        inorderTraversal(root, inorder);\n\n        // Use two-pointer technique to find the pair with given sum\n        int left = 0, right = inorder.size() - 1;\n\n        while (left < right) {\n            int currentSum = inorder.get(left) + inorder.get(right);\n\n            // If the pair is found, return true\n            if (currentSum == target) return true;\n\n            // If the current sum is less than the target,\n            // move the left pointer\n            if (currentSum < target) left++;\n\n            // If the current sum is greater than\n            // the target, move the right pointer\n            else\n                right--;\n        }\n\n        return false;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "'''\n# Tree Node\nclass Node:\n    def __init__(self, val):\n        self.right = None\n        self.data = val\n        self.left = None\n\n'''\n\n\nclass Solution:\n    # Function to perform Inorder traversal and store the\n    # elements in an array\n    def inorderTraversal(self, root, inorder):\n        if root is None:\n            return\n\n        self.inorderTraversal(root.left, inorder)\n\n        # Store the current node's value\n        inorder.append(root.data)\n\n        self.inorderTraversal(root.right, inorder)\n\n    # Function to find if there exists a pair with a\n    # given sum in the BST\n    def findTarget(self, root, target):\n        # Create an auxiliary array and store Inorder traversal\n        inorder = []\n        self.inorderTraversal(root, inorder)\n\n        # Use two-pointer technique to find the pair with given sum\n        left, right = 0, len(inorder) - 1\n\n        while left < right:\n            currentSum = inorder[left] + inorder[right]\n\n            # If the pair is found, return true\n            if currentSum == target:\n                return True\n\n            # If the current sum is less than the target,\n            # move the left pointer\n            if currentSum < target:\n                left += 1\n\n            # If the current sum is greater than\n            # the target, move the right pointer\n            else:\n                right -= 1\n\n        return False\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/*\nclass Node\n{\n    constructor(x){\n        this.data=x;\n        this.left=null;\n        this.right=null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to perform Inorder traversal and store the\n    // elements in an array\n    inorderTraversal(root, inorder) {\n        if (root === null) return;\n\n        this.inorderTraversal(root.left, inorder);\n\n        // Store the current node's value\n        inorder.push(root.data);\n\n        this.inorderTraversal(root.right, inorder);\n    }\n\n    // Function to find if there exists a pair with a\n    // given sum in the BST\n    findTarget(root, target) {\n\n        // Create an auxiliary array and store Inorder traversal\n        let inorder = [];\n        this.inorderTraversal(root, inorder);\n\n        // Use two-pointer technique to find the pair with given sum\n        let left = 0, right = inorder.length - 1;\n\n        while (left < right) {\n            let currentSum = inorder[left] + inorder[right];\n\n            // If the pair is found, return true\n            if (currentSum === target) return true;\n\n            // If the current sum is less than the target,\n            // move the left pointer\n            if (currentSum < target) left++;\n\n            // If the current sum is greater than\n            // the target, move the right pointer\n            else\n                right--;\n        }\n\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}