{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705604,
            "title": "Find all distinct subset (or subsequence) sums",
            "titleSlug": "find-all-distinct-subset-or-subsequence-sums4424",
            "content": "<p><span style=\"font-size:18px\">Given a set of integers, find all distinct sums that can be generated from the subsets of the given sets.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>nums = {1,2}\r\n<strong>Output: </strong>{0,1,2,3}\r\n<strong>Explanation: </strong>Four distinct sums can be\r\ncalculated which are 0, 1, 2 and 3.\r\n0 if we do not choose any number.\r\n1 if we choose only 1.\r\n2 if we choose only 2.\r\n3 if we choose 1 and 2.</span>\r\n\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>nums = {1,2,3}\r\n<strong>Output: </strong>{0,1,2,3,4,5,6}\r\n<strong>Explanation: </strong>Seven distinct sum can be calculated\r\nwhich are 0, 1, 2, 3, 4, 5 and 6.\r\n0 if we do not choose any number.\r\n1 if we choose only 1.\r\n2 if we choose only 2.\r\n3 if we choose only 3.\r\n4 if we choose 1 and 3.\r\n5 if we choose 2 and 3.\r\n6 if we choose 1, 2 and 3.</span>\r\n\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>DistinictSum()&nbsp;</strong>which takes nums as input parameter and returns a list containing the distinict sum in increasing order,</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n * sum) where sum = sum of all elements of nums.<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(n * sum)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= length of nums &lt;= 10<sup>2</sup></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= nums[i] &lt;= 10</span><sup>2</sup></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of integers, find all distinct sums that can be generated from the subsets of the given set. Return the distinct sums in increasing order.",
                "constraints": [
                    "1 <= length of nums <= 100",
                    "1 <= nums[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "{1, 2}",
                        "output": "{0, 1, 2, 3}",
                        "explanation": "Possible subset sums: \n- Empty set: 0\n- {1}: 1\n- {2}: 2\n- {1, 2}: 1 + 2 = 3"
                    },
                    {
                        "input": "{1, 2, 3}",
                        "output": "{0, 1, 2, 3, 4, 5, 6}",
                        "explanation": "Possible subset sums: \n- Empty set: 0\n- {1}: 1\n- {2}: 2\n- {3}: 3\n- {1, 2}: 3\n- {1, 3}: 4\n- {2, 3}: 5\n- {1, 2, 3}: 6"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use dynamic programming.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\npublic:\r\n\tvector<int> DistinctSum(vector<int>nums){\r\n\t\tint n = nums.size();\r\n\t\tint sum = 0;\r\n\t\tfor(auto i: nums)sum += i;\r\n\t\tvector<vector<bool>>dp(n+1, vector<bool>(sum+1, false));\r\n\t\tfor(int i = 0; i <= n; i++)dp[i][0] = true;\r\n\t\tfor(int i = 1; i <= n; i++){\r\n\t\t\tdp[i][nums[i-1]] = true;\r\n\t\t\tfor(int j = 1; j <= sum; j++){\r\n\t\t\t\tif(dp[i-1][j]){\r\n\t\t\t\t\tdp[i][j] = true;\r\n\t\t\t\t\tdp[i][j + nums[i-1]] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvector<int>ans;\r\n\t\tfor(int j = 0; j <= sum; j++){\r\n\t\t\tif(dp[n][j])ans.push_back(j);\r\n\t\t}\r\n\t\treturn ans;\r\n\t}\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    //Tabulation Solution\r\n    \r\n    public int[] DistinctSum(int[] nums)\r\n    {\r\n        int n = nums.length;\r\n    \tint sum = 0;\r\n    \tfor(int i: nums)sum += i;\r\n        boolean dp[][]=new boolean[n+1][sum+1];\r\n    \tfor(int i = 0; i <= n; i++)dp[i][0] = true;\r\n    \tfor(int i = 1; i <= n; i++){\r\n    \t\tdp[i][nums[i-1]] = true;\r\n    \t\tfor(int j = 1; j <= sum; j++){\r\n    \t\t\tif(dp[i-1][j]){\r\n    \t\t\t\tdp[i][j] = true;\r\n    \t\t\t\tdp[i][j + nums[i-1]] = true;\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \tArrayList<Integer> ans=new ArrayList<>();\r\n    \tfor(int j = 0; j <= sum; j++){\r\n    \t\tif(dp[n][j])ans.add(j);\r\n    \t}\r\n    \tint A[]=new int[ans.size()];\r\n    \tfor(int i=0;i<ans.size();i++){\r\n    \t    A[i]=ans.get(i);\r\n    \t}\r\n    \treturn A;\r\n        \r\n    }\r\n    \r\n    //Memoization Solution\r\n    \r\n    // int dp[][];\r\n    // public int[] DistinctSum(int[] nums)\r\n    // {\r\n    //     // Code here\r\n    //     dp=new int[nums.length+1][10001];\r\n    //     fun(nums,0,0);\r\n    //     ArrayList<Integer> arr=new ArrayList<>();\r\n        \r\n    //     int in=0;\r\n    //     for(int i=0;i<10001;i++){\r\n    //         if(dp[nums.length][i]==1){\r\n    //             arr.add(i);\r\n    //         }\r\n    //     }\r\n    //     int ar[]=new int[arr.size()];\r\n    //     for(int i:arr){\r\n    //         ar[in++]=i;\r\n    //     }\r\n    //     return ar;\r\n    // }\r\n    // public void fun(int nums[],int i,int sum)\r\n    // {\r\n    //     if(dp[i][sum]!=0){\r\n    //         return;\r\n    //     }\r\n    //     if(i==nums.length){\r\n    //         dp[i][sum]=1;\r\n    //         return;\r\n    //     }\r\n    //     fun(nums,i+1,sum);\r\n    //     fun(nums,i+1,nums[i]+sum);\r\n    //     dp[i][sum]=1;\r\n    // }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}