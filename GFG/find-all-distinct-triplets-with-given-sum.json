{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876765,
            "title": "Find all distinct triplets with given sum",
            "titleSlug": "find-all-distinct-triplets-with-given-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>, and an integer <strong>target</strong>, find all possible <strong>unique</strong> triplets in the array whose sum is equal to the given <strong>target</strong> value. We can return triplets in any order, but all the returned triplets should be <strong>internally sorted</strong>, i.e., for any triplet [q1, q2, q3], the condition q1 &le; q2 &le; q3 should hold.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">arr[] = [12, 3, 6, 1, 6, 9], target = 24 </span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>[[3, 9, 12], [6, 6, 12]]<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">Triplets with sum 24 are (3, 9, 12) and (6, 6, 12). </span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1, 1, 1], target = 3\n<strong>Output: </strong>[[1, 1, 1]]<strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">Triplets with sum 3 are (1, 1, 1). </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 12, 10, 15],</span><span style=\"font-size: 18px;\"> target = 32</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>[[10, 10, 12]]</span><span ><strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">Triplets with sum 32 are (10, 10, 12).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>3 &lt;= arr.size() &lt;= 10<sup>3</sup><strong><br /></strong></span><span style=\"font-size: 18px;\">0 &lt;= arr[i] </span><span style=\"font-size: 18px;\">&lt;= 10<sup>4</sup></span><span style=\"font-size: 18px;\"><br /></span><span style=\"font-size: 18px;\">1 &lt;= target &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find all unique triplets that sum to a specified target value. The triplets should be internally sorted (q1 <= q2 <= q3) and the order of the triplets in the output does not matter.",
                "constraints": [
                    "3 <= arr.size() <= 1000",
                    "0 <= arr[i] <= 10000",
                    "1 <= target <= 10000"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [12, 3, 6, 1, 6, 9], target = 24",
                        "output": "[[3, 9, 12], [6, 6, 12]]",
                        "explanation": "The triplets (3, 9, 12) and (6, 6, 12) are the only unique combinations in the given array that sum up to 24."
                    },
                    {
                        "input": "arr[] = [1, 1, 1, 1], target = 3",
                        "output": "[[1, 1, 1]]",
                        "explanation": "The only triplet that sums to 3 is (1, 1, 1)."
                    },
                    {
                        "input": "arr[] = [10, 12, 10, 15], target = 32",
                        "output": "[[10, 10, 12]]",
                        "explanation": "The triplet (10, 10, 12) sums up to 32 and is the only unique combination."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use sorting and a two-pointer approach to find triplets that sum to the target, skipping duplicates along the way.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// User function Template for C++\nclass Solution {\n  public:\n    vector<vector<int>> threeSum(vector<int> &arr, int target) {\n        vector<vector<int>> res;\n        int n = arr.size();\n\n        sort(arr.begin(), arr.end());\n\n        for (int i = 0; i < n; i++) {\n\n            // Skip duplicates for i\n            if (i > 0 && arr[i] == arr[i - 1])\n                continue;\n\n            // Two pointer technique\n            int j = i + 1, k = n - 1;\n            while (j < k) {\n                int sum = arr[i] + arr[j] + arr[k];\n                if (sum == target) {\n                    vector<int> curr = {arr[i], arr[j], arr[k]};\n                    res.push_back(curr);\n                    j++;\n                    k--;\n\n                    // Skip duplicates for j and k\n                    while (j < n && arr[j] == arr[j - 1])\n                        j++;\n                    while (k > j && arr[k] == arr[k + 1])\n                        k--;\n                }\n\n                else if (sum < target) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<List<Integer>> threeSum(int[] arr, int target) {\n        List<List<Integer>> res = new ArrayList<>();\n        int n = arr.length;\n\n        Arrays.sort(arr); // Sort the array\n\n        for (int i = 0; i < n; i++) {\n            // Skip duplicates for i\n            if (i > 0 && arr[i] == arr[i - 1]) continue;\n\n            // Two-pointer technique\n            int j = i + 1, k = n - 1;\n            while (j < k) {\n                int sum = arr[i] + arr[j] + arr[k];\n                if (sum == target) {\n                    res.add(Arrays.asList(arr[i], arr[j], arr[k]));\n                    j++;\n                    k--;\n\n                    // Skip duplicates for j and k\n                    while (j < k && arr[j] == arr[j - 1]) j++;\n                    while (j < k && arr[k] == arr[k + 1]) k--;\n                } else if (sum < target) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# User function Template for Python\nclass Solution:\n\n    def threeSum(self, arr, target):\n        res = []\n        arr.sort()  # Sort the array\n        n = len(arr)\n\n        for i in range(n):\n            # Skip duplicates for i\n            if i > 0 and arr[i] == arr[i - 1]:\n                continue\n\n            # Two-pointer technique\n            j, k = i + 1, n - 1\n            while j < k:\n                total = arr[i] + arr[j] + arr[k]\n                if total == target:\n                    res.append([arr[i], arr[j], arr[k]])\n                    j += 1\n                    k -= 1\n\n                    # Skip duplicates for j and k\n                    while j < n and arr[j] == arr[j - 1]:\n                        j += 1\n                    while j < k and arr[k] == arr[k + 1]:\n                        k -= 1\n                elif total < target:\n                    j += 1\n                else:\n                    k -= 1\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number[]} arr\n     * @param {number} target\n     * @return {number[][]}\n     */\n    threeSum(arr, target) {\n        let res = [];\n        arr.sort((a, b) => a - b); // Sort the array\n        const n = arr.length;\n\n        for (let i = 0; i < n; i++) {\n            // Skip duplicates for i\n            if (i > 0 && arr[i] === arr[i - 1]) {\n                continue;\n            }\n\n            // Two-pointer technique\n            let j = i + 1, k = n - 1;\n            while (j < k) {\n                const sum = arr[i] + arr[j] + arr[k];\n                if (sum === target) {\n                    res.push([ arr[i], arr[j], arr[k] ]);\n                    j++;\n                    k--;\n\n                    // Skip duplicates for j and k\n                    while (j < n && arr[j] === arr[j - 1]) j++;\n                    while (j < k && arr[k] === arr[k + 1]) k--;\n                } else if (sum < target) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}