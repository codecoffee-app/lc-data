{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704633,
            "title": "Factorials Less than or Equal to n",
            "titleSlug": "find-all-factorial-numbers-less-than-or-equal-to-n3548",
            "content": "<p><span style=\"font-size: 18px;\">A number <strong>n</strong> is called a factorial number if it is the factorial of a positive integer. For example, the first few factorial numbers are 1, 2, 6, 24, 120,<br />Given a number <strong>n</strong>, the task is to return the list/vector of the factorial numbers smaller than or equal to n.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 3</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">1 2</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">The first factorial number is 1 which is less than equal to n. The second number is 2 which is less than equal to n,but the third factorial number is 6 which is greater than n. So we print only 1 and 2.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 6</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">1 2 6</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">The first three factorial numbers are less than equal to n but the fourth factorial number 24 is greater than n. So we print only first three factorial numbers.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=n&lt;=10<sup>18</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number 'n', find all factorial numbers (numbers that are the factorial of a positive integer) that are less than or equal to 'n'. A factorial number is the product of all positive integers less than or equal to a given integer (e.g., 1! = 1, 2! = 2, 3! = 6, etc.). Return a list containing these factorial numbers in ascending order.",
                "constraints": [
                    "1 <= n <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "1 2",
                        "explanation": "The factorial numbers are: 1 (1!), 2 (2!), 6 (3!). Since 'n' is 3, we only include 1 and 2 as they are less than or equal to 3."
                    },
                    {
                        "input": "6",
                        "output": "1 2 6",
                        "explanation": "The factorial numbers are: 1 (1!), 2 (2!), 6 (3!), 24 (4!). Since 'n' is 6, we only include 1, 2, and 6 as they are less than or equal to 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Generate the factorial numbers one by one till it is less than N.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find factorial numbers less than or equal to N.\n    vector<long long> factorialNumbers(long long n) {\n        vector<long long> ans;\n        long long int fact = 1;\n        int x = 2;\n\n        // Iterating until factorial is less than or equal to N.\n        while (fact <= n) {\n            // Adding factorial to the answer list.\n            ans.push_back(fact);\n\n            // Calculating next factorial by multiplying with next number.\n            fact = fact * x;\n            x++;\n        }\n        // Returning the list of factorial numbers.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def factorialNumbers(self, n):\n        fac = 1  # initialize the factorial to 1\n        x = 2  # initialize x to 2\n        ans = []  # create an empty list to store the factorial numbers\n        while fac <= n:  # iterate until the factorial is less than or equal to N\n            ans.append(fac)  # add the factorial to the list\n            fac *= x  # calculate the next factorial by multiplying it with x\n            x += 1  # increase the value of x by 1 for the next iteration\n        return ans  # return the list of factorial numbers\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\n// Do Not Use any type of \"using\" statement or '#include' statement in source\n// code/library.\nclass Solution {\n    // Complete this function\n    //  The Function should be inside the class Solution\n    public List<long> factorialNumbers(long n) {\n        List<long> ans = new List<long>();\n        long fact = 1;\n        int x = 2;\n\n        // Iterating until factorial is less than or equal to N.\n        while (fact <= n) {\n            // Adding factorial to the answer list.\n            ans.Add(fact);\n\n            // Calculating next factorial by multiplying with next number.\n            fact = fact * x;\n            x++;\n        }\n        // Returning the list of factorial numbers.\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number} N\n * @returns {number[]}\n */\n\nclass Solution {\n    // Function to calculate the factorial of a number.\n    factorialNumbers(n) {\n        let fac = 1;       // initialize the factorial to 1\n        let x = 2;         // initialize x to 2\n        let ans = [];      // create an empty array to store the factorial numbers\n        while (fac <= n) { // iterate until the factorial is less than or equal to N\n            ans.push(fac); // add the factorial to the array\n            fac *= x;      // calculate the next factorial by multiplying it with x\n            x += 1;        // increase the value of x by 1 for the next iteration\n        }\n        return ans; // return the array of factorial numbers\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}