{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702139,
            "title": "4 Sum - All Quadruples",
            "titleSlug": "find-all-four-sum-numbers1732",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of integers and another integer <strong>target</strong>. Find all <strong>unique&nbsp;</strong>quadruples from the given array that sums up to <strong>target</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong>Note:</strong> All the quadruples should be internally sorted, ie for any quadruple [q1, q2, q3, q4] it should be : q1 &lt;= q2 &lt;= q3 &lt;= q4.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 0, 2, 1, 1], target = 3<br /><strong>Output:</strong> [0, 0, 1, 2] <strong>\nExplanation: </strong>Sum of 0, 0, 1, 2 is equal to 3.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 2, 3, 4, 5, 7, 8], target = 23\n<strong>Output: </strong>[[2, 3, 8, 10], [2, 4, 7, 10], [3, 5, 7, 8]] <strong>\nExplanation: </strong>Sum of 2, 3, 8, 10 is 23, sum of 2, 4, 7, 10 is 23 and sum of 3, 5, 7, 8 is also 23.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 0, 2, 1, 1], target = 2<br /><strong>Output:</strong> [0, 0, 1, 1] <strong>\nExplanation: </strong>Sum of 0, 0, 1, 1 is equal to 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 200<br />-10<sup>6</sup> &lt;= target &lt;= 10<sup>6</sup><br />-10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]` and a target integer, find all unique quadruples (sets of four numbers) within the array that sum up to the target value. The quadruples must be internally sorted in non-decreasing order (q1 <= q2 <= q3 <= q4).",
                "constraints": [
                    "1 <= arr.size() <= 200",
                    "-10^6 <= target <= 10^6",
                    "-10^6 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [0, 0, 2, 1, 1], target = 3",
                        "output": "[0, 0, 1, 2]",
                        "explanation": "The quadruple [0, 0, 1, 2] sums to 3 and is sorted."
                    },
                    {
                        "input": "arr[] = [10, 2, 3, 4, 5, 7, 8], target = 23",
                        "output": "[[2, 3, 8, 10], [2, 4, 7, 10], [3, 5, 7, 8]]",
                        "explanation": "The quadruples [2, 3, 8, 10], [2, 4, 7, 10], and [3, 5, 7, 8] each sum to 23 and are sorted. The output is a list of all such unique quadruples."
                    },
                    {
                        "input": "arr[] = [0, 0, 2, 1, 1], target = 2",
                        "output": "[0, 0, 1, 1]",
                        "explanation": "The quadruple [0, 0, 1, 1] sums to 2 and is sorted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the array. Take two elements from the array using two nested loops and take the other two elements using the pointer technique.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "oyo-rooms",
            "adobe",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<vector<int>> fourSum(vector<int> &arr, int target) {\n        vector<vector<int>> res;\n        int n = arr.size();\n\n        // Sort the array\n        sort(arr.begin(), arr.end());\n\n        // Generate quadruplets\n        for (int i = 0; i < n; i++) {\n\n            // Skip duplicates for i\n            if (i > 0 && arr[i] == arr[i - 1])\n                continue;\n\n            for (int j = i + 1; j < n; j++) {\n\n                // Skip duplicates for j\n                if (j > i + 1 && arr[j] == arr[j - 1])\n                    continue;\n\n                int k = j + 1, l = n - 1;\n\n                // Two pointers approach\n                while (k < l) {\n                    int sum = arr[i] + arr[j] + arr[k] + arr[l];\n                    if (sum == target) {\n                        res.push_back({arr[i], arr[j], arr[k], arr[l]});\n                        k++;\n                        l--;\n\n                        // Skip duplicates for k and l\n                        while (k < l && arr[k] == arr[k - 1])\n                            k++;\n                        while (k < l && arr[l] == arr[l + 1])\n                            l--;\n                    } else if (sum < target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public List<List<Integer>> fourSum(int[] arr, int target) {\n        List<List<Integer>> res = new ArrayList<>();\n        int n = arr.length;\n\n        // Sort the array\n        Arrays.sort(arr);\n\n        // Generate quadruplets\n        for (int i = 0; i < n; i++) {\n\n            // Skip duplicates for i\n            if (i > 0 && arr[i] == arr[i - 1]) continue;\n\n            for (int j = i + 1; j < n; j++) {\n\n                // Skip duplicates for j\n                if (j > i + 1 && arr[j] == arr[j - 1]) continue;\n\n                int k = j + 1;\n                int l = n - 1;\n\n                // Two pointers approach\n                while (k < l) {\n                    int sum = arr[i] + arr[j] + arr[k] + arr[l];\n                    if (sum == target) {\n                        res.add(Arrays.asList(arr[i], arr[j], arr[k], arr[l]));\n                        k++;\n                        l--;\n\n                        // Skip duplicates for k and l\n                        while (k < l && arr[k] == arr[k - 1]) k++;\n                        while (k < l && arr[l] == arr[l + 1]) l--;\n                    } else if (sum < target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def fourSum(self, arr, target):\n        res = []\n        n = len(arr)\n\n        # Sort the array\n        arr.sort()\n\n        # Generate quadruplets\n        for i in range(n):\n\n            # Skip duplicates for i\n            if i > 0 and arr[i] == arr[i - 1]:\n                continue\n\n            for j in range(i + 1, n):\n\n                # Skip duplicates for j\n                if j > i + 1 and arr[j] == arr[j - 1]:\n                    continue\n\n                k, l = j + 1, n - 1\n\n                # Two pointers approach\n                while k < l:\n                    total = arr[i] + arr[j] + arr[k] + arr[l]\n                    if total == target:\n                        res.append([arr[i], arr[j], arr[k], arr[l]])\n                        k += 1\n                        l -= 1\n\n                        # Skip duplicates for k and l\n                        while k < l and arr[k] == arr[k - 1]:\n                            k += 1\n                        while k < l and arr[l] == arr[l + 1]:\n                            l -= 1\n                    elif total < target:\n                        k += 1\n                    else:\n                        l -= 1\n\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public List<List<int>> fourSum(List<int> arr, int target) {\n        List<List<int>> res = new List<List<int>>();\n        int n = arr.Count;\n\n        // Sort the array\n        arr.Sort();\n\n        // Generate quadruplets\n        for (int i = 0; i < n; i++) {\n            // Skip duplicates for i\n            if (i > 0 && arr[i] == arr[i - 1]) continue;\n\n            for (int j = i + 1; j < n; j++) {\n                // Skip duplicates for j\n                if (j > i + 1 && arr[j] == arr[j - 1]) continue;\n\n                int k = j + 1, l = n - 1;\n\n                // Two pointers approach\n                while (k < l) {\n                    int sum = arr[i] + arr[j] + arr[k] + arr[l];\n                    if (sum == target) {\n                        res.Add(new List<int> { arr[i], arr[j], arr[k], arr[l] });\n                        k++;\n                        l--;\n\n                        // Skip duplicates for k and l\n                        while (k < l && arr[k] == arr[k - 1]) k++;\n                        while (k < l && arr[l] == arr[l + 1]) l--;\n                    } else if (sum < target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    fourSum(arr, target) {\n        let res = [];\n        let n = arr.length;\n\n        // Sort the array\n        arr.sort((a, b) => a - b);\n\n        // Generate quadruplets\n        for (let i = 0; i < n; i++) {\n\n            // Skip duplicates for i\n            if (i > 0 && arr[i] === arr[i - 1]) continue;\n\n            for (let j = i + 1; j < n; j++) {\n\n                // Skip duplicates for j\n                if (j > i + 1 && arr[j] === arr[j - 1]) continue;\n\n                let k = j + 1, l = n - 1;\n\n                // Two pointers approach\n                while (k < l) {\n                    let sum = arr[i] + arr[j] + arr[k] + arr[l];\n                    if (sum === target) {\n                        res.push([ arr[i], arr[j], arr[k], arr[l] ]);\n                        k++;\n                        l--;\n\n                        // Skip duplicates for k and l\n                        while (k < l && arr[k] === arr[k - 1]) k++;\n                        while (k < l && arr[l] === arr[l + 1]) l--;\n                    } else if (sum < target) {\n                        k++;\n                    } else {\n                        l--;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}