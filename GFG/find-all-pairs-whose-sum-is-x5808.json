{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703128,
            "title": "Find all pairs with a given sum",
            "titleSlug": "find-all-pairs-whose-sum-is-x5808",
            "content": "<p><span style=\"font-size: 18px;\">Given two unsorted arrays <strong>a[]</strong> &nbsp;and b<strong>[]</strong>, the task is to find all pairs whose sum equals <strong>x</strong> from both arrays.</span></p>\n<p><span style=\"font-size: 18px;\">Note:<strong>&nbsp;</strong>All pairs should be returned in <strong>increasing </strong>order of u. For eg. for two pairs (u<sub>1</sub>,v<sub>1</sub>) and (u<sub>2</sub>,v<sub>2</sub>), if u<sub>1&nbsp;</sub>&lt; u<sub>2</sub> then (u<sub>1</sub>,v<sub>1</sub>) should be returned first else second.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>target = 9, a[] = [1, 2, 4, 5, 7], b[] = [5, 6, 3, 4, 8]\n<strong>Output: <br /></strong>1 8\n4 5 \n5 4\n<strong>Explanation: </strong>(1, 8), (4, 5), (5, 4) are the pairs which sum to 9.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">target = 8, a[] = [-1, -2, 4, -6, 5, 7], b[] = [6, 3, 4, 0]\n</span><strong style=\"font-size: 18px;\">Output:</strong><span style=\"font-size: 18px;\">\n4 4 \n5 3<br /></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input</strong><span style=\"font-size: 18px;\">: target = 9, a[] = [1, 2, 4, 5, 7, 4], b[] = [5, 6, 3, 4, 8, 4]<br /><strong>Output</strong>:<br />1 8<br />4 5<br />4 5<br />5 4<br />5 4\n<strong>Explanation</strong>: (1, 8), (4, 5), (4, 5), (5, 4) and (5, 4) are the pairs which sum to 9.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr1.size, arr2.size &le; 10<sup>5</sup><br />-2*10<sup>4</sup> &le; target, arr1[i], arr2[i] &le; 2*10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two unsorted arrays `a[]` and `b[]`, find all pairs (u, v) such that `u` is an element of `a[]`, `v` is an element of `b[]`, and their sum equals a given target value `x`. Return all pairs in increasing order of `u`.",
                "constraints": [
                    "1 <= arr1.size, arr2.size <= 10^5",
                    "-2*10^4 <= target, arr1[i], arr2[i] <= 2*10^4"
                ],
                "testcases": [
                    {
                        "input": "target = 9, a[] = [1, 2, 4, 5, 7], b[] = [5, 6, 3, 4, 8]",
                        "output": "1 8\n4 5\n5 4",
                        "explanation": "The pairs (1, 8), (4, 5), and (5, 4) sum to 9. The pairs are presented in increasing order of the element from array `a[]`."
                    },
                    {
                        "input": "target = 8, a[] = [-1, -2, 4, -6, 5, 7], b[] = [6, 3, 4, 0]",
                        "output": "4 4\n5 3",
                        "explanation": "The pairs (4, 4) and (5, 3) sum to 8. The pairs are presented in increasing order of the element from array `a[]`."
                    },
                    {
                        "input": "target = 9, a[] = [1, 2, 4, 5, 7, 4], b[] = [5, 6, 3, 4, 8, 4]",
                        "output": "1 8\n4 5\n4 5\n5 4\n5 4",
                        "explanation": "The pairs (1, 8), (4, 5), (4, 5), (5, 4), and (5, 4) sum to 9. The pairs are presented in increasing order of the element from array `a[]`. Duplicate pairs are included if the corresponding values exist multiple times in the arrays."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Hash elements of the first array. For each element in the second array, check if the&nbsp;<em><span class=\"katex\"><span class=\"katex-mathml\">x&minus;element </span></span></em>is in the hash. If found, could you print both elements?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "makemytrip",
            "facebook",
            "united-health-group"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find all pairs with given sum.\n    vector<pair<int, int>> allPairs(int target, vector<int> &arr1, vector<int> &arr2) {\n        // Creating a map to store the occurrences of numbers from arr2.\n        unordered_map<int, int> mp2;\n        // Creating a vector to store the pairs.\n        vector<pair<int, int>> vp;\n\n        // Sorting array arr1 in ascending order.\n        sort(arr1.begin(), arr1.end());\n\n        // Counting occurrences of numbers from arr2.\n        for (int i = 0; i < arr2.size(); i++) {\n            mp2[arr2[i]]++;\n        }\n\n        // Iterating over array arr1 to find pairs.\n        for (int i = 0; i < arr1.size(); i++) {\n            // Checking if the complement of arr1[i] exists in arr2.\n            for (int ct = 0; ct < mp2[target - arr1[i]]; ct++) {\n                // If yes, adding the pair to the vector.\n                vp.push_back({arr1[i], target - arr1[i]});\n            }\n        }\n        // Returning the vector of pairs.\n        return vp;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public pair[] allPairs(int target, int arr1[], int arr2[]) {\n        // Your code goes here\n        // Creating a map to store the occurrences of numbers from arr2.\n        Map<Integer, Integer> mp2 = new HashMap<>();\n        // Creating a list to store the pairs.\n        List<pair> vp = new ArrayList<>();\n\n        // Sorting array arr1 in ascending order.\n        Arrays.sort(arr1);\n\n        // Counting occurrences of numbers from arr2.\n        for (int i = 0; i < arr2.length; i++) {\n            mp2.put(arr2[i], mp2.getOrDefault(arr2[i], 0) + 1);\n        }\n\n        // Iterating over array arr1 to find pairs.\n        for (int i = 0; i < arr1.length; i++) {\n            // Checking if the complement of arr1[i] exists in arr2.\n            for (int ct = 0; ct < mp2.getOrDefault(target - arr1[i], 0); ct++) {\n                vp.add(new pair(arr1[i], target - arr1[i]));\n            }\n        }\n\n        // Converting list of pairs to array of pairs\n        pair[] result = new pair[vp.size()];\n        result = vp.toArray(result);\n\n        // Returning the array of pairs.\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def allPairs(self, target, arr1, arr2):\n        arr1.sort()\n\n        # Create a dictionary to store counts of each element in arr2\n        element_count = {}\n        for num in arr2:\n            element_count[num] = element_count.get(num, 0) + 1\n\n        solutions = []\n\n        for i in arr1:\n            # Check if target - i is in arr2 (i.e., in the dictionary)\n            complement = target - i\n            if complement in element_count:\n                # Append the pair the number of times complement appears in arr2\n                solutions.extend([(i, complement)] * element_count[complement])\n\n        return solutions\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    allPairs(target, arr1, arr2) {\n        let n = arr1.length, m = arr2.length;\n        // Initialize an empty map to store the frequencies of elements in array B\n        let mp2 = new Map();\n\n        // Initialize an empty array to store the pairs\n        let vp = [];\n\n        // Sort array A in ascending order\n        arr1.sort((a, b) => a - b);\n\n        // Count the frequencies of elements in array B\n        for (let i = 0; i < m; i++) {\n            if (mp2.has(arr2[i])) {\n                mp2.set(arr2[i], mp2.get(arr2[i]) + 1);\n            } else {\n                mp2.set(arr2[i], 1);\n            }\n        }\n\n        // Iterate over array A\n        for (let i = 0; i < n; i++) {\n            let diff = target - arr1[i];\n            // Check if the complement of A[i] exists in array B\n            if (mp2.has(diff)) {\n                // Add the pair (A[i], diff) to the result array\n                for (let ct = 0; ct < mp2.get(diff); ct++) {\n                    vp.push([ arr1[i], diff ]);\n                }\n            }\n        }\n\n        // Sort the resulting array\n        vp.sort((a, b) => {\n            if (a[0] === b[0]) {\n                return a[1] - b[1];\n            }\n            return a[0] - b[0];\n        });\n\n        return vp;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}