{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876221,
            "title": "All Pairs With Given Sum",
            "titleSlug": "find-all-pairs-with-given-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>0 indexed</strong> array <strong>arr[]</strong> and a <strong>target</strong> value, the task is to find all possible indices <strong>(i, j)</strong> of pairs <strong>(arr[i], arr[j])</strong> whose sum is equal to <strong>target</strong> and <strong>i != j</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:&nbsp;</strong></span><span >Return the list of pairs sorted lexicographically by the first element, and then by the second element if necessary.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">arr[] = [10, 20, 30, 20, 10, 30], target = 50 </span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>[[1, 2], [1, 5], [2, 3], [3, 5]]<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">All pairs with sum = 50 are:<br /></span><span style=\"font-size: 18px;\">arr[1] + arr[2] = 20 + 30 = 50 </span><br /><span style=\"font-size: 18px;\">arr[1] + arr[5] = 20 + 30 = 50 </span><br /><span style=\"font-size: 18px;\">arr[2] + arr[3] = 30 + 20 = 50 </span><br /><span style=\"font-size: 18px;\">arr[3] + arr[5] = 20 + 30 = 50</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">arr[] = [10, 20, 30, 20, 10, 30], target = 80 </span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>[]<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">No pairs with sum = 80.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>1 &lt;= arr.size() &lt;= 10<sup>3</sup><strong><br /></strong></span><span style=\"font-size: 18px;\">0 &lt;= arr[i] </span><span style=\"font-size: 18px;\">&lt;= 10<sup>4<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= target &lt;= 10</span><sup>4</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 0-indexed array `arr[]` and a target value, find all unique pairs of indices (i, j) such that `arr[i] + arr[j] == target` and `i != j`. Return the list of pairs sorted lexicographically. Lexicographical order implies sorting first by the first element (i) and then by the second element (j) if the first elements are the same.",
                "constraints": [
                    "1 <= arr.size() <= 1000",
                    "0 <= arr[i] <= 10000",
                    "1 <= target <= 10000"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [10, 20, 30, 20, 10, 30], target = 50",
                        "output": "[[1, 2], [1, 5], [2, 3], [3, 5]]",
                        "explanation": "The pairs with a sum of 50 are (20, 30) at indices (1, 2), (1, 5), (2, 3), and (3, 5). These pairs are then sorted lexicographically."
                    },
                    {
                        "input": "arr[] = [10, 20, 30, 20, 10, 30], target = 80",
                        "output": "[]",
                        "explanation": "There are no pairs in the array that sum up to 80."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a hashmap to track complements while iterating through the array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<vector<int>> findAllPairs(vector<int> &arr, int target) {\n        int n = arr.size();\n        vector<vector<int>> res;\n\n        unordered_map<int, vector<int>> mp;\n\n        for (int i = 0; i < n; i++) {\n\n            // Check if there exists an element that can pair with arr[i]\n            if (mp.find(target - arr[i]) != mp.end()) {\n\n                // If such an element exists, iterate through its indices\n                for (int idx : mp[target - arr[i]]) {\n                    res.push_back({idx, i});\n                }\n            }\n\n            // Store the index of the current element in the map\n            mp[arr[i]].push_back(i);\n        }\n        sort(res.begin(), res.end());\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<List<Integer>> findAllPairs(int[] arr, int target) {\n        // Code here\n        int n = arr.length;\n        List<List<Integer>> res = new ArrayList<>();\n\n        Map<Integer, List<Integer>> mp = new HashMap<>();\n\n        for (int i = 0; i < n; i++) {\n            // Check if there exists an element that can pair with arr[i]\n            if (mp.containsKey(target - arr[i])) {\n                // If such an element exists, iterate through its indices\n                for (int idx : mp.get(target - arr[i])) {\n                    res.add(Arrays.asList(idx, i));\n                }\n            }\n\n            // Store the index of the current element in the map\n            mp.putIfAbsent(arr[i], new ArrayList<>());\n            mp.get(arr[i]).add(i);\n        }\n\n        // Sorting the result list of lists\n        res.sort(Comparator.comparingInt(a -> a.get(0)));\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# User function Template for Python\nclass Solution:\n\n    def findAllPairs(self, arr, target):\n        # Your code here\n        n = len(arr)\n        res = []\n        mp = {}\n\n        for i in range(n):\n            # Check if there exists an element that can pair with arr[i]\n            if target - arr[i] in mp:\n                # If such an element exists, iterate through its indices\n                for idx in mp[target - arr[i]]:\n                    res.append([idx, i])\n\n            # Store the index of the current element in the map\n            if arr[i] not in mp:\n                mp[arr[i]] = []\n            mp[arr[i]].append(i)\n\n        # Sorting the result list of lists by the first element\n        res.sort(key=lambda x: x[0])\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    /**\n     * @param {number[]} arr\n     * @param {number} target\n     * @return {number[][]}\n     */\n    findAllPairs(arr, target) {\n        // write your code here\n        let n = arr.length;\n        let res = [];\n        let mp = new Map();\n\n        for (let i = 0; i < n; i++) {\n            // Check if there exists an element that can pair with arr[i]\n            if (mp.has(target - arr[i])) {\n                // If such an element exists, iterate through its indices\n                let indices = mp.get(target - arr[i]);\n                for (let idx of indices) {\n                    res.push([ idx, i ]);\n                }\n            }\n\n            // Store the index of the current element in the map\n            if (!mp.has(arr[i])) {\n                mp.set(arr[i], []);\n            }\n            mp.get(arr[i]).push(i);\n        }\n\n        // Sorting the result list of lists by the first element\n        res.sort((a, b) => a[0] - b[0]);\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}