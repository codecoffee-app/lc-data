{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709746,
            "title": "Find all possible paths from top to bottom",
            "titleSlug": "find-all-possible-paths-from-top-to-bottom",
            "content": "<p><span style=\"font-size:18px\">Given a N x M grid. Find All possible paths from top left to bottom right.F<em>rom each cell you can either move only to right or down</em>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong></span><span style=\"font-size:18px\">1 2 3</span>\r\n<span style=\"font-size:18px\">\\t 4 5 6</span>\r\n<span style=\"font-size:18px\"><strong>Output: </strong></span><span style=\"font-size:18px\">1 4 5 6</span>\r\n<span style=\"font-size:18px\">\\t  1 2 5 6 </span>\r\n<span style=\"font-size:18px\">\\t  1 2 3 6</span>\r\n<span style=\"font-size:18px\"><strong>Explanation: </strong>We can see that there are 3 </span>\r\n<span style=\"font-size:18px\">paths from the cell (0,0) to (1,2).</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong></span><span style=\"font-size:18px\">1 2</span>\r\n<span style=\"font-size:18px\">\\t 3 4</span>\r\n<span style=\"font-size:18px\"><strong>Output: </strong></span><span style=\"font-size:18px\">1 2 4</span>\r\n<span style=\"font-size:18px\">\\t  1 3 4</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>findAllPossiblePaths()&nbsp;</strong>which takes&nbsp;two integers n,m and grid[][]&nbsp;&nbsp;as input parameters and returns all possible paths from the top left cell to bottom right cell&nbsp;in a 2d array.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(2^N*M)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= n,m &lt;= 10<sup>&nbsp;</sup><br />\r\n1 &lt;= grid[i][j] &lt;= n*m<br />\r\nn * m &lt;&nbsp;20</span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N x M grid, find all possible paths from the top-left cell to the bottom-right cell. You can only move right or down from each cell.",
                "constraints": [
                    "1 <= n, m <= 10",
                    "1 <= grid[i][j] <= n*m",
                    "n * m < 20"
                ],
                "testcases": [
                    {
                        "input": "1 2 3\n4 5 6",
                        "output": "1 4 5 6\n1 2 5 6\n1 2 3 6",
                        "explanation": "There are three possible paths from the top-left cell (1) to the bottom-right cell (6): 1 -> 4 -> 5 -> 6, 1 -> 2 -> 5 -> 6, and 1 -> 2 -> 3 -> 6."
                    },
                    {
                        "input": "1 2\n3 4",
                        "output": "1 2 4\n1 3 4",
                        "explanation": "There are two possible paths from the top-left cell (1) to the bottom-right cell (4): 1 -> 2 -> 4 and 1 -> 3 -> 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Recursively brute force solution to find all the paths.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\npublic:\r\n    // a function which check whether our step is safe or not\r\n    bool isSafe(int r, int c, vector<vector<int>> &grid, int n, int m)\r\n    {\r\n        return (r < n and c < m and grid[r][c] != -1); // return true if all values satisfied else false\r\n    }\r\n\r\n    void findAllPossiblePaths(vector<vector<int>> &grid, int r, int c, int n, int m, vector<int> &ans, vector<vector<int>> &paths)\r\n    {\r\n        // when we hit the last cell we reach to destination then directly push the path\r\n        if (r == n - 1 and c == m - 1)\r\n        {\r\n            ans.push_back(grid[r][c]);\r\n            paths.push_back(ans); // function to display the path stored in ans vector\r\n            ans.pop_back();       // pop back because we need to backtrack to explore more path\r\n            return;\r\n        }\r\n\r\n        // we will store the current value in ch and mark the visited place as -1\r\n        int ch = grid[r][c];\r\n\r\n        ans.push_back(ch); // push the path in ans array\r\n        grid[r][c] = -1;   // mark the visited place with -1\r\n\r\n        // if is it safe to take next downward step then take it\r\n        if (isSafe(r + 1, c, grid, n, m))\r\n        {\r\n            findAllPossiblePaths(grid, r + 1, c, n, m, ans, paths);\r\n        }\r\n\r\n        // if is it safe to take next rightward step then take it\r\n        if (isSafe(r, c + 1, grid, n, m))\r\n        {\r\n            findAllPossiblePaths(grid, r, c + 1, n, m, ans, paths);\r\n        }\r\n\r\n        // backtracking step we need to make values original so to we can visit it by some another path\r\n        grid[r][c] = ch;\r\n\r\n        // remove the current path element we explore\r\n        ans.pop_back();\r\n        return;\r\n    }\r\n    vector<vector<int>> findAllPossiblePaths(int n, int m, vector<vector<int>> &grid)\r\n    {\r\n        vector<vector<int>> paths;\r\n        vector<int> ans;\r\n        findAllPossiblePaths(grid, 0, 0, n, m, ans, paths);\r\n        return paths;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Solution{\r\n    static boolean isSafe(int r, int c, int [][] grid, int n, int m)\r\n    {\r\n        return (r < n && c < m && grid[r][c] != -1); // return true if all values satisfied else false\r\n    }\r\n\r\n    static void findAllPossiblePaths(int [][] grid, int r, int c, int n, int m, ArrayList<Integer>ans, ArrayList<ArrayList<Integer>>paths)\r\n    {\r\n        // when we hit the last cell we reach to destination then directly push the path\r\n        if (r == n - 1 && c == m - 1)\r\n        {\r\n            ans.add(grid[r][c]);\r\n            ArrayList<Integer> clone = (ArrayList<Integer>)ans.clone();\r\n            paths.add(clone); // function to display the path stored in ans vector\r\n            ans.remove(ans.size()-1);       // pop back because we need to backtrack to explore more path\r\n            return;\r\n        }\r\n\r\n        // we will store the current value in ch and mark the visited place as -1\r\n        int ch = grid[r][c];\r\n\r\n        ans.add(ch); // push the path in ans array\r\n        grid[r][c] = -1;   // mark the visited place with -1\r\n\r\n        // if is it safe to take next downward step then take it\r\n        if (isSafe(r + 1, c, grid, n, m))\r\n        {\r\n            findAllPossiblePaths(grid, r + 1, c, n, m, ans, paths);\r\n        }\r\n\r\n        // if is it safe to take next rightward step then take it\r\n        if (isSafe(r, c + 1, grid, n, m))\r\n        {\r\n            findAllPossiblePaths(grid, r, c + 1, n, m, ans, paths);\r\n        }\r\n\r\n        // backtracking step we need to make values original so to we can visit it by some another path\r\n        grid[r][c] = ch;\r\n\r\n        // remove the current path element we explore\r\n        ans.remove(ans.size()-1);\r\n        return;\r\n    }\r\n    public static ArrayList<ArrayList<Integer>> findAllPossiblePaths(int n,int m, int[][] grid) {\r\n        ArrayList<ArrayList<Integer>> paths = new ArrayList<>();\r\n        ArrayList<Integer> ans = new ArrayList<>();\r\n        findAllPossiblePaths(grid, 0, 0, n, m, ans, paths);\r\n        return paths;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\nclass Solution:\n    def calculate(self,n,m,i,j,ans,temp,grid):\n        if(i>=n or j>=m):return    # Check if indices go out of bounds\n        \n        temp.append(grid[i][j])   # Append current element to the temporary list\n        \n        if(i==n-1 and j==m-1):\n            ans.append(temp[:])   # If reached the target, add the temporary list to the answer list\n        \n        self.calculate(n,m,i+1,j,ans,temp,grid)   # Recurse for down movement\n        self.calculate(n,m,i,j+1,ans,temp,grid)   # Recurse for right movement\n        temp.pop()    # Remove the last element from the temporary list to backtrack\n        \n    def findAllPossiblePaths(self, n : int, m : int, grid : List[List[int]]) -> List[List[int]]:\n        ans=[]    # Initialize answer list\n        temp=[]   # Initialize temporary list\n        self.calculate(n,m,0,0,ans,temp,grid)   # Call the recursive function\n        return ans   # Return the answer list",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    // a function which check whether our step is safe or not\n    private bool isSafe(int r, int c, List<List<int>> grid, int n, int m)\n    {\n        return (r < n && c < m && grid[r][c] != -1); // return true if all values satisfied else false\n    }\n\n    private void findAllPossiblePaths(List<List<int>> grid, int r, int c, int n, int m, List<int> ans, List<List<int>> paths)\n    {\n        // when we hit the last cell we reach to destination then directly push the path\n        if (r == n - 1 && c == m - 1)\n        {\n            ans.Add(grid[r][c]);\n            paths.Add(new List<int>(ans)); // function to display the path stored in ans vector\n            ans.RemoveAt(ans.Count - 1);       // pop back because we need to backtrack to explore more path\n            return;\n        }\n\n        // we will store the current value in ch and mark the visited place as -1\n        int ch = grid[r][c];\n\n        ans.Add(ch); // push the path in ans array\n        grid[r][c] = -1;   // mark the visited place with -1\n\n        // if is it safe to take next downward step then take it\n        if (isSafe(r + 1, c, grid, n, m))\n        {\n            findAllPossiblePaths(grid, r + 1, c, n, m, ans, paths);\n        }\n\n        // if is it safe to take next rightward step then take it\n        if (isSafe(r, c + 1, grid, n, m))\n        {\n            findAllPossiblePaths(grid, r, c + 1, n, m, ans, paths);\n        }\n\n        // backtracking step we need to make values original so to we can visit it by some another path\n        grid[r][c] = ch;\n\n        // remove the current path element we explore\n        ans.RemoveAt(ans.Count - 1);\n        return;\n    }\n    public List<List<int>> findAllPossiblePaths(int n, int m, List<List<int>> grid)\n    {\n        List<List<int>> paths = new List<List<int>>();\n        List<int> ans = new List<int>();\n        findAllPossiblePaths(grid, 0, 0, n, m, ans, paths);\n        return paths;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}