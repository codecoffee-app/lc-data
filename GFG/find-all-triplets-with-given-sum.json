{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876773,
            "title": "All triplets with given sum",
            "titleSlug": "find-all-triplets-with-given-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr[]</strong>, and an integer&nbsp;<strong>target</strong>, find all possible&nbsp;triplets in the array whose sum is equal to the given&nbsp;<strong>target</strong>&nbsp;value. We can return triplets in any order, but all the returned triplets should be&nbsp;<strong>internally sorted</strong>, i.e., for any triplet [q1, q2, q3], the condition q1 &le; q2 &le; q3 should hold.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">arr[] = [12, 3, 6, 1, 6, 9], target = 24 </span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>[[3, 9, 12], [6, 6, 12]]<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">Triplets with sum 24 are (3, 9, 12) and (6, 6, 12). </span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1, 1, 1], target = 3\n<strong>Output: </strong>[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]<strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">Triplets with sum 3 are (1, 1, 1), (1, 1, 1), (1, 1, 1) and (1, 1, 1). </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 12, 10, 15],</span><span style=\"font-size: 18px;\"> target = 32</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>[[10, 10, 12]]</span><span ><strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">Triplets with sum 32 are (10, 10, 12).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>3 &lt;= arr.size() &lt;= 10<sup>3</sup><strong><br /></strong></span><span style=\"font-size: 18px;\">0 &lt;= arr[i]&nbsp;</span><span style=\"font-size: 18px;\">&lt;= 10<sup>4</sup></span><span style=\"font-size: 18px;\"><br /></span><span style=\"font-size: 18px;\">1 &lt;= target &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and an integer `target`, find all possible triplets in the array whose sum is equal to the given `target` value. The triplets can be returned in any order, but each returned triplet must be internally sorted (i.e., for any triplet [q1, q2, q3], the condition q1 <= q2 <= q3 must hold).",
                "constraints": [
                    "3 <= arr.size() <= 1000",
                    "0 <= arr[i] <= 10000",
                    "1 <= target <= 10000"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [12, 3, 6, 1, 6, 9], target = 24",
                        "output": "[[3, 9, 12], [6, 6, 12]]",
                        "explanation": "The triplets that sum to 24 are (3, 9, 12) and (6, 6, 12)."
                    },
                    {
                        "input": "arr[] = [1, 1, 1, 1], target = 3",
                        "output": "[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]",
                        "explanation": "Since the array contains only 1s, the only possible triplet that sums to 3 is (1, 1, 1). All possible combinations of three 1s are returned."
                    },
                    {
                        "input": "arr[] = [10, 12, 10, 15], target = 32",
                        "output": "[[10, 10, 12]]",
                        "explanation": "The triplet that sums to 32 is (10, 10, 12)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use three nested loops to find all unique triplets that sum up to the target, and sort each triplet before adding it to the result list.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<vector<int>> threeSum(vector<int> &arr, int target) {\n        // Code here\n        int n = arr.size();\n        vector<vector<int>> res;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] == target) {\n                        vector<int> a = {arr[i], arr[j], arr[k]};\n                        sort(a.begin(), a.end());\n                        res.push_back(a);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<List<Integer>> threeSum(int[] arr, int target) {\n        // Your code here\n        int n = arr.length;\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] == target) {\n                        List<Integer> a = Arrays.asList(arr[i], arr[j], arr[k]);\n                        Collections.sort(a);\n                        res.add(a);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# User function Template for python3\nclass Solution:\n\n    def threeSum(self, arr, target):\n        # Your code here\n        n = len(arr)\n        res = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if arr[i] + arr[j] + arr[k] == target:\n                        a = sorted([arr[i], arr[j], arr[k]])\n                        res.append(a)\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number[]} arr\n     * @param {number} target\n     * @return {number[][]}\n     */\n    threeSum(arr, target) {\n        // write your code here\n        const res = [];\n        const n = arr.length;\n        for (let i = 0; i < n; i++) {\n            for (let j = i + 1; j < n; j++) {\n                for (let k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] === target) {\n                        const a = [ arr[i], arr[j], arr[k] ].sort((x, y) => x - y);\n                        res.push(a);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}