{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876825,
            "title": "Find All Triplets with Zero Sum",
            "titleSlug": "find-all-triplets-with-zero-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr[]</strong>, find all possible triplets <strong>i, j, k</strong> in the&nbsp;<strong>arr[]</strong> whose sum of elements is equals to <strong>zero</strong>.&nbsp;<br />Returned triplet should also be internally sorted i.e.&nbsp;<strong>i&lt;j&lt;k.</strong></span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">arr[] = [0, -1, 2, -3, 1]</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>[[0, 1, 4], [2, 3, 4]]<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">Triplets with sum 0 are:<br /></span><span ><span style=\"font-size: 18.6667px;\">arr[0] + arr[1] + arr[4] = 0 + (-1) + 1 = 0\narr[2] + arr[3] + arr[4] = 2 + (-3) + 1 = 0</span></span></pre>\n<pre><span ><strong >Input: </strong><span >arr[] = [</span><span style=\"font-size: 18.6667px;\">1, -2, 1, 0, 5</span><span >]\n</span><strong >Output: </strong><span >[[0, 1, 2]]</span><strong >\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">Only triplet which satisfies the condition is arr[0] + arr[1] + arr[2] = 1 + (-2) + 1 = 0</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 3, 1, 0, 5]</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>[[]]</span><span ><strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">There is no triplet with sum 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>3 &lt;= arr.size() &lt;= 10<sup>3</sup><strong><br /></strong></span><span style=\"font-size: 18px;\">-10<sup>4</sup> &lt;= arr[i] </span><span style=\"font-size: 18px;\">&lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find all unique triplets (i, j, k) such that arr[i] + arr[j] + arr[k] = 0. The triplets must be internally sorted (i < j < k).",
                "constraints": [
                    "3 <= arr.length <= 1000",
                    "-10000 <= arr[i] <= 10000"
                ],
                "testcases": [
                    {
                        "input": "[0, -1, 2, -3, 1]",
                        "output": "[[0, -1, 1], [2, -3, 1]]",
                        "explanation": "The triplets that sum to zero are (0, -1, 1) and (2, -3, 1)."
                    },
                    {
                        "input": "[1, -2, 1, 0, 5]",
                        "output": "[[-2, 1, 1]]",
                        "explanation": "The only triplet that sums to zero is (-2, 1, 1)."
                    },
                    {
                        "input": "[2, 3, 1, 0, 5]",
                        "output": "[]",
                        "explanation": "There are no triplets that sum to zero."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a hash map to track pairs and look for the complement to form triplets</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// User function Template for C++\nclass Solution {\n  public:\n    vector<vector<int>> findTriplets(vector<int> &arr) {\n        // Set to handle duplicates\n        set<vector<int>> resSet;\n        int n = arr.size();\n        unordered_map<int, vector<pair<int, int>>> mp;\n\n        // Store sum of all the pairs with their indices\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\n                mp[arr[i] + arr[j]].push_back({i, j});\n        }\n\n        for (int i = 0; i < n; i++) {\n\n            // Find remaining value to get zero sum\n            int rem = -arr[i];\n            if (mp.find(rem) != mp.end()) {\n                vector<pair<int, int>> pairs = mp[rem];\n                for (auto p : pairs) {\n\n                    // Ensure no two indices are same in triplet\n                    if (p.first != i && p.second != i) {\n                        vector<int> curr = {i, p.first, p.second};\n                        sort(curr.begin(), curr.end());\n                        resSet.insert(curr);\n                    }\n                }\n            }\n        }\n\n        vector<vector<int>> res(resSet.begin(), resSet.end());\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<List<Integer>> findTriplets(int[] arr) {\n        // Set to handle duplicates\n        Set<List<Integer>> resSet = new HashSet<>();\n        int n = arr.length;\n        Map<Integer, List<int[]>> mp = new HashMap<>();\n\n        // Store sum of all the pairs with their indices\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int sum = arr[i] + arr[j];\n                if (!mp.containsKey(sum)) {\n                    mp.put(sum, new ArrayList<>());\n                }\n                mp.get(sum).add(new int[] {i, j});\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            // Find remaining value to get zero sum\n            int rem = -arr[i];\n            if (mp.containsKey(rem)) {\n                List<int[]> pairs = mp.get(rem);\n                for (int[] p : pairs) {\n                    // Ensure no two indices are same in triplet\n                    if (p[0] != i && p[1] != i) {\n                        List<Integer> curr = Arrays.asList(i, p[0], p[1]);\n                        Collections.sort(curr);\n                        resSet.add(curr);\n                    }\n                }\n            }\n        }\n\n        return new ArrayList<>(resSet);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# User function Template for python3\nclass Solution:\n\n    def findTriplets(self, arr):\n        # Set to handle duplicates\n        res_set = set()\n        n = len(arr)\n        mp = {}\n\n        # Store sum of all the pairs with their indices\n        for i in range(n):\n            for j in range(i + 1, n):\n                pair_sum = arr[i] + arr[j]\n                if pair_sum not in mp:\n                    mp[pair_sum] = []\n                mp[pair_sum].append((i, j))\n\n        for i in range(n):\n            # Find remaining value to get zero sum\n            rem = -arr[i]\n            if rem in mp:\n                pairs = mp[rem]\n                for p in pairs:\n                    # Ensure no two indices are same in triplet\n                    if p[0] != i and p[1] != i:\n                        curr = tuple(sorted([i, p[0], p[1]]))\n                        res_set.add(curr)\n\n        return [list(triplet) for triplet in res_set]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\nclass Solution {\n    /**\n     * @param {number[]} arr\n     * @return {number[][]}\n     */\n    findTriplets(arr) {\n        // Set to handle duplicates\n        const resSet = new Set();\n        const n = arr.length;\n        const mp = new Map();\n\n        // Store sum of all the pairs with their indices\n        for (let i = 0; i < n; i++) {\n            for (let j = i + 1; j < n; j++) {\n                const pairSum = arr[i] + arr[j];\n                if (!mp.has(pairSum)) {\n                    mp.set(pairSum, []);\n                }\n                mp.get(pairSum).push([ i, j ]);\n            }\n        }\n\n        for (let i = 0; i < n; i++) {\n            // Find remaining value to get zero sum\n            const rem = -arr[i];\n            if (mp.has(rem)) {\n                const pairs = mp.get(rem);\n                for (let p of pairs) {\n                    // Ensure no two indices are same in triplet\n                    if (p[0] !== i && p[1] !== i) {\n                        const curr = [ i, p[0], p[1] ].sort((a, b) => a - b);\n                        resSet.add(JSON.stringify(\n                            curr)); // Use JSON string to handle uniqueness in Set\n                    }\n                }\n            }\n        }\n\n        // Convert set of JSON strings back to array of arrays\n        return Array.from(resSet).map(triplet => JSON.parse(triplet));\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}