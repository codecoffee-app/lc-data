{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707627,
            "title": "Find and Replace in String",
            "titleSlug": "find-an-replace-in-string",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>S </strong>on which you need to perform <strong>Q</strong> replace operations.</span><br /><span style=\"font-size: 18px;\">Each replacement operation has 3 parameters: a starting index i, a source word x and a target word y. The rule is that if x starts at position i in the <strong>original</strong> <strong>string S</strong>, then we will replace that occurrence of x with y. If not, we do nothing.<br /><strong>Note: </strong></span> <span style=\"font-size: 18px;\">All these operations occur simultaneously. It's guaranteed that there won't be any overlap in replacement: for example, S = \"abc\", indexes = [0,1], sources = [\"ab\", \"bc\"] is not a valid test case. </span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nS = \"gforks\"\nQ = 2\nindex[] = {0, 4}\nsources[] = {\"g\", \"ks\"}\ntargets[] = {\"geeks\", \"geeks\"}\n<strong>Output</strong>: \ngeeksforgeeks\n<strong>Explanation</strong>:\n\"g\" starts at index 0, so, it's replaced by\n\"geeks\". Similarly, \"ks\" starts at index 4,\nand is replaced by \"geeks\".</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nS = \"gforks\"\nQ = 2\nindex[] = {0, 3}\nsources[] = {\"g\", \"ss\"}\ntargets[] = {\"geeks\", \"geeks\"}\n<strong>Output</strong>: \ngeeksforks\n<strong>Explanation</strong>:\n\"g\" starts at index 0, so, it's replaced by\n\"geeks\". \"ss\" doesn't start at index 3 in\n<strong>original</strong> <strong>S, </strong>so it's not replaced.</span></pre>\n<p><br /><strong><span style=\"font-size: 18px;\">Your Task:</span></strong><br /><span style=\"font-size: 18px;\">You don't need to read input or print anything.&nbsp;You only need to complete the function<strong> findAndReplace()&nbsp;</strong>that takes a string S, an integer Q, and 3 arrays index, sources, and targets of size Q, as input and returns the new string after all the operations. index[i], sources[i], and targets[i] denotes the index, sources, and targets for i<sub>th</sub> query.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> &nbsp;O(|S| * Q)<br /><strong>Expected Auxilliary Space:</strong> O(Q)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; |S| &le; 10<sup>4</sup><br />1 &le; Q &le; 100<br />1 &le; length of sources<sub>i</sub>, targets<sub>i</sub> &le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S`, perform `Q` replace operations simultaneously. Each operation consists of a starting index `i`, a source word `x`, and a target word `y`. If the source word `x` starts at position `i` in the *original* string `S`, replace that occurrence of `x` with `y`. Otherwise, do nothing. It is guaranteed that there will be no overlap in replacements.",
                "constraints": [
                    "1 <= |S| <= 10^4",
                    "1 <= Q <= 100",
                    "1 <= length of sources[i], targets[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "S = \"gforks\"\nQ = 2\nindex[] = {0, 4}\nsources[] = {\"g\", \"ks\"}\ntargets[] = {\"geeks\", \"geeks\"}",
                        "output": "geeksforgeeks",
                        "explanation": "The substring \"g\" starts at index 0 in the original string, so it is replaced with \"geeks\". Similarly, \"ks\" starts at index 4 and is replaced with \"geeks\"."
                    },
                    {
                        "input": "S = \"gforks\"\nQ = 2\nindex[] = {0, 3}\nsources[] = {\"g\", \"ss\"}\ntargets[] = {\"geeks\", \"geeks\"}",
                        "output": "geeksforks",
                        "explanation": "The substring \"g\" starts at index 0 in the original string, so it is replaced with \"geeks\". The substring \"ss\" does not start at index 3 in the original string, so no replacement occurs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Check if the string in sources[i] matches with to that of S[i], and change if necessary.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    //Function to find and replace occurrences of strings.\n    string findAndReplace(string S ,int Q, int index[], string sources[], string targets[]) {\n        vector<pair<int, int>> sorted;\n        //looping through all the queries and storing the index of query\n        //along with its position in the string in sorted vector.\n        for (int i=0; i<Q; i++)\n            sorted.push_back({index[i], i});\n            \n        // Sort the vector in decreasing order of indexes.\n        //sorting the vector to perform the operations in descending order of \n        //indexes to keep track of changing string and avoid overlapping.\n        sort(sorted.rbegin(), sorted.rend());\n        \n        //iterating over the sorted vector.\n        for (auto ind : sorted) {\n            int i = ind.first;\n            string s = sources[ind.second], t = targets[ind.second];\n            \n            //check if the sub-string in the string matches the source string\n            //in query.\n            //if yes, then replace it with target string.\n            if (S.substr(i, s.length()) == s)\n                S = S.substr(0, i) + t + S.substr(i + s.length());\n        }\n        \n        //returning the modified string after all replacements.\n        return S;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static String findAndReplace(String S, int Q, int[] index, String[] sources, String[] targets) {\n        // create a list to store the indexes and sources of the replacements\n        List<int[]> sorted = new ArrayList<>();\n        for (int i=0; i<Q; i++)\n            sorted.add(new int[]{index[i], i});\n            \n        // Sort the vector in decreasing order of indexes.\n        // This will ensure that replacements are made from right to left in the string\n        Collections.sort(sorted, Comparator.comparing(i -> -i[0]));\n        \n        // iterate over the sorted list and perform replacements in the string\n        for (int[] ind: sorted) {\n            int i = ind[0], j = ind[1];\n            String s = sources[j], t = targets[j];\n            // check if the substring at the specified index matches the source string\n            // if it does, replace it with the target string\n            if (S.substring(i, i + s.length()).equals(s)) S = S.substring(0, i) + t + S.substring(i + s.length());\n        }\n        // return the modified string after all replacements have been made\n        return S;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Backend complete function Template for python3\n\nclass Solution:\n    # Function to find and replace substrings in a string.\n    def findAndReplace(self, S, Q, index, sources, targets):\n        sortd = []\n        # Creating a list of tuples with index and corresponding query index.\n        for i in range(Q):\n            sortd.append([index[i],i])\n        \n        # Sorting the list in descending order based on the index.\n        sortd.sort(reverse=True)\n        \n        # Iterating over the sorted list.\n        for ind in sortd:\n            i = ind[0]\n            s = sources[ind[1]]\n            t = targets[ind[1]]\n            \n            # Checking if the substring at index i matches with the source string.\n            # If yes, then replacing the substring with the target string.\n            if S[i:i+len(s)] == s:\n                S = S[0:i] + t + S[i+len(s):]\n        \n        return S",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\r\n    findAndReplace(S, Q, index, sources, targets) {\r\n        let sortd = [];\r\n        for (let i = 0; i < Q; i++) {\r\n            sortd.push([index[i], i]);\r\n        }\r\n\r\n        sortd.sort((a, b) => b[0] - a[0]);\r\n\r\n        for (let ind of sortd) {\r\n            let i = ind[0];\r\n            let s = sources[ind[1]];\r\n            let t = targets[ind[1]];\r\n\r\n            if (S.substr(i, s.length) === s) {\r\n                S = S.substr(0, i) + t + S.substr(i + s.length);\r\n            }\r\n        }\r\n        \r\n        return S;\r\n    }\r\n}\r\n\r\nmodule.exports = Solution;",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}