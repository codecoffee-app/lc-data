{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704007,
            "title": "Find difference between sum of diagonals",
            "titleSlug": "find-difference-between-sum-of-diagonals1554",
            "content": "<p><span style=\"font-size:18px\">Given a matrix Grid[][]&nbsp;of size NxN. Calculate the absolute difference between the sums of its diagonals.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN=3\nGrid=[[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output: </strong>\n0\n<strong>Explanation:</strong>\nSum of primary diagonal = 1+5+9 = 15.\nSum of secondary diagonal = 3+5+7 = 15.\nDifference = |15 - 15| = 0.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN=3\nGrid=[[1,1,1],[1,1,1],[1,1,1]]\n<strong>Output:</strong>\n0\n<strong>Explanation:</strong>\nSum of primary diagonal = 1+1+1=3.\nSum of secondary diagonal = 1+1+1=3.\nDifference = |3-3| = 0.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything.Your task is to complete the function <strong>diagonalSumDifference()</strong> which takes an integer N and a 2D array Grid as input parameters and returns the absolutes difference between the sums of its diagonals.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(N)<br />\n<strong>Expected Auxillary Space:</strong>O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=N&lt;=1000<br />\n-1000&lt;=Grid[i][j]&lt;=1000, for 0&lt;=i,j</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For every row,the sum of the column numbers that add to the respective diagonals sum up to N-1(in 0-based indexing).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int diagonalSumDifference(int N, vector<vector<int>> Grid) {\n        int i, j, sum1 = 0, sum2 = 0;\n        for (i = 0; i < N; i++) {\n            // adding primary diagonal elements\n            sum1 += Grid[i][i];\n            // adding secondary diagonal elements\n            sum2 += Grid[i][N - i - 1];\n        }\n        return abs(sum1 - sum2);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    int diagonalSumDifference(int N, int[][] Grid) {\n        int i, j, sum1 = 0, sum2 = 0;\n        for (i = 0; i < N; i++) {\n            // adding primary diagonal elements\n            sum1 += Grid[i][i];\n            // adding secondary diagonal elements\n            sum2 += Grid[i][N - i - 1];\n        }\n        return Math.abs(sum1 - sum2);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def diagonalSumDifference(self,N,Grid):\n        sum1,sum2=0,0\n        for i in range(N):\n            #adding primary diagonal elements\n            sum1+=Grid[i][i]\n            #adding secondary diagonal elements\n            sum2+=Grid[i][N-i-1]\n        return abs(sum1-sum2) ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    diagonalSumDifference(grid, n) {\n        let sum = 0; // Initialize a variable to store the sum of diagonal elements difference.\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < n; j++) {\n                if (i === j) {\n                    sum += grid[i][j]; // Add the element to the sum if it is on the main diagonal.\n                }\n                if (i === (n - 1 - j)) {\n                    sum -= grid[i][j]; // Subtract the element from the sum if it is on the secondary diagonal.\n                }\n            }\n        }\n        \n        return sum < 0 ? (sum * -1) : sum; // Return the absolute value of the sum if it is negative, otherwise return the sum.\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int diagonalSumDifference(int N, int[][] Grid)\n    {\n        int sum1 = 0, sum2 = 0;\n        for (int i = 0; i < N; i++)\n        {\n            // adding primary diagonal elements\n            sum1 += Grid[i][i];\n            // adding secondary diagonal elements\n            sum2 += Grid[i][N - i - 1];\n        }\n        return Math.Abs(sum1 - sum2);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}