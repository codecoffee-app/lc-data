{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704503,
            "title": "Find distinct elements",
            "titleSlug": "find-distinct-elements2054",
            "content": "<p><span style=\"font-size:18px\">Given a <strong>N</strong> x<strong> N</strong> matrix <strong>M</strong>. Write a program to find count of all the distinct elements common to all rows of the matrix. Print count of such elements.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nN = 4\r\nM = {{2, 1, 4, 3},\r\n     {1, 2, 3, 2},\r\n     {3, 6, 2, 3},\r\n     {5, 2, 5, 3}}\r\n<strong>Output:</strong> \r\n2\r\n<strong>Explaination:</strong> Only 2 and 3 are common in all rows.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nN = 5\r\nM = {{12, 1, 14, 3, 16},\r\n     {14, 2, 1, 3, 35},\r\n     {14, 1, 14, 3, 11},\r\n     {14, 5, 3, 2, 1},\r\n     {1, 18, 3, 21, 14}}\r\n<strong>Output:</strong> \r\n3\r\n<strong>Explaination:</strong> 14, 3 and 1 are common in all the rows.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>distinct()</strong> which takes the matrix and n as input parameters and returns the number of distinct elements present in every row.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N*N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 100<br />\r\n1 &le; M[i][j] &le; 1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N x N matrix M, determine the number of distinct elements that are present in every row of the matrix.",
                "constraints": [
                    "1 <= N <= 100",
                    "1 <= M[i][j] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nM = {{2, 1, 4, 3},\n     {1, 2, 3, 2},\n     {3, 6, 2, 3},\n     {5, 2, 5, 3}}",
                        "output": "2",
                        "explanation": "The elements 2 and 3 are the only distinct elements present in all rows of the given matrix."
                    },
                    {
                        "input": "N = 5\nM = {{12, 1, 14, 3, 16},\n     {14, 2, 1, 3, 35},\n     {14, 1, 14, 3, 11},\n     {14, 5, 3, 2, 1},\n     {1, 18, 3, 21, 14}}",
                        "output": "3",
                        "explanation": "The elements 1, 3, and 14 are the only distinct elements present in all rows of the given matrix."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Normal hashing will help to solve it.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to count the number of distinct elements.\n    int distinct(vector<vector<int>> M, int N)\n    {\n        int hash[1001];\n        //Initializing the hash array with 0.\n        for(int i = 0;i < 1001;i++)\n            hash[i] = 0;\n\n        for(int i = 0;i < N;i++){\n            //Marking the elements in the first row as 1 in the hash array.\n            hash[M[0][i]] = 1;\n        }\n        \n        for(int i = 1;i < N;i++){\n            for(int j = 0;j < N;j++){\n                //Updating the hash array for each element in the matrix.\n                //If an element is found for the current row, increment the value in the hash array by 1.\n                if(hash[M[i][j]] == i){\n                    hash[M[i][j]] = i+1;\n                }\n            }\n        }\n        \n        int count = 0;\n        //Counting the number of elements that have a value equal to N in the hash array.\n        for(int i = 0;i < 1001;i++){\n            if(hash[i] == N)\n                count++;\n        }\n        //Returning the count of distinct elements.\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Solution{\r\n    static int distinct(int M[][], int N){\r\n        Map<Integer, Integer> hm = new HashMap<>();\r\n        \r\n        for(int i = 0; i < N; i++){\r\n            // Increasing frequency of elements if they \r\n            // occur in the ith row. \r\n            for(int j = 0; j < N; j++){\r\n                if(hm.getOrDefault(M[i][j], 0) == i)\r\n                    hm.put(M[i][j], hm.getOrDefault(M[i][j], 0) + 1);\r\n            }\r\n        }\r\n        \r\n        int count = 0;\r\n        // If elements have occured in all the rows, then \r\n        // it's corresponding value should be N\r\n        for(Map.Entry<Integer, Integer> e : hm.entrySet())\r\n            if(e.getValue() == N)\r\n                count++;\r\n        return count;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    distinct(arr, n) {\n        let hashMap = new Array(1001).fill(0); // Create a hash map to store the count of distinct elements\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < n; j++) {\n                if (hashMap[arr[i][j]] == i) hashMap[arr[i][j]]++; // Increment the count of an element in the hash map if it is found in a row\n            }\n        }\n        \n        let ans = 0; // Initialize a variable to store the count of distinct elements\n        for (let i = 1; i <= 1000; i++) {\n            if (hashMap[i] == n) ans++; // If an element has a count equal to n, it is present in every row and is distinct\n        }\n        \n        return ans; // Return the count of distinct elements\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}