{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706337,
            "title": "Find duplicate rows in a binary matrix",
            "titleSlug": "find-duplicate-rows-in-a-binary-matrix",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>boolean</strong> matrix of size <strong>RxC</strong> where each cell contains either 0 or 1, find the row numbers&nbsp;</span><span style=\"font-size: 18px;\">(0-based)</span><span style=\"font-size: 18px;\">&nbsp;of row which already exists or are repeated.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nR = 2, C = 2\nmatrix[][] = {{1, 0},\n\\t\\t{1, 0}}\n<strong>Output: </strong>\n1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nRow 1 is duplicate of Row 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nR = 4, C = 3\nmatrix[][] = {{ 1, 0, 0},\n\\t\\t{ 1, 0, 0},\n\\t\\t{ 0, 0, 0},\n\\t\\t{ 0, 0, 0}}</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>\n</span><span style=\"font-size: 18px;\">1 3</span> \n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nRow 1 and Row 3 are duplicates of Row 0 and 2 respectively. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You dont need to read input or print anything. Complete the function <strong>repeatedRows()</strong> that takes the matrix as input parameter and returns a list of row numbers which are duplicate rows.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(R * C)<br /><strong>Expected Auxiliary Space:</strong> O(R * C) </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; R, C &le; 10<sup>3</sup></span><br /><span style=\"font-size: 18px;\">0 &le; matrix[i][j] &le; 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a boolean matrix of size R x C where each cell contains either 0 or 1, find the 0-based row numbers of rows which already exist or are repeated. Return a list of the duplicate row numbers.",
                "constraints": [
                    "1 <= R, C <= 10^3",
                    "0 <= matrix[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "R = 2, C = 2\nmatrix[][] = {{1, 0},\n{1, 0}}",
                        "output": "1",
                        "explanation": "Row 1 is a duplicate of Row 0."
                    },
                    {
                        "input": "R = 4, C = 3\nmatrix[][] = {{ 1, 0, 0},\n{ 1, 0, 0},\n{ 0, 0, 0},\n{ 0, 0, 0}}",
                        "output": "1 3",
                        "explanation": "Row 1 is a duplicate of Row 0, and Row 3 is a duplicate of Row 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use <strong>trie</strong>. Insert each row into trie. Check while inserting if an exactly same row exists already.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\n{   \n    public:\n    \n    /*struct the Trie*/\n    struct Trie \n    { \n        bool leaf; \n        Trie* children[2]; \n    }; \n      \n    /*function to get Trienode*/\n    Trie* getNewTrieNode() \n    { \n        Trie* node = new Trie; \n        node->children[0] = node->children[1] = NULL; \n        node->leaf = false; \n        return node; \n    } \n      \n    /* function to insert a row in Trie*/\n    bool insert(Trie*& head, vector<int> arr, int N) \n    { \n        Trie* curr = head; \n      \n        for (int i = 0; i < N; i++) \n        { \n            /*creating a new path if it don not exist*/\n            if (curr->children[arr[i]] == NULL) \n                curr->children[arr[i]] = getNewTrieNode(); \n      \n            curr = curr->children[arr[i]]; \n        } \n      \n        /*if the row already exist return false*/\n        if (curr->leaf) \n            return false; \n      \n        /* making leaf node tree and return true*/\n        return (curr->leaf = true); \n    } \n      \n    vector<int> repeatedRows(vector<vector<int>> &matrix, int M, int N) \n    { \n        Trie* head = getNewTrieNode(); \n        vector<int> ans;\n        //int M = matrix.size();\n        //int N = matrix[0].size();\n        /*inserting into Trie and checking for dulpicates*/\n        for (int i = 0; i < M; i++) \n      \n            // If already exists \n            if (!insert(head, matrix[i], N)) \n                ans.push_back(i); \n        \n        return ans;\n      \n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    /* Trie Node */\r\n    static class Trie {\r\n        boolean leaf;\r\n        Trie[] children;\r\n\r\n        Trie() {\r\n            children = new Trie[2];\r\n            leaf = false;\r\n        }\r\n    }\r\n\r\n    /* Function to insert a row in Trie */\r\n    static boolean insert(Trie head, int[] arr, int N) {\r\n        Trie curr = head;\r\n\r\n        for (int i = 0; i < N; i++) {\r\n            /* Creating a new path if it does not exist */\r\n            if (curr.children[arr[i]] == null)\r\n                curr.children[arr[i]] = new Trie();\r\n\r\n            curr = curr.children[arr[i]];\r\n        }\r\n\r\n        /* If the row already exists, return false */\r\n        if (curr.leaf)\r\n            return false;\r\n\r\n        /* Making the leaf node true and returning true */\r\n        return (curr.leaf = true);\r\n    }\r\n\r\n    public static ArrayList<Integer> repeatedRows(int[][] matrix, int m, int n) {\r\n        Trie head = new Trie();\r\n        ArrayList<Integer> ans = new ArrayList<>();\r\n\r\n        /* Inserting into Trie and checking for duplicates */\r\n        for (int i = 0; i < m; i++)\r\n\r\n            // If already exists\r\n            if (!insert(head, matrix[i], n))\r\n                ans.add(i);\r\n\r\n        return ans;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    class Trie:\n        def __init__(self):\n            self.leaf = False\n            self.children = [None, None]\n    \n    def getNewTrieNode(self):\n        node = self.Trie()\n        node.children[0] = None\n        node.children[1] = None\n        node.leaf = False\n        return node\n    \n    def insert(self, head, arr, N):\n        curr = head\n        \n        for i in range(N):\n            if curr.children[arr[i]] is None:\n                curr.children[arr[i]] = self.getNewTrieNode()\n                \n            curr = curr.children[arr[i]]\n        \n        if curr.leaf:\n            return False\n        \n        curr.leaf = True\n        return True\n    \n    def repeatedRows(self, matrix, m, n):\n        head = self.getNewTrieNode()\n        ans = []\n        \n        for i in range(m):\n            if not self.insert(head, matrix[i], n):\n                ans.append(i)\n        \n        return ans\n\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}