{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700437,
            "title": "Array Duplicates",
            "titleSlug": "find-duplicates-in-an-array",
            "content": "<p><span >Given an array <strong><code>arr</code></strong> of integers, find all the elements that occur more than once in the array. If no element repeats, return an empty array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 3, 1, 2, 3]\n<strong>Output: </strong>[2, 3] <strong>\nExplanation: </strong>2 and 3 occur more than once in the given array.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [0, 3, 1, 2] <br /><strong>Output: </strong>[]<strong> <br />Explanation: </strong>There is no repeating element in the array, so the <span style=\"box-sizing: inherit;\">output is empty.<br /></span></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2]\n<strong>Output: </strong>[] <strong>\nExplanation: </strong>There is single element in the array. <span style=\"box-sizing: inherit;\">Therefore output is empty.</span></span></pre>\n<p><span ><strong>Constraints:<br /></strong>1 &lt;= arr.size() &lt;= 10<sup>6</sup></span><br /><span >0 &lt;= arr[i] &lt;=&nbsp;<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use a hash map to track occurrences</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "zoho",
            "flipkart",
            "amazon",
            "d-e-shaw",
            "qualcomm"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Solution class to find duplicates\nclass Solution {\n  public:\n    // Function to find duplicates in the given array\n    vector<int> findDuplicates(vector<int>& arr) {\n        unordered_map<int, int>\n            mp; // Create a hashmap to count occurrences of each element\n\n        // Count each element's occurrence in the array\n        for (auto k : arr)\n            mp[k]++;\n\n        vector<int> ans; // To store the result\n\n        // Traverse the hashmap and check for elements occurring more than once\n        for (auto k : mp) {\n            if (k.second > 1) {\n                ans.push_back(k.first); // Add the element to the result\n            }\n        }\n\n        return ans; // Return the list of duplicates or an empty vector if none found\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n// Solution class to find duplicates\nclass Solution {\n    public List<Integer> findDuplicates(int[] arr) {\n        Map<Integer, Integer> freqMap =\n            new HashMap<>(); // HashMap to store the frequency of elements\n\n        // Count the frequency of each element in the array\n        for (int num : arr) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        List<Integer> result = new ArrayList<>(); // List to store the result\n\n        // Check for elements that appear more than once\n        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {\n            if (entry.getValue() > 1) {\n                result.add(entry.getKey());\n            }\n        }\n\n        return result; // Return the list of duplicates or empty list if none\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Solution class\nclass Solution:\n\n    def findDuplicates(self, arr):\n        # Dictionary to store the frequency of elements\n        freq = {}\n\n        # Count the frequency of each element in the array\n        for num in arr:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n\n        # List to store the result (duplicates)\n        result = []\n\n        # Check for elements that occur more than once\n        for key, value in freq.items():\n            if value > 1:\n                result.append(key)\n\n        # If no duplicates are found, return an empty list\n        return result if result else []\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Method to find duplicates in the array\n    public List<int> findDuplicates(int[] arr) {\n        Dictionary<int, int> freq =\n            new Dictionary<int, int>();     // Dictionary to store frequency of elements\n        List<int> result = new List<int>(); // List to store the result\n\n        // Count frequency of each element in the array\n        foreach (int num in arr) {\n            if (freq.ContainsKey(num))\n                freq[num]++;\n            else\n                freq[num] = 1;\n        }\n\n        // Check for elements that occur more than once and add to result\n        foreach (var entry in freq) {\n            if (entry.Value > 1) result.Add(entry.Key);\n        }\n\n        // If no duplicates found, return empty list\n        return result.Count > 0 ? result : new List<int>();\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find duplicates in the given array\n    findDuplicates(arr) {\n        const mp = new Map(); // Create a hashmap to count occurrences of each element\n\n        // Count each element's occurrence in the array\n        for (const k of arr) {\n            mp.set(k, (mp.get(k) || 0) + 1);\n        }\n\n        const ans = []; // To store the result\n\n        // Traverse the hashmap and check for elements occurring more than once\n        for (const [key, value] of mp) {\n            if (value > 1) {\n                ans.push(key); // Add the element to the result\n            }\n        }\n\n        return ans; // Return the list of duplicates or an empty array if none found\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}