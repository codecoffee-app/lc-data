{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707278,
            "title": "Single Element Among Triplets",
            "titleSlug": "find-element-occuring-once-when-all-other-are-present-thrice",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of integers <strong>arr[]</strong> of length <strong>N</strong>, every element <strong>appears</strong> <strong>thrice </strong>except for one which <strong>occurs</strong> <strong>once</strong>.</span><br /><span style=\"font-size: 18px;\">Find that element which <strong>occurs</strong> <strong>once</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 4\narr[] = {1, 10, 1, 1}\n<strong>Output:\n</strong>10<strong>\nExplanation:\n</strong>10 occurs once in the array while the other\nelement 1 occurs thrice.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 10\narr[] = {3, 2, 1, 34, 34, 1, 2, 34, 2, 1}\n<strong>Output:\n</strong>3<strong>\nExplanation:\n</strong>All elements except 3 occurs thrice in the array.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to take any input or print anything. You task is to complete the function <strong>singleElement</strong>() which takes an array of integers <strong>arr</strong> and an integer <strong>N</strong> which finds and returns the element <strong>occuring once</strong> in the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br />-10<sup>9</sup> &le; A[i] &le; 10<sup>9</sup></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(N).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span><span style=\"font-size: 18px;\"> </span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr` of length `N`, where every element appears thrice except for one which occurs only once, find the element that occurs once.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^9 <= A[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 4\narr[] = {1, 10, 1, 1}",
                        "output": "10",
                        "explanation": "The element 10 appears only once, while the element 1 appears three times."
                    },
                    {
                        "input": "N = 10\narr[] = {3, 2, 1, 34, 34, 1, 2, 34, 2, 1}",
                        "output": "3",
                        "explanation": "The element 3 appears only once, while all other elements appear three times."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Let us look at every bit position.</span></p>\n<p><span style=\"font-size: 18px;\">Every number that occurs thrice will either contribute 3 <strong>&lsquo;1&rsquo;s</strong> or 3 <strong>&lsquo;0&rsquo;s</strong> to the position.</span></p>\n<p><span style=\"font-size: 18px;\">The number that occurs once X will contribute exactly one 0 or 1 to the position depending on whether it has 0 or 1 in that position.</span></p>\n<p><span style=\"font-size: 18px;\">So:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">If X has 1 in that position, we will have (3x+1) number of 1s in that position.</span></li>\n<li><span style=\"font-size: 18px;\">If X has 0 in that position, we will have (3x+1) number of 0s in that position.</span></li>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int singleElement(int arr[] ,int N) {\r\n        int ones = 0, twos = 0;\r\n \r\n        int common_bit_mask;\r\n     \r\n        // Let us take the example of\r\n        // {3, 3, 2, 3} to understand\r\n        // this\r\n        for (int i = 0; i < N; i++) {\r\n           \r\n            /* The expression \"one & arr[i]\" gives the bits that\r\n            are there in both 'ones' and new element from arr[].\r\n            We add these bits to 'twos' using bitwise OR\r\n     \r\n            Value of 'twos' will be set as 0, 3, 3 and 1 after\r\n            1st, 2nd, 3rd and 4th iterations respectively */\r\n            twos = twos | (ones & arr[i]);\r\n     \r\n            /* XOR the new bits with previous 'ones' to get all\r\n            bits appearing odd number of times\r\n     \r\n            Value of 'ones' will be set as 3, 0, 2 and 3 after\r\n            1st, 2nd, 3rd and 4th iterations respectively */\r\n            ones = ones ^ arr[i];\r\n     \r\n            /* The common bits are those bits which appear third\r\n            time So these bits should not be there in both\r\n            'ones' and 'twos'. common_bit_mask contains all\r\n            these bits as 0, so that the bits can be removed\r\n            from 'ones' and 'twos'\r\n     \r\n            Value of 'common_bit_mask' will be set as 00, 00, 01\r\n            and 10 after 1st, 2nd, 3rd and 4th iterations\r\n            respectively */\r\n            common_bit_mask = ~(ones & twos);\r\n     \r\n            /* Remove common bits (the bits that appear third\r\n            time) from 'ones'\r\n     \r\n            Value of 'ones' will be set as 3, 0, 0 and 2 after\r\n            1st, 2nd, 3rd and 4th iterations respectively */\r\n            ones &= common_bit_mask;\r\n     \r\n            /* Remove common bits (the bits that appear third\r\n            time) from 'twos'\r\n     \r\n            Value of 'twos' will be set as 0, 3, 1 and 0 after\r\n            1st, 2nd, 3rd and 4th itearations respectively */\r\n            twos &= common_bit_mask;\r\n     \r\n            // uncomment this code to see intermediate values\r\n            // printf (\" %d %d n\", ones, twos);\r\n        }\r\n     \r\n        return ones;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    static int singleElement(int[] arr, int N) {\r\n        \r\n        int ones = 0, twos = 0; // initializing two variables to keep track of bits\r\n        int common_bit_mask; // variable to store common bits\r\n        \r\n        for (int i = 0; i < N; i++) {\r\n            // \"one & arr[i]\" gives the bits that are there in both 'ones' and new element from arr[]\r\n            // We add these bits to 'twos' using bitwise OR\r\n            twos = twos | (ones & arr[i]);\r\n \r\n            // \"one & arr[i]\" gives the bits that are there in both 'ones' and new element from arr[]\r\n            // We add these bits to 'twos' using bitwise OR\r\n            ones = ones ^ arr[i];\r\n \r\n            // The common bits are those bits which appear third time\r\n            // So these bits should not be there in both 'ones' and 'twos'\r\n            // common_bit_mask contains all these bits as 0, so that the bits can be removed from 'ones' and 'twos'\r\n            common_bit_mask = ~(ones & twos);\r\n \r\n            // Remove common bits (the bits that appear third time) from 'ones'\r\n            ones &= common_bit_mask;\r\n \r\n            // Remove common bits (the bits that appear third time) from 'twos'\r\n            twos &= common_bit_mask;\r\n        }\r\n        return ones; // return the single element\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def singleElement(self, arr, N):\r\n        ones = 0\r\n        twos = 0\r\n         \r\n        for i in range(N):\r\n            # one & arr[i]\" gives the bits that\r\n            # are there in both 'ones' and new\r\n            # element from arr[]. We add these\r\n            # bits to 'twos' using bitwise OR\r\n            twos = twos | (ones & arr[i])\r\n             \r\n            # one & arr[i]\" gives the bits that\r\n            # are there in both 'ones' and new\r\n            # element from arr[]. We add these\r\n            # bits to 'twos' using bitwise OR\r\n            ones = ones ^ arr[i]\r\n             \r\n            # The common bits are those bits\r\n            # which appear third time. So these\r\n            # bits should not be there in both\r\n            # 'ones' and 'twos'. common_bit_mask\r\n            # contains all these bits as 0, so\r\n            # that the bits can be removed from\r\n            # 'ones' and 'twos'\r\n            common_bit_mask = ~(ones & twos)\r\n             \r\n            # Remove common bits (the bits that\r\n            # appear third time) from 'ones'\r\n            ones &= common_bit_mask\r\n             \r\n            # Remove common bits (the bits that\r\n            # appear third time) from 'twos'\r\n            twos &= common_bit_mask\r\n        return ones",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for Csharp\nclass Solution\n{\n    //Complete this function\n    public int singleElement(int[] arr ,int N)\n    {\n        int ones = 0;\n        int twos = 0;\n        int common_bit_mask;\n     \n        for (int i = 0; i < N; i++)\n        {\n            twos = twos | (ones & arr[i]);\n            ones = ones ^ arr[i];\n            common_bit_mask = ~(ones & twos);\n            ones &= common_bit_mask;\n            twos &= common_bit_mask;\n        }\n     \n        return ones;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the element that occurs once in the array.\n    singleElement(arr, N) {\n        let ones = 0;\n        let twos = 0;\n         \n        for (let i = 0; i < N; i++) {\n            twos = twos | (ones & arr[i]);\n             \n            ones = ones ^ arr[i];\n             \n            let common_bit_mask = ~(ones & twos);\n             \n            ones &= common_bit_mask;\n             \n            twos &= common_bit_mask;\n        }\n        return ones;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}