{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703123,
            "title": "Equal point in a string of brackets",
            "titleSlug": "find-equal-point-in-string-of-brackets2542",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>str</strong> of opening and closing brackets '(' and ')' only. The task is to find an equal point. An <strong>equal point</strong> is an index (0-based) such that the number of closing brackets on the right from that point must be equal to the number of opening brackets before that point.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>str = \"(())))(\"\n<strong>Output: </strong>4\n<strong>Explanation: </strong>After index 4, string splits into (()) and ))(. Number of opening brackets in the first part is equal to number of closing brackets in the second part.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> str = \"))\"\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>As after 2nd position i.e. )) and \"empty\" string will be split into these two parts: So, in this number of opening brackets i.e. 0 in the first part is equal to number of closing brackets in the second part i.e. also 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /><span >1 &le; str.size() &le; 10<sup>6<br />str consists of only '(' and ')' brackets.</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` consisting of only opening '(' and closing ')' brackets, find an equal point. An equal point is an index (0-based) where the number of closing brackets to the right of the index is equal to the number of opening brackets to the left of the index.",
                "constraints": [
                    "1 <= str.size() <= 10^6",
                    "str consists of only '(' and ')' brackets."
                ],
                "testcases": [
                    {
                        "input": "(())))(",
                        "output": "4",
                        "explanation": "At index 4, the string is split into '((()))' and '('. The number of opening brackets in the left substring is 3. However, there is an error. After index 4, the string splits into '(())' and '))('. Number of opening brackets in the first part is equal to number of closing brackets in the second part. So the opening brackets are 2 and closing are 2."
                    },
                    {
                        "input": "))",
                        "output": "2",
                        "explanation": "At index 2, the string is split into '))' and an empty string. The number of opening brackets in the left substring is 0, which is equal to the number of closing brackets in the right substring (0)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Store the number of opening brackets and closing brackets that appear in the string up to every index, it must start from the starting index and from the last index. </span><span >Check if any index has the same value of the opening and closing brackets.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find an equal index\n    int findIndex(string& str) {\n        int len = str.length();\n        int open[len + 1], close[len + 1];\n        int index = -1;\n        memset(open, 0, sizeof(open));\n        memset(close, 0, sizeof(close));\n\n        open[0] = 0;\n        close[len] = 0;\n        if (str[0] == '(')\n            open[1] = 1;\n        if (str[len - 1] == ')')\n            close[len - 1] = 1;\n\n        // Store the number of opening brackets\n        // at each index\n        for (int i = 1; i < len; i++) {\n            if (str[i] == '(')\n                open[i + 1] = open[i] + 1;\n            else\n                open[i + 1] = open[i];\n        }\n\n        // Store the number of closing brackets\n        // at each index\n        for (int i = len - 2; i >= 0; i--) {\n            if (str[i] == ')')\n                close[i] = close[i + 1] + 1;\n            else\n                close[i] = close[i + 1];\n        }\n\n        // check if there is no opening or closing\n        // brackets\n        if (open[len] == 0)\n            return len;\n        if (close[0] == 0)\n            return 0;\n\n        // check if there is any index at which\n        // both brackets are equal\n        for (int i = 0; i <= len; i++)\n            if (open[i] == close[i])\n                index = i;\n\n        return index;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Backend complete function Template for Java\r\n\r\nclass Solution {\r\n    public long countSub(String str)\r\n    {\r\n        int len = str.length();\r\n        int open[] = new int[len+1];\r\n        int close[] = new int[len+1];\r\n        int index = -1;\r\n      \r\n        open[0] = 0;\r\n        close[len] = 0;\r\n        if (str.charAt(0)=='(')\r\n            open[1] = 1;\r\n        if (str.charAt(len-1) == ')')\r\n            close[len-1] = 1;\r\n      \r\n        // Store the number of opening brackets\r\n        // at each index\r\n        for (int i = 1; i < len; i++)\r\n        {\r\n            if ( str.charAt(i) == '(' )\r\n                open[i+1] = open[i] + 1;\r\n            else\r\n                open[i+1] = open[i];\r\n        }\r\n      \r\n        // Store the number of closing brackets\r\n        // at each index\r\n        for (int i = len-2; i >= 0; i--)\r\n        {\r\n            if ( str.charAt(i) == ')' )\r\n                close[i] = close[i+1] + 1;\r\n            else\r\n                close[i] = close[i+1];\r\n        }\r\n      \r\n        // check if there is no opening or closing\r\n        // brackets\r\n        if (open[len] == 0)\r\n            return len;\r\n        if (close[0] == 0)\r\n            return 0;\r\n     \r\n        // check if there is any index at which\r\n        // both brackets are equal\r\n        for (int i=0; i<=len; i++)\r\n            if (open[i] == close[i])\r\n                index = i;\r\n      \r\n        return index;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\r\n\r\nclass Solution:\r\n    def findIndex(self,str):\r\n        l = len(str)\r\n        opn = [0] * (l + 1)\r\n        close = [0] * (l + 1)\r\n        index = -1\r\n         \r\n        opn[0] = 0\r\n        close[l] = 0\r\n        if (str[0]=='('):\r\n            opn[1] = 1\r\n        if (str[l - 1] == ')'):\r\n            close[l - 1] = 1\r\n         \r\n        # Store the number of\r\n        # opening brackets\r\n        # at each index\r\n        for i in range(1, l):\r\n            if (str[i] == '('):\r\n                opn[i + 1] = opn[i] + 1\r\n            else:\r\n                opn[i + 1] = opn[i]\r\n         \r\n        # Store the number\r\n        # of closing brackets\r\n        # at each index\r\n        for i in range(l - 2, -1, -1):\r\n            if ( str[i] == ')'):\r\n                close[i] = close[i + 1] + 1\r\n            else:\r\n                close[i] = close[i + 1]\r\n         \r\n        # check if there is no\r\n        # opening or closing brackets\r\n        if (opn[l] == 0):\r\n            return l\r\n        if (close[0] == 0):\r\n            return 0\r\n         \r\n        # check if there is any\r\n        # index at which both\r\n        # brackets are equal\r\n        for i in range(l + 1):\r\n            if (opn[i] == close[i]):\r\n                index = i\r\n         \r\n        return index",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    // Your code goes here\n    findIndex(str) {\n        let l = str.length;\n        let opn = new Array(l + 1).fill(0);\n        let close = new Array(l + 1).fill(0);\n        let index = -1;\n\n        opn[0] = 0;\n        close[l] = 0;\n        if (str[0] === '(') {\n            opn[1] = 1;\n        }\n        if (str[l - 1] === ')') {\n            close[l - 1] = 1;\n        }\n\n        // Store the number of opening brackets at each index\n        for (let i = 1; i < l; i++) {\n            if (str[i] === '(') {\n                opn[i + 1] = opn[i] + 1;\n            } else {\n                opn[i + 1] = opn[i];\n            }\n        }\n\n        // Store the number of closing brackets at each index\n        for (let i = l - 2; i >= 0; i--) {\n            if (str[i] === ')') {\n                close[i] = close[i + 1] + 1;\n            } else {\n                close[i] = close[i + 1];\n            }\n        }\n\n        // check if there is no opening or closing brackets\n        if (opn[l] === 0) {\n            return l;\n        }\n        if (close[0] === 0) {\n            return 0;\n        }\n\n        // check if there is any index at which both brackets are equal\n        for (let i = 0; i <= l; i++) {\n            if (opn[i] === close[i]) {\n                index = i;\n            }\n        }\n\n        return index;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}