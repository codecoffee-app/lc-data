{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702890,
            "title": "Left most and right most index",
            "titleSlug": "find-first-and-last-occurrence-of-x0849",
            "content": "<p><span style=\"font-size:18px\">Given a sorted array with possibly duplicate elements. The task is to find indexes of first and last occurrences of an element <strong>X</strong> in the given array.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Note: </span></strong><span style=\"font-size:18px\">If the element is not present in the array <strong>return {-1,-1} as pair</strong>.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 9\nv[] = {1, 3, 5, 5, 5, 5, 67, 123, 125}\nX = 5</span>\n<span style=\"font-size:18px\"><strong>Output:</strong>\n2 5</span>\n<span style=\"font-size:18px\"><strong>Explanation:\n</strong>Index of first occurrence of 5 is 2\nand index of last occurrence of 5 is 5.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 9\nv[] = {1, 3, 5, 5, 5, 5, 7, 123, 125}\nX = 7\n<strong>Output:</strong>\n6 6</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>indexes()</strong>&nbsp;which takes the array <strong>v[]</strong><strong>&nbsp;</strong>and an integer <strong>X&nbsp;</strong>as inputs and returns &nbsp;the first and last occurrence of the element <strong>X</strong>. If the element is not present in the array <strong>return {-1,-1} as pair</strong>.<br />\n<br />\nCan you solve the problem in expected time complexity?</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(Log(N))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup><br />\n1 &le; v[i], X &le; 10<sup>18</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array of integers, potentially containing duplicate elements, find the indices of the first and last occurrences of a specified element 'X' within the array. If the element 'X' is not present in the array, return a pair {-1, -1}.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= v[i], X <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "N = 9\nv[] = {1, 3, 5, 5, 5, 5, 67, 123, 125}\nX = 5",
                        "output": "2 5",
                        "explanation": "The first occurrence of 5 is at index 2, and the last occurrence is at index 5."
                    },
                    {
                        "input": "N = 9\nv[] = {1, 3, 5, 5, 5, 5, 7, 123, 125}\nX = 7",
                        "output": "6 6",
                        "explanation": "The first and last occurrence of 7 is at index 6."
                    },
                    {
                        "input": "N = 5\nv[] = {1, 2, 3, 4, 5}\nX = 6",
                        "output": "-1 -1",
                        "explanation": "The element 6 is not present in the array."
                    },
                    {
                        "input": "N = 5\nv[] = {2,2,2,2,2}\nX = 2",
                        "output": "0 4",
                        "explanation": "The first occurrence of 2 is at index 0 and the last occurrence is at index 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Binary Serach STL to check if the number is present in the vector and lower bound and upper bund to find the indexes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution\n{\n    public:\n    // Function to return the indexes of the element x in the vector v\n    pair<long,long> indexes(vector<long long> v, long long x)\n    {\n        // Checking if the element x is present in the vector v\n        if(binary_search(v.begin(),v.end(),x))\n        {\n            // Finding the lower bound of x in the vector v\n            auto it1=lower_bound(v.begin(),v.end(),x);\n            // Finding the upper bound of x in the vector v\n            auto it2=upper_bound(v.begin(),v.end(),x);\n            // Returning the pair of indexes of x in the vector v\n            return {it1-v.begin(), (it2-v.begin())-1};\n        }\n        else\n        {\n            // If x is not present in the vector v, returning {-1, -1}\n            return {-1, -1};\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    // Binary search function to find the lower bound\n    int lower_bound(long A[],int L,int R,long K){\n        int pos=R+1;\n        // binary search loop\n        while(L<=R){\n            int M = (L+R)/2;\n            // if element at middle position is greater than or equal to K,\n            // update pos to current middle position and move the right pointer to M-1\n            if(A[M]>=K){\n                pos=M;\n                R=M-1;\n            }else L=M+1; // if element at middle position is less than K, move the left pointer to M+1\n        }\n        return pos; // return the lower bound position\n    }\n    \n    // Binary search function to find the upper bound\n    int upper_bound(long A[],int L,int R,long K){\n        int pos=-1;\n        // binary search loop\n        while(L<=R){\n            int M = (L+R)/2;\n            // if element at middle position is less than or equal to K,\n            // update pos to current middle position and move the left pointer to M+1\n            if(A[M]<=K){\n                pos=M;\n                L=M+1;\n            }else R=M-1; // if element at middle position is greater than K, move the right pointer to M-1\n        }\n        return pos; // return the upper bound position\n    }\n    \n    // Function to find the indexes of an element in an array using lower bound and upper bound\n    public pair indexes(long v[], long x)\n    {\n        // find the lower bound of x in the array\n        int lb = lower_bound(v,0,v.length-1, x);\n        // find the upper bound of x in the array\n        int ub = upper_bound(v,0,v.length-1, x);\n        \n        // if lower bound is equal to array length or the element at lower bound position is not equal to x,\n        // return a pair of (-1,-1) indicating that the element is not found in the array\n        if(lb == v.length || v[lb]!=x) return new pair(-1,-1);\n        \n        // return a pair of lower bound and upper bound positions indicating the indexes of x in the array\n        return new pair(lb,ub);\n    } \n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "def lower_bound(A,L,R,K):\n    pos=R+1;\n    while(L<=R):\n        M = (L+R)//2;\n        if A[M]>=K :   # find the lower bound of K in array A\n            pos=M;      # stores the position of lower bound\n            R=M-1;      # update the right boundary\n        else : \n            L=M+1;      # update the left boundary\n\n    return pos;\n\ndef upper_bound(A,L,R,K):\n    pos=-1;\n    while(L<=R):\n        M = (L+R)//2;\n        if A[M]<=K :   # find the upper bound of K in array A\n            pos=M;      # stores the position of upper bound\n            L=M+1;      # update the left boundary\n        else : \n            R=M-1;      # update the right boundary\n\n    return pos;\n    \nclass Solution:\n    def indexes(self,Arr,K):\n\n        lb = lower_bound(Arr,0,len(Arr)-1,K)    # find the lower bound of K in Arr\n        ub = upper_bound(Arr,0,len(Arr)-1,K)    # find the upper bound of K in Arr\n\n        if lb == len(Arr) or Arr[lb]!= K :      # K not found in Arr\n            return [-1,-1]\n\n        return [lb,ub]    # returns the lower bound and upper bound of K in Arr",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n  indexes(v, x) {\n    // Find the lower bound of x\n    let first = this.lowerBound(v, x);\n    // If x is not found, return {-1, -1}\n    if (v[first] !== x) return [-1, -1];\n    // Find the upper bound of x\n    let last = this.upperBound(v, x) - 1;\n    return [first, last];\n  }\n\n  lowerBound(v, x) {\n    let low = 0;\n    let high = v.length;\n    while (low < high) {\n      let mid = Math.floor((low + high) / 2);\n      if (v[mid] < x) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return low;\n  }\n\n  upperBound(v, x) {\n    let low = 0;\n    let high = v.length;\n    while (low < high) {\n      let mid = Math.floor((low + high) / 2);\n      if (v[mid] <= x) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return low;\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}