{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703223,
            "title": "First Repeated Character",
            "titleSlug": "find-first-repeated-character4108",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>. The task is to find the first repeated character in it. We need to find the character that occurs more than once and whose index of second occurrence is smallest. s contains only <strong>lowercase</strong> letters.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s =\"geeksforgeeks\"\n<strong>Output:</strong> \"e\"\n<strong>Explanation: '</strong>e' repeats at third position.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s =\"hellogeeks\"</span><span style=\"font-size: 18px;\">\n<strong>Output:</strong> \"l\"\n<strong>Explanation: </strong>'l' repeats at fourth position.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s =\"abc\"</span><span style=\"font-size: 18px;\">\n<strong>Output:</strong> \"-1\"\n<strong>Explanation: </strong>There is no repeated character.</span></pre>\n<p><strong style=\"font-size: 18px;\">Constraints:</strong><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">1 &le; s.size() &le; 10</span><sup>5</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` containing only lowercase letters, find the first repeated character. This is the character that appears more than once and has the smallest index for its second occurrence.",
                "constraints": [
                    "1 <= s.size() <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "geeksforgeeks",
                        "output": "e",
                        "explanation": "The character 'e' is the first character that repeats, with its second occurrence at index 3."
                    },
                    {
                        "input": "hellogeeks",
                        "output": "l",
                        "explanation": "The character 'l' is the first character that repeats, with its second occurrence at index 3."
                    },
                    {
                        "input": "abc",
                        "output": "-1",
                        "explanation": "There are no repeated characters in the string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use an array to count character occurrences and return the first character with a count greater than 1.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string firstRepChar(string s) {\n\n        int h[26] = {0};\n        bool flag = false;\n        string res;\n        // traverse the string from left to right\n        for (int i = 0; i < s.length(); i++) {\n            // checking if current element is coming first time or not\n            if (h[s[i] - 'a'] >= 1) {\n                res = s[i];\n                flag = true;\n                break;\n            } else\n                h[s[i] - 'a']++;\n        }\n        // if there is no repeated character present.\n        if (flag == false)\n            res = \"-1\";\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution \n{ \n    String firstRepChar(String s) \n    { \n        // array to keep track of characters' frequencies\n        int h[] = new int [26];\n        \n        // initializing all frequencies to 0\n        Arrays.fill(h,0);\n        \n        // iterating through the string\n        for(int i=0;i<s.length();i++)\n        {\n            // if the frequency of the character is already greater than 0,\n            // then it is the first repeating character, so return it\n            if(h[s.charAt(i)-'a']>0){\n                return Character.toString(s.charAt(i));\n            }\n            \n            // otherwise, update the frequency of the character to 1\n            h[s.charAt(i)-'a']=1;\n        }\n        \n        // if there are no repeating characters, return -1\n        return \"-1\";\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def firstRepChar(self, s):\n        seen = set()  # Set to store characters already seen\n        for char in s:\n            if char in seen:  # If the character has already been seen\n                return char  # Return the first repeated character\n            seen.add(char)  # Mark the character as seen\n\n        # If no repeated character is found\n        return \"-1\"\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {string} s\r\n * @return {string}\r\n */\r\n\r\nclass Solution {\r\n  firstRepChar(s) {\r\n    let h = new Array(26).fill(0);\r\n    let flag = false;\r\n    let res = '';\r\n    // traverse the string from left to right\r\n    for(let i=0;i<s.length;i++)\r\n    {\r\n        // checking if current element is coming first time or not\r\n        if(h[s[i].charCodeAt(0)-'a'.charCodeAt(0)] >= 1)\r\n        {\r\n            res = s[i];\r\n            flag = true;\r\n            break;\r\n        }\r\n        else\r\n            h[s[i].charCodeAt(0)-'a'.charCodeAt(0)]++;\r\n    }\r\n    // if there is no repeated character present.\r\n    if(!flag)\r\n        res = \"-1\";\r\n        \r\n    return res;    \r\n  }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}