{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701151,
            "title": "First Set Bit",
            "titleSlug": "find-first-set-bit-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer <strong>n.</strong> The task is to return the position of the first set bit found from the <strong>right </strong>side in the binary representation of the number.<br /><strong>Note</strong>: If there is no set bit in the integer N, then return 0 from the function.&nbsp;&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 18\n<strong>Output</strong>: 2\n<strong>Explanation</strong>: Binary representation of 18 is 010010,the first set bit from the right side is at position 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 12\n<strong>Output</strong>: 3 \n<strong>Explanation</strong>: Binary representation of  12 is 1100, the first set bit from the right side is at position 3.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 1\n<strong>Output</strong>: 1\n<strong>Explanation</strong>: Binary representation of  1 is 1, the first set bit from the right side is at position 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer 'n', find the position of the first set bit (1) from the rightmost side in its binary representation. The rightmost bit is considered position 1. If no set bit is found, return 0.",
                "constraints": [
                    "1 <= n <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "18",
                        "output": "2",
                        "explanation": "The binary representation of 18 is 010010. The first set bit from the right is at position 2."
                    },
                    {
                        "input": "12",
                        "output": "3",
                        "explanation": "The binary representation of 12 is 1100. The first set bit from the right is at position 3."
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "The binary representation of 1 is 1. The first set bit from the right is at position 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find position of first set bit in the given number.\n    int getFirstSetBit(int n) {\n        // doing AND operation of n and -n. n and -n will have similar\n        // bits only till the first set bit starting from the right\n        // and differnt bits after the first set bit.Then we take\n        // log2 of the result to find the position.\n\n        // we add 1 to obtained value so that count starts from 1 instead of 0.\n        return log2(n & -n) + 1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //Function to find position of first set bit in the given number.\r\n    public static int getFirstSetBit(int n)\r\n    {\r\n        if(n==0)\r\n            return 0;\r\n            \r\n        //doing AND operation of n and -n. n and -n will have similar\r\n        //bits only till the first set bit starting from the right  \r\n        //and differnt bits after the first set bit.Then we take \r\n        //log2 of the result to find the position.\r\n        \r\n        //we add 1 to obtained value so that count starts from 1 instead of 0.\r\n        \r\n        return (int)(Math.log(n&-n)/Math.log(2.0)) + 1;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to find position of first set bit in the given number.\r\n    def getFirstSetBit(self,n):\r\n        if(n==0):\r\n            return 0\r\n            \r\n        #doing AND operation of n and -n. n and -n will have similar\r\n        #bits only till the first set bit starting from the right  \r\n        #and differnt bits after the first set bit.Then we take \r\n        #log2 of the result to find the position.\r\n        \r\n        #we add 1 to obtained value so that count starts from 1 instead of 0.\r\n        return math.ceil(math.log2(n&-n)+1)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Number} n\r\n * @returns {Number}\r\n*/\r\n\r\n\r\nclass Solution \r\n{\r\n    //Function to find position of first set bit in the given number.\r\n    getFirstSetBit(n)\r\n    {\r\n        if(n==0)\r\n        return 0;\r\n        \r\n        //doing AND operation of n and -n. n and -n will have similar\r\n        //bits only till the first set bit starting from the right  \r\n        //and differnt bits after the first set bit.Then we take \r\n        //log2 of the result to find the position.\r\n        \r\n        //we add 1 to obtained value so that count starts from 1 instead of 0.\r\n        return Math.log2(n&-n)+1; \r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}