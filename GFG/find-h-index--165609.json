{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878654,
            "title": "Find H-Index",
            "titleSlug": "find-h-index--165609",
            "content": "<p><span ><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px;\">Given an integer array <strong>citations</strong></span><strong style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">[], </strong>where <strong>citations[i]</strong> is the number of citations a researcher received for the <strong>i<sup>th</sup></strong> paper.<span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px;\"> The task is to find the <strong>H-index</strong>.</span></span></p>\n<blockquote>\n<p><span ><strong><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; white-space-collapse: preserve; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">H-Index</span></strong><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; white-space-collapse: preserve;\"> is the <strong>largest</strong> value such that the researcher has <strong>at least H papers</strong> that have been cited <strong>at least H times</strong>.</span></span></p>\n</blockquote>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; white-space: normal;\">citations</span>[] = [3, 0, 5, 3, 0]<br /></span><span ><strong>Output:</strong> 3<br /><strong>Explanation:</strong> There are at least 3 papers (3, 5, 3) with at least 3 citations.</span></pre>\n<pre><span ><strong>Input:</strong> citations[] = [5, 1, 2, 4, 1]<br /><strong>Output:</strong> 2<br /><strong>Explanation:</strong> There are 3 papers (with citation counts of 5, 2, and 4) that have 2 or more citations. However, the H-Index cannot be 3 because there aren't 3 papers with 3 or more citations.<br /></span></pre>\n<pre><span ><strong>Input:</strong> citations[] = [0, 0]<br /><strong>Output:</strong> 0<br /></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le;&nbsp;</span><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; font-size: 14pt;\">citations</span><span >.size() &le; 10</span><sup>6<br /></sup><span >0 &le;&nbsp;</span><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; font-size: 14pt;\">citations</span><span >[i] &le; 10</span><sup>6</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `citations`, where `citations[i]` represents the number of citations a researcher received for their i-th paper, find the researcher's H-index.\n\nThe H-index is defined as the largest value H such that the researcher has at least H papers that have been cited at least H times.",
                "constraints": [
                    "1 <= citations.size() <= 10^6",
                    "0 <= citations[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[3, 0, 5, 3, 0]",
                        "output": "3",
                        "explanation": "The researcher has 3 papers with at least 3 citations each (3, 5, and 3)."
                    },
                    {
                        "input": "[5, 1, 2, 4, 1]",
                        "output": "2",
                        "explanation": "The researcher has 3 papers (5, 2, and 4) with at least 2 citations.  However, the H-index cannot be 3 because there are not 3 papers with 3 or more citations."
                    },
                    {
                        "input": "[0, 0]",
                        "output": "0",
                        "explanation": "The researcher has no papers with at least one citation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Count papers by citation level, then find the highest <strong>hIndex</strong> where cumulative papers &ge; <strong>hIndex</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n// Function to calculate the h-index using citations\nclass Solution {\n  public:\n    int hIndex(vector<int>& citations) {\n        int papers = citations.size();\n        vector<int> citationBuckets(papers + 1, 0);\n\n        // Counting the number of papers in each citation bucket\n        for (int citation : citations) {\n            citationBuckets[min(citation, papers)]++;\n        }\n\n        int cumulativePapers = 0;\n        // Iterating from highest h-index to lowest\n        for (int hIndex = papers; hIndex >= 0; hIndex--) {\n            cumulativePapers += citationBuckets[hIndex];\n            // Checking if current h-index is satisfied\n            if (cumulativePapers >= hIndex) {\n                return hIndex;\n            }\n        }\n        return 0; // Return 0 if no h-index is found\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int hIndex(int[] citations) {\n        // Get the total number of papers\n        int papers = citations.length;\n        // Create an array to store the count of citations in each bucket\n        int[] citationBuckets = new int[papers + 1];\n\n        // Count the number of papers in each bucket\n        for (int citation : citations) {\n            citationBuckets[Math.min(citation, papers)]++;\n        }\n\n        // Calculate the cumulative number of papers\n        int cumulativePapers = 0;\n        // Iterate from the highest possible h-index to 0\n        for (int hIndex = papers; hIndex >= 0; hIndex--) {\n            cumulativePapers += citationBuckets[hIndex];\n            // Check if the current h-index is satisfied\n            if (cumulativePapers >= hIndex) {\n                return hIndex;\n            }\n        }\n        // Return 0 if no valid h-index is found\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    #Function to calculate h-index based on given citations.\n    def hIndex(self, citations):\n        papers = len(citations)\n        citation_buckets = [0] * (papers + 1)\n\n        #Creating buckets to store count of citations.\n        for citation in citations:\n            citation_buckets[min(citation, papers)] += 1\n\n        cumulative_papers = 0\n\n        #Iterating from maximum citations to 0 to find h-index.\n        for h_index in range(papers, -1, -1):\n            cumulative_papers += citation_buckets[h_index]\n\n            #Checking if cumulative papers are greater than or equal to h-index.\n            if cumulative_papers >= h_index:\n                return h_index\n        return 0",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    hIndex(citations) {\n        let papers = citations.length; // Get the total number of papers.\n        let citationBuckets =\n            new Array(papers + 1).fill(0); // Create an array to store the count of\n                                           // citations in each bucket.\n\n        for (const citation of citations) {\n            citationBuckets[Math.min(citation,\n                                     papers)]++; // Increment the count of citations in\n                                                 // the corresponding bucket.\n        }\n\n        let cumulativePapers = 0;\n        for (let hIndex = papers; hIndex >= 0; hIndex--) {\n            cumulativePapers +=\n                citationBuckets[hIndex]; // Update the cumulative count of papers.\n            if (cumulativePapers >= hIndex) {\n                return hIndex; // Return the h-index if the condition is met.\n            }\n        }\n        return 0; // Return 0 if no h-index is found.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}