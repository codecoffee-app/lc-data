{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878207,
            "title": "Find H-Index for sorted citations",
            "titleSlug": "find-h-index",
            "content": "<p><span ><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px;\">Given an array, <strong>citations</strong></span><strong style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">[],</strong><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px;\"> where elements are in non-</span></span><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px;\">increasing</span><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; font-size: 14pt;\">&nbsp;order. The task is to find the H-index.</span></p>\n<blockquote>\n<p><span ><strong><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; white-space-collapse: preserve; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">H-Index</span></strong><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; white-space-collapse: preserve;\"> is usually assigned to the researcher denoting the contributions made in terms of the papers and citations. H-index(H) is the largest value such that the researcher has at least H papers cited at least H times.</span></span></p>\n</blockquote>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; white-space: normal;\">citations</span>[] = [5, 3, 3, 0, 0]<br /><strong>Output:</strong> 3<br /><strong>Explanation:</strong> There are at least 3 papers (5, 3, 3) with at least 3 citations.</span></pre>\n<pre><span ><strong>Input:</strong> citations[] = [5, 4, 2, 1, 1]<br /><strong>Output:</strong> 2<br /><strong>Explanation:</strong> There are atleast 2 papers (5, 4, 2) with atleast 2 citations.<br /></span></pre>\n<pre><span ><strong>Input:</strong> citations[] = [0, 0]<br /><strong>Output:</strong> 0<br /></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le;&nbsp;<span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px;\">citations</span>.size() &le; 10<sup>6<br /></sup>0 &le;&nbsp;<span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px;\">citations</span>[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `citations` of paper citations sorted in non-increasing order, determine the researcher's H-index. The H-index is the largest value H such that the researcher has at least H papers cited at least H times.",
                "constraints": [
                    "1 <= citations.size() <= 10^6",
                    "0 <= citations[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[5, 3, 3, 0, 0]",
                        "output": "3",
                        "explanation": "The researcher has 3 papers with at least 3 citations each (5, 3, and 3)."
                    },
                    {
                        "input": "[5, 4, 2, 1, 1]",
                        "output": "2",
                        "explanation": "The researcher has 2 papers with at least 2 citations each (5 and 4)."
                    },
                    {
                        "input": "[0, 0]",
                        "output": "0",
                        "explanation": "The researcher has no papers with at least 1 citation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use binary search on sorted citations to find the maximum h-index by checking if citations[mid] meet h-index criteria.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n//      Class Solution to contain the method for solving the problem.\nclass Solution {\n  public:\n    // Function to find hIndex\n    int hIndex(vector<int>& citations) {\n        int hindex = 0, n = citations.size();\n\n        // Set the range for binary search\n        int low = 0, high = n - 1;\n\n        while (low <= high) {\n            int mid = (low + high) / 2;\n\n            // Check if current citations is\n            // possible\n            if (citations[mid] >= (mid + 1)) {\n\n                // Check to the right of mid\n                low = mid + 1;\n\n                // Update h-index\n                hindex = mid + 1;\n            } else {\n\n                // Since current value is not\n                // possible, check to the left\n                // of mid\n                high = mid - 1;\n            }\n        }\n\n        return hindex;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to find hIndex\n    public int hIndex(int[] citations) {\n        int hindex = 0;\n        int n = citations.length;\n\n        // Set the range for binary search\n        int low = 0, high = n - 1;\n\n        while (low <= high) {\n            int mid = (low + high) / 2;\n\n            // Check if current citations count is possible\n            if (citations[mid] >= (mid + 1)) {\n                // Move right\n                low = mid + 1;\n\n                // Update h-index\n                hindex = mid + 1;\n            } else {\n                // Move left\n                high = mid - 1;\n            }\n        }\n\n        return hindex;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\nclass Solution:\n    # Function to find hIndex\n    def hIndex(self, citations):\n        hindex = 0\n        n = len(citations)\n\n        low, high = 0, n - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n\n            # Check if current citations count is valid for hIndex\n            if citations[mid] >= (mid + 1):\n                # Move right and update hIndex\n                low = mid + 1\n                hindex = mid + 1\n            else:\n                # Move left\n                high = mid - 1\n\n        return hindex",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find hIndex\n    hIndex(citations) {\n        let hindex = 0;\n        let n = citations.length;\n        let low = 0, high = n - 1;\n\n        while (low <= high) {\n            let mid = Math.floor((low + high) / 2);\n\n            // Check if current citations count is valid for hIndex\n            if (citations[mid] >= (mid + 1)) {\n                // Move right and update hIndex\n                low = mid + 1;\n                hindex = mid + 1;\n            } else {\n                // Move left\n                high = mid - 1;\n            }\n        }\n\n        return hindex;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}