{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704409,
            "title": "K-Palindrome",
            "titleSlug": "find-if-string-is-k-palindrome-or-not1923",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>str</strong>&nbsp;of length <strong>n,</strong>&nbsp;find&nbsp;if the string is K-Palindrome or not. A k-palindrome string transforms into a palindrome on removing at most <strong>k</strong> characters from it.</span></p>\n<p><br /><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> str = \"abcdecba\"\nn = 8, k = 1\n<strong>Output:</strong> 1\n<strong>Explaination:</strong> By removing 'd' or 'e' \nwe can make it a palindrome.</span></pre>\n<p><br /><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> str = \"abcdefcba\"\nn = 9, k = 1\n<strong>Output:</strong> 0\n<strong>Explaination:</strong> By removing a single \ncharacter we cannot make it a palindrome.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>kPalindrome()</strong> which takes string str, n, and k as input parameters and returns <strong>1</strong> if str is a K-palindrome else returns <strong>0</strong>.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*n)<br /><strong>Expected Auxiliary Space:</strong> O(n*n)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n, k&nbsp;&le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` of length `n`, determine if the string is a K-Palindrome or not. A K-Palindrome string can be transformed into a palindrome by removing at most `k` characters from it.",
                "constraints": [
                    "1 <= n, k <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "str = \"abcdecba\"\nn = 8, k = 1",
                        "output": "1",
                        "explanation": "Removing either 'd' or 'e' results in the palindrome \"abceba\" or \"abcdcba\", respectively. Since we remove at most k=1 characters, the string is a K-Palindrome."
                    },
                    {
                        "input": "str = \"abcdefcba\"\nn = 9, k = 1",
                        "output": "0",
                        "explanation": "Removing a single character from \"abcdefcba\" will not result in a palindrome. Therefore, it's not a K-Palindrome with k=1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Check by removing all posiible combinations of k letters.</span></p>",
            "<p><span style=\"font-size:18px\">Use dynamic programming approach for time optimization.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    int isKPalin(string str, string revstr, int m, int n)\n    {\n        // Create a table to store results of subproblems\n        int dp[m + 1][n + 1];\n        \n        // Fill dp[][] in bottom up manner\n        for (int i = 0; i <= m; i++){\n            for (int j = 0; j <= n; j++){\n                // If first string is empty, only option is to\n                // remove all characters of second string\n                if (i == 0)\n                    dp[i][j] = j; // Min. operations = j\n     \n                // If second string is empty, only option is to\n                // remove all characters of first string\n                else if (j == 0)\n                    dp[i][j] = i; // Min. operations = i\n     \n                // If last characters are same, ignore last character\n                // and recur for remaining string\n                else if (str[i - 1] == revstr[j - 1])\n                    dp[i][j] = dp[i - 1][j - 1];\n     \n                // If last character are different, remove it\n                // and find minimum\n                else\n                 dp[i][j] = 1 + min(dp[i - 1][j], // Remove from str1\n                                 dp[i][j - 1]); // Remove from str2\n            }\n        }\n     \n        return dp[m][n];\n    }\n    \n    int kPalindrome(string str, int n, int k)\n    {\n        string revstr = str;\n        reverse(revstr.begin(), revstr.end());\n        if(isKPalin(str, revstr, n, n) <= 2*k)\n            return 1;\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int isKPalin(String str, String revstr, int m, int n) {\n        // Create a table to store results of subproblems\n        int[][] dp = new int[m + 1][n + 1];\n\n        // Fill dp[][] in bottom up manner\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                // If first string is empty, only option is to\n                // remove all characters of second string\n                if (i == 0) dp[i][j] = j; // Min. operations = j\n\n                // If second string is empty, only option is to\n                // remove all characters of first string\n                else if (j == 0)\n                    dp[i][j] = i; // Min. operations = i\n\n                // If last characters are same, ignore last character\n                // and recur for remaining string\n                else if (str.charAt(i - 1) == revstr.charAt(j - 1))\n                    dp[i][j] = dp[i - 1][j - 1];\n\n                // If last character are different, remove it\n                // and find minimum\n                else\n                    dp[i][j] = 1 + Math.min(dp[i - 1][j],  // Remove from str1\n                                            dp[i][j - 1]); // Remove from str2\n            }\n        }\n\n        return dp[m][n];\n    }\n\n    public int kPalindrome(String str, int n, int k) {\n        StringBuilder revBuilder = new StringBuilder(str);\n        String revstr = revBuilder.reverse().toString();\n\n        if (isKPalin(str, revstr, n, n) <= 2 * k) return 1;\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def isKPalin(self, s, rev_s, m, n):\n        # Create a table to store results of subproblems\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        # Fill dp[][] in bottom up manner\n        for i in range(m + 1):\n            for j in range(n + 1):\n                # If first string is empty, only option is to\n                # remove all characters of second string\n                if i == 0:\n                    dp[i][j] = j  # Min. operations = j\n\n                # If second string is empty, only option is to\n                # remove all characters of first string\n                elif j == 0:\n                    dp[i][j] = i  # Min. operations = i\n\n                # If last characters are same, ignore last character\n                # and recur for remaining string\n                elif s[i - 1] == rev_s[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n\n                # If last character are different, remove it\n                # and find minimum\n                else:\n                    dp[i][j] = 1 + min(\n                        dp[i - 1][j],  # Remove from str1\n                        dp[i][j - 1])  # Remove from str2\n        return dp[m][n]\n\n    def kPalindrome(self, s, n, k):\n        rev_s = s[::-1]\n        if self.isKPalin(s, rev_s, n, n) <= 2 * k:\n            return 1\n        return 0\n\n\n# Example usage:\n# solution = Solution()\n# print(solution.kPalindrome(\"abcde\", 5, 1))  # Output: 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution{\n    kPalindrome(s,n,k){\n        const revstr = s.split('').reverse().join('');\n        const dp = [];\n        for (let i = 0; i <= n; i++) {\n            dp.push(new Array(n+1));\n        }\n        \n        for (let i = 0; i <= n; i++) {\n            for (let j = 0; j <= n; j++) {\n                if (i === 0) {\n                    dp[i][j] = j;\n                } else if (j === 0) {\n                    dp[i][j] = i;\n                } else if (s[i - 1] === revstr[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        if (dp[n][n] <= 2 * k) {\n            return 1;\n        }\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}