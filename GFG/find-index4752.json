{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702694,
            "title": "Find Index",
            "titleSlug": "find-index4752",
            "content": "<p><span style=\"font-size: 18px;\">Given an unsorted array <strong>arr[]</strong> of integers and a <strong>key</strong> which is present in this array. You need to write a program to find the <strong>start index</strong>( index where the element is first found from left in the array ) and <strong>end index</strong>( index where the element is first found from right in the array ) return&nbsp;</span><span style=\"font-size: 18px;\">an array of length 2 with elements start index and end index</span><span style=\"font-size: 18px;\">.</span><strong style=\"font-size: 18px;\">(0 based indexing is used)</strong></p>\n<p><span style=\"font-size: 18px;\">If the key does not exist in the array then return -1 for both start and end index in this case.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5, 5] , key = 5\n<strong>Output:</strong>  [4, 5]\n<strong>Explanation</strong>: 5 appears first time at index 4 and appears last time at index 5(0 based indexing)\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [6, 5, 4, 3, 1, 2] , key = 4\n<strong>Output: </strong>[2, 2]<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: </span></span><span style=\"font-size: 18px;\">4 appears first time and last time at index 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [7, 8, 6] , key = 2\n<strong>Output: </strong>[-1, -1]<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: </span></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, sans-serif;\"><span style=\"font-size: 18px;\">Since 2 does not appear in the array, we will return -1 for both the start and end indices.</span></span><span style=\"font-size: 18px;\">.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size &le; 10<sup>6</sup><br />1 &lt;= arr[i] , key &lt;= 10<sup>9</sup>&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array of integers `arr[]` and a `key` that may or may not be present in the array, find the start and end indices of the key within the array. The start index is the index where the key is first encountered from the left, and the end index is the index where the key is last encountered from the right. Return an array of length 2 containing the start and end indices. Use 0-based indexing.\n\nIf the key is not found in the array, return `[-1, -1]`.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= arr[i], key <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr = [1, 2, 3, 4, 5, 5], key = 5",
                        "output": "[4, 5]",
                        "explanation": "The key 5 first appears at index 4 and last appears at index 5."
                    },
                    {
                        "input": "arr = [6, 5, 4, 3, 1, 2], key = 4",
                        "output": "[2, 2]",
                        "explanation": "The key 4 appears only once at index 2."
                    },
                    {
                        "input": "arr = [7, 8, 6], key = 2",
                        "output": "[-1, -1]",
                        "explanation": "The key 2 is not present in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We traverse the array from beginning to find the first occurrence. If the element is present, then we traverse from end also to find the last occurrence.</p>\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the start and end index of a given key in an array.\n    vector<int> findIndex(vector<int>& arr, int key) {\n        int n = arr.size();\n        int start = -1;\n\n        // iterating over the array to find the start index of the key.\n        for (int i = 0; i < n; i++) {\n            // if current element is equal to the key, update start index\n            // and break the loop.\n            if (arr[i] == key) {\n                start = i;\n                break;\n            }\n        }\n\n        int end = start;\n        // iterating over the array from the end to find the end index of the key.\n        for (int i = n - 1; i >= 0; i--) {\n            // if current element is equal to the key, update end index\n            // and break the loop.\n            if (arr[i] == key) {\n                end = i;\n                break;\n            }\n        }\n\n        // creating a vector to store the start and end index.\n        vector<int> ans;\n        ans.push_back(start);\n        ans.push_back(end);\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find starting and end index\n    static int[] findIndex(int arr[], int key) {\n        int n = arr.length;\n        int start = -1;\n\n        // Traverse from beginning to find\n        // first occurrence\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == key) {\n                start = i;\n                break;\n            }\n        }\n\n        // Traverse from end to find last\n        // occurrence.\n        int end = start;\n        for (int i = n - 1; i >= 0; i--) {\n            if (arr[i] == key) {\n                end = i;\n                break;\n            }\n        }\n        int b[] = new int[2];\n        b[0] = start;\n        b[1] = end;\n        return b;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def findIndex(self, arr, key):\n        n = len(arr)\n        start = -1\n\n        # Traverse from beginning to find\n        # first occurrence\n        for i in range(n):\n            if arr[i] == key:\n                start = i\n                break\n        # Traverse from end to find last\n        # occurrence.\n        end = start\n        for i in range(n - 1, -1, -1):\n            if arr[i] == key:\n                end = i\n                break\n        a = []\n        a.append(start)\n        a.append(end)\n        return a\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} a\n * @param {number} n\n * @param {number} key\n * @return {number[]}\n */\n\nclass Solution {\n    findIndex(arr, key) {\n        let n = arr.length;\n        let start = -1;\n\n        for (let i = 0; i < n; i++) {\n            if (arr[i] === key) {\n                start = i;\n                break;\n            }\n        }\n        let end = start;\n        for (let i = n - 1; i >= 0; i--) {\n            if (arr[i] === key) {\n                end = i;\n                break;\n            }\n        }\n        return [ start, end ];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}