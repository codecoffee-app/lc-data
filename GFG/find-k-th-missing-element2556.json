{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702671,
            "title": "Find k-th missing element",
            "titleSlug": "find-k-th-missing-element2556",
            "content": "<p><span >Given two arrays, one is an <strong>increasing sequence</strong> arr1[] and the other is a <strong>normal sequence</strong> arr2[], find the <strong>k</strong>-th missing element in the increasing sequence that is not present in the normal sequence. If no <strong>k</strong>-th missing element exists, return -1.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr1[] = [0, 2, 4, 6, 8, 10, 12, 14, 15], arr2[] = [4, 10, 6, 8, 12], k = 3</span><br /><span ><strong>Output:</strong> 14</span><br /><span ><strong>Explanation:</strong> The missing numbers from arr1 that are not in arr2 are [0, 2, 14, 15]. The 3rd missing number is 14.</span></pre>\n<pre><span ><strong>Input:</strong> arr1[] = [1, 2, 3, 4, 5], arr2[] = [5, 4, 3, 1, 2], k = 3</span><br /><span ><strong>Output:</strong> -1</span><br /><span ><strong>Explanation:</strong> All numbers from arr1 are present in arr2, so there is no missing element.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n + m)</span><br /><span ><strong>Expected Auxiliary Space:</strong> O(m)</span></p>\n<p><span ><strong>Constraints:<br /></strong></span><span >1 &le; arr1.size(), arr2.size(), k &le; 10<sup>5</sup><br /></span><span >1 &le; arr1[i] &le; 10<sup>5</sup><br /></span><span >1 &le; arr2[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>hash the elements of the second array and the traverse in the first array as you find kth missing return if you do not find return -1.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findKthMissing(vector<int>& arr1, vector<int>& arr2, int k) {\n        unordered_set<int> set2(arr2.begin(), arr2.end());\n        vector<int> missing;\n\n        for (int num : arr1) {\n            if (set2.find(num) == set2.end()) {\n                missing.push_back(num);\n            }\n            if (missing.size() == k) {\n                return missing.back();\n            }\n        }\n\n        return -1;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findKthMissing(int[] arr1, int[] arr2, int k) {\n        Set<Integer> set2 = new HashSet<>();\n        for (int num : arr2) {\n            set2.add(num);\n        }\n\n        List<Integer> missing = new ArrayList<>();\n\n        for (int num : arr1) {\n            if (!set2.contains(num)) {\n                missing.add(num);\n            }\n            if (missing.size() == k) {\n                return missing.get(k - 1);\n            }\n        }\n\n        return -1;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findKthMissing(self, arr1, arr2, k):\n        set2 = set(arr2)\n        missing = []\n\n        for num in arr1:\n            if num not in set2:\n                missing.append(num)\n            if len(missing) == k:\n                return missing[k - 1]\n\n        return -1\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findKthMissing(arr1, arr2, k) {\n        const set2 = new Set(arr2);\n        const missing = [];\n\n        for (let num of arr1) {\n            if (!set2.has(num)) {\n                missing.push(num);\n            }\n            if (missing.length === k) {\n                return missing[k - 1];\n            }\n        }\n\n        return -1;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}