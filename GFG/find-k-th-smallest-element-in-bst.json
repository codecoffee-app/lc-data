{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700498,
            "title": "k-th Smallest in BST",
            "titleSlug": "find-k-th-smallest-element-in-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given a BST and an integer <strong>k, </strong>the task is to find the <strong>kth</strong> smallest element in the BST. If there is no kth smallest element present then return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [2, 1, 3], k = 2\n&nbsp;   <img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700236/Web/Other/blobid1_1738413633.png\" alt=\"\" width=\"269\" height=\"217\" />\n<strong>Output: </strong>2\n<strong>Explanation:</strong> 2 is the 2nd smallest element in the BST.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [2, 1, 3], k = 5\n    <img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700236/Web/Other/blobid1_1738413633.png\" alt=\"\" width=\"274\" height=\"221\" />\n<strong>Output: </strong>-1\n<strong>Explanation:</strong> There is no 5th smallest element in the BST as the size of BST is 3.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [20, 8, 22, 4, 12, N, N, N, N, 10, 14], k = 3<br /></span><span style=\"font-size: 18px;\">    <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700498/Web/Other/blobid1_1736918049.jpg\" width=\"270\" height=\"241\" /> <br /></span><span style=\"font-size: 18px;\"><strong>Output: </strong>10\n<strong>Explanation:</strong> 10 is the 3rd smallest element in the BST.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1 &lt;= number of nodes, k &lt;= 10<sup>5<br /></sup></span></li>\n<li><span style=\"font-size: 18px;\">1 &lt;= node-&gt;data &lt;= 10<sup>5</sup><sup><br /></sup></span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and an integer `k`, find the kth smallest element in the BST. If the kth smallest element does not exist, return -1.",
                "constraints": [
                    "1 <= number of nodes, k <= 10^5",
                    "1 <= node value <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root = [2, 1, 3], k = 2",
                        "output": "2",
                        "explanation": "The 2nd smallest element in the BST [2, 1, 3] is 2."
                    },
                    {
                        "input": "root = [2, 1, 3], k = 5",
                        "output": "-1",
                        "explanation": "There is no 5th smallest element in the BST as the size of BST is 3."
                    },
                    {
                        "input": "root = [20, 8, 22, 4, 12, null, null, null, null, 10, 14], k = 3",
                        "output": "10",
                        "explanation": "The 3rd smallest element in the BST [20, 8, 22, 4, 12, null, null, null, null, 10, 14] is 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You can solve this by iterative inorder traversal of the BST (about which you can read <a href=\"https://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion/\">here</a>)&nbsp;but that method would require some extra auxiliary space. You can optimize the Auxiliary space to O(1). Try it using the <a href=\"https://www.geeksforgeeks.org/kth-smallest-element-in-bst-using-o1-extra-space/\">Morris Traversal</a> of the BST.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "google"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "int k_ref;\n\nstruct Node* kthSmallestRecur(struct Node* root) {\n    // base case\n    if (root == NULL)\n        return NULL;\n\n    // search in left subtree\n    struct Node* left = kthSmallestRecur(root->left);\n\n    // if k'th smallest is found in left subtree, return it\n    if (left != NULL)\n        return left;\n\n    // if current element is k'th smallest, return it\n    k_ref--;\n    if (k_ref == 0)\n        return root;\n\n    // else search in right subtree\n    return kthSmallestRecur(root->right);\n}\n\n// Function to find k'th largest element in BST\nint kthSmallest(struct Node* root, int k) {\n    // maintain index to count number of struct nodes processed so far\n    int count = 0;\n    k_ref = k;\n    struct Node* res = kthSmallestRecur(root);\n    if (res == NULL)\n        return -1;\n    else\n        return res->data;\n}\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int kthSmallest(Node *root, int k) {\n        Node *cur = root, *pre;\n\n        int ans = -1;\n\n        // Inorder morris traversal\n        while (cur != NULL) {\n            if (cur->left == NULL) {\n                // If current node is the kth smallest element,\n                // update answer and decrement k\n                if (k == 1)\n                    ans = cur->data;\n                k--;\n                cur = cur->right;\n            } else {\n                pre = cur->left;\n\n                // Finding the rightmost node of the left subtree\n                while (pre->right != NULL and pre->right != cur)\n                    pre = pre->right;\n\n                if (pre->right == NULL) {\n                    // Creating a thread from rightmost node of left subtree to current\n                    // node\n                    pre->right = cur;\n                    cur = cur->left;\n                } else {\n                    // If the thread already exists, update answer and decrement k\n                    if (k == 1)\n                        ans = cur->data;\n                    k--;\n                    pre->right = NULL;\n                    cur = cur->right;\n                }\n            }\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int kthSmallest(Node root, int k) {\n        Node temp = MorrisInorderTraversal(root, k);\n        if (temp != null)\n            return temp.data;\n        else\n            return -1;\n    }\n\n    public Node MorrisInorderTraversal(Node root, int k) {\n        if (root == null) return null;\n\n        Node prev = null;\n        Node curr = root;\n\n        while (curr != null) {\n            // check for presence of left subtree\n            if (curr.left == null) {\n                // If kth smallest is found\n                if (k == 1) {\n                    // Return the current node\n                    return curr;\n                }\n\n                k--;\n                // Traverse right subtree otherwise\n                curr = curr.right;\n            } else {\n                // Find the inorder predecessor of current\n                prev = curr.left;\n                while (prev.right != null && prev.right != curr) {\n                    prev = prev.right;\n                }\n\n                if (prev.right == null) {\n                    // Make current as the right child of\n                    // its inorder predecessor\n                    prev.right = curr;\n                    curr = curr.left;\n                } else {\n                    // Revert the changes to right child\n                    // of predecessor\n                    prev.right = null;\n                    k--;\n                    if (k == 0) return curr;\n\n                    // Traverse right subtree\n                    curr = curr.right;\n                }\n            }\n        }\n\n        return null;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def kthSmallest(self, root, k):\n        ksmall = -1  # store the Kth smallest\n        curr = root  # to store the current node\n\n        while curr != None:\n\n            # Like Morris traversal if current does\n            # not have left child rather than\n            # printing as we did in inorder, we\n            # will just increment the count as the\n            # number will be in an increasing order\n            if curr.left == None:\n                if k == 1:\n                    ksmall = curr.data\n                k -= 1\n                curr = curr.right\n\n            else:\n                pre = curr.left\n\n                while pre.right != None and pre.right != curr:\n                    pre = pre.right\n\n                if pre.right == None:\n                    pre.right = curr\n                    curr = curr.left\n\n                else:\n\n                    if k == 1:\n                        ksmall = curr.data\n                    k -= 1\n                    pre.right = None\n                    curr = curr.right\n\n        return ksmall  # return the found value\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\nclass Solution {\n    // Complete this function\n    //  Return the Kth smallest element in the given BST\n    public int kthSmallest(Node root, int k) {\n        Node cur = root, pre;\n\n        int ans = -1;\n\n        // Inorder morris traversal\n        while (cur != null) {\n            if (cur.left == null) {\n                // If current node is the kth smallest element,\n                // update answer and decrement k\n                if (k == 1) ans = cur.data;\n                k--;\n                cur = cur.right;\n            } else {\n                pre = cur.left;\n\n                // Finding the rightmost node of the left subtree\n                while (pre.right != null && pre.right != cur) pre = pre.right;\n\n                if (pre.right == null) {\n                    // Creating a thread from rightmost node of left subtree to current\n                    // node\n                    pre.right = cur;\n                    cur = cur.left;\n                } else {\n                    // If the thread already exists, update answer and decrement k\n                    if (k == 1) ans = cur.data;\n                    k--;\n                    pre.right = null;\n                    cur = cur.right;\n                }\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    kthSmallest(root, k) {\n        let cur = root;\n        let pre;\n\n        let ans = -1;\n\n        while (cur !== null) {\n            if (cur.left === null) {\n                if (k === 1) ans = cur.data;\n                k--;\n                cur = cur.right;\n            } else {\n                pre = cur.left;\n\n                while (pre.right !== null && pre.right !== cur) {\n                    pre = pre.right;\n                }\n\n                if (pre.right === null) {\n                    pre.right = cur;\n                    cur = cur.left;\n                } else {\n                    if (k === 1) ans = cur.data;\n                    k--;\n                    pre.right = null;\n                    cur = cur.right;\n                }\n            }\n        }\n\n        return ans;\n    }\n}\n\nmodule.exports = Solution;",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}