{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709902,
            "title": "Find k-th smallest element in given n ranges",
            "titleSlug": "find-k-th-smallest-element-in-given-n-ranges",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>n </strong>ranges of the form [p, q] which denotes all the numbers in the range [p, p + 1, p + 2,...q].&nbsp; Given another integer <strong>q </strong>denoting&nbsp;the number of queries.&nbsp;The task is to return&nbsp;the <strong>k<sup>th</sup></strong>&nbsp;smallest element for each query (assume k&gt;1) after <strong>combining</strong> all the ranges.<br />In case the <strong>k<sup>th</sup></strong> smallest element doesn't exist return -1.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:<br /></strong>n = 2, q = 3\nrange[] = {{1, 4}, {6, 8}}\nqueries[] = {2, 6, 10}\n<strong>Output: <br /></strong>2 7 -1\n<strong>Explanation:</strong> <br />After combining the given ranges, \nthe numbers become 1 2 3 4 6 7 8. As here 2nd \nelement is 2, so we print 2. As 6th element is \n7, so we print 7 and as 10th element doesn't <br />exist, so weprint -1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:<br /></strong>n = 2, q = 2\nrange[] = {{2, 6}, {5, 7}} \nqueries[] = {5, 8}\n<strong>Output: <br /></strong>6 -1\n<strong>Explantion: <br /></strong></span><span >After combining the ranges, we'll take <strong>Union</strong> of </span><br /><span >range= {2,3,4,5,6,7}, here  5th smallest number </span><br /><span >will be 6 and 8th smallest number does not exists.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>kthSmallestNum</strong><strong>()</strong> which takes a n * 2 array denoting the ranges and an array denoting the queries.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn+q*n)<br /><strong>Expected Auxiliary Space:</strong> O(q)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>3</sup></span><br /><span style=\"font-size: 18px;\">1 &lt;= range[i][0] &lt;= range[i][1] &lt;= 2*10<sup>9</sup></span><br /><span style=\"font-size: 18px;\">1 &lt;= q &lt;= 500</span><br /><span style=\"font-size: 18px;\">1 &lt;= queries[i] &lt;= 2*10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">&nbsp;Merge overlapping intervals&nbsp;and keep all intervals sorted in ascending order of start time.</span></p>",
            "<p><span style=\"font-size:18px\">After merging in an array merged[], we use linear search to find kth smallest element.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    // Function to merge overlapping intervals\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        // Sort the intervals based on the start time\n        sort(begin(intervals), end(intervals));\n        \n        vector<int>v = intervals[0];\n        vector<vector<int>>ans;\n        // Merge the intervals\n        for(int i = 1; i < intervals.size(); i++){ \n            if(v[1]>=intervals[i][0]){\n                v[1] = max(v[1], intervals[i][1]);\n            }\n            else{\n                ans.push_back(v);\n                v = intervals[i];\n            }\n        }\n        ans.push_back(v);\n        return ans;\n    }\n\n    // Function to find the kth smallest number in the merged intervals\n    int find_kth(vector<vector<int>>&merged, int k){\n        int n = merged.size();\n        // Traverse through the merged intervals and find the kth smallest number\n        for (int j = 0; j < n; j++)\n        {\n            if (k <= abs(merged[j][1] - merged[j][0] + 1))\n                return (merged[j][0] + k - 1);\n \n            k = k - abs(merged[j][1] - merged[j][0] + 1);\n        }\n \n        // If k is still remaining, there is no kth smallest number\n        if (k)\n            return -1;\n    }\n\n    // Function to find the kth smallest numbers for the given range and queries\n    vector<int>kthSmallestNum(int n, vector<vector<int>>&range, int q, vector<int>queries){\n        // Merge the overlapping intervals\n        vector<vector<int>>merged = merge(range);\n        vector<int>ans;\n        // Find the kth smallest number for each query\n        for(int i = 0 ; i < queries.size(); i++){\n            int res = find_kth(merged, queries[i]);\n            ans.push_back(res);\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static ArrayList<Integer> kthSmallestNum(int n, int[][] range, int q, int[] queries) {\r\n        // code here\r\n        //merging Intervals\r\n        ArrayList<pair> A=new ArrayList<>();\r\n        for(int i=0;i<range.length;i++){\r\n            A.add(new pair(range[i][0],range[i][1]));\r\n        }\r\n        Collections.sort(A,new myComp());\r\n        ArrayList<pair> merged=mergeIntervals(A);\r\n        \r\n        //Solving queries\r\n        ArrayList<Integer> ans=new ArrayList<>();\r\n        for(int i = 0 ; i < queries.length; i++){\r\n            int res = find_kth(merged, queries[i]);\r\n            ans.add(res);\r\n        }\r\n        return ans;\r\n    }\r\n    \r\n    public static int find_kth(ArrayList<pair> merged, int k){\r\n        int n = merged.size();\r\n        int to_return=-1;\r\n        for (int j = 0; j < n; j++)\r\n        {\r\n            if (k <= Math.abs(merged.get(j).b -merged.get(j).a + 1)){\r\n                to_return = (merged.get(j).a + k - 1);\r\n                break;\r\n            }\r\n \r\n            k = k - Math.abs(merged.get(j).b - merged.get(j).a + 1);\r\n        }\r\n        return to_return;\r\n    }\r\n    \r\n\tpublic static class pair\r\n    {\r\n    \tint a;\r\n    \tint b;\r\n    \tpublic pair(int a,int b)\r\n    \t{\r\n    \t    this.a=a;\r\n    \t    this.b=b;\r\n    \t}\r\n    }\r\n    public static class myComp implements Comparator<pair>\r\n    {\r\n\t\t//sort in ascending order.\r\n    \tpublic int compare(pair p1,pair p2)\r\n    \t{\r\n    \t    if(p1.a==p2.a)\r\n    \t    return 0;\r\n    \t    else if(p1.a<p2.a)\r\n    \t    return -1;\r\n    \t    else\r\n    \t    return 1;\r\n    \t}\r\n    }\r\n    public static ArrayList<pair> mergeIntervals(ArrayList<pair> arr)\r\n\t{\r\n\t    ArrayList<pair> a1=new ArrayList<>();\r\n\t    if(arr.size()<=1)\r\n\t    return arr;\r\n\t    a1.add(arr.get(0));\r\n\t    int i=1,j=0;\r\n\t    while(i<arr.size())\r\n\t    {\r\n\t        if(a1.get(j).b<arr.get(i).a)\r\n\t        {\r\n\t           a1.add(arr.get(i));\r\n\t           i++;\r\n\t           j++;\r\n\t        }\r\n\t        else if(a1.get(j).b>arr.get(i).a && a1.get(j).b>=arr.get(i).b)\r\n\t        {\r\n\t            i++;\r\n\t        }\r\n\t        else if(a1.get(j).b>=arr.get(i).a)\r\n\t        {\r\n\t            int a=a1.get(j).a;\r\n\t            int b=arr.get(i).b;\r\n\t            a1.remove(j);\r\n\t            a1.add(new pair(a,b));\r\n\t            i++;\r\n\t        }\r\n\t    }\r\n\t    return a1;\r\n\t}\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\nclass Solution:\n    # Function to merge overlapping intervals\n    def merge(self, intervals):\n        intervals.sort()\n        \n        # Initialize the first interval\n        v = intervals[0]\n        ans = []\n        # Iterate through the intervals\n        for i in range(1, len(intervals)):\n            # If there is overlap, merge the intervals\n            if v[1] >= intervals[i][0]:\n                v[1] = max(v[1], intervals[i][1])\n            # If there is no overlap, add the current interval to the answer list\n            else:\n                ans.append(v)\n                v = intervals[i]\n        # Add the last interval to the answer list\n        ans.append(v)\n        return ans\n    \n    # Function to find the kth smallest number in the merged intervals\n    def find_kth(self, merged, k):\n        n = len(merged)\n        # Iterate through the merged intervals\n        for j in range(n):\n            # Check if the kth smallest number is within the current interval\n            if k <= abs(merged[j][1] - merged[j][0] + 1):\n                return merged[j][0] + k - 1\n            # If not, update k to the remaining number of elements outside the current interval\n            k = k - abs(merged[j][1] - merged[j][0] + 1)\n        \n        # If k is still remaining after iterating through all intervals, return -1\n        if k:\n            return -1\n    \n    def kthSmallestNum(self, n : int, ranges : List[List[int]], q : int, queries : List[int]) -> List[int]:\n        # Merge the overlapping intervals\n        merged = self.merge(ranges)\n        ans = []\n        # Iterate through the queries\n        for i in range(len(queries)):\n            # Find the kth smallest number for each query\n            res = self.find_kth(merged, queries[i])\n            # Add the result to the answer list\n            ans.append(res)\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number[][]} ranges\n * @param {number} q\n * @param {number[]} queries\n * @returns {number[]}\n*/\n\nclass Solution {\n    //Function to merge overlapping intervals.\n    merge(intervals) {\n        intervals.sort((a, b) => a[0] - b[0]);\n        \n        // Initialize the first interval\n        let v = intervals[0];\n        let ans = [];\n        \n        // Iterate through the intervals\n        for (let i = 1; i < intervals.length; i++) {\n            // If there is overlap, merge the intervals\n            if (v[1] >= intervals[i][0]) {\n                v[1] = Math.max(v[1], intervals[i][1]);\n            }\n            // If there is no overlap, add the current interval to the answer list\n            else {\n                ans.push(v);\n                v = intervals[i];\n            }\n        }\n        \n        // Add the last interval to the answer list\n        ans.push(v);\n        return ans;\n    }\n    \n    //Function to find the kth smallest number in the merged intervals\n    find_kth(merged, k) {\n        let n = merged.length;\n        \n        // Iterate through the merged intervals\n        for (let j = 0; j < n; j++) {\n            // Check if the kth smallest number is within the current interval\n            if (k <= Math.abs(merged[j][1] - merged[j][0] + 1)) {\n                return merged[j][0] + k - 1;\n            }\n            // If not, update k to the remaining number of elements outside the current interval\n            k = k - Math.abs(merged[j][1] - merged[j][0] + 1);\n        }\n        \n        // If k is still remaining after iterating through all intervals, return -1\n        if (k) {\n            return -1;\n        }\n    }\n    \n    //Function to find the kth smallest number for each query\n    kthSmallestNum(n, ranges, q, queries) {\n        // Merge the overlapping intervals\n        let merged = this.merge(ranges);\n        let ans = [];\n        \n        // Iterate through the queries\n        for (let i = 0; i < queries.length; i++) {\n            // Find the kth smallest number for each query\n            let res = this.find_kth(merged, queries[i]);\n            // Add the result to the answer list\n            ans.push(res);\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Function to merge overlapping intervals\n    public List<List<int>> Merge(List<List<int>> intervals)\n    {\n        //Sort the intervals based on the start time\n        intervals.Sort((a, b) => a[0].CompareTo(b[0]));\n\n        List<int> v = intervals[0];\n        List<List<int>> ans = new List<List<int>>();\n        //Merge the intervals\n        for (int i = 1; i < intervals.Count; i++)\n        {\n            if (v[1] >= intervals[i][0])\n            {\n                v[1] = Math.Max(v[1], intervals[i][1]);\n            }\n            else\n            {\n                ans.Add(v);\n                v = intervals[i];\n            }\n        }\n        ans.Add(v);\n        return ans;\n    }\n\n    //Function to find the kth smallest number in the merged intervals\n    public int FindKth(List<List<int>> merged, int k)\n    {\n        int n = merged.Count;\n        //Traverse through the merged intervals and find the kth smallest number\n        for (int j = 0; j < n; j++)\n        {\n            if (k <= Math.Abs(merged[j][1] - merged[j][0] + 1))\n                return (merged[j][0] + k - 1);\n\n            k = k - Math.Abs(merged[j][1] - merged[j][0] + 1);\n        }\n\n        //If k is still remaining, there is no kth smallest number\n        if (k > 0)\n            return -1;\n        else\n            return 0;\n    }\n\n    //Function to find the kth smallest numbers for the given range and queries\n    public List<int> kthSmallestNum(int n, List<List<int>> range, int q, List<int> queries)\n    {\n        //Merge the overlapping intervals\n        List<List<int>> merged = Merge(range);\n        List<int> ans = new List<int>();\n        //Find the kth smallest number for each query\n        for (int i = 0; i < queries.Count; i++)\n        {\n            int res = FindKth(merged, queries[i]);\n            ans.Add(res);\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}