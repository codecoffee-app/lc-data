{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 715457,
            "title": "Find Kth permutation",
            "titleSlug": "find-kth-permutation-0932",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers&nbsp;<strong>N&nbsp;</strong>(1&lt;=N&lt;=9) and&nbsp;<strong>K</strong>. Find the kth permutation sequence of first N natural numbers. Return the answer in&nbsp;<strong>string</strong>&nbsp;format.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N =<strong> </strong>4, K = 3</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>1324</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong></span>\n<span style=\"font-size: 18px;\">Permutations of first 4 natural numbers:\n1234,1243,1324,1342,1423,1432.....\nSo the 3rd permutation is 1324. </span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 3, K = 5</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>312</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: \n</strong>Permutations of first 3 natural numbers:\n123,132,213,231,312,321.\nSo the 5th permutation is 312. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>kthPermutation()&nbsp;</strong>which takes two integers N and K as input parameters and returns a string denoting the kth permutation.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 9<br />1 &lt;= K &lt;= N!</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #262626; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 18.6667px; background-color: #ffffff;\">Kth Permutation sequence can be formed by choosing the 1st digit and then the rest of the digits one by one.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\npublic:\n    // Function to recursively compute the kth permutation\n    string solve(int n, int k, vector<int> &fact, vector<int> &nums)\n    {\n        // Base case: if n is 0, return an empty string\n        if (n == 0)\n            return \"\";\n\n        // Compute the index of the current digit in the permutation\n        int c = k / fact[n - 1] + 1;\n\n        // Initialize an empty string\n        string str = \"\";\n\n        // Iterate through the digits in the permutation\n        for (int i = 0; i < nums.size(); i++)\n        {\n            // Decrement c if the digit is already used\n            c -= (nums[i] == 0);\n\n            // If c becomes 0 and the digit is unused, update it and add it to the string\n            if (c == 0 && nums[i] == 0)\n            {\n                nums[i] = 1;\n                str += to_string(i + 1);\n                break;\n            }\n        }\n\n        // Recursively compute the remaining digits in the permutation\n        return str + solve(n - 1, k % fact[n - 1], fact, nums);\n    }\n\n    // Function to compute the kth permutation of n digits\n    string kthPermutation(int n, int k)\n    {\n        // Create a factorial lookup table\n        vector<int> fact(n + 1, 1);\n        for (int i = 1; i <= n; i++)\n            fact[i] = i * fact[i - 1];\n\n        // Create an array to keep track of used digits\n        vector<int> nums(n, 0);\n\n        // Compute the kth permutation using the solve function\n        string s = solve(n, k - 1, fact, nums);\n\n        // Return the resulting permutation\n        return s;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static String solve(int n, int k, int fact[], int nums[])\n    {\n        if (n == 0)\n            return \"\";\n\n        int c = k / fact[n - 1] + 1;\n\n        String str = \"\";\n        for (int i = 0; i < nums.length; i++)\n        {\n            c -= (nums[i] == 0?1:0);\n\n            if (c == 0 && nums[i] == 0)\n            {\n                nums[i] = 1;\n                str += String.valueOf(i + 1);\n                break;\n            }\n        }\n\n        return str + solve(n - 1, k % fact[n - 1], fact, nums);\n    }\n    public static String kthPermutation(int n,int k) {\n        // code here\n        int fact[]=new int[n+1];\n        Arrays.fill(fact,1);\n        for (int i = 1; i <= n; i++)\n            fact[i] = i * fact[i - 1];\n        int nums[]=new int[n];\n        String s = solve(n, k - 1, fact, nums);\n\n        return s;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\nclass Solution:\n    def solve(self, n, k, fact, nums):\n        # base case, if n=0, return an empty string\n        if n == 0:\n            return \"\"\n\n        # calculate the current position in the permutation\n        c = k // fact[n - 1] + 1\n        \n        result = \"\"\n        for i in range(len(nums)):\n            # decrement c if nums[i] is 0\n            c -= (nums[i] == 0)\n\n            # if c reaches 0 and nums[i] is 0, update nums[i] to 1,\n            # add the current number to the result, and break out of the loop\n            if c == 0 and nums[i] == 0:\n                nums[i] = 1\n                result += str(i + 1)\n                break\n\n        # recursively call the function with n decreased by 1, k modulo fact[n-1],\n        # and updated nums array to find the next number in the permutation\n        return result + self.solve(n - 1, k % fact[n - 1], fact, nums)\n        \n    def kthPermutation(self, n: int, k: int) -> str:\n        # generate the factorials of numbers from 1 to n\n        fact = [1] * (n + 1)\n        for i in range(1, n + 1):\n            fact[i] = i * fact[i - 1]\n\n        nums = [0] * n\n\n        # call the solve function to find the kth permutation\n        s = self.solve(n, k - 1, fact, nums)\n\n        return s",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number} k\n * @returns {string}\n*/\n\nclass Solution {\n    //Function to find the kth permutation of a given number.\n    kthPermutation(n, k)\n    {\n        // generate the factorials of numbers from 1 to n\n        const fact = [1];\n        for (let i = 1; i <= n; i++) {\n            fact[i] = i * fact[i - 1];\n        }\n\n        const nums = Array(n).fill(0);\n\n        // define a helper function to find the kth permutation recursively\n        const solve = (n, k) => {\n            // base case, if n=0, return an empty string\n            if (n === 0) {\n                return \"\";\n            }\n\n            // calculate the current position in the permutation\n            let c = Math.floor(k / fact[n - 1]) + 1;\n\n            let result = \"\";\n            for (let i = 0; i < nums.length; i++) {\n                // decrement c if nums[i] is 0\n                c -= (nums[i] === 0);\n\n                // if c reaches 0 and nums[i] is 0, update nums[i] to 1,\n                // add the current number to the result, and break out of the loop\n                if (c === 0 && nums[i] === 0) {\n                    nums[i] = 1;\n                    result += (i + 1).toString();\n                    break;\n                }\n            }\n\n            // recursively call the function with n decreased by 1, k modulo fact[n-1],\n            // and updated nums array to find the next number in the permutation\n            return result + solve(n - 1, k % fact[n - 1]);\n        }\n\n        // call the solve function to find the kth permutation\n        const s = solve(n, k - 1);\n\n        return s;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public string Solve(int n, int k, int[] fact, int[] nums)\n    {\n        if (n == 0) return \"\";\n\n        int index = k / fact[n - 1];\n        int chosen = -1;\n\n        for (int i = 0; i < nums.Length; i++)\n        {\n            if (nums[i] == 0)\n            {\n                if (index == 0)\n                {\n                    chosen = i;\n                    break;\n                }\n                index--;\n            }\n        }\n\n        nums[chosen] = 1;\n        return (chosen + 1).ToString() + Solve(n - 1, k % fact[n - 1], fact, nums);\n    }\n\n    public string kthPermutation(int n, int k)\n    {\n        int[] fact = new int[n];\n        fact[0] = 1;\n\n        for (int i = 1; i < n; i++)\n        {\n            fact[i] = fact[i - 1] * i;\n        }\n\n        int[] nums = new int[n];\n        return Solve(n, k - 1, fact, nums);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}