{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703678,
            "title": "Find largest word in dictionary",
            "titleSlug": "find-largest-word-in-dictionary2430",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong> and a string dictionary <strong>d</strong>, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: d = {\"ale\", \"apple\", \"monkey\", \"plea\"}, s = \"abpcplea\"<br /></span><span style=\"font-size: 18px;\"><strong>Output:</strong> \"apple\"&nbsp;<br /><strong>Explanation</strong>: After deleting \"b\", \"c\", \"a\" S became \"apple\" which is present in d.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>d = {\"a\", \"b\", \"c\"}, s = \"abpcplea\"<br /></span><span style=\"font-size: 18px;\"><strong>Output:&nbsp;</strong>\"a\"<br /><strong>Explanation</strong>: After deleting \"b\", \"p\", \"c\", \"p\", \"l\", \"e\", \"a\" S became \"a\" which is present in d.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*x)<br /><strong>Expected Auxiliary Space:</strong> O(x) where <strong>x</strong> is the length of the string in <strong>d</strong>.</span></p>\n<p><strong>Constraints:</strong><br />1 &le; n,x &le; 103</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` and a dictionary of strings `d`, find the longest string in `d` that can be formed by deleting some characters from `s`. If multiple such strings exist, return the lexicographically smallest among them. If no such string exists, return an empty string.",
                "constraints": [
                    "1 <= n <= 1000 (where n is the length of s)",
                    "1 <= x <= 1000 (where x is the length of a string in d)"
                ],
                "testcases": [
                    {
                        "input": "d = [\"ale\", \"apple\", \"monkey\", \"plea\"], s = \"abpcplea\"",
                        "output": "apple",
                        "explanation": "The string \"apple\" can be formed from \"abpcplea\" by deleting \"b\", \"c\", and \"a\". It is the longest word in the dictionary that can be formed in this way."
                    },
                    {
                        "input": "d = [\"a\", \"b\", \"c\"], s = \"abpcplea\"",
                        "output": "a",
                        "explanation": "The string \"a\" can be formed from \"abpcplea\" by deleting \"b\", \"p\", \"c\", \"p\", \"l\", \"e\", and \"a\". While \"b\" and \"c\" are also possible, \"a\" is the lexicographically smallest among them."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Look for the strings x in the unsorted dictionary d such that x is a subsequence in s. If such a string x is found, then compare it with the other matching strings found till now based on the required length and lexicographic criteria.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "walmart",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for c++\nclass Solution {\n  public:\n    // Returns the longest string in dictionary which is a\n    // subsequence of str.\n    string findLongestWord(string s, vector<string> d) {\n        string max_str = \"\";\n        for (string str : d) {\n            if (isSubsequence(str, s)) {\n                // If current word is subsequence of str and is largest\n                // such word so far.\n                // lexicographically smallest also\n                if (str.length() > max_str.length() ||\n                    (str.length() == max_str.length() && str.compare(max_str) < 0))\n                    max_str = str;\n            }\n        }\n        // Return longest string\n        return max_str;\n    }\n\n  private:\n    // Returns true if x[] is a subsequence of y[].\n    bool isSubsequence(string x, string y) {\n        int j = 0; // For index of x (or subsequence\n        // Traverse x and x, and compare current\n        // character of y with first unmatched char\n        // of x, if matched then move ahead in x\n        for (int i = 0; i < y.length() && j < x.length(); i++)\n            if (x[j] == y[i])\n                j++;\n        // If all characters of str1 were found in str2\n        return j == x.length();\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Backend complete function Template for Java\n\nclass Solution {\n    // Returns true if str1[] is a\n    // subsequence of str2[]. m is\n    // length of str1 and n is length of str2\n    static boolean isSubSequence(String str1, String str2) {\n        int m = str1.length(), n = str2.length();\n\n        int j = 0; // For index of str1 (or subsequence)\n\n        // Traverse str2 and str1, and compare current\n        // character of str2 with first unmatched char\n        // of str1, if matched then move ahead in str1\n        for (int i = 0; i < n && j < m; i++) {\n            if (str1.charAt(j) == str2.charAt(i)) {\n                j++;\n            }\n        }\n\n        // If all characters of str1\n        // were found in str2\n        return (j == m);\n    }\n\n    static String findLongestWord(String S, List<String> d) {\n        String max_str = \"\";\n\n        // Traverse through all words of dictionary\n        for (String word : d) {\n            // If current word is subsequence of str\n            // and is largest such word so far.\n            if (isSubSequence(word, S)) {\n                if (word.length() > max_str.length() ||\n                    (word.length() == max_str.length() && word.compareTo(max_str) < 0))\n                    max_str = word;\n            }\n        }\n\n        // Return longest String\n        return max_str;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\n\nclass Solution:\n\n    def isSubSequence(self, str1, str2):\n\n        m = len(str1)\n        n = len(str2)\n\n        j = 0\n        # For index of str1 (or subsequence\n\n        # Traverse str2 and str1, and compare current\n        # character of str2 with first unmatched char\n        # of str1, if matched then move ahead in str1\n        i = 0\n        while (i < n and j < m):\n            if (str1[j] == str2[i]):\n                j += 1\n            i += 1\n\n        # If all characters of str1 were found in str2\n        return (j == m)\n\n    def findLongestWord(self, S, d):\n        max_str = \"\"\n\n        # Traverse through all words of dictionary\n        for word in d:\n\n            # If current word is subsequence of str and is largest\n            # such word so far.\n            if (self.isSubSequence(word, S)):\n                if len(word) > len(max_str) or (len(word) == len(max_str)\n                                                and word < max_str):\n                    max_str = word\n\n        # Return longest string\n        return max_str\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    public string findLongestWord(string S, List<string> d) {\n        string max_str = \"\";\n        foreach (string str in d) {\n            if (isSubsequence(str, S)) {\n                // If current word is subsequence of str and is largest\n                // such word so far.\n                // lexicographically smallest also\n                if (str.Length > max_str.Length ||\n                    (str.Length == max_str.Length && string.Compare(str, max_str) < 0))\n                    max_str = str;\n            }\n        }\n        // Return longest string\n        return max_str;\n    }\n\n    // Returns true if x[] is a subsequence of y[].\n    private bool isSubsequence(string x, string y) {\n        int j = 0; // For index of x (or subsequence\n        // Traverse x and x, and compare current\n        // character of y with first unmatched char\n        // of x, if matched then move ahead in x\n        for (int i = 0; i < y.Length && j < x.Length; i++)\n            if (x[j] == y[i]) j++;\n        // If all characters of str1 were found in str2\n        return j == x.Length;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findLongestWord(s, d) {\n        let max_str = \"\";\n        for (let str of d) {\n            if (this.isSubsequence(str, s)) {\n                if (str.length > max_str.length ||\n                    (str.length === max_str.length && str.localeCompare(max_str) < 0)) {\n                    max_str = str;\n                }\n            }\n        }\n        return max_str;\n    }\n\n    isSubsequence(x, y) {\n        let j = 0;\n        for (let i = 0; i < y.length && j < x.length; i++) {\n            if (x[j] === y[i]) {\n                j++;\n            }\n        }\n        return j === x.length;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}