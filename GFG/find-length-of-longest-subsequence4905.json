{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703120,
            "title": "Find length of longest subsequence",
            "titleSlug": "find-length-of-longest-subsequence4905",
            "content": "<p><span style=\"font-size:18px\">Given two string&nbsp;<strong>X</strong>&nbsp;and&nbsp;<strong>Y </strong>of length <strong>N </strong>and<strong> M </strong>respectively. The task is to find the length of the longest subsequence of string X which is a substring in sequence Y.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4, M = 8\nX = &quot;abcd&quot;\nY = &quot;bacdbdcd&quot;<strong>\nOutput: </strong>3\n<strong>Explanation: </strong>&quot;acd&quot; is the longest subsequence\n&nbsp;\\t\\tfrom string X present as a\n&nbsp;\\t\\tsubstring in string Y.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 1, M = 1\nX = &#39;a&#39;\nY = &#39;a&#39;\n<strong>Output: </strong>1\n<strong>Explanation: </strong>&#39;a&#39; is the answer.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything.</span>&nbsp;<span style=\"font-size:18px\">Your task is to complete the function&nbsp;<strong>maxSubsequenceSubstring()&nbsp;</strong>which takes 4 arguments(string X, string Y, N and M) and returns the answer.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N*M).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N*M).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;= N, M &lt;=10<sup>3</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>try using dynamic programming</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Return the maximum size of substring of\n// X which is substring in Y.\nint maxSubsequenceSubstring(string x, string y, int n, int m){\n    int dp[MAX][MAX];\n \n    // Initialize the dp[][] to 0.\n    for (int i = 0; i <= m; i++)\n        for (int j = 0; j <= n; j++)\n            dp[i][j] = 0;\n \n    // Calculating value for each element.\n    for (int i = 1; i <= m; i++) {\n        for (int j = 1; j <= n; j++) {\n \n            // If alphabet of string X and Y are\n            // equal make dp[i][j] = 1 + dp[i-1][j-1]\n            if (x[j - 1] == y[i - 1])\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n \n            // Else copy the previous value in the\n            // row i.e dp[i-1][j-1]\n            else\n                dp[i][j] = dp[i][j - 1];\n        }\n    }\n \n    // Finding the maximum length.\n    int ans = 0;\n    for (int i = 1; i <= m; i++)\n        ans = max(ans, dp[i][n]);\n \n    return ans;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}