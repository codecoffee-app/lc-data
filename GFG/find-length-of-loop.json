{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700620,
            "title": "Find length of Loop",
            "titleSlug": "find-length-of-loop",
            "content": "<p><span >Given the head of a linked list, determine whether the list contains a loop. If a loop is present, <strong>return the number of nodes</strong> in the loop, otherwise <strong>return 0</strong>.</span></p>\n<p><span ><img style=\"height: 236px; width: 512px;\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/linkedlist.png\" alt=\"\" /></span></p>\n<p><span ><strong>Note: '</strong>c<strong>'&nbsp;</strong>is the position of the node which is the next pointer of the last node of the linkedlist. If c is 0, then there is no loop.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList: 25-&gt;14-&gt;19-&gt;33-&gt;10-&gt;21-&gt;39-&gt;90-&gt;58-&gt;45, c = 4\n<strong>Output: </strong>7<strong>\nExplanation: </strong>The loop is from 33 to 45. So length of loop is 33-&gt;<em>10</em>-&gt;21-&gt;39-&gt; 90-&gt;58-&gt;<em>45</em> = <strong>7. <br /></strong>The number 33 is connected to the last node of the linkedlist to form the loop because according to the input the 4<sup>th</sup> node from the beginning(1 based indexing) <br />will be connected to the last node for the loop.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700620/Web/Other/blobid0_1722797558.png\" width=\"398\" height=\"159\" /> <br /></span></pre>\n<pre><span ><strong>Input: </strong>LinkedList: 5-&gt;4, c = 0\n<strong>Output: </strong>0<strong>\nExplanation: </strong>There is no loop.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700620/Web/Other/blobid3_1722798030.png\" width=\"390\" height=\"78\" /><br /></span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= no. of nodes &lt;= 10<sup>6<br /></sup>0 &lt;= node.data &lt;=10<sup>6</sup><br />0 &lt;= c&lt;= n-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a linked list, determine whether the list contains a loop. If a loop is present, return the number of nodes in the loop; otherwise, return 0.",
                "constraints": [
                    "1 <= number of nodes <= 10^6",
                    "0 <= node.data <= 10^6",
                    "0 <= c <= n-1 (where 'c' is the 0-based index of the node to which the last node points to form a loop, or 0 if no loop exists)"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 25->14->19->33->10->21->39->90->58->45, c = 4",
                        "output": "7",
                        "explanation": "A loop exists starting from the node at index 4 (0-based), which is 33. The loop consists of the nodes: 33 -> 10 -> 21 -> 39 -> 90 -> 58 -> 45. Therefore, the length of the loop is 7."
                    },
                    {
                        "input": "LinkedList: 5->4, c = 0",
                        "output": "0",
                        "explanation": "There is no loop in the linked list because 'c' is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use two pointers, one moving fast and the other slow. If they meet, a loop exists. Count the nodes in the loop.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "adobe",
            "qualcomm"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the length of a loop in the linked list.\n    int countNodesinLoop(Node* head) {\n        // using two pointers and moving one pointer(slow) by one node and\n        // another pointer(fast) by two nodes in each iteration.\n        Node* fast = head->next;\n        Node* slow = head;\n\n        while (fast != slow) {\n            // if the node pointed by first pointer(fast) or the node\n            // next to it is null, then loop is not present so we return 0.\n            if (fast == NULL || fast->next == NULL)\n                return 0;\n\n            fast = fast->next->next;\n            slow = slow->next;\n        }\n        // both pointers now point to the same node in the loop.\n\n        int size = 1;\n        fast = fast->next;\n\n        // we start iterating the loop with first pointer and continue till\n        // both pointers point to same node again.\n        while (fast != slow) {\n            fast = fast->next;\n            // incrementing the counter.\n            size++;\n        }\n        // returning the length of the loop..\n        return size;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//\n\nclass Solution {\n    // Function to find the length of a loop in the linked list.\n    public int countNodesinLoop(Node head) {\n        // using two pointers and moving one pointer(slow) by one node and\n        // another pointer(fast) by two nodes in each iteration.\n        Node fast = head.next;\n        Node slow = head;\n\n        while (fast != slow) {\n            // if the node pointed by first pointer(fast) or the node\n            // next to it is null, then loop is not present so we return 0.\n            if (fast == null || fast.next == null) return 0;\n\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        // both pointers now point to the same node in the loop.\n\n        int size = 1;\n        fast = fast.next;\n        // we start iterating the loop with first pointer and continue till\n        // both pointers point to same node again.\n        while (fast != slow) {\n            fast = fast.next;\n            // incrementing the counter.\n            size += 1;\n        }\n        // returning the length of the loop.\n        return size;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to find the length of a loop in the linked list.\n    def countNodesInLoop(self, head):\n        # Using two pointers and moving one pointer (slow) by one node and\n        # another pointer (fast) by two nodes in each iteration.\n        fast = head\n        slow = head\n\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n            # If slow and fast meet, there's a loop.\n            if slow == fast:\n                # Counting the number of nodes in the loop.\n                size = 1\n                temp = slow\n                while temp.next != slow:\n                    size += 1\n                    temp = temp.next\n                return size\n\n        # If we reach here, there is no loop.\n        return 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} head\n * @returns {number}\n */\nclass Solution {\n    // Function to find the length of a loop in the linked list.\n    countNodesinLoop(head) {\n        let fast = head.next;\n        let slow = head;\n\n        while (fast !== null && fast.next !== null) {\n            slow = slow.next;\n            fast = fast.next.next;\n\n            // If slow and fast meet at some point, then there is a loop\n            if (slow === fast) {\n                let size = 1;\n                fast = fast.next;\n                while (fast !== slow) {\n                    fast = fast.next;\n                    size++;\n                }\n                return size;\n            }\n        }\n\n        // If we reach here, then there is no loop\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}