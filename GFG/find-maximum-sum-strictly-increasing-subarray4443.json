{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702767,
            "title": "Find Maximum Sum Strictly Increasing Subarray",
            "titleSlug": "find-maximum-sum-strictly-increasing-subarray4443",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of positive integers. Find the maximum sum of strictly increasing subarrays.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input : </strong>\narr[] = {1, 2, 3, 2, 5, 1, 7}\n<strong>Output : </strong>\n8\n<strong>Explanation :</strong>\nSome Strictly increasing subarrays are -\n{1, 2, 3} sum = 6,\n{2, 5} sum = 7,\n{1, 7} sum = 8,\nmaximum sum = 8</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\narr[] = {1, 2, 2, 4}\n<strong>Output:</strong>\n6</span>\n</pre>\n<p><br /><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>maxsum_SIS()</strong>&nbsp;which takes the array <strong>arr[]</strong> and its size <strong>N</strong><strong> </strong>as inputs and returns the required result.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexty: </strong>O(N)<br /><strong>Expected Auxiliary Space: </strong>O(1)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br />1 &le; A[i] &le; 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, find the maximum sum of strictly increasing subarrays. A strictly increasing subarray is a contiguous sequence of elements where each element is greater than the preceding element.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= A[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 2, 5, 1, 7]",
                        "output": "8",
                        "explanation": "The strictly increasing subarrays are {1, 2, 3} with a sum of 6, {2, 5} with a sum of 7, and {1, 7} with a sum of 8. The maximum sum among these is 8."
                    },
                    {
                        "input": "[1, 2, 2, 4]",
                        "output": "6",
                        "explanation": "The strictly increasing subarray is {1,2} sum is 3 and {2,4} sum is 6 . Hence maximum is 6"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The idea is keep track of maximum sum and current sum</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\n    public:\n    int maxsum_SIS(int arr[] , int n)\n    {\n        // Initialize max_sum be 0\n        int max_sum = 0;\n     \n        // Initialize current sum be arr[0]\n        int current_sum = arr[0] ;\n     \n        // Traverse array elements after first element.\n        for (int i=1; i<n ; i++ )\n        {\n            // update current_sum for strictly increasing subarray\n            if (arr[i-1] < arr[i])\n                current_sum = current_sum + arr[i];\n     \n            else // strictly increasing subarray break\n            {\n                // update max_sum and current_sum ;\n                max_sum = max(max_sum, current_sum);\n                current_sum = arr[i];\n            }\n        }\n    \n        return max(max_sum, current_sum);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n// Java program to find the maximum sum of strictly \n// increasing subarrays \n\npublic class Solution { \n\n// Returns maximum sum of strictly increasing \n// subarrays \n\tstatic int maxsum_SIS(int arr[], int n) { \n\t\t// Initialize max_sum be 0 \n\t\tint max_sum = 0; \n\n\t\t// Initialize current sum be arr[0] \n\t\tint current_sum = arr[0]; \n\n\t\t// Traverse array elements after first element. \n\t\tfor (int i = 1; i < n; i++) { \n\t\t\t// update current_sum for strictly increasing subarray \n\t\t\tif (arr[i - 1] < arr[i]) { \n\t\t\t\tcurrent_sum = current_sum + arr[i]; \n\t\t\t} else // strictly increasing subarray break \n\t\t\t{ \n\t\t\t\t// update max_sum and current_sum ; \n\t\t\t\tmax_sum = Math.max(max_sum, current_sum); \n\t\t\t\tcurrent_sum = arr[i]; \n\t\t\t} \n\t\t} \n\n\t\treturn Math.max(max_sum, current_sum); \n\t} \n} ",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Python3 program to find the maximum sum of strictly\n    # increasing subarrays\n\n    # Returns maximum sum of strictly increasing\n    # subarrays\n    def maxsum_SIS(self, arr, n):\n        # Initialize max_sum be 0\n        max_sum = 0\n\n        # Initialize current sum be arr[0]\n        current_sum = arr[0]\n\n        # Traverse array elements after first element.\n        for i in range(1, n):\n            # update current_sum for strictly increasing subarray\n            if (arr[i - 1] < arr[i]):\n                current_sum = current_sum + arr[i]\n\n            else:\n                # strictly increasing subarray break\n                # update max_sum and current_sum\n                max_sum = max(max_sum, current_sum)\n                current_sum = arr[i]\n\n        return max(max_sum, current_sum)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the sum of contiguous subarray with maximum sum.\n    maxsum_SIS(arr, n)\n    {\n        // Initialize max_sum be 0 \n    \tlet max_sum = 0;\n    \n    \t// Initialize current sum be arr[0] \n    \tlet current_sum = arr[0];\n    \n    \t// Traverse array elements after first element. \n    \tfor (let i = 1; i < n; i++) {\n    \t\t// update current_sum for strictly increasing subarray \n    \t\tif (arr[i-1] < arr[i]) {\n    \t\t\tcurrent_sum = current_sum + arr[i];\n    \t\t}\n    \t\telse {\n    \t\t\t// strictly increasing subarray break \n    \t\t\t// update max_sum and current_sum \n    \t\t\tmax_sum = Math.max(max_sum, current_sum);\n    \t\t\tcurrent_sum = arr[i];\n    \t\t}\n    \t}\n    \n    \treturn Math.max(max_sum, current_sum);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}