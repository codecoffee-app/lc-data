{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700333,
            "title": "Find Maximum value",
            "titleSlug": "find-maximum-value",
            "content": "<p><span >Given an array <strong>arr[]</strong> you have to find the maximum value of <strong>abs(i &ndash; j)</strong> *<strong>min(arr[i], arr[j])</strong> where <strong>i</strong> and <strong>j</strong> vary from <strong>0</strong> to <strong>n-1 </strong>and<strong> i != j</strong>.&nbsp;<br /></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [3, 2, 1, 4]\n<strong>Output:</strong> 9\n<strong>Explanation: </strong>Here, a[0] = 3 and a[3] = 4 and thus result is abs(0-3)*min(3,4) = 9.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [8, 1, 9, 4]\n<strong>Output:</strong> 16\n<strong>Explanation: </strong>Here, a[0] = 8 and a[2] = 9 and thus result is abs(0-2)*min(8,9)=16. </span></pre>\n<div><span ><strong>Expected Time Complexity:</strong> O(n)</span></div>\n<div><span ><strong>Expected Auxiliary Space: </strong>O(1)</span></div>\n<div>&nbsp;</div>\n<div><span ><strong>Constraints:</strong><br />2 &lt;= arr.size() &lt;=10<sup>6</sup><br />-10<sup>5 </sup>&lt;= arr[i] &lt;=10<sup>5</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of integers, find the maximum value of `abs(i - j) * min(arr[i], arr[j])` where `i` and `j` are indices ranging from 0 to n-1, and `i != j`.",
                "constraints": [
                    "2 <= arr.size() <= 10^6",
                    "-10^5 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[3, 2, 1, 4]",
                        "output": "9",
                        "explanation": "The maximum value is achieved with i=0 and j=3.  `abs(0-3) * min(3, 4) = 3 * 3 = 9`"
                    },
                    {
                        "input": "[8, 1, 9, 4]",
                        "output": "16",
                        "explanation": "The maximum value is achieved with i=0 and j=2. `abs(0-2) * min(8, 9) = 2 * 8 = 16`"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Take the maximum difference between <strong>i</strong> and <strong>j,&nbsp;</strong>then decrease the distance such that it removes a smaller number.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the maximum product of any two adjacent elements in the array.\n    int maxValue(vector<int> &arr) {\n        int n = arr.size();\n        int maxProduct = INT_MIN; // Variable to store the maximum product\n        int currProduct;          // Variable to store the current product\n\n        int left = 0, right = n - 1; // Initialize left and right pointers\n        while (left < right)         // Loop until left becomes greater than right\n        {\n            // If value at left pointer is smaller than value at right pointer\n            if (arr[left] < arr[right]) {\n                // Calculate the product using value at left pointer\n                currProduct = arr[left] * (right - left);\n                left++; // Increment the left pointer\n            } else {\n                // If value at left pointer is greater than or equal to value at right\n                // pointer Calculate the product using value at right pointer\n                currProduct = arr[right] * (right - left);\n                right--; // Decrement the right pointer\n            }\n            maxProduct = max(maxProduct, currProduct); // Update the maximum product\n        }\n        return maxProduct; // Return the maximum product\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the maximum product of any two adjacent elements in the array.\n    public int maxValue(int[] arr) {\n        int n = arr.length;\n        int maxProduct = Integer.MIN_VALUE; // Variable to store the maximum product\n        int left = 0, right = n - 1;        // Initialize left and right pointers\n\n        while (left < right) { // Loop until left becomes greater than right\n            int currProduct;\n            // If value at left pointer is smaller than value at right pointer\n            if (arr[left] < arr[right]) {\n                // Calculate the product using value at left pointer\n                currProduct = arr[left] * (right - left);\n                left++; // Increment the left pointer\n            } else {\n                // If value at left pointer is greater than or equal to value at right\n                // pointer Calculate the product using value at right pointer\n                currProduct = arr[right] * (right - left);\n                right--; // Decrement the right pointer\n            }\n            maxProduct = Math.max(maxProduct, currProduct);\n            // Update the maximum product\n        }\n        return maxProduct; // Return the maximum product\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find the maximum product of any two adjacent elements in the array.\n    def maxValue(self, arr):\n        n = len(arr)\n        max_product = float('-inf')  # Variable to store the maximum product\n        left, right = 0, n - 1  # Initialize left and right pointers\n\n        while left < right:  # Loop until left becomes greater than right\n            if arr[left] < arr[right]:\n                # If value at left pointer is smaller than value at right pointer\n                # Calculate the product using value at left pointer\n                curr_product = arr[left] * (right - left)\n                left += 1  # Increment the left pointer\n            else:  # If value at left pointer is greater than or equal to value at right pointer\n                # Calculate the product using value at right pointer\n                curr_product = arr[right] * (right - left)\n                right -= 1  # Decrement the right pointer\n            # Update the maximum product\n            max_product = max(max_product, curr_product)\n\n        return max_product  # Return the maximum product\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the maximum product of any two adjacent elements in the array.\n    maxValue(arr) {\n        const n = arr.length;\n        let maxProduct = -Infinity;  // Variable to store the maximum product\n        let left = 0, right = n - 1; // Initialize left and right pointers\n\n        while (left < right) { // Loop until left becomes greater than right\n            let currProduct;\n            // If value at left pointer is smaller than value at right pointer\n            if (arr[left] < arr[right]) {\n                // Calculate the product using value at left pointer\n                currProduct = arr[left] * (right - left);\n                left++; // Increment the left pointer\n            } else {\n                // If value at left pointer is greater than or equal to value at right\n                // pointer\n                currProduct = arr[right] * (right - left);\n                // Calculate the product using value at right pointer\n                right--;\n                // Decrement the right pointer\n            }\n            maxProduct = Math.max(maxProduct, currProduct);\n            // Update the maximum product\n        }\n        return maxProduct; // Return the maximum product\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}