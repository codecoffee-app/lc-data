{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701360,
            "title": "Find median in a stream",
            "titleSlug": "find-median-in-a-stream-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a data stream&nbsp;<strong>arr[]</strong>&nbsp;where integers are read sequentially,</span><span style=\"font-size: 18px;\">&nbsp;</span><span style=\"font-size: 18px;\">the task is to determine the median of the elements encountered so far after each new integer is read.</span></p>\n<p><span style=\"font-size: 18px;\">There are two cases for median on the basis of data set size.</span></p>\n<p><span style=\"font-size: 18px;\">1. If the data set has an odd number then the <strong>middle </strong>one will be consider as median.<br /></span><span style=\"font-size: 18px;\">2. If the data set has an even number then there is no distinct middle value and the median will be the <strong>arithmetic mean of the two</strong> middle values.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:  </strong>arr[] = [5, 15, 1, 3, 2, 8]<strong>\nOutput: </strong>[5.0, 10.0, 5.0, 4.0, 3.0, 4.0] <strong>\nExplanation: \n</strong>After reading 1st element of stream &ndash; 5 -&gt; median = 5.0\nAfter reading 2nd element of stream &ndash; 5, 15 -&gt; median = (5+15)/2 = 10.0 \nAfter reading 3rd element of stream &ndash; 5, 15, 1 -&gt; median = 5.0\nAfter reading 4th element of stream &ndash; 5, 15, 1, 3 -&gt;  median = (3+5)/2 = 4.0\nAfter reading 5th element of stream &ndash; 5, 15, 1, 3, 2 -&gt; median = 3.0\nAfter reading 6th element of stream &ndash; 5, 15, 1, 3, 2, 8 -&gt;  median = (3+5)/2 = 4.0</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 2, 2, 2]</span><br /><span style=\"font-size: 18px;\"><strong>Output: </strong>[2.0, 2.0, 2.0, 2.0]</span><br /><span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><br /><span style=\"font-size: 18px;\">After reading 1st element of stream &ndash; 2 -&gt; median = 2.0</span><br /><span style=\"font-size: 18px;\">After reading 2nd element of stream &ndash; 2, 2 -&gt; median = (2+2)/2 = 2.0</span><br /><span style=\"font-size: 18px;\">After reading 3rd element of stream &ndash; 2, 2, 2 -&gt; median = 2.0</span><br /><span style=\"font-size: 18px;\">After reading 4th element of stream &ndash; 2, 2, 2, 2 -&gt;&nbsp; median = (2+2)/2 = 2.0</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></div>\n<div><span style=\"font-size: 18px;\">1<strong>&nbsp;</strong>&lt;= arr.size() &lt;= 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">1 &lt;= x &lt;= 10<sup>6</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a stream of integers `arr[]`, determine the median of the elements encountered so far after each new integer is read.  The median is calculated as follows:\n\n*   If the number of elements is odd, the median is the middle element.\n*   If the number of elements is even, the median is the arithmetic mean of the two middle elements.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= x <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[5, 15, 1, 3, 2, 8]",
                        "output": "[5.0, 10.0, 5.0, 4.0, 3.0, 4.0]",
                        "explanation": "1st element: [5], median = 5.0\n2nd element: [5, 15], median = (5+15)/2 = 10.0\n3rd element: [5, 15, 1], median = 5.0\n4th element: [5, 15, 1, 3], median = (3+5)/2 = 4.0\n5th element: [5, 15, 1, 3, 2], median = 3.0\n6th element: [5, 15, 1, 3, 2, 8], median = (3+5)/2 = 4.0"
                    },
                    {
                        "input": "[2, 2, 2, 2]",
                        "output": "[2.0, 2.0, 2.0, 2.0]",
                        "explanation": "1st element: [2], median = 2.0\n2nd element: [2, 2], median = (2+2)/2 = 2.0\n3rd element: [2, 2, 2], median = 2.0\n4th element: [2, 2, 2, 2], median = (2+2)/2 = 2.0"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Design-Pattern",
                "slug": "design-pattern"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "morgan-stanley",
            "amazon",
            "microsoft",
            "samsung",
            "d-e-shaw",
            "ola-cabs",
            "oracle",
            "intuit",
            "adobe",
            "google",
            "sap-labs",
            "facebook",
            "yahoo",
            "belzabar",
            "apple"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the median of a stream of data\n    vector<double> getMedian(vector<int> &arr) {\n\n        // Max heap to store the smaller half of numbers\n        priority_queue<int> leftMaxHeap;\n\n        // Min heap to store the greater half of numbers\n        priority_queue<int, vector<int>, greater<int>> rightMinHeap;\n\n        vector<double> res;\n\n        for (int i = 0; i < arr.size(); i++) {\n            // Insert new element into max heap\n            leftMaxHeap.push(arr[i]);\n\n            // Move the top of max heap to min heap to maintain order\n            int temp = leftMaxHeap.top();\n            leftMaxHeap.pop();\n            rightMinHeap.push(temp);\n\n            // Balance heaps if min heap has more elements\n            if (rightMinHeap.size() > leftMaxHeap.size()) {\n                temp = rightMinHeap.top();\n                rightMinHeap.pop();\n                leftMaxHeap.push(temp);\n            }\n\n            // Compute median based on heap sizes\n            double median;\n            if (leftMaxHeap.size() != rightMinHeap.size())\n                median = leftMaxHeap.top();\n            else\n                median = (double)(leftMaxHeap.top() + rightMinHeap.top()) / 2;\n\n            res.push_back(median);\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the median of a stream of data\n    static ArrayList<Double> getMedian(int[] arr) {\n\n        // Max heap to store the smaller half of numbers\n        PriorityQueue<Integer> leftMaxHeap = new PriorityQueue<>((a, b) -> b - a);\n\n        // Min heap to store the greater half of numbers\n        PriorityQueue<Integer> rightMinHeap = new PriorityQueue<>();\n\n        ArrayList<Double> res = new ArrayList<>();\n\n        for (int i = 0; i < arr.length; i++) {\n\n            // Insert new element into max heap\n            leftMaxHeap.add(arr[i]);\n\n            // Move the top of max heap to min heap to maintain order\n            int temp = leftMaxHeap.poll();\n            rightMinHeap.add(temp);\n\n            // Balance heaps if min heap has more elements\n            if (rightMinHeap.size() > leftMaxHeap.size()) {\n                temp = rightMinHeap.poll();\n                leftMaxHeap.add(temp);\n            }\n\n            // Compute median based on heap sizes\n            double median;\n            if (leftMaxHeap.size() != rightMinHeap.size())\n                median = leftMaxHeap.peek();\n            else\n                median = (leftMaxHeap.peek() + rightMinHeap.peek()) / 2.0;\n\n            res.add(median);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import heapq\n\n\nclass Solution:\n    # Function to find the median of a stream of data\n    def getMedian(self, arr):\n\n        # Max heap to store the smaller half of numbers\n        leftMaxHeap = []\n\n        # Min heap to store the greater half of numbers\n        rightMinHeap = []\n\n        res = []\n\n        for num in arr:\n            # Insert new element into max heap (negating for max behavior)\n            heapq.heappush(leftMaxHeap, -num)\n\n            # Move the top of max heap to min heap to maintain order\n            temp = -heapq.heappop(leftMaxHeap)\n            heapq.heappush(rightMinHeap, temp)\n\n            # Balance heaps if min heap has more elements\n            if len(rightMinHeap) > len(leftMaxHeap):\n                temp = heapq.heappop(rightMinHeap)\n                heapq.heappush(leftMaxHeap, -temp)\n\n            # Compute median based on heap sizes\n            if len(leftMaxHeap) != len(rightMinHeap):\n                median = -leftMaxHeap[0]\n            else:\n                median = (-leftMaxHeap[0] + rightMinHeap[0]) / 2.0\n\n            res.append(median)\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    // Function to find the median of a stream of data\n    public List<double> getMedian(int[] arr) {\n        // Max heap for the smaller half (left side)\n        SortedDictionary<int, int> leftMaxHeap = new SortedDictionary<int, int>(\n            Comparer<int>.Create((a, b) => b.CompareTo(a)));\n        int leftSize = 0;\n\n        // Min heap for the greater half (right side)\n        SortedDictionary<int, int> rightMinHeap = new SortedDictionary<int, int>();\n        int rightSize = 0;\n\n        List<double> res = new List<double>();\n\n        foreach (int num in arr) {\n            // Insert into max heap\n            Insert(leftMaxHeap, num, ref leftSize);\n\n            // Move top from max heap to min heap\n            int temp = GetMax(leftMaxHeap);\n            Remove(leftMaxHeap, temp, ref leftSize);\n            Insert(rightMinHeap, temp, ref rightSize);\n\n            // Balance the heaps\n            if (rightSize > leftSize) {\n                temp = GetMin(rightMinHeap);\n                Remove(rightMinHeap, temp, ref rightSize);\n                Insert(leftMaxHeap, temp, ref leftSize);\n            }\n\n            // Compute median\n            double median;\n            if (leftSize != rightSize)\n                median = GetMax(leftMaxHeap);\n            else\n                median = (GetMax(leftMaxHeap) + GetMin(rightMinHeap)) / 2.0;\n\n            res.Add(median);\n        }\n\n        return res;\n    }\n\n    private void Insert(SortedDictionary<int, int> heap, int num, ref int size) {\n        if (heap.ContainsKey(num))\n            heap[num]++;\n        else\n            heap[num] = 1;\n        size++;\n    }\n\n    private void Remove(SortedDictionary<int, int> heap, int num, ref int size) {\n        if (heap[num] == 1)\n            heap.Remove(num);\n        else\n            heap[num]--;\n        size--;\n    }\n\n    private int GetMax(SortedDictionary<int, int> heap) => heap.First().Key;\n    private int GetMin(SortedDictionary<int, int> heap) => heap.First().Key;\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// JavaScript program to find Median from Running Data Stream\n// Using Heaps\n\nclass Heap {\n    constructor(compare) {\n        this.data = [];\n        this.compare = compare;\n    }\n\n    push(val) {\n        this.data.push(val);\n        this._heapifyUp();\n    }\n\n    pop() {\n        if (this.data.length === 0) return null;\n        if (this.data.length === 1) return this.data.pop();\n\n        const top = this.data[0];\n        this.data[0] = this.data.pop();\n        this._heapifyDown();\n        return top;\n    }\n\n    peek() { return this.data[0] || null; }\n\n    size() { return this.data.length; }\n\n    _heapifyUp() {\n        let index = this.data.length - 1;\n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            if (this.compare(this.data[parentIndex], this.data[index])) break;\n\n            [this.data[parentIndex], this.data[index]] =\n                [ this.data[index], this.data[parentIndex] ];\n            index = parentIndex;\n        }\n    }\n\n    _heapifyDown() {\n        let index = 0;\n        const length = this.data.length;\n\n        while (true) {\n            let leftChildIdx = 2 * index + 1;\n            let rightChildIdx = 2 * index + 2;\n            let swapIdx = index;\n\n            if (leftChildIdx < length &&\n                !this.compare(this.data[swapIdx], this.data[leftChildIdx])) {\n                swapIdx = leftChildIdx;\n            }\n            if (rightChildIdx < length &&\n                !this.compare(this.data[swapIdx], this.data[rightChildIdx])) {\n                swapIdx = rightChildIdx;\n            }\n            if (swapIdx === index) break;\n\n            [this.data[index], this.data[swapIdx]] =\n                [ this.data[swapIdx], this.data[index] ];\n            index = swapIdx;\n        }\n    }\n}\n\n// MaxHeap (Stores smaller half of numbers)\nclass MaxHeap extends Heap {\n    constructor() {\n        super((a, b) => a > b); // Max heap uses > comparator\n    }\n}\n\n// MinHeap (Stores greater half of numbers)\nclass MinHeap extends Heap {\n    constructor() {\n        super((a, b) => a < b); // Min heap uses < comparator\n    }\n}\n\nclass Solution {\n    // Function to find the median of a stream of data\n    getMedian(arr) {\n\n        // Max heap for left side\n        let leftMaxHeap = new MaxHeap();\n        // Min heap for right side\n        let rightMinHeap = new MinHeap();\n\n        let res = [];\n\n        for (let num of arr) {\n            // Insert into max heap\n            leftMaxHeap.push(num);\n\n            // Balance heaps by moving element to min heap\n            rightMinHeap.push(leftMaxHeap.pop());\n\n            // Ensure left heap has more or equal elements\n            if (rightMinHeap.size() > leftMaxHeap.size()) {\n                leftMaxHeap.push(rightMinHeap.pop());\n            }\n\n            // Compute median based on heap sizes\n            let median;\n            if (leftMaxHeap.size() !== rightMinHeap.size())\n                median = leftMaxHeap.peek();\n            else\n                median = (leftMaxHeap.peek() + rightMinHeap.peek()) / 2.0;\n\n            res.push(median);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}