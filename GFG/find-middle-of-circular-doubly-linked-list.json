{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702135,
            "title": "Find Middle of Circular Doubly Linked List",
            "titleSlug": "find-middle-of-circular-doubly-linked-list",
            "content": "<p><span style=\"font-size:18px\">Given a <strong>circular </strong>doubly linked list of <strong>odd size n</strong>, the task is to print the middle element.<br />\nThe tail of a circular doubly linked list is connected to head via its next pointer, and the previous pointer of head is connected to the tail.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>LinkedList: 1&lt;--&gt;2&lt;--&gt;3\n(The first and the last node is connected,\ni.e 3 &lt;--&gt; 1)\n<strong>Output: </strong>2</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nThe task is to complete the function <strong>findMiddle</strong>() which takes <strong>head </strong>reference as an argument. The function should return the middle element of <strong>CDLL</strong>.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= Number of nodes &lt;= 10<sup>3</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a circular doubly linked list of odd size 'n', find and return the middle element's value.  The circular doubly linked list has its tail connected to the head (next pointer) and the head connected to the tail (previous pointer).",
                "constraints": [
                    "1 <= Number of nodes <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "Circular Doubly Linked List: 1<-->2<-->3 (where 3 is connected to 1)",
                        "output": "2",
                        "explanation": "The middle element in the list 1<-->2<-->3 is 2."
                    },
                    {
                        "input": "Circular Doubly Linked List: 1<-->2<-->3<-->4<-->5 (where 5 is connected to 1)",
                        "output": "3",
                        "explanation": "The middle element in the list 1<-->2<-->3<-->4<-->5 is 3."
                    },
                    {
                        "input": "Circular Doubly Linked List: 1",
                        "output": "1",
                        "explanation": "The middle element in the list containing only 1 is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Node * front=head;<br />\n&nbsp;&nbsp;&nbsp; Node * back=head-&gt;prev;<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp; while(front!=back)<br />\n&nbsp;&nbsp;&nbsp; {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; front=front-&gt;next;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; back=back-&gt;prev;<br />\n&nbsp;&nbsp;&nbsp; }<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp; return front-&gt;data;</p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    int findMiddle(Node * head)\n    {\n        Node * front=head;\n        Node * back=head->prev;\n        \n        while(front!=back)\n        {\n            front=front->next;\n            back=back->prev;\n        }\n        \n        return front->data;\n        \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    public static int findMiddle(Node head)\n    {\n        Node front = head;\n        Node back = head.prev;\n        \n        while(front != back)\n        {\n            front = front.next;\n            back = back.prev;\n        }\n        \n        return front.data;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def findMiddle(self, head):\n        f=head\n        b=head.prev\n    \n        while f!=b:\n            f=f.next\n            b=b.prev\n    \n        return f.data",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {Node} head\n * @returns {Node}\n*/\n\nclass Solution {\n    //Function to find middle element in linked list\n    findMiddle(head) {\n        let fast = head;\n        let slow = head.prev;\n        \n        while (fast !== slow && fast.next !== slow) {\n            fast = fast.next;\n            slow = slow.prev;\n        }\n        \n        return slow.data;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}