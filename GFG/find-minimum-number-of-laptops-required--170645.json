{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713192,
            "title": "Find minimum number of Laptops required",
            "titleSlug": "find-minimum-number-of-laptops-required--170645",
            "content": "<p><span style=\"font-size:18px\">There are <strong>N</strong>&nbsp;jobs and the start and finish time of the jobs are given in arrays <strong>start[]</strong> and <strong>end[]</strong> respectively. Each job requires one laptop and laptops can&#39;t be shared. Find the minimum number of laptops required given that you can give your laptop to someone else when you are not doing your job.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 3\r\nstart[] = {1, 2, 3}\r\nend[] = {4, 4, 6}\r\n<strong>Output:\r\n</strong>3\r\n<strong>Explanation:</strong>\r\nWe can clearly see that everyone&#39;s supposed to\r\nbe doing their job at time 3. So, 3 laptops\r\nwill be required at minimum.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 3\r\nstart[] = {1, 5, 2}\r\nend[] = {2, 6, 3}\r\n<strong>Output :</strong>\r\n1\r\n<strong>Explanation:</strong>\r\nAll jobs can be done using 1 laptop only.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>minLaptops()</strong>&nbsp;which takes an integer N and two arrays start and end denoting starting and ending time of N jobs and returns minimum laptops required.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*logN)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N&nbsp;&le; 10<sup>5&nbsp;</sup><br />\r\n1<sup>&nbsp;</sup>&le; start[i] &lt; end[i] &le; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given N jobs with their start and end times represented in the `start[]` and `end[]` arrays respectively, determine the minimum number of laptops required to complete all jobs. Each job requires one laptop, and laptops cannot be shared simultaneously. A laptop can be reassigned to another job once the previous job is finished.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= start[i] < end[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nstart[] = {1, 2, 3}\nend[] = {4, 4, 6}",
                        "output": "3",
                        "explanation": "At time 3, all three jobs are in progress simultaneously (1-4, 2-4, and 3-6). Therefore, a minimum of 3 laptops are required to accommodate all the concurrent jobs."
                    },
                    {
                        "input": "N = 3\nstart[] = {1, 5, 2}\nend[] = {2, 6, 3}",
                        "output": "1",
                        "explanation": "The jobs can be scheduled such that no two jobs overlap in time. For instance, job 1 (1-2) finishes before job 3 (2-3) starts, and job 3 finishes before job 2 (5-6) starts. Hence, a single laptop is sufficient to complete all jobs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Checking through the starting time of each job one by one and checking the answer for it is sufficient.</span></p>",
            "<p><span style=\"font-size:18px\">Use concept of <strong>Difference Array</strong></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find minimum number of laptops required\n    int minLaptops(int N, int start[], int end[]) {\n        // Create a map to store the count of laptops needed at each time point\n        map<int,int>mp;\n        \n        // Iterate through the start and end arrays\n        for(int i=0; i<N; i++)\n        {\n            // Increment the count for start time and decrement the count for end time\n            mp[start[i]] += 1;\n            mp[end[i]] -= 1;\n        }\n        \n        // Create a vector to store the time points and their corresponding counts\n        vector<pair<int,int>> s;\n        \n        // Iterate through the map and store the pairs in the vector\n        for(auto it: mp)\n            s.push_back(it);\n        \n        // Sort the vector in ascending order based on time points\n        sort(s.begin(), s.end());\n        \n        // Initialize variables for counting laptops and storing the maximum count\n        int c=0,ans=0;\n        \n        // Iterate through the vector of time points and counts\n        for(pair<int,int> i:s)\n        {\n            // Update the count of laptops\n            c+=i.second;\n            \n            // Update the maximum count if necessary\n            ans=max(ans,c);\n        }\n        \n        // Return the maximum count of laptops required\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int minLaptops(int N, int[] start, int[] end) {\n        \n        //Create a HashMap to store the frequency of start and end times\n        HashMap<Integer, Integer> mp = new HashMap<>();\n        \n        //Increment the frequency of start times in the HashMap\n        for(int i=0; i<N; i++)\n        {\n            if (mp.containsKey(start[i]))\n                mp.put(start[i], mp.get(start[i])+1);\n            else\n                mp.put(start[i],1);\n        }\n        \n        //Decrement the frequency of end times in the HashMap\n        for(int i=0; i<N; i++)\n        {\n            if (mp.containsKey(end[i]))\n                mp.put(end[i], mp.get(end[i])-1);\n            else\n                mp.put(end[i],-1);\n        }\n            \n        //Create a 2D array to store the start and end times along with their frequencies\n        int[][] s = new int[2*N][2];\n        \n        int ind = 0;\n        //Iterate over the HashMap and store the entries in the 2D array\n        for (Map.Entry<Integer, Integer> e : mp.entrySet())\n        {\n            s[ind][0] = e.getKey();\n            s[ind][1] = e.getValue();\n            ind++;\n        }\n        \n        //Sort the 2D array based on start times and then end times\n        Arrays.sort(s, Comparator.<int[]>comparingInt(a->a[0])\n                               .thenComparingInt(a->a[1]));\n                               \n                               \n        int c=0,ans=0;\n        //Calculate the maximum number of laptops needed at any given time\n        for(int i=0; i<2*N; i++)\n        {\n            c+=s[i][1];\n            ans=Math.max(ans,c);\n        }\n        //Return the maximum number of laptops needed\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution: \r\n    def minLaptops(self, N, start, end):\r\n        \r\n        #creating a dictionary to keep track of laptops\r\n        mp=dict()\r\n        \r\n        #incrementing the count of laptops when a new laptop is started\r\n        #and decrementing the count when a laptop is ended\r\n        for i in start:\r\n            if i in mp:\r\n                mp[i] += 1\r\n            else:\r\n                mp[i] = 1\r\n        for i in end:\r\n            if i in mp:\r\n                mp[i] += -1\r\n            else:\r\n                mp[i] = -1\r\n        \r\n        c = ans = 0\r\n        #calculating the maximum number of laptops in use at any given time\r\n        for i in sorted(mp):\r\n            c += mp[i]\r\n            ans = max(ans,c)\r\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number[]} start\n * @param {number[]} end\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the minimum number of laptops that are needed.\n    minLaptops(N, start, end)\n    {\n        //creating a dictionary to keep track of laptops\n        let mp = new Map();\n        \n        //incrementing the count of laptops when a new laptop is started\n        //and decrementing the count when a laptop is ended\n        for(let i = 0; i < N; i++){\n            if(mp.has(start[i])){\n                mp.set(start[i], mp.get(start[i]) + 1);\n            }\n            else{\n                mp.set(start[i], 1);\n            }\n            \n            if(mp.has(end[i])){\n                mp.set(end[i], mp.get(end[i]) - 1);\n            }\n            else{\n                mp.set(end[i], -1);\n            }\n        }\n        \n        let c = 0;\n        let ans = 0;\n        \n        //calculating the maximum number of laptops in use at any given time\n        for(let key of [...mp.keys()].sort((a, b) => a - b)){\n            c += mp.get(key);\n            ans = Math.max(ans, c);\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public int minLaptops(int N, int[] start, int[] end)\n    {\n        // Create a dictionary to store the count of laptops needed at each time point\n        SortedDictionary<int, int> mp = new SortedDictionary<int, int>();\n        \n        // Iterate through the start and end arrays\n        for(int i = 0; i < N; i++)\n        {\n            // Increment the count for start time and decrement the count for end time\n            if (!mp.ContainsKey(start[i])) mp[start[i]] = 0;\n            mp[start[i]] += 1;\n            \n            if (!mp.ContainsKey(end[i])) mp[end[i]] = 0;\n            mp[end[i]] -= 1;\n        }\n\n        // Initialize variables for counting laptops and storing the maximum count\n        int c = 0, ans = 0;\n        \n        // Iterate through the sorted dictionary of time points and counts\n        foreach(var pair in mp)\n        {\n            // Update the count of laptops\n            c += pair.Value;\n            \n            // Update the maximum count if necessary\n            ans = Math.Max(ans, c);\n        }\n        \n        // Return the maximum count of laptops required\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}