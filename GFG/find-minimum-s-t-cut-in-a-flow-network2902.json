{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705922,
            "title": "Find minimum s-t cut in a flow network",
            "titleSlug": "find-minimum-s-t-cut-in-a-flow-network2902",
            "content": "<p><span style=\"font-size:18px\">Given a weighted graph of <strong>N</strong> vertices numbered from <strong>0</strong>&nbsp;to<strong> N-1</strong> in the form of&nbsp;adjacency matrix <strong>A[ ][ ]</strong> and two&nbsp;integers<strong> S </strong>denoting the number of source vertex and<strong> T</strong> denoting the number of sink vertex. The task is to find minimum capacity s-t cut of the given network.&nbsp;An s-t cut is a cut that requires the source node &lsquo;<strong>S</strong>&rsquo; and the sink node &lsquo;<strong>T</strong>&rsquo; to be in different subsets, and it consists of edges going from the source&rsquo;s side to the sink&rsquo;s side.&nbsp;The capacity of an s-t cut is defined by the sum of the capacity of each edge in the cut-set. In other words,&nbsp;you have to find out all the edges which has to be removed to make it impossible to reach the sink node from source node, and the edges you select should have a&nbsp;minimum sum of weights. You have to return all the edges included in the&nbsp;minimum capacity s-t cut and if there are no edges in&nbsp;minimum capacity s-t cut, return &quot;-1&quot;.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 2\nA[][] = [[0, 3],\n&nbsp;\\t  [0, 0]]\nS = 0\nT = 1\n<strong>Output:</strong>\n0 1\n<strong>Explanation: </strong>We have to remove the edge going\nfrom 0<sup>th</sup> vertex to 1<sup>st</sup> vertex.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\nA[][] = [[0, 0, 0, 0, 0],\n&nbsp;\\t  [0, 0, 2, 3, 0],\n&nbsp;\\t  [0, 0, 0, 0, 0],\n&nbsp;\\t  [0, 0, 0, 0, 0],\n&nbsp;\\t  [0, 0, 0, 0, 0]]\nS = 0\nT = 4\n<strong>Output:</strong>\n-1\n<strong>Explanation: </strong>There are no edges in \nminimum capacity s-t cut.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function<strong>&nbsp;minimumCut()</strong>&nbsp;which takes the adjacency matrix <strong>A[ ][ ]</strong>,&nbsp;source node number <strong>S</strong>, sink node number <strong>T</strong> and number of vertices&nbsp;<strong>N</strong>&nbsp;and returns a list of integers <strong>res[ ]</strong> where <strong>res[2*i-1]</strong> and <strong>res[2*i]</strong> denotes an edge in&nbsp;minimum capacity s-t cut where <strong>1 &le; i &le;&nbsp;length(res)/2</strong>, if there are no edges in&nbsp;minimum capacity s-t cut, return only one integer &quot;<strong>-1</strong>&quot; in <strong>res[ ]</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(max_flow * N<sup>2</sup>)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N<sup>2</sup>)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le;&nbsp;N &le;&nbsp;50<br />\n0 &le; S, T&nbsp;&lt;&nbsp;N</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a weighted graph represented by an adjacency matrix `A` with `N` vertices numbered from 0 to N-1, and two integers `S` and `T` representing the source and sink vertices, respectively. Find the minimum capacity s-t cut of the graph. An s-t cut divides the vertices into two disjoint sets, one containing `S` and the other containing `T`. The capacity of the cut is the sum of the weights of the edges going from the set containing `S` to the set containing `T`.  Return a list of edges that form the minimum s-t cut. If no such edges exist, return a list containing only -1.",
                "constraints": [
                    "1 <= N <= 50",
                    "0 <= S, T < N"
                ],
                "testcases": [
                    {
                        "input": "N = 2\nA[][] = [[0, 3],\n          [0, 0]]\nS = 0\nT = 1",
                        "output": "0 1",
                        "explanation": "The edge from vertex 0 to vertex 1 has a capacity of 3. Removing this edge disconnects the source (0) from the sink (1), and the cut has a minimum capacity of 3. Therefore, the edge 0 1 is returned."
                    },
                    {
                        "input": "N = 5\nA[][] = [[0, 0, 0, 0, 0],\n          [0, 0, 2, 3, 0],\n          [0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0],\n          [0, 0, 0, 0, 0]]\nS = 0\nT = 4",
                        "output": "-1",
                        "explanation": "There are no edges connecting the source (0) to any other vertex, and no path exists between the source and the sink (4).  Therefore, there are no edges in the minimum s-t cut, and -1 is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Following are steps to print all the edges of the minimum cut.</span><br />\n<span style=\"font-size:18px\"><strong>1)</strong>&nbsp;Run Ford-Fulkerson algorithm and consider the final residual graph.</span><br />\n<span style=\"font-size:18px\"><strong>2)</strong>&nbsp;Find the set of vertices that are reachable from the source in the residual graph.</span><br />\n<span style=\"font-size:18px\"><strong>3)</strong>&nbsp;All edges which are from a reachable vertex to non-reachable vertex are minimum cut edges. Print all such edges.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nint bfs(vector<vector<int>> &rGraph, int s, int t, int N, vector<int> &parent) \n{ \n    // Create a visited array and mark all vertices as not visited \n    vector<bool> visited(N); \n  \n    // Create a queue, enqueue source vertex and mark source vertex \n    // as visited \n    queue<int> q; \n    q.push(s); \n    visited[s] = true; \n    parent[s] = -1; \n  \n    // Standard BFS Loop \n    while (!q.empty()) \n    { \n        int u = q.front(); \n        q.pop(); \n  \n        for (int v=0; v<N; v++) \n        { \n            if (visited[v]==false && rGraph[u][v] > 0) \n            { \n                q.push(v); \n                parent[v] = u; \n                visited[v] = true; \n            } \n        } \n    } \n  \n    // If we reached sink in BFS starting from source, then return \n    // true, else false \n    return (visited[t] == true); \n} \n\n// A DFS based function to find all reachable vertices from s.  The function \n// marks visited[i] as true if i is reachable from s.  The initial values in \n// visited[] must be false. We can also use BFS to find reachable vertices \nvoid dfs(vector<vector<int>> &rGraph, int S, int N, vector<bool> &visited) \n{ \n    visited[S] = true; \n    for (int i = 0; i < N; i++) \n       if (rGraph[S][i] && !visited[i]) \n           dfs(rGraph, i, N, visited); \n} \n\nvector<int> minimumCut(vector<vector<int>> &A, int S, int T, int N){\n    int u, v; \n  \n    // Create a residual graph and fill the residual graph with \n    // given capacities in the original graph as residual capacities \n    // in residual graph \n    vector<vector<int>> rGraph;\n    rGraph = A;\n  \n    vector<int> parent(N);  // This array is filled by BFS and to store path \n    \n    // Augment the flow while there is a path from source to sink \n    while (bfs(rGraph, S, T, N, parent)) \n    { \n        // Find minimum residual capacity of the edhes along the \n        // path filled by BFS. Or we can say find the maximum flow \n        // through the path found. \n        int path_flow = INT_MAX; \n        for (v=T; v!=S; v=parent[v]) \n        { \n            u = parent[v]; \n            path_flow = min(path_flow, rGraph[u][v]); \n        } \n  \n        // update residual capacities of the edges and reverse edges \n        // along the path \n        for (v=T; v != S; v=parent[v]) \n        { \n            u = parent[v]; \n            rGraph[u][v] -= path_flow; \n            rGraph[v][u] += path_flow; \n        } \n    } \n  \n    // Flow is maximum now, find vertices reachable from s \n    vector<bool> visited(N); \n    dfs(rGraph, S, N, visited); \n    \n    vector<int> res;\n  \n    // Returning all edges that are from a reachable vertex to \n    // non-reachable vertex in the original graph \n    for (int i = 0; i < N; i++) \n      for (int j = 0; j < N; j++) \n         if (visited[i] && !visited[j] && A[i][j]) {\n             res.push_back(i);\n             res.push_back(j);\n         }\n    if(res.size()==0){\n        res.push_back(-1);\n    }\n    return res; \n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}