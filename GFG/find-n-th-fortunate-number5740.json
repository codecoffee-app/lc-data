{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705119,
            "title": "Find n-th Fortunate Number",
            "titleSlug": "find-n-th-fortunate-number5740",
            "content": "<p><span style=\"font-size:18px\">Given an integer <strong>n</strong>, find the <strong>n&#39;th</strong> Fortunate Number.<br />\r\n<strong>A Fortunate number is the smallest integer m &gt; 1 such that, for a given positive integer n,&nbsp;</strong><strong>pn</strong><strong>&nbsp;+ m is a prime number. </strong>Here <strong>pn</strong>&nbsp;is the product of the first n prime numbers, i.e prime factorials (or&nbsp;<a href=\"https://www.geeksforgeeks.org/primorial-of-a-number/\">primorials</a>) of order <strong>n</strong>. </span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>n = </strong>3</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">7</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">7 must be added to the product of first\r\nn prime numbers to make the product prime.\r\n2 x 3 x 5 = 30, need to add 7 to make it 37,\r\nwhich is a prime.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>n = </strong>5</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">23</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">23 must be added to the product of first\r\nn prime numbers to make the product prime.\r\n2 x 3 x 5 x 7 x 11= 2310, need to add 23\r\nto make it 2333, which is a prime.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>nthFortunateNum()</strong> which takes an Integer n as input and returns the n&#39;th Fortunate Number.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= n &lt;= 15</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n`, find the `n`th Fortunate Number.\n\nA Fortunate number is the smallest integer `m > 1` such that, for a given positive integer `n`, `pn + m` is a prime number. Here `pn` is the product of the first `n` prime numbers (primorial of order `n`).",
                "constraints": [
                    "1 <= n <= 15"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "7",
                        "explanation": "The product of the first 3 prime numbers is 2 * 3 * 5 = 30.  Adding 7 to 30 results in 37, which is a prime number. 7 is the smallest integer > 1 that makes the sum prime."
                    },
                    {
                        "input": "5",
                        "output": "23",
                        "explanation": "The product of the first 5 prime numbers is 2 * 3 * 5 * 7 * 11 = 2310. Adding 23 to 2310 results in 2333, which is a prime number. 23 is the smallest integer > 1 that makes the sum prime."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">To find the nth Fortunate number, calculate the product of the first n prime numbers (primorial).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\nclass Solution {\r\n  public:\r\n  \r\n    bool isPrime(long long int n)\r\n    {\r\n    \t// Corner cases\r\n    \tif (n <= 1) return false;\r\n    \tif (n <= 3) return true;\r\n    \r\n    \t// This is checked so that we can skip\r\n    \t// middle five numbers in below loop\r\n    \tif (n%2 == 0 || n%3 == 0) return false;\r\n    \r\n    \tfor (long long int i=5; i*i<=n; i=i+6)\r\n    \t\tif (n%i == 0 || n%(i+2) == 0)\r\n    \t\treturn false;\r\n    \r\n    \treturn true;\r\n    }\r\n    \r\n    // Function to Find primorial of order n\r\n    // (product of first n prime numbers).\r\n    long long primorial(long long int n)\r\n    {\r\n    \tlong long p = 2;\r\n    \tn--;\r\n    \tfor (int i = 3; n != 0; i++)\r\n    \t{\r\n    \t\tif (isPrime(i))\r\n    \t\t{\r\n    \t\t\tp = p * i;\r\n    \t\t\tn--;\r\n    \t\t}\r\n    \t\ti++;\r\n    \t}\r\n    \treturn p;\r\n    }\r\n    \r\n    long long findNextPrime(long long int n)\r\n    {\r\n    \t// Note that difference (or m) should be\r\n    \t// greater than 1.\r\n    \tlong long nextPrime = n + 2;\r\n    \r\n    \t// loop continuously until isPrime\r\n    \t// returns true for a number above n\r\n    \twhile (true)\r\n    \t{\r\n    \r\n    \t\t// Ignoring the prime number that\r\n    \t\t// is 1 greater than n\r\n    \t\tif (isPrime(nextPrime))\r\n    \t\t\tbreak;\r\n    \r\n    \t\tnextPrime++;\r\n    \t}\r\n    \r\n    \treturn nextPrime;\r\n    }\r\n\r\n    long long nthFortunateNum(int n)\r\n    {\r\n        long long p = primorial(n);\r\n        return findNextPrime(p) - p;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public bool IsPrime(long n)\n    {\n        if (n <= 1) return false;\n        if (n <= 3) return true;\n        if (n % 2 == 0 || n % 3 == 0) return false;\n\n        for (long i = 5; i * i <= n; i += 6)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return false;\n        }\n\n        return true;\n    }\n\n    public long Primorial(long n)\n    {\n        long p = 2;\n        n--;\n        for (long i = 3; n != 0; i++)\n        {\n            if (IsPrime(i))\n            {\n                p = p * i;\n                n--;\n            }\n            i++;\n        }\n        return p;\n    }\n\n    public long FindNextPrime(long n)\n    {\n        long nextPrime = n + 2;\n\n        while (true)\n        {\n            if (IsPrime(nextPrime))\n                break;\n\n            nextPrime++;\n        }\n\n        return nextPrime;\n    }\n\n    public long nthFortunateNum(int n)\n    {\n        long p = Primorial(n);\n        return FindNextPrime(p) - p;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}