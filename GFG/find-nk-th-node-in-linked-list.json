{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700635,
            "title": "Find n/k th node in Linked list",
            "titleSlug": "find-nk-th-node-in-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Given a singly linked list and a number k. Find the (n/k)<sup>th</sup> element, where n is the number of elements in the linked list. We need to consider ceil value in case of decimals.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6 , k = 2<br /><strong>Output:</strong> 3<br /><strong>Explanation: </strong>6/2<sup>th</sup>&nbsp;element is the 3<sup>rd</sup>(1-based indexing) element which is 3.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700635/Web/Other/blobid0_1722110272.png\" width=\"400\" height=\"90\" /><br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> 2-&gt;7-&gt;9-&gt;3-&gt;5 , k = 3<br /></span><span style=\"font-size: 18px;\"><strong>Output: </strong>7<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>The<strong> </strong></span><span style=\"font-size: 18px;\">5/3</span><sup><span style=\"font-size: 15px;\">rd</span></sup><span style=\"font-size: 18px;\">&nbsp;element is the 2</span><sup style=\"font-size: 18px;\">nd </sup><span style=\"font-size: 18px;\">element as mentioned in the question that we need to consider ceil value in the case of decimals. So 2<sup>nd</sup> element is 7.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700635/Web/Other/blobid1_1722110291.png\" width=\"400\" height=\"90\" /><br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:&nbsp;</strong><br />1 &lt;= number of nodes &lt;= 10<sup>4</sup><br />1 &lt;= k &lt;=&nbsp;</span><span style=\"font-size: 18px;\">number of nodes<br /></span><span style=\"font-size: 18.6667px;\">1 &le; node-&gt;data &le; 10</span><sup>3</sup><span style=\"font-size: 18px;\"><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Count the nodes in the linked list, and compute the index as <code>ceil(n / k)</code>, then traverse to this index to find the desired element.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "hike",
            "sap-labs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to find the fractional node\nclass Solution {\n  public:\n\n    int fractional_node(Node* head, int k) {\n        int c = 0, d;\n        Node *ptr, *ptr1 = head;\n\n        // Counting the number of nodes in the linked list\n        while (ptr1 != NULL) {\n            c++;\n            ptr1 = ptr1->next;\n        }\n\n        // Calculating the number of groups of k nodes\n        if (c % k == 0)\n            d = c / k;\n        else\n            d = (c / k) + 1;\n\n        int p = 1;\n        ptr1 = head;\n\n        // Looping through the linked list to find the fractional node\n        while (p <= c) {\n            // Returning the data of the node at position d\n            if (p == d) {\n                return ptr1->data;\n            }\n            p++;\n            ptr1 = ptr1->next;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int fractional_node(Node head, int k) {\n        int c = 0, d = 0; // Initialize counters\n\n        Node ptr = null; // Initialize a pointer\n\n        Node ptr1 = head; // Set another pointer to the head of the linked list\n\n        while (ptr1 !=\n               null) // Loop through the linked list to count the number of nodes\n        {\n            c++;              // Increment the counter\n            ptr1 = ptr1.next; // Move the pointer to the next node\n        }\n\n        if (c % k == 0) // Check if the total number of nodes is divisible by k\n            d = c / k;  // Calculate the quotient\n        else\n            d = c / k + 1; // Calculate the quotient and add 1 to get the ceiling value\n\n        int p = 1;     // Initialize a position counter\n        ptr1 = head;   // Reset the second pointer to the head of the linked list\n        while (p <= c) // Loop through the linked list again\n        {\n            if (p ==\n                d) // Check if the current position is equal to the calculated quotient\n                return ptr1.data; // Return the data of the current node\n\n            p++;              // Increment the position counter\n            ptr1 = ptr1.next; // Move the pointer to the next node\n        }\n\n        return 0; // If no node found at the calculated quotient, return 0\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n#Function to find the fractional nodes in a linked list.\n\n\nclass Solution:\n\n    def fractional_node(self, head, k):\n\n        #if k is less than or equal to 0 or head is None, return None.\n        if (k <= 0 or head is None):\n            return None\n\n        fractionalNodes = None\n        temp = head\n        i = 0\n\n        #iterating through the linked list.\n        while (temp is not None):\n\n            #moving temp to the next node.\n            temp = temp.next\n\n            #if the current index is divisible by k,\n            #update fractionalNodes accordingly.\n            if (i % k == 0):\n                if (fractionalNodes is None):\n                    fractionalNodes = head\n                else:\n                    fractionalNodes = fractionalNodes.next\n\n            #incrementing the index.\n            i = i + 1\n\n        return fractionalNodes.data\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    fractional_node(head, k) {\n        if (k <= 0 || !head) {\n            return null;\n        }\n\n        let fractionalNodes = null;\n        let temp = head;\n        let i = 0;\n\n        while (temp !== null) {\n            temp = temp.next;\n\n            if (i % k === 0) {\n                if (fractionalNodes === null) {\n                    fractionalNodes = head;\n                } else {\n                    fractionalNodes = fractionalNodes.next;\n                }\n            }\n\n            i++;\n        }\n\n        return fractionalNodes.data;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}