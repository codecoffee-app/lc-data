{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700274,
            "title": "Find kth element of spiral matrix",
            "titleSlug": "find-nth-element-of-spiral-matrix",
            "content": "<p><span style=\"font-size: 18px;\">Given a matrix with <strong>n</strong> rows and <strong>m </strong>columns. Your task is to find the <strong>kth</strong> element which is obtained while traversing the matrix spirally. You need to complete the method<strong> findK</strong>&nbsp;which takes four arguments the first argument is the matrix <strong>A </strong>and the next two arguments will be <strong>n </strong>and <strong>m </strong>denoting the size of the matrix A and then the forth argument is an integer <strong>k</strong>. The function will return the kth element obtained while traversing the matrix spirally.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1</strong></span><span style=\"font-size: 18px;\"><strong>:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 4, m = 4, k = 10\nA[][] = {{1  2  3  4},\n&nbsp;\\t  {5  6  7  8},\n&nbsp;\\t  {9  10 11 12},<br />\\t   {13 14 15 16}}\n<strong>Output:\n</strong>13<strong>\nExplanation:<br /></strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700274/Web/Other/blobid0_1687070632.png\" alt=\"\" />\nThe spiral order of matrix will look like 1-&gt;2-&gt;3-&gt;4-&gt;8-&gt;12-&gt;16-&gt;15-&gt;14-&gt;13-&gt;9-&gt;5-&gt;6-&gt;7-&gt;11-&gt;10. So the 10th element in this order is 13. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2</strong></span><span style=\"font-size: 18px;\"><strong>:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 3, m = 3, k = 4\nA[][] = {{1 2 3},\n&nbsp;\\t  {4 5 6},\n&nbsp;\\t  {7 8 9}}\n<strong>Output:\n</strong>6<strong>\nExplanation:</strong>\nThe spiral order of matrix will look like 1-&gt;2-&gt;3-&gt;6-&gt;9-&gt;8-&gt;7-&gt;4-&gt;5. So the 4th element in this order is 6.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You only need to implement the given function&nbsp;<strong>findK()</strong>. Do not read input, instead use the arguments given in the function. Return the K'th element obtained by traversing matrix spirally.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*m)<br /><strong>Expected Auxiliary Space:</strong> O(n*m)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=n,m&lt;=10<sup>3</sup><br />1&lt;=k&lt;=n*m<br />-10<sup>9</sup> &lt;= A[i][j] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of size n x m, traverse it in a spiral manner and find the kth element in the traversal order. You are given a matrix A, its dimensions n and m, and an integer k. Your task is to return the kth element obtained while traversing the matrix spirally, starting from the outermost layer.",
                "constraints": [
                    "1 <= n, m <= 10^3",
                    "1 <= k <= n*m",
                    "-10^9 <= A[i][j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 4, k = 10\nA[][] = {{1, 2, 3, 4},\n          {5, 6, 7, 8},\n          {9, 10, 11, 12},\n          {13, 14, 15, 16}}",
                        "output": "13",
                        "explanation": "The spiral traversal order is 1 -> 2 -> 3 -> 4 -> 8 -> 12 -> 16 -> 15 -> 14 -> 13 -> 9 -> 5 -> 6 -> 7 -> 11 -> 10. The 10th element is 13."
                    },
                    {
                        "input": "n = 3, m = 3, k = 4\nA[][] = {{1, 2, 3},\n          {4, 5, 6},\n          {7, 8, 9}}",
                        "output": "6",
                        "explanation": "The spiral traversal order is 1 -> 2 -> 3 -> 6 -> 9 -> 8 -> 7 -> 4 -> 5. The 4th element is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">One simple solution is to start traversing matrix in spiral form&nbsp;<strong>Print Spiral Matrix</strong>&nbsp;and start a counter i.e; count = 0. Whenever count gets equal to K, print that element.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "bloomberg",
            "facebook",
            "microsoft",
            "uber"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n    public:\r\n    /*You are required to complete this method*/\r\n    int findK(int a[MAX][MAX],int n,int m,int k)\r\n    {\r\n \t\tint top = 0;\r\n        int left = 0;\r\n        int right = m-1;\r\n        int bottom = n-1;\r\n        int dir =0;\r\n        int count=0;\r\n       \r\n        std::vector<int> AA ;\r\n        AA.clear();\r\n        while(top<=bottom and left<=right)\r\n        {\r\n            if(dir==0)\r\n            {\r\n                for(int i=left ;i<=right;i++)\r\n                {\r\n                    AA.push_back(a[top][i]);\r\n                }\r\n                top++;\r\n                dir=1;\r\n                \r\n            }\r\n            if(dir==1)\r\n            {\r\n                for(int i=top;i<=bottom;i++)\r\n                {\r\n                   AA.push_back(a[i][right]);\r\n                }\r\n                right--;\r\n                dir=2;\r\n                \r\n               \r\n            }\r\n            if(dir==2)\r\n            {\r\n                for(int i=right;i>=left;i--)\r\n                {\r\n                    AA.push_back(a[bottom][i]);\r\n                }\r\n                bottom--;\r\n                dir=3;\r\n            }\r\n            if(dir==3)\r\n            {\r\n                for(int i=bottom;i>=top;i--)\r\n                {\r\n                   AA.push_back(a[i][left]);\r\n                }\r\n                left++;\r\n                dir=0;\r\n            }\r\n            \r\n        }\r\n        \r\n        return AA[k-1];\r\n    }\r\n};\r\n\r\n\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n   \r\n\tint findK(int a[][], int n, int m, int k)\r\n\t{\r\n\t\tint top = 0;\r\n        int left = 0;\r\n        int right = m-1;\r\n        int bottom = n-1;\r\n        int dir =0;\r\n        int count=0;\r\n       \r\n        ArrayList<Integer> AA = new ArrayList<Integer>();\r\n        while(top<=bottom && left<=right)\r\n        {\r\n            if(dir==0)\r\n            {\r\n                for(int i=left ;i<=right;i++)\r\n                {\r\n                    AA.add(a[top][i]);\r\n                }\r\n                top++;\r\n                dir=1;\r\n                \r\n            }\r\n            if(dir==1)\r\n            {\r\n                for(int i=top;i<=bottom;i++)\r\n                {\r\n                   AA.add(a[i][right]);\r\n                }\r\n                right--;\r\n                dir=2;\r\n                \r\n               \r\n            }\r\n            if(dir==2)\r\n            {\r\n                for(int i=right;i>=left;i--)\r\n                {\r\n                    AA.add(a[bottom][i]);\r\n                }\r\n                bottom--;\r\n                dir=3;\r\n            }\r\n            if(dir==3)\r\n            {\r\n                for(int i=bottom;i>=top;i--)\r\n                {\r\n                   AA.add(a[i][left]);\r\n                }\r\n                left++;\r\n                dir=0;\r\n            }\r\n            \r\n        }\r\n        \r\n        return AA.get(k - 1);\r\n\t}\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def findK(self, a, n, m, k):\n        top = 0 #initialize top index to 0\n        left = 0 #initialize left index to 0\n        right = m - 1 #initialize right index to m - 1\n        bottom = n - 1 #initialize bottom index to n - 1\n        direction = 0 #initialize direction to 0 (0: from left to right, 1: from top to bottom, 2: from right to left, 3: from bottom to top)\n        count = 0 #initialize count to 0\n       \n        AA = [] #initialize an empty list to store the elements in the spiral order\n        while top <= bottom and left <= right: #iterate until top index is less than or equal to bottom index and left index is less than or equal to right index\n            if direction == 0: #if direction is 0 (from left to right)\n                for i in range(left, right + 1): #iterate from left index to right index (inclusive)\n                    AA.append(a[top][i]) #append the element at the current position to the AA list\n                top += 1 #increment top index by 1\n                direction = 1 #change direction to 1 for the next iteration\n                \n            if direction == 1: #if direction is 1 (from top to bottom)\n                for i in range(top, bottom + 1): #iterate from top index to bottom index (inclusive)\n                    AA.append(a[i][right]) #append the element at the current position to the AA list\n                right -= 1 #decrement right index by 1\n                direction = 2 #change direction to 2 for the next iteration\n\n            if direction == 2: #if direction is 2 (from right to left)\n                for i in range(right, left - 1, -1): #iterate from right index to left index (inclusive, with step -1)\n                    AA.append(a[bottom][i]) #append the element at the current position to the AA list\n                bottom -= 1 #decrement bottom index by 1\n                direction = 3 #change direction to 3 for the next iteration\n\n            if direction == 3: #if direction is 3 (from bottom to top)\n                for i in range(bottom, top - 1, -1): #iterate from bottom index to top index (inclusive, with step -1)\n                    AA.append(a[i][left]) #append the element at the current position to the AA list\n                left += 1 #increment left index by 1\n                direction = 0 #change direction to 0 for the next iteration\n            \n        return AA[k-1] #return the kth element in the AA list (0-based indexing)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} a\n * @param {number} n\n * @param {number} m\n * @param {number} k\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the kth element in the array.\n    findK(a, n, m, k) {\n        let top = 0; //initialize top index to 0\n        let left = 0; //initialize left index to 0\n        let right = m - 1; //initialize right index to m - 1\n        let bottom = n - 1; //initialize bottom index to n - 1\n        let direction = 0; //initialize direction to 0 (0: from left to right, 1: from top to bottom, 2: from right to left, 3: from bottom to top)\n        let count = 0; //initialize count to 0\n       \n        let AA = []; //initialize an empty list to store the elements in the spiral order\n        while (top <= bottom && left <= right) { //iterate until top index is less than or equal to bottom index and left index is less than or equal to right index\n            if (direction === 0) { //if direction is 0 (from left to right)\n                for (let i = left; i <= right; i++) { //iterate from left index to right index (inclusive)\n                    AA.push(a[top][i]); //append the element at the current position to the AA list\n                }\n                top++; //increment top index by 1\n                direction = 1; //change direction to 1 for the next iteration\n            }\n\n            if (direction === 1) { //if direction is 1 (from top to bottom)\n                for (let i = top; i <= bottom; i++) { //iterate from top index to bottom index (inclusive)\n                    AA.push(a[i][right]); //append the element at the current position to the AA list\n                }\n                right--; //decrement right index by 1\n                direction = 2; //change direction to 2 for the next iteration\n            }\n\n            if (direction === 2) { //if direction is 2 (from right to left)\n                for (let i = right; i >= left; i--) { //iterate from right index to left index (inclusive, with step -1)\n                    AA.push(a[bottom][i]); //append the element at the current position to the AA list\n                }\n                bottom--; //decrement bottom index by 1\n                direction = 3; //change direction to 3 for the next iteration\n            }\n\n            if (direction === 3) { //if direction is 3 (from bottom to top)\n                for (let i = bottom; i >= top; i--) { //iterate from bottom index to top index (inclusive, with step -1)\n                    AA.push(a[i][left]); //append the element at the current position to the AA list\n                }\n                left++; //increment left index by 1\n                direction = 0; //change direction to 0 for the next iteration\n            }\n            \n        }\n        return AA[k-1]; //return the kth element in the AA list (0-based indexing)\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n    {\n        //Complete this function\n        //Function to check if there is a pair with the given sum in the array.\n        public int findK(int[][] a, int n, int m, int k)\n        {\n            int top = 0;\n            int left = 0;\n            int right = m - 1;\n            int bottom = n - 1;\n            int dir = 0;\n            int count = 0;\n\n            List<int> AA = new List<int>();\n            while (top <= bottom && left <= right)\n            {\n                if (dir == 0)\n                {\n                    for (int i = left; i <= right; i++)\n                    {\n                        AA.Add(a[top][i]);\n                    }\n                    top++;\n                    dir = 1;\n\n                }\n                if (dir == 1)\n                {\n                    for (int i = top; i <= bottom; i++)\n                    {\n                        AA.Add(a[i][right]);\n                    }\n                    right--;\n                    dir = 2;\n\n\n                }\n                if (dir == 2)\n                {\n                    for (int i = right; i >= left; i--)\n                    {\n                        AA.Add(a[bottom][i]);\n                    }\n                    bottom--;\n                    dir = 3;\n                }\n                if (dir == 3)\n                {\n                    for (int i = bottom; i >= top; i--)\n                    {\n                        AA.Add(a[i][left]);\n                    }\n                    left++;\n                    dir = 0;\n                }\n\n            }\n\n            return AA[k - 1];\n        }\n    }",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}