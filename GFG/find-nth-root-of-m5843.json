{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705001,
            "title": "Find nth root of m",
            "titleSlug": "find-nth-root-of-m5843",
            "content": "<p><span style=\"font-size: 18px;\">Y</span><span style=\"font-size: 18px;\">ou are given 2 numbers&nbsp;</span><strong style=\"font-size: 18px;\">n and m,</strong><span style=\"font-size: 18px;\">&nbsp;the task is to find&nbsp;</span><strong style=\"font-size: 18px;\"><sup>n</sup>&radic;m</strong><span style=\"font-size: 18px;\">&nbsp;(n</span><sup>th</sup><span style=\"font-size: 18px;\">&nbsp;root of m).</span>&nbsp;<span style=\"font-size: 18px;\">If the root is not integer then returns -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 2, m = 9\n<strong>Output: </strong>3\n<strong>Explanation: </strong>3<sup>2</sup>&nbsp;= 9</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3, m = 9\n<strong>Output: </strong>-1\n<strong>Explanation: </strong>3rd root of 9 is not integer.<br /></span></pre>\n<pre><strong>Input: </strong>n = 1, m = 14\n<strong>Output: </strong>14</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 30</span><br /><span style=\"font-size: 18px;\">1 &lt;= m &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, 'n' and 'm', determine the n-th root of 'm'. If the n-th root of 'm' is an integer, return that integer. Otherwise, if the n-th root of 'm' is not an integer, return -1.",
                "constraints": [
                    "1 <= n <= 30",
                    "1 <= m <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 9",
                        "output": "3",
                        "explanation": "3 raised to the power of 2 equals 9. Therefore, 3 is the 2nd root (square root) of 9."
                    },
                    {
                        "input": "n = 3, m = 9",
                        "output": "-1",
                        "explanation": "The cube root of 9 is not an integer."
                    },
                    {
                        "input": "n = 1, m = 14",
                        "output": "14",
                        "explanation": "Any number raised to the power of 1 is itself, therefore the 1st root of 14 is 14."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use binary search to efficiently find the <span class=\"katex\"><span class=\"katex-mathml\">nn</span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord mathnormal\">n</span></span></span></span>-th root of <span class=\"katex\"><span class=\"katex-mathml\">mm</span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord mathnormal\">m</span></span></span></span> by iterating over possible values and validating with power multiplication, while handling overflow and early exits.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "directi",
            "accenture"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int nthRoot(int n, int m) {\n        long long int low = 1LL, high = m, mid;\n        long long int ans = -1;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            long long int x = mid;\n            for (int i = 1; i < n; i++) {\n                x *= mid;\n                if (x > m * 1LL)\n                    break;\n            }\n            if (x == m * 1LL) {\n                ans = mid;\n                break;\n            } else if (x > m)\n                high = mid - 1;\n            else\n                low = mid + 1;\n        }\n        return int(ans);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int nthRoot(int n, int m) {\n        long low = 1, high = m, ans = -1;\n        while (low <= high) {\n            long mid = (low + high) / 2;\n            long x = 1;\n\n            for (int i = 1; i <= n; i++) {\n                x *= mid;\n                if (x > m) break; // Break early if value exceeds m\n            }\n\n            if (x == m) {\n                ans = mid;\n                break;\n            } else if (x > m) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return (int)ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def nthRoot(self, n, m):\n        low, high = 1, m\n        ans = -1\n        while low <= high:\n            mid = (low + high) // 2\n            x = mid\n            for i in range(1, n):\n                x *= mid\n                if x > m:\n                    break\n            if x == m:\n                ans = mid\n                break\n            elif x > m:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    nthRoot(n, m) {\n        let low = 1, high = m, mid;\n        let ans = -1;\n        while (low <= high) {\n            mid = Math.floor((low + high) / 2);\n            let x = mid;\n            for (let i = 1; i < n; i++) {\n                x *= mid;\n                if (x > m * 1) break;\n            }\n            if (x == m * 1) {\n                ans = mid;\n                break;\n            } else if (x > m)\n                high = mid - 1;\n            else\n                low = mid + 1;\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}