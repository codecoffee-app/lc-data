{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714264,
            "title": "Find Number",
            "titleSlug": "find-number--170647",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer <strong>N</strong>, You need to find the <strong>Nth</strong> smallest number which only contains odd digits i.e. 1,3,5,7,9 means no even digits are allowed on that number (12 will not consider). For example, the starting numbers which only contain odd digits are 1,3,5,7,9,11,13,15,17,19,31,33,35&nbsp;and so on.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=3</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n5</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nFirst three numbers are 1, 3, <strong>5</strong>.\nHere <strong>5</strong> is the 3rd number, where contains\nonly odd digits.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=13</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n35</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nFirst 13 numbers are 1,3,5,7,9,\n11,13,15,17,19,31,33,35, here 35 \nis the answer.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>findNumber</strong>() which takes a single variable <strong>N</strong> and returns the smallest <strong>Nth</strong> number which only contains odd digits.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(logN)<br /><strong>Expected Space Complexity: </strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10^12</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, find the Nth smallest number that contains only odd digits (1, 3, 5, 7, 9).  Numbers with even digits are not allowed. For example, the sequence of such numbers starts as: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 31, 33, 35, and so on.",
                "constraints": [
                    "1 <= N <= 10^12"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "5",
                        "explanation": "The first three numbers containing only odd digits are 1, 3, and 5.  Therefore, the 3rd number is 5."
                    },
                    {
                        "input": "13",
                        "output": "35",
                        "explanation": "The first 13 numbers containing only odd digits are 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 31, 33, and 35.  Therefore, the 13th number is 35."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Note down few starting numbers and try to find out a pattern.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n//Function to find the number based on given pattern.\n\nclass Solution{\npublic:\n    long long findNumber(long long N){\n        char a[5]={'1','3','5','7','9'}; //possible digits in the pattern\n\t\tstring s=\"\"; //initialize an empty string to store the final number\n\t\tlong long pre=1,mul=5,times=2; //initialize variables for calculation\n\t\t\n\t\t//loop until N becomes 0\n\t\twhile(N>0){\n\t\t\tlong long temp=(N % mul)-1; //calculate the temporary value\n\t\t\tlong long ind=(temp+mul)%mul; //calculate the index\n\t\t\tint index=ind/pre; //find the index in the array of possible digits\n\t\t\ts=a[index]+s; //append the digit to the final number\n\t\t\tN-=mul; //subtract the temporary value from N\n\t\t\tmul*=5; //multiply mul by 5\n\t\t\tpre*=5; //multiply pre by 5\n\t\t}\n\t\t\n\t\treturn stoll(s); //convert the final string to a long long and return\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\nclass Solution\r\n{\r\n    public long findNumber(long N)\r\n    {\r\n        int a[]={1,3,5,7,9};\r\n\t\tString s=\"\";\r\n\t\tlong pre=1;\r\n\t\tlong mul=5;\r\n\t\tint times=2;\r\n\t\twhile(N>0){\r\n\t\t\tlong temp=(N % mul)-1;\r\n\t\t\tlong ind=(long)((temp+mul)%mul);\r\n\t\t\tint index=(int)(ind/pre);\r\n\t\t\ts=a[index]+s;\r\n\t\t\tN-=mul;\r\n\t\t\tmul=(long)Math.pow(5,times++);\r\n\t\t\tpre*=5;\r\n\t\t}\r\n\t\treturn Long.parseLong(s);\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to find the number corresponding to given index.\n    def findNumber(self, N : int) -> int:\n        \n        #List of digits to choose from.\n        a=[1,3,5,7,9]\n        \n        #String to store the final number.\n        s=\"\"\n        \n        #Variables to keep track of multiplication and division factors.\n        pre=1\n        mul=5\n        times=2\n        \n        #Loop until N is greater than 0.\n        while N>0:\n            \n            #Calculating index of the digit to be chosen.\n            temp=(N%mul)-1\n            ind=(temp+mul)%mul\n            index=ind//pre\n            \n            #Appending the chosen digit to the string.\n            s=str(a[index])+s\n            \n            #Updating N, multiplication factor, and division factor.\n            N-=mul\n            mul=mul*5\n            times+=1\n            pre*=5\n        \n        #Returning the final number as integer.\n        return int(s)",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    findNumber(N) {\n        //List of digits to choose from.\n        let a=[1,3,5,7,9];\n        \n        //String to store the final number.\n        let s=\"\";\n        \n        //Variables to keep track of multiplication and division factors.\n        let pre=1;\n        let mul=5;\n        let times=2;\n        \n        //Loop until N is greater than 0.\n        while (N>0) {\n            \n            //Calculating index of the digit to be chosen.\n            let temp=(N%mul)-1;\n            let ind=(temp+mul)%mul;\n            let index=Math.floor(ind/pre);\n            \n            //Appending the chosen digit to the string.\n            s=a[index]+s;\n            \n            //Updating N, multiplication factor, and division factor.\n            N-=mul;\n            mul=mul*5;\n            times+=1;\n            pre*=5;\n        }\n        \n        //Returning the final number as integer.\n        return parseInt(s);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the number of divisor of N.\n    public long findNumber(long N)\n    {\n        char[] a = {'1', '3', '5', '7', '9'}; //possible digits in the pattern\n        string s = \"\"; //initialize an empty string to store the final number\n        long pre = 1, mul = 5, times = 2; //initialize variables for calculation\n        \n        //loop until N becomes 0\n        while(N > 0){\n            long temp = (N % mul) - 1; //calculate the temporary value\n            long ind = (temp + mul) % mul; //calculate the index\n            int index = (int)(ind / pre); //find the index in the array of possible digits\n            s = a[index] + s; //append the digit to the final number\n            N -= mul; //subtract the temporary value from N\n            mul *= 5; //multiply mul by 5\n            pre *= 5; //multiply pre by 5\n        }\n        \n        return long.Parse(s); //convert the final string to a long long and return\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}