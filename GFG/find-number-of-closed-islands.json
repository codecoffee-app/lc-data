{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707442,
            "title": "Find number of closed islands",
            "titleSlug": "find-number-of-closed-islands",
            "content": "<p><span style=\"font-size: 18px;\">Given a <a href=\"https://www.geeksforgeeks.org/program-to-check-if-a-matrix-is-binary-matrix-or-not/\">binary matrix</a> <strong>mat[][]</strong> of dimensions <strong>NxM</strong> such that 1 denotes land and <strong>0</strong> denotes water. Find the number of closed islands in the given matrix.<br />An island is a 4-directional(up,right,down and left) connected part of 1's.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> A closed island is a group of <strong>1s</strong> surrounded by only <strong>0s</strong> on all the boundaries <strong>(except diagonals)</strong>. In simple words, a closed island is an island whose none of the <strong>1s</strong> lie on the edges of the matrix.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">N = 5, M = 8\nmat[][] =</span> <span style=\"font-size: 18px;\">{{0, 0, 0, 0, 0, 0, 0, 1},&nbsp;\n\\t     {0, 1, 1, 1, 1, 0, 0, 1},&nbsp;\n\\t     {0, 1, 0, 1, 0, 0, 0, 1},&nbsp;\n\\t     {0, 1, 1, 1, 1, 0, 1, 0},&nbsp;\n\\t     {1, 0, 0, 0, 0, 1, 0, 1}}</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n2\n<strong>Explanation</strong>:\n</span><span style=\"font-size: 18px;\">mat[][] =&nbsp;{{0, 0, 0, 0, 0, 0, 0, 1},&nbsp;\n\\t     {0, <strong>1, 1, 1, 1, </strong>0, 0, 1},&nbsp;\n\\t     {0, <strong>1</strong>, 0, <strong>1</strong>, 0, 0, 0, 1},&nbsp;\n\\t     {0, <strong>1, 1, 1, 1, </strong>0, <strong>1</strong>, 0},&nbsp;\n\\t     {1, 0, 0, 0, 0, 1, 0, 1}}&nbsp;\nThere are 2 closed islands. The islands in dark are closed because they are completely surrounded by 0s (water). There are two more islands in the last column of the matrix, but they are not completely surrounded by 0s. Hence they are not closed islands. </span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">N = 3, M = 3\nmat[][] = {{1, 0, 0},\n\\t     {0, 1, 0},\n\\t     {0, 0, 1}}</span>\n<span style=\"font-size: 18px;\"><strong>Output: <br /></strong></span><span style=\"font-size: 18px;\">1<strong><br />Explanation:<br /></strong>mat[][] = {{1, 0, 0},<br />\\t    {0, <strong>1</strong>, 0},<br />\\t    {0, 0, 1}}<br />There is just a one closed island.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your task:</strong></span><br /><span style=\"font-size: 18px;\">You dont need to read input or print anything. Your task is to complete the function <strong>closedIslands()</strong>&nbsp;which takes two integers N and M, and a 2D binary matrix mat as input parameters and returns the number of closed islands.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(N*M)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N*M)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N,M &le; 500<br /><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary matrix `mat` of dimensions N x M, where 1 represents land and 0 represents water, find the number of closed islands in the matrix. An island is a group of 1's connected 4-directionally (up, right, down, and left). A closed island is an island completely surrounded by 0's or the boundaries of the matrix. In other words, none of the 1's in a closed island should lie on the edges of the matrix.",
                "constraints": [
                    "1 <= N, M <= 500"
                ],
                "testcases": [
                    {
                        "input": "N = 5, M = 8\nmat = {{0, 0, 0, 0, 0, 0, 0, 1},\n       {0, 1, 1, 1, 1, 0, 0, 1},\n       {0, 1, 0, 1, 0, 0, 0, 1},\n       {0, 1, 1, 1, 1, 0, 1, 0},\n       {1, 0, 0, 0, 0, 1, 0, 1}}",
                        "output": "2",
                        "explanation": "The matrix contains two closed islands. These islands are completely surrounded by 0s and do not touch the edges of the matrix.  The islands in the last column are not closed because they are not completely surrounded by water."
                    },
                    {
                        "input": "N = 3, M = 3\nmat = {{1, 0, 0},\n       {0, 1, 0},\n       {0, 0, 1}}",
                        "output": "1",
                        "explanation": "The matrix contains one closed island consisting of the single 1 in the center of the matrix."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Try to think about using DFS.</span></p>",
            "<p><span style=\"font-size: 18px;\">The idea is to use <strong>DFS Traversal</strong> to count the number of islands surrounded by water. But we have to keep track of the island at the corner of the given matrix as they will not be counted in the resultant island.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "union-find",
                "slug": "union-find"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n    public:\r\n    // DFS Traversal to find the count of\r\n    // island surrounded by water\r\n    void dfs(vector<vector<int> >& matrix,\r\n             vector<vector<bool> >& visited, int x, int y,\r\n             int n, int m, bool &hasCornerCell)\r\n    {\r\n        // If the land is already visited\r\n        // or there is no land or the\r\n        // coordinates gone out of matrix\r\n        // break function as there\r\n        // will be no islands\r\n        if (x < 0 || y < 0 || x >= n || y >= m\r\n            || visited[x][y] == true || matrix[x][y] == 0)\r\n            return;\r\n     \r\n          // Check for the corner cell\r\n        if(x == 0 || y == 0 || x == n-1 || y == m-1)\r\n        {\r\n          if(matrix[x][y] == 1)\r\n            hasCornerCell = true;\r\n        }\r\n       \r\n        // Mark land as visited\r\n        visited[x][y] = true;\r\n     \r\n        // Traverse to all adjacent elements\r\n        dfs(matrix, visited, x + 1, y, n, m, hasCornerCell);\r\n        dfs(matrix, visited, x, y + 1, n, m, hasCornerCell);\r\n        dfs(matrix, visited, x - 1, y, n, m, hasCornerCell);\r\n        dfs(matrix, visited, x, y - 1, n, m, hasCornerCell);\r\n    }\r\n    \r\n    int closedIslands(vector<vector<int>>& matrix, int n, int m) {\r\n        // Create boolean 2D visited matrix\r\n        // to keep track of visited cell\r\n     \r\n        // Initially all elements are\r\n        // unvisited.\r\n        vector<vector<bool>> visited(n,vector<bool>(m, false));\r\n     \r\n        // Store the count of islands\r\n        int result = 0; \r\n       \r\n        // Call DFS on the cells which\r\n        // are not on corners with value '1'\r\n        for (int i = 0; i < n; ++i)\r\n        {\r\n            for (int j = 0; j < m; ++j)\r\n            {\r\n     \r\n                if ((i != 0 && j != 0 && i != n - 1 && j != m - 1)\r\n                    and matrix[i][j] == 1\r\n                    and visited[i][j] == false)\r\n                {\r\n                   \r\n                    // Determine if the island is closed\r\n                      bool hasCornerCell = false;\r\n                       \r\n                    /* hasCornerCell will be\r\n                     updated to true while DFS traversal\r\n                    if there is a cell with value\r\n                     '1' on the corner */\r\n                    dfs(matrix, visited, i, j, n,\r\n                                  m, hasCornerCell);\r\n                     \r\n                    /* If the island is closed*/\r\n                      if(!hasCornerCell)\r\n                      result = result + 1;\r\n                }\r\n            }\r\n        }\r\n     \r\n        // Return the final count\r\n        return result;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    // DFS Traversal to find the count of\r\n    // island surrounded by water\r\n    static void dfs(int[][] matrix, boolean[][] visited,\r\n                    int x, int y, int n, int m,\r\n                    boolean[] hasCornerCell)\r\n    {\r\n         \r\n        // If the land is already visited\r\n        // or there is no land or the\r\n        // coordinates gone out of matrix\r\n        // break function as there\r\n        // will be no islands\r\n        if (x < 0 || y < 0 || x >= n || y >= m ||\r\n            visited[x][y] == true || matrix[x][y] == 0)\r\n            return;\r\n     \r\n        if (x == 0 || y == 0 ||\r\n            x == n - 1 || y == m - 1)\r\n        {\r\n            if (matrix[x][y] == 1)\r\n                hasCornerCell[0] = true;\r\n        }\r\n     \r\n        // Mark land as visited\r\n        visited[x][y] = true;\r\n     \r\n        // Traverse to all adjacent elements\r\n        dfs(matrix, visited, x + 1, y, n, m,\r\n            hasCornerCell);\r\n        dfs(matrix, visited, x, y + 1, n, m,\r\n            hasCornerCell);\r\n        dfs(matrix, visited, x - 1, y, n, m,\r\n            hasCornerCell);\r\n        dfs(matrix, visited, x, y - 1, n, m,\r\n            hasCornerCell);\r\n    }\r\n    public int closedIslands(int[][] matrix, int n, int m)\r\n    {\r\n        // Create boolean 2D visited matrix\r\n        // to keep track of visited cell\r\n     \r\n        // Initially all elements are\r\n        // unvisited.\r\n        boolean[][] visited = new boolean[n][m];\r\n        int result = 0;\r\n         \r\n        // Mark visited all lands\r\n        // that are reachable from edge\r\n        for(int i = 0; i < n; ++i)\r\n        {\r\n            for(int j = 0; j < m; ++j)\r\n            {\r\n                if ((i != 0 && j != 0 &&\r\n                     i != n - 1 && j != m - 1) &&\r\n                     matrix[i][j] == 1 &&\r\n                     visited[i][j] == false)\r\n                {\r\n     \r\n                    // Determine if the island is closed\r\n                    boolean[] hasCornerCell = new boolean[1];\r\n                    hasCornerCell[0] = false;\r\n     \r\n                    // hasCornerCell will be updated to\r\n                    // true while DFS traversal if there\r\n                    // is a cell with value '1' on the corner\r\n                    dfs(matrix, visited, i, j, n, m,\r\n                        hasCornerCell);\r\n     \r\n                    // If the island is closed\r\n                    if (!hasCornerCell[0])\r\n                        result = result + 1;\r\n                }\r\n            }\r\n        }\r\n     \r\n        // Return the final count\r\n        return result;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    # DFS Traversal to find the count of\r\n    # island surrounded by water\r\n    def dfs(self, matrix, visited, x, y, n, m, hasCornerCell):\r\n    \r\n        # If the land is already visited\r\n        # or there is no land or the\r\n        # coordinates gone out of matrix\r\n        # break function as there\r\n        # will be no islands\r\n        if (x < 0 or y < 0 or x >= n or y >= m or visited[x][y] == True or matrix[x][y] == 0):\r\n            return\r\n        \r\n        if (x == 0 or y == 0 or x == n - 1 or y == m - 1):\r\n            if (matrix[x][y] == 1):\r\n                hasCornerCell[0] = True\r\n        \r\n        # Mark land as visited\r\n        visited[x][y] = True\r\n        \r\n        # Traverse to all adjacent elements\r\n        self.dfs(matrix, visited, x + 1, y, n, m, hasCornerCell)\r\n        self.dfs(matrix, visited, x, y + 1, n, m, hasCornerCell)\r\n        self.dfs(matrix, visited, x - 1, y, n, m, hasCornerCell)\r\n        self.dfs(matrix, visited, x, y - 1, n, m, hasCornerCell)\r\n    \r\n    def closedIslands(self, matrix, n, m):\r\n        # Create boolean 2D visited matrix\r\n        # to keep track of visited cell\r\n        \r\n        # Initially all elements are\r\n        # unvisited.\r\n        visited = [[False for i in range(m)] for j in range(n)]\r\n        result = 0\r\n        \r\n        # Mark visited all lands\r\n        # that are reachable from edge\r\n        for i in range(n):\r\n            for j in range(m):\r\n                if ((i != 0 and j != 0 and i != n - 1 and j != m - 1) and matrix[i][j] == 1 and visited[i][j] == False):\r\n                \r\n                    # Determine if the island is closed\r\n                    hasCornerCell = [False]\r\n                    \r\n                    # hasCornerCell will be updated to\r\n                    # true while DFS traversal if there\r\n                    # is a cell with value '1' on the corner\r\n                    self.dfs(matrix, visited, i, j, n, m, hasCornerCell)\r\n                    \r\n                    # If the island is closed\r\n                    if (not hasCornerCell[0]):\r\n                        result = result + 1\r\n        \r\n        # Return the final count\r\n        return result",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[][]} matrix\n * @param {number} N\n * @param {number} M\n * @returns {number}\n*/\n\nclass Solution {\n    // DFS Traversal to find the count of\n    // island surrounded by water\n    dfs(matrix, visited, x, y, n, m, hasCornerCell) {\n\n        // If the land is already visited\n        // or there is no land or the\n        // coordinates gone out of matrix\n        // break function as there\n        // will be no islands\n        if (x < 0 || y < 0 || x >= n || y >= m || visited[x][y] == true || matrix[x][y] == 0) {\n            return;\n        }\n\n        if (x === 0 || y === 0 || x === n - 1 || y === m - 1) {\n            if (matrix[x][y] === 1) {\n                hasCornerCell[0] = true;\n            }\n        }\n\n        // Mark land as visited\n        visited[x][y] = true;\n\n        // Traverse to all adjacent elements\n        this.dfs(matrix, visited, x + 1, y, n, m, hasCornerCell);\n        this.dfs(matrix, visited, x, y + 1, n, m, hasCornerCell);\n        this.dfs(matrix, visited, x - 1, y, n, m, hasCornerCell);\n        this.dfs(matrix, visited, x, y - 1, n, m, hasCornerCell);\n    }\n\n    closedIslands(matrix, N, M) {\n        // Create boolean 2D visited matrix\n        // to keep track of visited cell\n\n        // Initially all elements are\n        // unvisited.\n        let visited = Array.from(Array(N), () => new Array(M).fill(false));\n        let result = 0;\n\n        // Mark visited all lands\n        // that are reachable from edge\n        for (let i = 0; i < N; i++) {\n            for (let j = 0; j < M; j++) {\n                if (i !== 0 && j !== 0 && i !== N - 1 && j !== M - 1 && matrix[i][j] === 1 && visited[i][j] === false) {\n\n                    // Determine if the island is closed\n                    let hasCornerCell = [false];\n\n                    // hasCornerCell will be updated to\n                    // true while DFS traversal if there\n                    // is a cell with value '1' on the corner\n                    this.dfs(matrix, visited, i, j, N, M, hasCornerCell);\n\n                    // If the island is closed\n                    if (!hasCornerCell[0]) {\n                        result = result + 1;\n                    }\n                }\n            }\n        }\n\n        // Return the final count\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}