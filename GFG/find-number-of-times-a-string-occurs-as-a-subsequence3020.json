{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704155,
            "title": "String Subsequence",
            "titleSlug": "find-number-of-times-a-string-occurs-as-a-subsequence3020",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings, <strong>s1</strong> and <strong>s2</strong>, count the number of subsequences of string <strong>s1</strong> equal to string <strong>s2</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">Return the total count modulo <strong>1e9+7.</strong></span></span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s1 = geeksforgeeks, s2 = gks\n<strong>Output: </strong>4\n<strong>Explaination: </strong>We can pick characters from s1 as a subsequence from indices {0,3,4}, {0,3,12}, {0,11,12} and {8,11,12}.So total 4 subsequences of s1 that are equal to s2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> </span><span style=\"font-size: 18px;\">s1 = problemoftheday, s2 = geek<br /><strong>Output: </strong>0<br /><strong>Explaination: </strong>No subsequence of string s1 is equal to string s2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>countWays()</strong> which takes the string s1 and s2 as input parameters and returns the number of subsequences of s1 equal to s2.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*m)&nbsp; [n and m are lengths of the strings s1 and s2]<br /><strong>Expected Auxiliary Space:</strong> O(n*m)&nbsp; &nbsp; &nbsp;</span><span style=\"font-size: 18px;\">[n and m are lengths of the strings s1 and s2]</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n, m &le; 500&nbsp; </span><span style=\"font-size: 18px;\">[n and m are lengths of the strings s1 and s2]</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, determine the number of subsequences in `s1` that are equal to `s2`. Return the total count modulo 10^9 + 7.",
                "constraints": [
                    "1 <= n, m <= 500, where n is the length of s1 and m is the length of s2."
                ],
                "testcases": [
                    {
                        "input": "s1 = geeksforgeeks, s2 = gks",
                        "output": "4",
                        "explanation": "The subsequences of 'geeksforgeeks' equal to 'gks' are formed using indices: {0,3,4}, {0,3,12}, {0,11,12}, and {8,11,12}. Therefore, the count is 4."
                    },
                    {
                        "input": "s1 = problemoftheday, s2 = geek",
                        "output": "0",
                        "explanation": "There are no subsequences of 'problemoftheday' that are equal to 'geek'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Calculate the number of subsequences starting from each index of string s1 that are equal to s2.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int countWays(string s1, string s2) {\n        int n = s1.length(), m = s2.length();\n\n        // create a table to store result for sub-problems\n        int dp[n + 1][m + 1] = {{0}};\n\n        for (int i = 0; i <= m; i++)\n            dp[0][i] = 0;\n        for (int i = 0; i <= n; i++)\n            dp[i][0] = 1;\n\n        int mod = 1e9 + 7;\n        // fill the table in bottom-up manner\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                // if last characters are same, we have two\n                // options -\n                // 1. consider last characters of both strings\n                //    in solution\n                // 2. ignore last character of first string\n                if (s1[i - 1] == s2[j - 1]) {\n                    dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % mod;\n                }\n                // If last character are different, ignore\n                // last character of first string\n                else {\n                    dp[i][j] = dp[i - 1][j] % mod;\n                }\n            }\n        }\n        return dp[n][m] % mod;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int countWays(String s1, String s2) {\n        int n = s1.length(), m = s2.length();\n\n        // create a table to store result for sub-problems\n        int[][] dp = new int[n + 1][m + 1];\n\n        for (int i = 0; i <= m; i++) dp[0][i] = 0;\n        for (int i = 0; i <= n; i++) dp[i][0] = 1;\n\n        int mod = 1000000007;\n        // fill the table in bottom-up manner\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                // if last characters are same, we have two\n                // options -\n                // 1. consider last characters of both strings\n                //    in solution\n                // 2. ignore last character of first string\n                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                    dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % mod;\n                }\n                // If last characters are different, ignore\n                // last character of first string\n                else {\n                    dp[i][j] = dp[i - 1][j] % mod;\n                }\n            }\n        }\n        return dp[n][m] % mod;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def countWays(self, s1: str, s2: str) -> int:\n        n = len(s1)\n        m = len(s2)\n\n        # Create a table to store results of sub-problems\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n        for i in range(m + 1):\n            dp[0][i] = 0\n        for i in range(n + 1):\n            dp[i][0] = 1\n\n        mod = 10**9 + 7\n\n        # Fill the table in a bottom-up manner\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                # If last characters are the same, we have two options:\n                # 1. Consider last characters of both strings in the solution\n                # 2. Ignore the last character of the first string\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % mod\n                else:\n                    # If last characters are different, ignore the last character of the first string\n                    dp[i][j] = dp[i - 1][j] % mod\n\n        return dp[n][m] % mod\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}