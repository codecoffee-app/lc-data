{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705532,
            "title": "Find one extra character",
            "titleSlug": "find-one-extra-character",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings <strong>s1 </strong>and <strong>s2 </strong>which are of lengths <strong>n</strong> and <strong>n+1</strong>. The second string contains all the character of the first string, but there is <strong>one extra</strong> character. Your task to find the extra character in the second string and return it.</span><span style=\"font-size: 18px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s1 = </span><span style=\"font-size: 18px;\">abcd</span><span style=\"font-size: 18px;\">, </span><span style=\"font-size: 18px;\">s2 = badce</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>e</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s1 = efg, s2 = gtfe\n<strong>Output: </strong>t</span></pre>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, where `s1` has length `n` and `s2` has length `n+1`. `s2` contains all the characters of `s1` plus one additional character.  Find and return the extra character present in `s2`.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "s1 = abcd, s2 = badce",
                        "output": "e",
                        "explanation": null
                    },
                    {
                        "input": "s1 = efg, s2 = gtfe",
                        "output": "t",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use sorting and find mismatched character while traversing</p>",
            "<p>Use a count array to count elements for both the strings and then find out the odd character</p>"
        ],
        "relatedTopics": [
            {
                "name": "Java-Strings",
                "slug": "java-strings"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nchar extraChar(string s1, string s2) {\n    int res = 0;\n    int n = s1.length();\n\n    for (int i = 0; i < n; i++) {\n        res = res ^ s1[i] ^ s2[i];\n    }\n\n    res = res ^ s2[n];\n\n    return (char)res;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\npublic static char extraChar(String s1, String s2){\n\n    int res = 0;\n\n    int n = s1.length();\n\n    for(int i = 0; i < n; i++)\n    {\n        res = res ^ s1.charAt(i) ^ s2.charAt(i);\n    }\n\n    res = res ^ s2.charAt(n);\n\n    return (char)res;\n}",
                "lang_text": "java"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    extraChar(s1, s2) {\n        let sum = 0;\n        let n = s1.length;\n        let m = s2.length;\n        for(let i=0; i<m; i++) {\n            sum += s2.charCodeAt(i);\n        }\n        for(let i=0; i<n; i++) {\n            sum -= s1.charCodeAt(i);\n        }\n        \n        return String.fromCharCode(sum);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}