{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703725,
            "title": "Minimum Operations",
            "titleSlug": "find-optimum-operation4504",
            "content": "<p><span style=\"font-size: 18px;\">Given a number <strong>n</strong>. Find the minimum number of operations required to reach <strong>n</strong> starting from <strong>0</strong>. You have <strong>two </strong>operations available:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">Double the number </span></li>\n<li><span style=\"font-size: 18px;\">Add one to the number</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 8\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: 0 + 1 = 1 <strong>--&gt;</strong> 1 + 1 = 2 <strong>--&gt;</strong> 2 * 2 = 4 <strong>--&gt;</strong> 4 * 2 = 8.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 7\n<strong>Output:</strong> 5\n<strong>Explanation</strong>: 0 + 1 = 1 <strong>--&gt;</strong> 1 + 1 = 2 <strong>--&gt;</strong> 1 + 2 = 3 <strong>--&gt;</strong> 3 * 2 = 6 <strong>--&gt;</strong> 6 + 1 = 7.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, determine the minimum number of operations required to transform the number 0 into `n`. The allowed operations are: doubling the current number and incrementing the current number by one.",
                "constraints": [
                    "1 <= n <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "8",
                        "output": "4",
                        "explanation": "One optimal sequence of operations is: add 1 to 0 to get 1, add 1 to 1 to get 2, double 2 to get 4, and double 4 to get 8. This requires 4 operations."
                    },
                    {
                        "input": "7",
                        "output": "5",
                        "explanation": "One optimal sequence of operations is: add 1 to 0 to get 1, add 1 to 1 to get 2, add 1 to 2 to get 3, double 3 to get 6, and add 1 to 6 to get 7. This requires 5 operations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Can you do it without DP? Just&nbsp;use&nbsp;a loop.</span></p>",
            "<p>Instead of going from 0 to N, start with N and move towards 0.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minOperation(int n) {\n        int count = 0;\n        while (n != 0) {\n            // if n is even then it will be good to\n            // reach n from n/2 by multiplying it by 2.\n            if (n % 2 == 0)\n                n /= 2;\n            // if n is odd then we can reach n from n-- only.\n            else\n                n--;\n\n            count++;\n        }\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    public int minOperation(int n)\n    {\n        int count = 0;\n        while(n!=0)\n            {\n                // if n is even then it will be good to\n                // reach n from n/2 by multiplying it by 2.\n                if(n%2==0)\n                    n/=2;\n                // if n is odd then we can reach n from n-- only. \n                else\n                    n--;\n                \n                count++;     \n            }\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\nclass Solution:\n    #Function to find minimum number of operations required.\n    def minOperation(self, n):\n        #initialize count to keep track of operations.\n        c = 0\n        #loop until n is not zero.\n        while n != 0:\n            #if n is even, divide it by 2.\n            if n % 2 == 0:\n                n = n // 2\n            #if n is odd, subtract 1 from it.\n            else:\n                n = n - 1\n            #increment count.\n            c = c + 1\n        \n        #return the count.\n        return c",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int minOperation(int n)\n    {\n        int count = 0;\n        while(n != 0)\n        {\n            // if n is even then it will be good to\n            // reach n from n/2 by multiplying it by 2.\n            if(n%2 == 0)\n                n /= 2;\n            // if n is odd then we can reach n from n-- only. \n            else\n                n--;\n                \n            count++;     \n        }\n        return count;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n\n    minOperation(n){ // Function to calculate the minimum number of operations required.\n        let cnt = 0; // Initialize a variable to keep track of the number of operations.\n        while(n > 0){ // Loop until the input number becomes 0.\n            if(n%2){ // Check if the input number is odd.\n                n--; // Decrement by 1 if the input number is odd.\n               \n            } else { // If the input number is even.\n                n/=2; // Divide the input number by 2.\n            }\n            cnt++; // Increment the count of operations.\n        }\n        return cnt; // Return the total count of operations.\n        \n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}