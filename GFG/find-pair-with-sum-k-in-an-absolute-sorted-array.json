{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876750,
            "title": "Find pair with sum target in an absolute sorted array",
            "titleSlug": "find-pair-with-sum-k-in-an-absolute-sorted-array",
            "content": "<p><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">Given an absolute sorted array <strong>arr[]</strong> and an integer <strong>target. </strong>You have to find a pair of elements in the given array that sum to </span><strong style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px;\">target</strong><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px;\">. An absolute sorted array is an array of numbers in which </span><strong style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px;\">|arr[i]| &lt;= |arr[j]</strong><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px;\">| whenever </span><strong style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px;\">i &lt; j</strong><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px;\">. You can return the pair in any order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;Inputs are given such that only one valid answer exists.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">arr[] = [-49, 75, 103, -147, 164, -197, -238, 314, 348, -422], target = 167</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>[-147, 314]<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">Pair with sum equal to 167 is (-147, 314).</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, -3, 4], target = 8<br /><strong>Output: </strong>[]<strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">No pair exists with sum equal to 8.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-8, 10, 12, -15, 24],</span><span style=\"font-size: 18px;\"> target = 22<br /></span><span style=\"font-size: 18px;\"><strong>Output: </strong>[12, 10]</span><span ><strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">Pair with sum equal to 22 is (12, 10).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>1 &lt;= arr.size() &lt;= 10<sup>5</sup><strong><br /></strong></span><span style=\"font-size: 18px;\">-10<sup>4</sup> &lt;= arr[i] </span><span style=\"font-size: 18px;\">&lt;= 10<sup>4</sup></span><span style=\"font-size: 18px;\"><br /></span><span style=\"font-size: 18px;\">-10<sup>4</sup> &lt;= K &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an absolute sorted array `arr[]` and an integer `target`, find a pair of elements in the array that sums to `target`. An absolute sorted array is defined as an array where the absolute value of elements is non-decreasing (i.e., |arr[i]| <= |arr[j]| whenever i < j). Return the pair in any order. It is guaranteed that only one valid answer exists.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "-10^4 <= arr[i] <= 10^4",
                    "-10^4 <= target <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [-49, 75, 103, -147, 164, -197, -238, 314, 348, -422], target = 167",
                        "output": "[-147, 314]",
                        "explanation": "The pair -147 and 314 sums up to the target value 167."
                    },
                    {
                        "input": "arr[] = [2, -3, 4], target = 8",
                        "output": "[]",
                        "explanation": "No pair of elements in the array sums to 8."
                    },
                    {
                        "input": "arr[] = [-8, 10, 12, -15, 24], target = 22",
                        "output": "[12, 10]",
                        "explanation": "The pair 12 and 10 sums up to the target value 22."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use two pointers to find the pair by checking sums from the positive and negative halves of the array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> findPositiveNegativePair(vector<int> &arr, int n, int target) {\n        int i = n - 1, j = n - 1;\n\n        // Find the last positive or zero number\n        while (i >= 0 && arr[i] < 0)\n            i--;\n\n        // Find the last negative number\n        while (j >= 0 && arr[j] >= 0)\n            j--;\n\n        while (i >= 0 && j >= 0) {\n            if (arr[i] + arr[j] == target) {\n                return {arr[i], arr[j]};\n            } else if (arr[i] + arr[j] > target) {\n                // Loop to find the next positive or zero number from last\n                do {\n                    i--;\n                } while (i >= 0 && arr[i] < 0);\n            } else {\n                // Loop to find the next negative number from last\n                do {\n                    j--;\n                } while (j >= 0 && arr[j] >= 0);\n            }\n        }\n        return {};\n    }\n\n    // also take comparator function as argument\n    vector<int> findPairsOfSameSign(vector<int> &arr, int n, int target,\n                                    function<bool(int, int)> comp) {\n        int i = 0, j = n - 1;\n\n        // Loop to find the first positive or negative\n        // number in the array according to the given\n        // comparison template function\n        while (i < n && comp(arr[i], 0))\n            i++;\n\n        // Loop to find the last positive or negative\n        // number in the array according to the given\n        // comparison template function\n        while (j >= 0 && comp(arr[j], 0))\n            j--;\n\n        while (i < j) {\n            if (arr[i] + arr[j] == target) {\n                return {arr[i], arr[j]};\n            } else if (comp(arr[i] + arr[j], target)) {\n                // Loop to find the next positive or negative number from first\n                do {\n                    i++;\n                } while (i < j && comp(arr[i], 0));\n            } else {\n                // Loop to find the next positive or negative number from last\n                do {\n                    j--;\n                } while (i < j && comp(arr[j], 0));\n            }\n        }\n        return {};\n    }\n\n    vector<int> findPair(vector<int> arr, int target) {\n        int n = arr.size();\n        vector<int> res;\n        if (n == 0)\n            return res;\n\n        res = findPositiveNegativePair(arr, n, target);\n        if (res.size() > 0)\n            return res;\n\n        if (target >= 0) {\n            res = findPairsOfSameSign(arr, n, target, less<int>());\n        } else {\n            res = findPairsOfSameSign(arr, n, target, greater_equal<int>());\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<Integer> findPair(int[] arr, int target) {\n        int n = arr.length;\n        List<Integer> res = new ArrayList<>();\n        if (n == 0) {\n            return res;\n        }\n\n        res = findPositiveNegativePair(arr, n, target);\n        if (!res.isEmpty()) {\n            return res;\n        }\n\n        if (target >= 0) {\n            res = findPairsOfSameSign(arr, n, target,\n                                      (a, b) -> Integer.compare(a, b) < 0 ? 1 : 0);\n        } else {\n            res = findPairsOfSameSign(arr, n, target,\n                                      (a, b) -> Integer.compare(a, b) >= 0 ? 1 : 0);\n        }\n\n        return res;\n    }\n\n    private List<Integer> findPositiveNegativePair(int[] arr, int n, int target) {\n        int i = n - 1, j = n - 1;\n\n        // Find the last positive or zero number\n        while (i >= 0 && arr[i] < 0) {\n            i--;\n        }\n\n        // Find the last negative number\n        while (j >= 0 && arr[j] >= 0) {\n            j--;\n        }\n\n        while (i >= 0 && j >= 0) {\n            if (arr[i] + arr[j] == target) {\n                return Arrays.asList(arr[i], arr[j]);\n            } else if (arr[i] + arr[j] > target) {\n                // Loop to find the next positive or zero number from last\n                do {\n                    i--;\n                } while (i >= 0 && arr[i] < 0);\n            } else {\n                // Loop to find the next negative number from last\n                do {\n                    j--;\n                } while (j >= 0 && arr[j] >= 0);\n            }\n        }\n        return new ArrayList<>();\n    }\n\n    private List<Integer> findPairsOfSameSign(int[] arr, int n, int target,\n                                              Comparator<Integer> comp) {\n        int i = 0, j = n - 1;\n\n        // Loop to find the first positive or negative number in the array according to\n        // the given comparison\n        while (i < n && comp.compare(arr[i], 0) != 0) {\n            i++;\n        }\n\n        // Loop to find the last positive or negative number in the array according to\n        // the given comparison\n        while (j >= 0 && comp.compare(arr[j], 0) != 0) {\n            j--;\n        }\n\n        while (i < j) {\n            if (arr[i] + arr[j] == target) {\n                return Arrays.asList(arr[i], arr[j]);\n            } else if (comp.compare(arr[i] + arr[j], target) != 0) {\n                // Loop to find the next positive or zero number from first\n                do {\n                    i++;\n                } while (i < j && comp.compare(arr[i], 0) != 0);\n            } else {\n                // Loop to find the next negative number from last\n                do {\n                    j--;\n                } while (i < j && comp.compare(arr[j], 0) != 0);\n            }\n        }\n        return new ArrayList<>();\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    # Complete the below function\n    def findPair(self, arr, target):\n        n = len(arr)\n        res = []\n\n        if n == 0:\n            return res\n\n        res = self.findPositiveNegativePair(arr, n, target)\n        if res:\n            return res\n\n        if target >= 0:\n            res = self.findPairsOfSameSign(arr, n, target, lambda a, b: a < b)\n        else:\n            res = self.findPairsOfSameSign(arr, n, target, lambda a, b: a >= b)\n\n        return res\n\n    def findPositiveNegativePair(self, arr, n, target):\n        i = n - 1\n        j = n - 1\n\n        # Find the last positive or zero number\n        while i >= 0 and arr[i] < 0:\n            i -= 1\n\n        # Find the last negative number\n        while j >= 0 and arr[j] >= 0:\n            j -= 1\n\n        while i >= 0 and j >= 0:\n            if arr[i] + arr[j] == target:\n                return [arr[i], arr[j]]\n            elif arr[i] + arr[j] > target:\n                # Find the next positive or zero number from last\n                i -= 1\n                while i >= 0 and arr[i] < 0:\n                    i -= 1\n            else:\n                # Find the next negative number from last\n                j -= 1\n                while j >= 0 and arr[j] >= 0:\n                    j -= 1\n\n        return []\n\n    def findPairsOfSameSign(self, arr, n, target, comp):\n        i = 0\n        j = n - 1\n\n        # Find the first positive or negative number\n        while i < n and comp(arr[i], 0):\n            i += 1\n\n        # Find the last positive or negative number\n        while j >= 0 and comp(arr[j], 0):\n            j -= 1\n\n        while i < j:\n            if arr[i] + arr[j] == target:\n                return [arr[i], arr[j]]\n            elif comp(arr[i] + arr[j], target):\n                # Find the next positive or zero number from first\n                i += 1\n                while i < j and comp(arr[i], 0):\n                    i += 1\n            else:\n                # Find the next negative number from last\n                j -= 1\n                while i < j and comp(arr[j], 0):\n                    j -= 1\n\n        return []\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} target\n * @return {number[]}\n */\nclass Solution {\n    findPair(arr, target) {\n        const n = arr.length;\n        let res = [];\n\n        if (n === 0) {\n            return res;\n        }\n\n        res = this.findPositiveNegativePair(arr, n, target);\n        if (res.length > 0) {\n            return res;\n        }\n\n        if (target >= 0) {\n            res = this.findPairsOfSameSign(arr, n, target, (a, b) => a < b);\n        } else {\n            res = this.findPairsOfSameSign(arr, n, target, (a, b) => a >= b);\n        }\n\n        return res;\n    }\n\n    findPositiveNegativePair(arr, n, target) {\n        let i = n - 1, j = n - 1;\n\n        // Find the last positive or zero number\n        while (i >= 0 && arr[i] < 0) {\n            i--;\n        }\n\n        // Find the last negative number\n        while (j >= 0 && arr[j] >= 0) {\n            j--;\n        }\n\n        while (i >= 0 && j >= 0) {\n            if (arr[i] + arr[j] === target) {\n                return [ arr[i], arr[j] ];\n            } else if (arr[i] + arr[j] > target) {\n                // Find the next positive or zero number from last\n                i--;\n                while (i >= 0 && arr[i] < 0) {\n                    i--;\n                }\n            } else {\n                // Find the next negative number from last\n                j--;\n                while (j >= 0 && arr[j] >= 0) {\n                    j--;\n                }\n            }\n        }\n        return [];\n    }\n\n    findPairsOfSameSign(arr, n, target, comp) {\n        let i = 0, j = n - 1;\n\n        // Find the first positive or negative number\n        while (i < n && comp(arr[i], 0)) {\n            i++;\n        }\n\n        // Find the last positive or negative number\n        while (j >= 0 && comp(arr[j], 0)) {\n            j--;\n        }\n\n        while (i < j) {\n            if (arr[i] + arr[j] === target) {\n                return [ arr[i], arr[j] ];\n            } else if (comp(arr[i] + arr[j], target)) {\n                // Find the next positive or zero number from first\n                i++;\n                while (i < j && comp(arr[i], 0)) {\n                    i++;\n                }\n            } else {\n                // Find the next negative number from last\n                j--;\n                while (i < j && comp(arr[j], 0)) {\n                    j--;\n                }\n            }\n        }\n        return [];\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}