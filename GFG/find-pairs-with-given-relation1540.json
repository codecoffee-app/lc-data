{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702810,
            "title": "Find pairs with given relation",
            "titleSlug": "find-pairs-with-given-relation1540",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of distinct integers, write a program to determine if there are two distinct pairs of elements (a, b) and (c, d) in the array such that the product of the first pair a * b is equal to the product of the second pair c * d. All four elements a, b, c, and d are distinct. If such pairs exist, return 1, otherwise, return -1.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 4, 7, 1, 2, 9, 8]\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: Product of 4 and 2 is 8 and also,the product of 1 and 8 is 8.  </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 6, 3, 9, 2, 10] \n<strong>Output:</strong> 1<br /></span><span style=\"font-size: 18px;\"><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: Product of 1 and 6 is 6 and also,the product of 2 and 3 is 6.</span></span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(n<sup>2</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />4 &le; arr.size() &le; 10<sup>3<br /></sup></span><span style=\"font-size: 18px;\">1 &le; arr[i] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of distinct integers, determine if there exist two distinct pairs of elements (a, b) and (c, d) within the array such that a * b equals c * d.  The elements a, b, c, and d must be distinct. Return 1 if such pairs exist; otherwise, return -1.",
                "constraints": [
                    "4 <= arr.size() <= 10^3",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[3, 4, 7, 1, 2, 9, 8]",
                        "output": "1",
                        "explanation": "The product of 4 and 2 is 8, which is equal to the product of 1 and 8.  Therefore, two distinct pairs with equal products exist."
                    },
                    {
                        "input": "[1, 6, 3, 9, 2, 10]",
                        "output": "1",
                        "explanation": "The product of 1 and 6 is 6, which is equal to the product of 2 and 3. Therefore, two distinct pairs with equal products exist."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a hash map to store the product of pairs and their indices, and check if a product already exists while ensuring all indices are distinct for each pair</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find if there are any pairs with the same product.\n    int findPairs(vector<int>& arr) {\n        int n = arr.size(); // Corrected: added semicolon\n        // Creating unordered_map to store products as keys and pair of indices as\n        // values.\n        unordered_map<int, pair<int, int>> mp;\n\n        // Looping through the array to find all possible pairs.\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                // Calculating the product of the pair.\n                int prod = arr[i] * arr[j];\n                // Checking if the product already exists in the map.\n                if (mp.find(prod) == mp.end()) {\n                    // If not, storing the pair of indices in the map.\n                    mp[prod] = make_pair(i, j);\n                } else {\n                    // If the product already exists in the map, returning 1 (found pair\n                    // with same product).\n                    return 1;\n                }\n            }\n        }\n\n        // If no pair with the same product is found, returning -1.\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nimport java.util.HashMap;\n\nclass Solution {\n    // Function to find if there are any pairs with the same product.\n    public static int findPairs(int arr[]) {\n        int n = arr.length; // Get the length of the array\n        // Creating HashMap to store products as keys and pair of indices as values.\n        HashMap<Integer, int[]> map =\n            new HashMap<>(); // Using int[] to store pairs of indices\n\n        // Looping through the array to find all possible pairs.\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                // Calculating the product of the pair.\n                int prod = arr[i] * arr[j];\n                // Checking if the product already exists in the map.\n                if (!map.containsKey(prod)) {\n                    // If not, storing the pair of indices in the map.\n                    map.put(prod, new int[] {i, j});\n                } else {\n                    // If the product already exists in the map, returning 1 (found pair\n                    // with same product).\n                    return 1;\n                }\n            }\n        }\n\n        // If no pair with the same product is found, returning -1.\n        return -1;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# User function Template for python3\n\n\nclass Solution:\n    # Function to find if there are any pairs with the same product.\n    def findPairs(self, arr):\n        n = len(arr)  # Get the length of the array\n        # Creating a dictionary to store products as keys and pairs of indices as values.\n        products = {}\n\n        # Looping through the array to find all possible pairs.\n        for i in range(n):\n            for j in range(i + 1, n):\n                # Calculating the product of the pair.\n                prod = arr[i] * arr[j]\n                # Checking if the product already exists in the dictionary.\n                if prod not in products:\n                    # If not, storing the pair of indices in the dictionary.\n                    products[prod] = (i, j)\n                else:\n                    # If the product already exists in the dictionary, returning 1 (found pair with the same product).\n                    return 1\n\n        # If no pair with the same product is found, returning -1.\n        return -1\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\nclass Solution {\n\n    // Function to find if there are any pairs with the same product.\n    findPairs(arr) {\n        const n = arr.length; // Get the length of the array\n        // Creating a map to store products as keys and pairs of indices as values.\n        const products = new Map();\n\n        // Looping through the array to find all possible pairs.\n        for (let i = 0; i < n; i++) {\n            for (let j = i + 1; j < n; j++) {\n                // Calculating the product of the pair.\n                const prod = arr[i] * arr[j];\n                // Checking if the product already exists in the map.\n                if (!products.has(prod)) {\n                    // If not, storing the pair of indices in the map.\n                    products.set(prod, [ i, j ]);\n                } else {\n                    // If the product already exists in the map, returning 1 (found pair\n                    // with the same product).\n                    return 1;\n                }\n            }\n        }\n\n        // If no pair with the same product is found, returning -1.\n        return -1;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}