{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710059,
            "title": "Find pairs with given sum in doubly linked list",
            "titleSlug": "find-pairs-with-given-sum-in-doubly-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Given a sorted doubly linked list of positive distinct elements, the task is to find pairs in a doubly-linked list whose sum is equal to given value <strong>target</strong>.</span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:  </strong></span>\n<span style=\"font-size: 18px;\">1 &lt;-&gt; 2 &lt;-&gt; 4 &lt;-&gt; 5 &lt;-&gt; 6 &lt;-&gt; 8 &lt;-&gt; 9</span>\n<span style=\"font-size: 18px;\">target = 7</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>(1, 6), (2,5)</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>We can see that there are two pairs </span>\n<span style=\"font-size: 18px;\">(1, 6) and (2,5) with sum 7.</span></pre>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong>\n<span style=\"font-size: 18px;\">1 &lt;-&gt; 5 &lt;-&gt; 6</span>\n<span style=\"font-size: 18px;\">target = 6</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">(1,5)\n<strong>Explanation: </strong>We can see that there is one pairs </span> <span style=\"font-size: 18px;\">(1, 5) with sum 6.\n</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>findPairsWithGivenSum()&nbsp;</strong>which takes head node of the doubly linked list and an integer target&nbsp;as input parameter and returns an array of pairs. If there is no such pair&nbsp;return&nbsp;empty array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br /><strong>Constraints:</strong><br />1 &lt;= N&nbsp;&lt;= 10<sup>5</sup><br />1 &lt;= target&nbsp;&lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted doubly linked list of distinct positive integers, find all pairs of nodes in the list whose values sum to a given target value.",
                "constraints": [
                    "1 <= N <= 10^5 (where N is the number of nodes in the linked list)",
                    "1 <= target <= 10^5",
                    "The elements in the linked list are distinct and positive."
                ],
                "testcases": [
                    {
                        "input": "Doubly linked list: 1 <-> 2 <-> 4 <-> 5 <-> 6 <-> 8 <-> 9, target = 7",
                        "output": "(1, 6), (2, 5)",
                        "explanation": "The pairs (1, 6) and (2, 5) sum to 7."
                    },
                    {
                        "input": "Doubly linked list: 1 <-> 5 <-> 6, target = 6",
                        "output": "(1, 5)",
                        "explanation": "The pair (1, 5) sums to 6."
                    },
                    {
                        "input": "Doubly linked list: 1 <-> 2 <-> 3, target = 10",
                        "output": "[]",
                        "explanation": "No pairs in the list sum to 10."
                    },
                    {
                        "input": "Doubly linked list: 2 <-> 4 <-> 6 <-> 8, target = 12",
                        "output": "(4, 8), (6, 6)",
                        "explanation": "The pairs (4, 8) sum to 12, However, the list contains distinct element so (6,6) is invalid.  (Correction: The correct pairs are (4, 8) )"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A simple solution would be to simply put the elements of the linked list in a list and apply Two Sum Approach.<br />\n<br />\nBut can you make use of the fact that the given linked list is a <strong>sorted&nbsp;Doubly Linked List?</strong></span></p>",
            "<p><span style=\"font-size:18px\">Similar to Two sum approach, consider two Node pointers <strong>ptr1 </strong>and <strong>ptr2</strong>, one pointing at the start and another at the end of the linked list.<br />\nNow, traverse through the list and find the sum of the current element pointing at&nbsp;<strong>ptr1&nbsp;</strong>and&nbsp;<strong>ptr2</strong>.</span></p>\n\n<ul>\n\t<li><span style=\"font-size:18px\">If it is equal to&nbsp;<strong>target:</strong></span>\n\n\t<ul>\n\t\t<li><span style=\"font-size:18px\">\u00e2\u20ac\u2039Insert the data in the resultant pair container</span></li>\n\t</ul>\n\t</li>\n\t<li><span style=\"font-size:18px\">If sum &gt; target:</span>\n\t<ul>\n\t\t<li><span style=\"font-size:18px\">Move&nbsp;<strong>ptr2</strong>&nbsp;to previous</span></li>\n\t</ul>\n\t</li>\n\t<li><span style=\"font-size:18px\">Else</span>\n\t<ul>\n\t\t<li><span style=\"font-size:18px\">Move&nbsp;<strong>ptr1&nbsp;</strong>to next.</span></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p><br />\n&nbsp;</p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n\nclass Solution\n{\npublic:\n    // Function to find pairs in the linked list with given sum\n    vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)\n    {\n        Node *ptr1 = head, *ptr2 = head;\n        // Moving ptr2 to the end of the linked list\n        while (ptr2->next)\n        {\n            ptr2 = ptr2->next;\n        }\n        vector<pair<int, int>> res;\n        // Checking for pairs until ptr1 and ptr2 meet or pass each other\n        while (ptr1 != ptr2 && ptr2->next != ptr1)\n        {\n            int sum = ptr1->data + ptr2->data;\n\n            // If sum equals target, add the pair to the results vector\n            if (sum == target)\n            {\n                res.push_back(make_pair(ptr1->data, ptr2->data));\n                ptr1 = ptr1->next;\n                ptr2 = ptr2->prev;\n            }\n            // If sum is less than target, move ptr1 to the next node\n            else if (sum < target)\n            {\n                ptr1 = ptr1->next;\n            }\n            // If sum is greater than target, move ptr2 to the previous node\n            else\n            {\n                ptr2 = ptr2->prev;\n            }\n        }\n        return res; // Returning the results vector\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static ArrayList<ArrayList<Integer>> findPairsWithGivenSum(int target, Node head) {\r\n        // create two pointers, ptr1 and ptr2, initialized to the head of the linked list\r\n        Node ptr1 = head, ptr2 = head;\r\n        // move ptr2 to the end of the linked list\r\n        while (ptr2.next!=null)\r\n        {\r\n            ptr2 = ptr2.next;\r\n        }\r\n        // create an ArrayList to store the pairs of integers that sum up to the target\r\n        ArrayList<ArrayList<Integer>> res=new ArrayList<>();\r\n        // loop until ptr1 and ptr2 meet or pass each other\r\n        while (ptr1 != ptr2 && ptr2.next != ptr1)\r\n        {\r\n            // calculate the sum of the current pair of integers\r\n            int sum = ptr1.data + ptr2.data;\r\n\r\n            // if the sum is equal to the target, add the pair to the result ArrayList\r\n            if (sum == target)\r\n            {\r\n                // create a new ArrayList to store the current pair\r\n                ArrayList<Integer> A=new ArrayList<>();\r\n                A.add(ptr1.data);\r\n                A.add(ptr2.data);\r\n                res.add(A);\r\n                // move ptr1 to the next node and ptr2 to the previous node\r\n                ptr1 = ptr1.next;\r\n                ptr2 = ptr2.prev;\r\n            }\r\n            // if the sum is less than the target, move ptr1 to the next node\r\n            else if (sum < target)\r\n            {\r\n                ptr1 = ptr1.next;\r\n            }\r\n            // if the sum is greater than the target, move ptr2 to the previous node\r\n            else\r\n            {\r\n                ptr2 = ptr2.prev;\r\n            }\r\n        }\r\n        // return the result ArrayList\r\n        return res;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import List, Optional\n\nclass Solution:\n    def findPairsWithGivenSum(self, target : int, head : Optional['Node']) ->List[List[int]]:\n        # initializing two iterators ptr1 and ptr2 at the head of the linked list\n        ptr1 = head\n        ptr2 = head\n\n        # moving ptr2 to the last element of the linked list\n        while (ptr2.next):\n            ptr2 = ptr2.next\n        \n        # initializing an empty list to store the pairs with the given sum\n        res = []\n        \n        # iterating until ptr1 and ptr2 meet or ptr2's previous node becomes ptr1\n        while (ptr1 != ptr2 and ptr2.next != ptr1):\n            \n            # calculating the sum of the current pair of nodes\n            sum = ptr1.data + ptr2.data\n\n            # if the sum is equal to the target value,\n            # add the pair of nodes to the result list and move ptr1 and ptr2\n            if (sum == target):\n                res.append([ptr1.data, ptr2.data])\n                ptr1 = ptr1.next\n                ptr2 = ptr2.prev\n            \n            # if the sum is less than the target value, move ptr1 to the next node\n            elif (sum < target):\n                ptr1 = ptr1.next\n            \n            # if the sum is greater than the target value, move ptr2 to the previous node\n            else:\n                ptr2 = ptr2.prev\n        \n        # return the list of pairs with the given sum\n        return res",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find pairs in the linked list with the given sum\n    findPairsWithGivenSum(head, target) {\n        let ptr1 = head;\n        let ptr2 = head;\n\n        // Moving ptr2 to the end of the linked list\n        while (ptr2.next) {\n            ptr2 = ptr2.next;\n        }\n\n        let res = [];\n\n        // Checking for pairs until ptr1 and ptr2 meet or pass each other\n        while (ptr1 !== ptr2 && ptr2.next !== ptr1) {\n            let sum = ptr1.data + ptr2.data;\n\n            // If sum equals target, add the pair to the results array\n            if (sum === target) {\n                res.push([ ptr1.data, ptr2.data ]);\n                ptr1 = ptr1.next;\n                ptr2 = ptr2.prev;\n            }\n            // If sum is less than target, move ptr1 to the next node\n            else if (sum < target) {\n                ptr1 = ptr1.next;\n            }\n            // If sum is greater than target, move ptr2 to the previous node\n            else {\n                ptr2 = ptr2.prev;\n            }\n        }\n        return res; // Returning the results array\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}