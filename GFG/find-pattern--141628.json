{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705372,
            "title": "Find Pattern",
            "titleSlug": "find-pattern--141628",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>,</span> <span style=\"font-size: 18px;\">and a pattern<strong> p</strong>. You need to find if p exists in s or not and return the <strong>starting index of</strong> p in s. If p does not exist in s then -1 will be returned.<br />Here p and s both are <strong>case-sensitive.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span> <span style=\"font-size: 18px;\">s = \"Hello\", p = \"llo\"\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: llo starts from the second index in Hello.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"World\", p = \"Doodle\"\n<strong>Output: </strong>-1\n<strong>Explanation</strong>: Both are different.</span></pre>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` and a pattern `p`, determine if `p` exists as a substring within `s`. If it does, return the starting index of `p` in `s`. The search is case-sensitive. If `p` is not found in `s`, return -1.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "s = \"Hello\", p = \"llo\"",
                        "output": "2",
                        "explanation": "The pattern \"llo\" is found in \"Hello\" starting at index 2."
                    },
                    {
                        "input": "s = \"World\", p = \"Doodle\"",
                        "output": "-1",
                        "explanation": "The pattern \"Doodle\" is not found in \"World\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\"><strong>Java:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\">s.indexOf(p)</span>\n<span style=\"font-size:18px\">\n</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Python:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\">s.find(p)</span></pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">CPP:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\">s.find(p)</span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "python-strings",
                "slug": "python-strings"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Java",
                "slug": "java"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nint findPattern(string s, string p) {\n    int found = s.find(p);\n    if (found != string::npos)\n        return found;\n    else\n        return -1;\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\npublic static int findPattern(String s, String p){\r\n    return s.indexOf(p);\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\ndef findPattern(s, p):\n    return s.find(p)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\nclass Solution {\r\n    findPattern(s, p) {\r\n        let n = s.length;\r\n        let m = p.length;\r\n        for(let i=0; i<=n-m; i++) {\r\n            if(s.substr(i, m) === p) return i;\r\n        }\r\n        \r\n        return -1;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}