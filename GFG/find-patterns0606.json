{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703543,
            "title": "Find patterns",
            "titleSlug": "find-patterns0606",
            "content": "<p><span style=\"font-size:18px\">Given two&nbsp;strings S and&nbsp;W. Find the number of times W appears as a subsequence of&nbsp;string S where every character of string S can be included in forming at most one subsequence.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1: </strong> </span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> </span>\r\n <span style=\"font-size:18px\">S = &quot;abcdrtbwerrcokokokd&quot; </span>\r\n <span style=\"font-size:18px\">W = &quot;bcd&quot; </span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> </span>\r\n <span style=\"font-size:18px\">2</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong> </span>\r\n<span style=\"font-size:18px\">The two subsequences of string W are</span>\r\n<span style=\"font-size:18px\">{ S<sub>1</sub></span><span style=\"font-size:18px\"> , S<sub>2</sub></span><span style=\"font-size:18px\"> , S<sub>3</sub></span><span style=\"font-size:18px\"> } and { S<sub>6</sub></span><sub> </sub><span style=\"font-size:18px\">, S<sub>11</sub></span><span style=\"font-size:18px\"> , S</span><sub>18</sub><span style=\"font-size:18px\"> }</span>\r\n<span style=\"font-size:18px\">(Assuming 0- based indexing).</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2: </span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> </span>\r\n<span style=\"font-size:18px\">S = &quot;ascfret&quot; </span>\r\n<span style=\"font-size:18px\">W = &quot;qwer&quot; </span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> </span>\r\n<span style=\"font-size:18px\">0</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">No valid subsequences are possible.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>numberOfSubsequences()</strong>&nbsp;which takes the string S and string W<strong>&nbsp;</strong>as input parameters&nbsp;and returns the number of subsequences of string W in string S.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N<sup>2</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=|S|&lt;=1000<br />\r\n1&lt;=|W|&lt;=|S|</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings S and W, find the number of times W appears as a subsequence of string S.  Each character of S can be included in forming at most one subsequence.",
                "constraints": [
                    "1 <= |S| <= 1000",
                    "1 <= |W| <= |S|"
                ],
                "testcases": [
                    {
                        "input": "S = \"abcdrtbwerrcokokokd\"\nW = \"bcd\"",
                        "output": "2",
                        "explanation": "The string \"bcd\" appears as a subsequence twice in \"abcdrtbwerrcokokokd\". One instance is at indices {1, 2, 3} (0-based indexing) and another is found at indices {6, 11, 18}."
                    },
                    {
                        "input": "S = \"ascfret\"\nW = \"qwer\"",
                        "output": "0",
                        "explanation": "The string \"qwer\" does not appear as a subsequence in \"ascfret\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try writing a brute-force solution.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\">Consider iterating every character in string S to find a subsequence W.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution{   \r\npublic:\r\n    int numberOfSubsequences(string S, string W){\r\n        \r\n        int ans=0;\r\n\r\n        while(1){  // Untill no such subsequence exist\r\n    \r\n            int i=0,j=0,flag=0;\r\n    \r\n            while(i<S.size()){\r\n    \r\n    \r\n                if(S[i]==W[j]){\r\n    \r\n                    ++j;\r\n                    S[i]='*';\r\n    \r\n                    if(j==W.size()){ \r\n    \r\n                        ++ans;\r\n                        flag=1;  //  A subsequence found\r\n                        break;\r\n    \r\n                    }\r\n                }\r\n\r\n                ++i;\r\n            }\r\n    \r\n            if(flag==0)  // No subsequence found in this iteration\r\n                break;\r\n        }\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def numberOfSubsequences(self,S,W):\r\n        \r\n        S=list(S)\r\n        W=list(W)\r\n    \r\n        ans=0\r\n    \r\n        while True:  #  Untill no such subsequence exist\r\n    \r\n            i=0\r\n            j=0\r\n            flag=0\r\n    \r\n            while i<len(S):\r\n    \r\n                if S[i]==W[j]:\r\n    \r\n                    j+=1\r\n                    S[i]='*'\r\n    \r\n                    if j==len(W):\r\n    \r\n                        ans+=1   # A subsequence found\r\n                        flag=1\r\n                        break\r\n    \r\n    \r\n                i+=1\r\n    \r\n            if flag==0:   # No subsequence found in this iteration\r\n                break\r\n    \r\n    \r\n        return ans\r\n            \r\n\r\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {string} S\r\n * @param {string} W\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution\r\n{\r\n    //Function to count the number of subsequences of S equal to W.\r\n    numberOfSubsequences(S, W)\r\n    {\r\n        S = S.split('');\r\n        W = W.split('');\r\n    \r\n        let ans = 0;\r\n        \r\n        while (true) {  //  Untill no such subsequence exist\r\n    \r\n            let i = 0;\r\n            let j = 0;\r\n            let flag = 0;\r\n    \r\n            while (i < S.length) {\r\n    \r\n                if (S[i] == W[j]) {\r\n    \r\n                    j++;\r\n                    S[i] = '*';\r\n    \r\n                    if (j == W.length) {\r\n    \r\n                        ans += 1;   // A subsequence found\r\n                        flag = 1;\r\n                        break;\r\n                    }\r\n                }\r\n    \r\n                i++;\r\n            }\r\n    \r\n            if (flag == 0) {   // No subsequence found in this iteration\r\n                break;\r\n            }\r\n        }\r\n    \r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\nclass Solution{\n    //Complete this function\n    public int numberOfSubsequences(string S, string W){\n        if(string.IsNullOrEmpty(W)) return 0; // Return 0 if W is null or empty\n        \n        int ans = 0;\n\n        while(true){  // Until no such subsequence exists\n            int i = 0, j = 0, flag = 0;\n    \n            while(i < S.Length){\n                if(S[i] == W[j]){\n                    j++;\n                    char[] charArray = S.ToCharArray(); // Convert string to character array\n                    charArray[i] = '*';  // Modify the character in the character array\n                    S = new string(charArray); // Convert the character array back to string\n    \n                    if(j == W.Length){\n                        ans++;\n                        flag = 1;  // A subsequence found\n                        break;\n                    }\n                }\n                i++;\n            }\n    \n            if(flag == 0)  // No subsequence found in this iteration\n                break;\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}