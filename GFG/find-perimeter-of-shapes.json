{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700411,
            "title": "Find perimeter of shapes",
            "titleSlug": "find-perimeter-of-shapes",
            "content": "<p><span style=\"font-size:20px\">Given a matrix mat[][] of n&nbsp;rows and m&nbsp;columns, consisting of 0&rsquo;s and 1&rsquo;s. The task is to complete the function <strong>findPerimeter</strong> which returns an integer denoting the&nbsp;perimeter of sub-figures consisting of only 1&rsquo;s in the matrix.<br />\n<br />\nFor example<br />\nPerimeter of single 1 is 4 as it can be covered from all 4 side. Perimeter of double 11 is 6.</span></p>\n\n<pre>\n<span style=\"font-size:20px\"><u>\\t </u>\\t\\t <u>   </u> <u>    </u>\n|  1  |\\t     |  1    1  |\n<u>\\t </u>\\t\\t <u>   </u> <u>    </u></span></pre>\n\n<p><br />\n<span style=\"font-size:20px\"><strong>Input:</strong><br />\nThe first line of input contains an integer T denoting the no of test cases. Then T test cases follow. The first line of each test case contains two space separated n and m denoting the size of the matrix mat[][] . Then in the next line&nbsp;are n*m&nbsp;space separated values of the matrix.<br />\n<br />\n<strong>Output:</strong><br />\nFor each test case in a new line print the perimeter of sub-figure consisting only 1&rsquo;s in the matrix.<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;=T&lt;=100<br />\n1&lt;=n, m&lt;=20<br />\n<br />\n<strong>Example(To be used for expected output):<br />\nInput:</strong><br />\n2<br />\n1 2<br />\n1 1&nbsp;<br />\n3 3<br />\n1 0 0 1 0 0 1 0 0<br />\n<br />\n<strong>Output:</strong><br />\n6<br />\n8</span><br />\n<br />\n<span style=\"font-size:16px\"><strong>Note:</strong>The <strong>Input/Ouput</strong> format and <strong>Example</strong> given are used for system&#39;s internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix `mat[][]` of `n` rows and `m` columns, where each element is either 0 or 1, calculate the perimeter of the sub-figures formed by connected 1s in the matrix. The perimeter is calculated by counting the number of edges of 1s that are exposed to 0s or the boundary of the matrix. For example, a single 1 has a perimeter of 4, and two adjacent 1s have a perimeter of 6.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= n, m <= 20"
                ],
                "testcases": [
                    {
                        "input": "1 2\n1 1",
                        "output": "6",
                        "explanation": "The matrix is 1x2 and contains two 1s adjacent to each other. Each 1 contributes 2 sides to the perimeter (4 total). The perimeter is 2 + 2 + 1 + 1 = 6 because the two 1's share a side."
                    },
                    {
                        "input": "3 3\n1 0 0 1 0 0 1 0 0",
                        "output": "8",
                        "explanation": "The matrix is 3x3 and contains three 1s that are not adjacent to each other, so they form 3 sub-figures. The perimeter for each 1 is 4. Therefore the total perimeter is 4 + 4 + 4 = 12. No sorry, that's not how it works. The perimeter is determined by the number of sides not shared, the total will be 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Geometric",
                "slug": "geometric"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "int numofneighbour(int mat[MAX][MAX], int i, int j,int n,int m)\n{\n    int count = 0;\n \n    // UP\n    if (i > 0 && mat[i - 1][j])\n        count++;\n \n    // LEFT\n    if (j > 0 && mat[i][j - 1])\n        count++;\n \n    // DOWN\n    if (i < n-1 && mat[i + 1][j])\n        count++;\n \n    // RIGHT\n    if (j < m-1 && mat[i][j + 1])\n        count++;\n \n    return count;\n}\n \n// Returns sum of perimeter of shapes formed with 1s\nint findPerimeter(int mat[MAX][MAX], int n, int m)\n{\n    int perimeter = 0;\n \n    // Traversing the matrix and finding ones to\n    // calculate their contribution.\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n            if (mat[i][j])\n                perimeter += (4 - numofneighbour(mat, i ,j,n,m));\n \n    return perimeter;\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Contributor: Saksham Raj Seth\nclass GfG{\npublic static int numofneighbour(int[][] mat, int i, int j,int n,int m)\n{\n    int count = 0;\n \n    // UP\n    if (i > 0 && mat[i - 1][j]==1)\n        count++;\n \n    // LEFT\n    if (j > 0 && mat[i][j - 1]==1)\n        count++;\n \n    // DOWN\n    if (i < n-1 && mat[i + 1][j]==1)\n        count++;\n \n    // RIGHT\n    if (j < m-1 && mat[i][j + 1]==1)\n        count++;\n\n    return count;\n}\npublic static int findPerimeter(int[][] mat, int n, int m)\n{\n    int perimeter = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n            if (mat[i][j]==1)\n                perimeter += (4 - numofneighbour(mat, i ,j,n,m));\n \n    return perimeter;\n}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "def cntneighbour(arr, i, j, n, m):\n    cnt =0\n    #Checking if there is a neighbor above\n    if i>0 and arr[i-1][j]==1:\n        cnt+=1\n    #Checking if there is a neighbor to the left\n    if j>0 and arr[i][j-1]==1:\n        cnt+=1\n    #Checking if there is a neighbor below\n    if i < n-1 and arr[i+1][j]==1:\n        cnt+=1\n    #Checking if there is a neighbor to the right\n    if j < m-1 and arr[i][j+1]==1:\n        cnt+=1\n    return cnt\n\ndef findPerimeter(arr, n, m):\n    #Initializing perimeter variable\n    per = 0\n    for i in range(n):\n        for j in range(m):\n            #Checking if current cell is occupied\n            if arr[i][j]==1:\n                #Calculating the number of neighbors and subtracting it from 4 (since 4 is the maximum number of neighbors)\n                per+=(4-cntneighbour(arr, i, j, n ,m))\n    return per",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}