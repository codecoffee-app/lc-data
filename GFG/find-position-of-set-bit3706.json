{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703764,
            "title": "Find position of set bit",
            "titleSlug": "find-position-of-set-bit3706",
            "content": "<p><span style=\"font-size: 18px;\">Given a number <strong>n</strong> having only one &lsquo;1&rsquo; and all other &rsquo;0&rsquo;s in its binary representation, find the position of the only set bit. If there are 0 or more than 1 set bit the answer should be -1. The position of set bit '1' should be counted starting with 1 from the LSB side in the binary representation of the number.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\">n =<strong> </strong>2</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">2</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">2 is represented as \"10\" in Binary. As we see there's only one set bit and it's in position 2.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong><strong> </strong></span><span style=\"font-size: 18px;\">n =<strong> </strong>5</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">-1</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">5 is represented as \"101\" in Binary. As we see there's two set bits and thus the output -1.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">0 &lt;= n &lt;= 10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer 'n', determine the position of the only set bit (bit with value 1) in its binary representation, counting from the least significant bit (LSB) starting at position 1. If 'n' has zero or more than one set bit, return -1.",
                "constraints": [
                    "0 <= n <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "2",
                        "explanation": "The binary representation of 2 is '10'. It contains only one set bit, which is at position 2 (from right to left, starting at 1)."
                    },
                    {
                        "input": "5",
                        "output": "-1",
                        "explanation": "The binary representation of 5 is '101'. It contains two set bits, so the output is -1."
                    },
                    {
                        "input": "0",
                        "output": "-1",
                        "explanation": "The binary representation of 0 is '0'. It contains zero set bits, so the output is -1."
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "The binary representation of 1 is '1'. It contains one set bit, which is at position 1."
                    },
                    {
                        "input": "4",
                        "output": "3",
                        "explanation": "The binary representation of 4 is '100'. It contains one set bit at position 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Every number which is a power of two has only one set bit.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // A helper method which returns 1 if n is a power of 2 else returns 0.\n    int isPowerOfTwo(int n) {\n        if (n && (!(n & (n - 1))))\n            return 1;\n        else\n            return 0;\n    }\n\n    int findPosition(int N) {\n\n        if (!isPowerOfTwo(N))\n            return -1;\n\n        int i = 1, pos = 1;\n\n        // Iterate through bits of n till we find a set bit\n        // i&n will be non-zero only when 'i' and 'n' have a set bit\n        // at same position\n        while (!(i & N)) {\n            // Unset current bit and set the next bit in 'i'\n            i = i << 1;\n\n            // increment position\n            ++pos;\n        }\n\n        return pos;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution{\n    findPosition(n){\n        if((n & (n-1)) !== 0 || n === 0){\n            return -1;\n        }\n        \n        let pos = 1;\n        while((n & 1) === 0){\n            n = n >> 1;\n            pos++;\n        }\n        \n        return pos;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}