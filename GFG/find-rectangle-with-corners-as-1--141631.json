{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706358,
            "title": "Find rectangle with corners as 1",
            "titleSlug": "find-rectangle-with-corners-as-1--141631",
            "content": "<p><span style=\"font-size: 18px;\">Given a&nbsp;NxM binary matrix consisting of 0s and 1s. Find if there exists a rectangle/ square within the matrix whose all four corners are 1.&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 4, M = 5\nmatrix[][] = \n{\n{1 0 0 1 0},\n{0 0 <span style=\"color: #ff0000;\">1</span> 0 <span style=\"color: #ff0000;\">1</span>},\n{0 0 0 1 0}, \n{1 0 <span style=\"color: #ff0000;\">1</span> 0 <span style=\"color: #ff0000;\">1</span>}\n} </span>\n\n<span style=\"font-size: 18px;\"><strong>Output</strong>: Yes\n<strong>Explanation:</strong>\nValid corners are at index (1,2), (1,4), (3,2), (3,4) </span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 3, M = 3\nmatrix[][] = \n{{0 0 0},\n{0 0 0},\n{0 0 0}}\n<strong>Output:</strong> No</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to take input or print anything. Complete the function <strong>ValidCorners()</strong>&nbsp;that takes the given matrix as input parameter and returns a boolean value.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= R, C &lt;= 200<br />0 &lt;= A[i] &lt;= 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a N x M binary matrix consisting of 0s and 1s, determine if there exists a rectangle or square within the matrix where all four corners are 1.",
                "constraints": [
                    "1 <= R, C <= 200",
                    "0 <= A[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "N = 4, M = 5\nmatrix[][] = \n{\n{1 0 0 1 0},\n{0 0 1 0 1},\n{0 0 0 1 0},\n{1 0 1 0 1}\n}",
                        "output": "Yes",
                        "explanation": "A valid rectangle/square is formed with corners at indices (1,2), (1,4), (3,2), and (3,4)."
                    },
                    {
                        "input": "N = 3, M = 3\nmatrix[][] = \n{{\n0 0 0},\n{0 0 0},\n{0 0 0}\n}",
                        "output": "No",
                        "explanation": "There are no '1's in the matrix, so no rectangle/square with '1's at all four corners can be formed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use extra storage to optimise time complexity.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    //Function to check if a valid corner exists in the given matrix.\n    bool ValidCorner(const vector<vector<int> >& matrix) {\n       int rows = matrix.size();\n       if (rows == 0)\n          return false;\n       \n       int columns = matrix[0].size();\n       unordered_map<int, unordered_set<int> > ump;\n       //Iterating over the rows and columns of the matrix.\n       for (int i = 0; i < rows; ++i) {\n          for (int j = 0; j < columns - 1; ++j) {\n             for (int k = j + 1; k < columns; ++k) {\n                //Checking if both matrix elements are 1.\n                if (matrix[i][j] == 1 && matrix[i][k] == 1) {\n                   //Checking if the corner already exists in the unordered_map.\n                   if (ump.find(j) != ump.end() && ump[j].find(k) != ump[j].end())\n                      return true;\n                   if (ump.find(k) != ump.end() && ump[k].find(j) != ump[k].end())\n                      return true;\n                   //Adding the corner to the unordered_map if not found.\n                   ump[j].insert(k);\n                   ump[k].insert(j);\n                }\n             }\n          }\n       }\n       return false;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public static boolean ValidCorner(int matrix[][]) {\n        int rows = matrix.length;\n        if (rows == 0) return false;\n        int columns = matrix[0].length;\n\n        // Create a HashMap to store connections between corners\n        HashMap<Integer, HashSet<Integer> > mp = new HashMap<>();\n\n        // Iterate through the matrix\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns - 1; j++) {\n                for (int k = j + 1; k < columns; k++) {\n\n                    // Check if two corners are connected\n                    if (matrix[i][j] == 1 && matrix[i][k] == 1) {\n\n                        // Check if the connection already exists\n                        if (mp.containsKey(j) && mp.get(j).contains(k)) {\n                            return true;\n                        }\n                        if (mp.containsKey(k) && mp.get(k).contains(j)) {\n                            return true;\n                        }\n\n                        // Add the connection to the HashMap\n                        if (!mp.containsKey(j)) {\n                            HashSet<Integer> x = new HashSet<>();\n                            x.add(k);\n                            mp.put(j, x);\n                        } else {\n                            mp.get(j).add(k);\n                        }\n                        if (!mp.containsKey(k)) {\n                            HashSet<Integer> x = new HashSet<>();\n                            x.add(j);\n                            mp.put(k, x);\n                        } else {\n                            mp.get(k).add(j);\n                        }\n                    }\n                }\n            }\n        }\n\n        // No valid corners found\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    # Function to check if there is a valid corner in the matrix.\n    def ValidCorner(self, matrix):\n        rows = len(matrix)\n        if (rows == 0):\n            return False\n        columns = len(matrix[0])\n\n        # Iterating over each element in the matrix to find a valid corner.\n        for y1 in range(rows):\n            for x1 in range(columns):\n                if (matrix[y1][x1] == 1):\n                    for y2 in range(y1 + 1, rows):\n                        for x2 in range(x1 + 1, columns):\n                            if (matrix[y1][x2] == 1 and matrix[y2][x1] == 1\n                                    and matrix[y2][x2] == 1):\n\n                                # Found a valid corner\n                                return True\n        # No valid corner found\n        return False\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}