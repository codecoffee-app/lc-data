{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878900,
            "title": "Find Only Repetitive Element from 1 to n-1",
            "titleSlug": "find-repetitive-element-from-1-to-n-1",
            "content": "<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\">Given an array, <strong>arr[]</strong>, of size <strong>n</strong>, filled with numbers from <strong>1</strong> to <strong>n-1</strong> in random order. The array has <strong>only</strong> one repetitive element. Your task is to find the repetitive element.</span></p>\n<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\">Note: It is guaranteed that there is a repeating element present in the array.</span></p>\n<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Examples</strong>:</span></p>\n<pre><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Input</strong>: arr[] = [1, 3, 2, 3, 4]</span><br /><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Output</strong>: 3 <br /><strong>Explanation</strong>: The number 3 is the only repeating element.<br /></span></pre>\n<pre><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Input</strong>: arr[] = [1, 5, 1, 2, 3, 4]</span><br /><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Output</strong>: 1&nbsp; <br /><strong>Explanation</strong>: The number 1 is the only repeating element.</span></pre>\n<pre><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Input</strong>: arr[] = [1, 1]&nbsp;&nbsp;</span><br /><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Output</strong>: 1</span><br /><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Explanation</strong>: The array is of size 2 with both elements being 1, making 1 the repeating element.</span></pre>\n<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Constraints</strong>:</span><br /><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\">2 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= n-1&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `n`, containing numbers from 1 to `n-1` in random order. The array contains exactly one repeating element. Find the repetitive element.",
                "constraints": [
                    "2 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= n-1"
                ],
                "testcases": [
                    {
                        "input": "[1, 3, 2, 3, 4]",
                        "output": "3",
                        "explanation": "The element 3 appears more than once in the array."
                    },
                    {
                        "input": "[1, 5, 1, 2, 3, 4]",
                        "output": "1",
                        "explanation": "The element 1 appears more than once in the array."
                    },
                    {
                        "input": "[1, 1]",
                        "output": "1",
                        "explanation": "The element 1 appears more than once in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use two pointers (slow and fast) to detect the cycle and find the duplicate.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    int findDuplicate(vector<int>& arr) {\n        int slow = arr[0]; // slow pointer\n        int fast = arr[0]; // fast pointer\n\n        do {\n            slow = arr[slow];      // moves one step (speed x)\n            fast = arr[arr[fast]]; // moves two steps (speed 2x)\n        } while (slow != fast);\n\n        fast = arr[0]; // reinitialize fast to the start\n\n        // Loop until both pointers meet at the duplicate\n        while (slow != fast) {\n            slow = arr[slow];\n            fast = arr[fast];\n        }\n\n        // Return duplicate number\n        return slow;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int findDuplicate(int[] arr) {\n        int slow = arr[0]; // slow pointer\n        int fast = arr[0]; // fast pointer\n\n        // Phase 1: Finding the intersection point\n        do {\n            slow = arr[slow];      // moves one step (speed x)\n            fast = arr[arr[fast]]; // moves two steps (speed 2x)\n        } while (slow != fast);\n\n        // Phase 2: Finding the entrance to the cycle (duplicate)\n        fast = arr[0]; // reinitialize fast to the start\n\n        while (slow != fast) {\n            slow = arr[slow];\n            fast = arr[fast];\n        }\n\n        // Return duplicate number\n        return slow;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Backend complete function template for Python 3\n\n\nclass Solution:\n\n    def findDuplicate(self, arr):\n        # Phase 1: Finding the intersection point\n        slow = arr[0]  # slow pointer\n        fast = arr[0]  # fast pointer\n\n        while True:\n            slow = arr[slow]  # moves one step (speed x)\n            fast = arr[arr[fast]]  # moves two steps (speed 2x)\n            if slow == fast:\n                break\n\n        # Phase 2: Finding the entrance to the cycle (duplicate)\n        fast = arr[0]  # reinitialize fast to the start\n\n        while slow != fast:\n            slow = arr[slow]\n            fast = arr[fast]\n\n        # Return duplicate number\n        return slow\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr\n * @returns {number}\n */\nclass Solution {\n\n    findDuplicate(arr) {\n        // Phase 1: Finding the intersection point\n        let slow = arr[0]; // slow pointer\n        let fast = arr[0]; // fast pointer\n\n        while (true) {\n            slow = arr[slow];      // moves one step\n            fast = arr[arr[fast]]; // moves two steps\n            if (slow === fast) break;\n        }\n\n        // Phase 2: Finding the entrance to the cycle (duplicate)\n        fast = arr[0]; // reinitialize fast to the start\n\n        while (slow !== fast) {\n            slow = arr[slow];\n            fast = arr[fast];\n        }\n\n        // Return duplicate number\n        return slow;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}