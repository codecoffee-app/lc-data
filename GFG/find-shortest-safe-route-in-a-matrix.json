{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710037,
            "title": "Find shortest safe route in a matrix",
            "titleSlug": "find-shortest-safe-route-in-a-matrix",
            "content": "<p><span style=\"font-size: 18px;\">Given a matrix <strong>mat[][] with r </strong>rows and <strong>c </strong>columns, where some cells are landmines <strong>(marked as 0)</strong> and others are safe to traverse. Your task is to <strong>find the shortest safe route</strong> from <strong>any cell</strong> in the leftmost column to <strong>any cell</strong> in the rightmost column of the <strong>mat</strong>. <strong>You cannot move diagonally</strong>, and you must <strong>avoid both the landmines</strong> and <strong>their adjacent</strong> cells (up, down, left, right), as they are also <strong>unsafe</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">mat = [1, 0, 1, 1, 1],\n\\t[1, 1, 1, 1, 1],\n\\t[1, 1, 1, 1, 1],\n\\t[1, 1, 1, 0, 1],\n\\t[1, 1, 1, 1, 0]</span>\n<strong><span style=\"font-size: 18px;\">Output: <br /></span></strong><span style=\"font-size: 18px;\">6</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong>\n<span style=\"font-size: 18px;\">We can see that length of shortest</span>\n<span style=\"font-size: 18px;\">safe route is 6</span>\n<span >[1 0 1 1 1]<br />[1 1 <span style=\"color: #236fa1;\"><strong>1</strong> <strong>1</strong> <strong>1</strong></span>]<span style=\"color: #236fa1;\"><br /></span>[<span style=\"color: #236fa1;\"><strong>1</strong></span> <span style=\"color: #236fa1;\"><strong>1</strong></span> <span style=\"color: #236fa1;\"><strong>1</strong></span> 1 1]\n[1 1 1 0 1] \n[1 1 1 1 0]\n</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><span style=\"font-size: 18px;\">\nmat = [1, 1, 1, 1, 1],\n\\t[1, 1, 0, 1, 1],\n\\t[1, 1, 1, 1, 1]</span><strong><span style=\"font-size: 18px;\">\nOutput: <br /></span></strong><span style=\"font-size: 18px;\">-1</span><strong><span style=\"font-size: 18px;\">\nExplanation: </span></strong><span style=\"font-size: 18px;\">There is no possible path from\nfirst column to last column.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>findShortestPath()&nbsp;</strong>which takes the matrix as an input parameter and returns an integer denoting the shortest safe path from <strong>any cell</strong> in the leftmost column to <strong>any cell </strong>in the rightmost column of <strong>mat</strong>. If there is no possible path, return <strong>-1</strong>.&nbsp;<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(r * c)<br /><strong>Expected Auxiliary Space:</strong> O(</span><span style=\"font-size: 18px;\">r * c</span><span style=\"font-size: 18px;\">)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= r, c &lt;= 10</span><sup><span style=\"font-size: 15px;\">3<br />0 &lt;= mat[][] &lt;= 1</span></sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix `mat[][]` with `r` rows and `c` columns, where some cells are landmines (marked as 0) and others are safe to traverse, find the shortest safe route from any cell in the leftmost column to any cell in the rightmost column of the `mat`. You cannot move diagonally, and you must avoid both the landmines and their adjacent cells (up, down, left, right), as they are also unsafe.",
                "constraints": [
                    "1 <= r, c <= 1000",
                    "0 <= mat[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "mat = [[1, 0, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 1, 1],[1, 1, 1, 0, 1],[1, 1, 1, 1, 0]]",
                        "output": "6",
                        "explanation": "The shortest safe route has a length of 6. One possible path goes through the cells marked in bold: [1 0 1 1 1], [1 1 **1 1 1**], [**1 1 1** 1 1], [1 1 1 0 1], [1 1 1 1 0]"
                    },
                    {
                        "input": "mat = [[1, 1, 1, 1, 1],[1, 1, 0, 1, 1],[1, 1, 1, 1, 1]]",
                        "output": "-1",
                        "explanation": "There is no possible safe path from the first column to the last column due to the landmine blocking all paths."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><span style=\"background-color: #ffffff; color: #0d0d0d; white-space-collapse: preserve;\">Try to use </span><span style=\"background-color: #ffffff; color: #0d0d0d; white-space-collapse: preserve;\">a breadth-first search (BFS) approach to find the shortest safe route so that</span>&nbsp;the indices used to access elements in the matrix are within its bounds.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\n\r\nclass Solution\r\n{\r\npublic:\r\n    int rowNum[4] = {-1, 0, 0, 1}; // Changes in row to move up, stay, stay, move down\r\n    int colNum[4] = {0, -1, 1, 0}; // Changes in column to move left, stay, move right, stay\r\n    \r\n    int findShortestPath(vector<vector<int>> &mat)\r\n    {\r\n        int n = mat.size(); // Number of rows\r\n        int m = mat[0].size(); // Number of columns\r\n        \r\n        queue<array<int,3>> q; // Queue to perform BFS\r\n        \r\n        int d[n][m]; // Distance array to store shortest distance\r\n        \r\n        // Initializing distance array with a large value\r\n        for(int i = 0; i < n; i++)\r\n            for(int j = 0; j < m; j++)\r\n                d[i][j] = 1e9;\r\n        \r\n        // Lambda function to check if cell is valid\r\n        auto isValid = [&](int i, int j) {\r\n            if(i < 0 || i >= n || j < 0 || j >= m) return false;\r\n            return true;\r\n        };\r\n        \r\n        // Lambda function to check if cell and its adjacent cells are safe\r\n        auto check = [&](int i, int j) {\r\n            if(!isValid(i, j)) return false;\r\n            for(int k = 0; k < 4; k++) {\r\n                if(isValid(i + rowNum[k], j + colNum[k]) && !mat[i + rowNum[k]][j + colNum[k]]) return false;\r\n            }\r\n            return true;\r\n        };\r\n        \r\n        // Pushing cells from the rightmost column into the queue\r\n        for(int i = 0; i < n; i++) {\r\n            if(check(i, m - 1)) {\r\n                q.push({i, m - 1, 1});\r\n            }\r\n        }\r\n        \r\n        // BFS traversal\r\n        while(!q.empty()) {\r\n            auto z = q.front();\r\n            int x = z[0], y = z[1], dis = z[2];\r\n            q.pop();\r\n            if(d[x][y] > dis) {\r\n                d[x][y] = dis;\r\n                for(int k = 0; k < 4; k++) {\r\n                    if(check(x + rowNum[k], y + colNum[k])) {\r\n                        q.push({x + rowNum[k], y + colNum[k], dis + 1});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Finding the minimum distance in the first column\r\n        int ans = 1e9;\r\n        for(int i = 0; i < n; i++)\r\n            ans = min(ans, d[i][0]);\r\n        \r\n        // If no safe path found, return -1\r\n        if(ans >= 1e9) ans = -1;\r\n        return ans;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Arrays to represent possible movements: up, left, right, down\n    int[] rowNum = new int[] {-1, 0, 0, 1};\n    int[] colNum = new int[] {0, -1, 1, 0};\n\n    // Method to find the shortest path in the matrix\n    public int findShortestPath(int[][] mat) {\n        int n = mat.length;\n        int m = mat[0].length;\n\n        // Queue to store cells for BFS\n        Queue<int[]> q = new LinkedList<>();\n\n        // Array to store distances initialized to max value\n        int[][] d = new int[n][m];\n\n        // Initialize distances array\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                d[i][j] = Integer.MAX_VALUE;\n            }\n        }\n\n        // Add boundary cells to the queue\n        for (int i = 0; i < n; i++) {\n            if (check(i, m - 1, mat, n, m)) {\n                q.add(new int[] {i, m - 1, 1});\n            }\n        }\n\n        // BFS traversal\n        while (!q.isEmpty()) {\n            int[] cell = q.poll();\n            int x = cell[0], y = cell[1], dis = cell[2];\n\n            if (d[x][y] > dis) {\n                d[x][y] = dis;\n                for (int k = 0; k < 4; k++) {\n                    if (check(x + rowNum[k], y + colNum[k], mat, n, m)) {\n                        q.add(new int[] {x + rowNum[k], y + colNum[k], dis + 1});\n                    }\n                }\n            }\n        }\n\n        // Find the minimum distance to the first column\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) ans = Math.min(ans, d[i][0]);\n\n        // If no path found, return -1\n        if (ans >= Integer.MAX_VALUE) ans = -1;\n        return ans;\n    }\n\n    // Helper method to check if cell is valid\n    private boolean isValid(int i, int j, int n, int m) {\n        return (i >= 0) && (i < n) && (j >= 0) && (j < m);\n    }\n\n    // Helper method to check if cell is valid for movement\n    private boolean check(int i, int j, int[][] mat, int n, int m) {\n        if (!isValid(i, j, n, m)) return false;\n        for (int k = 0; k < 4; k++) {\n            if (isValid(i + rowNum[k], j + colNum[k], n, m) &&\n                (mat[i + rowNum[k]][j + colNum[k]] == 0))\n                return false;\n        }\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\r\nfrom collections import deque\r\n\r\nclass Solution:\r\n    def __init__(self):\r\n        self.rowNum = [-1, 0, 0, 1]\r\n        self.colNum = [0, -1, 1, 0]\r\n        \r\n    def findShortestPath(self, mat: List[List[int]]) -> int:\r\n        n = len(mat)\r\n        m = len(mat[0])\r\n        \r\n        # Queue to perform BFS\r\n        q = deque()\r\n        \r\n        # Distance array to store shortest distance\r\n        d = [[float('inf')] * m for _ in range(n)]\r\n        \r\n        # Function to check if cell is valid\r\n        def isValid(i, j):\r\n            return 0 <= i < n and 0 <= j < m\r\n\r\n        \r\n        # Function to check if cell and its adjacent cells are safe\r\n        def check(i, j):\r\n            if not isValid(i, j):\r\n                return False\r\n            for k in range(4):\r\n                if isValid(i + self.rowNum[k], j + self.colNum[k]) and mat[i + self.rowNum[k]][j + self.colNum[k]] == 0:\r\n                    return False\r\n            return True\r\n        \r\n        # Pushing cells from the rightmost column into the queue\r\n        for i in range(n):\r\n            if check(i, m - 1):\r\n                q.append((i, m - 1, 1))\r\n        \r\n        # BFS traversal\r\n        while q:\r\n            x, y, dis = q.popleft()\r\n            if d[x][y] > dis:\r\n                d[x][y] = dis\r\n                for k in range(4):\r\n                    if check(x + self.rowNum[k], y + self.colNum[k]):\r\n                        q.append((x + self.rowNum[k], y + self.colNum[k], dis + 1))\r\n        \r\n        # Finding the minimum distance in the first column\r\n        ans = float('inf')\r\n        for i in range(n):\r\n            ans = min(ans, d[i][0])\r\n        \r\n        # If no safe path found, return -1\r\n        if ans == float('inf'):\r\n            return -1\r\n        return ans\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}