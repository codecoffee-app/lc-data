{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703387,
            "title": "Smallest Non-Zero Number",
            "titleSlug": "find-smallest-non-zero-number4510",
            "content": "<p><span >You are given an array <code><strong>arr[]</strong></code>. Your task is to find the smallest number <code>x</code> such that when <code>x</code> is processed sequentially with each element of the array (from index 0 to <code>n-1</code>), it <strong>never becomes negative</strong>, under the following conditions:</span></p>\n<ol>\n<li><span >If <code>x</code> is greater than the current array element, <code>x</code> is <strong>increased</strong> by the difference between <code>x</code> and the array element.</span></li>\n<li><span >If <code>x</code> is less than or equal to the current array element, <code>x</code> is <strong>decreased</strong> by the difference between the array element and <code>x</code>.</span></li>\n</ol>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [3, 4, 3, 2, 4]\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: Start with `x = 4`:\n- For arr[0] = 3, x becomes 5.\n- For arr[1] = 4, x becomes 6.\n- For arr[2] = 3, x becomes 9.\n- For arr[3] = 2, x becomes 16.\n- For arr[4] = 4, x becomes 28.<br />x remains positive throughout the process.\nIf x &lt; 4, it would become negative at some point.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [4, 4]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Start with `x = 3`:\n- For arr[0] = 4, x becomes 2.\n- For arr[1] = 4, x becomes 0.<br />x remains non-negative. If x &lt; 3, it would become negative.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n).&nbsp;<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup>1&lt;= arr[i] &lt;= 10<sup>4</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, find the smallest positive integer `x` such that when `x` is processed sequentially with each element of the array, it never becomes negative. The processing rules are as follows:\n\n1. If `x` is greater than the current array element, `x` is increased by the difference between `x` and the array element.\n2. If `x` is less than or equal to the current array element, `x` is decreased by the difference between the array element and `x`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[3, 4, 3, 2, 4]",
                        "output": "4",
                        "explanation": "Starting with x = 4:\n- For arr[0] = 3, x becomes 4 + (4 - 3) = 5.\n- For arr[1] = 4, x becomes 5 + (5 - 4) = 6.\n- For arr[2] = 3, x becomes 6 + (6 - 3) = 9.\n- For arr[3] = 2, x becomes 9 + (9 - 2) = 16.\n- For arr[4] = 4, x becomes 16 + (16 - 4) = 28.\nx remains positive throughout the process. Any x < 4 would become negative at some point."
                    },
                    {
                        "input": "[4, 4]",
                        "output": "3",
                        "explanation": "Starting with x = 3:\n- For arr[0] = 4, x becomes 3 - (4 - 3) = 2.\n- For arr[1] = 4, x becomes 2 - (4 - 2) = 0.\nx remains non-negative. Any x < 3 would become negative."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >An efficient approach to solving this problem would be to use the fact that when you reach the last array element, the value with which we started can be at least 0, which means suppose the last array element is a[n-1] then the value at a[n-2] must be greater than or equal to a[n-1]/2.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n\n  public:\n    // Function to calculate the result based on the given array\n    int find(vector<int>& arr) {\n        // Initialize num to 0\n        int num = 0;\n\n        // Get the size of the array\n        int n = arr.size();\n\n        // Loop through the array from end to start\n        for (int i = n - 1; i >= 0; i--) {\n\n            // Update num by rounding the average of the current element and the\n            // previous value of num\n            num = round((double)(arr[i] + num) / 2.0);\n        }\n\n        // Return the final value of num\n        return num;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to process the array and calculate the result\n    public int find(int[] arr) {\n        int num = 0; // Initialize num to 0\n\n        // Traverse the array from end to start\n        for (int i = arr.length - 1; i >= 0; i--) {\n            // Update num based on the current array element\n            num = (int)Math.round((arr[i] + num) / 2.0);\n        }\n\n        // Return the final result\n        return num;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import math\n\n\nclass Solution:\n    # Function to find the number by averaging elements in the array.\n    def find(self, arr):\n        # Custom round function to mimic C++ round behavior\n        def custom_round(x):\n            # Mimicking the rounding behavior of C++ where 0.5 rounds away from zero\n            if x >= 0:\n                return int(math.floor(x + 0.5))\n            else:\n                return int(math.ceil(x - 0.5))\n\n        num = 0\n        # Iterating over the array in reverse order.\n        for i in range(len(arr) - 1, -1, -1):\n            # Averaging the current element with the previous sum using custom rounding\n            num = custom_round((arr[i] + num) / 2.0)\n        return num\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to calculate the result based on the given array\n    find(arr) {\n        // Initialize num to 0\n        let num = 0;\n\n        // Get the size of the array\n        const n = arr.length;\n\n        // Loop through the array from end to start\n        for (let i = n - 1; i >= 0; i--) {\n            // Update num by rounding the average of the current element and the\n            // previous value of num\n            num = Math.round((arr[i] + num) / 2.0);\n        }\n\n        // Return the final value of num\n        return num;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}