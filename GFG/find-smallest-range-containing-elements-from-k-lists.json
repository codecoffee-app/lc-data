{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700497,
            "title": "Smallest range in K lists",
            "titleSlug": "find-smallest-range-containing-elements-from-k-lists",
            "content": "<p><span style=\"font-size:18px\">Given <strong>K</strong> sorted lists of integers,&nbsp;<strong>KSortedArray[]</strong>&nbsp;of size <strong>N</strong> each. The task is to find the smallest range that includes at least one element from each of the <strong>K</strong> lists. If more than one such range&#39;s are found, return&nbsp;the first such range found.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 5, K = 3\nKSortedArray[][] = {{1 3 5 7 9},\n\\t\\t\\t  {0 2 4 6 8},\n\\t\\t\\t  {2 3 5 7 11}}\n<strong>Output: </strong>1 2<strong>\nExplanation: </strong>K = 3\nA:[1 3 5 7 9]\nB:[0 2 4 6 8]\nC:[2 3 5 7 11]\nSmallest range is formed by number 1\npresent in first list and 2 is present\nin both 2nd and 3rd list.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4, K = 3\nKSortedArray[][] = {{1 2 3 4},\n\\t\\t\\t  {5 6 7 8},\n\\t\\t\\t  {9 10 11 12}}\n<strong>Output: </strong>4 9</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task</strong> : </span></p>\n\n<p><span style=\"font-size:18px\">Complete the function&nbsp;<strong><em>findSmallestRange</em></strong>() that receives array , array size n and k as parameters and returns the output range (as a pair in cpp and array of size 2 in java and python)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity </strong>:&nbsp;O(n * k *log k)<br />\n<strong>Expected Auxilliary Space&nbsp;</strong>&nbsp;: O(k)</span></p>\n\n<div><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= K,N &lt;= 500</span></div>\n\n<div><span style=\"font-size:18px\">0 &lt;= a[ i ] &lt;= 10<sup>5</sup></span></div>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given K sorted lists of integers, `KSortedArray[]` of size N each, find the smallest range that includes at least one element from each of the K lists. If multiple such ranges exist, return the first one encountered.",
                "constraints": [
                    "1 <= K, N <= 500",
                    "0 <= a[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 5, K = 3\nKSortedArray[][] = {{1 3 5 7 9},\n                     {0 2 4 6 8},\n                     {2 3 5 7 11}}",
                        "output": "1 2",
                        "explanation": "The smallest range containing at least one element from each list is [1, 2]. 1 is from the first list, and 2 is present in both the second and third lists."
                    },
                    {
                        "input": "N = 4, K = 3\nKSortedArray[][] = {{1 2 3 4},\n                     {5 6 7 8},\n                     {9 10 11 12}}",
                        "output": "4 9",
                        "explanation": "The smallest range containing at least one element from each list is [4, 9]. 4 is from the first list, 5 is from the second list and 9 is from the third list."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to use a min Heap.</span></p>",
            "<ol>\n\t<li><span style=\"font-size:18px\">Create a min heap of size k and insert first elements of all k lists into the heap.</span></li>\n\t<li><span style=\"font-size:18px\">Maintain two variables min and max to store minimum and maximum values present in the heap at any point. Note min will always contain </span><span style=\"font-size:18px\">value</span><span style=\"font-size:18px\"> of the root of the heap.</span></li>\n\t<li><span style=\"font-size:18px\">Repeat following steps</span>\n\t<ul>\n\t\t<li><span style=\"font-size:18px\">Get the minimum element from the heap (minimum is always at root) and compute the range.</span></li>\n\t\t<li><span style=\"font-size:18px\">Replace heap root with next element of the list from which the </span><span style=\"font-size:18px\">min</span><span style=\"font-size:18px\"> element is extracted. After replacing the root, </span><span style=\"font-size:18px\">heapify</span><span style=\"font-size:18px\"> the tree. Update max if next element is greater. If the list doesn&rsquo;t have any more elements, break the loop.</span></li>\n\t</ul>\n\t</li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// A min heap node\nstruct MinHeapNode\n{\n\tint element; // The element to be stored\n\tint i; // index of the list from which the element is taken\n\tint j; // index of the next element to be picked from list\n};\nvoid swap(MinHeapNode *x, MinHeapNode *y);\n\n// A class for Min Heap\nclass MinHeap\n{\n\tMinHeapNode *harr;\n\tint heap_size;\npublic:\n\tMinHeap(MinHeapNode a[], int size);\n\tvoid MinHeapify(int );\n\tint left(int i) { return (2*i + 1); }\n\tint right(int i) { return (2*i + 2); }\n\tMinHeapNode getMin() { return harr[0]; }\n\tvoid replaceMin(MinHeapNode x) { harr[0] = x; MinHeapify(0); }\n};\n\nMinHeap::MinHeap(MinHeapNode a[], int size)\n{\n\theap_size = size;\n\tharr = a;\n\tint i = (heap_size - 1)/2;\n\twhile (i >= 0)\n\t{\n\t\tMinHeapify(i);\n\t\ti--;\n\t}\n}\n\nvoid MinHeap::MinHeapify(int i)\n{\n\tint l = left(i);\n\tint r = right(i);\n\tint smallest = i;\n\tif (l < heap_size &&\n\t\tharr[l].element < harr[i].element)\n\t\tsmallest = l;\n\tif (r < heap_size &&\n\t\tharr[r].element < harr[smallest].element)\n\t\tsmallest = r;\n\tif (smallest != i)\n\t{\n\t\tswap(harr[i], harr[smallest]);\n\t\tMinHeapify(smallest);\n\t}\n}\nclass Solution{\n    public:\n    pair<int,int>  findSmallestRange(int arr[][N], int n, int k)\n    {\n    \tint range = INT_MAX;\n    \tint min = INT_MAX, max = INT_MIN;\n    \tint start, end;\n    \n    \tMinHeapNode *harr = new MinHeapNode[k];\n    \tfor (int i = 0; i < k; i++)\n    \t{\n    \t\tharr[i].element = arr[i][0];\n    \t\tharr[i].i = i;\n    \t\tharr[i].j = 1; \n    \t\n    \t\n    \t\tif (harr[i].element > max)\n    \t\t\tmax = harr[i].element;\n    \t}\n    \n    \tMinHeap hp(harr, k);\n    \twhile (1)\n    \t{\n    \t\tMinHeapNode root = hp.getMin();\n    \t\tmin = hp.getMin().element;\n    \t\tif (range > max - min + 1)\n    \t\t{\n    \t\t\trange = max - min + 1;\n    \t\t\tstart = min;\n    \t\t\tend = max;\n    \t\t}\n    \t\tif (root.j < n)\n    \t\t{\n    \t\t\troot.element = arr[root.i][root.j];\n    \t\t\troot.j += 1;\n    \t\t\tif (root.element > max)\n    \t\t\t\tmax = root.element;\n    \t\t}\n    \t\telse break;\n    \t\thp.replaceMin(root);\n    \t}\n    \t\n    \tpair<int,int> rangee(start,end);\n    \treturn rangee;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Node\n{\n\t\tint data; // data value of the Node\n\t\tint row; // row index of the Node\n\t\tint nextCol; // column index of the next element in the Node's row\n\t\tNode(int data,int row,int nextCol) // Constructor to initialize a Node\n\t\t{\n\t\t\tthis.data=data;\n\t\t\tthis.row=row;\n\t\t\tthis.nextCol=nextCol;\n\t\t}\n}\n\nclass Solution\n{\n\t// Function to find the smallest range in an array\n\tstatic int[] findSmallestRange(int[][] arr,int n,int k){\n\t\tPriorityQueue<Node> pq=new PriorityQueue<Node>(new Comparator<Node>() {\n\t\t\tpublic int compare(Node n1,Node n2){\n\t\t\t\treturn n1.data-n2.data;\n\t\t\t\t}\n\t\t});\n\t\tint max=0; // Maximum value encountered so far in the array\n\t\tint range=(int)1e9; // Initial range value set to maximum possible value\n\t\tfor(int i=0;i<k;i++){ // Adding the first element from each row to the priority queue\n\t\t\tpq.add(new Node(arr[i][0], i, 1));\n\t\t\tmax=Math.max(max, arr[i][0]); // Updating the maximum value\n\t\t}\n\t    int res[] = new int[2]; // Array to store the starting and ending values of the smallest range\n\t\tint start=-1; // Starting value of the smallest range\n\t\tint end=-1; // Ending value of the smallest range\n\t\twhile(true){\n\t\t\tNode n1=pq.poll(); // Removing the element with the smallest value from the priority queue\n\t\t\tint min=n1.data; // Minimum value encountered so far in the array\n\t\t\tif(range>max-min+1){ // Checking if the current range is smaller than the previous smallest range\n\t\t\t\trange=max-min+1; // Updating the range if a smaller range is found\n\t\t\t\tstart=min; // Updating the starting value of the smallest range\n\t\t\t\tend=max; // Updating the ending value of the smallest range\n\t\t\t}\n\t\t\tint nextRow=n1.row; // Row index of the next element in the Node's row\n\t\t\tint nextColumn=n1.nextCol; // Column index of the next element in the Node's row\n\t\t\tif(n1.nextCol<n){ // Checking if there are still elements left in the current row\n\t\t\t\tpq.add(new Node(arr[nextRow][nextColumn], nextRow, nextColumn+1)); // Adding the next element from the row to the priority queue\n\t\t\t\tmax=Math.max(max, arr[nextRow][nextColumn]); // Updating the maximum value\n\t\t\t}\n\t\t\telse{\n\t\t\t\tbreak; // Breaking the loop if there are no more elements left in any row\n\t\t}\n\t}\n    int rangee[] = {start,end}; // Creating an array to store the starting and ending values of the smallest range\n    return rangee; // Returning the array with the smallest range\n }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import heapq\nclass Solution:\n    def smallestRange(self, numbers, n, k):\n        minheap=[]\n        maxx=-float('inf')\n        for i in range(k):\n            # Push the first element of each list with its index and position into the min heap\n            heapq.heappush(minheap,(numbers[i][0],i,0))\n            # Update the maximum value with the first element of each list\n            maxx=max(numbers[i][0],maxx)\n        heapq.heapify(minheap)\n        # Initialize the range difference as the difference between the maximum and minimum values in the heap\n        diff=maxx-minheap[0][0]\n        # Initialize the answer list with the minimum and maximum values in the heap\n        ans=[minheap[0][0],maxx]\n        \n        while True:\n            # Pop the minimum element from the heap along with its index and position\n            mini,r,c=heapq.heappop(minheap)\n            # If the difference between the maximum and minimum values in the heap is greater than the difference found, update the difference and answer list\n            if diff>maxx-mini:\n                diff=maxx-mini\n                ans=[mini,maxx]\n            # If the position is at the end of the list, break the loop\n            if c+1>=len(numbers[r]):\n                break\n            # Get the next element from the list at the same index and update the maximum value\n            num=numbers[r][c+1]\n            maxx=max(maxx,num)\n            # Push the next element into the heap with its index and position\n            heapq.heappush(minheap,(num,r,c+1))\n        # Return the answer list\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass MinHeapNode {\n  constructor(element, i, j) {\n    this.element = element;\n    this.i = i;\n    this.j = j;\n  }\n}\n\nclass MinHeap {\n  constructor(arr, size) {\n    this.heap = arr;\n    this.size = size;\n    let i = Math.floor((this.size - 1) / 2);\n    while (i >= 0) {\n      this.minHeapify(i);\n      i--;\n    }\n  }\n\n  left(i) {\n    return 2 * i + 1;\n  }\n\n  right(i) {\n    return 2 * i + 2;\n  }\n\n  minHeapify(i) {\n    let l = this.left(i);\n    let r = this.right(i);\n    let smallest = i;\n    if (l < this.size && this.heap[l].element < this.heap[smallest].element) {\n      smallest = l;\n    }\n    if (r < this.size && this.heap[r].element < this.heap[smallest].element) {\n      smallest = r;\n    }\n    if (smallest !== i) {\n      [this.heap[i], this.heap[smallest]] = [this.heap[smallest], this.heap[i]];\n      this.minHeapify(smallest);\n    }\n  }\n\n  getMin() {\n    return this.heap[0];\n  }\n\n  replaceMin(x) {\n    this.heap[0] = x;\n    this.minHeapify(0);\n  }\n}\n\nclass Solution {\n  findSmallestRange(KSortedArray, n, k) {\n    let range = Infinity;\n    let min = Infinity;\n    let max = -Infinity;\n    let start, end;\n\n    let harr = new Array(k);\n    for (let i = 0; i < k; i++) {\n      harr[i] = new MinHeapNode(KSortedArray[i][0], i, 1);\n      if (harr[i].element > max) {\n        max = harr[i].element;\n      }\n    }\n\n    let hp = new MinHeap(harr, k);\n    while (true) {\n      let root = hp.getMin();\n      min = hp.getMin().element;\n      if (range > max - min + 1) {\n        range = max - min + 1;\n        start = min;\n        end = max;\n      }\n      if (root.j < n) {\n        root.element = KSortedArray[root.i][root.j];\n        root.j += 1;\n        if (root.element > max) {\n          max = root.element;\n        }\n      } else {\n        break;\n      }\n      hp.replaceMin(root);\n    }\n\n    return [start, end];\n  }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class MinHeapNode\n{\n    public int element; // The element to be stored\n    public int i; // index of the list from which the element is taken\n    public int j; // index of the next element to be picked from list\n}\n\nclass MinHeap\n{\n    private MinHeapNode[] harr;\n    private int heap_size;\n\n    public MinHeap(MinHeapNode[] a, int size)\n    {\n        heap_size = size;\n        harr = a;\n        int i = (heap_size - 1) / 2;\n        while (i >= 0)\n        {\n            MinHeapify(i);\n            i--;\n        }\n    }\n\n    private void MinHeapify(int i)\n    {\n        int l = left(i);\n        int r = right(i);\n        int smallest = i;\n        if (l < heap_size && harr[l].element < harr[i].element)\n            smallest = l;\n        if (r < heap_size && harr[r].element < harr[smallest].element)\n            smallest = r;\n        if (smallest != i)\n        {\n            swap(harr, i, smallest);\n            MinHeapify(smallest);\n        }\n    }\n\n    private void swap(MinHeapNode[] arr, int i, int j)\n    {\n        MinHeapNode temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    private int left(int i) { return (2 * i + 1); }\n    private int right(int i) { return (2 * i + 2); }\n\n    public MinHeapNode getMin() { return harr[0]; }\n\n    public void replaceMin(MinHeapNode x)\n    {\n        harr[0] = x;\n        MinHeapify(0);\n    }\n}\n\nclass Solution\n{\n    public (int, int) findSmallestRange(int[][] arr, int n, int k)\n    {\n        int range = int.MaxValue;\n        int min = int.MaxValue, max = int.MinValue;\n        int start = 0, end = 0;\n\n        MinHeapNode[] harr = new MinHeapNode[k];\n        for (int i = 0; i < k; i++)\n        {\n            harr[i] = new MinHeapNode();\n            harr[i].element = arr[i][0];\n            harr[i].i = i;\n            harr[i].j = 1;\n\n            if (harr[i].element > max)\n                max = harr[i].element;\n        }\n\n        MinHeap hp = new MinHeap(harr, k);\n        while (true)\n        {\n            MinHeapNode root = hp.getMin();\n            min = hp.getMin().element;\n            if (range > max - min + 1)\n            {\n                range = max - min + 1;\n                start = min;\n                end = max;\n            }\n            if (root.j < n)\n            {\n                root.element = arr[root.i][root.j];\n                root.j += 1;\n                if (root.element > max)\n                    max = root.element;\n            }\n            else break;\n            hp.replaceMin(root);\n        }\n\n        return (start, end);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}