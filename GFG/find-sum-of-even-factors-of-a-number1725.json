{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704012,
            "title": "Find sum of even factors of a number",
            "titleSlug": "find-sum-of-even-factors-of-a-number1725",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>N</strong>, find the even factor sum of the number N.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 30 \r\n<strong>Output: </strong>\r\n48 \r\n<strong>Explanation:</strong>\r\nEven dividers sum 2 + 6 + 10 + 30 = 48</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 18 \r\n<strong>Output: </strong>\r\n26 \r\n<strong>Explanation:</strong>\r\nEven dividers sum 2 + 6 + 18 = 26</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>evenFactors()</strong>&nbsp;which takes&nbsp;an integer <strong>N</strong>&nbsp;as input parameters&nbsp;and returns an integer, number of even factors of N.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(sqrt(N))<br />\r\n<strong>Expected Space Complexity:</strong> O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer N, calculate the sum of all its even factors (divisors).",
                "constraints": [
                    "1 <= N <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "30",
                        "output": "48",
                        "explanation": "The even factors of 30 are 2, 6, 10, and 30. Their sum is 2 + 6 + 10 + 30 = 48."
                    },
                    {
                        "input": "18",
                        "output": "26",
                        "explanation": "The even factors of 18 are 2, 6, and 18. Their sum is 2 + 6 + 18 = 26."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The factors from 2 to sqrt(n) have multiples from sqrt(n)+1 to n.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\npublic:\r\n    int evenFactors(int N){\r\n        // If N is odd, then there are no even factors. \r\n        if (N % 2 != 0) \r\n           return 0;  \r\n        if(N==2) return 2;\r\n      \r\n        // Traversing through all prime factors. \r\n        int res = 1; \r\n        for (int i = 2; i <= sqrt(N); i++) { \r\n      \r\n            // While i divides N, print i and divide N \r\n            int count = 0, curr_sum = 1, curr_term = 1; \r\n            while (N % i == 0) { \r\n                count++; \r\n      \r\n                N = N / i; \r\n      \r\n                // here we remove the 2^0 that is 1.  All \r\n                // other factors \r\n                if (i == 2 && count == 1) \r\n                    curr_sum = 0; \r\n      \r\n                curr_term *= i; \r\n                curr_sum += curr_term; \r\n            } \r\n      \r\n            res *= curr_sum; \r\n        } \r\n      \r\n        // This condition is to handle the case when N\r\n        // is a prime number. \r\n        if (N>= 2) \r\n            res *= (1 + N); \r\n      \r\n        return res;\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    static int evenFactors(int N) \r\n    { \r\n        // If N is odd, then there  \r\n        // are no even factors. \r\n        \r\n        if (N % 2 != 0) \r\n            return 0;  \r\n            \r\n        if(N==2) return 2;\r\n  \r\n        // Traversing through all prime \r\n        // factors. \r\n        int res = 1; \r\n        for (int i = 2; i <= Math.sqrt(N); i++)  \r\n        { \r\n            int count = 0, curr_sum = 1; \r\n            int curr_term = 1; \r\n              \r\n            // While i divides N, print i and \r\n            // divide n \r\n            while (N% i == 0)  \r\n            { \r\n                count++; \r\n  \r\n                N = N / i; \r\n  \r\n                // here we remove the 2^0 that  \r\n                // is 1. All other factors \r\n                if (i == 2 && count == 1) \r\n                    curr_sum = 0; \r\n  \r\n                curr_term *= i; \r\n                curr_sum += curr_term; \r\n            } \r\n  \r\n            res *= curr_sum; \r\n        } \r\n  \r\n        // This condition is to handle the   \r\n        // case when n is a prime number. \r\n        if (N >= 2) \r\n            res *= (1 + N); \r\n  \r\n        return res; \r\n    } \r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nimport math\r\nclass Solution:\r\n    def evenFactors (self, N):\r\n        # If N is odd, then \r\n        # there are no even \r\n        # factors. \r\n        if (N % 2 != 0) : \r\n            return 0 \r\n        \r\n        if(N==2) :\r\n            return 2\r\n       \r\n        # Traversing through \r\n        # all prime factors. \r\n        res = 1\r\n        for i in range(2, (int)(math.sqrt(N)) + 1) : \r\n              \r\n            # While i divides N \r\n            # print i and divide N\r\n            count = 0\r\n            curr_sum = 1\r\n            curr_term = 1\r\n            while (N % i == 0) : \r\n                count= count + 1\r\n       \r\n                N = N // i \r\n       \r\n                # here we remove the \r\n                # 2^0 that is 1. All \r\n                # other factors \r\n                if (i == 2 and count == 1) : \r\n                    curr_sum = 0\r\n       \r\n                curr_term = curr_term * i \r\n                curr_sum = curr_sum + curr_term \r\n              \r\n            res = res * curr_sum \r\n              \r\n       \r\n        # This condition is to \r\n        # handle the case when \r\n        # n is a prime number. \r\n        if (N >= 2) : \r\n            res = res * (1 + N) \r\n       \r\n        return res ",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find number of even factors of N.\n    public int evenFactors(int N)\n    {\n        // If N is odd, then there are no even factors. \n        if (N % 2 != 0) \n            return 0;  \n        if(N==2) return 2;\n      \n        // Traversing through all prime factors. \n        int res = 1; \n        for (int i = 2; i <= Math.Sqrt(N); i++) \n        { \n      \n            // While i divides N, print i and divide N \n            int count = 0, curr_sum = 1, curr_term = 1; \n            while (N % i == 0) \n            { \n                count++; \n      \n                N = N / i; \n      \n                // here we remove the 2^0 that is 1.  All \n                // other factors \n                if (i == 2 && count == 1) \n                    curr_sum = 0; \n      \n                curr_term *= i; \n                curr_sum += curr_term; \n            } \n      \n            res *= curr_sum; \n        } \n      \n        // This condition is to handle the case when N\n        // is a prime number. \n        if (N>= 2) \n            res *= (1 + N); \n      \n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}