{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700423,
            "title": "Closest in BST",
            "titleSlug": "find-the-closest-element-in-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong><a href=\"http://quiz.geeksforgeeks.org/binary-search-tree-set-1-search-and-insertion/\">BST</a></strong>&nbsp;and an integer. Find the least absolute difference between any node value of the BST and the given integer.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>\\t  10\n&nbsp;     /   \\\n&nbsp;    2    11\n&nbsp;  /  \\ \n&nbsp; 1    5\n&nbsp;     /  \\\n&nbsp;    3    6\n&nbsp;     \\\n&nbsp;\\t4\nK = 13\n<strong>Output: </strong>2<strong>\nExplanation: </strong>K=13. The node that has value nearest to K is 11. so the answer is 2</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>\\t8\n&nbsp;   /   \\\n&nbsp;  1     9\n&nbsp;   \\     \\\n&nbsp;    4    10\n&nbsp;   /\n&nbsp;  3\nK = 9\n<strong>Output: </strong>0<strong>\nExplanation: </strong>K=9. The node that has value nearest to K is 9. so the answer is 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= Number of nodes &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= Value stored at nodes(data), K &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and an integer K, find the least absolute difference between any node value in the BST and the given integer K.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5",
                    "1 <= Value stored at nodes(data), K <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "BST:\n      10\n     /   \\\n    2    11\n   /  \\ \n  1    5\n      /  \\\n     3    6\n      \\\n       4\nK = 13",
                        "output": "2",
                        "explanation": "The node in the BST with a value closest to K=13 is 11. The absolute difference between 13 and 11 is 2."
                    },
                    {
                        "input": "BST:\n    8\n   /   \\\n  1     9\n   \\     \\\n    4    10\n   /\n  3\nK = 9",
                        "output": "0",
                        "explanation": "The node in the BST with a value closest to K=9 is 9. The absolute difference between 9 and 9 is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "maq-software"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution\n{\n    public:\n    //Function to find the least absolute difference between any node\n    //value of the BST and the given integer.\n    int minDiff(Node *root, int k)\n    {\n        if(!root)\n            return INT_MAX;\n        \n        //if given value is present in BST then least difference would be 0.\n        if( root->data == k )\n            return 0;\n            \n        //if data at current node is more than given value, we try to find \n        //the answer by calling function recursively for left subtree.\n        if( root->data > k )\n            return min( abs(root->data-k) , minDiff(root->left, k) );\n        \n        //else we call the function recursively for the right subtree.\n        return min( abs(root->data-k) , minDiff(root->right, k) );\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    //Function to find the least absolute difference between any node\n    //value of the BST and the given integer.\n    static int minDiff(Node  root, int k) \n    { \n        if(root==null)\n            return Integer.MAX_VALUE;\n        \n        //if given value is present in BST then least difference would be 0.\n        if(root.data==k)\n            return 0;\n        \n        //if data at current node is more than given value, we try to find \n\t    //the answer by calling function recursively for left subtree.\n        if(root.data>k)\n            return Math.min( Math.abs(root.data-k) , minDiff(root.left,k) );\n        \n        //else we call the function recursively for the right subtree.\n        return Math.min( Math.abs(root.data-k) , minDiff(root.right,k) );\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to find the least absolute difference between any node\n    #value of the BST and the given integer.\n    def minDiff(self,root,k):\n        \n        if root is None:\n            return 999999999\n        \n        #if given value is present in BST then least difference would be 0.\n        if (root.data==k):\n            return 0;\n        \n        #if data at current node is more than given value, we try to find \n        #the answer by calling function recursively for left subtree.\n        if (root.data > k):\n            return min( abs(root.data-k) , self.minDiff(root.left,k) )\n        \n        #else we call the function recursively for the right subtree.\n        return min( abs(root.data-k) , self.minDiff(root.right,k) )",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\n\nclass Solution\n{\n    \n    //Function to find the least absolute difference between any node\n\t//value of the BST and the given integer.\n    public int minDiff(Node root, int k)\n    {\n        if(root == null)\n            return int.MaxValue;\n        \n        //if given value is present in BST then least difference would be 0.\n        if( root.data == k )\n            return 0;\n            \n        //if data at current node is more than given value, we try to find \n        //the answer by calling function recursively for left subtree.\n        if( root.data > k )\n            return Math.Min( Math.Abs(root.data-k) , minDiff(root.left,k) );\n        \n        //else we call the function recursively for the right subtree.\n        return Math.Min(Math.Abs(root.data-k),minDiff(root.right,k));\n    }\n}\n\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n * @param {number} k\n * @returns {number}\n*/\n\n\nclass Solution\n{\n    //Function to find the least absolute difference between any node\n    //value of the BST and the given integer.\n    minDiff(root, k)\n    {\n        if(!root) return 999999999;\n        \n        //if given value is present in BST then least difference would be 0.\n        if( root.data == k )\n            return 0;\n        \n        //if data at current node is more than given value, we try to find \n        //the answer by calling function recursively for left subtree.\n        if( root.data > k )\n            return Math.min(Math.abs(root.data-k),this.minDiff(root.left,k));\n        \n        //else we call the function recursively for the right subtree.\n        return Math.min(Math.abs(root.data-k),this.minDiff(root.right,k));\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}