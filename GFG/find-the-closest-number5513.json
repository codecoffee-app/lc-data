{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702713,
            "title": "Find the closest number",
            "titleSlug": "find-the-closest-number5513",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>sorted</strong> array <strong>arr[]</strong> of positive integers. The task is to find the closest value in the array to the given number <strong>k</strong>. The array may contain duplicate values.<br /></span><span style=\"font-size: 18px;\">Note: If the difference with k is the same for two values in the array return the greater value.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>  arr[] = [1, 3, 6, 7], k = 4\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>We have array arr={1, 3, 6, 7} and target is 4. If we look at the absolute difference of target with every element of the array we will get { |1-4|, |3-4|, |6-4|, |7-4| }  = {3, 1, 2, 3}. So, the closest number is <strong>3.</strong>\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 5, 6, 8, 9], k = 4\n<strong>Output: </strong>5<br /><strong>Explanation: </strong>The absolute difference of 4 is 1 from both 3 and 5. According to the question, we have to return greater value, which is 5.<br /></span></pre>\n<pre><strong>Input: </strong>arr[] = [6, 8, 8, 8, 9, 11, 13, 13, 15, 18, 19], k = 10\n<strong>Output: </strong>11</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; k &le; 10<sup>9</sup><br />1 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use binary search to narrow down and compare adjacent elements to find the closest value to the target.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Method to compare which one is closer.\n    // We find the closest by taking the difference\n    // between the target and both values.\n    int getClosest(int val1, int val2, int k) {\n        if (k - val1 >= val2 - k)\n            return val2;\n        else\n            return val1;\n    }\n\n    // Returns element closest to target in arr[]\n    int findClosest(vector<int>& arr, int k) {\n        int n = arr.size();\n        // Corner cases\n        if (k <= arr[0])\n            return arr[0];\n        if (k >= arr[n - 1])\n            return arr[n - 1];\n\n        // Binary search\n        int i = 0, j = n - 1, mid = 0;\n        while (i < j) {\n            mid = (i + j) / 2;\n\n            if (arr[mid] == k)\n                return arr[mid];\n\n            // If k is less than array element, search in left\n            if (k < arr[mid]) {\n                // If k is greater than previous to mid, return closest of two\n                if (mid > 0 && k > arr[mid - 1])\n                    return getClosest(arr[mid - 1], arr[mid], k);\n\n                // Repeat for left half\n                j = mid;\n            }\n            // If k is greater than mid\n            else {\n                if (mid < n - 1 && k < arr[mid + 1])\n                    return getClosest(arr[mid], arr[mid + 1], k);\n                // Update i\n                i = mid + 1;\n            }\n        }\n\n        // Only single element left after search\n        return arr[mid];\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public static int findClosest(int[] arr, int k) {\n        int n = arr.length;\n\n        // Corner cases\n        if (k <= arr[0]) return arr[0];\n        if (k >= arr[n - 1]) return arr[n - 1];\n\n        // Doing binary search\n        int i = 0, j = n, mid = 0;\n        while (i < j) {\n            mid = (i + j) / 2;\n\n            if (arr[mid] == k) return arr[mid];\n\n            /* If k is less than array element,\n               then search in left */\n            if (k < arr[mid]) {\n\n                // If k is greater than previous\n                // to mid, return closest of two\n                if (mid > 0 && k > arr[mid - 1])\n                    return getClosest(arr[mid - 1], arr[mid], k);\n\n                /* Repeat for left half */\n                j = mid;\n            }\n\n            // If k is greater than mid\n            else {\n                if (mid < n - 1 && k < arr[mid + 1])\n                    return getClosest(arr[mid], arr[mid + 1], k);\n                i = mid + 1; // update i\n            }\n        }\n\n        // Only single element left after search\n        return arr[mid];\n    }\n\n    // Method to compare which one is the more close\n    // We find the closest by taking the difference\n    //  between the k and both values. It assumes\n    // that val2 is greater than val1 and k lies\n    // between these two.\n    public static int getClosest(int val1, int val2, int k) {\n        if (k - val1 >= val2 - k)\n            return val2;\n        else\n            return val1;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def findClosest(self, arr, k):\n        n = len(arr)\n        if (k <= arr[0]):\n            return arr[0]\n        if (k >= arr[n - 1]):\n            return arr[n - 1]\n\n        # Doing binary search\n        i = 0\n        j = n\n        mid = 0\n        while (i < j):\n            mid = (i + j) // 2\n\n            if (arr[mid] == k):\n                return arr[mid]\n\n            # If k is less than array\n            # element, then search in left\n            if (k < arr[mid]):\n\n                # If k is greater than previous\n                # to mid, return closest of two\n                if (mid > 0 and k > arr[mid - 1]):\n                    return self.getClosest(arr[mid - 1], arr[mid], k)\n\n                # Repeat for left half\n                j = mid\n\n            # If k is greater than mid\n            else:\n                if (mid < n - 1 and k < arr[mid + 1]):\n                    return self.getClosest(arr[mid], arr[mid + 1], k)\n\n                # update i\n                i = mid + 1\n\n        # Only single element left after search\n        return arr[mid]\n\n    # Method to compare which one is the more close.\n    # We find the closest by taking the difference\n    # between the k and both values. It assumes\n    # that val2 is greater than val1 and k lies\n    # between these two.\n    def getClosest(self, val1, val2, k):\n\n        if (k - val1 >= val2 - k):\n            return val2\n        else:\n            return val1\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @param {number} k\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find closest number in the array.\n    findClosest(arr, k) {\n        let n = arr.length;\n        // Corner cases\n        if (k <= arr[0]) {\n            return arr[0];\n        }\n        if (k >= arr[n - 1]) {\n            return arr[n - 1];\n        }\n\n        // Doing binary search\n        let i = 0;\n        let j = n;\n        let mid = 0;\n        while (i < j) {\n            mid = Math.floor((i + j) / 2);\n\n            if (arr[mid] == k) {\n                return arr[mid];\n            }\n\n            // If k is less than array\n            // element, then search in left\n            if (k < arr[mid]) {\n\n                // If k is greater than previous\n                // to mid, return closest of two\n                if (mid > 0 && k > arr[mid - 1]) {\n                    return this.getClosest(arr[mid - 1], arr[mid], k);\n                }\n\n                // Repeat for left half\n                j = mid;\n            }\n\n            // If k is greater than mid\n            else {\n                if (mid < n - 1 && k < arr[mid + 1]) {\n                    return this.getClosest(arr[mid], arr[mid + 1], k);\n                }\n\n                // update i\n                i = mid + 1;\n            }\n        }\n\n        // Only single element left after search\n        return arr[mid];\n    }\n\n    // Method to compare which one is the more close.\n    // We find the closest by taking the difference\n    // between the k and both values. It assumes\n    // that val2 is greater than val1 and k lies\n    // between these two.\n    getClosest(val1, val2, k) {\n\n        if (k - val1 >= val2 - k) {\n            return val2;\n        } else {\n            return val1;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}