{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703331,
            "title": "Find the closest pair from two arrays",
            "titleSlug": "find-the-closest-pair-from-two-arrays4215",
            "content": "<p><span style=\"font-size: 18px;\">Given two <strong>sorted </strong>arrays <strong>arr</strong> and <strong>brr</strong> and a number<strong> x</strong>, find the pair whose <strong>sum</strong> is closest to <strong>x</strong> and the pair has an element from<strong> each</strong> array. In the case of multiple closest pairs return any one of them.<br />Note: Can return the two numbers in any manner.&nbsp;</span><span style=\"font-size: 18px;\">The driver code takes care of the printing of the closest difference.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> N = 4, M = 4<br />arr[ ] = {1, 4, 5, 7}\nbrr[ ] = {10, 20, 30, 40} \nX = 32\n<strong>Output :</strong> <br />1, 30\n<strong>Explanation:</strong>\nThe closest pair whose sum is closest\nto 32 is {1, 30} = 31.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> N = 4, M = 4<br />arr[ ] = {1, 4, 5, 7}\nbrr[ ] = {10, 20, 30, 40}\nX = 50 <strong>\nOutput :</strong> <br />7, 40 \n<strong>Explanation:</strong> \nThe closest pair whose sum is closest\nto 50 is {7, 40} = 47.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You only need to complete the function <strong>printClosest()</strong> that takes an array <strong>(arr)</strong>, another array <strong>(brr)</strong>, size of array arr <strong>(N),&nbsp;</strong>size of array brr <strong>(M),</strong>&nbsp;and return the array of two integers whose sum is closest to <strong>X</strong>. The driver code takes care of the printing of the closest difference.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N+M).<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N, M &le; 10<sup>5</sup><br />1 &le; A[i], B[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted arrays, `arr` and `brr`, and a target number `x`, find a pair of numbers (one from each array) whose sum is closest to `x`. If multiple pairs have the same closest sum, return any one of them. Return the pair as an array of two integers. Note: The driver code handles printing the closest difference.",
                "constraints": [
                    "1 <= N, M <= 10^5",
                    "1 <= A[i], B[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 4, M = 4\narr = {1, 4, 5, 7}\nbrr = {10, 20, 30, 40}\nX = 32",
                        "output": "1, 30",
                        "explanation": "The pair {1, 30} from `arr` and `brr` sums to 31, which has the smallest absolute difference from the target value of 32."
                    },
                    {
                        "input": "N = 4, M = 4\narr = {1, 4, 5, 7}\nbrr = {10, 20, 30, 40}\nX = 50",
                        "output": "7, 40",
                        "explanation": "The pair {7, 40} from `arr` and `brr` sums to 47, which has the smallest absolute difference from the target value of 50."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Initializes two pointers, one at the begining of one array and second at the end of another array. Now iterate through both arrays to find the pair whose sum is closest to the given integer x, updating res_l and res_r accordingly.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Backend complete function teamplate for C++\r\n\r\nclass Solution{\r\n  public:\r\n    vector<int> printClosest(int arr[], int brr[], int n, int m, int x) {\r\n        \r\n        swap(n,m);\r\n        \r\n    \t// Initialize the diff between pair sum and x.\r\n    \tint diff = INT_MAX;\r\n    \r\n    \t// res_l and res_r are result indexes from ar1[] and ar2[]\r\n    \t// respectively\r\n    \tint res_l, res_r;\r\n    \r\n    \t// Start from left side of ar1[] and right side of ar2[]\r\n    \tint l = 0, r = n-1;\r\n    \twhile (l<m && r>=0)\r\n    \t{\r\n        \t// If this pair is closer to x than the previously\r\n        \t// found closest, then update res_l, res_r and diff\r\n        \tif (abs(arr[l] + brr[r] - x) < diff)\r\n        \t{\r\n        \t\tres_l = l;\r\n        \t\tres_r = r;\r\n        \t\tdiff = abs(arr[l] + brr[r] - x);\r\n        \t}\r\n        \r\n        \t// If sum of this pair is more than x, move to smaller\r\n        \t// side\r\n        \tif (arr[l] + brr[r] > x)\r\n        \t\tr--;\r\n        \telse // move to the greater side\r\n        \t\tl++;\r\n    \t}\r\n        vector<int> v;\r\n        \r\n    \tv.push_back(arr[res_l]);\r\n    \tv.push_back(brr[res_r]);\r\n    \treturn v;\r\n    \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Solution{\r\n\tpublic static ArrayList<Integer> printClosest (int arr[], int brr[], int n, int m, int x) {\r\n        int temp = n;\r\n        n = m;\r\n        m = temp;\r\n        int diff = Integer.MAX_VALUE;\r\n  \r\n        // res_l and res_r are result indexes from ar1[] and ar2[]\r\n        // respectively\r\n        int res_l = 0, res_r = 0;\r\n        \r\n        // Start from left side of ar1[] and right side of ar2[]\r\n        int l = 0, r = n-1;\r\n        while (l<m && r>=0)\r\n        {\r\n            // If this pair is closer to x than the previously\r\n            // found closest, then update res_l, res_r and diff\r\n            if (Math.abs(arr[l] + brr[r] - x) < diff)\r\n            {\r\n              res_l = l;\r\n              res_r = r;\r\n              diff = Math.abs(arr[l] + brr[r] - x);\r\n            }\r\n            \r\n            // If sum of this pair is more than x, move to smaller\r\n            // side\r\n            if (arr[l] + brr[r] > x)\r\n              r--;\r\n            else // move to the greater side\r\n              l++;\r\n        }\r\n    \t\r\n        ArrayList<Integer> v = new ArrayList<>();\r\n        \r\n        v.add(arr[res_l]);\r\n        v.add(brr[res_r]);\r\n        return v;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def printClosest(self, arr, brr, n, m, x):\r\n        # Swap n and m\r\n        n, m = m, n\r\n\r\n        # Initialize the diff between pair sum and x\r\n        diff = float(\"inf\")\r\n\r\n        # res_l and res_r are result indexes from arr and brr respectively\r\n        res_l, res_r = 0, 0\r\n\r\n        # Start from the left side of arr and the right side of brr\r\n        l, r = 0, n - 1\r\n\r\n        while l < m and r >= 0:\r\n            # If this pair is closer to x than the previously found closest, update res_l, res_r, and diff\r\n            if abs(arr[l] + brr[r] - x) < diff:\r\n                res_l, res_r = l, r\r\n                diff = abs(arr[l] + brr[r] - x)\r\n\r\n            # If the sum of this pair is more than x, move to the smaller side\r\n            if arr[l] + brr[r] > x:\r\n                r -= 1\r\n            else:\r\n                # Move to the greater side\r\n                l += 1\r\n         \r\n\r\n        # Create a list to store the result\r\n        result = [arr[res_l], brr[res_r]]\r\n        return result\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number[]} brr\n * @param {number} n\n * @param {number} m\n * @param {number} x\n * @returns {number[]}\n*/\n\nclass Solution\n{\n    //Function to print the element whose sum with x is closest to x.\n    printClosest(arr, brr, n, m, x)\n    {\n        let diff = Number.MAX_SAFE_INTEGER;\n        let res_l = 0, res_r = 0;\n\n        let l = 0, r = m - 1;\n        while (l < n && r >= 0) {\n            if (Math.abs(arr[l] + brr[r] - x) < diff) {\n                res_l = l;\n                res_r = r;\n                diff = Math.abs(arr[l] + brr[r] - x);\n            }\n\n            if (arr[l] + brr[r] > x) {\n                r--;\n            } else {\n                l++;\n            }\n        }\n        \n        return [arr[res_l], brr[res_r]];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}