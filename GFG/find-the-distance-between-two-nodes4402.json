{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705845,
            "title": "Shortest distance in infinite tree",
            "titleSlug": "find-the-distance-between-two-nodes4402",
            "content": "<p><span style=\"font-size: 18px;\">Consider you have an infinitely long binary tree having the&nbsp;pattern as below<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1</span></p>\n<p><span style=\"font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /&nbsp; &nbsp; &nbsp;\\<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2 &nbsp; &nbsp; &nbsp;3&nbsp;&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/&nbsp; \\&nbsp; &nbsp; &nbsp;/&nbsp; &nbsp;\\<br />&nbsp; &nbsp; &nbsp; &nbsp; 4&nbsp; 5 &nbsp; &nbsp;6 &nbsp;7<br />&nbsp; &nbsp; .&nbsp; . &nbsp;. &nbsp;. &nbsp; . &nbsp;. &nbsp;.&nbsp; .&nbsp;<br />Given two nodes with values x and y,&nbsp;the task is to find the length of the shortest path between the two nodes.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>x = 1, y = 3\n<strong>Output: </strong>1\n<strong>Explanation: </strong>3 is the child of 1 so, distance between them is 1.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>x = 2, y = 2\n<strong>Output: </strong>0\n<strong>Explanation: </strong>As the given node x and y are same so the length is 0.</span>&nbsp;</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>x = 5, y = 9\n<strong>Output: </strong>3\n<strong>Explanation: </strong>There are three edges between 5 and 9.</span> </pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= x, y &lt;=10<sup>7</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Observe the pattern carefully. You can move up the tree from a given node by dividing the node number&nbsp;by 2,&nbsp;thus incrementing the length by 1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "playsimple"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to calculate the distance between two integers X and Y\nclass Solution {\n  public:\n    int distance(int x, int y) {\n        int c = 0; // variable to count the number of steps\n\n        // Iterate until X is equal to Y\n        while (x != y) {\n            // If X is greater than Y, divide X by 2 and increment the count\n            if (x > y) {\n                x /= 2;\n                c += 1;\n            }\n            // If Y is greater than X, divide Y by 2 and increment the count\n            else {\n                y /= 2;\n                c += 1;\n            }\n        }\n\n        return c; // Return the distance between X and Y\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public int distance(int x, int y) {\n        int steps = 0;\n\n        while (x != y) {\n            if (x > y) {\n                x /= 2;\n            } else {\n                y /= 2;\n            }\n            steps++;\n        }\n\n        return steps;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def distance(self, x, y):\n        steps = 0\n\n        while x != y:\n            if x > y:\n                x //= 2\n            else:\n                y //= 2\n            steps += 1\n\n        return steps\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    distance(x, y) {\n        let c = 0; // Variable to count the number of steps\n\n        // Iterate until x is equal to y\n        while (x !== y) {\n            if (x > y) {\n                x = Math.floor(x / 2);\n                c += 1;\n            } else {\n                y = Math.floor(y / 2);\n                c += 1;\n            }\n        }\n\n        return c; // Return the distance between x and y\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}