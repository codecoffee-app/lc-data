{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703977,
            "title": "Find the element at given index",
            "titleSlug": "find-the-element-at-given-index4630",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of <strong>n</strong> elements. Perform <strong>k</strong> right circular rotations on given ranges [<strong>L...R</strong>]. After performing these rotations, we need to find element at a given index <strong>x</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 5, x = 1, k = 2\narr[] = {1, 2, 3, 4, 5}\nranges[][] = {{0, 2}, {0, 3}}\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Rotating the elements in range \n0-2 and 0-3, we have array as 4 3 1 2 5. \nElement at first position is 3.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 3, x = 2, k = 1\narr[] = {1, 2, 3}\nranges[][] = {{0, 1}}\n<strong>Output:</strong> 3\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>findElement()</strong>&nbsp;which takes the array of integers&nbsp;<strong>arr, n, x, ranges</strong>&nbsp;and&nbsp;<strong>k&nbsp;</strong>as parameters and returns an integer&nbsp;denoting the answer.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(k)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= n &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>5</sup><br />1 &lt;= k &lt;= 10<sup>5</sup><br />x &lt; n<br />0 &lt;= L &lt;= R&lt;n</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Instead of rotating the array according to intervals again and again, why not <strong>shift the index element</strong> according to given rotations?</p>",
            "<p>Following are the steps:</p>\n\n<ul>\n\t<li>Store all the rotations.</li>\n\t<li>Traverse the stored rotations from last to first</li>\n\t<li>If the index lies between the Rotation range of L R, then decreement it.</li>\n\t<li>Else if, its value is equal to L then make it equal to R.</li>\n</ul>\n\n<p>This <strong>index</strong> value is the answer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\n\n\nclass Solution{\n  public:\n    // Function to compute the element at\n    // given index\n    int findElement(int arr[], int n, int x, int ranges[][2], int k) {\n        for (int i = k - 1; i >= 0; i--) {\n    \n            // Range[left...right]\n            int left = ranges[i][0];\n            int right = ranges[i][1];\n    \n            // Rotation will not have any effect\n            if (left <= x && right >= x) {\n                if (x == left)\n                    x = right;\n                else\n                    x--;\n            }\n        }\n    \n        // Returning new element\n        return arr[x];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Returns the element at position x after applying the given ranges.\n    int findElement(int[] arr, int n, int x, int[][] ranges, int k) {\n        // Iterating through the given ranges in reverse order.\n        for (int i = k - 1; i >= 0; i--) {\n            int left = ranges[i][0];\n            int right = ranges[i][1];\n            // Checking if x is within the current range.\n            if (left <= x && right >= x) {\n                // Updating x based on the range.\n                if (x == left) x = right;\n                else x--;\n            }\n        }\n        // Returning the element at position x.\n        return arr[x];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to compute the element at the given index\n    findElement(n, x, k, arr, ranges) {\n        for (let i = k - 1; i >= 0; i--) {\n            // Range[left...right]\n            let left = ranges[i][0];\n            let right = ranges[i][1];\n\n            // Rotation will not have any effect\n            if (left <= x && right >= x) {\n                if (x === left) {\n                    x = right;\n                } else {\n                    x--;\n                }\n            }\n        }\n\n        // Returning new element\n        return arr[x];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}