{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702772,
            "title": "Single Among Doubles in a Sorted",
            "titleSlug": "find-the-element-that-appears-once-in-sorted-array0624",
            "content": "<p><span style=\"font-size: 18px;\">Given a sorted array arr[]. Find the element that appears only once in the array. All other elements appear exactly twice.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">You solution must run in O(log n) time and O(1) space.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 4 is the only element that appears exactly once.<br /></span></pre>\n<pre><strong>Input: </strong>arr[] = [5]\n<strong>Output:</strong> 5</pre>\n<pre><strong>Input: </strong>arr[] = [1, 2, 2, 3, 3]\n<strong>Output:</strong> 1</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use binary search to find the element that appears only once by checking pairs of adjacent elements and adjusting the search range based on their parity.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "d-e-shaw",
            "ola-cabs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findOnce(vector<int>& arr) {\n        int n = arr.size();\n        int low = 0, high = n - 1;\n        while (low < high) {\n            // Find the middle point\n            int mid = (low + high) / 2;\n\n            // If mid is even and element next to mid is\n            // same as mid, then output element lies on\n            // right side, else on left side\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1])\n                    low = mid + 2;\n                else\n                    high = mid;\n            } else // If mid is odd\n            {\n                if (arr[mid] == arr[mid - 1])\n                    low = mid + 1;\n                else\n                    high = mid - 1;\n            }\n        }\n        return arr[low];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    int findOnce(int[] arr) {\n        int n = arr.length;\n        int low = 0, high = n - 1;\n        while (low < high) {\n            // Find the middle point\n            int mid = (low + high) / 2;\n\n            // If mid is even and element next to mid is\n            // same as mid, then output element lies on\n            // right side, else on left side\n            if (mid % 2 == 0) {\n                if (arr[mid] == arr[mid + 1])\n                    low = mid + 2;\n                else\n                    high = mid;\n            } else // If mid is odd\n            {\n                if (arr[mid] == arr[mid - 1])\n                    low = mid + 1;\n                else\n                    high = mid - 1;\n            }\n        }\n        return arr[low];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def findOnce(self, arr):\n        n = len(arr)\n        low = 0\n        high = n - 1\n        while low < high:\n            # Find the middle point\n            mid = (low + high) // 2\n\n            # If mid is even and element next to mid is\n            # same as mid, then output element lies on\n            # right side, else on left side\n            if mid % 2 == 0:\n                if arr[mid] == arr[mid + 1]:\n                    low = mid + 2\n                else:\n                    high = mid\n            else:  # If mid is odd\n                if arr[mid] == arr[mid - 1]:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n        return arr[low]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// The given array is sorted in ascending order.\n// We can use binary search to find the element that appears only once.\n\nclass Solution {\n    findOnce(arr) {\n        let n = arr.length;\n        let low = 0;\n        let high = n - 1;\n\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n\n            // If mid is even and element next to mid is same as mid, then output\n            // element lies on right side, else on left side\n            if (mid % 2 === 0) {\n                if (arr[mid] === arr[mid + 1]) {\n                    low = mid + 2;\n                } else {\n                    high = mid;\n                }\n            } else { // If mid is odd\n                if (arr[mid] === arr[mid - 1]) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n\n        return arr[low];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}