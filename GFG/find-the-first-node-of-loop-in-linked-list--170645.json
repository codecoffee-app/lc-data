{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713150,
            "title": "Find the first node of loop in linked list",
            "titleSlug": "find-the-first-node-of-loop-in-linked-list--170645",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>head</strong> of the singly linked list.&nbsp;</span><span style=\"font-size: 18px;\">If a <strong>loop</strong> is present</span><span style=\"font-size: 18px;\"> in the list then <strong>return</strong> the </span><span style=\"font-size: 18px;\"><strong>first</strong> node of the loop else return </span><strong><em style=\"font-size: 18px;\">NULL</em></strong><span style=\"font-size: 18px;\">.</span></p>\n<p><span ><span style=\"box-sizing: border-box; line-height: 1.7em; font-family: Nunito; color: #1e2229; background-color: #ffffff;\"><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; font-family: var(--gfg-font-secondary) !important; color: var(--text-color) !important; background-color: var(--background) !important;\">Custom Input format:</span><br style=\"box-sizing: border-box; line-height: 1.7em; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important; background-color: var(--background) !important;\" />A<span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; font-family: var(--gfg-font-secondary) !important; color: var(--text-color) !important; background-color: var(--background) !important;\">&nbsp;head&nbsp;</span>of a singly linked list<span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; font-family: var(--gfg-font-secondary) !important; color: var(--text-color) !important; background-color: var(--background) !important;\">&nbsp;</span>and a<span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; font-family: var(--gfg-font-secondary) !important; color: var(--text-color) !important; background-color: var(--background) !important;\">&nbsp;</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; font-family: var(--gfg-font-secondary) !important; color: var(--text-color) !important; background-color: var(--background) !important;\">pos&nbsp;</span>(1-based index) which denotes the position of the node to which the last node points to.&nbsp;</span><span style=\"box-sizing: border-box; line-height: 1.7em; font-family: Nunito; color: #1e2229; background-color: #ffffff;\">If&nbsp;<span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; font-family: var(--gfg-font-secondary) !important; color: var(--text-color) !important; background-color: var(--background) !important;\">pos&nbsp;</span>= 0, it means the last node points to null, indicating there is no loop.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/713150/Web/Other/blobid0_1723112915.png\" width=\"348\" height=\"113\" /> <br /><strong>Output: </strong>3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>We can see that there exists a loop in the given linked list and the first node of the loop is 3.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/713150/Web/Other/blobid1_1723112944.png\" width=\"342\" height=\"77\" /> <br /><strong>Output: </strong>-1\n<strong>Explanation: </strong>No loop exists in the above linked list.So the output is -1.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= no. of nodes &lt;= 10<sup>6</sup></span><br /><span style=\"font-size: 18px;\">1 &lt;= node-&gt;data &lt;= 10<sup>6</sup>&nbsp;<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use&nbsp;Floyd&rsquo;s Cycle-Finding Algorithm.</span></p>",
            "<p><span >Use two pointers to traverse the linked list: move one pointer by one node and the other by two nodes. If they meet, there's a loop; otherwise, there isn't.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    Node* findFirstNode(Node* head) {\n        // Initialize two pointers, slow and fast\n        Node* slow = head;\n        Node* fast = head;\n\n        // Traverse the list\n        while (fast != nullptr && fast->next != nullptr) {\n\n            // Move slow pointer by one step\n            slow = slow->next;\n\n            // Move fast pointer by two steps\n            fast = fast->next->next;\n\n            // Detect loop\n            if (slow == fast) {\n\n                // Move slow to head, keep fast at meeting point\n                slow = head;\n\n                // Move both one step at a time until they meet\n                while (slow != fast) {\n                    slow = slow->next;\n                    fast = fast->next;\n                }\n\n                // Return the meeting node, which\n                // is the start of the loop\n                return slow;\n            }\n        }\n\n        // No loop found\n        return nullptr;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public static Node findFirstNode(Node head) {\n        // Initialize two pointers, slow and fast\n        Node slow = head;\n        Node fast = head;\n\n        // Traverse the list\n        while (fast != null && fast.next != null) {\n\n            // Move slow pointer by one step\n            slow = slow.next;\n\n            // Move fast pointer by two steps\n            fast = fast.next.next;\n\n            // Detect loop\n            if (slow == fast) {\n\n                // Move slow to head, keep fast at meeting point\n                slow = head;\n\n                // Move both one step at a time until they meet\n                while (slow != fast) {\n                    slow = slow.next;\n                    fast = fast.next;\n                }\n\n                // Return the meeting node, which is the\n                // start of the loop\n                return slow;\n            }\n        }\n\n        // No loop found\n        return null;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findFirstNode(self, head):\n        # Initialize two pointers, slow and fast\n        slow = head\n        fast = head\n\n        # Traverse the list\n        while fast and fast.next:\n\n            # Move slow pointer by one step\n            slow = slow.next\n\n            # Move fast pointer by two steps\n            fast = fast.next.next\n\n            # Detect loop\n            if slow == fast:\n\n                # Move slow to head, keep\n                # fast at meeting point\n                slow = head\n\n                # Move both one step at a time until\n                # they meet\n                while slow != fast:\n                    slow = slow.next\n                    fast = fast.next\n\n                # Return the meeting node, which is the\n                # start of the loop\n                return slow\n\n        # No loop found\n        return None\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/* Node Class\nclass Node{\n    constructor(data){\n        this.data = data; // value stored in node\n        this.next = null; // to store the next node\n    }\n}\n*/\n\nclass Solution {\n    findFirstNode(head) {\n        let slow = head;\n        let fast = head;\n\n        // Traverse the list\n        while (fast !== null && fast.next !== null) {\n\n            // Move slow pointer by one step\n            slow = slow.next;\n\n            // Move fast pointer by two steps\n            fast = fast.next.next;\n\n            // Detect loop\n            if (slow === fast) {\n\n                // Move slow to head, keep fast at meeting point\n                slow = head;\n\n                // Move both one step at a time until they meet\n                while (slow !== fast) {\n                    slow = slow.next;\n                    fast = fast.next;\n                }\n\n                // Return the meeting node, which is\n                // the start of the loop\n                return slow;\n            }\n        }\n\n        // No loop found\n        return null;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}