{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703770,
            "title": "Find the Highest number",
            "titleSlug": "find-the-highest-number2259",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer array <strong>a[]</strong> of size <strong>n</strong>, find the highest element of the array. The array will either be strictly increasing or strictly increasing and then strictly decreasing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>a[i] != a[i+1]</span>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">11\n1 2 3 4 5 6 5 4 3 2 1<strong>\nOutput: <br /></strong>6\n<strong>Explanation: <br /></strong>Highest element of array a[] is 6.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n5\n1 2 3 4 5\n<strong>Output:<br /></strong>5\n<strong>Explanation: <br /></strong>Highest element of array a[] is 5.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function <strong>findPeakElement()&nbsp;</strong>which takes the array <strong>a[]</strong> as the input parameter and returns the highest element of the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(log(n))<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= n &lt;= 10<sup>6</sup><br />1 &lt;= a[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use binary Search to find the highest number.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\npublic:\r\n    // Function to find the peak element in the given array.\r\n    int findPeakElement(vector<int>& a) \r\n    {\r\n        // Initializing left and right pointers.\r\n        int l=0;\r\n        int r=a.size()-1;\r\n\r\n        // Binary search to find the peak element.\r\n        while(l<r){\r\n            // Calculating the mid index.\r\n            int mid=(l+r)/2;\r\n\r\n            // Checking if the element at mid is greater than the element on its right.\r\n            // If yes, then the peak should be on the left side of the array.\r\n            if(a[mid]>a[mid+1])r=mid;\r\n\r\n            // If not, then the peak should be on the right side of the array.\r\n            else l=mid+1;\r\n        }\r\n\r\n        // Returning the peak element.\r\n        return a[l];\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findPeakElement(List<Integer> a) {\n        int l = 0;\n        int r = a.size() - 1;\n\n        // Binary search to find the peak element.\n        while (l < r) {\n            // Calculating the mid index.\n            int mid = (l + r) / 2;\n\n            // Checking if the element at mid is greater than the element on its right.\n            // If yes, then the peak should be on the left side of the array.\n            if (a.get(mid) > a.get(mid + 1)) {\n                r = mid;\n            }\n            // If not, then the peak should be on the right side of the array.\n            else {\n                l = mid + 1;\n            }\n        }\n\n        // Returning the peak element.\n        return a.get(l);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def findPeakElement(self, a: List[int]) -> int:\n        # Initializing left and right pointers.\n        l = 0\n        r = len(a) - 1\n\n        # Binary search to find the peak element.\n        while l < r:\n            # Calculating the mid index.\n            mid = (l + r) // 2\n\n            # Checking if the element at mid is greater than the element on its right.\n            # If yes, then the peak should be on the left side of the array.\n            if a[mid] > a[mid + 1]:\n                r = mid\n\n            # If not, then the peak should be on the right side of the array.\n            else:\n                l = mid + 1\n\n        # Returning the peak element.\n        return a[l]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findPeakElement(a){\n      let l=0;\n      let r=a.length-1;\n      while(l<r){\n          let mid=Math.floor((l+r)/2);\n          if(a[mid]>a[mid+1])\n              r=mid;\n          else \n              l=mid+1;\n      }\n      return a[l];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}