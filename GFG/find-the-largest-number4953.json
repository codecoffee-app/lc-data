{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704419,
            "title": "Find the largest number",
            "titleSlug": "find-the-largest-number4953",
            "content": "<div>\n<p><span style=\"font-size:18px\">Given an integer <strong>N</strong>&nbsp;the task is to find the largest number which is smaller or equal to it and has its digits in non-decreasing order.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Examples 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 200\n<strong>Output:</strong>\n199\n<strong>Explanation:</strong>\nIf the given number \nis 200, the largest \nnumber which is smaller \nor equal to it having \ndigits in non decreasing \norder is 199.\n</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>\nN = 139\n<strong>Output:</strong>\n139\n<strong>Explanation:</strong>\n139 is itself in \nnon-decresing order.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>find()</strong>&nbsp;which takes one integer value&nbsp;<strong>N</strong>,<strong>&nbsp;</strong>as input parameter&nbsp;and return the&nbsp;largest number&nbsp;which is smaller or equal to it and has its digits in non-decreasing order.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\n<strong>Expected Space Complexity:</strong>&nbsp;O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=N&lt;=10<sup>5</sup></span></p>\n</div>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, find the largest number which is less than or equal to N and has its digits in non-decreasing order (i.e., digits are sorted in ascending order).",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "200",
                        "output": "199",
                        "explanation": "The largest number smaller than or equal to 200 with non-decreasing digits is 199."
                    },
                    {
                        "input": "139",
                        "output": "139",
                        "explanation": "The number 139 itself has non-decreasing digits, so it is the answer."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Perform Brute Force.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    \n    int find(int N)\n    {\n        /* loop to recursively check the numbers less \n        than or equal to given number*/\n        long long int x = 0; \n        for (x=N; x>=1; x--) \n        { \n            int no = x; \n            int prev_dig = 11; \n      \n            // Keep traversing digits from \n            // right to left. For every digit \n            // check if it is smaller than prev_dig \n            bool flag = true; \n            while (no != 0) \n            { \n                if (prev_dig < no%10) \n                { \n                   flag = false; \n                   break; \n                } \n                prev_dig = no % 10; \n                no /= 10; \n            } \n      \n            // We found the required number \n            if (flag == true) \n               break; \n        } \n      \n        return x;\n    }\n};\n\n\n\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    static int find(int N){\n         // loop to recursively check  \n        // the numbers less than or  \n        // equal to given number \n        int x = 0; \n        for (x = N; x >= 1; x--) \n        { \n            int no = x; \n            int prev_dig = 11; \n      \n            // Keep traversing digits  \n            // from right to left. For  \n            // every digit check if it \n            // is smaller than prev_dig \n            boolean flag = true; \n            while (no != 0) \n            { \n                if (prev_dig < no % 10) \n                { \n                    flag = false; \n                    break; \n                } \n                prev_dig = no % 10; \n                no /= 10; \n            } \n      \n            // We found the  \n            // required number \n            if (flag == true) \n            break; \n        } \n      \n        return x;   \n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def find (self, N):\n        ''' loop to recursively check the numbers  \n        less than or equal to given number'''\n        x = 0\n        for x in range(N, 0, -1): \n            no = x \n            prev_dig = 11\n      \n            # Keep traversing digits from \n            # right to left. For every digit \n            # check if it is smaller than prev_dig \n            flag = True\n            while (no != 0): \n                if (prev_dig < no % 10): \n                    flag = False\n                    break\n                  \n                prev_dig = no % 10\n                no //= 10\n      \n            # We found the required number \n            if (flag == True): \n                break\n        return x ",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number} N\n * @return {number}\n */\nclass Solution {\n    find(N) {\n        let x = 0;\n        for (x = N; x >= 1; x--) {\n            let no = x;\n            let prev_dig = 11;\n            let flag = true;\n            while (no !== 0) {\n                if (prev_dig < no % 10) {\n                    flag = false;\n                    break;\n                }\n                prev_dig = no % 10;\n                no = Math.floor(no / 10);\n            }\n            if (flag === true) {\n                break;\n            }\n        }\n        return x;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Function to find the maximum number of repeated subarray.\n    public int find(int N)\n    {\n        int x = 0;\n        for (x = N; x >= 1; x--)\n        {\n            int no = x;\n            int prev_dig = 11;\n            bool flag = true;\n\n            // Keep traversing digits from right to left.\n            // For every digit, check if it is smaller than prev_dig.\n            while (no != 0)\n            {\n                if (prev_dig < no % 10)\n                {\n                    flag = false;\n                    break;\n                }\n                prev_dig = no % 10;\n                no /= 10;\n            }\n\n            // We found the required number.\n            if (flag == true)\n                break;\n        }\n\n        return x;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}