{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713369,
            "title": "Find the longest string",
            "titleSlug": "find-the-longest-string--170645",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of strings <strong>arr[]</strong>. You have to find the longest string which is&nbsp;lexicographically smallest and also&nbsp;all of its prefix strings are already present in the array.</span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> ab a abc abd</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> abc</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">We can see that length of the longest </span>\n<span style=\"font-size: 18px;\">string is 3. And there are two string \"abc\" and \"abd\"</span>\n<span style=\"font-size: 18px;\">of length 3. But for string \"abc\" , all of its prefix</span>\n<span style=\"font-size: 18px;\">\"a\" \"ab\" \"abc\" are present in the array. So the</span>\n<span style=\"font-size: 18px;\">output is \"abc\".</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">ab a aa abd abc<strong><span style=\"font-size: 18px;\"> </span></strong>abda abdd abde abdab</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">abdab</span>\n<strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">We can see that each string is fulfilling</span>\n<span style=\"font-size: 18px;\">the condition. For each string, all of its prefix </span>\n<span style=\"font-size: 18px;\">are present in the array.And \"abdab\" is the longest</span>\n<span style=\"font-size: 18px;\">string among them. So the ouput is \"abdab\".</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>longestString()</strong>&nbsp;which takes the array arr<strong>[]</strong>&nbsp;as input parameter&nbsp;and returns the <strong>longest string </strong>which is also lexicographically&nbsp;smallest.And if there is no such string return empty string.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(NlogN)<br /><strong>Expected Space Complexity: </strong>O(N)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= length of arr[]&nbsp;&lt;= 10<sup>3</sup><br />1 &lt;= arr[i].length&nbsp;&lt;=30</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We can use hashmap or set to check if all the prefix of a string is present in the array or not.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Node\n{\nprivate:\n    Node *links[26]; // array of pointers to child nodes\n    bool flag = false; // flag to mark the end of a word\n\npublic:\n    // function to check if the node contains a key\n    bool containsKey(char ch)\n    {\n        return (links[ch - 'a'] != NULL);\n    }\n\n    // function to set the child node\n    void set(char ch, Node *node)\n    {\n        this->links[ch - 'a'] = node;\n    }\n\n    // function to get the child node\n    Node *get(char ch)\n    {\n        return links[ch - 'a'];\n    }\n\n    // function to mark the node as the end of a word\n    void setEnd()\n    {\n        flag = true;\n    }\n\n    // function to check if the node is the end of a word\n    bool isEnd()\n    {\n        return flag;\n    }\n};\n\nclass Trie\n{\nprivate:\n    Node *root; // root node of the trie\n\npublic:\n    // constructor to initialize the trie\n    Trie() : root(new Node()){}; \n\n    // function to insert a word into the trie\n    void insert(string word)\n    {\n        Node *node = root; // start from the root node\n        for (int i = 0; i < word.size(); i++)\n        {\n            // if the child node does not exist, create a new one\n            if (!node->containsKey(word[i]))\n            {\n                node->set(word[i], new Node());\n            }\n\n            // move to the child node\n            node = node->get(word[i]);\n        }\n        // mark the last node as the end of the word\n        node->setEnd();\n    }\n\n    // function to perform breadth-first search on the trie\n    string bfs()\n    {\n        Node *node = root; // start from the root node\n        queue<pair<Node *, string>> q;\n        string ans; // store the longest string\n        char pre;\n        string temp = \"\"; // temporary variable\n        q.push(make_pair(node, \"\"));\n        while (!q.empty())\n        {\n            int sz = q.size();\n\n            for (int i = 0; i < sz; i++)\n            {\n                Node *cur = q.front().first; // current node\n                string s = q.front().second; // current string formed from the trie\n                q.pop();\n\n                // if the current node is not the root node and not the end of a word, skip it\n                if (cur != root && !cur->isEnd())\n                    continue;\n                \n                // add all the child nodes to the queue\n                for (int j = 0; j < 26; j++)\n                {\n                    char ch = char(j + 'a');\n                    if (cur->get(ch))\n                    {\n                        q.push(make_pair(cur->get(ch), s + ch));\n                    }\n                }\n                \n                // update the longest string if necessary\n                if (ans.length() < s.length())\n                {\n                    ans = s;\n                }\n            }\n        }\n        return ans;\n    }\n};\n\nclass Solution\n{\npublic:\n    // main function to find the longest string from a list of words\n    string longestString(vector<string> &words)\n    {\n        string ans;\n        Trie *trie = new Trie(); // create a new Trie\n        for (string w : words)\n        {\n            trie->insert(w); // insert each word into the Trie\n        }\n        ans = trie->bfs(); // perform BFS on the Trie to find the longest string\n        return ans; // return the result\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Node\r\n{\r\n    Node links[] = new Node[26];\r\n    boolean flag = false;\r\n    \r\n    boolean containsKey(char ch)\r\n    {\r\n        return (links[ch - 'a'] != null);\r\n    }\r\n\r\n    void set(char ch, Node node)\r\n    {\r\n        this.links[ch - 'a'] = node;\r\n    }\r\n\r\n    Node get(char ch)\r\n    {\r\n        return links[ch - 'a'];\r\n    }\r\n\r\n    void setEnd()\r\n    {\r\n        flag = true;\r\n    }\r\n\r\n    boolean isEnd()\r\n    {\r\n        return flag;\r\n    }\r\n}\r\nclass Pair{\r\n\tNode first;\r\n\tString second;\r\n\tPair(Node first, String second){\r\n\t\tthis.first = first;\r\n\t\tthis.second = second;\r\n\t}\r\n}\r\n\r\nclass Trie\r\n{\r\n    Node root;\r\n    Trie(){\r\n    \tthis.root = new Node();\r\n    }\r\n    void insert(String word)\r\n    {\r\n        Node node = root;\r\n        for (int i = 0; i < word.length(); i++)\r\n        {\r\n            if (!node.containsKey(word.charAt(i)))\r\n            {\r\n                node.set(word.charAt(i), new Node());\r\n            }\r\n\r\n            node = node.get(word.charAt(i));\r\n        }\r\n        node.setEnd();\r\n    }\r\n\r\n    String bfs()\r\n    {\r\n        Node node = root;\r\n        Queue<Pair> q = new LinkedList<>();\r\n        //queue<pair<Node *, string>> q;\r\n        String ans = \"\";\r\n//        char pre;\r\n//        String temp = \"\";\r\n        q.add(new Pair(node, \"\"));\r\n        while (!q.isEmpty())\r\n        {\r\n            int sz = q.size();\r\n\r\n            for (int i = 0; i < sz; i++)\r\n            {\r\n                Node cur = q.peek().first;\r\n                String s = q.peek().second;\r\n                q.poll();\r\n\r\n                if (cur != root && !cur.isEnd())\r\n                    continue;\r\n                for (int j = 0; j < 26; j++)\r\n                {\r\n                    char ch = (char)(j + 'a');\r\n                    if (cur.get(ch) != null)\r\n                    {\r\n                        q.add(new Pair(cur.get(ch), s + ch));\r\n                    }\r\n                }\r\n                if (ans.length() < s.length())\r\n                {\r\n                    ans = s;\r\n                }\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}\r\nclass Solution{\r\n\tpublic static String longestString(int n, String[] arr) {\r\n\t\tString ans;\r\n        Trie trie = new Trie();\r\n        for (String w : arr)\r\n        {\r\n            trie.insert(w);\r\n        }\r\n        ans = trie.bfs();\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\r\n\r\n# Node class for the Trie data structure\r\nclass TrieNode:\r\n    def __init__(self):\r\n        self.children = [None for i in range(26)]  # List to store children nodes\r\n        self.isWord = False  # Boolean flag to check if current node represents a complete word\r\n\r\n# Trie data structure\r\nclass Trie:\r\n    def __init__(self):\r\n        self.Tree = TrieNode()  # Creating root node of the Trie\r\n\r\n    # Function to insert a word into the Trie\r\n    def insert(self, s):\r\n        cur = self.Tree\r\n        prev = None\r\n        for i in s:\r\n            if cur.children[self.index(i)] is None:  # If character not present in children, create a new node\r\n                cur.children[self.index(i)] = TrieNode()\r\n            prev = cur\r\n            cur = cur.children[self.index(i)]  # Move to the next node\r\n        cur.isWord = True  # Mark the current node as a complete word\r\n\r\n    # Function to check if a word is present in the Trie\r\n    def contains(self, s):\r\n        cur = self.Tree\r\n        cur.isWord = True\r\n        prev = None\r\n        for i in s:\r\n            if cur.children[self.index(i)] is None or cur.isWord == False:  # If character not found or the current node does not represent a complete word, return False\r\n                return False\r\n            prev = cur\r\n            cur = cur.children[self.index(i)]  # Move to the next node\r\n        return True  # Return True if the word is present in the Trie\r\n\r\n    # Function to get the index of a character\r\n    def index(self, char):\r\n        return ord(char) - ord(\"a\")\r\n\r\nclass Solution():\r\n    # Function to find the longest string in the array that is present in the Trie\r\n    def longestString(self, arr, n):\r\n        trie = Trie()  # Initialize the Trie\r\n        for s in arr:\r\n            trie.insert(s)  # Insert all strings in the Trie\r\n        ans = \"\"  # Variable to store the longest string\r\n\r\n        # Traverse through all strings in the array\r\n        for s in arr:\r\n            if trie.contains(s):  # If the string is present in the Trie\r\n                if len(s) > len(ans):  # If it is longer than the current longest string\r\n                    ans = s  # Update the longest string\r\n                elif len(s) == len(ans):  # If it has the same length as the current longest string\r\n                    ans = min(ans, s)  # Compare lexicographically and update the longest string\r\n        return ans  # Return the longest string",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    public string longestString(List<string> words) {\n        Trie trie = new Trie(); // create a new Trie\n        foreach (string word in words) {\n            trie.Insert(word); // insert each word into the Trie\n        }\n        return trie.Bfs(); // perform BFS on the Trie to find the longest string\n    }\n}\n\nclass Node {\n    private Node[] links = new Node[26]; // array of pointers to child nodes\n    private bool flag = false;           // flag to mark the end of a word\n\n    // function to check if the node contains a key\n    public bool ContainsKey(char ch) { return (links[ch - 'a'] != null); }\n\n    // function to set the child node\n    public void Set(char ch, Node node) { this.links[ch - 'a'] = node; }\n\n    // function to get the child node\n    public Node Get(char ch) { return links[ch - 'a']; }\n\n    // function to mark the node as the end of a word\n    public void SetEnd() { flag = true; }\n\n    // function to check if the node is the end of a word\n    public bool IsEnd() { return flag; }\n}\n\nclass Trie {\n    private Node root; // root node of the trie\n\n    // constructor to initialize the trie\n    public Trie() { root = new Node(); }\n\n    // function to insert a word into the trie\n    public void Insert(string word) {\n        Node node = root; // start from the root node\n        for (int i = 0; i < word.Length; i++) {\n            // if the child node does not exist, create a new one\n            if (!node.ContainsKey(word[i])) {\n                node.Set(word[i], new Node());\n            }\n\n            // move to the child node\n            node = node.Get(word[i]);\n        }\n        // mark the last node as the end of the word\n        node.SetEnd();\n    }\n\n    // function to perform breadth-first search on the trie\n    public string Bfs() {\n        Node node = root; // start from the root node\n        Queue<(Node, string)> q = new Queue<(Node, string)>();\n        string ans = \"\"; // store the longest string\n        q.Enqueue((node, \"\"));\n        while (q.Count > 0) {\n            int sz = q.Count;\n\n            for (int i = 0; i < sz; i++) {\n                Node cur = q.Peek().Item1; // current node\n                string s = q.Peek().Item2; // current string formed from the trie\n                q.Dequeue();\n\n                // if the current node is not the root node and not the end of a word,\n                // skip it\n                if (cur != root && !cur.IsEnd()) continue;\n\n                // add all the child nodes to the queue\n                for (int j = 0; j < 26; j++) {\n                    char ch = (char)(j + 'a');\n                    if (cur.Get(ch) != null) {\n                        q.Enqueue((cur.Get(ch), s + ch));\n                    }\n                }\n\n                // update the longest string if necessary\n                if (ans.Length < s.Length) {\n                    ans = s;\n                }\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {string[]} arr\r\n * @param {number} n\r\n * @returns {string}\r\n*/\r\n\r\nclass TrieNode {\r\n    constructor() {\r\n        this.children = new Array(26).fill(null);  // Array to store children nodes\r\n        this.isWord = false;  // Boolean flag to check if current node represents a complete word\r\n    }\r\n}\r\n\r\nclass Trie {\r\n    constructor() {\r\n        this.Tree = new TrieNode();  // Creating root node of the Trie\r\n    }\r\n\r\n    // Function to insert a word into the Trie\r\n    insert(s) {\r\n        let cur = this.Tree;\r\n        let prev = null;\r\n        for (let i = 0; i < s.length; i++) {\r\n            if (cur.children[this.index(s[i])] === null) {  // If character not present in children, create a new node\r\n                cur.children[this.index(s[i])] = new TrieNode();\r\n            }\r\n            prev = cur;\r\n            cur = cur.children[this.index(s[i])];  // Move to the next node\r\n        }\r\n        cur.isWord = true;  // Mark the current node as a complete word\r\n    }\r\n\r\n    // Function to check if a word is present in the Trie\r\n    contains(s) {\r\n        let cur = this.Tree;\r\n        cur.isWord = true;\r\n        let prev = null;\r\n        for (let i = 0; i < s.length; i++) {\r\n            if (cur.children[this.index(s[i])] === null || cur.isWord === false) {  // If character not found or the current node does not represent a complete word, return False\r\n                return false;\r\n            }\r\n            prev = cur;\r\n            cur = cur.children[this.index(s[i])];  // Move to the next node\r\n        }\r\n        return true;  // Return True if the word is present in the Trie\r\n    }\r\n\r\n    // Function to get the index of a character\r\n    index(char) {\r\n        return char.charCodeAt(0) - \"a\".charCodeAt(0);\r\n    }\r\n}\r\n\r\nclass Solution {\r\n    // Function to find the longest string in the array that is present in the Trie\r\n    longestString(arr, n) {\r\n        let trie = new Trie();  // Initialize the Trie\r\n        for (let s of arr) {\r\n            trie.insert(s);  // Insert all strings in the Trie\r\n        }\r\n        let ans = \"\";  // Variable to store the longest string\r\n\r\n        // Traverse through all strings in the array\r\n        for (let s of arr) {\r\n            if (trie.contains(s)) {  // If the string is present in the Trie\r\n                if (s.length > ans.length) {  // If it is longer than the current longest string\r\n                    ans = s;  // Update the longest string\r\n                } else if (s.length === ans.length) {  // If it has the same length as the current longest string\r\n                    if (s < ans) {  // Compare lexicographically and update the longest string\r\n                        ans = s;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return ans;  // Return the longest string\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}