{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705907,
            "title": "Find the Maximum Flow",
            "titleSlug": "find-the-maximum-flow2126",
            "content": "<p><span style=\"font-size:18px\">Given a graph&nbsp;which represents a flow network</span>&nbsp;<span style=\"font-size:18px\">with N vertices numbered 1 to N and M edges.Find the maximum flow from vertex numbered 1 to vertex numbered N.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">In a flow network,every edge has a flow&nbsp;capacity&nbsp;and the maximum flow of a path can&#39;t exceed the flow-capacity of an edge in the path.<br />\r\n<br />\r\n<strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 5, M =  4\r\nEdges[]= {{1,2,1},{3,2,2},{4,2,3},{2,5,5}}\r\n<strong>Output: </strong>1 \r\n<strong>Explanation: </strong>\r\n1 - 2 - 3\r\n   / \\\r\n  4   5 \r\n1 unit can flow from 1 -&gt; 2 - &gt;5 </span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4, M = 4\r\nEdges[] = {{1,2,8},{1,3,10},{4,2,2},{3,4,3}}\r\n<strong>Output: </strong>5 \r\n<strong>Explanation:</strong>\r\n  1 - 2 \r\n  |   |\r\n  3 - 4\r\n3 unit can flow from 1 -&gt; 3 -&gt; 4\r\n2 unit can flow from 1 -&gt; 2 -&gt; 4\r\nTotal max flow from 1 to N = 3+2=5</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function<strong>&nbsp;solve()</strong>&nbsp;which takes the <strong>N&nbsp;</strong>(the number of vertices) ,<strong>M </strong>(the number of Edges) and the array <strong>Edges</strong>[]&nbsp;(Where Edges[i]&nbsp;denoting an undirected edge between&nbsp;Edges[i][0] and&nbsp;Edges[i][1]&nbsp;with a flow capacity of Edges[i][2]),&nbsp;and returns the&nbsp;integer&nbsp;denoting the maximum flow from 1 to N.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(max_flow*M)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N+M)</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Where max_flow is the maximum flow from&nbsp;1 to N</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N,M,Edges[i][2] &lt;= 1000</span><br />\r\n<span style=\"font-size:18px\">1 &lt;= Edges[i][0],Edges[i][1] &lt;= N</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Ford-Fulkerson Algorithm.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "struct node\r\n{\r\n    int index;\r\n    int cost;\r\n    struct node *next;\r\n};\r\n\r\n\r\nclass Solution\r\n{\r\npublic:\r\n    int maxval;\r\n    struct node graph[5001];\r\n    Solution()\r\n    {\r\n        maxval=1000000001;\r\n    }\r\n    void add(int u,int v,int w)\r\n    {\r\n    \tint flag=0;\r\n    \tstruct node *start = &graph[u];\r\n    \twhile(start->next!=NULL)\r\n    \t{\r\n    \t\tif((start->next)->index == v)\r\n    \t\t{\r\n    \t    \t(start->next)->cost+=w;\r\n    \t\t\tflag=1;\r\n    \t\t\tbreak;\r\n    \t\t}\r\n    \t\tstart=start->next;\r\n    \t}\r\n    \tif(flag==0)\r\n    \t{\r\n    \t    struct node *temp=(struct node*)malloc(sizeof(struct node));\r\n            temp->index=v;\r\n            temp->cost=w;\r\n            temp->next=NULL;\r\n    \t\tstart->next=temp;\r\n    \t}\r\n    \tflag=0;\r\n    \r\n    \tstruct node *start2 = &graph[v];\r\n        while(start2->next!=NULL)\r\n        {\r\n            if((start2->next)->index == u)\r\n            {\r\n                (start2->next)->cost+=w;\r\n                flag=1;\r\n                break;\r\n            }\r\n            start2=start2->next;\r\n        }\r\n        if(flag==0)\r\n        {\r\n            struct node *temp2=(struct node*)malloc(sizeof(struct node));\r\n            temp2->index=u;\r\n            temp2->cost=w;\r\n            temp2->next=NULL;\r\n            start2->next=temp2;\r\n        }\r\n    }\r\n    \r\n    int min(int val, int u,int v)\r\n    {\r\n    \tint cost;\r\n    \tstruct node *start2 = &graph[u];\r\n        while(start2->next!=NULL)\r\n        {\r\n            if((start2->next)->index == v)\r\n            {\r\n                cost = (start2->next)->cost;\r\n                break;\r\n            }\r\n            start2=start2->next;\r\n        }\r\n    \t\r\n    \tif(cost<val)\r\n    \t\treturn cost;\r\n    \telse\r\n    \t\treturn val;\r\n    }\r\n    \r\n    void insert(int u,int v,int flow)\r\n    {\r\n    \tstruct node *start = &graph[u];\r\n        while(start->next!=NULL)\r\n        {\r\n            if((start->next)->index == v)\r\n            {\r\n                ((start->next)->cost)-=flow;\r\n                break;\r\n            }\r\n            start=start->next;\r\n        }\r\n    \r\n        struct node *start2 = &graph[v];\r\n        while(start2->next!=NULL)\r\n        {\r\n            if((start2->next)->index == u)\r\n            {\r\n                ((start2->next)->cost)+=flow;\r\n                break;\r\n            }\r\n            start2=start2->next;\r\n        }\r\n    }\r\n    \r\n    bool bfs(int s,int t,int parent[])\r\n    {\r\n    \tbool visited[5001];\r\n    \tqueue<int> q;\r\n    \tq.push(s);\r\n    \tfor(int i=0;i<5001;i++)\r\n    \t\tvisited[i]=false;\r\n    \tparent[s]=-1;\r\n    \tvisited[s]=true;\r\n    \twhile(!q.empty())\r\n    \t{\r\n    \t\tint u=q.front();\r\n    \t\tq.pop();\r\n    \t\tstruct node *start2 = &graph[u];\r\n    \t    while(start2->next!=NULL)\r\n            {\r\n                if((start2->next)->cost>0 && visited[(start2->next)->index]==false)\r\n                {\r\n                    visited[(start2->next)->index]=true;\r\n    \t\t       \tq.push((start2->next)->index);\r\n    \t\t        parent[(start2->next)->index]=u;\r\n                }\r\n                start2=start2->next;\r\n            }\r\n    \t}\r\n    \tif(visited[t]==true)\r\n    \t\treturn 1;\r\n    \telse return 0;\r\n    }\r\n    \r\n    long long int fordfulkerson(int s, int t)\r\n    {\t\r\n    \tint parent[5001];\r\n    \tlong long int max_flow=0;\r\n    \tint path_flow;\r\n    \tint u,v;\r\n    \r\n    \twhile(bfs(s,t,parent))\r\n    \t{\r\n    \t\tpath_flow = maxval;\r\n    \t\t\r\n    \t\tfor(v=t;v!=s;v=parent[v])\r\n    \t\t{\r\n    \t\t\tu=parent[v];\r\n    \t\t\tpath_flow=min(path_flow,u,v);\r\n    \t\t}\t\r\n    \r\n    \t\tfor(v=t;v!=s;v=parent[v])\r\n    \t\t{\r\n    \t\t\tu=parent[v];\r\n    \t\t\tinsert(u,v,path_flow);\r\n    \t\t}\r\n    \t\tmax_flow+=path_flow;\t\r\n    \t}\r\n    \treturn max_flow;\r\n    }\r\n    \r\n    int findMaxFlow(int N,int M,vector<vector<int>> Edges)\r\n    {\r\n        int i,j,u,v,w;\r\n        memset(graph,0,sizeof graph);\r\n        for(j=0;j<=N;j++)\r\n        {\r\n        \tgraph[j].index=j;\r\n        \tgraph[j].cost=0;\r\n        \tgraph[j].next=NULL;\r\n        }\r\n        for(i=0;i<M;i++)\r\n        {\r\n            int u = Edges[i][0];\r\n            int v = Edges[i][1];\r\n            int w = Edges[i][2];\r\n            if(u!=v)\r\n            \tadd(u,v,w);\t\r\n        }\r\n        return fordfulkerson(1,N);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# The Solution class contains the implementation of finding the maximum flow in a flow network.\n\nclass Solution:\n    # Method to find the maximum flow in a flow network\n    def findMaxFlow(self, N, M, Edges): \n        # Create an adjacency matrix representation of the graph with N+1 nodes\n        graph = []\n        for _ in range(N + 1):\n            graph.append([0] * (N + 1))\n\n        # Update the adjacency matrix with the capacities of the edges\n        for edge in Edges:\n            graph[edge[0]][edge[1]] += edge[2]\n            graph[edge[1]][edge[0]] += edge[2]\n        \n        # Initialize the maximum flow to 0 and create an empty array for storing the parent nodes\n        max_flow = 0\n        parent = [None] * (N + 1)\n        \n        # Perform the Ford-Fulkerson algorithm using Breadth-First Search\n        while self.bfs(graph, N, parent):\n            # Find the minimum capacity along the augmenting path\n            v = N\n            flow = float('inf')\n            while v != 1:\n                flow = min(flow, graph[parent[v]][v])\n                v = parent[v]\n                \n            # Update the capacities of the edges on the augmenting path\n            max_flow += flow\n            v = N\n            while v != 1:\n                graph[parent[v]][v] -= flow\n                graph[v][parent[v]] += flow\n                v = parent[v]\n                \n        # Return the maximum flow\n        return max_flow\n            \n    # Method to perform Breadth-First Search to determine whether there is an augmenting path from source to sink\n    def bfs(self, graph, N, parent):\n        # Initialize the queue with the source node and mark it as visited\n        Q = [1]\n        is_visited = [False] * (N+1)\n        is_visited[1] = True\n        \n        # Perform BFS by visiting each unvisited neighbor of the current node\n        while len(Q) != 0:\n            u = Q.pop(0)\n            \n            for v in range(1, N+1):\n                w = graph[u][v]\n                # If there is a capacity from u to v and v has not been visited, update the parent and mark v as visited\n                if is_visited[v] == False and w > 0:\n                    parent[v] = u\n                    is_visited[v] = True\n                    Q.append(v)\n                    # If the sink node is reached, return True as there is an augmenting path\n                    if v == N:\n                        return True\n                    \n        # If no augmenting path is found, return False\n        return False",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}