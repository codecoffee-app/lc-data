{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703903,
            "title": "Median of an Array",
            "titleSlug": "find-the-median0527",
            "content": "<p><span >Given an array <strong>arr[]</strong> of integers, calculate the median.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [90, 100, 78, 89, 67]\n<strong>Output: </strong>89\n<strong>Explanation: </strong>After sorting the array middle element is the median \n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [56, 67, 30, 79]\n<strong>Output: </strong>61.5\n<strong>Explanation: </strong>In case of even number of elements, average of two middle elements is the median.</span><span > <br /></span></pre>\n<pre><span ><strong>Input:&nbsp;</strong>arr[] = [1, 2]<br /><strong>Output:</strong> 1.5<br /><strong>Explanation:</strong> The average of both elements will result in 1.5.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, calculate the median. The median is the middle element when the array is sorted. If the array has an even number of elements, the median is the average of the two middle elements.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[90, 100, 78, 89, 67]",
                        "output": "89",
                        "explanation": "After sorting the array to [67, 78, 89, 90, 100], the middle element is 89."
                    },
                    {
                        "input": "[56, 67, 30, 79]",
                        "output": "61.5",
                        "explanation": "After sorting the array to [30, 56, 67, 79], the two middle elements are 56 and 67.  The average of 56 and 67 is (56 + 67) / 2 = 61.5."
                    },
                    {
                        "input": "[1, 2]",
                        "output": "1.5",
                        "explanation": "The two elements are 1 and 2. The average of 1 and 2 is (1+2)/2 = 1.5"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Rearrange the array such a way so you can get the middle value.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "samsung",
            "factset"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    double findMedian(vector<int> &arr) {\n        // Sorting the vector in ascending order\n        sort(arr.begin(), arr.end());\n\n        double ans;\n        // if the size of the vector is odd\n        if (arr.size() & 1)\n            // Median is the middle element\n            ans = arr[arr.size() / 2];\n        // If the size of the vector is even\n        else\n            // Median is the average of the two middle elements\n            ans = (arr[arr.size() / 2] + arr[arr.size() / 2 - 1]) / 2.0;\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public double findMedian(int[] arr) {\n        // Sorting the list in ascending order\n        Arrays.sort(arr);\n\n        int n = arr.length;\n        // If the size of the list is odd\n        if (n % 2 == 1) {\n            // Median is the middle element\n            return arr[n / 2];\n        } else {\n            // Median is the average of the two middle elements\n            return (arr[n / 2] + arr[n / 2 - 1]) / 2.0;\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findMedian(self, arr):\n        arr.sort()  # Sorting the list in ascending order\n\n        n = len(arr)\n        # If the size of the list is odd\n        if n % 2 == 1:\n            # Median is the middle element\n            return arr[n // 2]\n        else:\n            # Median is the average of the two middle elements\n            return (arr[n // 2] + arr[(n // 2) - 1]) / 2.0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMedian(arr) {\n        arr.sort((a, b) => a - b); // Sorting the array in ascending order\n\n        let n = arr.length;\n        // If the array size is odd, return the middle element\n        if (n % 2 === 1) {\n            return arr[Math.floor(n / 2)];\n        } else {\n            // If even, return the average of the two middle elements\n            return (arr[n / 2] + arr[(n / 2) - 1]) / 2.0;\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}