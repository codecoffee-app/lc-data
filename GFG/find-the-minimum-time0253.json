{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704889,
            "title": "Find the minimum time",
            "titleSlug": "find-the-minimum-time0253",
            "content": "<p><span style=\"font-size:18px\">Geek wants to scan N documents using two scanners. If S1 and S2 are the time taken by the scanner 1 and scanner 2 to scan a single document, find the minimum time required to scan all the N documents. You can use one or more scanners at a time.</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nS1 = 2, S2 = 4, N = 2\r\n<strong>Output:</strong> 4\r\n<strong>Explaination:</strong> Here we have two possibilities. \r\nEither scan both documents in scanner 1 or\r\nscan one document in each scanner. \r\nIn both the cases time required is 4.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nS1 = 1, S2 = 3, N = 2\r\n<strong>Output:</strong> 2\r\n<strong>Explaination:</strong> Here the optimal approach is to \r\nscan both of them in the first scanner.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>minTime()</strong> which takes S1, S2 and N as input parameters and returns the minimum tme required to scan the documents.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(logN)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; S1, S2, N &le; 10<sup>6</sup><br />\r\n1 &le; S1*N, S2*N &le; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Say n1 are scanned in first scanner and n2 in second scanner. Try for all possible combinations of n1 and n2.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "oracle"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find the minimum time\n    int minTime(int S1, int S2, int N){\n        int a = S1, b = S2;\n\n        // Sort the speeds\n        if(a > b)\n            swap(a, b);\n\n        int low = 0, high = N, mid, mini = b*N;\n\n        // Binary search to find the minimum time\n        while(low <= high){\n            mid = (low + high)/2;\n\n            // Calculate the time taken based on the speeds\n            mini = min(mini , max(mid*a , (N - mid)*b));\n\n            // Adjust the search range based on the time taken\n            if(mid*a <= (N - mid)*b)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n\n        // Return the minimum time\n        return mini;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int minTime(int S1, int S2, int N)\n    {\n        int a = S1, b = S2;\n\n        // Sort the speeds\n        if(a > b)\n            {\n            int temp = a;\n            a = b;\n            b = temp;\n            }\n\n        int low = 0, high = N, mid, mini = b*N;\n\n        // Binary search to find the minimum time\n        while(low <= high){\n            mid = (low + high)/2;\n\n            // Calculate the time taken based on the speeds\n            mini = Math.Min(mini , Math.Max(mid*a , (N - mid)*b));\n\n            // Adjust the search range based on the time taken\n            if(mid*a <= (N - mid)*b)\n                low = mid + 1;\n            else\n                high = mid - 1;\n        }\n\n        // Return the minimum time\n        return mini;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}