{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703162,
            "title": "Find the N-th character",
            "titleSlug": "find-the-n-th-character5925",
            "content": "<p><span >Given a binary string <strong>s</strong>. Perform <strong>r</strong> iterations on string <strong>s</strong>, where in each iteration <strong>0 </strong>becomes<strong> 01</strong> and <strong>1 </strong>becomes<strong> 10</strong>. Find the <strong>nth</strong> character (considering <strong>0 based </strong>indexing) of the string after performing these <strong>r</strong> iterations (see examples for better understanding).</span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>Input</strong>:\ns = \"1100\"\nr = 2\nn = 3\n<strong>Output</strong>:\n1\n<strong>Explanation</strong>: \nAfter 1st iteration <strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">s</strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> becomes \"</span>10100101<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">\".<br /></span>After 2nd iteration <strong>s</strong> becomes \"100<strong>1</strong>100101100110<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">\".<br /></span></span><span >Now, we can clearly see that the character at 3rd index is 1, and so the output.\n</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input</strong>:\ns = \"1010\"\nr = 1\nn = 2\n<strong>Output</strong>:\n0\n<strong>Explanation </strong>: \nAfter 1st iteration <strong>s</strong> becomes \"10<strong>0</strong>11001\".\nNow, we can clearly see that the character at 2nd index is 0, and so the output.</span></pre>\n<div><span ><strong>Your task:</strong></span></div>\n<div><span >You don't need to read input or print anything. Your task is to complete the function <strong>nthCharacter()</strong> which takes the string <strong>s</strong> and integers <strong>r</strong> and <strong>n</strong> as input parameters and returns the n-th character of the string after performing r operations on s.</span></div>\n<div>&nbsp;</div>\n<div><span ><strong>Expected Time Complexity:</strong> O(r*|s|)</span></div>\n<div><span ><strong>Expected Auxilary Space:</strong> O(|s|)</span></div>\n<div>&nbsp;</div>\n<div><span ><strong>Constraints</strong>: </span><br /><span >1 &le; |s|&nbsp;&le; 10<sup>3</sup></span><br /><span >1 &le; r &le; 20</span><br /><span >0 &le; n &lt;&nbsp;|s|</span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Optimize brute force approach by using some observation.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Backend complete function template for C++\n\nclass Solution{\n  public:\n    //Function to find the nth character in the given pattern\n    char nthCharacter(string s, int r, int n) {\n        //Incrementing n by 1 as the pattern starts from index 1\n        n++;\n        //String to store the final pattern\n        string f;\n        //Variable to keep track of iteration and calculate pattern length\n        long int it = 0, p, i, j, len = 0;\n        \n        //Loop to calculate the pattern length until it is greater than n\n        while (len < n) {\n            it++;\n            //Calculating pattern length using exponentiation\n            len = it * pow(2, r);\n        }\n        \n        //Calculating the power of 2 for the pattern length\n        p = pow(2, r);\n        \n        //Reducing n by 1 to get the correct index in the pattern\n        n--;\n        //Taking modulo with pattern length to handle cyclical pattern\n        n = n % p;\n        \n        //If it is the first iteration, increment it by 1\n        if (it == 0)\n            it++;\n        \n        //Appending the character at the corresponding index in the pattern\n        f += s[it - 1];\n        \n        //Loop to generate the pattern by doubling its length r times\n        for (i = 0; i < r; i++) {\n            //Clearing the previous pattern\n            s.clear();\n            \n            //Generating the new pattern by doubling each character\n            for (j = 0; j < f.length(); j++) {\n                if (f[j] == '1')\n                    s += \"10\";\n                else\n                    s += \"01\";\n            }\n            \n            //Updating the final pattern\n            f.clear();\n            f += s;\n        }\n        //Returning the nth character in the final pattern\n        return f[n];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public char nthCharacter(String s, int r, int n){\n        n++; // Increment to match 0-based indexing\n        StringBuilder f=new StringBuilder(\"\"); // Initialize a new StringBuilder\n        \n        // Find the value of it such that len < n\n        int it = 0, p, i, j, len = 0;\n        while (len < n) {\n            it++;\n            len = (int)(it * Math.pow(2, r));\n        }\n        \n        p = (int)Math.pow(2, r); // Find the value of p\n        n--; // Decrement n to match 0-based indexing\n        n = n % p; // Take modulo of n with p to get the index within p\n        \n        if (it == 0)\n            it++; // If it is 0, increment it to 1\n        f.append(s.charAt(it - 1)); // Append the character at index it-1 to StringBuilder f\n\n        // Loop to create string f by doubling the characters in each iteration\n        for (i = 0; i < r; i++) {\n            StringBuilder x = new StringBuilder(\"\"); // Initialize a new StringBuilder\n            for (j = 0; j < f.length(); j++) {\n                if (f.charAt(j) == '1') // If the character is '1', append \"10\" to x\n                    x.append(\"10\");\n                else // If the character is '0', append \"01\" to x\n                    x.append(\"01\");\n            }\n            f = x; // Assign x to f\n        }\n        \n        return f.charAt(n); // Return the character at index n from string f\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\nclass Solution:\n\n    #Function to find the nth character in the given pattern.\n    def nthCharacter(self, s, r, n):\n\n        n += 1\n        f = \"\"\n        it = 0\n        l = 0\n\n        #loop to find the length of the sequence based on r value.\n        while l<n:\n            it += 1\n            l = it * pow(2, r)\n        \n        p = pow(2, r)\n\n        #updating n value based on the length of the sequence.\n        n -= 1\n        n %= p\n        \n        if it == 0:\n            it += 1\n\n        #appending the character at the ith position to the output string.\n        f += s[it - 1]\n\n        #loop to generate the sequence by iterating r times.\n        for i in range(r):\n            s = \"\"\n            for j in range(len(f)):\n                if f[j] == '1':\n                    s += \"10\"\n                else:\n                    s += \"01\"\n            f = s\n\n        #returning the nth character from the generated sequence.\n        return f[n]",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @param {number} R\n * @param {number} N\n * @returns {string}\n*/\n\nclass Solution {\n    //Function to find the nth character in the given string with given values of R and N.\n    nthCharacter(S, R, N) {\n        N += 1;\n        let f = \"\";\n        let it = 0;\n        let l = 0;\n\n        //loop to find the length of the sequence based on r value.\n        while (l < N) {\n            it += 1;\n            l = it * Math.pow(2, R);\n        }\n\n        let p = Math.pow(2, R);\n\n        //updating n value based on the length of the sequence.\n        N -= 1;\n        N %= p;\n\n        if (it === 0) {\n            it += 1;\n        }\n\n        //appending the character at the ith position to the output string.\n        f += S[it - 1];\n\n        //loop to generate the sequence by iterating r times.\n        for (let i = 0; i < R; i++) {\n            let s = \"\";\n            for (let j = 0; j < f.length; j++) {\n                if (f[j] === '1') {\n                    s += \"10\";\n                } else {\n                    s += \"01\";\n                }\n            }\n            f = s;\n        }\n\n        //returning the nth character from the generated sequence.\n        return f[N];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}