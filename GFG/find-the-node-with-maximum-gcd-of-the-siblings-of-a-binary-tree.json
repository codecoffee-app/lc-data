{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713149,
            "title": "Parent of Max GCD Siblings in a Binary Tree",
            "titleSlug": "find-the-node-with-maximum-gcd-of-the-siblings-of-a-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree. The task is to find the Node with maximum GCD of the siblings of this tree. You have to return the value of the node whose two immediate children has the maximum gcd.<br />If there are multiple such nodes, return&nbsp;the node which has the maximum value.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Siblings:</strong>&nbsp;Nodes with the same parent are called siblings.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>GCD (Greatest Common Divisor)</strong>&nbsp;of two positive integers is the largest positive integer that divides both numbers without a remainder.</span></p>\n<h4><span style=\"font-size: 18px;\"><strong>Note:</strong></span></h4>\n<ul>\n<li><span style=\"font-size: 18px;\">Consider those nodes which have a&nbsp;sibling.</span></li>\n<li><span style=\"font-size: 18px;\">Return 0&nbsp;if no such pair of siblings found.</span></li>\n</ul>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n\\t\\t  4\n\\t\\t/   \\\n\\t     5     2\n\\t\\t    /  \\\n\\t\\t   3    1\n\\t\\t  /  \\\n\\t\\t 6   12\n\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> For the above tree, the maximum\nGCD for the siblings is formed for nodes 6 and 12\nfor the children of node 3.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>\n\\t\\t1\n\\t    /   \\\n\\t  3\\t5\n\\t/  \\    /  \\\n     6    9  4    8\n\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> For the above tree, the maximum\nGCD for the siblings is formed for nodes 4 and 8\nfor the children of node 5.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to take input. Just complete the function<strong> maxGCD() </strong>that takes the root <strong>node </strong>as a parameter and returns the value of the node whose two immediate children has the maximum gcd.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|Number of nodes|) .<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(height of the tree) .</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= Number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= Data of a node &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the node whose immediate children have the maximum Greatest Common Divisor (GCD).  If multiple nodes satisfy this condition, return the node with the largest value. Note: Only consider nodes that have two children (siblings). If no such pair of siblings exists, return 0.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5",
                    "1 <= Data of a node <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "Binary tree with root 4:\n      4\n     /   \\\n    5     2\n   /  \\\n  3    1\n /  \\\n6   12",
                        "output": "3",
                        "explanation": "The maximum GCD for siblings is achieved by nodes 6 and 12, children of node 3. GCD(6,12) = 6."
                    },
                    {
                        "input": "Binary tree with root 1:\n     1\n    /   \\\n   3     5\n  /  \\   /  \\\n 6    9 4    8",
                        "output": "5",
                        "explanation": "The maximum GCD for siblings is achieved by nodes 4 and 8, children of node 5. GCD(4,8) = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Just simple Tree traversal will work for this problem.<br />\nTraverse the whole tree and for every node calculate the GCD of its two children and return the node containing the maximum GCD.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n    int ans, g; // variables to store the answer and gcd\n\n    // recursive function to solve the problem\n    void solve(Node *root)\n    {\n        if(root==NULL) // if the current node is null, return\n        return;\n        \n        // check if both the left and right child of the current node exist\n        if(root->left!=NULL && root->right!=NULL)\n        {\n            // calculate the gcd of the values of the left and right child\n            int h=__gcd(root->left->data,root->right->data);\n            \n            // update the answer and gcd if the current gcd is greater than the previous gcd\n            if(h>g)\n            {\n                g=h;\n                ans=root->data;\n            }\n            // if the current gcd is equal to the previous gcd, update the answer\n            else if(h==g)\n            {\n                ans=max(ans,root->data);\n            }\n        }\n        \n        // recursively solve for the left and right child of the current node\n        solve(root->left);\n        solve(root->right);\n    }\n\npublic:\n    // function to find the maximum gcd\n    int maxGCD(Node* root) {\n        ans = 0;\n        g = 0;\n        \n        // call the solve function to solve the problem\n        solve(root);\n        \n        // return the maximum gcd\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    int ans, curr; // variables to store the maximum GCD and current GCD\r\n    int maxGCD(Node root) {\r\n        if (root == null) return -1; // return -1 if the root is null\r\n        ans = 0; // initialize the maximum GCD as 0\r\n        curr = 0; // initialize the current GCD as 0\r\n        fun(root); // call the recursive function fun() to calculate the maximum GCD\r\n        return ans; // return the maximum GCD\r\n    }\r\n    \r\n    // recursive function to calculate the maximum GCD\r\n    void fun(Node root) {\r\n        if (root != null) {\r\n            if (root.left != null && root.right != null) {\r\n                int gcd = gcd(root.left.data, root.right.data); // calculate the GCD of left and right child\r\n                if (gcd > curr) { // if the calculated GCD is greater than current GCD\r\n                    curr = gcd; // update the current GCD\r\n                    ans = root.data; // update the maximum GCD\r\n                } else if (gcd == curr) { // if the calculated GCD is equal to current GCD\r\n                    ans = Math.max(ans, root.data); // update the maximum GCD if current node value is greater\r\n                }\r\n            }\r\n            fun(root.left); // recursively call fun() on left child\r\n            fun(root.right); // recursively call fun() on right child\r\n        }\r\n    }\r\n    \r\n    // function to calculate the GCD of two numbers\r\n    int gcd(int a, int b) {\r\n        if (b == 0) return a; // return a if b is 0\r\n        return gcd(b, a % b); // recursively call gcd() on b and remainder of a divided by b\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "'''\n# Node Class:\nclass Node:\n    def _init_(self, val):\n        self.data = val\n        self.left = None\n        self.right = None\n'''\n\nfrom math import gcd\n\nclass Solution:\n    def maxGCD(self, root):\n        # Function to find the maximum GCD among pairs of nodes in a binary tree\n        return self.solve(root)[1]\n    \n    # Helper function to recursively solve the problem\n    def solve(self, node):\n        # Base case: if the node is None, return (0, 0)\n        if node is None:\n            return (0, 0)\n        \n        x = (0, 0)\n        # If the node has both left and right children,\n        # calculate the GCD between the two children's data and the node's data\n        if node.left and node.right:\n            x = (gcd(node.left.data, node.right.data), node.data)\n        \n        # Recursively solve for the left and right subtrees\n        y = self.solve(node.left)\n        z = self.solve(node.right)\n        \n        # Return the maximum of the calculated values\n        return max(x, y, z)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n\r\n/**\r\n * @param {Node} root\r\n * @returns {number}\r\n*/\r\n\r\n/*\r\nclass Node{\r\n    constructor(data){\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n*/\r\n\r\nclass Solution {\r\n    \r\n    //Function to check whether a binary tree is balanced or not.\r\n    maxGCD(root)\r\n    {   \r\n        //Variable to store the maximum gcd value\r\n        let maxGCD = 0;\r\n        //Variable to store the node value with maximum gcd\r\n        let ans = 0;\r\n\r\n        //Recursive function to calculate gcd of nodes\r\n        function solve(root) {\r\n            //If root is null, return\r\n            if(root == null) return;\r\n\r\n            //If root has both left and right child\r\n            if(root.left != null && root.right != null) {\r\n                //Calculate gcd of left and right child nodes\r\n                let h = gcd(root.left.data, root.right.data);\r\n\r\n                //If h is greater than maxGCD, update maxGCD and ans\r\n                if(h > maxGCD) {\r\n                    maxGCD = h;\r\n                    ans = root.data;\r\n                }\r\n                //If h is equal to maxGCD, update ans with maximum value\r\n                else if(h == maxGCD) {\r\n                    ans = Math.max(ans, root.data);\r\n                }\r\n            }\r\n\r\n            //Recursively call the function on left and right child nodes\r\n            solve(root.left);\r\n            solve(root.right);\r\n        }\r\n\r\n        //Function to calculate gcd of two numbers\r\n        function gcd(a, b) {\r\n            //Base case\r\n            if(b == 0) return a;\r\n            //Recursive call\r\n            return gcd(b, a % b);\r\n        }\r\n\r\n        //Call the solve function on the root node\r\n        solve(root);\r\n        \r\n        //Return the value of the node with maximum gcd\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}