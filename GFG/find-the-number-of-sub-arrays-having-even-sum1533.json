{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703390,
            "title": "Find the number of subarrays having even sum",
            "titleSlug": "find-the-number-of-sub-arrays-having-even-sum1533",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>a</strong><strong>rr</strong><strong>.</strong>&nbsp;Find the number of subarrays whose sum is an even number.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 2, 3, 4, 1]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> There are 9 such possible subarrays. These are [1, 2, 2, 3] Sum = 8, [1, 2, 2, 3, 4] Sum = 12, [2] Sum = 2, [2, 2] Sum = 4, [2, 2, 3, 4, 1] Sum = 12, [2] Sum = 2, [2, 3, 4, 1] Sum = 10, [3, 4, 1] Sum = 8 and [4] Sum = 4</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 3, 1, 1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The array has 4 such possible subarrays. [1, 3] Sum = 4, [1, 3, 1, 1] Sum = 6, [3, 1] Sum = 4 and [1, 1] Sum = 2\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1&lt;= arr[i] &lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Count Even and Odd cumulative sums. Use handshake lemma to count all subarrays.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    long long countEvenSum(vector<int>& arr) {\n        int n = arr.size();\n        // A temporary array of size 2. temp[0] is\n        // going to store count of even subarrays\n        // and temp[1] count of odd.\n        // temp[0] is initialized as 1 because there\n        // a single even element is also counted as\n        // a subarray\n        long long temp[2] = {1, 0};\n\n        // Initialize count. sum is sum of elements\n        // under modulo 2 and ending with arr[i].\n        long long result = 0, sum = 0;\n\n        // i'th iteration computes sum of arr[0..i]\n        // under modulo 2 and increments even/odd count\n        // according to sum's value\n        for (int i = 0; i <= n - 1; i++) {\n            sum = (sum + arr[i]) % 2;\n\n            // Increment even/odd count\n            temp[sum]++;\n        }\n\n        // Use handshake lemma to count even subarrays\n        // (Note that an even cam be formed by two even\n        // or two odd)\n        result = result + (temp[0] * (temp[0] - 1) / 2);\n        result = result + (temp[1] * (temp[1] - 1) / 2);\n\n        return (result);\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public long countEvenSum(int[] arr) {\n        int n = arr.length;\n        // A temporary array of size 2. temp[0] is going to store count of even\n        // subarrays and temp[1] count of odd. temp[0] is initialized as 1 because a\n        // single even element is also counted as a subarray\n        long[] temp = new long[2];\n        temp[0] = 1; // initialize temp[0] as 1\n\n        // Initialize count. sum is sum of elements under modulo 2 and ending with\n        // arr[i].\n        long result = 0, sum = 0;\n\n        // i'th iteration computes sum of arr[0..i] under modulo 2 and increments\n        // even/odd count according to sum's value\n        for (int i = 0; i < n; i++) {\n            sum = (sum + arr[i]) % 2;\n\n            // Increment even/odd count\n            temp[(int)sum]++;\n        }\n\n        // Use handshake lemma to count even subarrays\n        // (Note that an even can be formed by two evens or two odds)\n        result += (temp[0] * (temp[0] - 1) / 2);\n        result += (temp[1] * (temp[1] - 1) / 2);\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countEvenSum(self, arr):\n        n = len(arr)\n        # A temporary array of size 2. temp[0] is going to store count of even subarrays\n        # and temp[1] count of odd.\n        # temp[0] is initialized as 1 because a single even element is also counted as a subarray\n        temp = [1, 0]  # Initialize temp[0] as 1\n\n        # Initialize count. sum is sum of elements under modulo 2 and ending with arr[i].\n        result = 0\n        sum_val = 0\n\n        # i'th iteration computes sum of arr[0..i] under modulo 2 and increments even/odd count according to sum's value\n        for i in range(n):\n            sum_val = (sum_val + arr[i]) % 2\n\n            # Increment even/odd count\n            temp[sum_val] += 1\n\n        # Use handshake lemma to count even subarrays\n        # (Note that an even can be formed by two evens or two odds)\n        result += (temp[0] * (temp[0] - 1) // 2)\n        result += (temp[1] * (temp[1] - 1) // 2)\n\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    countEvenSum(arr) {\n        const n = arr.length;\n        // A temporary array of size 2. temp[0] is going to store count of even\n        // subarrays and temp[1] count of odd. temp[0] is initialized as 1 because a\n        // single even element is also counted as a subarray\n        let temp = [ 1, 0 ]; // Initialize temp[0] as 1\n\n        // Initialize count. sum is sum of elements under modulo 2 and ending with\n        // arr[i].\n        let result = 0, sum = 0;\n\n        // i'th iteration computes sum of arr[0..i] under modulo 2 and increments\n        // even/odd count according to sum's value\n        for (let i = 0; i < n; i++) {\n            sum = (sum + arr[i]) % 2;\n\n            // Increment even/odd count\n            temp[sum]++;\n        }\n\n        // Use handshake lemma to count even subarrays\n        // (Note that an even can be formed by two evens or two odds)\n        result += (temp[0] * (temp[0] - 1) / 2);\n        result += (temp[1] * (temp[1] - 1) / 2);\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}