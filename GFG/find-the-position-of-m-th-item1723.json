{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704216,
            "title": "Find the position of M-th item",
            "titleSlug": "find-the-position-of-m-th-item1723",
            "content": "<p><span style=\"font-size:18px\"><strong>M</strong> items are to be delivered in a circle of size <strong>N</strong>. Find the position where the <strong>M-th</strong> item will be delivered if we start from a given position <strong>K</strong>. Note that items are distributed at adjacent positions starting from <strong>K</strong>.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>5, <strong>M = </strong>2, <strong>K = </strong>1</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">2</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">If we start from 1st position, the\r\n2nd item will land at the 2nd position.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>5, <strong>M = </strong>8, <strong>K = </strong>2</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">4</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">If we start from 2nd position, the\r\n8th item will land at the 4th position.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>findPosition()</strong> which takes 3 Integers N,M and K as input and returns the answer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= N,M,K &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We check if the number of items to be distributed is greater than our remaining positions in current cycle of circle or not. If yes, then we simply return m + k &ndash; 1 (We distribute items in same cycle starting from k). Else we compute number of remaining items after completing current cycle and return mod of remaining items. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\n\r\nclass Solution {\r\n  public:\r\n    int findPosition(int N , int M , int K) {\r\n        \r\n        // n - k + 1 is number of positions\r\n        // before we reach beginning of circle\r\n        // If m is less than this value, then\r\n        // we can simply return (m-1)th position\r\n        if (M <= N - K + 1)\r\n            return M + K - 1;\r\n            \r\n        // Let us compute remaining items before\r\n        // we reach beginning.\r\n        M -= (N - K + 1);\r\n        \r\n        \r\n        // We compute m % n to skip all complete\r\n        // rounds. If we reach end, we return n\r\n        // else we return m % n\r\n        if (M % N == 0)\r\n            return N;\r\n        else\r\n            return (M % N);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static int findPosition(int N , int M , int K) {\r\n        \r\n        // n - k + 1 is number of positions\r\n        // before we reach beginning of circle\r\n        // If m is less than this value, then\r\n        // we can simply return (m-1)th position\r\n        if (M <= N - K + 1)\r\n            return M + K - 1;\r\n            \r\n        // Let us compute remaining items before\r\n        // we reach beginning.\r\n        M -= (N - K + 1);\r\n        \r\n        \r\n        // We compute m % n to skip all complete\r\n        // rounds. If we reach end, we return n\r\n        // else we return m % n\r\n        if (M % N == 0)\r\n            return N;\r\n        else\r\n            return (M % N);\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def findPosition(self, N , M , K):\r\n        \r\n        # n - k + 1 is number of positions\r\n        # before we reach beginning of circle\r\n        # If m is less than this value, then\r\n        # we can simply return (m-1)th position\r\n        if (M <= N - K + 1):\r\n            return M + K - 1\r\n            \r\n        # Let us compute remaining items before\r\n        # we reach beginning.\r\n        M -= (N - K + 1)\r\n        \r\n        # We compute m % n to skip all complete\r\n        # rounds. If we reach end, we return n\r\n        # else we return m % n\r\n        if (M % N == 0):\r\n            return N\r\n        else:\r\n            return (M % N)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number} M\n * @param {number} K\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the position of person when a person\n    //moves in clockwise and anticlockwise direction alternately.\n    findPosition(N, M, K) {\n        // If the moves M are less than the number of positions\n        // left to go back to the starting point of the circle\n        if (M <= N - K + 1) {\n            return M + K - 1;\n        }\n\n        // If more moves are needed to go back to the starting position\n        // subtract the moves needed to go back to the starting point of the circle\n        M -= (N - K + 1);\n\n        // After using all complete rounds, we check if we are at the end\n        // otherwise, we return the current position within this round\n        return M % N === 0 ? N : M % N;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Function to find the position.\n    public int findPosition(int N, int M, int K)\n    {\n        if (M <= N - K + 1)\n            return M + K - 1;\n        \n        M -= (N - K + 1);\n        \n        if (M % N == 0)\n            return N;\n        else\n            return (M % N);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}