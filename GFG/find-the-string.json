{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707909,
            "title": "Find the String",
            "titleSlug": "find-the-string",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers<strong> N</strong> and <strong>K, </strong>the task is to find the string <strong>S</strong> of <strong>minimum </strong>length such that it contains <strong>all possible strings </strong>of size <strong>N</strong> as a <strong>substring</strong>. The characters of the string should be from integers ranging from <strong>0 to K-1</strong>.&nbsp;&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 2, K = 2\n<strong>Output:</strong> \n00110\n<strong>Explanation: \n</strong>Allowed characters are from 0 to k-1 (i.e., 0 and 1).<br /></span><span style=\"font-size: 18px;\">There are 4 string possible of size N=2 \n(i.e \"00\", \"01\",\"10\",\"11\")\n\"00110\" contains all possible string as a \nsubstring. It also has the minimum length.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 2, K = 3\n<strong>Output: \n</strong>0010211220\n<strong>Explanation: <br /></strong></span><span style=\"font-size: 18px;\">Allowed characters are from 0 to k-1 (i.e., 0, 1 and 2).<strong><br /></strong>There are total 9 strings possible\nof size N, given output string has the minimum\nlength that contains all those strings as substring.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;</strong><br />You don't need to read input or print anything. Complete the function<strong>&nbsp;findString( )</strong>&nbsp;which takes the integer <strong>N</strong> and the integer <strong>K</strong>&nbsp;as input parameters and returns the string.<br /><strong>Note:</strong> In case of multiple answers, return <strong>any string of minimum length </strong>which satisfies above condition. The driver will print the <strong>length</strong> of the&nbsp;string. In case of wrong answer it will print <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(K<sup>N</sup>K)<br /><strong>Expected Space Complexity: </strong>O(K<sup>N</sup>N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N&nbsp;&le; 4<br />1 <u>&lt;</u> K <u>&lt;</u> 10<br />1&nbsp;<u>&lt;</u> K<sup>N</sup>N &lt; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers N and K, find the shortest string S that contains all possible strings of length N as substrings. The characters in the string should be integers ranging from 0 to K-1.",
                "constraints": [
                    "1 <= N <= 4",
                    "1 < K < 10",
                    "1 < K^N * N < 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 2, K = 2",
                        "output": "00110",
                        "explanation": "The allowed characters are 0 and 1. The string \"00110\" contains all possible substrings of length 2 (i.e., \"00\", \"01\", \"10\", \"11\") and is of minimal length."
                    },
                    {
                        "input": "N = 2, K = 3",
                        "output": "0010211220",
                        "explanation": "The allowed characters are 0, 1, and 2. The output string contains all possible substrings of length 2 using these characters (i.e., \"00\", \"01\", \"02\", \"10\", \"11\", \"12\", \"20\", \"21\", \"22\") and has the minimum possible length."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">There can be atmost K<sup>N</sup>&nbsp;different strings of size N.</span></p>\n\n<p><span style=\"font-size:18px\">The length of the optimal&nbsp;string will be K<sup>N</sup>&nbsp;+ N-1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution\n{\npublic:\n    int K,N; //variables to store the number of digits (N) and the base number (K)\n    long long tot; //variable to store the total number of possible strings\n    set<string> st; //set to store the generated strings\n    //Function to perform depth-first search to generate all possible strings\n    bool dfs(string &ans){\n        if(st.size()==tot){ //if all possible strings are generated, return true\n            return true;\n        }\n        string tmp=\"\";\n        if(N>1){\n            tmp=ans.substr(ans.size()-N+1); //get the last N-1 digits of the current string\n        }\n        \n        for(int i=0;i<K;i++){ //for each possible digit\n            tmp.push_back((char)(i+'0')); //add the digit to the last N-1 digits\n            if(st.find(tmp)==st.end()){ //if the newly generated string is not already in the set\n                ans.push_back(char(i+'0')); //add the digit to the current string\n                st.insert(tmp); //insert the newly generated string to the set\n                if(dfs(ans)) //recursively call dfs function\n                    return true;\n                st.erase(tmp); //remove the newly generated string from the set\n                ans.pop_back(); //remove the added digit from the current string\n            }\n            tmp.pop_back(); //remove the added digit from the last N-1 digits\n        }\n        return false;\n    }\n    //Function to find the lexicographically smallest string of length N using K digits\n    string findString(int n, int k) {\n        K=k;\n        N=n;\n        st.clear(); //clear the set\n        if(n==1){\n            string r=\"\";\n            for(int i=0;i<k;i++)\n                r.push_back((char)(i+'0')); //if N=1, return a string of all digits from 0 to K-1\n            return r;\n        }\n        tot=1;\n        for(int i=1;i<=n;i++)\n            tot=(tot*k); //calculate total number of possible strings\n        string ans=string(n,'0'); //initialize current string with all zeros\n        st.insert(ans); //insert the current string to the set\n        dfs(ans); //call dfs function to generate all possible strings\n        return ans; //return the lexicographically smallest string\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    int K, N; // Variables to store the value of K and N\n    long tot; // Variable to store the total number of possible combinations\n    HashSet<String> st = new HashSet<>(); // HashSet to store visited combinations\n    String ans; // Variable to store the final combination\n\n    boolean dfs() {\n        if(st.size() == tot) { // If all combinations are visited, return true\n            return true;\n        }\n\n        String tmp = \"\";\n        if(N > 1) {\n            tmp = ans.substring(ans.length()-N+1); // Get the last N-1 digits of the current combination\n        }\n\n        for(int i = 0; i < K; i++)\n        {\n            tmp += i; // Append the current digit to the last N-1 digits of the current combination\n            if(!st.contains(tmp)) {\n                ans += i; // Append the current digit to the final combination\n                st.add(tmp); // Add the current combination to the visited combinations\n                if(dfs())\n                    return true; // If a valid combination is found, return true\n                st.remove(tmp); // Remove the current combination from the visited combinations\n                ans = ans.substring(0, ans.length()-1); // Remove the last digit from the final combination\n            }\n            tmp = tmp.substring(0, tmp.length()-1); // Remove the last digit from the last N-1 digits of the current combination\n        }\n\n        return false; // If no valid combination is found, return false\n    }\n\n    public String findString(int n, int k){\n       K = k; // Assign the value of k to the variable K\n       N = n; // Assign the value of n to the variable N\n       st.clear(); // Clear the visited combinations HashSet\n       if(n == 1) { // If n is 1, return a string of digits from 0 to k-1\n        char[] r = new char[k];\n        for(int i = 0; i < k; i++)\n            r[i] =(char)(i + '0');\n        return new String(r);\n       }\n       tot=1;\n       for(int i = 1; i <= n; i++)\n            tot = (tot*k); // Calculate the total number of possible combinations\n        char[] ansa = new char[n]; // Create a character array to store the final combination\n        Arrays.fill(ansa, '0'); // Initialize the array with '0'\n        ans = new String(ansa); // Convert the array to a string\n        st.add(ans); // Add the initial combination to the visited combinations\n        dfs(); // Call the dfs function to find the final combination\n        return ans; // Return the final combination\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\nclass Solution:\n    \n    # Function to perform depth-first search and find the string\n    def dfs(self, ans, d, tot, N, K):\n        global res\n        if len(d)==tot: # if all combinations have been tried\n            res = ans\n            return True\n        tmp = \"\"\n        if N>1:\n            tmp = ans[len(ans)-N+1:] # get the last N-1 characters of the current string\n        \n        for i in range(K): # iterate through all possible characters\n            tmp += chr(48+i) # add the character to the current string\n            if tmp not in d: # check if the current string is unique\n                ans += chr(48+i) # add the character to the final answer\n                d[tmp] = 1 # mark the current string as used\n                \n                # recursively call dfs with the updated answer and dictionary\n                if self.dfs(ans,d,tot,N,K):\n                    return True\n                \n                d.pop(tmp) # remove the current string from the dictionary\n                ans = ans[0:len(ans)-1] # remove the character from the final answer\n            tmp = tmp[0:len(tmp)-1] # remove the last character from the current string\n        \n        return False\n    \n    # Function to find the string of length N with K possible characters\n    def findString(self, N, K):\n        if N==1: # if N is 1, return a string of all possible characters\n            r = \"\"\n            for i in range(K):\n                r += chr(i+48)\n            return r\n        tot = pow(K,N) # total number of possible combinations\n        ans = '0'*(N) # initialize the answer with N '0' characters\n        d = dict() # dictionary to store used strings\n        d[ans] = 1 # mark the initial string as used\n        self.dfs(ans,d,tot,N,K) # call dfs to find the string\n        return res # return the result string",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}