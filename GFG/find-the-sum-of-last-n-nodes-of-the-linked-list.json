{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700594,
            "title": "Find the Sum of Last N nodes of the Linked List",
            "titleSlug": "find-the-sum-of-last-n-nodes-of-the-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Given a single linked list, calculate the <strong>sum </strong>of the last <strong>n </strong>nodes.</span></p>\n<p><span style=\"font-size: 18px;\">Note: It is guaranteed that n &lt;= number of nodes.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Linked List: 5-&gt;9-&gt;6-&gt;3-&gt;4-&gt;10, n = 3</span><br /><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700594/Web/Other/blobid0_1720631715.png\" width=\"400\" height=\"90\" /><br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Output: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">17<br /></span></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">The sum of the last three nodes in the linked list is 3 + 4 + 10 = 17.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Linked List: 1-&gt;2, n = 2</span><br /><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700594/Web/Other/blobid1_1720631747.png\" width=\"400\" height=\"90\" /><br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Output: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">3<br /></span></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">The sum of the last two nodes in the linked list is 2 + 1 = 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &lt;= number of nodes, n &lt;= 10<sup>5</sup><br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px;\">1 &lt;= node-&gt;data &lt;= 10<sup>3<br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, find the sum of the values of the last 'n' nodes. It is guaranteed that 'n' is less than or equal to the number of nodes in the linked list.",
                "constraints": [
                    "1 <= number of nodes, n <= 10^5",
                    "1 <= node data <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "Linked List: 5->9->6->3->4->10, n = 3",
                        "output": "17",
                        "explanation": "The sum of the last three nodes (3, 4, and 10) is 3 + 4 + 10 = 17."
                    },
                    {
                        "input": "Linked List: 1->2, n = 2",
                        "output": "3",
                        "explanation": "The sum of the last two nodes (1 and 2) is 1 + 2 = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use two pointers: one to get the sum of the first n nodes and another to traverse the remaining list, maintaining the sum of the last n nodes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the sum of the last n nodes in a linked list\n    int sumOfLastN_Nodes(struct Node* head, int n) {\n        // If n is less than or equal to 0, return 0\n        if (n <= 0)\n            return 0;\n\n        int sum = 0, temp = 0;\n        struct Node *ref_ptr, *main_ptr;\n        ref_ptr = main_ptr = head;\n\n        // Calculate the sum of the first n nodes\n        while (ref_ptr != NULL && n--) {\n            sum += ref_ptr->data;\n            ref_ptr = ref_ptr->next;\n        }\n\n        // Calculate the sum of the remaining nodes\n        while (ref_ptr != NULL) {\n            temp += main_ptr->data;\n            sum += ref_ptr->data;\n            main_ptr = main_ptr->next;\n            ref_ptr = ref_ptr->next;\n        }\n\n        // Return the sum of the last n nodes\n        return (sum - temp);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Return the sum of last k nodes\n    public int sumOfLastN_Nodes(Node head, int n) {\n        Node temp = head;\n        int sum = 0, size = 0;\n        while (temp != null) {\n            sum += temp.data; // Add the data of each node to the sum\n            size++;           // Increment the size counter\n            temp = temp.next; // Move to the next node\n        }\n\n        temp = head; // Reset the temp variable to the head\n        for (int i = 0; i < size - n; i++) {\n            sum -= temp.data; // Subtract the data of each node from the sum\n            temp = temp.next; // Move to the next node\n        }\n\n        return sum; // Return the sum of the last k nodes\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def sumOfLastN_Nodes(self, head, n):\n        # using two pointers, similar to finding middle element\n        curr_node = head\n        nth_node = head\n\n        # Traverse n nodes from the beginning\n        while n:\n            if n and curr_node == None:\n                return 0\n            curr_node = curr_node.next\n            n -= 1\n\n        # Traverse till the end of the list\n        while curr_node:\n            curr_node = curr_node.next\n            nth_node = nth_node.next\n\n        sm = 0\n\n        # Calculate the sum of data of the last n nodes\n        while nth_node:\n            sm += nth_node.data\n            nth_node = nth_node.next\n\n        # Return the sum\n        return sm\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/*LINKED LIST NODE\nclass Node {\n  constructor(x){\n    this.data = x;\n    this.next = null;\n  }\n}\n*/\n\n/**\n * @param {Node} head\n * @return {number}\n */\n\nclass Solution {\n    sumOfLastN_Nodes(head, n) {\n        // code here\n        if (n <= 0) return 0;\n        let sum = 0, temp = 0;\n        let ref_ptr = head, main_ptr = head;\n        while (ref_ptr != null && n > 0) {\n            sum += ref_ptr.data;\n            ref_ptr = ref_ptr.next;\n            n--;\n        }\n        while (ref_ptr != null) {\n            temp += main_ptr.data;\n            sum += ref_ptr.data;\n            main_ptr = main_ptr.next;\n            ref_ptr = ref_ptr.next;\n        }\n        return (sum - temp);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}