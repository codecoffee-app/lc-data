{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700194,
            "title": "Find Transition Point",
            "titleSlug": "find-transition-point-1587115620",
            "content": "<p><span >Given a <strong>sorted array, arr[] </strong>containing only <strong>0s </strong>and <strong>1s</strong>, find the <strong>transition point</strong>, i.e., the <strong>first index </strong>where <strong>1 </strong>was observed, and <strong>before that</strong>, only 0 was observed.&nbsp;<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> If <strong>arr</strong> does not have any </span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, return&nbsp;</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">-1</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">. If array does not have any&nbsp;</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">0</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, return&nbsp;</span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">0</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [0, 0, 0, 1, 1]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> index 3 is the transition point where 1 begins.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [0, 0, 0, 0]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> Since, there is no \"1\", the answer is -1.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1, 1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There are no 0s in the array, so the transition point is 0, indicating that the first index (which contains 1) is also the first position of the array.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [0, 1, 1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Index 1 is the transition point where 1 starts, and before it, only 0 was observed.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />0 &le; arr[i] &le; 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr[]` containing only 0s and 1s, find the transition point. The transition point is the first index where 1 is observed, and all elements before that index are 0. If the array does not contain any 1s, return -1. If the array does not contain any 0s, return 0.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[0, 0, 0, 1, 1]",
                        "output": "3",
                        "explanation": "The first occurrence of 1 is at index 3."
                    },
                    {
                        "input": "[0, 0, 0, 0]",
                        "output": "-1",
                        "explanation": "The array contains no 1s."
                    },
                    {
                        "input": "[1, 1, 1]",
                        "output": "0",
                        "explanation": "The array contains no 0s, so the transition point is the start of the array (index 0)."
                    },
                    {
                        "input": "[0, 1, 1]",
                        "output": "1",
                        "explanation": "The first occurrence of 1 is at index 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to divide the array in some point using binary search.</span></p>",
            "<p><span >Find the last index where 0 occurred using a binary search&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to find the transition point\nclass Solution {\n  public:\n    int transitionPoint(vector<int>& arr) {\n        int n = arr.size();\n        if (arr[0]) {\n            return 0;\n        }\n        // Initialise lower and upper bounds\n        int lb = 0, ub = n - 1;\n\n        // Perform Binary search\n        while (lb <= ub) {\n            // Find mid\n            int mid = (lb + ub) / 2;\n\n            // update lower_bound if mid contains 0\n            if (arr[mid] == 0)\n                lb = mid + 1;\n\n            // If mid contains 1\n            else if (arr[mid] == 1) {\n                // Check if it is the left most 1\n                // Return mid, if yes\n                if (arr[mid - 1] == 0)\n                    return mid;\n\n                // Else update upper_bound\n                ub = mid - 1;\n            }\n        }\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    int transitionPoint(int arr[]) {\n        int n = arr.length;\n        if (arr[0] == 1) {\n            return 0;\n        }\n        // Initialise lower and upper bounnds\n        int lb = 0, ub = n - 1;\n\n        // Perform Binary search\n        while (lb <= ub) {\n            // Find mid\n            int mid = (lb + ub) / 2;\n\n            // update lower_bound if mid contains 0\n            if (arr[mid] == 0) lb = mid + 1;\n\n            // If mid contains 1\n            else if (arr[mid] == 1) {\n                // Check if it is the left most 1\n                // Return mid, if yes\n                if (arr[mid - 1] == 0) return mid;\n\n                // Else update upper_bound\n                ub = mid - 1;\n            }\n        }\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def transitionPoint(self, arr):\n        n = len(arr)\n        if arr[0] == 1:\n            return 0\n        lb = 0\n        ub = n - 1\n\n        # Perform Binary search\n        while (lb <= ub):\n            # Find mid\n            mid = (int)((lb + ub) / 2)\n\n            # update lower_bound if\n            # mid contains 0\n            if (arr[mid] == 0):\n                lb = mid + 1\n\n            # If mid contains 1\n            elif (arr[mid] == 1):\n\n                # Check if it is the\n                # left most 1 Return\n                # mid, if yes\n                if (arr[mid - 1] == 0):\n                    return mid\n\n                # Else update\n                # upper_bound\n                ub = mid - 1\n\n        return -1\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\nclass Solution {\n    // Function to find the transition point (first 1 in a sorted binary array).\n    public int TransitionPoint(int[] arr) {\n        int n = arr.Length;\n\n        if (arr[0] == 1) {\n            return 0;\n        }\n\n        int lb = 0, ub = n - 1;\n\n        while (lb <= ub) {\n\n            int mid = (lb + ub) / 2;\n\n            if (arr[mid] == 0) {\n                lb = mid + 1;\n            }\n\n            else if (arr[mid] == 1) {\n\n                if (mid == 0 || arr[mid - 1] == 0) {\n                    return mid;\n                }\n\n                ub = mid - 1;\n            }\n        }\n\n        return -1;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {number}\n */\nclass Solution {\n    transitionPoint(arr) {\n        let n = arr.length;\n        // Check if array does not have any 0s\n        if (arr[0] === 1) {\n            return 0;\n        }\n\n        // Initialise lower and upper bounds\n        let lb = 0;\n        let ub = n - 1;\n\n        // Perform Binary search\n        while (lb <= ub) {\n            // Find mid\n            let mid = Math.floor((lb + ub) / 2);\n\n            // Update lower_bound if mid contains 0\n            if (arr[mid] === 0) {\n                lb = mid + 1;\n            }\n\n            // If mid contains 1\n            else if (arr[mid] === 1) {\n                // Check if it is the left most 1\n                // Return mid, if yes\n                if (arr[mid - 1] === 0) {\n                    return mid;\n                }\n\n                // Else update upper_bound\n                ub = mid - 1;\n            }\n        }\n\n        // Return -1 if array does not have any 1s\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}