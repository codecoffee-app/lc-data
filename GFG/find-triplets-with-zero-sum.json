{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700466,
            "title": "Find triplets with zero sum",
            "titleSlug": "find-triplets-with-zero-sum",
            "content": "<p><span >Given an array <code><strong>arr[]</strong></code> of&nbsp;integers, determine whether it contains a triplet whose sum equals zero. Return <code>true</code> if such a triplet exists, otherwise, return <code>false</code>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: arr[] = [0, -1, 2, -3, 1]<br /><strong>Output</strong>: true\n<strong>Explanation</strong>: The triplet <code>[0, -1, 1]</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> has a sum equal to zero.</span></span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [1, 2, 3]<br /><strong>Output</strong>: false\n<strong>Explanation</strong>: No triplet with a sum of zero exists.</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [-5, 3, 2, -1, 0, 1]<br /><strong>Output</strong>: true\n<strong>Explanation</strong>: The triplet <code>[-5, 3, 2]</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> has a sum equal to zero.</span></span></pre>\n<p><span ><strong>Constraints</strong><strong>:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>3</sup></span><br /><span >-10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the array, then use two pointers to find if any triplet sums to zero.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "google",
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Function to compare two integers for qsort\nint compare(const void* a, const void* b) {\n    return (*(int*)a - *(int*)b);\n}\n\n// Function to find triplets with zero sum\nbool findTriplets(int arr[], int n) {\n    // Sort the array\n    qsort(arr, n, sizeof(int), compare);\n\n    // Traverse the array\n    for (int i = 0; i < n - 2; i++) {\n        int l = i + 1;\n        int r = n - 1;\n\n        // Two-pointer approach\n        while (l < r) {\n            int sum = arr[i] + arr[l] + arr[r];\n\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                l++;\n            } else {\n                r--;\n            }\n        }\n    }\n\n    return false;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find triplets with zero sum.\n    bool findTriplets(vector<int> &arr) {\n        int n = arr.size(); // Get the size of the array\n\n        // Sorting the elements.\n        sort(arr.begin(), arr.end());\n\n        // Traversing the array elements.\n        for (int i = 0; i < n - 2; i++) {\n            // Taking two pointers. One at the element after ith index and another at\n            // the last index.\n            int l = i + 1;\n            int r = n - 1;\n            int x = arr[i];\n\n            // Using two pointers to check if the triplet sum is zero.\n            while (l < r) {\n                int sum = x + arr[l] + arr[r];\n\n                // If sum of elements at indexes i, l and r is 0, we return true.\n                if (sum == 0) {\n                    return true;\n                }\n                // Else if the sum is less than 0, increase the left pointer l.\n                else if (sum < 0) {\n                    l++;\n                }\n                // Else the sum is more than 0, decrease the right pointer r.\n                else {\n                    r--;\n                }\n            }\n        }\n        // Returning false if no triplet with zero sum is present.\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to find triplets with zero sum.\n    public boolean findTriplets(int[] arr) {\n        int n = arr.length; // Get the size of the array\n\n        // Sorting the elements.\n        Arrays.sort(arr);\n\n        // Traversing the array elements.\n        for (int i = 0; i < n - 2; i++) {\n            // Taking two pointers. One at the element after the ith index and another\n            // at the last index.\n            int l = i + 1;\n            int r = n - 1;\n            int x = arr[i];\n\n            // Using two pointers over the array to check if the triplet sum is zero.\n            while (l < r) {\n                int sum = x + arr[l] + arr[r];\n\n                // If sum of elements at indexes i, l and r is 0, return true.\n                if (sum == 0) {\n                    return true;\n                }\n                // If the sum is less than 0, increase the left pointer.\n                else if (sum < 0) {\n                    l++;\n                }\n                // If the sum is greater than 0, decrease the right pointer.\n                else {\n                    r--;\n                }\n            }\n        }\n        // Return false if no triplet with zero sum is present.\n        return false;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to find triplets with zero sum.\n    def findTriplets(self, arr):\n        n = len(arr)  # get the size of the array\n\n        # Sorting the elements.\n        arr.sort()\n\n        # Traversing the array elements.\n        for i in range(n - 2):\n\n            # Taking two pointers. One at element after ith index and another\n            # at the last index.\n            l = i + 1\n            r = n - 1\n\n            # Using two pointers to check if the triplet sum is zero.\n            while l < r:\n                curr_sum = arr[i] + arr[l] + arr[r]\n\n                # If sum of elements at indexes i, l, and r is 0, return true.\n                if curr_sum == 0:\n                    return True\n                # If the sum is less than 0, increase the left pointer.\n                elif curr_sum < 0:\n                    l += 1\n                # If the sum is greater than 0, decrease the right pointer.\n                else:\n                    r -= 1\n\n        # Returning false if no triplet with zero sum is present.\n        return False\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Function to find triplets with zero sum.\n    public bool findTriplets(int[] arr) {\n        int n = arr.Length; // Get the length of the array\n\n        // Sorting the elements\n        Array.Sort(arr);\n\n        // Traversing the array elements\n        for (int i = 0; i < n - 2; i++) {\n            // Taking two pointers. One at the element after ith index and another at\n            // the last index\n            int l = i + 1;\n            int r = n - 1;\n\n            // Using two pointers to check if the triplet sum is zero\n            while (l < r) {\n                int sum = arr[i] + arr[l] + arr[r];\n\n                // If the sum of the triplet is zero, return true\n                if (sum == 0) {\n                    return true;\n                }\n                // If the sum is less than zero, increment the left pointer\n                else if (sum < 0) {\n                    l++;\n                }\n                // If the sum is greater than zero, decrement the right pointer\n                else {\n                    r--;\n                }\n            }\n        }\n\n        // Returning false if no triplet with zero sum is found\n        return false;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function template for JavaScript\n\nclass Solution {\n    // Function to find triplets with zero sum.\n    findTriplets(arr) {\n        let n = arr.length; // Use the length of the array\n\n        // Sorting the elements.\n        arr.sort((a, b) => a - b);\n\n        // Traversing the array elements.\n        for (let i = 0; i < n - 2; i++) {\n            // Two pointers approach.\n            let l = i + 1;\n            let r = n - 1;\n\n            while (l < r) {\n                let curr_sum = arr[i] + arr[l] + arr[r];\n\n                // If sum of elements is zero, return true.\n                if (curr_sum === 0) {\n                    return true;\n                }\n                // If sum is less than zero, move left pointer.\n                else if (curr_sum < 0) {\n                    l++;\n                }\n                // If sum is greater than zero, move right pointer.\n                else {\n                    r--;\n                }\n            }\n        }\n        // Returning false if no triplet with zero sum is found.\n        return false;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}