{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703697,
            "title": "Find unique element",
            "titleSlug": "find-unique-element2632",
            "content": "<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\">Given an array of elements occurring in multiples of <strong>k</strong>, except one element which doesn't occur in multiple of <strong>k</strong>. Return the unique element.</span></span></p>\n<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Examples:</strong></span></span></p>\n<pre><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input: </strong>k = 3, arr[] = [6, 2, 5, 2, 2, 6, 6]\n<strong>Output: </strong>5\n<strong>Explanation: </strong>Every element appears 3 times except 5.</span></span></pre>\n<pre><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input: </strong>k = 4, arr[] = [2, 2, 2, 10, 2]\n<strong>Output: </strong>10\n<strong>Explanation: </strong>Every element appears 4 times except 10.</span></span></pre>\n<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Expected Time Complexity:</strong> O(n* log(arr[i]))<br /><strong>Expected Auxiliary Space:</strong> O(log(arr[i]))</span></span></p>\n<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Constraints:</strong><br />3&lt;= arr.size()&lt;=2*10<sup>5</sup><br />2&lt;= k&lt;=2*10<sup>5</sup><br />1&lt;= arr[i]&lt;=10<sup>9</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers where each element appears in multiples of 'k' times, except for one unique element that does not. Your task is to identify and return this unique element.",
                "constraints": [
                    "3 <= arr.size() <= 2 * 10^5",
                    "2 <= k <= 2 * 10^5",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "k = 3, arr[] = [6, 2, 5, 2, 2, 6, 6]",
                        "output": "5",
                        "explanation": "The number 5 appears only once, while the numbers 2 and 6 appear 3 times each."
                    },
                    {
                        "input": "k = 4, arr[] = [2, 2, 2, 10, 2]",
                        "output": "10",
                        "explanation": "The number 10 appears only once, while the number 2 appears 4 times."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try storing counts of all bits of all elements, and make a number from bits whose count is not divisible by <strong>k.</strong></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findUnique(int k, vector<int>& arr) {\n        int INT_SIZE = 8 * sizeof(unsigned int);\n        int count[INT_SIZE];\n        memset(count, 0, sizeof(count));\n\n        int n = arr.size();\n\n        for (int i = 0; i < INT_SIZE; i++) {\n            for (int j = 0; j < n; j++) {\n                if ((arr[j] & (1 << i)) != 0) {\n                    count[i] += 1;\n                }\n            }\n        }\n\n        // Now consider all bits whose count is\n        // not multiple of k to form the required\n        // number.\n        unsigned res = 0;\n        for (int i = 0; i < INT_SIZE; i++) {\n            res += (count[i] % k) * (1 << i);\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findUnique(int k, int[] arr) {\n        int INT_SIZE = 8 * Integer.BYTES; // Assuming 4 bytes for an integer\n        int[] count = new int[INT_SIZE];\n\n        int n = arr.length;\n\n        for (int i = 0; i < INT_SIZE; i++) {\n            for (int j = 0; j < n; j++) {\n                if ((arr[j] & (1 << i)) != 0) {\n                    count[i] += 1;\n                }\n            }\n        }\n\n        // Now consider all bits whose count is\n        // not multiple of k to form the required\n        // number.\n        int res = 0;\n        for (int i = 0; i < INT_SIZE; i++) {\n            res += (count[i] % k) * (1 << i);\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def find_unique(self, k, arr):\n        INT_SIZE = 8 * 4  # Assuming 4 bytes for an integer\n        count = [0] * INT_SIZE\n\n        n = len(arr)\n\n        for i in range(INT_SIZE):\n            for j in range(n):\n                if (arr[j] & (1 << i)) != 0:\n                    count[i] += 1\n\n        # Now consider all bits whose count is\n        # not multiple of k to form the required\n        # number.\n        res = 0\n        for i in range(INT_SIZE):\n            res += (count[i] % k) * (1 << i)\n\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findUnique(k, arr) {\n        const INT_SIZE = 8 * 4; // Assuming 4 bytes for an integer\n        const count = new Array(INT_SIZE).fill(0);\n\n        const n = arr.length;\n\n        for (let i = 0; i < INT_SIZE; i++) {\n            for (let j = 0; j < n; j++) {\n                if ((arr[j] & (1 << i)) !== 0) {\n                    count[i] += 1;\n                }\n            }\n        }\n\n        // Now consider all bits whose count is\n        // not multiple of k to form the required\n        // number.\n        let res = 0;\n        for (let i = 0; i < INT_SIZE; i++) {\n            res += (count[i] % k) * (1 << i);\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}