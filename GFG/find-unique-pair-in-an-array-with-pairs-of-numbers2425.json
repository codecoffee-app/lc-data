{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702662,
            "title": "Find Unique pair in an array with pairs of numbers",
            "titleSlug": "find-unique-pair-in-an-array-with-pairs-of-numbers2425",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong> where every element appears twice except a pair (two elements). Return the elements of this unique pair in sorted order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [2, 2, 5, 5, 6, 7]\n<strong>Output:</strong> [6, 7]\n<strong>Explanation: </strong>We can see we have [2, 2, 5, 5, 6, 7]. Here 2 and 5 are coming two times. So, the answer will be 6 7.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [1, 3, 4, 1]\n<strong>Output :</strong> [3, 4]<br /><strong>Explanation: </strong>1 is appearing two times and 3 and 4 appear one times.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` where every element appears twice except for a pair of unique elements, return the elements of this unique pair in sorted order.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2, 2, 5, 5, 6, 7]",
                        "output": "[6, 7]",
                        "explanation": "The array contains the numbers 2 and 5 repeated twice, leaving 6 and 7 as the unique pair."
                    },
                    {
                        "input": "[1, 3, 4, 1]",
                        "output": "[3, 4]",
                        "explanation": "The number 1 appears twice, and the numbers 3 and 4 appear only once, thus [3, 4] is the unique pair."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >XOR each element of the array and you will left with the XOR of two different elements which are going to be our result. Let this XOR be &ldquo;<strong>XOR</strong>&rdquo;<br />Now find a set bit in <strong>XOR </strong>and&nbsp;divide array elements into two groups.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\nclass Solution {\n  public:\n    // Function to find unique pair\n    vector<int> findUniquePair(vector<int>& arr) {\n        int n = arr.size();\n        // Initializing XOR with first element of the array\n        int XOR = arr[0];\n\n        // Loop to compute XOR of all elements in the array\n        for (int i = 1; i < n; i++)\n            XOR = XOR ^ arr[i];\n\n        // Finding the position of the rightmost set bit in XOR\n        int set_bit_no = XOR & ~(XOR - 1);\n\n        int x = 0, y = 0;\n\n        // Loop to find the distinct elements using set_bit_no\n        for (int i = 0; i < n; i++) {\n            if (arr[i] & set_bit_no)\n                x = x ^ arr[i];\n            else\n                y = y ^ arr[i];\n        }\n\n        // Creating a vector to store the result\n        vector<int> v;\n\n        // Adding the smaller number first to the vector\n        if (x < y) {\n            v.push_back(x);\n            v.push_back(y);\n        }\n        // Adding the larger number first to the vector\n        else {\n            v.push_back(y);\n            v.push_back(x);\n        }\n\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    public ArrayList<Integer> findUniquePair(int arr[]) {\n\n        int n = arr.length;\n        // Initializing XOR with the first element of the array\n        int XOR = arr[0];\n\n        // Performing XOR operation on all the elements of the array\n        for (int i = 1; i < n; i++) XOR = XOR ^ arr[i];\n\n        // Finding the rightmost set bit in XOR\n        int set_bit_no = XOR & ~(XOR - 1);\n\n        // Initializing x and y with 0\n        int x = 0, y = 0;\n\n        // Dividing the numbers into two groups based on the rightmost set bit and\n        // performing XOR operation\n        for (int i = 0; i < n; i++) {\n            int c = arr[i] & set_bit_no;\n            if (c > 0)\n                x = x ^ arr[i];\n            else\n                y = y ^ arr[i];\n        }\n\n        // Creating an ArrayList to store the unique pair of numbers\n        ArrayList<Integer> v = new ArrayList<Integer>();\n\n        // Adding the smaller number first and the larger number second in the ArrayList\n        if (x < y) {\n            v.add(x);\n            v.add(y);\n        } else {\n            v.add(y);\n            v.add(x);\n        }\n\n        // Returning the ArrayList with the unique pair of numbers\n        return v;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def findUniquePair(self, arr):\n\n        n = len(arr)\n        # XOR each element and get XOR\n        # of two unique elements(ans)\n        XOR = arr[0]\n        for i in range(1, n):\n            XOR = XOR ^ arr[i]\n\n        # Now XOR has XOR of two missing\n        # elements. Any set bit in it\n        # must be set in one missing and\n        # unset in other missing number\n\n        # Get a set bit of XOR (We get\n        # the rightmost set bit)\n        set_bit_no = XOR & ~(XOR - 1)\n\n        # Now divide elements in two sets\n        # by comparing rightmost set bit\n        # of XOR with bit at same position\n        # in each element.\n        x = 0\n        y = 0  # Initialize missing numbers\n        for i in range(0, n):\n\n            if (arr[i] & set_bit_no):\n\n                # XOR of first set in\n                # arr[]\n                x = x ^ arr[i]\n            else:\n\n                # XOR of second set\n                # in arr[]\n                y = y ^ arr[i]\n        ans = []\n        if (x < y):\n            ans.append(x)\n            ans.append(y)\n        else:\n            ans.append(y)\n            ans.append(x)\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find unique pair\n    findUniquePair(arr) {\n        let n = arr.length;\n        // Initializing XOR with the first element of the array\n        let XOR = arr[0];\n\n        // Loop to compute XOR of all elements in the array\n        for (let i = 1; i < n; i++) {\n            XOR = XOR ^ arr[i];\n        }\n\n        // Finding the position of the rightmost set bit in XOR\n        let set_bit_no = XOR & ~(XOR - 1);\n\n        let x = 0, y = 0;\n\n        // Loop to find the distinct elements using set_bit_no\n        for (let i = 0; i < n; i++) {\n            if (arr[i] & set_bit_no) {\n                x = x ^ arr[i];\n            } else {\n                y = y ^ arr[i];\n            }\n        }\n\n        // Creating an array to store the result\n        let result = [];\n\n        // Adding the smaller number first to the array\n        if (x < y) {\n            result.push(x);\n            result.push(y);\n        } else {\n            result.push(y);\n            result.push(x);\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}