{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701743,
            "title": "Find whether path exist",
            "titleSlug": "find-whether-path-exist5238",
            "content": "<p><span style=\"font-size: 18px;\">Given a grid of size <strong>n</strong>*<strong>n</strong>&nbsp;filled with 0, 1, 2, 3. Check whether there is a path possible from the source to destination.&nbsp;You can traverse up, down, right and left.<br />The description of cells is as follows:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">A value of cell&nbsp;<strong>1</strong>&nbsp;means Source.</span></li>\n<li><span style=\"font-size: 18px;\">A value of cell&nbsp;<strong>2</strong>&nbsp;means Destination.</span></li>\n<li><span style=\"font-size: 18px;\">A value of cell&nbsp;<strong>3</strong>&nbsp;means Blank cell.</span></li>\n<li><span style=\"font-size: 18px;\">A value of cell <strong>0&nbsp;</strong>means Wall (blocked cell which we cannot traverse).</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: There are only a single source and a single destination.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>grid = {{3,0,3,0,0},{3,0,0,0,3},{3,3,3,3,3},{0,2,3,0,0},{3,0,0,1,3}}\n<strong>Output: </strong>0\n<strong>Explanation: </strong>The grid is-\n3 0 3 0 0&nbsp;\n3 0 0 0 3&nbsp;\n3 3 3 3 3&nbsp;\n0 2 3 0 0&nbsp;\n3 0 0 1 3&nbsp;\nThere is no path to reach at (3,1) i,e at destination from (4,3) i,e source.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>grid = {{1,3},{3,2}}\n<strong>Output: </strong>1\n<strong>Explanation: </strong>The grid is-\n<span style=\"color: #000000;\">1 3\n3 2\n</span>There is a path from (0,0) i,e source to (1,1) i,e destination.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n<sup>2</sup>)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an n*n grid filled with values 0, 1, 2, and 3, determine if a path exists from the source to the destination. You can move up, down, left, and right.\n\nThe grid cell values represent the following:\n\n*   1: Source\n*   2: Destination\n*   3: Blank cell (Traversable)\n*   0: Wall (Blocked)\n\nNote: There is only one source and one destination in the grid.",
                "constraints": [
                    "1 <= n <= 500"
                ],
                "testcases": [
                    {
                        "input": "grid = {{3,0,3,0,0},{3,0,0,0,3},{3,3,3,3,3},{0,2,3,0,0},{3,0,0,1,3}}",
                        "output": "0",
                        "explanation": "In the given grid, there is no path from the source (1) at position (4,3) to the destination (2) at position (3,1)."
                    },
                    {
                        "input": "grid = {{1,3},{3,2}}",
                        "output": "1",
                        "explanation": "In the given grid, there is a path from the source (1) at position (0,0) to the destination (2) at position (1,1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft",
            "samsung",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\nclass Solution \r\n{\r\n    public:\r\n    vector<int>dx = {-1,0,1,0};\r\n    vector<int>dy = {0,-1,0,1};  \r\n    \r\n    //Function to check whether the cell is within the matrix bounds.\r\n    bool isValid(int x, int y, int n, int m){\r\n        return (x >= 0 and x < n and y >=0 and y < m);\r\n    }\r\n    \r\n    //Function to find whether a path exists from the source to destination. \r\n    bool is_Possible(vector<vector<int>>& grid) \r\n    {\r\n        int n = grid.size();\r\n        int m = grid[0].size();\r\n        \r\n        //creating BFS queue \r\n        queue<pair<int, int>>q;\r\n        \r\n        //traversing all the cells of the matrix.\r\n        for(int i = 0; i < n; i++)\r\n        {\r\n        \tfor(int j = 0; j < m; j++)\r\n        \t{\r\n        \t    //if there exists a cell in the matrix such that its \r\n                //value is 1 then we push it to queue.\r\n        \t\tif(grid[i][j] == 1){\r\n        \t\t\tq.push({i,j});\r\n        \t\t}\r\n        \t}\r\n        }\r\n        \r\n        while(!q.empty())\r\n        {\r\n        \tint x = q.front().first;\r\n        \tint y = q.front().second;\r\n        \tq.pop();\r\n        \tfor(int i = 0; i < 4; i++)\r\n        \t{\r\n        \t\tint n_x = x + dx[i];\r\n        \t\tint n_y = y + dy[i];\r\n        \t\t\r\n        \t\t//if the cell is within matrix bounds.\r\n        \t\tif(isValid(n_x, n_y, n, m))\r\n        \t\t{\r\n        \t\t    //if the value of current cell is 2, we return true.\r\n        \t\t\tif(grid[n_x][n_y] == 2)\r\n        \t\t\t\treturn true;\r\n        \t\t\t\t\r\n        \t\t\t//if the value of current cell is 3, we replace the value\r\n        \t\t\t//with 1 and push the cell into the queue.\r\n        \t\t\tif(grid[n_x][n_y] == 3){\r\n        \t\t\t\tgrid[n_x][n_y] = 1;\r\n        \t\t\t\tq.push({n_x, n_y});\r\n        \t\t\t}\r\n        \t\t}\r\n        \t}\r\n        }\r\n        return false;\r\n\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\nclass Solution\r\n{\r\n    private boolean dfs(int sx, int sy, int dx, int dy,boolean[][] vis,int[][] grid)\r\n    {\r\n        //if source and destination indexes are same, we return true.\r\n        if(sx==dx && sy==dy)\r\n            return true;\r\n        \r\n        //marking the cell as visited.    \r\n        vis[sx][sy] = true;\r\n        \r\n        boolean ans = false;\r\n        \r\n        //calling function recursively for adjacent cells.\r\n        if(sx-1>=0 && grid[sx-1][sy]!=0 && !vis[sx-1][sy])\r\n            ans |= dfs(sx-1, sy, dx, dy, vis, grid);\r\n        \r\n        if(sx+1<grid.length && grid[sx+1][sy]!=0 && !vis[sx+1][sy])\r\n            ans |= dfs(sx+1, sy, dx, dy, vis, grid);\r\n            \r\n        if(sy-1>=0 && grid[sx][sy-1]!=0 && !vis[sx][sy-1])\r\n            ans |= dfs(sx, sy-1, dx, dy, vis, grid);\r\n            \r\n        if(sy+1<grid[0].length && grid[sx][sy+1]!=0 && !vis[sx][sy+1])\r\n            ans |= dfs(sx, sy+1, dx, dy, vis, grid);\r\n            \r\n        return ans;\r\n    }\r\n    \r\n    //Function to find whether a path exists from the source to destination.\r\n    public boolean is_Possible(int[][] grid)\r\n    {\r\n        int n = grid.length;\r\n        int m = grid[0].length;\r\n        \r\n        //using boolean array to mark visited cells.\r\n        boolean vis[][] = new boolean[n][m];\r\n        int sx = -1, sy = -1, dx = -1, dy = -1;\r\n        \r\n        //traversing all the cells of the matrix.\r\n        for(int i = 0; i < n; i++)\r\n        {\r\n            for(int j = 0; j < m; j++)\r\n            {\r\n                //storing the source and destination indexes.\r\n                if(grid[i][j]==1)\r\n                {\r\n                    sx = i;\r\n                    sy = j;\r\n                }\r\n                \r\n                if(grid[i][j]==2)\r\n                {\r\n                    dx = i;\r\n                    dy = j;\r\n                }\r\n            }\r\n        }\r\n        //calling function to check if path exists and returning the result.\r\n        return dfs(sx, sy, dx, dy, vis, grid);\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import deque\n\n\nclass Solution:\n\n    #Function to check whether the cell is within the matrix bounds.\n    def isValid(self, x, y, n, m):\n        return (x >= 0 and x < n and y >= 0 and y < m)\n\n    #Function to find whether a path exists from the source to destination.\n    def is_Possible(self, grid):\n\n        n = len(grid)\n        m = len(grid[0])\n        dx = [-1, 1, 0, 0]\n        dy = [0, 0, -1, 1]\n\n        #creating BFS queue\n        q = deque()\n\n        #traversing all the cells of the matrix.\n        for i in range(n):\n            for j in range(m):\n\n                #if there exists a cell in the matrix such that its\n                #value is 1 then we push it to queue.\n                if (grid[i][j] == 1):\n                    q.append([i, j])\n                    break\n\n        while (len(q)):\n            cur = q.popleft()\n            x = cur[0]\n            y = cur[1]\n            for i in range(4):\n                n_x = x + dx[i]\n                n_y = y + dy[i]\n\n                #if the cell is within matrix bounds.\n                if (self.isValid(n_x, n_y, n, m)):\n\n                    #if the value of current cell is 2, we return true.\n                    if (grid[n_x][n_y] == 2):\n                        return True\n\n                    #if the value of current cell is 3, we replace the value\n        #with 1 and push the cell into the queue.\n                    elif (grid[n_x][n_y] == 3):\n                        grid[n_x][n_y] = 1\n                        q.append([n_x, n_y])\n\n        return False\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public bool is_Possible(List<List<int>> grid)\n    {\n        int n = grid.Count;\n        int m = grid[0].Count;\n        \n        //creating BFS queue \n        Queue<(int, int)> q = new Queue<(int, int)>();\n        \n        //traversing all the cells of the matrix.\n        for(int i = 0; i < n; i++)\n        {\n            for(int j = 0; j < m; j++)\n            {\n                //if there exists a cell in the matrix such that its \n                //value is 1 then we push it to queue.\n                if(grid[i][j] == 1){\n                    q.Enqueue((i,j));\n                }\n            }\n        }\n        \n        while(q.Count > 0)\n        {\n            int x = q.Peek().Item1;\n            int y = q.Peek().Item2;\n            q.Dequeue();\n            for(int i = 0; i < 4; i++)\n            {\n                int n_x = x + dx[i];\n                int n_y = y + dy[i];\n                \n                //if the cell is within matrix bounds.\n                if(isValid(n_x, n_y, n, m))\n                {\n                    //if the value of current cell is 2, we return true.\n                    if(grid[n_x][n_y] == 2)\n                        return true;\n                        \n                    //if the value of current cell is 3, we replace the value\n                    //with 1 and push the cell into the queue.\n                    if(grid[n_x][n_y] == 3){\n                        grid[n_x][n_y] = 1;\n                        q.Enqueue((n_x, n_y));\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    //Function to check whether the cell is within the matrix bounds.\n    public bool isValid(int x, int y, int n, int m){\n        return (x >= 0 && x < n && y >= 0 && y < m);\n    }\n    \n    List<int> dx = new List<int>(){-1, 0, 1, 0};\n    List<int> dy = new List<int>(){0, -1, 0, 1}; \n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {number[][]} grid\r\n * @returns {boolean}\r\n*/\r\nclass Solution\r\n{\r\n    //Function to check whether the cell is within the matrix bounds.\r\n    isValid(x, y, n, m)\r\n    {\r\n        return (x >= 0 && x < n && y >=0 && y < m);\r\n    }\r\n    \r\n    //Function to find whether a path exists from the source to destination.\r\n    is_Possible(grid)\r\n    {\r\n        let dx = new Array(4);\r\n        dx[0]=-1;\r\n        dx[1]=0;\r\n        dx[2]=1;\r\n        dx[3]=0;\r\n        \r\n        let dy = new Array(4);\r\n        dy[0]=0;\r\n        dy[1]=-1;\r\n        dy[2]=0;\r\n        dy[3]=1;\r\n        \r\n        let n = grid.length;\r\n        let m = grid[0].length;\r\n        \r\n        //creating BFS queue\r\n        let q = new Array();\r\n        \r\n        //traversing all the cells of the matrix.\r\n        for(let i = 0; i < n; i++)\r\n        {\r\n        \tfor(let j = 0; j < m; j++)\r\n        \t{\r\n        \t    //if there exists a cell in the matrix such that its \r\n                //value is 1 then we push it to queue.\r\n        \t\tif(grid[i][j] == 1){\r\n        \t\t    let tmp = new Array(2);\r\n        \t\t    tmp[0]=i;\r\n        \t\t    tmp[1]=j;\r\n        \t\t\tq.push(tmp);\r\n        \t\t}\r\n        \t}\r\n        }\r\n        while(q.length!=0)\r\n        {\r\n        \tlet x = q[q.length-1][0];\r\n        \tlet y = q[q.length-1][1];\r\n        \tq.pop();\r\n        \tfor(let i = 0; i < 4; i++)\r\n        \t{\r\n        \t\tlet n_x = x + dx[i];\r\n        \t\tlet n_y = y + dy[i];\r\n        \t\t\r\n        \t\t//if the cell is within matrix bounds.\r\n        \t\tif(this.isValid(n_x, n_y, n, m))\r\n        \t\t{\r\n        \t\t    //if the value of current cell is 2, we return true.\r\n        \t\t\tif(grid[n_x][n_y] == 2)\r\n        \t\t\t\treturn true;\r\n        \t\t\t\t\r\n        \t\t\t//if the value of current cell is 3, we replace the value\r\n        \t\t\t//with 1 and push the cell into the queue.\r\n        \t\t\tif(grid[n_x][n_y] == 3){\r\n        \t\t\t\tgrid[n_x][n_y] = 1;\r\n        \t\t\t\tlet tmp = new Array(2);\r\n        \t\t        tmp[0]=n_x;\r\n        \t\t        tmp[1]=n_y;\r\n        \t\t\t\tq.push(tmp);\r\n        \t\t\t}\r\n        \t\t}\r\n        \t}\r\n        }\r\n        return false;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}