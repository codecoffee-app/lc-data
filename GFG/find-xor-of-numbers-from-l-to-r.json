{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712176,
            "title": "Find XOR of numbers from L to R.",
            "titleSlug": "find-xor-of-numbers-from-l-to-r",
            "content": "<p><span style=\"font-size:18px\">You are given two integers L and R, your task is to find the XOR of elements of the range [L, R].</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nL = 4, R = 8 \r\n<strong>Output:</strong>\r\n8 \r\n<strong>Explanation:</strong>\r\n4 ^ 5 ^ 6 ^ 7 ^ 8 = 8</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">Your task is to complete the function <strong>findXOR()</strong> which takes two integers l and r and returns the XOR of numbers from l to r.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><sup><strong>Expected Time Complexity:</strong> O(1).</sup></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><sup><strong>Expected Auxiliary Space:</strong> O(1).</sup></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1&lt;=l&lt;=r&lt;=10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, L and R, determine the XOR of all numbers within the inclusive range [L, R].  The XOR operation should be performed sequentially on each number in the range.",
                "constraints": [
                    "1 <= L <= R <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "L = 4, R = 8",
                        "output": "8",
                        "explanation": "The XOR of the numbers from 4 to 8 is calculated as follows: 4 ^ 5 ^ 6 ^ 7 ^ 8 = 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\n  public:\n    // Function to find the XOR value for a given number.\n    int findXOR(int n) {\n        int rem = n % 4;\n\n        // Using different cases to calculate XOR based on remainder.\n        if (rem == 0) return n;\n        if (rem == 1) return 1;\n        if (rem == 2) return n + 1;\n        if (rem == 3) return 0;\n    }\n\n    // Function to find the XOR value between two numbers.\n    int findXOR(int l, int r) { \n        return findXOR(l - 1) ^ findXOR(r); \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static int findXOR(int n) {\r\n        int mod = n % 4;\r\n\r\n        // If n is a multiple of 4\r\n        if (mod == 0) return n;\r\n\r\n        // If n % 4 gives remainder 1\r\n        else if (mod == 1)\r\n            return 1;\r\n\r\n        // If n % 4 gives remainder 2\r\n        else if (mod == 2)\r\n            return n + 1;\r\n\r\n        // If n % 4 gives remainder 3\r\n        else if (mod == 3)\r\n            return 0;\r\n        return 0;\r\n    }\r\n    public static int findXOR(int l, int r) { return (findXOR(l - 1) ^ findXOR(r)); }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n\n    # Function to find XOR of a range\n    def findXOR(self, l, r):\n\n        # Function to find XOR of a number\n        def findXOR(n):\n            rem = n % 4\n            if rem == 0:\n                return n\n            elif rem == 1:\n                return 1\n            elif rem == 2:\n                return n + 1\n            else:\n                return 0\n\n        # Calculate XOR of range by finding XOR of \n        # (l-1) and r and returning the result\n        return findXOR(l-1)^findXOR(r)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} l\n * @param {number} r\n * @returns {number}\n*/\n\nclass Solution {\n    // Function to find XOR of a range\n    findXOR(l, r) {\n        // Function to find XOR of a number\n        function findXOR(n) {\n            var rem = n % 4;\n            if (rem === 0) {\n                return n;\n            } else if (rem === 1) {\n                return 1;\n            } else if (rem === 2) {\n                return n + 1;\n            } else {\n                return 0;\n            }\n        }\n\n        // Calculate XOR of range by finding XOR of \n        // (l-1) and r and returning the result\n        return findXOR(l - 1) ^ findXOR(r);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find XOR of two numbers.\n    public int findXOR(int l, int r)\n    {\n        int result = findXOR(l - 1) ^ findXOR(r);\n        return result;\n    }\n\n    // Function to find the XOR value for a given number.\n    int findXOR(int n)\n    {\n        int rem = n % 4;\n\n        // Using different cases to calculate XOR based on remainder.\n        if (rem == 0) return n;\n        if (rem == 1) return 1;\n        if (rem == 2) return n + 1;\n        if (rem == 3) return 0;\n        return 0;\n    }\n\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}