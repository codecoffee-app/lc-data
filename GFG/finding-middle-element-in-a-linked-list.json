{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700171,
      "title": "Middle of a Linked List",
      "titleSlug": "finding-middle-element-in-a-linked-list",
      "content": "<p><span style=\"font-size: 18px;\">Given the head of a linked list, the task is to find the <strong>middle</strong>. For example, the middle of <strong>1-&gt; 2-&gt;3-&gt;4-&gt;5 </strong>is <strong>3</strong>. If there are two middle nodes (even count), return the <strong>second middle</strong>. For example, middle of <strong>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</strong> is <strong>4</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">Linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5\n<strong>Output: </strong>3<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700171/Web/Other/blobid0_1721970743.png\" width=\"376\" height=\"66\" /><br /><strong>Explanation:</strong> The given linked list is </span><span style=\"font-size: 18px;\">1-&gt;2-&gt;3-&gt;4-&gt;5 and its m</span><span style=\"font-size: 18px;\">iddle is 3.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">Linked list: 2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1\n<strong>Output: </strong>7 <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700171/Web/Other/blobid1_1721970760.png\" width=\"439\" height=\"74\" /><br /><strong>Explanation:</strong> The given linked list is </span><span style=\"font-size: 18px;\">2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1 and its middle </span><span style=\"font-size: 18px;\">is 7.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= no. of nodes &lt;= 10<sup>5</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given the head of a singly linked list, find the middle node. If the list has an odd number of nodes, return the middle node. If the list has an even number of nodes, return the *second* middle node.",
        "constraints": ["1 <= number of nodes <= 10^5"],
        "testcases": [
          {
            "input": "Linked list: 1->2->3->4->5",
            "output": "3",
            "explanation": "The linked list has 5 nodes. The middle node is the 3rd node, which contains the value 3."
          },
          {
            "input": "Linked list: 2->4->6->7->5->1",
            "output": "7",
            "explanation": "The linked list has 6 nodes. The two middle nodes would be 6 and 7. The problem statement requires returning the second middle node, so 7 is returned."
          },
          {
            "input": "Linked list: 1",
            "output": "1",
            "explanation": "The linked list has 1 node. The middle node is the 1st node, which contains the value 1."
          },
          {
            "input": "Linked list: 1->2",
            "output": "2",
            "explanation": "The linked list has 2 nodes. The middle nodes would be 1 and 2. The problem statement requires returning the second middle node, so 2 is returned."
          },
          {
            "input": "Linked list: 1->2->3->4",
            "output": "3",
            "explanation": "The linked list has 4 nodes.  The two middle nodes would be 2 and 3. The problem statement requires returning the second middle node, so 3 is returned."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p><span style=\"font-size: 16px;\">Take two pointers i.e. fast and slow. Start both pointers from the head. The fast pointer will move double the slow pointer each time till it reaches the end. Our slow pointer will be on the middle element as soon as the fast pointer reaches the end.</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Linked List",
        "slug": "linked-list"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": [
      "vmware",
      "zoho",
      "flipkart",
      "morgan-stanley",
      "amazon",
      "microsoft",
      "samsung",
      "hike",
      "payu",
      "maq-software",
      "adobe",
      "wipro",
      "sap",
      "qualcomm",
      "nagarro",
      "ge",
      "veritas",
      "igniteworld",
      "netskope"
    ],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "class Solution {\n  public:\n    /* Should return data of middle node. If linked list is empty, then -1 */\n    int getMiddle(Node* head) {\n        Node* slow = head;\n        Node* fast = head;\n\n        if (head == NULL)\n            return -1;\n\n        while (fast != NULL && fast->next != NULL) {\n            fast = fast->next->next;\n            slow = slow->next;\n        }\n\n        return slow->data;\n    }\n};\n",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "/* Node of a linked list\n class Node {\n   int data;\n    Node next;\n    Node(int d)  {\n        data = d;\n        next = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to find middle element a linked list\n    int getMiddle(Node head) {\n        Node slow = head;\n        Node fast = head;\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            // this pointer moves 1 nodes ahead everytime loop is run\n\n            fast = fast.next.next;\n            // this pointer moves 2 nodes ahead everytime loop is run\n        }\n\n        return slow.data;\n        // since slow was moving with half speed, it is there at halfway point\n    }\n}\n",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "class Solution:\n\n    def getMiddle(self, head):\n        if head is None:\n            return None\n\n        ptr1 = head\n        ptr2 = head\n        while (ptr2 is not None and ptr2.next is not None):\n            ptr1 = ptr1.next\n            # this pointer moves 1 nodes ahead everytime loop is run\n\n            ptr2 = ptr2.next.next\n            # this pointer moves 2 nodes ahead everytime loop is run\n\n        return ptr1.data\n        # since slow was moving with half speed, it is there at halfway point\n",
        "lang_text": "py"
      },
      {
        "lang": "Javascript",
        "full_func": "// User function Template for javascript\n/*class Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n\nlet head;\nThis is method only submission.\nYou only need to complete the below method.*/\n\nclass Solution {\n    /* Should return data of middle node. If linked list is empty, then  -1*/\n    getMiddle(node) {\n        let slow = node;\n        let fast = node;\n\n        if (node === null) {\n            return -1;\n        }\n\n        while (fast !== null && fast.next !== null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n\n        return slow.data;\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
