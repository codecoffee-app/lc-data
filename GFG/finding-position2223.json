{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705025,
            "title": "Finding Position",
            "titleSlug": "finding-position2223",
            "content": "<p><span style=\"font-size: 18px;\">Some people(n) are standing in a queue. A selection process follows a rule where people standing on even positions&nbsp;are selected. Of the selected people a queue is formed and again out&nbsp;of these only&nbsp;people on even position&nbsp;are selected. This continues until we are left with one person.&nbsp;Find out the position of that person in the original queue.<br /><br /><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 5\n<strong>Output:</strong>&nbsp;4&nbsp;\n<strong>Explanation</strong>: 1,2,3,4,5 -&gt; 2,4 -&gt; 4.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 9\n<strong>Output:&nbsp;</strong>8\n<strong>Explanation</strong>: 1,2,3,4,5,6,7,8,9\n-&gt;2,4,6,8 -&gt; 4,8 -&gt; 8. </span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You dont need to read input or print anything. Complete the function <strong>nthPosition()&nbsp;</strong>which takes n&nbsp;as input parameter and returns the position(original queue) of that person who is left.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(logn)<br /><strong>Expected Auxiliary Space:</strong> O(1)<br /><br /><strong>Constraints:</strong><br />2&lt;= n &lt;=10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "There are 'n' people standing in a queue. A selection process iteratively selects people at even positions. Of those selected, a new queue is formed, and the process repeats until only one person remains.  Determine the original position of this final person in the initial queue.",
                "constraints": [
                    "2 <= n <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "4",
                        "explanation": "Initially, the queue is 1, 2, 3, 4, 5. In the first round, 2 and 4 are selected.  In the second round, only 4 is selected. Therefore, the original position of the last person is 4."
                    },
                    {
                        "input": "9",
                        "output": "8",
                        "explanation": "Initially, the queue is 1, 2, 3, 4, 5, 6, 7, 8, 9. In the first round, 2, 4, 6, and 8 are selected. In the second round, 4 and 8 are selected. In the final round, only 8 is selected. Therefore, the original position of the last person is 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use math(log).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to find the nth position of a number that is a power of two\n    long long int nthPosition(long long int n){\n        long long int p = (long long int)log2(n); \n        // Finding the position by taking the log base 2 of n\n        return (long long int)pow(2, p); \n        // Returning the result by calculating 2 raised to the power of p\n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public long nthPosition(long n)\n    {\n        long p = (long)Math.Log(n, 2); // Finding the position by taking the log base 2 of n\n        return (long)Math.Pow(2, p); // Returning the result by calculating 2 raised to the power of p\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}