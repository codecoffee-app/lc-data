{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705281,
            "title": "Finding Profession",
            "titleSlug": "finding-profession3834",
            "content": "<p><span style=\"font-size: 18px;\">Consider a special family of <strong>Engineers</strong> and <strong>Doctors</strong> with following rules :</span></p>\n<ol>\n<li><span style=\"font-size: 18px;\">Everybody has two children.</span></li>\n<li><span style=\"font-size: 18px;\">First child of an Engineer is an Engineer and second child is a Doctor.</span></li>\n<li><span style=\"font-size: 18px;\">First child of an Doctor is Doctor and second child is an Engineer.</span></li>\n<li><span style=\"font-size: 18px;\">All generations of Doctors and Engineers start with Engineer.</span></li>\n</ol>\n<p><span style=\"font-size: 18px;\">We can represent the situation using below diagram:</span></p>\n<pre><span style=\"font-size: 18px;\">\\t\\t    E\n\\t     /\\t  \\\n\\t    E\\t    D\n\\t  /   \\\\t /  \\\n\\t E     D     D    E\n\\t/ \\   / \\   / \\   / \\\n     E   D D   E  D  E  E  D\n</span></pre>\n<p><span style=\"font-size: 18px;\">Given <strong>level</strong> and position(<strong>pos</strong>) of a person in above ancestor tree, find profession of the person.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> level = 4, pos = 2\n<strong>Output:</strong> Doctor\n<strong>Explaination:</strong> It is shown in the tree given \nin question.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> level = 3, pos = 4\n<strong>Output:</strong> Engineer\n<strong>Explaination:</strong> Already given in the tree in \nquestion.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>profession()</strong> which takes level and pos as input parameters and returns 'd' if it is a doctor. Otherwise return 'e'. The driver code will output Doctor for 'd' and Engineer for 'e' itself.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(log(pos))<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; level &le; 10<sup>9</sup><br />1 &le; pos &le; min(10<sup>9</sup>, 2<sup>level-1</sup>)</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Consider a family of Engineers and Doctors with the following rules:\n\n1.  Every person has two children.\n2.  An Engineer's first child is an Engineer, and the second is a Doctor.\n3.  A Doctor's first child is a Doctor, and the second is an Engineer.\n4.  All generations begin with an Engineer.\n\nGiven the level and position (pos) of a person in the family tree, determine their profession (Engineer or Doctor).",
                "constraints": [
                    "1 <= level <= 10^9",
                    "1 <= pos <= min(10^9, 2^(level-1))"
                ],
                "testcases": [
                    {
                        "input": "level = 4, pos = 2",
                        "output": "Doctor",
                        "explanation": "At level 4, the person at position 2 is a Doctor."
                    },
                    {
                        "input": "level = 3, pos = 4",
                        "output": "Engineer",
                        "explanation": "At level 3, the person at position 4 is an Engineer."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find out the underlying pattern.</span></p>",
            "<p><span style=\"font-size:18px\">Engineer&#39;s first son is engineer and second is doctor. And the reverse is true for a doctor. Use this concept recursively.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "oracle"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n  public:\r\n\r\n    /* Function to get no of set bits in binary\r\n        representation of passed binary no. */\r\n    int countSetBits(int n)\r\n    {\r\n        int count = 0;\r\n        while (n)\r\n        {\r\n          n &= (n-1) ;\r\n          count++;\r\n        }\r\n        return count;\r\n    }\r\n    \r\n    char profession(int level, int pos){\r\n        // Count set bits in 'pos-1'\r\n        int c = countSetBits(pos-1);\r\n     \r\n        // If set bit count is odd, then doctor, else engineer\r\n        return (c%2)?  'd' : 'e';\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\nclass Solution{\r\n    static int countSetBits(int n)\r\n    {\r\n        int count = 0;\r\n        while (n != 0)\r\n        {\r\n          n &= (n-1) ;\r\n          count++;\r\n        }\r\n        return count;\r\n    }\r\n    static char profession(int level, int pos){\r\n        // Count set bits in 'pos-1'\r\n        int c = countSetBits(pos-1);\r\n     \r\n        // If set bit count is odd, then doctor, else engineer\r\n        return (c%2 == 1)?  'd' : 'e';\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n  # Function that determines the profession based on the level and position\n  def profession(self, level, pos):\n\n    # Base case: if the position is 1, return 'e'\n    if pos == 1:\n      return 'e'\n\n    # Recursive case: determine the parent's profession at the previous level\n    par = self.profession(level-1, (pos+1)//2)\n\n    # If the position is odd, return the same profession as the parent\n    if pos % 2 != 0:\n      return par\n\n    # If the position is even, determine the profession based on the parent's profession\n    if par == 'e':\n      return \"d\"\n    else:\n      return \"e\"",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} level\r\n * @param {number} pos\r\n * @returns {string}\r\n*/\r\n\r\nclass Solution {\r\n    profession(level, pos) {\r\n        // Base case: if the position is 1, return 'e'\r\n        if (pos === 1) {\r\n            return 'e';\r\n        }\r\n\r\n        // Recursive case: determine the parent's profession at the previous level\r\n        let par = this.profession(level-1, Math.floor((pos+1)/2));\r\n\r\n        // If the position is odd, return the same profession as the parent\r\n        if (pos % 2 !== 0) {\r\n            return par;\r\n        }\r\n\r\n        // If the position is even, determine the profession based on the parent's profession\r\n        if (par === 'e') {\r\n            return \"d\";\r\n        } else {\r\n            return \"e\";\r\n        }\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}