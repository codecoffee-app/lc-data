{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703807,
            "title": "Non Repeating Numbers",
            "titleSlug": "finding-the-numbers0215",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> containing 2*n+2 positive numbers, out of which 2*n numbers exist in pairs whereas the other two number occur exactly once and are distinct. Find the other two numbers. Return the answer in increasing order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 2, 1, 4]\n<strong>Output: </strong>[3, 4] \n<strong>Explanation: </strong>3 and 4 occur exactly once.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 1, 3, 2]\n<strong>Output: </strong>[1, 3]\n<strong>Explanation: </strong>1 and 3 occur exactly once.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 1, 3, 3]\n<strong>Output: </strong>[1, 2]\n<strong>Explanation: </strong>1 and 2 occur exactly once.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /><span >2 &lt;= arr.size() &lt;= 10<sup>6&nbsp;</sup></span></span><br /><span >1 &lt;= arr[i] &lt;= 5 * 10<sup>6<br /><span >arr.size() is even</span></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers `arr[]` of size 2*n+2, where 2*n numbers appear in pairs and the remaining two numbers appear exactly once and are distinct, find the two numbers that occur only once. Return the two numbers in ascending order.",
                "constraints": [
                    "2 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 5 * 10^6",
                    "arr.size() is even"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 2, 1, 4]",
                        "output": "[3, 4]",
                        "explanation": "The numbers 3 and 4 appear only once in the array."
                    },
                    {
                        "input": "[2, 1, 3, 2]",
                        "output": "[1, 3]",
                        "explanation": "The numbers 1 and 3 appear only once in the array."
                    },
                    {
                        "input": "[2, 1, 3, 3]",
                        "output": "[1, 2]",
                        "explanation": "The numbers 1 and 2 appear only once in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to find two groups whose element differ at any set bit.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "factset",
            "makemytrip",
            "google",
            "qualcomm"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> singleNumber(vector<int>& arr) {\n        // Pass 1 :\n        // Get the XOR of the two numbers we need to find\n\n        int diff = 0;\n        for (auto i : arr)\n            diff = i ^ diff;\n        // Get its last set bit\n        diff &= -diff;\n        // Pass 2 :\n        vector<int> rets = {0, 0}; // this vector stores the two numbers we will return\n        for (int num : arr) {\n            if ((num & diff) == 0) // the bit is not set\n            {\n                rets[0] ^= num;\n            } else // the bit is set\n            {\n                rets[1] ^= num;\n            }\n        }\n        if (rets[0] > rets[1])\n            swap(rets[0], rets[1]);\n        return rets;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<Integer> singleNumber(int[] arr) {\n        // Step 1: Get the XOR of the two unique numbers\n        int diff = 0;\n        for (int num : arr) {\n            diff ^= num;\n        }\n\n        // Step 2: Isolate the rightmost set bit in diff\n        diff &= -diff;\n\n        // Step 3: Divide numbers into two groups and XOR to find unique numbers\n        int num1 = 0, num2 = 0;\n        for (int num : arr) {\n            if ((num & diff) == 0) // If the bit is not set\n            {\n                num1 ^= num;\n            } else // If the bit is set\n            {\n                num2 ^= num;\n            }\n        }\n\n        // Step 4: Add numbers to the list in sorted order\n        List<Integer> result = new ArrayList<>();\n        if (num1 < num2) {\n            result.add(num1);\n            result.add(num2);\n        } else {\n            result.add(num2);\n            result.add(num1);\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def singleNumber(self, arr):\n\n        #  Get the XOR of the two numbers we need to find\n\n        diff = 0\n        for i in arr:\n            diff ^= i\n        # Get its last set bit\n        diff &= -diff\n        # this vector stores the two numbers we will return\n        ans1 = 0\n        ans2 = 0\n        for i in arr:\n            # the bit is not set\n            if i & diff:\n                ans1 ^= i\n            else:\n                #  the bit is set\n                ans2 ^= i\n\n        if ans1 > ans2:\n            return ans2, ans1\n        else:\n            return ans1, ans2\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @return {number[]}\n */\n\nclass Solution {\n    singleNumber(arr) {\n        // Get the XOR of the two numbers we need to find\n\n        let diff = 0;\n        for (let i = 0; i < arr.length; i++) {\n            diff = diff ^ arr[i];\n        }\n        // Get its last set bit\n        diff &= -diff;\n        // this vector stores the two numbers we will return\n        let rets = [ 0, 0 ];\n        for (let i = 0; i < arr.length; i++) {\n            if ((arr[i] & diff) === 0) { // the bit is not set\n                rets[0] ^= arr[i];\n            } else {\n                rets[1] ^= arr[i]; // the bit is set\n            }\n        }\n\n        if (rets[0] > rets[1]) {\n            let temp = rets[0];\n            rets[0] = rets[1];\n            rets[1] = temp;\n        }\n        return rets;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}