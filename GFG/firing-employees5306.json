{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704384,
            "title": "Firing employees",
            "titleSlug": "firing-employees5306",
            "content": "<p><span style=\"font-size: 18px;\">Geek is the founder of Geek Constructions. He always maintains a black-list&nbsp;of potential employees which can be fired at any moment.</span></p>\n<p><span style=\"font-size: 18px;\">The company has N employees (including Geek), and each employee is assigned a distinct rank (1 &lt;= rank &lt;= N) at the time of joining. The company has a hierarchical &nbsp;management such that each employee always has one immediate senior.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">Geek has a strange and unfair way of evaluating an employees performance. He sums the employee's rank and the number of seniors the employee has. If it is a prime number, the employee is put up on the black-list.</span></p>\n<p><span style=\"font-size: 18px;\">Given an&nbsp;array arr[] in order of the rank of company employees. For rank i, arr[i] represents the rank of the immediate senior of the employee with the ith rank. If geek's rank is i, then arr[i] is always equal to 0 as there is no one senior to him. Find out the number of Black-Listed employees.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> The black-list can not&nbsp;contain Geeks name as he is the founder of the company and he is the one that makes the list.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 4\narr[] = {0, 1, 1, 2}</span>\n\n<strong><span style=\"font-size: 18px;\">Output: 1</span></strong>\n\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nThe hierarchy is as follows</span>\n\n<span style=\"font-size: 18px;\">\\t (Geek)\n\\t Rank 1\n\\t  /   \\\n  Rank 2     Rank 3  \n\\t/\nRank 4</span>\n\n<span style=\"font-size: 18px;\">Performance = rank + number of seniors\nPerformance for rank 1 = not considered.\nPerformance for rank 2 = 2+1 = 3 (prime)\nPerformance for rank 3 = 3+1 = 4 (not prime)\nPerformance for rank 4 = 4+2 = 6 (not prime)\nTherefore, only employee 1 is black-listed.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 3\narr[] = {2, 3, 0}</span>\n\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 2</span>\n\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>\nThe hierarchy is as follows</span>\n\n<span style=\"font-size: 18px;\">\\t (Geek)\n\\t Rank 3\n\\t  /   \n  Rank 2     \n\\t/\nRank 1\n</span>\n<span style=\"font-size: 18px;\">Performance for rank 3 = not considered. \nPerformance for rank 2 = 2+1 = 3 (prime) \nPerformance for rank 1 = 1+2 = 3 (prime)</span>\n<span style=\"font-size: 18px;\">Rank 1 and 2 are both black-listed.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task: &nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function<strong> firingEmployees()</strong> which takes the array arr[] and its size N as input parameters. It returns the number of black-listed employees.&nbsp;</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(N)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>5</sup><br />1 &lt;= i &lt;= N<br />1 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek, the founder of Geek Constructions, maintains a black-list of employees who can be fired. The company has N employees, each with a unique rank from 1 to N. The company has a hierarchical management structure where each employee has one immediate senior. Geek evaluates employee performance by summing their rank and the number of seniors they have. If the sum is a prime number, the employee is added to the black-list. Given an array `arr[]` representing the rank of the immediate senior for each employee (where `arr[i]` is the senior of the employee with rank `i+1`, and `arr[i] = 0` if the employee is Geek), determine the number of black-listed employees. Geek himself is not considered for the black-list.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= i <= N",
                    "0 <= arr[i] <= N"
                ],
                "testcases": [
                    {
                        "input": "N = 4\narr[] = {0, 1, 1, 2}",
                        "output": "1",
                        "explanation": "The employee with rank 2 has one senior (rank 1). Performance = 2 + 1 = 3, which is prime. The employee with rank 3 has one senior (rank 1). Performance = 3 + 1 = 4, which is not prime. The employee with rank 4 has two seniors (rank 1 and rank 2). Performance = 4 + 2 = 6, which is not prime. Thus, only the employee with rank 2 is black-listed."
                    },
                    {
                        "input": "N = 3\narr[] = {2, 3, 0}",
                        "output": "2",
                        "explanation": "The employee with rank 2 has one senior (rank 3). Performance = 2 + 1 = 3, which is prime. The employee with rank 1 has two seniors (rank 2 and rank 3). Performance = 1 + 2 = 3, which is prime. Thus, the employees with rank 1 and 2 are black-listed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Method 1 :</p>\n\n<p>Use BFS&nbsp;or DFS algorithm&nbsp;to calculate the level in the company hierarchy for&nbsp;each person. This can be used to determine&nbsp;the number of seniors an employee has.&nbsp;Geek will always be at level 0, his immediate subordinates at level 1 and so on.<br />\nGenerate a list of prime numbers&nbsp;upto&nbsp;10^5 using Sieve of Eratosthenes. Now, for each person check if the conditions given in the problem statement are true or not.</p>\n\n<p>&nbsp;</p>",
            "<p>Method 2:</p>\n\n<p>Can you use dynamic programming to reduce the time complexity ?</p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\n    \n    public:\n    vector<bool> b;\n\n    // Function to precompute prime numbers up to a certain number\n    void precompute()\n    {\n        b.resize(100010,true);\n        b[0]=false;\n        b[1]=false;\n        for(int i=2;i<100010;i++){\n            for(int j=i+i;j<100010;j=j+i){\n                b[j]=false;\n            }\n        }\n    }\n\n    // Function to solve the firing employees problem recursively\n    int solve(int i,vector<int>&dp,vector<int>&arr){\n        if(arr[i]==0)return 0;\n        if(dp[i]!=-1)return dp[i];\n        dp[i]=1+solve(arr[i]-1,dp,arr);\n        return dp[i];\n    }\n    \n    // Function to count the number of employees to be fired\n    int firingEmployees(vector<int> &arr, int n)\n    {\n        precompute();\n        vector<int>dp(n,-1);\n        for(int i=0;i<n;i++){\n            if(arr[i]==0){\n                dp[i]=0;\n            }\n        }\n        for(int i=0;i<n;i++){\n            if(dp[i]!=-1)continue;\n            dp[i] = solve(i,dp,arr);\n        }\n        int cnt=0;\n        for(int i=0;i<n;i++){\n            if(dp[i]==0)continue;\n            if(b[dp[i]+1+i]){\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//User function Template for Java\n\nclass Solution {\n    \n    //maximum size for boolean array\n    static int N=100010;\n    \n    //boolean array to store prime numbers\n    static boolean b[];\n    \n    //function to precompute prime numbers\n    static void precompute()\n    {\n        //initialize boolean array with true values\n        b=new boolean[N];\n        Arrays.fill(b,true);\n        b[0]=false;\n        b[1]=false;\n        \n        //loop to mark non-prime numbers as false\n        for(int i=2;i<100010;i++){\n            for(int j=i+i;j<100010;j=j+i){\n                b[j]=false;\n            }\n        }\n    }\n\n    //recursive function to calculate number of employees that will be fired\n    static int solve(int i,int dp[],int arr[]){\n        //if current employee is not a manager, return 0\n        if(arr[i]==0)return 0;\n        //if already calculated, return the value\n        if(dp[i]!=-1)return dp[i];\n        //calculate the number of employees fired recursively\n        dp[i]=1+solve(arr[i]-1,dp,arr);\n        return dp[i];\n    }\n    \n    //function to calculate the number of employees that will be fired\n    static int firingEmployees(int arr[], int n)\n    {\n        //precompute prime numbers\n        precompute();\n        \n        //array to store the calculated number of employees fired for each employee\n        int dp[]=new int[n];\n        Arrays.fill(dp,-1);\n        \n        //base case: if employee is not a manager, number of employees fired is 0\n        for(int i=0;i<n;i++){\n            if(arr[i]==0){\n                dp[i]=0;\n            }\n        }\n        \n        //calculate the number of employees fired for each employee\n        for(int i=0;i<n;i++){\n            if(dp[i]!=-1)continue;\n            dp[i] = solve(i,dp,arr);\n        }\n        \n        //count the number of employees that will be fired and are in prime positions\n        int cnt=0;\n        for(int i=0;i<n;i++){\n            if(dp[i]==0)continue;\n            if(b[dp[i]+1+i]){\n                cnt++;\n            }\n        }\n        \n        //return the final count\n        return cnt;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from collections import defaultdict\n\nclass Solution:\n    def firingEmployees(self, arr, n):\n        # Creating a dictionary to store the children of each employee\n        child = defaultdict(list)\n        \n        # Looping through the array to populate the dictionary\n        for i in range(n):\n            # If the employee has a parent, add them to the list of children for that parent\n            if arr[i] != 0:\n                child[arr[i]].append(i+1)\n            # If the employee is the root (parent = 0), store their index as the root\n            else:\n                root = i+1\n                \n        # Initializing the count of fired employees and the depth of the current level\n        cnt = 0\n        depth = 1\n        \n        # Starting with the children of the root\n        curr = child[root]\n        # Storing the next level of children to process\n        next_level = []\n        \n        # Looping until there are no more employees at the current level\n        while curr:\n            # Removing an employee from the current level\n            temp = curr.pop()\n            # Adding their children to the next level list\n            next_level.extend(child[temp])\n            \n            # Checking if the employee's index plus the depth is prime\n            cnt += 1 if self.checkPrime(temp+depth) else 0\n            \n            # If there are no more employees at the current level, move on to the next level\n            if not curr:\n                # Incrementing the depth for the next level\n                depth += 1\n                # Updating the current level to be the next level\n                curr = next_level[:]\n                # Clearing the next level list to start anew\n                next_level = []\n                \n        # Returning the count of fired employees\n        return cnt\n        \n    def checkPrime(self,val):\n        # Checking if a number is prime\n        isPrime = True\n        for i in range(2, int(val**0.5) + 1):\n            if val % i == 0:\n                isPrime = False\n                break\n            \n        return isPrime",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}