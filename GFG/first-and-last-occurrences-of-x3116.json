{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703459,
            "title": "First and Last Occurrences",
            "titleSlug": "first-and-last-occurrences-of-x3116",
            "content": "<p><span >Given a sorted array <strong>arr</strong> with possibly some duplicates, the task is to find the first and last occurrences of an element <strong>x</strong> in the given array.<br /><strong>Note:</strong>&nbsp;If the number&nbsp;<strong>x</strong> is not found in the array then return both the indices as -1.<br /></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 3, 5, 5, 5, 5, 67, 123, 125], x = 5\n<strong>Output: </strong>[2, 5]\n<strong>Explanation</strong>: First occurrence of 5 is at index 2 and last occurrence of 5 is at index 5\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 3, 5, 5, 5, 5, 7, 123, 125], x = 7\n<strong>Output:</strong> [6, 6]<br /><strong>Explanation:</strong> First and last occurrence of 7 is at index 6<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3], x = 4\n<strong>Output:</strong> [-1, -1]\n<strong>Explanation</strong>: No occurrence of 4 in the array, so, output is [-1, -1]</span></pre>\n<p><span ><strong>Constraints:<br /></strong>1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i], x &le; 10<sup>9</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try to use binary search to find the first and last index.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the first and last occurrence of x in the array\n    vector<int> find(vector<int>& arr, int x) {\n\n        int n = arr.size();\n        vector<int> ans(2, -1);\n\n        // Find the first occurrence of x\n        int left = 0, right = n - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (arr[mid] == x) {\n                ans[0] = mid;\n                right = mid - 1;\n            } else if (arr[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        // Find the last occurrence of x\n        left = 0;\n        right = n - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (arr[mid] == x) {\n                ans[1] = mid;\n                left = mid + 1;\n            } else if (arr[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class GFG {\n    ArrayList<Integer> find(int arr[], int x) {\n        int n = arr.length;\n        int l = 0, r = n - 1;\n        int left_index = -1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (arr[mid] < x) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n                left_index = mid;\n            }\n        }\n\n        l = 0;\n        r = n - 1;\n        int right_index = -1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (arr[mid] <= x) {\n                l = mid + 1;\n                right_index = mid;\n            } else {\n                r = mid - 1;\n            }\n        }\n\n        ArrayList<Integer> ans = new ArrayList<>();\n        if (arr[left_index] != x || arr[right_index] != x) {\n            ans.add(-1);\n            ans.add(-1);\n            return ans;\n        }\n        ans.add(left_index);\n        ans.add(right_index);\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def find(self, arr, x):\n        n = len(arr)  # Length of the array\n        ans = [-1, -1]  # Initialize answer as [-1, -1] if x is not found\n\n        # Find the first occurrence of x\n        left, right = 0, n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid] == x:\n                ans[0] = mid  # Store the index of the first occurrence\n                right = mid - 1  # Move left to find any earlier occurrence\n            elif arr[mid] < x:\n                left = mid + 1  # Move right as x would be in the right half\n            else:\n                right = mid - 1  # Move left as x would be in the left half\n\n        # Find the last occurrence of x\n        left, right = 0, n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if arr[mid] == x:\n                ans[1] = mid  # Store the index of the last occurrence\n                left = mid + 1  # Move right to find any later occurrence\n            elif arr[mid] < x:\n                left = mid + 1  # Move right as x would be in the right half\n            else:\n                right = mid - 1  # Move left as x would be in the left half\n\n        return ans  # Return the indices of the first and last occurrences\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    find(arr, x) {\n        let n = arr.length; // Get the length of the array.\n        let a1 =\n            -1; // Initialize variables to store the first and last occurrences of x.\n        let a2 = -1;\n        for (let i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                a1 = i; // Update a1 to the index of the first occurrence of x.\n                break;  // Exit the loop once the first occurrence is found.\n            }\n        }\n        for (let i = n - 1; i >= 0; i--) {\n            if (arr[i] == x) {\n                a2 = i; // Update a2 to the index of the last occurrence of x.\n                break;  // Exit the loop once the last occurrence is found.\n            }\n        }\n        return [\n            a1, a2\n        ]; // Return an array containing the indices of the first and last occurrences\n           // of x.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}