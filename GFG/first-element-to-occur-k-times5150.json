{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703319,
            "title": "At Least K Occurrences",
            "titleSlug": "first-element-to-occur-k-times5150",
            "content": "<p><span >Given an array <strong>arr</strong>. Return the element that occurs at least<strong>&nbsp;k</strong> number of times.</span></p>\n<p><span ><em>Note:</em></span></p>\n<ul>\n<li><span ><strong><span style=\"font-weight: 400;\">If there are multiple answers, please return the first one.</span></strong></span></li>\n<li><span ><strong><span style=\"font-weight: 400;\">If there is no element found, return -1.</span></strong></span></li>\n</ul>\n<p><span ><strong>Examples</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 7, 4, 3, 4, 8, 7], k = 2\n<strong>Output: </strong>4\n<strong>Explanation: </strong>Both 7 and 4 occur 2 times. But 4 is first that occurs twice. As the index = 4, is the first element.</span></pre>\n<pre><span ><strong>Input: </strong> arr[] = [3, 1, 3, 4, 5, 1, 3, 3, 5, 4], k = 3<br /><strong>Output: </strong>3<br /><strong>Explanation: </strong>Here, 3 is the only number that appeared atleast 3 times in the array.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [10, 8, 2], k = 10</span><br /><span ><strong>Output: </strong>-1</span><br /><span ><strong>Explanation:</strong> Here no element is returning atleast 10 number of times, so -1.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= k &lt;= 10<sup>3</sup><br />0 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr`, find the first element that appears at least `k` times. If multiple elements satisfy this condition, return the one that appears earliest in the array. If no element appears at least `k` times, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= k <= 10^3",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 7, 4, 3, 4, 8, 7], k = 2",
                        "output": "4",
                        "explanation": "Both 7 and 4 appear 2 times. However, 4 appears earlier in the array, so it's the correct answer."
                    },
                    {
                        "input": "arr[] = [3, 1, 3, 4, 5, 1, 3, 3, 5, 4], k = 3",
                        "output": "3",
                        "explanation": "The number 3 is the only element that appears at least 3 times in the array."
                    },
                    {
                        "input": "arr[] = [10, 8, 2], k = 10",
                        "output": "-1",
                        "explanation": "No element appears at least 10 times in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a map to store the occurrence of each element and return the answer once you find the element occurring k times.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the first element occurring k times in the array.\n    int firstElementKTime(vector<int>& arr, int k) {\n        int n = arr.size();\n        // creating an unordered map to store the frequency of elements.\n        unordered_map<int, int> mp;\n\n        // iterating over the array and updating the frequency of elements.\n        for (int i = 0; i < n; i++) {\n            mp[arr[i]]++;\n\n            // if the frequency becomes equal to k, we return the element.\n            if (mp[arr[i]] == k)\n                return arr[i];\n        }\n\n        // if no element occurs k times, we return -1.\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int firstElementKTime(int[] arr, int k) {\n        int n = arr.length;\n        // Initialize a HashMap to store the frequency of elements\n        HashMap<Integer, Integer> s = new HashMap<Integer, Integer>();\n\n        // Iterate through the array\n        for (int i = 0; i < n; i++) {\n            // If the element is already present in the HashMap, increment its frequency\n            if (s.containsKey(arr[i])) {\n                s.put(arr[i], s.get(arr[i]) + 1);\n            }\n            // If the element is not present, add it to the HashMap with frequency 1\n            else {\n                s.put(arr[i], 1);\n            }\n            // Check if the frequency of the element is equal to k\n            if (s.get(arr[i]) == k) {\n                // Return the element if the frequency is k\n                return arr[i];\n            }\n        }\n\n        // Return -1 if no element with frequency k is found\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def firstElementKTime(self, arr, k):\n        n = len(arr)\n        m = {}\n        # Initialize an empty dictionary to keep track of the frequency of each element\n        for i in range(n):  # Iterate through the array\n            if arr[i] not in m:  # Check if the element is not present in the dictionary\n                m[arr[i]] = 0  # If not present, initialize its count to 0\n            m[arr[i]] += 1  # Increment the count of the element\n            if m[arr[\n                    i]] == k:  # Check if the count of the element is equal to k\n                return arr[i]  # If it is, return the element\n        return -1  # If no element is found with count k, return -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\nclass Solution {\n    // Function to find the first element that occurs 'k' times in the array\n    firstElementKTime(arr, k) {\n        // Get the length of the array\n        let n = arr.length;\n\n        // Create a map to store the frequency of each element\n        let mp = new Map();\n\n        // Iterate over each element in the array\n        for (let i = 0; i < n; i++) {\n            // Update the count of the current element in the map\n            mp.set(arr[i], (mp.get(arr[i]) || 0) + 1);\n\n            // Check if the current element's frequency equals 'k'\n            if (mp.get(arr[i]) === k) {\n                // If found, return the element as it is the first to reach 'k'\n                // occurrences\n                return arr[i];\n            }\n        }\n\n        // If no element occurs 'k' times, return -1\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}