{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703375,
            "title": "First negative in every window of size k",
            "titleSlug": "first-negative-integer-in-every-window-of-size-k3345",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[] </strong>&nbsp;and a positive integer <strong>k</strong>, find the first negative integer for each and every window(contiguous subarray) of size <strong>k.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong></span><span style=\"font-size: 18px;\">&nbsp;</span><span style=\"font-size: 18px;\">If a window does not contain a negative integer, then return 0 for that window.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">arr[] = [-8, 2, 3, -6, 10] , k = 2\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">[-8, 0, -6, -6]\n</span><strong style=\"font-size: 18px;\">Explanation:</strong><span style=\"font-size: 18px;\">\nWindow [-8, 2] First negative integer is -8.\nWindow [2, 3] No negative integers, output is 0.\nWindow [3, -6] First negative integer is -6.\nWindow [-6, 10] First negative integer is -6.<br /></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">arr[] = [12, -1, -7, 8, -15, 30, 16, 28] , k = 3\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">[-1, -1, -7, -15, -15, 0] <br /></span><strong style=\"font-size: 18px;\">Explanation:<br /></strong><span style=\"font-size: 18px;\">Window [12, -1, -7] First negative integer is -1.\nWindow [-1, -7, 8] First negative integer is -1.\nWindow [-7, 8, -15] First negative integer is -7.\nWindow [8, -15, 30] First negative integer is -15.\nWindow [-15, 30, 16] First negative integer is -15.\nWindow [30, 16, 28] No negative integers, output is 0.<br /></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">arr[] = [12, 1, 3, 5] , k = 3\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">[0, 0] <br /></span><strong style=\"font-size: 18px;\">Explanation:<br /></strong><span style=\"font-size: 18px;\">Window [12, 1, 3] No negative integers, output is 0.\nWindow [1, 3, 5] No negative integers, output is 0.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><br /><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />-10<sup>5</sup> &lt;= arr[i] &lt;= 10<sup>5</sup><br />1 &lt;= k &lt;= arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and a positive integer `k`, find the first negative integer in each contiguous subarray (window) of size `k`. If a window does not contain a negative integer, return 0 for that window.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-10^5 <= arr[i] <= 10^5",
                    "1 <= k <= arr.size()"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [-8, 2, 3, -6, 10] , k = 2",
                        "output": "[-8, 0, -6, -6]",
                        "explanation": "For the window [-8, 2], the first negative integer is -8.\nFor the window [2, 3], there are no negative integers, so the output is 0.\nFor the window [3, -6], the first negative integer is -6.\nFor the window [-6, 10], the first negative integer is -6."
                    },
                    {
                        "input": "arr[] = [12, -1, -7, 8, -15, 30, 16, 28] , k = 3",
                        "output": "[-1, -1, -7, -15, -15, 0]",
                        "explanation": "For the window [12, -1, -7], the first negative integer is -1.\nFor the window [-1, -7, 8], the first negative integer is -1.\nFor the window [-7, 8, -15], the first negative integer is -7.\nFor the window [8, -15, 30], the first negative integer is -15.\nFor the window [-15, 30, 16], the first negative integer is -15.\nFor the window [30, 16, 28], there are no negative integers, so the output is 0."
                    },
                    {
                        "input": "arr[] = [12, 1, 3, 5] , k = 3",
                        "output": "[0, 0]",
                        "explanation": "For the window [12, 1, 3], there are no negative integers, so the output is 0.\nFor the window [1, 3, 5], there are no negative integers, so the output is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a deque to track indices of negative integers in the current sliding window, and the front of the deque gives the first negative integer for that window.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // function to find the first negative\n    // integer in every window of size k\n    vector<int> firstNegInt(vector<int>& arr, int k) {\n        // A Double Ended Queue, Di that will store indexes of\n        // useful array elements for the current window of size k.\n        // The useful elements are all negative integers.\n        deque<int> Dq;\n        vector<int> ans;\n        int n = arr.size();\n\n        /* Process first k (or first window) elements of array */\n        int i;\n        for (i = 0; i < k; i++)\n            // Add current element at the rear of Di\n            // if it is a negative integer\n            if (arr[i] < 0)\n                Dq.push_back(i);\n\n        // Process rest of the elements, i.e., from arr[k] to arr[n-1]\n        for (; i < n; i++) {\n            // if Di is not empty then the element at the\n            // front of the queue is the first negative integer\n            // of the previous window\n            if (!Dq.empty())\n                ans.push_back(arr[Dq.front()]);\n\n            // else the window does not have a\n            // negative integer\n            else\n                ans.push_back(0);\n\n            // Remove the elements which are out of this window\n            while ((!Dq.empty()) && Dq.front() < (i - k + 1))\n                Dq.pop_front(); // Remove from front of queue\n\n            // Add current element at the rear of Di\n            // if it is a negative integer\n            if (arr[i] < 0)\n                Dq.push_back(i);\n        }\n\n        // Print the first negative\n        // integer of last window\n        if (!Dq.empty())\n            ans.push_back(arr[Dq.front()]);\n        else\n            ans.push_back(0);\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to find the first negative integer in every window of size k\n    static List<Integer> firstNegInt(int arr[], int k) {\n        // A Double Ended Queue to store indexes of useful array elements for the\n        // current window of size k. The useful elements are all negative integers.\n        Deque<Integer> dq = new ArrayDeque<>();\n        List<Integer> ans = new ArrayList<>();\n        int n = arr.length;\n\n        // Process first k (or first window) elements of array\n        for (int i = 0; i < k; i++) {\n            // Add current element at the rear of deque if it is a negative integer\n            if (arr[i] < 0) {\n                dq.addLast(i);\n            }\n        }\n\n        // Process rest of the elements, i.e., from arr[k] to arr[n-1]\n        for (int i = k; i < arr.length; i++) {\n            // If deque is not empty, then the element at the front of the queue is the\n            // first negative integer of the previous window\n            if (!dq.isEmpty()) {\n                ans.add(arr[dq.peekFirst()]);\n            } else {\n                // Else the window does not have a negative integer\n                ans.add(0);\n            }\n\n            // Remove the elements which are out of this window\n            while (!dq.isEmpty() && dq.peekFirst() < (i - k + 1)) {\n                dq.removeFirst(); // Remove from front of queue\n            }\n\n            // Add current element at the rear of deque if it is a negative integer\n            if (arr[i] < 0) {\n                dq.addLast(i);\n            }\n        }\n\n        // Print the first negative integer of the last window\n        if (!dq.isEmpty()) {\n            ans.add(arr[dq.peekFirst()]);\n        } else {\n            ans.add(0);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from collections import deque\n\n\nclass Solution:\n\n    def firstNegInt(self, arr, k):\n        n = len(arr)\n        ans = []\n        dq = deque(\n        )  # Double-ended queue to store indices of negative integers\n\n        # Process first k elements of the array\n        for i in range(min(k, n)):  # Handle case where k > n\n            if arr[i] < 0:\n                dq.append(i)\n\n        # Process the rest of the elements\n        for i in range(k, n):\n            # If deque is not empty, append the first negative integer of the previous window\n            if dq:\n                ans.append(arr[dq[0]])\n            else:\n                ans.append(0)\n\n            # Remove elements which are out of this window\n            while dq and dq[0] < (i - k + 1):\n                dq.popleft()  # Remove from front of the queue\n\n            # Add current element at the rear of deque if it is a negative integer\n            if arr[i] < 0:\n                dq.append(i)\n\n        # Print the first negative integer of the last window\n        if dq:\n            ans.append(arr[dq[0]])\n        else:\n            ans.append(0)\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    firstNegInt(arr, k) {\n        let dq = []; // Deque to store indices of negative integers\n        let ans = [];\n        const n = arr.length; // Length of the array\n\n        // Process first k elements\n        for (let i = 0; i < k; i++) {\n            if (arr[i] < 0) {\n                dq.push(i);\n            }\n        }\n\n        // Process rest of the elements\n        for (let i = k; i < n; i++) {\n            // If Deque is not empty, add the first negative integer of the previous\n            // window\n            if (dq.length > 0) {\n                ans.push(arr[dq[0]]);\n            } else {\n                ans.push(0);\n            }\n\n            // Remove elements which are out of this window\n            while (dq.length > 0 && dq[0] < (i - k + 1)) {\n                dq.shift(); // Remove from front of the queue\n            }\n\n            // Add current element at the rear of Deque if it is a negative integer\n            if (arr[i] < 0) {\n                dq.push(i);\n            }\n        }\n\n        // Print the first negative integer of the last window\n        if (dq.length > 0) {\n            ans.push(arr[dq[0]]);\n        } else {\n            ans.push(0);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}