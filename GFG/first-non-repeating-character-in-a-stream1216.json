{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705333,
            "title": "Stream First Non-repeating",
            "titleSlug": "first-non-repeating-character-in-a-stream1216",
            "content": "<p><span >Given an input stream <strong>s</strong> consisting only of lowercase alphabets. While reading characters from the stream, you have to tell which character has appeared only once in the stream upto that point. If there are many characters that have appeared only once, you have to tell which one of them was the first one to appear. If there is no such character then append '#' to the answer.</span></p>\n<p><span ><strong>NOTE:<br /></strong>1. You need to find the answer for every i (0 &lt;= i &lt; n)</span><br /><span >2. In order to find the solution for every you need to consider the string from starting position till the ith position.<strong><br /></strong>&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"aabc\"\n<strong>Output: </strong>\"a#bb\"\n<strong>Explanation: </strong>For every ith character we will consider the string from index 0 till index i first non repeating character is as follow- \"a\" - first non-repeating character is 'a' \"aa\" - no non-repeating character so '#' \"aab\" - first non-repeating character is 'b' \"aabc\" - there are two non repeating characters 'b' and 'c',  first non-repeating character is 'b' because 'b' comes before 'c' in the stream.</span></pre>\n<pre><span ><strong>Input: </strong>s = \"zz\"\n<strong>Output: </strong>\"z#\"\n<strong>Explanation: </strong>For every character first non repeating character is as follow- \"z\" - first non-repeating character is 'z' \"zz\" - no non-repeating character so '#' </span></pre>\n<pre><span ><strong>Input: </strong>s = \"bb\"\n<strong>Output: </strong>\"b#\"\n</span><span ><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">For every character first non repeating character is as follow- \"b\" - first non-repeating character is 'b' \"bb\" - no non-repeating character so '#' </span>&nbsp;</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= s.size()&lt;= 10<sup>5<br />'a' &lt;= s[i] &lt;= 'z'</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an input stream `s` consisting only of lowercase alphabets, determine the first non-repeating character in the stream up to each point. As characters are read from the stream, identify the first character that has appeared only once so far. If multiple characters meet this criterion, report the one that appeared earliest in the stream. If no such character exists, append '#' to the answer.",
                "constraints": [
                    "1 <= s.size() <= 10^5",
                    "'a' <= s[i] <= 'z'"
                ],
                "testcases": [
                    {
                        "input": "aabc",
                        "output": "a#bb",
                        "explanation": "For \"a\", the first non-repeating character is 'a'. For \"aa\", there's no non-repeating character, so '#'. For \"aab\", the first non-repeating character is 'b'. For \"aabc\", 'b' and 'c' are non-repeating, but 'b' appears first."
                    },
                    {
                        "input": "zz",
                        "output": "z#",
                        "explanation": "For \"z\", the first non-repeating character is 'z'. For \"zz\", there's no non-repeating character, so '#'."
                    },
                    {
                        "input": "bb",
                        "output": "b#",
                        "explanation": "For \"b\", the first non-repeating character is 'b'. For \"bb\", there's no non-repeating character, so '#'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 16px;\">Track frequency and last occurrence for each character; as you iterate, update and check the lowest index of characters with frequency one to get the first non-repeating.<br /></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "factset",
            "payu",
            "adobe",
            "yahoo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the first non-repeating character in the string.\n    string FirstNonRepeating(string &s) {\n\n        // storing the size of the string.\n        int n = s.size();\n\n        // creating a frequency array for all the characters in the string.\n        vector<int> f(26, 0);\n\n        // creating an array to store the last occurrence of each character.\n        vector<int> last(26, -1);\n\n        // iterating over the string to update the last occurrence of each character.\n        for (int i = 0; i < s.size(); i++) {\n            if (last[s[i] - 'a'] == -1)\n                last[s[i] - 'a'] = i;\n        }\n\n        // string to store the answer.\n        string ans = \"\";\n\n        // iterating over the string again to update the frequency of each character\n        // and find the first non-repeating character.\n        for (int i = 0; i < s.size(); i++) {\n            f[s[i] - 'a']++;\n\n            // character to store the first non-repeating character.\n            char ch = '#';\n\n            // variable to store the last occurrence index of the first non-repeating\n            // character.\n            int x = s.size() + 1;\n\n            // iterating over the frequency array to find the first non-repeating\n            // character.\n            for (int j = 0; j < 26; j++) {\n                if (f[j] == 1 and x > last[j]) {\n                    ch = char(j + 'a');\n                    x = last[j];\n                }\n            }\n\n            // appending the first non-repeating character to the answer string.\n            ans += ch;\n        }\n\n        // returning the answer string.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the first non-repeating character for each character addition in\n    // a stream\n    public String FirstNonRepeating(String s) {\n        // Convert the input string to a character array\n        char c[] = s.toCharArray();\n\n        // Array to count occurrences and track the first index of each character\n        int cnt[][] = new int[26][2]; // cnt[i][0] holds the count, cnt[i][1] holds the\n                                      // first occurrence index\n\n        // StringBuilder to build the result string\n        StringBuilder sb = new StringBuilder();\n\n        // Iterate through each character in the array\n        for (int i = 0; i < c.length; i++) {\n            // Increment the count for the current character and set/update its index\n            cnt[c[i] - 'a'][0]++;\n            cnt[c[i] - 'a'][1] = i;\n\n            // Initialize variables to track the first non-repeating character\n            int q = -1; // Index of the first non-repeating character (-1 if none found)\n            int mn =\n                Integer.MAX_VALUE; // Minimum index of the first non-repeating character\n\n            // Loop through all 26 letters to find the first non-repeating character\n            for (int j = 0; j < 26; j++) {\n                // If the character appears once and its index is less than the current\n                // minimum\n                if (cnt[j][0] == 1 && cnt[j][1] < mn) {\n                    mn = cnt[j][1]; // Update minimum index\n                    q = j;          // Set q to this character's index\n                }\n            }\n\n            // Append the first non-repeating character if found, otherwise append '#'\n            if (q == -1) {\n                sb.append(\"#\"); // No non-repeating character found\n            } else {\n                sb.append(\n                    (char)(q + 'a')); // Append the character corresponding to index q\n            }\n        }\n\n        // Convert the StringBuilder to a String and return the result\n        return sb.toString();\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def FirstNonRepeating(self, s):\n        n = len(s)  # getting the length of the input string\n        f = [0] * 26  # initializing a frequency list for all alphabets\n        last = [\n            -1\n        ] * 26  # initializing a list to store the last occurrence of each alphabet\n\n        # Populate the 'last' array with first occurrence indices of each character\n        for i in range(n):  # iterating through the input string\n            if last[ord(s[i]) - ord(\n                    'a'\n            )] == -1:  # checking if it is the first occurrence of the alphabet\n                last[ord(s[i]) -\n                     ord('a')] = i  # storing the index of the first occurrence\n\n        ans = \"\"  # initializing an empty string to store the result\n\n        # Iterate again to find the first non-repeating character at each step\n        for i in range(n):  # iterating through the input string again\n            f[ord(s[i]) -\n              ord('a')] += 1  # counting the frequency of each alphabet\n            ch = '#'  # initializing the character to '#' (default if no non-repeating character found)\n            x = n + 1  # initializing the minimum index to a value greater than the length of the string\n\n            # Check for the first non-repeating character by iterating through all alphabets\n            for j in range(26):  # iterating through all alphabets\n                if f[j] == 1 and x > last[\n                        j]:  # if the alphabet has a frequency of 1 and its last occurrence is smaller than the current minimum index\n                    ch = chr(j +\n                             ord('a'))  # updating the non-repeating character\n                    x = last[j]  # updating the minimum index\n\n            ans += ch  # appending the non-repeating character to the result string\n\n        return ans  # returning the final result string\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function template for JavaScript\n\n/**\n * @param {string} s - input string\n * @return {string} - resultant string with first non-repeating characters at each\n *     position\n */\nclass Solution {\n    FirstNonRepeating(s) {\n        // Length of the input string\n        let n = s.length;\n\n        // Arrays to track frequency and first occurrence index of each character (26\n        // for 'a' to 'z')\n        let f = new Array(26).fill(0); // Frequency array\n        let last =\n            new Array(26).fill(-1); // First occurrence index array (initialized to -1)\n\n        // Populate 'last' array with the first occurrence indices of each character\n        for (let i = 0; i < s.length; i++) {\n            if (last[s.charCodeAt(i) - 97] ===\n                -1) // if the character is encountered for the first time\n                last[s.charCodeAt(i) - 97] = i; // set its first occurrence index\n        }\n\n        // Initialize an empty string to build the result\n        let ans = \"\";\n\n        // Iterate over each character in the input string\n        for (let i = 0; i < s.length; i++) {\n            // Increase frequency count for the current character\n            f[s.charCodeAt(i) - 97]++;\n\n            // Default to '#' if no non-repeating character is found\n            let ch = '#';\n            let x = s.length + 1; // Set a high initial value to track the lowest index\n                                  // of non-repeating characters\n\n            // Loop through the frequency and last index arrays to find the first\n            // non-repeating character\n            for (let j = 0; j < 26; j++) {\n                if (f[j] === 1 && x > last[j]) { // Check if character is non-repeating\n                                                 // and has the smallest index\n                    ch = String.fromCharCode(j + 97); // Set 'ch' to this character\n                    x = last[j]; // Update x to this character's index\n                }\n            }\n\n            // Append the first non-repeating character (or '#' if none) to the result\n            ans += ch;\n        }\n\n        // Return the final result string\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}