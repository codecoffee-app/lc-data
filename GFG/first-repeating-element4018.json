{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701716,
            "title": "First Repeating Element",
            "titleSlug": "first-repeating-element4018",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[],</strong> find the first repeating element. The element should occur more than once and the index of its first occurrence should be the smallest.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:- </strong>The position you return should be according to 1-based indexing.&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 5, 3, 4, 3, 5, 6]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>5 appears twice and its first appearance is at index 2 which is less than 3 whose first the occurring index is 3.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4]\n<strong>Output:</strong> -1\n<strong>Explanation: </strong>All elements appear only once so answer is -1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size &lt;= 10<sup>6</sup><br />0 &lt;= arr[i]&lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the index of the first repeating element. A repeating element is one that appears more than once in the array.  If multiple elements repeat, return the index of the element whose *first* occurrence has the smallest index. Return the index using 1-based indexing.",
                "constraints": [
                    "1 <= array size <= 10^6",
                    "0 <= element value <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 5, 3, 4, 3, 5, 6]",
                        "output": "2",
                        "explanation": "The number 5 is the first repeating element. Its first occurrence is at index 2."
                    },
                    {
                        "input": "[1, 2, 3, 4]",
                        "output": "-1",
                        "explanation": "All elements appear only once, so no repeating element exists."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use map data structure</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "oracle"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to return the position of the first repeating element.\n    int firstRepeated(vector<int> &arr) {\n        bool flag = false;\n        int ans = -1;\n\n        // using map to store frequency of each element.\n        std::unordered_map<int, int> m;\n\n        // storing the frequency of each element in map.\n        for (int i = 0; i < arr.size(); i++)\n            m[arr[i]]++;\n\n        // iterating over the array elements.\n        for (int i = 0; i < arr.size(); i++) {\n\n            // if frequency of current element in map is greater than 1,\n            // then we store the index and break the loop.\n            if (m[arr[i]] > 1) {\n                ans = i + 1;\n                break;\n            }\n        }\n        // returning the position of the first repeating element.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to return the position of the first repeating element.\n    public static int firstRepeated(int[] arr) {\n        int n = arr.length;\n        boolean flag = false;\n        int ans = -1;\n\n        // using map to store frequency of each element.\n        Map<Integer, Integer> m = new HashMap<>();\n\n        // storing the frequency of each element in map.\n        for (int i = 0; i < n; i++) {\n            if (m.containsKey(arr[i])) {\n                m.put(arr[i], m.get(arr[i]) + 1);\n            } else {\n                m.put(arr[i], 1);\n            }\n        }\n\n        // iterating over the array elements.\n        for (int i = 0; i < n; i++) {\n            // if frequency of current element in map is greater than 1,\n            // then we store the index and break the loop.\n            if (m.get(arr[i]) > 1) {\n                ans = i + 1;\n                break;\n            }\n        }\n\n        // returning the position of the first repeating element.\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to return the position of the first repeating element.\n    def firstRepeated(self, arr):\n        n = len(arr)\n        ans = 9999999999999\n        #dictionary to hold key value pair.\n        d = dict()\n\n        #iterating over the array.\n        for i, e in enumerate(arr):\n            if e in d:\n                #if d[e]<ans and ans is not equal to -1, we store the index.\n                if d[e] < ans and ans != -1:\n                    ans = d[e]\n            else:\n                d[e] = i\n\n        #returning the position of the first repeating element or -1.\n        if ans != 9999999999999:\n            return (ans + 1)\n        else:\n            return (-1)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number}\n */\n\nclass Solution {\n    // Function to return the position of the first repeating element.\n    firstRepeated(arr) {\n        let n = arr.length;\n        let flag = false;\n        let ans = -1;\n\n        // using map to store frequency of each element\n        let mp = new Map();\n        for (let i = 0; i < n; i++) mp.set(arr[i], 0);\n\n        // storing the frequency of each element in map\n        for (let i = 0; i < n; i++) mp.set(arr[i], mp.get(arr[i]) + 1);\n\n        // iterating over the array elements.\n        for (let i = 0; i < n; i++) {\n\n            // if frequency of current element in map is greater than 1,\n            // then we store the index and break the loop.\n            if (mp.get(arr[i]) > 1) {\n                ans = i + 1;\n                break;\n            }\n        }\n        // returning the position of the first repeating element.\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}