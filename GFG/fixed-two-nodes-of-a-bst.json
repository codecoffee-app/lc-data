{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700552,
            "title": "Fixing Two nodes of a BST",
            "titleSlug": "fixed-two-nodes-of-a-bst",
            "content": "<div>\n<div><span style=\"font-size: 18px;\">Given the&nbsp;<strong>root</strong>&nbsp;of a Binary search tree(BST), where&nbsp;<strong>exactly t</strong></span><span style=\"font-size: 18px;\"><strong>wo&nbsp;</strong>nodes were swapped by mistake. Your task is to fix (or correct) the BST by swapping them back. Do not change the structure of the tree.</span></div>\n<div><span style=\"font-size: 18px;\"><strong>Note:</strong> It is guaranteed that the given input will form BST, except for 2 nodes that will be wrong. All changes must be reflected in the original Binary search tree(BST).</span></div>\n</div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [10, 5, 8, 2, 20]\n     <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/886490/Web/Other/blobid0_1738654776.png\" alt=\"\" width=\"256\" height=\"236\" />\n<strong>Output: </strong>1<br /></span>\\t <img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/886490/Web/Other/blobid1_1738654776.png\" alt=\"\" width=\"255\" height=\"235\" /><br /><br /><span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><span style=\"font-size: 18px;\">The nodes 20 and 8 were swapped.</span><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [5, 10, 20, 2, 8]\n     <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/886490/Web/Other/blobid2_1738654931.png\" alt=\"\" width=\"254\" height=\"226\" />\n<strong>Output: </strong>1 <br />     <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/886490/Web/Other/blobid3_1738654931.png\" alt=\"\" width=\"249\" height=\"228\" />\n<strong>Explanation:</strong> </span><span style=\"font-size: 18px;\">The nodes 10 and 5 were swapped.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; Number of nodes &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a Binary Search Tree (BST) where exactly two nodes have been swapped by mistake, your task is to correct the BST by swapping the misplaced nodes back to their correct positions. The structure of the tree must remain unchanged.\n\nNote: The input is guaranteed to be a valid BST except for the two swapped nodes. All changes must be made directly on the original BST.",
                "constraints": [
                    "1 <= Number of nodes <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "root = [10, 5, 8, 2, 20]",
                        "output": "1",
                        "explanation": "The nodes 20 and 8 were incorrectly swapped. Swapping them back restores the BST property."
                    },
                    {
                        "input": "root = [5, 10, 20, 2, 8]",
                        "output": "1",
                        "explanation": "The nodes 10 and 5 were incorrectly swapped. Swapping them back restores the BST property."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">1.&nbsp;<strong>We can solve this in O(n) time and with a single traversal of the given BST</strong>. Since inorder traversal of BST is always a sorted array, the problem can be reduced to a problem where two elements of a sorted array are swapped.</span></p>",
            "<p><span style=\"font-size:18px\">2.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>1.</strong>&nbsp;The swapped nodes are not adjacent in the inorder traversal of the BST.</span></p>\n\n<pre>\n<span style=\"font-size:18px\"> For example, Nodes 5 and 25 are swapped in {3 5 7 8 10 15 20 25}. \n The inorder traversal of the given tree is 3 25 7 8 10 15 20 5 \n</span></pre>\n\n<p><span style=\"font-size:18px\">If we observe carefully, during inorder traversal, we find node 7 is smaller than the previous visited node 25. Here save the context of node 25 (previous node). Again, we find that node 5 is smaller than the previous node 20. This time, we save the context of node 5 ( current node ). Finally swap the two node&rsquo;s values.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>2.</strong>&nbsp;The swapped nodes are adjacent in the inorder traversal of BST.</span></p>\n\n<pre>\n<span style=\"font-size:18px\">  For example, Nodes 7 and 8 are swapped in {3 5 7 8 10 15 20 25}. \n  The inorder traversal of the given tree is 3 5 8 7 10 15 20 25 </span></pre>\n\n<p><span style=\"font-size:18px\">Unlike case #1, here only one point exists where a node value is smaller than previous node value. e.g. node 7 is smaller than node 8.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>How to Solve?</strong>&nbsp;<em>We will maintain three pointers, first, middle and last. When we find the first point where current node value is smaller than previous node value, we update the first with the previous node &amp; middle with the current node. When we find the second point where current node value is smaller than previous node value, we update the last with the current node. In case #2, we will never find the second point. So, last pointer will not be updated. After processing, if the last node value is null, then two swapped nodes of BST are adjacent</em>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "factset",
            "walmart",
            "bankbazaar"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Recursive Function for inorder traversal to find out\n    // the two swapped nodes.\n    void correctBSTUtil(Node *root, Node *&first, Node *&middle, Node *&last,\n                        Node *&prev) {\n        if (root == nullptr)\n            return;\n\n        // Recur for the left subtree\n        correctBSTUtil(root->left, first, middle, last, prev);\n\n        // If this node is smaller than the previous node,\n        // it's violating the BST rule.\n        if (prev && root->data < prev->data) {\n\n            // If this is the first violation, mark these\n            // two nodes as 'first' and 'middle'\n            if (!first) {\n                first = prev;\n                middle = root;\n            }\n\n            // If this is the second violation,\n            // mark this node as last\n            else\n                last = root;\n        }\n\n        // Mark this node as previous\n        prev = root;\n\n        // Recur for the right subtree\n        correctBSTUtil(root->right, first, middle, last, prev);\n    }\n\n    // Function to fix the given BST, where two nodes are swapped.\n    void correctBST(Node *root) {\n\n        // Initialize pointers needed for correctBSTUtil()\n        Node *first = nullptr, *middle = nullptr, *last = nullptr, *prev = nullptr;\n\n        // Set the pointers to find out two nodes\n        correctBSTUtil(root, first, middle, last, prev);\n\n        // Fix (or correct) the tree\n        if (first && last)\n            swap(first->data, last->data);\n        else if (first && middle)\n            swap(first->data, middle->data);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Recursive Function for inorder traversal to find out\n    // the two swapped nodes.\n    static void correctBSTUtil(Node root, Node[] first, Node[] middle, Node[] last,\n                               Node[] prev) {\n        if (root == null) return;\n\n        // Recur for the left subtree\n        correctBSTUtil(root.left, first, middle, last, prev);\n\n        // If this node is smaller than the previous node,\n        // it's violating the BST rule.\n        if (prev[0] != null && root.data < prev[0].data) {\n\n            // If this is the first violation, mark these\n            // two nodes as 'first' and 'middle'\n            if (first[0] == null) {\n                first[0] = prev[0];\n                middle[0] = root;\n            }\n\n            // If this is the second violation,\n            // mark this node as last\n            else\n                last[0] = root;\n        }\n\n        // Mark this node as previous\n        prev[0] = root;\n\n        // Recur for the right subtree\n        correctBSTUtil(root.right, first, middle, last, prev);\n    }\n\n    // Function to fix the given BST, where two nodes are swapped.\n    static void correctBST(Node root) {\n        // Initialize pointers needed for correctBSTUtil()\n        Node[] first = {null}, middle = {null}, last = {null}, prev = {null};\n\n        // Set the pointers to find out two nodes\n        correctBSTUtil(root, first, middle, last, prev);\n\n        // Fix (or correct) the tree\n        if (first[0] != null && last[0] != null)\n            swap(first[0], last[0]);\n        else if (first[0] != null && middle[0] != null)\n            swap(first[0], middle[0]);\n    }\n\n    static void swap(Node a, Node b) {\n        int temp = a.data;\n        a.data = b.data;\n        b.data = temp;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Helper function for inorder traversal to detect swapped nodes\n    def correctBSTUtil(self, root, first, middle, last, prev):\n        if root is None:\n            return\n\n        # Recur for the left subtree\n        self.correctBSTUtil(root.left, first, middle, last, prev)\n\n        # Check for BST violation\n        if prev[0] is not None and root.data < prev[0].data:\n            # If first violation, mark first and middle\n            if first[0] is None:\n                first[0] = prev[0]\n                middle[0] = root\n            else:\n                # If second violation, mark last\n                last[0] = root\n\n        # Update prev node\n        prev[0] = root\n\n        # Recur for the right subtree\n        self.correctBSTUtil(root.right, first, middle, last, prev)\n\n    # Function to fix the swapped nodes in BST\n    def correctBST(self, root):\n        # Initialize placeholders for swapped nodes\n        first = [None]\n        middle = [None]\n        last = [None]\n        prev = [None]\n\n        # Detect swapped nodes\n        self.correctBSTUtil(root, first, middle, last, prev)\n\n        # Fix the swapped nodes\n        if first[0] and last[0]:  # Case when non-adjacent nodes are swapped\n            first[0].data, last[0].data = last[0].data, first[0].data\n        elif first[0] and middle[0]:  # Case when adjacent nodes are swapped\n            first[0].data, middle[0].data = middle[0].data, first[0].data\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\nclass Solution {\n\n    // Recursive Function for inorder traversal to find out\n    // the two swapped nodes.\n    static void correctBSTUtil(Node root, ref Node first, ref Node middle,\n                               ref Node last, ref Node prev) {\n        if (root == null) return;\n\n        // Recur for the left subtree\n        correctBSTUtil(root.left, ref first, ref middle, ref last, ref prev);\n\n        // If this node is smaller than the previous node,\n        // it's violating the BST rule.\n        if (prev != null && root.data < prev.data) {\n\n            // If this is the first violation, mark these\n            // two nodes as 'first' and 'middle'\n            if (first == null) {\n                first = prev;\n                middle = root;\n            }\n\n            // If this is the second violation,\n            // mark this node as last\n            else {\n                last = root;\n            }\n        }\n\n        // Mark this node as previous\n        prev = root;\n\n        // Recur for the right subtree\n        correctBSTUtil(root.right, ref first, ref middle, ref last, ref prev);\n    }\n\n    // Function to fix the given BST, where two nodes are swapped.\n    public void correctBST(Node root) {\n\n        // Initialize pointers needed for correctBSTUtil()\n        Node first = null, middle = null, last = null, prev = null;\n\n        // Set the pointers to find out two nodes\n        correctBSTUtil(root, ref first, ref middle, ref last, ref prev);\n\n        // Fix (or correct) the tree\n        if (first != null && last != null)\n            Swap(first, last);\n        else if (first != null && middle != null)\n            Swap(first, middle);\n    }\n\n    // Swap function to swap data of two nodes\n    static void Swap(Node a, Node b) {\n        int temp = a.data;\n        a.data = b.data;\n        b.data = temp;\n    }\n};",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n */\nclass Solution {\n    // Recursive Function for inorder traversal to find out\n    // the two swapped nodes.\n    correctBSTUtil(root, first, middle, last, prev) {\n        if (!root) return;\n\n        // Recur for the left subtree\n        this.correctBSTUtil(root.left, first, middle, last, prev);\n\n        // If this node is smaller than the previous node,\n        // it's violating the BST rule.\n        if (prev[0] && root.data < prev[0].data) {\n\n            // If this is the first violation, mark these\n            // two nodes as 'first' and 'middle'\n            if (!first[0]) {\n                first[0] = prev[0];\n                middle[0] = root;\n            }\n\n            // If this is the second violation,\n            // mark this node as last\n            else {\n                last[0] = root;\n            }\n        }\n\n        // Mark this node as previous\n        prev[0] = root;\n\n        // Recur for the right subtree\n        this.correctBSTUtil(root.right, first, middle, last, prev);\n    }\n\n    // Function to fix the given BST, where two nodes are swapped.\n    correctBST(root) {\n        // Initialize pointers needed for correctBSTUtil()\n        let first = [ null ], middle = [ null ], last = [ null ], prev = [ null ];\n\n        // Set the pointers to find out two nodes\n        this.correctBSTUtil(root, first, middle, last, prev);\n\n        // Fix (or correct) the tree\n        if (first[0] && last[0])\n            this.swap(first[0], last[0]); // Swap the first and last nodes\n        else if (first[0] && middle[0])\n            this.swap(first[0], middle[0]); // Swap the first and middle nodes\n    }\n\n    // Swap function to swap data of two nodes\n    swap(a, b) {\n        let temp = a.data;\n        a.data = b.data;\n        b.data = temp;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}