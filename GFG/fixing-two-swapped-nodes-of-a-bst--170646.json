{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713597,
            "title": "Fixing Two swapped nodes of a BST",
            "titleSlug": "fixing-two-swapped-nodes-of-a-bst--170646",
            "content": "<div><span style=\"font-size:18px\">Two of the nodes of a Binary Search Tree (BST) are swapped. Fix (or correct) the BST by swapping them back. Do not change the structure of the tree.</span></div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Note:</strong> It is guaranteed that the given input will form BST, except for 2 nodes that will be wrong.</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Example 1:</strong></span></div>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>\\t 10\r\n&nbsp;    /    \\\r\n&nbsp;   5\\t8\r\n&nbsp;  / \\\r\n&nbsp; 2   20\r\n<strong>Output: </strong>1<strong>\r\nExplanation:\r\n </strong><img alt=\"\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190528095934/FixNodes.jpg\" style=\"height:252px; width:374px\" /></span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n&nbsp;\\t  </strong>11\r\n&nbsp;\\t/    \\\r\n&nbsp;     3\\t17\r\n&nbsp;\\t\\    /\r\n&nbsp;\\t 4  10\r\n<strong>Output: </strong>1 \r\n<strong>Explanation:</strong> \r\nBy swapping nodes 11 and 10, the BST \r\ncan be fixed.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to take any input. Just complete the function <strong>correctBst()&nbsp;</strong>that takes root node as <strong>parameter</strong>. The function should return the root of corrected BST.&nbsp;BST will then be checked by driver code and 0 or 1 will be printed.</span></p>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(Number of nodes)</span></div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Auxiliary Space:&nbsp;</strong>O(logN), N = number of nodes</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= Number of nodes &lt;= 10^5</span></div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\"><strong>We can solve this in O(n) time and with a single traversal of the given BST</strong>. Since inorder traversal of BST is always a sorted array, the problem can be reduced to a problem where two elements of a sorted array are swapped.</span></p>",
            "<p><span style=\"font-size:18px\">There are only two cases to be considered:</span></p>\n\n<p><span style=\"font-size:18px\"><strong>1.</strong>&nbsp;The swapped nodes are not adjacent in the inorder traversal of the BST. </span></p>\n\n<p><span style=\"font-size:18px\"><strong>2.</strong>&nbsp;The swapped nodes are adjacent in the inorder traversal of BST. </span></p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "amazon",
            "microsoft",
            "factset",
            "walmart",
            "bankbazaar"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n\r\n  public:\r\n    void swap(int* a, int* b) {\r\n        int t = *a;\r\n        *a = *b;\r\n        *b = t;\r\n    }\r\n\r\n    // This function does inorder traversal to find out the two swapped nodes.\r\n    // It sets three pointers, first, middle and last.  If the swapped nodes are\r\n    // adjacent to each other, then first and middle contain the resultant nodes\r\n    // Else, first and last contain the resultant nodes\r\n    void correctBSTUtil(struct Node* root, struct Node** first,\r\n                        struct Node** middle, struct Node** last,\r\n                        struct Node** prev) {\r\n        if (root) {\r\n            // Recur for the left subtree\r\n            correctBSTUtil(root->left, first, middle, last, prev);\r\n\r\n            // If this node is smaller than the previous node, it's violating\r\n            // the BST rule.\r\n            if (*prev && root->data < (*prev)->data) {\r\n\r\n                // If this is first violation, mark these two nodes as\r\n                // 'first' and 'middle'\r\n                if (!*first) {\r\n                    *first = *prev;\r\n                    *middle = root;\r\n                }\r\n\r\n                // If this is second violation, mark this node as last\r\n                else\r\n                    *last = root;\r\n            }\r\n\r\n            // Mark this node as previous\r\n            *prev = root;\r\n\r\n            // Recur for the right subtree\r\n            correctBSTUtil(root->right, first, middle, last, prev);\r\n        }\r\n    }\r\n\r\n    // A function to fix a given BST where two nodes are swapped.  This\r\n    // function uses correctBSTUtil() to find out two nodes and swaps the\r\n    // nodes to fix the BST\r\n    struct Node* correctBST(struct Node* root) {\r\n        // Initialize pointers needed for correctBSTUtil()\r\n        struct Node* first, *middle, *last, *prev;\r\n        first = middle = last = prev = NULL;\r\n\r\n        // Set the poiters to find out two nodes\r\n        correctBSTUtil(root, &first, &middle, &last, &prev);\r\n\r\n        // Fix (or correct) the tree\r\n        if (first && last)\r\n            swap(&(first->data), &(last->data));\r\n        else if (first && middle) // Adjacent nodes swapped\r\n            swap(&(first->data), &(middle->data));\r\n\r\n        // else nodes have not been swapped, passed tree is really BST.\r\n        return root;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    Node first, middle, last, prev;\r\n    public Node correctBST(Node root) {\r\n        first = middle = last = prev = null;\r\n\r\n        // Set the poiters to find out\r\n        // two nodes\r\n        correctBSTUtil(root);\r\n\r\n        // Fix (or correct) the tree\r\n        if (first != null && last != null) {\r\n            int temp = first.data;\r\n            first.data = last.data;\r\n            last.data = temp;\r\n        }\r\n        // Adjacent nodes swapped\r\n        else if (first != null && middle != null) {\r\n            int temp = first.data;\r\n            first.data = middle.data;\r\n            middle.data = temp;\r\n        }\r\n        return root;\r\n    }\r\n\r\n    public void correctBSTUtil(Node root) {\r\n        if (root != null) {\r\n            // Recur for the left subtree\r\n            correctBSTUtil(root.left);\r\n\r\n            // If this node is smaller than\r\n            // the previous node, it's\r\n            // violating the BST rule.\r\n            if (prev != null && root.data < prev.data) {\r\n                // If this is first violation,\r\n                // mark these two nodes as\r\n                // 'first' and 'middle'\r\n                if (first == null) {\r\n                    first = prev;\r\n                    middle = root;\r\n                }\r\n\r\n                // If this is second violation,\r\n                // mark this node as last\r\n                else\r\n                    last = root;\r\n            }\r\n\r\n            // Mark this node as previous\r\n            prev = root;\r\n\r\n            // Recur for the right subtree\r\n            correctBSTUtil(root.right);\r\n        }\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    # Utility function to track the nodes\r\n    # that we have to swap\r\n    def correctBSTUtil(self, root, first, middle,\r\n                       last, prev):\r\n                             \r\n        if(root):\r\n              \r\n            # Recur for the left sub tree\r\n            self.correctBSTUtil(root.left, first,\r\n                           middle, last, prev)\r\n                             \r\n            # If this is the first violation, mark these \r\n            # two nodes as 'first and 'middle'\r\n            if(prev[0] and root.data < prev[0].data):\r\n                if(not first[0]):\r\n                    first[0] = prev[0]\r\n                    middle[0] = root\r\n                else:\r\n                      \r\n                    # If this is the second violation,\r\n                    # mark this node as last\r\n                    last[0] = root\r\n                      \r\n            prev[0] = root\r\n              \r\n            # Recur for the right subtree\r\n            self.correctBSTUtil(root.right, first, \r\n                           middle, last, prev)\r\n          \r\n    # A function to fix a given BST where \r\n    # two nodes are swapped. This function\r\n    # uses correctBSTUtil() to find out two\r\n    # nodes and swaps the nodes to fix the BST \r\n    def correctBST(self, root):\r\n          \r\n        # Followed four lines just for forming\r\n        # an array with only index 0 filled \r\n        # with None and we will update it accordingly.\r\n        # we made it null so that we can fill \r\n        # node data in them.\r\n        first = [None]\r\n        middle = [None]\r\n        last = [None]\r\n        prev = [None]\r\n          \r\n        # Setting arrays (having zero index only) \r\n        # for capturing the requird node\r\n        self.correctBSTUtil(root, first, middle,\r\n                       last, prev)\r\n      \r\n        # Fixing the two nodes\r\n        if(first[0] and last[0]):\r\n              \r\n            # Swapping for first and last key values\r\n            first[0].data, last[0].data = (last[0].data, \r\n                                        first[0].data)\r\n      \r\n        elif(first[0] and middle[0]):\r\n          \r\n            # Swapping for first and middle key values\r\n            first[0].data, middle[0].data = (middle[0].data,\r\n                                            first[0].data)\r\n          \r\n        # else tree will be fine \r\n        return root\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} root\r\n * @returns {Node}\r\n*/\r\n\r\n/*\r\nclass Node{\r\n    constructor(data){\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n*/\r\n\r\nclass Solution {\r\n    \r\n    constructor(){\r\n        this.first = null;\r\n        this.middle = null;\r\n        this.last = null;\r\n        this.prev = null;\r\n    }\r\n    \r\n    correctBSTUtil(root) {\r\n        if( root ) {\r\n            // Recur for the left subtree\r\n            this.correctBSTUtil( root.left );\r\n            \r\n            // If this node is smaller than the previous node, it's violating \r\n            // the BST rule.\r\n            if (this.prev && root.data < (this.prev).data) {\r\n                \r\n                // If this is first violation, mark these two nodes as \r\n                // 'first' and 'middle'\r\n                if ( this.first === null )\r\n                {\r\n                    this.first = this.prev;\r\n                    this.middle = root;\r\n                }\r\n                \r\n                // If this is second violation, mark this node as last\r\n                else\r\n                    this.last = root;\r\n            }\r\n            \r\n            // Mark this node as previous \r\n            this.prev = root;\r\n            \r\n            // Recur for the right subtree \r\n            this.correctBSTUtil( root.right );\r\n        }\r\n    }\r\n    \r\n    correctBST(root){\r\n        this.correctBSTUtil( root );\r\n        \r\n        // Fix (or correct) the tree \r\n        if( this.first && this.last )\r\n            [this.first.data, this.last.data] = [this.last.data, this.first.data] \r\n        else if( this.first && this.middle ) // Adjacent nodes swapped\r\n            [this.first.data, this.middle.data] = [this.middle.data, this.first.data] \r\n        // else nodes have not been swapped, passed tree is really BST. \r\n    \treturn root;\r\n    }\r\n}\r\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}