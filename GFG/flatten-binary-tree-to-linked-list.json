{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706436,
            "title": "Flatten binary tree to linked list",
            "titleSlug": "flatten-binary-tree-to-linked-list",
            "content": "<p><span style=\"font-size: 12pt;\">Given the root of a binary tree, flatten the tree into a \"Linked list\":</span></p>\n<ul>\n<li><span style=\"font-size: 12pt;\">The \"linked list\" should use the same Node class where the right child pointer points to the next node in the list and the left child pointer is always null.</span></li>\n<li><span style=\"font-size: 12pt;\">The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.</span></li>\n</ul>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>\n\\t    1\n\\t  /   \\\n\\t 2     5\n\\t/ \\     \\\n     3   4     6</span><br /><span style=\"font-size: 12pt;\"><strong>Output : </strong>1 2 3 4 5 6 </span><br /><span style=\"font-size: 12pt;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/706436/Web/Other/blobid0_1722839451.png\" height=\"100\" /> </span><br /><span style=\"font-size: 12pt;\"><strong>Explanation: </strong>After flattening, the tree looks like this - <br /><span style=\"font-size: 12pt;\">     1\n\\t\\\n\\t 2\n\\t  \\\n\\t   3\n\\t    \\\n\\t     4\n\\t\\t\\ \n\\t\\t 5 <br />\\t\\t  \\<br />\\t\\t   6<br /></span>Here, left of each node points to NULL and right contains the next node in preorder.The inorder traversal of this flattened tree is 1 2 3 4 5 6.</span><br /><br /><span style=\"font-size: 12pt;\"><strong>Input :</strong>\n\\t  1\n\\t / \\\n\\t3   4\n\\t   /\n\\t  2\n\\t   \\\n\\t    5 \n<strong>Output :</strong> \n1 3 4 2 5 \n<strong>Explanation : </strong>After flattening, the tree looks like this -\n     1\n\\t\\\n\\t 3\n\\t  \\\n\\t   4\n\\t    \\\n\\t     2\n\\t\\t\\ \n\\t\\t 5 \nHere, left of each node points to NULL and right contains the next node in preorder.The inorder traversal of this flattened tree is 1 3 4 2 5.</span></pre>\n<div><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity: </strong>O(n)</span></div>\n<div><span style=\"font-size: 12pt;\"><strong>Expected Space&nbsp;</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Complexity</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> O(1)</span></span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 12pt;\"><strong>Constraints :</strong></span></div>\n<div><span style=\"font-size: 12pt;\">1&lt;= number of nodes in binary tree &lt;= 10<sup>5</sup></span></div>\n<div><span style=\"font-size: 12pt;\"><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1&lt;= data of nodes &lt;= 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Recursively move `node-&gt;left` to `node-&gt;right` and insert the old `node-&gt;right` at the first `NULL` on the right.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    void flatten(Node *root)\r\n    {\r\n        if (root == NULL || root->left == NULL &&\r\n\t        root->right == NULL) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// if root->left exists then we have\r\n\t// to make it root->right\r\n\tif (root->left != NULL) {\r\n\r\n\t\t// move left recursively\r\n\t\tflatten(root->left);\r\n\r\n\t\t// store the node root->right\r\n\t\tstruct Node* tmpRight = root->right;\r\n\t\troot->right = root->left;\r\n\t\troot->left = NULL;\r\n\r\n\t\t// find the position to insert\r\n\t\t// the stored value\r\n\t\tstruct Node* t = root->right;\r\n\t\twhile (t->right != NULL) {\r\n\t\t\tt = t->right;\r\n\t\t}\r\n\r\n\t\t// insert the stored value\r\n\t\tt->right = tmpRight;\r\n\t}\r\n\r\n\t// now call the same function\r\n\t// for root->right\r\n\tflatten(root->right);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    public static void flatten(Node root)\r\n    {\r\n        //code here\r\n        if (root == null || root.left == null &&\r\n\t        root.right == null) {\r\n    \t\treturn;\r\n    \t}\r\n    \t\r\n    \tNode t = root.right;\r\n\r\n    \t// if root.left exists then we have\r\n    \t// to make it root.right\r\n    \tif (root.left != null) {\r\n    \r\n    \t\t// move left recursively\r\n    \t\tflatten(root.left);\r\n    \r\n    \t\t// store the node root.right\r\n    \t\tNode tmpRight = root.right;\r\n    \t\troot.right = root.left;\r\n    \t\troot.left = null;\r\n    \r\n    \t\t// find the position to insert\r\n    \t\t// the stored value\r\n    \t\tt = root.right;\r\n    \t\twhile (t.right != null) {\r\n    \t\t\tt = t.right;\r\n    \t\t}\r\n    \r\n    \t\t// insert the stored value\r\n    \t\tt.right = tmpRight;\r\n    \t}\r\n    \r\n    \t// now call the same function\r\n    \t// for root.right\r\n    \tflatten(t);\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def flatten(self, root):\r\n        if root==None or (not root.left and not root.right):\r\n            return\r\n        else :\r\n            #if root.left exists than we have to make it root.right\r\n            if root.left:\r\n                self.flatten(root.left)#first we flatten the left part \r\n                temp=root.right#storing the root.right in temp\r\n                \r\n                root.right=root.left\r\n                root.left=None\r\n                t=root.right#finding the position to attach the temp part\r\n                while t.right:\r\n                    t=t.right\r\n                t.right=temp#attaching the temp again \r\n                    \r\n            self.flatten(root.right)#calling the same function now for root.right\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    flatten(root) {\n        if (!root || (!root.left && !root.right)) return;\n\n        if (root.left) {\n            this.flatten(root.left);\n            let temp = root.right;\n            root.right = root.left;\n            root.left = null;\n            let t = root.right;\n            while (t.right) {\n                t = t.right;\n            }\n            t.right = temp;\n        }\n        this.flatten(root.right);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}