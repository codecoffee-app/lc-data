{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713141,
            "title": "Flattening a Linked List",
            "titleSlug": "flattening-a-linked-list--170645",
            "content": "<p><span style=\"font-size: 18px;\">Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:<br />(i) a<strong> next </strong>pointer to the next node,<br />(ii) a<strong>&nbsp;bottom</strong>&nbsp;pointer&nbsp;to a linked list where this node is head.<br />Each of the&nbsp;sub-linked-list is in sorted order.<br />Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order.&nbsp;</span><br /><span style=\"font-size: 18px;\"><strong>Note:</strong> The flattened list will be printed using the bottom pointer instead of next pointer.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>5 -&gt; 10 -&gt; 19 -&gt; 28\n|     |     |     | \n7     20    22   35\n|\\t     |     | \n8\\t    50    40\n|\\t\\t     | \n30\\t\\t   45<strong>\nOutput: </strong>&nbsp;5-&gt; 7-&gt; 8- &gt; 10 -&gt; 19-&gt; 20-&gt;\n22-&gt; 28-&gt; 30-&gt; 35-&gt; 40-&gt; 45-&gt; 50.\n<strong>Explanation</strong>:\nThe resultant linked lists has every \nnode in a single level.\n(<strong>Note: </strong>| represents the bottom pointer.)</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n5 -&gt; 10 -&gt; 19 -&gt; 28\n|\\t    |\\t\\t    \n7\\t    22   \n|\\t    |\\t\\t     \n8\\t    50 \n|\\t\\t\\t\\t   \n30\\t\\t  \n<strong>Output:</strong> 5-&gt;7-&gt;8-&gt;10-&gt;19-&gt;22-&gt;28-&gt;30-&gt;50\n<strong>Explanation:</strong>\nThe resultant linked lists has every\nnode in a single level.\n\n(<strong>Note: </strong>| represents the bottom pointer.)</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Complete the function <strong>flatten()</strong></span><span style=\"font-size: 18px;\"> that takes the&nbsp;<strong>head </strong>of the linked list as input&nbsp;parameter<strong> </strong>and returns the head of flattened link list.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*M)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">0 &lt;= N &lt;= 50<br />1 &lt;=<strong> M<sub>i</sub> </strong>&lt;= 20<br />1 &lt;= Element of linked list &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a linked list where each node has two pointers: 'next' and 'bottom'. The 'next' pointer points to the next node in the main list, and the 'bottom' pointer points to a sorted sub-linked-list headed by that node.  Your task is to flatten the entire linked list into a single level, sorted linked list using only the 'bottom' pointers to link the nodes. The original 'next' pointers should be ignored after flattening. Return the head of the flattened linked list.",
                "constraints": [
                    "0 <= N <= 50 (where N is the number of nodes in the main linked list)",
                    "1 <= M<sub>i</sub> <= 20 (where M<sub>i</sub> is the number of nodes in the i-th sub-linked list)",
                    "1 <= Element of linked list <= 10<sup>3</sup>"
                ],
                "testcases": [
                    {
                        "input": "5 -> 10 -> 19 -> 28\n|\t     |     |     |\n7     20    22   35\n|\t     |     |\n8\t    50    40\n|\t\t     |\n30\t\t   45",
                        "output": "5-> 7-> 8-> 10 -> 19-> 20-> 22-> 28-> 30-> 35-> 40-> 45-> 50",
                        "explanation": "The input represents a multi-level linked list. The flattened list contains all elements from all levels sorted in ascending order."
                    },
                    {
                        "input": "5 -> 10 -> 19 -> 28\n|\t    |\t\t    \n7\t    22\n|\t    |\t\t     \n8\t    50\n|\t\t\t\t   \n30",
                        "output": "5->7->8->10->19->22->28->30->50",
                        "explanation": "The input represents another multi-level linked list. The flattened list contains all elements from all levels sorted in ascending order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try using merge sort technique.</span></p>",
            "<p><span style=\"font-size:18px\">Use merge() to merge lists one by one. Try to recursively merge() the current list with the already flattened list.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "flipkart",
            "amazon",
            "microsoft",
            "snapdeal",
            "24*7-innovation-labs",
            "payu",
            "visa",
            "goldman-sachs",
            "qualcomm",
            "drishti-soft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n    //Function to merge two sorted linked lists.\n    Node* merge( Node* a, Node* b )\n    {\n        //if either list is NULL, return the other list.\n        if (a == NULL)\n            return b;\n\n\n        if (b == NULL)\n            return a;\n\n        Node* result;\n        //comparing values of nodes to merge them in sorted order.\n        if (a->data <= b->data)\n        {\n            //taking the smaller value node as result and recursively merging.\n            result = a;\n            result->bottom = merge( a->bottom, b );\n        }\n        else\n        {\n            //taking the smaller value node as result and recursively merging.\n            result = b;\n            result->bottom = merge( a, b->bottom );\n        }\n\n        return result;\n    }\npublic:\n    //Function to flatten the linked list.\n    Node* flatten (Node* root)\n    {\n        // Base cases\n        //if root is NULL or there is only one list,\n        //then we return the root node.\n        if (root == NULL || root->next == NULL)\n            return root;\n        \n        //flatten the next list and merge it with current list.\n        return merge( root, flatten(root->next) );\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class GfG {\n    // Function to merge two linked lists\n\tNode merge(Node a, Node b) {\n\t\t// If one list is empty, return the other list\n\t\tif(a==null) return b;\n\t\tif(b==null) return a;\n\t\t\n\t\tNode result;\n\t\t\n\t\t// Compare the data values of the nodes in the two lists\n\t\t// and merge the lists accordingly\n\t\tif(a.data <= b.data) {\n\t\t\tresult = a;\n\t\t\tresult.bottom = merge(a.bottom, b);\n\t\t} else {\n\t\t\tresult = b;\n\t\t\tresult.bottom = merge(a, b.bottom);\n\t\t}\n\t\t\n\t\t// Return the merged list\n\t\treturn result;\n\t}\n\t\n\t// Function to flatten the linked list\n\tNode flatten(Node root) {\n\t\t// If the root is null or only one list is present, return the root\n\t\tif(root == null || root.next == null)\n\t\t    return root;\n\t\n\t\t// Recursively call flatten on the next list\n\t\troot.next  = flatten(root.next);\n\t\t// Merge the root list with the flattened next list\n\t\troot = merge(root,root.next);\n\t\t\n\t\t// Return the flattened list\n\t\treturn root;\n\t\t// Alternate implementation: return merge(root,flatten(root.next));\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n# Function to merge two linked lists\ndef merge(a,b):\n    # check if either list is empty, return the other list\n    if a is None:\n        return b\n        \n    if b is None:\n        return a\n        \n    result=None\n    \n    # compare the data of the current nodes and merge accordingly\n    if a.data<=b.data:\n        result=a\n        result.bottom=merge(a.bottom,b)\n    else:\n        result=b\n        result.bottom=merge(a,b.bottom)\n        \n    return result\n    \n    \nclass Solution():\n        \n    # Function to flatten the given linked list\n    def flatten(self,root):\n        # check if the list is empty or has only one node\n        if root is None or root.next is None:\n            return root\n            \n        # recursively flatten the rest of the linked list\n        root.next=self.flatten(root.next)\n        \n        # merge the current node with the flattened next node\n        root=merge(root,root.next)\n        \n        return root",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}