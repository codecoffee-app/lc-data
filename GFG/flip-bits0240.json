{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702703,
            "title": "Flip Bits",
            "titleSlug": "flip-bits0240",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>A[]</strong> consisting&nbsp;of <strong>0&rsquo;s</strong> and <strong>1&rsquo;s</strong>. A flip operation is one in which you turn <strong>1</strong> into&nbsp;<strong>0</strong> and a <strong>0</strong> into&nbsp;<strong>1</strong>. You have to do at most one&nbsp;&ldquo;Flip&rdquo; operation&nbsp;of any subarray. Formally, select a range <strong>(l, r) </strong>in the array <strong>A[]</strong>, such that (0 &le; l &le; r &lt; n) holds and flip the elements in this range to get the maximum ones in the final array. You can possibly make zero operations to get the answer. You are asked to return the <strong>maximum</strong> number of 1 you can get in the array after doing flip operation.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 5\nA[] = {1, 0, 0, 1, 0} \n<strong>Output:</strong>\n4\n<strong>Explanation:</strong>\nWe can perform a flip operation in the range [1,2]\nAfter flip operation array is : [<em> 1</em> <strong>1 1</strong> <em>1 0</em> ]\nCount of one after fliping is : 4</span>\n<span style=\"font-size: 14px;\"><em>[Note: the subarray marked in bold is the flipped subarray]</em></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 7\nA[] = {1, 0, 0, 1, 0, 0, 1}</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n6\n<strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">We can perform a flip operation in the range [1,5]\nAfter flip operation array is : [<em> 1</em> <strong>1 1 0 1 1</strong> <em>1</em></span><span style=\"font-size: 18px;\">]\nCount of one after fliping is : 6</span>\n<span style=\"font-size: 14px;\"><em>[Note: the subarray marked in bold is the flipped subarray]</em></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>maxOnes()</strong>&nbsp;which takes the array <strong>A[]</strong> and its size <strong>N</strong><strong> </strong>as inputs and returns the&nbsp;maximum number of 1's you can have in the array after atmost one flip operation.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N)</span><br /><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>6</sup><br />0 &le; A[i] &le; 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Think using maximum subarray sum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    //Function to find the maximum subarray sum.\n    int maxSubArraySum(int a[],int n)\n    {\n       int max_so_far=a[0], curr_max=a[0];\n    \n       //iterating over the array to find the maximum subarray sum.\n       for(int i=1;i<n;i++)\n       {\n            curr_max=max(a[i],curr_max+a[i]);\n            max_so_far=max(max_so_far,curr_max);\n       }\n       \n       //taking maximum between 0 and max_so_far because \n       //if max_so_far turns out to be negative then we should start fresh.\n       max_so_far=max(0,max_so_far);\n       return max_so_far;\n    }\n    \n    //Function to find the maximum number of 1s that can be obtained by flipping 0s.\n    int maxOnes(int a[], int n)\n    {\n        int i, cnt=0;\n        \n        //flipping each 0 to 1 and counting number of flips.\n        for(i=0;i<n;i++)\n        {\n            if(a[i]==0)\n                a[i]=1;\n            else\n            {\n                cnt++;\n                a[i]=-1;\n            }\n        }\n        \n        //returning the count of flips plus the maximum subarray sum \n        //after flipping all 0s to -1.\n        return (cnt+maxSubArraySum(a,n)) ;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    // Function to find maximum subarray sum\n    public static int maxSubArraySum(int a[],int n)\n    {\n       int max_so_far=a[0]; // set initial value of maximum sum as first element of array\n       int curr_max=a[0]; // set initial value of current sum as first element of array\n\n       // iterate through the array\n       for(int i=1;i<n;i++)\n       {\n            curr_max = Math.max(a[i],curr_max+a[i]); // calculate current sum by taking maximum of current element or adding current element to previous sum\n            max_so_far = Math.max(max_so_far,curr_max); // update maximum sum so far\n       }\n       max_so_far = Math.max(0,max_so_far); // if all elements in array are negative, return 0 as maximum sum\n       return max_so_far; // return the maximum subarray sum\n    }\n\n    // Function to find maximum number of ones\n    public static int maxOnes(int a[], int n) {\n        int i, cnt=0; // initialize counter for number of ones as 0\n        for(i=0;i<n;i++)\n        {\n            if(a[i]==0)\n                a[i]=1; // replace 0 with 1\n            else\n            {\n                cnt++; // increment counter if number is already 1\n                a[i]=-1; // replace 1 with -1 to consider it as a negative element\n            }\n        }\n        return (cnt+maxSubArraySum(a,n)) ; // return the sum of number of ones and maximum subarray sum of modified array\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    # Function to find the maximum subarray sum.\n    def maxSubArraySum(self, a, n):\n        max_so_far, curr_max = a[0], a[0]\n        \n        # Iterating through the array to find the maximum subarray sum.\n        for i in range(1,n):\n            curr_max=max(a[i],curr_max+a[i])\n            max_so_far=max(max_so_far,curr_max)\n        \n        # Setting the maximum subarray sum to 0 if it is negative.\n        max_so_far=max(0,max_so_far)\n        \n        return max_so_far\n    \n    # Function to find the maximum number of ones after flipping some zeroes.\n    def maxOnes(self, a, n):\n        i, cnt = 0, 0\n        \n        # Flipping zeroes to ones and counting the number of ones.\n        for i in range(0,n):\n            if(a[i]==0):\n                a[i]=1\n            else:\n                cnt+=1\n                a[i]=-1\n        \n        # Returning the maximum number of ones after flipping.\n        return (cnt+self.maxSubArraySum(a,n))",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "// Back-end complete function template in C#\npublic class Solution\n{\n    // Function to find the maximum subarray sum after flipping.\n    private int MaxSubarraySumFlipped(int[] a, int n)\n    {\n        int maxSoFar = 0, currMax = 0;\n        for (int i = 0; i < n; i++)\n        {\n            int value = a[i] == 0 ? 1 : -1;\n            currMax = Math.Max(value, currMax + value);\n            maxSoFar = Math.Max(maxSoFar, currMax);\n        }\n        return maxSoFar;\n    }\n\n    // Function to find the maximum number of 1s that can be obtained by flipping 0s.\n    public int maxOnes(int[] a, int n)\n    {\n        int countOfOnes = 0;\n        foreach (int value in a)\n        {\n            if (value == 1)\n                countOfOnes++;\n        }\n\n        int maxFlips = MaxSubarraySumFlipped(a, n);\n\n        // Returning the count of original 1s plus the maximum flips count.\n        return countOfOnes + maxFlips;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}