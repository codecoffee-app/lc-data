{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705090,
            "title": "Flipping bits in Binary Format",
            "titleSlug": "flipping-bits-no-and-binary-format-in-reverse-order0513",
            "content": "<p><span style=\"font-size:18px\">Given a list of 32 bit&nbsp;unsigned integers N. Find X,&nbsp;the unsigned integer&nbsp;you get by flipping bits in the&nbsp;binary representation of N.&nbsp;i.e. unset bits must be set, and set bits must be unset. Also find the&nbsp;binary representation of X&nbsp;in reverse order.</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 1\r\n<strong>Output:</strong> 4294967294 01111111111111111111111111111111\r\n<strong>Explaination:</strong> \r\n1 as unsigned 32-bits is 00000000000000000000000000000001. \r\nFlipping its bits we get 11111111111111111111111111111110.\r\nIts binary representation is 4294967294.\r\nIts reverse order is 01111111111111111111111111111111.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 2\r\n<strong>Output:</strong> 4294967293 10111111111111111111111111111111\r\n<strong>Explaination:</strong> \r\n2 as unsigned 32-bits is 00000000000000000000000000000010. \r\nFlipping its bits we get 11111111111111111111111111111101.\r\nIts binary representation is 4294967293.\r\nIts reverse order is 1011111111111111111111111111111.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>flipBits()</strong> which takes N as input parameter and returns a list of strings containing two values, X and &nbsp;binary representation of X&nbsp;in reverse order.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(logN)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(logN)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &lt;&nbsp;4294967296 </span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 32-bit unsigned integer N, find the integer X obtained by flipping all bits in the binary representation of N (i.e., 0 becomes 1, and 1 becomes 0). Additionally, return the reverse of the binary representation of X.",
                "constraints": [
                    "1 <= N < 4294967296"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "4294967294 01111111111111111111111111111111",
                        "explanation": "The 32-bit unsigned representation of 1 is 00000000000000000000000000000001. Flipping the bits results in 11111111111111111111111111111110, which is 4294967294 in decimal. The reversed binary string of 4294967294 is 01111111111111111111111111111111."
                    },
                    {
                        "input": "2",
                        "output": "4294967293 10111111111111111111111111111111",
                        "explanation": "The 32-bit unsigned representation of 2 is 00000000000000000000000000000010. Flipping the bits results in 11111111111111111111111111111101, which is 4294967293 in decimal. The reversed binary string of 4294967293 is 10111111111111111111111111111111."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Calculate the number and find the bitswise representation of the number..</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to flip the bits of a given number.\n    vector<string> flipBits(long int N){\n        vector<string> sol;\n        long int c = pow(2, 32);\n        \n        //Performing bitwise complement to flip the bits of the number.\n        N = c - N - 1;\n        string s = to_string(N);\n        sol.emplace_back(s);\n        \n        string st = \"\";\n        //Converting the flipped number to binary form.\n        while(N > 0){\n            st += (char)(N%2 + '0');\n            N /= 2;\n        }\n        sol.emplace_back(st);\n        return sol;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Calculate the list of flipped bits for a given number N\nclass Solution{\n    static List<String> flipBits(long N){\n        List<String> sol = new ArrayList<>();\n        long c = (long)Math.pow(2, 32); // Calculate the maximum value of N\n        N = c - N - 1; // Calculate the flipped version of N\n        String s = Long.toString(N); // Convert N to a string\n        sol.add(s); // Add the string representation of N to the solution list\n        String st = \"\"; // Initialize an empty string to store the binary representation of N\n        // Calculate the binary representation of N\n        while(N > 0){\n            st += (char)(N%2 + '0'); // Append the least significant bit of N to st\n            N /= 2; // Divide N by 2 to get the next bit\n        }\n        sol.add(st); // Add the binary representation of N to the solution list\n        return sol; // Return the solution list\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}