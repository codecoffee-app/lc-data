{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705720,
            "title": "Flood fill Algorithm",
            "titleSlug": "flood-fill-algorithm1856",
            "content": "<p><span >An&nbsp;<code>image</code>&nbsp;is represented by a 2-D array of integers, each integer representing the pixel value of the image.</span></p>\n<p><span >Given a coordinate&nbsp;<strong><code>(sr, sc)</code></strong>&nbsp;representing the starting pixel (row and column) of the flood fill, and a pixel value&nbsp;<code>newColor</code>, \"flood fill\" the image.</span></p>\n<p><span >To perform a <strong>\"flood fill\"</strong>, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the <strong>same color</strong> as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the <strong>same color</strong> as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the new color.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, newColor = 2\n<strong>Output: </strong>[[2,2,2],[2,2,0],[2,0,1]]\n<strong>Explanation: </strong>From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected by a path of the same color as the starting pixel are colored with the new color.Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.<br /></span></pre>\n<pre><span ><strong>Input: </strong>image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, newColor = 0\n<strong>Output: </strong>[[0,0,0],[0,0,0]]<strong><br /></strong></span><strong >Explanation: </strong><span >The starting pixel is already colored with 0, which is the same as the target color. Therefore, no changes are made to the image.</span></pre>\n<pre><span ><strong>Input: </strong>image = [[0,0,0],[0,0,0]], sr = 1, sc = 1, newColor = 0\n<strong>Output: </strong>[[0,0,0],[0,0,0]]<strong><br /></strong></span><strong >Explanation: </strong><span >The starting pixel is already colored with 0, which is the same as the target color. Therefore, no changes are made to the image.</span></pre>\n<div><span ><strong>Constraints:</strong><br />1 &lt;= n &lt;= m &lt;= 500<br />0 &lt;= pixel values &lt;= 10</span></div>\n<div><span >0 &lt;= newColor &lt;= 10</span></div>\n<div><span >0 &lt;= sr &lt;= (n-1)</span></div>\n<div><span >0 &lt;= sc &lt;= (m-1)</span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Write a recursive function that paints the pixel if it's the correct color, then recurses on neighboring pixels. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\nclass Solution {\n  public:\n    // Function to perform flood fill operation on the image\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc,\n                                  int newColor) {\n        // If the starting color is already same as newColor, return the original image\n        if (image[sr][sc] != newColor)\n            // Call the depth-first search function for flood filling\n            dfs(image, sr, sc, image[sr][sc], newColor);\n        // Return the modified image\n        return image;\n    }\n\n  private:\n    // Helper function for depth-first search\n    void dfs(vector<vector<int>>& image, int i, int j, int c0, int c1) {\n        // Base case: if the current pixel is out of bounds or not same as the starting\n        // color, return\n        if (i < 0 || j < 0 || i >= image.size() || j >= image[0].size() ||\n            image[i][j] != c0)\n            return;\n        // Change the color of the current pixel to the new color\n        image[i][j] = c1;\n        // Recursive calls for the adjacent pixels\n        dfs(image, i, j - 1, c0, c1); // left\n        dfs(image, i, j + 1, c0, c1); // right\n        dfs(image, i - 1, j, c0, c1); // up\n        dfs(image, i + 1, j, c0, c1); // down\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {\n\n        // check if the starting pixel already has the new color, if not, perform the\n        // flood fill\n        if (image[sr][sc] != newColor) dfs(image, sr, sc, image[sr][sc], newColor);\n        return image;\n    }\n\n    // recursive depth-first search function to perform flood fill operation\n    void dfs(int[][] image, int i, int j, int c0, int c1) {\n        // check if the current pixel is out of bounds or has different color than c0\n        if (i < 0 || j < 0 || i >= image.length || j >= image[0].length ||\n            image[i][j] != c0)\n            return;\n\n        // change the color of the current pixel to c1\n        image[i][j] = c1;\n\n        // recursively call dfs to fill adjacent pixels\n        dfs(image, i, j - 1, c0, c1);\n        dfs(image, i, j + 1, c0, c1);\n        dfs(image, i - 1, j, c0, c1);\n        dfs(image, i + 1, j, c0, c1);\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import sys\n\nsys.setrecursionlimit(10**7)\n\n\nclass Solution:\n    # Function to perform depth-first search on the image.\n    def dfs(self, image, i, j, c0, c1):\n        # Check if the current coordinates are out of bounds or if the color\n        # at the current coordinates is not c0 or if the color at the current\n        # coordinates is already c1. If any of these conditions are true,\n        # return from the function.\n        if (i < 0 or j < 0 or i >= len(image) or j >= len(image[0])\n                or image[i][j] != c0 or image[i][j] == c1):\n            return\n\n        # Update the color at the current coordinates to c1.\n        image[i][j] = c1\n\n        # Recursively call the dfs function for the neighboring cells\n        # in the up, down, left, and right directions.\n        self.dfs(image, i, j - 1, c0, c1)\n        self.dfs(image, i, j + 1, c0, c1)\n        self.dfs(image, i - 1, j, c0, c1)\n        self.dfs(image, i + 1, j, c0, c1)\n\n    # Function to perform flood fill on the image.\n    def floodFill(self, image, sr, sc, newColor):\n        # Call the dfs function starting from the given source coordinates,\n        # with the current color at the source, and the newColor as parameters.\n        self.dfs(image, sr, sc, image[sr][sc], newColor)\n        # Return the modified image.\n        return image\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[][]} arr\n * @param {number} n\n * @param {number} m\n * @param {number} sr\n * @param {number} sc\n * @param {number} newColor\n * @returns {number[][]}\n */\nclass Solution {\n    floodFill(arr, n, m, sr, sc, newColor) {\n        // code here\n        if (arr[sr][sc] != newColor) this.dfs(arr, sr, sc, arr[sr][sc], newColor);\n        return arr;\n    }\n\n    dfs(arr, i, j, c0, c1) {\n        if (i < 0 || j < 0 || i >= arr.length || j >= arr[0].length || arr[i][j] != c0)\n            return;\n        arr[i][j] = c1;\n        this.dfs(arr, i, j - 1, c0, c1);\n        this.dfs(arr, i, j + 1, c0, c1);\n        this.dfs(arr, i - 1, j, c0, c1);\n        this.dfs(arr, i + 1, j, c0, c1);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}