{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701222,
            "title": "Floor in a Sorted Array",
            "titleSlug": "floor-in-a-sorted-array-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a sorted array <strong>arr[] </strong>and an integer <strong>x</strong>, find the index (0-based) of the largest element in arr[] that is less than or equal to x. This element is called the <strong>floor</strong> of x. If such an element does not exist, return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> In case of multiple occurrences of ceil of x, return the index of the last occurrence.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 8, 10, 10, 12, 19], x = 5\n<strong>Output: </strong>1<strong>\nExplanation: </strong>Largest number less than or equal to 5 is 2, whose index is 1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 8, 10, 10, 12, 19], x = 11\n<strong>Output: </strong>4<strong>\nExplanation: </strong>Largest Number less than or equal to 11 is 10, whose indices are 3 and 4. The index of last occurrence is 4.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 8, 10, 10, 12, 19], x = 0<br /><strong>Output: </strong>-1<strong>\nExplanation: </strong>No element less than or equal to 0 is found. So, output is -1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup><br />0 &le; x &le;<sup> </sup>arr[n-1]</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr` and an integer `x`, find the index (0-based) of the largest element in `arr` that is less than or equal to `x`. This element is called the floor of `x`. If such an element does not exist, return -1.\n\nNote: In case of multiple occurrences of the floor of x, return the index of the last occurrence.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6",
                    "0 <= x <= arr[n-1]"
                ],
                "testcases": [
                    {
                        "input": "arr = [1, 2, 8, 10, 10, 12, 19], x = 5",
                        "output": "1",
                        "explanation": "The largest number in `arr` less than or equal to 5 is 2, which is at index 1."
                    },
                    {
                        "input": "arr = [1, 2, 8, 10, 10, 12, 19], x = 11",
                        "output": "4",
                        "explanation": "The largest number in `arr` less than or equal to 11 is 10. It occurs at indices 3 and 4, so the last occurrence (index 4) is returned."
                    },
                    {
                        "input": "arr = [1, 2, 8, 10, 10, 12, 19], x = 0",
                        "output": "-1",
                        "explanation": "There is no element in `arr` that is less than or equal to 0. Therefore, -1 is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use binary search to locate the largest element less than or equal to k in a sorted array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the floor of a given element in a sorted array\n    int findFloor(vector<int>& arr, int x) {\n        int n = arr.size();\n\n        int low = 0, high = n - 1, ans = -1;\n\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n\n            if (arr[mid] <= x) {\n                ans = mid; // potential floor found\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n\n        return ans; // the index of the largest element <= x\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to find floor of x in sorted array arr\n    // Returns index of floor element or -1 if it doesn't exist\n    static int findFloor(int[] arr, int x) {\n        int n = arr.length;\n\n        int low = 0, high = n - 1;\n        int ans = -1;\n\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n\n            if (arr[mid] <= x) {\n                ans = mid;     // Potential floor found\n                low = mid + 1; // Search in the right half\n            } else {\n                high = mid - 1; // Search in the left half\n            }\n        }\n\n        return ans; // Index of largest element <= x, or -1 if no floor\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find floor of x in sorted array arr\n    # Returns index of floor element or -1 if it doesn't exist\n    def findFloor(self, arr, x):\n        n = len(arr)\n\n        low, high = 0, n - 1\n        ans = -1\n\n        while low <= high:\n            mid = low + (high - low) // 2\n\n            if arr[mid] <= x:\n                ans = mid  # Potential floor found\n                low = mid + 1  # Search in the right half\n            else:\n                high = mid - 1  # Search in the left half\n\n        return ans  # Index of largest element <= x, or -1 if no floor\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\n/**\n * @param {number[]} arr - The input sorted array\n * @param {number} x - The target element\n * @returns {number} - The index of the floor element or -1 if it doesn't exist\n */\n\nclass Solution {\n    findFloor(arr, x) {\n        let low = 0;\n        let high = arr.length - 1;\n        let ans = -1;\n\n        while (low <= high) {\n            let mid = Math.floor(low + (high - low) / 2);\n\n            if (arr[mid] <= x) {\n                ans = mid;     // Potential floor found\n                low = mid + 1; // Search in the right half\n            } else {\n                high = mid - 1; // Search in the left half\n            }\n        }\n\n        return ans; // Index of largest element <= x, or -1 if no floor\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}