{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712690,
            "title": "Floor in BST",
            "titleSlug": "floor-in-bst",
            "content": "<p><span style=\"font-size: 18px;\">You are given a BST(Binary Search Tree) with <strong>n</strong>&nbsp;number of nodes and value <strong>x</strong>. your task is to find the greatest value node of the BST which is smaller than or equal to x.<br /><strong>Note:</strong> when x is smaller than the smallest node of BST then returns -1.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><span style=\"font-size: 18px;\">\nn = 7\\t\\t   2\n\\t\\t\\t   \\\n\\t\\t\\t    81\n\\t\\t\\t  /     \\\n\\t\\t     42\\t 87\n\\t\\t\\t \\\\t \\\n\\t\\t\\t  66\\t90\n\\t\\t\\t /\n\\t\\t     45\nx = 87\n<strong>Output: </strong>87\n<strong>Explanation: </strong>87 is present in tree so floor will be 87.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 4\\t\\t\\t   6\n\\t\\t\\t\\t   \\\n\\t\\t\\t\\t    8\n\\t\\t\\t\\t  /   \\\n\\t\\t\\t\\t7\\t 9\nx = 11\n<strong>Output: </strong>9</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 4\\t\\t\\t   6\n\\t\\t\\t\\t   \\\n\\t\\t\\t\\t    8\n\\t\\t\\t\\t  /   \\\n\\t\\t\\t\\t7\\t 9\nx = 5\n<strong>Output: </strong>-1<br /></span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraint:</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= Noda data &lt;= 10<sup>9</sup><br />1 &lt;= n &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) with 'n' nodes and a value 'x', find the greatest node value in the BST that is less than or equal to 'x' (floor value). If 'x' is smaller than the smallest node in the BST, return -1.",
                "constraints": [
                    "1 <= Node data <= 10^9",
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 7\nBST:  \n     2\n      \\\n       81\n     /     \\\n   42\t 87\n    \\    /\n     66  90\n    /\n   45\nx = 87",
                        "output": "87",
                        "explanation": "The value 87 is present in the BST, so the floor value is 87."
                    },
                    {
                        "input": "n = 4\nBST:\n     6\n      \\\n       8\n     /   \\\n    7\t 9\nx = 11",
                        "output": "9",
                        "explanation": "The largest value in the BST that is less than or equal to 11 is 9."
                    },
                    {
                        "input": "n = 4\nBST:\n     6\n      \\\n       8\n     /   \\\n    7\t 9\nx = 5",
                        "output": "-1",
                        "explanation": "The value 5 is smaller than the smallest node (6) in the BST, so the floor value is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Traverse the nodes of the tree by comparing it with <strong>X</strong>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to search a node in BST.\nclass Solution{\n\npublic:\n    // Function to find and return the floor value of x in the BST.\n    int floor(Node* root, int x) {\n        int fl = -1; // Variable to store the floor value, initialized as -1.\n    \n        // Traverse the BST until we reach a leaf node or find the target node.\n        while (root) {\n            if (root->data == x) {\n                return root->data; // If the current node value matches the target, return the target value.\n            }\n    \n            if (root->data < x) {\n                fl = root->data; // If the current node value is less than the target, update the floor value.\n                root = root->right; // Move to the right subtree.\n            } else {\n                root = root->left; // If the current node value is greater than or equal to the target, move to the left subtree.\n            }\n        }\n        return fl; // Return the floor value.\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    public static int floor(Node root, int x) {\n        int fl = -1; // variable to store the floor value\n\n        while (root != null) { // loop until root is null\n            if (root.data == x) { // check if root value is equal to x\n                return root.data; // return the root value as it is the floor value\n            }\n\n            if (root.data < x) { // check if root value is less than x\n                fl = root.data; // update the floor value to root value\n                root = root.right; // move to the right child\n            } else {\n                root = root.left; // move to the left child\n            }\n        }\n        return fl; // return the floor value\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    # Function to find the floor of a given value in a binary search tree\n    def floor(self, root, x):\n        fl = -1  # variable to store the floor\n        \n        # Loop to traverse the binary search tree\n        while(root != None):\n            # If the current node's data is equal to x, return the data\n            if(root.data == x):\n                return root.data\n                \n            # If the current node's data is less than x, update the floor and move to the right subtree\n            if(root.data < x):\n                fl = root.data\n                root = root.right\n            \n            # If the current node's data is greater than x, move to the left subtree\n            else:\n                root = root.left\n                \n        return fl  # Return the floor value",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nfunction floor(root, x) {\n    let fl = -1;  // Variable to store the floor value, initialized as -1.\n\n    // Traverse the BST until we reach a leaf node or find the target node.\n    while (root) {\n        if (root.data === x) {\n            return root.data;  // If the current node value matches the target, return the target value.\n        }\n\n        if (root.data < x) {\n            fl = root.data;  // If the current node value is less than the target, update the floor value.\n            root = root.right;  // Move to the right subtree.\n        } else {\n            root = root.left;  // If the current node value is greater than or equal to the target, move to the left subtree.\n        }\n    }\n    return fl;  // Return the floor value.\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}