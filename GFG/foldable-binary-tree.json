{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700579,
            "title": "Foldable Binary Tree",
            "titleSlug": "foldable-binary-tree",
            "content": "<p><span style=\"font-size:18px\">Given a binary tree, check if the tree <strong>can be folded or not</strong>. A tree can be folded if left and right subtrees of the tree are <strong>structure wise mirror image of each other</strong>. An empty tree is considered as foldable.<br />\r\nConsider the below trees:<br />\r\n(a) and (b) can be folded.<br />\r\n(c) and (d) cannot be folded.</span></p>\r\n\r\n<div><br />\r\n<span style=\"font-size:18px\">(a)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp; \\<br />\r\n&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; \\&nbsp;&nbsp;&nbsp; /<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9&nbsp; 11</span></div>\r\n\r\n<div><span style=\"font-size:18px\">(b)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp; \\<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 15<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\<br />\r\n&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11</span></div>\r\n\r\n<div><span style=\"font-size:18px\">(c)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp; \\<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp; 15<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp; /<br />\r\n&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 11</span></div>\r\n\r\n<div><span style=\"font-size:18px\">(d)</span></div>\r\n\r\n<div><span style=\"font-size:18px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp; \\<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp;&nbsp; 15<br />\r\n&nbsp;&nbsp;&nbsp; /&nbsp; \\&nbsp;&nbsp;&nbsp; /<br />\r\n&nbsp;&nbsp; 9&nbsp;&nbsp; 10&nbsp; 12</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>&nbsp; &nbsp;&nbsp; 10\r\n &nbsp; &nbsp;/&nbsp;&nbsp; &nbsp;\\\r\n &nbsp; 7&nbsp; &nbsp;&nbsp; 15\r\n /&nbsp; \\&nbsp;  /&nbsp; \\\r\nN&nbsp; &nbsp;9&nbsp; 11&nbsp; &nbsp;N\r\n<strong>Output:</strong>Yes\r\n<strong>Explaination</strong>:Structure of every left and right subtree are same. </span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>&nbsp; &nbsp;   10\r\n  &nbsp; /&nbsp; &nbsp; \\\r\n   7&nbsp; &nbsp; &nbsp;15\r\n /&nbsp; \\&nbsp; &nbsp;/&nbsp; \\\r\n5&nbsp;&nbsp; N&nbsp; 11   N\r\n<strong>Output: </strong>No\r\n<strong>Explaination</strong>: 7&#39;s left child is not NULL and right child is NULL. That&#39;s why the tree is not foldable. <strong>\r\n\r\n</strong></span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThe task is to complete the function <strong>isFoldable() </strong>that takes root of the tree as input and returns true or false depending upon whether the tree is foldable or not.</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N).<br />\r\n<strong>Expected Auxiliary Space: </strong>O(Height of the Tree).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n0 &lt;= n &lt;= 10<sup>3</sup><br />\r\n1 &lt;= data of node &lt;= 10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, determine if it is foldable. A tree is considered foldable if its left and right subtrees are mirror images of each other in structure. An empty tree is also considered foldable.",
                "constraints": [
                    "0 <= n <= 10^3",
                    "1 <= data of node <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "     10\n    /   \\\n   7     15\n  / \\   / \\\n N   9 11   N",
                        "output": "Yes",
                        "explanation": "The structure of the left and right subtrees are mirror images of each other.  The left subtree has a right child, and the right subtree has a left child, and their positions mirror each other across the root."
                    },
                    {
                        "input": "     10\n    /   \\\n   7     15\n  / \\   / \\\n 5   N 11   N",
                        "output": "No",
                        "explanation": "The structure of the left and right subtrees are not mirror images. The left subtree has a left child, while the right subtree does not have a right child, violating the mirror image requirement."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "expedia"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Function that checks if trees with roots n1 and n2 are mirror of each other.\r\nbool IsFoldableUtil(Node *n1, Node *n2) \r\n{\r\n    //if both left and right subtrees are NULL then we return true.\r\n    if (n1 == NULL && n2 == NULL) \r\n    {\r\n        return true;\r\n    }\r\n\r\n    //if one of the trees is NULL and other is not then we return false.\r\n    if (n1 == NULL || n2 == NULL) {\r\n        return false;\r\n    }\r\n\r\n    //else we check recursively if left and right subtrees are \r\n    //mirrors of their counterparts.\r\n    return IsFoldableUtil(n1->left,n2->right)&&IsFoldableUtil(n1->right,n2->left);\r\n}\r\n\r\n//Function to check whether a binary tree is foldable or not.\r\nbool IsFoldable(Node *root) \r\n{\r\n    if (root == NULL) \r\n    {\r\n        return true;\r\n    }\r\n    return IsFoldableUtil(root->left, root->right);\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\nclass Tree \r\n{\r\n    //Function to check whether a binary tree is foldable or not.\r\n    boolean IsFoldable(Node node) \r\n\t{ \r\n\t\tif (node == null) \r\n\t\t\treturn true; \r\n\r\n\t\treturn IsFoldableUtil(node.left, node.right); \r\n\t} \r\n\r\n  //Function that checks if trees with roots n1 and n2 are mirror of each other.\r\n\tboolean IsFoldableUtil(Node n1, Node n2) \r\n\t{ \r\n\r\n\t\t//if both left and right subtrees are NULL then we return true.\r\n\t\tif (n1 == null && n2 == null) \r\n\t\t\treturn true; \r\n\r\n\t\t//if one of the trees is NULL and other is not then we return false.\r\n\t\tif (n1 == null || n2 == null) \r\n\t\t\treturn false; \r\n\r\n\t\t//else we check recursively if left and right subtrees are \r\n        //mirrors of their counterparts.\r\n\t\treturn IsFoldableUtil(n1.left, n2.right) \r\n\t\t\t&& IsFoldableUtil(n1.right, n2.left); \r\n\t}\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n\r\n#Function to check whether a binary tree is foldable or not.\r\ndef IsFoldable(root):\r\n    if root is None:\r\n        return True\r\n    return IsFoldableUtil(root.left, root.right)\r\n\r\n#Function that checks if trees with roots n1 and n2 are mirror of each other.    \r\ndef IsFoldableUtil(n1, n2):\r\n    \r\n    #if both left and right subtrees are NULL then we return true.\r\n    if (n1 is None and n2 is None):\r\n        return True\r\n        \r\n    #if one of the trees is NULL and other is not then we return false.\r\n    if (n1 is None or n2 is None):\r\n        return False\r\n    \r\n    #else we check recursively if left and right subtrees are \r\n    #mirrors of their counterparts.\r\n    return IsFoldableUtil(n1.left,n2.right) and IsFoldableUtil(n1.right,n2.left)",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\r\n\r\n\r\nclass Solution\r\n{\r\n    //Function that checks if trees with roots n1 and n2 are mirror of each other.\r\n    bool IsFoldableUtil(Node n1, Node n2)\r\n    {\r\n        //if both left and right subtrees are null then we return true.\r\n        if (n1 == null && n2 == null)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        //if one of the trees is null and other is not then we return false.\r\n        if (n1 == null || n2 == null)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        //else we check recursively if left and right subtrees are \r\n        //mirrors of their counterparts.\r\n        return IsFoldableUtil(n1.left, n2.right) && IsFoldableUtil(n1.right, n2.left);\r\n    }\r\n   \r\n    //Function to check whether a binary tree is foldable or not.\r\n    public bool IsFoldable(Node root)\r\n    {\r\n        if (root == null) \r\n        {\r\n            return true;\r\n        }\r\n        return IsFoldableUtil(root.left, root.right);\r\n    }\r\n}\r\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} root\r\n * @returns {boolean}\r\n*/\r\n\r\n/*\r\nclass Node{\r\n    constructor(data){\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n*/\r\n\r\nclass Solution \r\n{\r\n  //Function that checks if trees with roots n1 and n2 are mirror of each other.\r\n    IsFoldableUtil(n1, n2) \r\n    {\r\n        //if both left and right subtrees are NULL then we return true.\r\n        if (n1 === null && n2 === null) \r\n        {\r\n            return true;\r\n        }\r\n    \r\n        //if one of the trees is NULL and other is not then we return false.\r\n        if (n1 === null || n2 === null)\r\n        {\r\n            return false;\r\n        }\r\n    \r\n        //else we check recursively if left and right subtrees are \r\n        //mirrors of their counterparts.\r\n        return this.IsFoldableUtil(n1.left, n2.right) \r\n        && this.IsFoldableUtil(n1.right, n2.left);\r\n    }\r\n    \r\n    //Function to check whether a binary tree is foldable or not.\r\n    IsFoldable(root)\r\n    {\r\n        if (root === null) {\r\n            return true;\r\n        }\r\n        return this.IsFoldableUtil(root.left, root.right);\r\n    }\r\n}\r\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}