{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704890,
            "title": "Form a number divisible by 3 using array digits",
            "titleSlug": "form-a-number-divisible-by-3-using-array-digits0717",
            "content": "<p><span style=\"font-size: 18px;\">You will be given an array <strong>arr</strong> of integers of length <strong>N. </strong>You can construct an integer from two integers by treating the integers as strings, and then concatenating them. For example, <strong>19 </strong>and <strong>4</strong> can be used to construct <strong>194 </strong>and <strong>419. </strong></span></p>\n<p><span style=\"font-size: 18px;\">The task is to find whether it&rsquo;s possible to construct an integer using all the digits of these numbers such that it would be <strong>divisible by 3</strong>. <br />If it is possible then print <strong>1</strong> and if not print <strong>0</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 3\narr = {40, 50, 90}\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> One such number is 405090.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 2\narr = {1, 4}\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The numbers we can form \nare 14 and 41. But neither of them are \ndivisible by 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>isPossible()</strong> which takes <strong>N</strong> and <strong>arr</strong> as input parameters and returns <strong>1 i</strong>f we can form a number by the digits of the given number, that would be divisible by 3, otherwise returns <strong>0</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N, arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, determine if it's possible to construct a single integer by concatenating the numbers in the array such that the resulting integer is divisible by 3.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr = {40, 50, 90}",
                        "output": "1",
                        "explanation": "It is possible to form the number 405090, which is divisible by 3."
                    },
                    {
                        "input": "N = 2\narr = {1, 4}",
                        "output": "0",
                        "explanation": "The possible numbers are 14 and 41. Neither is divisible by 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">A number is divisible by 3 when the sum of its digits is divisible 3.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to check if it is possible to divide the array into 3 parts with equal sum.\n    int isPossible(int N, int arr[]) {\n        int rem = 0;\n        // Calculating the remainder when sum of array elements is divided by 3.\n        for (int i = 0; i < N; i++) rem = (rem + arr[i]) % 3;\n        // Returning 1 if remainder is 0, indicating that the array can be divided into 3 parts with equal sum.\n        return (rem == 0);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static int isPossible(int n, int arr[]) {\n        int sum=0;\n        for(int i=0;i<n;i++)\n        {\n            int number=arr[i];\n            while(number>0)\n            {\n                sum+=number%10;\n                number/=10;\n            }\n        }\n        return (sum%3==0?1:0);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\r\n    def isPossible(self, N, arr):\r\n        rem = 0\r\n        # Calculating the remainder when the sum of array elements is divided by 3.\r\n        for i in range(N):\r\n            rem = (rem + arr[i]) % 3\r\n        # Returning 1 if the remainder is 0, indicating that the array can be divided into 3 parts with equal sum.\r\n        return int(rem == 0)\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number} N\n * @param {number[]} arr\n * @return {number}\n*/\n\nclass Solution {\n    isPossible(N, arr) {\n        let rem = 0;\n        for (let i = 0; i < N; i++) {\n            rem = (rem + arr[i]) % 3;\n        }\n        return (rem == 0) ? 1 : 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}