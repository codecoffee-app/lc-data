{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703016,
            "title": "Form a palindrome",
            "titleSlug": "form-a-palindrome1455",
            "content": "<p><span style=\"font-size: 18px;\">Given a string, find the minimum number of characters to be inserted to convert it to a <a href=\"https://www.geeksforgeeks.org/string-palindrome/\"><strong>palindrome</strong></a> string.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> str = \"abcd\"\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Inserted character marked with bold characters in <strong>dcb</strong>abcd, here we need minimum three characters to make it palindrome.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> str = \"aa\"\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>\"aa\" is already a palindrome.</span><span style=\"font-size: 18px;\"><br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |str| &le; 500<br />str contains only lowercase alphabets.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string, determine the minimum number of characters that need to be inserted to transform it into a palindrome.",
                "constraints": [
                    "1 <= |str| <= 500",
                    "str contains only lowercase alphabets."
                ],
                "testcases": [
                    {
                        "input": "abcd",
                        "output": "3",
                        "explanation": "To make \"abcd\" a palindrome, we can insert 'dcb' at the beginning, resulting in 'dcbaabcd'.  Therefore, the minimum number of insertions is 3."
                    },
                    {
                        "input": "aa",
                        "output": "0",
                        "explanation": "\"aa\" is already a palindrome, so no insertions are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use a dynamic programming approach.</span></p>",
            "<p>&nbsp;Build an n*n table where table[i][j] represents the minimum insertions needed for str[i...j] to become a palindrome, updating based on character comparisons.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "google",
            "airtel"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Backend complete function template for C++\n\nclass Solution{\n  public:\n    // Function to count the minimum number of insertions required to make a string a palindrome\n    int countMin(string str) {  \n    int n = str.length();\n    int table[n][n], l, h, gap;  \n    memset(table, 0, sizeof(table));  \n    \n    // Filling the table for all possible gaps\n    for (gap = 1; gap < n; ++gap)  \n        for (l = 0, h = gap; h < n; ++l, ++h)  \n            // If characters at the ends are equal, no insertions required\n            // Otherwise, consider two cases: \n            // 1. Inserting character at the end\n            // 2. Inserting character at the beginning\n            // Choose the minimum of the two cases and add 1 to it\n            table[l][h] = (str[l] == str[h])?  table[l + 1][h - 1] :  (min(table[l][h - 1], table[l + 1][h]) + 1);\n            \n    // Return the minimum number of insertions required to make the string a palindrome\n    return table[0][n - 1];  \n    }  \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Backend complete function Template for Java\r\n\r\nclass Solution{\r\n    static int countMin(String S)\r\n    {\r\n        int n = S.length();\r\n        char[] str = S.toCharArray();\r\n        \r\n        // Create a table of size n*n. table[i][j]\r\n        // will store minumum number of insertions\r\n        // needed to convert str[i..j] to a palindrome.\r\n        int table[][] = new int[n][n];\r\n        int l, h, gap;\r\n\r\n        // Fill the table\r\n        for (gap = 1; gap < n; ++gap)\r\n        for (l = 0, h = gap; h < n; ++l, ++h)\r\n            table[l][h] = (str[l] == str[h])?\r\n                           table[l+1][h-1] :\r\n                          (Integer.min(table[l][h-1],\r\n                                 table[l+1][h]) + 1);\r\n\r\n        // Return minimum number of insertions\r\n        // for str[0..n-1]\r\n        return table[0][n-1];\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end function Template for python3\n\n\nclass Solution:\n\n    def countMin(self, Str):\n\n        #Finding the length of the string\n        n = len(Str)\n\n        #Creating a table to store the minimum number of palindromic cuts\n        table = []\n\n        #Initializing the table with 0\n        for i in range(n):\n            ro = [0] * n\n            table.append(ro)\n\n        #Iterating over the string to fill the table\n        for gap in range(1, n):\n\n            #Setting the starting and ending indexes for each substring\n            h = gap\n            l = 0\n\n            while h < n:\n\n                #Checking if the current substring is a palindrome\n                if Str[l] == Str[h]:\n                    table[l][h] = table[l + 1][h - 1]\n                else:\n                    #If not palindrome, calculating the minimum cuts required\n                    table[l][h] = min(table[l][h - 1], table[l + 1][h]) + 1\n\n                #Updating the indexes\n                l += 1\n                h += 1\n\n        #Returning the minimum number of cuts required for the entire string\n        return table[0][-1]\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\n\nclass Solution{\n    //Complete this function\n    public int countMin(string str){\n        int n = str.Length;\n        int[,] table = new int[n,n];\n        int l, h, gap;\n        \n        // Filling the table for all possible gaps\n        for (gap = 1; gap < n; ++gap) {\n            for (l = 0, h = gap; h < n; ++l, ++h) {\n                // If characters at the ends are equal, no insertions required\n                // Otherwise, consider two cases: \n                // 1. Inserting character at the end\n                // 2. Inserting character at the beginning\n                // Choose the minimum of the two cases and add 1 to it\n                table[l,h] = (str[l] == str[h]) ?  table[l + 1,h - 1] :  (Math.Min(table[l,h - 1], table[l + 1,h]) + 1);\n            }\n        }\n        \n        // Return the minimum number of insertions required to make the string a palindrome\n        return table[0,n - 1];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n\r\n/**\r\n * @param {string} str\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution{\r\n    countMin(str){\r\n        let n = str.length;\r\n        let table = new Array(n).fill(0).map(() => new Array(n).fill(0));\r\n        for(let gap = 1; gap < n; gap++){\r\n            for(let l = 0, h = gap; h < n; l++, h++){\r\n                table[l][h] = (str[l] == str[h]) ? table[l + 1][h - 1] : (Math.min(table[l][h - 1], table[l + 1][h]) + 1);\r\n            }\r\n        }\r\n        return table[0][n - 1];\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}