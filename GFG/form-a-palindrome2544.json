{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706178,
            "title": "Form a palindrome",
            "titleSlug": "form-a-palindrome2544",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>, the task is to find the minimum number of characters to be inserted to convert it to a palindrome.</span></p>\n<p><span style=\"font-size: 18px;\">Note: A palindrome is a string that reads the same backward as forward for example, strings \"aba\", \"abccba\" are palindromes</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s<strong> = </strong>\"abcd\"</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Here we can append 3 characters in the beginning and the resultant string will be a palindrome \"dcbabcd\".</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"aba\"</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>0</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Given string is already a pallindrome hence no insertions are required.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; s.size() &le; 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, determine the minimum number of characters needed to be inserted into `s` to transform it into a palindrome. A palindrome is a string that reads the same forwards and backward (e.g., 'aba', 'abccba').",
                "constraints": [
                    "1 <= s.size() <= 500"
                ],
                "testcases": [
                    {
                        "input": "abcd",
                        "output": "3",
                        "explanation": "By adding 'dcb' to the beginning, the string becomes 'dcbabcd', which is a palindrome. Therefore, 3 characters need to be inserted."
                    },
                    {
                        "input": "aba",
                        "output": "0",
                        "explanation": "The given string 'aba' is already a palindrome, so no insertions are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The minimum number of insertions in the string <strong>str[l&hellip;..h]</strong> can be given as: </span></p>\n\n<ul>\n\t<li><span style=\"font-size:18px\">minInsertions(str[l+1&hellip;..h-1]) if str[l] is equal to str[h]</span></li>\n\t<li><span style=\"font-size:18px\">min(minInsertions(str[l&hellip;..h-1]), minInsertions(str[l+1&hellip;..h])) + 1 otherwise</span></li>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "google",
            "airtel"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find the minimum of two integers\n    int min(int a, int b) { return a < b ? a : b; }\n\n    // Function to find the minimum number of insertions required\n    int findMinInsertions(string &s) {\n        int n = s.size();\n        int table[n][n], l, h, gap;\n\n        // Initializing the table with 0\n        memset(table, 0, sizeof(table));\n\n        // Loop to fill the table\n        for (gap = 1; gap < n; ++gap)\n            for (l = 0, h = gap; h < n; ++l, ++h)\n                // If the characters at l and h are equal, use the previous diagonal\n                // value Otherwise, find the minimum of the left and bottom cell values\n                // and add 1\n                table[l][h] = (s[l] == s[h])\n                                  ? table[l + 1][h - 1]\n                                  : (min(table[l][h - 1], table[l + 1][h]) + 1);\n\n        // Return the minimum number of insertions required\n        return table[0][n - 1];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // function to find the minimum of two integers\n    static int min(int a, int b) { return a < b ? a : b; }\n\n    // function to find the minimum number of insertions required to make a string a\n    // palindrome\n    static int findMinInsertions(String s) {\n        int n = s.length();\n        int table[][] = new int[n][n];\n        int l, h, gap;\n\n        // filling the table using bottom-up approach\n        for (gap = 1; gap < n; ++gap)\n            for (l = 0, h = gap; h < n; ++l, ++h)\n                table[l][h] = (s.charAt(l) == s.charAt(h))\n                                  ? table[l + 1][h - 1]\n                                  : (min(table[l][h - 1], table[l + 1][h]) + 1);\n\n        // returning the minimum number of insertions required to make the string a\n        // palindrome\n        return table[0][n - 1];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findMinInsertions(self, s):\n\n        #get the length of the string\n        n = len(S)\n\n        #create a table with dimensions n x n\n        table = [[0 for i in range(n)] for i in range(n)]\n\n        #iterate through the string for different gap sizes\n        for gap in range(1, n):\n            l = 0\n            #iterate through the string for different starting points\n            for h in range(gap, n):\n                #if the characters at the start and end of the current substring are equal\n                if s[l] == s[h]:\n                    #set the current table value to the value one diagonal below\n                    table[l][h] = table[l + 1][h - 1]\n                else:\n                    #set the current table value to the minimum of the value to the left or above plus 1\n                    table[l][h] = min(table[l][h - 1], table[l + 1][h]) + 1\n                l += 1\n\n        #return the value at the top right corner of the table\n        return table[0][n - 1]\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function template for C#\n\nclass Solution {\n    // Complete this function\n    public int findMinInsertions(string s) {\n        int n = s.Length;\n        int[,] table = new int[n, n];\n        int l, h, gap;\n\n        // Initializing the table with 0\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                table[i, j] = 0;\n            }\n        }\n\n        // Loop to fill the table\n        for (gap = 1; gap < n; ++gap) {\n            for (l = 0, h = gap; h < n; ++l, ++h) {\n                // If the characters at l and h are equal, use the previous diagonal\n                // value Otherwise, find the minimum of the left and bottom cell values\n                // and add 1\n                table[l, h] = (s[l] == s[h])\n                                  ? table[l + 1, h - 1]\n                                  : (Math.Min(table[l, h - 1], table[l + 1, h]) + 1);\n            }\n        }\n\n        // Return the minimum number of insertions required\n        return table[0, n - 1];\n    }\n};",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    findMinInsertions(s) {\n        let n = s.length;\n        let table = Array.from(Array(n), (_) => Array(n).fill(0));\n\n        for (let gap = 1; gap < n; ++gap) {\n            for (let l = 0, h = gap; h < n; ++l, ++h) {\n                if (s[l] === s[h]) {\n                    table[l][h] = table[l + 1][h - 1];\n                } else {\n                    table[l][h] = Math.min(table[l][h - 1], table[l + 1][h]) + 1;\n                }\n            }\n        }\n\n        return table[0][n - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}