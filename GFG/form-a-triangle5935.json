{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702870,
            "title": "Form a Triangle",
            "titleSlug": "form-a-triangle5935",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\">Given an array<strong> arr[]</strong> of integers, we need to find out all possible ways to construct non-<a href=\"https://en.wikipedia.org/wiki/Degeneracy_(mathematics)#Triangle\">degenerate</a> triangles using array values as its sides. If no such triangle can be formed then return 0.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[]= [5, 4, 3, 1, 2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Sides of possible triangle are (2 3 4), (3 4 5) and (2 4 5)</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[]= [4, 1, 2]\n<strong>Output:</strong> 0 \n<strong>Explanation:</strong> No triangle is possible from given array values</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(1)<br /><br /><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Constraints:</strong></span></span><br /><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\">1 &le; arr.size() &le; 10<sup>3</sup></span><br /><span style=\"font-family: arial,helvetica,sans-serif;\">1 &le; arr[i] &le; 10<sup>3</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of integers, determine the number of non-degenerate triangles that can be formed using the array values as side lengths. A non-degenerate triangle is one where the sum of any two sides is strictly greater than the third side (a + b > c, a + c > b, and b + c > a). If no such triangle can be formed, return 0.",
                "constraints": [
                    "1 <= arr.size() <= 10^3",
                    "1 <= arr[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "[5, 4, 3, 1, 2]",
                        "output": "3",
                        "explanation": "The possible triangles are formed by side lengths (2, 3, 4), (3, 4, 5), and (2, 4, 5)."
                    },
                    {
                        "input": "[4, 1, 2]",
                        "output": "0",
                        "explanation": "No triangle can be formed from the given array values because no three elements satisfy the triangle inequality (a + b > c, a + c > b, b + c > a)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the array and use two nested loops to count valid triangles by checking if the sum of two sides is greater than the third side, leveraging binary search to find the range of valid third sides.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count the number of triangles.\n    int noOfTriangles(vector<int>& arr) {\n        int n = arr.size();\n        int counter = 0;\n\n        // Sorting the elements of the array in ascending order.\n        sort(arr.begin(), arr.end());\n\n        // Iterating over the array elements.\n        for (int i = 0; i < n - 2; ++i) {\n            int k = i + 2;\n            // Iterating over the elements succeeding the current element.\n            for (int j = i + 1; j < n - 1; ++j) {\n                // Finding the index of the first element greater than the sum of the\n                // current two elements.\n                while (k < n && arr[i] + arr[j] > arr[k]) {\n                    ++k;\n                }\n                // Adding the count of triangles formed by current three elements.\n                counter += (k - j - 1);\n            }\n        }\n\n        // Returning the count of triangles.\n        return counter;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "import java.util.Arrays;\n\nclass Solution {\n\n    // Function to count the number of triangles.\n    public static int noOfTriangles(int arr[]) {\n        int n = arr.length;\n        int counter = 0;\n\n        // Sorting the elements of the array in ascending order.\n        Arrays.sort(arr);\n\n        // Iterating over the array elements.\n        for (int i = 0; i < n - 2; ++i) {\n            int k = i + 2;\n            // Iterating over the elements succeeding the current element.\n            for (int j = i + 1; j < n - 1; ++j) {\n                // Finding the index of the first element greater than the sum of the\n                // current two elements.\n                while (k < n && arr[i] + arr[j] > arr[k]) {\n                    ++k;\n                }\n                // Adding the count of triangles formed by the current three elements.\n                counter += (k - j - 1);\n            }\n        }\n\n        // Returning the count of triangles.\n        return counter;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def noOfTriangles(self, arr):\n        n = len(arr)\n        counter = 0\n\n        # Sorting the elements of the array in ascending order.\n        arr.sort()\n\n        # Iterating over the array elements.\n        for i in range(n - 2):\n            k = i + 2\n            # Iterating over the elements succeeding the current element.\n            for j in range(i + 1, n - 1):\n                # Finding the index of the first element greater than the sum of the current two elements.\n                while k < n and arr[i] + arr[j] > arr[k]:\n                    k += 1\n                # Adding the count of triangles formed by the current three elements.\n                counter += (k - j - 1)\n\n        # Returning the count of triangles.\n        return counter\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\nclass Solution {\n    noOfTriangles(arr) {\n        const n = arr.length;\n        let counter = 0;\n\n        // Sorting the elements of the array in ascending order.\n        arr.sort((a, b) => a - b);\n\n        // Iterating over the array elements.\n        for (let i = 0; i < n - 2; ++i) {\n            let k = i + 2;\n            // Iterating over the elements succeeding the current element.\n            for (let j = i + 1; j < n - 1; ++j) {\n                // Finding the index of the first element greater than the sum of the\n                // current two elements.\n                while (k < n && arr[i] + arr[j] > arr[k]) {\n                    ++k;\n                }\n                // Adding the count of triangles formed by the current three elements.\n                counter += (k - j - 1);\n            }\n        }\n\n        // Returning the count of triangles.\n        return counter;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}