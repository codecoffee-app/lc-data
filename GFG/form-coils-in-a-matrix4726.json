{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705725,
            "title": "Form coils in a matrix",
            "titleSlug": "form-coils-in-a-matrix4726",
            "content": "<p><span style=\"font-size:18px\">Given a positive integer <strong>n</strong> that represents dimensions of a 4n x 4n matrix with values from 1 to 4*n*4*n filled from left to right and top to bottom. Your task is to form two coils from matrix and print the coils.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Follow the given examples for better understanding.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>n = </strong>1</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">10 6 2 3 4 8 12 16\r\n7 11 15 14 13 9 5 1</span> \r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The matrix is </span>\r\n<span style=\"font-size:18px\">1  2  3  4\r\n5  6  7  8\r\n9  10 11 12\r\n13 14 15 16</span>\r\n<span style=\"font-size:18px\">So, the two coils are as given in the Ouput.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>n = </strong>2</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">36 28 20 21 22 30 38 46\r\n54 53 52 51 50 42 34 26\r\n18 10 2 3 4 5 6 7 8\r\n16 24 32 40 48 56 64\r\n\r\n29 37 45 44 43 35 27 19\r\n11 12 13 14 15 23 31 39\r\n47 55 63 62 61 60 59 58\r\n57 49 41 33 25 17 9 1 </span> \r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\"><img alt=\"\" src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/MatrixCoil.jpg\" style=\"height:266px; width:400px\" />\r\n</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>formCoils()</strong> which takes an Integer n as input and returns a vector of two vectors representing coil1 and coil2.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(n<sup>2</sup>)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= n &lt;= 20</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, construct a 4n x 4n matrix with values from 1 to 16n^2 filled sequentially from left to right and top to bottom.  The task is to extract two coils from this matrix and return them as two separate vectors.",
                "constraints": [
                    "1 <= n <= 20"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "10 6 2 3 4 8 12 16\n7 11 15 14 13 9 5 1",
                        "explanation": "The matrix is:\n1  2  3  4\n5  6  7  8\n9  10 11 12\n13 14 15 16\nCoil 1 consists of elements: 10, 6, 2, 3, 4, 8, 12, 16.\nCoil 2 consists of elements: 7, 11, 15, 14, 13, 9, 5, 1."
                    },
                    {
                        "input": "2",
                        "output": "36 28 20 21 22 30 38 46\n54 53 52 51 50 42 34 26\n18 10 2 3 4 5 6 7 8\n16 24 32 40 48 56 64\n\n29 37 45 44 43 35 27 19\n11 12 13 14 15 23 31 39\n47 55 63 62 61 60 59 58\n57 49 41 33 25 17 9 1",
                        "explanation": "For n=2, a 8x8 matrix is created. The output displays the two coils extracted from this matrix. The specific path of each coil is evident from the example's initial matrix arrangement (though not explicitly shown here)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">There will be 8*n*n integers in each coil.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "yahoo"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    vector<vector<int>> formCoils(int n) {\r\n        \r\n        // Number of elements in each coil \r\n        int m = 8*n*n; \r\n      \r\n        // Let us fill elements in coil 1. \r\n        int coil1[m]; \r\n      \r\n        // First element of coil1 \r\n        // 4*n*2*n + 2*n; \r\n        coil1[0] = 8*n*n + 2*n; \r\n        int curr = coil1[0]; \r\n      \r\n        int nflg = 1, step = 2; \r\n      \r\n        // Fill remaining m-1 elements in coil1[] \r\n        int index = 1; \r\n        while (index < m) \r\n        { \r\n            // Fill elements of current step from \r\n            // down to up \r\n            for (int i=0; i<step; i++) \r\n            { \r\n                // Next element from current element \r\n                curr = coil1[index++] = (curr - 4*n*nflg); \r\n                if (index >= m) \r\n                    break; \r\n            } \r\n            if (index >= m) \r\n                break; \r\n      \r\n            // Fill elements of current step from \r\n            // up to down. \r\n            for (int i=0; i<step; i++) \r\n            { \r\n                curr = coil1[index++] = curr + nflg; \r\n                if (index >= m) \r\n                    break; \r\n            } \r\n            nflg = nflg*(-1); \r\n            step += 2; \r\n        } \r\n      \r\n        /* get coil2 from coil1 */\r\n        int coil2[m]; \r\n        for (int i=0; i<8*n*n; i++) \r\n            coil2[i] = 16*n*n + 1 - coil1[i];\r\n            \r\n        vector<vector<int>> ans;\r\n        \r\n        vector<int> a,b;\r\n        \r\n        for(int i=0; i<8*n*n; i++)\r\n            a.push_back(coil1[i]);\r\n        for(int i=0; i<8*n*n; i++)\r\n            b.push_back(coil2[i]);\r\n            \r\n        ans.push_back(a);\r\n        ans.push_back(b);\r\n        \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Solution{\r\n    static int[][] formCoils(int n) {\r\n        int m = 8*n*n; \r\n      \r\n        // Let us fill elements in coil 1. \r\n        int [] coil1 = new int[m]; \r\n      \r\n        // First element of coil1 \r\n        // 4*n*2*n + 2*n; \r\n        coil1[0] = 8*n*n + 2*n; \r\n        int curr = coil1[0]; \r\n      \r\n        int nflg = 1, step = 2; \r\n      \r\n        // Fill remaining m-1 elements in coil1[] \r\n        int index = 1;\r\n        while (index < m) \r\n        { \r\n            // Fill elements of current step from \r\n            // down to up \r\n            for (int i=0; i<step; i++) \r\n            { \r\n                // Next element from current element \r\n                curr = coil1[index++] = (curr - 4*n*nflg); \r\n                if (index >= m) \r\n                    break; \r\n            }\r\n            if (index >= m) \r\n                break; \r\n      \r\n            // Fill elements of current step from \r\n            // up to down. \r\n            for (int i=0; i<step; i++) \r\n            { \r\n                curr = coil1[index++] = curr + nflg; \r\n                if (index >= m) \r\n                    break; \r\n            } \r\n            nflg = nflg*(-1); \r\n            step += 2; \r\n        } \r\n      \r\n        /* get coil2 from coil1 */\r\n        int [] coil2 = new int[m]; \r\n        for (int i=0; i < m; i++) \r\n            coil2[i] = 16*n*n + 1 - coil1[i];\r\n            \r\n        int [][] ans = new int[2][m];\r\n        \r\n        for(int i=0; i < m; i++)\r\n            ans[0][i] = (coil1[i]);\r\n        for(int i=0; i < m; i++)\r\n            ans[1][i] = (coil2[i]);\r\n        return ans;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    def formCoils(self, n):\n        # initializing variables\n        m = 8*n*n\n        coil1 = [0]*m\n        coil1[0] = 8*n*n + 2*n\n        curr = coil1[0]\n        nflg = 1\n        step = 2\n        \n        index = 1\n        # loop to fill coil1\n        while index < m:\n            # loop to subtract 4*n*nflg each step\n            for i in range(step):\n                curr = curr - 4*n*nflg\n                coil1[index] = curr\n                index += 1\n                if index >= m:\n                    break\n            \n            if index >= m:\n                break\n            \n            # loop to add nflg each step\n            for i in range(step):\n                curr = curr + nflg\n                coil1[index] = curr\n                index += 1\n                if index >= m:\n                    break\n            \n            nflg = (-nflg)\n            step += 2\n        \n        # initialize coil2 as reverse of coil1\n        coil2 = [0]*m\n        i = 0\n        \n        for i in range(m):\n            coil2[i] = 16*n*n + 1 - coil1[i]\n        \n        return [coil1,coil2]",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}