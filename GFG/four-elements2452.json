{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703435,
            "title": "Four Elements",
            "titleSlug": "four-elements2452",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>A</strong> of <strong>N</strong> integers. You have to&nbsp;find whether a&nbsp;combination of four elements in the array whose sum is equal to a given value <strong>X </strong>exists or not.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 6\nA[] = {1, 5, 1, 0, 6, 0}\nX = 7\n<strong>Output:</strong>\n1</span>\n\n<span style=\"font-size:18px\"><strong>Explantion:\n</strong>1, 5, 1, 0 are the four elements which makes sum 7.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>find4Numbers()</strong>&nbsp;which takes the array <strong>A[]</strong>, its size <strong>N </strong>and an integer <strong>X&nbsp;</strong>as inputs and returns <strong>true</strong> if combination is found else <strong>false</strong>. Driver code will&nbsp;print 1 or 0 accordingly.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>3</sup>)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n4 &lt;= N &lt;= 100<br />\n1 &lt;= A[i] &lt;= 1000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `A` of `N` integers, determine if there exists a combination of four elements within the array whose sum equals a given value `X`.",
                "constraints": [
                    "4 <= N <= 100",
                    "1 <= A[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 6\nA[] = {1, 5, 1, 0, 6, 0}\nX = 7",
                        "output": "1",
                        "explanation": "The elements 1, 5, 1, and 0 sum to 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Following are the detailed steps.<br />\n1) Sort the input array.<br />\n2) Fix the first element as A[i] where i is from 0 to n&ndash;3. After fixing the first element of quadruple, fix the second element as A[j] where j varies from i+1 to n-2. Find remaining two elements in O(n) time, using the method 1 of <a href=\"https://www.geeksforgeeks.org/write-a-c-program-that-given-a-set-a-of-n-numbers-and-another-number-x-determines-whether-or-not-there-exist-two-elements-in-s-whose-sum-is-exactly-x/\">this </a> post</span></p>\n\n<p><span style=\"font-size:18px\">Following is the implementation of O(n^3) solution.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "oyo-rooms"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nbool find4Numbers(int A[], int n, int X)  \n{  \n    int l, r, flag=0;  \n  \n    // Sort the array in increasing \n    // order, using library function  \n    // sort  \n    sort(A,A+n);\n  \n    /* Now fix the first 2 elements  \n    one by one and find  \n    the other two elements */\n    for (int i = 0; i < n - 3; i++)  \n    {  \n        for (int j = i+1; j < n - 2; j++)  \n        {  \n            // Initialize two variables as  \n            // indexes of the first and last  \n            // elements in the remaining elements  \n            l = j + 1;  \n            r = n-1;  \n  \n            // To find the remaining two  \n            // elements, move the index  \n            // variables (l & r) toward each other.  \n            while (l < r)  \n            {  \n                if( A[i] + A[j] + A[l] + A[r] == X)  \n                {  \n                    flag=1;  \n                    l++; r--;  \n                }  \n                else if (A[i] + A[j] + A[l] + A[r] < X)  \n                    l++;  \n                else // A[i] + A[j] + A[l] + A[r] > X  \n                    r--;  \n            } // end of while  \n        } // end of inner for loop  \n    } // end of outer for loop  \n    \n    return flag;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Compute\n{\n    boolean find4Numbers(int A[], int n, int X) \n    {\n        int l, r;\n        Arrays.sort(A); // Sort the array in ascending order\n\t\tboolean flag=false; // Initialize flag to false\n        for (int i = 0; i < n - 3; i++) // Iterate from 0 to n-3, skipping the last 3 elements\n        {\n            for (int j = i + 1; j < n - 2; j++) // Iterate from i+1 to n-2, skipping the last 2 elements\n            {\n                l = j + 1; // Set l to j+1\n                r = n - 1; // Set r to the last element\n                while (l < r) // Loop until l is less than r\n                {\n                    if (A[i] + A[j] + A[l] + A[r] == X) // If the sum of four elements is equal to X\n                    {\n\t\t\t\t\t\tflag=true; // Set flag to true\n                        l++; // Increment l\n                        r--; // Decrement r\n                    } \n                    else if (A[i] + A[j] + A[l] + A[r] < X) // If the sum is less than X\n                        l++; // Increment l\n                    else\n                        r--; // Decrement r\n                }\n            }\n        }\n        return flag; // Return the flag value\n\t}\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}