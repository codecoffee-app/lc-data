{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 716016,
            "title": "Fraction pairs with sum 1",
            "titleSlug": "fraction-pairs-with-sum-1",
            "content": "<p><span style=\"font-size: 18.6667px;\">Given a list of <strong>N</strong> fractions, represented as two lists <strong>numerator </strong>and <strong>denominator</strong>, the task is to determine the count of pairs of fractions whose sum equals 1.</span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>I</strong><strong>nput:</strong><br />N = 4<br />numerator = [1, 2, 2, 8]<br />denominator = [2, 4, 6, 12]<span style=\"font-family: sans-serif; white-space: normal;\"><br /></span><strong>Output:</strong>\n2\n<strong>Explanation:<br /></strong>Fractions 1/2 and 2/4 sum to 1. Similarly fractions 2/6 and 8/12 sum to 1. So there are 2 pairs of fractions which sum to 1.\n</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input:<br /></strong>N = 5<br />numerator = [3, 1, 12, 81, 2]<br />denominator = [9, 10, 18, 90, 5]<br /><strong>Output:</strong>\n2\n<strong>Explanation:<br /></strong>Fractions 3/9 and 12/18 sum to 1. Similarly fractions 1/10 and 81/90 sum to 1. So there are 2 pairs of fractions which sum to 1.<br /></span></pre>\n<p><span ><strong>Your task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>countFractions()</strong>&nbsp;which take integer&nbsp;<strong>N</strong> and arrays <strong>numerator&nbsp;</strong></span><span style=\"font-size: 18.6667px;\">and </span><strong >denominator</strong><span > of size N as arguments, and returns an integer.</span></p>\n<p><span ><strong style=\"font-size: 18px;\">Expected Time Complexity:</strong><span style=\"font-size: 18px;\"> O(N*log(N))</span><br style=\"font-size: 18px;\" /><strong style=\"font-size: 18px;\">Expected Auxiliary Space:</strong><span style=\"font-size: 18px;\">&nbsp;O(N)</span></span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= N &lt;=10<sup>5</sup><br />1 &lt;= numerator[i] &lt;= denominator[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Consider using a hashmap to store the count of fractions that sum up to a specific value.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Map",
                "slug": "map"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution\n{\n    public:\n    //Function to count the number of fractions.\n    int countFractions(int n, int numerator[], int denominator[])\n    {\n        map<pair<int, int>, int> fractionCount;\n        int ans = 0;\n\n        //iterating over all the fractions.\n        for (int i = 0; i < n ; i++)\n        {\n            int x = numerator[i];\n            int y = denominator[i];\n            int gcd = __gcd(x, y);\n            x /= gcd;\n            y /= gcd;\n            int want_x = y - x;\n            int want_y = y;\n\n            //if the desired fraction is already present in the map,\n            //increment the answer count by the number of times it is found.\n            if (fractionCount.find({want_x, want_y}) != fractionCount.end())\n                ans += fractionCount[{want_x, want_y}];\n\n            //increment the count of the current fraction in the map.\n            fractionCount[{x, y}]++;\n\n        }\n        return ans;\n    }\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int countFractions(int n, int[] numerator, int[] denominator) {\n        // code here\n        int ans=0;\n        HashMap<Integer,HashMap<Integer,Integer>> hm=new HashMap<>();\n        for(int i=0;i<n;i++){\n            int x=numerator[i],y=denominator[i];\n            int g=gcd(x,y);\n            x/=g;\n            y/=g;\n            if(hm.containsKey(y-x) && hm.get(y-x).containsKey(y)){\n                ans+=hm.get(y-x).get(y);\n            }\n            if(hm.containsKey(x)){\n                HashMap<Integer,Integer> internalMap=hm.get(x);\n                internalMap.put(y,internalMap.getOrDefault(y,0)+1);\n            }else{\n                HashMap<Integer,Integer> internalMap=new HashMap<>();\n                internalMap.put(y,1);\n                hm.put(x,internalMap);\n            }\n        }\n        return ans;\n    }\n    public static int gcd(int a,int b)\n    {\n        if(b==0)return a;\n        return gcd(b,a%b);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom math import gcd\nfrom collections import defaultdict\n\nclass Solution:\n\n    #Function to count fractions.\n    def countFractions(self, n, numerator, denominator):\n\n        #Creating a dictionary to store the count of each fraction.\n        fractionCount = defaultdict(int)\n        ans = 0\n\n        #Iterating over all the fractions.\n        for i in range(n):\n\n            x = numerator[i]\n            y = denominator[i]\n\n            #Finding the gcd of numerator and denominator.\n            gcd_val = gcd(x, y)\n\n            #Reducing the fraction by dividing numerator and denominator by gcd.\n            x //= gcd_val\n            y //= gcd_val\n\n            #Calculating the \"wanted\" fraction for which we need to find the count.\n            want_x = y - x\n            want_y = y\n\n            #If the \"wanted\" fraction already exists in the dictionary, \n            #adding its count to the answer.\n            if (want_x, want_y) in fractionCount:\n                ans += fractionCount[(want_x, want_y)]\n\n            #Updating the count of the current fraction in the dictionary.\n            fractionCount[(x, y)] += 1\n\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number[]} numerator\n * @param {number[]} denominator\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to count the number of fractions less than 1/2.\n    countFractions(n, numerator, denominator)\n    {\n        //Creating a dictionary to store the count of each fraction.\n        let fractionCount = {};\n        let ans = 0;\n\n        //Iterating over all the fractions.\n        for (let i = 0; i < n; i++) {\n\n            let x = numerator[i];\n            let y = denominator[i];\n\n            //Finding the gcd of numerator and denominator.\n            let gcd_val = this.gcd(x, y);\n\n            //Reducing the fraction by dividing numerator and denominator by gcd.\n            x /= gcd_val;\n            y /= gcd_val;\n\n            //Calculating the \"wanted\" fraction for which we need to find the count.\n            let want_x = y - x;\n            let want_y = y;\n\n            //If the \"wanted\" fraction already exists in the dictionary, \n            //adding its count to the answer.\n            if (fractionCount.hasOwnProperty(want_x + \",\" + want_y)) {\n                ans += fractionCount[want_x + \",\" + want_y];\n            }\n\n            //Updating the count of the current fraction in the dictionary.\n            let key = x + \",\" + y;\n            if (!fractionCount.hasOwnProperty(key)) {\n                fractionCount[key] = 0;\n            }\n            fractionCount[key] += 1;\n\n        }\n\n        return ans;\n    }\n\n    //Function to find the gcd (greatest common divisor) of two numbers.\n    gcd(a, b) {\n        while (b != 0) {\n            let temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}