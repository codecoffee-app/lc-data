{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705841,
            "title": "Fraction Trouble",
            "titleSlug": "fraction-trouble1410",
            "content": "<p><span style=\"font-size: 18px;\">Consider the set of irreducible fractions A = {n/d | n&le;d and d &le; 10000 and gcd(n,d) = 1}.You are given a member of this set and your task is to find the largest fraction in this set less than the given fraction.<br /><strong>Note</strong>: The fraction that is given to you may or may not be irreducible.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 1, d = 4\n<strong>Output:</strong>&nbsp;{2499, 9997}&nbsp; \n<strong>Explanation</strong>: 2499/9997 is the largest fraction.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 2, d = 5\n<strong>Output:&nbsp;</strong>{3999, 9998}\n<strong>Explanation</strong>: 3999/9998 is the largest fraction. \n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You dont need to read input or print anything. Complete the function <strong>numAndDen()&nbsp;</strong>which takes n&nbsp;and d&nbsp;as input parameter and returns&nbsp;the numerator and the denominator of the required irreducible fraction.<br /><br /><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)<br /><br /><strong>Constraints:</strong><br />1 &lt;= n&nbsp;&lt;= d&nbsp;&lt;=1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a fraction n/d, find the largest irreducible fraction a/b such that a/b < n/d, where a <= b <= 10000 and gcd(a, b) = 1. Note that the input fraction n/d may not be irreducible.",
                "constraints": [
                    "1 <= n <= d <= 10000"
                ],
                "testcases": [
                    {
                        "input": "n = 1, d = 4",
                        "output": "{2499, 9997}",
                        "explanation": "The largest irreducible fraction less than 1/4, with denominator less than or equal to 10000, is 2499/9997."
                    },
                    {
                        "input": "n = 2, d = 5",
                        "output": "{3999, 9998}",
                        "explanation": "The largest irreducible fraction less than 2/5, with denominator less than or equal to 10000, is 3999/9998."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">You have to find out p/q&nbsp;where,&nbsp;<br />\np/q &lt; n/d<br />\npd &lt; qn<br />\npd &lt;= qn-1 .</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n    vector<int> numAndDen(int n, int d){\r\n        int num = 0;\r\n        int den = 1;\r\n        for (int q = 10000; q >= 2; q--){\r\n            int p = (n * q - 1) / d;\r\n            if (p * den >= num * q)\r\n            {\r\n                den = q;\r\n                num = p;\r\n            }\r\n        }\r\n        int tot = __gcd(num,den);\r\n        vector<int>ans;\r\n        ans.push_back(num/tot);\r\n        ans.push_back(den/tot);\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\r\n    static int gcd(int a, int b){\r\n        // Finding the greatest common divisor between two numbers a and b\r\n        if (a == 0)\r\n          return b;\r\n        if (b == 0)\r\n          return a;\r\n        if (a == b)\r\n            return a;\r\n        if (a > b)\r\n            return gcd(a-b, b);\r\n        return gcd(a, b-a);\r\n    }\r\n    public int[] numAndDen(int n, int d)\r\n    {\r\n        int num = 0;\r\n        int den = 1;\r\n        // Iterating from 10000 to 2 to find the best approximation\r\n        for (int q = 10000; q >= 2; q--){\r\n            // Computing the numerator p\r\n            int p = (n * q - 1) / d;\r\n            // Updating the numerator and denominator if p*den is greater than num*q\r\n            \tif (p * den >= num * q)\r\n            \t{\r\n                \tden = q;\r\n                \tnum = p;\r\n            }\r\n        }\r\n        // Calculating the greatest common divisor of numerator and denominator\r\n        int tot = gcd(num,den);\r\n        // Creating an array to store the simplified numerator and denominator\r\n        int [] ans = new int[2];\r\n        // Storing the simplified numerator\r\n        ans[0] = num/tot;\r\n        // Storing the simplified denominator\r\n        ans[1] = den/tot;\r\n        // Returning the array with simplified numerator and denominator\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from math import gcd\n\n\nclass Solution:\n    #Function to find the numerator and denominator.\n    def numAndDen(self, n, d):\n\n        num = 0\n        den = 1\n\n        #Iterating from 10000 to 3 with a step of -1.\n        for q in range(10000, 3, -1):\n\n            #Calculating p using the given formula.\n            p = (n * q - 1) // d\n\n            #Comparing p * den and num * q to update den and num.\n            if (p * den >= num * q):\n                den = q\n                num = p\n\n        #Calculating gcd of num and den.\n        tot = gcd(num, den)\n\n        #Creating a list to store the numerator and denominator.\n        ans = []\n\n        #Adding the numerator and denominator to the list.\n        ans.append(num // tot)\n        ans.append(den // tot)\n\n        #Returning the list.\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to find the numerator and denominator.\n    gcd(a, b) {\n        if (b === 0) {\n            return a;\n        } else {\n            return this.gcd(b, a % b);\n        }\n    }\n\n    //Function to find the numerator and denominator.\n    numAndDen(n, d) {\n        let num = 0;\n        let den = 1;\n\n        //Iterating from 10000 to 3 with a step of -1.\n        for (let q = 10000; q >= 3; q--) {\n            //Calculating p using the given formula.\n            let p = Math.floor((n * q - 1) / d);\n            \n            //Comparing p * den and num * q to update den and num.\n            if (p * den >= num * q) {\n                den = q;\n                num = p;\n            }\n        }\n        \n        //Calculating gcd of num and den.\n        let tot = this.gcd(num, den);\n        \n        //Creating a list to store the numerator and denominator.\n        let ans = [];\n        \n        //Adding the numerator and denominator to the list.\n        ans.push(num/tot);\n        ans.push(den/tot);\n        \n        //Returning the list.\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}