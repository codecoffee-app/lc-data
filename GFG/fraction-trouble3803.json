{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705126,
            "title": "Fraction Trouble",
            "titleSlug": "fraction-trouble3803",
            "content": "<p><span style=\"font-size: 18px;\">Consider the set of irreducible fractions A = {n/d | n&le;d and d and gcd(n,d) = 1}.You are given a member of this set and your task is to find the largest fraction in this set less than the given fraction.<br /><strong>Note</strong>: this&nbsp;is a set and so all the members are unique.<br /><br /><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 1, d = 8\n<strong>Output: </strong>1249 9993\n<strong>Explanation: </strong>1/8 &gt;= 1249/9993 and this \nis the largest fraction. </span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 2, d = 53\n<strong>Output: </strong>377 9991\n<strong>Explanation: </strong>2/53 &gt;= 377/9991 and this is \nthe largest fraction.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>LargestFraction()&nbsp;</strong>which takes n and d as input parameter and returns the largest irreducible fraction in a list where the first element denotes the numerator and second elements denotes the denominator of the fraction.<br /><br /><strong>Expected Time Complexity:&nbsp;</strong>O(K) where K &lt;= 10<sup>4</sup><br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)<br /><br /><strong>Constraints:&nbsp;</strong><br />1 &lt;= n &lt;= d &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a fraction n/d, where n <= d and gcd(n, d) = 1 (irreducible), find the largest irreducible fraction in the set of all such fractions that is strictly less than n/d. The set A consists of irreducible fractions of the form {n/d | n <= d and gcd(n,d) = 1}. Return the numerator and denominator of this largest fraction.",
                "constraints": [
                    "1 <= n <= d <= 10<sup>4</sup>"
                ],
                "testcases": [
                    {
                        "input": "n = 1, d = 8",
                        "output": "1249 9993",
                        "explanation": "The fraction 1249/9993 is the largest irreducible fraction less than 1/8."
                    },
                    {
                        "input": "n = 2, d = 53",
                        "output": "377 9991",
                        "explanation": "The fraction 377/9991 is the largest irreducible fraction less than 2/53."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Apply simple maths relating to gcd.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    //Function to find the largest fraction less than 1 with numerator n and denominator d.\n    vector<int>LargestFraction(int n, int d){\n        int r = 0, s = 1; //initialize variables r and s.\n        int limit = 10000; //set limit for the loop.\n\n        //loop to find the largest fraction.\n        for (int q = limit; q >= 2; q--)\n        {\n            int p = (n * q - 1) / d; //calculate the numerator p.\n            if (p * s >= r * q) //check if p * s is greater than or equal to r * q.\n            {\n                s = q; //update s.\n                r = p; //update r.\n            }\n        }\n        int D = __gcd(r, s); //calculate the greatest common divisor of r and s.\n        vector<int>res; //initialize a vector to store the result.\n        res.push_back(r/D); //store the numerator divided by D in the vector.\n        res.push_back(s/D); //store the denominator divided by D in the vector.\n        return res; //return the vector containing the result.\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    // method to calculate the greatest common divisor of two numbers\n    private static int gcd(int a, int b)\n    {\n        // base case: if b is 0, return a\n        if (b == 0)\n            return a;\n        \n        // recursively call gcd function with remainder of a divided by b\n        return gcd(b, a % b);\n    }\n\n    // method to find the largest fraction less than or equal to a given fraction n/d\n    public int[] LargestFraction(int n, int d)\n    {\n        // initialize variables to store numerator and denominator of the largest fraction found\n        int r = 0, s = 1;\n        \n        // set the limit for the denominator\n        int limit = 10000;\n        \n        // loop through possible denominators from the limit to 2\n        for (int q = limit; q >= 2; q--)\n        {\n            // calculate the numerator using the given fraction n/d and current denominator q\n            int p = (n * q - 1) / d;\n            \n            // check if the current fraction is larger than the previous largest fraction\n            if (p * s >= r * q)\n            {\n                // update the numerator and denominator of the largest fraction\n                s = q;\n                r = p;\n            }\n        }\n        \n        // calculate the greatest common divisor of the numerator and denominator\n        int D = gcd(r, s);\n        \n        // create an array to store the resulting fraction\n        int[] res = new int[2];\n        \n        // divide the numerator and denominator by their greatest common divisor \n        // and store the result in the array\n        res[0] = (r / D);\n        res[1] = (s / D);\n        \n        // return the resulting fraction\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    //Function to find the largest proper fraction with denominator as (numerator+denominator).\n    public List<int> LargestFraction(int numerator, int denominator)\n    {\n        int r = 0, s = 1; //initialize variables r and s.\n        int limit = 10000; //set limit for the loop.\n\n        //loop to find the largest fraction.\n        for (int q = limit; q >= 2; q--)\n        {\n            int p = (numerator * q - 1) / denominator; //calculate the numerator p.\n            if (p * s >= r * q) //check if p * s is greater than or equal to r * q.\n            {\n                s = q; //update s.\n                r = p; //update r.\n            }\n        }\n        int D = gcd(r, s); //calculate the greatest common divisor of r and s.\n        List<int> res = new List<int>(); //initialize a list to store the result.\n        res.Add(r/D); //store the numerator divided by D in the list.\n        res.Add(s/D); //store the denominator divided by D in the list.\n        return res; //return the list containing the result.\n    }\n\n    //Function to calculate the greatest common divisor.\n    private int gcd(int a, int b)\n    {\n        if (b == 0)\n            return a;\n        return gcd(b, a % b);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\nclass Solution {\r\n    gcd(a,b) {\r\n        a = Math.abs(a);\r\n        b = Math.abs(b);\r\n        if (b > a) {var temp = a; a = b; b = temp;}\r\n        while (true) {\r\n            if (b === 0) return a;\r\n            a %= b;\r\n            if (a === 0) return b;\r\n            b %= a;\r\n        }\r\n    }\r\n    \r\n    LargestFraction(n, d) {\r\n        let r = 0, s = 1;\r\n\t\tlet limit = 10000;\r\n\t    for (let q = limit; q >= 2; q--)\r\n        {\r\n            let p = Math.floor((n * q - 1) / d);\r\n            if (p * s >= r * q)\r\n            {\r\n                s = q;\r\n                r = p;\r\n            }\r\n        }\r\n        let D = this.gcd(r, s);\r\n        let res = [];\r\n        res.push(Math.floor(r/D));\r\n        res.push(Math.floor(s/D));\r\n        return res;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}