{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700911,
            "title": "Frequency Game",
            "titleSlug": "frequency-game",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\">Given </span></span><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\">an array </span><strong>A</strong><span style=\"background-color: transparent; font-family: arial;\"> of size </span><strong>N</strong><span style=\"background-color: transparent; font-family: arial;\">. The elements of the array consist of positive integers. You have to find the largest element with minimum frequency. </span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>\n5\n2 2 5 50 1</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n50</span>\n<span style=\"font-size: 18px;\"><strong>Explanation :\n</strong>All elements are having frequency 1 except 2.\n50 is the maximum element with minimum frequency.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n4\n3 3 5 5\n<strong>Output:</strong>\n5\n<strong>Explanation:</strong>\nBoth 3 and 5 have the same frequency, so 5 should be returned.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>User Task:</strong><br /><span style=\"background-color: transparent; font-family: arial;\">Your task is to complete the provided function </span><strong>LargButMinFreq(A, n)</strong><span style=\"background-color: transparent; font-family: arial;\"> which accepts array </span><strong>A</strong><span style=\"background-color: transparent; font-family: arial;\"> and </span><strong>n</strong><span style=\"background-color: transparent; font-family: arial;\">. Hence you have to return the largest element with minimum frequency.</span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>Expected Time Complexity:</strong> O(N)<br /><strong>Expected Space Complexity:</strong> O(N)</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>5</sup><br />1 &lt;= A[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array **A** of size **N** consisting of positive integers, find the largest element that has the minimum frequency in the array.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= A[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "5\n2 2 5 50 1",
                        "output": "50",
                        "explanation": "The element 2 appears twice, while 5, 50, and 1 each appear once. Among the elements with the minimum frequency (1), 50 is the largest."
                    },
                    {
                        "input": "4\n3 3 5 5",
                        "output": "5",
                        "explanation": "Both 3 and 5 appear twice. Since they have the same minimum frequency, 5 (the larger of the two) is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use HashMap and insert the key value. Now iterate and find the largest key with min value.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\npublic:\r\n    // Function to find the element with maximum value but minimum frequency\r\n    int LargButMinFreq(int arr[], int n) {\r\n        // Create a map to store the frequencies of elements\r\n        map<int,int> mpp;\r\n        \r\n        // Count the frequencies of elements in the array\r\n        for(int i=0;i<n;i++){\r\n            mpp[arr[i]]++;\r\n        }\r\n        \r\n        // Initialize variables to track maximum value and minimum frequency\r\n        int mx=0,mn=1e9;\r\n        \r\n        // Iterate over the map to find the element with minimum frequency\r\n        for(auto it:mpp){\r\n            // If current frequency is less than current minimum frequency, update minimum frequency and maximum value\r\n            if(it.second<mn){\r\n                mn=it.second;\r\n                mx=it.first;\r\n            }\r\n            // If current frequency is equal to current minimum frequency, update maximum value\r\n            else if(it.second==mn){\r\n                mx=max(mx,it.first);\r\n            }\r\n        }\r\n        \r\n        // Return the element with maximum value but minimum frequency\r\n        return mx;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find largest number with minimum frequency\n    public static int LargButMinFreq(int arr[], int n) {\n        // Creating a HashMap to store the frequency of each element in the array\n        HashMap<Integer,Integer> hm=new HashMap<>();\n        // Iterating over the array and updating the frequency in the HashMap\n        for(int i:arr){\n            hm.put(i,hm.getOrDefault(i,0)+1);\n        }\n        // Initializing the minimum frequency as maximum value to find the minimum frequency\n        int freq=Integer.MAX_VALUE;\n        // Finding the minimum frequency from the HashMap\n        for(int i:hm.values()){\n            freq=Math.min(freq,i);\n        }\n        // Initializing the answer as 0 to store the largest number with minimum frequency\n        int ans=0;\n        // Iterating over the HashMap to find the largest number with minimum frequency\n        for(Map.Entry<Integer,Integer> e:hm.entrySet()){\n            // If the frequency of the element is equal to the minimum frequency\n            if(e.getValue()==freq){\n                // Updating the answer with the larger number\n                ans=Math.max(ans,e.getKey());\n            }\n        }\n        // Returning the largest number with minimum frequency\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\ndef LargButMinFreq(arr,n):\n    #dictionary to store the frequency of list elements\n    freq = {}\n    #calculating the frequency of each element in the list\n    for item in arr:\n        if (item in freq):\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    minfreq=n+1\n    res=-1\n    #finding the element with the minimum frequency but largest value\n    for key, value in freq.items():\n        if (minfreq > value):\n            res=key\n            minfreq=value\n        elif minfreq == value:\n            #if there are multiple elements with the same minimum frequency,\n            #select the one with the largest value\n            if res < key:\n                res = key\n    return res",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}