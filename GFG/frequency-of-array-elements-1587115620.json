{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701202,
            "title": "Frequencies in a Limited Array",
            "titleSlug": "frequency-of-array-elements-1587115620",
            "content": "<p><span >You are given an array <strong><code>arr[]</code></strong> containing positive integers. The elements in the array <code>arr[]</code> range from <code>1</code> to <code>n</code> (where <code>n</code> is the size of the array), and some numbers may be repeated or absent. Your task is to count the frequency of all numbers in the range <code>1</code> to <code>n</code> and return an array of size <code>n</code> such that <code>result[i]</code> represents the frequency of the number <code>i</code> (1-based indexing).</span></p>\n<p><span ><strong>Examples</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 3, 2, 3, 5]\n<strong>Output:</strong> [0, 2, 2, 0, 1]<br /><strong>Explanation: </strong>We have: <code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> occurring 0 times, </span><code>2</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> occurring 2 times, </span><code>3</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> occurring 2 times, </span><code>4</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> occurring 0 times, and </span><code>5</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> occurring 1 time.</span></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [3, 3, 3, 3]\n<strong>Output: </strong>[0, 0, 4, 0]<strong>\nExplanation: </strong>We have: <code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> occurring 0 times, </span><code>2</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> occurring 0 times, </span><code>3</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> occurring 4 times, and </span><code>4</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> occurring 0 times.</span></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1]\n<strong>Output: </strong>[1]<strong>\nExplanation: </strong>We have: <code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> occurring 1 time, and there are no other numbers between </span><code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> and the size of the array.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1&nbsp;&le;&nbsp;arr[i]&nbsp;&le; arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of positive integers where each element is between 1 and `n` (the size of the array), some numbers may be repeated or absent. Count the frequency of each number from 1 to `n` and return an array `result` of size `n` where `result[i]` represents the frequency of the number `i+1` (1-based indexing).",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= arr.size()"
                ],
                "testcases": [
                    {
                        "input": "[2, 3, 2, 3, 5]",
                        "output": "[0, 2, 2, 0, 1]",
                        "explanation": "The frequencies are: 1: 0, 2: 2, 3: 2, 4: 0, 5: 1."
                    },
                    {
                        "input": "[3, 3, 3, 3]",
                        "output": "[0, 0, 4, 0]",
                        "explanation": "The frequencies are: 1: 0, 2: 0, 3: 4, 4: 0."
                    },
                    {
                        "input": "[1]",
                        "output": "[1]",
                        "explanation": "The frequency of 1 is 1.  Since n=1, we only need to report the frequency of 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Iterate through the array, and for each element, increment the corresponding index in the result array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "vmware",
            "zoho",
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count the frequency of all elements from 1 to N in the array.\n    vector<int> frequencyCount(vector<int>& arr) {\n        int n = arr.size();\n        vector<int> result(n, 0); // Initialize result vector of size n with 0\n        for (int i = 0; i < n; i++) {\n            if (arr[i] <= n) { // Ensure the element is between 1 and n\n                result[arr[i] - 1]++;\n            }\n        }\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to count the frequency of all elements from 1 to N in the array.\n    public List<Integer> frequencyCount(int[] arr) {\n        int n = arr.length;\n        List<Integer> result = new ArrayList<>(\n            Collections.nCopies(n, 0)); // Initialize the result list with 0s\n        for (int i = 0; i < n; i++) {\n            if (arr[i] <= n) { // Only count numbers between 1 and n\n                result.set(arr[i] - 1, result.get(arr[i] - 1) + 1);\n            }\n        }\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to count the frequency of all elements from 1 to N in the array.\n    def frequencyCount(self, arr):\n        n = len(arr)\n        result = [0] * n  # Initialize a list of size n with 0s\n        for num in arr:\n            if 1 <= num <= n:  # Only count numbers between 1 and n\n                result[num - 1] += 1\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to count the frequency of all elements from 1 to N in the array.\n    frequencyCount(arr) {\n        const n = arr.length;\n        let result = Array(n).fill(0); // Initialize an array of size n with 0s\n\n        for (let num of arr) {\n            if (num >= 1 && num <= n) {\n                result[num - 1]++; // Increment the count for the number num\n            }\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}