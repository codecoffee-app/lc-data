{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702684,
            "title": "Cumulative frequency of count of each element in an unsorted array",
            "titleSlug": "frequency-of-each-element-in-an-unsorted-array0759",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of elements. The task is to calculate the cumulative frequency of each distinct element of the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;Cumulative frequency should be taken according to the sorted order of elements.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [1, 2, 2, 1, 3, 4]\n<strong>Output :</strong> [2, 4, 5, 6]\n<strong>Explanation: </strong>The elements are first counted for their frequencies, resulting in {1: 2, 2: 2, 3: 1, 4: 1}. These elements are then sorted by their value, yielding the order [1, 2, 3, 4]. The cumulative frequencies are calculated by adding up the frequencies of the elements as we progress through the sorted order. Thus, the output is [2, 4, 5, 6], representing the cumulative count of elements in the sorted order.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [1, 2, 1, 2, 1, 2]\n<strong>Output :</strong> [3, 6]\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn).<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, calculate the cumulative frequency of each distinct element. The cumulative frequencies should be determined based on the sorted order of the distinct elements.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 2, 1, 3, 4]",
                        "output": "[2, 4, 5, 6]",
                        "explanation": "First, determine the frequency of each distinct element: {1: 2, 2: 2, 3: 1, 4: 1}.  Sort the distinct elements: [1, 2, 3, 4]. Then compute cumulative frequencies: 1 appears 2 times, so the first cumulative frequency is 2.  2 appears 2 times, so the cumulative frequency becomes 2 + 2 = 4. 3 appears 1 time, so the cumulative frequency becomes 4 + 1 = 5. 4 appears 1 time, so the cumulative frequency becomes 5 + 1 = 6. The result is [2, 4, 5, 6]."
                    },
                    {
                        "input": "[1, 2, 1, 2, 1, 2]",
                        "output": "[3, 6]",
                        "explanation": "The distinct elements are 1 and 2. The frequency of 1 is 3 and frequency of 2 is 3. Sorting them yields [1, 2]. The cumulative frequency is calculated as follows. 1's frequency is 3 so the first element of result is 3. 2's frequency is 3 so the cumulative sum is 3 + 3 = 6. The result is [3, 6]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >A&nbsp;<strong>better solution</strong> is to use sorting. We sort the array so that the same elements come together. After sorting, we linearly traverse elements and count their frequencies.</span></p>",
            "<p><span >An&nbsp;<strong>efficient solution</strong>&nbsp;is to use hashing. Insert the element and its frequency in a set of pairs. As the set stores unique values in a sorted order, it will store all the elements with their frequencies in a sorted order. Iterate in the set and print the frequencies by adding the previous ones at every step.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    vector<int> countFreq(vector<int>& arr) {\n        // Insert elements and their\n        // frequencies in hash map.\n        int n = arr.size();\n        unordered_map<int, int> hm;\n        for (int i = 0; i < n; i++)\n            hm[arr[i]]++;\n\n        // Declare a set\n        set<pair<int, int> > st;\n\n        // insert the element and\n        // and insert its frequency in a set\n        for (auto x : hm) {\n            st.insert({x.first, x.second});\n        }\n\n        int cumul = 0;\n\n        // iterate the set and print the\n        // cumulative frequency\n        vector<int> v;\n\n        for (auto x : st) {\n            cumul += x.second;\n            v.push_back(cumul);\n        }\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int[] countFreq(int arr[]) {\n        // Insert elements and their frequencies in a HashMap\n        int n = arr.length;\n        HashMap<Integer, Integer> hm = new HashMap<>();\n\n        for (int i = 0; i < n; i++) {\n            hm.put(arr[i], hm.getOrDefault(arr[i], 0) + 1);\n        }\n\n        // Declare a TreeSet to store pairs of elements and their frequencies\n        TreeSet<Map.Entry<Integer, Integer>> st =\n            new TreeSet<>((a, b) -> a.getKey().compareTo(b.getKey()));\n\n        // Insert the element and its frequency in the TreeSet\n        for (Map.Entry<Integer, Integer> entry : hm.entrySet()) {\n            st.add(entry);\n        }\n\n        int cumul = 0;\n        int[] result = new int[st.size()];\n        int index = 0;\n\n        // Iterate the set and store the cumulative frequency\n        for (Map.Entry<Integer, Integer> entry : st) {\n            cumul += entry.getValue();\n            result[index++] = cumul;\n        }\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def countFreq(self, arr):\n        n = len(arr)\n        # Insert elements and their\n        # frequencies in hash map.\n        hm = {}\n        for i in range(0, n):\n            hm[arr[i]] = hm.get(arr[i], 0) + 1\n\n        # Declare a set\n        st = set()\n\n        # Insert the element and\n        # its frequency in a set\n        for x in hm:\n            st.add((x, hm[x]))\n\n        cumul = 0\n        v = list()\n\n        # Iterate the set and print\n        # the cumulative frequency\n        for x in sorted(st):\n            cumul += x[1]\n            v.append(cumul)\n        return v\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {Object}\n */\n\nclass Solution {\n    // Function to count the frequency of all elements from 1 to N in the array.\n    countFreq(arr) {\n        let n = arr.length;\n        // Insert elements and their frequencies in hash map.\n        let hm = {};\n        for (let i = 0; i < n; i++) {\n            hm[arr[i]] = (hm[arr[i]] || 0) + 1;\n        }\n\n        // Declare a set\n        let st = new Set();\n\n        // Insert the element and its frequency in a set\n        for (let x in hm) {\n            st.add([ Number(x), hm[x] ]);\n        }\n\n        let cumul = 0;\n        let v = [];\n\n        // Iterate the set and print the cumulative frequency\n        for (let x of st) {\n            cumul += x[1];\n            v.push(cumul);\n        }\n        return v;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}