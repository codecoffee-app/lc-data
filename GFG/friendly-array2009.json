{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702839,
            "title": "Friendly Array",
            "titleSlug": "friendly-array2009",
            "content": "<p><span >Numbers have a measure of friendliness defined as the absolute difference between them. Given an circular array of integers <strong>arr[]</strong>, calculate the friendliness of the array. Friendliness is the sum of the absolute differences between each element and its closest friend in the array.</span></p>\n<p><span ><strong>Examples</strong>:</span></p>\n<pre><span ><strong>Input:</strong> arr[] = [4, 1, 5]</span><br /><span ><strong>Output:</strong> 8</span><br /><span ><strong>Explanation:</strong> The sum of absolute differences with closest neighbors is |4-1| + |1-5| + |5-4| = 8.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [1, 1, 1]</span><br /><span ><strong>Output:</strong> 0</span><br /><span ><strong>Explanation:</strong> All elements are identical, so the sum of differences is zero.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)</span><br /><span ><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints:<br /></strong>2 &lt; arr.size() &le; 10<sup>6</sup></span><br /><span >1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a circular array of integers, calculate the 'friendliness' of the array. Friendliness is defined as the sum of the absolute differences between each element and its closest neighbor in the circular array.",
                "constraints": [
                    "2 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[4, 1, 5]",
                        "output": "8",
                        "explanation": "The sum of absolute differences with closest neighbors is |4-1| + |1-5| + |5-4| = 3 + 4 + 1 = 8."
                    },
                    {
                        "input": "[1, 1, 1]",
                        "output": "0",
                        "explanation": "All elements are identical, so the sum of differences is zero."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Iterate through the array, take absolute differences between adjacent elements, and add differences between the first and the last element.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to calculate the friendliness of the array\nclass Solution {\n  public:\n    int calculateFriendliness(vector<int>& arr) {\n        int n = arr.size();\n        int friendliness = 0;\n\n        // Iterating over the array to calculate friendliness\n        for (int i = 0; i < n; i++) {\n            int nextIndex = (i + 1) % n;\n            // Adding the absolute difference between current and next element to\n            // friendliness\n            friendliness += abs(arr[i] - arr[nextIndex]);\n        }\n\n        // Returning the total friendliness\n        return friendliness;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to calculate the friendliness of an array\n    public int calculateFriendliness(int[] arr) {\n        // Get the length of the array\n        int n = arr.length;\n        // Initialize friendliness to 0\n        int friendliness = 0;\n\n        // Loop through the array\n        for (int i = 0; i < n; i++) {\n            // Calculate the index of the next element in a circular manner\n            int nextIndex = (i + 1) % n;\n            // Add the absolute difference between current and next element to\n            // friendliness\n            friendliness += Math.abs(arr[i] - arr[nextIndex]);\n        }\n\n        // Return the total friendliness\n        return friendliness;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def calculateFriendliness(self, arr):\n        n = len(arr)\n        friendliness = 0\n\n        for i in range(n):\n            #calculating next index to get diffrence with\n            next_index = (i + 1) % n\n            #adding difference to friendliness\n            friendliness += abs(arr[i] - arr[next_index])\n\n        return friendliness\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    calculateFriendliness(arr) {\n        const n = arr.length; // Get the length of the array\n        let friendliness = 0;\n\n        for (let i = 0; i < n; i++) {\n            // Calculate the absolute difference between current and next element\n            let diff = Math.abs(arr[i] - arr[(i + 1) % n]);\n            friendliness += diff; // Update the friendliness value\n        }\n\n        return friendliness; // Return the final friendliness value\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}