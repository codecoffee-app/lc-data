{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703687,
            "title": "Friends Pairing Problem",
            "titleSlug": "friends-pairing-problem5425",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>n </strong>friends, each one can remain single or can be paired up with some other friend. Each friend can be paired only <strong>once</strong>. Find out the total number of ways in which friends can remain single or can be paired up.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3\n<strong>Output:</strong> 4\n<strong>Explanation</strong>:\n{1}, {2}, {3} : All single\n{1}, {2,3} : 2 and 3 paired but 1 is single.\n{1,2}, {3} : 1 and 2 are paired but 3 is single.\n{1,3}, {2} : 1 and 3 are paired but 2 is single.\nNote that {1,2} and {2,1} are considered same.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 2\n<strong>Output:</strong> 2\n<strong>Explanation</strong>:\n{1} , {2} : All single.\n{1,2} : 1 and 2 are paired.<br /></span></pre>\n<pre><strong>Input</strong>: n = 1\n<strong>Output:</strong> 1</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 18</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'n' friends, determine the total number of ways they can remain single or be paired up with another friend. Each friend can only be paired once.",
                "constraints": [
                    "1 <= n <= 18"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "4",
                        "explanation": "The possible arrangements are: all three friends are single ({1}, {2}, {3}); friend 1 is single and friends 2 and 3 are paired ({1}, {2,3}); friend 2 is single and friends 1 and 2 are paired ({1,2}, {3}); and friend 3 is single and friends 1 and 3 are paired ({1,3}, {2}). Note: pairing (1,2) is considered the same as (2,1)."
                    },
                    {
                        "input": "2",
                        "output": "2",
                        "explanation": "The possible arrangements are: both friends are single ({1}, {2}); and the two friends are paired ({1,2})."
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "The only possible arrangement is for the single friend to remain single."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<pre><span >For n-th person there are two choices:\n1) n-th person remains single, we use recursion for f(n - 1)\n2) n-th person pairs up with any of the remaining (n-1) persons. Call (n - 1) * f(n - 2).\n</span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    int countFriendsPairings(int n) {\n        int a = 1, b = 2, c = 0;\n        if (n <= 2) {\n            return n;\n        }\n        for (int i = 3; i <= n; i++) {\n            // Without using modular arithmetic\n            c = b + (i - 1) * a;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int countFriendsPairings(int n) {\n        int a = 1, b = 2, c = 0;\n        if (n <= 2) {\n            return n;\n        }\n        for (int i = 3; i <= n; i++) {\n            // Without using modular arithmetic and using int type\n            c = b + (i - 1) * a;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n};\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# User function Template for python3\n\n\nclass Solution:\n\n    def countFriendsPairings(self, n):\n        a, b = 1, 2  # Base cases f(1) = 1 and f(2) = 2\n        if n <= 2:\n            return n\n\n        for i in range(3, n + 1):\n            # Calculate the next value without modular arithmetic\n            c = b + (i - 1) * a\n            a = b\n            b = c\n\n        return c\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number} n\n * @return {number}\n */\n\nclass Solution {\n\n    countFriendsPairings(n) {\n        let a = 1, b = 2, c = 0;\n        if (n <= 2) {\n            return n;\n        }\n        for (let i = 3; i <= n; i++) {\n            // Without using modular arithmetic\n            c = b + (i - 1) * a;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}