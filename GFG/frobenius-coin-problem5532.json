{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704894,
            "title": "Frobenius coin problem",
            "titleSlug": "frobenius-coin-problem5532",
            "content": "<p><span style=\"font-size:18px\">Given two coins of denominations X and Y respectively, find the largest amount that cannot be obtained using these two coins (assuming infinite supply of coins) followed by the total number of such non obtainable amounts.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>X = 2, Y = 5\r\n<strong>Output: </strong>3 2\r\n<strong>Explanation: </strong>3 is the largest amount that\r\ncan not be formed using 2 and 5. And there \r\nare only 2 such non obtainable amounts and \r\nthey are 1 and 3.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>5 10\r\n<strong>Output: </strong>-1\r\n<strong>Explanation: </strong>Using 5 and 10 there can be \r\ninfinite number of amounts that cannot be\r\nformed.\r\n</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>frobenius()</strong>&nbsp;which takes X and Y as input parameters and returns a list of two numbers in which first number should be maximum amount that cannot be obtained and the second number should be total number of non-obtainable amounts. If no such value exist then returns&nbsp;a list containing -1.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(log<sub>2</sub>(max(X, Y)))<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n2 &lt;= X, Y &lt;= 10000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two coin denominations, X and Y, with an infinite supply of each, determine the largest amount that cannot be obtained using any combination of these coins. Also, find the total count of such non-obtainable amounts.",
                "constraints": [
                    "2 <= X <= 10000",
                    "2 <= Y <= 10000"
                ],
                "testcases": [
                    {
                        "input": "X = 2, Y = 5",
                        "output": "3 2",
                        "explanation": "The largest amount that cannot be formed using coins of denomination 2 and 5 is 3. The non-obtainable amounts are 1 and 3, totaling 2."
                    },
                    {
                        "input": "X = 5, Y = 10",
                        "output": "-1",
                        "explanation": "Using denominations 5 and 10, there exist an infinite number of amounts that cannot be formed because they share a common divisor greater than 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about gcd.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n\tpublic:\r\n   \tvector<int> frobenius(int X, int Y){\r\n   \t\tvector<int>res;\r\n\t    // Solution doesn't exist if GCD is\r\n\t    // not 1\r\n\t    if (__gcd(X,Y) != 1)\r\n\t    {\r\n\t        res.push_back(-1);\r\n\t        return res;\r\n\t    }\r\n\t \r\n\t    // Else apply the formula\r\n\t    int A = (X*Y)-(X+Y);\r\n\t    int N = (X-1)*(Y-1)/2;\r\n\t    res.push_back(A);\r\n\t    res.push_back(N);\r\n\t    return res;\r\n    }    \r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    //Complete this function\n    //Function to return the Frobenius coin denominations.\n    public List<int> frobenius(int X, int Y)\n    {\n        List<int> res = new List<int>();\n        // Solution doesn't exist if GCD is not 1\n        if (gcd(X, Y) != 1)\n        {\n            res.Add(-1);\n            return res;\n        }\n\n        // Else apply the formula\n        int A = (X * Y) - (X + Y);\n        int N = (X - 1) * (Y - 1) / 2;\n        res.Add(A);\n        res.Add(N);\n        return res;\n    }\n\n    // Function to calculate the greatest common divisor\n    private int gcd(int a, int b)\n    {\n        if (b == 0)\n            return a;\n        return gcd(b, a % b);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}