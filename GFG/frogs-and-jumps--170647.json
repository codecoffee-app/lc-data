{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713994,
            "title": "Frogs and Jumps",
            "titleSlug": "frogs-and-jumps--170647",
            "content": "<p><span style=\"font-size:18px\"><strong>N</strong>&nbsp;frogs are positioned at one end of the pond. All frogs want to reach the other end of the pond as soon as possible. The pond has some<strong>&nbsp;</strong>leaves arranged in a straight line. Each frog has the strength to jump exactly&nbsp;<strong>K&nbsp;</strong>leaves. For example, a&nbsp; frog having strength 2 will visit the leaves 2, 4, 6, ...&nbsp; etc. while crossing the pond. </span></p>\r\n\r\n<p><span style=\"font-size:18px\">Given the strength of each frog and the number of leaves, your task is to find the number of leaves that not be visited by any of the frogs when all frogs have reached the other end of the pond.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\nleaves = 4\r\nfrogs[] = {3, 2, 4}&nbsp;\r\n<strong>Output: </strong>1\r\n<strong>Explanation:</strong>\r\nLeaf 1 will not be visited by any frog.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 3\r\nleaves = 6\r\nfrogs[] = {1, 3, 5}&nbsp;\r\n<strong>Output: </strong>0\r\n<strong>Explanation: </strong>\r\nFirst frog will visit all the leaves so no \r\nleaf is left unvisited.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nComplete the function <strong>unvisitedLeaves</strong><strong>()</strong> which takes the integers <strong>N</strong>, <strong>leaves</strong>&nbsp;and the array <strong>frogs</strong><strong>&nbsp;</strong>as the input parameters, and returns the number of unvisited leaves.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*log(leaves))<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(leaves)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N, leaves, frogs[i] &le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "N frogs are at one end of a pond and want to reach the other end. The pond has leaves arranged in a line. Each frog can jump K leaves at a time (e.g., a frog with strength 2 visits leaves 2, 4, 6, ...). Given the strength of each frog and the total number of leaves, find the number of leaves that remain unvisited after all frogs have crossed the pond.",
                "constraints": [
                    "1 <= N, leaves, frogs[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nleaves = 4\nfrogs[] = {3, 2, 4}",
                        "output": "1",
                        "explanation": "Leaf 1 is not visited by any frog."
                    },
                    {
                        "input": "N = 3\nleaves = 6\nfrogs[] = {1, 3, 5}",
                        "output": "0",
                        "explanation": "The first frog visits all leaves, so no leaf remains unvisited."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to think of an approach by maintaing the status of each leaf (visited or unvisted) in an array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paypal"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to count the number of unvisited leaves\n    int unvisitedLeaves(int N, int leaves, int frogs[]) {\n        \n        // Create a vector to keep track of the status of each leave\n        vector<int> leaveStatus (leaves + 1, 0);\n\t\t\n        // Iterate through the frogs' jumps\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\t// Check if the frog's jump is within the total number of leaves\n            // and if the current leave has not been visited yet\n\t\t\tif (frogs[i] <= leaves && leaveStatus[frogs[i]] == 0) {\n\t\t\t\t// Mark all the leaves that can be reached by the frog's jump\n\t\t\t\tfor (int j = frogs[i]; j <= leaves; j += frogs[i]) {\n\t\t\t\t\tleaveStatus[j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n        // Count the number of unvisited leaves\n\t\tint leafCount = leaves;\n\t\tfor (int i : leaveStatus) {\n\t\t\tif (i) {\n\t\t\t\tleafCount--;\n\t\t\t}\n\t\t}\n\t\t\n        // Return the number of unvisited leaves\n\t\treturn leafCount;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    public int unvisitedLeaves(int N, int leaves, int frogs[]) {\r\n        \r\n        int leaveStatus[] = new int[leaves+1]; \r\n\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\tif (frogs[i] <= leaves && leaveStatus[frogs[i]] == 0) {\r\n\t\t\t\tfor (int j = frogs[i]; j <= leaves; j += frogs[i]) {\r\n\t\t\t\t\tleaveStatus[j] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tint leafCount = leaves;\r\n\t\tfor (int i : leaveStatus) {\r\n\t\t\tif (i==1) {\r\n\t\t\t\tleafCount--;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn leafCount;\r\n    }\r\n};\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to find minimum number of unvisited leaves.\n    def unvisitedLeaves(self, N, leaves, frogs):\n        \n        #Initializing leaveStatus array with all zeros.\n        leaveStatus = [0 for j in range(leaves+1)]\n        \n        #Iterating over frogs array.\n        for i in range(N):\n            #Checking if frog's jump is within leaves range and leaf is unvisited.\n            if frogs[i]<=leaves and leaveStatus[frogs[i]]==0:\n                #Marking all the leaves that can be reached by the frog as visited.\n                for j in range(frogs[i], leaves+1, frogs[i]):\n                    leaveStatus[j] = 1\n        \n        leafCount = leaves\n        #Counting the unvisited leaves.\n        for i in leaveStatus:\n            if(i):\n                leafCount-=1\n            \n        return leafCount",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public int unvisitedLeaves(int N, int leaves, int[] frogs)\n    {\n        // Create an array to keep track of the status of each leave\n        int[] leaveStatus = new int[leaves + 1];\n\t\t\n        // Iterate through the frogs' jumps\n\t\tfor (int i = 0; i < N; i++)\n\t\t{\n\t\t\t// Check if the frog's jump is within the total number of leaves\n            // and if the current leave has not been visited yet\n\t\t\tif (frogs[i] <= leaves && leaveStatus[frogs[i]] == 0)\n\t\t\t{\n\t\t\t\t// Mark all the leaves that can be reached by the frog's jump\n\t\t\t\tfor (int j = frogs[i]; j <= leaves; j += frogs[i])\n\t\t\t\t{\n\t\t\t\t\tleaveStatus[j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n        // Count the number of unvisited leaves\n\t\tint leafCount = leaves;\n\t\tforeach (int status in leaveStatus)\n\t\t{\n\t\t\tif (status == 1)\n\t\t\t{\n\t\t\t\tleafCount--;\n\t\t\t}\n\t\t}\n\t\t\n        // Return the number of unvisited leaves\n\t\treturn leafCount;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}