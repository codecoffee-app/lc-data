{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712123,
            "title": "Find length of the longest subarray containing atmost two distinct integers",
            "titleSlug": "fruit-into-baskets-1663137462",
            "content": "<p><span ><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">Given an array&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">arr[]</strong><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;containing positive</span><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;elements, the task is to find the length of the longest subarray of an input array containing at most two distinct integers.</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[]= [2, 1, 2]<br /><strong>Output:</strong> 3<br /><strong>Explanation</strong>: The entire array [2, 1, 2]<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> contains at most two distinct integers (2</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> and 1</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">). Hence, the length of the longest subarray is 3</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [3, 1, 2, 2, 2, 2]<br /><strong>Output: </strong>5<br /><strong>Explanation</strong>: The longest subarray containing at most two distinct integers is [1, 2, 2, 2, 2]<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, which has a length of 5</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">. </span></span><span >The subarray starts at the second element 1 and ends at the last element. It contains at most two distinct integers (1 and 2).</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` containing positive integers, find the length of the longest subarray that contains at most two distinct integers.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2, 1, 2]",
                        "output": "3",
                        "explanation": "The entire array [2, 1, 2] contains only two distinct integers (2 and 1). Therefore, the longest subarray with at most two distinct integers is the entire array itself, with a length of 3."
                    },
                    {
                        "input": "[3, 1, 2, 2, 2, 2]",
                        "output": "5",
                        "explanation": "The longest subarray containing at most two distinct integers is [1, 2, 2, 2, 2], which has a length of 5. This subarray starts at the second element (1) and ends at the last element. It contains two distinct integers: 1 and 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think this question similar to the maximum length of a subarray with at most two distinct elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Pointers",
                "slug": "pointers"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n\n    int totalElements(vector<int> &arr) {\n        int res = 0, cur = 0, count_b = 0, a = 0, b = 0;\n\n        for (int c : arr) {\n\n            cur = c == a || c == b ? cur + 1 : count_b + 1;\n            count_b = c == b ? count_b + 1 : 1;\n\n            if (b != c)\n                a = b, b = c;\n\n            res = max(res, cur);\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public static int totalElements(Integer[] arr) {\n        int k = 2; // maximum number of distinct fruits allowed\n        return atMost(\n            arr,\n            k); // calling the atMost function to calculate the maximum number of fruits\n    }\n\n    static int atMost(Integer arr[], int k) {\n        int n = arr.length; // total number of fruits\n        Map<Integer, Integer> map =\n            new HashMap<>();   // a HashMap to store the frequency of each fruit\n        int left = 0, max = 0; // initializing the left pointer and setting the initial\n                               // maximum number of fruits to 0\n        for (int right = 0; right < n; right++) {\n            map.put(arr[right], map.getOrDefault(arr[right], 0) +\n                                    1); // updating the frequency of the current fruit\n            for (; map.size() > k; left++) {\n                map.put(arr[left],\n                        map.getOrDefault(arr[left], 0) -\n                            1); // removing the leftmost fruit from the HashMap\n                if (map.get(arr[left]) <= 0)\n                    map.remove(arr[left]); // removing the fruit from HashMap if its\n                                           // frequency becomes 0\n            }\n            max = Math.max(max,\n                           right - left + 1); // updating the maximum number of fruits\n        }\n\n        return max; // returning the maximum number of fruits\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import Counter\n\n\nclass Solution:\n    #Function to find the maximum length of subarray with at most 2 distinct fruits type.\n    def totalElements(self, arr):\n        d = Counter(\n        )  #Initializing a Counter object to keep track of elements in the subarray.\n        n = len(arr)  #Calculating the length of the array.\n        ans = l = r = 0  #Initializing variables to keep track of subarray length and indices.\n\n        #Iterating through the array using two pointers, l and r.\n        while r < n:\n            val = arr[r]  #Current element in the subarray.\n            d[val] += 1  #Updating the Counter object with the frequency of the element.\n\n            #Checking if the number of distinct elements in the subarray is greater than 2.\n            while len(d) > 2:\n                d[arr[\n                    l]] -= 1  #Removing elements from the start of the subarray.\n                if d[arr[\n                        l]] == 0:  #Checking if the frequency of the removed element becomes zero.\n                    del d[arr[\n                        l]]  #If yes, then removing the element from the Counter object.\n                l += 1  #Moving the left pointer to the right.\n\n            ans = max(\n                ans, r - l + 1\n            )  #Calculating the maximum length of the subarray with at most 2 distinct fruits type.\n            r += 1  #Moving the right pointer to the right.\n        return ans  #Returning the maximum length.\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution {\n    // Complete this function\n    public int totalElements(List<int> arr) {\n        int n = arr.Count;\n        int res = 0, cur = 0, count_b = 0, a = -1, b = -1;\n\n        // Iterating over each fruit\n        foreach (int c in arr) {\n            // Updating cur if fruit is same as a or b, else updating count_b\n            cur = (c == a || c == b) ? cur + 1 : count_b + 1;\n            count_b = (c == b) ? count_b + 1 : 1;\n\n            // Updating a and b if b is not equal to c\n            if (b != c) a = b;\n            b = c;\n\n            // Calculating the maximum number of fruits that can be collected so far\n            res = Math.Max(res, cur);\n        }\n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the sum of minimum elements of all possible subarrays of fruits.\n    totalElements(arr) {\n        let d = {}; // Initializing an empty object to keep track of elements in the\n                    // subarray.\n        let n = arr.length; // Calculating the length of the array.\n        let ans = 0;\n        let l = 0;\n        let r = 0;\n\n        // Iterating through the array using two pointers, l and r.\n        while (r < n) {\n            let val = arr[r]; // Current element in the subarray.\n            if (!d[val]) {\n                d[val] = 0; // Initializing the Counter object with the frequency of the\n                            // element.\n            }\n            d[val] +=\n                1; // Updating the Counter object with the frequency of the element.\n\n            // Checking if the number of distinct elements in the subarray is greater\n            // than 2.\n            while (Object.keys(d).length > 2) {\n                d[arr[l]] -= 1; // Removing elements from the start of the subarray.\n                if (d[arr[l]] === 0) { // Checking if the frequency of the removed\n                                       // element becomes zero.\n                    delete d[arr[l]];  // If yes, then removing the element from the\n                                       // Counter object.\n                }\n                l += 1; // Moving the left pointer to the right.\n            }\n\n            ans =\n                Math.max(ans, r - l + 1); // Calculating the maximum length of the\n                                          // subarray with at most 2 distinct elements.\n            r += 1;                       // Moving the right pointer to the right.\n        }\n\n        return ans; // Returning the maximum length.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}