{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700577,
            "title": "Full Binary Tree",
            "titleSlug": "full-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree. Check whether the Binary tree is a full binary tree or not.</span></p>\n<p><span style=\"font-size: 18px;\"><a title=\"Binary Tree\" href=\"https://www.geeksforgeeks.org/what-is-binary-tree/\" target=\"_blank\" rel=\"noopener\"><strong>What is a Binary Tree?</strong></a><br /><br /><em>A binary tree is a tree data structure with a maximum of 2 children per node. We commonly refer to them as the left and right child as each element in a binary tree may only have two children.</em><br /><br /><a title=\"Full Binary Tree\" href=\"https://www.geeksforgeeks.org/full-binary-tree/\" target=\"_blank\" rel=\"noopener\"><strong>What is a Full Binary Tree?</strong></a><br /><br /><em>&nbsp;&nbsp;&nbsp; A full binary tree is a binary tree with either zero or two child nodes for each node. </em><br /><br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong></span><strong><span style=\"font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span></strong><span style=\"font-size: 18px;\">1\n&nbsp; &nbsp; &nbsp; &nbsp;/&nbsp;  &nbsp;\\\n&nbsp; &nbsp; &nbsp;&nbsp;2&nbsp; &nbsp; &nbsp;&nbsp;3\n&nbsp; &nbsp; /&nbsp;&nbsp;&nbsp;\\\n&nbsp; &nbsp;4&nbsp;   &nbsp;5<strong>\nOutput: </strong>1<strong>\nExplanation: </strong>Every node except leaf node\nhas two children so it is a full tree.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong></span><strong><span style=\"font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span></strong><span style=\"font-size: 18px;\">1\n&nbsp; &nbsp; &nbsp; &nbsp;/&nbsp;  &nbsp;\\\n&nbsp; &nbsp; &nbsp;&nbsp;2&nbsp; &nbsp; &nbsp;&nbsp;3\n&nbsp; &nbsp; /&nbsp;&nbsp;&nbsp;\n&nbsp; &nbsp;4&nbsp;   &nbsp;<strong>\nOutput: </strong>0<strong>\nExplanation: </strong>Node 2 has only one child\nso this is&nbsp;not a full tree.</span></pre>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong><br /><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function</span><span style=\"font-size: 18px;\"> <strong>isFullTree() </strong>which&nbsp;takes the&nbsp;root node of the tree<strong>&nbsp;</strong>as input and returns True if the given Binary Tree is full. Else, it returns False. <br />(The driver code will print 1 if the returned value is true, otherwise 0).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(Height of the Tree).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=Number of nodes&lt;=1000</span></p>\n<p><strong>&nbsp;</strong></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>For all the nodes, just check the number of childrens they have.<br />\nIf all the nodes in the Binary Tree have either 0 or 2 nodes, then it&#39;s a full binary tree.<br />\nElse if any of the node has just a single child, then it&#39;s not a full binary tree.</p>"
        ],
        "relatedTopics": [],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "bool isFullTree (struct Node* root)\r\n{\r\n    // If empty tree \r\n    if (root == NULL) \r\n        return true; \r\n  \r\n    // If leaf node \r\n    if (root->left == NULL && root->right == NULL) \r\n        return true; \r\n  \r\n    // If both left and right are not NULL, and left & right subtrees \r\n    // are full \r\n    if ((root->left) && (root->right)) \r\n        return (isFullTree(root->left) && isFullTree(root->right)); \r\n  \r\n    // We reach here when none of the above if conditions work \r\n    return false; \r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class GfG{\r\n\tboolean isFullTree(Node node)\r\n    {\r\n        // if empty tree \r\n        if(node == null) \r\n        return true; \r\n           \r\n        // if leaf node \r\n        if(node.left == null && node.right == null ) \r\n            return true; \r\n           \r\n        // if both left and right subtrees are not null \r\n        // the are full \r\n        if((node.left!=null) && (node.right!=null)) \r\n            return (isFullTree(node.left) && isFullTree(node.right)); \r\n           \r\n        // if none work \r\n        return false; \r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\ndef isFullTree(root): \r\n    # If empty tree \r\n    if root is None:     \r\n        return True\r\n      \r\n    # If leaf node \r\n    if root.left is None and root.right is None: \r\n        return True\r\n  \r\n    # If both left and right subtress are not None and \r\n    # left and right subtress are full \r\n    if root.left is not None and root.right is not None: \r\n        return (isFullTree(root.left) and isFullTree(root.right)) \r\n      \r\n    # We reach here when none of the above if condiitions work \r\n    return False",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/*\r\nclass Node\r\n{\r\n    constructor(x){\r\n        this.data=x;\r\n        this.left=null;\r\n        this.right=null;\r\n    }\r\n}\r\n*/\r\n\r\n/**\r\n * @param {Node} root\r\n * @return {boolean} \r\n*/\r\nclass Solution {\r\n  \tisFullTree(root){\r\n  \t\t// If empty tree\r\n                if (root == null) \r\n                    return true; \r\n            \r\n                // If leaf node \r\n                if (root.left == null && root.right == null) \r\n                    return true; \r\n\r\n                // If both left and right are not null, and left & right subtrees \r\n                // are full \r\n                if ((root.left) && (root.right)) \r\n                    return (this.isFullTree(root.left) && this.isFullTree(root.right)); \r\n\r\n                // We reach here when none of the above if conditions work \r\n                return false; \r\n  \t}\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}