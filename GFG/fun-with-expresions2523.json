{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705795,
            "title": "Fun With Expresions",
            "titleSlug": "fun-with-expresions2523",
            "content": "<p><span style=\"font-size:18px\">Given a string s which represent an expression, evaluate this expression.<br />\r\nInteger division should truncate towards zero.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>s = &quot;10*20+10&quot;\r\n<strong>Output: </strong>210</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>s = &quot;16*5-5/15&quot;\r\n<strong>Output: </strong>80</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anyhting. Your task is to complete the function&nbsp;<strong>calculate()&nbsp;</strong>which takes s as input parameter and returns the value of the expression.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Compelxity:&nbsp;</strong>O(|s|)<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= |s| &lt;= 10<sup>5</sup></span><br />\r\n<sup><span style=\"font-size:18px\"><strong>s</strong>&nbsp;is a valid expression.</span></sup><br />\r\n<span style=\"font-size:18px\"><strong>Note:&nbsp;</strong></span><span style=\"font-size:18px\">The answer is&nbsp;<strong>guaranteed</strong>&nbsp;to fit in a&nbsp;<strong>32-bit integer</strong>.</span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 's' representing an arithmetic expression containing integers, '+', '-', '*', and '/', evaluate the expression. Integer division should truncate towards zero. The expression 's' is guaranteed to be valid and the result will fit within a 32-bit integer.",
                "constraints": [
                    "1 <= |s| <= 10^5",
                    "s is a valid expression.",
                    "The answer is guaranteed to fit in a 32-bit integer."
                ],
                "testcases": [
                    {
                        "input": "10*20+10",
                        "output": "210",
                        "explanation": null
                    },
                    {
                        "input": "16*5-5/15",
                        "output": "80",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use maths</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\npublic:\n    //Function to calculate the expression.\n    int calculate(string s) {\n        int length = s.length();\n        \n        //returning 0 if expression is empty.\n        if (length == 0) return 0;\n        \n        int currentNumber = 0, lastNumber = 0, result = 0;\n        char sign = '+';\n        \n        //iterating over the expression.\n        for (int i = 0; i < length; i++) {\n            char currentChar = s[i];\n            \n            //if current character is a digit, calculating the number.\n            if (isdigit(currentChar)) {\n                currentNumber = (currentNumber * 10) + (currentChar - '0');\n            }\n            \n            //if current character is an operator or end of expression,\n            //performing the corresponding operation.\n            if (!isdigit(currentChar) && !iswspace(currentChar) || i == length - 1) {\n                if (sign == '+' || sign == '-') {\n                    result += lastNumber;\n                    lastNumber = (sign == '+') ? currentNumber : -currentNumber;\n                } else if (sign == '*') {\n                    lastNumber = lastNumber * currentNumber;\n                } else if (sign == '/') {\n                    lastNumber = lastNumber / currentNumber;\n                }\n                sign = currentChar;\n                currentNumber = 0;\n            }\n        }\n        result += lastNumber;\n        return result;  \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}