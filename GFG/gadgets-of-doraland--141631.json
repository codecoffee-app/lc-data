{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706080,
            "title": "Gadgets of Doraland",
            "titleSlug": "gadgets-of-doraland--141631",
            "content": "<p><span style=\"font-size:18px\">In Doraland, people have unique Identity Numbers called <strong>D-id.</strong> Doraemon owns the most popular gadget shop in Doraland. Since his gadgets are in high demand and he has only <strong>K</strong> gadgets left he has decided to sell his gadgets to his most frequent customers only. <strong>N</strong> customers visit his shop and <strong>D-id</strong> of each customer is given in an array <strong>array[ ]</strong>.&nbsp;In case two or more people have visited his shop the same number of time he gives priority to the customer with higher <strong>D-id</strong>. Find the <strong>D-ids</strong> of people he sells his <strong>K</strong> gadgets to.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 6\r\narray[] = {1, 1, 1, 2, 2, 3}\r\nK = 2\r\n<strong>Output:</strong> \r\n1 2\r\n<strong>Explanation: </strong>\r\nCustomers with D-id 1 and 2 are most \r\nfrequent.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 8\r\narray[] = {1, 1, 2, 2, 3, 3, 3, 4}\r\nK = 2\r\n<strong>Output:</strong> \r\n3 2\r\n<strong>Explanation: </strong>People with D-id&nbsp;1 and 2 have \r\nvisited shop 2 times&nbsp;Therefore, in this \r\ncase, the answer includes the D-id&nbsp;2 as 2 &gt; 1.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>TopK() </strong>which takes <strong>array[ ]</strong> and integer <strong>K</strong>&nbsp;as input parameters and returns an array containing <strong>D-id</strong> of customers he has decided to sell his gadgets to.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le;&nbsp;N &le;&nbsp;10<sup>5</sup><br />\r\n1&nbsp;&le;&nbsp;D-id &le;&nbsp;10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Doraemon has K gadgets to sell to his most frequent customers in Doraland. N customers visit his shop, and their unique D-ids are recorded in an array.  Doraemon prioritizes customers based on visit frequency. If two or more customers have visited the shop the same number of times, he prioritizes the customer with the higher D-id. Determine the D-ids of the K customers who will receive the gadgets.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= D-id <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "N = 6\narray[] = {1, 1, 1, 2, 2, 3}\nK = 2",
                        "output": "1 2",
                        "explanation": "Customers with D-id 1 and 2 are the most frequent visitors. Customer 1 visited 3 times and Customer 2 visited 2 times."
                    },
                    {
                        "input": "N = 8\narray[] = {1, 1, 2, 2, 3, 3, 3, 4}\nK = 2",
                        "output": "3 2",
                        "explanation": "Customers with D-id 1 and 2 have visited the shop 2 times each, while customer 3 visited three times.  Since K = 2, and 1 and 2 appear same number of times, we choose 2 over 1 because 2 > 1. We choose 3, because it appeared more times than both 1 and 2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use hashing.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    //Function to find the top k most frequent elements in the array.\n    vector<int> TopK(vector<int>& array, int k)\n    {\n        int i,j=0; //initialize variables i and j for looping and counting\n        int arr[10002]; //initialize array to store frequency of elements\n        \n        //initialize all elements of arr array as 0\n        for(i=0;i<10002;i++)\n            arr[i] = 0;\n            \n        //count the frequency of each element in the array\n        for(i=0;i<array.size();i++)\n            arr[array[i]]++;\n        \n        vector<int>res[100002]; //create a 2D vector to store elements based on their frequency\n        \n        //store elements in res vector based on their frequency\n        for(i=0;i<10002;i++)\n            {\n                if(arr[i]!=0)\n                    res[arr[i]].push_back(i);\n            }\n            \n        vector<int>ans; //create a vector to store the final answer\n        for(i=100001;i>=0;i--)\n            {\n                for(int p = res[i].size()-1;p>=0;p--)\n                    {\n                        //check if the number of elements in the ans vector is less than k,\n                        //if yes, then add the element to ans vector\n                        //if no, then break the loop\n                        if(j!=k)\n                            ans.push_back(res[i][p]);\n                        else\n                            break;\n                        j++; //increment j to keep track of number of elements added to ans vector\n                    }\n            }\n        return ans; //return the final answer vector\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    ArrayList<Integer>TopK(ArrayList<Integer> array, int k)\r\n    {\r\n        int i,j=0;\r\n        int arr[] = new int[10002];\r\n        for(i=0;i<10002;i++)\r\n            arr[i] = 0;\r\n            \r\n        for(i=0;i<array.size();i++)\r\n            arr[array.get(i)]++;\r\n        \r\n        \r\n        ArrayList<Integer>res[] = new ArrayList[100002];\r\n        for(i=0;i<100002;i++)\r\n            {\r\n                ArrayList<Integer>temp = new ArrayList<Integer>();\r\n                res[i]=temp;\r\n            }\r\n        for(i=0;i<10002;i++)\r\n            {\r\n                if(arr[i]!=0)\r\n                    {\r\n                        res[arr[i]].add(i);\r\n                    }\r\n                    \r\n            }\r\n            \r\n        ArrayList<Integer>ans = new ArrayList<Integer>();\r\n        for(i=100001;i>=0;i--)\r\n            {\r\n                for(int p = res[i].size()-1;p>=0;p--)\r\n                    {\r\n                        if(j!=k)\r\n                            ans.add(res[i].get(p));\r\n                        else\r\n                            break;\r\n                        j++;\r\n                    }\r\n            }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def TopK(self, array, k):\n        # create an empty dictionary to store the count of each element in the array\n        dicti={}\n\n        # iterate over the array\n        for i in array:\n            # if the element is already present in the dictionary, increment its count\n            if i in dicti:\n                dicti[i]+=1\n            # if the element is not present in the dictionary, add it and set its count to 1\n            else:\n                dicti[i]=1\n        \n        # create an empty list to store the count and element pairs\n        listi=[]\n        \n        # create a set of unique elements in the array\n        st=set(array)\n\n        # iterate over the unique elements\n        for i in st:\n            # append the count and element pair to the list\n            listi.append([dicti[i],i])\n        \n        # sort the list in ascending order based on count\n        listi.sort()\n\n        # sort the list in descending order to get the elements with highest counts first\n        listi=sorted(listi,reverse=True)\n        \n        # create an empty list to store the top k elements\n        res=[]\n\n        # iterate over the list and append the top k elements to the result list\n        for i in range(k):\n            res.append(listi[i][1])\n\n        # return the result list\n        return res",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}