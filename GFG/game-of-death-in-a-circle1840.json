{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705122,
            "title": "Find the Safe Position",
            "titleSlug": "game-of-death-in-a-circle1840",
            "content": "<p><span style=\"font-size: 18px;\">There are <strong>n</strong> people standing in a circle (<strong>numbered clockwise 1 to n</strong>) waiting to be executed. The counting begins at point <strong>1</strong> in the circle and proceeds around the circle in a fixed direction (<strong>clockwise</strong>). In each step, a certain number of people are skipped and the next person is executed. The elimination proceeds around the circle (which is becoming smaller and smaller as the executed people are removed), until only the last person remains, who is given <strong>freedom</strong>.<br />Given the total number of persons <strong>n</strong> and a number <strong>k</strong> which indicates that <strong>k-1 </strong>persons are skipped and <strong>k<sup>th</sup></strong> person is killed in circle. The task is to choose the place in the initial circle so that you are the last one remaining and so survive.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>n = </strong>2, <strong>k = </strong>1</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">2</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">Here, n = 2 and k = 1, then safe position is\n2 as the person at 1st position will be killed.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>n = </strong>4, <strong>k = </strong>2</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">The safe position is 1.\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>safePos()</strong> which takes an Integer n as input and returns the safe position.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Follow up:</strong> This problem can be solved in linear time. Can you come up with a solution?</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= n,k &lt;= 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "There are n people standing in a circle (numbered clockwise 1 to n) waiting to be executed. The counting begins at person 1 and proceeds clockwise. Every k-th person is executed, and the process continues until only one person remains. Your task is to determine the initial position in the circle that guarantees survival.",
                "constraints": [
                    "1 <= n, k <= 500"
                ],
                "testcases": [
                    {
                        "input": "n = 2, k = 1",
                        "output": "2",
                        "explanation": "With 2 people and k = 1, every 1st person is killed. Starting at position 1 leads to immediate execution. Starting at position 2 ensures survival."
                    },
                    {
                        "input": "n = 4, k = 2",
                        "output": "1",
                        "explanation": "With 4 people and k = 2, the safe position is 1. The order of execution would be 2, 4, 3 and 1 would remain last."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">This problem is based on Josephus problem.</span></p>",
            "<p><span style=\"font-size:18px\">The problem has following recursive structure.</span></p>\n\n<pre>\n<span style=\"font-size:18px\">  josephus(n, k) = (josephus(n - 1, k) + k-1) % n + 1\n  josephus(1, k) = 1\n</span></pre>\n\n<p><span style=\"font-size:18px\">After the first person (kth from begining) is killed, n-1 persons are left. So we call josephus(n &ndash; 1, k) to get the position with n-1 persons. But the position returned by josephus(n &ndash; 1, k) will consider the position starting from k%n + 1. So, we must make adjustments to the position returned by josephus(n &ndash; 1, k).</span></p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    \r\n    // Function to simulate Josephus problem\r\n    int josephus(int n, int k)\r\n    {\r\n      // Base case: if only one person left, return their position (1-indexed)\r\n      if (n == 1)\r\n        return 1;\r\n      else\r\n        /* The position returned by josephus(n - 1, k) is adjusted because the\r\n           recursive call josephus(n - 1, k) considers the original position\r\n           k%n + 1 as position 1 */\r\n        // Calculate the new position after eliminating kth person from the circle\r\n        return (josephus(n - 1, k) + k-1) % n + 1;\r\n    }    \r\n    \r\n    // Function to find the safe position\r\n    int safePos(int n, int k) {\r\n        // Calling the josephus function to get the safe position\r\n        return josephus(n,k);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    \n    // Function to find the position of the last remaining person in the Josephus problem\n    static int josephus(int n, int k) {\n        if (n == 1)\n            return 1;\n        else\n            /*\n             * The position returned by josephus(n - 1, k) is adjusted because the\n             * recursive call josephus(n - 1, k) considers the original position\n             * k%n + 1 as position 1\n             */\n            return (josephus(n - 1, k) + k-1) % n + 1;\n    }\n    \n    // Function to find the safe position in the Josephus problem\n    static int safePos(int n, int k) {\n        return josephus(n,k);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def josephus(n,k):\r\n    if n==1:\r\n        return 1\r\n    else:\r\n        #The position returned by josephus(n - 1, k) is adjusted because the\r\n        #recursive call josephus(n - 1, k) considers the original position\r\n        #k%n + 1 as position 1\r\n        return (josephus(n-1,k)+k-1)%n+1\r\n        \r\nclass Solution:\r\n    def safePos(self, n, k):\r\n        return josephus(n,k)\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\n\nclass Solution {\n\n    josephus(n, k)\n    {\n        // Base case: if there is only 1 person remaining, return the position 1\n        if (n === 1)\n            return 1;\n        else\n            /* The position returned by josephus(n - 1, k) is adjusted because the\n               recursive call josephus(n - 1, k) considers the original position\n               k%n + 1 as position 1 */\n            return (this.josephus(n - 1, k) + k-1) % n + 1;\n    }    \n\n    safePos(n, k) {\n        // Call the josephus function and return the result\n        return this.josephus(n, k);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}