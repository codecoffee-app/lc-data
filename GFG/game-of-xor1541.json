{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703950,
            "title": "Game of XOR",
            "titleSlug": "game-of-xor1541",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>A</strong>&nbsp;of size <strong>N.&nbsp;</strong>The value of an&nbsp;array is denoted by&nbsp;the bit-wise <strong>XOR</strong> of all elements it contains. Find the bit-wise XOR of the values of all subarrays of A. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>N <strong>= </strong>3 <br />A = [1,2,3] \n<strong>Output: <br /></strong>2\n<strong>Explanation:</strong>\nxor[1] = 1\nxor[1, 2] = 3\nxor[2, 3] = 1\nxor[1, 2, 3] = 0\nxor[2] = 2\nxor[3] = 3\nResult : 1 ^ 3 ^ 1 ^ 0 ^ 2 ^ 3 = 2\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>N<strong> </strong>=<strong> </strong>2<br />A = [1,2]\n<strong>Output: <br /></strong>0\n<strong>Explanation:</strong>\nxor[1] = 1\nxor[1, 2] = 3\nxor[2] = 2\nResult : 1 ^ 3 ^ 2 = 0</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>gameOfXor()</strong> which takes an integer N and&nbsp;array A[] as input parameters and returns the answer.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= N &lt;= 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">0 &lt;= A[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array **A** of size **N**. The value of an array is defined as the bitwise XOR of all its elements. Find the bitwise XOR of the values of all possible subarrays of **A**.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= A[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nA = [1, 2, 3]",
                        "output": "2",
                        "explanation": "The subarrays are [1], [2], [3], [1, 2], [2, 3], and [1, 2, 3].  Their XOR values are 1, 2, 3, (1^2)=3, (2^3)=1, and (1^2^3)=0, respectively.  The XOR of all these values is 1 ^ 2 ^ 3 ^ 3 ^ 1 ^ 0 = 2."
                    },
                    {
                        "input": "N = 2\nA = [1, 2]",
                        "output": "0",
                        "explanation": "The subarrays are [1], [2], and [1, 2]. Their XOR values are 1, 2, and (1^2)=3, respectively.  The XOR of all these values is 1 ^ 2 ^ 3 = 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If an element is xor&nbsp;with itself, even number of times, it becomes 0.<br />\nIf an element is xor&nbsp;with itself, odd&nbsp;number of times, it remains the same.<br />\nFor example<br />\n(A^A)^2n &nbsp; = 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; // even no of times<br />\n(A^A)^2n+1 &nbsp;= A &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // odd no of times </span></p>",
            "<p><span style=\"font-size:18px\">For array [1,2,3] its subarrays will be<br />\n1<br />\n1 2<br />\n2<br />\n3<br />\n1 2 3<br />\n2 3<br />\n<br />\nHere&nbsp;a particular ith index&nbsp;repeates (N-i) * (i+1) times. Now if we see carefully&nbsp;(N-i)&nbsp;or&nbsp;(i+1)&nbsp;is always an even number for all values of i&#39;s possible.</span></p>",
            "<p><span style=\"font-size:18px\">For even length xor of all subarrays will be 0&nbsp;and for odd length xor of all subarrays will be xor of all even index elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the XOR of alternating numbers\n    int gameOfXor(int N , int A[]) {\n        \n        int result = 0;\n        \n        // Xor of alternating numbers from index 0\n        for(int i = 0; i < N; i++)\n        {\n            // If index is even, perform xor operation\n            if(i % 2 == 0)\n                result = result ^ A[i];\n        }\n        \n        // If N is even, ans will always be 0, else return xor of alternating elements.\n        if(N % 2 == 0)\n            return 0;\n        else\n            return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int gameOfXor(int N , int[] A) {\n        \n        int result = 0;\n        \n        // xor of alternating elements starting from index 0.\n        for(int i = 0; i < N; i++)\n        {\n            if(i % 2 == 0)\n                result = result ^ A[i];\n        }\n        \n        // If N is even, ans will always be 0, else return xor of alternating elements.\n        if(N % 2 == 0)\n            return 0;\n        else\n            return result;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def gameOfXor(self, N , A):\n        \n        res = 0\n        \n        # xor of alternating elements starting from index 0.\n        for i in range(0,N,2):\n            res^=A[i]\n            \n        # If N is even, ans will always be 0, else return xor of alternating elements.\n        if N%2==0:\n            return 0;\n        else:\n            return res",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr\n * @param {number} n\n * @return {number}\n */\n\nclass Solution {\n    gameOfXor(arr, n) {\n        let result = 0;\n        \n        // Xor of alternating numbers from index 0\n        for(let i = 0; i < n; i++)\n        {\n            if(i % 2 === 0)\n                result = result ^ arr[i];\n        }\n        \n        // If n is even, ans will always be 0, else return xor of alternating elements.\n        if(n % 2 === 0)\n            return 0;\n        else\n            return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}