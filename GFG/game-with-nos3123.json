{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703306,
            "title": "Game with nos",
            "titleSlug": "game-with-nos3123",
            "content": "<p><span style=\"font-size:18px\">You are given an array <strong>arr[]</strong>, and you have to re-construct an&nbsp;array <strong>arr[]</strong>.<br />\r\nThe values in <strong>arr[]</strong> are obtained by doing Xor of consecutive elements in the array.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> n=5, arr[ ] = {10, 11, 1, 2, 3}\r\n<strong>Output :</strong> 1 10 3 1 3\r\n<strong>Explanation:</strong>\r\nAt index 0, arr[0] xor arr[1] = 1\r\nAt index 1, arr[1] xor arr[2] = 10\r\nAt index 2, arr[2] xor arr[3] = 3\r\n...\r\nAt index 4, No element is left So, it will remain as\r\nit is.\r\nNew Array will be {1, 10, 3, 1, 3}.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> n=4, arr[ ] = {5, 9, 7, 6}\r\n<strong>Output :</strong>  12 14 1 6\r\n<strong>Explanation:</strong>\r\nAt index 0, arr[0] xor arr[1] = 12\r\nAt index 1, arr[1] xor arr[2] = 14\r\nAt index 2, arr[2] xor arr[3] = 1\r\nAt index 3, No element is left So, it will remain as it is.\r\nNew Array will be {12, 14, 1, 6}.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>game_with_number()</strong> that takes an array <strong>(arr)</strong>, sizeOfArray <strong>(n)</strong>&nbsp;and return the array re-constructed array <strong>arr</strong>. The driver code takes care of the printing.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup><br />\r\n1 &le; arr[i] &le; 10<sup>7</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of size `n`, reconstruct the array by replacing each element with the XOR of it and its adjacent element. The last element remains unchanged if `n` is odd.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "n=5, arr[] = {10, 11, 1, 2, 3}",
                        "output": "1 10 3 1 3",
                        "explanation": "arr[0] = 10 XOR 11 = 1, arr[1] = 11 XOR 1 = 10, arr[2] = 1 XOR 2 = 3, arr[3] = 2 XOR 3 = 1, arr[4] = 3 (remains unchanged)"
                    },
                    {
                        "input": "n=4, arr[] = {5, 9, 7, 6}",
                        "output": "12 14 1 6",
                        "explanation": "arr[0] = 5 XOR 9 = 12, arr[1] = 9 XOR 7 = 14, arr[2] = 7 XOR 6 = 1, arr[3] = 6 (remains unchanged)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We just need to traverse the array from index 0 to n-1<br />\nand change<br />\narr[i] = arr[i] xor arr[i+1]</span><br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "int* game_with_number(int arr[], int n)\r\n{\r\n    \r\n    for(int d=0;d < n-1;d++) // iterate through the array\r\n    {\r\n        arr[d] = arr[d]^arr[d+1]; // perform bitwise XOR operation between current element and next element\r\n    }\r\n    \r\n    return arr; // return the modified array\r\n    \r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Complete{\n    // XOR operation is performed on adjacent elements in the array\n    // to find the maximum value in each pair\n    public static int[] game_with_number (int arr[], int n) {\n        // Traverse through the array until second to last element\n        for(int d=0;d < n-1;d++)\n        {\n            // XOR the current element with the next element\n            arr[d] = arr[d]^arr[d+1];\n        }\n        // Return the modified array\n        return arr;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {number[]} arr\r\n * @param {number} n\r\n * @return {number[]} \r\n*/\r\n\r\nclass Solution {\r\n    game_with_number(arr,n){\r\n       for(let d=0; d < n-1; d++) {\r\n           arr[d] = arr[d] ^ arr[d+1];\r\n       }\r\n       return arr;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}