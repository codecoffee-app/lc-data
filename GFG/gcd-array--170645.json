{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713136,
            "title": "GCD Array",
            "titleSlug": "gcd-array--170645",
            "content": "<p><span style=\"font-size:18px\">You are given an array, <strong>arr&nbsp;</strong>of length&nbsp;<strong>N</strong>,&nbsp;and also a single integer&nbsp;<strong>K&nbsp;</strong>. Your task is to split the array arr&nbsp;into&nbsp;<strong>K&nbsp;</strong>non-overlapping, non-empty subarrays. For each of the subarrays, you calculate the sum of the elements in it. Let us denote these sums as <strong>S<sub>1</sub>,<sub> </sub>S<sub>2</sub>,&nbsp;S<sub>3</sub>, ...,&nbsp;S<sub>K</sub></strong>. Where <strong>S<sub>i </sub></strong>denotes the sum of the elements in the i<sup>th&nbsp;</sup>subarray from left.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Let <strong>G = GCD( S<sub>1</sub>,<sub> </sub>S<sub>2&nbsp;</sub>,S<sub>3 </sub>, ...,<sub> </sub>S<sub>K</sub>)</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Find the <strong>maximum </strong>value of G that can be obtained.&nbsp;<br />\r\nThe array may contain duplicate elements.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 5\r\nK = 4\r\narr[] = {6, 7, 5, 27, 3}\r\n<strong>Output:</strong> 3\r\n<strong>Explanation</strong>: </span>\r\n<span style=\"font-size:18px\">Since K = 4, you have to split the array into 4 subarrays.\r\nFor optimal splitting, split the array into\r\n4 subarrays as follows: [[6], [7, 5], [27], [3]]\r\nTherefore, S<sub>1</sub> = 6, S<sub>2</sub> = 7 + 5 = 12, S<sub>3</sub> = 27, S<sub>4</sub> = 3\r\nHence, G = GCD(S<sub>1</sub>, S<sub>2</sub>, S<sub>3</sub>, S<sub>4</sub>) = GCD(6, 12, 27, 3) = 3\r\nIt can be shown that 3 is the maximum value of G that can be obtained.</span>\r\n<span style=\"font-size:18px\">Thus, the answer is 3.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 3\r\nK = 2\r\narr[] = {1, 4, 5}\r\n<strong>Output:</strong> 5\r\n<strong>Explanation</strong>: </span>\r\n<span style=\"font-size:18px\">Since K = 2, you have to split the array into 2 subarrays.\r\nFor optimal splitting, split the array into\r\n2 subarrays as follows: [[1, 4], [5]]\r\nTherefore, S<sub>1</sub> = 1 + 4 = 5, S<sub>2</sub> = 5\r\nHence, G = GCD(S<sub>1</sub>, S<sub>2</sub>) = GCD(5,5) = 5\r\nIt can be shown that 5 is the maximum value of G that can be obtained.</span>\r\n<span style=\"font-size:18px\">Thus, the answer is 5.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp; </strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>solve()</strong> which takes the array arr[] and its size N and an integer K as input parameters and returns the required maximum GCD value.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N * x)<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(x), x is the number of factors of the sum of all elements.<br />\r\n<br />\r\n<strong>Constraints:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>4</sup><br />\r\n1 &lt;= K &lt;= N<br />\r\n1 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of length `N` and an integer `K`, the goal is to split `arr` into `K` non-overlapping, non-empty subarrays. Calculate the sum of each subarray, denoted as `S1, S2, S3, ..., SK`. Let `G = GCD(S1, S2, S3, ..., SK)`. Find the maximum possible value of `G`.",
                "constraints": [
                    "1 <= N <= 10^4",
                    "1 <= K <= N",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 5\nK = 4\narr[] = {6, 7, 5, 27, 3}",
                        "output": "3",
                        "explanation": "Split the array into subarrays [6], [7, 5], [27], and [3]. The sums are S1 = 6, S2 = 12, S3 = 27, S4 = 3. The GCD(6, 12, 27, 3) = 3. This is the maximum possible GCD."
                    },
                    {
                        "input": "N = 3\nK = 2\narr[] = {1, 4, 5}",
                        "output": "5",
                        "explanation": "Split the array into subarrays [1, 4] and [5]. The sums are S1 = 5, S2 = 5. The GCD(5, 5) = 5. This is the maximum possible GCD."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>How about dealing with the sum of all the elements present in the array?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    \n    public:\n    //Function to solve the problem.\n    int solve (int N, int K, vector<int> A) {\n        int total = 0;\n        //calculating the total sum of elements in the array.\n        for(int x:A)total+=x;\n        \n        vector < int > divisors;\n        int m = sqrt(total);\n        \n        //finding all the divisors of the total sum.\n        for(int i = 1;i <= m+1;i++){\n            if(total%i == 0){\n                divisors.push_back(i);\n                if(i!=total/i)divisors.push_back(total/i);\n            }\n        }\n        \n        //sorting the divisors in descending order.\n        sort(divisors.begin(),divisors.end());\n        reverse(divisors.begin(),divisors.end());\n        \n        //calculating the prefix sum array.\n        for(int i = 1;i<N;i++){\n            A[i]+=A[i-1];\n        }\n        \n        //initializing the output variable.\n        int out = 1;\n        \n        //iterating through each divisor and checking if it is feasible\n        //to distribute the elements into K groups.\n        for(int x:divisors){\n            int cnt = 0;\n            for(int y:A){\n                if(y%x == 0)cnt++;\n            }\n            //if feasible, updating the output variable and breaking the loop.\n            if(cnt >= K) {\n                out = x;\n                break;\n            }\n        }\n        \n        //returning the output variable.\n        return out;\n   \n    }\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int solve(int N, int K, int[] arr) {\r\n        // calculating the sum of all elements in the array\r\n        int sum=0;\r\n        for(int i:arr){\r\n            sum+=i;\r\n        }\r\n        \r\n        // finding all the divisors of the sum\r\n        ArrayList<Integer> divisors=new ArrayList<>();\r\n        for(int i=1;i*i<=sum;i++){\r\n            if(sum%i==0){\r\n                divisors.add(i);\r\n                if(i!=sum/i)divisors.add(sum/i);\r\n            }\r\n        }\r\n        \r\n        // sorting the divisors in descending order\r\n        Collections.sort(divisors,Collections.reverseOrder());\r\n        \r\n        // calculating the cumulative sum of the array\r\n        for(int i=1;i<N;i++){\r\n            arr[i]+=arr[i-1];\r\n        }\r\n        \r\n        // checking for divisors that satisfy the condition\r\n        int ans=1;\r\n        for(int i:divisors){\r\n            int cnt=0;\r\n            for(int j=0;j<N;j++){\r\n                if(arr[j]%i==0){\r\n                    cnt++;\r\n                }\r\n            }\r\n            if(cnt>=K){\r\n                ans=i;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        // returning the answer\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import List\n\nclass Solution:\n\n    def solve(self, N: int, K: int, arr: List[int]) -> int:\n        total = sum(arr)  # Finding the total sum of all elements in the array.\n        divisors = []  # Initializing an empty list to store the divisors.\n        m = int(total ** 0.5)  # Finding the square root of total.\n        \n        # Finding all the divisors of total and storing them in the list.\n        for i in range(1, m+1):\n            if total % i == 0:\n                divisors.append(i)\n                if i != (total // i):\n                    divisors.append(total // i)\n        \n        divisors.sort(reverse=True)  # Sorting the divisors in descending order.\n        \n        # Calculating prefix sums of the array elements.\n        for i in range(1, N):\n            arr[i] += arr[i-1]\n        \n        out = 1  # Initializing the output variable to 1.\n        \n        # Checking each divisor in descending order.\n        for x in divisors:\n            cnt = 0  # Initializing a counter variable to count the number of elements divisible by x.\n            \n            # Counting the number of elements divisible by x using prefix sums.\n            for y in arr:\n                if (y % x == 0):\n                    cnt += 1\n            \n            # If the count is greater than or equal to K, update the output and break the loop.\n            if cnt >= K:\n                out = x\n                break\n        \n        return out  # Returning the output.",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}