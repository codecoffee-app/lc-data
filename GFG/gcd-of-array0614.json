{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703671,
            "title": "GCD of Array",
            "titleSlug": "gcd-of-array0614",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of n positive integers, find the GCD of all the array elements.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 3, arr = [1, 2, 3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> GCD of 1,2,3 is 1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 4, arr = [2, 4, 6, 8]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Greatest common divisor of all the numbers is 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N,&nbsp;arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>The GCD of three or more numbers equals the product of the prime factors common to all the numbers, but it can also be calculated by repeatedly taking the GCDs of pairs of numbers.</p>\n\n<pre>\ngcd(a, b, c) = gcd(a, gcd(b, c)) \n             = gcd(gcd(a, b), c) \n             = gcd(gcd(a, c), b)\n</pre>\n\n<p>For an array of elements, we do following.</p>\n\n<pre>\nresult = arr[0]\nFor i = 1 to n-1\n   result = GCD(result, arr[i])\n</pre>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "wipro",
            "sap-labs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find gcd of N numbers.\n    int gcd(int n, vector<int> arr) {\n        int ans = arr[0];\n\n        // iterating from 2nd number to Nth number.\n        for (int i = 1; i < n; i++)\n            // using inbuilt function to calculate gcd of two numbers.\n            ans = __gcd(ans, arr[i]);\n\n        // returning gcd of all N numbers.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    // Recursive function to calculate GCD of two numbers\n    public int Gcd(int A, int B) {\n        if (B == 0) return A;\n        return Gcd(B, A % B);\n    }\n\n    // Function to calculate GCD of multiple numbers\n    public int gcd(int n, int arr[]) {\n        // Initializing answer as the first element of the array\n        int ans = arr[0];\n\n        // Iterating through the array and calculating GCD of each element with the\n        // previous result\n        for (int i = 1; i < n; i++) ans = Gcd(ans, arr[i]);\n\n        // Returning the final GCD\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def Gcd(self, a, b):\n        # Base cases\n        if a > b:\n            if a % b == 0:\n                return b\n            return self.Gcd(b, a % b)\n        if b % a == 0:\n            return a\n        return self.Gcd(a, b % a)\n\n    def gcd(self, n, arr):\n        # Initialize result as the first element\n        result = arr[0]\n\n        # Iterate over the array and compute GCD\n        for i in range(1, n):\n            result = self.Gcd(result, arr[i])\n\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    // Function to return gcd of array elements.\n    public int gcd(int n, int[] arr) {\n        int ans = arr[0];\n\n        // iterating from 2nd number to Nth number.\n        for (int i = 1; i < n; i++)\n            // using inbuilt function to calculate gcd of two numbers.\n            ans = GCD(ans, arr[i]);\n        // returning gcd of all N numbers.\n        return ans;\n    }\n\n    // Function to calculate gcd of two numbers.\n    private int GCD(int a, int b) {\n        if (a == 0) return b;\n\n        return GCD(b % a, a);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n\n    // Function to calculate the gcd of two numbers using the Euclidean algorithm.\n    __gcd(a,b){\n        if(b===0)\n            return a;\n        else \n            return this.__gcd(b,a%b);\n    }\n    \n    // Function to calculate the gcd of an array of numbers.\n    gcd(arr,n){\n       let g = 0; // Initialize the gcd variable as 0.\n       for(let it of arr){\n        g = this.__gcd(it,g); // Calculate the gcd of the current element and the gcd so far.\n       }\n       return g; // Return the final gcd.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}