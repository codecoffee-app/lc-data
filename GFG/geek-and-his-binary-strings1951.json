{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704553,
            "title": "Geek and his Binary Strings",
            "titleSlug": "geek-and-his-binary-strings1951",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer N, the task is to find the number of binary strings of size 2*N such that each string has <strong>exactly N 1's</strong> and each prefix of the string has more than or an equal number of 1's than 0's.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> The answer can be very large. So, output answer modulo 10<sup>9</sup></span><span style=\"font-size: 18px;\">+7</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: N = 2\n<strong>Output:</strong> 2</span>\n<span style=\"font-size: 18px;\"><strong>Explanation</strong>: 1100, 1010 are two \nsuch strings of size 4 which have exactly two 1's in each.</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: N = 3\n<strong>Output:</strong> 5</span>\n<span style=\"font-size: 18px;\"><strong>Explanation</strong>: 111000 101100 101010 110010 \n110100 are such 5 strings which have exactly three 1's in each.</span></pre>\n<div><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>prefixStrings</code>()&nbsp;</strong>which takes <strong>N</strong><strong> </strong>as input parameter and returns an integer value.<br /><br /><strong>Expected Time Complexity:</strong> O(<strong>N<sup>2</sup></strong>)<br /><strong>Expected Auxiliary Space:</strong> O(<strong>|N|</strong>)<br /><br /><strong>Constraints:</strong><br />1 &le; <strong>|N|</strong> &le; 10<sup>3</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>1. Find nth Catalan number</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution{\n\n    public:\n    // Function to calculate the Nth prefix string\n    int prefixStrings(int N)\n    {\n        // Answer is Nth catalan number\n\n        // Array to store previous catalan numbers\n        long long dp[N+1];\n        memset(dp, 0, sizeof dp);\n\n        // Modulo value for calculations\n        int mod = (int)(1e9 + 7);\n\n        // Base cases for catalan numbers\n        dp[0] = dp[1] = 1;\n\n        // Calculating catalan numbers using dynamic programming\n        for (int i = 2; i <= N; i++)\n        {\n            dp[i] = 0;\n            for (int j = 0; j < i; j++)\n                // Using modulo operation to avoid integer overflow\n                dp[i] = (dp[i] % mod + (dp[j] % mod * dp[i-j-1] % mod) % mod) % mod;\n        }\n\n        // Returning the Nth prefix string\n        return (int)(dp[N]);\n    }\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int prefixStrings(int N)\n    {\n        // Answer is Nth catalan number\n\n        // Array to store previous catalan numbers\n        long mod = (long)(1e9 + 7);\n        long[] dp = new long[N+1];\n        \n        // Base cases for catalan numbers\n        dp[0] = dp[1] = 1;\n\n        // Calculating catalan numbers using dynamic programming\n        for (int i = 2; i <= N; i++)\n        {\n            dp[i] = 0;\n            for (int j = 0; j < i; j++)\n                // Using modulo operation to avoid integer overflow\n                dp[i] = (dp[i] % mod + (dp[j] % mod * dp[i-j-1] % mod) % mod) % mod;\n        }\n\n        // Returning the Nth prefix string\n        return (int)(dp[N]);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}