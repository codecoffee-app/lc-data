{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703642,
            "title": "Colorful Strings",
            "titleSlug": "geek-and-its-colored-strings1355",
            "content": "<p><span style=\"font-size:18px\">Find the count of all possible strings of size n.Each character of the string is either &lsquo;R&rsquo;, &lsquo;B&rsquo; or &lsquo;G&rsquo;. In the final string there needs to be at least r number of &lsquo;R&rsquo;, at least b number of &lsquo;B&rsquo; and at least g number of &lsquo;G&rsquo; (such that r + g + b &lt;= n).&nbsp;</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: n = 4, r = 1, g = 1, b = 1\n<strong>Output:</strong>&nbsp;36&nbsp;\n<strong>Explanation</strong>: No. of &#39;R&#39; &gt;= 1, \nNo. of &lsquo;G&rsquo; &gt;= 1, No. of &lsquo;B&rsquo; &gt;= 1 \nand (No. of &lsquo;R&rsquo;) + (No. of &lsquo;B&rsquo;) \n+ (No. of &lsquo;G&rsquo;) = n then \nfollowing cases are possible: \n1. RBGR and its 12 permutation \n2. RBGB and its 12 permutation \n3. RBGG and its 12 permutation \nHence answer is 36.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 4, r = 2, g = 0, b = 1\n<strong>Output:&nbsp;</strong>22\n<strong>Explanation</strong>: No. of &#39;R&#39; &gt;= 2,\nNo. of &lsquo;G&rsquo; &gt;= 0, No. of &lsquo;B&rsquo; &gt;= 1\nand (No. of &lsquo;R&rsquo;) + (No. of &lsquo;B&rsquo;)\n+ (No. of &lsquo;G&rsquo;) &lt;= n then \nfollowing cases are possible:\n1. RRBR and its 4 permutation\n2. RRBG and its 12 permutation\n3. RRBB and its 6 permutation\nHence answer is 22.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>possibleStrings()&nbsp;</strong>which takes n, r, g, b&nbsp;as input parameter and returns the count&nbsp;of&nbsp;number of all possible&nbsp;strings.</span><span style=\"font-size:18px\">.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br />\n<strong>Expected Auxiliary Space:</strong> O(n)<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;= n&nbsp;&lt;=20<br />\n1&lt;= r+b+g&nbsp;&lt;=n</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n`, find the number of possible strings of length `n` where each character is either 'R', 'B', or 'G'. The string must contain at least `r` 'R's, at least `b` 'B's, and at least `g` 'G's, such that `r + b + g <= n`.",
                "constraints": [
                    "1 <= n <= 20",
                    "1 <= r + b + g <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 4, r = 1, g = 1, b = 1",
                        "output": "36",
                        "explanation": "We need at least one 'R', one 'B', and one 'G'. Possible cases and their permutations are:\n1. RBGR (12 permutations)\n2. RBGB (12 permutations)\n3. RBGG (12 permutations)\nTotal: 12 + 12 + 12 = 36"
                    },
                    {
                        "input": "n = 4, r = 2, g = 0, b = 1",
                        "output": "22",
                        "explanation": "We need at least two 'R's, at least one 'B', and any number of 'G's (including zero). Possible cases and their permutations are:\n1. RRBR (4 permutations)\n2. RRBG (12 permutations)\n3. RRBB (6 permutations)\nTotal: 4 + 12 + 6 = 22"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Make all combinations for the remaining values and consider each element one by one for the remaining values and sum up all the permuations.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "directi"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    long long possibleStrings(int n, int r, int b, int g) {\n        // Store factorial of numbers up to n\n        // for further computation\n        long long fact[n + 1];\n        fact[0] = 1;\n        for (long long i = 1; i <= n; i++) fact[i] = fact[i - 1] * i;\n\n        // Find the remaining values to be added\n        long long left = n - (r + g + b);\n        long long sum = 0;\n\n        // Make all possible combinations\n        // of R, B and G for the remaining value\n        for (long long i = 0; i <= left; i++) {\n            for (long long j = 0; j <= left - i; j++) {\n                long long k = left - (i + j);\n\n                // Compute permutation of each combination\n                // one by one and add them.\n                sum = sum + fact[n] / (fact[i + r] * fact[j + b] * fact[k + g]);\n            }\n        }\n\n        // Return total no. of strings/permutation\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public long possibleStrings(int n, int r, int b, int g)\n    {\n        long[] fact = new long[n + 1];\n        fact[0] = 1;\n        for (long i = 1; i <= n; i++) fact[i] = fact[i - 1] * i;\n\n        long left = n - (r + g + b);\n        long sum = 0;\n\n        for (long i = 0; i <= left; i++)\n        {\n            for (long j = 0; j <= left - i; j++)\n            {\n                long k = left - (i + j);\n\n                sum = sum + fact[n] / (fact[i + r] * fact[j + b] * fact[k + g]);\n            }\n        }\n\n        return sum;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}