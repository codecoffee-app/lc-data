{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704554,
            "title": "Geek and its Game of Coins",
            "titleSlug": "geek-and-its-game-of-coins4043",
            "content": "<p style=\"text-align: justify;\"><span style=\"font-size: 18px;\">Given three numbers <strong>n</strong>, <strong>x</strong>, and <strong>y</strong>, Geek and his friend are playing a coin game. In the beginning, there are <strong>n</strong> coins. In each move, a player can pick <strong>x</strong>, <strong>y</strong>, or <strong>1</strong> coin. Geek always starts the game. The player who picks the last coin wins the game. The task is to determine whether Geek will win the game or not if both players play optimally.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: <br />n = 5<br />x = 3<br />y = 4\n<strong>Output:</strong> <br />1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation</strong>:<br />There are 5 coins, every player can pick 1 or 3 or 4 coins on his/her turn. Geek can win by picking 3 coins in first chance. Now 2 coins will be left so his friend will pick one coin and now Geek can win by picking the last coin.</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:<br />n = 2<br />x = 3<br />y = 4\n<strong>Output:<br /></strong>0</span>\n<span style=\"font-size: 18px;\"><strong>Explanation</strong>: <br />Geek picks 1 coin and then his friend picks 1 coin.</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>findWinner</code>()&nbsp;</strong>which takes <strong>n</strong><strong>, x, </strong>and<strong> y </strong>as input parameters and returns 1 if Geek can win otherwise 0.<br /><br /><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; <strong>n, x, y</strong>&nbsp;&le; 10<sup>5</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek and his friend are playing a coin game. Initially, there are 'n' coins. Each player can pick 'x', 'y', or 1 coin in their turn. Geek starts first. The player who picks the last coin wins. Determine if Geek will win if both players play optimally.",
                "constraints": [
                    "1 <= n, x, y <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 5\nx = 3\ny = 4",
                        "output": "1",
                        "explanation": "Geek can pick 3 coins on their first turn, leaving 2 coins.  The friend must pick 1 coin, leaving Geek with 1 coin to win the game."
                    },
                    {
                        "input": "n = 2\nx = 3\ny = 4",
                        "output": "0",
                        "explanation": "Geek picks 1 coin, leaving 1 coin. The friend picks the last coin and wins."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>A wins the game for n coins only when it loses for coins n-1, n-x, and n-y.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the winner.\n    int findWinner(int n, int x, int y) {\n        // Initializing the dynamic programming array.\n        int dp[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n\n        // Filling the dynamic programming array.\n        for (int i = 2; i <= n; i++) {\n            if (i - 1 >= 0 and !dp[i - 1])\n                dp[i] = 1;\n            else if (i - x >= 0 and !dp[i - x])\n                dp[i] = 1;\n            else if (i - y >= 0 and !dp[i - y])\n                dp[i] = 1;\n            else\n                dp[i] = 0;\n        }\n        // Returning the winner.\n        return dp[n];\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int findWinner(int n, int x, int y) {\n        // Initializing the dynamic programming array.\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n\n        // Filling the dynamic programming array.\n        for (int i = 2; i <= n; i++) {\n            if (i - 1 >= 0 && dp[i - 1] == 0) {\n                dp[i] = 1;\n            } else if (i - x >= 0 && dp[i - x] == 0) {\n                dp[i] = 1;\n            } else if (i - y >= 0 && dp[i - y] == 0) {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        // Returning the winner.\n        return dp[n];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findWinner(self, n: int, x: int, y: int) -> int:\n        # Initializing the dynamic programming array.\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        dp[1] = 1\n\n        # Filling the dynamic programming array.\n        for i in range(2, n + 1):\n            if i - 1 >= 0 and not dp[i - 1]:\n                dp[i] = 1\n            elif i - x >= 0 and not dp[i - x]:\n                dp[i] = 1\n            elif i - y >= 0 and not dp[i - y]:\n                dp[i] = 1\n            else:\n                dp[i] = 0\n\n        # Returning the winner.\n        return dp[n]\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}