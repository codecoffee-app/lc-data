{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705825,
            "title": "Geek and Number String",
            "titleSlug": "geek-and-number-string--141631",
            "content": "<p><span style=\"font-size: 18px;\">Geek has a string&nbsp;<strong>S </strong>of size&nbsp;<strong>N </strong>consisting&nbsp;of characters from&nbsp;<strong>'0'</strong>to '<strong>9'.</strong>&nbsp;He wants to minimise&nbsp;the length of the string. In each minimising operation, geek can remove&nbsp;any two consecutive characters if they are of the form&nbsp;<strong>{\"12\", \"21\", \"34\", \"43\", \"56\", \"65\", \"78\", \"87\", \"09\", \"90\"}</strong>.<br />Find the minimum possible length of the string after applying minimising operations.&nbsp;</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong>N = 5 \nS = \"12213\"\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>Geek can get the string of \nlength 1 in two minimising operation,\nIn 1st operation Geek will remove \"12\" \nfrom \"<strong>12</strong>213\" then Geek left with \"213\"\nIn 2nd operation Geek will remove \"21\" \nfrom \"<strong>21</strong>3\" then Geek left with \"3\"</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong>N = 4\nS = \"1350\"\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>Can't remove any character.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task: &nbsp;</strong><br />You don't need to read input or print anything. Complete the function<strong>minLength()&nbsp;</strong>which takes N and S as input parameters&nbsp;and returns the the minimum possible length of the string.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N)<br /><strong>Expected Auxiliary Space:</strong>O(N)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` of length `N` consisting of digits from '0' to '9', the goal is to minimize the string's length. You can remove any two consecutive characters if they form one of the following pairs: {\"12\", \"21\", \"34\", \"43\", \"56\", \"65\", \"78\", \"87\", \"09\", \"90\"}. Determine the minimum possible length of the string after applying these minimizing operations.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 5\nS = \"12213\"",
                        "output": "1",
                        "explanation": "The string can be reduced to length 1. First, \"12\" is removed from \"12213\", resulting in \"213\". Then, \"21\" is removed from \"213\", leaving only \"3\"."
                    },
                    {
                        "input": "N = 4\nS = \"1350\"",
                        "output": "4",
                        "explanation": "No characters can be removed as there are no adjacent pairs that match the removal criteria."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Use stacks to store elements</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n\n    public:\n    int minLength(string s, int n) \n    { \n      \n        // Stack to store the characters \n        // of the given string \n        stack<char> st; \n\n        vector<string> list = {\"12\", \"21\", \"34\", \"43\", \"56\", \"65\", \"78\", \"87\", \"09\", \"90\"};\n      \n        // For every character of the string \n        for (int i = 0; i < n; i++) { \n      \n            // If the stack is empty then push the \n            // current character in the stack \n            if (st.empty()) { \n                st.push(s[i]); \n            } \n            else { \n                \n                string temp = \"\";\n\n                temp += st.top();\n                temp += s[i];\n\n                int flag = 0;\n\n                for(int j = 0; j < (int)list.size(); j++)\n                    if(list[j] == temp)\n                        flag = 1;\n\n                // If removable\n                if(flag == 1){\n                    st.pop();\n                }\n                // Else push the current element \n                else { \n                    st.push(s[i]); \n                } \n            } \n        }\n        return (int)(st.size());\n    } \n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution \n{ \n    public int minLength(String s, int n) \n    { \n    \tStack<Character> st = new Stack<>(); \n\t\tArrayList<String> list = new ArrayList<String>( \n            Arrays.asList(\"12\", \"21\", \"34\", \"43\", \"56\", \"65\", \"78\", \"87\", \"09\", \"90\")\n\t\t); \n      \n        // For every character of the string \n        for (int i = 0; i < n; i++) { \n      \n            // If the stack is empty then push the \n            // current character in the stack \n            if (st.empty()) { \n                st.push(s.charAt(i)); \n            } \n            else { \n                \n                String temp = \"\";\n\n                temp += st.peek();\n                temp += s.charAt(i);\n\n                int flag = 0;\n                for(int j = 0; j < list.size(); j++)\n                    if(list.get(j).equals(temp))\n                        flag = 1;\n\n                // If removable\n                if(flag == 1){\n                    st.pop();\n                }\n                // Else push the current element \n                else { \n                    st.push(s.charAt(i)); \n                } \n            } \n\t\t}\n        return st.size();\n    } \n} ",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to find the minimum length of the string after removing substrings.\n    def minLength(self, s, n): \n        st = [] #initialize an empty stack\n        list1 = [\"12\", \"21\", \"34\", \"43\", \"56\", \"65\", \"78\", \"87\", \"09\", \"90\"] #list of substrings to be removed\n\n        for i in range(n): \n            if len(st) == 0: #if the stack is empty, add the current character to the stack\n                st.append(s[i])\n            else:\n                temp = \"\"\n                temp += st[-1] #append the top element of the stack to the temporary string\n                temp += s[i] #append the current character to the temporary string\n\n                flag = 0\n\n                #check if the temporary string is equal to any of the substrings in list1\n                for j in range(len(list1)):\n                    if list1[j] == temp:\n                        flag = 1 #set flag to 1 if a match is found\n\n                if flag == 1:\n                    st.pop() #if a match is found, remove the top element from the stack\n                else:\n                    st.append(s[i]) #if no match is found, add the current character to the stack\n        return len(st) #return the length of the final string after removing substrings.",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int minLength(string s, int n)\n    {\n        // Stack to store the characters \n        // of the given string \n        Stack<char> st = new Stack<char>();\n\n        List<string> list = new List<string>(){\n            \"12\", \"21\", \"34\", \"43\", \"56\", \"65\", \"78\", \"87\", \"09\", \"90\"};\n\n        // For every character of the string \n        for (int i = 0; i < n; i++) \n        {\n            // If the stack is empty then push the \n            // current character in the stack \n            if (st.Count == 0) \n            { \n                st.Push(s[i]); \n            } \n            else \n            { \n                \n                string temp = \"\";\n\n                temp += st.Peek();\n                temp += s[i];\n\n                int flag = 0;\n\n                for(int j = 0; j < list.Count; j++)\n                    if(list[j] == temp)\n                        flag = 1;\n\n                // If removable\n                if(flag == 1)\n                {\n                    st.Pop();\n                }\n                // Else push the current element \n                else \n                { \n                    st.Push(s[i]); \n                } \n            } \n        }\n        return st.Count;\n    } \n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {string} str\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution{\n    minLength(s,n){\n        // Stack to store the characters \n        // of the given string \n        let st = []; \n\n        let list = [\"12\", \"21\", \"34\", \"43\", \"56\", \"65\", \"78\", \"87\", \"09\", \"90\"];\n      \n        // For every character of the string \n        for (let i = 0; i < n; i++) { \n            // If the stack is empty then push the \n            // current character in the stack \n            if (st.length === 0) { \n                st.push(s[i]); \n            } \n            else { \n                let temp = st[st.length - 1] + s[i];\n\n                let flag = 0;\n\n                for(let j = 0; j < list.length; j++)\n                    if(list[j] === temp)\n                        flag = 1;\n\n                // If removable\n                if(flag === 1){\n                    st.pop();\n                }\n                // Else push the current element \n                else { \n                    st.push(s[i]); \n                } \n            } \n        }\n        return st.length;\n    } \n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}