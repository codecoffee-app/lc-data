{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705485,
            "title": "Geek and Strings",
            "titleSlug": "geek-and-strings3030",
            "content": "<p><span style=\"font-size:18px\">Geek has a list Li containing (not necessarily distinct) N words and Q queries. Each query consists of a string x. For each query, find how many strings in the List Li has the string x as its prefix.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 5, Q = 5\r\nli[] = {&#39;abracadabra&#39;, &#39;geeksforgeeks&#39;, \r\n\\t&#39;abracadabra&#39;, &#39;geeks&#39;, &#39;geeksthrill&#39;}\r\nquery[] = {&#39;abr&#39;, &#39;geeks&#39;, &#39;geeksforgeeks&#39;, \r\n&nbsp;\\t  &#39;ge&#39;, &#39;gar&#39;}</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 2 3 1 3 0</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Explaination: </strong>\r\n<strong>Query 1: </strong>The string &#39;abr&#39; is prefix of \r\ntwo &#39;abracadabra&#39;. \r\n<strong>Query 2: </strong>The string &#39;geeks&#39; is prefix of three \r\nstrings &#39;geeksforgeeks&#39;, &#39;geeks&#39; and &#39;geeksthrill&#39;. \r\n<strong>Query 3: </strong>The string &#39;geeksforgeeks&#39; is prefix \r\nof itself present in li. \r\n<strong>Query 4: </strong>The string &#39;ge&#39; also is prefix of three \r\nstrings &#39;geeksforgeeeks&#39;, &#39;geeks&#39;, &#39;geeksthrill&#39;. \r\n<strong>Query 5: </strong>The string &#39;gar&#39; is not a prefix of any \r\nstring in li.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>prefixCount() </strong>which takes N, Q, li[] and query[] as input parameters and returns a list containing the count of prefixes for each query.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(Q*x) + O(N*L) Where Q is the number of queries, x is the longest word in the query, N = number of words inserted in Trie and L = length of longest word inserted in Trie.<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N*List [i])</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 3 x 10<sup>4</sup><br />\r\n1 &le; Q &le; 10<sup>4</sup><br />\r\n1 &le; |li[i]|, |x| &le; 100 &nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list `Li` of `N` words (not necessarily distinct) and `Q` queries. Each query consists of a string `x`. For each query, determine how many strings in the list `Li` have the string `x` as a prefix.",
                "constraints": [
                    "1 <= N <= 3 * 10^4",
                    "1 <= Q <= 10^4",
                    "1 <= |li[i]|, |x| <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 5, Q = 5\nli[] = ['abracadabra', 'geeksforgeeks', 'abracadabra', 'geeks', 'geeksthrill']\nquery[] = ['abr', 'geeks', 'geeksforgeeks', 'ge', 'gar']",
                        "output": "2 3 1 3 0",
                        "explanation": "Query 1: The string 'abr' is a prefix of two 'abracadabra'.\nQuery 2: The string 'geeks' is a prefix of three strings: 'geeksforgeeks', 'geeks', and 'geeksthrill'.\nQuery 3: The string 'geeksforgeeks' is a prefix of itself, which is present in `li`.\nQuery 4: The string 'ge' is a prefix of three strings: 'geeksforgeeks', 'geeks', and 'geeksthrill'.\nQuery 5: The string 'gar' is not a prefix of any string in `li`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use such a data structure which can match the string to find out if it is prefix of another string.</span></p>",
            "<p><span style=\"font-size:18px\">Trie can help you in this problem.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    int x; // variable to store the size of array\n\n    // Trie node structure\n    struct trie{\n        int cnt; // counter for total occurrences of a word\n        trie* ch[26]; // array of child nodes\n        trie(){\n            cnt = 0;\n            for(int i = 0;i < 26;i++)\n            ch[i] = NULL;\n        }\n    };\n\n    // function to build the trie\n    void build(string a[], trie *root){\n        trie *temp;\n        for(int i = 0;i < x;i++){\n            temp = root;\n            for(int j = 0;j < a[i].size();j++){\n                if(temp->ch[a[i][j]-'a'] == NULL)\n                    temp->ch[a[i][j]-'a'] = new trie();\n                temp->ch[a[i][j]-'a']->cnt += 1;\n                temp = temp->ch[a[i][j]-'a'];\n            }\n        }\n    }\n\n    // function to find the count of a prefix in the trie\n    int find(string s, trie *root){\n        for(int i = 0;i < s.size();i++){\n            if(root->ch[s[i]-'a'] == NULL)\n            return 0;\n            root = root->ch[s[i]-'a'];\n        }\n        return root->cnt;\n    }\n\n    // main function to return the count of prefixes\n    vector<int> prefixCount(int N, int Q, string li[], string query[])\n    {\n        vector<int> res;\n        x = N;\n        trie *root = new trie();\n        build(li, root);\n        for(int i = 0;i < Q;i++)\n            res.push_back(find(query[i], root));\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    static List<Integer> prefixCount(int N, int Q, String li[], String query[])\r\n    {\r\n        //Creating an empty list to store the result\r\n        List<Integer> res=new ArrayList<>();\r\n        \r\n        //Setting x value to N\r\n        x = N;\r\n        \r\n        //Creating a root trie node\r\n        trie root = new trie();\r\n        \r\n        //Building the trie using given array\r\n        build(li, root);\r\n        \r\n        //Iterating over the query array and finding the count using the trie\r\n        for(int i = 0;i < Q;i++)\r\n            res.add(find(query[i], root));\r\n        \r\n        //Returning the result\r\n        return res;\r\n    }\r\n    \r\n    //Variable to store the size of the array\r\n    static int x;\r\n    \r\n    //Trie node class\r\n    static class trie{\r\n        int cnt; //to store the count of words\r\n        trie ch[]; //to store the child nodes\r\n        \r\n        //Constructor to initialize the trie node\r\n        trie(){\r\n            ch=new trie[26];\r\n            cnt = 0;\r\n            for(int i = 0;i < 26;i++)\r\n                ch[i] = null;\r\n        }\r\n    }\r\n    \r\n    //Function to build the trie\r\n    static void build(String a[], trie root){\r\n        trie temp=null;\r\n        for(int i = 0;i < x;i++){\r\n            temp = root;\r\n            for(int j = 0;j < a[i].length();j++){\r\n                //If the child node doesn't exist, create a new node\r\n                if(temp.ch[a[i].charAt(j)-'a'] == null)\r\n                    temp.ch[a[i].charAt(j)-'a'] = new trie();\r\n                \r\n                //Increment the count of the child node\r\n                temp.ch[a[i].charAt(j)-'a'].cnt += 1;\r\n                \r\n                //Move to the next child node\r\n                temp = temp.ch[a[i].charAt(j)-'a'];\r\n            }\r\n        }\r\n    }\r\n    \r\n    //Function to find the count of a given prefix in the trie\r\n    static int find(String s, trie root){\r\n        for(int i = 0;i < s.length();i++){\r\n            //If the child node doesn't exist, return 0\r\n            if(root.ch[s.charAt(i)-'a'] == null)\r\n                return 0;\r\n            \r\n            //Move to the next child node\r\n            root = root.ch[s.charAt(i)-'a'];\r\n        }\r\n        //Return the count of the last child node\r\n        return root.cnt;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\nclass trie:\n    def __init__(self):\n        #initialize the children array with None values for each letter of the alphabet\n        self.children = [None]*26\n\n        #initialize the count of words as 0\n        self.cnt=0\n\ndef build(a, root):\n    #iterate over each word in the input list\n    for i in range(len(a)):\n        temp = root\n\n        #iterate over each letter in the current word\n        for j in range(len(a[i])):\n\n            #check if the current letter's child node is None\n            if temp.children[ord(a[i][j])-ord(\"a\")] is None:\n\n                #if it is None, create a new node and assign it as the child\n                temp.children[ord(a[i][j])-ord(\"a\")] = trie()\n\n            #increment the count of words in the subtree rooted at the current letter's node\n            temp.children[ord(a[i][j])-ord(\"a\")].cnt += 1\n\n            #update the current node to be the child of the current letter\n            temp = temp.children[ord(a[i][j])-ord(\"a\")]\n\ndef find(s, root):\n    #iterate over each letter in the prefix\n    for i in range(len(s)):\n        #check if the current letter's child node is None\n        if root.children[ord(s[i])-ord(\"a\")] == None:\n            return 0\n\n        #update the current node to be the child of the current letter\n        root = root.children[ord(s[i])-ord(\"a\")]\n\n    #return the count of words in the subtree rooted at the final letter\n    return root.cnt\n\nclass Solution:\n    def prefixCount(self, N, Q, li, query):\n        res=[]\n        root=trie()\n\n        #build the trie using the input list\n        build(li, root)\n\n        #iterate over each query and find the count of words with the given prefix\n        for i in range(Q):\n            res.append(find(query[i], root))\n\n        #return the list of counts\n        return res",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}