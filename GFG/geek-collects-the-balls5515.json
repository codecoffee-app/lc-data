{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705421,
            "title": "Geek collects the balls",
            "titleSlug": "geek-collects-the-balls5515",
            "content": "<p><span style=\"font-size: 18px;\">There are two parallel roads, each containing <strong>n</strong> and <strong>m</strong> buckets, respectively. Each bucket may contain some balls. The balls in the first road are given in an array <strong>a of size n</strong>&nbsp;and balls in the second road in an array <strong>b&nbsp;</strong></span><strong style=\"font-size: 18px;\">of size m</strong><span style=\"font-size: 18px;\">. The buckets on both roads are kept in such a way that they are </span><strong style=\"font-size: 18px;\">sorted according</strong><span style=\"font-size: 18px;\"> to the number of balls in them. Geek starts from the </span><strong style=\"font-size: 18px;\">left side</strong><span style=\"font-size: 18px;\"> of the road. Geek&nbsp;can change the road only at a </span><strong style=\"font-size: 18px;\">point of intersection</strong><span style=\"font-size: 18px;\"> i.e.&nbsp;a point where&nbsp;buckets have&nbsp;the</span><strong style=\"font-size: 18px;\"> same number of balls</strong><span style=\"font-size: 18px;\"> on&nbsp;two roads. Help Geek&nbsp;collect the </span><strong style=\"font-size: 18px;\">maximum number of balls.</strong></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \nn = 5, m = 5\na[] = {1, 4, 5, 6, 8}\nb[] = {2, 3, 4, 6, 9}\n<strong>Output:</strong> 29\n<strong>Explanation:</strong> The optimal way to get the \nmaximum number of balls is to start from \nroad 2. Get 2+3. Then switch at intersection \npoint 4. Get 4+5+6. Then switch at intersection\npoint 6. Get 9. Total = 2+3+4+5+6+9 = 29.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 3, m = 3\na[] = {1, 2, 3}\nb[] = {4, 5, 6}\n<strong>Output:&nbsp;</strong>15</span>\n</pre>\n<p>&nbsp;</p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>maxBalls()</strong> which takes n, m, a[] and b[] as input parameters and returns the maximum number of balls that can be collected.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*m)<br /><strong>Expected Auxiliary Space:</strong> O(n*m)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n, m &le; 10<sup>3</sup><br />1 &le; a[i], b[i] &le; 10<sup>9</sup>&nbsp;&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given two parallel roads represented by sorted arrays `a` of size `n` and `b` of size `m`, respectively. Each element in the arrays represents the number of balls in a bucket. You start from the leftmost bucket of either road. You can switch from one road to another only at intersection points, which are buckets with the same number of balls in both roads. The goal is to find the maximum number of balls you can collect by strategically switching between the roads.",
                "constraints": [
                    "1 <= n, m <= 10^3",
                    "1 <= a[i], b[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 5, m = 5\na[] = {1, 4, 5, 6, 8}\nb[] = {2, 3, 4, 6, 9}",
                        "output": "29",
                        "explanation": "The optimal path is to start from road b, collecting 2 + 3. Then switch to road a at the intersection point 4, collecting 4 + 5 + 6. Finally, switch back to road b at the intersection point 6, collecting 9. The total number of balls collected is 2 + 3 + 4 + 5 + 6 + 9 = 29."
                    },
                    {
                        "input": "n = 3, m = 3\na[] = {1, 2, 3}\nb[] = {4, 5, 6}",
                        "output": "15",
                        "explanation": "In this case there are no common intersection points so we have to choose one of the roads only, road 2 gives us 4+5+6 which is 15 and road 1 gives 1+2+3 which is 6, so max is 15"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14px;\">Choose what is maximum until ith position and add that to the answer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the maximum number of balls that can be collected.\n    int maxBalls(int n, int m, vector<int> a, vector<int> b) {\n        int asum = 0, bsum = 0, ans = 0;\n        int i = 0, j = 0;\n        // Iterating through the arrays a and b to compare elements.\n        while (i < n && j < m) {\n            // Calculating sum of consecutive same elements in array a.\n            while (i + 1 < n && a[i] == a[i + 1])\n                asum += a[i++];\n            // Calculating sum of consecutive same elements in array b.\n            while (j + 1 < m && b[j] == b[j + 1])\n                bsum += b[j++];\n\n            // If the elements at current indices of a and b are equal.\n            if (a[i] == b[j]) {\n                ans += max(asum, bsum) + a[i];\n                asum = bsum = 0;\n                i++, j++;\n            }\n            // If element in a is less than element in b.\n            else if (a[i] < b[j]) {\n                asum += a[i++];\n            }\n            // If element in b is less than element in a.\n            else {\n                bsum += b[j++];\n            }\n        }\n\n        // Adding remaining elements in array a to asum.\n        while (i < n)\n            asum += a[i++];\n        // Adding remaining elements in array b to bsum.\n        while (j < m)\n            bsum += b[j++];\n\n        // Adding the maximum sum of elements from both arrays to the answer.\n        ans += max(asum, bsum);\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}