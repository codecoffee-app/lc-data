{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710145,
            "title": "Geek fight",
            "titleSlug": "geek-fight",
            "content": "<p><span style=\"font-size:18px\"><strong>Geek</strong>&nbsp;is playing a video game that contains&nbsp;<strong>N</strong>&nbsp;monsters having varying power denoted by&nbsp;<strong>power[i]</strong>.&nbsp;<strong>Geek</strong>&nbsp;will play total&nbsp;<strong>Q</strong>&nbsp;rounds and for each round, the power of&nbsp;<strong>Geek</strong>&nbsp;is <strong>Q[i]</strong>. He can kill all monsters having power <strong>&lt;=</strong>&nbsp;<strong>Q[i]</strong>.<br />\r\nAll the monsters which were dead in the previous round will be reborn, such that for each round there will be <strong>N</strong>&nbsp;monsters.<br />\r\nSince&nbsp;<strong>Geek&nbsp;</strong>wants to win each round, he wants to count the number of monsters he can kill in each round and total sum of their powers. Can you help him?</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 7\r\npowers[] = {1, 2, 3, 4, 5, 6, 7}\r\nQ[] = {3, 10, 2}\r\n<strong>Output: \r\n</strong>{{3, 6}, {7, 28}, {2, 3}}\r\n<strong>Explanation:</strong>\r\n1. For round 1, Geek has power 3, hence, it can kill\r\nthe monsters with power 1, 2 and 3. Hence, count is 3 and\r\ntotal sum = 1 + 2 + 3 = 6.\r\n2. For round 2, Geek has power 10, hence, it can kill\r\nall the monsters. Hence, count is 7 and\r\ntotal sum = 1 + 2 + ...+ 7 = 28.\r\n3. For round 3, Geek has power 2, hence, it can kill\r\nthe first two monsters. Hence, count is 2 and\r\ntotal sum = 1 + 2 = 3.\r\n\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>win()</strong>&nbsp;which takes an array of size N and another array of size Q and return list of pairs as output.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*logN)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N&nbsp;&lt;= 10<sup>4</sup><br />\r\n1 &lt;= power[i]&nbsp;&lt;= 10<sup>2</sup><br />\r\n1&lt;= Q &lt;=10<sup>4</sup><br />\r\n1 &lt;= Q[i[&nbsp;&lt;= 10<sup>2</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Sort the power array.</span></p>",
            "<p><span style=\"font-size:18px\">Apply binary search over power array to find the upper bound of Chef&#39;s power.</span></p>",
            "<p><span style=\"font-size:18px\">Use a prefix array to keep track of the cumulative sum obtained till i<sup>th</sup>&nbsp;index.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n  public:\n  //Function to find the winners.\n  vector<pair<int, int>>win(vector<int>&power, int n, vector<int>&Q, int q){\n      //Sorting the power array in ascending order.\n      sort(begin(power), end(power));\n      \n      //Creating a prefix sum array of power.\n      vector<int>ps = power;\n      for (int i = 1; i < n; ++i){\n\t\t      ps[i] += ps[i - 1];\n\t    }\n\t    \n\t    //Creating a vector to store the results.\n\t    vector<pair<int,int>>ans;\n\t    \n\t    //Iterating over the queries.\n\t    for(int i = 0 ; i < q; i++){\n\t\t    //Finding the index of the first power greater than the current query.\n\t\t    int id = upper_bound(begin(power), end(power), Q[i]) - power.begin();\n\t\t    //Storing the index and the corresponding cumulative power in the result vector.\n\t\t    ans.push_back({id, ps[id - 1]});\n\t    }\n\t    //Returning the result vector.\n\t    return ans;\n  }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}