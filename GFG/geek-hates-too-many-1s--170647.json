{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714144,
            "title": "Geek hates too many 1s",
            "titleSlug": "geek-hates-too-many-1s--170647",
            "content": "<p><span style=\"font-size:18px\">Given an<strong>&nbsp;non-negative</strong> integer <strong>n</strong>. You are only allowed to make set bit unset. You have to find&nbsp;the maximum possible value of query so that after performing the given operations, no <strong>three</strong>&nbsp;consecutive bits of the integer query are <strong>set-bits</strong>.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nn = 2\r\n<strong>Output:</strong>&nbsp;\r\n2\r\n<strong>Explanation</strong>: \r\n2&#39;s binary form is 10, no 3 consecutive set bits are here. \r\nSo, 2 itself would be answer.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 7\r\n<strong>Output:&nbsp;\r\n</strong>6\r\n<strong>Explanation</strong>: \r\n7&#39;s binary form is .....00111.We can observe that 3\r\nconsecutive bits are set bits. This is not allowed.\r\nSo, we can perfrom the operation of changing set \r\nbit to unset bit. Now, the number \r\nbecomes 6 that is .....00110. It satifies the \r\ngiven condition. Hence, the maximum possible \r\nvalue is 6.</span>\r\n\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong> You don&#39;t need to read&nbsp;input&nbsp;or print anything. Your task is to complete the function&nbsp;<strong>noConseBits(),</strong>&nbsp;which takes integer n as input parameter&nbsp;and returns the maximum value possible so that it satifies the given condition.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n0 &le; n &le; 10<sup>9</sup></span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer `n`, find the maximum possible value that can be obtained by only making set bits unset, such that no three consecutive bits in the resulting integer's binary representation are set.",
                "constraints": [
                    "0 \u2264 n \u2264 10^9"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "2",
                        "explanation": "The binary representation of 2 is 10. There are no three consecutive set bits. Therefore, the answer is 2."
                    },
                    {
                        "input": "7",
                        "output": "6",
                        "explanation": "The binary representation of 7 is 111.  Since we cannot have three consecutive set bits, we change the last set bit to unset, resulting in 110, which is equal to 6. This satisfies the constraint."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to change the rightmost set bit only if required.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n\n  public:\n    // Function to find the number with no consecutive set bits\n    int noConseBits(int n) {\n        int set[35]; // array to store binary representation of the number\n\n        for (int j = 0; j < 35; j++) set[j] = 0; // initializing the array with 0\n\n        // calculating binary representation of the number\n        for (int j = 30; j >= 0; j--) {\n            if ((1 << j) & n) { // checking if the j-th bit is set\n                set[j] = 1; // setting the corresponding element in the array\n            }\n        }\n\n        int fin_ans = 0; // variable to store the final result\n\n        // finding the number with no consecutive set bits\n        for (int j = 30; j >= 2; j--) {\n            if (set[j] == 1) {\n                fin_ans |= (1 << j); // setting the j-th bit in the result\n                if (set[j - 1] == 1) {\n                    set[j - 2] = 0; // resetting the j-2-th bit if j-1-th bit is set\n                }\n            }\n        }\n        \n        // setting the last two bits based on the array elements\n        if (set[1] == 1) fin_ans |= 2;\n        if (set[0] == 1) fin_ans |= 1;\n\n        return fin_ans; // returning the final result\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n\r\n    public static int noConseBits(int n) {\r\n        // code here\r\n        int set[]=new int[35];\r\n\r\n        for (int j = 0; j < 35; j++) set[j] = 0;\r\n\r\n        for (int j = 30; j >= 0; j--) {\r\n            if (((1 << j) & n)!=0) {\r\n                set[j] = 1;\r\n            }\r\n        }\r\n        int fin_ans = 0;\r\n        for (int j = 30; j >= 2; j--) {\r\n            if (set[j] == 1) {\r\n                fin_ans |= (1 << j);\r\n                if (set[j - 1] == 1) {\r\n                    set[j - 2] = 0;\r\n                }\r\n            }\r\n        }\r\n        if (set[1] == 1) fin_ans |= 2;\r\n        if (set[0] == 1) fin_ans |= 1;\r\n\r\n        return fin_ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def noConseBits(self, n : int) -> int:\r\n        set=[0]*(35)#to keep the track of which bits we have \r\n        for j in range(30,-1,-1):\r\n            if n&(1<<j):#if bit set mark it as one \r\n                set[j]=1\r\n        fin_ans=0#final_answer\r\n        for j in range(30,1,-1):\r\n            if set[j]==1:#\r\n                fin_ans|=1<<j\r\n                if set[j-1]==1:# if a jth bit and (j-1)th bit set than make (j-2)th\r\n                #bit should be zero if it was one \r\n                    set[j-2]=0\r\n        if set[1]==1:#checking if 1th bit is set than include in answer 2(2^1)\r\n            fin_ans|=2\r\n        if set[0]==1:\r\n            fin_ans|=1#checking if 0th bit is set than include in answer 1(2^0)\r\n        return fin_ans\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to check whether the list is palindrome.\n    noConseBits(n) {\n        let set = new Array(35).fill(0);\n        for (let j = 30; j >= 0; j--) {\n            if (n & (1 << j)) {\n                set[j] = 1;\n            }\n        }\n        let fin_ans = 0;\n        for (let j = 30; j > 1; j--) {\n            if (set[j] === 1) {\n                fin_ans |= 1 << j;\n                if (set[j-1] === 1) {\n                    set[j-2] = 0;\n                }\n            }\n        }\n        if (set[1] === 1) {\n            fin_ans |= 2;\n        }\n        if (set[0] === 1) {\n            fin_ans |= 1;\n        }\n        return fin_ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}