{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705824,
            "title": "Geek in a Maze",
            "titleSlug": "geek-in-a-maze--141631",
            "content": "<p><span style=\"font-size:18px\">Geek is in a maze of size N * M (N rows, M columns). Each cell in the maze is made of either &#39;.&#39; or &#39;#&#39;. An empty cell is represented by &#39;.&#39; and an obstacle is represented by &#39;#&#39;. If Geek starts at cell (R, C), find how many different empty cells&nbsp;he can pass through while avoiding the obstacles. He can move in any of the four directions but he can move up at most U times and he can move down atmost D times.</span><br />\n&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> \nN = 3, M = 3\nR = 1, C = 0\nU = 1, D = 1\nmat = {{&#39;.&#39;, &#39;.&#39;, &#39;.&#39;},\n\\t {&#39;.&#39;, &#39;#&#39;, &#39;.&#39;},\n\\t {&#39;#&#39;, &#39;.&#39;, &#39;.&#39;}}\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Geek can reach \n(1, 0), (0, 0), (0, 1), (0, 2), (1, 2) \n\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> \nN = 4, M = 3\nR = 1, C = 0\nU = 1, D = 2 \nmat = {{&#39;.&#39;, &#39;.&#39;, &#39;.&#39;}, \n\\t {&#39;.&#39;, &#39;#&#39;, &#39;.&#39;}, \n\\t {&#39;.&#39;, &#39;.&#39;, &#39;.&#39;},\n\\t {&#39;#&#39;, &#39;.&#39;, &#39;.&#39;}} \n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Geek can reach all the \ncells except for the obstacles.\n</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>numberOfCells()&nbsp;</strong>which takes&nbsp;<strong>N, M, R, C, U, D</strong> and the&nbsp;two dimensional character array&nbsp;<strong>mat[][]</strong> as input parameters and returns the number of cells geek can visit. </span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N*M &le; 10<sup>6</sup><br />\nmat[i][j] = &#39;#&quot; or &#39;.&#39;<br />\n0 &le; R &le; N-1<br />\n0 &le; C &le; M-1<br />\nmat[R][C] = &#39;.&#39;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use BFS algorithm&nbsp;to visit all empty cells.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Class Solution for finding the number of valid cells\n\nclass Solution{\n\n\t//Function to check if a cell with given row and column indices is valid or not\n\tprivate:\n\tbool isValid(int row,int col,int n, int m)\n    {\n    \tif(row>=0 && row<n && col>=0 && col<m)\n    \t\treturn true;\n \n    \treturn false;\n    }\n \n\n\tpublic:\n\t//Function to find the number of valid cells\n\tint numberOfCells(int n, int m, int r, int c, int u, int d, vector<vector<char>> &mat)\n\t{\n\t\t//If the starting cell is a blocked cell, return 0\n\t    if(mat[r][c] == '#')\n            return 0;\n\t\t\n\t    //Priority queue for implementing Dijkstra's algorithm\n\t\tpriority_queue <pair<pair <int, int>, pair <int, int>>, vector <pair <pair <int, int>, pair <int, int> >>, greater <pair <pair <int, int>, pair <int, int> >>> q;\n\n\t\t//Matrix to keep track of visited cells\n\t\tvector<vector<int>> vis(n, vector<int>(m, 0));\n\t\t\n\t\tq.push({{0,0},{r,c}});\n    \tvis[r][c] = 1;\t\n \n    \twhile(!q.empty())\n    \t{\n    \t\tint x, y, up, down; \n    \t\tup = q.top().first.first;\n    \t\tdown = q.top().first.second; \n \n    \t\tx = q.top().second.first; \n    \t\ty = q.top().second.second; \n \n    \t\tq.pop();\n \n    \t\t//Checking the adjacent cells and pushing them into the priority queue if they are valid and haven't been visited yet\n    \t\tif(isValid(x - 1, y, n, m))\n    \t\t{\n    \t\t\tif(up + 1 <= u && !vis[x - 1][y] && down <= d && mat[x - 1][y]=='.')\n    \t\t\t{\n    \t\t\t   q.push({{up + 1, down},{x - 1, y}});\t\n    \t\t\t   vis[x - 1][y] = 1;\t\n    \t\t\t}\n    \t\t}\n \n    \t\tif(isValid(x + 1, y, n, m))\n    \t\t{\n    \t\t\tif(down + 1 <= d && !vis[x + 1][y] && up <= u && mat[x + 1][y]=='.')\n    \t\t\t{\n    \t\t\t   q.push({{up, down + 1},{x + 1, y}});\t\n    \t\t\t   vis[x + 1][y] = 1;\t\n    \t\t\t}\n    \t\t}\n \n    \t\tif(isValid(x, y - 1, n, m))\n    \t\t{\n    \t\t\tif(down <= d && !vis[x][y - 1] && up <= u && mat[x][y - 1]=='.')\n    \t\t\t{\n    \t\t\t   q.push({{up, down},{x, y - 1}});\t\n    \t\t\t   vis[x][y - 1] = 1;\t\n    \t\t\t}\n    \t\t}\n \n    \t\tif(isValid(x, y + 1, n, m))\n    \t\t{\n    \t\t\tif(down <= d && !vis[x][y + 1] && up <= u && mat[x][y + 1]=='.')\n    \t\t\t{\n    \t\t\t   q.push({{up, down},{x,y + 1}});\n    \t\t\t   vis[x][y + 1] = 1;\t\n    \t\t\t}\n    \t\t}\n \n    \t}\n\n    \t//Counting the number of visited cells\n    \tint ans = 0;\n \n    \tfor(int i = 0; i < n; i++)\n    \t{\n    \t\tfor(int j = 0; j < m; j++)\n    \t\t{\n    \t\t\tif(vis[i][j] == 1)\n    \t\t\t{\n    \t\t\t\tans++;\n    \t\t\t}\n    \t\t}\n    \t\t\n    \t}\n \n    \t//Returning the number of valid cells\n    \treturn ans;\n\t}\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nimport heapq as hq\n\n\n#Function to check if given coordinate is valid or not.\ndef isValid(row, col, n, m):\n    if 0 <= row < n and 0 <= col < m:\n        return True\n\n\n#Function to find the number of cells accessible from given coordinates.\ndef numberOfCells(n, m, r, c, u, d, mat):\n\n    #If the starting cell is a block, return 0.\n    if mat[r][c] == '#':\n        return 0\n\n    #Using a priority queue to store cells based on their priority.\n    pque = []\n    #Creating a matrix to keep track of visited cells.\n    vis = [[0 for i in range(m)] for j in range(n)]\n\n    #Pushing the starting cell into the priority queue.\n    hq.heappush(pque, ((0, 0), (r, c)))\n    vis[r][c] = 1\n\n    #Iterating until the priority queue is empty.\n    while pque:\n        up, down = pque[0][0][0], pque[0][0][1]\n\n        x, y = pque[0][1][0], pque[0][1][1]\n\n        #Removing the cell with highest priority from the priority queue.\n        hq.heappop(pque)\n\n        #Checking all the adjacent cells and adding them to the priority queue if they meet the conditions.\n        if isValid(x - 1, y, n, m):\n            if up + 1 <= u and not vis[x - 1][y] and down <= d and mat[x - 1][y] == '.':\n                hq.heappush(pque, (((up + 1), down), (x - 1, y)))\n                vis[x - 1][y] = 1\n\n        if isValid(x + 1, y, n, m):\n\n            if down + 1 <= d and not vis[x + 1][y] and up <= u and mat[x + 1][y] == '.':\n                hq.heappush(pque, ((up, (down + 1)), (x + 1, y)))\n                vis[x + 1][y] = 1\n\n        if isValid(x, y - 1, n, m):\n            if down <= d and not vis[x][y - 1] and up <= u and mat[x][y - 1] == '.':\n                hq.heappush(pque, ((up, down), (x, y - 1)))\n                vis[x][y - 1] = 1\n\n        if isValid(x, y + 1, n, m):\n            if down <= d and not vis[x][y + 1] and up <= u and mat[x][y + 1] == '.':\n                hq.heappush(pque, ((up, down), (x, y + 1)))\n                vis[x][y + 1] = 1\n\n    #Counting the number of visited cells.\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if vis[i][j] == 1:\n                ans += 1\n\n    #Returning the total number of accessible cells.\n    return ans",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}