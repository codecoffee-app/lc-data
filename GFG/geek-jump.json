{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712174,
            "title": "Frog Jump",
            "titleSlug": "geek-jump",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer array <strong>height[]</strong> where <strong>height[i]</strong> represents the height of the <strong>i-th</strong> stair, a frog starts from the <strong>first stair</strong> and wants to reach the <strong>top</strong>. From any stair <strong>i</strong>, the frog has two options: it can either jump to the <strong>(i+1)th</strong> stair or the <strong>(i+2)th</strong> stair. The cost of a jump is the absolute difference in height between the two stairs. Determine the minimum total cost required for the frog to reach the top.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:<br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> heights[] = [20, 30, 40, 20] </span><br /><span style=\"font-size: 18px;\"><strong>Output:</strong> 20</span><br /><span style=\"font-size: 18px;\"><strong>Explanation:</strong>  Minimum cost is incurred when the frog jumps from stair 0 to 1 then 1 to 3:</span><br /><span style=\"font-size: 18px;\">jump from stair 0 to 1: cost = |30 - 20| = 10</span><br /><span style=\"font-size: 18px;\">jump from stair 1 to 3: cost = |20-30|&nbsp; = 10</span><br /><span style=\"font-size: 18px;\">Total Cost = 10 + 10 = 20</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> heights[] = [30, 20, 50, 10, 40]</span><br /><span style=\"font-size: 18px;\"><strong>Output:</strong> 30</span><br /><span style=\"font-size: 18px;\"><strong>Explanation:</strong> Minimum cost will be incurred when frog jumps from stair 0 to 2 then 2 to 4:</span><br /><span style=\"font-size: 18px;\">jump from stair 0 to 2: cost = |50 - 30| = 20</span><br /><span style=\"font-size: 18px;\">jump from stair 2 to 4: cost = |40-50|&nbsp; = 10<br /></span><span style=\"font-size: 18px;\">Total Cost = 20 + 10 = 30</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1 &lt;= height.size() &lt;= 10<sup>5</sup></span></li>\n<li><span style=\"font-size: 18px;\">0 &lt;= height[i]&lt;=10<sup>4</sup></span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minCost(vector<int>& height) {\n        // Code here\n        int n = height.size();\n        if (n == 1)\n            return 0;\n        if (n == 2)\n            return abs(height[0] - height[1]);\n        int prev2 = 0, prev = abs(height[0] - height[1]), curr = 0;\n        for (int i = 2; i < n; i++) {\n            int jump1 = prev + abs(height[i - 1] - height[i]);\n            int jump2 = prev2 + abs(height[i - 2] - height[i]);\n            curr = min(jump1, jump2);\n            prev2 = prev;\n            prev = curr;\n        }\n        return curr;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    int minCost(int[] height) {\n        int n = height.length;\n\n        // Base cases\n        if (n == 1) return 0;\n        if (n == 2) return Math.abs(height[0] - height[1]);\n\n        // Initialize variables to store the minimum energy for the two previous stairs\n        int prev2 = 0;\n        int prev = Math.abs(height[0] - height[1]);\n        int curr = 0;\n\n        // Iterate through the stairs starting from the third stair\n        for (int i = 2; i < n; i++) {\n            // Calculate energy if jumping from the (i-1)th stair\n            int jump1 = prev + Math.abs(height[i - 1] - height[i]);\n\n            // Calculate energy if jumping from the (i-2)th stair\n            int jump2 = prev2 + Math.abs(height[i - 2] - height[i]);\n\n            // Choose the minimum of the two possible jumps\n            curr = Math.min(jump1, jump2);\n\n            // Update the previous two stairs for the next iteration\n            prev2 = prev;\n            prev = curr;\n        }\n\n        return curr;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def minCost(self, height):\n        n = len(height)\n\n        # Base cases\n        if n == 1:\n            return 0\n        if n == 2:\n            return abs(height[0] - height[1])\n\n        # Initialize variables to store the minimum energy for the two previous stairs\n        prev2 = 0\n        prev = abs(height[0] - height[1])\n        curr = 0\n\n        # Iterate through the stairs starting from the third stair\n        for i in range(2, n):\n            # Calculate energy if jumping from the (i-1)th stair\n            jump1 = prev + abs(height[i - 1] - height[i])\n\n            # Calculate energy if jumping from the (i-2)th stair\n            jump2 = prev2 + abs(height[i - 2] - height[i])\n\n            # Choose the minimum of the two possible jumps\n            curr = min(jump1, jump2)\n\n            # Update the previous two stairs for the next iteration\n            prev2 = prev\n            prev = curr\n\n        return curr\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    minCost(height) {\n        const n = height.length;\n\n        // Base cases\n        if (n === 1) return 0;\n        if (n === 2) return Math.abs(height[0] - height[1]);\n\n        // Initialize variables to store the minimum energy for the two previous stairs\n        let prev2 = 0;\n        let prev = Math.abs(height[0] - height[1]);\n        let curr = 0;\n\n        // Iterate through the stairs starting from the third stair\n        for (let i = 2; i < n; i++) {\n            // Calculate energy if jumping from the (i-1)th stair\n            const jump1 = prev + Math.abs(height[i - 1] - height[i]);\n\n            // Calculate energy if jumping from the (i-2)th stair\n            const jump2 = prev2 + Math.abs(height[i - 2] - height[i]);\n\n            // Choose the minimum of the two possible jumps\n            curr = Math.min(jump1, jump2);\n\n            // Update the previous two stairs for the next iteration\n            prev2 = prev;\n            prev = curr;\n        }\n\n        return curr;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}