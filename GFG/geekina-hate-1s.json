{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 715966,
            "title": "Geekina Hate 1s",
            "titleSlug": "geekina-hate-1s",
            "content": "<p><span >It is a universal fact that Geekina hates 1s however it is also known that Geekina loves the integers having atmost <strong>k</strong> 1s (set-bits) in their binary representation.&nbsp;</span></p>\n<p><span >Geekina demanded <strong>n<sup>th</sup></strong> such non-negative number from Geek, and being a good friend of Geek, now it's your responsibility to tell him that number.</span></p>\n<p><span ><strong>Note:</strong> The test cases are generated such that the answer always exists and will fit in the 64-bit data type.</span></p>\n<p><strong><span >Example 1:</span></strong></p>\n<pre><strong><span >Input:</span></strong><br /><span >n = 5<br />k = 1</span><br /><strong><span >Output:</span></strong><br /><span >8</span><br /><strong><span >Explanation:</span></strong><br /><span >Following numbers are loved by Geekina -<br /></span><span >0 = (0)<sub>2</sub><br /></span><span >1 = (1)<sub>2</sub><br /></span><span >2 = (10)<sub>2</sub><br /></span><span >4 = (100)<sub>2</sub><br />8 = (1000)<sub>2</sub></span></pre>\n<p><strong><span >Example 2:</span></strong></p>\n<pre><strong><span >Input:</span></strong><br /><span >n = 6<br />k = 2</span><br /><strong><span >Output:</span></strong><br /><span >5</span><br /><strong><span >Explanation:</span></strong><br /><span >Following numbers are loved by Geekina -<br /></span><span >0 = (0)<sub>2</sub><br /></span><span >1 = (1)<sub>2</sub><br /></span><span >2 = (10)<sub>2</sub><br /></span><span >3 = (11)<sub>2</sub><br />4 = (100)<sub>2</sub><br />5 = (101)<sub style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">2</sub></span></pre>\n<p><span ><strong>Your Task:<br /></strong></span><span style=\"font-size: 18.6667px;\">This is a function problem. The input is already taken care of by the driver code. You only need to complete the function findNthNumer() that takes n and k as input parameters. Return the n<sup>th</sup> number having at most k set-bits.</span></p>\n<p><span style=\"font-size: 18.6667px;\"><strong style=\"font-size: 18px;\">Expected Time Complexity:</strong><span style=\"font-size: 18px;\"> O(k*log(n)</span></span><span style=\"font-size: 18px;\">&nbsp;</span><span style=\"font-size: 18px;\">+ constant</span><span style=\"font-size: 18px;\">)<br /></span><span style=\"font-size: 18.6667px;\"><strong style=\"font-size: 18px;\">Expected Auxiliary Space:</strong><span style=\"font-size: 18px;\"> O(</span></span><span style=\"font-size: 18px;\">k*log(n) + constant</span><span style=\"font-size: 18px;\">)</span></p>\n<p><span ><strong>Constraints:<br /></strong></span><span >1 &lt;= n &lt;= 10<sup>9<br /></sup>1 &lt;= k &lt;= 63</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geekina loves numbers with at most *k* set bits in their binary representation. Given an integer *n*, find the *n*-th non-negative number that Geekina loves.",
                "constraints": [
                    "1 <= n <= 10^9",
                    "1 <= k <= 63"
                ],
                "testcases": [
                    {
                        "input": "n = 5\nk = 1",
                        "output": "8",
                        "explanation": "The first five numbers with at most one set bit are 0, 1, 2, 4, and 8."
                    },
                    {
                        "input": "n = 6\nk = 2",
                        "output": "5",
                        "explanation": "The first six numbers with at most two set bits are 0, 1, 2, 3, 4, and 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Convert any integer 'x' to its binary representation and find numbers less than x that are liked by Geekina.</span></p>",
            "<p><span style=\"font-size: 14pt;\">Binary Search over 'x' to find the desired answer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\npublic:\n    long long findNthNumber(int n, int k) {\n        long long low = 0, high = 1e18;\n        dp.resize(2, vector<vector<long long>>(65, vector<long long>(65)));\n        \n        while (low <= high) {\n            long long mid = low + (high - low) / 2;\n            long long count = find(mid, k);\n            if (count >= n)\n                high = mid - 1;\n            else\n                low = mid + 1;\n        }\n        return low;\n    }\n\nprivate:\n\n    struct Triple {\n        long long x, y, z;\n        Triple(long long a, long long b, long long c) : x(a), y(b), z(c) {}\n    };\n\n    vector<vector<vector<long long>>> dp;\n\n    long long find(long long n, int k) {\n        string s = bitset<64>(n).to_string();\n        reset();\n        return dpf(s, s.length(), 1, k);\n    }\n\n    long long dpf(string& s, int n, int tight, int k) {\n        if (k < 0)\n            return 0;\n        if (n == 0) {\n            return 1;\n        }\n        if (dp[tight][k][n] != -1)\n            return dp[tight][k][n];\n        int ub = (tight == 1 ? s[s.length() - n] - '0' : 1);\n        long long ans = 0;\n        for (int dig = 0; dig <= ub; dig++) {\n            if (dig == ub)\n                ans += dpf(s, n - 1, tight, k - dig);\n            else\n                ans += dpf(s, n - 1, 0, k - dig);\n        }\n        return dp[tight][k][n] = ans;\n    }\n\n    void reset() {\n        for (int i = 0; i < 65; i++) {\n            for (int j = 0; j < 65; j++) {\n                dp[0][i][j] = -1;\n                dp[1][i][j] = -1;\n            }\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public long findNthNumer(int n, int k) {\n        long low = 0, high = (long)(1e18);\n        dp = new Long[2][65][65];\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            long count = find(mid, k);\n            if (count >= n)\n                high = mid - 1;\n            else\n                low = mid + 1;\n        }\n        return low;\n    }\n\n    private long find(long n, int k) {\n        char s[] = Long.toBinaryString(n).toCharArray();\n        reset();\n        return dp(s, s.length, 1, k);\n    }\n\n    private long dp(char s[], int n, int tight, int k) {\n        if (k < 0) return 0;\n        if (n == 0) {\n            return 1;\n        }\n        if (dp[tight][k][n] != null) return dp[tight][k][n];\n        int ub = (tight == 1 ? (int)(s[s.length - n] - '0') : 1);\n        long ans = 0;\n        for (int dig = 0; dig <= ub; dig++) {\n            if (dig == ub)\n                ans += dp(s, n - 1, tight, k - dig);\n            else\n                ans += dp(s, n - 1, 0, k - dig);\n        }\n        return dp[tight][k][n] = ans;\n    }\n\n    private void reset() {\n        for (int i = 0; i < 65; i++) {\n            Arrays.fill(dp[0][i], null);\n            Arrays.fill(dp[1][i], null);\n        }\n    }\n\n    private Long dp[][][];\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\nclass Solution:\n    def findNthNumber(self, n, k):\n        low, high = 0, 10 ** 18\n        self.dp = [[[-1] * 65 for _ in range(65)] for _ in range(2)]\n\n        while low <= high:\n            mid = low + (high - low) // 2\n            count = self.find(mid, k)\n            if count >= n:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return low\n\n    def find(self, n, k):\n        s = format(n, 'b').zfill(64)\n        self.reset()\n        return self.dpf(s, len(s), 1, k)\n\n    def dpf(self, s, n, tight, k):\n        if k < 0:\n            return 0\n        if n == 0:\n            return 1\n        if self.dp[tight][k][n] is not None:\n            return self.dp[tight][k][n]\n\n        ub = int(s[len(s) - n]) if tight == 1 else 1\n        ans = 0\n        for dig in range(ub + 1):\n            if dig == ub:\n                ans += self.dpf(s, n - 1, tight, k - dig)\n            else:\n                ans += self.dpf(s, n - 1, 0, k - dig)\n        self.dp[tight][k][n] = ans\n        return ans\n\n    def reset(self):\n        for i in range(65):\n            for j in range(65):\n                self.dp[0][i][j] = None\n                self.dp[1][i][j] = None\n\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nlet dp = new Array(2);\nfor (let i = 0; i < 2; i++) {\n  dp[i] = new Array(65);\n  for (let j = 0; j < 65; j++) {\n    dp[i][j] = new Array(65);\n  }\n}\n\nclass Solution {\n  findNthNumber(n, k) {\n    let low = 0;\n    let high = 1e18;\n    while (low <= high) {\n      let mid = low + Math.floor((high - low) / 2);\n      let count = this.find(mid, k);\n      if (count >= n) {\n        high = mid - 1;\n      } else {\n        low = mid + 1;\n      }\n    }\n\n    return low;\n  }\n\n  find(n, k) {\n    let s = n.toString(2).split(\"\");\n    this.reset();\n    return this.dp(s, s.length, 1, k);\n  }\n\n  dp(s, n, tight, k) {\n    if (k < 0) {\n      return 0;\n    }\n    if (n === 0) {\n      return 1;\n    }\n    if (dp[tight][k][n] !== undefined) {\n      return dp[tight][k][n];\n    }\n    let ub = tight === 1 ? parseInt(s[s.length - n]) : 1;\n    let ans = 0;\n    for (let dig = 0; dig <= ub; dig++) {\n      if (dig === ub) {\n        ans += this.dp(s, n - 1, tight, k - dig);\n      } else {\n        ans += this.dp(s, n - 1, 0, k - dig);\n      }\n    }\n    return (dp[tight][k][n] = ans);\n  }\n\n  reset() {\n    for (let i = 0; i < 65; i++) {\n      dp[0][i].fill(undefined);\n      dp[1][i].fill(undefined);\n    }\n  }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}