{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713193,
            "title": "Geeks And The String",
            "titleSlug": "geeks-and-the-string--170645",
            "content": "<p><span style=\"font-size:18px\">Our geek loves to play with strings, Currently, he is trying to reduce the size of a string by recursively removing all the consecutive duplicate pairs. In other words, He can apply the below operations any number of times.</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">Remove all the consecutive duplicate pairs and concatenate the remaining string to replace the original string.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\">Your task is to find the string with minimum length after applying the above operations.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Note:&nbsp;</span></strong><span style=\"font-size:18px\">If the string length become zero after applying operations, return &quot;-1&quot; as a string.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\naaabbaaccd\r\n<strong>Output</strong>: \r\nad\r\n<strong>Explanation</strong>: \r\nRemove (aa)abbaaccd =&gt;abbaaccd\r\nRemove a(bb)aaccd =&gt; aaaccd\r\nRemove (aa)accd =&gt; accd\r\nRemove a(cc)d =&gt; ad\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: \r\naaaa\r\n<strong>Output</strong>: \r\nEmpty String\r\n<strong>Explanation</strong>: \r\nRemove (aa)aa =&gt; aa\r\nAgain removing pair of duplicates then (aa) \r\nwill be removed and we will get &#39;Empty String&#39;.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a <strong>function </strong>problem. You only need to <strong>complete </strong>the function<strong> removePair()&nbsp;</strong>that takes a&nbsp;<strong>string </strong>as a&nbsp;<strong>parameter</strong> and <strong>returns </strong>the <strong>modified string</strong>. Return &quot;-1&quot; if the whole string is deleted.</span></p>\r\n\r\n<p><span style=\"font-size:16px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= |str| &lt;= 10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string, recursively remove all consecutive duplicate pairs.  Repeat this process until no more consecutive duplicate pairs exist. Return the resulting string with the minimum possible length.\n\nIf the final string is empty, return \"-1\".",
                "constraints": [
                    "1 <= |str| <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "aaabbaaccd",
                        "output": "ad",
                        "explanation": "1. Remove (aa)abbaaccd => abbaaccd\n2. Remove a(bb)aaccd => aaaccd\n3. Remove (aa)accd => accd\n4. Remove a(cc)d => ad"
                    },
                    {
                        "input": "aaaa",
                        "output": "-1",
                        "explanation": "1. Remove (aa)aa => aa\n2. Remove (aa) => \"\" (Empty String). Thus, return \"-1\""
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">Try using a stack to process the string.</span></p>",
            "<p><span style=\"font-size:14px\"><strong><u>Algorithm:</u></strong></span></p>\n\n<ul>\n\t<li><span style=\"font-size:14px\">Push the first character of string into a stack and iterate over the string.</span></li>\n\t<li><span style=\"font-size:14px\">If current character of string is equal to the character at top of stack, pop it from stack and continue iterating.</span></li>\n\t<li><span style=\"font-size:14px\">Else push the current character into the stack.</span></li>\n\t<li><span style=\"font-size:14px\">Add&nbsp;all characters in the stack to the answer and return&nbsp;it.</span></li>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n    public:\n    // Function to remove pairs of adjacent characters \n    // from the input string\n    string removePair(string s) {\n        stack<char> st; \n        \n        // Push the first character of the string to the stack\n        st.push(s[0]); \n        \n        // Iterate over the string starting from the second character\n        int curr_index = 1;\n        while (curr_index < s.length()){\n            \n            // If the stack is empty, push the current character to the stack\n            if (st.size() == 0)\n                st.push(s[curr_index]);\n            \n            // If the current character is the same as the top of the stack,\n            // remove the top element from the stack\n            else if (s[curr_index] == st.top()) \n                st.pop();\n            \n            // If the current character is not the same as the top of the stack,\n            // push the current character to the stack\n            else\n                st.push(s[curr_index]); \n            \n            // Move to the next character in the string\n            curr_index += 1;\n        }\n    \n        string ans = \"\" ;\n        \n        // Reverse the order of the characters in the stack and append them to the result\n        while(!st.empty()) {\n            ans+=st.top();\n            st.pop();\n        }\n        \n        // Reverse the result string\n        reverse(ans.begin(),ans.end());\n        \n        // If the result string is empty, return -1\n        if (ans.length() ==0)\n            ans=\"-1\";\n        \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    public static String removePair(String s) {\n        // using a stack to store the characters\n        Stack<Character> stack = new Stack<>(); \n    \n        // adding the first character to the stack\n        stack.add(s.charAt(0)); \n    \n        // iterating over the remaining characters in the string\n        int curr_index = 1;\n        while (curr_index < s.length()){\n            \n            // if stack is empty, add the character to the stack\n            if (stack.size() == 0)\n                stack.add(s.charAt(curr_index));\n            \n            // if the current character is equal to the top of stack,\n            // remove the top element from stack\n            else if (s.charAt(curr_index) == stack.peek()) \n                stack.pop();\n            \n            // otherwise, add the character to the stack\n            else\n                stack.add(s.charAt(curr_index)); \n            \n            curr_index += 1;\n        }\n    \n        // creating a string using the remaining characters in the stack\n        String ans = \"\" ;\n        for (char k: stack)\n            ans+=Character.toString(k);\n            \n        // if there are no remaining characters, return -1\n        if (ans.length() ==0)\n            ans=\"-1\";\n        \n        // returning the result string\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to remove pair of duplicates from given string using Stack.\r\n    def removePair(self,s):\r\n        \r\n        stack = [] \r\n    \r\n        #pushing the first character of the string into the stack.\r\n        stack.append(s[0]) \r\n    \r\n        curr_index = 1 \r\n    \r\n        #iterating over the string.\r\n        while curr_index < len(s):\r\n            \r\n            if len(stack) == 0:\r\n                stack.append(s[curr_index])\r\n            \r\n            #if current character of string is equal to the character at top \r\n            #of stack, we pop it from stack and continue iterating.\r\n            elif s[curr_index] == stack[-1]: \r\n                stack.pop()\r\n            #else we push the current character into the stack.\r\n            else:\r\n                stack.append(s[curr_index]) \r\n            curr_index += 1\r\n    \r\n        ans = \"\" \r\n        \r\n        #adding all characters in the stack to the answer and returning it.\r\n        for char in stack:\r\n            ans+=char \r\n            \r\n        if len(ans) ==0 :\r\n            ans=\"-1\"\r\n        \r\n        return ans\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {string}\n*/\n\nclass Solution {\n    //Function to remove pair of duplicates from given string using Stack.\n    removePair(s){\n        let stack = [];\n    \n        //pushing the first character of the string into the stack.\n        stack.push(s[0]);\n    \n        let curr_index = 1;\n    \n        //iterating over the string.\n        while (curr_index < s.length){\n            \n            if (stack.length == 0){\n                stack.push(s[curr_index]);\n            }\n            //if current character of string is equal to the character at top \n            //of stack, we pop it from stack and continue iterating.\n            else if (s[curr_index] == stack[stack.length-1]){ \n                stack.pop();\n            }\n            //else we push the current character into the stack.\n            else{\n                stack.push(s[curr_index]);\n            }\n            curr_index += 1;\n        }\n    \n        let ans = \"\";\n        \n        //adding all characters in the stack to the answer and returning it.\n        for (let char of stack){\n            ans += char;\n        }\n        \n        if (ans.length == 0 ){\n            ans = \"-1\";\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to remove pair of characters from string.\n    public string removePair(string s)\n    {\n        Stack<char> st = new Stack<char>(); \n        \n        // Push the first character of the string to the stack\n        st.Push(s[0]); \n        \n        // Iterate over the string starting from the second character\n        int curr_index = 1;\n        while (curr_index < s.Length){\n            \n            // If the stack is empty, push the current character to the stack\n            if (st.Count == 0)\n                st.Push(s[curr_index]);\n            \n            // If the current character is the same as the top of the stack,\n            // remove the top element from the stack\n            else if (s[curr_index] == st.Peek()) \n                st.Pop();\n            \n            // If the current character is not the same as the top of the stack,\n            // push the current character to the stack\n            else\n                st.Push(s[curr_index]); \n            \n            // Move to the next character in the string\n            curr_index += 1;\n        }\n    \n        string ans = \"\" ;\n        \n        // Reverse the order of the characters in the stack and append them to the result\n        while(st.Count > 0) {\n            ans += st.Peek();\n            st.Pop();\n        }\n        \n        // Reverse the result string\n        char[] charArray = ans.ToCharArray();\n        Array.Reverse(charArray);\n        ans = new string(charArray);\n        \n        // If the result string is empty, return -1\n        if (ans.Length == 0)\n            ans = \"-1\";\n        \n        return ans;        \n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}