{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714260,
            "title": "Geek's Village and Wells",
            "titleSlug": "geeks-village-and-wells--170647",
            "content": "<p><span style=\"font-size:18px\">Geek&#39;s village is represented by a 2-D matrix of characters of size n*m, where</span></p>\r\n\r\n<p><span style=\"font-size:18px\">H - Represents a house<br />\r\nW - Represents a well<br />\r\n. - Represents an open ground<br />\r\nN - Prohibited area(Not allowed to enter this area)</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Every house in the village needs to take water from a well, as the family members are so busy with their work, so every family wants to take the water from a well in minimum time, which is possible only if they have to cover as less distance as possible. Your task is to determine the minimum distance that a person in the house should travel to take out the water and carry it back to the house.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">A person is allowed to move only in four directions left, right, up, and down. That means if he/she is the cell (i,j), then the possible cells he/she can reach in one move are (i,j-1),(i,j+1),(i-1,j),(i+1,j), and the person is not allowed to move out of the grid.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong> For all the cells containing &#39;N&#39;, &#39;W&#39; and &#39;.&#39; our answer should be 0, and for all the houses where there is no possibility of taking water our answer should be -1.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 3\r\nm = 3\r\nc[][]: H H H\r\n\\t H W H\r\n&nbsp;\\tH H H</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n4 2 4 \r\n2 0 2 \r\n4 2 4</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nThere is only one well hence all the houses present\r\nin the corner of matrix will have to travel a minimum\r\ndistance of 4, 2 is for house to well and other two is\r\nfor well to house. And rest of the houses have to travel\r\na minimum distance of 2 (House -&gt; Well -&gt; House).</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 5\r\nm = 5\r\nc[][]: H N H H H\r\n&nbsp;\\tN N H H W\r\n&nbsp;\\tW H H H H\r\n&nbsp;\\tH H H H H\r\n&nbsp;\\tH H H H H</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n-1 0 6 4 2 \r\n0 0 4 2 0 \r\n0 2 4 4 2 \r\n2 4 6 6 4 \r\n4 6 8 8 6</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nThere is no way any person from the house in\r\ncell (0,0) can take the water from any well, and\r\nfor rest of the houses there is same type of\r\nstrategy we have to follow as followed in example 1. </span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function geekAndWells() which takes n and m, dimensions of the grid, and a 2-D grid of size n*m and returns a 2-D array containing the minimum distance for all the houses as explained above.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Expected Time Complexity: O(n*m)<br />\r\nExpected Space Complexity: O(n*m)</span></strong></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= n &lt;= 10^3<br />\r\n1 &lt;= m &lt;= 10^3</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek's village is represented by an n x m grid where:\n\n*   'H' represents a house.\n*   'W' represents a well.\n*   '.' represents an open ground.\n*   'N' represents a prohibited area.\n\nEach house needs water from a well.  The goal is to find the minimum distance each house resident must travel to a well and back. Movement is allowed in four directions: up, down, left, and right.  Moving outside the grid is not permitted. The distance is calculated from the house to the well and back to the house.\n\n*   For cells containing 'N', 'W', or '.', the output should be 0.\n*   If a house cannot reach any well, the output should be -1.\n\nDetermine the minimum distance each house must travel to obtain water.",
                "constraints": [
                    "1 <= n <= 10^3",
                    "1 <= m <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "n = 3\nm = 3\nc[][]: H H H\n\t H W H\n \tH H H",
                        "output": "4 2 4 \n2 0 2 \n4 2 4",
                        "explanation": "There is only one well. Houses in the corners travel a minimum distance of 4 (2 to the well and 2 back).  The remaining houses travel a minimum distance of 2 (1 to the well and 1 back). The well itself has a distance of 0."
                    },
                    {
                        "input": "n = 5\nm = 5\nc[][]: H N H H H\n\tN N H H W\n\tW H H H H\n\tH H H H H\n\tH H H H H",
                        "output": "-1 0 6 4 2 \n0 0 4 2 0 \n0 2 4 4 2 \n2 4 6 6 4 \n4 6 8 8 6",
                        "explanation": "The house at (0,0) is isolated and cannot reach any well, resulting in -1.  The other houses have their minimum distances calculated based on the proximity to the wells. 'N', 'W' are assigned values of zero."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use BFS technique.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to find the minimum distance of each cell from a well.\n    vector<vector<int>> chefAndWells(int n,int m,vector<vector<char>> &c){\n        vector<vector<int>> res(n,vector<int>(m,1e9)); //creating a matrix to store the minimum distance of each cell\n        queue<pair<int,int>> q; //creating a queue to perform a breadth-first search\n        //iterating over the grid to find the wells and initializing their distance to 0\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                if(c[i][j]=='W'){\n                    q.push({i,j}); //adding the wells to the queue\n                    res[i][j]=0; //setting their distance to 0\n                }\n            }\n        }\n        int dx[4]={0,0,-1,1}; //array to define the possible x-coordinate changes\n        int dy[4]={-1,1,0,0}; //array to define the possible y-coordinate changes\n        //performing a breadth-first search on the grid\n        while(q.size()){\n            auto cur=q.front();\n            q.pop();\n            int curx=cur.first,cury=cur.second; //current cell coordinates\n            //iterating over the possible neighbor cells\n            for(int i=0;i<4;i++){\n                int x=curx+dx[i],y=cury+dy[i]; //coordinates of the neighbor cell\n                //checking if the neighbor cell is within the grid and is not a blocked cell\n                //and if its current distance is greater than the distance of the current cell + 1\n                if(x>=0 and x<n and y>=0 and y<m and c[x][y]!='N' and res[x][y]>res[curx][cury]+1){\n                    q.push({x,y}); //adding the neighbor cell to the queue\n                    res[x][y]=res[curx][cury]+1; //updating its distance\n                }\n            }\n        }\n        //iterating over the grid to update the distances of the other cells\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                if(c[i][j]=='.') res[i][j]=0; //if it's an empty cell, the distance is 0\n                else if(res[i][j]==1e9 and c[i][j]!='N') res[i][j]=-1; //if it's a blocked cell without a well, the distance is -1\n                else if(res[i][j]==1e9 and c[i][j]!='H') res[i][j]=0; //if it's a house without a well, the distance is 0\n                else res[i][j]*=2; //if it's a house with a well, the distance is multiplied by 2\n            }\n        }\n        return res; //returning the matrix with the minimum distances\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\nclass Solution\r\n{\r\n    public int[][] chefAndWells(int n,int m,char c[][])\r\n    {\r\n        int ans[][]=new int[n][m];\r\n        for(int i=0;i<n;i++){\r\n            Arrays.fill(ans[i],Integer.MAX_VALUE);\r\n        }\r\n\r\n        boolean v[][]=new boolean[n][m];\r\n        Queue<pair> q=new LinkedList<>();\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                if(c[i][j]=='W'){\r\n                    v[i][j]=true;\r\n                    ans[i][j]=0;\r\n                    q.add(new pair(i,j,0));\r\n                }\r\n            }\r\n        }\r\n\r\n        int dx[]={0,0,-1,1};\r\n        int dy[]={-1,1,0,0};\r\n\r\n        while(!q.isEmpty()){\r\n            pair p=q.poll();\r\n            for(int i=0;i<4;i++){\r\n                int nx=p.a+dx[i],ny=p.b+dy[i];\r\n                if(nx>=0 && nx<n && ny>=0 && ny<m && !v[nx][ny] && c[nx][ny]!='N'){\r\n                    q.add(new pair(nx,ny,p.c+1));\r\n                    v[nx][ny]=true;\r\n                    ans[nx][ny]=p.c+1;\r\n                }\r\n            }\r\n        }\r\n\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<m;j++){\r\n                if(c[i][j]=='.'){\r\n                    ans[i][j]=0;\r\n                }else if(c[i][j]=='N'){\r\n                    ans[i][j]=0;\r\n                }else if(ans[i][j]==Integer.MAX_VALUE){\r\n                    ans[i][j]=-1;\r\n                }else{\r\n                    ans[i][j]*=2;\r\n                }\r\n            }\r\n        }\r\n\r\n        return ans;\r\n    }\r\n    public class pair\r\n    {\r\n        int a,b,c;\r\n        public pair(int a,int b,int c)\r\n        {\r\n            this.a=a;\r\n            this.b=b;\r\n            this.c=c;\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def chefAndWells(self, n : int, m : int, c : List[List[str]]) -> List[List[int]]:\n        \n        #creating a result matrix with very large values\n        res=[[10**9]*(m) for _ in range(n)]\n        \n        #creating a deque to store the positions of wells\n        q=deque()\n        \n        #iterating through the matrix to find the wells\n        for i in range(n):\n            for j in range(m):\n                if c[i][j]==\"W\":\n                    q.append((i,j))\n                    res[i][j]=0\n        \n        #creating dx and dy arrays to move in 4 directions\n        dx=[0,0,-1,1]\n        dy=[-1,1,0,0]\n        \n        #performing breadth-first search to find the minimum distance to each cell\n        while q:\n            curx,cury=q.popleft()\n            for i in range(4):\n                x,y=curx+dx[i],cury+dy[i]\n                if x>=0 and x<n and y<m and y>=0 and c[x][y]!=\"N\"and res[x][y]>res[curx][cury]+1:\n                    q.append((x,y))\n                    res[x][y]=res[curx][cury]+1\n        \n        #updating the result matrix based on the conditions given\n        for i in range(n):\n            for j in range(m):\n                if c[i][j]==\".\":    #empty cells stay as 0\n                    res[i][j]=0\n                elif res[i][j]==10**9 and c[i][j]!=\"N\":    #cells unreachable from wells are set as -1\n                    res[i][j]=-1\n                elif res[i][j]==10**9 and c[i][j]!=\"H\":    #cells unreachable from homes are set as 0\n                    res[i][j]=0\n                else :    #cells connected to wells are multiplied by 2\n                    res[i][j]*=2\n        \n        #return the final result matrix\n        return res",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public List<List<int>> chefAndWells(int n, int m, List<List<char>> c)\n    {\n        List<List<int>> res = new List<List<int>>(n);\n        for (int i = 0; i < n; i++)\n        {\n            res.Add(new List<int>(m));\n            for (int j = 0; j < m; j++)\n            {\n                res[i].Add(Int32.MaxValue);\n            }\n        }\n        \n        Queue<(int, int)> q = new Queue<(int, int)>();\n        int[] dx = {0, 0, -1, 1};\n        int[] dy = {-1, 1, 0, 0};\n        \n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < m; j++)\n            {\n                if (c[i][j] == 'W')\n                {\n                    q.Enqueue((i, j));\n                    res[i][j] = 0;\n                }\n            }\n        }\n        \n        while (q.Count > 0)\n        {\n            var cur = q.Dequeue();\n            int curx = cur.Item1;\n            int cury = cur.Item2;\n            \n            for (int i = 0; i < 4; i++)\n            {\n                int x = curx + dx[i];\n                int y = cury + dy[i];\n                \n                if (x >= 0 && x < n && y >= 0 && y < m && c[x][y] != 'N' && res[x][y] > res[curx][cury] + 1)\n                {\n                    q.Enqueue((x, y));\n                    res[x][y] = res[curx][cury] + 1;\n                }\n            }\n        }\n        \n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < m; j++)\n            {\n                if (c[i][j] == '.')\n                {\n                    res[i][j] = 0;\n                }\n                else if (res[i][j] == Int32.MaxValue && c[i][j] != 'N')\n                {\n                    res[i][j] = -1;\n                }\n                else if (res[i][j] == Int32.MaxValue && c[i][j] != 'H')\n                {\n                    res[i][j] = 0;\n                }\n                else\n                {\n                    res[i][j] *= 2;\n                }\n            }\n        }\n        \n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}