{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705112,
            "title": "Generalised Fibonacci numbers",
            "titleSlug": "generalised-fibonacci-numbers1820",
            "content": "<p><span style=\"font-size: 18px;\">Consider the generalized Fibonacci number <strong>g</strong>, which is dependent on <strong>a</strong>, <strong>b</strong> and <strong>c</strong> as follows :-<br /><strong>g</strong>(1) = 1, <strong>g</strong>(2) = 1. For any other number&nbsp;<strong>n, </strong><strong>g</strong>(n) = <strong>a*g</strong>(n-1) + <strong>b*g</strong>(n-2) + <strong>c</strong>.</span></p>\n<p><span style=\"font-size: 18px;\">For a given value of <strong>m</strong>, determine <strong>g(n)%m</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>a = </strong>3<br /><strong>b = </strong>3<br /><strong>c = </strong>3<br /><strong>n = </strong>3<br /><strong>m = </strong>5</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">4</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">g(1) = 1 and g(2) = 1 <br /></span><span style=\"font-size: 18px;\">g(3) = 3*g(2) + 3*g(1) + 3 = 3*1 + 3*1 + 3 = 9<br /></span><span style=\"font-size: 18px;\">We need to return answer modulo 5, so 9%5 = 4, is the answer.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>a = </strong>2<br /><strong>b = </strong>2<br /><strong>c = </strong>2<br /><strong>n = </strong>4<br /><strong>m = </strong>100</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">16</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">g(1) = 1 and g(2) = 1<br /></span><span style=\"font-size: 18px;\">g(3) = 2*g(2) + 2*g(1) + 2 = 2*1 + 2*1 + 2 = 6<br />g(4) = 2*g(3) + 2*g(2) + 2  = 2*6 + 2*1 + 2 = 16<br />We need to return answer modulo 100, so 16%100 = 16, is the answer.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>genFibNum()</strong> which takes 5 Integers <strong>a, b, c, n</strong>, and <strong>m</strong> as input and returns <strong>g(n)%m.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O( log(n) ).<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= a, b, c, n, m &lt;= 10<sup>9</sup>+7</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Define a generalized Fibonacci number, denoted as 'g', which depends on three integers 'a', 'b', and 'c'. The sequence is defined as follows:\n\n*   g(1) = 1\n*   g(2) = 1\n*   For n > 2, g(n) = a * g(n-1) + b * g(n-2) + c\n\nGiven the values of 'a', 'b', 'c', 'n', and 'm', your task is to compute g(n) % m.",
                "constraints": [
                    "1 <= a, b, c, n, m <= 10^9 + 7"
                ],
                "testcases": [
                    {
                        "input": "a = 3\nb = 3\nc = 3\nn = 3\nm = 5",
                        "output": "4",
                        "explanation": "g(1) = 1, g(2) = 1.  g(3) = 3*g(2) + 3*g(1) + 3 = 3*1 + 3*1 + 3 = 9.  9 % 5 = 4."
                    },
                    {
                        "input": "a = 2\nb = 2\nc = 2\nn = 4\nm = 100",
                        "output": "16",
                        "explanation": "g(1) = 1, g(2) = 1.  g(3) = 2*g(2) + 2*g(1) + 2 = 2*1 + 2*1 + 2 = 6.  g(4) = 2*g(3) + 2*g(2) + 2 = 2*6 + 2*1 + 2 = 16.  16 % 100 = 16."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">1. We have to use Matrix Exponentiation to decrease the time complexity.<br />2.&nbsp;Be careful about overflow of integers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    \r\n    long long mat[3][3], res[3][3]; //Matrices for matrix multiplication\r\n    \r\n    //Function to multiply two matrices res and mat modulo m\r\n    void mul(long long res[3][3], long long mat[3][3], long long m)\r\n    {\r\n        long long res1[3][3]; //Resultant matrix after multiplication\r\n        memset(res1,0,sizeof(res1)); //Initializing the resultant matrix to 0\r\n        for(int i=0; i<3; i++)\r\n        {\r\n            for(int j=0; j<3; j++)\r\n            {\r\n                for(int k=0; k<3; k++)\r\n                {\r\n                    res1[i][j] += (res[i][k]*mat[k][j]);   //Multiplying the matrices\r\n                    res1[i][j] %= m;    //Taking modulo m\r\n                }\r\n            }\r\n        }\r\n        \r\n        for(int i=0; i<3; i++)\r\n            for(int j=0; j<3; j++)\r\n                res[i][j]=res1[i][j];   //Updating the result matrix\r\n    }\r\n    \r\n    //Function to calculate matrix exponential of n modulo m\r\n    void mat_exp(long long n, long long m)\r\n    {\r\n        while(n>0)\r\n        {\r\n            if(n&1)\r\n                mul(res, mat, m);   //Multiplying res and mat if n is odd\r\n            mul(mat,mat,m);   //Multiplying mat with itself\r\n            n /= 2;   //Reducing n by half\r\n        }\r\n    }\r\n    \r\n    //Function to generate the n-th Fibonacci number modulo m\r\n    long long genFibNum(long long a, long long b, long long c, long long n, long long m) {\r\n        \r\n        memset(res,0,sizeof(res));   //Initializing the result matrix to 0\r\n        res[0][0] = res[1][1] = res[2][2] = 1;   //Initializing the result matrix as identity matrix\r\n        mat[0][0] = a;   //Initializing the matrix mat\r\n        mat[0][1] = b;\r\n        mat[0][2] = mat[1][0] = mat[2][2] = 1;\r\n        mat[1][1] = mat[1][2] = mat[2][0] = mat[2][1] = 0;\r\n        if(n<=2)\r\n            return (1%m);   //Returning 1 if n is 1 or 2\r\n        else\r\n        {\r\n            mat_exp(n-2,m);   //Calculating matrix exponential\r\n            return (res[0][0] + res[0][1] + c*res[0][2])%m;   //Returning the n-th Fibonacci number modulo m\r\n        }\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    static long mat[][],res[][]; // declare matrices to hold values\r\n    static long genFibNum(Long a, Long b, Long c, long n, long m) {\r\n        mat=new long[3][3]; // initialize matrix mat\r\n        res=new long[3][3]; // initialize matrix res\r\n        res[0][0] = res[1][1] = res[2][2] = 1; // set diagonal elements of res to 1\r\n        mat[0][0] = a; // set value of a to mat[0][0]\r\n        mat[0][1] = b; // set value of b to mat[0][1]\r\n        mat[0][2] = mat[1][0] = mat[2][2] = 1; // set specific elements of mat to 1\r\n        mat[1][1] = mat[1][2] = mat[2][0] = mat[2][1] = 0; // set specific elements of mat to 0\r\n\r\n        if(n<=2) // check if n is less than or equal to 2\r\n            return (1%m); // return 1 modulo m\r\n        else {\r\n            mat_exp(n-2,m); // apply matrix exponentiation\r\n            return (res[0][0] + res[0][1] + c*res[0][2])%m; // calculate the value using res and return modulo m\r\n        }\r\n    }\r\n    \r\n    static void mul(long res[][], long mat[][], long m) {\r\n        long res1[][]=new long[3][3]; // initialize temporary matrix res1\r\n\r\n        for(int i=0; i<3; i++) {\r\n            for(int j=0; j<3; j++) {\r\n                for(int k=0; k<3; k++) {\r\n                    res1[i][j] += (res[i][k]*mat[k][j]); // calculate matrix multiplication\r\n                    res1[i][j] %= m; // apply modulo m\r\n                }\r\n            }\r\n        }\r\n        \r\n        // copy values from res1 to res\r\n        for(int i=0; i<3; i++)\r\n            for(int j=0; j<3; j++)\r\n                res[i][j]=res1[i][j];\r\n    }\r\n    \r\n    static void mat_exp(long n, long m) {\r\n        while(n>0) {\r\n            if((n&1)!=0) // check if n is odd\r\n                mul(res, mat, m); // multiply res and mat\r\n            mul(mat,mat,m); // square mat\r\n            n /= 2; // divide n by 2\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    mat = [[0 for i in range(3)] for j in range(3)] # Initializing a 3x3 matrix\n    res = [[0 for i in range(3)] for j in range(3)] # Initializing a 3x3 matrix\n\n    def mul(self, res, mat, m):\n        res1 = [[0 for i in range(3)] for j in range(3)] # Initializing a 3x3 matrix\n        for i in range(3):\n            for j in range(3):\n                for k in range(3):\n                    res1[i][j] += (res[i][k]*mat[k][j]) # Multiplying matrices element-wise and summing\n                    res1[i][j] %= m # Taking modulo m to avoid overflow\n        \n        for i in range(3):\n            for j in range(3):\n                res[i][j] = res1[i][j] # Updating the resultant matrix\n\n    def mat_exp(self, n, m):\n        while n>0:\n            if n&1:\n                self.mul(self.res, self.mat, m) # Multiplying the result matrix with the current matrix\n            self.mul(self.mat,self.mat,m) # Squaring the current matrix\n            n //= 2 # Halving the power of the matrix\n\n    def genFibNum(self, a, b, c, n, m):\n        self.res = [[0 for i in range(3)] for j in range(3)] # Initializing a 3x3 matrix\n        self.res[0][0] = self.res[1][1] = self.res[2][2] = 1 # Setting diagonals of the result matrix to 1\n        self.mat[0][0] = a # Assigning matrix elements\n        self.mat[0][1] = b\n        self.mat[0][2] = self.mat[1][0] = self.mat[2][2] = 1\n        self.mat[1][1] = self.mat[1][2] = self.mat[2][0] = self.mat[2][1] = 0\n        \n        if n<=2:\n            return 1%m # If n<=2, return 1 modulo m\n        else:\n            self.mat_exp(n-2,m) # Exponentiating the matrix to the power of n-2\n            return (self.res[0][0] + self.res[0][1] + c*self.res[0][2])%m # Return the required Fibonacci number modulo m",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}