{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 879287,
            "title": "Generate a matrix with each row and column of given sum",
            "titleSlug": "generate-a-matrix-with-each-row-and-column-of-given-sum",
            "content": "<p><span style=\"font-size: 18.6667px;\">Given two integer arrays&nbsp;<strong>rowSum[]&nbsp;</strong>of size<strong>&nbsp;n</strong>&nbsp;and&nbsp;<strong>colSum[]&nbsp;</strong>of size<strong>&nbsp;m</strong>, the task is to construct a 2D matrix of size&nbsp;<strong>n x m</strong>&nbsp;such that the sum of matrix elements in&nbsp;<strong>i</strong>th row is&nbsp;<strong>rowSum[i]</strong>&nbsp;and the sum of matrix elements in&nbsp;<strong>j</strong>th column is&nbsp;<strong>colSum[j]</strong>.<br />Note:<strong>&nbsp;</strong></span><span style=\"font-size: 18.6667px;\">Since multiple answers are possible, return any one of them.&nbsp;<br />Arrays are generated such that answer is always<strong> possible</strong>.<br /></span><span style=\"font-size: 18.6667px;\">The driver code will print true if output matrix is correct, otherwise it will print false.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>rowSum[] = [5, 7, 10], colSum[] = [8, 6, 8]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> For the matrix [[0, 5, 0], [6, 1, 0], [2, 0, 8]], we have r</span><span style=\"font-size: 18.6667px;\">ow 1 with sum equal to 5 and column 1 has sum equal to 8.Row 2 has sum equal to 7 and column 2 has sum equal to 6.Row 3 has sum equal to 10 and column 3 has sum equal to 8.</span></pre>\n<pre><span ><strong>Input: </strong>rowSum[] = [1, 0], colSum[] = [1]<br /><strong>Output:</strong> true\n<strong>Explanation:</strong> For the matrix [[1], [0]], we have r</span><span style=\"font-size: 18.6667px;\">ow 1 with sum equal to 1 and column 1 has sum equal to 1.Row 2 with sum equal to 0.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= n, m &lt;= 10<sup>3</sup><br />1 &lt;= rowSum[i] &lt;= 10<sup>3</sup><br />1 &lt;= colSum[i] &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use a greedy approach by filling each cell <code>(i, j)</code> with <code>min(row[i], col[j])</code>, then reduce <code>row[i]</code> and <code>col[j]</code> by that amount, iterating until all values are satisfied.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<vector<int>> generateMatrix(vector<int> rowSum, vector<int> colSum) {\n        // Initialize a matrix\n        vector<vector<int>> ans(rowSum.size(), vector<int>(colSum.size(), 0));\n\n        // Traverse each cell (i, j) of the matrix\n        for (int i = 0; i < rowSum.size(); i++) {\n            for (int j = 0; j < colSum.size(); j++) {\n                // Assign the minimum of the row or column value\n                int m = min(rowSum[i], colSum[j]);\n                ans[i][j] = m;\n\n                // Subtract the minimum from both row and column sum\n                rowSum[i] -= m;\n                colSum[j] -= m;\n            }\n        }\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public int[][] generateMatrix(int[] rowSum, int[] colSum) {\n        // Initialize a matrix as an ArrayList of ArrayLists\n        int n = rowSum.length, m = colSum.length;\n        int[][] ans = new int[n][m];\n\n        // Traverse each cell (i, j) of the matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                // Assign the minimum of the rowSum or colSumumn value\n                int minEle = Math.min(rowSum[i], colSum[j]);\n                ans[i][j] = minEle;\n\n                // Subtract the minimum from both rowSum and colSumumn sum\n                rowSum[i] -= minEle;\n                colSum[j] -= minEle;\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def generateMatrix(self, rowSum, colSum):\n        # Initialize a matrix\n        ans = [[0] * len(colSum) for _ in range(len(rowSum))]\n\n        # Traverse each cell (i, j) of the matrix\n        for i in range(len(rowSum)):\n            for j in range(len(colSum)):\n                # Assign the minimum of the rowSum or colSumumn value\n                m = min(rowSum[i], colSum[j])\n                ans[i][j] = m\n\n                # Subtract the minimum from both rowSum and colSumumn sum\n                rowSum[i] -= m\n                colSum[j] -= m\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} rowSum\n * @param {number[]} colSum\n * @returns {number[][]}\n */\nclass Solution {\n    generateMatrix(rowSum, colSum) {\n        let n = rowSum.length;\n        let m = colSum.length;\n        let ans = Array.from({length : n}, () => Array(m).fill(0));\n\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n                let minValue = Math.min(rowSum[i], colSum[j]);\n                ans[i][j] = minValue;\n                rowSum[i] -= minValue;\n                colSum[j] -= minValue;\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}