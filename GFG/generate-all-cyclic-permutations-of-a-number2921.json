{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703976,
            "title": "Generate all cyclic permutations of a number",
            "titleSlug": "generate-all-cyclic-permutations-of-a-number2921",
            "content": "<p><span style=\"font-size:20px\">Given a number <strong>N</strong>, generate all the possible cyclic permutations of the number.</span></p>\r\n\r\n<p><strong><span style=\"font-size:20px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 123</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:\r\n</strong>123 312 231</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nFor 123 there are 3 cyclic permutations possible.</span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:20px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 5674</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:\r\n</strong>5674 4567 7456 6745</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nFor 5674 there are 4 cyclic permutations possible.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>cyclicPermutations()</strong>&nbsp;which takes an integer N as input parameter and returns the list of unique cyclic permutations of N.<br />\r\nNote: Cyclic permutation should not contain leading zeros<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong>&nbsp;O(X)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(X), Where X&nbsp;is the number of the digit of N.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:&nbsp;</strong><br />\r\n1 &lt;= N&nbsp;&lt;= 10<sup>9</sup></span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Think about how to get the next cyclic permutation from given N and do the same after getting the next cyclic permutation.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\npublic:\r\n    int countdigits(int N)\r\n    {\r\n        int count = 0;\r\n        while (N)\r\n        {\r\n            count++;\r\n            N = N / 10;\r\n        }\r\n        return count;\r\n    }\r\n    vector<int> cyclicPermutations(int N)\r\n    {\r\n    \r\n        vector<int> ans;\r\n        int num = N;\r\n        int n = countdigits(N);\r\n        int pw = 1;\r\n        for (int i = 1; i < n; i++)\r\n        {\r\n            pw *= 10;\r\n        }\r\n        while (1)\r\n        {\r\n            ans.push_back(num);\r\n            // Following three lines generates a\r\n            // circular pirmutation of a number.\r\n            int rem = num % 10;\r\n            int div = num / 10;\r\n            num = (pw * rem) + div;\r\n    \r\n            // If all the permutations are checked\r\n            // and we obtain original number exit\r\n            // from loop.\r\n            if (num == N)\r\n                break;\r\n        }\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public List<int> cyclicPermutations(int N)\n    {\n        int count = countdigits(N);\n        int pw = 1;\n        for (int i = 1; i < count; i++)\n        {\n            pw *= 10;\n        }\n        \n        List<int> ans = new List<int>();\n        int num = N;\n        \n        while (true)\n        {\n            ans.Add(num);\n            int rem = num % 10;\n            int div = num / 10;\n            num = (pw * rem) + div;\n            \n            if (num == N)\n                break;\n        }\n        \n        return ans;\n    }\n    \n    private int countdigits(int N)\n    {\n        int count = 0;\n        while (N != 0)\n        {\n            count++;\n            N = N / 10;\n        }\n        return count;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}