{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704009,
            "title": "Generate all palindromic numbers less than n",
            "titleSlug": "generate-all-palindromic-numbers-less-than-n3251",
            "content": "<p><span style=\"font-size:18px\">Count the number of palindromic numbers less than <strong>N</strong>.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 12</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n10</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nThere are 10 palindrome number less than 12.\r\n1 2 3 4 5 6 7 8 9 11</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 104</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n19</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nThere are 19 palindrome number less than 104.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>palindromicNumbers()</strong>&nbsp;which takes an integer N as input parameter and returns the count of the number of the palindromic numbers which are less than N.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N, count the number of palindromic numbers strictly less than N.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "12",
                        "output": "10",
                        "explanation": "The palindromic numbers less than 12 are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Therefore, the count is 10."
                    },
                    {
                        "input": "104",
                        "output": "19",
                        "explanation": "There are 19 palindromic numbers less than 104."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">You can run a loop till less than N and check if it is a palindrome. Can you improve this further?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\npublic:\r\n    int createPalindrome(int input, int b, bool isOdd)\r\n    {\r\n        int n = input;\r\n        int palin = input;\r\n     \r\n        // checks if number of digits is odd or even\r\n        // if odd then neglect the last digit of input in\r\n        // finding reverse as in case of odd number of\r\n        // digits middle element occur once\r\n        if (isOdd)\r\n            n /= b;\r\n     \r\n        // Creates palindrome by just appending reverse\r\n        // of number to itself\r\n        while (n > 0)\r\n        {\r\n            palin = palin * b + (n % b);\r\n            n /= b;\r\n        }\r\n        return palin;\r\n    }\r\n    int palindromicNumbers(int N)\r\n    {\r\n        int number;\r\n        vector < int > v;\r\n        // Run two times for odd and even length palindromes\r\n        for (int j = 0; j < 2; j++)\r\n        {\r\n            // Creates palindrome numbers with first half as i. \r\n            // Value of j decided whether we need an odd length\r\n            // of even length palindrome.\r\n            int i = 1;\r\n            while ((number = createPalindrome(i, 10, j % 2)) < N)\r\n            {\r\n                v.push_back(number);\r\n                i++;\r\n            }\r\n        }\r\n        int x=v.size();\r\n        return x;\r\n    }\r\n};\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    //Complete this function\n    public int createPalindrome(int input, int b, int isOdd) // change parameter type from bool to int\n    {\n        int n = input;\n        int palin = input;\n\n        // checks if number of digits is odd or even\n        // if odd then neglect the last digit of input in\n        // finding reverse as in case of odd number of\n        // digits middle element occur once\n        if (isOdd == 1) // change condition from (isOdd) to (isOdd == 1)\n            n /= b;\n\n        // Creates palindrome by just appending reverse\n        // of the number to itself\n        while (n > 0)\n        {\n            palin = palin * b + (n % b);\n            n /= b;\n        }\n        return palin;\n    }\n\n    public int palindromicNumbers(int N)\n    {\n        int number;\n        List<int> v = new List<int>();\n        // Run two times for odd and even length palindromes\n        for (int j = 0; j < 2; j++)\n        {\n            // Creates palindrome numbers with first half as i.\n            // Value of j decides whether we need an odd length\n            // or even length palindrome.\n            int i = 1;\n            while ((number = createPalindrome(i, 10, j % 2)) < N)\n            {\n                v.Add(number);\n                i++;\n            }\n        }\n        int x = v.Count;\n        return x;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}