{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702078,
            "title": "Generate Parentheses",
            "titleSlug": "generate-all-possible-parentheses",
            "content": "<p><span style=\"font-size:18px\">Given an integer <strong>N</strong> representing the number of pairs of parentheses, the task is to generate all combinations of well-formed(balanced) parentheses.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:\nN = 3\n<strong>Output:</strong>\n((()))\n(()())\n(())()\n()(())\n()()()</span>\n</pre>\n\n<div><span style=\"font-size:18px\"><strong>Example 2:</strong></span></div>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:\nN = 1\n<strong>Output:</strong>\n()</span>\n</pre>\n\n<div><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>AllParenthesis()&nbsp;</strong>which takes <strong>N</strong><strong> </strong>as input parameter and returns the list of balanced parenthesis</span>.</div>\n\n<div><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(2<sup>N</sup>&nbsp;* N).</span><br />\n<span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong>&nbsp;O(2*N*X), X = Number of valid Parenthesis.</span></div>\n\n<div><br />\n<span style=\"font-size:18px\"><strong>Constraints: </strong></span><br />\n<span style=\"font-size:18px\">1 &le; N &le; 12 </span></div>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N representing the number of pairs of parentheses, generate all possible combinations of well-formed (balanced) parentheses.",
                "constraints": [
                    "1 <= N <= 12"
                ],
                "testcases": [
                    {
                        "input": "N = 3",
                        "output": "((()))\n(()())\n(())()\n()(())\n()()()",
                        "explanation": "These are all the valid combinations of balanced parentheses using 3 pairs."
                    },
                    {
                        "input": "N = 1",
                        "output": "()",
                        "explanation": "The only valid combination of balanced parentheses using 1 pair."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Keep track of count&nbsp;of open&nbsp;and close brackets.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "walmart",
            "adobe",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\n    public:\n    // Recursive function\n    void _AllParenthesis( string str, int n, int open, int close, vector <string>& result) \n    { \n        // Base Case \n    \tif(close == n) \n    \t{ \n    \t\tresult.push_back((string)str); \n    \t\treturn; \n    \t} \n    \telse\n    \t{ \n    \t    /* If open bracket count becomes more than the close bracket count, then \n    \t    put a closing bracket and recursively call for the remaining brackets */\n    \t\tif(open > close) \n    \t\t\t_AllParenthesis(str+')', n, open, close+1, result); \n    \t\t\n    \t\t/* If open bracket count is less than n, then put an opening bracket\n    \t\tand call _printParenthesis() for the remaining brackets. */\n    \t\tif(open < n) \n    \t\t\t_AllParenthesis(str+'(', n, open+1, close, result); \n    \t} \n    } \n\n    public:\n    // Wrapper function over _AllParenthesis recursive function\n    vector<string> AllParenthesis(int n) \n    { \n    \tvector <string> result;\n    \tif(n > 0) \n    \t\t_AllParenthesis(\"\", n, 0, 0, result); \n    \treturn result; \n    }\t \n\n    \n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Backtracking algorithm to generate all valid combinations of parentheses\n\nclass Solution {\n    public List<String> AllParenthesis(int n) {\n        // Create a list to store all valid combinations of parentheses\n        List<String> ans = new ArrayList<String>();\n        \n        // Call the helper function to generate the combinations\n        generateParenthesis(\"\", n, 0, 0, ans);\n        \n        return ans;\n    }\n    \n    // Helper function to generate all valid combinations of parentheses\n    public void generateParenthesis(String s, int n, int opening_count, int closing_count, List<String> ans) {\n        // If the closing count equals n, we have generated a valid combination\n        if (closing_count == n) {\n            // Add the combination to the list of results\n            ans.add(s);\n            return;\n        }\n        \n        // If the number of opening brackets is greater than the number of closing brackets,\n        // we can add a closing bracket to maintain the validity of the combination\n        if (opening_count > closing_count) {\n            generateParenthesis(s + ')', n, opening_count, closing_count + 1, ans);\n        }\n        \n        // If the number of opening brackets is less than n, we can add an opening bracket\n        // to continue generating more combinations\n        if (opening_count < n) {\n            generateParenthesis(s + '(', n, opening_count + 1, closing_count, ans);\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to generate all valid parentheses combinations for given n\n    def AllParenthesis(self, n):\n        result = list()\n        if(n > 0):\n            self._AllParenthesis(\"\", n, 0, 0, result)\n        return result\n    \n    # Recursive function to generate all valid parentheses combinations\n    def _AllParenthesis(self, s, n, open, close, result):\n        if(close == n):\n            result.append(str(s))\n            return\n        else:\n            # If there are more open brackets than close brackets, add a close bracket\n            if(open > close):\n                self._AllParenthesis(s+')', n, open, close+1, result)\n            \n            # If there are less than n open brackets, add an open bracket\n            if(open < n):\n                self._AllParenthesis(s+'(', n, open+1, close, result)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    AllParenthesis(n) { // Function to generate all valid parenthesis combinations\n        \n        let ans = []; // Initialize an array to store the valid combinations\n        this.generateParenthesis(\"\",n,0,0,ans); // Call the recursive function to generate combinations\n        return ans; // Return the array of valid combinations\n    }\n    \n    generateParenthesis(s,n,opening_count, closing_count,ans) {\n        // Recursive function to generate valid parenthesis combinations\n        if(closing_count == n) { // If number of closing parenthesis equals n, add the combination to ans array\n            ans.push(s);\n            return;\n        }\n        \n        if(opening_count > closing_count) { // If there are more opening parenthesis than closing parenthesis, add closing parenthesis\n            this.generateParenthesis(s + ')',n,opening_count,closing_count+1,ans);\n        }\n        \n        if(opening_count < n) { // If there are less opening parenthesis than n, add opening parenthesis\n            this.generateParenthesis(s + '(',n,opening_count+1,closing_count,ans);\n        }\n        \n        \n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}