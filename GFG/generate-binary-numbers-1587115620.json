{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701347,
            "title": "Generate Binary Numbers",
            "titleSlug": "generate-binary-numbers-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a number <strong>n</strong>. The task is to generate all <strong>binary numbers with decimal values</strong> from <strong>1 to n</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 2\n<strong>Output: </strong>[\"1\", \"10\"]<strong>\nExplanation: </strong>Binary numbers from 1 to 2 are 1 and 10.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 5\n<strong>Output: </strong>[\"1\", \"10\", \"11\", \"100\", \"101\"]<strong>\nExplanation: </strong>Binary numbers from 1 to 5 are 1 , 10 , 11 , 100 and 101.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; n &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "oyo-rooms"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n// Function to generate binary numbers from 1 to N using a queue.\nvector<string> generate(int n) {\n    // using a list to store the answer.\n    vector<string> ans;\n\n    // using a queue of string which helps in generating binary numbers.\n    queue<string> q;\n\n    // pushing first binary number i.e. 1 in queue.\n    q.push(\"1\");\n\n    while (n--) {\n        // storing the front element of queue and popping it.\n        string s1 = q.front();\n        q.pop();\n        // adding the popped element in answer.\n        ans.push_back(s1);\n\n        // storing the front element of queue in beginning\n        // of iteration in both s1 and s2.\n        string s2 = s1;\n\n        // generating the next two binary numbers by adding \u00e2\u20ac\u01530\u00e2\u20ac\u009d and \u00e2\u20ac\u01531\u00e2\u20ac\u009d to\n        // the existing strings s1 and s2 and pushing them into queue.\n        q.push(s1.append(\"0\"));\n        q.push(s2.append(\"1\"));\n    }\n    // returning the list.\n    return ans;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class solve {\n\n    // Function to generate binary numbers from 1 to N using a queue.\n    static ArrayList<String> generate(int n) {\n        // using a list to store the answer.\n        ArrayList<String> res = new ArrayList<String>();\n\n        // using a queue of string which helps in generating binary numbers.\n        Queue<String> q = new LinkedList<>();\n\n        // pushing first binary number i.e. 1 in queue.\n        q.add(\"1\");\n\n        while (n-- > 0) {\n            // storing the front element of queue and popping it.\n            String s1 = q.peek();\n            q.poll();\n\n            // adding the popped element in answer.\n            res.add(s1);\n\n            // storing the front element of queue in beginning\n            // of iteration in both s1 and s2.\n            String s2 = s1;\n\n            // generating the next two binary numbers by adding \u00e2\u20ac\u01530\u00e2\u20ac\u009d and\n            // \u00e2\u20ac\u01531\u00e2\u20ac\u009d to the existing strings s1 and s2 and pushing them into\n            // queue.\n            q.add(s1 + '0');\n            q.add(s2 + '1');\n        }\n        // returning the list.\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n'''\nFunction Arguments :\n\t\t@param  :\n\t\t@return :\n'''\n#Function to generate binary numbers from 1 to N using a queue.\ndef generate(N):\n    \n    #using a list to store the answer.\n    res = []\n    \n    #using a queue of string which helps in generating binary numbers.\n    from queue import Queue\n    q = Queue()\n\n    #pushing first binary number i.e. 1 in queue.\n    q.put(\"1\")\n\n    while (N > 0):\n        N -= 1\n        \n        #storing the front element of queue and popping it.\n        s1 = q.get()\n        #adding the popped element in answer.\n        res.append (s1)\n\n        #storing the front element of queue in beginning\n        #of iteration in both s1 and s2.\n        s2 = s1  \n        \n        #generating the next two binary numbers by adding \u00e2\u20ac\u01530\u00e2\u20ac\u009d and \u00e2\u20ac\u01531\u00e2\u20ac\u009d to the\n\t\t#existing strings s1 and s2 and pushing them into queue.\n        q.put(s1 + \"0\")\n        q.put(s2 + \"1\")\n    \n    #returning the list.    \n    return res",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public List<string> generate(int N)\n    {\n        List<string> ans = new List<string>();\n        \n        Queue<string> q = new Queue<string>();\n        \n        q.Enqueue(\"1\");\n        \n        while(N > 0)\n        {\n            string s1 = q.Dequeue();\n            ans.Add(s1);\n            \n            string s2 = s1;\n            \n            q.Enqueue(s1 + \"0\");\n            q.Enqueue(s2 + \"1\");\n\n            N--;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} N\n * @returns {String[]}\n*/\n\nclass Solution {\n    //Function to generate binary numbers from 1 to N using a queue.\n    generate(N)\n    {\n        //using a list to store the answer.\n        let ans = [];\n        \n        //using a queue of string which helps in generating binary numbers.\n    \tlet q = [];\n    \tlet start_q = 0;\n    \t\n    \t//pushing first binary number i.e. 1 in queue.\n    \tq.push(\"1\");                   \n    \t\n    \twhile(N--)                 \n    \t{\n    \t    //storing the front element of queue and popping it.\n    \t\tlet s1 = q[start_q];  \n    \t\tstart_q++;\n    \t\t\n    \t\t//adding the popped element in answer.\n    \t\tans.push(s1);\n    \n            //storing the front element of queue in beginning\n            //of iteration in both s1 and s2.\n    \t\tlet s2=s1;\n    \t\t\n    \t\t//generating the next two binary numbers by adding \u00e2\u20ac\u01530\u00e2\u20ac\u009d and \u00e2\u20ac\u01531\u00e2\u20ac\u009d to \n\t\t    //the existing strings s1 and s2 and pushing them into queue.\n    \t\ts1+=\"0\";\n    \t\tq.push(s1); \n    \t\ts2+=\"1\";\n    \t\tq.push(s2);\n    \t}\n    \t//returning the list.\n    \treturn ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}