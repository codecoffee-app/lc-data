{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703602,
            "title": "Generate binary string",
            "titleSlug": "generate-binary-string3642",
            "content": "<p><span style=\"font-size: 18px;\">Given a string containing of <strong>0</strong>, <strong>1</strong> and <strong>?</strong> - a wildcard character, generate all distinct&nbsp;<strong>binary strings</strong> that can be formed by replacing each wildcard character by either <strong>0</strong> or <strong>1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>1??0?101\n<strong>Output: </strong>10000101 10001101 10100101 10101101 \n11000101 11001101 11100101 11101101\n<strong>Explanation:\n</strong>There will be 8 such possible strings that \ncan be formed, they are 10000101, 10001101, \n10100101, 10101101, 11000101, 11001101, \n11100101 and 11101101.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>10?</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">100 101</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>There are 2 such possible strings\nand they are 100 and 101.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong><br /><span style=\"font-size: 18px;\">You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>generate_binary_string()&nbsp;</strong>which takes the given string as input parameter and returns a vector of strings containing all the possible strings that can be formed.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note :&nbsp;</strong>Strings should be printed in lexicographically&nbsp;increasing order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time complexity: </strong>O(2<sup>n</sup>)</span><br /><span style=\"font-size: 18px;\"><strong>Expected Space complexity:&nbsp;</strong>O(n*2<sup>n</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le;&nbsp;length of string &le; 30</span><br /><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;Number of '<strong>?</strong>' in&nbsp;any&nbsp;string does not exceed 15.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string containing '0', '1', and '?' (a wildcard character), generate all distinct binary strings that can be formed by replacing each wildcard character with either '0' or '1'. The output strings should be lexicographically ordered.",
                "constraints": [
                    "1 <= Length of string <= 30",
                    "Number of '?' in any string does not exceed 15"
                ],
                "testcases": [
                    {
                        "input": "1??0?101",
                        "output": "10000101 10001101 10100101 10101101 11000101 11001101 11100101 11101101",
                        "explanation": "Each '?' is replaced by either '0' or '1', leading to 2^3 = 8 possible strings. These strings are: 10000101, 10001101, 10100101, 10101101, 11000101, 11001101, 11100101, and 11101101."
                    },
                    {
                        "input": "10?",
                        "output": "100 101",
                        "explanation": "Replacing '?' with '0' and '1' gives the strings 100 and 101."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use recursion.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n    vector<string> ans; // vector to store the generated binary strings\r\n    \r\n    private:\r\n    \r\n    // helper function to generate the binary strings recursively\r\n    void helper(int pos, string s, string res)\r\n    {\r\n        // if we have reached the end of the string, add the current result to the ans vector\r\n        if(pos == s.size())\r\n        {\r\n            ans.push_back(res);\r\n            return ;\r\n        }\r\n        \r\n        // if the current character is not a '?', append it to the result and move to the next character\r\n        if(s[pos] != '?')\r\n            helper(pos+1, s, res + s[pos]);\r\n        else // if the current character is a '?', generate two different results by replacing '?' with '0' and '1' respectively\r\n        {\r\n            string res1 = res + '0';\r\n            string res2 = res + '1';\r\n            helper(pos+1, s, res1); // recursive call with '?' replaced by '0'\r\n            helper(pos+1, s, res2); // recursive call with '?' replaced by '1'\r\n        }\r\n    }\r\n    \r\n    public:\r\n    // function to generate all possible binary strings based on the input string\r\n    vector<string> generate_binary_string(string s)\r\n    {\r\n        helper(0, s, \"\"); // call the helper function initially with an empty result\r\n        return ans; // return the ans vector containing all the generated binary strings\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    constructor() {\n        this.ans = []; // array to store the generated binary strings\n    }\n\n    // helper function to generate the binary strings recursively\n    helper(pos, s, res) {\n        // if we have reached the end of the string, add the current result to the ans\n        // array\n        if (pos === s.length) {\n            this.ans.push(res);\n            return;\n        }\n\n        // if the current character is not a '?', append it to the result and move to\n        // the next character\n        if (s[pos] !== '?')\n            this.helper(pos + 1, s, res + s[pos]);\n        else { // if the current character is a '?', generate two different results by\n               // replacing '?' with '0' and '1' respectively\n            let res1 = res + '0';\n            let res2 = res + '1';\n            this.helper(pos + 1, s, res1); // recursive call with '?' replaced by '0'\n            this.helper(pos + 1, s, res2); // recursive call with '?' replaced by '1'\n        }\n    }\n\n    // function to generate all possible binary strings based on the input string\n    generate_binary_string(s) {\n        this.helper(0, s,\n                    \"\"); // call the helper function initially with an empty result\n        return this\n            .ans; // return the ans array containing all the generated binary strings\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}