{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700424,
            "title": "Generate Grey Code Sequences",
            "titleSlug": "generate-grey-code-sequences",
            "content": "<p><span style=\"font-size:18px\">Given a number N, your task is to complete the function which generates all n-bit <a href=\"https://en.wikipedia.org/wiki/Gray_code\">grey code sequences</a>, a grey code sequence is a sequence such that successive patterns in it differ by one bit.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 2\n<strong>Output: </strong>00 01 11 10<strong>\nExplanation: </strong>All 2-bit gray codes are\n00, 01, 11, 10&nbsp;such that successive\npatterns in it differ by one bit.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 1\n<strong>Output: </strong>0 1</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nComplete the function&nbsp;<strong>generateCode()</strong>&nbsp;which takes an integer as input parameter and retruns an array of&nbsp;all N bit&nbsp;grey code sequence such that successive patterns in it differ by one bit.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N * 2<sup>N</sup>)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 16</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N, generate all n-bit Gray code sequences. A Gray code sequence is a sequence where successive patterns differ by only one bit.",
                "constraints": [
                    "1 <= N <= 16"
                ],
                "testcases": [
                    {
                        "input": "N = 2",
                        "output": "00 01 11 10",
                        "explanation": "All 2-bit Gray codes are 00, 01, 11, 10, where successive patterns differ by one bit."
                    },
                    {
                        "input": "N = 1",
                        "output": "0 1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>First create a array(say arr) of &quot;0&quot; and &quot;1&quot;.</p>\n\n<ol>\n\t<li>Then make the array as {&quot;0&quot;, &quot;1&quot;, &quot;1&quot;, &quot;0&quot;} i.e. insert&nbsp;all the elements of arr in reverse order.</li>\n\t<li>For 1st half of the array append &quot;0&quot; at first position of every string and for 2nd half append &quot;1&quot;.</li>\n\t<li>The arr becomes {&quot;00&quot;, &quot;01&quot;, &quot;11&quot;, &quot;10&quot;}.</li>\n</ol>\n\n<p>Repeat the process for 2^n times.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n    public:\n    vector <string> generateCode(int n)\n    {\n        vector<string> arr;\n        if (n <= 0)\n            return arr;\n     \n        arr.push_back(\"0\");\n        arr.push_back(\"1\");\n     \n     \n        int i, j;\n        // take all 2^n combinations\n        for (i = 2; i < (1<<n); i = i<<1)\n        {\n            // insert all the current arrangements in reverse order\n            for (j = i-1 ; j >= 0 ; j--)\n                arr.push_back(arr[j]);\n     \n            // starting bit is 0 for half of the current arrangements\n            for (j = 0 ; j < i ; j++)\n                arr[j] = \"0\" + arr[j];\n     \n            // starting bit is 1 for next half of the current arrangements\n            for (j = i ; j < 2*i ; j++)\n                arr[j] = \"1\" + arr[j];\n        }\n     \n     \n        return arr;\n         \n    }  \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n\tArrayList <String> generateCode(int n)\n\t{\n\t    ArrayList<String> al = new ArrayList<String>();\n\t\tif(n<=0)\n\t\t\treturn al;\n\t\t\n\t\tal.add(\"0\");\n\t\tal.add(\"1\");\n\t\t\n\t\tint i=0;\n\t\tint j=0;\n\t\t// take all 2^n combinations\n\t\tfor(i=2; i<(1<<n); i= i<<1)\n\t\t{\n\t\t    // insert all the current arrangements in reverse order\n\t\t\tfor(j=i-1; j>=0; j--)\n\t\t\t\tal.add(al.get(j));\n\t\t\t\n\t\t\t// starting bit is 0 for half of the current arrangements\n\t\t\tfor(j=0; j<i; j++)\n\t\t\t\tal.set(j, \"0\"+al.get(j));\n\t\t\t\n\t\t\t// starting bit is 1 for next half of the current arrangements\n\t\t\tfor (j = i ; j < 2*i ; j++)\n\t\t\t\tal.set(j, \"1\" + al.get(j));\n\t\t}\n\t\treturn al;\n\t}\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def generateCode(self, n):\n    \n        # Code here\n        arr = []\n        if n<=0:\n            return arr\n        arr.append('0')\n        arr.append('1')\n        i=2\n        j=0\n        #  take all 2^n combinations\n        while (i<(1<<n)):\n            j=i-1\n            #  insert all the current arrangements in reverse order\n            while(j>=0):\n                arr.append(arr[j])\n                j-=1\n            #  starting bit is 0 for half of the current arrangements\n            for j in range(0, i):\n                arr[j]='0'+arr[j]\n            j=i\n            #  starting bit is 1 for next half of the current arrangements\n            while j<2*i:\n                arr[j]='1'+arr[j]\n                j+=1\n            # print arr, i\n            i = (i<<1)\n        return arr\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number} n\n * @returns {string[]} \n */\n \nclass Solution {\n    generateCode(n){\n        // code here\n        \n        let arr = [];\n        \n        if (n <= 0)\n            return arr;\n     \n        arr.push(\"0\");\n        arr.push(\"1\");\n     \n     \n        let i, j;\n        // take all 2^n combinations\n        for (i = 2; i < (1<<n); i = i<<1)\n        {\n            // insert all the current arrangements in reverse order\n            for (j = i-1 ; j >= 0 ; j--)\n                arr.push(arr[j]);\n     \n            // starting bit is 0 for half of the current arrangements\n            for (j = 0 ; j < i ; j++)\n                arr[j] = \"0\" + arr[j];\n     \n            // starting bit is 1 for next half of the current arrangements\n            for (j = i ; j < 2*i ; j++)\n                arr[j] = \"1\" + arr[j];\n        }\n     \n     \n        return arr;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public List<string> generateCode(int N)\n    {\n        List<string> arr = new List<string>();\n        if (N <= 0)\n            return arr;\n     \n        arr.Add(\"0\");\n        arr.Add(\"1\");\n     \n     \n        int i, j;\n        // take all 2^n combinations\n        for (i = 2; i < (1<<N); i = i<<1)\n        {\n            // insert all the current arrangements in reverse order\n            for (j = i-1 ; j >= 0 ; j--)\n                arr.Add(arr[j]);\n     \n            // starting bit is 0 for half of the current arrangements\n            for (j = 0 ; j < i ; j++)\n                arr[j] = \"0\" + arr[j];\n     \n            // starting bit is 1 for next half of the current arrangements\n            for (j = i ; j < 2*i ; j++)\n                arr[j] = \"1\" + arr[j];\n        }\n     \n     \n        return arr;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}