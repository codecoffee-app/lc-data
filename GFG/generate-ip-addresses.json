{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700292,
            "title": "Generate IP Addresses",
            "titleSlug": "generate-ip-addresses",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong> containing only digits, your task is to restore it by returning all possible valid IP address combinations.&nbsp;</span><span style=\"font-size: 18px;\">You can return your answer in&nbsp;</span><strong style=\"font-size: 18px;\">any&nbsp;</strong><span style=\"font-size: 18px;\">order.</span></p>\n<p><span style=\"font-size: 18px;\">A <strong>valid</strong> IP address must be in the form of A.B.C.D, where A, B, C, and D are numbers from 0-255(inclusive).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>The numbers cannot be 0 prefixed unless they are 0. For example, 1.1.2.11 and 0.11.21.1 are valid IP addresses while 01.1.2.11 and 00.11.21.1 are not.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">s = &ldquo;255678166&rdquo;\n</span><strong style=\"font-size: 18px;\">Output: </strong></span><span style=\"font-size: 18px;\">[&ldquo;25.56.78.166&rdquo;, &ldquo;255.6.78.166&rdquo;, &ldquo;255.67.8.166&rdquo;, &ldquo;255.67.81.66&rdquo;]<br /><strong>Explanation: </strong>These are the only valid possible IP addresses.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">s = </span><span style=\"font-size: 18px;\">&ldquo;25505011535&rdquo;\n</span><strong style=\"font-size: 18px;\">Output:</strong><span style=\"font-size: 18px;\"> []<br /><strong>Explanation:</strong> We cannot generate a valid IP address with this string.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=s.size()&lt;=16<br />s contains only digits(i.e. 0-9)</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` containing only digits, find all possible valid IP address combinations you can restore from it. A valid IP address is of the form A.B.C.D, where A, B, C, and D are numbers between 0 and 255 (inclusive).  Leading zeros are not allowed unless the number is 0 itself.",
                "constraints": [
                    "1 <= s.length <= 16",
                    "s contains only digits (0-9)"
                ],
                "testcases": [
                    {
                        "input": "255678166",
                        "output": "[\"25.56.78.166\", \"255.6.78.166\", \"255.67.8.166\", \"255.67.81.66\"]",
                        "explanation": "These are the only valid IP addresses that can be formed from the input string."
                    },
                    {
                        "input": "25505011535",
                        "output": "[]",
                        "explanation": "It is not possible to generate a valid IP address from the provided string while adhering to the constraints."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Try using backtracking to generate all possible IP addresses by placing '.' at valid positions while ensuring each segment is within the range 0-255 and has no leading zeros.</span></p>",
            "<p><span style=\"font-size:18px\"><strong>Corner case for validity :</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\">For string &quot;25011255255&quot;\n\n25.011.255.255 is not valid as 011 is not valid.\n25.11.255.255 is not valid either as you are not allowed to change the string.\n250.11.255.255 is valid.</span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check whether segment is valid or not.\n    bool isValid(string &s) {\n        int n = s.size();\n\n        // Segment of lenght one are always valid\n        if (n == 1)\n            return true;\n\n        // converting string into integer\n        int val = stoi(s);\n\n        // Invalid case: If it has preceding zero or\n        // if its value is greater than 255.\n        if (s[0] == '0' || val > 255)\n            return false;\n\n        return true;\n    }\n\n    // Recursive helper Function to generate valid IP address\n    void generateIpRec(string &s, int index, string curr, int cnt,\n                       vector<string> &res) {\n        string temp = \"\";\n\n        // Base case: Reached end of string and\n        // all 4 segments were not completed\n        if (index >= s.size())\n            return;\n\n        if (cnt == 3) {\n            temp = s.substr(index);\n\n            // Checking 4th(last) segment of ip address\n            if (temp.size() <= 3 && isValid(temp))\n                res.push_back(curr + temp);\n\n            return;\n        }\n\n        for (int i = index; i < min(index + 3, (int)s.size()); i++) {\n\n            // creating next segment of ip address.\n            temp = temp + s[i];\n\n            // If the created segment is valid.\n            if (isValid(temp)) {\n\n                // Generate the remaining segments of IP\n                generateIpRec(s, i + 1, curr + temp + '.', cnt + 1, res);\n            }\n        }\n    }\n\n    // Function to generate valid IP address\n    vector<string> generateIp(string s) {\n        vector<string> res;\n\n        generateIpRec(s, 0, \"\", 0, res);\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to check whether segment is valid or not.\n    static boolean isValid(String s) {\n        int n = s.length();\n\n        // Segment of length one is always valid\n        if (n == 1) return true;\n\n        // Converting string into integer\n        int val = Integer.parseInt(s);\n\n        // Invalid case: If it has a preceding zero or\n        // its value is greater than 255.\n        if (s.charAt(0) == '0' || val > 255) return false;\n\n        return true;\n    }\n\n    // Recursive helper function to generate valid IP address\n    static void generateIpRec(String s, int index, String curr, int cnt,\n                              ArrayList<String> res) {\n        String temp = \"\";\n\n        // Base case: Reached end of string and\n        // all 4 segments were not completed\n        if (index >= s.length()) return;\n\n        if (cnt == 3) {\n            temp = s.substring(index);\n\n            // Checking 4th (last) segment of IP address\n            if (temp.length() <= 3 && isValid(temp)) res.add(curr + temp);\n\n            return;\n        }\n\n        for (int i = index; i < Math.min(index + 3, s.length()); i++) {\n            // Creating next segment of IP address\n            temp += s.charAt(i);\n\n            // If the created segment is valid\n            if (isValid(temp)) {\n                // Generate the remaining segments of IP\n                generateIpRec(s, i + 1, curr + temp + \".\", cnt + 1, res);\n            }\n        }\n    }\n\n    // Function to generate valid IP address\n    static ArrayList<String> generateIp(String s) {\n        ArrayList<String> res = new ArrayList<>();\n        generateIpRec(s, 0, \"\", 0, res);\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to check whether segment is valid or not.\n    def isValid(self, s):\n        n = len(s)\n\n        # Segment of length one is always valid\n        if n == 1:\n            return True\n\n        # Converting string into integer\n        val = int(s)\n\n        # Invalid case: If it has a preceding zero or\n        # its value is greater than 255\n        if s[0] == '0' or val > 255:\n            return False\n\n        return True\n\n    # Recursive helper function to generate valid IP address\n    def generateIpRec(self, s, index, curr, cnt, res):\n        temp = \"\"\n\n        # Base case: Reached end of string and\n        # all 4 segments were not completed\n        if index >= len(s):\n            return\n\n        if cnt == 3:\n            temp = s[index:]\n\n            # Checking 4th (last) segment of IP address\n            if len(temp) <= 3 and self.isValid(temp):\n                res.append(curr + temp)\n\n            return\n\n        for i in range(index, min(index + 3, len(s))):\n            # Creating next segment of IP address\n            temp += s[i]\n\n            # If the created segment is valid\n            if self.isValid(temp):\n                # Generate the remaining segments of IP\n                self.generateIpRec(s, i + 1, curr + temp + \".\", cnt + 1, res)\n\n    # Function to generate valid IP address\n    def generateIp(self, s):\n        res = []\n        self.generateIpRec(s, 0, \"\", 0, res)\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {string} s\n * @returns {string[]}\n */\n\nclass Solution {\n    // Function to check whether segment is valid or not.\n    isValid(s) {\n        const n = s.length;\n\n        // Segment of length one is always valid\n        if (n === 1) return true;\n\n        // Converting string into integer\n        const val = parseInt(s, 10);\n\n        // Invalid case: If it has a preceding zero or\n        // its value is greater than 255\n        if (s[0] === '0' || val > 255) return false;\n\n        return true;\n    }\n\n    // Recursive helper function to generate valid IP address\n    generateIpRec(s, index, curr, cnt, res) {\n        let temp = \"\";\n\n        // Base case: Reached end of string and\n        // all 4 segments were not completed\n        if (index >= s.length) return;\n\n        if (cnt === 3) {\n            temp = s.substring(index);\n\n            // Checking 4th (last) segment of IP address\n            if (temp.length <= 3 && this.isValid(temp)) res.push(curr + temp);\n\n            return;\n        }\n\n        for (let i = index; i < Math.min(index + 3, s.length); i++) {\n            // Creating next segment of IP address\n            temp += s[i];\n\n            // If the created segment is valid\n            if (this.isValid(temp)) {\n                // Generate the remaining segments of IP\n                this.generateIpRec(s, i + 1, curr + temp + \".\", cnt + 1, res);\n            }\n        }\n    }\n\n    // Function to generate valid IP address\n    generateIp(s) {\n        const res = [];\n        this.generateIpRec(s, 0, \"\", 0, res);\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}