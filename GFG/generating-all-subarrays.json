{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878830,
            "title": "Generating All Subarrays",
            "titleSlug": "generating-all-subarrays",
            "content": "<p dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; vertical-align: baseline; background-color: #ffffff;\"><span style=\"color: #273239; font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18.6667px; letter-spacing: 0.162px;\">Given an array, arr[], generate all possible subarrays using recursion and return them as a vector of vectors.<br /></span></span><span style=\"color: #273239; font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18.6667px; letter-spacing: 0.162px;\">The subarrays must be returned in the following order:<br /></span></span><span style=\"font-size: 18.6667px; letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\">&nbsp; &nbsp; &nbsp; 1. Subarrays starting from the first element, followed by subarrays starting from the second element, and so on.<br /></span><span style=\"color: #273239; font-family: arial, helvetica, sans-serif; font-size: 18.6667px; letter-spacing: 0.162px;\">&nbsp; &nbsp; &nbsp; 2. For each starting index, subarrays should be in increasing length.</span></p>\n<p dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; vertical-align: baseline; background-color: #ffffff;\"><span style=\"color: #273239; font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18.6667px; letter-spacing: 0.162px;\"><strong>Examples</strong>:&nbsp;</span></span></p>\n<pre dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; vertical-align: baseline; background-color: #ffffff;\"><span style=\"color: #273239; font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18.6667px; letter-spacing: 0.162px;\"><strong>Input</strong>: arr[] = [1, 2, 3]<br /></span></span><span style=\"font-size: 18.6667px; letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\"><strong>Output</strong>: [[1], [1, 2], [1, 2, 3], [2], [2, 3], [3]]<br /></span><span style=\"font-size: 18.6667px; letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\"><strong>Explanation</strong>: Starting with the first element, we generate subarrays [1], [1, 2], and [1, 2, 3]. Then, starting from the second element, we get [2] and [2, 3].&nbsp; Finally, starting from the third element, we only get [3].</span></pre>\n<pre dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; vertical-align: baseline; background-color: #ffffff;\"><span style=\"color: #273239; font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18.6667px; letter-spacing: 0.162px;\"><strong>Input</strong>: arr[] = [1, 2]<br /></span></span><span style=\"font-size: 18.6667px; letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\"><strong>Output</strong>: [[1], [1, 2], [2]]<br /></span><span style=\"font-size: 18.6667px; letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\"><strong>Explanation</strong>: Starting with the first element, we generate subarrays [1] and [1, 2]. Then, starting from the second element, we get [2].</span></pre>\n<pre dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; vertical-align: baseline; background-color: #ffffff;\"><strong style=\"font-size: 18.6667px; letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\">Input</strong><span style=\"color: #273239; font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18.6667px; letter-spacing: 0.162px;\">: arr[] = [1, 1]<br /></span></span><strong style=\"font-size: 18.6667px; letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\">Output</strong><span style=\"font-size: 18.6667px; letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\">: [[1], [1, 1], [1]]<br /></span><strong style=\"font-size: 18.6667px; letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\">Explanation</strong><span style=\"font-size: 18.6667px; letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\">: Starting with the first element, we generate subarrays [1] and [1, 1] (including both elements). Starting from the second element, we only get the subarray [1].</span></pre>\n<p dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; vertical-align: baseline; background-color: #ffffff;\"><span style=\"color: #273239; font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18.6667px; letter-spacing: 0.162px;\"><strong>Constraints</strong>:<br /></span></span><span style=\"font-size: 18.6667px; letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\">1 &lt;= arr.size() &lt;= 10</span><sup style=\"letter-spacing: 0.162px; color: #273239; font-family: arial, helvetica, sans-serif;\">3<br /></sup><span style=\"color: #273239; font-family: arial, helvetica, sans-serif; font-size: 18.6667px; letter-spacing: 0.162px;\">1 &lt;= arr[i] &lt;= 10</span><sup style=\"color: #273239; font-family: arial, helvetica, sans-serif; letter-spacing: 0.162px;\">6</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, generate all possible subarrays using recursion. Return these subarrays as a vector of vectors, ordered as follows:\n\n1.  Subarrays starting from the first element, then from the second, and so on.\n2.  For each starting index, subarrays should be in increasing length.",
                "constraints": [
                    "1 <= arr.size() <= 10",
                    "1 <= arr[i] <= 1000000"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3]",
                        "output": "[[1], [1, 2], [1, 2, 3], [2], [2, 3], [3]]",
                        "explanation": "We start with the first element (1) and generate subarrays [1], [1, 2], and [1, 2, 3]. Then, we move to the second element (2) and create [2] and [2, 3]. Finally, from the third element (3), we get [3]."
                    },
                    {
                        "input": "[1, 2]",
                        "output": "[[1], [1, 2], [2]]",
                        "explanation": "Starting from the first element (1), the subarrays are [1] and [1, 2].  From the second element (2), the subarray is [2]."
                    },
                    {
                        "input": "[1, 1]",
                        "output": "[[1], [1, 1], [1]]",
                        "explanation": "Beginning with the first element (1), we derive subarrays [1] and [1, 1]. Moving to the second element (1), we obtain the subarray [1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to generate all subarrays of the given array\n    vector<vector<int>> getSubArrays(vector<int>& arr) {\n        vector<vector<int>> subarrays; // Vector to store all subarrays\n        int n = arr.size();            // Get the size of the input array\n\n        // Outer loop to set the starting point of the subarray\n        for (int start = 0; start < n; ++start) {\n            vector<int> subarray; // Temporary vector to store the current subarray\n\n            // Inner loop to expand the subarray to include elements from 'start' to\n            // 'end'\n            for (int end = start; end < n; ++end) {\n                subarray.push_back(arr[end]); // Add the current element to the subarray\n                subarrays.push_back(subarray); // Add the current subarray to the result\n            }\n        }\n\n        return subarrays; // Return the vector containing all subarrays\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to generate all subarrays of the given array\n    public List<List<Integer>> getSubArrays(int[] arr) {\n        List<List<Integer>> subarrays = new ArrayList<>();\n        int n = arr.length;\n\n        // Generate all subarrays\n        for (int start = 0; start < n; ++start) {\n            List<Integer> subarray = new ArrayList<>();\n            for (int end = start; end < n; ++end) {\n                subarray.add(arr[end]);\n                subarrays.add(new ArrayList<>(subarray));\n            }\n        }\n        return subarrays;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\nclass Solution:\n    # Function to generate all subarrays of the given array\n    def getSubArrays(self, arr):\n        subarrays = []  # List to store all subarrays\n        n = len(arr)  # Get the size of the input array\n\n        # Generate all subarrays\n        for start in range(\n                n):  # Outer loop to set the starting point of the subarray\n            subarray = []  # Temporary list to store the current subarray\n            for end in range(\n                    start, n\n            ):  # Inner loop to expand the subarray from 'start' to 'end'\n                subarray.append(\n                    arr[end])  # Add the current element to the subarray\n                subarrays.append(subarray.copy(\n                ))  # Append a copy of the current subarray to the result list\n\n        return subarrays  # Return the list containing all subarrays\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to generate all subarrays of the given array\n    getSubArrays(arr) {\n        let subarrays = []; // Array to store all subarrays\n        let n = arr.length; // Get the size of the input array\n\n        // Generate all subarrays\n        for (let start = 0; start < n;\n             start++) {        // Outer loop to set the starting point of the subarray\n            let subarray = []; // Temporary array to store the current subarray\n\n            for (let end = start; end < n;\n                 end++) { // Inner loop to expand the subarray from 'start' to 'end'\n                subarray.push(arr[end]); // Add the current element to the subarray\n                subarrays.push([\n                    ...subarray\n                ]); // Add a copy of the current subarray to the result array\n            }\n        }\n\n        return subarrays; // Return the array containing all subarrays\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}