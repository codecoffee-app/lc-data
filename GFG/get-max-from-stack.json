{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 888468,
            "title": "Get Max from Stack",
            "titleSlug": "get-max-from-stack",
            "content": "<p><span >Given&nbsp;<strong>q</strong>&nbsp;queries,&nbsp;</span><span style=\"font-size: 18.6667px;\">You task is to implement the following three functions for a stack:</span></p>\n<ul>\n<li style=\"text-align: left;\"><span style=\"font-size: 18.6667px;\"><strong>push(x) &ndash;&nbsp;</strong>Insert an integer x onto the stack.</span></li>\n<li style=\"text-align: left;\"><span style=\"font-size: 18.6667px;\"><strong>pop() &ndash;&nbsp;</strong>Remove the top element from the stack.</span></li>\n<li style=\"text-align: left;\"><span style=\"font-size: 18.6667px;\"><strong>peek() -&nbsp;</strong>Return the top element&nbsp;</span><span style=\"font-size: 18.6667px;\">from the stack.<strong><strong>&nbsp;</strong><span style=\"font-family: monospace; font-size: 18.6667px; font-weight: 400;\">If the stack is empty, return -1.</span><br /></strong></span></li>\n<li style=\"text-align: left;\"><span style=\"font-size: 18.6667px;\"><strong>getMax() &ndash; </strong>Retrieve the maximum element from the stack in O(1) time. If the stack is empty, return -1.</span></li>\n</ul>\n<p><span >Each query can be one of the following:</span></p>\n<ul>\n<li><span ><strong>1 x</strong>&nbsp;: Push x onto the stack.</span></li>\n<li><span ><strong>2 :</strong>&nbsp;Pop the top element from the stack.</span></li>\n<li><span style=\"font-family: monospace;\"><span style=\"font-size: 18.6667px;\"><strong>3:</strong>&nbsp;Return the top element from the stack. If the stack is empty, return -1.</span></span></li>\n<li><span style=\"font-family: monospace;\"><span style=\"font-size: 18.6667px;\"><strong>4:</strong> Return the maximum element from the stack.</span></span></li>\n</ul>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> q = 7, queries = [[1, 2], [1, 3], [3], [2], [4], [1, 1], [4]]<strong>\nOutput: </strong>[3, 2, 2]<strong>\nExplanation: </strong>\npush(2): Stack is [2]\npush(3): Stack is [2, 3]\npeek(): Top element is <strong>3</strong>\npop(): Removes 3, stack is [2]\ngetMax(): Maximum element is <strong>2</strong>\npush(1): Stack is [2, 1]\ngetMax(): Maximum element is <strong>2</strong></span></pre>\n<pre><span ><strong >Input:</strong><span > q = 4, queries = [[1, 4], [1, 2], [4], [3]]</span><strong >\nOutput: </strong><span >[4, 2]</span><strong >\nExplanation: <br /></strong>push(4): Stack is [4]\npush(2): Stack is [4, 2]<span ><br /></span>getMax(): Maximum element is <strong>4</strong><span ><br /></span>peek(): Top element is <strong>2</strong></span></pre>\n<pre><span ><strong >Input:</strong><span > q = 5, queries = [[1, 10], [4], [1, 5], [4], [2]]</span><strong >\nOutput: </strong><span >[10, 5]</span><strong >\nExplanation: <br /></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">push(10): Stack is [10]<span style=\"font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, sans-serif;\"><span ><br /></span></span></span></span><span style=\"font-size: 18.6667px;\">getMax(): Maximum element is <strong>10</strong></span><br /><span ><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">push(5): Stack is [10, 5]<span style=\"font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, sans-serif;\"><span ><br /></span></span></span></span><span style=\"font-size: 18.6667px;\">getMax(): Maximum element is <strong>10</strong></span><br /><span style=\"font-size: 18.6667px;\">pop(): Removes 5, stack is [10]</span></pre>\n<p><span ><strong>Constraints:</strong><br /></span></p>\n<ul>\n<li><span >1 &lt;= q &lt;= 10<sup>5</sup><br /></span></li>\n<li><span >0 &lt;= values on the stack &lt;= 10<sup>9</sup></span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  private:\n    stack<int> s;\n    int maxEle;\n\n  public:\n    Solution() { maxEle = -1; }\n\n    // Add an element to the top of Stack\n    void push(int x) {\n        if (s.empty()) {\n            maxEle = x;\n            s.push(x);\n        }\n        // If new number is greater than maxEle\n        else if (x > maxEle) {\n            s.push(2 * x - maxEle);\n            maxEle = x;\n        } else {\n            s.push(x);\n        }\n    }\n\n    // Remove the top element from the Stack\n    void pop() {\n        if (s.empty()) {\n            return;\n        }\n\n        int top = s.top();\n        s.pop();\n\n        // Maximum will change if the maximum element\n        // of the stack is being removed.\n        if (top > maxEle) {\n            maxEle = 2 * maxEle - top;\n        }\n    }\n\n    // Returns top element of the Stack\n    int peek() {\n        if (s.empty()) {\n            return -1;\n        }\n\n        int top = s.top();\n\n        // If maxEle < top means maxEle stores value of top.\n        return (maxEle < top) ? maxEle : top;\n    }\n\n    // Finds maximum element of Stack\n    int getMax() {\n        if (s.empty())\n            return -1;\n\n        // variable maxEle stores the maximum element\n        // in the stack\n        return maxEle;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    int maxEle;\n    Stack<Integer> s;\n\n    public Solution() {\n        s = new Stack<>();\n        maxEle = -1;\n    }\n\n    // Add an element to the top of Stack\n    public void push(int x) {\n        if (s.isEmpty()) {\n            maxEle = x;\n            s.push(x);\n        }\n        // If new number is greater than maxEle\n        else if (x > maxEle) {\n            s.push(2 * x - maxEle);\n            maxEle = x;\n        } else {\n            s.push(x);\n        }\n    }\n\n    // Remove the top element from the Stack\n    public void pop() {\n        if (s.isEmpty()) {\n            return;\n        }\n\n        int top = s.pop();\n\n        // Maximum will change, if the maximum element\n        // of the stack is being removed.\n        if (top > maxEle) {\n            maxEle = 2 * maxEle - top;\n        }\n    }\n\n    // Returns top element of the Stack\n    public int peek() {\n        if (s.isEmpty()) {\n            return -1;\n        }\n\n        int top = s.peek();\n\n        // If maxEle < top means maxEle stores value of top.\n        return (maxEle < top) ? maxEle : top;\n    }\n\n    // Finds maximum element of Stack\n    public int getMax() {\n        if (s.isEmpty()) {\n            return -1;\n        }\n\n        // variable maxEle stores the maximum element\n        // in the stack.\n        return maxEle;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def __init__(self):\n        self.s = []\n        self.maxEle = -1\n\n    # Add an element to the top of Stack\n    def push(self, x):\n        if not self.s:\n            self.maxEle = x\n            self.s.append(x)\n        # If new number is greater than maxEle\n        elif x > self.maxEle:\n            self.s.append(2 * x - self.maxEle)\n            self.maxEle = x\n        else:\n            self.s.append(x)\n\n    # Remove the top element from the Stack\n    def pop(self):\n        if not self.s:\n            return\n\n        top = self.s.pop()\n\n        # Maximum will change, if the maximum element\n        # of the stack is being removed.\n        if top > self.maxEle:\n            self.maxEle = 2 * self.maxEle - top\n\n    # Returns top element of Stack\n    def peek(self):\n        if not self.s:\n            return -1\n\n        top = self.s[-1]\n\n        # If maxEle < top means maxEle stores value of top.\n        return self.maxEle if self.maxEle < top else top\n\n    # Finds maximum element of Stack\n    def getMax(self):\n        if not self.s:\n            return -1\n\n        # variable maxEle stores the maximum element\n        # in the stack.\n        return self.maxEle\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() {\n        this.s = [];\n        this.maxEle = -1;\n    }\n\n    // Add an element to the top of Stack\n    push(x) {\n        if (this.s.length === 0) {\n            this.maxEle = x;\n            this.s.push(x);\n        }\n        // If new number is greater than maxEle\n        else if (x > this.maxEle) {\n            this.s.push(2 * x - this.maxEle);\n            this.maxEle = x;\n        } else {\n            this.s.push(x);\n        }\n    }\n\n    // Remove the top element from the Stack\n    pop() {\n        if (this.s.length === 0) {\n            return;\n        }\n\n        let top = this.s.pop();\n\n        // Maximum will change, if the maximum element\n        // of the stack is being removed.\n        if (top > this.maxEle) {\n            this.maxEle = 2 * this.maxEle - top;\n        }\n    }\n\n    // Returns top element of Stack\n    peek() {\n        if (this.s.length === 0) {\n            return -1;\n        }\n\n        let top = this.s[this.s.length - 1];\n\n        // If maxEle < top means maxEle stores value of top.\n        return this.maxEle < top ? this.maxEle : top;\n    }\n\n    // Finds maximum element of Stack\n    getMax() {\n        if (this.s.length === 0) {\n            return -1;\n        }\n\n        // variable maxEle stores the maximum element\n        // in the stack.\n        return this.maxEle;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}