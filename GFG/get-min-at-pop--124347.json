{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 880822,
            "title": "Get min at pop",
            "titleSlug": "get-min-at-pop--124347",
            "content": "<p><span style=\"font-size: 18px;\">You are given an integer array <strong>arr[]</strong>. You need to first push the elements of the array into a stack and then print minimum in the stack at each pop until stack becomes empty.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [1 2 3 4 5]\n<strong>Output</strong>: 1 1 1 1 1\n<strong>Explanation</strong>: \nAfter pushing elements to the stack, \nthe stack will be \"top -&gt; 5, 4, 3, 2, 1\". \nNow, start popping elements from the stack\npopping&nbsp;5: min in&nbsp;the stack is&nbsp;1.popped 5\npopping&nbsp;4: min in the stack is 1. popped 4\npopping&nbsp;3: min in the stack is&nbsp;1. popped 3\npopping 2: min in the stack is 1. popped 2\npopping 1: min in the stack is 1. popped 1\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [1 6 43 1 2 0 5]\n<strong>Output</strong>: 0 0 1 1 1 1 1\n<strong>Explanation</strong>: \nAfter pushing the elements to the stack, \nthe stack will be 5-&gt;0-&gt;2-&gt;1-&gt;43-&gt;6-&gt;1. \nNow, poping the elements from the stack:\npopping 5: min in the stack is 0. popped 5\npopping 0: min in the stack is 0. popped 0\npopping 2: min in the stack is 1. popped 2\npopping 1: min in the stack is 1. popped 1\npopping 43: min in the stack is 1. popped 43\npopping 6: min in the stack is 1. popped 6\npopping 1: min in the stack is 1. popped 1.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">0 &lt;= arr<sub>i</sub> &lt;= 10<sup>7</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n// Function to push all the elements into the stack.\nstack<int> push(vector<int>& arr) {\n    stack<int> s;\n    int n = arr.size();\n    // iterating over the array elements and pushing them into the stack.\n    for (int i = 0; i < n; i++) {\n        s.push(arr[i]);\n    }\n    return s;\n}\n\n// Function to print minimum value in stack each time while popping.\nvoid getMinAtPop(stack<int> s) {\n    std::vector<int> v;\n\n    // pushing all the elements of stack in a list.\n    while (!s.empty()) {\n        v.push_back(s.top());\n        s.pop();\n    }\n    stack<int> minStack;\n\n    // pushing the last element of list in original stack and minStack.\n    s.push(v.back());\n    minStack.push(v.back());\n\n    // iterating over the list from second last element in backward direction.\n    for (int i = v.size() - 2; i >= 0; i--) {\n        // pushing the current element in original stack.\n        s.push(v[i]);\n\n        // comparing the top element of original stack with top element of\n        // minStack and pushing the minimum value into minStack.\n        if (s.top() < minStack.top())\n            minStack.push(s.top());\n        else\n            minStack.push(minStack.top());\n    }\n\n    // printing all the elements in minstack one by one.\n    while (!s.empty()) {\n        cout << minStack.top() << \" \";\n        s.pop();\n        minStack.pop();\n    }\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass GetMin {\n    // Function to push all the elements into the stack.\n    public static Stack<Integer> _push(int arr[]) {\n        Stack<Integer> s = new Stack<>();\n        int n = arr.length;\n        // iterating over the array elements and pushing them into the stack.\n        for (int i = 0; i < n; i++) {\n            s.push(arr[i]);\n        }\n        return s;\n    }\n\n    // Function to print minimum value in stack each time while popping.\n    static void _getMinAtPop(Stack<Integer> s) {\n        ArrayList<Integer> v = new ArrayList<>();\n\n        // pushing all the elements of stack in a list.\n        while (!s.isEmpty()) {\n            v.add(s.peek());\n            s.pop();\n        }\n\n        Stack<Integer> minStack = new Stack<>();\n\n        // pushing the last element of list in original stack and minStack.\n        s.push(v.get(v.size() - 1));\n        minStack.push(v.get(v.size() - 1));\n\n        // iterating over list from second last element in backward direction.\n        for (int i = v.size() - 2; i >= 0; i--) {\n            // pushing the current element in original stack.\n            s.push(v.get(i));\n\n            // comparing the top element of original stack with top element of\n            // minStack and pushing the minimum value into minStack.\n            if (s.peek() < minStack.peek())\n                minStack.push(s.peek());\n            else\n                minStack.push(minStack.peek());\n        }\n\n        // printing all the elements in minstack one by one.\n        while (!s.isEmpty()) {\n            System.out.print(minStack.peek() + \" \");\n            s.pop();\n            minStack.pop();\n        }\n    }\n}\n",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}