{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700903,
            "title": "Get min at pop",
            "titleSlug": "get-min-at-pop",
            "content": "<p><span style=\"font-size: 18px;\">You are given an integer array <strong>A[]</strong>. You need to first push the elements of the array into a stack and then print minimum in the stack at each pop until stack becomes empty.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: A[] = [1 2 3 4 5]\n<strong>Output</strong>: 1 1 1 1 1\n<strong>Explanation</strong>: \nAfter pushing elements to the stack, \nthe stack will be \"top -&gt; 5, 4, 3, 2, 1\". \nNow, start popping elements from the stack\npopping&nbsp;5: min in&nbsp;the stack is&nbsp;1.popped 5\npopping&nbsp;4: min in the stack is 1. popped 4\npopping&nbsp;3: min in the stack is&nbsp;1. popped 3\npopping 2: min in the stack is 1. popped 2\npopping 1: min in the stack is 1. popped 1\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: A[] = [1 6 43 1 2 0 5]\n<strong>Output</strong>: 0 0 1 1 1 1 1\n<strong>Explanation</strong>: \nAfter pushing the elements to the stack, \nthe stack will be 5-&gt;0-&gt;2-&gt;1-&gt;43-&gt;6-&gt;1. \nNow, poping the elements from the stack:\npopping 5: min in the stack is 0. popped 5\npopping 0: min in the stack is 0. popped 0\npopping 2: min in the stack is 1. popped 2\npopping 1: min in the stack is 1. popped 1\npopping 43: min in the stack is 1. popped 43\npopping 6: min in the stack is 1. popped 6\npopping 1: min in the stack is 1. popped 1.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">0 &lt;= A<sub>i</sub> &lt;= 10<sup>7</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array A[], push all elements onto a stack. After pushing, repeatedly pop elements from the stack. After each pop operation, determine the minimum element currently present in the stack and print it.",
                "constraints": [
                    "0 <= A[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5]",
                        "output": "1 1 1 1 1",
                        "explanation": "Elements are pushed onto the stack in the order 1, 2, 3, 4, 5 (bottom to top). When popping 5, the remaining stack is 1, 2, 3, 4 and the minimum is 1. Similarly, when popping 4, the minimum remains 1 and so on, until only 1 is left and popped."
                    },
                    {
                        "input": "[1, 6, 43, 1, 2, 0, 5]",
                        "output": "0 0 1 1 1 1 1",
                        "explanation": "The stack contains 1, 6, 43, 1, 2, 0, 5 (bottom to top). Popping 5 leaves 1, 6, 43, 1, 2, 0, the minimum is 0. Popping 0 leaves 1, 6, 43, 1, 2 and the minimum is 1. Subsequent pops until all elements are removed also yield a minimum of 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\n\r\n//Function to push all the elements into the stack.\r\nstack<int> _push(int arr[],int n)\r\n{\r\n    stack <int>s;\r\n    \r\n    //iterating over the array elements and pushing them into the stack.\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        s.push(arr[i]);\r\n    }\r\n    return s;\r\n}\r\n\r\n//Function to print minimum value in stack each time while popping.\r\nvoid _getMinAtPop(stack<int>s)\r\n{\r\n    std::vector<int>v;\r\n    \r\n    //pushing all the elements of stack in a list.\r\n    while(!s.empty())\r\n    {\r\n        v.push_back(s.top());\r\n        s.pop();\r\n    }\r\n    stack<int>minStack;\r\n    \r\n    //pushing the last element of list in original stack and minStack.\r\n    s.push(v.back());\r\n    minStack.push(v.back());\r\n    \r\n    //iterating over the list from second last element in backward direction.\r\n    for(int i=v.size()-2;i>=0;i--)\r\n    {\r\n        //pushing the current element in original stack.\r\n        s.push(v[i]);\r\n        \r\n        //comparing the top element of original stack with top element of \r\n        //minStack and pushing the minimum value into minStack.\r\n        if(s.top()<minStack.top())\r\n        minStack.push(s.top());\r\n        else\r\n        minStack.push(minStack.top());\r\n    }\r\n    \r\n    //printing all the elements in minstack one by one.\r\n    while(!s.empty())\r\n    {\r\n        cout<<minStack.top()<<\" \";\r\n        s.pop();\r\n        minStack.pop();\r\n    }\r\n    \r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\nclass GetMin\r\n{\r\n    //Function to push all the elements into the stack.\r\n    public static Stack<Integer> _push(int arr[],int n)\r\n    {\r\n        Stack <Integer>s = new Stack<>();\r\n        \r\n        //iterating over the array elements and pushing them into the stack.\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            s.push(arr[i]);\r\n        }\r\n        return s;\r\n    }\r\n    \r\n    //Function to print minimum value in stack each time while popping.\r\n    static void _getMinAtPop(Stack<Integer>s)\r\n    {\r\n        ArrayList<Integer>v = new ArrayList<>();\r\n    \r\n        //pushing all the elements of stack in a list.\r\n        while(!s.isEmpty())\r\n        {\r\n            v.add(s.peek());\r\n            s.pop();\r\n        }\r\n        \r\n        Stack<Integer>minStack = new Stack<>();\r\n        \r\n        //pushing the last element of list in original stack and minStack.\r\n        s.push(v.get(v.size()-1));\r\n        minStack.push(v.get(v.size()-1));\r\n        \r\n        //iterating over list from second last element in backward direction.\r\n        for(int i=v.size()-2;i>=0;i--)\r\n        {\r\n            //pushing the current element in original stack.\r\n            s.push(v.get(i));\r\n            \r\n            //comparing the top element of original stack with top element of \r\n            //minStack and pushing the minimum value into minStack.\r\n            if(s.peek()<minStack.peek())\r\n            minStack.push(s.peek());\r\n            else\r\n            minStack.push(minStack.peek());\r\n        }\r\n    \r\n        //printing all the elements in minstack one by one.\r\n        while(!s.isEmpty())\r\n        {\r\n            System.out.print(minStack.peek() + \" \");\r\n            s.pop();\r\n            minStack.pop();\r\n        }\r\n        \r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom collections import deque\r\n\r\n#Function to push all the elements into the stack.\r\ndef _push(a,n):\r\n    stack = deque()\r\n    \r\n    #iterating over the array elements and pushing them into the stack.\r\n    for i in a:\r\n        stack.append(i)\r\n    return stack\r\n\r\n#Function to print minimum value in stack each time while popping.\r\ndef _getMinAtPop(stack):\r\n    \r\n    reverseStack = deque()\r\n    #storing the stack elements in reverse order in reverseStack.\r\n    while len(stack):\r\n        reverseStack.append( stack.pop() )\r\n    \r\n    #now stack will be used as minStack:\r\n    stack.append( reverseStack.pop() )\r\n    \r\n    while len(reverseStack):\r\n        \r\n        #comparing the top element of original stack with top element of \r\n        #reverseStack and pushing the minimum value into stack.\r\n        if stack[-1] < reverseStack[-1]:\r\n            stack.append( stack[-1] )\r\n            reverseStack.pop()\r\n        else:\r\n            stack.append(reverseStack.pop())\r\n    \r\n    #printing all the elements in stack one by one.\r\n    while len(stack):\r\n        print(stack.pop(),end=' ')\r\n    \r\n\r\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Function to push all the elements into the stack.\n    public Stack<int> _push(int[] arr, int n)\n    {\n        Stack<int> s = new Stack<int>();\n        \n        //iterating over the array elements and pushing them into the stack.\n        for(int i=0;i<n;i++)\n        {\n            s.Push(arr[i]);\n        }\n        return s;\n    }\n\n    //Function to print minimum value in stack each time while popping.\n    public void _getMinAtPop(Stack<int> s)\n    {\n        List<int> v = new List<int>();\n        \n        //pushing all the elements of stack in a list.\n        while(s.Count > 0)\n        {\n            v.Add(s.Peek());\n            s.Pop();\n        }\n        Stack<int> minStack = new Stack<int>();\n        \n        //pushing the last element of list in original stack and minStack.\n        s.Push(v[v.Count-1]);\n        minStack.Push(v[v.Count-1]);\n        \n        //iterating over the list from second last element in backward direction.\n        for(int i=v.Count-2;i>=0;i--)\n        {\n            //pushing the current element in original stack.\n            s.Push(v[i]);\n            \n            //comparing the top element of original stack with top element of \n            //minStack and pushing the minimum value into minStack.\n            if(s.Peek() < minStack.Peek())\n                minStack.Push(s.Peek());\n            else\n                minStack.Push(minStack.Peek());\n        }\n        \n        //printing all the elements in minstack one by one.\n        while(s.Count > 0)\n        {\n            Console.Write(minStack.Peek() + \" \");\n            s.Pop();\n            minStack.Pop();\n        }\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n\r\nclass Solution \r\n{\r\n    //Function to push all the elements into the stack.\r\n    _push(arr, n)\r\n    {\r\n        let s = new Stack();\r\n        //iterating over the array elements and pushing them into the stack.\r\n        for(let i=0;i<n;i++)\r\n        {\r\n            s.arr.push(arr[i]);\r\n            s.top++;\r\n        }\r\n        return s;\r\n    }\r\n    \r\n    //Function to print minimum value in stack each time while popping.\r\n    _getMinAtPop(s)\r\n    {\r\n        let v = [];\r\n        \r\n        //pushing all the elements of stack in a list.\r\n        while(s.top !== -1)\r\n        {\r\n            v.push(s.arr[s.top]);\r\n            s.arr.pop();\r\n            s.top--;\r\n        }\r\n        \r\n        let minStack = new Stack();\r\n        \r\n        //pushing the last element of list in original stack and minStack.\r\n        s.arr.push(v[v.length - 1]);\r\n        s.top++;\r\n        minStack.arr.push(v[v.length - 1]);\r\n        minStack.top++;\r\n        \r\n        //iterating over list from second last element in backward direction.\r\n        for(let i=v.length-2;i>=0;i--)\r\n        {\r\n            //pushing the current element in original stack.\r\n            s.arr.push(v[i]);\r\n            s.top++;\r\n            \r\n            //comparing the top element of original stack with top element of \r\n            //minStack and pushing the minimum value into minStack.\r\n            if(s.arr[s.top]<minStack.arr[minStack.top])\r\n            {\r\n                minStack.arr.push(s.arr[s.top]);\r\n                minStack.top++;\r\n            }\r\n            else\r\n            {\r\n                minStack.arr.push(minStack.arr[minStack.top]);\r\n                minStack.top++;\r\n            }\r\n        }\r\n        \r\n        let str = '';\r\n        //printing all the elements in minstack one by one.\r\n        while(s.top !== -1)\r\n        {\r\n            str+=minStack.arr[minStack.top]+\" \";\r\n            s.arr.pop();\r\n            s.top--;\r\n            minStack.arr.pop();\r\n            minStack.top--;\r\n        }\r\n        console.log(str);\r\n    }\r\n    \r\n    \r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}