{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700278,
            "title": "Get Min from Stack",
            "titleSlug": "get-minimum-element-from-stack",
            "content": "<p><span >Given <strong>q</strong> queries,&nbsp;</span><span style=\"font-size: 18.6667px;\">You task is to implement the following <strong>four</strong> functions for a stack:</span></p>\n<ul>\n<li style=\"text-align: left;\"><span style=\"font-size: 18.6667px;\"><strong>push(x) &ndash; </strong>Insert an integer x onto the stack.</span></li>\n<li style=\"text-align: left;\"><span style=\"font-size: 18.6667px;\"><strong>pop() &ndash; </strong>Remove the top element from the stack.</span></li>\n<li style=\"text-align: left;\"><span style=\"font-size: 18.6667px;\"><strong>peek() - </strong>Return the top element&nbsp;</span><span style=\"font-size: 18.6667px;\"><span style=\"font-size: 18.6667px;\">from the stack.</span><strong><strong style=\"font-size: 18.6667px;\">&nbsp;</strong><span style=\"font-family: monospace; font-size: 18.6667px; font-weight: 400;\">If the stack is empty, return -1.</span><br /></strong></span></li>\n<li style=\"text-align: left;\"><span style=\"font-size: 18.6667px;\"><strong>getMin() &ndash; </strong>Retrieve the minimum element from the stack in O(1) time. If the stack is empty, return -1.</span></li>\n</ul>\n<p><span >Each query can be one of the following:</span></p>\n<ul>\n<li><span ><strong>1 x</strong> : Push x onto the stack.</span></li>\n<li><span ><strong>2 :</strong> Pop the top element from the stack.</span></li>\n<li><span style=\"font-family: monospace;\"><span style=\"font-size: 18.6667px;\"><strong>3:</strong> Return the top element from the stack. If the stack is empty, return -1.</span></span></li>\n<li><span style=\"font-family: monospace;\"><span style=\"font-size: 18.6667px;\"><strong>4:</strong> Return the minimum element from the stack.</span></span></li>\n</ul>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> q = 7, queries = [[1, 2], [1, 3], [3], [2], [4], [1, 1], [4]]<strong>\nOutput: </strong>[3, 2, 1]<strong>\nExplanation: </strong>\npush(2): Stack is [2]\npush(3): Stack is [2, 3]\npeek(): Top element is 3\npop(): Removes 3, stack is [2]\ngetMin(): Minimum element is 2\npush(1): Stack is [2, 1]\ngetMin(): Minimum element is 1</span></pre>\n<pre><span ><strong >Input:</strong><span > q = 4, queries = [[1, 4], [1, 2], [4], [3]]</span><strong >\nOutput: </strong><span >[2, 2]</span><strong >\nExplanation: <br /></strong><span style=\"font-size: 18.6667px;\">push(4): Stack is [4]\npush(2): Stack is [4, 2]</span><span ><br /></span><span style=\"font-size: 18.6667px;\">getMin(): Minimum element is 2</span><span ><br /></span><span style=\"font-size: 18.6667px;\">peek(): Top element is 2</span></span></pre>\n<pre><span ><strong >Input:</strong><span > q = 5, queries = [[1, 10], [4], [1, 5], [4], [2]]</span><strong >\nOutput: </strong><span >[10, 5]</span><strong >\nExplanation: <br /></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><span style=\"font-size: 18.6667px;\">push(10): Stack is [10]</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, sans-serif;\"><span ><br /></span></span></span></span><span style=\"font-size: 18.6667px;\">getMin(): Minimum element is 10</span><br /><span ><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><span style=\"font-size: 18.6667px;\">push(5): Stack is [10, 5]</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, sans-serif;\"><span ><br /></span></span></span></span><span style=\"font-size: 18.6667px;\">getMin(): Minimum element is 5</span><br /><span style=\"font-size: 18.6667px;\">pop(): Removes 5, stack is [10]</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= q &lt;= 10<sup>5</sup><br />0 &lt;= values on the stack &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >1. Define a variable <strong>minEle</strong> that stores the current minimum element in the stack. When a minEle is removed fromt he stack, we push &ldquo;2x &ndash; minEle&rdquo; into the stack instead of x so that previous minimum element can be retrieved using current minEle and its value stored in stack.</span></p>\n<p><span ><strong>Push(x)</strong> : Inserts x at the top of stack.</span></p>\n<ul>\n<li><span >If stack is empty, insert x into the stack and make minEle equal to x.</span></li>\n<li><span >If stack is not empty, compare x with minEle. Two cases arise:</span>\n<ul>\n<li><span >If x is greater than or equal to minEle, simply insert x.</span></li>\n<li><span >If x is less than minEle, insert (2*x &ndash; minEle) into the stack and make minEle equal to x. </span></li>\n</ul>\n</li>\n</ul>\n<p><span ><strong>Pop() : </strong> Removes an element from top of stack.</span></p>\n<ul>\n<li><span >Remove element from top. Let the removed element be y. Two cases arise:</span>\n<ul>\n<li><span >If y is greater than or equal to minEle, the minimum element in the stack is still minEle.</span></li>\n<li><span >If y is less than minEle, the minimum element now becomes (2*minEle &ndash; y), update (minEle = 2*minEle &ndash; y). Now retrieve previous minimum from current minimum and its value in stack.</span></li>\n</ul>\n</li>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "snapdeal",
            "d-e-shaw",
            "factset",
            "walmart",
            "goldman-sachs",
            "sap-labs",
            "sapient",
            "one97",
            "greyorange",
            "kuliza"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  private:\n    stack<int> s;\n    int minEle;\n\n  public:\n    Solution() { minEle = -1; }\n\n    // Add an element to the top of Stack\n    void push(int x) {\n        if (s.empty()) {\n            minEle = x;\n            s.push(x);\n        }\n\n        // If new number is less than minEle\n        else if (x < minEle) {\n            s.push(2 * x - minEle);\n            minEle = x;\n        }\n\n        else {\n            s.push(x);\n        }\n    }\n\n    // Remove the top element from the Stack\n    void pop() {\n        if (s.empty()) {\n            return;\n        }\n\n        int top = s.top();\n        s.pop();\n\n        // Minimum will change, if the minimum element\n        // of the stack is being removed.\n        if (top < minEle) {\n            minEle = 2 * minEle - top;\n        }\n    }\n\n    // Returns top element of the Stack\n    int peek() {\n        if (s.empty()) {\n            return -1;\n        }\n\n        int top = s.top();\n\n        // If minEle > top means minEle stores value of top.\n        return (minEle > top) ? minEle : top;\n    }\n\n    // Finds minimum element of Stack\n    int getMin() {\n        if (s.empty())\n            return -1;\n\n        // variable minEle stores the minimum element\n        // in the stack.\n        return minEle;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    int minEle;       // variable to store the minimum element\n    Stack<Integer> s; // stack to store the elements\n\n    public Solution() {\n        s = new Stack<>();\n        minEle = -1;\n    }\n\n    // Add an element to the top of Stack\n    public void push(int x) {\n        if (s.isEmpty()) {\n            minEle = x;\n            s.push(x);\n        }\n        // If new number is less than minEle\n        else if (x < minEle) {\n            s.push(2 * x - minEle);\n            minEle = x;\n        } else {\n            s.push(x);\n        }\n    }\n\n    // Remove the top element from the Stack\n    public void pop() {\n        if (s.isEmpty()) {\n            return;\n        }\n\n        int top = s.pop();\n\n        // Minimum will change, if the minimum element\n        // of the stack is being removed.\n        if (top < minEle) {\n            minEle = 2 * minEle - top;\n        }\n    }\n\n    // Returns top element of the Stack\n    public int peek() {\n        if (s.isEmpty()) {\n            return -1;\n        }\n\n        int top = s.peek();\n\n        // If minEle > top means minEle stores value of top.\n        return (minEle > top) ? minEle : top;\n    }\n\n    // Finds minimum element of Stack\n    public int getMin() {\n        if (s.isEmpty()) {\n            return -1;\n        }\n\n        // variable minEle stores the minimum element\n        // in the stack.\n        return minEle;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def __init__(self):\n        self.s = []\n        self.minEle = -1\n\n    # Add an element to the top of Stack\n    def push(self, x):\n        if not self.s:\n            self.minEle = x\n            self.s.append(x)\n        # If new number is less than minEle\n        elif x < self.minEle:\n            self.s.append(2 * x - self.minEle)\n            self.minEle = x\n        else:\n            self.s.append(x)\n\n    # Remove the top element from the Stack\n    def pop(self):\n        if not self.s:\n            return\n\n        top = self.s.pop()\n\n        # Minimum will change, if the minimum element\n        # of the stack is being removed.\n        if top < self.minEle:\n            self.minEle = 2 * self.minEle - top\n\n    # Returns top element of Stack\n    def peek(self):\n        if not self.s:\n            return -1\n\n        top = self.s[-1]\n\n        # If minEle > top means minEle stores value of top.\n        return self.minEle if self.minEle > top else top\n\n    # Finds minimum element of Stack\n    def getMin(self):\n        if not self.s:\n            return -1\n\n        # variable minEle stores the minimum element\n        # in the stack.\n        return self.minEle\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() {\n        this.s = [];\n        this.minEle = -1;\n    }\n\n    // Add an element to the top of Stack\n    push(x) {\n        if (this.s.length === 0) {\n            this.minEle = x;\n            this.s.push(x);\n        }\n        // If new number is less than minEle\n        else if (x < this.minEle) {\n            this.s.push(2 * x - this.minEle);\n            this.minEle = x;\n        } else {\n            this.s.push(x);\n        }\n    }\n\n    // Remove the top element from the Stack\n    pop() {\n        if (this.s.length === 0) {\n            return;\n        }\n\n        let top = this.s.pop();\n\n        // Minimum will change, if the minimum element\n        // of the stack is being removed.\n        if (top < this.minEle) {\n            this.minEle = 2 * this.minEle - top;\n        }\n    }\n\n    // Returns top element of Stack\n    peek() {\n        if (this.s.length === 0) {\n            return -1;\n        }\n\n        let top = this.s[this.s.length - 1];\n\n        // If minEle > top means minEle stores value of top.\n        return this.minEle > top ? this.minEle : top;\n    }\n\n    // Finds minimum element of Stack\n    getMin() {\n        if (this.s.length === 0) {\n            return -1;\n        }\n\n        // variable minEle stores the minimum element\n        // in the stack.\n        return this.minEle;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}