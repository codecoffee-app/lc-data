{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704567,
            "title": "k-th smallest number using digits of a given number",
            "titleSlug": "get-the-kth-smallest-number-using-the-digits-of-the-given-number5440",
            "content": "<p><span style=\"font-size:18px\">Given a non-negative number&nbsp;<strong>num</strong> in the form of string and a value&nbsp;<strong>k</strong>. Find the&nbsp;<strong>k-th</strong>&nbsp;smallest number that can be formed using the digits of the given number&nbsp;<strong>num</strong>. It is guaranteed that the&nbsp;<strong>k-th</strong>&nbsp;smallest number can be formed. </span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>num = &quot;1234&quot;, k = 2\r\n<strong>Output: </strong>1243\r\n<strong>Explanation: </strong>1234 is the smallest number.\r\nFor k = 2 num will be 1243.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>num = &quot;36012679802&quot;, k = 5\r\n<strong>Output: </strong>10022366897\r\n<strong>Explanation: </strong>5th smallest number is \r\n10022366897.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>kthSmallestNumber()</strong>&nbsp;which takes the number and k as input parameter and returns the kth smallest number.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n*k) where n is length of number.<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>Constant Space.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= |num| &lt;= 1000<br />\r\n1 &lt;= k &lt;= 10</span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative number `num` in the form of a string and a value `k`, find the `k-th` smallest number that can be formed using the digits of the given number `num`. It is guaranteed that the `k-th` smallest number can be formed.",
                "constraints": [
                    "1 <= |num| <= 1000",
                    "1 <= k <= 10"
                ],
                "testcases": [
                    {
                        "input": "num = \"1234\", k = 2",
                        "output": "1243",
                        "explanation": "The smallest number that can be formed is 1234. The second smallest (k=2) is 1243."
                    },
                    {
                        "input": "num = \"36012679802\", k = 5",
                        "output": "10022366897",
                        "explanation": "The 5th smallest number that can be formed using the digits of 36012679802 is 10022366897."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use next_permutaion()</p>"
        ],
        "relatedTopics": [
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\nclass Solution{\r\n\tpublic:\r\n\tchar getSmallDgtGreaterThanZero(string num, int n)\r\n\t{\r\n\t    // 's_dgt' to store the smallest digit\r\n\t    // greater than 0\r\n\t        char s_dgt = '9';\r\n\t     \r\n\t    for (int i=0; i<n; i++)\r\n\t        if (num[i] < s_dgt && num[i] != '0')\r\n\t            s_dgt = num[i];\r\n\t     \r\n\t    // required smallest digit in 'num'\r\n\t    return s_dgt;\r\n\t}\r\n\tstring kthSmallestNumber(string num, int k)\r\n\t{\r\n\t    // FIND SMALLEST POSSIBLE NUMBER BY SORTING\r\n\t    // DIGITS\r\n\t \r\n\t    // count frequency of each digit\r\n\t    int freq[10];\r\n\t    string final_num = \"\";\r\n\t \r\n\t    memset(freq, 0, sizeof(freq));\r\n\t    int n = num.size();\r\n\t \r\n\t    // counting frequency of each digit\r\n\t    for (int i = 0; i < n; i++)\r\n\t        freq[num[i] - '0']++;\r\n\t     \r\n\t    // get the smallest digit greater than 0\r\n\t    char s_dgt = getSmallDgtGreaterThanZero(num, n);    \r\n\t     \r\n\t    // add 's_dgt' to 'final_num'\r\n\t    final_num += s_dgt;\r\n\t     \r\n\t    // reduce frequency of 's_dgt' by 1 in 'freq'\r\n\t    freq[s_dgt - '0']--;\r\n\t     \r\n\t    // add each digit according to its frequency\r\n\t    // to 'final_num'\r\n\t    for (int i=0; i<10; i++)\r\n\t        for (int j=1; j<=freq[i]; j++)\r\n\t            final_num += (char)(i+48);    \r\n\t     \r\n\t    // FIND K-TH PERMUTATION OF SMALLEST NUMBER\r\n\t    for (int i=1; i<k; i++)\r\n\t      next_permutation(final_num.begin(), final_num.end());\r\n\t     \r\n\t    // required kth smallest number\r\n\t    return final_num;\r\n\t}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}