{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703445,
            "title": "Gift distribution according to preference",
            "titleSlug": "gifts-gifts-gifts1524",
            "content": "<p><span style=\"font-size:18px\">Geek wants to distribute gifts to N students. He buys N gifts and asks his students to make a list of gifts arranged in order of their preference. Each student has a unique rank based on their performance in Geek&#39;s class. The gifts are distributed based on a student&#39;s rank and gift preference. The list submitted by a student with a better rank is given more importance. Find what gift each student gets.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\nArr[][] = { {Preference list of student 1},\r\n\\t\\t{Preference list of student 2},\r\n\\t\\t{Preference list of student 3},}\r\n\\t  = {{1, 3, 2}, {2, 1, 3}, {3, 1, 2}}\r\n<strong>Output: </strong>1 2 3\r\n<strong>Explanation:</strong> According to the gift preference \r\nof child with rank 1, he gets gift 1. Rank 2 \r\nprefers gift 2 and gets that. Rank 3 prefers \r\ngift 3 and gets that.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\nArr[][] = { {Preference list of student 1},\r\n\\t\\t{Preference list of student 2},\r\n\\t\\t{Preference list of student 3},}\r\n\\t  = {{1, 2, 3}, {3, 2, 1}, {1, 2, 3}}\r\n<strong>Output:</strong> 1 3 2\r\n<strong>Explanation:</strong> According to the gift preference \r\nof child with rank 1, he gets gift 1. Rank 2 \r\nprefers gift 3 and gets that. Rank 3 prefers \r\ngift 1 but that was given to student with rank 1. \r\nSecond on his list is gift 2 so he gets that.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>distributeGift()</strong> which takes the 2D array of integers arr and n as input parameters and returns an array of integers of size N denoting the gift that each student got in order of their ranks.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>3</sup><br />\r\nPreference of each child is a permutation [1, N]</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Keep track of available gifts using a set of integers. Go through the preferences of each child and check if the gift is present in the available gifts, if available then assign the gift to i&#39;th child and remove from availble gift set.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n    //Function to Distribute Gifts\n    vector<int> distributeGift(vector<int> arr[], int n) {\n        //Creating a set to store the available gifts\n        set<int> available;\n        \n        //Adding all the gifts to the set\n        for (int i = 1; i <= n; i++) {\n            available.insert(i);\n        }\n        \n        //Creating a vector to store the distributed gifts\n        vector<int> gifts;\n        \n        //Iterating through the given array\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                \n                //Checking if the current gift is available\n                if (available.find(arr[i][j]) != available.end()) {\n                    \n                    //Adding the gift to the distribution vector\n                    gifts.push_back(arr[i][j]);\n                    \n                    //Removing the gift from the available set\n                    available.erase(arr[i][j]);\n                    \n                    //Moving to the next row\n                    break;\n                }\n            }\n        }\n        \n        //Returning the distributed gifts\n        return gifts;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int[] distributeGift(int[,] arr, int n)\n    {\n        //Creating a set to store the available gifts\n        SortedSet<int> available = new SortedSet<int>();\n\n        //Adding all the gifts to the set\n        for (int i = 1; i <= n; i++)\n        {\n            available.Add(i);\n        }\n\n        //Creating a list to store the distributed gifts\n        List<int> gifts = new List<int>();\n\n        //Iterating through the given array\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n\n                //Checking if the current gift is available\n                if (available.Contains(arr[i,j]))\n                {\n\n                    //Adding the gift to the distribution list\n                    gifts.Add(arr[i,j]);\n\n                    //Removing the gift from the available set\n                    available.Remove(arr[i,j]);\n\n                    //Moving to the next row\n                    break;\n                }\n            }\n        }\n\n        //Returning the distributed gifts as an array\n        return gifts.ToArray();\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}