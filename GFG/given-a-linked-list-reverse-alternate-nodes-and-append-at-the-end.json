{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700006,
            "title": "Reverse alternate nodes in Link List",
            "titleSlug": "given-a-linked-list-reverse-alternate-nodes-and-append-at-the-end",
            "content": "<p><span style=\"font-size: 12pt;\">Given a linked list, you have to perform&nbsp;the following task:</span></p>\n<ol>\n<li><span style=\"font-size: 12pt;\">Extract the alternative nodes starting from the second node.</span></li>\n<li><span style=\"font-size: 12pt;\">Reverse the extracted list.</span></li>\n<li><span style=\"font-size: 12pt;\">Append the extracted list at the end of the original list.</span></li>\n</ol>\n<p><span style=\"font-size: 12pt;\"><strong>Note</strong>: Try to solve the problem without using any extra memory.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>LinkedList: 10-&gt;4-&gt;9-&gt;1-&gt;3-&gt;5-&gt;9-&gt;4\n<strong>Output: </strong>10-&gt;9-&gt;3-&gt;9-&gt;4-&gt;5-&gt;1-&gt;4<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700006/Web/Other/blobid0_1723815304.png\" width=\"417\" height=\"94\" /><strong>\nExplanation: </strong>Alternative nodes in the given linked list are 4,1,5,4. Reversing the alternative nodes from the given list, and then appending them to the end of the list results in a list 10-&gt;9-&gt;3-&gt;9-&gt;4-&gt;5-&gt;1-&gt;4.\n</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5\n<strong>Output: </strong>1-&gt;3-&gt;5-&gt;4-&gt;2 <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700006/Web/Other/blobid1_1723815319.png\" width=\"417\" height=\"94\" /><strong>\nExplanation: </strong>Alternative nodes in the given linked list are 2 and 4. Reversing the alternative nodes from the given list, and then appending them to the end of the list results in a list of 1-&gt;3-&gt;5-&gt;4-&gt;2.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Space&nbsp;</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Complexity</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;O(1)</span></span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &lt;= size of linked list &lt;= 10<sup>6</sup><br />0 &lt;= Node_value &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try connecting all odd nodes, and reverse all even nodes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "walmart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void rearrange(Node* odd) {\n        if (odd == NULL || odd->next == NULL || odd->next->next == NULL)\n            // for less than 3 nodes, no rearrangement is required\n            return;\n\n        Node* even = odd->next;      // even points at the second node\n        odd->next = odd->next->next; // placing third node after first\n        odd = odd->next;             // odd now points to the third node\n        even->next = NULL;           // placing NULL after the second node\n\n        while (odd && odd->next) {\n            Node* temp = odd->next->next; // next odd node\n            odd->next->next = even;       // connecting next even node to even\n            even = odd->next;             // moving to next even node\n            odd->next = temp;             // connecting odd to next odd node\n\n            if (temp != NULL)\n                odd = temp;\n        }\n        odd->next = even;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static void rearrange(Node odd) {\n        // If the list has less than 3 nodes, no rearrangement needed\n        if (odd == null || odd.next == null || odd.next.next == null) return;\n\n        Node even = odd.next;\n        // Rearrange the list by swapping nodes\n        odd.next = odd.next.next;\n        odd = odd.next;\n        even.next = null;\n\n        while (odd != null && odd.next != null) {\n            // Swap nodes to rearrange the list\n            Node temp = odd.next.next;\n            odd.next.next = even;\n            even = odd.next;\n            odd.next = temp;\n\n            // Move odd pointer to the next node\n            if (temp != null) odd = temp;\n        }\n\n        // Connect the last node of odd list with the even list\n        odd.next = even;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\"\"\"\nreverse alternate nodes and append at the end\nThe input list will have at least one element\nNode is defined as\nclass Node:\n\n\t# Constructor to initialize the node object\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.next = None\n\n\"\"\"\n\n\nclass Solution:\n\n    def rearrange(self, head):\n        # Code here\n\n        #initialize the odd pointer as head\n        odd = head\n\n        #if the list contains less than 3 elements, no rearrangement required\n        if (odd is None or odd.next is None or odd.next.next is None):\n            return\n\n        #initialize the even pointer as the next element of the odd pointer\n        even = odd.next\n\n        #break the links between odd and even nodes\n        odd.next = odd.next.next\n        odd = odd.next\n        even.next = None\n\n        #iterate through the remaining nodes and rearrange the links\n        while (odd and odd.next):\n            temp = odd.next.next\n            odd.next.next = even\n            even = odd.next\n            odd.next = temp\n            if temp is not None:\n                odd = temp\n\n        #append the even nodes at the end of the list\n        odd.next = even\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    rearrange(head) {\n        // Check if the list is empty or has less than three nodes, then no\n        // rearrangement is needed.\n        if (head == null || head.next == null || head.next.next == null) return;\n\n        // Initialize pointers for odd and even nodes.\n        let odd = head;       // Start with the first node.\n        let even = head.next; // Start with the second node.\n\n        // Move the odd pointer to the third node and disconnect the even pointer.\n        head.next = head.next.next;\n        odd = head.next;  // Now, odd points to the third node.\n        even.next = null; // Disconnect the second node from the third.\n\n        // Traverse the list and rearrange the nodes.\n        while (odd && odd.next) {\n            let temp = odd.next.next; // Store the next odd node.\n\n            odd.next.next =\n                even; // Link the current odd node's next to the previous even node.\n            even = odd.next; // Move the even pointer to the current odd node's next.\n            odd.next = temp; // Move the odd pointer's next to the next odd node.\n\n            // If there's another node in the sequence, move the odd pointer to it.\n            if (temp != null) odd = temp;\n        }\n\n        // Finally, connect the last odd node to the first even node.\n        odd.next = even;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}