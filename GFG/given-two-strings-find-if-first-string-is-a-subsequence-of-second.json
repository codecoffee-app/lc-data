{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706302,
            "title": "Check if a String is Subsequence of Other",
            "titleSlug": "given-two-strings-find-if-first-string-is-a-subsequence-of-second",
            "content": "<p><span style=\"font-size:18px\">Given two strings <strong>A</strong> and <strong>B</strong>, find if <strong>A</strong>&nbsp;is a subsequence of <strong>B</strong>. A subsequence is a sequence that can be derived from another sequence by&nbsp;deleting some elements without changing the order of the remaining elements.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nA = AXY \r\nB = YADXCP\r\n<strong>Output: </strong>False\r\n<strong>Explanation:</strong> A is not a subsequence of B\r\nas &#39;Y&#39; appears before &#39;A&#39;.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nA = gksrek\r\nB = geeksforgeeks\r\n<strong>Output:</strong> True\r\n<strong>Explanation: </strong>A is a subsequence of B.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\r\nYou dont need to read input or print anything. Complete the function&nbsp;<strong>isSubSequence()</strong>&nbsp;which takes A and B as input parameters and returns a boolean value denoting if A is a subsequence of B or not.&nbsp;</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N) where N is length of string B.<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;= |A|,|B| &lt;=10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings A and B, determine if A is a subsequence of B. A subsequence can be formed by deleting some elements from another sequence without altering the order of the remaining elements.",
                "constraints": [
                    "1 <= |A|, |B| <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "A = AXY\nB = YADXCP",
                        "output": "False",
                        "explanation": "The characters of A are not found in B in the same order. Specifically, 'Y' appears before 'A' in B, violating the subsequence requirement."
                    },
                    {
                        "input": "A = gksrek\nB = geeksforgeeks",
                        "output": "True",
                        "explanation": "All characters of A can be found in B in the correct order, making A a subsequence of B."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "python-strings",
                "slug": "python-strings"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to check if a string is subsequence of other string.\r\n    bool isSubSequence(string A, string B)\r\n    {\r\n        int i = 0, j = 0;\r\n        \r\n        //traversing both strings with two pointers.\r\n        while (i < B.length() && j < A.length())\r\n        {\r\n            //if current character matches in both string \r\n            //then we move ahead in first string.\r\n            if (A[j] == B[i])\r\n                j += 1;\r\n                \r\n            //moving ahead in second string.\r\n            i += 1;\r\n        }\r\n        \r\n        //if j pointer equals length of first string A then it\r\n        //is subsequence of B so we return true else false.\r\n        return (j == A.length());\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //Function to check if a string is subsequence of other string.\r\n    public static boolean isSubSequence(String A, String B)\r\n    {\r\n        int i = 0, j = 0;\r\n        \r\n        //traversing both strings with two pointers.\r\n        while (i < B.length() && j < A.length())\r\n        {\r\n            //if current character matches in both string \r\n            //then we move ahead in first string.\r\n            if (A.charAt(j) == B.charAt(i))\r\n                j += 1;\r\n            //moving ahead in second string.\r\n            i += 1;\r\n        }\r\n        \r\n        //if j pointer equals length of first string A then it\r\n        //is subsequence of B so we return true else false.\r\n        return (j == A.length());\r\n    }\r\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to check if a string is subsequence of other string.\r\n    def isSubSequence(self, A, B):\r\n        i = j = 0\r\n    \r\n        #traversing both strings with two pointers.\r\n        while i < len(B) and j < len(A):\r\n            \r\n            #if current character matches in both string \r\n            #then we move ahead in first string.\r\n            if A[j] == B[i]:\r\n                j += 1\r\n            #moving ahead in second string.\r\n            i+=1\r\n        \r\n        #if j pointer equals length of first string A then it\r\n        #is subsequence of B so we return true else false.\r\n        return j == len(A)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\r\n\r\n/**\r\n * @param {string} A\r\n * @param {string} B\r\n * @returns {bool}\r\n*/\r\n\r\nclass Solution{\r\n    isSubSequence(A, B){\r\n        let i = 0, j = 0;\r\n        \r\n        //traversing both strings with two pointers.\r\n        while (i < B.length && j < A.length)\r\n        {\r\n            //if current character matches in both string \r\n            //then we move ahead in first string.\r\n            if (A[j] == B[i])\r\n                j += 1;\r\n            //moving ahead in second string.\r\n            i += 1;\r\n        }\r\n        \r\n        //if j pointer equals length of first string A then it\r\n        //is subsequence of B so we return true else false.\r\n        return (j == A.length);\r\n        \r\n    }\r\n}\r\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}