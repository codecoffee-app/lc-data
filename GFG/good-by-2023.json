{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 852214,
            "title": "New Year Resolution",
            "titleSlug": "good-by-2023",
            "content": "<p><span >As the clock struck midnight on New Year's Eve, Geek bid farewell to the wasted moments of 2023, realizing the untapped potential of GFG's Problem of the Day. </span></p>\n<blockquote>\n<p><span ><strong>His 2024 resolution: Solve POTD every day.</strong></span></p>\n</blockquote>\n<p><span >Eager to earn coins for GFG Merchandise, Geek faces new rules:</span></p>\n<ol>\n<li><span ><strong>Earning Coin:</strong> Geek can accumulate coins[i] by solving the POTD on the ith day, where 1 &lt;= coins[i] &lt;= 2024 and the sum of coins &lt;= 2024.</span></li>\n<li><span ><strong>Merchandise Eligibility:</strong> To purchase merchandise, Geeks should solve <strong>atleast one POTD</strong> and the coins earned must be divisible by 20 or 24, or precisely equal to 2024.</span></li>\n</ol>\n<p><span >Geek's resolutions often fades over time. Realistically, he can only commit to active participation for N (where N &le; 366) days. Given the value of N and number of coins associated with each POTD, can Geek strategically solve some (or all) POTDs to become eligible for redeeming merchandise?</span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>Input:</strong></span><br /><span >N = 8</span><br /><span >coins = [5, 8, 9, 10, 14, 2, 3, 5]</span><br /><br /><span ><strong>Output: </strong>1</span><br /><br /><span ><strong>Explanation:</strong></span><br /><span >Geek can fulfill the criteria in many ways.</span><br /><span >One such way is to solve POTD on 4th and 5th day.</span><br /><span >Another way is to solve POTD on 1st, 4th and 8th day.</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input:<br /></strong></span><span >N = 5<br /></span><span >coins = [1, 2, 3, 4, 5]</span><br /><br /><span ><strong>Output: </strong>0</span><br /><br /><span ><strong>Explanation: </strong></span><span >There is no way Geek can become eligible.</span></pre>\n<p><span ><strong>Your Task:&nbsp;<br /></strong></span><span >You don't need to read input or print anything. Complete the function isPossible() which takes n and coins[ ] as input parameters and returns a boolean value.</span></p>\n<p><span ><strong>Expected Time Complexity:</strong> O(N*(Sum of coins))<br /></span><span ><strong>Expected Auxiliary Space: </strong>O(N*(Sum of coins))</span></p>\n<p><span ><strong>Constraints:<br /></strong></span><span >1 &lt;= N &lt;= 366<br /></span><span >1 &lt;= coins[i] &lt;= 2024<br /></span><span >1 &lt;= Sum of coins &lt;=&nbsp; 2024</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek aims to solve Problem of the Day (POTD) on GFG every day in 2024 to earn coins for merchandise. He earns coins[i] for solving the POTD on the ith day, with each coin value between 1 and 2024. The total coins earned should not exceed 2024. To be eligible for merchandise, Geek needs to solve at least one POTD and the total coins earned must be divisible by 20 or 24, or be exactly equal to 2024. Given N (the number of days Geek can commit, N <= 366) and the coin values for each day, determine if Geek can strategically solve some POTDs to become eligible for redeeming merchandise.",
                "constraints": [
                    "1 <= N <= 366",
                    "1 <= coins[i] <= 2024",
                    "1 <= Sum of coins <= 2024"
                ],
                "testcases": [
                    {
                        "input": "N = 8\ncoins = [5, 8, 9, 10, 14, 2, 3, 5]",
                        "output": "1",
                        "explanation": "Geek can solve POTD on the 4th and 5th days, earning 10 + 14 = 24 coins, which is divisible by 24. Another way is to solve the POTD on the 1st, 4th and 8th day, earning 5+10+5 = 20 coins which is divisible by 20."
                    },
                    {
                        "input": "N = 5\ncoins = [1, 2, 3, 4, 5]",
                        "output": "0",
                        "explanation": "There is no combination of days where the sum of coins is divisible by 20 or 24, or equal to 2024."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Similar to subset sum problem.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n    \n    public:\n    bool isPossible(int N, int coins[])\n    {\n        int sum=0;\n        for(int i=0;i<N;i++)\n            sum+=coins[i];\n    \n        vector<vector<bool>> isSum(N+1, vector<bool>(sum+1));\n        for (int i = 0; i <= N; i++)\n            isSum[i][0] = true;\n        for (int i = 1; i <= sum; i++)\n            isSum[0][i] = false;\n    \n        for (int i = 1; i <= N; i++)\n        {\n            for (int j = 1; j <= sum; j++)\n            {\n                if (j < coins[i - 1])\n                    isSum[i][j] = isSum[i - 1][j];\n                if (j >= coins[i - 1])\n                    isSum[i][j] = isSum[i - 1][j]\n                                   || isSum[i - 1][j - coins[i - 1]];\n            }\n        }\n    \n        for(int i=1;i<=sum;i++)\n        {\n            if((i%20==0 || i%24==0 || i==2024) && isSum[N][i])\n                return true;\n        }\n        return false;\n    }\n        \n};\n\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static boolean isPossible(int N, int[] coins) {\r\n        int sum = 0;\r\n        for (int i = 0; i < N; i++)\r\n            sum += coins[i];\r\n\r\n        boolean[][] isSum = new boolean[N + 1][sum + 1];\r\n        for (int i = 0; i <= N; i++)\r\n            isSum[i][0] = true;\r\n        for (int i = 1; i <= sum; i++)\r\n            isSum[0][i] = false;\r\n\r\n        for (int i = 1; i <= N; i++) {\r\n            for (int j = 1; j <= sum; j++) {\r\n                if (j < coins[i - 1])\r\n                    isSum[i][j] = isSum[i - 1][j];\r\n                if (j >= coins[i - 1])\r\n                    isSum[i][j] = isSum[i - 1][j] || isSum[i - 1][j - coins[i - 1]];\r\n            }\r\n        }\r\n\r\n        for (int i = 1; i <= sum; i++) {\r\n            if ((i % 20 == 0 || i % 24 == 0 || i == 2024) && isSum[N][i])\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\r\n\r\nclass Solution:\r\n    def isPossible(self, N: int, coins: List[int]) -> bool:\r\n        sum_val = sum(coins)\r\n        isSum = [[False] * (sum_val + 1) for _ in range(N + 1)]\r\n        \r\n        for i in range(N + 1):\r\n            isSum[i][0] = True\r\n        \r\n        for i in range(1, sum_val + 1):\r\n            isSum[0][i] = False\r\n        \r\n        for i in range(1, N + 1):\r\n            for j in range(1, sum_val + 1):\r\n                if j < coins[i - 1]:\r\n                    isSum[i][j] = isSum[i - 1][j]\r\n                if j >= coins[i - 1]:\r\n                    isSum[i][j] = isSum[i - 1][j] or isSum[i - 1][j - coins[i - 1]]\r\n        \r\n        for i in range(1, sum_val + 1):\r\n            if (i % 20 == 0 or i % 24 == 0 or i == 2024) and isSum[N][i]:\r\n                return True\r\n        \r\n        return False\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}