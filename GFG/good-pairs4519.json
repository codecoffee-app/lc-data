{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702774,
            "title": "Good Pairs",
            "titleSlug": "good-pairs4519",
            "content": "<p><span style=\"font-size:18px\">Given an array of positive integers of size N. Count the number of good&nbsp;pairs (i,j) such that:</span></p>\n\n<ul>\n\t<li><span style=\"font-size:18px\">1&le; i &le; N,</span></li>\n\t<li><span style=\"font-size:18px\">1&le; j &le; N</span></li>\n\t<li><span style=\"font-size:18px\">and <strong>arr<sub>i</sub> &lt; arr<sub>j</sub></strong>.</span></li>\n</ul>\n\n<p><span style=\"font-size:18px\"><strong>Example 1</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 2\narr[] = {2, 1}  \n<strong>Output: </strong>1\n<strong>Explanation : </strong>The only good pair is (2,1). \n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 3\narr[] = {2 ,3, 2}</span><span style=\"font-size:18px\"><strong>\nOutput</strong>: 2</span><span style=\"font-size:18px\"><strong>\nExplanation</strong>: The two good pairs are (2,3) \nand (3,2).\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>solve()</strong>&nbsp;which takes the array arr[] and its size N as inputs and returns the count of good&nbsp;pairs as described in the problem description.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>:&nbsp;O(N log N)<br />\n<strong>Expected Auxiliary Space</strong>:&nbsp;O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints</strong>:<br />\n1 &lt;= N &lt;= 10^5<br />\n1 &lt;= a[i] &lt;= 10^3</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use sorting and optimized searching.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n    public:\n    long long solve(int arr[], int n){\n    long long ret = 0LL;\n    \n    sort(arr , arr + n);\n    \n    for(int i = 0; i<n; i++){\n        // adding the number of elements greater than the current element\n        ret+=(int)(n-(upper_bound(arr , arr+n, arr[i]) - arr));\n    }\n    return ret;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end function to find the upper bound of a key in an array\nclass Solution \n{\n    int upperBound(int arr[], int n, int key)\n    {\n        int lo = 0, hi = n - 1;\n        int ind = n;\n        \n        //Perform binary search to find the upper bound of the key\n        while (lo <= hi)\n        {\n            int mid = (hi + lo) / 2;\n            \n            //If the middle element is less than or equal to the key\n            //Move the lower bound to mid+1\n            if (arr[mid] <= key) \n            {\n                lo = mid + 1;\n            }\n            //If the middle element is greater than the key\n            //Update ind to mid and move the upper bound to mid-1\n            else\n            {\n                ind = mid;\n                hi = mid - 1;\n            }\n        }\n        \n        //Return the index of the upper bound\n        return ind;\n    }\n    \n    long solve(int arr[], int n)\n    {\n        //Sort the array in ascending order\n        Arrays.sort(arr);\n        \n        long sol = 0;\n        for (int i = 0;i < n;i++)\n        {\n            //Calculate the number of elements greater than the current element\n            sol += n - upperBound(arr, n, arr[i]);\n        }\n        \n        //Return the total count of elements greater than each element in the array\n        return sol;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nimport bisect\nclass Solution:\n    #Function to find the number of pairs with sum greater than n.\n    def solve(self, arr : list, n : int):\n        #sorting the array\n        arr.sort()\n        ret = 0\n        \n        #iterating through each value in the array\n        for val in arr:\n            #counting the number of elements greater than val \n            #using bisect_right\n            ret += n - bisect.bisect_right(arr, val)\n        \n        #returning the total count of pairs with sum greater than n\n        return ret",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution {\n  solve(arr, n) {\n    // Complete this function\n    \n    arr.sort((a, b) => a - b);\n    let ret = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n      ret += n - binarySearch(arr, n, arr[i]);\n    }\n\n    return ret;\n  }\n}\n\nfunction binarySearch(arr, n, val) {\n  let left = 0;\n  let right = n;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] <= val) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return left;\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    public long solve(int[] arr, int n)\n    {\n        long ret = 0L;\n    \n        Array.Sort(arr);\n    \n        for(int i = 0; i < n; i++)\n        {\n            int idx = UpperBound(arr, arr[i]);\n            // adding the number of elements greater than the current element\n            ret += (long)(n - idx);\n        }\n        return ret;\n    }\n\n    public static int UpperBound(int[] arr, int value)\n    {\n        int left = 0, right = arr.Length;\n        while(left < right)\n        {\n            int mid = left + ((right - left) >> 1);\n            if(arr[mid] <= value) left = mid + 1;\n            else right = mid;\n        }\n        return left;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}