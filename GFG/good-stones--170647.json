{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713990,
            "title": "Good Stones",
            "titleSlug": "good-stones--170647",
            "content": "<p><span style=\"font-size: 18px;\">Geek is in a geekland which have a river and some stones in it. Initially geek can step on any stone. Each stone has a number on it representing the value of exact step geek can move. If the number is +ve then geeks can move right and if the number is -ve then geeks can move left. Bad Stones are defined as the stones in which if geeks steps, will reach a never ending loop whereas good stones are the stones which are safe from never ending loops. Return the number of <strong>good stones</strong> in river.</span></p>\n<p><span style=\"font-size: 18px;\">Example 1:</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> [2, 3, -1, 2, -2, 4, 1]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>3\n<strong>Explanation: </strong>Index 3, 5 and 6 are safe only. As index 1, 4, 2 forms a cycle and from index 0 you can go to index 2 which is part of cycle.\n</span><img style=\"height: 169px; width: 500px;\" src=\"https://media.geeksforgeeks.org/img-practice/good_stones_png-1663740812.png\" alt=\"\" />\n</pre>\n<p><span style=\"font-size: 18px;\">Example 2:</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> [1, 0, -3, 0, -5, 0]</span>\n<span style=\"font-size: 18px;\"><strong>Output: 2</strong>\n<strong>Explanation: </strong>Index 2 and 4 are safe only. As index 0, 1, 3, 5 form cycle.\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/713990/Web/Other/3500a2e3-a9d5-4957-a6c7-43ed30313c68_1685087994.jpg\" />\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span><br /><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function badStones() which takes integer <strong>n</strong> and&nbsp;an&nbsp;array <strong>arr </strong>as input, and return an interger value as the number of good stones. Here n is the lenght of arr.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>&nbsp;: O(N), N is the number of stones<br /><strong>Expected Auxiliary Space</strong>&nbsp;: O(N),&nbsp;N is the number of stones</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />&nbsp;&nbsp;&nbsp;1 &lt;= n&nbsp;&lt;&nbsp;10^5 (where n is the length of the array)<br />&nbsp; -1000 &lt;= arr[i] &lt; 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A geek is in a geekland with a river containing stones. The geek can initially step on any stone. Each stone has a number indicating the exact step the geek can move. A positive number allows movement to the right, while a negative number allows movement to the left. Bad stones lead to never-ending loops, while good stones are safe. Determine the number of good stones in the river.",
                "constraints": [
                    "1 <= n < 10^5 (where n is the length of the array)",
                    "-1000 <= arr[i] < 1000"
                ],
                "testcases": [
                    {
                        "input": "[2, 3, -1, 2, -2, 4, 1]",
                        "output": "3",
                        "explanation": "Indices 3, 5, and 6 are the only safe stones. Indices 1, 4, and 2 form a cycle, and from index 0, you can reach index 2, which is part of the cycle."
                    },
                    {
                        "input": "[1, 0, -3, 0, -5, 0]",
                        "output": "2",
                        "explanation": "Indices 2 and 4 are the only safe stones. Indices 0, 1, 3, and 5 form a cycle."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the concept of dynamic programming</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to recursively solve the problem of good stones.\n    int solve(int idx,int n,vector<int> &arr,vector<int> &dp){\n        //Base case: if index is out of bounds, return 1.\n        if(idx>=n or idx<0) return 1;\n        \n        //If the value at dp array is already calculated, return it.\n        if(dp[idx]!=-1) return dp[idx];\n        \n        //Initialization of dp array at idx as 0.\n        dp[idx]=0;\n        \n        //Recursive call to solve function with next index as current index + value at current index.\n        return dp[idx]=solve(idx+arr[idx],n,arr,dp);\n    }\n    \n    //Function to count the number of good stones.\n    int goodStones(int n,vector<int> &arr){\n        //Initialization of dp array with -1.\n        vector<int> dp(n,-1);\n        \n        //Loop to solve the problem for each stone.\n        for(int i=0;i<n;i++){\n            solve(i,n,arr,dp);\n        }\n        \n        //Returning the sum of all values in dp array as the result.\n        return accumulate(dp.begin(),dp.end(),0);\n    } \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static int dp[]; // define an array to store subproblem solutions\n    \n    // function to count the number of good stones\n    public static int goodStones(int n, int[] arr) {\n        dp = new int[n]; // initialize the dp array\n        Arrays.fill(dp, -1); // set all elements of dp to -1\n        \n        // iterate through the array\n        for(int i = 0; i < n; i++) {\n            // if the current element hasn't been calculated already\n            if(dp[i] == -1) {\n                dp[i] = fun(i, arr); // calculate its value using the fun function\n            }\n        }\n        \n        int ans = 0; // initialize a variable to store the count of good stones\n        for(int i : dp) {\n            if(i == 1) { // if the value in dp is 1, it means it's a good stone\n                ans++; // increment the count of good stones\n            }\n        }\n        return ans; // return the count of good stones\n    }\n    \n    // recursive function to calculate the value for each stone\n    public static int fun(int i, int arr[]) {\n        if(i < 0 || i >= arr.length) return 1; // base case: if index is out of bounds, return 1\n        if(dp[i] != -1) { // if the value has already been calculated, return it\n            return dp[i];\n        }\n        dp[i] = 0; // initialize dp[i] to 0\n        return dp[i] = fun(i + arr[i], arr); // calculate the value using the function recursively\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    # Function to recursively solve the problem\n    def solve(self,idx,n,arr,dp):\n        # Base case: if index is out of bounds, return 1\n        if idx>=n or idx<0:\n            return 1\n        # Check if the subproblem has already been solved, return the result if it has\n        if dp[idx]!=-1:\n            return dp[idx]\n        # Initialize dp[idx] as 0\n        dp[idx]=0\n        # Recursive call to solve the next subproblem\n        dp[idx]=self.solve(idx+arr[idx],n,arr,dp)\n        # Return the result of the current subproblem\n        return dp[idx]\n        \n    # Function to calculate the minimum number of good stones\n    def goodStones(self, n, arr) -> int:\n        # Initialize a dp array to store the results of subproblems\n        dp=[-1]*(n)\n        # Solve the problem for each starting index\n        for i in range(n):\n            self.solve(i,n,arr,dp)\n        # Return the sum of the dp array\n        return sum(dp)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number[]} arr\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the number of good stones.\n    goodStones(n, arr)\n    {\n        //Initialize a dp array to store the results of subproblems\n        let dp = new Array(n).fill(-1);\n        \n        //Function to recursively solve the problem\n        let solve = function(idx, n, arr, dp) {\n            //Base case: if index is out of bounds, return 1\n            if (idx >= n || idx < 0) {\n                return 1;\n            }\n            \n            //Check if the subproblem has already been solved, return the result if it has\n            if (dp[idx] != -1) {\n                return dp[idx];\n            }\n            \n            //Initialize dp[idx] as 0\n            dp[idx] = 0;\n            \n            //Recursive call to solve the next subproblem\n            dp[idx] = solve(idx + arr[idx], n, arr, dp);\n            \n            //Return the result of the current subproblem\n            return dp[idx];\n        }\n        \n        //Solve the problem for each starting index\n        for (let i = 0; i < n; i++) {\n            solve(i, n, arr, dp);\n        }\n        \n        //Return the sum of the dp array\n        return dp.reduce((total, val) => total + val, 0);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}