{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703268,
            "title": "Good String",
            "titleSlug": "good-string5712",
            "content": "<p><span style=\"font-size: 20px;\">Given a string <strong>s</strong>&nbsp;of length&nbsp;<strong>N</strong>,&nbsp;you have to tell whether it is good or not. A&nbsp;<em>good</em>&nbsp;string is one where the distance between <strong>every</strong>&nbsp;two adjacent character is exactly&nbsp;1. Here distance is defined by minimum distance between two character when alphabets from&nbsp;'<strong>a</strong>' to <strong>'z' </strong>are put in cyclic manner. For example distance between 'a' to 'c' is 2 and distance between 'a' to 'y' is also 2. The task is to return <strong>\"YES\"</strong> or <strong>\"NO\"&nbsp;</strong>(without quotes) depending on whether the given string is Good or not.</span></p>\n<p><strong><span >Note: </span></strong><span >Unit length string will be always good.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"aaa\"\n<strong>Output:</strong> NO\n<strong>Explanation:</strong> distance between 'a' and 'a' is not 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"cbc\"\n<strong>Output:</strong> YES\n<strong>Explanation:</strong> distance between 'b' and 'c' is 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>isGoodString()</strong> which accepts a string as input parameter and returns \"YES\" or \"NO\" (without quotes) accordingly.&nbsp;</span><br />&nbsp;<br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span><br />&nbsp;<br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />String contains only lower case english alphabets.</span></p>\n<p><span style=\"font-size: 18px;\">1 &lt;= N&nbsp;&lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` of length `N`, determine if it is a 'good' string. A good string is defined as one where the distance between every two adjacent characters is exactly 1. The distance between two characters is the minimum distance between them when the alphabet ('a' to 'z') is considered cyclic. For example, the distance between 'a' and 'c' is 2, and the distance between 'a' and 'y' is also 2. Return \"YES\" if the string is good, and \"NO\" otherwise.",
                "constraints": [
                    "String contains only lowercase English alphabets.",
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "aaa",
                        "output": "NO",
                        "explanation": "The distance between 'a' and 'a' is 0, not 1."
                    },
                    {
                        "input": "cbc",
                        "output": "YES",
                        "explanation": "The distance between 'c' and 'b' is 1, and the distance between 'b' and 'c' is also 1."
                    },
                    {
                        "input": "a",
                        "output": "YES",
                        "explanation": "A string of length 1 is always considered a good string."
                    },
                    {
                        "input": "abz",
                        "output": "YES",
                        "explanation": "The distance between 'a' and 'b' is 1, and the distance between 'b' and 'z' is not 1. z to b is not 1 since distance between z and a is 1 not to b."
                    },
                    {
                        "input": "ab",
                        "output": "YES",
                        "explanation": "The distance between 'a' and 'b' is 1."
                    },
                    {
                        "input": "ba",
                        "output": "YES",
                        "explanation": "The distance between 'b' and 'a' is 1."
                    },
                    {
                        "input": "zy",
                        "output": "YES",
                        "explanation": "The distance between 'z' and 'y' is 1."
                    },
                    {
                        "input": "yz",
                        "output": "YES",
                        "explanation": "The distance between 'y' and 'z' is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Take special care of characters &#39;a&#39; and &#39;z&#39;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Function to check if the given string is a \"good\" string or not.\nstring isGoodString(string s)\n{\n    \n    //iterating over the string till the second last character.\n    for(int i = 0 ;i<s.length() - 1;i++)\n    {\n        // checking if the difference between the current character and the next character is 1 or not,\n        // while providing special care for 'a' and 'z'.\n        if(abs(s[i] - s[i + 1]) == 1 || (s[i]=='a' && s[i + 1]=='z') ||  (s[i] =='z' && s[i + 1]=='a') )\n            continue;\n        else\n            {\n                //if the difference is not 1 and it's not a special case, return \"NO\".\n                return \"NO\";\n            }\n    }\n\n    //if all adjacent characters have a difference of 1 or are a special case, return \"YES\"\n    return \"YES\";    \n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution \n{ \n    String isGoodString(String s) \n    { \n        for(int i = 0 ;i<s.length() - 1;i++)\n        {\n            // checking if difference between adjacent char is 1 or not\n            // while providing special care for 'a' and 'z'\n            if(Math.abs(s.charAt(i) - s.charAt(i + 1)) == 1 || (s.charAt(i)=='a' && s.charAt(i + 1)=='z') ||  (s.charAt(i) =='z' && s.charAt(i + 1)=='a') )\n                continue;\n            else\n            {\n                return \"NO\";\n            }\n        }\n        return \"YES\";    \n    }\n} ",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to check if a given string is a good string or not.\n    public string isGoodString(string s)\n    {\n        //iterating over the string till the second last character.\n        for (int i = 0; i < s.Length - 1; i++)\n        {\n            // checking if the difference between the current character and the next character is 1 or not,\n            // while providing special care for 'a' and 'z'.\n            if (Math.Abs(s[i] - s[i + 1]) == 1 || (s[i] == 'a' && s[i + 1] == 'z') || (s[i] == 'z' && s[i + 1] == 'a'))\n                continue;\n            else\n            {\n                //if the difference is not 1 and it's not a special case, return \"NO\".\n                return \"NO\";\n            }\n        }\n\n        //if all adjacent characters have a difference of 1 or are a special case, return \"YES\"\n        return \"YES\";\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}