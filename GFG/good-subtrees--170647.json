{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714274,
            "title": "Good Subtrees",
            "titleSlug": "good-subtrees--170647",
            "content": "<p><span style=\"font-size:18px\">You are given a <strong>root</strong> node of a binary Tree and each node of the binary tree is assigned a <strong>value</strong> and you&nbsp;are also given an integer <strong>k</strong> and you have to return the <strong>count </strong>of <strong>Good subtrees</strong> of this binary Tree . Good subtree is a subtree such that the <strong>number</strong> of <strong>distinct</strong>&nbsp;<strong>values</strong>&nbsp;in this subtree is less than or equal to k.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note</strong>: Subtree of a node consists of that node and all nodes of the subtrees of left and right child&nbsp;&nbsp;of that&nbsp;node&nbsp;&nbsp;if they exist .</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/1_page-0001-1664728043.jpg\" style=\"height:222px; width:394px\" />\r\n</span><span style=\"font-size:18px\"><strong>k=2</strong></span>\r\n<span style=\"font-size:18px\"><strong>Output</strong>: 4\r\n<strong>Explanation:</strong>\r\nWe can see all leaves <strong>3,4,5</strong> form good subtrees as number of distinct values in subtrees is 1 which is less than k which is given as <strong>2,</strong>now  subtree which starts at 2 and has 3 as left node  is also a good subtree because the <strong>count</strong> of distinct values is <strong>2</strong> which is equal to k so overall 4 good subtrees.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span></strong>\r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/2_page-0001-1664728091.jpg\" style=\"height:222px; width:394px\" />\r\n<span style=\"font-size:18px\">k=1</span>\r\n<span style=\"font-size:18px\"><strong>Output: </strong>4\r\n<strong>Explanation:</strong>\r\nwe can see all leaves <strong>2,2</strong> form good subtrees as number of distinct values in subtrees is 1 which is equal to k which is given as 1, now  both subtrees which starts at 2 and has 2 as child also forms  a good subtree because <strong>count</strong> of distinct values is 1 which is equal to k so overall <strong>4</strong> good subtrees.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>goodSubtrees</strong>() which takes <strong>root</strong> of binary tree&nbsp; and an integer&nbsp;<strong>k</strong> respectively and you have to&nbsp; return the <strong>count</strong> of&nbsp;good subtrees .</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n*k)<br />\r\n<strong>Expected Space Complexity:</strong> O(n+n*k), where n is the size of recursion stack.</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Constraints</strong>:<br />\r\n1&lt;=n&lt;=10<sup>5</sup>&nbsp;(Number of nodes in binary Tree)<br />\r\n1&lt;=node.data&lt;=25<br />\r\n1&lt;=k&lt;=20<br />\r\nThe sum of n over all test cases won&#39;t exceed 5*10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Node&#39;s&nbsp;data &nbsp;have only very less value from 1-25 so we can store distinct values for each node&#39;s subtree</p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    int ans;\n    Solution(){\n        ans=0;\n    }\n    unordered_set<int> dfs(Node *root,int k){\n        unordered_set<int> s;\n        if(root==NULL) return s;\n        unordered_set<int> s1=dfs(root->left,k);\n        unordered_set<int> s2=dfs(root->right,k);\n        for(auto it=s1.begin();it!=s1.end();it++){\n            s.insert(*it);\n        }\n        for(auto it=s2.begin();it!=s2.end();it++){\n            s.insert(*it);\n        }\n        s.insert(root->data);\n        if(s.size()<=k){\n            ans++;\n        }\n        return s;\n    }\n    //Function to count the number of good subtrees.\n    int goodSubtrees(Node *root,int k){\n        //Calling dfs function to traverse the tree and collect nodes in sets.\n        dfs(root,k);\n        //Returning the count of good subtrees.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    static int ans;\r\n    public static int goodSubtrees(Node root,int k)\r\n    {\r\n        ans=0;\r\n        fun(root,k);\r\n        return ans;\r\n    }\r\n    public static HashSet<Integer> fun(Node root,int k)\r\n    {\r\n        if(root==null)return new HashSet<>();\r\n        var hs1=fun(root.left,k);\r\n        var hs2=fun(root.right,k);\r\n        HashSet<Integer> hs=new HashSet<>();\r\n        for(int i:hs1){\r\n            hs.add(i);\r\n        }\r\n        for(int i:hs2){\r\n            hs.add(i);\r\n        }\r\n        hs.add(root.data);\r\n        if(hs.size()<=k){\r\n            ans++;\r\n        }\r\n        return hs;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n'''\r\nclass Node:\r\n    def __init__(self,val):\r\n        self.data=val\r\n        self.left=None\r\n        self.right=None\r\n'''\r\nclass Solution:\r\n    def goodSubtrees(self,root,k):\r\n        ans=0\r\n        def solve(root):\r\n            nonlocal ans\r\n            if not root:\r\n                return set()\r\n            temp=set()\r\n            temp.add(root.data)\r\n            temp|=solve(root.left)\r\n            temp|=solve(root.right)\r\n            if len(temp)<=k:\r\n                ans+=1\r\n            return temp\r\n        solve(root)\r\n        return ans\r\n\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {Node} root\r\n * @param {number} k\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to return the count of good subtrees.\r\n    goodSubtrees(root, k)\r\n    {\r\n        let ans = 0;\r\n        const solve = (root) => {\r\n            if (!root) {\r\n                return new Set();\r\n            }\r\n            let temp = new Set();\r\n            temp.add(root.data);\r\n            temp = new Set([...temp, ...solve(root.left)]);\r\n            temp = new Set([...temp, ...solve(root.right)]);\r\n            if (temp.size <= k) {\r\n                ans += 1;\r\n            }\r\n            return temp;\r\n        }\r\n        solve(root);\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}