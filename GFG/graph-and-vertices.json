{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712547,
            "title": "Graph and Vertices",
            "titleSlug": "graph-and-vertices",
            "content": "<p><span style=\"font-size:18px\">Given an integer <strong>n</strong> representing number of vertices. Find out how many <strong>undirected graphs </strong>(not necessarily connected) can be constructed out of a given n number of vertices.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> 2</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 2\r\n</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> 5</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 1024</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\r\n\r\n<p><span style=\"font-size:18px\">Complete the function <strong>count()</strong> which takes an integer <strong>n </strong>as input and return the count of total number of graphs possible.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Space Complexity:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Constraints:</span></strong></p>\r\n\r\n<p><span style=\"font-size:18px\">1&lt;=n&lt;=10</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the number of vertices, `n`, determine the total number of undirected graphs (not necessarily connected) that can be constructed using these `n` vertices.",
                "constraints": [
                    "1 <= n <= 10"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "2",
                        "explanation": null
                    },
                    {
                        "input": "5",
                        "output": "1024",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to count the number of possible pairs\n    long long count(int n) {\n        // Using the formula 2^(n*(n-1))/2 to count the number of pairs\n        return pow(2, (n * (n - 1)) / 2);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n//function to calculate the count\nclass Solution {\n    static long count(int n) {\n    // code here\n\n     // initializing x to 2 as mentioned in the problem statement\n     long x=2l;\n     \n     // calculating y using the given formula \n     long y=(long)n*(n-1l)/2l;\n     \n     // returning x raised to the power of y using Math.pow() function\n     return (long)Math.pow(x,y);\n\n  }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to count the number of pairs of consecutive elements.\r\n    def count(self, n):\r\n        #calculating the value using a mathematical formula.\r\n        val = (n * (n - 1)) // 2\r\n        #using bit manipulation to calculate 2 raised to the power of val.\r\n        return (1 << val)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to count the number of digits in a number.\n    count(n){\n        //calculating the value using a mathematical formula.\n        let val = (n * (n - 1)) / 2;\n        //using bit manipulation to calculate 2 raised to the power of val.\n        return Math.pow(2, val);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}