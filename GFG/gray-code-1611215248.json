{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706224,
            "title": "Gray Code",
            "titleSlug": "gray-code-1611215248",
            "content": "<div><span style=\"font-size:18px\">Given a number&nbsp;<strong>N</strong>, generate bit patterns from 0 to 2^N-1 such that successive patterns differ by one bit.&nbsp;<br />\nA Gray code sequence must begin with 0.</span></div>\n\n<div>&nbsp;</div>\n\n<div><span style=\"font-size:18px\"><strong>Example 1:</strong></span></div>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 2\n<strong>Output: </strong>\n00 01 11 10\n<strong>Explanation: </strong>\n00 and 01 differ by one bit.\n01 and 11 differ by one bit.\n11 and 10 also differ by one bit.</span></pre>\n\n<div>&nbsp;</div>\n\n<div><span style=\"font-size:18px\"><strong>Example 2:</strong></span></div>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN=3\n<strong>Output:</strong>\n000 001 011 010 110 111 101 100\n<strong>Explanation:</strong>\n000 and 001 differ by one bit.\n001 and 011 differ by one bit.\n011 and 010 differ by one bit.\nSimilarly, every successive pattern \ndiffers by one bit.</span></pre>\n\n<div><span style=\"font-size:18px\"><strong>Your task:</strong></span></div>\n\n<div><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function <strong>graycode() </strong>which takes an integer N as input and returns a la list of patterns.</span></div>\n\n<div>&nbsp;</div>\n\n<div><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(2<sup>n</sup>)</span></div>\n\n<div><span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong>&nbsp;O(2<sup>n</sup>)</span></div>\n\n<div>&nbsp;</div>\n\n<div><span style=\"font-size:18px\"><strong>Constraints :</strong></span></div>\n\n<div><span style=\"font-size:18px\">1&lt;=N&lt;=16</span></div>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer N, generate a Gray code sequence from 0 to 2^N - 1. A Gray code sequence is a list of binary numbers such that successive numbers differ by only one bit, and the sequence must begin with 0.",
                "constraints": [
                    "1 <= N <= 16"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "00 01 11 10",
                        "explanation": "The sequence 00, 01, 11, 10 satisfies the Gray code property. 00 and 01 differ by one bit, 01 and 11 differ by one bit, and 11 and 10 differ by one bit."
                    },
                    {
                        "input": "3",
                        "output": "000 001 011 010 110 111 101 100",
                        "explanation": "The sequence 000, 001, 011, 010, 110, 111, 101, 100 satisfies the Gray code property.  Each successive number differs by only one bit."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use bitset.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\n    public:\n    vector<string> graycode(int n)\n{\n    vector<string> v;\n    for (int i = 0; i < (1 << n); i++) \n    {\n        // Generating the decimal \n        // values of gray code then using \n        // bitset to convert them to binary form\n        int val = (i ^ (i >> 1));\n         \n        // Using bitset\n        bitset<32> r(val);\n         \n        // Converting to string\n        string s = r.to_string();\n        v.push_back(s.substr(32 - n));\n    }\n    \n    return v;\n}\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    public ArrayList<String> graycode(int n)\n    {\n        ArrayList<String> v = new ArrayList<String>();\n        for (int i = 0; i < (1 << n); i++) \n        {\n            // Generating the decimal \n            // values of gray code then using \n            // bitset to convert them to binary form\n            int val = (i ^ (i >> 1));\n             \n            // making bitstring\n            String s=\"\";\n            for (int j = 0; j < n; j++){\n                if((val&(1<<j))!=0){\n                    s=\"1\"+s;\n                }else s=\"0\"+s;\n            }\n             \n            // Converting to string\n            v.add(s);\n        }\n        \n        return v;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def graycode(self,n):\n        #code here\n        \n        ans = []\n        \n        #iterate through all possible binary numbers\n        for i in range(1<<n):\n            \n            #calculate the gray code value\n            val = (i ^ (i >> 1))\n            \n            #convert the gray code value to binary representation\n            bitrep = format(val,'016b')\n            \n            #append the binary representation to the result list\n            ans.append(bitrep[16-n:])\n            \n        #return the result list\n        return ans",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number} n\n * @returns {string[]}\n*/\n\nclass Solution {\n    graycode(n)\n    {\n        let v = [];\n        for (let i = 0; i < Math.pow(2, n); i++) \n        {\n            // Generating the decimal \n            // values of gray code then using \n            // toString(2) to convert them to binary form\n            let val = (i ^ (i >> 1));\n            \n            // Converting to string\n            let s = val.toString(2).padStart(n, '0');\n            v.push(s);\n        }\n        \n        return v;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution\n{\n    public List<string> graycode(int n)\n    {\n        List<string> result = new List<string>();\n        for (int i = 0; i < (1 << n); i++)\n        {\n            int gray = i ^ (i >> 1);\n            string binary = Convert.ToString(gray, 2).PadLeft(n, '0');\n            result.Add(binary);\n        }\n        return result;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}