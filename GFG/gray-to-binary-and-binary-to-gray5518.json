{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704181,
            "title": "Gray to Binary and Binary to Gray ",
            "titleSlug": "gray-to-binary-and-binary-to-gray5518",
            "content": "<p><span style=\"font-size:18px\">Given to strings <strong>B </strong>and <strong>G</strong>. String B represents a binary code and string G represents a Gray Code. You need to write a program which converts binary code to gray code and vice versa.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>B =</strong></span><span style=\"font-size:20px\"><strong> </strong>&quot;0011&quot;</span>\r\n<span style=\"font-size:20px\"><strong>G = </strong>&quot;01101&quot;</span>\r\n<strong><span style=\"font-size:18px\">Output:</span></strong>\r\n<span style=\"font-size:18px\">0010</span>\r\n<span style=\"font-size:18px\">01001</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">Grey Code of 0011 is 0010.\r\nBinary of 01101 is 01001.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>B =</strong></span><span style=\"font-size:20px\"><strong> </strong>&quot;01001&quot;</span>\r\n<span style=\"font-size:20px\"><strong>G = </strong>&quot;01101&quot;</span>\r\n<strong><span style=\"font-size:18px\">Output:</span></strong>\r\n<span style=\"font-size:18px\">01101</span>\r\n<span style=\"font-size:18px\">01001</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">Grey Code of 01001 is 01101.\r\nBinary of 01101 is 01001.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the functions <strong>binToGrey() </strong>and <strong>greyToBin()</strong> which takes Strings B and G as input and returns the answers.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= |B| &lt;= 10<sup>5</sup><br />\r\n1 &lt;= |G| &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, **B** representing a binary code and **G** representing a Gray code, write a program to convert the binary code to Gray code and vice versa. Implement the `binToGrey()` and `greyToBin()` functions to perform these conversions.",
                "constraints": [
                    "1 <= |B| <= 10^5",
                    "1 <= |G| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "B = \"0011\"\nG = \"01101\"",
                        "output": "0010\n01001",
                        "explanation": "The Gray code of binary string '0011' is '0010'. The binary code of Gray string '01101' is '01001'."
                    },
                    {
                        "input": "B = \"01001\"\nG = \"01101\"",
                        "output": "01101\n01001",
                        "explanation": "The Gray code of binary string '01001' is '01101'. The binary code of Gray string '01101' is '01001'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\"><em><strong>Binary to Gray conversion :</strong></em></span></p>\n\n<ol>\n\t<li><span style=\"font-size:18px\">The Most Significant Bit (MSB) of the gray code is always equal to the MSB of the given binary code.</span></li>\n\t<li><span style=\"font-size:18px\">Other bits of the output gray code can be obtained by XORing binary code bit at that index and previous index.</span></li>\n</ol>\n\n<p><span style=\"font-size:18px\"><em><strong>Gray to binary conversion :</strong></em></span></p>\n\n<ol>\n\t<li><span style=\"font-size:18px\">The Most Significant Bit (MSB) of the binary code is always equal to the MSB of the given binary number.</span></li>\n\t<li><span style=\"font-size:18px\">Other bits of the output binary code can be obtained by checking gray code bit at that index. If current gray code bit is 0, then copy previous binary code bit, else copy invert of previous binary code bit.</span></li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\r\n\r\nclass Solution {\r\n  public:\r\n  \r\n    // Helper function to xor two characters \r\n    char xor_c(char a, char b) { return (a == b) ? '0' : '1'; } \r\n      \r\n    // Helper function to flip the bit \r\n    char flip(char c) { return (c == '0') ? '1' : '0'; } \r\n\r\n    string binToGrey(string B) {\r\n        \r\n        string gray = \"\"; \r\n  \r\n        // MSB of gray code is same as binary code \r\n        gray += B[0]; \r\n      \r\n        // Compute remaining bits, next bit is comuted by \r\n        // doing XOR of previous and current in Binary \r\n        for (int i = 1; i < B.length(); i++) { \r\n            // Concatenate XOR of previous bit \r\n            // with current bit \r\n            gray += xor_c(B[i - 1], B[i]); \r\n        } \r\n      \r\n        return gray; \r\n    }\r\n    \r\n    string greyToBin(string G) {\r\n        \r\n        string binary = \"\"; \r\n  \r\n        // MSB of binary code is same as gray code \r\n        binary += G[0]; \r\n      \r\n        // Compute remaining bits \r\n        for (int i = 1; i < G.length(); i++) { \r\n            // If current bit is 0, concatenate \r\n            // previous bit \r\n            if (G[i] == '0') \r\n                binary += binary[i - 1]; \r\n      \r\n            // Else, concatenate invert of \r\n            // previous bit \r\n            else\r\n                binary += flip(binary[i - 1]); \r\n        } \r\n      \r\n        return binary; \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    \r\n    // Helper function to xor \r\n    // two characters \r\n    static char xor_c(char a, char b) \r\n    {\r\n        return (a == b) ? '0' : '1'; \r\n    }\r\n  \r\n    // Helper function to flip the bit \r\n    static char flip(char c) \r\n    {\r\n        return (c == '0') ? '1' : '0'; \r\n    }\r\n        \r\n    static String binToGrey(String B) {\r\n        \r\n        String gray = \"\"; \r\n  \r\n        // MSB of gray code is same \r\n        // as binary code \r\n        gray += B.charAt(0); \r\n  \r\n        // Compute remaining bits, next bit is \r\n        // computed by doing XOR of previous \r\n        // and current in Binary \r\n        for (int i = 1; i < B.length(); i++) { \r\n  \r\n            // Concatenate XOR of previous bit \r\n            // with current bit \r\n            gray += xor_c(B.charAt(i - 1), \r\n                          B.charAt(i)); \r\n        } \r\n  \r\n        return gray; \r\n    }\r\n    static String greyToBin(String G) {\r\n        \r\n        String binary = \"\"; \r\n  \r\n        // MSB of binary code is same \r\n        // as gray code \r\n        binary += G.charAt(0); \r\n  \r\n        // Compute remaining bits \r\n        for (int i = 1; i < G.length(); i++) { \r\n            // If current bit is 0, \r\n            // concatenate previous bit \r\n            if (G.charAt(i) == '0') \r\n                binary += binary.charAt(i - 1); \r\n  \r\n            // Else, concatenate invert of \r\n            // previous bit \r\n            else\r\n                binary += flip(binary.charAt(i - 1)); \r\n        } \r\n  \r\n        return binary; \r\n    }\r\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}