{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700913,
            "title": "Greater and Smaller Ones",
            "titleSlug": "greater-and-smaller-ones",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"background-color: transparent;\">Given an unsorted array </span><strong>A </strong><span style=\"background-color: transparent;\">of size </span><strong>N</strong><span style=\"background-color: transparent;\"> and value <strong>K</strong></span><span style=\"background-color: transparent;\">. The elements of the array A contain positive integers. You have to print all the elements that are greater than K in the array(including K as well if present in the array A) and print all the elements that are smaller than K in separate lines. If the elements greater than K does not present in the array then print <strong>\"-1\"</strong>. Similarly, in case of smaller elements print -1 if elements smaller than k doesn't exist. Note that you need to sort the array, if there are duplicates print only first element.<br /></span></span> </span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"background-color: transparent;\"><strong>Input Format:</strong><br />First line of input contains number of testcases T. For each testcase, there are two lines, first of which contains N and K separated by space, next line contains N space-separated integers.</span></span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"background-color: transparent;\"><strong>Output Format:</strong><br />For each testcase, print the required elements(if any), else print \"-1\" (without quotes).</span></span></span></p>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"background-color: transparent;\"><strong>Example:<br />Input:</strong></span></span><br />1<br />5 1<br />2 1 5 7 6</span><br /><br /><span style=\"font-size: 18px;\"><strong>Output:</strong><br />1 2 5 6 7<br />-1</span><br /><br /><span style=\"font-size: 18px;\"><strong>Explanation:<br />Testcase 1:</strong> Since, 1, 2, 5, 6, 7 are greater or equal to given K. Also, no element less than K is present in the array.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Since this is a function problem, you don't need to take any input. Just complete the provided <strong>greaterKSorted</strong> and <strong>smallerKSorted</strong> functions that takes two input one is array and second is K.</span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"background-color: transparent;\"><strong>Constraints:</strong><br />1 &lt;= T &lt;= 100<br />1 &lt;= N &lt;= 10<sup>3</sup><br />1 &lt;= K &lt;= 10<sup>6</sup><br />1 &lt;= A[i] &lt;= 10<sup>6</sup></span></span></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array `A` of size `N` containing positive integers and a value `K`. You need to find all elements in the array that are greater than or equal to `K`, sort them in ascending order, and print them on a single line. Then, find all elements in the array that are strictly smaller than `K`, sort them in ascending order, and print them on a separate line. Remove duplicate entries, keeping only the first occurence.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^3",
                    "1 <= K <= 10^6",
                    "1 <= A[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "5 1\n2 1 5 7 6",
                        "output": "1 2 5 6 7\n-1",
                        "explanation": "Elements greater than or equal to 1 are 2, 1, 5, 7, and 6. After removing duplicates and sorting, they are 1 2 5 6 7. There are no elements smaller than 1, so the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "set",
                "slug": "set"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Geeks\n{\npublic:\n    // Function to find and print all elements greater than or equal to k in sorted order\n    static void greaterKSorted(vector<int>& arr, int k)\n    {\n        set<int> ts; // Creating a set to store all the elements of the array\n\n        // Inserting all the elements of the array into the set\n        for (int i = 0; i < arr.size(); i++)\n            ts.insert(arr[i]);\n\n        set<int> rts; // Creating a set to store elements greater than or equal to k\n\n        // Iterating over the set starting from the lower bound of k\n        // and inserting the elements into the rts set\n        for (auto it = ts.lower_bound(k); it != ts.end(); ++it)\n            rts.insert(*it);\n\n        // If rts set is not empty, then printing the elements in sorted order\n        if (!rts.empty())\n        {\n            for (int x : rts)\n                cout << x << \" \";\n        }\n        // If rts set is empty, then printing -1\n        else\n        {\n            cout << \"-1\";\n        }\n    }\n\n    // Function to find and print all elements smaller than k in sorted order\n    static void smallerKSorted(vector<int>& arr, int k)\n    {\n        set<int> ts; // Creating a set to store all the elements of the array\n\n        // Inserting all the elements of the array into the set\n        for (int i = 0; i < arr.size(); i++)\n            ts.insert(arr[i]);\n\n        set<int> rts; // Creating a set to store elements smaller than k\n\n        // Iterating over the set starting from the beginning\n        // and inserting the elements into the rts set until the lower bound of k\n        for (auto it = ts.begin(); it != ts.lower_bound(k); ++it)\n            rts.insert(*it);\n\n        // If rts set is not empty, then printing the elements in sorted order\n        if (!rts.empty())\n        {\n            for (int x : rts)\n                cout << x << \" \";\n        }\n        // If rts set is empty, then printing -1\n        else\n        {\n            cout << \"-1\";\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Geeks\r\n{\r\n    public static void greaterKSorted(int arr[], int k)\r\n    {\r\n        TreeSet<Integer> ts = new TreeSet<Integer>();\r\n        for(int i = 0 ; i < arr.length; i++)\r\n              ts.add(arr[i]);\r\n        \r\n        TreeSet<Integer> rts = new TreeSet<>();\r\n        rts = (TreeSet<Integer>)ts.tailSet(k);\r\n        \r\n        Iterator itr = rts.iterator();\r\n        if(rts.size() > 0)\r\n        {\r\n            while(itr.hasNext())\r\n           {\r\n               System.out.print(itr.next() + \" \");\r\n           }\r\n        }\r\n        else\r\n        System.out.print(\"-1\");\r\n        \r\n    }\r\n    \r\n    public static void smallerKSorted(int arr[], int k)\r\n    {\r\n        TreeSet<Integer> ts = new TreeSet<Integer>();\r\n        for(int i = 0; i < arr.length; i++)\r\n            ts.add(arr[i]);\r\n        \r\n         TreeSet<Integer> rts = new TreeSet<>();\r\n         rts = (TreeSet<Integer>)ts.headSet(k);\r\n         Iterator itr = rts.iterator();\r\n         if(rts.size()> 0)\r\n         {\r\n             while(itr.hasNext())\r\n             {\r\n                 System.out.print(itr.next() + \" \");\r\n             }\r\n         }\r\n         else\r\n         System.out.print(\"-1\");\r\n    }\r\n}",
                "lang_text": "java"
            }
        },
        "platform": "GFG"
    }
}