{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703050,
            "title": "Greater on right side",
            "titleSlug": "greater-on-right-side4305",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>a</strong><strong>rr</strong>. Replace every element with the <strong>next greatest element</strong> (the greatest element on its right side) in the array. Note: There is no element next to the last element, so replace it with <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [16, 17, 4, 3, 5, 2]\n<strong>Output: </strong>[17, 5, 5, 5, 2, -1]\n<strong>Explanation:</strong> For 16 the greatest element \non its right is 17. For 17 it's 5. \nFor 4 it's 5. For 3 it's 5. For 5 it's 2. \nFor 2 it's -1(no element to its right). <br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 3, 1, 9]\n<strong>Output: </strong>[9, 9, 9, -1]\n<strong>Explanation: </strong>For each element except 9 the\ngreatest element on its right is 9.<br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i]&lt;= 10<sup>6</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>The idea is to start from the rightmost element, move to the left side one by one, and keep track of the maximum element. Replace every element with the maximum element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    /* Function to replace every element with the\n    next greatest element */\n    vector<int> nextGreatest(vector<int> arr) {\n\n        // Initialize the next greatest element\n        int n = arr.size();\n        vector<int> ans(n);\n        int max_from_right = arr[n - 1];\n\n        // The next greatest element for the rightmost element\n        // is always -1\n        ans[n - 1] = -1;\n\n        // Replace all other elements with the next greatest\n        for (int i = n - 2; i >= 0; i--) {\n            // Store the current element (needed later for updating\n            // the next greatest element)\n            int temp = arr[i];\n\n            // Replace current element with the next greatest\n            ans[i] = max_from_right;\n\n            // Update the greatest element, if needed\n            if (max_from_right < temp)\n                max_from_right = temp;\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static ArrayList<Integer> nextGreatest(int arr[]) {\n        // code here\n        int n = arr.length;\n        ArrayList<Integer> ans = new ArrayList();\n        int maxFromRight = arr[n - 1];\n\n        // The next greatest element for the rightmost element\n        // is always -1\n        arr[n - 1] = -1;\n\n        // Replace all other elements with the next greatest\n        for (int i = n - 2; i >= 0; i--) {\n            // Store the current element (needed later for updating\n            // the next greatest element)\n            int temp = arr[i];\n\n            // Replace current element with the next greatest\n            arr[i] = maxFromRight;\n\n            // Update the greatest element, if needed\n            if (maxFromRight < temp) {\n                maxFromRight = temp;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            ans.add(arr[i]);\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def nextGreatest(self, arr):\n        # code  here\n        n = len(arr)\n\n        ans = [0] * n\n        max_from_right = arr[n - 1]\n\n        # The next greatest element for the rightmost element\n        # is always -1\n        ans[n - 1] = -1\n\n        # Replace all other elements with the next greatest\n        for i in range(n - 2, -1, -1):\n            # Store the current element (needed later for updating\n            # the next greatest element)\n            temp = arr[i]\n\n            # Replace current element with the next greatest\n            ans[i] = max_from_right\n\n            # Update the greatest element, if needed\n            if max_from_right < temp:\n                max_from_right = temp\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\nclass Solution {\n    nextGreatest(arr) {\n        let n = arr.length;\n        let ans = new Array(n);\n        let maxFromRight = arr[n - 1];\n\n        // The next greatest element for the rightmost element\n        // is always -1\n        ans[n - 1] = -1;\n\n        // Replace all other elements with the next greatest\n        for (let i = n - 2; i >= 0; i--) {\n            // Store the current element (needed later for updating\n            // the next greatest element)\n            let temp = arr[i];\n\n            // Replace current element with the next greatest\n            ans[i] = maxFromRight;\n\n            // Update the greatest element, if needed\n            if (maxFromRight < temp) {\n                maxFromRight = temp;\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}