{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702784,
            "title": "Greedy Fox",
            "titleSlug": "greedy-fox1555",
            "content": "<p><span >You are given an array of integers <strong>arr</strong>, where arr[i] represents the denomination of the i<sup>th</sup> coin placed on a road. The fox wants to collect coins in a specific pattern: it can only collect a contiguous subarray of coins that are in strictly increasing order of their denominations. Determine the maximum sum of coins that the fox can collect following this pattern.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 1, 4, 7, 3, 6] \n<strong>Output:</strong> 12\n<strong>Explanation</strong>: Contiguous Increasing subarray [<strong>1, 4, 7]</strong> = 12.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [38, 7, 8, 10, 12] \n<strong>Output:</strong> 38<br /><strong>Explanation:</strong> The best is to collect the first coin alone, as no larger contiguous increasing subarray exists.\n</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>4</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr` representing coin denominations, find the maximum sum of coins the fox can collect. The fox can only collect contiguous subarrays where the coin denominations are in strictly increasing order.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[2, 1, 4, 7, 3, 6]",
                        "output": "12",
                        "explanation": "The contiguous increasing subarray [1, 4, 7] yields the maximum sum of 1 + 4 + 7 = 12."
                    },
                    {
                        "input": "[38, 7, 8, 10, 12]",
                        "output": "38",
                        "explanation": "The only increasing subarray is [7, 8, 10, 12] but the sum of that subarray is smaller than simply taking the first element i.e. 38.  Therefore, the optimal choice is to collect the first coin alone."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >An&nbsp;<strong>efficient solution</strong> is based on the fact that all elements are positive. So we consider the longest increasing subarrays and compare their sums. Increasing subarrays cannot overlap, so our time complexity becomes O(n).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the largest sum of consecutive increasing elements in the array.\n    int largestSum(vector<int>& arr) {\n        int n = arr.size();\n        int result = INT_MIN;\n\n        for (int i = 0; i < n; i++) {\n            int curr_sum = arr[i];\n\n            // Checking if the next element is greater than the current element\n            while (i + 1 < n && arr[i + 1] > arr[i]) {\n                curr_sum += arr[i + 1];\n                i++;\n            }\n\n            // Updating the result with the maximum sum found\n            result = max(result, curr_sum);\n        }\n\n        return result;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Returns the sum of the longest increasing subarray.\n    public int largestSum(int[] arr) {\n        int n = arr.length;\n        int result = Integer.MIN_VALUE;\n\n        for (int i = 0; i < n; i++) {\n            int currSum = arr[i];\n\n            // Find sum of longest increasing subarray starting from arr[i].\n            while (i + 1 < n && arr[i + 1] > arr[i]) {\n                currSum += arr[i + 1];\n                i++;\n            }\n\n            // Update result if the current sum is greater.\n            result = Math.max(result, currSum);\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\nclass Solution:\n    # Function to find the largest sum of the longest increasing subarray\n    def largestSum(self, arr):\n        n = len(arr)\n        result = float('-inf')\n\n        # Iterating over the array to find the sum of the longest increasing subarray\n        i = 0\n        while i < n:\n            curr_sum = arr[i]\n\n            # Checking if the next element is greater than the current element\n            while i + 1 < n and arr[i + 1] > arr[i]:\n                curr_sum += arr[i + 1]\n                i += 1\n\n            # Updating the result if the current sum is larger\n            result = max(result, curr_sum)\n            i += 1  # Move to the next element for the next iteration\n\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the largest sum of the longest increasing subarray\n    largestSum(arr) {\n        let n = arr.length;\n        let result = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            let currSum = arr[i];\n\n            // Checking if the next element is greater than the current element\n            while (i + 1 < n && arr[i + 1] > arr[i]) {\n                currSum += arr[i + 1];\n                i++;\n            }\n\n            // Updating the result if the current sum is larger\n            result = Math.max(result, currSum);\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}