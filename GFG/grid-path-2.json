{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712184,
            "title": "Grid Path 2",
            "titleSlug": "grid-path-2",
            "content": "<p><span style=\"font-size: 18px;\">You are given a grid of n * m having 0 and 1 respectively, 0 denotes space, and 1 denotes obstacle. Geek is located at the top-left corner (i.e. grid[0][0]) and wants to reach the bottom right corner of the grid. A geek can move either<strong> down</strong> or <strong>right</strong> at any point in time. return the total number of ways in which Geek can reach the bottom right corner. answer may be large take the modulo by 1e9+7.</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Example:</strong>\n<strong>Input:\n</strong>n = 3, m = 3\ngrid= [[0,0,0],[0,1,0],[0,0,0]]\n<strong>Output:</strong>\n2\n<strong>Explanation:</strong>\nThere is one obstacle in the middle of the 3x3 grid above. There are two ways to reach\nthe bottom-right corner:\n1. Right -&gt; Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right -&gt; Right</span>\n\n<strong><span style=\"font-size: 18px;\">Example 2:\nInput:\n</span></strong><span style=\"font-size: 18px;\">n = 2, m = 2\ngrid = [[0,1],[0,0]]\n<strong>Output:</strong>\n1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't have to read input or print anything. Your task is to complete the function <strong>totalWays()&nbsp;</strong>which takes the integer n and m and m * n grid.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraint:</strong><br />1 &lt;= m,n &lt;= 100<br />grid[i][j] is 0 or 1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(m * n)<br /><strong>Expected Space Complexity:</strong> O(n)</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a grid of n * m, where each cell contains either 0 or 1. 0 represents an empty space, and 1 represents an obstacle. You start at the top-left corner (grid[0][0]) and want to reach the bottom-right corner. You can only move either down or right at any point.  Your task is to find the total number of distinct paths from the start to the end, avoiding obstacles.  Return the number of ways modulo 10^9 + 7.",
                "constraints": [
                    "1 <= m, n <= 100",
                    "grid[i][j] is 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3\ngrid= [[0,0,0],[0,1,0],[0,0,0]]",
                        "output": "2",
                        "explanation": "There is one obstacle in the middle of the 3x3 grid. There are two paths to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right"
                    },
                    {
                        "input": "n = 2, m = 2\ngrid = [[0,1],[0,0]]",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming to count paths in a grid with obstacles. Initialize a 2D array to store paths to each cell, updating values based on adjacent cells and avoiding obstacles.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    const int mod = 1e9 + 7;\r\n    int totalWays(int n, int m, vector<vector<int>>& grid) {\r\n        int t[n][m];\r\n        memset(t, 0, sizeof(t));\r\n\r\n        for (int i = 0; i < n; ++i) {\r\n            if (grid[i][0] != 1)\r\n                t[i][0] = 1;\r\n            else\r\n                break;\r\n        }\r\n        for (int j = 0; j < m; ++j) {\r\n            if (grid[0][j] != 1)\r\n                t[0][j] = 1;\r\n            else\r\n                break;\r\n        }\r\n\r\n        for (int i = 1; i < n; ++i) {\r\n            for (int j = 1; j < m; ++j) {\r\n                if (grid[i][j] != 1)\r\n                    t[i][j] = (t[i - 1][j] + t[i][j - 1]) % mod;\r\n            }\r\n        }\r\n\r\n        return t[n - 1][m - 1] % mod;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    int mod = (int)1e9 + 7;\n    public int totalWays(int N, int M, int grid[][]) {\n        // Create a 2D array t to store the number of ways to reach each cell\n        int[][] t = new int[N][M];\n        \n        // Initialize all cells in t to 0\n        for (int i = 0; i < N; i++) {\n            Arrays.fill(t[i], 0);\n        }\n\n        // Calculate the number of ways to reach the first column of cells\n        // If a cell in the first column is not blocked (value is not 1), set the number of ways to reach that cell to 1\n        // If a cell in the first column is blocked, break the loop since we can't go further\n        for (int i = 0; i < N; i++) {\n            if (grid[i][0] != 1) {\n                t[i][0] = 1;\n            } else {\n                break;\n            }\n        }\n        \n        // Calculate the number of ways to reach the first row of cells\n        // If a cell in the first row is not blocked (value is not 1), set the number of ways to reach that cell to 1\n        // If a cell in the first row is blocked, break the loop since we can't go further\n        for (int j = 0; j < M; j++) {\n            if (grid[0][j] != 1) {\n                t[0][j] = 1;\n            } else {\n                break;\n            }\n        }\n\n        // Calculate the number of ways to reach each cell in the remaining rows and columns\n        // If a cell is not blocked (value is not 1), the number of ways to reach that cell is the sum of the number of ways to reach the cell above and the cell to the left\n        for (int i = 1; i < N; i++) {\n            for (int j = 1; j < M; j++) {\n                if (grid[i][j] != 1) {\n                    t[i][j] = (t[i - 1][j] + t[i][j - 1]) % mod;\n                }\n            }\n        }\n\n        // Return the number of ways to reach the bottom-right cell, modulo mod\n        return t[N - 1][M - 1] % mod;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n\n    # Function to calculate the total number of ways to reach the bottom-right corner of the grid.\n    def totalWays(self, n, m, grid):\n\n        # If the starting position is blocked, return 0.\n        if grid[0][0]:\n            return 0\n\n        # Constant value to reduce the final result.\n        M = 10**9 + 7\n\n        # Create a 2D array to store the number of ways to reach each cell.\n        t = [[0 for i in range(m)] for i in range(n)]\n\n        # Fill the first row and column based on whether each cell is blocked or not.\n        for i in range(n):\n            if grid[i][0] != 1:\n                t[i][0] = 1\n            else:\n                break\n\n        for j in range(m):\n            if grid[0][j] != 1:\n                t[0][j] = 1\n            else:\n                break\n\n        # Iterate through the remaining cells and calculate the number of ways by summing the values from the top and left cells.\n        for i in range(1, n):\n            for j in range(1, m):\n                if grid[i][j] != 1:\n                    t[i][j] = (t[i-1][j] + t[i][j-1]) % M\n\n        # Return the number of ways to reach the bottom-right cell.\n        return t[n - 1][m - 1] % M",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} n\r\n * @param {number} m\r\n * @param {number[][]} grid\r\n * @returns {number}\r\n*/\r\nclass Solution {\r\n    // Function to return number of ways to reach bottom right of Matrix\r\n    totalWays(n, m, grid) {\r\n        // If the starting position is blocked, return 0.\r\n        if (grid[0][0]) {\r\n            return 0;\r\n        }\r\n\r\n        // Constant value to reduce the final result.\r\n        const M = 10**9 + 7;\r\n\r\n        // Create a 2D array to store the number of ways to reach each cell.\r\n        const t = Array(n).fill(0).map(() => Array(m).fill(0));\r\n\r\n        // Fill the first row and column based on whether each cell is blocked or not.\r\n        for (let i = 0; i < n; i++) {\r\n            if (grid[i][0] !== 1) {\r\n                t[i][0] = 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = 0; j < m; j++) {\r\n            if (grid[0][j] !== 1) {\r\n                t[0][j] = 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Iterate through the remaining cells and calculate the number of ways by summing the values from the top and left cells.\r\n        for (let i = 1; i < n; i++) {\r\n            for (let j = 1; j < m; j++) {\r\n                if (grid[i][j] !== 1) {\r\n                    t[i][j] = (t[i-1][j] + t[i][j-1]) % M;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the number of ways to reach the bottom-right cell.\r\n        return t[n - 1][m - 1] % M;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}