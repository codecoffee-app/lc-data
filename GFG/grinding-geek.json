{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 857639,
            "title": "Grinding Geek",
            "titleSlug": "grinding-geek",
            "content": "<p><span >GeeksforGeeks has introduced a special offer where you can enroll in any course, and if you manage to complete 90% of the course within 90 days, you will receive a refund of 90%.</span></p>\n<p><span >Geek was fascinated by this offer. This offer was valid for <strong>only n days</strong>, and <strong>each day</strong> a <strong>new course</strong> was available for purchase. Geek decided that if he bought a course on some day, he will <strong>complete that course on the same day itself</strong> and redeem <strong><em>floor[90% of cost of the course]</em></strong> amount back. Find the <strong>maximum number of courses</strong> that Geek can complete in those n days if he had <em><strong>total </strong></em>amount initially.</span></p>\n<p><span ><strong>Note</strong>: On any day, Geek can only buy the new course that was made available for purchase that day.</span></p>\n<p><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Example 1:</strong></span></p>\n<pre><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 14pt;\"><strong>Input</strong>:<br />n = 2<br />total = 10<br />cost = [10, 9]<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 14pt;\"><strong>Output</strong>: 2<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 14pt;\"><strong>Explanation</strong>: <br />Geek can buy the first course for 10 amount, <br />complete it on the same date and redeem 9 back. <br />Next, he can buy and complete the 2nd course too.</span></pre>\n<p><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Example 2:</strong></span></p>\n<pre><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 14pt;\"><strong>Input</strong>:<br />n = 11<br />total = 10<br />cost = [10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 14pt;\"><strong>Output</strong>: 10<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 14pt;\"><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 14pt;\">Explanation</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, sans-serif;\"><span >: <br /></span><span style=\"font-size: 18.6667px;\">Geek can buy and complete all the courses that cost 1<br /> as well as 1 course that cost 10 and 9 course that cost 1.</span><span ><br /></span></span></span></pre>\n<p><span ><strong>Your Task:<br /></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">This is a function problem. The input is already taken care of by the driver code. You only need to complete the function&nbsp;</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><strong>max_courses</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">()</strong></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;that takes&nbsp;<strong>N</strong> the number of days, the <strong>total</strong> amount, and the <strong>cost</strong> array as input argument and return the <strong>maximum </strong>amount of courses that could be purchased.</span></span></p>\n<p><span ><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><strong>Expected Time Complexity:</strong> O(n*total)<br /><strong style=\"font-size: 18.6667px;\">Expected Auxiliary Space:</strong><span style=\"font-size: 18.6667px;\">&nbsp;O(n*total)</span><br /></span></span></p>\n<p><span ><strong>Constraints:<br /></strong>1 &lt;= n &lt;= 1000</span><br /><span >0 &lt;= total &lt;= 1000</span><br /><span >1 &lt;= cost[i] &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "GeeksforGeeks is offering a special promotion: enroll in any course and receive a 90% refund if you complete 90% of the course within 90 days. Geek wants to maximize the number of courses he can complete within 'n' days. Each day, a new course becomes available. If Geek buys a course, he completes it the same day and receives a refund equal to the floor of 90% of the course's cost. Given his initial 'total' amount and the 'cost' of each course available on each of the 'n' days, determine the maximum number of courses Geek can complete.",
                "constraints": [
                    "1 <= n <= 1000",
                    "0 <= total <= 1000",
                    "1 <= cost[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 2\ntotal = 10\ncost = [10, 9]",
                        "output": "2",
                        "explanation": "Geek can buy the first course for 10, receive a refund of 9. Then, he can buy the second course for 9, and complete it. Therefore, he can complete 2 courses."
                    },
                    {
                        "input": "n = 11\ntotal = 10\ncost = [10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
                        "output": "10",
                        "explanation": "Geek can buy the course that costs 10 first. He gets a refund of 9, leaving him with 9. He then can purchase the remaining courses which cost 1, purchasing a total of 9 such courses. 1 + 9 = 10, therefore, he purchased a total of 10 courses."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try using dynamic programming approach to solve this.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n    int dpf(int i, int j, vector<vector<int> > &dp, vector<int> &cost)\n    {\n        if(i==dp.size()) return 0;\n        if(dp[i][j]!=-1) return dp[i][j];\n\n        dp[i][j] = dpf(i+1,j,dp,cost);\n        if(j >= cost[i])\n        {\n            dp[i][j] = max(dp[i][j], 1 + dpf(i+1, j - cost[i] + ((9*cost[i])/10), dp, cost));\n        }\n        return dp[i][j];\n    }\n    public:\n    int max_courses(int n, int total, vector<int> &cost)\n    {\n        vector<vector<int> > dp(n,vector<int>(total+1,-1));\n        return dpf(0,total,dp,cost);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    private int dpf(int i, int j, int[][] dp, int[] cost) {\n        if (i == dp.length) return 0;\n        if (dp[i][j] != -1) return dp[i][j];\n\n        dp[i][j] = dpf(i + 1, j, dp, cost);\n        if (j >= cost[i]) {\n            dp[i][j] = Math.max(dp[i][j], 1 + dpf(i + 1, j - cost[i] + ((9 * cost[i]) / 10), dp, cost));\n        }\n        return dp[i][j];\n    }\n\n    public int max_courses(int n, int total, int[] cost) {\n        int[][] dp = new int[n][total + 1];\n        for (int i = 0; i < n; i++) {\n            Arrays.fill(dp[i], -1);\n        }\n        return dpf(0, total, dp, cost);\n    }\n}\n\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\r\nclass Solution:\r\n    def dpf(self, i, j, dp, cost):\r\n        if i == len(dp):\r\n            return 0\r\n        if dp[i][j] != -1:\r\n            return dp[i][j]\r\n\r\n        dp[i][j] = self.dpf(i + 1, j, dp, cost)\r\n        if j >= cost[i]:\r\n            dp[i][j] = max(dp[i][j], 1 + self.dpf(i + 1, j - cost[i] + ((9 * cost[i]) // 10), dp, cost))\r\n\r\n        return dp[i][j]\r\n\r\n    def max_courses(self, n, total, cost):\r\n        dp = [[-1] * (total + 1) for _ in range(n)]\r\n        return self.dpf(0, total, dp, cost)\r\n",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}