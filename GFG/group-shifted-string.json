{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 880379,
            "title": "Group Shifted String",
            "titleSlug": "group-shifted-string",
            "content": "<p><span style=\"font-size: 18.6667px;\">Given an array of strings (all lowercase letters), the task is to group them in such a way that all strings in a group are shifted versions of each other.</span></p>\n<p><span style=\"font-size: 18.6667px;\"> Two strings s1 and s2 are called shifted if the following conditions are satisfied:</span></p>\n<ul>\n<li><span style=\"font-size: 18.6667px;\">s1.length = s2.length</span></li>\n<li>s1[i] = s2[i] + m for <span style=\"font-size: 18.6667px;\">1 &lt;= i &lt;= s1.length&nbsp; for a <strong>constant </strong>integer m</span></li>\n</ul>\n<p><span ><strong>Examples :<br /></strong></span></p>\n<pre><span ><strong >Input: </strong><span >arr = [\"acd\", \"dfg\", \"wyz\", \"yab\", \"mop\", \"bdfh\", \"a\", \"x\", \"moqs\"]\n</span><strong >Output:</strong><span > [[\"acd\", \"dfg\", \"wyz\", \"yab\", \"mop\"], [\"bdfh\", \"moqs\"], [\"a\", \"x\"]] \n</span><strong >Explanation: </strong>All shifted strings are grouped together.</span></pre>\n<pre><span ><strong>Input: </strong>arr = [\"geek\", \"for\", \"geeks\"]\n<strong>Output: </strong>[[\"for\"], [\"geek\"], [\"geeks\"]]<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr = [\"aaa\", \"adb\", \"bbd\", \"dbc\", \"bca\"]\n<strong>Output: </strong>[[\"aaa\"], [\"adb\"], [\"bbd\"], [\"bca\"], [\"dbc\"]]</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i].size() &le; 5</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of lowercase strings, group the strings such that all strings within a group are shifted versions of each other. Two strings, `s1` and `s2`, are considered shifted versions if they have the same length and for some constant integer `m`, `s1[i] = s2[i] + m` for all indices `i` in the strings. In essence, each character of `s2` is a shifted character of `s1` by the same constant value.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i].size() <= 5"
                ],
                "testcases": [
                    {
                        "input": "[\"acd\", \"dfg\", \"wyz\", \"yab\", \"mop\", \"bdfh\", \"a\", \"x\", \"moqs\"]",
                        "output": "[[\"acd\", \"dfg\", \"wyz\", \"yab\", \"mop\"], [\"bdfh\", \"moqs\"], [\"a\", \"x\"]]",
                        "explanation": "All shifted strings are grouped together. For instance, \"acd\", \"dfg\", \"wyz\", \"yab\", and \"mop\" form a group because their character differences are constant when wrapping around the alphabet."
                    },
                    {
                        "input": "[\"geek\", \"for\", \"geeks\"]",
                        "output": "[[\"for\"], [\"geek\"], [\"geeks\"]]",
                        "explanation": null
                    },
                    {
                        "input": "[\"aaa\", \"adb\", \"bbd\", \"dbc\", \"bca\"]",
                        "output": "[[\"aaa\"], [\"adb\"], [\"bbd\"], [\"bca\"], [\"dbc\"]]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Group strings by their \"shift pattern\" (difference between consecutive characters) to identify and print groups of shifted strings.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to generate hash by shifting and equating\n    // the first character\n    string getHash(string s) {\n\n        // Calculate the shift needed to normalize the string\n        int shifts = s[0] - 'a';\n        for (char &ch : s) {\n            // Adjust each character by the shift\n            ch = ch - shifts;\n\n            // Wrap around if the character goes below 'a'\n            if (ch < 'a')\n                ch += 26;\n        }\n        return s;\n    }\n\n    // Function to group shifted string together\n    vector<vector<string>> groupShiftedString(vector<string> &arr) {\n        vector<vector<string>> res;\n\n        // Maps hash to index in result\n        unordered_map<string, int> mp;\n\n        for (string s : arr) {\n            // Generate hash representing the shift pattern\n            string hash = getHash(s);\n\n            // If new hash, create a new group\n            if (mp.find(hash) == mp.end()) {\n                mp[hash] = res.size();\n                res.push_back({});\n            }\n            // Add string to its group\n            res[mp[hash]].push_back(s);\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to generate hash by shifting and equating the first character\n    static String getHash(String s) {\n\n        // Calculate the shift needed to normalize the string\n        int shifts = s.charAt(0) - 'a';\n        char[] chars = s.toCharArray();\n\n        for (int i = 0; i < chars.length; i++) {\n            // Adjust each character by the shift\n            chars[i] = (char)(chars[i] - shifts);\n\n            // Wrap around if the character goes below 'a'\n            if (chars[i] < 'a') chars[i] += 26;\n        }\n        return new String(chars);\n    }\n\n    // Function to group shifted strings together\n    public ArrayList<ArrayList<String>> groupShiftedString(String[] arr) {\n        ArrayList<ArrayList<String>> res = new ArrayList<>();\n        HashMap<String, Integer> mp = new HashMap<>(); // Maps hash to index in result\n\n        for (String s : arr) {\n            // Generate hash representing the shift pattern\n            String hash = getHash(s);\n\n            // If new hash, create a new group\n            if (!mp.containsKey(hash)) {\n                mp.put(hash, res.size());\n                res.add(new ArrayList<>());\n            }\n            // Add string to its group\n            res.get(mp.get(hash)).add(s);\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to generate hash by shifting and equating the first character\n    def getHash(self, s):\n        # Calculate the shift needed to normalize the string\n        shifts = ord(s[0]) - ord('a')\n        hashVal = []\n\n        for ch in s:\n            # Adjust each character by the shift\n            newCh = chr(ord(ch) - shifts)\n\n            # Wrap around if the character goes below 'a'\n            if newCh < 'a':\n                newCh = chr(ord(newCh) + 26)\n            hashVal.append(newCh)\n\n        return ''.join(hashVal)\n\n    # Function to group shifted strings together\n    def groupShiftedString(self, arr):\n        res = []  # Result list\n        mp = {}  # Maps hash to index in result\n\n        for s in arr:\n            # Generate hash representing the shift pattern\n            hashVal = self.getHash(s)\n\n            # If new hash, create a new group\n            if hashVal not in mp:\n                mp[hashVal] = len(res)\n                res.append([])\n\n            # Add string to its group\n            res[mp[hashVal]].append(s)\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to generate hash by shifting and equating the first character\n    getHash(s) {\n        // Calculate the shift needed to normalize the string\n        const shifts = s.charCodeAt(0) - 'a'.charCodeAt(0);\n\n        let chars = [];\n        for (let ch of s) {\n            // Adjust each character by the shift\n            let newChar = String.fromCharCode(ch.charCodeAt(0) - shifts);\n\n            // Wrap around if the character goes below 'a'\n            if (newChar < 'a')\n                newChar = String.fromCharCode(newChar.charCodeAt(0) + 26);\n            chars.push(newChar);\n        }\n\n        return chars.join('');\n    }\n\n    // Function to group shifted strings together\n    groupShiftedString(arr) {\n        const res = [];\n\n        // Maps hash to index in result\n        const mp = new Map();\n\n        for (let s of arr) {\n            // Generate hash representing the shift pattern\n            const hash = this.getHash(s);\n\n            // If new hash, create a new group\n            if (!mp.has(hash)) {\n                mp.set(hash, res.length);\n                res.push([]);\n            }\n            // Add string to its group\n            res[mp.get(hash)].push(s);\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}