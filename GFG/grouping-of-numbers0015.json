{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705117,
            "title": "Grouping Of Numbers",
            "titleSlug": "grouping-of-numbers0015",
            "content": "<p><span style=\"font-size:18px\">One day Jim came across array <strong>arr[]</strong> of <strong>N</strong> numbers. He decided to divide these <strong>N</strong> numbers into different groups. Each group contains numbers in which sum of any two numbers should <strong>not be divisible</strong> by an integer <strong>K</strong>. Print the size of the group containing <strong>maximum</strong> numbers.There will be atleast one number which is not divisible by K.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>4, <strong>K = </strong>8</span>\r\n<span style=\"font-size:18px\"><strong>arr[] = </strong>{1, 7, 2, 6}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">2</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The  group of numbers which can be formed\r\nare: (1),(2),(7),(6),(1,2),(1,6),(7,2),(7,6).\r\nSo,the maximum possible size of the group is 2.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>2, <strong>K = </strong>3</span>\r\n<span style=\"font-size:18px\"><strong>arr[] = </strong>{1, 2}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">1</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The  group of numbers which can be formed\r\nare: (1),(2). So,the maximum possible size\r\nof the group is 1.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>maxGroupSize()</strong> which takes 2 Integers N, and K and also an array arr[] of N integers as input and returns the maximum group size possible.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(K)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &le; N,K,arr[i] &le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Sum of any two numbers A,B will be divisible by k&nbsp;only if A%k + B%k == k.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Misc",
                "slug": "misc"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    //Function to find the maximum size of group.\n    int maxGroupSize(int arr[], int N, int K) {\n        \n        //Creating an array to store the frequency of remainders\n        //when each number is divided by K.\n        int a[K]={0};\n        \n        //Iterating over the given array to calculate the frequency\n        //of remainders.\n        for(int i=0; i<N; i++)\n            a[arr[i]%K]++;\n            \n        //Variable to store the maximum size of the group.\n        int ans = 0;\n        \n        //Loop to calculate the maximum size of the group.\n        for(int i=1; i<=K/2; i++)\n        {\n            //If the remainder is not equal to K-remainder, then\n            //we take the maximum of the frequencies for these two remainders\n            //and add it to the answer.\n            if(i != K-i)\n                ans += max(a[i], a[K-i]);\n            //If the remainder is equal to K-remainder, then we check if\n            //there is at least one number with this remainder. If yes,\n            //then we add 1 to the answer.\n            else\n            {\n                if(a[i] != 0)\n                    ans++;\n            }\n        }\n        \n        //Checking if there are any numbers divisible by K.\n        //If yes, then we add 1 to the answer.\n        if(a[0] != 0)\n            ans++;\n            \n        //Returning the maximum size of the group.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    static int maxGroupSize(int[] arr, int N, int K) {\r\n        int a[]=new int[K]; // Create an array to store the frequencies of remainders\r\n\r\n        // Count the frequencies of remainders in the original array\r\n        for(int i=0; i<N; i++)\r\n            a[arr[i]%K]++;\r\n\r\n        int ans = 0; // Initialize a variable to store the maximum group size\r\n\r\n        // Iterate through the remainders up to K/2\r\n        for(int i=1; i<=K/2; i++)\r\n        {\r\n            if(i != K-i) // If the remainders are not equal\r\n                ans += Math.max(a[i], a[K-i]); // Add the maximum frequency of the two remainders\r\n            else\r\n            {\r\n                if(a[i] != 0) // If the remainder is equal to K/2 and not zero\r\n                    ans++; // Increment the maximum group size by 1\r\n            }\r\n        }\r\n\r\n        if(a[0] != 0) // If the frequency of the remainder 0 is not zero\r\n            ans++; // Increment the maximum group size by 1\r\n\r\n        return ans; // Return the maximum group size\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def maxGroupSize(self, arr, N, K):\r\n        # create a list to store the count of remainder values\r\n        a=[0]*(K)\r\n        # iterate through each element in the array\r\n        for i in range(N):\r\n            # increment the count of the remainder value in the list\r\n            a[arr[i]%K]+=1\r\n        ans=0\r\n        # iterate through the possible pairs of remainder values\r\n        for i in range(1,K//2+1):\r\n            # if the remainder values are not equal\r\n            if i!=K-i:\r\n                # add the maximum count between the two remainder values to the answer\r\n                ans+=max(a[i],a[K-i])\r\n            else:\r\n                # if the remainder values are equal\r\n                if a[i]!=0:\r\n                    # add 1 to the answer\r\n                    ans+=1\r\n        # if there are elements with remainder 0, add 1 to the answer\r\n        if a[0]!=0:\r\n            ans+=1\r\n        # return the final answer\r\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number[]} arr\r\n * @param {number} N\r\n * @param {number} K\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution\r\n{\r\n    //Function to find the size of largest group.\r\n    maxGroupSize(arr, N, K)\r\n    {\r\n        // create a list to store the count of remainder values\r\n        let a = new Array(K).fill(0);\r\n        \r\n        // iterate through each element in the array\r\n        for (let i = 0; i < N; i++) {\r\n            // increment the count of the remainder value in the list\r\n            a[arr[i] % K] += 1;\r\n        }\r\n        \r\n        let ans = 0;\r\n        \r\n        // iterate through the possible pairs of remainder values\r\n        for (let i = 1; i <= Math.floor(K / 2); i++) {\r\n            // if the remainder values are not equal\r\n            if (i !== K - i) {\r\n                // add the maximum count between the two remainder values to the answer\r\n                ans += Math.max(a[i], a[K - i]);\r\n            } else {\r\n                // if the remainder values are equal\r\n                if (a[i] !== 0) {\r\n                    // add 1 to the answer\r\n                    ans += 1;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // if there are elements with remainder 0, add 1 to the answer\r\n        if (a[0] !== 0) {\r\n            ans += 1;\r\n        }\r\n        \r\n        // return the final answer\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int maxGroupSize(int[] arr, int N, int K)\n    {\n        //Creating an array to store the frequency of remainders\n        //when each number is divided by K.\n        int[] a = new int[K];\n        \n        //Iterating over the given array to calculate the frequency\n        //of remainders.\n        for(int i=0; i<N; i++)\n            a[arr[i]%K]++;\n            \n        //Variable to store the maximum size of the group.\n        int ans = 0;\n        \n        //Loop to calculate the maximum size of the group.\n        for(int i=1; i<=K/2; i++)\n        {\n            //If the remainder is not equal to K-remainder, then\n            //we take the maximum of the frequencies for these two remainders\n            //and add it to the answer.\n            if(i != K-i)\n                ans += Math.Max(a[i], a[K-i]);\n            //If the remainder is equal to K-remainder, then we check if\n            //there is at least one number with this remainder. If yes,\n            //then we add 1 to the answer.\n            else\n            {\n                if(a[i] != 0)\n                    ans++;\n            }\n        }\n        \n        //Checking if there are any numbers divisible by K.\n        //If yes, then we add 1 to the answer.\n        if(a[0] != 0)\n            ans++;\n            \n        //Returning the maximum size of the group.\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}