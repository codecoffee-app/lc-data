{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705887,
            "title": "Hamiltonian Path",
            "titleSlug": "hamiltonian-path2522",
            "content": "<p data-start=\"24\" data-end=\"245\"><span >Given an undirected graph with <strong>n</strong> vertices and <strong>m</strong> edges, your task is to determine if a Hamiltonian path exists in the graph. </span></p>\n<p data-start=\"24\" data-end=\"245\"><span >A<a href=\"https://www.geeksforgeeks.org/hamiltonian-cycle/\"> <strong data-start=\"154\" data-end=\"174\">Hamiltonian path</strong></a> is a path in an undirected graph that visits each vertex exactly once.</span></p>\n<p data-start=\"247\" data-end=\"278\"><span >You are provided the following:</span></p>\n<p><span > </span></p>\n<ul data-start=\"280\" data-end=\"498\">\n<li data-start=\"280\" data-end=\"325\"><span ><strong data-start=\"282\" data-end=\"287\">n</strong>: The number of vertices in the graph.</span></li>\n<li data-start=\"326\" data-end=\"368\"><span ><strong data-start=\"328\" data-end=\"333\">m</strong>: The number of edges in the graph.</span></li>\n<li data-start=\"369\" data-end=\"498\"><span ><strong data-start=\"371\" data-end=\"384\">edges[][]</strong>: A 2D list where each element edges[i] represents an edge between two vertices edges[i][0] and edges[i][1].&nbsp;</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4, m = 4\nedges[][]= { {1,2}, {2,3}, {3,4}, {2,4} }\n<strong>Output: </strong>1 \n<strong>Explanation: </strong>There is a hamiltonian path: 1 -&gt; 2 -&gt; 3 -&gt; 4 </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4, m = 3 \nedges[][] = { {1,2}, {2,3}, {2,4} } \n<strong>Output: </strong>0 \n<strong>Explanation: </strong>It can be proved that there is no hamiltonian path in the given graph.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; n &le; 10</span><br /><span style=\"font-size: 18px;\">1 &le; m &le; 15</span><br /><span style=\"font-size: 18px;\">Size of edges[i] is 2</span><br /><span style=\"font-size: 18px;\">1 &le; edges[i][0],edges[i][1] &le; n</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with *n* vertices and *m* edges, determine if a Hamiltonian path exists. A Hamiltonian path is a path that visits each vertex exactly once.",
                "constraints": [
                    "1 <= n <= 10",
                    "1 <= m <= 15",
                    "Size of edges[i] is 2",
                    "1 <= edges[i][0], edges[i][1] <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 4\nedges = { {1,2}, {2,3}, {3,4}, {2,4} }",
                        "output": "1",
                        "explanation": "A Hamiltonian path exists: 1 -> 2 -> 3 -> 4."
                    },
                    {
                        "input": "n = 4, m = 3\nedges = { {1,2}, {2,3}, {2,4} }",
                        "output": "0",
                        "explanation": "It can be shown that there is no Hamiltonian path in the graph."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Think about backtracking.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<vector<int>> v;\n\n    bool dfs(int u, int label[], int count, int n) {\n        label[u] = 1;\n\n        if (count == n)\n            return true;\n\n        for (int j = 0; j < v[u].size(); j++) {\n            if (label[v[u][j]] == 0) {\n                if (dfs(v[u][j], label, count + 1, n))\n                    return true;\n\n                label[v[u][j]] = 0;\n            }\n        }\n        return false;\n    }\n\n    bool check(int n, int m, vector<vector<int>> edges) {\n        v = vector<vector<int>>(n + 1);\n\n        for (auto i : edges) {\n            v[i[0]].push_back(i[1]);\n            v[i[1]].push_back(i[0]);\n        }\n\n        int label[15];\n\n        for (int i = 0; i <= n; i++)\n            label[i] = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (dfs(i, label, 1, n))\n                return true;\n\n            label[i] = 0;\n        }\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    ArrayList<ArrayList<Integer>> v; // adjacency list representation of graph\n\n    boolean dfs(int u, int[] label, int count, int n) {\n        label[u] = 1; // marking current node as visited\n\n        if (count == n) return true; // if all n nodes are visited, return true\n\n        // traversing all the neighbors of current node\n        for (int j = 0; j < v.get(u).size(); j++) {\n            if (label[v.get(u).get(j)] == 0) // if neighbor is not visited\n            {\n                if (dfs(v.get(u).get(j), label, count + 1, n)) // recursive call\n                    return true; // if any recursive call returns true, return true\n                label[v.get(u).get(j)] =\n                    0; // backtrack if current neighbor does not lead to a valid path\n            }\n        }\n\n        return false; // if no valid path found\n    }\n\n    boolean check(int n, int m, ArrayList<ArrayList<Integer>> edges) {\n        v = new ArrayList<>(); // initialize adjacency list\n        for (int i = 0; i <= n; i++)\n            v.add(new ArrayList<>()); // create empty lists for each node\n\n        for (ArrayList<Integer> edge : edges) {\n            v.get(edge.get(0)).add(edge.get(1)); // add edge from node 1 to node 2\n            v.get(edge.get(1)).add(edge.get(0)); // and vice versa\n        }\n\n        int[] label = new int[15]; // label array to keep track of visited nodes\n\n        for (int i = 1; i <= n; i++) {\n            if (dfs(i, label, 1, n)) // call dfs for each node\n                return true;         // if dfs returns true, there is a cycle\n            label[i] = 0; // backtrack if current node does not lead to a valid cycle\n        }\n        return false; // if no cycles found\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def check(self, n, m, edges):\n\n        #Initializing the label array with 0s\n        label = [0] * (n + 1)\n\n        #creating an adjacency list representation of the graph\n        graph = [[] for i in range(n + 1)]\n\n        #Initializing count to 1\n        count = 1\n\n        #Creating the graph using the given edges\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n            graph[edge[1]].append(edge[0])\n\n        #Iterating over all nodes of the graph\n        for i in range(1, n + 1):\n\n            #If we find a path visiting all nodes using DFS, return True\n            if self.dfs(i, label, graph, count, n):\n                return True\n\n            #Resetting the label array for next iteration\n            label[i] = 0\n\n        #If no path visiting all nodes is found, return False\n        return False\n\n    #Recursive helper function for DFS\n    def dfs(self, node, label, graph, count, n):\n\n        #Marking the current node as visited\n        label[node] = 1\n\n        #If all nodes have been visited, return True\n        if count == n:\n            return True\n\n        #Iterating over the adjacent nodes of the current node\n        for neighbor in graph[node]:\n\n            #If the adjacent node is not visited\n            if label[neighbor] == 0:\n\n                #If a path visiting all nodes is found, return True\n                if self.dfs(neighbor, label, graph, count + 1, n):\n                    return True\n\n                #Resetting the label array for next iteration\n                label[neighbor] = 0\n\n        #If no path visiting all nodes is found, return False\n        return False\n",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}