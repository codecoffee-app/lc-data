{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712344,
            "title": "Hands of Straights",
            "titleSlug": "hands-of-straights",
            "content": "<p><span style=\"font-size: 18px;\">Alice has some cards, each card has one number written on it. She wants to rearrange the cards into groups so that each group is of size <strong>groupSize</strong>, and consists of <strong>groupSize </strong>consecutive cards.<br />Given an integer array <strong>hand</strong> of size <strong>N</strong> where <strong>hand [ i ]</strong> is the value written on the <strong>i<sup>th</sup></strong>&nbsp;card and an integer <strong>groupSize</strong>, return <strong>true</strong> if she can rearrange the cards, or <strong>false</strong> otherwise.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<div style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />N = 9<br />groupSize = 3<br />hand[ ] = {1, 2, 3, 6, 2, 3, 4, 7, 8}<br /><strong>Output: </strong>true<br /><strong>Explanation:</strong>&nbsp;<br />Alice's hand can be rearranged as {1, 2, 3} , {2, 3, 4}, {6, 7, 8}. There are three groups with size 3. Each group has 3 consecutive cards.</span></div>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<div style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />N = 5<br />groupSize = 2<br />hand[ ] = {1, 2, 3, 4, 5}<br /><strong>Output: </strong>false<br /><strong>Explanation:</strong>&nbsp;<br />Alice's hand cannot be rearranged into groups of 2. Since there are 5 cards and 5 cards cannot be divided into groups of 2.</span></div>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>isStraightHand()</strong>&nbsp;which takes the interger <strong>N</strong>, integer <strong>groupSize</strong>&nbsp;and an integer array&nbsp;<strong>hand&nbsp;</strong>as parameters and returns the true if specified arrangement is possible.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(Nlog(N))<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br />1 &le; groupSize&nbsp;&le; N</span><br /><span style=\"font-size: 18px;\">0 &le; hand<sub>i</sub>&nbsp;&le; 10</span><span style=\"font-size: 15px;\"><sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Sort the array and try to come up with a Greedy approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    //Function to check if hand can be arranged in straight groups.\n    bool isStraightHand(int N, int groupSize, vector<int> &hand) {\n\n        // Mapping each element of hand and its frequency\n        map<int, int> mp;\n        for (int i : hand) mp[i]++;\n        \n        //iterating over the map elements\n        for (auto it : mp) {\n            //checking if frequency of current element is positive\n            if (mp[it.first] > 0) {\n                //iterating over the group size in reverse\n                for (int i = groupSize - 1; i >= 0; --i) {\n                    //checking if frequency of element with current key + i is more than current element\n                    if ((mp[it.first + i] -= mp[it.first]) < 0) return false;\n                }\n            }\n        }\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    static boolean isStraightHand(int N, int W, int hand[]) {\n        // check if the length of hand array is divisible by W\n        // if not, it's not possible to form straight hands\n        if (hand.length % W != 0) return false;\n        \n        // use TreeMap to store the frequency of each number in the hand array\n        TreeMap<Integer, Integer> treeMap = new TreeMap<>();\n        for (int num : hand) {\n            // increment the frequency of the number in the TreeMap\n            treeMap.put(num, treeMap.getOrDefault(num, 0) + 1);\n        }\n\n        // iterate over the TreeMap until it is empty\n        while (!treeMap.isEmpty()) {\n            // get the smallest number in the TreeMap\n            int first = treeMap.firstKey();\n            for (int j = 1; j < W; j++) {\n                // check if the next number in the straight hand exists in the TreeMap\n                int next = first + j;\n                if (treeMap.containsKey(next)) {\n                    // decrement the frequency of the next number in the TreeMap\n                    treeMap.put(next, treeMap.get(next) - 1);\n                    // if the frequency becomes 0, remove the entry from the TreeMap\n                    if (treeMap.get(next) == 0) treeMap.remove(next);\n                } else {\n                    // if the next number doesn't exist in the TreeMap, it's not possible to form straight hands\n                    return false;\n                }\n            }\n            // decrement the frequency of the current number in the TreeMap\n            treeMap.put(first, treeMap.get(first) - 1);\n            // if the frequency becomes 0, remove the entry from the TreeMap\n            if (treeMap.get(first) == 0) treeMap.remove(first);\n        }\n        // return true if all straight hands can be formed\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import Counter\nclass Solution:\n    \n    # Function to check if the given hand can be arranged as a straight hand.\n    def isStraightHand(self, N, groupSize, hand):\n        # Create a counter to count the occurrences of each card in the hand.\n        mp = Counter(hand)\n        \n        # Iterate through the counter.\n        for key in mp:\n            # If the count for a card is less than or equal to 0, skip it.\n            if mp[key] <= 0:\n                continue\n            \n            # Iterate backwards from groupSize-1 to 0.\n            for i in range(groupSize - 1, -1, -1):\n                # Reduce the count of the card at position key+i by the count of the card at position key.\n                mp[key + i] -= mp[key]\n                \n                # If the count of the card at position key+i is less than 0, return False.\n                if mp[key + i] < 0:\n                    return False\n        \n        # If all cards can be arranged into straight hands, return True.\n        return True",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}