{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704623,
            "title": "Handshakes",
            "titleSlug": "handshakes1303",
            "content": "<p><span style=\"font-size:18px\">We have N&nbsp;persons sitting on a round table. Any person can do a handshake with any other person. </span></p>\n\n<p><span style=\"font-size:18px\">&nbsp; &nbsp; &nbsp;1<br />\n2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3<br />\n&nbsp; &nbsp; &nbsp;4</span></p>\n\n<p><span style=\"font-size:18px\">Handshake with 2-3 and 1-4 will cause cross.</span></p>\n\n<p><span style=\"font-size:18px\">In how many ways these N&nbsp;people can make handshakes so that no two handshakes cross each other.&nbsp;N would be even.&nbsp; </span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 2\n<strong>Output:</strong>\n1\n<strong>Explanation:</strong>\n{1,2} handshake is\npossible.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 4\n<strong>Output:</strong>\n2\n<strong>Explanation:</strong>\n{{1, 2}, {3, 4}} are the\ntwo handshakes possible.\n{{1, 3}, {2, 4}} is another\nset of handshakes possible.</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>count()</strong>&nbsp;which takes&nbsp;an integer <strong>N</strong>&nbsp;as input parameters&nbsp;and returns an integer, the total number of handshakes possible so that no two handshakes cross each other.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(2<sup>N</sup>)<br />\n<strong>Expected Space Complexity:</strong> O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 30</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given N people sitting around a round table, where N is an even number. Determine the number of ways they can perform handshakes such that no two handshakes cross each other. A crossing handshake occurs when two pairs of handshakes intersect (e.g., handshake 1-4 crosses handshake 2-3).",
                "constraints": [
                    "1 <= N <= 30",
                    "N is even"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "1",
                        "explanation": "With 2 people, only one handshake {1, 2} is possible."
                    },
                    {
                        "input": "4",
                        "output": "2",
                        "explanation": "With 4 people, two non-crossing handshake arrangements are possible: {{1, 2}, {3, 4}} and {{1, 4}, {2, 3}}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Catalan Numbers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    int count(int N)\n    {\n        // base case\n        // if N is Odd return 0  \n    \tif(N%2==1) return 0;\n    \t\n    \t// if N is zero return 1\n    \telse if(N==0)\n    \t\treturn 1;\n    \tint res=0;\n    \t\n    \t// for each even i from 0 to N\n    \tfor(int i=0;i<N;i+=2)\n    \t    // add the product of count(i) * count(N-2-i)\n    \t\tres+=count(i)*count(N-2-i);\n    \treturn res;\n    }\n    \n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    static int count(int N) \n    { \n        // base case\n        // if N is Odd return 0  \n    \tif(N%2==1) return 0;\n    \t\n    \t// if N is zero return 1\n    \telse if(N==0)\n    \t\treturn 1;\n    \tint res=0;\n    \t\n    \t// for each even i from 0 to N\n    \tfor(int i=0;i<N;i+=2)\n    \t    // add the product of count(i) * count(N-2-i)\n    \t\tres+=count(i)*count(N-2-i);\n    \treturn res;\n    } \n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def count(self, N):\n        # base cases\n        # if N is Odd return 0  \n    \tif(N%2==1): return 0\n    \t\n    \t# if N is zero return 1\n    \telif(N==0):\n    \t\treturn 1\n    \tres=0\n    \t\n    \t# for each even i from 0 to N\n    \tfor i in range(0,N,2):\n    \t    # add the product of count(i) * count(N-2-i)\n    \t\tres+=self.count(i)*self.count(N-2-i)\n    \treturn res",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number} N\n * @return {number}\n*/\n\nclass Solution {\n    count(N){\n       // base case\n        // if N is Odd return 0  \n    \tif(N%2==1) return 0;\n    \t\n    \t// if N is zero return 1\n    \telse if(N==0)\n    \t\treturn 1;\n    \tlet res=0;\n    \t\n    \t// for each even i from 0 to N\n    \tfor(let i=0;i<N;i+=2) {\n    \t    // add the product of count(i) * count(N-2-i)\n    \t\tres+=this.count(i)*this.count(N-2-i);\n    \t}\n    \treturn res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}