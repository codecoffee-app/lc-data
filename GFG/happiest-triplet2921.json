{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702809,
            "title": "Happiest Triplet",
            "titleSlug": "happiest-triplet2921",
            "content": "<p><span style=\"font-size: 18px;\">You are given the three arrays <strong>arr1[]</strong>, <strong>arr2[]</strong>, <strong>arr3[] </strong>of the same size . Find a triplet such that (maximum-minimum) in that triplet is the minimum of all the triplets. A triplet should be selected so that it should have one number from each of the three given arrays. This triplet is the happiest among all the possible triplets. Print the triplet in decreasing order. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>If there are 2 or more smallest difference triplets, then the one with the smallest sum of its elements should be displayed.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1[] = [5, 2, 8] , arr2[] = [10, 7, 12] , arr3[] = [9, 14, 6]\n<strong>Output:</strong> [7, 6, 5]\n<strong>Explanation</strong>: The triplet { 5,7,6 }&nbsp; has difference (maximum - minimum)= (7-5) =2 which is minimum of all triplets.  </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1[] = [15, 12, 18, 9] , arr2[] = [10, 17, 13, 8] , arr3[] = [14, 16, 11, 5]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> [11, 10, 9]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*logn)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr1.size(),arr2.size(),arr3.size() &le; 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &le; arr1[i],arr2[i],arr3[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three arrays, `arr1`, `arr2`, and `arr3`, all of the same size, find a triplet (one number from each array) such that the difference between the maximum and minimum values in that triplet is minimized across all possible triplets. If multiple triplets have the same minimum difference, select the triplet with the smallest sum of its elements. Return the triplet in decreasing order.",
                "constraints": [
                    "1 <= arr1.size(), arr2.size(), arr3.size() <= 10^5",
                    "1 <= arr1[i], arr2[i], arr3[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [5, 2, 8], arr2 = [10, 7, 12], arr3 = [9, 14, 6]",
                        "output": "[7, 6, 5]",
                        "explanation": "The triplet {5, 7, 6} has a difference (maximum - minimum) = (7 - 5) = 2, which is the minimum difference among all possible triplets. Therefore, the output is the triplet {7, 6, 5} in decreasing order."
                    },
                    {
                        "input": "arr1 = [15, 12, 18, 9], arr2 = [10, 17, 13, 8], arr3 = [14, 16, 11, 5]",
                        "output": "[11, 10, 9]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the arrays and use a three-pointer approach to find the triplet with the smallest difference between the maximum and minimum elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maximum(int a, int b, int c) { return max(a, max(b, c)); }\n\n    int minimum(int a, int b, int c) { return min(a, min(b, c)); }\n\n    vector<int> smallestDifferenceTriplet(vector<int>& arr1, vector<int>& arr2,\n                                          vector<int>& arr3) {\n\n        // sort the arrays\n        sort(arr1.begin(), arr1.end());\n        sort(arr2.begin(), arr2.end());\n        sort(arr3.begin(), arr3.end());\n        int n = arr1.size();\n        // Variables to store the resulting triplet\n        int res_min, res_max, res_mid;\n        int i = 0, j = 0, k = 0;\n        // Initialize the difference to a very large value\n        int diff = INT_MAX;\n        // Traverse the arrays using three pointers\n        while (i < n && j < n && k < n) {\n            // Calculate the sum of current elements\n            int sum = arr1[i] + arr2[j] + arr3[k];\n            // Find the maximum among current elements\n            int max = maximum(arr1[i], arr2[j], arr3[k]);\n            // Find the minimum among current elements\n            int min = minimum(arr1[i], arr2[j], arr3[k]);\n\n            // Move the pointer of the array that contains the minimum element\n            if (min == arr1[i])\n                i++;\n            else if (min == arr2[j])\n                j++;\n            else\n                k++;\n            // Check if the current difference is smaller than the previously found\n            // difference\n            if (diff > (max - min)) {\n                diff = max - min;\n                res_max = max;\n                res_mid = sum - (max + min);\n                res_min = min;\n            }\n        }\n        // Prepare the result array with the smallest difference triplet\n        vector<int> ans;\n        ans.push_back(res_max);\n        ans.push_back(res_mid);\n        ans.push_back(res_min);\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    int[] smallestDifferenceTriplet(int arr1[], int arr2[], int arr3[]) {\n\n        // sort the arrays\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        Arrays.sort(arr3);\n        int n = arr1.length;\n        // Variables to store the resulting triplet\n        int res_min = 0, res_max = 0, res_mid = 0;\n        int i = 0, j = 0, k = 0;\n        // Initialize the difference to a very large value\n        int diff = Integer.MAX_VALUE;\n        // three pointers approach\n\n        while (i < n && j < n && k < n) {\n            int sum = arr1[i] + arr2[j] + arr3[k];\n            int max = Math.max(arr1[i], Math.max(arr2[j], arr3[k]));\n            int min = Math.min(arr1[i], Math.min(arr2[j], arr3[k]));\n            // Check if the current difference is smaller than the previously found\n            // difference\n            if (diff > (max - min)) {\n                diff = max - min;\n                res_max = max;\n                res_mid = sum - (max + min);\n                res_min = min;\n            }\n\n            // Move the pointer of the array that contains the minimum element\n            if (min == arr1[i])\n                i++;\n            else if (min == arr2[j])\n                j++;\n            else\n                k++;\n        }\n\n        // Prepare the result array with the smallest difference triplet\n        return new int[] {res_max, res_mid, res_min};\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def smallestDifferenceTriplet(self, arr1, arr2, arr3):\n        # Sort the arrays\n        arr1.sort()\n        arr2.sort()\n        arr3.sort()\n\n        n = len(arr1)\n        res_min, res_max, res_mid = 0, 0, 0\n        i, j, k = 0, 0, 0\n        diff = float('inf')\n\n        # Iterate through the arrays\n        while i < n and j < n and k < n:\n            total_sum = arr1[i] + arr2[j] + arr3[k]\n            max_value = max(arr1[i], arr2[j], arr3[k])\n            min_value = min(arr1[i], arr2[j], arr3[k])\n\n            # Move the pointer of the array containing the minimum element\n            if min_value == arr1[i]:\n                i += 1\n            elif min_value == arr2[j]:\n                j += 1\n            else:\n                k += 1\n\n            # Update the result if the current difference is smaller\n            if diff > (max_value - min_value):\n                diff = max_value - min_value\n                res_max = max_value\n                res_mid = total_sum - (max_value + min_value)\n                res_min = min_value\n\n        # Return the result list\n        return [res_max, res_mid, res_min]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    smallestDifferenceTriplet(arr1, arr2, arr3) {\n        // Sort the arrays\n        arr1.sort((a, b) => a - b);\n        arr2.sort((a, b) => a - b);\n        arr3.sort((a, b) => a - b);\n\n        let n = arr1.length;\n        let res_min, res_max, res_mid;\n        let i = 0, j = 0, k = 0;\n        let diff = Infinity;\n\n        // Iterate through the arrays\n        while (i < n && j < n && k < n) {\n            let total_sum = arr1[i] + arr2[j] + arr3[k];\n            let max_value = Math.max(arr1[i], arr2[j], arr3[k]);\n            let min_value = Math.min(arr1[i], arr2[j], arr3[k]);\n\n            // Move the pointer of the array containing the minimum element\n            if (min_value === arr1[i]) {\n                i++;\n            } else if (min_value === arr2[j]) {\n                j++;\n            } else {\n                k++;\n            }\n\n            // Update the result if the current difference is smaller\n            if (diff > (max_value - min_value)) {\n                diff = max_value - min_value;\n                res_max = max_value;\n                res_mid = total_sum - (max_value + min_value);\n                res_min = min_value;\n            }\n        }\n\n        // Return the result array\n        return [ res_max, res_mid, res_min ];\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}