{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 879202,
            "title": "Hashing for pair - 2",
            "titleSlug": "hashing-for-pair-2--114603",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array of integers <strong>arr[] </strong>which might contain duplicate elements and an integer <strong>sum</strong>. You need to find if two numbers in the array&nbsp;exists that have sum equal to the given sum.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], sum = 14\n<strong>Output: </strong>1<strong>\nExplanation: </strong>There exists a pair which gives sum as 14 example (4,10),(5,9) etc.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] =[4, 4, 5, 6], sum = 8\n<strong>Output: </strong>1<strong>\nExplanation: </strong>There exists a pair(4,4) which gives sum as 12.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 1000<br />1 &lt;= arr<sub>i</sub> &lt;= 10<sup>6</sup><br />1 &lt;= sum &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]` which may contain duplicate elements, determine if there exists a pair of numbers within the array that sums to a given integer `sum`. Return 1 if such a pair exists, otherwise return 0.",
                "constraints": [
                    "1 <= arr.length <= 1000",
                    "1 <= arr[i] <= 10^6",
                    "1 <= sum <= 1000"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], sum = 14",
                        "output": "1",
                        "explanation": "The pair (4, 10) sums to 14. Other possible pairs include (5, 9) and (6, 8)."
                    },
                    {
                        "input": "arr[] = [4, 4, 5, 6], sum = 8",
                        "output": "1",
                        "explanation": "The pair (4, 4) sums to 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n// Function to check if two numbers in the array have sum equal to the given\n// sum.\nint sumExists(vector<int>& arr, int sum) {\n    // using set to store the elements.\n    unordered_set<int> s;\n    int N = arr.size();\n    // iterating over the array.\n    for (int i = 0; i < N; i++) {\n        int temp = sum - arr[i];\n        // if (sum-arr[i]) or temp exists in set, we return 1.\n        if (temp >= 0 && s.count(temp) != 0)\n            return 1;\n\n        // inserting current element in the set.\n        s.insert(arr[i]);\n    }\n\n    // if no such pair is present, we return 0.\n    return 0;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Geeks {\n    // Function to check if two numbers in array have sum equal to the given\n    // sum.\n    public static int sumExists(int arr[], int sum) {\n        // using HashSet to store the elements.\n        HashSet<Integer> hs = new HashSet<>();\n        int N = arr.length;\n        // iterating over the array.\n        for (int i = 0; i < N; i++) {\n            int temp = sum - arr[i];\n\n            // if (sum-arr[i]) or temp exists in HashSet, we return 1.\n            if (temp >= 0 && hs.contains(temp)) {\n                return 1;\n            }\n            // inserting current element in the HashSet.\n            hs.add(arr[i]);\n        }\n        // if no such pair is present, we return 0.\n        return 0;\n    }\n}",
                "lang_text": "java"
            }
        },
        "platform": "GFG"
    }
}