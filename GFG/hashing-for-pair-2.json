{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701026,
            "title": "Hashing for pair - 2",
            "titleSlug": "hashing-for-pair-2",
            "content": "<p><span style=\"font-size:18px\">You are given an array of integers and an integer&nbsp;<strong>sum</strong>. You need to find if two numbers in the array&nbsp;exists that have sum equal to the given sum.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 10\narr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nsum = 14\n\n<strong>Output: \n</strong>1\n<strong>\nExplanation: \n</strong>there exists a pair which \ngives sum as 14 example \n(4,10),(5,9) etc.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4\narr[] ={4, 3, 5, 6}\nsum = 12\n\n<strong>Output: \n</strong>0\n<strong>\nExplanation: \n</strong>there does not exist any\nsuch pair which gives sum as 12.</span>\n\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. You just have to complete the function&nbsp;<strong>sumExists()&nbsp;</strong>which takes the array&nbsp;<strong>arr[]</strong>, its size&nbsp;<strong>N&nbsp;</strong>and an integer <strong>sum&nbsp;</strong>as inputs and returns 1 if there exists a pair with the given sum in the array. Else, it returns 0.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 1000<br />\n1 &lt;= arr<sub>i</sub> &lt;= 10<sup>6</sup><br />\n1 &lt;= sum &lt;= 1000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers and an integer `sum`, determine if there exists a pair of numbers within the array that adds up to the given `sum`.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= arr[i] <= 10^6",
                    "1 <= sum <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 10\narr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nsum = 14",
                        "output": "1",
                        "explanation": "There exists at least one pair of numbers in the array that sums to 14. Examples include (4, 10) and (5, 9)."
                    },
                    {
                        "input": "N = 4\narr[] ={4, 3, 5, 6}\nsum = 12",
                        "output": "0",
                        "explanation": "There is no pair of numbers in the array that sums to 12."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\n// Function to check if two numbers in the array have sum equal to the given\n// sum.\nint sumExists(int arr[], int N, int sum) {\n    // using set to store the elements.\n    unordered_set<int> s;\n\n    // iterating over the array.\n    for (int i = 0; i < N; i++) {\n        int temp = sum - arr[i];\n        // if (sum-arr[i]) or temp exists in set, we return 1.\n        if (temp >= 0 && s.count(temp) != 0) return 1;\n\n        // inserting current element in the set.\n        s.insert(arr[i]);\n    }\n\n    // if no such pair is present, we return 0.\n    return 0;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Geeks {\n    // Function to check if two numbers in array have sum equal to the given\n    // sum.\n    public static int sumExists(int arr[], int N, int sum) {\n        // using HashSet to store the elements.\n        HashSet<Integer> hs = new HashSet<>();\n\n        // iterating over the array.\n        for (int i = 0; i < N; i++) {\n            int temp = sum - arr[i];\n\n            // if (sum-arr[i]) or temp exists in HashSet, we return 1.\n            if (temp >= 0 && hs.contains(temp)) {\n                return 1;\n            }\n            // inserting current element in the HashSet.\n            hs.add(arr[i]);\n        }\n        // if no such pair is present, we return 0.\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n#Function to check if two numbers in the array have sum equal to the given sum.\ndef sumExists(arr,N,sum):\n    \n    #using set to store the elements.\n    mySet=set() \n    \n    #iterating over the array.\n    for i in arr: \n        temp=sum-i\n        \n        #if (sum-arr[i]) or temp exists in set, we return 1.\n        if(temp>=0 and temp in mySet): \n            return 1\n            \n        #inserting current element in the set.\n        mySet.add(i) \n        \n    #if no such pair is present, we return 0.\n    return 0",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} N\n * @param {number} sum\n * @returns {number}\n*/\nclass Solution {\n    // Function to check if two numbers in array have sum equal to the given\n    // sum.\n    sumExists(arr, N, sum) {\n        // using map to store the elements.\n        let s = new Map();\n\n        // iterating over the array.\n        for (let i = 0; i < N; i++) {\n            let temp = sum - arr[i];\n\n            // if (sum-arr[i]) or temp exists in map, we return 1.\n            if (temp >= 0 && s.has(temp)) return 1;\n\n            // inserting current element in the map.\n            s.set(arr[i], true);\n        }\n        // if no such pair is present, we return 0.\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}