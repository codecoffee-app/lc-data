{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700167,
            "title": "Heap Sort",
            "titleSlug": "heap-sort",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr[]</strong>. The task is to sort the array elements by Heap Sort.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 1, 3, 9, 7]\n<strong>Output: </strong>[1, 3, 4, 7, 9]<strong>\nExplanation: </strong>After sorting elements using heap sort, elements will be in order as 1, 3, 4, 7, 9.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n<strong>Output: </strong>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<strong>\nExplanation: </strong>After sorting elements using heap sort, elements will be in order as 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 1, 5]\n<strong>Output: </strong>[1, 2, 5]<strong>\nExplanation: </strong>After sorting elements using heap sort, elements will be in order as 1, 2, 5.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Sort the elements of a given array using the Heap Sort algorithm.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[4, 1, 3, 9, 7]",
                        "output": "[1, 3, 4, 7, 9]",
                        "explanation": "The array is sorted in ascending order using Heap Sort."
                    },
                    {
                        "input": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
                        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
                        "explanation": "The array is sorted in ascending order using Heap Sort."
                    },
                    {
                        "input": "[2, 1, 5]",
                        "output": "[1, 2, 5]",
                        "explanation": "The array is sorted in ascending order using Heap Sort."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "samsung",
            "24*7-innovation-labs",
            "oracle",
            "visa",
            "intuit",
            "sap-labs",
            "belzabar"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\n// Function to heapify a subtree rooted at index i.\n// n is the size of the heap.\nvoid heapify(int arr[], int n, int i) {\n    int largest = i;       // Initialize largest as root\n    int left = 2 * i + 1;  // Left child\n    int right = 2 * i + 2; // Right child\n\n    // If left child is larger than root\n    if (left < n && arr[left] > arr[largest]) {\n        largest = left;\n    }\n\n    // If right child is larger than largest so far\n    if (right < n && arr[right] > arr[largest]) {\n        largest = right;\n    }\n\n    // If largest is not root\n    if (largest != i) {\n        swap(&arr[i], &arr[largest]);\n\n        // Recursively heapify the affected subtree\n        heapify(arr, n, largest);\n    }\n}\n\n// Function to perform heap sort\nvoid heapSort(int arr[], int n) {\n    // Build a max heap\n    for (int i = n / 2 - 1; i >= 0; i--) {\n        heapify(arr, n, i);\n    }\n\n    // One by one extract elements from the heap\n    for (int i = n - 1; i > 0; i--) {\n        // Move current root (maximum element) to the end\n        swap(&arr[0], &arr[i]);\n\n        // Call heapify on the reduced heap\n        heapify(arr, i, 0);\n    }\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to heapify a subtree rooted at index i.\n    // n is the size of the heap\n    void heapify(vector<int>& arr, int n, int i) {\n        int largest = i;\n        int left = 2 * i + 1;\n        int right = 2 * i + 2;\n\n        // If left child is larger than root\n        if (left < n && arr[left] > arr[largest])\n            largest = left;\n\n        // If right child is larger than largest so far\n        if (right < n && arr[right] > arr[largest])\n            largest = right;\n\n        // If largest is not root\n        if (largest != i) {\n            swap(arr[i], arr[largest]);\n\n            // Recursively heapify the affected subtree\n            heapify(arr, n, largest);\n        }\n    }\n\n  public:\n\n    // Function to sort an array using Heap Sort.\n    void heapSort(vector<int>& arr) {\n        int n = arr.size();\n\n        // Build a max heap\n        for (int i = n / 2 - 1; i >= 0; i--)\n            heapify(arr, n, i);\n\n        // One by one extract elements from the heap\n        for (int i = n - 1; i > 0; i--) {\n            // Move current root (maximum element) to the end\n            swap(arr[0], arr[i]);\n\n            // Call heapify on the reduced heap\n            heapify(arr, i, 0);\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public void heapify(int arr[], int n, int i) {\n        int largest = i;\n        int left = 2 * i + 1;\n        int right = 2 * i + 2;\n\n        // If left child is larger than root\n        if (left < n && arr[left] > arr[largest]) largest = left;\n\n        // If right child is larger than largest so far\n        if (right < n && arr[right] > arr[largest]) largest = right;\n\n        // If largest is not root\n        if (largest != i) {\n            int temp = arr[i];\n            arr[i] = arr[largest];\n            arr[largest] = temp;\n\n            // Recursively heapify the affected subtree\n            heapify(arr, n, largest);\n        }\n    }\n\n    // Function to sort an array using Heap Sort.\n    public void heapSort(int arr[]) {\n        int n = arr.length;\n\n        // Build a max heap\n        for (int i = n / 2 - 1; i >= 0; i--) heapify(arr, n, i);\n\n        // One by one extract elements from the heap\n        for (int i = n - 1; i > 0; i--) {\n            // Move current root (maximum element) to the end\n            int temp = arr[0];\n            arr[0] = arr[i];\n            arr[i] = temp;\n\n            // Call heapify on the reduced heap\n            heapify(arr, i, 0);\n        }\n    }\n\n    // Function to heapify a subtree rooted at index i.\n    // n is the size of the heap\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def heapify(self, arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        # If left child is larger than root\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        # If right child is larger than the largest so far\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        # If largest is not root\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n\n            # Recursively heapify the affected subtree\n            self.heapify(arr, n, largest)\n\n    def heapSort(self, arr):\n        n = len(arr)\n\n        # Build a max heap\n        for i in range(n // 2 - 1, -1, -1):\n            self.heapify(arr, n, i)\n\n        # One by one extract elements from the heap\n        for i in range(n - 1, 0, -1):\n            # Swap current root (maximum element) with the last element\n            arr[i], arr[0] = arr[0], arr[i]\n\n            # Call heapify on the reduced heap\n            self.heapify(arr, i, 0)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to heapify a subtree rooted at index i\n    heapify(arr, n, i) {\n        let largest = i;\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n\n        // If left child is larger than root\n        if (left < n && arr[left] > arr[largest]) {\n            largest = left;\n        }\n\n        // If right child is larger than the largest so far\n        if (right < n && arr[right] > arr[largest]) {\n            largest = right;\n        }\n\n        // If largest is not root\n        if (largest !== i) {\n            [arr[i], arr[largest]] = [ arr[largest], arr[i] ];\n\n            // Recursively heapify the affected subtree\n            this.heapify(arr, n, largest);\n        }\n    }\n\n    // Function to sort an array using Heap Sort.\n    heapSort(arr) {\n        let n = arr.length;\n\n        // Build a max heap\n        for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n            this.heapify(arr, n, i);\n        }\n\n        // One by one extract elements from the heap\n        for (let i = n - 1; i > 0; i--) {\n            // Swap current root (maximum element) with the last element\n            [arr[0], arr[i]] = [ arr[i], arr[0] ];\n\n            // Call heapify on the reduced heap\n            this.heapify(arr, i, 0);\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}