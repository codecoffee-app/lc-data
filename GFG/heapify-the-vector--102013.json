{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881705,
            "title": "Heapify the vector",
            "titleSlug": "heapify-the-vector--102013",
            "content": "<p><span style=\"font-size: 18px;\">Given a vector <strong>arr</strong>[] of integers. You need to heapify the given vector using the make_heap() function.<br /><strong>make_heap():</strong> it is used to transform the sequence into a heap. It contains starting and end pointers that point to the first element and last element of sequence which needs to be transformed into a heap.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:&nbsp;</strong>arr[] = [3, 6, 4, 2, 1, 5]<br /></span><span style=\"font-size: 18px;\"><strong>Output:</strong> [6, 3, 5, 2, 1, 4]</span><br /><br /><span style=\"font-size: 18px;\"><strong>Input:&nbsp;</strong>arr[] = [3, 2, 1, 3]<br /><strong>Output:</strong> [3, 3, 1, 2]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size()<strong>&nbsp;</strong>&lt;= 1000<br />1 &lt;= arr[i]&nbsp;&lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, `arr`, transform it into a max heap using the `make_heap()` function.  The `make_heap()` function takes the starting and ending pointers of the sequence to be heapified as input. A max heap is a binary tree where the value of each node is greater than or equal to the value of its children.",
                "constraints": [
                    "1 <= arr.length <= 1000",
                    "1 <= arr[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[3, 6, 4, 2, 1, 5]",
                        "output": "[6, 3, 5, 2, 1, 4]",
                        "explanation": "The input array is transformed into a max heap.  Notice that the largest element, 6, is at the root. Other possible heap arrangements might also be valid, but the crucial part is that the heap property (parent >= children) is maintained throughout the structure."
                    },
                    {
                        "input": "[3, 2, 1, 3]",
                        "output": "[3, 3, 1, 2]",
                        "explanation": "Similar to the previous case, the input array is converted to a max heap. The two '3's bubble up to become the top most node."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use make_heap function from STL</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nvoid heapify(vector<int> &V) {\n    make_heap(V.begin(), V.end());\n}",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}