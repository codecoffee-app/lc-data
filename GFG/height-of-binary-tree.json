{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700164,
      "title": "Height of Binary Tree",
      "titleSlug": "height-of-binary-tree",
      "content": "<p><span >Given a binary tree, find its height. </span></p>\n<blockquote>\n<p><span >The height of a tree is defined as the number of edges on the longest path from the root to a leaf node. A leaf node is a node that does not have any children.</span></p>\n</blockquote>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>root[] = [12, 8, 18, 5, 11] <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700164/Web/Other/blobid0_1732510207.png\" width=\"256\" height=\"229\" /> <br /><strong>Output:</strong> 2<br /><strong>Explanation: </strong>One of the longest path from the root (node 12) goes through node 8 to node 5, which has 2 edges.</span></pre>\n<pre><span ><strong>Input: </strong>root[] = [1, 2, 3, 4, N, N, 5, N, N, 6, 7]  <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700164/Web/Other/blobid1_1732510283.png\" width=\"265\" height=\"237\" /><br /><strong>Output:</strong> 3<br /><strong>Explanation: </strong>The longest path from the root (node 1) to a leaf node 6 with 3 edge.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />0 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA"
    },
    "similar": [],
    "hints": [
      "<p>Use a recursive depth-first search (DFS) to compute the maximum depth by exploring both left and right subtrees.</p>"
    ],
    "relatedTopics": [
      {
        "name": "Tree",
        "slug": "tree"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": [
      "vmware",
      "zoho",
      "amazon",
      "microsoft",
      "snapdeal",
      "de-shaw",
      "factset",
      "makemytrip",
      "teradata",
      "synopsys",
      "coupondunia",
      "cadence-india",
      "monotype-solutions",
      "freecharge"
    ],
    "solutions": [
      {
        "lang": "C",
        "full_func": "//Back-end complete function Template for C\n/*\n// Tree Node\nstruct Node\n{\n    int data;\n    struct Node* left;\n    struct Node* right;\n};\n\n// Utility function to create a new Tree Node\nstruct Node* newNode(int val)\n{\n    struct Node* temp = (struct Node*)malloc(sizeof(struct Node*));;\n    temp->data = val;\n    temp->left = NULL;\n    temp->right = NULL;\n    return temp;\n}\n*/\n// Function to find the height of a binary tree.\nint height(struct Node* node) {\n    // if node is null, we return -1.\n    if (node == NULL)\n        return -1;\n\n    // else we call the recursive function, height for left and right\n    // subtree and choose their maximum. we also add 1 to the result\n    // which indicates height of root of the tree.\n    else {\n        int h_left = height(node->left);\n        int h_right = height(node->right);\n        return 1 + (h_left > h_right ? h_left : h_right);\n    }\n}",
        "lang_text": "c"
      },
      {
        "lang": "C++",
        "full_func": "//Back-end complete function template for C++\nclass Solution {\n  public:\n    // Function to find the height of a binary tree.\n    int height(Node* node) {\n        // If node is null, return -1 to represent no edges.\n        if (node == NULL)\n            return -1;\n\n        // else we call the recursive function, height for left and right\n        // subtree and choose their maximum. we also add 1 to the result\n        // which indicates height of root of the tree.\n        else\n            return 1 + max(height(node->left), height(node->right));\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find the height of a binary tree.\n    int height(Node node) {\n        // If node is null, return -1 to represent no edges.\n        if (node == null) return -1;\n\n        // else we call the recursive function, height for left and right\n        // subtree and choose their maximum. we also add 1 to the result\n        // which indicates height of root of the tree.\n        else\n            return 1 + Math.max(height(node.left), height(node.right));\n    }\n}\n",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to find the height of a binary tree.\n    def height(self, node):\n\n        # If node is null, return -1 to represent no edges.\n        if node is None:\n            return -1\n\n        #else we call the recursive function, height for left and right\n        #subtree and choose their maximum. we also add 1 to the result\n        #which indicates height of root of the tree.\n        return (1 + max(self.height(node.left), self.height(node.right)))\n",
        "lang_text": "python3"
      },
      {
        "lang": "C#",
        "full_func": "class Solution {\n    // Function to find the height of a binary tree.\n    public int height(Node node) {\n        // If node is null, return -1 to represent no edges.\n        if (node == null) return -1;\n\n        // else we call the recursive function, height for left and right\n        // subtree and choose their maximum. we also add 1 to the result\n        // which indicates height of root of the tree.\n        else\n            return 1 + Math.Max(height(node.left), height(node.right));\n    }\n}",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "//Back-end complete function Template for javascript\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to find the height of a binary tree.\n    height(node) {\n        // If node is null, return -1 to represent no edges.\n        if (node == null) return -1;\n\n        // else we call the recursive function, height for left and right\n        // subtree and choose their maximum. we also add 1 to the result\n        // which indicates height of root of the tree.\n        else\n            return 1 + Math.max(this.height(node.left), this.height(node.right));\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
