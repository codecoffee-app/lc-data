{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704718,
            "title": "Height of Heap",
            "titleSlug": "height-of-heap5025",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Heap of size <strong>N </strong>in an array <strong>arr[]</strong>.&nbsp;Write a program to calculate the height of the Heap.<br /><br /><strong>Note:&nbsp;</strong>Return 1 if the N is 1.<br /></span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 6\narr = {1, 3, 6, 5, 9, 8}\n<strong>Output:</strong> 2\n<strong>Explaination:</strong> The tree is like the following</span>\n\\t  <span style=\"font-size: 18px;\">(1)\n\\t /   \\\n    (3)    (6)\n    / \\     /\n  (5) (9) (8)</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 9\narr = {3, 6, 9, 2, 15, 10, 14, 5, 12}\n<strong>Output:</strong> 3\n<strong>Explaination:</strong> The tree looks like following</span>\n\\t     <span style=\"font-size: 18px;\">(2)\n\\t  /\\t\\\n\\t(3)\\t(9)\n     /  \\     /   \\\n   (5) (15) (10) (14)\n   / \\\n (6) (12)</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>heapHeight()</strong> which takes the value N and the array arr as input parameters and returns the height of the heap.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(logN)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>4</sup><br />1&nbsp;&le; arr[i]&nbsp;&le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary heap of size N represented as an array arr[], calculate the height of the heap. If N is 1, return 1.",
                "constraints": [
                    "1 <= N <= 10^4",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 6, arr = {1, 3, 6, 5, 9, 8}",
                        "output": "2",
                        "explanation": "The heap's height is 2. The root is at level 0, its children at level 1, and their children at level 2."
                    },
                    {
                        "input": "N = 9, arr = {3, 6, 9, 2, 15, 10, 14, 5, 12}",
                        "output": "3",
                        "explanation": "The heap's height is 3. The root is at level 0, its children at level 1, its grandchildren at level 2, and their children at level 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Heap is complete binary tree.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the heap height for a given array.\n    int heapHeight(int N, int arr[]){\n        int count = 1;\n\t    int i = 0, mul = 1;\n\t    while(i < N-1){\n            // Adding 1 to the count if there are more elements to be added at the next level of the heap.\n\t        if(i + mul*2 < N-1)\n\t            count++;\n\t        mul *= 2;\n\t        i += mul;\n\t    }\n\t    return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python3\n\nclass Solution:\n    def heapHeight(self, N, arr):\n        mul = 1    #initialize mul as 1\n        count = 1  #initialize count as 1\n        i = 0      #initialize i as 0\n        while i < N-1:   #while i is less than N-1 do the following\n            if (i + mul*2 < N-1):   #if index i + mul*2 is less than N-1 then do the following\n                count = count+1   #increment count by 1\n            mul = mul * 2   #multiply mul by 2\n            i = i + mul   #add mul to i\n        return count   #return count as the result",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int heapHeight(int N, int[] arr)\n    {\n        int count = 1;\n        int i = 0, mul = 1;\n        while(i < N-1){\n            // Adding 1 to the count if there are more elements to be added at the next level of the heap.\n            if(i + mul*2 < N-1)\n                count++;\n            mul *= 2;\n            i += mul;\n        }\n        return count;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n * @return {number}\n*/\n\nclass Solution {\n    heapHeight(arr,n){\n        let count = 1;\n\t    let i = 0, mul = 1;\n\t    while(i < n-1){\n\t        if(i + mul*2 < n-1)\n\t            count++;\n\t        mul *= 2;\n\t        i += mul;\n\t    }\n\t    return count;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}