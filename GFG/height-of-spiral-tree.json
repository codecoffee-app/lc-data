{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700656,
            "title": "Height of Spiral Tree",
            "titleSlug": "height-of-spiral-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a special Binary Tree&nbsp;whose leaf nodes are connected to form a circular doubly linked list. Find the height of this special Binary Tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [1, 2, 3, 4, 5, N, 6]<strong><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/880972/Web/Other/blobid0_1732865147.png\" width=\"343\" height=\"291\" /><br /></strong></span><span style=\"font-size: 18px;\"><strong>Output: </strong>2<strong>\nExplanation: </strong>The height of given tree is 2.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [1, 2, 3]<strong><br /></strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/880972/Web/Other/blobid0_1732863453.png\" alt=\"\" width=\"329\" height=\"281\" /><strong>\nOutput: </strong>1<br /><strong>Explanation: </strong>The height of given tree is 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5<br /></sup>1 &lt;= node -&gt; data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a special binary tree where the leaf nodes are connected to form a circular doubly linked list, determine the height of the tree. The height of a tree is the number of edges on the longest path from the root to a leaf.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node -> data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5, N, 6]",
                        "output": "2",
                        "explanation": "The longest path from the root (1) to a leaf (4, 5, or 6) has a length of 2."
                    },
                    {
                        "input": "[1, 2, 3]",
                        "output": "1",
                        "explanation": "The longest path from the root (1) to a leaf (2 or 3) has a length of 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You simply need to find the Height of the given Binary Tree. The only difficulty is that how to know that you have reached a leaf node so that you do not recur further. Can you think of some property of a doubly linked list for knowing&nbsp;the same?</p>",
            "<p>The given node is a leaf node if it satisfies the following 2 things:<br />\n1. The right child of the&nbsp;left child of the current node is the node itself.<br />\n2. The left child of the right child of the current node is the node itself.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// function to check if given node is a leaf node or node\nbool isLeaf(Node* node) {\n    // If given node's left's right is pointing to given node\n    // and its right's left is pointing to the node itself\n    // then it's a leaf\n    return node->left && node->left->right == node && node->right &&\n           node->right->left == node;\n}\n\n/* Compute the height of a tree -- the number of\nNodes along the longest path from the root node\ndown to the farthest leaf node.*/\nint findTreeHeight(Node* node) {\n    // if node is NULL, return 0\n    if (node == NULL)\n        return 0;\n\n    // if node is a leaf node, return 1\n    if (isLeaf(node))\n        return 0;\n\n    // compute the depth of each subtree and take maximum\n    return 1 + max(findTreeHeight(node->left), findTreeHeight(node->right));\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Tree {\n    // function to check if given node is a leaf node or node\n    public static boolean isLeaf(Node node) {\n        // If given node's left's right is pointing to given node\n        // and its right's left is pointing to the node itself\n        // then it's a leaf\n        return (node.left != null && node.left.right == node && node.right != null &&\n                node.right.left == node);\n    }\n\n    /* Compute the height of a tree -- the number of\n    Nodes along the longest path from the root node\n    down to the farthest leaf node.*/\n    public static int findTreeHeight(Node node) {\n        // if node is NULL, return 0\n        if (node == null) return 0;\n\n        // if node is a leaf node, return 1\n        if (isLeaf(node)) return 0;\n\n        // compute the depth of each subtree and take maximum\n        return 1 + Math.max(findTreeHeight(node.left), findTreeHeight(node.right));\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\ndef isLeaf(node):\n\n    # If given node's left's right is pointing to given node\n    # and its right's left is pointing to the node itself\n    # then it's a leaf\n    return node.left and node.left.right == node and node.right and node.right.left == node\n\n\ndef findTreeHeight(node):\n\n    # if node is None, return 0\n    if (node == None):\n        return 0\n\n    # if node is a leaf node, return 1\n    if (isLeaf(node)):\n        return 0\n\n    # compute the depth of each subtree and take maximum\n    return 1 + max(findTreeHeight(node.left), findTreeHeight(node.right))\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// function to check if given node is a leaf node or node\nconst isLeaf =\n    (node) => {\n        // If given node's left's right is pointing to given node\n        // and its right's left is pointing to the node itself\n        // then it's a leaf\n        return node.left && node.left.right === node && node.right &&\n               node.right.left === node;\n    }\n\n/* Compute the height of a tree -- the number of\nNodes along the longest path from the root node\ndown to the farthest leaf node.*/\nclass Solution {\n    findTreeHeight(root) {\n        // if node is NULL, return 0\n        if (root === null) return 0;\n\n        // if node is a leaf node, return 1\n        if (isLeaf(root)) return 0;\n\n        // compute the depth of each subtree and take maximum\n        return 1 + Math.max(this.findTreeHeight(root.left),\n                            this.findTreeHeight(root.right));\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}