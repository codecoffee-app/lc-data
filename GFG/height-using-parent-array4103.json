{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705812,
            "title": "Height Using Parent Array",
            "titleSlug": "height-using-parent-array4103",
            "content": "<p><span style=\"font-size:18px\">Given a parent array <strong>arr</strong>[] of a binary tree of <strong>N</strong> nodes. Element at index i in the array arr[] represents the parent of ith node, i.e,&nbsp;<strong>arr[i] = parent(i)</strong>. Find the height of this binary tree.</span><br />\r\n<span style=\"font-size:18px\"><strong>Note:</strong> There will be a node in the array arr[], where <strong>arr[i] = -1</strong>, which means this node is the root of binary tree.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 7\r\narr = {-1, 0, 0, 1, 1, 3, 5}\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> Tree formed is:\r\n\\t\\t\\t  0\r\n\\t\\t\\t / \\\r\n\\t\\t\\t1   2\r\n\\t\\t     / \\\r\n\\t\\t    3   4\r\n\\t\\t   /\r\n\\t\\t  5\r\n\\t\\t /\r\n\\t\\t6\\tHeight of the tree= 5</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>findHeight()</strong> which takes N and arr[] as input parameters and returns the height of the given binary tree.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup></span><br />\r\n<span style=\"font-size:18px\">0 &le; arr[i] &le; 10</span><sup style=\"font-size:18px\">5</sup><span style=\"font-size:18px\">&nbsp; &nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a parent array `arr` of a binary tree with `N` nodes, where `arr[i]` represents the parent of the i-th node (i.e., `arr[i] = parent(i)`), find the height of the binary tree.  The root node is indicated by `arr[i] = -1`.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 7\narr = [-1, 0, 0, 1, 1, 3, 5]",
                        "output": "5",
                        "explanation": "The tree formed is:\n\t\t0\n\t\t/ \\\n\t\t1   2\n\t\t/ \\\n\t\t3   4\n\t\t/\n\t\t5\n\t\t/\n\t\t6\nHeight of the tree = 5"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Iterate from any side and for any index calculate the depth of that index.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find the maximum height of the given tree\n    int findHeight(int N, int arr[]){\n        int ans = -1, c = 0, ind;\n        // Looping through the array in reverse order to find the maximum height\n        for(int i = N-1;i >= 0;i--){\n            c = 0; // Initializing the count \n            ind = i; // Storing the index\n            // Looping until we find the root of the tree which is indicated by -1\n            while(arr[ind] != -1){\n                ind = arr[ind]; // Updating the index\n                c++; // Incrementing the count\n            }\n            // Updating the maximum height if we find a greater count\n            ans = max(ans, c+1);\n        }\n        return ans; // Returning the maximum height of the tree\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}