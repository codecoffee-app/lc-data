{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706073,
            "title": "Help Classmates",
            "titleSlug": "help-classmates--141631",
            "content": "<p><span style=\"font-size:18px\">Professor X wants his students to help each other in the chemistry lab. He suggests that every student should help out a classmate who scored less marks than him in chemistry and whose roll number appears after him. But the students are lazy and they don&#39;t want to search too far. They each pick the first roll number after them that fits the criteria. Find the marks of the classmate that each student picks.<br />\n<strong>Note:</strong> one student may be selected by multiple classmates.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 5, arr[] = {3, 8, 5, 2, 25}\n<strong>Output:</strong> 2 5 2 -1 -1\n<strong>Explanation:</strong> \n1. Roll number 1 has 3 marks. The first person \nwho has less marks than him is roll number 4, \nwho has 2 marks.\n2. Roll number 2 has 8 marks, he helps student \nwith 5 marks.\n3. Roll number 3 has 5 marks, he helps student \nwith 2 marks.\n4. Roll number 4 and 5 can not pick anyone as \nno student with higher roll number has lesser \nmarks than them. This is denoted by -1.\nOutput shows the marks of the weaker student that \neach roll number helps in order. ie- 2,5,2,-1,-1</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 4, a[] = {1, 2, 3, 4}\n<strong>Output:</strong> -1 -1 -1 -1&nbsp;\n<strong>Explanation:</strong> As the marks ars in increasing order. \nNone of the students can find a classmate who has \na higher roll number and less marks than them.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: </strong>&nbsp;<br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>help_classmate()</strong> which takes the array arr[] and&nbsp;size of array N as input parameters and returns a list of numbers. If a student is unable to find anyone then output is&nbsp;-1.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 5*10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Professor X wants his students to collaborate in the chemistry lab. Each student should assist a classmate with a lower score in chemistry and a higher roll number. However, students are only willing to help the first classmate meeting these criteria after their own roll number. Determine the chemistry marks of the classmate each student chooses to help.\n\nNote: A student may be helped by multiple classmates.",
                "constraints": [
                    "1 \u2264 N \u2264 5*10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 5, arr[] = {3, 8, 5, 2, 25}",
                        "output": "2 5 2 -1 -1",
                        "explanation": "Student 1 (marks 3) helps student 4 (marks 2).\nStudent 2 (marks 8) helps student 3 (marks 5).\nStudent 3 (marks 5) helps student 4 (marks 2).\nStudents 4 and 5 cannot find any student with a higher roll number and lower score, so they output -1."
                    },
                    {
                        "input": "N = 4, a[] = {1, 2, 3, 4}",
                        "output": "-1 -1 -1 -1",
                        "explanation": "The scores are in ascending order. No student can find a classmate with a higher roll number and lower score."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use a stack to compare elements. Loop through the contents of the given array and compare it to the top of stack. If top of stack is bigger than current element that means that current element is the next smallest element for the element in the stack. If not, add the current element to the stack.&nbsp;</span></p>",
            "<p><span style=\"font-size:18px\">To maintain the order of the given array, store the index of elements in the stack instead of the value.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    \n    public:\n    // Function to help the classmates find the immediate smaller elements on their right\n    vector<int> help_classmate(vector<int> arr, int n) \n    { \n        stack<int> s; \n        vector<int> result(n,-1);\n        \n        // traversing the array\n        for (int i = 0; i < n; i++) { \n            // if stack is empty, push the index on the stack\n            if (s.empty()) { \n                s.push(i); \n                continue; \n            } \n            // if top of stack is greater than current element, update the result and pop the index from stack\n            while (s.empty() == false && arr[s.top()] > arr[i]) { \n                result[s.top()] = arr[i];\n                s.pop(); \n            } \n            // push the current index on the stack\n            s.push(i); \n        } \n        // return the result vector\n        return result;\n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find next smaller element for each element in the array\n    public static int[] help_classmate(int arr[], int n) {\n        // Create a stack to store indices of elements\n        Stack<Integer> s = new Stack<Integer>();\n        // Initialize an array to store the results\n        int result[] = new int[n];\n        // Initialize all elements of result array to -1\n        Arrays.fill(result, -1);\n\n        // Iterate through the array\n        for (int i = 0; i < n; i++) {\n            // If the stack is empty, push the current index to stack and continue\n            if (s.empty()) {\n                s.push(i);\n                continue;\n            }\n\n            // If the top element of stack is greater than current element,\n            // it means we have found the next smaller element for the top element\n            // so update the result array and pop the element from stack\n            while (s.empty() == false && arr[s.peek()] > arr[i]) {\n                result[s.peek()] = arr[i];\n                s.pop();\n            }\n\n            // Push the current index to stack\n            s.push(i);\n        }\n        // Return the result array\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import deque\n\nclass Solution:\n    #Function to find the next smaller element for each element in the array.\n    def help_classmate(self, arr, n):\n        stack = deque()\n        ret = [-1 for _ in range(n)]\n        \n        #iterating over each element in the array.\n        for i in range(n):\n            #popping elements from the stack until a smaller element is found.\n            while len(stack) and arr[i] < arr[stack[-1]] :\n                ret[ stack.pop() ] = arr[i]\n            #appending current element to the stack.\n            stack.append(i)\n        \n        return ret",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number[]}\n*/\n\nclass Solution{\n    help_classmate(arr,n){\n        let stack = []; \n        let result = new Array(n).fill(-1);\n        \n        for (let i = 0; i < n; i++) { \n            if (stack.length == 0) { \n                stack.push(i); \n                continue; \n            } \n            while (stack.length > 0 && arr[stack[stack.length-1]] > arr[i]) { \n                result[stack[stack.length-1]] = arr[i];\n                stack.pop(); \n            } \n            stack.push(i); \n        } \n        return result;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    //Function to help the classmate in arranging the elements in increasing order.\n    public List<int> help_classmate(List<int> arr, int n)\n    {\n        Stack<int> s = new Stack<int>();\n        List<int> result = new List<int>(n);\n\n        // initialize result list with -1 values\n        for (int i = 0; i < n; i++)\n        {\n            result.Add(-1);\n        }\n        \n        // traversing the array\n        for (int i = 0; i < n; i++) \n        { \n            // if stack is empty, push the index on the stack\n            if (s.Count == 0) \n            { \n                s.Push(i); \n                continue; \n            } \n            // if top of stack is greater than current element, update the result and pop the index from stack\n            while (s.Count != 0 && arr[s.Peek()] > arr[i]) \n            { \n                result[s.Peek()] = arr[i];\n                s.Pop(); \n            } \n            // push the current index on the stack\n            s.Push(i); \n        } \n        // return the result list\n        return result;\n    } \n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}