{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705497,
            "title": "Help the Old Man!!!",
            "titleSlug": "help-the-old-man3848",
            "content": "<p><span style=\"font-size:18px\">A poor old man works in a palace for a living. One day the old man&#39;s wife met with an accident. She needed an immediate operation but the old man&#39;s savings were not enough for the operation. He went running to the king to beg for money. The king told that he will not only pay the full amount for the operation but also double his salary. But for that the old man had to pass a test. The king showed him a pile of glass plates kept one above another, each one being smaller than the one beneath. The plates were kept in box 1. He had to transfer the plates to box 3 using box 2. However, there were some constraints. The old man could only take one plate at a time and he could only place a&nbsp;smaller plate on top of a larger plate. He could take a plate only from the top. Help the old man do so. There are <strong>N</strong> plates and he has to tell the <strong>n</strong>th move in the format <strong>(i, j)</strong> where a plate is being moved <strong>from ith box to jth box.</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong><br />\r\nGiven any number of plates, they can be transferred from box 1 to box 3 using box 2 using the following steps.<br />\r\nStep 1: Transfer first N-1 plates from box 1 to box 2 using box 3.<br />\r\nStep 2: Transfer the remaining plate from box 1 to box 3.<br />\r\nStep 3: Transfer the first N-1 plates from box 2 to box 3 using box 1.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 2, n = 2\r\n<strong>Output:</strong> 1 3\r\n<strong>Explaination:</strong>  The plate on top of box 1 is \r\nfirst transferred to box 2. The second plate \r\nfrom box 1 is transferred to box 3 and finally \r\nthe plate from box 2 is transferred to box 3. \r\nIn each situation, all the constraints are \r\nsatisfied. You are required to print the 2nd \r\nmove which is &quot;Move plate from box 1 to box 3&quot;, \r\nhence 1 3.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 3, n = 4.\r\n<strong>Output:</strong> 1 3\r\n<strong>Explaination:</strong> The movements of plates will \r\nbe from 1 to 3. Then from 1 to 2. Then from \r\n3 to 2. And finally 4th move from 1 to 3.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anyting. Your task is to complete the function <strong>shiftPile()</strong> which takes N and n as input parameters and returns the nth move in a list.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(2<sup>N</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 20<br />\r\n1 &le; n &le; 1000&nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "An old man needs to transfer N glass plates from box 1 to box 3 using box 2, following the Tower of Hanoi rules. He can only move one plate at a time, and a larger plate cannot be placed on a smaller plate. He must also take plates only from the top.  The goal is to determine the nth move in the format (i, j), indicating a plate being moved from box i to box j.",
                "constraints": [
                    "1 <= N <= 20",
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 2, n = 2",
                        "output": "1 3",
                        "explanation": "The plate on top of box 1 is first transferred to box 2. The second plate from box 1 is transferred to box 3. The 2nd move is transferring from box 1 to box 3."
                    },
                    {
                        "input": "N = 3, n = 4",
                        "output": "1 3",
                        "explanation": "The movements of plates will be from 1 to 3. Then from 1 to 2. Then from 3 to 2. The 4th move is from 1 to 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">This is a standard recursion&nbsp;problem known as &#39;Tower of Hanoi&#39;. Use the process mentioned in question recursively to obtain the nth step.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "makemytrip"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    vector<int> res;  // vector to store the moves\n    int count = 0;  // variable to keep track of the number of moves\n    \n    void movePlate(int n, int fb, int tb){\n        count += 1;  // increment the move count\n        \n        // if all plates have been moved, store the \"from tower\" and \"to tower\" in the result vector and return\n        if(count == n){\n            res.push_back(fb);\n            res.push_back(tb);\n            return;\n        }\n    }\n    \n    void movePile(int N, int n, int fb, int tb, int wb){\n        // recursive function to move a pile of plates\n        \n        // base case: if there is one plate left and the maximum number of moves has not been reached\n        if(N >= 1 && count < n){\n            movePile(N-1, n, fb, wb, tb);  // recursively move N-1 plates from \"from tower\" to \"work tower\"\n            movePlate(n, fb, tb);  // move the Nth plate from \"from tower\" to \"to tower\"\n            \n            // if a solution has been found while moving the plates, return\n            if(res.size() > 0)\n                return;\n            \n            movePile(N-1, n, wb, tb, fb);  // recursively move N-1 plates from \"work tower\" to \"to tower\"\n        }\n    }\n    \n    vector<int> shiftPile(int N, int n){\n        movePile(N, n, 1, 3, 2);  // move N plates from tower 1 to tower 3 using tower 2 as a work tower\n        return res;  // return the vector containing the moves\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    static List<Integer> res; // list to store the result of the tower movement\n    static int count; // variable to keep track of the number of movements\n    \n    static void movePlate(int n, int fb, int tb){\n        count += 1; // increment the count of movements\n        if(count == n){ // if count is equal to the total number of plates\n            res.add(fb); // add the source tower to the result list\n            res.add(tb); // add the destination tower to the result list\n            return; // exit the method\n        }\n    }\n    \n    static void movePile(int N, int n, int fb, int tb, int wb)\n    {\n        if(N >= 1 && count < n){ // if there are still plates to move and count is less than the total number of plates\n            movePile(N-1, n, fb, wb, tb); // move plates from the source tower to the working tower\n            movePlate(n, fb, tb); // move the plate from the source tower to the destination tower\n            if(res.size() > 0) // if the result list has elements, indicating the movement is complete\n                return; // exit the method\n            movePile(N-1, n, wb, tb, fb); // move plates from the working tower to the destination tower\n        }\n    }\n    static List<Integer> shiftPile(int N, int n){\n        res = new ArrayList<>(); // initialize the result list\n        count = 0; // initialize the count of movements\n        movePile(N, n, 1, 3, 2); // move the pile of plates from tower 1 to tower 3 using tower 2 as working tower\n        return res; // return the result list\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    def shiftPile(self, N, n):\n        # create an empty array to store the movements\n        arr=[]\n        \n        # recursive function to solve the problem\n        self.solve('1','2','3',N,arr)\n        \n        # return the nth movement from the array\n        return arr[n-1]\n\n    def solve(self,src,temp,dest,N,arr):\n        # base case: if N is 0, then there are no discs to move\n        if N==0:\n            return\n        \n        # recursive calls to move the discs\n        self.solve(src,dest,temp,N-1,arr)\n        \n        # append the movement of top disc from src to dest in the array\n        arr.append([src,dest])\n        \n        # recursive call to move the remaining discs from temp to dest\n        self.solve(temp,src,dest,N-1,arr)",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}