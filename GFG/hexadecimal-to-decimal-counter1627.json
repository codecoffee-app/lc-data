{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705741,
            "title": "Hexadecimal to decimal counter",
            "titleSlug": "hexadecimal-to-decimal-counter1627",
            "content": "<p><span style=\"font-size:18px\">You are given a number str(in string format)&nbsp;in hexadecimal. A new number can be made from the number str&nbsp;by selecting any subsequence of it (in HexaDecimal) and rearranging it.<br />\nYou have tell the number of distinct numbers that can be made from number n.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>str = &quot;1F&quot;\n<strong>Output: </strong>4\n<strong>Explanation: </strong>For 1F possible combination are \n1, F, 1F, F1.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>str = &quot;1FF&quot;\n<strong>Output: </strong>8\n<strong>Explanation: </strong>For 1FF possible combinations are\n1, F, 1F, F1, FF, 1FF, F1F, FF1.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anyhthing. Your task is to complete the function&nbsp;<strong>countOfDistinctNo()&nbsp;</strong>which takes str in string format as input and returns the total possible combination modulo 10<sup>9</sup>+7.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Compelxity:&nbsp;</strong>O(L*L)&nbsp;where L is the length of the string str.<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(L)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= n &lt;= 2<sup>8000</sup>&nbsp;where n = str in decimal.</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a hexadecimal number represented as a string `str`. You need to find the number of distinct hexadecimal numbers that can be formed by selecting any subsequence of `str` and rearranging it. Return the count modulo 10<sup>9</sup>+7.",
                "constraints": [
                    "1 <= length of str <= 8000",
                    "str represents a hexadecimal number (characters 0-9 and A-F)"
                ],
                "testcases": [
                    {
                        "input": "1F",
                        "output": "4",
                        "explanation": "The possible distinct numbers are 1, F, 1F, and F1."
                    },
                    {
                        "input": "1FF",
                        "output": "8",
                        "explanation": "The possible distinct numbers are 1, F, 1F, F1, FF, 1FF, F1F, and FF1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming.</p>"
        ],
        "relatedTopics": [
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "factorial",
                "slug": "factorial"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "const int N = 5e4 + 50;\nconst long long mod = 1e9 + 7;\nconst long long INF = 1LL << 61LL;\n \nlong long arr[N];\nstring str, ss;\nmap <char, int> f;\nlong long fact[N], ifact[N], inv[N];\nlong long cnt[N];\nclass Solution {\npublic:\nvoid pre() {\n    fact[1] =fact[0] = ifact[0] = ifact[1] = inv[0] = inv[1] =1;\n    for (int i = 1; i < N; ++i) fact[i] = (fact[i - 1] * i) % mod;\n    for (int i = 2; i < N; ++i) inv[i] = (((-(mod/ i) * inv[mod % i]) % mod) + mod) % mod;\n    for (int i = 2; i < N; ++i) ifact[i] = (ifact[i - 1] * inv[i]) % mod;\n    for (int i = 2; i < N; ++i) {\n        if ((fact[i] * ifact[i] % mod) != 1) assert(0);\n    }\n}\nlong long C(long long n, long long k) {\n    return 0;\n}\nlong long mult = 1, ddiv = 1;\nint countOfDistinctNo(string str){\n\tf.clear();\n\tmemset(arr, 0, sizeof(arr));\n\tmemset(inv, 0, sizeof(arr));\n\tmemset(ifact, 0, sizeof(arr));\n\tmemset(inv, 0, sizeof(arr));\n\tmemset(cnt, 0, sizeof(cnt));\n  pre();\n  //cout << fact[16] << endl;\n  cnt[0] = 1;\n  for (int i = 0; i < str.size(); ++i) {\n    f[str[i]]++;\n  }\n  int ct = 0;\n  for (map <char, int> :: iterator ii = f.begin(); ii != f.end(); ++ii) {\n      if (ii -> first != '0') ct++;\n      else continue;\n      for (int i = 2000; i >= 0; --i) {\n          for (int j = 1; j <= ii -> second; ++j) {\n              cnt[i + j] += (cnt[i] * ifact[j]) % mod;\n              cnt[i + j] %= mod;\n          }\n      }\n  }\n  long long sol = 0;\n  for (int i = 1; i <= 2000; ++i) {\n     // if (i < 10) cout << cnt[i] << endl;\n      for (int j = 0; j <= f['0']; ++j) {\n         sol += (((((cnt[i] * fact[i + j - 1]) % mod) * (1LL * i)) % mod) * ifact[j]) % mod;\n        sol %= mod;\n      }\n      //cout << sol << endl;\n  }\n  if (f['0']) sol++;\n  sol %= mod;\n  return (int)sol;\n}\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}