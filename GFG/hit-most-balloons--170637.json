{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709987,
            "title": "Hit most Balloons",
            "titleSlug": "hit-most-balloons--170637",
            "content": "<p><span style=\"font-size:18px\">You are given an infinite two-dimensional grid. There are <strong>N </strong>balloons placed at certain coordinates of the grid. You have an arrow with yourself, which you will be using to shoot the balloons. You can select any point on the grid as your starting point and any point on the grid as the target point. When you fire the arrow, all ballons lying on the shortest path between the starting point and target point will be burst. Given the coordinates of the N ballons&nbsp;in an array&nbsp;<strong>arr, </strong>your task is to find out the maximum number of balloons that you can fire in one arrow shot.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\narr[] = {{1, 2}, {2, 3}, {3, 4}}\r\n<strong>Output:</strong>\r\n3\r\n<strong>Explanation:</strong>\r\nIf you position yourself at point (1,2)\r\nand fire the arrow aiming at the point (3,4).\r\nThen all the balloons will burst.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example</span> <span style=\"font-size:18px\">2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 3\r\narr[] = {{2,2}, {0,0}, {1,2}}&nbsp;\r\n<strong>Output:</strong>\r\n2\r\n<strong>Explanation: </strong>\r\nIf you position yourself at point (2,2)\r\nand fire the arrow aiming at the point (0,0).\r\nThen the two balloons present at the two points\r\nwill burst.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nComplete the function <strong>mostBalloons</strong><strong>()</strong> which takes the integers <strong>N </strong>and the array <strong>arr&nbsp;</strong>as the input parameters, and returns the maximum number of balloons that can be burst using one arrow.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N<sup>2</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&nbsp;&le; N&nbsp;&le; 10<sup>3</sup></span><br />\r\n<span style=\"font-size:18px\">-10<sup>9</sup> &le; arr[i][j]&nbsp;&le; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an infinite two-dimensional grid. There are N balloons placed at certain coordinates of the grid. You have an arrow, and you can select any point on the grid as your starting point and any point as the target. When you fire the arrow, all balloons lying on the straight line path between the starting and target points will burst. Given the coordinates of the N balloons in an array arr, your task is to find the maximum number of balloons that can be burst with a single arrow shot.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "-10^9 <= arr[i][j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr[] = {{1, 2}, {2, 3}, {3, 4}}",
                        "output": "3",
                        "explanation": "If you position yourself at point (1,2) and fire the arrow aiming at the point (3,4), all three balloons will burst because they lie on the same line."
                    },
                    {
                        "input": "N = 3\narr[] = {{2,2}, {0,0}, {1,2}}",
                        "output": "2",
                        "explanation": "If you position yourself at point (2,2) and fire the arrow aiming at the point (0,0), the two balloons present at those points will burst. Note that the balloon at (1,2) does not lie on the direct line between (0,0) and (2,2)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Any two points on a particular line has the same slope. So our problem reduces to find the most number of points lying on one line.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Geometric",
                "slug": "geometric"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paypal"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the maximum number of balloons that can be popped.\n    int mostBalloons(int N, pair<int, int> arr[]) {\n\n        // If number of balloons is less than or equal to 2, return N.\n        if (N <= 2) {\n            return N;\n        }\n        // Maximum number of balloons to be popped.\n        int maxBalloons = 2;\n\n        for (int i = 0; i < N; i++) {\n            int horizontal = 0, vertical = 0, identical = 0;\n            // Map to store slope and count of balloons on the same line.\n            map<pair<int, int>, int> slope;\n\n            for (int j = 0; j < N; j++) {\n\n                // Exclude the current balloon being checked.\n                if (i != j) {\n                    // If balloons are identical, increment identical count.\n                    if (arr[i] == arr[j]) {\n                        identical++;\n                    }\n                    // If balloons are on the same vertical line, increment vertical count.\n                    else if (arr[i].first == arr[j].first) {\n                        vertical++;\n                    }\n                    // If balloons are on the same horizontal line, increment horizontal count.\n                    else if (arr[i].second == arr[j].second) {\n                        horizontal++;\n                    }\n                    // If balloons are not on the same horizontal or vertical line,\n                    // calculate the slope and increment the count in the slope map.\n                    else {\n                        int ydiff = arr[i].second - arr[j].second;\n                        int xdiff = arr[i].first - arr[j].first;\n                        int gcd = __gcd(abs(ydiff), abs(xdiff));\n                        ydiff /= gcd;\n                        xdiff /= gcd;\n                        if (xdiff < 0) {\n                            xdiff *= -1;\n                            ydiff *= -1;\n                        }\n                        slope[{ydiff, xdiff}]++;\n                    }\n                }\n            }\n            // Find the maximum points on the same line.\n            int mostPointsOnSameLine = 1;\n            for (auto item : slope) {\n                mostPointsOnSameLine = max(mostPointsOnSameLine, item.second);\n            }\n            // Update the maximum number of balloons to be popped.\n            maxBalloons =\n                max(maxBalloons, 1 + identical + mostPointsOnSameLine);\n            maxBalloons =\n                max(maxBalloons, 1 + identical + max(horizontal, vertical));\n        }\n\n        // Return the maximum number of balloons that can be popped.\n        return maxBalloons;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to calculate the Greatest Common Divisor using Euclid's algorithm\n    public int getGCD(int a, int b) {\n        if (b == 0)\n            return a;\n        else\n            return getGCD(b, a % b);\n    }\n\n    // Main function to find the number of maximum balloons\n    public int mostBalloons(int N, int arr[][]) {\n        // If there are less than or equal to 2 points, return the number of points\n        if (N <= 2) {\n            return N;\n        }\n\n        // Initialize the maximum balloons to 2\n        int maxBalloons = 2;\n\n        // Loop through each point in the arr array\n        for (int i = 0; i < N; i++) {\n            // Initialize variables to count the horizontal, vertical, and identical points\n            int horizontal = 0, vertical = 0, identical = 0;\n\n            // Create a HashMap to store the slopes of the lines formed by each point\n            Map<String, Integer> slope = new HashMap<>();\n\n            // Loop through each other point in the arr array\n            for (int j = 0; j < N; j++) {\n                // Exclude the current point being compared with itself\n                if (i != j) {\n                    // Check if the points are identical\n                    if (arr[i][0] == arr[j][0] && arr[i][1] == arr[j][1]) {\n                        identical++;\n                    }\n                    // Check if the points are on the same horizontal line\n                    else if (arr[i][0] == arr[j][0]) {\n                        vertical++;\n                    }\n                    // Check if the points are on the same vertical line\n                    else if (arr[i][1] == arr[j][1]) {\n                        horizontal++;\n                    }\n                    // If the points are not on the same horizontal or vertical line,\n                    // calculate the slope and store it in the HashMap\n                    else {\n                        int ydiff = arr[i][1] - arr[j][1];\n                        int xdiff = arr[i][0] - arr[j][0];\n                        int gcd = getGCD(Math.abs(ydiff), Math.abs(xdiff));\n                        ydiff /= gcd;\n                        xdiff /= gcd;\n\n                        // Adjust the signs of the slope values\n                        if (xdiff < 0) {\n                            xdiff *= -1;\n                            ydiff *= -1;\n                        }\n\n                        // Hash the slope value and update its count in the HashMap\n                        String g = xdiff + \"-\" + ydiff;\n                        if (slope.containsKey(g)) {\n                            int value = slope.get(g);\n                            value++;\n                            slope.put(g, value);\n                        } else {\n                            slope.put(g, 1);\n                        }\n                    }\n                }\n            }\n\n            // Calculate the maximum number of points on the same line\n            int mostPointsOnSameLine = 1;\n            for (Map.Entry<String, Integer> item : slope.entrySet()) {\n                mostPointsOnSameLine = Math.max(mostPointsOnSameLine, item.getValue());\n            }\n\n            // Update the maximum number of balloons based on the current point\n            maxBalloons = Math.max(maxBalloons, 1 + identical + mostPointsOnSameLine);\n            maxBalloons = Math.max(maxBalloons, 1 + identical + Math.max(horizontal, vertical));\n        }\n\n        // Return the maximum number of balloons\n        return maxBalloons;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function template for Python 3\n\nclass Solution: \n    def mostBalloons(self, N, arr):\n        # If there are only 0 or 1 balloons, return N\n        if (N<=2): \n            return N\n\n        maxBalloons = 2\n        # Iterate over all the balloons\n        for i in range(N): \n            slope={} \n            vertical,horizontal,identical=0,0,0  \n\n            # Check the relationship of the current balloon with other balloons\n            for j in range(N): \n                if (i!=j):  \n\n                    # If the balloons are identical\n                    if (arr[i]==arr[j]): \n                        identical+=1 \n                    # If the balloons are in the same vertical line\n                    elif (arr[i][0]==arr[j][0]): \n                        vertical+=1  \n                    # If the balloons are in the same horizontal line\n                    elif (arr[i][1]==arr[j][1]): \n                        horizontal+=1\n                    else: \n                        # Calculate the slope between the current balloon and other balloons\n                        ydiff= arr[i][1]-arr[j][1]\n                        xdiff= arr[i][0]-arr[j][0]\n\n                        # Calculate the Greatest Common Divisor (gcd) of ydiff and xdiff\n                        gcd = math.gcd (abs(ydiff),abs(xdiff)) \n                        ydiff//=gcd \n                        xdiff//=gcd\n\n                        # Adjust the signs of xdiff and ydiff if necessary\n                        if (xdiff<0): \n                            xdiff*=-1 \n                            ydiff*=-1\n\n                        # Count the number of balloons with the same slope\n                        if (ydiff, xdiff) in slope: \n                            slope[(ydiff, xdiff)]+=1 \n                        else: \n                            slope[(ydiff, xdiff)]=1\n\n            # Update the maximum number of balloons if necessary\n            if len(slope):\n                maxBalloons=max(maxBalloons,1+identical+max(slope.values()))\n            maxBalloons=max(maxBalloons,1+identical+max(vertical,horizontal)) \n\n        # Return the maximum number of balloons\n        return maxBalloons",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int mostBalloons(int N, List<(int, int)> arr)\n    {\n        // If number of balloons is less than or equal to 2, return N.\n        if (N <= 2)\n        {\n            return N;\n        }\n        // Maximum number of balloons to be popped.\n        int maxBalloons = 2;\n\n        for (int i = 0; i < N; i++)\n        {\n            int horizontal = 0, vertical = 0, identical = 0;\n            // Map to store slope and count of balloons on the same line.\n            Dictionary<(int, int), int> slope = new Dictionary<(int, int), int>();\n\n            for (int j = 0; j < N; j++)\n            {\n                // Exclude the current balloon being checked.\n                if (i != j)\n                {\n                    // If balloons are identical, increment identical count.\n                    if (arr[i].Equals(arr[j]))\n                    {\n                        identical++;\n                    }\n                    // If balloons are on the same vertical line, increment vertical count.\n                    else if (arr[i].Item1 == arr[j].Item1)\n                    {\n                        vertical++;\n                    }\n                    // If balloons are on the same horizontal line, increment horizontal count.\n                    else if (arr[i].Item2 == arr[j].Item2)\n                    {\n                        horizontal++;\n                    }\n                    // If balloons are not on the same horizontal or vertical line,\n                    // calculate the slope and increment the count in the slope map.\n                    else\n                    {\n                        int ydiff = arr[i].Item2 - arr[j].Item2;\n                        int xdiff = arr[i].Item1 - arr[j].Item1;\n                        int gcd = GCD(Math.Abs(ydiff), Math.Abs(xdiff));\n                        ydiff /= gcd;\n                        xdiff /= gcd;\n                        if (xdiff < 0)\n                        {\n                            xdiff *= -1;\n                            ydiff *= -1;\n                        }\n                        if (slope.ContainsKey((ydiff, xdiff)))\n                        {\n                            slope[(ydiff, xdiff)]++;\n                        }\n                        else\n                        {\n                            slope.Add((ydiff, xdiff), 1);\n                        }\n                    }\n                }\n            }\n            // Find the maximum points on the same line.\n            int mostPointsOnSameLine = 1;\n            foreach (var item in slope)\n            {\n                mostPointsOnSameLine = Math.Max(mostPointsOnSameLine, item.Value);\n            }\n            // Update the maximum number of balloons to be popped.\n            maxBalloons = Math.Max(maxBalloons, 1 + identical + mostPointsOnSameLine);\n            maxBalloons = Math.Max(maxBalloons, 1 + identical + Math.Max(horizontal, vertical));\n        }\n\n        // Return the maximum number of balloons that can be popped.\n        return maxBalloons;\n    }\n\n    // Function to calculate the greatest common divisor\n    private int GCD(int a, int b)\n    {\n        while (b != 0)\n        {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}