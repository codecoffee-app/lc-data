{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705345,
            "title": "2D Hopscotch",
            "titleSlug": "hopscotch4857",
            "content": "<p>Aakriti, Avantika and Mehak are playing 2D Hopscotch. The arena is in the form of a n*m 2D matrix. But the position of the cells is slightly modified as shown below.&nbsp;<br />\r\n<img alt=\"\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/hopscotch-1.jpg\" /></p>\r\n\r\n<p>Mehak starts the game from tile (i,j) while Avantika and Aakriti direct her. In each turn Mehak will collect all the stones present (1 or 2) steps away from where she is standing. Avantika can direct Mehak to take 1 step and and Aakriti can direct Mehak to take 2 steps.&nbsp;<br />\r\nIf the director ty is known to you as ty = 0 being Avantika and 1 being Aakriti, find the number of stones that Mehak will collect.&nbsp;</p>\r\n\r\n<p><br />\r\n<strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>\r\nn = 3, m = 3\r\nmat = {{5, 9, 7}, \r\n\\t {6, 4, 5}, \r\n\\t {8, 1, 2}}\r\nty = 0, \r\ni = 1, j = 1\r\n<strong>Output:</strong> 31\r\n<strong>Explaination: </strong>\r\nty=0, so Avantika is the director. \r\nie- Mehak will move only one step in \r\nany direction to collect the stones.\r\n(0,1), (1,0), (1,2), (2,1), (2,2), (2,0) \r\nare at a distance of 1 from (1,1). \r\nAdding them 9+6+5+8+1+2=31.</pre>\r\n\r\n<p><br />\r\n<strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>\r\nn = 3, m = 3\r\nmat = {{5, 9, 7}, \r\n\\t {6, 4, 5}, \r\n\\t {8, 1, 2}}\r\nty = 1, \r\ni = 1, j = 1\r\n<strong>Output:</strong> 12\r\n<strong>Explaination: </strong>\r\nty=1, so Aakriti is the director. \r\nie- Mehak can move 2 steps. \r\n(0,0) and (0,2) are the only tiles that \r\nare at a distance of two from (1,1). \r\nAdding them gives 5+7=12.</pre>\r\n\r\n<p><br />\r\n<strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>hopscotch() </strong>which takes n, m, mat, ty, i and j as input parameters and returns the number of collected stones.</p>\r\n\r\n<p><br />\r\n<strong>Expected Time Complexity:</strong> O(1)<br />\r\n<strong>Expected Auxiliary Space: </strong>O(1)</p>\r\n\r\n<p><br />\r\n<strong>Constraints:</strong><br />\r\n1 &le; n, m &le; 1000000<br />\r\n0 &le; i &lt; n<br />\r\n0 &le; j &lt; m&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Aakriti, Avantika, and Mehak are playing 2D Hopscotch on an n x m grid. Mehak starts at tile (i, j). Avantika (ty = 0) directs Mehak to move one step in any direction, while Aakriti (ty = 1) directs Mehak to move two steps in any direction. Mehak collects the stones from all tiles she reaches in a single turn. Given n, m, the grid 'mat', the director 'ty', and Mehak's starting position (i, j), calculate the total number of stones Mehak collects in her turn.",
                "constraints": [
                    "1 <= n, m <= 1000000",
                    "0 <= i < n",
                    "0 <= j < m"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3\nmat = {{5, 9, 7}, \n\t {6, 4, 5}, \n\t {8, 1, 2}}\nty = 0\ni = 1, j = 1",
                        "output": "31",
                        "explanation": "Avantika is the director (ty = 0). Mehak moves one step from (1, 1) to (0, 1), (1, 0), (1, 2), (2, 1), (2, 2), and (2, 0). The sum of stones collected is 9 + 6 + 5 + 8 + 1 + 2 = 31."
                    },
                    {
                        "input": "n = 3, m = 3\nmat = {{5, 9, 7}, \n\t {6, 4, 5}, \n\t {8, 1, 2}}\nty = 1\ni = 1, j = 1",
                        "output": "12",
                        "explanation": "Aakriti is the director (ty = 1). Mehak moves two steps from (1, 1) to (0, 0) and (0, 2). The sum of stones collected is 5 + 7 = 12."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Just add the values one or two length away from the given cell.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to check if given indexes are valid within the matrix size.\n    bool valid(int i, int j, int n, int m) {\n        if(i >= 0 && j >= 0 && i < n && j < m)\n            return true;\n        return false;\n    }\n    \n    // Function to find the sum of numbers in the hopscotch pattern.\n    int hopscotch(int n, int m, vector<vector<int>> mat, int ty, int i, int j)\n    {\n        int sum = 0;\n        \n        // Checking the type of hopscotch pattern being used.\n        if(ty == 0) {\n            // if current column is even\n            if(j%2 == 0) {\n                if(valid(i-1, j-1, n, m)) sum += mat[i-1][j-1];\n                if(valid(i-1, j, n, m)) sum += mat[i-1][j];\n                if(valid(i-1, j+1, n, m)) sum += mat[i-1][j+1];\n                if(valid(i, j-1, n, m)) sum += mat[i][j-1];\n                if(valid(i, j+1, n, m)) sum += mat[i][j+1];\n                if(valid(i+1, j, n, m)) sum += mat[i+1][j];\n            }\n            // if current column is odd\n            else{\n                if(valid(i-1, j, n, m)) sum += mat[i-1][j];\n                if(valid(i, j-1, n, m)) sum += mat[i][j-1];\n                if(valid(i, j+1, n, m)) sum += mat[i][j+1];\n                if(valid(i+1, j-1, n, m)) sum += mat[i+1][j-1];\n                if(valid(i+1, j, n, m)) sum += mat[i+1][j];\n                if(valid(i+1, j+1, n, m)) sum += mat[i+1][j+1];\n            }\n        }\n        else{\n            // if current column is even\n            if(j%2 == 0) {\n                if(valid(i-2, j-1, n, m)) sum += mat[i-2][j-1]; \n                if(valid(i-2, j, n, m)) sum += mat[i-2][j];\n                if(valid(i-2, j+1, n, m)) sum += mat[i-2][j+1]; \n                if(valid(i-1, j-2, n, m)) sum += mat[i-1][j-2];\n                if(valid(i-1, j+2, n, m)) sum += mat[i-1][j+2]; \n                if(valid(i, j-2, n, m)) sum += mat[i][j-2];\n                if(valid(i, j+2, n, m)) sum += mat[i][j+2]; \n                if(valid(i+1, j-2, n, m)) sum += mat[i+1][j-2];\n                if(valid(i+1, j-1, n, m)) sum += mat[i+1][j-1]; \n                if(valid(i+1, j+1, n, m)) sum += mat[i+1][j+1];\n                if(valid(i+1, j+2, n, m)) sum += mat[i+1][j+2]; \n                if(valid(i+2, j, n, m)) sum += mat[i+2][j];\n            }\n            // if current column is odd\n            else{\n                if(valid(i-1, j-2, n, m)) sum += mat[i-1][j-2]; \n                if(valid(i-1, j-1, n, m)) sum += mat[i-1][j-1];\n                if(valid(i-2, j, n, m)) sum += mat[i-2][j]; \n                if(valid(i-1, j+1, n, m)) sum += mat[i-1][j+1];\n                if(valid(i-1, j+2, n, m)) sum += mat[i-1][j+2]; \n                if(valid(i, j-2, n, m)) sum += mat[i][j-2];\n                if(valid(i, j+2, n, m)) sum += mat[i][j+2]; \n                if(valid(i+1, j-2, n, m)) sum += mat[i+1][j-2];\n                if(valid(i+1, j+2, n, m)) sum += mat[i+1][j+2]; \n                if(valid(i+2, j-1, n, m)) sum += mat[i+2][j-1];\n                if(valid(i+2, j, n, m)) sum += mat[i+2][j]; \n                if(valid(i+2, j+1 ,n, m)) sum += mat[i+2][j+1];\n            }\n        }\n        // returning the sum of numbers in the hopscotch pattern.\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    // Function to check if a given cell is valid or not.\n    static boolean valid(int i, int j, int n, int m) {\n        if(i >= 0 && j >= 0 && i < n && j < m)\n            return true;\n        return false;\n    }\n\n    // Function to calculate the sum of elements based on the given conditions.\n    static int hopscotch(int n, int m, int mat[][], int ty, int i, int j) {\n        int sum = 0;\n        if(ty == 0) {\n            // If type is 0 and columnIndex is even, consider specific surrounding cells.\n            if(j%2 == 0) {\n                if(valid(i-1, j-1, n, m)) sum += mat[i-1][j-1];\n                if(valid(i-1, j, n, m)) sum += mat[i-1][j];\n                if(valid(i-1, j+1, n, m)) sum += mat[i-1][j+1];\n                if(valid(i, j-1, n, m)) sum += mat[i][j-1];\n                if(valid(i, j+1, n, m)) sum += mat[i][j+1];\n                if(valid(i+1, j, n, m)) sum += mat[i+1][j];\n            }\n            // If type is 0 and columnIndex is odd, consider different specific surrounding cells.\n            else{\n                if(valid(i-1, j, n, m)) sum += mat[i-1][j];\n                if(valid(i, j-1, n, m)) sum += mat[i][j-1];\n                if(valid(i, j+1, n, m)) sum += mat[i][j+1];\n                if(valid(i+1, j-1, n, m)) sum += mat[i+1][j-1];\n                if(valid(i+1, j, n, m)) sum += mat[i+1][j];\n                if(valid(i+1, j+1, n, m)) sum += mat[i+1][j+1];\n            }\n        }\n        else{\n            // If type is not 0 and columnIndex is even, consider specific surrounding cells.\n            if(j%2 == 0) {\n                if(valid(i-2, j-1, n, m)) sum += mat[i-2][j-1]; \n                if(valid(i-2, j, n, m)) sum += mat[i-2][j];\n                if(valid(i-2, j+1, n, m)) sum += mat[i-2][j+1]; \n                if(valid(i-1, j-2, n, m)) sum += mat[i-1][j-2];\n                if(valid(i-1, j+2, n, m)) sum += mat[i-1][j+2]; \n                if(valid(i, j-2, n, m)) sum += mat[i][j-2];\n                if(valid(i, j+2, n, m)) sum += mat[i][j+2]; \n                if(valid(i+1, j-2, n, m)) sum += mat[i+1][j-2];\n                if(valid(i+1, j-1, n, m)) sum += mat[i+1][j-1]; \n                if(valid(i+1, j+1, n, m)) sum += mat[i+1][j+1];\n                if(valid(i+1, j+2, n, m)) sum += mat[i+1][j+2]; \n                if(valid(i+2, j, n, m)) sum += mat[i+2][j];\n            }\n            // If type is not 0 and columnIndex is odd, consider different specific surrounding cells.\n            else{\n                if(valid(i-1, j-2, n, m)) sum += mat[i-1][j-2]; \n                if(valid(i-1, j-1, n, m)) sum += mat[i-1][j-1];\n                if(valid(i-2, j, n, m)) sum += mat[i-2][j]; \n                if(valid(i-1, j+1, n, m)) sum += mat[i-1][j+1];\n                if(valid(i-1, j+2, n, m)) sum += mat[i-1][j+2]; \n                if(valid(i, j-2, n, m)) sum += mat[i][j-2];\n                if(valid(i, j+2, n, m)) sum += mat[i][j+2]; \n                if(valid(i+1, j-2, n, m)) sum += mat[i+1][j-2];\n                if(valid(i+1, j+2, n, m)) sum += mat[i+1][j+2]; \n                if(valid(i+2, j-1, n, m)) sum += mat[i+2][j-1];\n                if(valid(i+2, j, n, m)) sum += mat[i+2][j]; \n                if(valid(i+2, j+1 ,n, m)) sum += mat[i+2][j+1];\n            }\n        }\n        // Return the final sum.\n        return sum;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#User function Template for Python\r\n\r\n#User function Template for Python\r\n\r\nclass Solution:\r\n    def valid(self,i,j,n,m):\r\n        #Function to check if given indices are within bounds of matrix.\r\n        if i>=0 and j>=0 and i<n and j<m:\r\n            return True\r\n        return False\r\n    \r\n    def hopscotch(self, n, m, mat, ty, i, j):\r\n        sum=0\r\n        if ty==0:\r\n            if j%2==0:\r\n                #Calculating the sum of valid adjacent elements for type 0 on even column.\r\n                if self.valid(i-1,j-1,n,m):\r\n                    sum+=mat[i-1][j-1]\r\n                if self.valid(i-1,j,n,m):\r\n                    sum+=mat[i-1][j]\r\n                if self.valid(i-1,j+1,n,m):\r\n                    sum+=mat[i-1][j+1]\r\n                if self.valid(i,j-1,n,m):\r\n                    sum+=mat[i][j-1]\r\n                if self.valid(i,j+1,n,m):\r\n                    sum+=mat[i][j+1]\r\n                if self.valid(i+1,j,n,m):\r\n                    sum+=mat[i+1][j]\r\n            else:\r\n                #Calculating the sum of valid adjacent elements for type 0 on odd column.\r\n                if self.valid(i-1,j,n,m):\r\n                    sum+=mat[i-1][j]\r\n                if self.valid(i,j-1,n,m):\r\n                    sum+=mat[i][j-1]\r\n                if self.valid(i,j+1,n,m):\r\n                    sum+=mat[i][j+1]\r\n                if self.valid(i+1,j-1,n,m):\r\n                    sum+=mat[i+1][j-1]\r\n                if self.valid(i+1,j,n,m):\r\n                    sum+=mat[i+1][j]\r\n                if self.valid(i+1,j+1,n,m):\r\n                    sum+=mat[i+1][j+1]\r\n        else:\r\n            if j%2==0:\r\n                #Calculating the sum of valid adjacent elements for type 1 on even column.\r\n                if self.valid(i-2,j-1,n,m):\r\n                    sum+=mat[i-2][j-1]\r\n                if self.valid(i-2,j,n,m):\r\n                    sum+=mat[i-2][j]\r\n                if self.valid(i-2,j+1,n,m):\r\n                    sum+=mat[i-2][j+1]\r\n                if self.valid(i-1,j-2,n,m):\r\n                    sum+=mat[i-1][j-2]\r\n                if self.valid(i-1,j+2,n,m):\r\n                    sum+=mat[i-1][j+2]\r\n                if self.valid(i,j-2,n,m):\r\n                    sum+=mat[i][j-2]\r\n                if self.valid(i,j+2,n,m):\r\n                    sum+=mat[i][j+2]\r\n                if self.valid(i+1,j-2,n,m):\r\n                    sum+=mat[i+1][j-2]\r\n                if self.valid(i+1,j-1,n,m):\r\n                    sum+=mat[i+1][j-1]\r\n                if self.valid(i+1,j+1,n,m):\r\n                    sum+=mat[i+1][j+1]\r\n                if self.valid(i+1,j+2,n,m):\r\n                    sum+=mat[i+1][j+2]\r\n                if self.valid(i+2,j,n,m):\r\n                    sum+=mat[i+2][j]\r\n            else:\r\n                #Calculating the sum of valid adjacent elements for type 1 on odd column.\r\n                if self.valid(i-1,j-2,n,m):\r\n                    sum+=mat[i-1][j-2]\r\n                if self.valid(i-1,j-1,n,m):\r\n                    sum+=mat[i-1][j-1]\r\n                if self.valid(i-2,j,n,m):\r\n                    sum+=mat[i-2][j]\r\n                if self.valid(i-1,j+1,n,m):\r\n                    sum+=mat[i-1][j+1]\r\n                if self.valid(i-1,j+2,n,m):\r\n                    sum+=mat[i-1][j+2]\r\n                if self.valid(i,j-2,n,m):\r\n                    sum+=mat[i][j-2]\r\n                if self.valid(i,j+2,n,m):\r\n                    sum+=mat[i][j+2]\r\n                if self.valid(i+1,j-2,n,m):\r\n                    sum+=mat[i+1][j-2]\r\n                if self.valid(i+1,j+2,n,m):\r\n                    sum+=mat[i+1][j+2]\r\n                if self.valid(i+2,j-1,n,m):\r\n                    sum+=mat[i+2][j-1]\r\n                if self.valid(i+2,j,n,m):\r\n                    sum+=mat[i+2][j]\r\n                if self.valid(i+2,j+1,n,m):\r\n                    sum+=mat[i+2][j+1]\r\n        return sum",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}