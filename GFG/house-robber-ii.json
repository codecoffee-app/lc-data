{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712511,
            "title": "Stickler Thief II",
            "titleSlug": "house-robber-ii",
            "content": "<p><span style=\"font-family: arial, helvetica, sans-serif;\">You are given an array <strong>arr[]</strong> which represents houses arranged in a circle, where each house has a certain value. A thief aims to <strong>maximize</strong> the total stolen value without robbing two adjacent houses.<br /></span><span style=\"font-family: arial, helvetica, sans-serif;\">Determine the <strong>maximum </strong>amount the thief can steal.</span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif;\"><strong>Note:</strong>&nbsp;</span><span style=\"font-family: arial, helvetica, sans-serif;\">Since the houses are in a circle, the first and last houses are also considered&nbsp;</span><strong style=\"font-family: arial, helvetica, sans-serif;\">adjacent</strong><span style=\"font-family: arial, helvetica, sans-serif;\">.</span></p>\n<p><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Examples:</strong></span></p>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px;\"><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Input: </strong>arr[] = [2, 3, 2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> arr[0] and arr[2] can't be robbed because they are adjacent houses. Thus, 3 is the maximum value thief can rob.</span></pre>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px;\"><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Input:</strong> arr[] = [1, 2, 3, 1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Maximum stolen value: arr[0] + arr[2] = 1 + 3 = 4</span></pre>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px;\"><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Input:</strong> arr[] = [2, 2, 3, 1, 2]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Maximum stolen value: arr[0] + arr[2] = 2 + 3 = 5 <strong>or </strong>arr[2] + arr[4] = 3 + 2 = 5</span></pre>\n<p><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Constraints:<br /></strong>2 &le; arr.size() &le; 10<sup>5</sup><br />0 &le; arr[i] &le; 10<sup>4</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array `arr[]` representing houses arranged in a circle. Each house has a certain value. A thief wants to maximize the total stolen value without robbing two adjacent houses. Determine the maximum amount the thief can steal, considering the first and last houses are also adjacent.",
                "constraints": [
                    "2 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[2, 3, 2]",
                        "output": "3",
                        "explanation": "The thief cannot rob house 0 and house 2 as they are adjacent. Therefore, robbing house 1 (value 3) yields the maximum stolen value."
                    },
                    {
                        "input": "[1, 2, 3, 1]",
                        "output": "4",
                        "explanation": "The thief can rob houses 0 and 2 (1 + 3 = 4) to maximize the stolen value. Robbing houses 1 and 3 (2+1=3) would yield a smaller value."
                    },
                    {
                        "input": "[2, 2, 3, 1, 2]",
                        "output": "5",
                        "explanation": "The thief can rob houses 0 and 2 (2 + 3 = 5) or houses 2 and 4 (3 + 2 = 5) to achieve the maximum stolen value."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Travcerse the array and think of pros and cons of taking current element.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Tabulation approach to find the maximum\n    // value. Here x and y are the starting and\n    // ending indices of the subarray.\n    int maxValTab(int x, int y, vector<int>& arr) {\n        int n = arr.size();\n\n        // For first house, taking is only option\n        int prev2 = arr[x];\n\n        // For second house, we can either take\n        // from 1st or 2nd.\n        int prev1 = max(arr[x], arr[x + 1]);\n\n        for (int j = x + 2; j <= y; j++) {\n            int take = arr[j] + prev2;\n            int noTake = prev1;\n\n            int curr = max(take, noTake);\n\n            // update states\n            prev2 = prev1;\n            prev1 = curr;\n        }\n\n        return prev1;\n    }\n\n    // Function to calculate the maximum stolen value\n    int maxValue(vector<int>& arr) {\n        int n = arr.size();\n\n        // Base cases\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return arr[0];\n\n        int ans = 0;\n\n        // Skipping last house\n        ans = max(ans, maxValTab(0, n - 2, arr));\n\n        // Skipping first house\n        ans = max(ans, maxValTab(1, n - 1, arr));\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Tabulation approach to find the maximum\n    // value. Here x and y are the starting and\n    // ending indices of the subarray.\n    static int maxValTab(int x, int y, int[] arr) {\n        int n = arr.length;\n\n        // For first house, taking is only option\n        int prev2 = arr[x];\n\n        // For second house, we can either take\n        // from 1st or 2nd.\n        int prev1 = Math.max(arr[x], arr[x + 1]);\n\n        for (int j = x + 2; j <= y; j++) {\n            int take = arr[j] + prev2;\n            int noTake = prev1;\n\n            int curr = Math.max(take, noTake);\n\n            // update states\n            prev2 = prev1;\n            prev1 = curr;\n        }\n\n        return prev1;\n    }\n\n    // Function to calculate the maximum stolen value\n    static int maxValue(int[] arr) {\n        int n = arr.length;\n\n        // Base cases\n        if (n == 0) return 0;\n        if (n == 1) return arr[0];\n\n        int ans = 0;\n\n        // Skipping last house\n        ans = Math.max(ans, maxValTab(0, n - 2, arr));\n\n        // Skipping first house\n        ans = Math.max(ans, maxValTab(1, n - 1, arr));\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxValTab(self, x, y, arr):\n        n = len(arr)\n        prev2 = arr[x]\n        prev1 = max(arr[x], arr[x + 1])\n\n        for j in range(x + 2, y + 1):\n            take = arr[j] + prev2\n            noTake = prev1\n            curr = max(take, noTake)\n            prev2 = prev1\n            prev1 = curr\n\n        return prev1\n\n    def maxValue(self, arr):\n        n = len(arr)\n\n        if n == 0:\n            return 0\n        if n == 1:\n            return arr[0]\n\n        ans = 0\n        ans = max(ans, self.maxValTab(0, n - 2, arr))\n        ans = max(ans, self.maxValTab(1, n - 1, arr))\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxValTab(x, y, arr) {\n        let n = arr.length;\n\n        let prev2 = arr[x];\n        let prev1 = Math.max(arr[x], arr[x + 1]);\n\n        for (let j = x + 2; j <= y; j++) {\n            let take = arr[j] + prev2;\n            let noTake = prev1;\n\n            let curr = Math.max(take, noTake);\n\n            prev2 = prev1;\n            prev1 = curr;\n        }\n\n        return prev1;\n    }\n\n    maxValue(arr) {\n        let n = arr.length;\n\n        if (n === 0) return 0;\n        if (n === 1) return arr[0];\n\n        let ans = 0;\n\n        ans = Math.max(ans, this.maxValTab(0, n - 2, arr));\n        ans = Math.max(ans, this.maxValTab(1, n - 1, arr));\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}