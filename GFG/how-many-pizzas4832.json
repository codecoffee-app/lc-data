{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702655,
            "title": "How many pizzas ?",
            "titleSlug": "how-many-pizzas4832",
            "content": "<p><span >Given two arrays of diameter of pizzas <strong>arr1[]</strong> and <strong>arr2[]</strong>, each contains 10 pizzas of varying radii. Geek is allowed to eat once, he can eat a sequence of pizzas if they are present in both arrays in the same order. Geek is greedy, help Geek find the maximum number of pizzas he can eat.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr1 = [891, 424, 945, 741, 897, 514, 692, 221, 678, 168], arr2 = [702, 952, 221, 614, 69, 753, 821, 971, 318, 364]\n<strong>Output: </strong>1\n<strong>Explanation: </strong>There is only one common pizza {221}.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr1 = [476, 241, 866, 571, 827, 599, 949, 948, 579, 726], arr2 = [371, 359, 610, 216, 885, 876, 92, 10, 171, 724]\n<strong>Output: </strong>0\n<strong>Explanation: </strong>There is no common pizza.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)</span><br /><span ><strong>Expected</strong><strong> Auxiliary Space:</strong> O(n<sup>2</sup>)&nbsp;</span></p>\n<p><span ><strong>Constraints:<br /></strong>arr1.size() = arr2.size() = 10<strong><br /></strong>1 &lt;= radii &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >You have to find longest common subsequence in the arrays.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the length of the longest common subsequence\n    int getCommon(vector<int> &arr1, vector<int> &arr2) {\n        // Create a table to store the length of the longest common subsequence\n        int lcslen[11][11];\n\n        // Initialize the first row and first column with 0s\n        for (int i = 0; i <= 10; i++)\n            lcslen[i][0] = 0;\n        for (int i = 1; i <= 10; i++)\n            lcslen[0][i] = 0;\n\n        // Fill the table using dynamic programming\n        for (int i = 0; i < 10; i++)\n            for (int j = 0; j < 10; j++) {\n                if (arr1[i] == arr2[j])\n                    lcslen[i + 1][j + 1] = 1 + lcslen[i][j];\n                else\n                    lcslen[i + 1][j + 1] = max(lcslen[i + 1][j], lcslen[i][j + 1]);\n            }\n\n        // Return the length of the longest common subsequence\n        return lcslen[10][10];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to calculate the length of the longest common subsequence\n    public static int getCommon(int arr1[], int arr2[]) {\n        // Create a 2D array to store the length of the LCS for substrings of stack1 and\n        // stack2\n        int[][] lcslen = new int[11][11];\n\n        // Initialize the first row and column of the 2D array to 0\n        for (int i = 0; i <= 10; i++) lcslen[i][0] = 0;\n        for (int i = 1; i <= 10; i++) lcslen[0][i] = 0;\n\n        // Iterate through the stacks and calculate the length of the LCS\n        for (int i = 0; i < 10; i++)\n            for (int j = 0; j < 10; j++) {\n                // If the elements at the same indices in stack1 and stack2 are equal,\n                // increment the LCS length\n                if (arr1[i] == arr2[j]) lcslen[i + 1][j + 1] = 1 + lcslen[i][j];\n                // Otherwise, take the maximum length from the adjacent cells\n                else\n                    lcslen[i + 1][j + 1] = Math.max(lcslen[i + 1][j], lcslen[i][j + 1]);\n            }\n\n        // Return the length of the LCS\n        return lcslen[10][10];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def getCommon(self, arr1, arr2):\n\n        #Initializing a 2D list to store the lengths of common subsequence\n        lcslen = [[0 for i in range(12)] for j in range(12)]\n\n        #Iterating through the stacks\n        for i in range(0, 10):\n            for j in range(0, 10):\n                #Comparing elements in the stacks\n                if (arr1[i] == arr2[j]):\n                    #If elements are equal, increment the length\n                    lcslen[i + 1][j + 1] = 1 + lcslen[i][j]\n                else:\n                    #If elements are not equal, choose the maximum length from the previous cells\n                    lcslen[i + 1][j + 1] = max(lcslen[i + 1][j],\n                                               lcslen[i][j + 1])\n\n        #Returning the length of the longest common subsequence\n        return lcslen[10][10]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find the length of the longest common subsequence\n    getCommon(arr1, arr2) {\n        // Create a table to store the length of the longest common subsequence\n        let lcslen = Array.from({length : 11}, () => Array(11).fill(0));\n\n        // Fill the table using dynamic programming\n        for (let i = 0; i < 10; i++) {\n            for (let j = 0; j < 10; j++) {\n                if (arr1[i] === arr2[j]) {\n                    lcslen[i + 1][j + 1] = 1 + lcslen[i][j];\n                } else {\n                    lcslen[i + 1][j + 1] = Math.max(lcslen[i + 1][j], lcslen[i][j + 1]);\n                }\n            }\n        }\n\n        // Return the length of the longest common subsequence\n        return lcslen[10][10];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}