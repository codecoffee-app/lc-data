{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700601,
            "title": "Huffman Decoding-1",
            "titleSlug": "huffman-decoding-1",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>S</strong>, implement <a href=\"https://www.geeksforgeeks.org/huffman-coding-greedy-algo-3/\">Huffman Encoding</a> and <a href=\"https://www.geeksforgeeks.org/huffman-decoding/\">Decoding</a>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\">Input : abc</span>\n<span style=\"font-size: 18px;\">Output : abc</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:&nbsp;</span></strong></p>\n<pre><span style=\"font-size: 18px;\">Input : geeksforgeeks</span>\n<span style=\"font-size: 18px;\">Output : geeksforgeeks</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your task:&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>decode_file(),&nbsp;</strong>which takes root of the tree formed while encoding and the encoded string as the input parameters and returns the decoded string.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2&lt;=S&lt;=1000</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string **S**, implement Huffman Encoding and Decoding. You are provided with the root of the Huffman tree and the encoded string. Your task is to decode the string using the Huffman tree.",
                "constraints": [
                    "2 <= Length of S <= 1000"
                ],
                "testcases": [
                    {
                        "input": "abc",
                        "output": "abc",
                        "explanation": null
                    },
                    {
                        "input": "geeksforgeeks",
                        "output": "geeksforgeeks",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:16px\">Iterate through the binary encoded data, to find character corresponding to current bits,&nbsp;use following simple steps:</span></p>\n\n<ol>\n\t<li><span style=\"font-size:16px\">Start from root and do following until a leaf is found.</span></li>\n\t<li><span style=\"font-size:16px\">If current bit is 0, move to left node of the tree.</span></li>\n\t<li><span style=\"font-size:16px\">If the bit is 1, move to right node of the tree.</span></li>\n\t<li><span style=\"font-size:16px\">If during traversal, when&nbsp;encounter a leaf node,&nbsp;print character of that particular leaf node and then again continue the iteration of the encoded data starting from step 1.</span></li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to decode the encoded file using the given Huffman tree\r\nstring decode_file(struct MinHeapNode* root, string s)\r\n{\r\n    string ans = \"\"; // Initialize an empty string to store the decoded characters\r\n    struct MinHeapNode* curr = root; // Set the current node to the root of the Huffman tree\r\n    \r\n    // Iterate through the encoded string\r\n    for (int i=0; i<s.size(); i++)\r\n    {\r\n        // If the current bit is '0', move to the left child of the current node\r\n        if (s[i] == '0')\r\n           curr = curr->left;\r\n        // If the current bit is '1', move to the right child of the current node\r\n        else\r\n           curr = curr->right;\r\n           \r\n        // If the current node has no children, it is a leaf node and contains a decoded character\r\n        if (curr->left==NULL and curr->right==NULL)\r\n        {\r\n            ans += curr->data; // Append the decoded character to the answer string\r\n            curr = root; // Reset the current node to the root of the Huffman tree\r\n        }\r\n    }\r\n    \r\n    // Return the decoded string\r\n    return ans+'\\0';\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\nclass GfG {\r\n    // your required to complete this function\r\n    // this function should return the encoded string\r\n    // see the main function for the minHeapNode reference\r\n    String decode_file(minHeapNode root, String encodedStr){\r\n        // Code here\r\n        String ans = \"\";\r\n        minHeapNode curr = root;\r\n        for (int i=0; i<encodedStr.length(); i++) {\r\n            if (encodedStr.charAt(i) == '0')\r\n                curr = curr.left;\r\n            else\r\n                curr = curr.right;\r\n            if (curr.left==null && curr.right==null) {\r\n                ans += curr.data;\r\n                curr = root;\r\n            }\r\n        }\r\n        return ans+'\\0';\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}