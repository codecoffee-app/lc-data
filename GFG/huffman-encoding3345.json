{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705885,
            "title": "Huffman Encoding",
            "titleSlug": "huffman-encoding3345",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>S</strong>&nbsp;of distinct character&nbsp;of size <strong>N</strong>&nbsp;and their corresponding frequency <strong>f[ ]</strong> i.e. character <strong>S[i]</strong> has<strong> f[i]</strong> frequency. Your task is to build&nbsp;the Huffman tree print all the huffman codes in preorder traversal&nbsp;of the tree.<br />\r\n<strong>Note: </strong>While merging if two nodes&nbsp;have the same value, then the node which occurs&nbsp;at first will be taken on the left of Binary Tree and the other one to the right, otherwise Node with less value will be taken on the left of the subtree and other one to the right.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\">S = &quot;abcdef&quot;\r\nf[] = {5, 9, 12, 13, 16, 45}\r\n<strong>Output: </strong>\r\n0 100 101 1100 1101 111\r\n<strong>Explanation:\r\n</strong></span><img alt=\"Steps to print codes from Huffman Tree\" src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/fig-6-300x167.jpg\" /><span style=\"font-size:18px\"><strong>\r\n</strong>HuffmanCodes will be:\r\nf : 0\r\nc : 100\r\nd : 101\r\na : 1100\r\nb : 1101\r\ne : 111\r\nHence printing them in the PreOrder of Binary \r\nTree.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>huffmanCodes()&nbsp;</strong>which takes the given string <strong>S</strong>, frequency array <strong>f[ ]</strong>&nbsp;and number of characters <strong>N</strong> as input parameters and returns a vector of strings containing all huffman codes in order of preorder traversal&nbsp;of the tree.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time complexity: </strong>O(N * LogN)&nbsp;<br />\r\n<strong>Expected Space complexity:&nbsp;</strong>O(N)&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N&nbsp;&le; 26</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` of distinct characters of size `N` and their corresponding frequencies `f[]`, where character `S[i]` has frequency `f[i]`, the task is to construct a Huffman tree and print all the Huffman codes in preorder traversal of the tree.\n\n**Note:** While merging, if two nodes have the same value, the node that appears first is placed on the left side of the binary tree, and the other on the right. Otherwise, the node with the smaller value is placed on the left subtree, and the other on the right.",
                "constraints": [
                    "1 <= N <= 26"
                ],
                "testcases": [
                    {
                        "input": "S = \"abcdef\"\nf[] = {5, 9, 12, 13, 16, 45}",
                        "output": "0 100 101 1100 1101 111",
                        "explanation": "Huffman codes are generated as follows:\nf: 0\nc: 100\nd: 101\na: 1100\nb: 1101\ne: 111\nThe output is the preorder traversal of the Huffman tree, resulting in the given sequence."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">To build the Huffman Tree:</span></p>\n\n<ol>\n\t<li><span style=\"font-size:18px\">Create a leaf node for each unique character and build a min heap of all leaf nodes (Min Heap is used as a priority queue. The value of frequency field is used to compare two nodes in min heap. Initially, the least frequent character is at root)</span></li>\n\t<li><span style=\"font-size:18px\">Extract two nodes with the minimum frequency from the min heap.</span></li>\n\t<li><span style=\"font-size:18px\">Create a new internal node with a frequency equal to the sum of the two nodes frequencies. Make the first extracted node as its left child and the other extracted node as its right child. Add this node to the min heap.</span></li>\n\t<li><span style=\"font-size:18px\">Repeat steps #2 and #3 until the heap contains only one node. The remaining node is the root node and the tree is complete.</span>&nbsp;</li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "priority-queue",
                "slug": "priority-queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft",
            "samsung",
            "united-health-group"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "struct MinHeapNode\r\n{\r\n    char data;\r\n    unsigned freq;\r\n    MinHeapNode *left, *right;\r\n    MinHeapNode(char data, unsigned freq)\r\n    {\r\n        left = right = NULL;\r\n        this->data = data;\r\n        this->freq = freq;\r\n    }\r\n};\r\nstruct compare\r\n{\r\n    bool operator()(MinHeapNode* l, MinHeapNode* r)\r\n    {\r\n        return (l->freq > r->freq);\r\n    }\r\n};\r\n\r\nclass Solution\r\n{\r\n\tpublic:\r\n\t    void getCodes(struct MinHeapNode* root, string str,vector<string> &res)\r\n        {\r\n            if (!root)\r\n                return;\r\n            if (root->data != '$'){\r\n                res.push_back(str);\r\n            }\r\n            getCodes(root->left, str + \"0\",res);\r\n            getCodes(root->right, str + \"1\",res);\r\n        }\r\n        \r\n        \r\n        \r\n\t\tvector<string> huffmanCodes(string S,vector<int> f,int N)\r\n\t\t{\r\n\t\t    struct MinHeapNode *left, *right, *top;\r\n            priority_queue<MinHeapNode*, vector<MinHeapNode*>, compare> minHeap;\r\n            for (int i = 0; i < N; ++i)\r\n                minHeap.push(new MinHeapNode(S[i], f[i]));\r\n            while (minHeap.size() != 1)\r\n            {\r\n                left = minHeap.top();\r\n                minHeap.pop();\r\n                right = minHeap.top();\r\n                minHeap.pop();\r\n                top = new MinHeapNode('$', left->freq + right->freq);\r\n                top->left = left;\r\n                top->right = right;\r\n                minHeap.push(top);\r\n            }\r\n            vector<string> res;\r\n            getCodes(minHeap.top(), \"\",res);\r\n            return res;\r\n\t\t}\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class MinHeapNode\n{\n    char data; // character data\n    int freq; // frequency of the character\n    MinHeapNode left, right; // left and right child nodes\n    MinHeapNode(char data, int freq)\n    {\n        left = right = null; // initialize left and right child nodes as null\n        this.data = data; // assign character data\n        this.freq = freq; // assign frequency of the character\n    }\n}\n\nclass Solution\n{\n    void getCodes(MinHeapNode root, String str, ArrayList<String> res)\n    {\n        if (root == null) // base case, if root is null\n            return; // return\n\n        if (root.data != '$') // if the character is not a special character\n        {\n            res.add(str); // add the generated code to the result list\n        }\n\n        getCodes(root.left, str + \"0\", res); // recursively generate code for left child node with appended \"0\"\n        getCodes(root.right, str + \"1\", res); // recursively generate code for right child node with appended \"1\"\n    }\n\n    ArrayList<String> huffmanCodes(String S, int[] f, int N)\n    {\n        MinHeapNode left, right, top; // create nodes for left, right, and top\n\n        // create a minimum heap/priority queue with custom comparator to prioritize nodes based on frequency\n        PriorityQueue<MinHeapNode> minHeap =\n            new PriorityQueue<>(new Comparator<MinHeapNode>(){\n                public int compare(MinHeapNode a, MinHeapNode b){\n                    if(a.freq >= b.freq){\n                        return 1; // a has higher or equal frequency, return 1\n                    }\n                    else{\n                        return -1; // a has lower frequency, return -1\n                    }\n                }\n            });\n\n        for (int i = 0; i < N; ++i)\n            minHeap.add(new MinHeapNode(S.charAt(i), f[i])); // add characters and frequencies to the minHeap\n\n        while (minHeap.size() != 1) // while there is more than one node in the minHeap\n        {\n            left = minHeap.poll(); // remove the node with the minimum frequency as the left child\n\n            right = minHeap.poll(); // remove the node with the next minimum frequency as the right child\n\n            top = new MinHeapNode('$', left.freq + right.freq); // create a new node with special character and sum of frequencies\n\n            top.left = left; // assign the left child to the new node\n            top.right = right; // assign the right child to the new node\n\n            minHeap.add(top); // add the new node back to the minHeap\n        }\n\n        ArrayList<String> res = new ArrayList<String>(); // create a new list to store the generated codes\n        getCodes(minHeap.poll(), \"\", res); // recursive function to generate Huffman codes\n\n        return res; // return the generated codes\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}