{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703310,
            "title": "Hungry Pizza Lovers",
            "titleSlug": "hungry-pizza-lovers3148",
            "content": "<p><span style=\"font-size:18px\">Dominos Pizza has&nbsp;hungry customers waiting in the queue. Each unique order&nbsp;is placed by a customer at time&nbsp;x[i], and the order takes&nbsp;y[i]&nbsp;units of time to complete.<br />\r\nYou have information on all&nbsp;n&nbsp;orders, Find the order in which all&nbsp;customers will receive their pizza and return it. If two or more orders are completed at the same time&nbsp;then sort them by non-decreasing order number.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {{4,1}, {6,2}, {7,6}, \r\n\\t\\t\\t     {8,1}, {1,3}}\r\n<strong>Output :</strong> 5 1 2 4 3\r\n<strong>Explanation:</strong>\r\nHere an array can be transform to \r\n{5, 8, 13, 9, 4}. Here 5<sup>th</sup>&nbsp;index order \r\nreceived first then 1<sup>st</sup>&nbsp;order, 2<sup>nd</sup>&nbsp;order...\r\nreturn {5, 1, 2, 4, 3}\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {{1,1}, {1,1}, {1,1}} <strong>\r\nOutput :</strong>  1 2 3 </span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>permute()</strong> that takes 2-d array <strong>(arr)</strong>, sizeOfArray <strong>(n)</strong>, and return the array of order in which customers will receive their pizza. The driver code takes care of the printing.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*LOG(N)).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup><br />\r\n1 &le; arr[i][0], arr[i][1] &le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Domino's Pizza is facing a queue of hungry customers. Each customer places a unique order at time x[i], and the order requires y[i] units of time to complete. Given information about n orders, determine and return the order in which customers will receive their pizzas. If two or more orders are completed at the same time, sort them by their original order number in non-decreasing order.",
                "constraints": [
                    "1 \u2264 N \u2264 10^5",
                    "1 \u2264 arr[i][0], arr[i][1] \u2264 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr = {{4,1}, {6,2}, {7,6}, {8,1}, {1,3}}",
                        "output": "5 1 2 4 3",
                        "explanation": "The completion times for the orders are {5, 8, 13, 9, 4} respectively. Sorting based on completion time gives the order {5, 1, 2, 4, 3} as the 5th order finishes first, followed by 1st, then 2nd, 4th, and lastly the 3rd order."
                    },
                    {
                        "input": "arr = {{1,1}, {1,1}, {1,1}}",
                        "output": "1 2 3",
                        "explanation": "All orders complete at the same time. So, they are sorted based on their original order number resulting in {1, 2, 3}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The implementation of this is more or less straightforward. We maintain a permutation from&nbsp;1&nbsp;to&nbsp;n&nbsp;and sort it by (arr[i][0]+arr[i][1])&nbsp;&nbsp;to obtain the desired permutation.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to permute the given array of arrays\n\nvector<int> permute(vector<vector<int>> &arr, int n)\n{\n    // Create a vector of pairs to store the sum of each array element and its corresponding index\n    vector<pair<int, int>> v;\n    \n    // Iterate through each array and calculate the sum of its elements, and store the sum and index in the vector \n    for(int i=0;i<n;i++){\n        v.push_back({arr[i][0] + arr[i][1],i+1});\n    }\n    \n    vector<int> ans; // Create a vector to store the final permutation\n    \n    sort(v.begin(),v.end()); // Sort the vector of pairs based on the sum \n    \n    // Iterate through the sorted vector and store the indices in the final permutation vector\n    for(int i=0;i<n;i++)\n        ans.push_back(v[i].second);\n    \n    return ans; // Return the final permutation vector\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Complete{\n    static class Pair{\n        int first, second; // Create a Pair class with two integer attributes, first and second.\n        Pair(int first, int second){ // Constructor for Pair class\n            this.first = first; // Set the value of first attribute to the given first parameter\n            this.second = second; // Set the value of second attribute to the given second parameter\n        }\n    }\n    \n    // Function for finding maximum and value pair\n    public static ArrayList<Integer> permute (int arr[][], int n) { // Create a function named permute that takes in a 2D integer array arr and an integer n as parameters and returns an ArrayList of integers.\n        ArrayList<Pair> v = new ArrayList<>(); // Create an ArrayList of Pair objects named v.\n    \n        // Iterate over the 2D array arr, calculate the sum of each row, and add a new Pair object to the ArrayList v with the sum and the index of the row + 1.\n        for(int i=0;i<n;i++){\n            v.add(new Pair(arr[i][0] + arr[i][1],i+1));\n        }\n        \n        ArrayList<Integer> ans = new ArrayList<>(); // Create a new ArrayList of integers named ans.\n        \n        // Sort the ArrayList v based on the first attribute of each Pair object in ascending order using a Comparator.\n        Collections.sort(v, new Comparator<Pair>(){\n            public int compare(Pair p1, Pair p2){\n                return p1.first - p2.first;\n            }\n        });\n        \n        // Iterate over the sorted ArrayList v and add the second attribute of each Pair object to the ArrayList ans.\n        for(int i=0;i<n;i++)\n            ans.add(v.get(i).second);\n        \n        return ans; // Return the ArrayList ans.\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def permute(self, arr, n):\n        # Create an empty dictionary\n        dict = {}\n        # Create an empty list\n        li = []\n        # Iterate over the elements of the input array\n        for i in range(len(arr)):\n            # Add the sum of the first and second element of each array element\n            dict[i] = arr[i][0] + arr[i][1]\n        \n        # Sort the dictionary items based on the sum\n        sorted_x = sorted(dict.items(), key=lambda kv: kv[1])\n        \n        # Iterate over the sorted dictionary items\n        for i in sorted_x:\n            # Append the index incremented by 1 to the list\n            li.append(i[0] + 1)\n        \n        # Return the list\n        return li",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}