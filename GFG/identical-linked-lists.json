{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700585,
            "title": "Identical Linked Lists",
            "titleSlug": "identical-linked-lists",
            "content": "<p><span >Given the two singly<strong> Linked Lists</strong> respectively. The task is to check whether two linked lists are<strong> identical</strong> or not.&nbsp;<br />Two Linked Lists are identical when they have the same data and with the same arrangement too. If both Linked Lists are identical then return <strong>true </strong>otherwise return <strong>false</strong>.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList1: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6, LinkedList2: 99-&gt;59-&gt;42-&gt;20\n<strong>Output: </strong>false<br /><strong>Explanation:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700585/Web/Other/blobid0_1719550109.png\" width=\"400\" height=\"140\" /><br /></strong>As shown in figure linkedlists are not identical.</span></pre>\n<pre><span ><strong>Input: </strong>LinkedList1: 1-&gt;2-&gt;3-&gt;4-&gt;5, LinkedList2: 1-&gt;2-&gt;3-&gt;4-&gt;5\n<strong>Output: </strong>true<br /><strong>Explanation: <br /></strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700585/Web/Other/blobid2_1719550498.png\" width=\"400\" height=\"140\" /> </span><br /><span >As shown in figure both are identical.</span></pre>\n<p><span ><strong>Expected Time Complexity</strong>: O(n)<br /><strong>Expected Auxilliary Space</strong>: O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= length of lists &lt;= 10<sup>5</sup><sup><br /></sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &lt;= elements of lists &lt;= 10<sup>5</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Compares two linked lists for equality by iterating through both lists simultaneously. It returns true if all corresponding nodes have equal data and the lists have the same length; otherwise, it returns false.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\nbool areIdentical(struct Node *head1, struct Node *head2) {\n    // Traverse through both linked lists\n    while (head1 != NULL && head2 != NULL) {\n        // If the data of current nodes in both lists are not equal, return false\n        if (head1->data != head2->data) {\n            return false;\n        }\n        head1 = head1->next;\n        head2 = head2->next;\n    }\n\n    // Return true if both lists reach the end simultaneously, else false\n    return (head1 == NULL && head2 == NULL);\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if two linked lists are identical\n    bool areIdentical(struct Node *head1, struct Node *head2) {\n        // Traverse through both linked lists\n        while (head1 != NULL && head2 != NULL) {\n            // If the data of current nodes in both lists are not equal, return false\n            if (head1->data != head2->data)\n                return false;\n            head1 = head1->next;\n            head2 = head2->next;\n        }\n        // Return true if both lists reach the end simultaneously, else false\n        return (head1 == NULL && head2 == NULL);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to check whether two linked lists are identical or not.\n    public boolean areIdentical(Node head1, Node head2) {\n\n        Node temp1 = head1, temp2 = head2;\n        // traversing through both the linked lists.\n        while (temp1 != null && temp2 != null) {\n\n            // if data for current node in both lists aren't equal,\n            // we return false.\n            if (temp1.data != temp2.data) return false;\n\n            temp1 = temp1.next;\n            temp2 = temp2.next;\n        }\n\n        // if both lists reach end after same number of traversals\n        // then true is returned else false.\n        return (temp1 == null && temp2 == null);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    #Function to check whether two linked lists are identical or not.\n    def areIdentical(self, head1, head2):\n\n        #traversing through both the linked lists.\n        while head1 != None and head2 != None:\n\n            #if data for current node in both lists are not equal, we return false.\n            if head1.data != head2.data:\n                return 0\n            head1 = head1.next\n            head2 = head2.next\n\n        #if both lists reach end after same number of traversals\n\n    #then true is returned else false.\n        return head1 == None and head2 == None\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} head1\n * @param {Node} head2\n * @returns {boolean}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to check whether two linked lists are identical or not.\n    areIdentical(head1, head2) {\n        // traversing through both the linked lists.\n        while (head1 !== null && head2 !== null) {\n            // if data for current node in both lists are not equal,\n            // we return false.\n            if (head1.data !== head2.data) return false;\n            head1 = head1.next;\n            head2 = head2.next;\n        }\n        // if both lists reach end after same number of traversals\n        // then true is returned else false.\n        return (head1 === null && head2 === null);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}