{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712149,
            "title": "Identify Complexity",
            "titleSlug": "identify-complexity",
            "content": "<p><span style=\"font-size:18px\">Geek is given 4&nbsp;queries by the mentor and he has to tell worst case time complexity of the following algorithm<br />\r\n1 - BinarySearch<br />\r\n2 - Merge Sort<br />\r\n3 - Selection Sort<br />\r\n4 - Quick Sort</span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Example:</strong>\r\n<strong>Input:</strong>\r\n1\r\n<strong>Output:</strong>\r\nlogn\r\n<strong>Explanation:</strong>\r\nQuery 1 point to Binary Search which has logn in worst case time complexity.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong><br />\r\n<strong>Input:</strong><br />\r\n3<br />\r\n<strong>Output:</strong><br />\r\nn^2</span></p>\r\n\r\n<p><strong>Your Task:</strong><br />\r\n<span style=\"font-size:18px\">You don&#39;t have to read input or print anything. Your task is to complete the function <strong>TImeComplexity()&nbsp;</strong>which takes the integer <strong>n</strong>&nbsp;denoting the query number and print the worst case time complexity.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Constraint:</span></strong><br />\r\n<span style=\"font-size:18px\">1&lt;=n&lt;=4</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A mentor presents Geek with four queries related to algorithm time complexity. Geek must determine the worst-case time complexity for each algorithm:\n\n1.  Binary Search\n2.  Merge Sort\n3.  Selection Sort\n4.  Quick Sort",
                "constraints": [
                    "1 <= n <= 4"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "logn",
                        "explanation": "Query 1 refers to Binary Search, which has a worst-case time complexity of O(log n)."
                    },
                    {
                        "input": "3",
                        "output": "n^2",
                        "explanation": "Query 3 refers to Selection Sort, which has a worst-case time complexity of O(n^2)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    void TimeComplexity(int n) {\r\n        if (n == 1)\r\n            cout << \"logn\";\r\n        else if (n == 2)\r\n            cout << \"nlogn\";\r\n        else if (n == 3)\r\n            cout << \"n^2\";\r\n        else if (n == 4)\r\n            cout << \"n^2\";\r\n\r\n        cout << \"\\n\";\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static void TimeComplexity(int n) {\n        // Checking the value of n to determine the time complexity\n        if (n == 1)\n           System.out.println(\"logn\");\n        else if (n == 2)\n            System.out.println(\"nlogn\");\n        else if (n == 3)\n            System.out.println(\"n^2\");\n        else if (n == 4)\n            System.out.println(\"n^2\");\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to determine the time complexity based on the value of n.\n    def TimeComplexity(self, n):\n        if n==1:  #if n is 1, the time complexity is log(n).\n            print(\"logn\")\n        elif n==2:  #if n is 2, the time complexity is n*log(n).\n            print(\"nlogn\")\n        elif n==3:  #if n is 3, the time complexity is n^2.\n            print(\"n^2\")\n        else:  #for any other value of n, the time complexity is n^2.\n            print(\"n^2\")",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @returns {void}\n*/\n\nclass Solution {\n    //Function to find time complexity.\n    TimeComplexity(n)\n    {\n        if(n === 1){\n            console.log(\"logn\");\n        }\n        else if(n === 2){\n            console.log(\"nlogn\");\n        }\n        else if(n === 3){\n            console.log(\"n^2\");\n        }\n        else{\n            console.log(\"n^2\");\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}