{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700386,
            "title": "Implement Atoi",
            "titleSlug": "implement-atoi",
            "content": "<p><span style=\"font-size: 18px;\">Given a string s, the objective is to convert it into integer format without utilizing any built-in functions. Refer the below steps to know about atoi() function.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Cases for atoi() conversion:</span></strong></p>\n<ol>\n<li><span style=\"font-size: 18px;\">Skip any leading whitespaces.</span></li>\n<li><span style=\"font-size: 18px;\">Check for a sign (&lsquo;+&rsquo; or &lsquo;-&lsquo;), default to positive if no sign is present.</span></li>\n<li><span style=\"font-size: 18px;\">Read the integer by ignoring leading zeros until a non-digit character is encountered or end of the string is reached. If no digits are present, return 0.</span></li>\n<li><span style=\"font-size: 18px;\">If the integer is greater than 2<sup>31</sup> &ndash; 1, then return 2<sup>31</sup> &ndash; 1 and if the integer is smaller than -2<sup>31</sup>, then return -2<sup>31</sup>.</span></li>\n</ol>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">s = \"-123\"\n</span><strong style=\"font-size: 18px;\">Output: -</strong><span style=\"font-size: 18px;\">123<br /></span><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\">It is possible to convert -123 into an integer so we returned in the form of an integer<br /></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">s = \"<span style=\"color: #273239; font-family: Nunito, sans-serif; font-style: italic; letter-spacing: 0.162px; text-wrap-mode: wrap; background-color: #f9f9f9;\">  -</span>\"\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">0<br /></span><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">No digits are present, therefore the returned answer is 0.<br /></span></span></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \" 1231231231311133\"\n<strong>Output: </strong>2147483647<br /><strong>Explanation: </strong>T</span><span style=\"font-size: 18px;\">he converted number will be greater than 2<sup>31</sup> &ndash; 1, therefore print 2<sup>31</sup> &ndash; 1 = 2147483647.\n</span></pre>\n<pre><span ><strong>Input: </strong>s = \"-999999999999\"\n<strong>Output: -</strong>2147483648<br /><strong>Explanation: </strong></span><span >The converted number is smaller than -2<sup>31</sup>, therefore print -2<sup>31</sup> = -2147483648.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">s = \"  -0012gfg4\"\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">-12</span><strong style=\"font-size: 18px;\">\nExplanation: </strong></span><span style=\"font-size: 18px;\">Nothing is read after -12 as a non-digit character &lsquo;g&rsquo; was encountered.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |s| &le; 15</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement an atoi() function that converts a string `s` into an integer without using any built-in functions. Follow these steps:\n\n1.  **Whitespace Handling:** Ignore any leading whitespace characters in the string.\n2.  **Sign Detection:**  Check for an optional sign ('+' or '-') at the beginning of the number. If no sign is present, assume the number is positive.\n3.  **Integer Reading:** Read in digits until a non-digit character is encountered or the end of the string is reached. Ignore any leading zeros. If no digits are found after handling whitespace and the sign (if any), return 0.\n4.  **Range Clamping:** If the resulting integer is outside the 32-bit signed integer range [-2<sup>31</sup>, 2<sup>31</sup> - 1], clamp the value to the appropriate limit.  Specifically, return 2<sup>31</sup> - 1 if the integer is greater than 2<sup>31</sup> - 1, and return -2<sup>31</sup> if the integer is less than -2<sup>31</sup>.",
                "constraints": [
                    "1 <= |s| <= 15"
                ],
                "testcases": [
                    {
                        "input": "\"-123\"",
                        "output": "-123",
                        "explanation": "The string \"-123\" is successfully converted into the integer -123."
                    },
                    {
                        "input": "\"  -\"",
                        "output": "0",
                        "explanation": "The string contains whitespace and a sign, but no digits, so the output is 0."
                    },
                    {
                        "input": "\" 1231231231311133\"",
                        "output": "2147483647",
                        "explanation": "The converted number 1231231231311133 exceeds the maximum 32-bit integer value (2<sup>31</sup> - 1), so the output is clamped to 2147483647."
                    },
                    {
                        "input": "\"-999999999999\"",
                        "output": "-2147483648",
                        "explanation": "The converted number -999999999999 is less than the minimum 32-bit integer value (-2<sup>31</sup>), so the output is clamped to -2147483648."
                    },
                    {
                        "input": "\"  -0012gfg4\"",
                        "output": "-12",
                        "explanation": "The string starts with whitespace, then a negative sign, followed by leading zeros and the digits '12'.  The conversion stops at the non-digit character 'g', resulting in the integer -12."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Remind that, 123 = 1*100 + 2*10 + 3*1. From last index of the string calculate the integer number. If you get any invalid character then return -1. Don&#39;t forget to check the &#39;-&#39; character at the first index of the given string.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Design-Pattern",
                "slug": "design-pattern"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft",
            "payu",
            "adobe",
            "code-brew"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\nint myAtoi(char *s) {\n    int sign = 1, res = 0, idx = 0;\n\n    // Ignore leading whitespaces\n    while (s[idx] == ' ') {\n        idx++;\n    }\n\n    // Store the sign of number\n    if (s[idx] == '-' || s[idx] == '+') {\n        if (s[idx++] == '-')\n            sign = -1;\n    }\n\n    // Construct the number digit by digit\n    while (s[idx] >= '0' && s[idx] <= '9') {\n\n        // handling overflow/underflow test case\n        if (res > INT_MAX / 10 || (res == INT_MAX / 10 && s[idx] - '0' > 7)) {\n            return sign == 1 ? INT_MAX : INT_MIN;\n        }\n\n        // Append current digit to the result\n        res = 10 * res + (s[idx++] - '0');\n    }\n    return res * sign;\n}\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int myAtoi(char *s) {\n        int sign = 1, res = 0, idx = 0;\n\n        // Ignore leading whitespaces\n        while (s[idx] == ' ') {\n            idx++;\n        }\n\n        // Store the sign of number\n        if (s[idx] == '-' || s[idx] == '+') {\n            if (s[idx++] == '-')\n                sign = -1;\n        }\n\n        // Construct the number digit by digit\n        while (s[idx] >= '0' && s[idx] <= '9') {\n\n            // handling overflow/underflow test case\n            if (res > INT_MAX / 10 || (res == INT_MAX / 10 && s[idx] - '0' > 7)) {\n                return sign == 1 ? INT_MAX : INT_MIN;\n            }\n\n            // Append current digit to the result\n            res = 10 * res + (s[idx++] - '0');\n        }\n        return res * sign;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int myAtoi(String s) {\n        int sign = 1, res = 0, idx = 0;\n\n        // Ignore leading whitespaces\n        while (idx < s.length() && s.charAt(idx) == ' ') {\n            idx++;\n        }\n\n        // Store the sign of number\n        if (idx < s.length() && (s.charAt(idx) == '-' || s.charAt(idx) == '+')) {\n            if (s.charAt(idx++) == '-') {\n                sign = -1;\n            }\n        }\n\n        // Construct the number digit by digit\n        while (idx < s.length() && s.charAt(idx) >= '0' && s.charAt(idx) <= '9') {\n\n            // Handling overflow/underflow test case\n            if (res > Integer.MAX_VALUE / 10 ||\n                (res == Integer.MAX_VALUE / 10 && s.charAt(idx) - '0' > 7)) {\n                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\n            }\n\n            // Append current digit to the result\n            res = 10 * res + (s.charAt(idx++) - '0');\n        }\n        return res * sign;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def myAtoi(self, s):\n        sign = 1\n        res = 0\n        idx = 0\n\n        # Ignore leading whitespaces\n        while idx < len(s) and s[idx] == ' ':\n            idx += 1\n\n        # Store the sign of number\n        if idx < len(s) and (s[idx] == '-' or s[idx] == '+'):\n            if s[idx] == '-':\n                sign = -1\n            idx += 1\n\n        # Construct the number digit by digit\n        while idx < len(s) and '0' <= s[idx] <= '9':\n\n            # Handling overflow/underflow test case\n            if res > (2**31 - 1) // 10 or \\\n                    (res == (2**31 - 1) // 10 and ord(s[idx]) - ord('0') > 7):\n                return sign * (2**31 - 1) if sign == 1 else -2**31\n\n            # Append current digit to the result\n            res = 10 * res + (ord(s[idx]) - ord('0'))\n            idx += 1\n\n        return res * sign\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function template for C#\nclass Solution {\n    // Complete this function\n    public int myAtoi(string s) {\n        int sign = 1, res = 0, idx = 0;\n\n        // Ignore leading whitespaces\n        while (idx < s.Length && s[idx] == ' ') {\n            idx++;\n        }\n\n        // Store the sign of number\n        if (idx < s.Length && (s[idx] == '-' || s[idx] == '+')) {\n            if (s[idx] == '-') sign = -1;\n            idx++;\n        }\n\n        // Construct the number digit by digit\n        while (idx < s.Length && s[idx] >= '0' && s[idx] <= '9') {\n            // Handling overflow/underflow test case\n            if (res > Int32.MaxValue / 10 ||\n                (res == Int32.MaxValue / 10 && s[idx] - '0' > 7)) {\n                return sign == 1 ? Int32.MaxValue : Int32.MinValue;\n            }\n\n            // Append current digit to the result\n            res = 10 * res + (s[idx] - '0');\n            idx++;\n        }\n        return res * sign;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {string} s\n * @return {number}\n */\n\nclass Solution {\n    myAtoi(s) {\n        let sign = 1, res = 0, idx = 0;\n\n        // Ignore leading whitespaces\n        while (idx < s.length && s[idx] === ' ') {\n            idx++;\n        }\n\n        // Store the sign of number\n        if (idx < s.length && (s[idx] === '-' || s[idx] === '+')) {\n            if (s[idx] === '-') {\n                sign = -1;\n            }\n            idx++;\n        }\n\n        // Construct the number digit by digit\n        while (idx < s.length && s[idx] >= '0' && s[idx] <= '9') {\n\n            // Handling overflow/underflow test case\n            if ((res > Math.pow(2, 31) / 10) ||\n                ((res === Math.floor(Math.pow(2, 31) / 10)) && (s[idx] - '0' > 7))) {\n\n                return sign === 1 ? (Math.pow(2, 31) - 1) : -Math.pow(2, 31);\n            }\n\n            // Append current digit to the result\n            res = 10 * res + (s[idx] - '0');\n            idx++;\n        }\n        if (res == 0) return 0;\n        return res * sign;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}