{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700627,
            "title": "Change of Key in BST",
            "titleSlug": "implement-change-key-in-bst",
            "content": "<p><span style=\"font-size: 20px;\">Given a Binary Search Tree ,change old key value present in the tree to the given new key value.<br /><strong>Example</strong> 1:</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: Root of below tree\n\\t\\t  50\n\\t     /     \\\n\\t    30\\t70\n\\t   /  \\    /  \\\n\\t 20   40  60   80 \n     Old key value:  40\n     New key value:  10\n\n<strong>Output</strong>: BST should be modified to following\n\\t\\t  50\n\\t     /     \\\n\\t    30\\t70\n\\t   /\\t /  \\\n\\t 20\\t60   80  \n\\t /\n     10</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />The task is to complete the function <strong>changeKey()</strong> which takes root, oldVal and newVal as the input argument, and returns the root of tree after changing the old value with new value in BST. The driver code will print the inorder traversal of the updated tree in output itself. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(Height of tree)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span><br /><br /><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br />1&lt;=Number of Nodes in tree&lt;=500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Step 1: Delete the node with old value.<br />\nStep 2: Insert a new node with given new value.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "struct node * minValueNode(struct node* node)\n{\n\tstruct node* current = node;\n\twhile (current->left != NULL)\n\t\tcurrent = current->left;\n\treturn current;\n}\nstruct node* insert(struct node* root, int key)\n{\n\n\tif (root == NULL) return (new node(key));\n\tif (key < root->key)\n\t\troot->left = insert(root->left, key);\n\telse\n\t\troot->right = insert(root->right, key);\n\treturn root;\n}\n\nstruct node* deleteNode(struct node* root, int key)\n{\n\n\tif (root == NULL) return root;\n\tif (key < root->key)\n\t\troot->left = deleteNode(root->left, key);\n\telse if (key > root->key)\n\t\troot->right = deleteNode(root->right, key);\n\telse\n\t{\n\t\tif (root->left == NULL)\n\t\t{\n\t\t\tstruct node *temp = root->right;\n\t\t\tfree(root);\n\t\t\treturn temp;\n\t\t}\n\t\telse if (root->right == NULL)\n\t\t{\n\t\t\tstruct node *temp = root->left;\n\t\t\tfree(root);\n\t\t\treturn temp;\n\t\t}\n\t\tstruct node* temp = minValueNode(root->right);\n\t\troot->key = temp->key;\n\t\troot->right = deleteNode(root->right, temp->key);\n\t}\n\treturn root;\n}\n\n/*\nStructure of the binary Search Tree is as\nstruct node\n{\n\tint key;\n\tstruct node *left, *right;\n};\n*/\n// your task is to complete the Function\n// Function is used to change a key value in the given BST\n// Note: Function should return root node to the new modified BST\nstruct node *changeKey(struct node *root, int oldVal, int newVal)\n{\n\troot = deleteNode(root, oldVal);\n\troot = insert(root, newVal);\n    \n\treturn root;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class GfG\n{\n\n public static Node insert(Node node, int data)\n    {\n     if (node == null)\n     {\n            return (new Node(data));\n    } else \n        {\n             \n            /* 2. Otherwise, recur down the tree */\n            if (data <= node.data)\n            {\n                node.left = insert(node.left, data);\n            } else \n            {\n                node.right = insert(node.right, data);\n            }\n \n            /* return the (unchanged) node pointer */\n            return node;\n        }\n    \n    }\n    \n    \n    public static  Node minValueNode(Node node)\n{\n    Node current = node;\n \n    /* loop down to find the leftmost leaf */\n    while (current.left != null)\n        current = current.left;\n \n    return current;\n}\n    \n    \n    \n    public static Node deleteNode(Node root, int key)\n    {\n         if (root == null) \n         return root;\n         \n         \n          if (key < root.data)\n        root.left = deleteNode(root.left, key);\n        \n        else if (key > root.data)\n        root.right = deleteNode(root.right, key);\n        \n         else\n    {\n        // node with only one child or no child\n        if (root.left == null)\n        {\n            Node temp = root.right;\n            System.gc();\n            return temp;\n        }\n        else if (root.right == null)\n        {\n            Node temp = root.left;\n            System.gc();\n            return temp;\n        }\n \n        // node with two children: Get the inorder successor (smallest\n        // in the right subtree)\n        Node temp = minValueNode(root.right);\n \n        // Copy the inorder successor's content to this node\n        root.data = temp.data;\n \n        // Delete the inorder successor\n        root.right = deleteNode(root.right, temp.data);\n    }\n\n    return root;\n  \n    }\n    \n    \n    \n    \n    \n    public static Node changeKey(Node root, int old_key, int new_key)\n    {\n       \n          \n        root = deleteNode(root, old_key);\n        \n        root = insert(root, new_key);\n        \n        return root;\n        \n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}