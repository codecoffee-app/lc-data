{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878537,
            "title": "Implement Lower Bound",
            "titleSlug": "implement-lower-bound",
            "content": "<p dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><span ><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Given a sorted array&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">arr[]&nbsp;</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">and a number&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">target</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">, the task is to find the&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">lower bound</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;of the&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">target</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;in this given array. The&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">lower bound</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;of a number is defined as the smallest&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">index</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;in the sorted array where the element is&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">greater than or equal to</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;the given number.</span></span></p>\n<p><span ><strong style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Note:</strong><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;If all the elements in the given array are smaller than the&nbsp;</span><strong style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">target</strong><span style=\"color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">, the lower bound will be the length of the array</span>.&nbsp;</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong> arr[] = [2, 3, 7, 10, 11, 11, 25], target = 9\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 3 is the smallest index in arr[] where element (arr[3] = 10) is greater than or equal to 9.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [2, 3, 7, 10, 11, 11, 25], target = 11\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 4 is the smallest index in arr[] where element (arr[4] = 11) is greater than or equal to 11.<br /></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [2, 3, 7, 10, 11, 11, 25], target = 100\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> As no element in arr[] is greater than 100, return the length of array.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup><br />1 &le; target &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr[]` and a target value `target`, find the lower bound of the target in the array. The lower bound is defined as the smallest index where the element in `arr[]` is greater than or equal to the `target`. If no such element exists (i.e., all elements are smaller than the target), return the length of the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6",
                    "1 <= target <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [2, 3, 7, 10, 11, 11, 25], target = 9",
                        "output": "3",
                        "explanation": "The smallest index where an element is greater than or equal to 9 is index 3 (arr[3] = 10)."
                    },
                    {
                        "input": "arr[] = [2, 3, 7, 10, 11, 11, 25], target = 11",
                        "output": "4",
                        "explanation": "The smallest index where an element is greater than or equal to 11 is index 4 (arr[4] = 11)."
                    },
                    {
                        "input": "arr[] = [2, 3, 7, 10, 11, 11, 25], target = 100",
                        "output": "7",
                        "explanation": "Since no element in the array is greater than or equal to 100, the lower bound is the length of the array, which is 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 16px;\">Try to think of the algorithm that makes use of the sorted property of the array.</span></p>",
            "<p><span >Apply binary search.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n// User function Template for C++\nclass Solution {\n  public:\n    int lowerBound(vector<int>& arr, int target) {\n        // code here\n        int lo = 0, hi = arr.size() - 1;\n        int res = arr.size();\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n\n            // If arr[mid] >= target, then mid can be the\n            // lower bound, so update res to mid and\n            // search in left half, i.e. [lo...mid-1]\n            if (arr[mid] >= target) {\n                res = mid;\n                hi = mid - 1;\n            }\n\n            // If arr[mid] < target, then lower bound\n            // cannot lie in the range [lo...mid] so\n            // search in right half, i.e. [mid+1...hi]\n            else {\n                lo = mid + 1;\n            }\n        }\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    int lowerBound(int[] arr, int target) {\n        int lo = 0, hi = arr.length - 1;\n        int res = arr.length;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n\n            // If arr[mid] >= target, then mid can be the\n            // lower bound, so update res to mid and\n            // search in left half, i.e. [lo...mid-1]\n            if (arr[mid] >= target) {\n                res = mid;\n                hi = mid - 1;\n            }\n\n            // If arr[mid] < target, then lower bound\n            // cannot lie in the range [lo...mid] so\n            // search in right half, i.e. [mid+1...hi]\n            else {\n                lo = mid + 1;\n            }\n        }\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def lowerBound(self, arr, target):\n        lo = 0\n        hi = len(arr) - 1\n        res = len(arr)\n\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n\n            # If arr[mid] >= target, then mid can be the\n            # lower bound, so update res to mid and\n            # search in left half, i.e. [lo...mid-1]\n            if arr[mid] >= target:\n                res = mid\n                hi = mid - 1\n\n            # If arr[mid] < target, then lower bound\n            # cannot lie in the range [lo...mid] so\n            # search in right half, i.e. [mid+1...hi]\n            else:\n                lo = mid + 1\n\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} target\n * @returns {number}\n */\n\nclass Solution {\n    lowerBound(arr, target) {\n        let lo = 0, hi = arr.length - 1;\n        let res = arr.length;\n\n        while (lo <= hi) {\n            let mid = lo + Math.floor((hi - lo) / 2);\n\n            // If arr[mid] >= target, then mid can be the\n            // lower bound, so update res to mid and\n            // search in left half, i.e. [lo...mid-1]\n            if (arr[mid] >= target) {\n                res = mid;\n                hi = mid - 1;\n            }\n\n            // If arr[mid] < target, then lower bound\n            // cannot lie in the range [lo...mid] so\n            // search in right half, i.e. [mid+1...hi]\n            else {\n                lo = mid + 1;\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}