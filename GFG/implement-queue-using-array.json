{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700211,
            "title": "Queue Using Array",
            "titleSlug": "implement-queue-using-array",
            "content": "<p><span style=\"font-size: 18px;\">Implement a Queue using an Array. Queries in the Queue are of the following type:<br /><strong>(i)</strong>&nbsp;1 x&nbsp; &nbsp;(a query of this type means&nbsp;&nbsp;pushing&nbsp;<strong>'x'</strong>&nbsp;into the queue)<br /><strong>(ii)</strong> 2 &nbsp; &nbsp; (a query of this type means to pop an element from the queue and print the popped element. If the queue is empty then return -1)</span></p>\n<p><span style=\"font-size: 18px;\">We just have to implement the functions <strong>push </strong>and <strong>pop </strong>and the driver code will handle the output. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Queries = 1 2 1 3 2 1 4 2\n<strong>Output: </strong>2&nbsp;3<strong>\nExplanation: </strong>For query 1 2 the queue will be {2} 1 3 the queue will be {2 3} 2 &nbsp; poped element will be 2 the queue will be {3} 1 4 the queue will be {3 4} 2 popped element will be 3 </span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Queries = 1 3 2 2 1 4 &nbsp; \n<strong>Output: </strong>3 -1<strong>\nExplanation: </strong>For query 1 3 the queue will be {3} 2 popped element will be 3 the queue will be empty 2 there is no element in the queue and hence -1 1 4 the queue will be {4}. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Queries = 1 3 2 2 1 3 &nbsp; \n<strong>Output: </strong>3 -1<strong>\nExplanation: </strong><span >For query 1 3 the queue will be {3} 2 popped element will be 3 the queue will be empty 2 there is no element in the queue and hence -1 1 3 the queue will be {3} a</span></span><span >nd hence -1 1 3 the queue will be {3}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; number of query&le; 10<sup>5</sup><br />0 &le; x<strong> </strong>&le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a Queue data structure using an Array.  You are given a series of queries. Each query is one of the following two types:\n\n*   **(i)** `1 x`:  Push the integer `x` into the queue.\n*   **(ii)** `2`: Pop an element from the queue and print the popped element. If the queue is empty, return -1.",
                "constraints": [
                    "1 <= number of queries <= 10^5",
                    "0 <= x <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "1 2 1 3 2 1 4 2",
                        "output": "2 3",
                        "explanation": "Initially, the queue is empty.  \n- '1 2': Push 2 into the queue. Queue: {2}\n- '1 3': Push 3 into the queue. Queue: {2, 3}\n- '2': Pop the front element (2) and print it. Queue: {3}\n- '1 4': Push 4 into the queue. Queue: {3, 4}\n- '2': Pop the front element (3) and print it. Queue: {4}"
                    },
                    {
                        "input": "1 3 2 2 1 4",
                        "output": "3 -1",
                        "explanation": "Initially, the queue is empty.\n- '1 3': Push 3 into the queue. Queue: {3}\n- '2': Pop the front element (3) and print it. Queue: {}\n- '2': The queue is empty, so return -1.\n- '1 4': Push 4 into the queue. Queue: {4}"
                    },
                    {
                        "input": "1 3 2 2 1 3",
                        "output": "3 -1",
                        "explanation": "Initially, the queue is empty.\n- '1 3': Push 3 into the queue. Queue: {3}\n- '2': Pop the front element (3) and print it. Queue: {}\n- '2': The queue is empty, so return -1.\n- '1 3': Push 3 into the queue. Queue: {3}"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a circular approach with two pointers, <code>front</code> and <code>rear</code>, to manage the queue operations efficiently.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "goldman-sachs"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "/*\nThe structure of the class is\nclass MyQueue {\nprivate:\n    int arr[100005];\n    int front;\n    int rear;\n\npublic :\n    MyQueue(){front=0;rear=0;}\n    void push(int);\n    int pop();\n};\n */\n\n// Function to push an element x in a queue.\nvoid MyQueue ::push(int x) {\n    // inserting x in the queue at rear.\n    arr[rear++] = x;\n}\n\n// Function to pop an element from queue and return that element.\nint MyQueue ::pop() {\n    // if front is equal to rear, queue is empty.\n    if (front == rear)\n        return -1;\n\n    // else we return the element at front.\n    return arr[front++];\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass MyQueue {\n\n    int front;\n    int rear;\n\tint arr[] = new int[100005];\n\n    MyQueue()\n\t{\n\t\tfront=0;\n\t\trear=0;\n\t}\n\t\n    //Function to push an element x in a queue.\n\tvoid push(int a)\n\t{\n\t    //inserting x in the queue at rear.\n\t\tarr[rear++]=a;\n\t} \n\n    //Function to pop an element from queue and return that element.\n\tint pop()\n\t{\n\t    //if front is equal to rear, queue is empty.\n\t\tif (front==rear)\n\t\t\t   return -1;\n\t\t//else we return the element at front.\n\t\treturn arr[front++];\n\t} \n}\n\n\n\n\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass MyQueue:\n\n    #constructor\n    def __init__(self):\n        self.queue = list()\n        self.maxSize = 100005\n        self.head = 0\n        self.tail = 0\n\n    #Function to push an element x in a queue.\n    def push(self,data):\n        \n        #checking if the queue is full and returning proper message.\n        if self.size() >= self.maxSize:\n            return (\"Queue Full\")\n            \n        #inserting data in the queue at tail.\n        self.queue.append(data)\n        self.tail += 1\n        return      \n\n    #Function to pop an element from queue and return that element. \n    def pop(self):\n        \n        #checking if the queue is empty and returning -1 if it is already empty.\n        if self.size() <= 0:\n            self.resetQueue()\n            return -1 \n            \n        data = self.queue[self.head]\n        self.head+=1\n        \n        #else we return the element at front.\n        return data\n        \n        \n                \n\n    def size(self):\n        return self.tail - self.head\n    \n    def resetQueue(self):\n        self.tail = 0\n        self.head = 0\n        self.queue = list()",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass MyQueue {\n    \n    constructor(){\n\t\tthis.front = 0;\n\t\tthis.rear = 0;\n\t\tthis.arr = new Array(100005);\n\t}\n\t\n\t\n\t/**\n     * @param {number} x\n    */\n    \n\t//Function to push an element x in a queue.\n\tpush(x)\n\t{\n\t    //inserting x in the queue at rear.\n\t    this.arr[this.rear++] = x;\n\t} \n\t\n\t/**\n     * @returns {number}\n    */\n    \n    //Function to pop an element from queue and return that element.\n\tpop()\n\t{\n\t    //if front is equal to rear, queue is empty.\n\t\tif(this.front == this.rear)\n            return -1;\n            \n        //else we return the element at front.\n        return this.arr[this.front++];\n\t} \n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}