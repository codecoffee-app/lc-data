{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700210,
            "title": "Queue using Linked List",
            "titleSlug": "implement-queue-using-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Implement a Queue using Linked List.&nbsp;<br />A Query&nbsp;<strong>Q</strong>&nbsp;is of 2 Types<br /><strong>(i)</strong>&nbsp;1 x&nbsp; &nbsp;(a query of this type means&nbsp;&nbsp;pushing&nbsp;<strong>'x'</strong>&nbsp;into the queue)<br /><strong>(ii)</strong>&nbsp;2 &nbsp; &nbsp; (a query of this type means to pop an element from the queue and print the poped element)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Q = 5, Queries = 1 2 1 3 2 1 4 2<br /><strong>Output: </strong>2 3&nbsp;<strong><br />Explanation: <br /></strong>[1,2] queue will be 2<br />[1,3] queue will be 2,3<br />[2] poped element will be 2 the queue will be 3<br />[1, 4] queue will be 3, 4<br />[2] poped element will be 3 </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Q = 4, Queries = 1 2 2 2 1 3\n<strong>Output: </strong>2 -1<strong>\nExplanation:</strong>\n[1, 2] queue will be 2\n[2] &nbsp;poped element will be 2 then\n&nbsp;   the queue will be empty.&nbsp;\n[2] &nbsp;the queue is empty and hence -1\n[1, 3] the queue will be 3</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;=<strong> </strong>Q &lt;= 100<br />1 &lt;= x &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a Queue data structure using a Linked List. You will receive a series of queries. Each query is one of two types:\n\n*   **Type 1:** `1 x` - Push the integer `x` into the queue.\n*   **Type 2:** `2` - Pop an element from the queue. If the queue is empty, print `-1`. Otherwise, print the popped element.",
                "constraints": [
                    "1 <= Q <= 100 (where Q is the number of queries)",
                    "1 <= x <= 100 (where x is the integer to be enqueued)"
                ],
                "testcases": [
                    {
                        "input": "Q = 5, Queries = 1 2 1 3 2 1 4 2",
                        "output": "2 3",
                        "explanation": "Initially, the queue is empty.\n1.  `1 2`: Enqueue 2. Queue: [2]\n2.  `1 3`: Enqueue 3. Queue: [2, 3]\n3.  `2`: Dequeue. Print 2. Queue: [3]\n4.  `1 4`: Enqueue 4. Queue: [3, 4]\n5.  `2`: Dequeue. Print 3. Queue: [4]"
                    },
                    {
                        "input": "Q = 4, Queries = 1 2 2 2 1 3",
                        "output": "2 -1",
                        "explanation": "Initially, the queue is empty.\n1. `1 2`: Enqueue 2. Queue: [2]\n2. `2`: Dequeue. Print 2. Queue: [] (Empty)\n3. `2`: Dequeue. Queue is empty. Print -1.\n4. `1 3`: Enqueue 3. Queue: [3]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\r\n\r\n// The function to add a key k to q\r\nvoid push(struct Queue* q, int k)\r\n{\r\n\t// Create a new LL node\r\n\tstruct QNode* temp = newNode(k);\r\n\r\n\t// If queue is empty, then new node is front and rear both\r\n\tif (q->rear == NULL) {\r\n\t\tq->front = q->rear = temp;\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Add the new node at the end of queue and change rear\r\n\tq->rear->next = temp;\r\n\tq->rear = temp;\r\n}\r\n\r\n// Function to remove a key from given queue q\r\nvoid pop(struct Queue* q)\r\n{\r\n\t// If queue is empty, return NULL.\r\n\tif (q->front == NULL)\r\n\t\treturn;\r\n\r\n\t// Store previous front and move front one node ahead\r\n\tstruct QNode* temp = q->front;\r\n\r\n\tq->front = q->front->next;\r\n\r\n\t// If front becomes NULL, then change rear also as NULL\r\n\tif (q->front == NULL)\r\n\t\tq->rear = NULL;\r\n\r\n\tfree(temp);\r\n}\r\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "/* Structure of a node in Queue\r\nstruct QueueNode\r\n{\r\n    int data;\r\n    QueueNode *next;\r\n    QueueNode(int a)\r\n    {\r\n        data = a;\r\n        next = NULL;\r\n    }\r\n};\r\n\r\nAnd structure of MyQueue\r\nstruct MyQueue {\r\n    QueueNode *front;\r\n    QueueNode *rear;\r\n    void push(int);\r\n    int pop();\r\n    MyQueue() {front = rear = NULL;}\r\n}; */\r\n\r\n//Function to push an element into the queue.\r\nvoid MyQueue:: push(int a)\r\n{\r\n    //if queue is empty, then new node is front and rear both.\r\n    if (rear==NULL)\r\n    {\r\n        rear= new QueueNode(a);\r\n        front = rear;\r\n    }\r\n   //adding the new node at the end of queue and changing rear.\r\n   else\r\n   {\r\n        QueueNode *temp = new QueueNode(a);\r\n        rear->next =temp;\r\n        rear = temp;\r\n    }\r\n}\r\n\r\n//Function to pop front element from the queue.\r\nint MyQueue :: pop()\r\n{\r\n       \r\n    QueueNode *temp;\r\n    temp=front;\r\n    \r\n    //if queue is empty, we return NULL.\r\n    if(temp ==NULL)\r\n        return -1;\r\n\r\n    //if more than one node is present, we move temp one node ahead and \r\n    //delete front. we also update front as new temp.\r\n    if(temp->next !=NULL)\r\n    {\r\n        temp=temp->next;\r\n        int k = front->data;\r\n        delete(front);\r\n        front = temp;\r\n        //returning the popped element.\r\n        return k;\r\n    }\r\n    //else we delete front and make both rear and front as NULL.\r\n    else\r\n    {\r\n        int k=front->data;\r\n        delete(front);\r\n        front=rear=NULL;\r\n        //returning the popped element.\r\n        return k;\r\n    }\r\n\r\n\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class MyQueue\r\n{\r\n    QueueNode front;\r\n\tQueueNode rear;\r\n\t\r\n\t//Function to push an element into the queue.\r\n\tvoid push(int a)\r\n\t{\r\n\t    //if queue is empty, then new node is front and rear both.\r\n\t\tif (rear==null)\r\n\t\t{\r\n\t\t\trear = new QueueNode(a);\r\n\t\t\tfront = rear;\r\n\t\t}\r\n\t\t//adding the new node at the end of queue and changing rear.\r\n\t\telse\r\n\t\t{\r\n\t\t\tQueueNode temp = new QueueNode(a);\r\n\t\t\trear.next=temp;\r\n\t\t\trear=temp;\r\n\t\t}\r\n\t}\r\n\t//Function to pop front element from the queue.\r\n\tint pop()\r\n\t{\r\n\t\tQueueNode temp = front;\r\n\t\t\r\n\t\t//if queue is empty, we return NULL.\r\n\t\tif(temp==null)\r\n\t\t\treturn -1;\r\n\t\t\r\n\t\t//if more than one node is present, we move temp one node ahead and \r\n        //delete front. we also update front as new temp.\r\n\t\tif(temp.next != null)\r\n\t\t{\r\n\t\t\ttemp = temp.next;\r\n\t\t\tint k = front.data;\r\n\t\t\tfront = temp;\r\n\t\t\t//returning the popped element.\r\n\t\t\treturn k;\r\n\t\t}\r\n\t\t//else we delete front and make both rear and front as NULL.\r\n\t\telse\r\n\t\t{\r\n\t\t\tint k = front.data;\r\n\t\t\tfront = null;\r\n\t\t\trear = null;\r\n\t\t\t//returning the popped element.\r\n\t\t\treturn k;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Python3 program to demonstrate linked list \r\n# based implementation of queue \r\n  \r\n# A linked list (LL) node \r\n# to store a queue entry \r\nclass Node: \r\n      \r\n    def __init__(self, data): \r\n        self.data = data \r\n        self.next = None\r\n  \r\n\r\nclass MyQueue: \r\n      \r\n    def __init__(self): \r\n        self.front = self.rear = None\r\n  \r\n    def isEmpty(self): \r\n        return self.front == None\r\n      \r\n    #Function to push an element into the queue.\r\n    def push(self, item): \r\n        temp = Node(item) \r\n        \r\n        #if queue is empty, then new node is front and rear both.\r\n        if self.rear == None: \r\n            self.front = self.rear = temp \r\n            return\r\n        \r\n        #adding the new node at the end of queue and changing rear.\r\n        self.rear.next = temp \r\n        self.rear = temp \r\n  \r\n    #Function to pop front element from the queue. \r\n    def pop(self): \r\n         \r\n        #if queue is empty, we return -1. \r\n        if self.isEmpty(): \r\n            return -1\r\n            \r\n        #we delete front and update front as new temp(temp.next).\r\n        temp = self.front \r\n        self.front = temp.next\r\n  \r\n        #if front is NULL, we also make rear as NULL.\r\n        if(self.front == None): \r\n            self.rear = None\r\n            \r\n        #returning the popped element.\r\n        return str(temp.data) \r\n        \r\n        \r\n        ",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\npublic class MyQueue\n{\n    public QueueNode front;\n    public QueueNode rear;\n\n    public void push(int x)\n    {\n        QueueNode temp = new QueueNode(x);\n        if (rear == null)\n        {\n            rear = temp;\n            front = rear;\n        }\n        else\n        {\n            rear.next = temp;\n            rear = temp;\n        }\n    }\n\n    public int pop()\n    {\n        if (front == null)\n            return -1;\n        \n        int k = front.data;\n        front = front.next;\n\n        if (front == null)\n            rear = null;\n\n        return k;\n    }\n\n}\n\npublic class QueueNode\n{\n    public int data;\n    public QueueNode next;\n\n    public QueueNode(int a)\n    {\n        data = a;\n        next = null;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\nclass MyQueue{\r\n    \r\n    constructor(){\r\n        this.front = null;  // QueueNode\r\n        this.rear = null;   // QueueNode\r\n    }\r\n    \r\n    /**\r\n     * @param {number} x\r\n    */\r\n    //Function to push an element into the queue.\r\n    push(x){\r\n        \r\n        //if queue is empty, then new node is front and rear both.\r\n        if (this.rear == null) {\r\n           this.rear = new QueueNode(x);\r\n           this.front = this.rear;\r\n        }\r\n        //adding the new node at the end of queue and changing rear.\r\n        else{\r\n            let temp = new QueueNode(x);\r\n            this.rear.next = temp;\r\n            this.rear = temp;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @returns {number}\r\n    */\r\n    //Function to pop front element from the queue.\r\n    pop(){\r\n        let temp = null;\r\n        temp = this.front;\r\n        \r\n        //if queue is empty, we return NULL.\r\n        if(temp === null)\r\n            return -1;\r\n    \r\n        //if more than one node is present, we move temp one node ahead and \r\n        //delete front. we also update front as new temp.\r\n        if(temp.next !== null)\r\n        {\r\n            temp = temp.next;\r\n            let k = this.front.data;\r\n            this.front = null\r\n            this.front = temp;\r\n            //returning the popped element.\r\n            return k;\r\n        }\r\n        //else we delete front and make both rear and front as NULL.\r\n        else\r\n        {\r\n            let k=this.front.data;\r\n            this.front = this.rear = null;\r\n            //returning the popped element.\r\n            return k;\r\n        }\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}