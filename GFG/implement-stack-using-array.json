{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700208,
            "title": "Implement stack using array",
            "titleSlug": "implement-stack-using-array",
            "content": "<p><span style=\"font-size: 18px;\">Write a program to implement a Stack&nbsp;using Array. Your task is to use the class as shown in the comments in the code editor&nbsp;and complete&nbsp;the functions push() and pop() to implement a stack.&nbsp;</span><span style=\"font-size: 18px;\">The push() method&nbsp;takes one argument, an integer&nbsp;</span><strong style=\"font-size: 18px;\">'x'</strong><span style=\"font-size: 18px;\">&nbsp;to be pushed into the stack and&nbsp;</span><strong style=\"font-size: 18px;\">pop()</strong><span style=\"font-size: 18px;\">&nbsp;which returns an integer present at the top and popped out from the stack. If the stack is empty then return&nbsp;</span><strong style=\"font-size: 18px;\">-1</strong><span style=\"font-size: 18px;\"> from the pop() method.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note:&nbsp;</span></strong><span style=\"font-size: 18px;\">The input is given in form of queries. Since there are two operations push() and pop(), there is two types of queries as described below:<br /></span><span style=\"font-size: 18px;\">(i) 1 x&nbsp; &nbsp;(a query of this type means&nbsp; pushing 'x' into the stack)<br /></span><span style=\"font-size: 18px;\">(ii) 2&nbsp; &nbsp; &nbsp;(a query of this type means to pop an element from the stack and print the popped element)<br /></span><span style=\"font-size: 18px;\">Input contains separated by space and as described above.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples </strong>:</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: 1 2 1 3 2 1 4 2 \n<strong>Output</strong>: 3, 4\n<strong>Explanation</strong>: \npush(2)    the stack will be {2}\npush(3)    the stack will be {2 3}\npop()\\tpoped element will be 3,\n&nbsp;\\t    the stack will be {2}\npush(4)    the stack will be {2 4}\npop()\\tpoped element will be 4</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: 2 1 4 1 5 2\n<strong>Output</strong>: -1, 5</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>: O(1)</span><br /><span style=\"font-size: 18px;\"><strong>Expected Space Complexity:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= numbers of calls made to push, pop &lt;= 100<br />1 &lt;= x &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "factset",
            "visa",
            "goldman-sachs",
            "qualcomm",
            "kritikal-solutions"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\nvoid push(struct MyStack* stack, int a) {\n    // If the stack is full, we do nothing (as there is no overflow handling in this\n    // problem)\n    if (stack->top == MAX - 1) {\n        return;\n    }\n\n    // Increment the top pointer and add the integer\n    stack->arr[++(stack->top)] = a;\n}\n\n// Function to pop an item from the top of the stack\nint pop(struct MyStack* stack) {\n    // If the stack is empty, return -1\n    if (stack->top == -1) {\n        return -1;\n    }\n\n    // Return the top element and decrease the top pointer\n    return stack->arr[(stack->top)--];\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "// Function to push an integer into the stack.\nvoid MyStack ::push(int a) {\n    // increasing the top pointer and pushing the integer at that position.\n    top++;\n    arr[top] = a;\n}\n\n// Function to remove an item from top of the stack.\nint MyStack ::pop() {\n\n    // if stack is empty, we return -1 else we return the top element.\n    if (top == -1)\n        return -1;\n    int x = arr[top];\n    top--;\n\n    return x;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class MyStack {\n    private int[] arr;\n    private int top;\n\n    public MyStack() {\n        arr = new int[1000];\n        top = -1;\n    }\n\n    public void push(int a) {\n        top++;\n        arr[top] = a;\n    }\n\n    public int pop() {\n        if (top == -1) return -1;\n        int x = arr[top];\n        top--;\n        return x;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass MyStack:\n\n    def __init__(self):\n        self.arr = []\n\n    #Function to push an integer into the stack.\n    def push(self, data):\n        self.arr.append(data)\n\n    #Function to remove an item from top of the stack.\n    def pop(self):\n\n        #if stack is empty, we return -1 else we return the top element.\n        if len(self.arr) == 0:\n            return -1\n        return self.arr.pop()\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} x\n */\n\n// Function to push an integer into the stack.\nMyStack.prototype.push =\n    function(x) {\n    // increasing the top pointer and pushing the integer at that position.\n    this.top++;\n    this.arr[this.top] = x;\n}\n\n    /**\n     * @returns {number}\n     */\n\n    // Function to remove an item from top of the stack.\n    MyStack.prototype.pop = function() {\n    // if stack is empty, we return -1 else we return the top element.\n    if (this.top == -1) return -1;\n    let x = this.arr[this.top];\n    this.top--;\n    return x;\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}