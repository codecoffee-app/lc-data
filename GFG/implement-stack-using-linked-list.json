{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700207,
            "title": "Stack using Linked List",
            "titleSlug": "implement-stack-using-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Let's give it a try! You have a linked list and must implement the functionalities push and pop of stack using this given linked list. Your task is to use the class as shown in the comments in the code editor and complete the functions push() and pop() to implement a stack.&nbsp;<br /></span><span style=\"font-size: 18px;\">The push() method takes one argument, an integer&nbsp;</span><strong style=\"font-size: 18px;\">'x'</strong><span style=\"font-size: 18px;\">&nbsp;to be pushed into the stack and&nbsp;</span><strong style=\"font-size: 18px;\">pop()</strong><span style=\"font-size: 18px;\">&nbsp;which returns an integer present at the top and popped out from the stack. If the stack is empty then return&nbsp;</span><strong style=\"font-size: 18px;\">-1</strong><span style=\"font-size: 18px;\">&nbsp;from the pop() method.<br /></span><strong><span style=\"font-size: 18px;\">Note:&nbsp;</span></strong><span style=\"font-size: 18px;\">The input is given in the form of queries. Since there are two operations push() and pop(), there is two types of queries as described below:<br /></span><span style=\"font-size: 18px;\">(i) 1&nbsp;&nbsp; (a query of this type takes <strong>x</strong> as another parameter and pushes it into the stack)<br /></span><span style=\"font-size: 18px;\">(ii) 2&nbsp; (a query of this type means to pop an element from the stack and return the popped element)<br /></span><span style=\"font-size: 18px;\">Input is separated by space and as described above.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples </strong>:</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: [[1,2], [1,3], [2], [1,4], [2]]\n<strong>Output</strong>: [3, 4]\n<strong>Explanation</strong>: \npush(2)  : the stack will be {2}\npush(3)  : the stack will be {2 3}\npop()    : poped element will be 3,the stack will be {2}\npush(4)  : the stack will be {2 4}\npop()    : poped element will be 4</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: [[2], [1,4], [1,5], [2]]\n<strong>Output</strong>: [-1, 4]</span><br /><span style=\"font-size: 18px;\"><strong>Explanation</strong>: \npop()    : the stack is empty so its -1.\npush(4)  : the stack will be {4}\npush(5)  : the stack will be {4 5}\npop()    : poped element will be 5, the stack will be {4}</span></pre>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\"><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>: O(1)</span><br /><span style=\"font-size: 18px;\"><strong>Expected Auxillary Space:</strong>&nbsp;O(1)</span></p>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= numbers of calls made to push, pop &lt;= 100<br />1 &lt;= x &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Maintain a reference to the head node and perform push and pop operations by adding and removing nodes at the head</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft",
            "samsung",
            "factset",
            "sap-labs",
            "codenation"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\nvoid push(struct StackNode** top, int x) {\n    struct StackNode* newNode = (struct StackNode*)malloc(sizeof(struct StackNode));\n    if (!newNode) {\n        printf(\"Memory allocation error\\n\");\n        return;\n    }\n    newNode->data = x;\n    newNode->next = *top;\n    *top = newNode; // Update the top pointer to the new node\n}\n\n// Function to pop an item from the top of the stack\nint pop(struct StackNode** top) {\n    if (*top == NULL) {\n        return -1; // Stack is empty\n    }\n    struct StackNode* temp = *top;\n    int poppedData = temp->data;\n    *top = (*top)->next; // Update the top pointer to the next node\n    free(temp);          // Free the popped node\n    return poppedData;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class MyStack {\n  private:\n    StackNode *top;\n\n  public:\n    void push(int x) {\n        if (top == NULL) {\n            top = new StackNode(x);\n        } else {\n            // creating a new temp node in the stack\n            StackNode *temp = new StackNode(x);\n            // assigning link part of new node to top and making it top node.\n            temp->next = top;\n            top = temp;\n        }\n    }\n\n    int pop() {\n        StackNode *temp = top;\n\n        // if node at temp pointer is null, the stack is empty so we return -1.\n        if (temp == NULL) {\n            return -1;\n        } else {\n            // storing the data at top node and deleting that node.\n            temp = temp->next;\n            int r = top->data;\n            delete (top);\n            top = temp;\n\n            // returning the data.\n            return r;\n        }\n    }\n\n    MyStack() { top = NULL; }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class MyStack {\n    StackNode top;\n\n    // Function to push an integer into the stack.\n    void push(int a) {\n        if (top == null) {\n            top = new StackNode(a);\n        } else {\n            // creating a new temp node in the stack\n            StackNode temp = new StackNode(a);\n            // assigning link part of new node to top and making it top node.\n            temp.next = top;\n            top = temp;\n        }\n    }\n\n    // Function to remove an item from top of the stack.\n    int pop() {\n        StackNode temp = top;\n\n        // if node at temp pointer is null, the stack is empty so we return -1.\n        if (temp == null) {\n            return -1;\n        } else {\n            // storing the data at top node and deleting that node.\n            temp = temp.next;\n            int r = top.data;\n            top = temp;\n\n            // returning the data.\n            return r;\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Class to represent a node\n\n\nclass StackNode:\n\n    # Constructor to initialize a node\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\nclass MyStack:\n\n    # Constructor to initialize the root of linked list\n    def __init__(self):\n        self.root = None\n\n    def isEmpty(self):\n        return self.root is None\n\n    #Function to push an integer into the stack.\n    def push(self, data):\n\n        #creating a new temp node in the stack\n        newNode = StackNode(data)\n        #assigning link part of new node to top and making it top node.\n        newNode.next = self.root\n        self.root = newNode\n        return\n\n    #Function to remove an item from top of the stack.\n    def pop(self):\n\n        #if node at temp pointer is null, the stack is empty so we return -1.\n        if (self.isEmpty()):\n            return -1\n\n        #storing the data at top node and deleting that node.\n        temp = self.root\n        self.root = self.root.next\n        popped = temp.data\n\n        #returning the data.\n        return popped\n\n    def peek(self):\n        if self.isEmpty():\n            return -1\n        return self.root.data\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass MyStack {\n    constructor() { this.top = null; }\n\n    /**\n     * @param {number} a\n     */\n\n    // Function to push an integer into the stack.\n    push(a) {\n        if (this.top === null) {\n            this.top = new StackNode(a);\n        } else {\n            // creating a new temp node in the stack\n            let temp = new StackNode(a);\n            // assigning link part of new node to top and making it top node.\n            temp.next = this.top;\n            this.top = temp;\n        }\n    }\n\n    /**\n     */\n\n    // Function to remove an item from top of the stack.\n    pop() {\n        let temp = this.top;\n\n        // if node at temp pointer is null, the stack is empty so we return -1.\n        if (temp === null) {\n            return -1;\n        } else {\n            // storing the data at top node and deleting that node.\n            temp = temp.next;\n            let r = this.top.data;\n            this.top = null;\n            this.top = temp;\n\n            // returning the data.\n            return r;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}