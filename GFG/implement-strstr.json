{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700320,
            "title": "First Occurence",
            "titleSlug": "implement-strstr",
            "content": "<p><span style=\"font-size: 18px;\">Find the first occurrence of the string<strong> pat </strong>in the string <strong>txt</strong>. The function returns an integer denoting the <strong>first occurrence </strong>of the string <strong>pat </strong>in <strong>txt </strong>(0-based indexing).</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note:&nbsp;</span></strong><span style=\"font-size: 18px;\">You are not allowed to use the inbuilt function. If there is no occurrence then return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>txt = \"GeeksForGeeks\", pat = \"Fr\"\n<strong>Output: </strong>-1<strong>\nExplanation: </strong>Fr is not present in the string GeeksForGeeks as substring.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>txt = \"GeeksForGeeks\", pat = \"For\"\n<strong>Output: </strong>5<strong>\nExplanation: </strong>For is present as substring in GeeksForGeeks from index 5 (0 based indexing).<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>txt = \"GeeksForGeeks\", pat = \"gr\"\n<strong>Output: </strong>-1<strong>\nExplanation: </strong>gr is not present in the string GeeksForGeeks as substring.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= txt.size(),pat.size() &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a function to find the first occurrence (0-based indexing) of a pattern string `pat` within a text string `txt`.  You are prohibited from using built-in string search functions. If the pattern is not found within the text, return -1.",
                "constraints": [
                    "1 <= txt.size() <= 1000",
                    "1 <= pat.size() <= 1000"
                ],
                "testcases": [
                    {
                        "input": "txt = \"GeeksForGeeks\", pat = \"Fr\"",
                        "output": "-1",
                        "explanation": "The pattern \"Fr\" is not a substring of \"GeeksForGeeks\"."
                    },
                    {
                        "input": "txt = \"GeeksForGeeks\", pat = \"For\"",
                        "output": "5",
                        "explanation": "The pattern \"For\" is found in \"GeeksForGeeks\" starting at index 5."
                    },
                    {
                        "input": "txt = \"GeeksForGeeks\", pat = \"gr\"",
                        "output": "-1",
                        "explanation": "The pattern \"gr\" is not a substring of \"GeeksForGeeks\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Pattern Searching",
                "slug": "pattern-searching"
            },
            {
                "name": "Design-Pattern",
                "slug": "design-pattern"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "implementation",
                "slug": "implementation"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "facebook",
            "qualcomm"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to locate the occurrence of the string x in the string s.\nclass Solution {\n  public:\n    int firstOccurence(string &txt, string &pat) {\n        if (pat[0] == '\\0')\n            return 0;\n\n        // iterating over given string s to search for string x.\n        for (int i = 0; txt[i] != '\\0'; i++) {\n            bool isMatched = true;\n\n            // checking for string x from current index i in the string s.\n            for (int j = 0; pat[j] != '\\0'; j++) {\n                if (txt[i + j] == 0)\n                    return -1;\n\n                // if any character doesn't match, we break the loop.\n                if (txt[i + j] != pat[j]) {\n                    isMatched = false;\n                    break;\n                }\n            }\n\n            // if string x is found, then we return the starting index.\n            if (isMatched)\n                return i;\n        }\n        // returning -1 if string x is not found.\n        return -1;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to locate the occurrence of the string x in the string s.\n    int firstOccurence(String txt, String pat) {\n        if (pat.length() == 0) {\n            return 0;\n        }\n\n        // iterating over given string s to search for string x.\n        for (int i = 0; i < txt.length(); i++) {\n            if (i + pat.length() > txt.length()) {\n                return -1;\n            }\n\n            // checking for string x from current index i in the string s.\n            for (int j = 0; j < pat.length(); j++) {\n                // if any character doesn't match, we break the loop.\n                // if string x is found, then we return the starting index.\n                if (txt.charAt(i + j) == pat.charAt(j)) {\n                    if (j == (pat.length() - 1)) {\n                        return i;\n                    }\n                } else\n                    break;\n            }\n        }\n        // returning -1 if string x is not found.\n        return -1;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Function to locate the occurrence of the string x in the string s.\nclass Solution:\n\n    def firstOccurence(self, txt, pat):\n        ind_s = 0\n\n        #iterating over given string s to search for string x.\n        while ind_s < len(txt):\n\n            if txt[ind_s] == pat[0]:\n                ind_p = 0\n                temp_s = ind_s\n\n                #checking for string x from current index i in the string s.\n                while temp_s < len(txt) and txt[temp_s] == pat[ind_p]:\n                    ind_p += 1\n                    temp_s += 1\n\n                    #if string x is found, then we return the starting index.\n                    if ind_p == len(pat):\n                        return ind_s\n            ind_s += 1\n\n        #returning -1 if string x is not found.\n        return -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {string} s\n * @param {string} x\n * @returns {number}\n */\n\nclass Solution {\n    // Function to locate the occurrence of the string x in the string s.\n    firstOccurence(txt, pat) {\n        if (pat.length == 0) return 0;\n\n        // iterating over given string s to search for string x.\n        for (let i = 0; i < txt.length; i++) {\n            let isMatched = true;\n\n            // checking for string x from current index i in the string s.\n            for (let j = 0; j < pat.length; j++) {\n                if (txt[i + j] == 0) return -1;\n\n                // if any character doesn't match, we break the loop.\n                if (txt[i + j] != pat[j]) {\n                    isMatched = false;\n                    break;\n                }\n            }\n            // if string x is found, then we return the starting index.\n            if (isMatched) return i;\n        }\n        // returning -1 if string x is not found.\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}