{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706047,
            "title": "Implement Union",
            "titleSlug": "implement-union--141631",
            "content": "<p><span style=\"font-family: comic sans ms,cursive;\"><span style=\"font-size: 18px;\">Unions can be useful in many situations where we want to use the same memory for two or more members.&nbsp;Now suppose we want to implement a binary tree data structure where each leaf node has a double data value, while each internal node has pointers to two children, but no data.</span></span></p>\n<p><span style=\"font-size: 18px;\">Your have&nbsp;to create Binary Tree&nbsp;<strong>struct NODE</strong>. In the Binary Tree&nbsp;you should have members with one as<strong> double data </strong>and the other as<strong> union </strong>containing left and right pointers.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a binary tree data structure using a struct named `NODE`. This binary tree should accommodate both leaf nodes, which store a double data value, and internal nodes, which contain pointers to their left and right children. The goal is to efficiently use memory by allowing leaf and internal nodes to share the same memory space.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "Create a tree with a single leaf node storing the value 5.0.",
                        "output": "A `NODE` struct representing a leaf node with data value 5.0 should be returned. The left and right pointers should be NULL.",
                        "explanation": "A basic test case to verify that the leaf node creation works correctly. The data member should hold the correct value and the pointer members should be null."
                    },
                    {
                        "input": "Create a tree with one internal node and two leaf nodes, storing the values 2.0 and 3.0 respectively.",
                        "output": "A `NODE` struct representing an internal node should be returned. The left child should be a leaf node with data 2.0, and the right child should be a leaf node with data 3.0.",
                        "explanation": "This test case validates the creation of a simple tree structure with an internal node and two leaf nodes, ensuring correct pointer assignment and data storage."
                    },
                    {
                        "input": "Attempt to access the data member of an internal node. Then, attempt to access the left pointer of a leaf node.",
                        "output": "Accessing the data member of an internal node returns garbage value. Accessing the left pointer of the leaf node is not defined, the union does not allow to access other type data members.",
                        "explanation": "This test case verifies the functionality of the union. accessing the wrong member of the union can lead to unpredictable behaviour."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\n/*create binary tree struct node*/\nstruct NODE {\n    union {\n        struct {\n            struct NODE* left;\n            struct NODE* right;\n        } internal;\n\n        double data;\n    } info;\n};",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n/*create binary tree struct node*/\nstruct NODE {\n    union {\n        struct {\n            struct NODE* left;\n            struct NODE* right;\n        } internal;\n\n        double data;\n    } info;\n};",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}