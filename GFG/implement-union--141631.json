{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706047,
            "title": "Implement Union",
            "titleSlug": "implement-union--141631",
            "content": "<p><span style=\"font-family: comic sans ms,cursive;\"><span style=\"font-size: 18px;\">Unions can be useful in many situations where we want to use the same memory for two or more members.&nbsp;Now suppose we want to implement a binary tree data structure where each leaf node has a double data value, while each internal node has pointers to two children, but no data.</span></span></p>\n<p><span style=\"font-size: 18px;\">Your have&nbsp;to create Binary Tree&nbsp;<strong>struct NODE</strong>. In the Binary Tree&nbsp;you should have members with one as<strong> double data </strong>and the other as<strong> union </strong>containing left and right pointers.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\n/*create binary tree struct node*/\nstruct NODE {\n    union {\n        struct {\n            struct NODE* left;\n            struct NODE* right;\n        } internal;\n\n        double data;\n    } info;\n};",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n/*create binary tree struct node*/\nstruct NODE {\n    union {\n        struct {\n            struct NODE* left;\n            struct NODE* right;\n        } internal;\n\n        double data;\n    } info;\n};",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}