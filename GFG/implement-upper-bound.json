{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878949,
            "title": "Implement Upper Bound",
            "titleSlug": "implement-upper-bound",
            "content": "<p dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Given a&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">sorted&nbsp;</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">array&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">arr[]&nbsp;</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">and a number&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">target</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">, the task is to find the&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">upper</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\"> bound&nbsp;of the&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">target</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;in this given array. </span></p>\n<blockquote>\n<p dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">The&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">upper bound</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;of a number is defined as the smallest&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">index</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;in the sorted array where the element is greater than the given number.</span></p>\n</blockquote>\n<p dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Note:</span><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;If all the elements in the given array are smaller than or equal to the&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">target</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">, the upper bound will be the length of the array.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong> arr[] = [2, 3, 7, 10, 11, 11, 25], target = 9\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 3 is the smallest index in arr[], at which element (arr[3] = 10) is larger than 9.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [2, 3, 7, 10, 11, 11, 25], target = 11\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> 6 is the smallest index in arr[], at which element (arr[6] = 25) is larger than 11.<br /></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [2, 3, 7, 10, 11, 11, 25], target = 100\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> As no element in arr[] is greater than 100, return the length of array.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup><br />1 &le; target &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a **sorted** array `arr[]` and a number `target`, find the **upper bound** of the `target` in the given array. The **upper bound** of a number is the smallest index in the sorted array where the element is greater than the target. If no element in the array is greater than the target, return the length of the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6",
                    "1 <= target <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [2, 3, 7, 10, 11, 11, 25], target = 9",
                        "output": "3",
                        "explanation": "The smallest index where an element is greater than 9 is 3 (arr[3] = 10)."
                    },
                    {
                        "input": "arr[] = [2, 3, 7, 10, 11, 11, 25], target = 11",
                        "output": "6",
                        "explanation": "The smallest index where an element is greater than 11 is 6 (arr[6] = 25)."
                    },
                    {
                        "input": "arr[] = [2, 3, 7, 10, 11, 11, 25], target = 100",
                        "output": "7",
                        "explanation": "No element in the array is greater than 100, so the upper bound is the length of the array, which is 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The idea is to use the fact that the given array is sorted. We can apply binary search to find the index of the element that is just larger than the target.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// User function Template for C++\nclass Solution {\n  public:\n    int upperBound(vector<int>& arr, int target) {\n        // code here\n        int lo = 0, hi = arr.size() - 1;\n        int res = arr.size();\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n\n            // If arr[mid] > target, then arr[mid] can be\n            // the upper bound so store mid in result and\n            // search in left half, i.e. arr[lo...mid-1]\n            if (arr[mid] > target) {\n                res = mid;\n                hi = mid - 1;\n            }\n\n            // If arr[mid] <= target, then upper bound\n            // cannot lie in the range [lo...mid], so\n            // search in right half, i.e. arr[mid+1...hi]\n            else\n                lo = mid + 1;\n        }\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    int upperBound(int[] arr, int target) {\n        // code here\n        int lo = 0, hi = arr.length - 1;\n        int res = arr.length;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n\n            // If arr[mid] > target, then arr[mid] can be\n            // the upper bound so store mid in result and\n            // search in left half, i.e. arr[lo...mid-1]\n            if (arr[mid] > target) {\n                res = mid;\n                hi = mid - 1;\n            }\n\n            // If arr[mid] <= target, then upper bound\n            // cannot lie in the range [lo...mid], so\n            // search in right half, i.e. arr[mid+1...hi]\n            else {\n                lo = mid + 1;\n            }\n        }\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def upperBound(self, arr, target):\n        lo, hi = 0, len(arr) - 1\n        res = len(arr)\n\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n\n            # If arr[mid] > target, then arr[mid] can be\n            # the upper bound so store mid in result and\n            # search in left half, i.e. arr[lo...mid-1]\n            if arr[mid] > target:\n                res = mid\n                hi = mid - 1\n\n            # If arr[mid] <= target, then upper bound\n            # cannot lie in the range [lo...mid], so\n            # search in right half, i.e. arr[mid+1...hi]\n            else:\n                lo = mid + 1\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} target\n * @returns {number}\n */\n\nclass Solution {\n    upperBound(arr, target) {\n        // your code here\n        let lo = 0, hi = arr.length - 1;\n        let res = arr.length;\n\n        while (lo <= hi) {\n            let mid = lo + Math.floor((hi - lo) / 2);\n\n            // If arr[mid] > target, then arr[mid] can be\n            // the upper bound so store mid in result and\n            // search in left half, i.e. arr[lo...mid-1]\n            if (arr[mid] > target) {\n                res = mid;\n                hi = mid - 1;\n            }\n\n            // If arr[mid] < target, then upper bound\n            // cannot lie in the range [lo...mid], so\n            // search in right half, i.e. arr[mid+1...hi]\n            else {\n                lo = mid + 1;\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}