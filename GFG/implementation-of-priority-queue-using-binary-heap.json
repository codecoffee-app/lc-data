{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712539,
            "title": "Implementation of Priority Queue using Binary Heap",
            "titleSlug": "implementation-of-priority-queue-using-binary-heap",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary heap implementation of Priority Queue. Extract the <strong>maximum element </strong>from the queue&nbsp;i.e. remove it&nbsp;from the Queue and return it's value.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> 4 2 8 16 24 2 6 5</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 24</span>\n<span style=\"font-size: 18px;\">Priority Queue after extracting maximum: 16 8 6 5 2 2 4</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> 64 12 8 48 5</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 64</span>\n<span style=\"font-size: 18px;\">Priority Queue after extracting maximum: 48 12 8 5</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(logn)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Space Complexity:</strong> O(n)</span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong></p>\n<p><span style=\"font-size: 18px;\">1&lt;=n&lt;=500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a function to extract the maximum element from a binary heap represented as a priority queue.  The function should remove the maximum element from the queue and return its value. The binary heap is a max-heap, meaning the largest element is always at the root. After extraction, the heap must be re-heapified to maintain the max-heap property.",
                "constraints": [
                    "1 <= n <= 500, where n is the number of elements in the priority queue"
                ],
                "testcases": [
                    {
                        "input": "4 2 8 16 24 2 6 5",
                        "output": "24",
                        "explanation": "The maximum element in the input priority queue is 24. After extracting 24, the remaining elements are re-arranged to maintain the max-heap property, resulting in the priority queue: 16 8 6 5 2 2 4"
                    },
                    {
                        "input": "64 12 8 48 5",
                        "output": "64",
                        "explanation": "The maximum element in the input priority queue is 64. After extracting 64, the remaining elements are re-arranged to maintain the max-heap property, resulting in the priority queue: 48 12 8 5"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n    int extractMax() {\r\n        int result = H[0];\r\n        H[0] = H[s];\r\n        s = s - 1;\r\n        shiftDown(0);\r\n        return result;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    // method to extract the maximum element from the heap\n    public int extractMax(){\n        GFG obj=new GFG(); // create an object of GFG class\n        int res=obj.H[0]; // store the maximum element in res\n        obj.H[0]=obj.H[obj.s]; // replace the root element with the last element in heap\n        obj.s=obj.s-1; // decrement the size of the heap\n        obj.shiftDown(0); // call shiftDown method to maintain heap property\n        return res; // return the maximum element extracted from the heap\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to extract the maximum element from the heap.\r\n    def extractMax(self):\r\n        global s\r\n        #storing the maximum element in a variable.\r\n        result = H[0]\r\n        #replacing the maximum element with the last element in the heap.\r\n        H[0] = H[s]\r\n        s -= 1\r\n        #restoring the heap property by shifting down the root element.\r\n        shiftDown(0)\r\n        return result",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}