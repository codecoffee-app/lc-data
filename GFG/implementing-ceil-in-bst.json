{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701135,
            "title": "Ceil in BST",
            "titleSlug": "implementing-ceil-in-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given a&nbsp;BST and a number <strong>X</strong>, find <strong>Ceil of X</strong>.</span><br /><span style=\"font-size: 18px;\"><strong>Note:</strong> Ceil(X) is a number that is either equal to X or is immediately greater than X.</span></p>\n<p><span style=\"font-size: 18px;\">If Ceil could not be found, return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">root = [</span><span style=\"font-size: 18px;\">5, 1, 7, N, 2, N, N, N, 3], X = 3</span>\n<span style=\"font-size: 18px;\">\\t5\n&nbsp;   /   \\\n&nbsp;  1     7\n&nbsp;   \\\n&nbsp;    2 \n&nbsp;     \\\n&nbsp;\\t3\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">3</span><strong style=\"font-size: 18px;\">\nExplanation: </strong><span style=\"font-size: 18px;\">We find 3 in BST, so ceil of 3 is 3.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [10, 5, 11, 4, 7, N, N, N, N, N, 8], </span>X = 6<br /><span style=\"font-size: 18px;\">     10\n&nbsp;   /  \\\n&nbsp;  5    11\n&nbsp; / \\ \n&nbsp;4   7\n&nbsp;     \\\n&nbsp;\\t8\n<strong>Output: </strong>7<strong>\nExplanation: </strong>We find 7 in BST, so ceil of 6 is 7.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your task:</strong><br />You don't need to read input or print anything. Just complete the function <strong>findCeil</strong>() to implement ceil in BST which returns the ceil of&nbsp;<strong>X&nbsp;</strong>in the given&nbsp;<strong>BST.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= Number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= Value of nodes&lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and a number X, find the Ceil of X in the BST.  The Ceil of X is the smallest element in the BST that is greater than or equal to X. If the Ceil of X doesn't exist in the BST, return -1.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5",
                    "1 <= Value of nodes <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root = [5, 1, 7, N, 2, N, N, N, 3], X = 3",
                        "output": "3",
                        "explanation": "The node with value 3 exists in the BST, and it's equal to X. Therefore, the ceil of 3 is 3."
                    },
                    {
                        "input": "root = [10, 5, 11, 4, 7, N, N, N, N, N, 8], X = 6",
                        "output": "7",
                        "explanation": "The node with value 7 is the smallest node in the BST that is greater than or equal to 6. Therefore, the ceil of 6 is 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively search the BST, checking left for smaller potential ceils and right if the current node is smaller than the input.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\n// Function to return the ceil of given number in BST.\r\nint findCeil(Node* root, int input) {\r\n    // base case\r\n    if (root == NULL) return -1;\r\n\r\n    // if data at current node is equal to given number, we return it.\r\n    if (root->data == input) return root->data;\r\n\r\n    // if data at current node is smaller than given number, we call\r\n    // the function recursively for right subtree.\r\n    if (root->data < input) return findCeil(root->right, input);\r\n\r\n    // else data at current node is greater than given number so we call\r\n    // the function recursively for left subtree.\r\n    int cceil = findCeil(root->left, input);\r\n\r\n    // returning ceil of given number.\r\n    return (cceil >= input) ? cceil : root->data;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Tree {\r\n    // Function to return the ceil of given number in BST.\r\n    int findCeil(Node root, int key) {\r\n        // base case\r\n        if (root == null) return -1;\r\n\r\n        // if data at current node is equal to given number, we return it.\r\n        if (root.data == key) return root.data;\r\n\r\n        // if data at current node is smaller than given number, we call\r\n        // the function recursively for right subtree.\r\n        if (root.data < key) return findCeil(root.right, key);\r\n\r\n        // else data at current node is greater than given number so we call\r\n        // the function recursively for left subtree.\r\n        int ceilValue = findCeil(root.left, key);\r\n\r\n        // returning ceil of given number.\r\n        if (ceilValue >= key)\r\n            return ceilValue;\r\n        else\r\n            return root.data;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n\r\n#Function to return the ceil of given number in BST.\r\nclass Solution:\r\n    def findCeil(self,root, inp):\r\n        \r\n        # base Case\r\n        if root == None:\r\n            return -1\r\n    \r\n        #if data at current node is equal to given number, we return it.\r\n        if root.key == inp:\r\n            return root.key\r\n    \r\n        #if data at current node is smaller than given number, we call \r\n        #the function recursively for right subtree.\r\n        if root.key < inp:\r\n            return self.findCeil(root.right, inp)\r\n    \r\n        #else data at current node is greater than given number so we call \r\n       \t#the function recursively for left subtree.\r\n        val = self.findCeil(root.left, inp)\r\n        \r\n        #returning ceil of given number.\r\n        return val if val >= inp else root.key\r\n    ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} root\r\n * @param {number} input\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    // Function to return the ceil of given number in BST.\r\n    findCeil(root, input) {\r\n        // base case\r\n        if (root === null) return -1;\r\n\r\n        // if data at current node is equal to given number, we return it.\r\n        if (root.data === input) return root.data;\r\n\r\n        // if data at current node is smaller than given number, we call\r\n        // the function recursively for right subtree.\r\n        if (root.data < input) return this.findCeil(root.right, input);\r\n\r\n        // else data at current node is greater than given number so we call\r\n        // the function recursively for left subtree.\r\n        let cceil = this.findCeil(root.left, input);\r\n\r\n        // returning ceil of given number.\r\n        if (cceil >= input) {\r\n            return cceil;\r\n        }\r\n        return root.data;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}