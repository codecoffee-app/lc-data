{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701134,
            "title": "Floor in BST",
            "titleSlug": "implementing-floor-in-bst",
            "content": "<p><span style=\"font-size:18px\">Given a Binary search tree and a value X,&nbsp; the task is to complete the function which will return the floor of x.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note: </strong>Floor(X) is an element that is either equal to X or immediately smaller to X. If no such element exits return -1. </span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>\\t 8\n&nbsp;    /  \\\n&nbsp;   5    9\n&nbsp;  / \\    \\\n&nbsp; 2   6   10\nX = 3\n<strong>Output: </strong>2<strong>\nExplanation: </strong>Floor of 3 in the given BST\nis 2</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>\\t 3\n&nbsp;    /   \\\n&nbsp;   2     5\n&nbsp;\\t /  \\\n&nbsp;\\t4    7\n&nbsp;     /\n&nbsp;    3\nX = 1\n<strong>Output: </strong>-1<strong>\nExplanation: </strong>No smaller element exits</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your task:</strong><br />\nYou don&#39;t need to worry about the insert function, just complete the function <strong>floor</strong>() which should return the floor of X.&nbsp;If no such element exits return -1.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(Height of the BST)<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(Height of the BST).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= Number of nodes&nbsp;&lt;= 10<sup>5</sup><br />\n1 &lt;= X, Value of Node &lt;= 10<sup>6</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and a value X, find the floor of X in the BST. The floor of X is the largest element in the BST that is less than or equal to X. If no such element exists, return -1.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5",
                    "1 <= X, Value of Node <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "BST: [8, 5, 9, 2, 6, 10], X = 3",
                        "output": "2",
                        "explanation": "The largest element in the BST that is less than or equal to 3 is 2."
                    },
                    {
                        "input": "BST: [3, 2, 5, 4, 7, 3], X = 1",
                        "output": "-1",
                        "explanation": "There is no element in the BST that is less than or equal to 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to find the floor of given number.\nint floorUtil(Node* root, int key) {\n    if (!root) return INT_MAX;\n\n    // if data at current node is equal to given number, we return it.\n    if (root->data == key) return root->data;\n\n    // if data at current node is greater than given number, we call\n    // the function recursively for left subtree.\n    if (root->data > key) return floorUtil(root->left, key);\n\n    // else data at current node is smaller than given number so we call\n    // the function recursively for right subtree.\n    int floorValue = floorUtil(root->right, key);\n\n    return (floorValue <= key) ? floorValue : root->data;\n}\n\n// Function to return the floor of given number in BST.\nint floor(Node* root, int key) {\n    int ans = floorUtil(root, key);\n\n    // returning floor of given number or -1 if no such element exists.\n    if (ans == INT_MAX) return -1;\n\n    return ans;\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Sol {\n    // Function to find the floor of given number\n    int floorUtil(Node root, int key) {\n        if (root == null) return Integer.MAX_VALUE;\n\n        // if data at current node is equal to given number, we return it.\n        if (root.data == key) return root.data;\n\n        // if data at current node is greater than given number, we call\n        // the function recursively for left subtree.\n        if (root.data > key) return floorUtil(root.left, key);\n\n        // else data at current node is smaller than given number so we call\n        // the function recursively for right subtree.\n        int floorValue = floorUtil(root.right, key);\n        return (floorValue <= key) ? floorValue : root.data;\n    }\n\n    // Function to return the floor of given number in BST.\n    int floor(Node root, int key) {\n        int ans = floorUtil(root, key);\n\n        // returning floor of given number or -1 if no such element exists.\n        if (ans == Integer.MAX_VALUE) return -1;\n\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n#Function to return the floor of given number in BST.\ndef floor(root,x):\n    if root is None:\n        return -1\n    \n    #if data at current node is greater than given number, we call \n    #the function recursively for left subtree.\n    if root.data > x:\n        return floor(root.left,x)\n    \n    #else data at current node is smaller than given number so we call \n    #the function recursively for right subtree.\n    if root.data == x:\n        return root.data\n    \n    #returning floor of given number or -1 if no such element exists.\n    return max( root.data , floor(root.right,x) )\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n * @param {number} key\n * @returns {number}\n*/\n\nclass Solution {\n    // Function to find the floor of given number\n    floorUtil(root, key) {\n        if (root === null) {\n            let min = -1;\n            return min;\n        }\n\n        // if data at current node is equal to given number, we return it.\n        if (root.data === key) return root.data;\n\n        // if data at current node is greater than given number, we call\n        // the function recursively for left subtree.\n        if (root.data > key) return this.floorUtil(root.left, key);\n\n        // else data at current node is smaller than given number so we call\n        // the function recursively for right subtree.\n        let floorValue = this.floorUtil(root.right, key);\n\n        if (floorValue >= root.data) {\n            return floorValue;\n        } else {\n            return root.data;\n        }\n    }\n\n    // Function to return the floor of given number in BST.\n    floor(root, key) {\n        let ans = this.floorUtil(root, key);\n        // returning floor of given number or -1 if no such element exists.\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}