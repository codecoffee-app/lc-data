{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705716,
            "title": "Floyd Warshall",
            "titleSlug": "implementing-floyd-warshall2042",
            "content": "<p><span style=\"font-size: 18px;\">The problem is to find the shortest distances between every pair of vertices in a given edge-weighted<strong> directed</strong> graph. The graph is represented as an adjacency matrix. <strong>mat[i][j]</strong> denotes&nbsp;the weight of the edge from i to j.<strong>&nbsp;</strong>If<strong> mat[i][j] =</strong> <strong>-1,&nbsp;</strong>it means there is no&nbsp;edge from<strong> </strong>i to j.<br />Note: Modify the distances for every pair in place<strong>.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>mat = [[0, 25], [-1, 0]]\n<img style=\"height: 125px; width: 135px;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20221106202714/WhatsAppImage20221106at82359PM.jpeg\" alt=\"\" />\n<strong>Output: </strong>[[0, 25], [-1, 0]]\n<img style=\"height: 125px; width: 135px;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20221106202714/WhatsAppImage20221106at82359PM.jpeg\" alt=\"\" />\n<strong>Explanation: </strong>The shortest distance between every pair is already given(if it exists).</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>mat = [[0, 1, 43],[1, 0, 6], [-1, -1, 0]]\n<img style=\"height: 164px; width: 176px;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20221106203741/WhatsAppImage20221106at83711PM.jpeg\" alt=\"\" />\n<strong>Output: </strong>[[0, 1, 7], [1, 0, 6], [-1, -1, 0]]\n<img style=\"height: 167px; width: 177px;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20221106204057/WhatsAppImage20221106at84031PM.jpeg\" alt=\"\" />\n<strong>Explanation: </strong>We can reach 2 from 0 as 0-&gt;1-&gt;2 and the cost will be 1+6=7 which is less than 43.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= mat.size() &lt;= 100<br />-1 &lt;= mat[ i ][ j ] &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Floyd Warshsll algorithm&nbsp;&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find the shortest distance between all pairs of vertices.\n    void shortestDistance(vector<vector<int>>& mat) {\n        int INF = INT_MAX;  // initialize INF as maximum integer value.\n        int n = mat.size(); // get the size of the mat.\n\n        // replace all -1 with INF in the matrix.\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mat[i][j] == -1)\n                    mat[i][j] = INF;\n            }\n        }\n\n        // perform Floyd-Warshall algorithm to find shortest distances.\n        for (int k = 0; k < n; ++k) {\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    if (mat[i][k] < INF && mat[k][j] < INF and\n                        mat[i][k] + mat[k][j] < INF)\n                        mat[i][j] = min(mat[i][j], mat[i][k] + mat[k][j]);\n                }\n            }\n        }\n\n        // replace all INF with -1 in the matrix.\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mat[i][j] >= INF)\n                    mat[i][j] = -1;\n            }\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function template for JAVA\n\nclass Solution {\n    public void shortestDistance(int[][] matrix) {\n        // Initializing maximum integer value\n        int INF = Integer.MAX_VALUE;\n        // Getting the size of the matrix\n        int n = matrix.length;\n\n        // Replacing -1 with maximum integer value in the matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (matrix[i][j] == -1) matrix[i][j] = INF;\n            }\n        }\n\n        // Applying Floyd Warshall algorithm to find the shortest distances\n        for (int k = 0; k < n; ++k) {\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    if (matrix[i][k] < INF && matrix[k][j] < INF &&\n                        matrix[i][k] + matrix[k][j] < INF)\n                        matrix[i][j] =\n                            Math.min(matrix[i][j], matrix[i][k] + matrix[k][j]);\n                }\n            }\n        }\n\n        // Replacing maximum integer value with -1 in the matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (matrix[i][j] >= INF) matrix[i][j] = -1;\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function template for Python\n\n\nclass Solution:\n\n    #Function to find the shortest distance between any two nodes in the graph.\n    def shortest_distance(self, matrix):\n        #Code here\n\n        INF = 1 << 32\n        n = len(matrix)\n\n        #Replacing -1 with infinite distance.\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] == -1:\n                    matrix[i][j] = INF\n\n        #Applying Floyd-Warshall algorithm to find the shortest distance.\n        for k in range(n):\n            for i in range(n):\n                for j in range(n):\n                    if matrix[i][k] < INF and matrix[k][\n                            j] < INF and matrix[i][k] + matrix[k][j] < INF:\n                        matrix[i][j] = min(matrix[i][j],\n                                           matrix[i][k] + matrix[k][j])\n\n        #Replacing infinite distances with -1.\n        for i in range(n):\n            for j in range(n):\n                if matrix[i][j] >= INF:\n                    matrix[i][j] = -1\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this Function\n    public void shortestDistance(List<List<int>> matrix) {\n        int INF = int.MaxValue; // initialize INF as maximum integer value.\n        int n = matrix.Count;   // get the size of the matrix.\n\n        // replace all -1 with INF in the matrix.\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (matrix[i][j] == -1) matrix[i][j] = INF;\n            }\n        }\n\n        // perform Floyd-Warshall algorithm to find shortest distances.\n        for (int k = 0; k < n; ++k) {\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    if (matrix[i][k] < INF && matrix[k][j] < INF &&\n                        matrix[i][k] + matrix[k][j] < INF)\n                        matrix[i][j] =\n                            Math.Min(matrix[i][j], matrix[i][k] + matrix[k][j]);\n                }\n            }\n        }\n\n        // replace all INF with -1 in the matrix.\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (matrix[i][j] >= INF) matrix[i][j] = -1;\n            }\n        }\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the shortest distance of all the cells from 0 present in the\n    // matrix.\n    shortestDistance(matrix) {\n        const INF = Infinity;\n        const n = matrix.length;\n\n        // Replacing -1 with infinite distance.\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < n; j++) {\n                if (matrix[i][j] === -1) {\n                    matrix[i][j] = INF;\n                }\n            }\n        }\n\n        // Applying Floyd-Warshall algorithm to find the shortest distance.\n        for (let k = 0; k < n; k++) {\n            for (let i = 0; i < n; i++) {\n                for (let j = 0; j < n; j++) {\n                    if (matrix[i][k] < INF && matrix[k][j] < INF &&\n                        matrix[i][k] + matrix[k][j] < INF) {\n                        matrix[i][j] =\n                            Math.min(matrix[i][j], matrix[i][k] + matrix[k][j]);\n                    }\n                }\n            }\n        }\n\n        // Replacing infinite distances with -1.\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < n; j++) {\n                if (matrix[i][j] >= INF) {\n                    matrix[i][j] = -1;\n                }\n            }\n        }\n\n        // No need to return anything as the matrix is modified in-place.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}