{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703196,
            "title": "Find missing in second array",
            "titleSlug": "in-first-but-second5423",
            "content": "<p><span style=\"font-size: 18px;\">Given two integer arrays <strong>a</strong>&nbsp;and <strong>b</strong>, the task is to find the numbers which are present in the first array <strong>a</strong>, but not present in the second array <strong>b</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> Numbers to be returned should in order as they appear in array <strong>a</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a[] = [1, 2, 3, 4, 5, 10], b[] = [2, 3, 1, 0, 5]\n<strong>Output:</strong> [4, 10]\n<strong>Explanation</strong>: 4 and 10 are present in first array, but not in second array.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a[] = [4, 3, 5, 9, 11], b[] = [4, 9, 3, 11, 10]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>[5]  \n<strong>Explanation</strong>: Second array does not contain element 5.<br /></span></pre>\n<pre><strong>Input: </strong>a[] = [9], b[] = [7, 9, 4, 9, 9, 9]\n<strong>Output: </strong>[]  </pre>\n<p><span style=\"font-size: 18px;\"><strong style=\"font-size: 18.6667px;\">Constraints:</strong><br style=\"font-size: 18.6667px;\" /><span style=\"font-size: 18.6667px;\">1 &lt;= a.size(), b.size() &lt;= 10</span><sup>5</sup><br style=\"font-size: 18.6667px;\" /><span style=\"font-size: 18.6667px;\">1 &lt;= a[i] &lt;= 10</span><sup>5</sup><br style=\"font-size: 18.6667px;\" /><span style=\"font-size: 18.6667px;\">1 &lt;= b[i] &lt;= 10</span><sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try to store all elements of the second array &amp; check all the elements of the first array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho",
            "accolite",
            "microsoft",
            "snapdeal"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n\n  public:\n    vector<int> findMissing(vector<int>& a, vector<int>& b) {\n        int n = a.size(), m = b.size();\n        // Store all elements of\n        // second array in a hash table\n        unordered_set<int> s;\n        vector<int> ans;\n        for (int i = 0; i < m; i++)\n            s.insert(b[i]);\n\n        // Print all elements of\n        // first array that are not\n        // present in hash table\n        for (int i = 0; i < n; i++)\n            if (s.find(a[i]) == s.end())\n                ans.push_back(a[i]);\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    ArrayList<Integer> findMissing(int[] a, int[] b) {\n        int N = a.length, M = b.length;\n        // Store all elements of\n        // second array in a hash table\n        Set<Integer> s = new HashSet<Integer>();\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < M; i++) s.add(b[i]);\n\n        // Print all elements of\n        // first array that are not\n        // present in hash table\n        for (int i = 0; i < N; i++)\n            if (!s.contains(a[i])) ans.add(a[i]);\n        return ans;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findMissing(self, a, b):\n\n        s = set()\n        ans = []\n        for i in b:\n            s.add(i)\n        #  Print all elements of\n        #  first array that are not\n        #  present in hash table\n        for i in a:\n            if i not in s:\n                ans.append(i)\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMissing(a, b) {\n        // Store all elements of second array in a hash table\n        let n = a.length, m = b.length;\n        let s = new Set();\n        let ans = [];\n        for (let i = 0; i < m; i++) s.add(b[i]);\n\n        // Print all elements of first array that are not present in hash table\n        for (let i = 0; i < n; i++)\n            if (!s.has(a[i])) ans.push(a[i]);\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}