{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704571,
            "title": "Incomplete Array",
            "titleSlug": "incomplete-array3859",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer array <strong>arr[]</strong>, the task is to find how many elements should be added such that all elements between the <strong>maximum element</strong>&nbsp;and <strong>minimum</strong> <strong>element</strong> are present in the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [205, 173, 102, 324, 957]\n<strong>Output: </strong>851\n<strong>Explanation: </strong>The maximum element is 957 and the minimum element is 102. Total elements from 102 to 957 = 854, out of which 3 are already present. So answer is 851.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><span style=\"font-size: 18px;\"> arr[] = [3, 4, 4, 8]<br /><strong>Output: </strong>3<strong><br /></strong></span><strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">The maximum element is 8 and the minimum element is 3. Total elements from 3 to 8 = 6, out of which 3 are already present. So, answer is 3.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [545]\n<strong>Output: </strong>0\n<strong>Explanation: </strong>We don't need to add any elements to the array.<br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]`, determine the minimum number of elements that need to be added to the array such that all integers between the minimum and maximum elements (inclusive) are present in the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[205, 173, 102, 324, 957]",
                        "output": "851",
                        "explanation": "The minimum element is 102 and the maximum element is 957. The total number of integers between 102 and 957 (inclusive) is 957 - 102 + 1 = 856. The input array contains 3 of these numbers. Therefore, 856 - 5 = 851 elements need to be added ( duplicates are to be treated as one single element )."
                    },
                    {
                        "input": "[3, 4, 4, 8]",
                        "output": "3",
                        "explanation": "The minimum element is 3 and the maximum element is 8. The total number of integers between 3 and 8 (inclusive) is 8 - 3 + 1 = 6. The unique elements present in the array are 3, 4 and 8. Therefore, 6 - 3 = 3 elements need to be added."
                    },
                    {
                        "input": "[545]",
                        "output": "0",
                        "explanation": "The minimum and maximum element is 545. All numbers between the minimum and maximum are already present. Therefore, no elements need to be added."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Hashing.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int countElements(vector<int> &arr) {\n        unordered_set<int> st;\n        int maxEle = arr[0], minEle = arr[0];\n        int n = arr.size();\n\n        for (int i = 0; i < n; i++) {\n            st.insert(arr[i]);\n            minEle = min(minEle, arr[i]);\n            maxEle = max(maxEle, arr[i]);\n        }\n\n        int totalEle = maxEle - minEle + 1;\n        return totalEle - st.size();\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    int countElements(int[] arr) {\n        Set<Integer> st = new HashSet<>();\n        int maxEle = arr[0], minEle = arr[0];\n        int n = arr.length;\n\n        for (int i = 0; i < n; i++) {\n            st.add(arr[i]);\n            minEle = Math.min(minEle, arr[i]);\n            maxEle = Math.max(maxEle, arr[i]);\n        }\n\n        int totalEle = maxEle - minEle + 1;\n        return totalEle - st.size();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def countElements(self, arr):\n        st = set()\n        maxEle = arr[0]\n        minEle = arr[0]\n        n = len(arr)\n\n        for i in range(n):\n            st.add(arr[i])\n            minEle = min(minEle, arr[i])\n            maxEle = max(maxEle, arr[i])\n\n        totalEle = maxEle - minEle + 1\n        return totalEle - len(st)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for C#\n\nclass Solution {\n    public int countElements(int[] arr) {\n        HashSet<int> st = new HashSet<int>();\n        int maxEle = arr[0], minEle = arr[0];\n        int n = arr.Length;\n\n        for (int i = 0; i < n; i++) {\n            st.Add(arr[i]);\n            minEle = Math.Min(minEle, arr[i]);\n            maxEle = Math.Max(maxEle, arr[i]);\n        }\n\n        int totalEle = maxEle - minEle + 1;\n        return totalEle - st.Count;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    countElements(arr) {\n        let st = new Set();\n        let maxEle = arr[0], minEle = arr[0];\n        let n = arr.length;\n\n        for (let i = 0; i < n; i++) {\n            st.add(arr[i]);\n            minEle = Math.min(minEle, arr[i]);\n            maxEle = Math.max(maxEle, arr[i]);\n        }\n\n        let totalEle = maxEle - minEle + 1;\n        return totalEle - st.size;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}