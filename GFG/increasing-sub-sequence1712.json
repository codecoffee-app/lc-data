{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705084,
            "title": "Increasing Sub Sequence",
            "titleSlug": "increasing-sub-sequence1712",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s </strong>which includes characters a, b, c, ..., z. Where value of a=1, b=2, ..., z=26. Now find the length of the <strong>largest increasing subsequence </strong>in the string.<br /></span><span style=\"font-size: 18px;\">Note: Subsequence doesn't require elements to be consecutively increasing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = abcdapzfqh</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>6<strong>\nExplanation: </strong>The length of largest increasing subsequence is 6. One of the sequence with max length 6 is a, b, c, d, p, z.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = hkm</span><span style=\"font-size: 18px;\"> \n<strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">3</span><strong style=\"font-size: 18px;\">\nExplanation: </strong><span style=\"font-size: 18px;\">The length of the largest increasing subsequence is 3. Sequence with max length 3 is h,k,m<br /></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = </span><span style=\"font-size: 18px;\">gqghs</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>3</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=s.size()&lt;=1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase English letters (a-z), where 'a' has a value of 1, 'b' has a value of 2, and so on until 'z' has a value of 26. Find the length of the longest increasing subsequence in the string `s`. Note that a subsequence does not require elements to be consecutive.",
                "constraints": [
                    "1 <= s.size() <= 1000"
                ],
                "testcases": [
                    {
                        "input": "abcdapzfqh",
                        "output": "6",
                        "explanation": "The longest increasing subsequence has length 6. One such subsequence is a, b, c, d, p, z."
                    },
                    {
                        "input": "hkm",
                        "output": "3",
                        "explanation": "The longest increasing subsequence has length 3. One such subsequence is h, k, m."
                    },
                    {
                        "input": "gqghs",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming to find the length of the longest increasing subsequence by comparing characters and updating lengths iteratively.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxLength(string &s) {\n        // length of s\n        int n = s.length();\n\n        // dp array\n        int T[n + 1];\n        int i, c = 0, Max = 0, j;\n\n        // initialize the dp array with 1\n        for (i = 0; i < n; i++)\n            T[i] = 1;\n        j = 0;\n        i = 1;\n\n        // build dp table\n        for (i = 1; i < n; i++) {\n            j = 0;\n            while (j < i) {\n                // if the sequence is increasing\n                if (s[i] - 'a' > s[j] - 'a') {\n                    T[i] = max(T[i], T[j] + 1);\n                }\n                j++;\n            }\n        }\n        int d = 0;\n\n        // find the maximum length possible\n        // as the longest increasing subsequence\n        for (i = 0; i < n; i++) {\n            d = max(d, T[i]);\n        }\n        return d;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int maxLength(String s) {\n\n        // length of s\n        int n = s.length();\n\n        // dp array\n        int T[] = new int[n + 1];\n        int i, c = 0, Max = 0, j;\n\n        // initialize the dp array with 1\n        for (i = 0; i < n; i++) T[i] = 1;\n        j = 0;\n        i = 1;\n\n        // build dp table\n        for (i = 1; i < n; i++) {\n            j = 0;\n            while (j < i) {\n                // if the sequence is increasing\n                if (s.charAt(i) - 'a' > s.charAt(j) - 'a') {\n                    T[i] = Math.max(T[i], T[j] + 1);\n                }\n                j++;\n            }\n        }\n        int d = 0;\n\n        // find the maximum length possible\n        // as the longest increasing subsequence\n        for (i = 0; i < n; i++) {\n            d = Math.max(d, T[i]);\n        }\n        return d;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def maxLength(self, s):\n        # length of s\n        n = len(s)\n\n        # dp array\n        T = []\n        c = 0\n        Max = 0\n\n        # initialize the dp array with 1\n        for i in range(n + 1):\n            T.append(1)\n        j = 0\n        i = 1\n\n        # build dp table\n        for i in range(1, n):\n            j = 0\n            while j < i:\n                # if the sequence is increasing\n                if s[i] > s[j]:\n                    T[i] = max(T[i], T[j] + 1)\n                j += 1\n        d = 0\n\n        # find the maximum length possible\n        # as the longest increasing subsequence\n        for i in range(n):\n            d = max(d, T[i])\n        return d\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int maxLength(string s) {\n        int n = s.Length;\n        int[] T = new int[n + 1];\n        int i, j;\n\n        for (i = 0; i < n; i++) T[i] = 1;\n        j = 0;\n        i = 1;\n\n        for (i = 1; i < n; i++) {\n            j = 0;\n            while (j < i) {\n                if (s[i] - 'a' > s[j] - 'a') {\n                    T[i] = Math.Max(T[i], T[j] + 1);\n                }\n                j++;\n            }\n        }\n        int d = 0;\n        for (i = 0; i < n; i++) {\n            d = Math.Max(d, T[i]);\n        }\n        return d;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n/**\n * @param {string} s\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find maximum length of consecutive characters in a string.\n    maxLength(s) {\n        // length of s\n        let n = s.length;\n\n        // dp array\n        let T = [];\n        let c = 0;\n        let Max = 0;\n\n        // initialize the dp array with 1\n        for (let i = 0; i < n + 1; i++) {\n            T.push(1);\n        }\n\n        let j = 0;\n        let i = 1;\n\n        // build dp table\n        for (let i = 1; i < n; i++) {\n            j = 0;\n            while (j < i) {\n                // if the sequence is increasing\n                if (s[i] > s[j]) {\n                    T[i] = Math.max(T[i], T[j] + 1);\n                }\n                j++;\n            }\n        }\n\n        let d = 0;\n\n        // find the maximum length possible\n        // as the longest increasing subsequence\n        for (let i = 0; i < n; i++) {\n            d = Math.max(d, T[i]);\n        }\n\n        return d;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}