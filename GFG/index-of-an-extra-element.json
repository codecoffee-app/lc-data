{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700517,
            "title": "Index of an Extra Element",
            "titleSlug": "index-of-an-extra-element",
            "content": "<p><span style=\"font-size: 20px;\">You have given two <strong>sorted</strong> arrays <strong>arr1[]</strong> &amp; <strong>arr2[]</strong> of <strong>distinct</strong> elements. The first array has one element extra added in between. Return the <strong>index</strong> of the extra element.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Note</strong>: 0-based indexing is followed.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Examples</strong></span></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input: </strong>a[] = [2,4,6,8,9,10,12], b[] = [2,4,6,8,10,12]\n<strong>Output: </strong>4<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">In the first array, 9 is extra added and it's index is 4.</span></pre>\n<pre><span style=\"font-size: 20px;\"><strong>Input: </strong>a[] = [3,5,7,8,11,13], b[] = [3,5,7,11,13]\n<strong>Output: </strong>3<br /></span><span ><strong>Explanation: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">In the first array, 8 is extra and it's index is 3.</span></span></pre>\n<pre><span style=\"font-size: 20px;\"><strong>Input: </strong>a[] = [3,5], b[] = [3]\n<strong>Output: </strong>1<br /></span><span ><strong>Explanation: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">In the first array, 5 is extra and it's index is 1.</span></span></pre>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br />2&lt;=arr1.size()&lt;=10<sup>5</sup><br />1&lt;=arr1[i],arr2[i]&lt;=10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given two sorted arrays, `arr1` and `arr2`, containing distinct elements. `arr1` has one extra element inserted somewhere within its sorted order that is not present in `arr2`. Find the index of this extra element in `arr1`.  Consider 0-based indexing.",
                "constraints": [
                    "2 <= arr1.size() <= 10^5",
                    "1 <= arr1[i], arr2[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [2,4,6,8,9,10,12], arr2 = [2,4,6,8,10,12]",
                        "output": "4",
                        "explanation": "The element 9 is present at index 4 in `arr1` but not in `arr2`."
                    },
                    {
                        "input": "arr1 = [3,5,7,8,11,13], arr2 = [3,5,7,11,13]",
                        "output": "3",
                        "explanation": "The element 8 is present at index 3 in `arr1` but not in `arr2`."
                    },
                    {
                        "input": "arr1 = [3,5], arr2 = [3]",
                        "output": "1",
                        "explanation": "The element 5 is present at index 1 in `arr1` but not in `arr2`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use binary search to check whether the same indices elements are different &amp; reduce our search by a factor of 2 in each step.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findExtra(vector<int>& a, vector<int>& b) {\n        // Initialize result\n        int n = a.size();\n        int index = n - 1;\n\n        // left and right are end\n        // points denoting the current range.\n        int left = 0, right = n - 2;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n\n            // If middle element is same\n            // of both arrays, it means\n            // that extra element is after\n            // mid so we update left to mid+1\n            if (b[mid] == a[mid])\n                left = mid + 1;\n\n            // If middle element is different\n            // of the arrays, it means that...\n            // the index we are searching for\n            // is either mid, or before mid.\n            // Hence we update right to mid-1.\n            else {\n                index = mid;\n                right = mid - 1;\n            }\n        }\n\n        // when right is greater than\n        // left our search is complete.\n        return index;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findExtra(int a[], int b[]) {\n        int n = a.length;\n        int index = n - 1;\n\n        // left and right are end\n        // points denoting the current range.\n        int left = 0, right = n - 2;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n\n            // If middle element is same\n            // of both arrays, it means\n            // that extra element is after\n            // mid so we update left to mid+1\n            if (b[mid] == a[mid]) left = mid + 1;\n\n            // If middle element is different\n            // of the arrays, it means that\n            // the index we are searching for\n            // is either mid, or before mid.\n            // Hence we update right to mid-1.\n            else {\n                index = mid;\n                right = mid - 1;\n            }\n        }\n\n        // when right is greater than\n        // left, our search is complete.\n        return index;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findExtra(self, a, b):\n\n        n = len(a)\n        # initializing pointers\n        low = 0\n        high = n - 2\n        index = n - 1\n\n        # binary search\n        while (low <= high):\n\n            mid = (low + high) // 2\n            if (a[mid] == b[mid]):\n                low = mid + 1\n            else:\n                index = mid\n                high = mid - 1\n\n        return index\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    findExtra(a, b) {\n        let n = a.length;\n        let index = n - 1;\n\n        // left and right are end\n        // points denoting the current range.\n        let left = 0, right = n - 2;\n        while (left <= right) {\n            let mid = Math.floor((left + right) / 2);\n\n            // If middle element is same\n            // of both arrays, it means\n            // that extra element is after\n            // mid so we update left to mid+1\n            if (b[mid] == a[mid]) left = mid + 1;\n\n            // If middle element is different\n            // of the arrays, it means that\n            // the index we are searching for\n            // is either mid, or before mid.\n            // Hence we update right to mid-1.\n            else {\n                index = mid;\n                right = mid - 1;\n            }\n        }\n\n        // when right is greater than\n        // left, our search is complete.\n        return index;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}