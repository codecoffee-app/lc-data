{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712687,
            "title": "Index of the First Occurrence of pattern in a text",
            "titleSlug": "index-of-the-first-occurrence-of-pattern-in-a-text",
            "content": "<p><span style=\"font-size:18px\">Given two strings <strong>text&nbsp;</strong>and <strong>pattern, </strong>find the first index where pattern exactly matches with any substring of text.&nbsp; </span></p>\r\n\r\n<p><span style=\"font-size:18px\">Return -1 if pattern doesn&#39;t exist as a substring in text.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\ntext = gffgfg\r\npattern = gfg\r\n<strong>Output: </strong>3\r\n<strong>Explanation:</strong>  Considering 0-based indexing, substring of text from 3rd to last index is gfg.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\ntext = gffggg\r\npattern = gfg\r\n<strong>Output: </strong>-1\r\n<strong>Explanation:</strong> pattern &quot;gfg&quot; does not exist in the text.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>findMatching()</strong>&nbsp;which takes the strings <strong>text </strong>and <strong>pattern</strong> as the input parameters and returns the <strong>first index of matching.</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(|text| * |pattern|)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; |text|, |pattern|&nbsp;&le;&nbsp; 10<sup>3</sup></span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `text` and `pattern`, find the starting index of the first occurrence of the `pattern` as a substring within the `text`. Return -1 if the `pattern` is not found as a substring within the `text`.",
                "constraints": [
                    "1 <= |text|, |pattern| <= 1000"
                ],
                "testcases": [
                    {
                        "input": {
                            "text": "gffgfg",
                            "pattern": "gfg"
                        },
                        "output": 3,
                        "explanation": "The substring 'gfg' is found in 'gffgfg' starting at index 3 (0-based indexing)."
                    },
                    {
                        "input": {
                            "text": "gffggg",
                            "pattern": "gfg"
                        },
                        "output": -1,
                        "explanation": "The pattern 'gfg' does not exist as a substring within the text 'gffggg'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the first matching substring in text.\n    int findMatching(string text, string pat) {\n        int tn = text.length(); //length of text\n        int pn = pat.length(); //length of pattern\n\n        // iterating over all substrings of text.\n        for (int i = 0; i <= tn - pn; i++) {\n            // comparing substring with pattern\n            if (text.substr(i, pn) == pat) {\n                return i; // return the index where pattern is found\n            }\n        }\n        return -1; // if pattern is not found, return -1\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    public int findMatching(String text, String pat) {\n        \n        // Initializing the starting and ending indices of the pattern in the text\n        int st = 0, end = pat.length();\n        \n        // Looping through the text to find the pattern\n        for (int i = 0; i < text.length() - end + 1; i++) {\n            \n            // Checking if the substring from i to i + end equals the pattern\n            if (text.substring(i, i + end).equals(pat)) {\n                // If a match is found, return the starting index of the pattern in the text\n                return i;\n            }\n        }\n        \n        // If no match is found, return -1\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom functools import reduce\r\nclass Solution:\r\n    \r\n    #Function to find the index of the first occurrence of pattern in text.\r\n    def findMatching(self, text, pattern):\r\n        \r\n        hlen, nlen = len(text), len(pattern)\r\n        if nlen == 0:\r\n            return 0\r\n        if nlen > hlen or hlen == 0:\r\n            return -1\r\n\r\n        #Function to calculate hash value.\r\n        rolling = lambda x, y: x * 29 + y\r\n        get_hash = lambda ch: ord(ch) - ord('a')\r\n        \r\n        #Calculating hash value of pattern and initial substring of text.\r\n        nhash = reduce(rolling, map(get_hash, pattern))\r\n        hhash = reduce(rolling, map(get_hash, text[:nlen]))\r\n        \r\n        #Checking if initial substring hash value matches pattern hash value.\r\n        if nhash == hhash:\r\n            return 0\r\n\r\n        high_base = 29 ** (nlen - 1)\r\n        \r\n        #Iterating through the remaining characters in text.\r\n        for i in range(nlen, hlen):\r\n            \r\n            #Updating hash value by removing the leftmost character and adding the rightmost character.\r\n            hhash -= get_hash(text[i - nlen]) * high_base\r\n            hhash = rolling(hhash, get_hash(text[i]))\r\n            \r\n            #Checking if updated hash value matches pattern hash value.\r\n            if nhash == hhash:\r\n                return i - nlen + 1\r\n\r\n        return -1",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    //Function to find the starting index of the pattern pat in the given text.\n    public int findMatching(string text, string pat)\n    {\n        int tn = text.Length; //length of text\n        int pn = pat.Length; //length of pattern\n\n        // iterating over all substrings of text.\n        for (int i = 0; i <= tn - pn; i++)\n        {\n            // comparing substring with pattern\n            if (text.Substring(i, pn) == pat)\n            {\n                return i; // return the index where pattern is found\n            }\n        }\n        return -1; // if pattern is not found, return -1\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}