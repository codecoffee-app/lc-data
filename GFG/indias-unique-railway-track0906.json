{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704914,
            "title": "India's unique railway tracks",
            "titleSlug": "indias-unique-railway-track0906",
            "content": "<p><span style=\"font-size:18px\">There are infinite number of cities in Geekland numbered from 1 onward. Some of them are connected via bidirectional railway tracks.<br />\r\nThere are railway tracks 1-2, 3-4, 5-6, 7-8, and so on.<br />\r\nThere are railway tracks between every two consecutive odd numbers. 1-3, 3-5, 5-7, 7-9, and so on.<br />\r\nThere are railway tracks between every two consecutive even numbers. 2-4, 4-6, 6-8, 8-10, and so on.<br />\r\nGiven two cities a and b, check if there is a railway track between them or not.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\na = 1, b = 4\r\n<strong>Output:</strong> NO\r\n<strong>Explaination:</strong> There is no direct track \r\nbetween 1 and 4.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\na = 4, b = 3\r\n<strong>Output:</strong> YES\r\n<strong>Explaination: </strong>There is a direct track \r\nbetween 3 and 4.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>isConnected()</strong> which takes a and b as input parameters and returns 1 if there is a direct connection, otherwise, returns 0.<br />\r\n<strong>Note:</strong> The generated output is YES when you return 1 and NO when you return 0.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(1)<br />\r\n<strong>Expected Auxiliary Space: </strong>O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; a, b &le; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two cities, 'a' and 'b', in Geekland, determine if there is a direct railway track connecting them. Geekland has an infinite number of cities numbered from 1 onwards. Railway tracks exist as follows:\n\n*   Between consecutive numbers: 1-2, 3-4, 5-6, ...\n*   Between consecutive odd numbers: 1-3, 3-5, 5-7, ...\n*   Between consecutive even numbers: 2-4, 4-6, 6-8, ...\n",
                "constraints": [
                    "1 <= a, b <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "a = 1, b = 4",
                        "output": "NO",
                        "explanation": "There is no direct railway track between city 1 and city 4."
                    },
                    {
                        "input": "a = 4, b = 3",
                        "output": "YES",
                        "explanation": "There is a direct railway track between city 3 and city 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The connections are given in question. Check if there is any direct connection between a nd b.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to check if two values are connected\n    int isConnected(int a, int b){\n        // Check if the absolute difference between a and b is 2\n        if(abs(a - b) == 2)\n            return 1;\n        // Check if the absolute difference between a and b is 1 and if the smaller number is odd\n        if(abs(a - b) == 1 && min(a, b)%2 == 1)\n            return 1;\n        // If none of the conditions are satisfied, return 0\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Function to check if two numbers are connected\nclass Solution{\n    static int isConnected(int a, int b){\n        // If the difference between the two numbers is 2, they are connected\n        if(a - b == 2 || b - a == 2)\n            return 1;\n        // If the difference between the two numbers is 1\n        // Check if they are in different groups or not\n        if(a - b == 1 || b - a == 1){\n            // If they are in different groups, they are connected\n            if(a/2 != b/2)\n                return 1;\n            // If they are in the same group, they are not connected\n            return 0;\n        }\n        // If the difference between the two numbers is neither 1 nor 2, they are not connected\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def isConnected(self, a, b):\r\n        #Check if a and b have a difference of 2, indicating they are connected.\r\n        if( (a-b) == 2 or (b-a) == 2):\r\n            return 1\r\n        #Check if a and b have a difference of 1 and are not in the same pair.\r\n        elif((a-b) == 1 or (b-a) == 1):\r\n            if(int(a/2) != int(b/2)):\r\n                return 1\r\n            else:\r\n                return 0\r\n        #Return 0 if a and b are not connected.\r\n        else:\r\n            return 0",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}