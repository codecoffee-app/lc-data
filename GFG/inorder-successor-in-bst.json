{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700514,
            "title": "Inorder Successor in BST",
            "titleSlug": "inorder-successor-in-bst",
            "content": "<p><span >Given a BST, and a reference to a Node <strong>k</strong> in the BST. Find the Inorder Successor of the given node in the BST. If there is no successor, return -1.&nbsp;</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input:</strong> root = [2, 1, 3], k = 2\n&nbsp;  <strong> </strong>  2\n&nbsp;   /   \\\n<strong>   </strong>1     3\n<strong>Output: </strong>3 \n<strong>Explanation:</strong> Inorder traversal : 1 2 3 Hence, inorder successor of 2 is 3.\n</span></pre>\n<pre><span ><strong>Input:</strong> root = [20, 8, 22, 4, 12, N, N, N, N, 10, 14], k = 8\n\\t\\t 20\n&nbsp;\\t     /   \\\n&nbsp;\\t    8<strong>     </strong>22\n&nbsp;\\t   / \\\n&nbsp;\\t  4   12\n&nbsp;\\t     /<strong>  </strong>\\\n&nbsp;\\t    10   14\n<strong>Output: </strong>10<strong>\nExplanation: </strong>Inorder traversal: 4 8 10 12 14 20 22. Hence, successor of 8 is 10.<br /></span></pre>\n<pre><span ><strong>Input:</strong> root = [2, 1, 3], k = 3\n&nbsp;     2\n&nbsp;   /   \\\n<strong>   </strong>1     3\n<strong>Output: </strong>-1 \n<strong>Explanation:</strong> Inorder traversal : 1 2 3 Hence, inorder successor of 3 is null.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup><sup>,</sup> where n is the number of nodes</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Inorder successor of node x is the first element that occurs after the node x in the inorder traversal of the tree.</p>",
            "<p>The inorder traversal of a BST has a sepcial property. It is that, the inorder traversal of a BST gives us the nodes in the sorted order. Try using this fact to get to an O(1) auxiliary space iterative solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the in-order successor of a node in a BST\n    int inOrderSuccessor(Node *root, Node *p) {\n        // If the root or node to find the successor is NULL, return -1\n        if (root == NULL || p == NULL)\n            return -1;\n\n        // Initialize a variable to store the successor node\n        Node *suc = NULL;\n\n        // Traverse the tree until we find the node or reach the end\n        while (root != NULL) {\n            // If the current node's data is less than or equal to the given node's\n            // data, move to the right child of the current node\n            if (root->data <= p->data)\n                root = root->right;\n\n            // If the current node's data is greater than the given node's data,\n            // move to the left child and update the successor node\n            else {\n                suc = root;\n                root = root->left;\n            }\n        }\n\n        // Return the successor node\n        if (suc == NULL)\n            return -1;\n        return suc->data;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n// Class Solution for finding the inorder successor of a node in a binary search tree\nclass Solution {\n    // Function to find the inorder successor of a node\n    public int inorderSuccessor(Node root, Node k) {\n        // If either the root or the given node is null, return -1\n        if (root == null || k == null) return -1;\n\n        // Initialize a temporary node to store the inorder successor\n        Node temp = null;\n\n        // Traverse through the tree to find the inorder successor\n        while (root != null) {\n            // If the data of the current node is less than or equal to the data of the\n            // given node, move to the right child\n            if (root.data <= k.data) {\n                root = root.right;\n            }\n            // If the data of the current node is greater than the data of the given\n            // node, move to the left child\n            else {\n                // Store the current node as the potential inorder successor\n                temp = root;\n                root = root.left;\n            }\n        }\n\n        // Return the final inorder successor node\n        if (temp == null) return -1;\n        return temp.data;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def inorderSuccessor(self, root, X):\n        # Code here\n        if root is None or X is None:\n            return -1\n        succ = None\n        while (root is not None):\n            if root.data <= X.data:\n                root = root.right\n            else:\n                succ = root\n                root = root.left\n        if succ is None:\n            return -1\n        return succ.data\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // returns the inorder successor of the Node x in BST (rooted at 'root')\n    inOrderSuccessor(root, x) {\n        if (root === null || x === null)\n            return -1;   // Return -1 if the root or x is null.\n        let temp = null; // Initialize a temporary node to store the inorder successor.\n        while (root !== null) {\n            if (root.data <= x.data) {\n                root = root.right; // If the current node's data is less than or equal\n                                   // to x's data, move to the right subtree.\n            } else {\n                temp = root; // If the current node's data is greater than x's data,\n                             // update the temporary node and move to the left subtree.\n                root = root.left;\n            }\n        }\n        if (temp === null) return -1;\n        return temp.data; // Return the temporary node which will be the inorder\n                          // successor of x.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}