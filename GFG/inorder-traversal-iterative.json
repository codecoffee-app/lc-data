{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706110,
            "title": "Iterative Inorder",
            "titleSlug": "inorder-traversal-iterative",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree. Find the inorder traversal of the tree <strong>without using recursion</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<strong><span style=\"font-size: 18px;\">\\t     </span></strong><span style=\"font-size: 18px;\">1</span>\n<span style=\"font-size: 18px;\"><strong>\\t   /    \\</strong></span>\n<span style=\"font-size: 18px;\">\\t 2\\t 3</span>\n   <span style=\"font-size: 18px;\">   /   \\</span>\n<span style=\"font-size: 18px;\">    4     5</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">4 2 5 1 3</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong>\n<span style=\"font-size: 18px;\">Inorder traversal (Left-&gt;Root-&gt;Right) of </span>\n<span style=\"font-size: 18px;\">the tree is 4 2 5 1 3.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">\\t\\t8</span>\n<span style=\"font-size: 18px;\">\\t    /   \\</span>\n\\t\\t<span style=\"font-size: 18px;\">1\\t5</span>\n\\t\\t <span style=\"font-size: 18px;\">\\    /  \\</span>\n\\t\\t <span style=\"font-size: 18px;\">7   10   6</span>\n\\t    <span style=\"font-size: 18px;\">   \\  /\n&nbsp;\\t   </span><span style=\"font-size: 18px;\">10 6</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">1 7 10 8 6 10 5 6</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong>\n<span style=\"font-size: 18px;\">Inorder traversal (Left-&gt;Root-&gt;Right) \nof </span><span style=\"font-size: 18px;\">the tree is 1 7 10 8 6 10 5 6.</span></pre>\n<p>&nbsp;</p>\n<div><strong><span style=\"font-size: 18px;\">Your task:</span></strong></div>\n<div><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function <strong>inOrder() </strong>which takes the root of the tree as input and returns a list containing the inorder traversal of the tree, calculated</span><strong><span style=\"font-size: 18px;\"> without using recursion.</span></strong></div>\n<p><br /><strong><span style=\"font-size: 18px;\">Expected time complexity: </span></strong><span style=\"font-size: 18px;\">O(N)</span><br /><strong><span style=\"font-size: 18px;\">Expected auxiliary space: </span></strong><span style=\"font-size: 18px;\">O(N)</span></p>\n<div><br /><strong><span style=\"font-size: 18px;\">Constraints:</span></strong></div>\n<div><span style=\"font-size: 18px;\">1 &lt;= Number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= Data of a node &lt;= 10<sup>5</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the inorder traversal (Left -> Root -> Right) of the tree without using recursion.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5",
                    "1 <= Data of a node <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "     1\n   /    \\\n 2\t 3\n   /   \\\n4     5",
                        "output": "4 2 5 1 3",
                        "explanation": "The inorder traversal of the given binary tree is 4 -> 2 -> 5 -> 1 -> 3."
                    },
                    {
                        "input": "\t\t8\n\t    /   \\\n\t\t1\t5\n\t\t \\    /  \\\n\t\t 7   10   6\n\t       \\  /\n\t       10 6",
                        "output": "1 7 10 8 6 10 5 6",
                        "explanation": "The inorder traversal of the given binary tree is 1 -> 7 -> 10 -> 8 -> 6 -> 10 -> 5 -> 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\npublic:\n    vector<int> inOrder(Node* root)\n    {\n\n        stack<Node *> s;\n        Node *curr = root;\n        vector<int> v;\n        while (curr != NULL || s.empty() == false)\n        {\n            /* Reach the left most Node of the\n               curr Node */\n            while (curr !=  NULL)\n            {\n                /* place pointer to a tree node on\n                   the stack before traversing\n                  the node's left subtree */\n                s.push(curr);\n                curr = curr->left;\n            }\n\n            /* Current must be NULL at this point */\n            curr = s.top();\n            s.pop();\n\n            v.push_back(curr->data);\n\n            /* we have visited the node and its\n               left subtree.  Now, it's right\n               subtree's turn */\n            curr = curr->right;\n\n        } /* end of while */\n\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution\n{\n    // Return a list containing the inorder traversal of the given tree\n    ArrayList<Integer> inOrder(Node root)\n    {\n        Stack<Node> s = new Stack<Node>();\n        ArrayList<Integer> v = new ArrayList<Integer>();\n        Node curr = root;\n\n        while (curr != null || s.size() > 0)\n        {\n            /* Reach the left most Node of the\n               curr Node */\n            while (curr !=  null)\n            {\n                /* place pointer to a tree node on\n                   the stack before traversing\n                  the node's left subtree */\n                s.push(curr);\n                curr = curr.left;\n            }\n\n            /* Current must be NULL at this point */\n            curr = s.peek();\n            s.pop();\n\n            v.add(curr.data);\n\n            /* we have visited the node and its\n               left subtree.  Now, it's right\n               subtree's turn */\n            curr = curr.right;\n\n        } /* end of while */\n\n        return v;\n    }\n\n\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    def inOrder(self, root):\n        # Initializing an empty stack and an empty list to store the result\n        s = []\n        ans = []\n        \n        curr = root # Assigning the root to the current node\n        \n        # Running the loop until current node is not None or stack is not empty\n        while curr or len(s) > 0:\n            \n            # Pushing all the left nodes of current node into the stack\n            while curr :\n                s.append(curr)\n                curr = curr.left\n            \n            # Popping the top element from stack\n            curr = s[-1]\n            s.pop()\n            \n            # Appending the data of popped element into result list\n            ans.append(curr.data)\n        \n            # Moving to the right child of the current node\n            curr=curr.right\n        \n        # Returning the final result list\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}