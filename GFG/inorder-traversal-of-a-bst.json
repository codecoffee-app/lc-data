{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701088,
            "title": "Inorder traversal of a BST",
            "titleSlug": "inorder-traversal-of-a-bst",
            "content": "<p><em><span style=\"font-size:18px\">Inorder traversal means traversing through the tree in a Left, Node, Right manner. We first traverse left, then print the current node, and then traverse right. This is done recursively for each node.</span></em><br />\n<span style=\"font-size:18px\">Given a BST, find its in-order traversal.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>&nbsp; &nbsp; &nbsp; &nbsp;5\n&nbsp; &nbsp; /&nbsp; &nbsp; \\\n &nbsp; 2&nbsp; &nbsp; &nbsp;&nbsp;7\n &nbsp; &nbsp;\\&nbsp; &nbsp; &nbsp;  \\\n  &nbsp; 3&nbsp; &nbsp; &nbsp; &nbsp; 8\n<strong>Output: </strong>2 3 5 7 8\n</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>&nbsp; &nbsp; &nbsp;30\n &nbsp; &nbsp;&nbsp;/\n &nbsp; 10\n &nbsp; &nbsp; \\\n &nbsp;  &nbsp;20\n<strong>Output: </strong>10 20 30\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>inOrder()&nbsp;</strong>that takes the root of the BST as input parameter and returns a list of integers containing the in-order traversal of the BST.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N), where N = Number of nodes in BST<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(Height of the BST).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= Number of nodes &lt;= 100<br />\n1 &lt;= Value of a node<sub>&nbsp;</sub>&lt;= 100</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST), traverse it in an in-order fashion. In-order traversal visits nodes in the order: Left subtree, Current Node, Right subtree. The traversal should be performed recursively.",
                "constraints": [
                    "1 <= Number of nodes <= 100",
                    "1 <= Value of a node <= 100"
                ],
                "testcases": [
                    {
                        "input": "     5\n    /   \\\n   2     7\n    \\      \\\n     3      8",
                        "output": "2 3 5 7 8",
                        "explanation": null
                    },
                    {
                        "input": "    30\n   /\n  10\n   \\\n    20",
                        "output": "10 20 30",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Back-end complete function Template for C\n\n// global array variable to store inorder traversal\n// Do not delete this variable\nint res[100000];\n\n// Function to find the inorder traversal of the tree.\nvoid inOrderUtil(struct Node* node, int* i) {\n    if (node == NULL) return;\n\n    /* then recur on left sutree */\n    inOrderUtil(node->left, i);\n\n    /* print data of node */\n    res[(*i)] = node->data;\n    (*i) = (*i) + 1;\n\n    /* now recur on right subtree */\n    inOrderUtil(node->right, i);\n}\n\n// Function to return a list containing the inorder traversal of the tree.\nint* inOrder(struct Node* root) {\n    int ind = 0;\n    inOrderUtil(root, &ind);\n    return res;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\n// Function to find the inorder traversal of the BST.\nvoid inorderUtil(Node *root, vector<int> &res) {\n    // inorder traversal works on Left Root Right.\n\n    // if root is null then we simply return.\n    if (root == NULL) return;\n\n    // first, we call the recursive function for left subtree.\n    inorderUtil(root->left, res);\n    // then we store the data at root in a list.\n    res.push_back(root->data);\n    // then we call the recursive function for right subtree.\n    inorderUtil(root->right, res);\n}\n\n// Function to return a list containing the inorder traversal of the BST.\nvector<int> inOrder(Node *root) {\n    vector<int> res;\n    inorderUtil(root, res);\n    // returning the list.\n    return res;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Tree {\n    // Function to find the inorder traversal of the BST.\n    void inorderUtil(Node root, ArrayList<Integer> res) {\n        // inorder traversal works on Left Root Right.\n\n        // if root is null then we simply return.\n        if (root == null) {\n            return;\n        }\n\n        // first, we call the recursive function for left subtree.\n        inorderUtil(root.left, res);\n        // then we store the data at root in a list.\n        res.add(root.data);\n        // then we call the recursive function for right subtree.\n        inorderUtil(root.right, res);\n    }\n\n    // Function to return a list containing the inorder traversal of the BST.\n    ArrayList<Integer> inOrder(Node root) {\n        ArrayList<Integer> res = new ArrayList<Integer>(0);\n        inorderUtil(root, res);\n        // returning the list.\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n#Function to find the inorder traversal of the BST.\ndef inorderUtil (root, res):\n    \n    #inorder traversal works on Left Root Right.\n          \n    #if root is null then we simply return.\n    if root is None: \n        return\n    \n    #first, we call the recursive function for left subtree.\n    inorderUtil(root.left, res)\n    #then we store the data at root in a list.\n    res.append (root.data)\n    #then we call the recursive function for right subtree.\n    inorderUtil(root.right, res) \n\n#Function to return a list containing the inorder traversal of the BST.\ndef inOrder(root):\n    res = []\n    inorderUtil (root, res)\n    #returning the list.\n    return res\n\n\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\n\nclass Solution\n{\n    // Function to find the inorder traversal of the BST.\n    void inorderUtil(Node root, ref List<int> res) {\n        // inorder traversal works on Left Root Right.\n    \n        // if root is null then we simply return.\n        if (root == null) return;\n    \n        // first, we call the recursive function for left subtree.\n        inorderUtil(root.left,ref res);\n        // then we store the data at root in a list.\n        res.Add(root.data);\n        // then we call the recursive function for right subtree.\n        inorderUtil(root.right,ref res);\n    }\n    // Function to return a list containing the inorder traversal of the BST.\n    public List<int> inOrder(Node root)\n    {\n        List<int> res = new List<int> ();\n        inorderUtil(root,ref res);\n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n * @returns {number[]}\n*/\n\nclass Solution {\n    // Function to find the inorder traversal of the BST.\n    inorderUtil(root, res) {\n        // inorder traversal works on Left Root Right.\n\n        // if root is null then we simply return.\n        if (root === null) return;\n\n        // first, we call the recursive function for left subtree.\n        this.inorderUtil(root.left, res);\n        // then we store the data at root in a list.\n        res.push(root.data);\n        // then we call the recursive function for right subtree.\n        this.inorderUtil(root.right, res);\n    }\n\n    // Function to return a list containing the inorder traversal of the BST.\n    inOrder(root) {\n        let res = [];\n        this.inorderUtil(root, res);\n        // returning the list.\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}