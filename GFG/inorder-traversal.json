{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700135,
            "title": "Inorder Traversal",
            "titleSlug": "inorder-traversal",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree, your task is to return its In-Order Traversal.</span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">An <strong>inorder traversal</strong> first visits the left child (including its entire subtree), then visits the node, and finally visits the right child (including its entire subtree).</span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong>Follow Up:</strong> Try solving this with O(1) auxiliary space.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root[] = [1, 2, 3, 4, 5] \n\\t<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/886461/Web/Other/blobid0_1738561309.png\" alt=\"\" width=\"288\" height=\"253\" />\n<strong>Output: </strong>[4, 2, 5, 1, 3]<br /><strong>Explanation:</strong> The in-order traversal of the given binary tree is [4, 2, 5, 1, 3].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root[] = [8, 1, 5, N, 7, 10, 6, N, 10, 6]\n\\t<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/886461/Web/Other/blobid1_1738561309.png\" alt=\"\" width=\"285\" height=\"254\" />\n<strong>Output: </strong>[1, 7, 10, 8, 6, 10, 5, 6]<br /><strong>Explanation:</strong> The in-order traversal of the given binary tree is <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">[</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1, 7, 10, 8, 6, 10, 5, 6].</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1 &lt;= number of nodes &lt;= 10<sup>5</sup><br /></span></li>\n<li><span style=\"font-size: 18px;\">0 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, return its In-Order Traversal.\n\nAn inorder traversal visits the left child (including its entire subtree), then the node itself, and finally the right child (including its entire subtree).\n\nFollow Up: Try solving this with O(1) auxiliary space.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "0 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root[] = [1, 2, 3, 4, 5]",
                        "output": "[4, 2, 5, 1, 3]",
                        "explanation": "The in-order traversal of the given binary tree is [4, 2, 5, 1, 3]."
                    },
                    {
                        "input": "root[] = [8, 1, 5, N, 7, 10, 6, N, 10, 6]",
                        "output": "[1, 7, 10, 8, 6, 10, 5, 6]",
                        "explanation": "The in-order traversal of the given binary tree is [1, 7, 10, 8, 6, 10, 5, 6]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Traverse in left, root, right.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "snapdeal",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "\n// Function for inorder traversal using Morris Traversal\nvoid inOrder(struct Node* root, int res[]) {\n    struct Node* curr = root;\n    int index = 0;\n    while (curr != NULL) {\n        if (curr->left == NULL) {\n\n            // If no left child, store this\n            // node's data and go right\n            res[index++] = curr->data;\n            curr = curr->right;\n        } else {\n\n            // Find the inorder predecessor of curr\n            struct Node* prev = curr->left;\n            while (prev->right != NULL && prev->right != curr) {\n                prev = prev->right;\n            }\n\n            // Make curr the right child of its\n            // inorder predecessor\n            if (prev->right == NULL) {\n                prev->right = curr;\n                curr = curr->left;\n            } else {\n\n                // Revert the changes made in the tree\n                // structure\n                prev->right = NULL;\n                res[index++] = curr->data;\n                curr = curr->right;\n            }\n        }\n    }\n}\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "/*\n// Tree Node\nclass Node {\n  public:\n    int data;\n    Node* left;\n    Node* right;\n\n    // Constructor to initialize a new node\n    Node(int val) {\n        data = val;\n        left = NULL;\n        right = NULL;\n    }\n};\n*/\nclass Solution {\n  public:\n    // Function for inorder traversal\n    // using Morris Traversal\n    vector<int> inOrder(Node* root) {\n        vector<int> res;\n        Node* curr = root;\n\n        while (curr != nullptr) {\n            if (curr->left == nullptr) {\n\n                // If no left child, visit this node\n                // and go right\n                res.push_back(curr->data);\n                curr = curr->right;\n            } else {\n\n                // Find the inorder predecessor of curr\n                Node* prev = curr->left;\n                while (prev->right != nullptr && prev->right != curr) {\n                    prev = prev->right;\n                }\n\n                // Make curr the right child of its\n                // inorder predecessor\n                if (prev->right == nullptr) {\n                    prev->right = curr;\n                    curr = curr->left;\n                } else {\n\n                    // Revert the changes made in\n                    // the tree structure\n                    prev->right = nullptr;\n                    res.push_back(curr->data);\n                    curr = curr->right;\n                }\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "/* A Binary Tree node\n\nclass Node {\n    int data;\n    Node left, right;\n   Node(int item)    {\n        data = item;\n        left = right = null;\n    }\n} */\nclass Solution {\n    // Function for inorder traversal\n    // using Morris Traversal\n    static ArrayList<Integer> inOrder(Node root) {\n        ArrayList<Integer> res = new ArrayList<>();\n        Node curr = root;\n\n        while (curr != null) {\n            if (curr.left == null) {\n\n                // If no left child, visit this node\n                // and go right\n                res.add(curr.data);\n                curr = curr.right;\n            } else {\n\n                // Find the inorder predecessor of curr\n                Node prev = curr.left;\n                while (prev.right != null && prev.right != curr) {\n                    prev = prev.right;\n                }\n\n                // Make curr the right child of its\n                // inorder predecessor\n                if (prev.right == null) {\n                    prev.right = curr;\n                    curr = curr.left;\n                } else {\n\n                    // Revert the changes made in\n                    // the tree structure\n                    prev.right = null;\n                    res.add(curr.data);\n                    curr = curr.right;\n                }\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "'''\n# Node Class:\nclass Node:\n    def init(self,val):\n        self.data = val\n        self.left = None\n        self.right = None\n'''\n\n\nclass Solution:\n    # Function for inorder traversal using\n    # Morris Traversal\n    def inOrder(self, root):\n        res = []\n        curr = root\n\n        while curr is not None:\n            if curr.left is None:\n\n                # If no left child, visit this node\n                # and go right\n                res.append(curr.data)\n                curr = curr.right\n            else:\n\n                # Find the inorder predecessor of curr\n                prev = curr.left\n                while prev.right is not None \\\n                and prev.right != curr:\n                    prev = prev.right\n\n                # Make curr the right child of its\n                # inorder predecessor\n                if prev.right is None:\n                    prev.right = curr\n                    curr = curr.left\n                else:\n\n                    # Revert the changes made in the\n                    # tree structure\n                    prev.right = None\n                    res.append(curr.data)\n                    curr = curr.right\n\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "/*\nclass Node\n    {\n        public int data;\n        public Node left;\n        public Node right;\n\n        public Node(int key)\n        {\n            this.data = key;\n            this.left = null;\n            this.right = null;\n        }\n    }\n*/\n\nclass Solution {\n    // Function for inorder traversal using\n    // Morris Traversal\n    public List<int> inOrder(Node root) {\n        List<int> res = new List<int>();\n        Node curr = root;\n\n        while (curr != null) {\n            if (curr.left == null) {\n\n                // If no left child, visit this\n                // node and go right\n                res.Add(curr.data);\n                curr = curr.right;\n            } else {\n\n                // Find the inorder predecessor of curr\n                Node prev = curr.left;\n                while (prev.right != null && prev.right != curr) {\n                    prev = prev.right;\n                }\n\n                // Make curr the right child of its\n                // inorder predecessor\n                if (prev.right == null) {\n                    prev.right = curr;\n                    curr = curr.left;\n                } else {\n\n                    // Revert the changes made in\n                    // the tree structure\n                    prev.right = null;\n                    res.Add(curr.data);\n                    curr = curr.right;\n                }\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n * @returns {number[]}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function for inorder traversal using\n    // Morris Traversal\n    inOrder(root) {\n        let res = [];\n        let curr = root;\n\n        while (curr !== null) {\n            if (curr.left === null) {\n\n                // If no left child, visit this\n                // node and go right\n                res.push(curr.data);\n                curr = curr.right;\n            } else {\n\n                // Find the inorder predecessor of curr\n                let prev = curr.left;\n                while (prev.right !== null && prev.right !== curr) {\n                    prev = prev.right;\n                }\n\n                // Make curr the right child of its\n                // inorder predecessor\n                if (prev.right === null) {\n                    prev.right = curr;\n                    curr = curr.left;\n                } else {\n\n                    // Revert the changes made in the\n                    // tree structure\n                    prev.right = null;\n                    res.push(curr.data);\n                    curr = curr.right;\n                }\n            }\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}