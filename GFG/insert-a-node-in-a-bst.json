{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700216,
            "title": "Insert a node in a BST",
            "titleSlug": "insert-a-node-in-a-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>BST</strong>(Binary Search Tree)&nbsp;and a key <strong>key</strong>. If the key is not present in the BST, Insert a new node with a value equal to the key into the BST. If the key </span><span style=\"font-size: 18px;\">is already present in the BST, don't modify the BST. R</span><span style=\"font-size: 18px;\">eturn the root of the modified BST after inserting the key.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:&nbsp;</strong>The generated output contains the in-order traversal of the modified tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>key = 4\n&nbsp; &nbsp; &nbsp;2\n&nbsp;  /&nbsp;&nbsp; \\ &nbsp; <br />  1&nbsp;  &nbsp; 3\n<strong>Output: </strong>1 2 3 4<strong>\nExplanation: </strong>After inserting the node 4 Inorder traversal will be 1 2 3 4.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>key = 4\n  &nbsp; &nbsp; &nbsp;&nbsp;2\n&nbsp; &nbsp; &nbsp;&nbsp;/&nbsp;&nbsp; \\\n &nbsp; &nbsp; 1 &nbsp; &nbsp; 3\n &nbsp;  &nbsp; &nbsp; &nbsp;   &nbsp;\\\n &nbsp;  &nbsp;&nbsp; &nbsp; &nbsp;   &nbsp;6\n<strong>Output: </strong>1 2 3 4 6<strong>\nExplanation: </strong>After inserting the node 4 Inorder traversal of the above tree will be 1 2 3 4 6.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>key = 2\n&nbsp; &nbsp; &nbsp;2\n&nbsp;  /&nbsp;&nbsp; \\ &nbsp; <br />  1&nbsp;  &nbsp; 3\n<strong>Output: </strong>1 2 3 <strong>\nExplanation:</strong> Node with key=2 already present in BST, Inorder traversal will be 1 2 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= node-&gt;data &lt;= 10<sup>9</sup></span><br /><span style=\"font-size: 18px;\">1 &lt;= key &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and a key, insert a new node with the key's value into the BST if the key is not already present. If the key is present, the BST should remain unchanged. Return the root of the modified BST after the insertion.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node data <= 10^9",
                    "1 <= key <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "BST: \n   2\n  /  \\\n 1    3\nkey = 4",
                        "output": "1 2 3 4",
                        "explanation": "The key 4 is not present in the original BST. After inserting 4, the inorder traversal becomes 1 2 3 4."
                    },
                    {
                        "input": "BST: \n      2\n     /  \\\n    1    3\n         \\\n          6\nkey = 4",
                        "output": "1 2 3 4 6",
                        "explanation": "The key 4 is not present in the original BST. After inserting 4, the inorder traversal becomes 1 2 3 4 6."
                    },
                    {
                        "input": "BST: \n   2\n  /  \\\n 1    3\nkey = 2",
                        "output": "1 2 3",
                        "explanation": "The key 2 is already present in the BST. The BST remains unchanged, so the inorder traversal remains 1 2 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Recursively insert a new node into the BST by comparing the data and placing it in the left or right subtree based on the comparison.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Design-Pattern",
                "slug": "design-pattern"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "accolite",
            "amazon",
            "microsoft",
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Back-end complete function Template for C\r\n\r\n// Function to search a struct node in BST.\r\n\r\nbool search(struct Node* root, int x) {\r\n    // base case\r\n    if (root == NULL) return false;\r\n\r\n    // if data at current struct node is equal to x, we return true.\r\n    if (root->data == x) return true;\r\n\r\n    // if data at the current struct node is less than given value, we call the\r\n    // function recursively to search in right subtree.\r\n    if (root->data < x) return search(root->right, x);\r\n\r\n    // else we call the function recursively to search in left subtree.\r\n    return search(root->left, x);\r\n}\r\n\r\nvoid insert_key(struct Node* root, int key) {\r\n    bool is_present = search(root, key);\r\n\r\n    if (!is_present) {\r\n        insert_node(root, key);\r\n    }\r\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node* insert(Node* node, int key) {\n        // if node is null, we return a new node with the given key.\n        if (node == nullptr) {\n            return new Node(key);\n        }\n\n        // if the given key is less than the node's data, insert in the left subtree.\n        if (key < node->data) {\n            node->left = insert(node->left, key);\n        }\n        // if the given key is greater than the node's data, insert in the right\n        // subtree.\n        else if (key > node->data) {\n            node->right = insert(node->right, key);\n        }\n\n        // return the node pointer after insertion\n        return node;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    // Function to insert a node in a BST.\r\n    Node insert(Node root, int key) {\r\n        // if node is null, we return a new node with given data.\r\n        if (root == null) return new Node(key);\r\n\r\n        // if given data is less than data at the current node, we call the\r\n        // function recursively to insert new node in left subtree.\r\n        if (key < root.data) root.left = insert(root.left, key);\r\n\r\n        // else if given data is more than data at the current node, we call the\r\n        // function recursively to insert new node in right subtree.\r\n        else if (key > root.data)\r\n            root.right = insert(root.right, key);\r\n\r\n        return root;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to insert a node in a BST.\n    def insert(self, root, key):\n        if (root.data == key):\n            return\n\n        #if given data is less than data at the current node, we call the\n        #function recursively to insert new node in left subtree.\n        elif (root.data > key):\n            if (root.left):\n                self.insert(root.left, key)\n            else:\n                root.left = Node(key)\n\n        #else if given data is more than data at the current node, we call the\n        #function recursively to insert new node in right subtree.\n        elif (root.data < key):\n            if (root.right):\n                self.insert(root.right, key)\n            else:\n                root.right = Node(key)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// Back-end complete function Template for csharp\r\n\r\nclass Solution {\r\n    // Function to insert a node in a BST.\r\n  public\r\n    Node insert(Node node, int key) {\r\n        // if node is null, we return a new node with given data.\r\n        if (node == null) return new Node(key);\r\n\r\n        // if given data is less than data at the current node, we call the\r\n        // function recursively to insert new node in left subtree.\r\n        if (key < node.data) node.left = insert(node.left, key);\r\n\r\n        // else if given data is more than data at the current node, we call the\r\n        // function recursively to insert new node in right subtree.\r\n        else if (key > node.data)\r\n            node.right = insert(node.right, key);\r\n\r\n        return node;\r\n    }\r\n}\r\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} node\n * @param {number} data\n * @returns {Node}\n */\n\nclass Solution {\n    // Function to insert a node in a BST.\n    insert(node, key) {\n        // if node is null, we return a new node with given data.\n        if (node === null) return new Node(key);\n\n        // if given data is less than data at the current node, we call the\n        // function recursively to insert new node in left subtree.\n        if (key < node.data) node.left = this.insert(node.left, key);\n\n        // else if given data is more than data at the current node, we call the\n        // function recursively to insert new node in right subtree.\n        else if (key > node.data)\n            node.right = this.insert(node.right, key);\n\n        return node;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}