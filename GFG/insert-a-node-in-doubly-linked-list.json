{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700232,
            "title": "Doubly linked list Insertion at given position",
            "titleSlug": "insert-a-node-in-doubly-linked-list",
            "content": "<p><span style=\"font-size: 12pt;\">Given a doubly-linked list, a&nbsp;position <strong>p,</strong>&nbsp;and an integer <strong>x.</strong> The task is to add a&nbsp;new node with value <strong>x</strong> at the position just after <strong>p<sup>th</sup></strong> node in the doubly linked list and return the head of the updated list.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>LinkedList: 2&lt;-&gt;4&lt;-&gt;5, p = 2, x = 6 \n<strong>Output: </strong>2&lt;-&gt;4&lt;-&gt;5&lt;-&gt;6<strong>\nExplanation: </strong>p = 2, and x = 6. So, 6 is inserted after p, i.e, at position 2 (0-based indexing).\n</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>LinkedList: 1&lt;-&gt;2&lt;-&gt;3&lt;-&gt;4, p = 0, x = 44\n<strong>Output: </strong>1&lt;-&gt;44&lt;-&gt;2&lt;-&gt;3&lt;-&gt;4<strong>\nExplanation: </strong>p = 0, and x = 44 . So, 44 is inserted after p, i.e, at position 0 (0-based indexing).</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />0 &lt;= <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">p &lt; </span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">size of doubly linked list &lt;= 10<sup>6<br /></sup></span></span><span style=\"font-size: 12pt;\">1 &lt;= x<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;&lt;= 10</span><sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a doubly-linked list, a position `p`, and an integer `x`, insert a new node with value `x` immediately after the `p`-th node in the list. Return the head of the updated doubly-linked list. Indexing starts from 0.",
                "constraints": [
                    "0 <= p < size of doubly linked list <= 10^6",
                    "1 <= x <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 2<->4<->5, p = 2, x = 6",
                        "output": "2<->4<->5<->6",
                        "explanation": "Insert 6 after the node at position 2 (0-based index). The linked list becomes 2<->4<->5<->6."
                    },
                    {
                        "input": "LinkedList: 1<->2<->3<->4, p = 0, x = 44",
                        "output": "1<->44<->2<->3<->4",
                        "explanation": "Insert 44 after the node at position 0 (0-based index). The linked list becomes 1<->44<->2<->3<->4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Traverse the list and maintain prev &amp; next pointer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to insert a new node at given position in doubly linked list.\n    Node *addNode(Node *head, int pos, int data) {\n        // creating and storing the new node with data in a pointer.\n        Node *newnode = new Node(data);\n        Node *cur = head;\n\n        // using another pointer to traverse the linked list till position given.\n        for (int i = 0; i < pos; i++)\n            cur = cur->next;\n\n        // if the node next to node at given position is null, we make the next\n        // as new node and new node's previous link as this current node.\n        if (cur->next == NULL) {\n            cur->next = newnode;\n            newnode->prev = cur;\n        } else {\n\n            // storing the next node to current node in link part(next) of new node.\n            newnode->next = cur->next;\n\n            // storing new node in link part(next) of current node.\n            cur->next = newnode;\n\n            // storing the new node in previous link part(prev) of the node which\n            // was next to current node initially.\n            newnode->next->prev = newnode;\n\n            // store the current node in previous link part(prev) of new node.\n            newnode->prev = cur;\n        }\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to insert a new node at given position in doubly linked list.\n    Node addNode(Node head_ref, int pos, int data) {\n\n        Node temp = head_ref;\n\n        // using a pointer to traverse the linked list till position given.\n        while (pos != 0) {\n            temp = temp.next;\n            pos--;\n        }\n        // creating and storing the new node with data in a pointer.\n        Node n = new Node(data);\n\n        // if the node next to node at given position is null, we make the next\n        // as new node and new node's previous link as this current node.\n        if (temp.next == null) {\n            n.next = null;\n            temp.next = n;\n            n.prev = temp;\n        } else {\n            // storing next node to current node in link part(next) of new node.\n            n.next = temp.next;\n\n            // storing new node in link part(next) of current node.\n            temp.next = n;\n\n            // storing the new node in previous link part(prev) of the node which\n            // was next to current node initially.\n            temp.next.prev = n;\n\n            // store the current node in previous link part(prev) of new node.\n            n.prev = temp;\n        }\n        return head_ref;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    #Function to insert a new node at given position in doubly linked list.\n    def addNode(self, head, p, data):\n\n        temp = head\n\n        #using a pointer to traverse the linked list till position given.\n        while p != 0:\n            temp = temp.next\n            p -= 1\n\n        #creating and storing the new node with data in a pointer.\n        n = Node(data)\n\n        #if the node next to node at given position is null, we make the next\n        #as new node and new node's previous link as this current node.\n        if temp.next is None:\n            n.prev = temp\n            temp.next = n\n\n        else:\n            #storing the next node to current node in link part(next) of new node.\n            n.next = temp.next\n\n            #storing new node in link part(next) of current node.\n            temp.next = n\n\n            #storing the new node in previous link part(prev) of the node which\n            #was next to current node initially.\n            temp.next.prev = n\n\n            #store the current node in previous link part(prev) of new node.\n            n.prev = temp\n\n        return head\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} head\n * @param {number} pos\n * @param {number} data\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n        this.prev = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to insert a new node at given position in doubly linked list.\n    addNode(head, pos, data) {\n        // creating and storing the new node with data.\n        let newnode = new Node(data);\n        let cur = head;\n\n        // using another pointer to traverse the linked list till position given.\n        for (let i = 0; i < pos; i++) cur = cur.next;\n\n        // if the node next to node at given position is null, we make the next\n        // as new node and new node's previous link as this current node.\n        if (cur.next === null) {\n            cur.next = newnode;\n            newnode.prev = cur;\n        } else {\n            // storing next node to current node in link part(next) of new node.\n            newnode.next = cur.next;\n\n            // storing new node in link part(next) of current node.\n            cur.next = newnode;\n\n            // storing the new node in previous link part(prev) of the node\n            // which was next to current node initially.\n            newnode.next.prev = newnode;\n\n            // store the current node in previous link part(prev) of new node.\n            newnode.prev = cur;\n        }\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}