{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709994,
            "title": "Insert an Element at the Bottom of a Stack",
            "titleSlug": "insert-an-element-at-the-bottom-of-a-stack",
            "content": "<p><span style=\"font-size: 18px;\">You are given a stack <strong>st</strong> of <strong>n</strong> integers and an element <strong>x</strong>. You have to insert <strong>x</strong> at the bottom of the given stack.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> Everywhere in this problem, the bottommost element of the stack is shown first while priniting the stack.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">n = 5\nx = 2\nst = {4,3,2,1,8}</span><strong><span style=\"font-size: 18px;\">\nOutput:\n</span></strong><span style=\"font-size: 18px;\">{2,4,3,2,1,8}</span><strong><span style=\"font-size: 18px;\">\nExplanation:\n</span></strong><span style=\"font-size: 18px;\">After insertion of 2, the final stack will be {2,4,3,2,1,8}.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">n = 3\nx = 4\nst = {5,3,1}</span><strong><span style=\"font-size: 18px;\">\nOutput:\n</span></strong><span style=\"font-size: 18px;\">{4,5,3,1}</span><strong><span style=\"font-size: 18px;\">\nExplanation:\n</span></strong><span style=\"font-size: 18px;\">After insertion of 4, the final stack will be {4,5,3,1}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function <strong>insertAtBottom()</strong> which takes a stack <strong>st </strong>and an integer <strong>x </strong>as inputs and returns the modified stack after insertion.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup><br />0 &lt;= x, elements of stack &lt;= 10<sup>9</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Can we just use the implicit stack by recursion calls?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "implementation",
                "slug": "implementation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to recursively insert an element at the bottom of a stack.\n    stack<int> recur(stack<int> &St,int X){\n         //if stack is empty, push the element X to the stack.\n        if(St.size()==0){\n            St.push(X);\n        }\n        else{\n            //store the top element of the stack in variable y.\n            int y=St.top();\n            \n            //remove the top element from the stack.\n            St.pop();\n            \n            //recursive call to insert the element X at the bottom of the stack.\n            St=recur(St,X);\n            \n            //push back the element y to the stack.\n            St.push(y);\n        }\n        return St;\n    }\n    \n    //Function to insert an element at the bottom of a stack.\n    stack<int> insertAtBottom(stack<int> St,int X){\n        //recursive call to insert the element X at the bottom of the stack.\n        St=recur(St,X);\n        return St;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public Stack<Integer> insertAtBottom(Stack<Integer> St, int X) {\n        recur(St, X);\n        return St;\n    }\n\n    public void recur(Stack<Integer> st, int x) {\n        if (st.isEmpty()) {\n            st.push(x);\n            return;\n        }\n        int p = st.pop();\n        recur(st, x);\n        st.push(p);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    def insertAtBottom(self,St,X):\n        new_stack = []\n        while St:\n            new_stack.append(St.pop())\n            \n        St.append(X)\n        while new_stack:\n            St.append(new_stack.pop())\n        return St    \n        ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {Stack} St\n * @param {number} X\n * @returns {Stack}\n*/\n\nclass Solution {\n    //Function to insert an element at the bottom of a stack.\n    insertAtBottom(St, X) {\n        let new_stack = [];\n        while (St.length > 0) {\n            new_stack.push(St.pop());\n        }\n        \n        St.push(X);\n        \n        while (new_stack.length > 0) {\n            St.push(new_stack.pop());\n        }\n        \n        return St;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}