{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700540,
            "title": "Insert in a Sorted List",
            "titleSlug": "insert-in-a-sorted-list",
            "content": "<p><span style=\"font-size: 12pt;\">Given a linked list sorted in ascending order and an integer called <strong>key</strong>, insert data in the linked list such that the list remains sorted.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>LinkedList: 25-&gt;36-&gt;47-&gt;58-&gt;69-&gt;80, key: 19\n<strong>Output: </strong>19-&gt;25-&gt;36-&gt;47-&gt;58-&gt;69-&gt;80<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700540/Web/Other/blobid0_1723796672.png\" height=\"100\" /><br /><strong>Explanation: </strong>After inserting 19 the sorted linked list will look like the one in the output.</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>LinkedList: 50-&gt;100, key: 75\n<strong>Output: </strong>50-&gt;75-&gt;100<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700540/Web/Other/blobid1_1723796680.png\" height=\"100\" /><br /><strong>Explanation: </strong>After inserting 75 the sorted linked list will look like the one in the output.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &lt;= size of linked list &lt;= 10<sup>6</sup><br />1 &lt;= data of nodes &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted linked list in ascending order and an integer 'key', insert the 'key' into the linked list such that the list remains sorted.",
                "constraints": [
                    "1 <= size of linked list <= 10^6",
                    "1 <= data of nodes <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 25->36->47->58->69->80, key: 19",
                        "output": "19->25->36->47->58->69->80",
                        "explanation": "Inserting 19 into the sorted linked list results in the order: 19->25->36->47->58->69->80."
                    },
                    {
                        "input": "LinkedList: 50->100, key: 75",
                        "output": "50->75->100",
                        "explanation": "Inserting 75 into the sorted linked list results in the order: 50->75->100."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Start traversing the nodes from the head&nbsp;and find the correct position for the new node to be inserted&nbsp;.</span></p>",
            "<p><span >After finding the correct position i for the new key node make the i-1<sup>th</sup> node point the new key and&nbsp;make new key node&nbsp;point i+1<sup>th</sup> node.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "wipro",
            "sap-labs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//\n\nclass Solution {\n  public:\n    Node* sortedInsert(Node* head, int key) {\n        Node* new_node = new Node(key);\n\n        if (head == NULL || head->data >= new_node->data) {\n            // if new node is needed at the start of list\n            new_node->next = head;\n            return new_node;\n        }\n\n        Node* current = head;\n        while (current->next != NULL && current->next->data < new_node->data)\n            current = current->next;\n        // finding a node which has lesser value than new_node\n        // but its successor should have greater (or equal) value\n\n        // inserting new_node after current node\n        new_node->next = current->next;\n        current->next = new_node;\n\n        return head;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    Node sortedInsert(Node head, int key) {\n        Node new_node = new Node(key);\n\n        if (head == null || head.data >= new_node.data) {\n            // if new node is needed at the start of list\n            new_node.next = head;\n            return new_node;\n        }\n\n        Node current = head;\n        while (current.next != null && current.next.data < new_node.data)\n            current = current.next;\n        // finding a node which has lesser value than new_node\n        // but its successor should have greater (or equal) value\n\n        // inserting new_node after current node\n        new_node.next = current.next;\n        current.next = new_node;\n\n        return head;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def sortedInsert(self, head, key):\n        new_node = Node(key)\n\n        if head is None or head.data >= key:\n            # if new node is needed at the start of list\n            new_node.next = head\n            return new_node\n\n        current = head\n\n        while (current.next is not None) and current.next.data < key:\n            current = current.next\n            # finding a node which has lesser value than new_node\n            # but its successor should have greater (or equal) value\n\n        # inserting new_node after current node\n        new_node.next = current.next\n        current.next = new_node\n\n        return head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {Node} node\n * @param {number} data\n * @return {Node} node\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n\nlet head;\nThis is method only submission.\nYou only need to complete the below method.\n*/\n\nclass Solution {\n    sortedInsert(node, key) {\n        let new_node = new Node(key);\n\n        if (node == null || node.data >= new_node.data) {\n            // if new node is needed at the start of list\n            new_node.next = node;\n            return new_node;\n        }\n\n        let current = node;\n        while (current.next != null && current.next.data < new_node.data)\n            current = current.next;\n        // finding a node which has lesser value than new_node\n        // but its successor should have greater (or equal) value\n\n        // inserting new_node after current node\n        new_node.next = current.next;\n        current.next = new_node;\n\n        return node;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}