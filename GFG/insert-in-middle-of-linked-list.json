{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700665,
            "title": "Insert in Middle of Linked List",
            "titleSlug": "insert-in-middle-of-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Given the head of a Singly Linked List and a value x. The task is to insert the key in the middle of the linked list.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList = 1-&gt;2-&gt;4 , x = 3\n<strong>Output: </strong>1-&gt;2-&gt;3-&gt;4<strong>\nExplanation: <br /></strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700665/Web/Other/blobid0_1720610262.png\" width=\"400\" height=\"200\" /><br />The new element is inserted after the current middle element in the linked list.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList = 10-&gt;20-&gt;40-&gt;50 , x = 30\n<strong>Output: </strong>10-&gt;20-&gt;30-&gt;40-&gt;50<strong>\nExplanation: <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700665/Web/Other/blobid1_1720610287.png\" width=\"400\" height=\"200\" /><br /></strong>The new element is inserted after the current middle element in the linked list and Hence, the output is 10-&gt;20-&gt;30-&gt;40-&gt;50.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>: O(n)<br /><strong>Expected Auxilliary Space</strong>: O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />0 &lt;= number of nodes &lt;= 10<sup>5<br /></sup>0 &lt;= node-&gt;data , x &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a singly linked list and a value `x`, insert `x` into the middle of the linked list.  The new node should be inserted after the current middle node.  If the list has an even number of nodes, insert after the first middle node.",
                "constraints": [
                    "0 <= number of nodes <= 10^5",
                    "0 <= node->data, x <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "LinkedList = 1->2->4 , x = 3",
                        "output": "1->2->3->4",
                        "explanation": "The list is 1->2->4. The middle element is 2. Inserting 3 after 2 results in 1->2->3->4."
                    },
                    {
                        "input": "LinkedList = 10->20->40->50 , x = 30",
                        "output": "10->20->30->40->50",
                        "explanation": "The list is 10->20->40->50. Since there are even number of elements, the first middle element is 20. Inserting 30 after 20 results in 10->20->30->40->50."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use two pointers to traverse the list, where one moves at double the speed, to find the midpoint; then insert the new node after this midpoint node</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to insert a node in the middle of the linked list.\n\nclass Solution {\n  public:\n    Node *insertInMiddle(Node *head, int x) {\n        // if list is empty, we just return the new node.\n        if (head == NULL)\n            return (new Node(x));\n        else {\n            // creating new node.\n            Node *newNode = new Node(x);\n\n            // we take two pointers one of which moves to next node in each\n            // iteration and the other moves two nodes in one iteration.\n            Node *slow = head;\n            Node *fast = head->next;\n\n            // therefore when fast will reach end, slow will be at the middle point.\n            while (fast && fast->next) {\n                slow = slow->next;\n                fast = fast->next->next;\n            }\n            // we store the next node after slow in link part of the new node.\n            newNode->next = slow->next;\n\n            // we also store the new node in link part of the slow node.\n            slow->next = newNode;\n        }\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public Node insertInMiddle(Node head, int x) {\n        if (head == null) {\n            return new Node(x);\n        } else {\n            Node newNode = new Node(x);\n            Node slow = head;\n            Node fast = head.next;\n\n            while (fast != null && fast.next != null) {\n                slow = slow.next;\n                fast = fast.next.next;\n            }\n\n            newNode.next = slow.next;\n            slow.next = newNode;\n        }\n        return head;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n#Function to insert a node in the middle of the linked list.\nclass Solution:\n\n    def insertInMiddle(self, head, x):\n        if not head:\n            return Node(x)\n        else:\n            newNode = Node(x)\n            slow = head\n            fast = head.next\n\n            while fast and fast.next:\n                slow = slow.next\n                fast = fast.next.next\n\n            newNode.next = slow.next\n            slow.next = newNode\n        return head\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    insertInMiddle(head, x) {\n        if (!head) {\n            return new Node(x);\n        } else {\n            const newNode = new Node(x);\n            let slow = head;\n            let fast = head.next;\n\n            while (fast && fast.next) {\n                slow = slow.next;\n                fast = fast.next.next;\n            }\n\n            newNode.next = slow.next;\n            slow.next = newNode;\n        }\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}