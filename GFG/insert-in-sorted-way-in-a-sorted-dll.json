{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700608,
            "title": "Insert in Sorted way in a Sorted DLL",
            "titleSlug": "insert-in-sorted-way-in-a-sorted-dll",
            "content": "<p><span style=\"font-size: 18px;\">Given a sorted doubly linked list and an element <strong>x</strong>, you need to insert the element <strong>x</strong> into the correct position in the sorted Doubly linked list(DLL).</span></p>\n<p><span style=\"font-size: 18px;\"><span class=\"selectable-text copyable-text\" style=\"caret-color: #000000;\">Note: The DLL is sorted in ascending order</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList: 3-&gt;5-&gt;8-&gt;10-&gt;12 , x = 9<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700608/Web/Other/blobid0_1721115793.png\" width=\"425\" height=\"67\" /><br /><strong>Output: </strong>3-&gt;5-&gt;8-&gt;<strong>9</strong>-&gt;10-&gt;12<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700608/Web/Other/blobid1_1721115806.png\" width=\"423\" height=\"74\" /><strong><br /></strong></span><span ><strong>Explanation: </strong>Here node 9 is inserted in the Doubly Linked-List.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList: 1-&gt;4-&gt;10-&gt;11 , x = 15<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700608/Web/Other/blobid2_1721115876.png\" width=\"342\" height=\"68\" /><br /><strong>Output: </strong></span><span style=\"font-size: 18px;\">1-&gt;4-&gt;10-&gt;11-&gt;<strong>15<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700608/Web/Other/blobid3_1721115891.png\" width=\"380\" height=\"76\" /><br /></strong></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>3<br /></sup>1 &lt;= node -&gt; data , x &lt;= 10<sup>4</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Traverse the sorted DLL, find the appropriate position for&nbsp;<code>x</code>, insert&nbsp;<code>x</code>, and adjust&nbsp;<code>prev</code>&nbsp;and&nbsp;<code>next</code>&nbsp;pointers to maintain the DLL's order.</p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node* sortedInsert(Node* head, int x) {\n        struct Node* current;\n\n        // If the list is empty, create a new node and make it the head\n        if (head == NULL)\n            return getNode(x);\n\n        // If the data to be inserted is less than or equal to the head's data,\n        // create a new node, make it the new head, and adjust the pointers accordingly\n        else if (head->data >= x) {\n            Node* newNode = getNode(x);\n            newNode->next = head;\n            head->prev = newNode;\n            head = newNode;\n        }\n\n        // For other cases, traverse the list until a node with data greater than x is\n        // found, create a new node, adjust the pointers accordingly, and insert it into\n        // the list\n        else {\n            current = head;\n            while (current->next != NULL && current->next->data < x)\n                current = current->next;\n\n            Node* newNode = getNode(x);\n            newNode->next = current->next;\n            if (current->next != NULL)\n                newNode->next->prev = newNode;\n            current->next = newNode;\n            newNode->prev = current;\n        }\n\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "/*\nclass Node {\n    int data;\n    Node prev, next;\n    Node(int data) {\n        this.data = data;\n        this.prev = this.next = null;\n    }\n}\n*/\nclass Solution {\n    public Node sortedInsert(Node head, int x) {\n        Node newNode = new Node(x);\n        if (head == null) return newNode;\n\n        if (head.data >= x) {\n            newNode.next = head;\n            head.prev = newNode;\n            return newNode;\n        }\n\n        Node current = head;\n        while (current.next != null && current.next.data < x) {\n            current = current.next;\n        }\n\n        newNode.next = current.next;\n        if (current.next != null) {\n            newNode.next.prev = newNode;\n        }\n        current.next = newNode;\n        newNode.prev = current;\n\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def sortedInsert(self, head, data):\n        new_node = Node(data)\n\n        if head is None:\n            return new_node\n\n        if data <= head.data:\n            new_node.next = head\n            head.prev = new_node\n            return new_node\n\n        current = head\n        while current.next and current.next.data < data:\n            current = current.next\n\n        new_node.next = current.next\n        if current.next:\n            current.next.prev = new_node\n        current.next = new_node\n        new_node.prev = current\n\n        return head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/*\nclass Node {\n    constructor(data) {\n        this.data = data;\n        this.prev = null;\n        this.next = null;\n    }\n}\n*/\n\nclass Solution {\n    sortedInsert(head, x) {\n        let newNode = new Node(x);\n        if (!head) return newNode;\n\n        if (head.data >= x) {\n            newNode.next = head;\n            head.prev = newNode;\n            return newNode;\n        }\n\n        let current = head;\n        while (current.next && current.next.data < x) {\n            current = current.next;\n        }\n\n        newNode.next = current.next;\n        if (current.next) {\n            current.next.prev = newNode;\n        }\n        current.next = newNode;\n        newNode.prev = current;\n\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}