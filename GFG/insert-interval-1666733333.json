{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712536,
            "title": "Insert Interval",
            "titleSlug": "insert-interval-1666733333",
            "content": "<p><span style=\"font-size: 18px;\">Geek has an array of<strong>&nbsp;</strong>non-overlapping intervals&nbsp;<strong><code>intervals</code>&nbsp;</strong>where&nbsp;<code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>&nbsp;represent the start and the end of the&nbsp;<code>i<sup>th</sup></code>&nbsp;event and&nbsp;<strong><code>intervals</code>&nbsp;</strong>is sorted in ascending order by&nbsp;<strong><code>start<sub>i</sub></code></strong>. He wants to add a new interval </span><span style=\"font-size: 18px;\"><strong>newInterval</strong>=&nbsp;</span><strong style=\"font-size: 18px;\"><code>[newStart, newEnd]</code>&nbsp;</strong><span style=\"font-size: 18px;\">where newStart and newEnd represent the start and end of this interval.</span></p>\n<p><span style=\"font-size: 18px;\">Help Geek to insert </span><span style=\"font-size: 18px;\"><strong>newInterval </strong>into&nbsp;</span><strong style=\"font-size: 18px;\"><code>intervals</code>&nbsp;</strong><span style=\"font-size: 18px;\">such that&nbsp;</span><strong style=\"font-size: 18px;\"><code>intervals</code>&nbsp;</strong><span style=\"font-size: 18px;\">is still sorted in ascending order by&nbsp;</span><code style=\"font-size: 18px;\">start<sub>i</sub></code><span style=\"font-size: 18px;\">&nbsp;and&nbsp;</span><strong style=\"font-size: 18px;\"><code>intervals</code>&nbsp;</strong><span style=\"font-size: 18px;\">still does not have any overlapping intervals (merge overlapping intervals if necessary).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>intervals = [[1,3], [4,5], [6,7], [8,10]], newInterval = [5,6]\n<strong>Output: </strong>[[1,3], [4,7], [8,10]]\n<strong>Explanation: </strong>The newInterval [5,6] overlaps with [4,5] and [6,7].</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,9]\n<strong>Output: </strong>[[1,2], [3,10], [12,16]]\n<strong>Explanation: </strong>The new interval [4,9] overlaps with [3,5],[6,7],[8,10].</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; intervals.size() &le;&nbsp; 10<sup>5</sup><br />0 &le; start[i], end[i]&nbsp;&le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of non-overlapping intervals `intervals`, sorted in ascending order by start time, and a new interval `newInterval = [newStart, newEnd]`, insert `newInterval` into `intervals`. Ensure that `intervals` remains sorted by start time and that there are no overlapping intervals. Merge overlapping intervals if necessary.",
                "constraints": [
                    "1 <= intervals.size() <= 10^5",
                    "0 <= start[i], end[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "intervals = [[1,3], [4,5], [6,7], [8,10]], newInterval = [5,6]",
                        "output": "[[1,3], [4,7], [8,10]]",
                        "explanation": "The new interval [5,6] overlaps with [4,5] and [6,7], resulting in the merged interval [4,7]."
                    },
                    {
                        "input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,9]",
                        "output": "[[1,2], [3,10], [12,16]]",
                        "explanation": "The new interval [4,9] overlaps with [3,5], [6,7], and [8,10], resulting in the merged interval [3,10]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse through the intervals, add non-overlapping ones to the result, merge overlapping ones with the new interval, and then insert the merged interval back into the list.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\n// Function to insert a new interval into a set of intervals\nInterval* insertInterval(Interval* intervals, int intervalsSize, Interval newInterval,\n                         int* returnSize) {\n    Interval* result = (Interval*)malloc((intervalsSize + 1) * sizeof(Interval));\n    int index = 0;\n    int i = 0;\n\n    // Add all intervals that end before the new interval starts\n    while (i < intervalsSize && intervals[i].end < newInterval.start) {\n        result[index++] = intervals[i++];\n    }\n\n    // Merge overlapping intervals with the new interval\n    while (i < intervalsSize && intervals[i].start <= newInterval.end) {\n        newInterval.start = (newInterval.start < intervals[i].start)\n                                ? newInterval.start\n                                : intervals[i].start;\n        newInterval.end =\n            (newInterval.end > intervals[i].end) ? newInterval.end : intervals[i].end;\n        i++;\n    }\n    result[index++] = newInterval;\n\n    // Add remaining intervals\n    while (i < intervalsSize) {\n        result[index++] = intervals[i++];\n    }\n\n    *returnSize = index;\n    return result;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to insert a new event into a list of intervals.\n    vector<vector<int>> insertInterval(vector<vector<int>> &intervals,\n                                       vector<int> &newEvent) {\n        int n = intervals.size();\n        int i = 0;\n        vector<vector<int>> res;\n\n        // Adding intervals that end before the new event starts.\n        while (i < n && intervals[i][1] < newEvent[0])\n            res.push_back(intervals[i++]);\n\n        // Merging intervals that overlap with the new event.\n        while (i < n && newEvent[1] >= intervals[i][0]) {\n            newEvent[0] = min(newEvent[0], intervals[i][0]);\n            newEvent[1] = max(newEvent[1], intervals[i][1]);\n            i++;\n        }\n\n        // Adding the new merged event.\n        res.push_back(newEvent);\n\n        // Adding remaining intervals.\n        while (i < n)\n            res.push_back(intervals[i++]);\n\n        // Returning the resulting list of intervals.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static ArrayList<int[]> insertInterval(int[][] intervals, int[] newInterval) {\n        // code here\n        ArrayList<int[]> result = new ArrayList<>();\n        int i = 0;\n        int n = intervals.length;\n        // add all the intervals ending before newInterval starts\n        while (i < intervals.length && intervals[i][1] < newInterval[0]) {\n            result.add(intervals[i]);\n            i++;\n        }\n\n        // merge all overlapping intervals to one considering newInterval\n        while (i < intervals.length && intervals[i][0] <= newInterval[1]) {\n            // we could mutate newInterval here also\n            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);\n            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);\n            i++;\n        }\n\n        result.add(newInterval);\n\n        // add all the rest\n        while (i < intervals.length) {\n            result.add(intervals[i]);\n            i++;\n        }\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    # Function to insert new interval into existing intervals list.\n    def insertInterval(self, intervals, newInterval):\n        ans = []\n        i = 0\n        n = len(intervals)\n        # Appending intervals that come before the new interval.\n        while i < n and newInterval[0] > intervals[i][1]:\n            ans.append(intervals[i])\n            i += 1\n\n        # Merging intervals that overlap with the new interval.\n        while i < n and intervals[i][0] <= newInterval[1]:\n            newInterval[0] = min(intervals[i][0], newInterval[0])\n            newInterval[1] = max(intervals[i][1], newInterval[1])\n            i += 1\n        ans.append(newInterval)\n\n        # Appending remaining intervals after the new interval.\n        while i < n:\n            ans.append(intervals[i])\n            i += 1\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    insertInterval(intervals, newInterval) {\n        let res = [];\n        let i = 0;\n        const n = intervals.length;\n\n        // Add all intervals that come before the new interval\n        while (i < n && intervals[i][1] < newInterval[0]) {\n            res.push(intervals[i]);\n            i++;\n        }\n\n        // Merge all overlapping intervals with the new interval\n        while (i < n && intervals[i][0] <= newInterval[1]) {\n            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);\n            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);\n            i++;\n        }\n        res.push(newInterval);\n\n        // Add all the remaining intervals\n        while (i < n) {\n            res.push(intervals[i]);\n            i++;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}