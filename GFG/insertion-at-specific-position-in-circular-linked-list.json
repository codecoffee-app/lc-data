{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 888465,
            "title": "Insertion at specific position in circular linked list",
            "titleSlug": "insertion-at-specific-position-in-circular-linked-list",
            "content": "<p><span >Given a circular linked list of size <strong>N </strong>and an integer <strong>x</strong>, your task is to insert a new node with value <strong>x </strong>at a specific position <strong>pos </strong>in the circular linked list. You are required to complete the function <strong>insertAtPosition( Node* head, int pos, int x )</strong> which accepts the head node of the circular linked list and the position <strong>pos </strong>as arguments. The function should return the updated circular linked list after the insertion.<br /></span></p>\n<p><strong><span >Note:&nbsp;</span></strong><span >The circular linked list is structured such that the last node points to the first node, creating a loop. The position pos is<strong> zero-based</strong>, and it is guaranteed that the position is valid (i.e., <strong>0&lt;= pos &lt;= N</strong> where N is the current size of the circular linked list).</span></p>\n<p><strong><span >Examples:</span></strong></p>\n<pre><strong><span >Input:&nbsp;</span></strong><span >head = [<span class=\"hljs-number\">2</span> -&gt; <span class=\"hljs-number\">3</span> -&gt; <span class=\"hljs-number\">4</span>], pos = 1, x = <span class=\"hljs-number\" style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> <br /></span></span><span ><span class=\"hljs-number\"><strong>Output: </strong></span></span><span ><span class=\"hljs-number\">2</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4<br /><strong>Explanation:&nbsp;</strong></span>The new node with data 5 is inserted at position 1. The list becomes <span class=\"hljs-number\">2 -&gt;</span>&nbsp;<span class=\"hljs-number\">5 -&gt;</span>&nbsp;<span class=\"hljs-number\">3</span> -&gt; <span class=\"hljs-number\">4</span>.<br /></span></pre>\n<pre><span ><strong>Input:</strong> head = [<span class=\"hljs-number\">2</span> -&gt; <span class=\"hljs-number\">3</span> -&gt; <span class=\"hljs-number\">4</span>], pos = 0, x = <span class=\"hljs-number\" style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1<br /></span></span><span ><span class=\"hljs-number\"><strong>Output: </strong></span></span><span ><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4<br /><strong>Explanation:&nbsp;</strong></span>The new node with data 1 is inserted at position 0, making it the new head. The list becomes 1 -&gt; 2 -&gt; 3 -&gt; 4.<br /></span></pre>\n<p><span ><strong>Constraints:<br /></strong>1 &lt;= N &lt;= 10<sup>5</sup><sup><br /></sup>0 &lt;= pos &lt;= N<sup><br /></sup>1 &lt;= node-&gt;data &lt;= 10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "struct Node* insertNodeAtPos(struct Node* head, int pos, int x) {\n    struct Node* temp = head;\n    if (pos == 0) {\n        struct Node* temp2 = head;\n        do {\n            temp = temp->next;\n        } while (temp->next != temp2);\n        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n        newNode->data = x;\n        newNode->next = temp->next;\n        temp->next = newNode;\n        head = newNode;\n        return head;\n    }\n    for (int i = 0; i < pos - 1; i++) {\n        temp = temp->next;\n    }\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = x;\n    newNode->next = temp->next;\n    temp->next = newNode;\n    return head;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    Node* insertNodeAtPos(Node* head, int pos, int x) {\n        Node* temp = head;\n        if (pos == 0) {\n            Node* temp2 = head;\n            while (true) {\n                if (temp->next == temp2)\n                    break;\n                temp = temp->next;\n            }\n            Node* newNode = new Node(x);\n            newNode->next = temp->next;\n            temp->next = newNode;\n            head = newNode;\n            return head;\n        }\n        for (int i = 0; i < pos - 1; i++) {\n            temp = temp->next;\n        }\n        Node* newNode = new Node(x);\n        newNode->next = temp->next;\n        temp->next = newNode;\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to insert a node at a specific position in the circular linked list\n    public Node insertNodeAtPos(Node head, int pos, int x) {\n        Node temp = head;\n        if (pos == 0) {\n            Node temp2 = head;\n            while (true) {\n                if (temp.next == temp2) break;\n                temp = temp.next;\n            }\n            Node newNode = new Node(x);\n            newNode.next = temp.next;\n            temp.next = newNode;\n            head = newNode;\n            return head;\n        }\n\n        for (int i = 0; i < pos - 1; i++) {\n            temp = temp.next;\n        }\n\n        Node newNode = new Node(x);\n        newNode.next = temp.next;\n        temp.next = newNode;\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def insert_node_at_pos(self, head, pos, x):\n        temp = head\n        if pos == 0:\n            while temp.next != head:\n                temp = temp.next\n            new_node = Node(x)\n            new_node.next = temp.next\n            temp.next = new_node\n            head = new_node\n            return head\n        for _ in range(pos - 1):\n            temp = temp.next\n        new_node = Node(x)\n        new_node.next = temp.next\n        temp.next = new_node\n        return head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    insertNodeAtPos(head, pos, x) {\n        let temp = head;\n        if (pos === 0) {\n            while (temp.next !== head) {\n                temp = temp.next;\n            }\n            let newNode = new Node(x);\n            newNode.next = temp.next;\n            temp.next = newNode;\n            head = newNode;\n            return head;\n        }\n        for (let i = 0; i < pos - 1; i++) {\n            temp = temp.next;\n        }\n        let newNode = new Node(x);\n        newNode.next = temp.next;\n        temp.next = newNode;\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}