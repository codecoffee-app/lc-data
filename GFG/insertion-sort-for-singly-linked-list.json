{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706394,
            "title": "Insertion Sort for Singly Linked List",
            "titleSlug": "insertion-sort-for-singly-linked-list",
            "content": "<p><span >Given a singly linked list, sort the list (in <strong>ascending</strong> order) using the <strong>insertion sort</strong> algorithm.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList: 30-&gt;23-&gt;28-&gt;30-&gt;11-&gt;14-&gt;19-&gt;16-&gt;21-&gt;25 \n<strong>Output: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">L</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">inkedList: </span>11-&gt;14-&gt;16-&gt;19-&gt;21-&gt;23-&gt;25-&gt;28-&gt;30-&gt;30<strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> <br /></strong></span><span ><strong>Explanation: </strong>The resultant linked list is sorted.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/706394/Web/Other/blobid0_1722321362.png\" width=\"394\" height=\"69\" /><br /></span></pre>\n<pre><span ><strong>Input: </strong>LinkedList: 19-&gt;20-&gt;16-&gt;24-&gt;12-&gt;29-&gt;30 \n<strong>Output: </strong>Linked List: 12 16 19 20 24 29 30 \n<strong>Explanation: </strong>The resultant linked list is sorted.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/706394/Web/Other/blobid1_1722321370.png\" width=\"394\" height=\"69\" /><br /></span></pre>\n<div><span ><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)</span></div>\n<div><span ><strong>Expected Auxiliary Space:</strong> O(1)</span></div>\n<div><span ><strong>Constraints:</strong></span></div>\n<div><span >0 &lt;= number of nodes &lt;= 10<sup>3</sup></span></div>\n<div><span ><span style=\"font-size: 18px;\">0 &lt;= node-&gt;data &lt;= 10<sup>4</sup></span></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, sort the list in ascending order using the insertion sort algorithm.",
                "constraints": [
                    "0 <= number of nodes <= 10^3",
                    "0 <= node->data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 30->23->28->30->11->14->19->16->21->25",
                        "output": "LinkedList: 11->14->16->19->21->23->25->28->30->30",
                        "explanation": "The linked list is sorted in ascending order."
                    },
                    {
                        "input": "LinkedList: 19->20->16->24->12->29->30",
                        "output": "LinkedList: 12->16->19->20->24->29->30",
                        "explanation": "The linked list is sorted in ascending order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a dummy node to help with insertion. Traverse the list, compare current and next nodes, and insert nodes in their correct position by adjusting pointers.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node* insertionSort(struct Node* head_ref) {\n        vector<int> v;\n        Node* temp = head_ref;\n        while (temp != NULL) {\n            v.push_back(temp->data);\n            temp = temp->next;\n        }\n        sort(v.begin(), v.end());\n        reverse(v.begin(), v.end());\n        Node* ans = NULL;\n        for (int i = 0; i < v.size(); i++) {\n            Node* dummy = new Node(v[i]);\n            dummy->next = ans;\n            ans = dummy;\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static Node insertionSort(Node head) {\n        if (head == null || head.next == null) return head;\n\n        Node sortedHead = new Node(-1);\n        Node currentHead = head;\n\n        while (currentHead != null) {\n            Node nextNode = currentHead.next;\n            Node dummyNode = sortedHead;\n\n            while (dummyNode.next != null && dummyNode.next.data <= currentHead.data) {\n                dummyNode = dummyNode.next;\n            }\n\n            currentHead.next = dummyNode.next;\n            dummyNode.next = currentHead;\n            currentHead = nextNode;\n        }\n        return sortedHead.next;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to perform insertion sort on a linked list.\n    def insertionSort(self, head):\n        # Return the head if it is empty or only contains one node.\n        if not head or not head.next:\n            return head\n        # Create a dummy node with a very large value and set it as the head of the sorted list.\n        dummy = Node(float('inf'))\n        dummy.next = head\n        # Initialize two pointers, pre1 and ptr1, to keep track of the previous node and the current node in the original list.\n        pre1 = head\n        ptr1 = head.next\n        # Iterate through the remaining nodes in the original list.\n        while ptr1:\n            # Initialize two pointers, pre2 and ptr2, to keep track of the previous node and the current node in the sorted list.\n            pre2 = dummy\n            ptr2 = dummy.next\n            # Find the correct position to insert the current node in the sorted list.\n            while ptr2 and ptr2 != ptr1 and ptr2.data <= ptr1.data:\n                pre2 = ptr2\n                ptr2 = ptr2.next\n            # If the current node is already in the correct position, move to the next node in the original list.\n            if ptr2 == ptr1:\n                pre1 = ptr1\n                ptr1 = ptr1.next\n            # Otherwise, insert the current node in the correct position in the sorted list.\n            else:\n                # Update the next pointer of the previous node in the sorted list to the current node.\n                pre2.next = ptr1\n                # Insert the current node between the previous node and the current node in the sorted list.\n                tmp = ptr1.next\n                ptr1.next = ptr2\n                ptr2 = ptr1\n                ptr1 = tmp\n                # Update the next pointer of the previous node in the original list to the next node.\n                pre1.next = ptr1\n        # Return the head of the sorted list.\n        return dummy.next",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to perform insertion sort on a linked list.\n    insertionSort(head) {\n        // Return the head if it is empty or only contains one node.\n        if (!head || !head.next) {\n            return head;\n        }\n        // Create a dummy node with a very large value and set it as the head of the\n        // sorted list.\n        let dummy = new Node(Number.POSITIVE_INFINITY);\n        dummy.next = head;\n        // Initialize two pointers, pre1 and ptr1, to keep track of the previous node\n        // and the current node in the original list.\n        let pre1 = head;\n        let ptr1 = head.next;\n        // Iterate through the remaining nodes in the original list.\n        while (ptr1) {\n            // Initialize two pointers, pre2 and ptr2, to keep track of the previous\n            // node and the current node in the sorted list.\n            let pre2 = dummy;\n            let ptr2 = dummy.next;\n            // Find the correct position to insert the current node in the sorted list.\n            while (ptr2 && ptr2 != ptr1 && ptr2.data <= ptr1.data) {\n                pre2 = ptr2;\n                ptr2 = ptr2.next;\n            }\n            // If the current node is already in the correct position, move to the next\n            // node in the original list.\n            if (ptr2 == ptr1) {\n                pre1 = ptr1;\n                ptr1 = ptr1.next;\n            }\n            // Otherwise, insert the current node in the correct position in the sorted\n            // list.\n            else {\n                // Update the next pointer of the previous node in the sorted list to\n                // the current node.\n                pre2.next = ptr1;\n                // Insert the current node between the previous node and the current\n                // node in the sorted list.\n                let tmp = ptr1.next;\n                ptr1.next = ptr2;\n                ptr2 = ptr1;\n                ptr1 = tmp;\n                // Update the next pointer of the previous node in the original list to\n                // the next node.\n                pre1.next = ptr1;\n            }\n        }\n        // Return the head of the sorted list.\n        return dummy.next;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}