{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700148,
            "title": "Insertion Sort",
            "titleSlug": "insertion-sort",
            "content": "<p><span style=\"font-size: 18px;\">The task is to complete the&nbsp;<strong>insertsort()</strong> function which is used to implement Insertion Sort. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [4, 1, 3, 9, 7]\n<strong>Output</strong>: [1, 3, 4, 7, 9]<br /><strong>Explanation: </strong>The sorted array will be </span><span >[1, 3, 4, 7, 9].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n<strong>Output</strong>: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br /></span><span ><strong>Explanation: </strong>The sorted array will be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [4, 1, 9]\n<strong>Output</strong>: [1, 4, 9]<br /><strong>Explanation: </strong>The sorted array will be </span><span >[1, 4, 9]</span>.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 1000<br />1 &lt;= arr[i] &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft",
            "maq-software",
            "juniper-networks",
            "cisco",
            "accenture",
            "dell",
            "veritas",
            "grofers"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void insertionSort(vector<int>& arr) {\n        int n = arr.size();\n        for (int i = 1; i < n; i++) {\n            int key = arr[i];\n            int j = i - 1;\n\n            // Move elements of arr[0..i-1], that are greater than key,\n            // to one position ahead of their current position\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j--;\n            }\n            arr[j + 1] = key;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static void insertionSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 1; i < n; i++) {\n            int key = arr[i];\n            int j = i - 1;\n\n            // Move elements of arr[0..i-1] that are greater than key\n            // to one position ahead of their current position\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j--;\n            }\n            arr[j + 1] = key;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def insertionSort(self, arr):\n        n = len(arr)\n        for i in range(1, n):\n            key = arr[i]\n            j = i - 1\n\n            # Move elements that are greater than key\n            while j >= 0 and arr[j] > key:\n                arr[j + 1] = arr[j]\n                j -= 1\n            arr[j + 1] = key\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    insertionSort(arr) {\n        let n = arr.length;\n        for (let i = 1; i < n; i++) {\n            let key = arr[i];\n            let j = i - 1;\n\n            // Move elements that are greater than key\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j--;\n            }\n            arr[j + 1] = key;\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}