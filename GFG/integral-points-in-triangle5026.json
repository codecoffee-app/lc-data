{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705472,
            "title": "Integral Points Inside Triangle",
            "titleSlug": "integral-points-in-triangle5026",
            "content": "<p><span style=\"font-size: 18px;\">Given three non-collinear points whose co-ordinates are <strong>p(p1, p2), q(q1, q2) </strong>and<strong> r(r1, r2) </strong>in the X-Y plane. Return the number of<strong> </strong>integral / lattice points strictly inside the&nbsp;triangle&nbsp;formed by these points.<br /><span style=\"text-decoration: underline;\">Note:</span> - A point in the X-Y plane is said to be an integral / lattice point if both its coordinates are integral.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>p = (0,0), q = (0,5), r = (5,0)\n<strong>Output: </strong>6\n<strong>Explanation: <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/705472/Web/Other/blobid1_1718772838.jpg\" width=\"300\" height=\"291\" /><br /></strong></span><span >As shown in figure, points (1,1) (1,2) (1,3) (2,1) (2,2) and (3,1) are the integral points inside the triangle. So total 6 are there.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>p = (62,-3), q = (5,-45), r = (-19,-23)\n<strong>Output: </strong>1129\n<strong>Explanation: </strong>There are 1129 integral points in the triangle formed by p, q and r.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(Log<sub>2</sub>10<sup>9</sup>)<br /><strong>Expected Auxillary Space:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />-10<sup>9&nbsp;</sup>&le; x-coordinate, y-coordinate &le;&nbsp;10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three non-collinear points p(p1, p2), q(q1, q2), and r(r1, r2) in the X-Y plane, determine the number of integral (lattice) points strictly inside the triangle formed by these points. A point is considered an integral or lattice point if both its x and y coordinates are integers.",
                "constraints": [
                    "-10<sup>9</sup> <= x-coordinate, y-coordinate <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "p = (0,0), q = (0,5), r = (5,0)",
                        "output": "6",
                        "explanation": "The integral points inside the triangle are (1,1), (1,2), (1,3), (2,1), (2,2), and (3,1). Therefore, there are 6 such points."
                    },
                    {
                        "input": "p = (62,-3), q = (5,-45), r = (-19,-23)",
                        "output": "1129",
                        "explanation": "There are 1129 integral points inside the triangle formed by p, q, and r."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use <strong><a href=\"https://en.wikipedia.org/wiki/Pick's_theorem\" target=\"_blank\" rel=\"noopener\">Pick's Theorem</a></strong>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Geometric",
                "slug": "geometric"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // utility function to find GCD of two numbers\n    // GCD of a and b\n    long long int gcd(long long int a, long long int b) {\n        if (b == 0) return a;\n        return gcd(b, a % b);\n    }\n\n    // Finds the no. of Integral points between\n    // two given points.\n    long long int getBoundaryCount(long long int p[], long long int q[]) {\n        // Check if line parallel to axes\n        if (p[0] == q[0]) return abs(p[1] - q[1]) - 1;\n        if (p[1] == q[1]) return abs(p[0] - q[0]) - 1;\n\n        return gcd(abs(p[0] - q[0]), abs(p[1] - q[1])) - 1;\n    }\n\n    // Returns count of points inside the triangle\n    long long int InternalCount(long long int p[], long long int q[],\n                                long long int r[]) {\n        // 3 extra integer points for the vertices\n        long long int BoundaryPoints = getBoundaryCount(p, q) +\n                                       getBoundaryCount(p, r) +\n                                       getBoundaryCount(q, r) + 3;\n\n        // Calculate 2*A for the triangle\n        long long int doubleArea = abs(\n            p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1]));\n\n        // Use Pick's theorem to calculate the no. of Interior points\n        return (doubleArea - BoundaryPoints + 2) / 2;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    // utility function to find GCD of two numbers\n    // GCD of a and b\n    long gcd(long a, long b) {\n        if (b == 0) return a;\n        return gcd(b, a % b);\n    }\n\n    // Finds the no. of Integral points between\n    // two given points.\n    long getBoundaryCount(long p[], long q[]) {\n        // Check if line parallel to axes\n        if (p[0] == q[0]) return Math.abs(p[1] - q[1]) - 1;\n        if (p[1] == q[1]) return Math.abs(p[0] - q[0]) - 1;\n\n        return gcd(Math.abs(p[0] - q[0]), Math.abs(p[1] - q[1])) - 1;\n    }\n\n    // Returns count of points inside the triangle\n    long InternalCount(long p[], long q[], long r[]) {\n        // 3 extra integer points for the vertices\n        long BoundaryPoints = getBoundaryCount(p, q) + getBoundaryCount(p, r) +\n                              getBoundaryCount(q, r) + 3;\n\n        // Calculate 2*A for the triangle\n        long doubleArea = Math.abs(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) +\n                                   r[0] * (p[1] - q[1]));\n\n        // Use Pick's theorem to calculate the no. of Interior points\n        return (doubleArea - BoundaryPoints + 2) / 2;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #utility function to find GCD of two numbers\n    #GCD of a and b\n    def gcd(self, a, b):\n        if (b == 0):\n            return a\n        return self.gcd(b, a%b)\n\n    # Finds the no. of Integral points between\n    # two given points.\n    def getBoundaryCount(self, p, q):\n        # Check if line parallel to axes\n        if p[0]==q[0]:\n            return abs(p[1] - q[1]) - 1\n        if p[1] == q[1]:\n            return abs(p[0]-q[0]) - 1\n        return self.gcd(abs(p[0]-q[0]),abs(p[1]-q[1]))-1\n\n    # Returns count of points inside the triangle\n    def InternalCount(self, p, q, r):\n        # 3 extra integer points for the vertices\n        BoundaryPoints = self.getBoundaryCount(p, q) + self.getBoundaryCount(p, r) + self.getBoundaryCount(q, r) + 3;\n\n        # Calculate 2*A for the triangle\n        doubleArea = abs(p[0]*(q[1] - r[1]) + q[0]*(r[1] - p[1])  +  r[0]*(p[1] - q[1]))\n\n        # Use Pick's theorem to calculate the no. of Interior points\n        return (doubleArea - BoundaryPoints + 2)//2",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Utility function to find GCD of two numbers\n    gcd(a, b) {\n        if (b === BigInt(0)) return a;\n        return this.gcd(b, a % b);\n    }\n\n    // Helper function to get the absolute value of a BigInt\n    abs(x) { return x < BigInt(0) ? -x : x; }\n\n    // Finds the number of integral points between two given points\n    getBoundaryCount(p, q) {\n        // Check if line is parallel to axes\n        if (p[0] === q[0]) return this.abs(p[1] - q[1]) - BigInt(1);\n        if (p[1] === q[1]) return this.abs(p[0] - q[0]) - BigInt(1);\n\n        return this.gcd(this.abs(p[0] - q[0]), this.abs(p[1] - q[1])) - BigInt(1);\n    }\n\n    // Returns count of points inside the triangle\n    InternalCount(p, q, r) {\n        // 3 extra integer points for the vertices\n        const boundaryPoints = this.getBoundaryCount(p, q) +\n                               this.getBoundaryCount(p, r) +\n                               this.getBoundaryCount(q, r) + BigInt(3);\n\n        // Calculate 2*A for the triangle\n        const doubleArea = this.abs(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) +\n                                    r[0] * (p[1] - q[1]));\n\n        // Use Pick's theorem to calculate the number of interior points\n        return (doubleArea - boundaryPoints + BigInt(2)) / BigInt(2);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}