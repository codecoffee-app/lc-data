{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705562,
            "title": "Interesting Patterns",
            "titleSlug": "interesting-patterns1430",
            "content": "<p><span style=\"font-size:18px\">Given an integer <strong>N</strong>. Your task is to identify the pattern from the Examples and print the pattern.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>E</strong><strong>xample 1:</strong></span><span style=\"font-size:18px\"> </span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:</span>\n<span style=\"font-size:18px\"><strong>N = </strong>4</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">4444444 \n4333334 \n4322234 \n4321234 \n4322234 \n4333334 \n4444444</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>E</strong><strong>xample 2:</strong></span><span style=\"font-size:18px\"> </span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:</span>\n<span style=\"font-size:18px\"><strong>N = </strong>3</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span><span style=\"font-size:18px\">\n33333 \n32223 \n32123 \n32223 \n33333</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>interestingPattern()</strong> which takes an Integer N as input and returns a vector of strings where each line representins each line of the pattern. For example, if N = 3, you have to return a vector v = {&quot;33333&quot;, &quot;32223&quot;, &quot;32123&quot;, &quot;32223&quot;, &quot;33333&quot;}.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= N &lt;&nbsp;10</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, generate a pattern as shown in the examples. The pattern is a square matrix of size (2N-1) x (2N-1). The outermost layer consists of N, the next layer consists of N-1, and so on, until the innermost element is 1. The pattern is symmetrical around the center.",
                "constraints": [
                    "1 <= N <= 10"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "4444444\n4333334\n4322234\n4321234\n4322234\n4333334\n4444444",
                        "explanation": null
                    },
                    {
                        "input": "3",
                        "output": "33333\n32223\n32123\n32223\n33333",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">There will always be (2*N - 1) lines in the pattern.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "pattern-printing",
                "slug": "pattern-printing"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    vector<string> interestingPattern(int N) {\n        \n        vector<string> ans(2*N-1); //Create a vector to store the pattern\n        \n        int k = 0; //Initialize a counter variable\n        \n        //Loop to generate the top half of the pattern\n        for(int i=N; i>=1; i--)\n        {\n            if(i==1) //If it is the last row, generate the pattern without repetition\n            {\n                string s;\n                for(int j=N; j>=1; j--)\n                    s += to_string(j);\n                for(int j=2; j<=N; j++)\n                    s += to_string(j);\n                    \n                ans[k] = s; //Store the pattern in the vector\n            }\n            \n            else //For other rows, generate the pattern with repetition\n            {\n                string s;\n                for(int j=N; j>=i; j--)\n                    s += to_string(j);\n                int x = i-2;\n                for(int j=0; j<x; j++)\n                    s += to_string(i);\n                    \n                string s1 = s;\n                reverse(s1.begin(), s1.end()); \n                \n                s += to_string(i);\n                s += s1;\n                \n                ans[k] = s; //Store the pattern in the vector\n            }\n            k++; //Increment the counter\n        }\n\n        //Loop to generate the bottom half of the pattern by copying rows from the top half in reverse order\n        for(int i=N; i<2*N-1; i++)\n            ans[i] = ans[2*N-i-2];\n        \n        return ans; //Return the generated pattern\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}