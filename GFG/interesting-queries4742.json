{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705734,
            "title": "Interesting Queries",
            "titleSlug": "interesting-queries4742",
            "content": "<p><span style=\"font-size:18px\">Given an array nums<strong>&nbsp;</strong>of n&nbsp;elements and q queries . Each query consists of two integers l and r .&nbsp;You task is to find&nbsp;the number of elements of nums[]&nbsp;in range [l,r] which&nbsp;occur atleast k&nbsp;times.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>nums = {1,1,2,1,3}, Queries = {{1,5},\r\n{2,4}}, k = 1\r\n<strong>Output: </strong>{3,2}\r\n<strong>Explanation: </strong>For the 1st query, from l=1 to r=5\r\n1, 2 and 3 have the frequency atleast 1.\r\nFor the second query, from l=2 to r=4, 1 and 2 have \r\nthe frequency atleast 1.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>nums = {1,2,3,1}, Queries = {{1,4},\r\n{2,4},{4,4}, k = 2\r\n<strong>Output: </strong>{1,0,0}\r\n<strong>Explanation: </strong>For the 1st query, from l=1 to r=4\r\n1 have the frequency atleast 2.\r\nFor the second query, from l=2 to r=4, no number has \r\nthe frequency atleast 2.\r\nFor the third query, from l=4 to r=4, no number has \r\nthe frequency atleast 2.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">Your task is to complete the function&nbsp;<strong>solveQueries()&nbsp;</strong>which takes nums, Queries and k as input parameter and returns a list containg the answer for each query.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n*sqrt(n)*log(n))<br />\r\n<strong>Expected Space Compelxity:&nbsp;</strong>O(n)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= n, no of Queries, k &lt;= 10<sup>4</sup><br />\r\n1 &lt;= nums[i] &lt;= 10<sup>3</sup></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1 &lt;= Queries[i][0] &lt;= Queries[i][1] &lt;= n</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `nums` of n elements and q queries. Each query consists of two integers l and r. Your task is to find the number of elements of `nums[]` in the range [l, r] which occur at least k times.",
                "constraints": [
                    "1 <= n, number of Queries, k <= 10^4",
                    "1 <= nums[i] <= 10^3",
                    "1 <= Queries[i][0] <= Queries[i][1] <= n"
                ],
                "testcases": [
                    {
                        "input": "nums = {1,1,2,1,3}, Queries = {{1,5},{2,4}}, k = 1",
                        "output": "{3,2}",
                        "explanation": "For the 1st query, the range is from index 1 to 5 (inclusive, assuming 1-based indexing). The numbers 1, 2, and 3 each appear at least once in this range.\nFor the 2nd query, the range is from index 2 to 4 (inclusive, assuming 1-based indexing). The numbers 1 and 2 each appear at least once in this range."
                    },
                    {
                        "input": "nums = {1,2,3,1}, Queries = {{1,4},{2,4},{4,4}}, k = 2",
                        "output": "{1,0,0}",
                        "explanation": "For the 1st query, the range is from index 1 to 4. Only the number 1 appears at least twice in this range.\nFor the 2nd query, the range is from index 2 to 4. No number appears at least twice in this range.\nFor the 3rd query, the range is just index 4. No number appears at least twice in this range."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Mo&#39;s Algorithm</p>"
        ],
        "relatedTopics": [
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Sqrt Decomposition",
                "slug": "sqrt-decomposition"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Including necessary header files and defining constants.\n#define MAXN 100005\n#define BLOCK 318\n\n//Defining variables.\nint cnt[MAXN], a[MAXN], ans[MAXN], answer=0;\nstruct query\n{\n    int L, R, i;\n};\nquery q[MAXN];\n\nclass Solution {\npublic:\n    //Function to compare two queries.\n    static bool acompare(query x, query y)\n    {\n        //Sorting queries based on their block.\n        if(x.L/BLOCK != y.L/BLOCK)\n        {\n            return x.L/BLOCK < y.L/BLOCK;\n        }\n        //If block is same, sort queries based on their end point.\n        return x.R < y.R;\n    }\n\n    //Function to add a number to the count array and update the answer.\n    void add(int p, int k)\n    {\n        cnt[a[p]]++;\n        if(cnt[a[p]] == k)\n        {\n            answer++;\n        }\n    }\n\n    //Function to subtract a number from the count array and update the answer.\n    void subtract(int p, int k)\n    {\n        cnt[a[p]]--;\n        if(cnt[a[p]] == k-1)\n        {\n            answer--;\n        }\n    }\n\n    //Function to solve the given queries.\n    vector<int> solveQueries(vector<int> nums, vector<vector<int>> Queries, int k)\n    {\n        //Calculating size of input arrays.\n        int n = nums.size();\n        int m = Queries.size();\n\n        //Initializing arrays and variables.\n        memset(a, 0, sizeof(a));\n        memset(cnt, 0, sizeof(cnt));\n        answer = 0;\n\n        //Copying elements from input arrays to necessary arrays.\n        for(int i = 0; i < n; i++)\n        {\n            a[i] = nums[i];\n        }\n        for(int i = 0; i < m; i++)\n        {\n            q[i].L = Queries[i][0];\n            q[i].R = Queries[i][1];\n            q[i].L--;\n            q[i].R--;\n            q[i].i = i;\n        }\n\n        //Sorting queries based on blocks and end points.\n        sort(q, q+m, acompare);\n\n        //Initializing variables.\n        int c_l = 0, c_r = 0, l, r;\n        vector<int> ans(m);\n\n        //Iterating over each query and calculating the answer.\n        for(int i = 0; i < m; i++)\n        {\n            l = q[i].L;\n            r = q[i].R;\n\n            //Updating left pointer.\n            while(c_l < l)\n            {\n                subtract(c_l, k);\n                c_l++;\n            }\n            while(c_l > l)\n            {\n                add(c_l-1, k);\n                c_l--;\n            }\n\n            //Updating right pointer.\n            while(c_r <= r)\n            {\n                add(c_r, k);\n                c_r++;\n            }\n            while(c_r > r+1)\n            {\n                subtract(c_r-1, k);\n                c_r--;\n            }\n\n            //Storing the answer for the current query.\n            ans[q[i].i] = answer;\n        }\n\n        //Returning the final answers for all queries.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class query:\n    def __init__(self,L=float(\"inf\"),R=float(\"inf\"),i=0):\n        self.L=L\n        self.R=R\n        self.i=i\n\nclass Solution:\n    #Function to add the frequency of an element and update the answer if necessary.\n    def add(self,p,k):\n        self.cnt[self.a[p]]+=1\n        if self.cnt[self.a[p]]==k:\n            self.answer+=1\n    \n    #Function to subtract the frequency of an element and update the answer if necessary.\n    def subtract(self,p,k):\n        self.cnt[self.a[p]]-=1\n        if self.cnt[self.a[p]]==k-1:\n            self.answer-=1\n    \n    #Function to solve the queries.\n    def solveQueries(self, nums, Queries, k):\n        n=len(nums)\n        m=len(Queries)\n        self.a=[0]*(10005)\n        self.cnt=[0]*(10005)\n        q=[query() for _ in range(10005)]\n        self.answer=0\n        \n        #Storing the elements from the nums array.\n        for i in range(n):\n            self.a[i]=nums[i]\n        \n        #Storing the queries with their left and right indices.\n        for i in range(m):\n            q[i].L=Queries[i][0]\n            q[i].R=Queries[i][1]\n            q[i].L-=1\n            q[i].R-=1\n            q[i].i=i\n            \n        #Sorting the queries based on the range (L//318) and R.\n        q.sort(key=lambda x:((x.L//318),x.R))\n        \n        c_l=0\n        c_r=0\n        ans=[0]*m\n        for i in range(m):\n            l=q[i].L\n            r=q[i].R\n            \n            #Updating the frequency and answer for the left and right indices of the current query.\n            while c_l<l:\n                self.subtract(c_l,k)\n                c_l+=1\n            while c_l>l:\n                self.add(c_l-1,k)\n                c_l-=1\n            while c_r<=r:\n                self.add(c_r,k)\n                c_r+=1\n            while c_r>r+1:\n                self.subtract(c_r-1,k)\n                c_r-=1\n            \n            #Storing the answer for the current query.\n            ans[q[i].i]=self.answer\n        return ans",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}