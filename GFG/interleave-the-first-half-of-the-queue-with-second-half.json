{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710024,
            "title": "Interleave the First Half of the Queue with Second Half",
            "titleSlug": "interleave-the-first-half-of-the-queue-with-second-half",
            "content": "<p><span >Given a Queue of <strong>even </strong>size . Your task is to rearrange the queue by interleaving its <strong>first half </strong>with the<strong> second half</strong>.<br /><strong data-start=\"0\" data-end=\"16\">Interleaving</strong> is the process of mixing two sequences by alternating their elements while preserving their relative order.<br /></span><span style=\"font-size: 18.6667px;\">In other words, Interleaving means place the <strong>first element</strong> from the first half and then <strong>first element</strong> from the 2nd half and again <strong>2nd element</strong> from the first half and then <strong>second element</strong> from the 2nd half and so on...<strong>.</strong></span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>q = [2, 4, 3, 1]</span><span style=\"font-size: 18px;\"><strong>\nOutput: </strong>[2, 3, 4, 1]<strong>\nExplanation: </strong>we place the first element of the first half 2 and after that place the first element of second half 3 and after that repeat<br /></span><span style=\"font-size: 18px;\">the same process one more time so the resulting queue will be [2, 3, 4, 1]</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>q = [3, 5]<strong><br />Output: </strong>[3, 5]<strong><br />Explanation: </strong>We place the first element of the first half 3 and first element of the second half 5 so the resulting queue is [3, 5]</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;=queue.size()&lt;= 10<sup>3</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a queue of even size, rearrange it by interleaving the first half with the second half. Interleaving means alternating elements from both halves while preserving their relative order.  Specifically, take the first element of the first half, then the first element of the second half, and repeat this process until all elements are interleaved.",
                "constraints": [
                    "1 <= queue.size() <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "[2, 4, 3, 1]",
                        "output": "[2, 3, 4, 1]",
                        "explanation": "The first half is [2, 4] and the second half is [3, 1]. Interleaving them results in [2, 3, 4, 1]."
                    },
                    {
                        "input": "[3, 5]",
                        "output": "[3, 5]",
                        "explanation": "The first half is [3] and the second half is [5]. Interleaving them results in [3, 5]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "implementation",
                "slug": "implementation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    queue<int> rearrangeQueue(queue<int> q) {\n        int N = q.size();\n        queue<int> first_half, second_half, result;\n\n        for (int i = 0; i < N / 2; i++) {\n            first_half.push(q.front());\n            q.pop();\n        }\n\n        while (!q.empty()) {\n            second_half.push(q.front());\n            q.pop();\n        }\n\n        while (!first_half.empty() && !second_half.empty()) {\n            result.push(first_half.front());\n            first_half.pop();\n            result.push(second_half.front());\n            second_half.pop();\n        }\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public Queue<Integer> rearrangeQueue(Queue<Integer> q) {\n        int N = q.size();\n        Queue<Integer> firstHalf = new LinkedList<>();\n        Queue<Integer> secondHalf = new LinkedList<>();\n        Queue<Integer> result = new LinkedList<>();\n\n        for (int i = 0; i < N / 2; i++) {\n            firstHalf.add(q.poll());\n        }\n        while (!q.isEmpty()) {\n            secondHalf.add(q.poll());\n        }\n        // Interleaving elements from both halves\n        while (!firstHalf.isEmpty() && !secondHalf.isEmpty()) {\n            result.add(firstHalf.poll());\n            result.add(secondHalf.poll());\n        }\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nimport sys\nfrom collections import deque\n\n\nclass Solution:\n\n    def rearrangeQueue(self, q):\n        N = len(q)\n        first_half = deque()\n        second_half = deque()\n        result = deque()\n\n        # Splitting the queue into two halves\n        for i in range(N // 2):\n            first_half.append(q.popleft())\n\n        while q:\n            second_half.append(q.popleft())\n\n        # Interleaving elements from both halves\n        while first_half and second_half:\n            result.append(first_half.popleft())\n            result.append(second_half.popleft())\n\n        return list(result)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    rearrangeQueue(q) {\n        let N = q.length;\n        let first_half = q.slice(0, N / 2);\n        let second_half = q.slice(N / 2);\n        let result = [];\n\n        for (let i = 0; i < first_half.length; i++) {\n            result.push(first_half[i]);\n            result.push(second_half[i]);\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}