{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700353,
            "title": "Interleaved Strings",
            "titleSlug": "interleaved-strings",
            "content": "<p><span >Given strings <strong>s1</strong>, <strong>s2</strong>, and <strong>s3</strong>, find whether <strong>s3</strong> is formed by an <strong>interleaving </strong>of <strong>s1</strong> and <strong>s2</strong>.<br /><strong>Interleaving </strong>of two strings s1 and s2 is a way to mix their characters to form a <strong>new string s3</strong>, while maintaining the <strong>relative order</strong> of characters from s1 and s2. Conditions for interleaving:<br /></span></p>\n<ol>\n<li><span >Characters from s1 must appear in the same order in s3 as they are in s1.</span></li>\n<li><span >Characters from s2 must appear in the same order in s3 as they are in s2.</span></li>\n<li><span >The length of s3 must be equal to the combined length of s1 and s2.</span></li>\n</ol>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>s1 = \"AAB\", s2 = \"AAC\", s3 = \"AAAABC\", <strong>\nOutput: </strong>true<strong>\nExplanation: </strong>The string \"AAAABC\" has all characters of the other two strings and in the same order.</span></span></pre>\n<pre><span ><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>s1 = \"AB\", s2 = \"C\", s3 = \"ACB\", <strong>\nOutput: </strong>true\n<strong>Explanation: </strong>s3 has all characters of s1 and s2 and retains order of characters of s1.</span></span></pre>\n<pre><span ><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>s1 = \"YX\", s2 = \"X\", s3 = \"XXY\"<strong>\nOutput: </strong>false<strong>\nExplanation: </strong>\"XXY \" is not interleaved of \"YX\" and \"X\". The strings that can be formed are YXX and XYX</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; s1.length, s2.length &le; 300<br />1 &le; s3.length &le; 600</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three strings, `s1`, `s2`, and `s3`, determine if `s3` is an interleaving of `s1` and `s2`.  An interleaving of two strings mixes their characters while preserving the original order of characters within each string.  `s3` must be formed by combining all characters of `s1` and `s2` in such a way that the order of characters from `s1` and `s2` is maintained. This means characters from s1 and s2 appear in s3 in the same order as they are in s1 and s2 respectively, and the length of s3 equals the sum of lengths of s1 and s2.",
                "constraints": [
                    "1 <= s1.length, s2.length <= 300",
                    "1 <= s3.length <= 600"
                ],
                "testcases": [
                    {
                        "input": "s1 = \"AAB\", s2 = \"AAC\", s3 = \"AAAABC\"",
                        "output": "true",
                        "explanation": "The string \"AAAABC\" contains all characters from \"AAB\" and \"AAC\", and the characters from each original string appear in the same order in \"AAAABC\" as they do in their respective source strings."
                    },
                    {
                        "input": "s1 = \"AB\", s2 = \"C\", s3 = \"ACB\"",
                        "output": "true",
                        "explanation": "s3 has all characters of s1 and s2 and retains the order of characters from s1 and s2. 'A' comes before 'B' from s1 and 'C' is interspersed."
                    },
                    {
                        "input": "s1 = \"YX\", s2 = \"X\", s3 = \"XXY\"",
                        "output": "false",
                        "explanation": "\"XXY\" is not an interleaving of \"YX\" and \"X\". Possible interleavings are \"YXX\" and \"XYX\".  The relative order of 'Y' and 'X' from 'YX' is not preserved in \"XXY\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming to check if <code>s3</code> can be formed by interleaving <code>s1</code> and <code>s2</code> by filling a 2D table based on character matches.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "amazon",
            "microsoft",
            "factset",
            "google",
            "zillious",
            "yahoo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // The main function that\n    // returns true if s3 is\n    // an interleaving of s1\n    // and s2, otherwise false.\n    bool isInterleave(string& s1, string& s2, string& s3) {\n\n        // return false is length of s3 is\n        // not equal to sum of lengths of s1 and s2\n        if (s1.size() + s2.size() != s3.size())\n            return false;\n\n        int n = s1.size(), m = s2.size();\n\n        // Create two arrays prev and cur to store\n        // results of previous and current states\n        vector<int> prev(m + 1), cur(m + 1);\n\n        // set empty strings as true\n        prev[0] = true;\n\n        // Fill the first row (when s1 is empty)\n        for (int j = 1; j <= m; ++j) {\n            prev[j] = (s2[j - 1] == s3[j - 1]) && prev[j - 1];\n        }\n\n        // Process all characters of s1 and s2\n        for (int i = 1; i <= n; ++i) {\n\n            // fill the first column of current row\n            cur[0] = (s1[i - 1] == s3[i - 1]) && prev[0];\n            for (int j = 1; j <= m; ++j) {\n                int k = i + j;\n                cur[j] = (s1[i - 1] == s3[k - 1] && prev[j]) ||\n                         (s2[j - 1] == s3[k - 1] && cur[j - 1]);\n            }\n\n            // store current row in previous row\n            prev = cur;\n        }\n\n        return cur[m];\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n\n    public boolean isInterLeave(String s1, String s2, String s3) {\n        // return false if length of s3 is\n        // not equal to sum of lengths of s1 and s2\n        if (s1.length() + s2.length() != s3.length()) return false;\n\n        int n = s1.length(), m = s2.length();\n\n        // Create two arrays prev and cur to store\n        // results of previous and current states\n        int[] prev = new int[m + 1];\n        int[] cur = new int[m + 1];\n\n        // set empty strings as true\n        prev[0] = 1;\n\n        // Fill the first row (when s1 is empty)\n        for (int j = 1; j <= m; ++j) {\n            prev[j] =\n                (s2.charAt(j - 1) == s3.charAt(j - 1)) && (prev[j - 1] == 1) ? 1 : 0;\n        }\n\n        // Process all characters of s1 and s2\n        for (int i = 1; i <= n; ++i) {\n\n            // fill the first column of current row\n            cur[0] = (s1.charAt(i - 1) == s3.charAt(i - 1)) && (prev[0] == 1) ? 1 : 0;\n            for (int j = 1; j <= m; ++j) {\n                int k = i + j;\n                cur[j] = ((s1.charAt(i - 1) == s3.charAt(k - 1) && prev[j] == 1) ||\n                          (s2.charAt(j - 1) == s3.charAt(k - 1) && cur[j - 1] == 1))\n                             ? 1\n                             : 0;\n            }\n\n            // store current row in previous row\n            prev = Arrays.copyOf(cur, m + 1);\n        }\n\n        return cur[m] == 1;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def isInterleave(self, s1, s2, s3):\n        # return false if length of s3 is\n        # not equal to sum of lengths of s1 and s2\n        if len(s1) + len(s2) != len(s3):\n            return False\n\n        n, m = len(s1), len(s2)\n\n        # Create two arrays prev and cur to store\n        # results of previous and current states\n        prev = [0] * (m + 1)\n        cur = [0] * (m + 1)\n\n        # set empty strings as true\n        prev[0] = 1\n\n        # Fill the first row (when s1 is empty)\n        for j in range(1, m + 1):\n            prev[j] = int(s2[j - 1] == s3[j - 1] and prev[j - 1])\n\n        # Process all characters of s1 and s2\n        for i in range(1, n + 1):\n\n            # fill the first column of current row\n            cur[0] = int(s1[i - 1] == s3[i - 1] and prev[0])\n            for j in range(1, m + 1):\n                k = i + j\n                cur[j] = int((s1[i - 1] == s3[k - 1] and prev[j])\n                             or (s2[j - 1] == s3[k - 1] and cur[j - 1]))\n\n            # store current row in previous row\n            prev = cur[:]\n\n        return cur[m] == 1\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution {\n\n    public bool isInterleave(string s1, string s2, string s3) {\n        // return false if length of s3 is\n        // not equal to sum of lengths of s1 and s2\n        if (s1.Length + s2.Length != s3.Length) return false;\n\n        int n = s1.Length, m = s2.Length;\n\n        // Create two arrays prev and cur to store\n        // results of previous and current states\n        int[] prev = new int[m + 1];\n        int[] cur = new int[m + 1];\n\n        // set empty strings as true\n        prev[0] = 1;\n\n        // Fill the first row (when s1 is empty)\n        for (int j = 1; j <= m; ++j) {\n            prev[j] = (s2[j - 1] == s3[j - 1] && prev[j - 1] == 1) ? 1 : 0;\n        }\n\n        // Process all characters of s1 and s2\n        for (int i = 1; i <= n; ++i) {\n\n            // fill the first column of current row\n            cur[0] = (s1[i - 1] == s3[i - 1] && prev[0] == 1) ? 1 : 0;\n            for (int j = 1; j <= m; ++j) {\n                int k = i + j;\n                cur[j] = ((s1[i - 1] == s3[k - 1] && prev[j] == 1) ||\n                          (s2[j - 1] == s3[k - 1] && cur[j - 1] == 1))\n                             ? 1\n                             : 0;\n            }\n\n            // store current row in previous row\n            Array.Copy(cur, prev, m + 1);\n        }\n\n        return cur[m] == 1;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} s1\n * @param {string} s2\n * @param {string} s3\n * @returns {boolean}\n */\n\nclass Solution {\n    isInterleave(s1, s2, s3) {\n        // return false if length of s3 is\n        // not equal to sum of lengths of s1 and s2\n        if (s1.length + s2.length !== s3.length) return false;\n\n        const n = s1.length, m = s2.length;\n\n        // Create two arrays prev and cur to store\n        // results of previous and current states\n        const prev = Array(m + 1).fill(0);\n        const cur = Array(m + 1).fill(0);\n\n        // set empty strings as true\n        prev[0] = 1;\n\n        // Fill the first row (when s1 is empty)\n        for (let j = 1; j <= m; ++j) {\n            prev[j] = (s2[j - 1] === s3[j - 1] && prev[j - 1]) ? 1 : 0;\n        }\n\n        // Process all characters of s1 and s2\n        for (let i = 1; i <= n; ++i) {\n\n            // fill the first column of current row\n            cur[0] = (s1[i - 1] === s3[i - 1] && prev[0]) ? 1 : 0;\n            for (let j = 1; j <= m; ++j) {\n                const k = i + j;\n                cur[j] = ((s1[i - 1] === s3[k - 1] && prev[j]) ||\n                          (s2[j - 1] === s3[k - 1] && cur[j - 1]))\n                             ? 1\n                             : 0;\n            }\n\n            // store current row in previous row\n            prev.splice(0, m + 1, ...cur);\n        }\n\n        return !!cur[m];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}