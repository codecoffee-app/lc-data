{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876770,
            "title": "Intersection of Two arrays with Duplicate Elements",
            "titleSlug": "intersection-of-two-arrays-with-duplicate-elements",
            "content": "<p><span ><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\">Given two integer</span><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\">&nbsp;</span><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\">arrays</span><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\">&nbsp;</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; font-family: var(--gfg-font-secondary) !important;\">a[]</span><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\">&nbsp;</span><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\">and</span><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\">&nbsp;</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; font-family: var(--gfg-font-secondary) !important;\">b[]</span><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\">, you have to find</span><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\">&nbsp;the</span><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\">&nbsp;</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: var(--text-color) !important; font-family: var(--gfg-font-secondary) !important;\">intersection</span><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\"> of the two arrays. </span></span><span ><span style=\"color: var(--text-color); font-family: var(--gfg-font-primary);\">Intersection of two arrays is said to be elements that are common in both arrays. The intersection should not have duplicate elements and the result should contain items in any order.</span></span></p>\n<p><span style=\"box-sizing: border-box; line-height: 1.7em; font-size: 14pt; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important;\">Note:<strong>&nbsp;</strong>The driver code will sort the resulting array in increasing order before printing.</span></p>\n<p><span ><strong><span style=\"box-sizing: border-box; line-height: 1.7em; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important;\">Examples:</span></strong></span></p>\n<pre><span ><strong><span style=\"box-sizing: border-box; line-height: 1.7em; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important;\">Input: </span></strong><span style=\"box-sizing: border-box; line-height: 1.7em; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important;\">a[] = [1, 2, 1, 3, 1], b[] = [3, 1, 3, 4, 1]<br /><strong>Output: </strong>[1, 3]<br /><strong>Explanation: </strong>1 and 3 are the only common elements and we need to print only one occurrence of common elements.<br /></span></span></pre>\n<pre><span style=\"box-sizing: border-box; line-height: 1.7em; font-size: 14pt; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important;\"><strong>Input: </strong>a[] = [1, 1, 1], b[] = [1, 1, 1, 1, 1]<br /><strong>Output: </strong>[1]<br /><strong>Explanation: </strong>1 is the only common element present in both the arrays.<br /></span></pre>\n<pre><span style=\"box-sizing: border-box; line-height: 1.7em; font-size: 14pt; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important;\"><strong>Input: </strong>a[] = [1, 2, 3], b[] = [4, 5, 6]<br /><strong>Output: </strong>[]<br /><strong>Explanation: </strong>No common element in both the arrays.</span></pre>\n<p><span ><span style=\"box-sizing: border-box; line-height: 1.7em; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important;\"><strong>Constraints:</strong><br style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\" />1 &le; a.size(), b.size() &le; 10<sup>5<br /></sup></span><span style=\"box-sizing: border-box; line-height: 1.7em; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important;\">1 &le; a[i], b[i] &le; 10<sup>5</sup><br /></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integer arrays, `a[]` and `b[]`, find the intersection of the two arrays. The intersection consists of elements common to both arrays, with no duplicates. The order of elements in the result does not matter. The driver code will sort the resulting array in increasing order before printing.",
                "constraints": [
                    "1 <= a.size(), b.size() <= 10^5",
                    "1 <= a[i], b[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "a[] = [1, 2, 1, 3, 1], b[] = [3, 1, 3, 4, 1]",
                        "output": "[1, 3]",
                        "explanation": "The common elements between the two arrays are 1 and 3. We only include each element once in the result, removing duplicates."
                    },
                    {
                        "input": "a[] = [1, 1, 1], b[] = [1, 1, 1, 1, 1]",
                        "output": "[1]",
                        "explanation": "The only common element is 1.  Regardless of its multiplicity in each array, it only appears once in the intersection."
                    },
                    {
                        "input": "a[] = [1, 2, 3], b[] = [4, 5, 6]",
                        "output": "[]",
                        "explanation": "There are no elements that appear in both arrays. Therefore, the intersection is empty."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> intersectionWithDuplicates(vector<int>& a, vector<int>& b) {\n\n        // Put all elements of a[] in sa\n        unordered_set<int> sa(a.begin(), a.end());\n        vector<int> res;\n\n        // Traverse through b[]\n        for (int i = 0; i < b.size(); i++) {\n\n            // If the element is in sa\n            // a) Add it to the result array\n            // b) Erase it from sa to avoid duplicates\n            if (sa.find(b[i]) != sa.end()) {\n                res.push_back(b[i]);\n                sa.erase(b[i]);\n            }\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public ArrayList<Integer> intersectionWithDuplicates(int[] a, int[] b) {\n        // Put all elements of a in a HashSet\n        Set<Integer> setA = new HashSet<>();\n        for (int num : a) {\n            setA.add(num);\n        }\n\n        ArrayList<Integer> result = new ArrayList<>();\n\n        // Traverse through b\n        for (int num : b) {\n            // If the element is in setA\n            // a) Add it to the result list\n            // b) Remove it from setA to avoid duplicates\n            if (setA.contains(num)) {\n                result.add(num);\n                setA.remove(num);\n            }\n        }\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def intersectionWithDuplicates(self, a, b):\n        # Put all elements of arr1 in a set\n        set_a = set(a)\n        result = []\n\n        # Traverse through arr2\n        for num in b:\n            # If the element is in set_a\n            # a) Add it to the result list\n            # b) Remove it from set_a to avoid duplicates\n            if num in set_a:\n                result.append(num)\n                set_a.remove(num)\n\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} a\n * @param {number[]} b\n * @returns {number[]}\n */\nclass Solution {\n    intersectionWithDuplicates(a, b) {\n        // Use a Set to store unique elements from the first array.\n        let setA = new Set(a);\n        let result = [];\n\n        // Traverse through the second array.\n        for (let i = 0; i < b.length; i++) {\n            // If the current element of arr2 exists in setA,\n            // a) Add it to the result array.\n            // b) Remove it from setA to avoid duplicates.\n            if (setA.has(b[i])) {\n                result.push(b[i]);\n                setA.delete(b[i]);\n            }\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}