{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702140,
            "title": "Intersection of Arrays with Distinct",
            "titleSlug": "intersection-of-two-arrays2404",
            "content": "<p><span style=\"font-size: 18px;\">Given two <strong>unsorted</strong> integer arrays <strong>a[]</strong> and <strong>b[] </strong>each consisting of&nbsp;<strong>distinct</strong> elements, the task is to return the <strong>count</strong> of elements in the <strong>intersection</strong> (or common elements) of the two arrays.</span></p>\n<p><span style=\"font-size: 18px;\">Intersection of two arrays can be defined as the set containing distinct common elements between the two arrays.&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">a[] = [89, 24, 75, 11, 23], b[] = [89, 2, 4]</span><br /><span style=\"font-size: 18px;\"><strong>Output: </strong>1\n</span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>89 is the only element in the intersection of two arrays.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">a[] = [1, 2, 4, 3, 5, 6], b[] = [3, 4, 5, 6, 7]\n<strong>Output: </strong>4<strong>\nExplanation: </strong>3, 4, 5, and 6 are the elements in the intersection of two arrays.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [20, 10, 30, 50, 40], b[] = [15, 25, 30, 20, 35]\n<strong>Output</strong>: 2\n<strong>Explanation</strong>: 20 and 30 are the elements in the intersection of the two arrays.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1&nbsp; &le;&nbsp; a.size(), b.size() &le;&nbsp; 10<sup>5</sup><br />1&nbsp; &le;&nbsp; a[i], b[i]&nbsp; &le;&nbsp; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two unsorted integer arrays `a[]` and `b[]`, each containing distinct elements, determine the number of elements present in their intersection. The intersection of two arrays consists of the distinct common elements found in both.",
                "constraints": [
                    "1 <= a.size(), b.size() <= 10^5",
                    "1 <= a[i], b[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "a[] = [89, 24, 75, 11, 23], b[] = [89, 2, 4]",
                        "output": "1",
                        "explanation": "The only common element between the two arrays is 89."
                    },
                    {
                        "input": "a[] = [1, 2, 4, 3, 5, 6], b[] = [3, 4, 5, 6, 7]",
                        "output": "4",
                        "explanation": "The common elements between the two arrays are 3, 4, 5, and 6."
                    },
                    {
                        "input": "a[] = [20, 10, 30, 50, 40], b[] = [15, 25, 30, 20, 35]",
                        "output": "2",
                        "explanation": "The common elements between the two arrays are 20 and 30."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to use set data type to store existing occurrences</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "microsoft",
            "paypal",
            "rockstand"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\nint numberofElementsInIntersection(int a[], int b[], int n, int m) {\n    // int n = sizeof(a) / sizeof(int);\n    // int m = sizeof(b) / sizeof(int);\n    bool s[1000001];\n    for (int i = 0; i < 1000001; i++)\n        s[i] = false;\n\n    int count = 0;\n\n    // we mark all the elements of first array in s as true.\n    for (int i = 0; i < n; i++)\n        s[a[i]] = true;\n\n    // iterating over the second array.\n    for (int i = 0; i < m; i++) {\n        // if current element already exists in set, we update the counter.\n        if (s[b[i]]) {\n\n            // erasing element from set because if same element is present\n            // again in the array we don't need to count it again.\n            s[b[i]] = false;\n\n            // incrementing the counter.\n            count++;\n        }\n    }\n    // returning the counter.\n    return count;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\n// Function to return the count of the number of elements in\n// the intersection of two arrays.\nclass Solution {\n  public:\n    int numberofElementsInIntersection(vector<int> &a, vector<int> &b) {\n        unordered_set<int> s1(a.begin(),\n                              a.end()); // Store all elements of array a in a set\n        int count = 0;\n\n        // Iterate through array b and check for common elements\n        for (int i = 0; i < b.size(); i++) {\n            if (s1.find(b[i]) != s1.end()) {\n                count++; // Found a common element\n            }\n        }\n\n        return count; // Return the number of distinct common elements\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int numberofElementsInIntersection(int a[], int b[]) {\n        int n = a.length;\n        int m = b.length;\n        // using HashSet to store the elements.\n        HashSet<Integer> s1 = new HashSet<>();\n\n        int count = 0;\n\n        // we insert all the elements of first array in HashSet s1.\n        for (int i = 0; i < n; i++) s1.add(a[i]);\n\n        // iterating over the second array.\n        for (int i = 0; i < m; i++) {\n            // if current element already exists in set, we update the counter.\n            if (s1.contains(b[i])) {\n                // incrementing the counter.\n                count++;\n            }\n        }\n\n        // returning the counter.\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n#Function to return the count of the number of elements in\n#the intersection of two arrays.\nclass Solution:\n\n    def numberofElementsInIntersection(self, a, b):\n        #using set to store the elements.\n        n = len(a)\n        m = len(b)\n        hs = set()\n        c = 0\n        #we insert all the elements of first array in set.\n        for i in range(0, n):\n            hs.add(a[i])\n\n        #iterating over the second array.\n        for i in range(0, m):\n\n            #if current element already exists in set, we update the counter.\n            if b[i] in hs:\n\n                #incrementing the counter.\n                c += 1\n\n        #returning the counter.\n        return c\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function template for C#\nclass Solution {\n    // Function to return the count of the number of elements in\n    // the intersection of two arrays.\n    public int numberofElementsInIntersection(int[] a, int[] b) {\n        int n = a.Length;\n        int m = b.Length;\n        HashSet<int> s1 = new HashSet<int>();\n        int count = 0;\n\n        // we insert all the elements of the first array in set s1.\n        for (int i = 0; i < n; i++) s1.Add(a[i]);\n\n        // iterating over the second array.\n        for (int i = 0; i < m; i++) {\n            // if current element already exists in set, we update the counter.\n            if (s1.Contains(b[i])) {\n\n                // incrementing the counter.\n                count++;\n            }\n        }\n        // returning the counter.\n        return count;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} a\n * @param {number[]} b\n * @returns {number}\n */\nclass Solution {\n    // Function to return the count of the number of elements in\n    // the intersection of two arrays.\n    numberofElementsInIntersection(a, b) {\n        let n = a.length;\n        let m = b.length;\n        // using set to store the elements.\n        let s1 = new Set();\n        let count = 0;\n\n        // we insert all the elements of first array in set s1.\n        for (let i = 0; i < n; i++) s1.add(a[i]);\n\n        // iterating over the second array.\n        for (let i = 0; i < m; i++) {\n            // if current element already exists in set, we update the counter.\n            if (s1.has(b[i])) {\n                // incrementing the counter.\n                count++;\n            }\n        }\n        // returning the counter.\n        return count;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}