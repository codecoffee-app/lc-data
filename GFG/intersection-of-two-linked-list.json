{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700535,
            "title": "Intersection of Two Linked Lists",
            "titleSlug": "intersection-of-two-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Given two linked lists <strong>head1 </strong>and <strong>head2</strong>, find&nbsp;the intersection of two linked lists. Each of the two linked lists contains distinct node values.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;The order of nodes in this list should be the same as the order in which those particular nodes appear in input head1 and return null if no common element is present.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\">Input: LinkedList1: 9-&gt;6-&gt;4-&gt;2-&gt;3-&gt;8 , LinkedList2: 1-&gt;2-&gt;8-&gt;6<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700535/Web/Other/blobid1_1720589846.png\" width=\"399\" height=\"188\" /> <br /><strong>Output: </strong>6-&gt;2-&gt;8<br /><strong>Explanation: </strong>Nodes 6, 2 and 8 are common in both of the lists and the order will be according to LinkedList1. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList1: 5-&gt;3-&gt;1-&gt;13-&gt;14 , LinkedList2: 3-&gt;13<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700535/Web/Other/blobid0_1720589787.png\" width=\"399\" height=\"188\" /> <br /><strong>Output: </strong>3-&gt;13<br /><strong>Explanation: </strong>Nodes 3 and 13 are common in both of the lists and the order will be according to LinkedList1. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected time complexity:</strong>&nbsp;O(m+n)<br /><strong>Expected auxiliary space:&nbsp;</strong>O(m+n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= no. of nodes in head1, head2 &lt;= 10<sup>4<br /></sup>1 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use a set or hashmap to store the values from the nodes of one linked list. Then, iterate over the other linked list. If any node in this second linked list is found in the set or hashmap, add its data to the intersection list.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "vmware",
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "24*7-innovation-labs",
            "d-e-shaw",
            "walmart",
            "komli-media",
            "taxi4sure"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node* findIntersection(Node* head1, Node* head2) {\n        unordered_set<int> st;\n\n        // Store all elements of the second linked list in the set\n        while (head2) {\n            st.insert(head2->data);\n            head2 = head2->next;\n        }\n\n        Node *newHead = nullptr, *newTail = nullptr;\n\n        // Iterate through the first linked list and check for intersection\n        while (head1) {\n            if (st.find(head1->data) != st.end()) {\n                if (!newHead) {\n                    newHead = newTail = new Node(head1->data);\n                } else {\n                    newTail->next = new Node(head1->data);\n                    newTail = newTail->next;\n                }\n            }\n            head1 = head1->next;\n        }\n\n        return newHead;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the intersection of two linked lists.\n    public Node findIntersection(Node head1, Node head2) {\n        // Creating a set to store elements of the second linked list.\n        Set<Integer> set = new HashSet<>();\n\n        // Adding all elements from the second linked list to the set.\n        while (head2 != null) {\n            set.add(head2.data);\n            head2 = head2.next;\n        }\n\n        // Pointers for the resultant intersection linked list.\n        Node newHead = null, newTail = null;\n\n        // Iterating through the first linked list.\n        while (head1 != null) {\n            // If the current node's data is found in the set,\n            // it means the node is part of the intersection.\n            if (set.contains(head1.data)) {\n                Node newNode = new Node(head1.data);\n                // If the new linked list is empty, initialize it with the new node.\n                if (newHead == null) {\n                    newHead = newTail = newNode;\n                } else {\n                    // Otherwise, add the new node to the end of the list.\n                    newTail.next = newNode;\n                    newTail = newTail.next;\n                }\n            }\n            head1 = head1.next;\n        }\n\n        // Return the head of the resultant intersection linked list.\n        return newHead;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findIntersection(self, head1, head2):\n        st = set()\n\n        # Store all elements of the second linked list in the set\n        while head2:\n            st.add(head2.data)\n            head2 = head2.next\n\n        new_head = None\n        new_tail = None\n\n        # Iterate through the first linked list and check for intersection\n        while head1:\n            if head1.data in st:\n                new_node = Node(head1.data)\n                if new_head is None:\n                    new_head = new_tail = new_node\n                else:\n                    new_tail.next = new_node\n                    new_tail = new_tail.next\n            head1 = head1.next\n\n        return new_head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    // Function to find the intersection of two linked lists.\n    findIntersection(head1, head2) {\n        let st = new Set(); // Create a set to store unique values from head2.\n\n        while (head2) {\n            st.add(head2.data); // Add data from head2 to the set.\n            head2 = head2.next; // Move to the next node in head2.\n        }\n\n        let newHead = null; // Initialize newHead pointer to null.\n        let newTail = null; // Initialize newTail pointer to null.\n\n        while (head1) {\n            // Check if the set contains data from head1.\n            if (st.has(head1.data)) {\n                // If newHead is null, create a new node.\n                if (newHead === null) {\n                    newHead = newTail = new Node(head1.data);\n                } else {\n                    // If newHead is not null, append a new node.\n                    newTail.next = new Node(head1.data);\n                    newTail = newTail.next;\n                }\n            }\n            head1 = head1.next; // Move to the next node in head1.\n        }\n\n        return newHead; // Return the intersection linked list.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}