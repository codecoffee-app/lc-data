{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701237,
            "title": "Intersection of two sorted arrays",
            "titleSlug": "intersection-of-two-sorted-array-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">&nbsp;Given two sorted arrays <strong>arr1</strong>[] and <strong>arr</strong>2[]. Your task is to return the <strong>intersection </strong>of both arrays.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\">Intersection of two arrays is said to be elements that are common in both arrays.&nbsp;</span><span style=\"font-size: 18px;\">The intersection should not count duplicate elements.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\">Note</span><span style=\"font-size: 18px;\">:</span><span style=\"font-size: 18px;\">&nbsp;</span><span style=\"color: #1e2229; font-family: Nunito; font-size: 14pt; background-color: #ffffff;\">If there is no intersection then return an empty array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples</strong></span><strong style=\"font-size: 18px;\">:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr1[] = [1, 2, 3, 4], arr2[] = [2, 4, 6, 7, 8]\n<strong>Output</strong>: [2, 4]\n<strong>Explanation</strong>: 2 and 4 are only common elements in both the arrays.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr1[] = [1, 2, 2, 3, 4], arr2[] = [2, 2, 4, 6, 7, 8]\n<strong>Output</strong>: [2, 4]\n<strong>Explanation</strong>: 2 and 4 are the only common elements.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr1[] = [1, 2], arr2[] = [3, 4]\n<strong>Output</strong>: []\n<strong>Explanation</strong>: No common elements.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n + m)<br /><strong>Expected Auxiliary Space:</strong> O(min(n,m))</span><br /><br />&nbsp;<span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr1.size(),arr2.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr1[i], arr2[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted arrays, `arr1` and `arr2`, find their intersection. The intersection consists of elements common to both arrays, with no duplicates allowed. If there's no intersection, return an empty array.",
                "constraints": [
                    "1 <= arr1.size(), arr2.size() <= 10^5",
                    "1 <= arr1[i], arr2[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [1, 2, 3, 4], arr2 = [2, 4, 6, 7, 8]",
                        "output": "[2, 4]",
                        "explanation": "The elements 2 and 4 are present in both arrays."
                    },
                    {
                        "input": "arr1 = [1, 2, 2, 3, 4], arr2 = [2, 2, 4, 6, 7, 8]",
                        "output": "[2, 4]",
                        "explanation": "The elements 2 and 4 are the only common elements when duplicates are removed."
                    },
                    {
                        "input": "arr1 = [1, 2], arr2 = [3, 4]",
                        "output": "[]",
                        "explanation": "There are no common elements between the two arrays."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the number which is present in other array also.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to return a list containing the intersection of two arrays.\n    vector<int> intersection(vector<int> &arr1, vector<int> &arr2) {\n        int i = 0, j = 0;\n        bool flag = false;\n        std::vector<int> v;\n        int n = arr1.size();\n        int m = arr2.size();\n        // Using two pointers i and j over the two arrays which helps\n        // in storing the elements which are present in both the arrays.\n        while (i < n && j < m) {\n            // Updating the pointer i if we have identical\n            // elements at consecutive position in arr1.\n            if (i > 0 && arr1[i - 1] == arr1[i]) {\n                i++;\n                continue;\n            }\n\n            // Comparing element of the arrays arr1 and arr2 at pointers\n            // i and j and storing only the elements which are present in\n            // both the arrays and updating the pointers.\n            if (arr1[i] < arr2[j])\n                i++;\n            else if (arr2[j] < arr1[i])\n                j++;\n            else {\n                v.push_back(arr2[j]);\n                flag = true;\n                i++;\n                j++;\n            }\n        }\n\n        // returning the list containing the intersection of the two arrays.\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to return a list containing the intersection of two arrays.\n    static ArrayList<Integer> intersection(int arr1[], int arr2[]) {\n        int i = 0, j = 0;\n        boolean flag = false;\n        int n = arr1.length;\n        int m = arr2.length;\n        ArrayList<Integer> sb = new ArrayList<Integer>();\n\n        // Using two pointers i and j over the two arrays which helps\n        // in storing the elements which are present in both the arrays.\n        while (i < n && j < m) {\n            // Updating the pointer i if we have identical\n            // elements at consecutive position in arr1.\n            if (i > 0 && arr1[i - 1] == arr1[i]) {\n                i++;\n                continue;\n            }\n            // Comparing element of the arrays arr1 and arr2 at pointers\n            // i and j and storing only the elements which are present in\n            // both the arrays and updating the pointers.\n            if (arr1[i] < arr2[j])\n                i++;\n            else if (arr2[j] < arr1[i])\n                j++;\n            else {\n                sb.add(arr2[j]);\n                flag = true;\n                i++;\n                j++;\n            }\n        }\n\n        // returning the list containing the intersection of the two arrays.\n        return sb;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to return a list containing the intersection of two arrays.\n    def intersection(self, arr1, arr2):\n        i = 0\n        j = 0\n        flag = False\n        l = []\n        n = len(arr1)\n        m = len(arr2)\n        #Using two pointers i and j over the two arrays which helps\n        #in storing the elements which are present in both the arrays.\n        while (i < n and j < m):\n\n            #Updating the pointer i if we have identical\n            #elements at consecutive position in arr1.\n            if i > 0 and arr1[i - 1] == arr1[i]:\n                i += 1\n                continue\n\n            #Comparing element of the arrays arr1 and arr2 at pointers\n            #i and j and storing only the elements which are present in\n            #both the arrays and updating the pointers.\n            if arr1[i] < arr2[j]:\n                i += 1\n            elif arr2[j] < arr1[i]:\n                j += 1\n            else:\n                l.append(arr2[j])\n                flag = True\n                i += 1\n                j += 1\n\n        #returning the list containing the intersection of the two arrays.\n        return l\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    // Function to return a list containing the intersection of two arrays.\n    intersection(arr1, arr2) {\n        let i = 0, j = 0;\n        let flag = false;\n        let v = [];\n        let N = arr1.length;\n        let M = arr2.length;\n        // Using two pointers i and j over the two arrays which helps\n        // in storing the elements which are present in both the arrays.\n        while (i < N && j < M) {\n            // Updating the pointer i if we have identical\n            // elements at consecutive position in arr1.\n            if (i > 0 && arr1[i - 1] == arr1[i]) {\n                i++;\n                continue;\n            }\n            // Comparing element of the arrays arr1 and arr2 at pointers\n            // i and j and storing only the elements which are present in\n            // both the arrays and updating the pointers.\n            if (arr1[i] < arr2[j])\n                i++;\n            else if (arr2[j] < arr1[i])\n                j++;\n            else {\n                v.push(arr2[j]);\n                flag = true;\n                i++;\n                j++;\n            }\n        }\n\n        // returning the list containing the intersection of the two arrays.\n        return v;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}