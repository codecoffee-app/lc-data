{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876804,
            "title": "Intersection of Two Sorted Arrays with Distinct Elements",
            "titleSlug": "intersection-of-two-sorted-arrays-with-distinct-elements",
            "content": "<p><span style=\"font-size: 18px;\">Given two&nbsp;<strong>sorted</strong>&nbsp;arrays&nbsp;<strong>a[]</strong>&nbsp;and&nbsp;<strong>b[]</strong>, where each array contains&nbsp;<strong>distinct</strong>&nbsp;elements , the task is to return the elements in the&nbsp;<strong>intersection</strong>&nbsp;of the two arrays in&nbsp;<strong>sorted</strong>&nbsp;order.</span></p>\n<blockquote><span style=\"font-size: 18px;\">Intersection of two arrays can be defined as the set containing distinct common elements that are present in both of the arrays.</span></blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [1, 2, 3, 4, 5], b[] = [1, 2, 3, 6, 7]</span><br /><span style=\"font-size: 18px;\"><strong>Output</strong>: 1 2 3</span><br /><span style=\"font-size: 18px;\"><strong>Explanation</strong>: Distinct common elements in both the arrays are: 1 2 3</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [2, 3, 4, 5], b[] = [1, 2, 3, 4]\n<strong>Output</strong>: 2 3 4\n<strong>Explanation</strong>: Distinct common elements in both the arrays are: 2 3 4.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [1], b[] = [2]\n<strong>Output</strong>: []\n<strong>Explanation</strong>: No common elements</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&nbsp; &lt;=&nbsp; a.size(), b.size()&nbsp; &lt;=&nbsp; 10<sup>5</sup><br />-10<sup>9</sup>&nbsp; &lt;=&nbsp; a[i] , b[i]&nbsp; &lt;=&nbsp; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<int> intersection(vector<int>& a, vector<int>& b) {\n        vector<int> res;\n\n        int i = 0;\n        int j = 0;\n\n        // Start simultaneous traversal on both arrays\n        while (i < a.size() && j < b.size()) {\n\n            // if a[i] is smaller, then move in a[]\n            // towards larger value\n            if (a[i] < b[j]) {\n                i++;\n            }\n\n            // if b[j] is smaller, then move in b[]\n            // towards larger value\n            else if (a[i] > b[j]) {\n                j++;\n            }\n\n            // if a[i] == b[j], then this element is common\n            // add it to result array and move in both arrays\n            else {\n                res.push_back(a[i]);\n                i++;\n                j++;\n            }\n        }\n        sort(res.begin(), res.end());\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    ArrayList<Integer> intersection(int[] a, int[] b) {\n        ArrayList<Integer> res = new ArrayList<>();\n\n        int i = 0;\n        int j = 0;\n\n        // Start simultaneous traversal on both arrays\n        while (i < a.length && j < b.length) {\n\n            // if a[i] is smaller, then move in a[]\n            // towards larger value\n            if (a[i] < b[j]) {\n                i++;\n            }\n\n            // if b[j] is smaller, then move in b[]\n            // towards larger value\n            else if (a[i] > b[j]) {\n                j++;\n            }\n\n            // if a[i] == b[j], then this element is common\n            // add it to result array and move in both arrays\n            else {\n                res.add(a[i]);\n                i++;\n                j++;\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def intersection(self, a, b):\n        res = []\n\n        i = 0\n        j = 0\n\n        # Start simultaneous traversal on both arrays\n        while i < len(a) and j < len(b):\n\n            # if a[i] is smaller, then move in a[]\n            # towards larger value\n            if a[i] < b[j]:\n                i += 1\n\n            # if b[j] is smaller, then move in b[]\n            # towards larger value\n            elif a[i] > b[j]:\n                j += 1\n\n            # if a[i] == b[j], then this element is common\n            # add it to result array and move in both arrays\n            else:\n                res.append(a[i])\n                i += 1\n                j += 1\n        res = sorted(res)\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    intersection(a, b) {\n        const res = [];\n\n        let i = 0;\n        let j = 0;\n\n        // Start simultaneous traversal on both arrays\n        while (i < a.length && j < b.length) {\n\n            // if a[i] is smaller, then move in a[]\n            // towards larger value\n            if (a[i] < b[j]) {\n                i++;\n            }\n\n            // if b[j] is smaller, then move in b[]\n            // towards larger value\n            else if (a[i] > b[j]) {\n                j++;\n            }\n\n            // if a[i] == b[j], then this element is common\n            // add it to result array and move in both arrays\n            else {\n                res.push(a[i]);\n                i++;\n                j++;\n            }\n        }\n        res.sort(function(a, b) { return a - b; });\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}