{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876771,
            "title": "Intersection of Two Sorted Arrays with Duplicate Elements",
            "titleSlug": "intersection-of-two-sorted-arrays-with-duplicate-elements",
            "content": "<p><span style=\"font-size: 18px;\">Given two&nbsp;<strong>sorted</strong>&nbsp;arrays&nbsp;<strong>a[]</strong>&nbsp;and&nbsp;<strong>b[]</strong>, where each array may contain&nbsp;<strong>duplicate</strong>&nbsp;elements , the task is to return the elements in the&nbsp;<strong>intersection</strong>&nbsp;of the two arrays in&nbsp;<strong>sorted</strong>&nbsp;order.</span></p>\n<blockquote><span style=\"font-size: 18px;\">Intersection of two arrays can be defined as the set containing distinct common elements that are present in both of the arrays.</span></blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [1, 2, 3, 4, 5], b[] = [1, 2, 3, 6, 7]</span><br /><span style=\"font-size: 18px;\"><strong>Output</strong>: 1 2 3</span><br /><span style=\"font-size: 18px;\"><strong>Explanation</strong>: Distinct elements in both the arrays are: 1 2 3.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [2, 2, 3, 4, 5], b[] = [1, 1, 2, 3, 4]\n<strong>Output</strong>: 2 3 4\n<strong>Explanation</strong>: Distinct elements in both the arrays are: 2 3 4.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a[] = [1, 1, 1, 1, 1], b[] = [2, 2, 2, 2, 2]\n<strong>Output</strong>: []\n<strong>Explanation</strong>: No common elements.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&nbsp; &lt;=&nbsp; a.size(), b.size()&nbsp; &lt;=&nbsp; 10<sup>5</sup><br />-10<sup>9</sup>&nbsp; &lt;=&nbsp; a[i] , b[i]&nbsp; &lt;=&nbsp; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two **sorted** arrays `a[]` and `b[]`, where each array may contain **duplicate** elements, find and return the elements that are present in both arrays. The result should be a **sorted** array containing only distinct common elements.",
                "constraints": [
                    "1 <= a.size(), b.size() <= 10^5",
                    "-10^9 <= a[i], b[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "a[] = [1, 2, 3, 4, 5], b[] = [1, 2, 3, 6, 7]",
                        "output": "1 2 3",
                        "explanation": "The common elements present in both arrays are 1, 2, and 3. These elements are unique and sorted in ascending order."
                    },
                    {
                        "input": "a[] = [2, 2, 3, 4, 5], b[] = [1, 1, 2, 3, 4]",
                        "output": "2 3 4",
                        "explanation": "The common elements present in both arrays are 2, 3, and 4. These elements are unique and sorted in ascending order."
                    },
                    {
                        "input": "a[] = [1, 1, 1, 1, 1], b[] = [2, 2, 2, 2, 2]",
                        "output": "[]",
                        "explanation": "There are no common elements between the two arrays."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<int> intersection(vector<int>& a, vector<int>& b) {\n        vector<int> res;\n        int m = a.size();\n        int n = b.size();\n\n        // This is similar to merge of merge sort\n        int i = 0, j = 0;\n        while (i < m && j < n) {\n\n            // Skip duplicate elements in the first array\n            if (i > 0 && a[i - 1] == a[i]) {\n                i++;\n                continue;\n            }\n\n            // Skip the smaller\n            if (a[i] < b[j]) {\n                i++;\n            } else if (a[i] > b[j]) {\n                j++;\n            }\n\n            // If equal, add to result and move both\n            else {\n                res.push_back(a[i]);\n                i++;\n                j++;\n            }\n        }\n        sort(res.begin(), res.end());\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n\n    // Function to find the intersection of two arrays\n    ArrayList<Integer> intersection(int[] a, int[] b) {\n        ArrayList<Integer> res = new ArrayList<>();\n        int m = a.length;\n        int n = b.length;\n\n        // This is similar to merge of merge sort\n        int i = 0, j = 0;\n        while (i < m && j < n) {\n\n            // Skip duplicate elements in the first array\n            if (i > 0 && a[i - 1] == a[i]) {\n                i++;\n                continue;\n            }\n\n            // Skip the smaller\n            if (a[i] < b[j]) {\n                i++;\n            } else if (a[i] > b[j]) {\n                j++;\n            }\n\n            // If equal, add to result and move both\n            else {\n                res.add(a[i]);\n                i++;\n                j++;\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def intersection(self, a, b):\n        res = []\n        m = len(a)\n        n = len(b)\n\n        # This is similar to merge of merge sort\n        i, j = 0, 0\n        while i < m and j < n:\n\n            # Skip duplicate elements in the first array\n            if i > 0 and a[i - 1] == a[i]:\n                i += 1\n                continue\n\n            # Skip the smaller\n            if a[i] < b[j]:\n                i += 1\n            elif a[i] > b[j]:\n                j += 1\n\n            # If equal, add to result and move both\n            else:\n                res.append(a[i])\n                i += 1\n                j += 1\n        res = sorted(res)\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    intersection(a, b) {\n        let res = [];\n        let m = a.length;\n        let n = b.length;\n\n        // This is similar to merge of merge sort\n        let i = 0, j = 0;\n        while (i < m && j < n) {\n\n            // Skip duplicate elements in the first array\n            if (i > 0 && a[i - 1] === a[i]) {\n                i++;\n                continue;\n            }\n\n            // Skip the smaller\n            if (a[i] < b[j]) {\n                i++;\n            } else if (a[i] > b[j]) {\n                j++;\n            }\n\n            // If equal, add to result and move both\n            else {\n                res.push(a[i]);\n                i++;\n                j++;\n            }\n        }\n        res.sort(function(a, b) { return a - b; });\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}