{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700191,
            "title": "Intersection Sorted Linked Lists",
            "titleSlug": "intersection-of-two-sorted-linked-lists",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>that two linked lists are </strong>sorted in <strong>increasing order</strong>, create a new linked list representing the <strong>intersection </strong>of the two linked lists. The new linked list should be made without changing the original lists.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> The elements of the linked list are not necessarily distinct.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList1 = 1-&gt;2-&gt;3-&gt;4-&gt;6, LinkedList2 = 2-&gt;4-&gt;6-&gt;8\n<strong>Output: </strong>2-&gt;4-&gt;6<strong>\nExplanation: </strong>For the given two linked list, 2, 4 and 6 are the elements in the intersection.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700191/Web/Other/blobid0_1724332831.png\" width=\"399\" height=\"191\" /><br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList1 = 10-&gt;20-&gt;40-&gt;50, LinkedList2 = 15-&gt;40\n<strong>Output: </strong>40<br /><strong>Explaination:</strong><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700191/Web/Other/blobid1_1724332853.png\" width=\"385\" height=\"184\" /><br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= size of linked lists &lt;= 10<sup>4</sup><br />1 &lt;= node-&gt;data&lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted linked lists in increasing order, create a new linked list representing the intersection of the two lists.  The new list should contain only the elements present in both original lists, and it should be constructed without modifying the original lists. Note that the elements in the linked lists are not necessarily distinct.",
                "constraints": [
                    "1 <= size of linked lists <= 10^4",
                    "1 <= node->data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "LinkedList1 = 1->2->3->4->6, LinkedList2 = 2->4->6->8",
                        "output": "2->4->6",
                        "explanation": "The intersection of the two linked lists contains the elements 2, 4, and 6. Therefore, the output linked list is 2->4->6."
                    },
                    {
                        "input": "LinkedList1 = 10->20->40->50, LinkedList2 = 15->40",
                        "output": "40",
                        "explanation": "The only element present in both linked lists is 40.  The output linked list contains only this element: 40."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to approach the solution of this question like how you merge two sorted lists to form a sorted list.</span></p>",
            "<p><span >Maintain a pointer at each linked list head and traverse in both linked lists.</span><br /><span >When you find a common node insert it into the new linked list.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "d-e-shaw",
            "zopper"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to find the intersection of two sorted linked lists.\n    Node* findIntersection(Node* head1, Node* head2) {\n        Node *p1 = head1, *p2 = head2;\n        Node *head = nullptr, *tail = nullptr;\n\n        // Iterating over both linked lists until one reaches the end.\n        while (p1 && p2) {\n            // If data in p1 is greater, move p2 to next node.\n            if (p1->data > p2->data) {\n                p2 = p2->next;\n            }\n            // If data in p2 is greater, move p1 to next node.\n            else if (p2->data > p1->data) {\n                p1 = p1->next;\n            }\n            // If data is equal, add to the intersection list.\n            else {\n                // Creating new node for intersection list.\n                if (head == nullptr) {\n                    head = tail = new Node(p1->data);\n                } else {\n                    tail->next = new Node(p1->data);\n                    tail = tail->next;\n                }\n                // Move both pointers forward.\n                p1 = p1->next;\n                p2 = p2->next;\n            }\n        }\n\n        return head;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public static Node findIntersection(Node head1, Node head2) {\n        Node p1 = head1, p2 = head2;\n        Node head = null, tail = null;\n\n        while (p1 != null && p2 != null)\n            if (p1.data > p2.data)\n                // nodes dont match\n                // moving to next node in list with smaller node\n                p2 = p2.next;\n\n            else if (p2.data > p1.data)\n                // nodes dont match\n                // moving to next node in list with smaller node\n                p1 = p1.next;\n\n            else {\n                // nodes match\n\n                if (head == null) head = tail = new Node(p1.data);\n                // creating new head for intersection list\n                else {\n                    // appending new node at the end\n                    tail.next = new Node(p1.data);\n                    tail = tail.next;\n                }\n                p1 = p1.next;\n                p2 = p2.next;\n                // moving to next nodes in both lists\n            }\n\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def findIntersection(self, head1, head2):\n        p1 = head1\n        p2 = head2\n        head = None\n        tail = None\n\n        while p1 and p2:\n            if p1.data > p2.data:\n                # nodes dont match\n                # moving to next node in list with smaller node\n                p2 = p2.next\n\n            elif p2.data > p1.data:\n                # nodes dont match\n                # moving to next node in list with smaller node\n                p1 = p1.next\n\n            else:\n                # if nodes match:\n\n                if head is None:\n                    head = tail = Node(p1.data)\n                    # creating new head for intersection list\n                else:\n                    tail.next = Node(p1.data)\n                    tail = tail.next\n                    # appending new node at the end\n\n                p1 = p1.next\n                p2 = p2.next\n                # moving to next nodes in both lists\n\n        return head\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to find the intersection of two sorted linked lists.\n    public Node findIntersection(Node head1, Node head2) {\n        Node p1 = head1, p2 = head2;\n        Node head = null, tail = null;\n\n        // Iterating over both linked lists until one reaches the end.\n        while (p1 != null && p2 != null) {\n            // If data in p1 is greater, move p2 to next node.\n            if (p1.data > p2.data) {\n                p2 = p2.next;\n            }\n            // If data in p2 is greater, move p1 to next node.\n            else if (p2.data > p1.data) {\n                p1 = p1.next;\n            }\n            // If data is equal, add to the intersection list.\n            else {\n                // Creating new node for intersection list.\n                if (head == null) {\n                    head = tail = new Node(p1.data);\n                } else {\n                    tail.next = new Node(p1.data);\n                    tail = tail.next;\n                }\n                // Move both pointers forward.\n                p1 = p1.next;\n                p2 = p2.next;\n            }\n        }\n\n        return head;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find the intersection of two sorted linked lists.\n    findIntersection(head1, head2) {\n        let p1 = head1, p2 = head2;\n        let head = null, tail = null;\n\n        // Iterating over both linked lists until one reaches the end.\n        while (p1 && p2) {\n            // If data in p1 is greater, move p2 to next node.\n            if (p1.data > p2.data) {\n                p2 = p2.next;\n            }\n            // If data in p2 is greater, move p1 to next node.\n            else if (p2.data > p1.data) {\n                p1 = p1.next;\n            }\n            // If data is equal, add to the intersection list.\n            else {\n                // Creating new node for intersection list.\n                if (head === null) {\n                    head = tail = new Node(p1.data);\n                } else {\n                    tail.next = new Node(p1.data);\n                    tail = tail.next;\n                }\n                // Move both pointers forward.\n                p1 = p1.next;\n                p2 = p2.next;\n            }\n        }\n\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}