{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713544,
            "title": "Intersection Point in Y Shaped Linked Lists",
            "titleSlug": "intersection-point-in-y-shaped-linked-lists--170645",
            "content": "<p><span style=\"font-size: 18px;\">Given two singly linked lists<strong>, </strong>write a program to get the point where two linked lists intersect each other.&nbsp;If the linked list does not merge at any point, it should return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList1: 3-&gt;6-&gt;9-&gt;common, LinkedList2: 10-&gt;common, common: 15-&gt;30-&gt;NULL\n<strong>Output: </strong>15\n<strong>Explanation:\n</strong></span><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/713544/Web/Other/blobid1_1723204650.png\" width=\"443\" height=\"265\" /> </pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList1: 4-&gt;1-&gt;common, LinkedList2: 5-&gt;6-&gt;1-&gt;common, common: 8-&gt;4-&gt;5-&gt;NULL\n<strong>Output: </strong>8\n<strong>Explanation: </strong></span>\n<span style=\"font-size: 18px;\"><strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/713544/Web/Other/blobid2_1723204735.png\" width=\"428\" height=\"322\" /> &nbsp;</strong></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n+m)<br /><strong>Expected Space&nbsp;</strong></span><strong style=\"font-size: 18px;\">Complexity</strong><strong style=\"font-size: 18px;\">:</strong><span style=\"font-size: 18px;\"> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">Length of Both LinkedList before the intersection(if any) is greater than 0.<br />1 &le; no. of nodes in LinkedList1, LinkedList2 &le; 10<sup>5</sup><br />-1000 &le; node-&gt;data &le; 1000</span></p>\n<p><strong style=\"font-size: 18px;\">Challenge</strong><span style=\"font-size: 18px;\">: Try to solve the problem without using any extra space.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two singly linked lists, find the node at which they intersect. If the lists do not intersect, return -1.",
                "constraints": [
                    "Length of both linked lists before the intersection (if any) is greater than 0.",
                    "1 <= number of nodes in linked list 1, linked list 2 <= 10^5",
                    "-1000 <= node value <= 1000"
                ],
                "testcases": [
                    {
                        "input": "LinkedList1: 3->6->9->common, LinkedList2: 10->common, common: 15->30->NULL",
                        "output": "15",
                        "explanation": "The two lists merge at the node with the value 15."
                    },
                    {
                        "input": "LinkedList1: 4->1->common, LinkedList2: 5->6->1->common, common: 8->4->5->NULL",
                        "output": "8",
                        "explanation": "The two lists merge at the node with the value 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The naive method is to run two nested loops, one for the first list and another for the second list, and check if&nbsp;any of the nodes of the 2nd list is the same as the current node of the first linked list.</span></p>\n<p><span ><strong>Time Complexity: O(n * n)</strong></span></p>\n<p><span >Can you solve it in O(n + n)?</span></p>\n<p><strong style=\"font-size: 16px;\">Hint:</strong><span style=\"font-size: 16px;\">&nbsp;Keep a visiting flag with each node of the first linked list</span></p>",
            "<p><span >There are many methods to solve this problem&mdash;method&nbsp;Using the difference of node counts.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "vmware",
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "snapdeal",
            "de-shaw",
            "factset",
            "makemytrip",
            "visa",
            "goldman-sachs",
            "maq-software",
            "adobe",
            "qualcomm"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Solution class with intersectPoint function\nclass Solution {\n  public:\n    Node* intersectPoint(Node* head1, Node* head2) {\n        // Create a hash set to store nodes of the first list\n        unordered_set<Node*> nodes;\n\n        Node* current = head1;\n        while (current) {\n            nodes.insert(current);\n            current = current->next;\n        }\n\n        // Traverse the second list and check for intersection\n        current = head2;\n        while (current) {\n            if (nodes.find(current) != nodes.end()) {\n                return current; // Intersection point found\n            }\n            current = current->next;\n        }\n\n        return nullptr; // No intersection\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    Node intersectPoint(Node head1, Node head2) {\n        int n1 = 0, n2 = 0;\n        Node temp;\n\n        // Find length of list1\n        for (temp = head1; temp != null; temp = temp.next) n1++;\n\n        // Find length of list2\n        for (temp = head2; temp != null; temp = temp.next) n2++;\n\n        // If list1 is longer, skip some nodes\n        while (n1 > n2) {\n            head1 = head1.next;\n            n1--;\n        }\n\n        // Similarly, if list2 is longer, skip some nodes\n        while (n2 > n1) {\n            head2 = head2.next;\n            n2--;\n        }\n\n        // Traverse till we get the intersection point, if any\n        while (head1 != null && head2 != null && head1 != head2) {\n            head1 = head1.next;\n            head2 = head2.next;\n        }\n\n        // Return the intersection node, or null if no intersection\n        return head1;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def intersectPoint(self, head1, head2):\n        # Find the lengths of both linked lists\n        n1 = n2 = 0\n        temp = head1\n        while temp:\n            n1 += 1\n            temp = temp.next\n\n        temp = head2\n        while temp:\n            n2 += 1\n            temp = temp.next\n\n        # Adjust the starting point for the longer list\n        while n1 > n2:\n            head1 = head1.next\n            n1 -= 1\n\n        while n2 > n1:\n            head2 = head2.next\n            n2 -= 1\n\n        # Traverse both lists to find the intersection point\n        while head1 and head2 and head1 != head2:\n            head1 = head1.next\n            head2 = head2.next\n\n        # Return the intersection point node, or None if there is none\n        return head1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    intersectPoint(head1, head2) {\n        let n1 = 0,\n            n2 = 0; // Initialize variables to store the lengths of both linked lists.\n        let temp =\n            head1; // Create a temporary pointer to traverse the first linked list.\n\n        while (temp) {\n            n1++;             // Count the number of nodes in the first linked list.\n            temp = temp.next; // Move to the next node.\n        }\n\n        temp = head2; // Reset the temporary pointer to traverse the second linked list.\n        while (temp) {\n            n2++;             // Count the number of nodes in the second linked list.\n            temp = temp.next; // Move to the next node.\n        }\n\n        // Adjust the starting point of the longer linked list to make them equidistant\n        // from the intersection point.\n        while (n1 > n2) {\n            head1 = head1.next;\n            n1--;\n        }\n\n        while (n2 > n1) {\n            head2 = head2.next;\n            n2--;\n        }\n\n        // Traverse both linked lists until they meet at the intersection point.\n        while (head1 && head2 && head1 !== head2) {\n            head1 = head1.next;\n            head2 = head2.next;\n        }\n\n        // Return the intersection node or null if there is none\n        return head1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}