{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700163,
            "title": "Intersection in Y Shaped Lists",
            "titleSlug": "intersection-point-in-y-shapped-linked-lists",
            "content": "<p><span style=\"font-size: 18px;\">Given the head of two singly linked lists, return the point where these two linked lists intersect.</span></p>\n<p><span style=\"font-size: 18px;\">Note:&nbsp;</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px;\">It is guaranteed that the intersected node always exists.</span></p>\n<p><strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px;\">Custom Input Format:</span></strong></p>\n<p><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px;\">head1 contains the nodes before intersection in list1<br />head2 contains the nodes before intersection in list2<br />CommonList contains the nodes after intersection of list1 and list2.</span></p>\n<p><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>head1 : 4 -&gt; 4 -&gt; 4 -&gt; 4 -&gt; 4, head2 : 4 -&gt; 4 -&gt; 4<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700163/Web/Other/blobid1_1721764552.png\" width=\"400\" height=\"400\" /> \n<strong>Output:</strong> 4\n<strong>Explanation: </strong>From the above image, it is clearly seen that the common part is 4 -&gt; 4 whose starting point is 4.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>head1 : 4 -&gt; 1 -&gt; 8 -&gt; 4 -&gt; 5, head2 : 5 -&gt; 6 -&gt; 1 -&gt; 8 -&gt; 4 -&gt; 5<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700163/Web/Other/blobid0_1721764467.png\" width=\"400\" height=\"400\" /> <br /><strong>Output: </strong>8\n<strong>Explanation: </strong>From the above image, it is clearly seen that the common part is 8 -&gt; 4 -&gt; 5 whose starting point is 8.</span></pre>\n<p><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Constraints:<br /></strong><span style=\"font-size: 18px;\">2 &le; total number of nodes &le; 2*10<sup>5</sup><br />-10<sup>4</sup> &le; node-&gt;data &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the heads of two singly linked lists, find and return the node where the two lists intersect. It is guaranteed that an intersection node always exists.",
                "constraints": [
                    "2 <= total number of nodes <= 2 * 10^5",
                    "-10^4 <= node->data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "head1 : 4 -> 4 -> 4 -> 4 -> 4, head2 : 4 -> 4 -> 4, CommonList : 4 -> 4",
                        "output": "4",
                        "explanation": "The two lists intersect at the node with value 4. The common part of the lists is 4 -> 4, and its starting node has a value of 4."
                    },
                    {
                        "input": "head1 : 4 -> 1 -> 8 -> 4 -> 5, head2 : 5 -> 6 -> 1 -> 8 -> 4 -> 5, CommonList: 8 -> 4 -> 5",
                        "output": "8",
                        "explanation": "The two lists intersect at the node with value 8. The common part of the lists is 8 -> 4 -> 5, and its starting node has a value of 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse both lists until you get a common node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "vmware",
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "snapdeal",
            "de-shaw",
            "factset",
            "makemytrip",
            "visa",
            "goldman-sachs",
            "maq-software",
            "adobe",
            "qualcomm"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find intersection point in Y shaped Linked Lists.\n    Node* intersectPoint(Node* head1, Node* head2) {\n        int n1 = 0, n2 = 0;\n        Node* temp;\n\n        // finding length of list1.\n        for (temp = head1; temp; temp = temp->next)\n            n1++;\n\n        // finding length of list2.\n        for (temp = head2; temp; temp = temp->next)\n            n2++;\n\n        // if list1 is longer, we ignore some of its starting\n        // elements till it has as many elements as list2.\n        for (; n1 > n2; n1--)\n            head1 = head1->next;\n\n        // similarly, if list2 is longer, we ignore some of its starting\n        // elements till it has as many elements as list1.\n        for (; n2 > n1; n2--)\n            head2 = head2->next;\n\n        // now we simply traverse ahead till we get the intersection point, if there\n        // is none, this loop will break when both pointers point at NULL.\n        while (head1 != head2) {\n            head1 = head1->next;\n            head2 = head2->next;\n        }\n        if (head1)\n            return head1;\n        return NULL;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Intersect {\n    // Function to find intersection point in Y shaped Linked Lists.\n    static Node intersectPoint(Node head1, Node head2) {\n        int n1 = 0, n2 = 0;\n        Node temp = null;\n\n        // finding length of list1.\n        for (temp = head1; temp != null; temp = temp.next) n1 += 1;\n\n        // finding length of list2.\n        for (temp = head2; temp != null; temp = temp.next) n2 += 1;\n\n        // if list1 is longer, we ignore some of its starting\n        // elements till it has as many elements as list2.\n        for (; n1 > n2; n1 -= 1) head1 = head1.next;\n\n        // similarly, if list2 is longer, we ignore some of its starting\n        // elements till it has as many elements as list1.\n        for (; n2 > n1; n2 -= 1) head2 = head2.next;\n\n        // now we simply traverse ahead till we get the intersection point, if\n        // there is none, this loop will break when both pointers point at NULL.\n        while (head1 != head2) {\n            head1 = head1.next;\n            head2 = head2.next;\n        }\n        return head1;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "'''\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n'''\n\n\nclass Solution:\n\n    def intersectPoint(self, head1, head2):\n        # Calculate the length of the first list\n        n1 = 0\n        temp = head1\n        while temp:\n            n1 += 1\n            temp = temp.next\n\n        # Calculate the length of the second list\n        n2 = 0\n        temp = head2\n        while temp:\n            n2 += 1\n            temp = temp.next\n\n        # Adjust the starting point of the longer list\n        while n1 > n2:\n            head1 = head1.next\n            n1 -= 1\n        while n2 > n1:\n            head2 = head2.next\n            n2 -= 1\n\n        # Traverse both lists together to find the intersection point\n        while head1 != head2:\n            head1 = head1.next\n            head2 = head2.next\n\n        return head1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find intersection point in Y shaped Linked Lists.\n    //  Function to find intersection point in Y shaped Linked Lists.\n    intersectPoint(head1, head2) {\n        let n1 = 0, n2 = 0;\n        let temp;\n\n        // Finding length of list1.\n        for (temp = head1; temp; temp = temp.next) n1++;\n\n        // Finding length of list2.\n        for (temp = head2; temp; temp = temp.next) n2++;\n\n        // If list1 is longer, we ignore some of its starting\n        // elements till it has as many elements as list2.\n        for (; n1 > n2; n1--) head1 = head1.next;\n\n        // Similarly, if list2 is longer, we ignore some of its starting\n        // elements till it has as many elements as list1.\n        for (; n2 > n1; n2--) head2 = head2.next;\n\n        // Now we simply traverse ahead till we get the intersection point, if there\n        // is none, this loop will break when both pointers point at NULL.\n        while (head1 !== head2) {\n            head1 = head1.next;\n            head2 = head2.next;\n        }\n\n        return head1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}