{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712534,
            "title": "Introduction to Doubly Linked List",
            "titleSlug": "introduction-to-doubly-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Geek is learning data structures and is familiar with <strong>linked lists</strong>, but he's curious about how to access the previous element&nbsp;in a <strong>linked list</strong> in the same way that we access&nbsp;the next element. His teacher explains <strong>doubly linked lists</strong> to him.</span></p>\n<p><span style=\"font-size: 18px;\">Given an integer array <strong>arr</strong> of size <strong>n</strong>. Construct the doubly linked list from <strong>arr</strong> and return the <strong>head</strong> of it.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 5\narr = [1,2,3,4,5]\n<strong>Output:</strong>\n1 2 3 4 5\n<strong>Explanation:</strong> Linked list for the given array will be 1&lt;-&gt;2&lt;-&gt;3&lt;-&gt;4&lt;-&gt;5.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 1\narr = [1]\n<strong>Output:</strong>\n1\nExplanation: Linked list for the given array will be 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 100</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>constructDLL()</strong> which takes <strong>arr[]</strong>&nbsp;as input parameters and returns the <strong>head</strong> of the Linked List.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(n)</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr` of size `n`, construct a doubly linked list from `arr` and return the head of the list. In a doubly linked list, each node has pointers to both the next and previous nodes.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 5\narr = [1,2,3,4,5]",
                        "output": "1 2 3 4 5",
                        "explanation": "A doubly linked list with the elements [1, 2, 3, 4, 5] will be constructed where each element points to the previous and next element in the list."
                    },
                    {
                        "input": "n = 1\narr = [1]",
                        "output": "1",
                        "explanation": "A doubly linked list with only one element, 1, will be created. Since it is the only element, the previous and next pointers will be null."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to construct a doubly linked list from a vector of integers.\n    Node* constructDLL(vector<int>& arr) {\n        Node* head = NULL;\n        Node* cur = new Node();\n        cur->data = arr[0];\n        cur->next = NULL;\n        cur->prev = NULL;\n        head = cur;\n        // Iterating over the vector to create the doubly linked list.\n        for (int i = 1; i < arr.size(); i++) {\n            Node* tmp = new Node();\n            tmp->data = arr[i];\n            tmp->next = NULL;\n            tmp->prev = NULL;\n            cur->next = tmp;\n            tmp->prev = cur;\n            cur = tmp;\n        }\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to construct a Doubly Linked List from an array\n    Node constructDLL(int arr[]) {\n        Node head = null;            // Initialize head as null\n        Node cur = new Node(arr[0]); // Create a new node with the value of the first\n                                     // element in the array\n        head = cur;                  // Make this node the head of the linked list\n        for (int i = 1; i < arr.length;\n             i++) { // Iterate through the array starting from the second element\n            Node temp = new Node(\n                arr[i]); // Create a new node with the value of the current element\n            cur.next =\n                temp; // Make the current node's next pointer point to the new node\n            temp.prev =\n                cur; // Make the new node's previous pointer point to the current node\n            cur = temp; // Update the current node to be the new node\n        }\n        return head; // Return the head of the doubly linked list\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n'''\n# Node Class\n\tclass Node:\n\t    def __init__(self, data):   # data -> value stored in node\n\t        self.data = data\n\t        self.next = None\n\t        self.prev = None\n'''\n\n\nclass Solution:\n\n    def constructDLL(self, arr):\n        head = None\n        cur = Node(arr[0])\n        head = cur\n        for val in arr[1:]:\n            tmp = Node(val)\n            cur.next = tmp\n            tmp.prev = cur\n            cur = tmp\n        return head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}