{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712572,
            "title": "Introduction to DP",
            "titleSlug": "introduction-to-dp",
            "content": "<p><span style=\"font-size: 18px;\">Geek is learning data structures, and he recently learned about the top-down and bottom-up dynamic programming approaches</span><span style=\"font-size: 18px;\">. Geek is having trouble telling them apart from one another.</span></p>\n<p><span style=\"font-size: 18px;\">When given an integer n, where n is based on a 0-based index, find the <strong>n<sup>th</sup></strong>&nbsp;Fibonacci number.</span></p>\n<p><span style=\"font-size: 18px;\">Every ith number in the series equals the sum of the <strong>(i-1)<sup>th</sup></strong>&nbsp;and<strong> (i-2)<sup>th</sup></strong>&nbsp;numbers, where the first and second numbers are specified as <strong>0</strong> and <strong>1</strong>, respectively.</span></p>\n<p><span style=\"font-size: 18px;\">For the given issue, code both <strong>top-down</strong> and <strong>bottom-up</strong> approaches</span><span style=\"font-size: 18px;\">.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note : </strong>As the answer might be large, <strong>return the final answer modulo 10<sup>9&nbsp;</sup>+ 7</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 5\n<strong>Output: </strong>5\n<strong>Explanation:</strong> 0,1,1,2,3,5 as we can see 5<sup>th</sup>&nbsp;number is 5.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 6\n<strong>Output: </strong>8\n<strong>Explanation:</strong> 0,1,1,2,3,5,8 as we can see 6<sup>th</sup>&nbsp;number is 8.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>4</sup></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete two&nbsp;functions <strong>topDown() and bottomUp()</strong> which take <strong>n</strong> as input parameters and return the <strong>n<sup>th&nbsp;</sup></strong>Fibonacci number.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(n)</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer 'n' (0-based index), find the n-th Fibonacci number. The Fibonacci sequence starts with 0 and 1. Each subsequent number is the sum of the previous two. Implement both top-down (memoization) and bottom-up (tabulation) dynamic programming approaches.\n\nNote: Return the final answer modulo 10^9 + 7.",
                "constraints": [
                    "1 <= n <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "5",
                        "explanation": "The Fibonacci sequence up to the 5th index is: 0, 1, 1, 2, 3, 5. Therefore, the 5th Fibonacci number is 5."
                    },
                    {
                        "input": "6",
                        "output": "8",
                        "explanation": "The Fibonacci sequence up to the 6th index is: 0, 1, 1, 2, 3, 5, 8. Therefore, the 6th Fibonacci number is 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>use the data structure to store the element for F(n)=F(n-1)+F(n-2).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    const long long int MOD = 1e9 + 7;\r\n\r\n    // Helper function for top-down approach\r\n    long long int helper(int n, vector<int>& dp){\r\n        // Base case: if n is less than or equals to 1, return n\r\n        if (n <= 1) return dp[n] = n;\r\n\r\n        // If result already exists in dp array, return it\r\n        if (dp[n] != -1) return dp[n];\r\n        \r\n        // Recursively calculate the Fibonacci number and store it in dp array\r\n        return dp[n] = (helper(n - 1, dp) + helper(n - 2, dp)) % MOD;\r\n    }\r\n\r\n    // Top-down approach to calculate Fibonacci number\r\n    long long int topDown(int n) {\r\n        // Create a dp array and initialize it with -1 indicating no result yet\r\n        vector<int> dp(n + 1, -1);\r\n        // Call helper function to calculate Fibonacci number using top-down approach\r\n        return helper(n, dp); \r\n    }\r\n    \r\n    // Bottom-up approach to calculate Fibonacci number\r\n    long long int bottomUp(int n) {\r\n        // Create a dp array and initialize it with -1 indicating no result yet\r\n        vector<long long int> dp1(n + 1, -1);\r\n\r\n        // Base cases\r\n        dp1[0] = 0;\r\n        dp1[1] = 1;\r\n\r\n        // Start from 2 and calculate Fibonacci numbers iteratively\r\n        for (int i = 2; i <= n; i++) {\r\n            dp1[i] = (dp1[i - 1] + dp1[i - 2]) % MOD;\r\n        }\r\n        // Return the Fibonacci number for n\r\n        return dp1[n];\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static long dp[];\r\n    static int MOD = 1000000007;\r\n    static long topDown(int n) {\r\n\r\n        // code here\r\n        dp = new long[n + 1];\r\n        Arrays.fill(dp, -1);\r\n        return fun(n);\r\n    }\r\n    static long fun(int n) {\r\n        if (n <= 1) return n;\r\n\r\n        if (dp[n] != -1) return dp[n];\r\n        return dp[n] = (fun(n - 1) + fun(n - 2)) % MOD;\r\n    }\r\n\r\n    static long bottomUp(int n) {\r\n        // code here\r\n        long dp1[] = new long[n + 1];\r\n\r\n        dp1[0] = 0;\r\n        dp1[1] = 1;\r\n\r\n        for (int i = 2; i <= n; i++) {\r\n            dp1[i] = (dp1[i - 1] + dp1[i - 2]) % MOD;\r\n        }\r\n        return dp1[n];\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom sys import setrecursionlimit\nsetrecursionlimit(10**7)\n\nclass Solution:\n    #Function to calculate nth Fibonacci number using top-down approach.\n    def topDown(self, n):\n        #Inner function to calculate Fibonacci number using recursion and memoization.\n        def fn(n):\n            if n <= 1:\n                return n\n            if n in dp:\n                return dp[n]\n            ans = (fn(n - 1) + fn(n - 2)) % M\n            dp[n] = ans\n            return ans\n        \n        dp = {} #Dictionary to store calculated Fibonacci numbers.\n        M = 10**9 + 7 #Modulus value for Fibonacci calculation.\n        return fn(n) #Calling inner function with input n.\n    \n    #Function to calculate nth Fibonacci number using bottom-up approach.\n    def bottomUp(self, n):\n        M = 10 ** 9 + 7 #Modulus value for Fibonacci calculation.\n        dp = [0] * (1 + n) #List to store Fibonacci numbers.\n        dp[0] = 0 #Fibonacci number at index 0 is 0.\n        dp[1] = 1 #Fibonacci number at index 1 is 1.\n        #Iterating from index 2 to n to calculate Fibonacci numbers.\n        for i in range(2, n + 1):\n            dp[i] = (dp[i-1] + dp[i-2]) % M #Calculating Fibonacci number.\n        return dp[n] #Returning Fibonacci number at index n.",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n* @param {number} n\n* @returns {number}\n*/\n\nclass Solution {\n   topDown(n) {\n      //Inner function to calculate Fibonacci number using recursion and memoization.\n        function fn(n){\n            if (n <= 1){\n                return n;\n            }\n            if (n in dp){\n                return dp[n];\n            }\n            let ans = (fn(n - 1) + fn(n - 2)) % M;\n            dp[n] = ans;\n            return ans;\n        }\n        \n        let dp = {};  //Dictionary to store calculated Fibonacci numbers.\n        let M = 10**9 + 7;  //Modulus value for Fibonacci calculation.\n        return fn(n);  //Calling inner function with input n.\n   }\n   \n   bottomUp(n){\n        let M = 10 ** 9 + 7;  //Modulus value for Fibonacci calculation.\n        let dp = new Array(n+1).fill(0);  //Array to store Fibonacci numbers.\n        dp[0] = 0;  //Fibonacci number at index 0 is 0.\n        dp[1] = 1;  //Fibonacci number at index 1 is 1.\n        //Iterating from index 2 to n to calculate Fibonacci numbers.\n        for (let i = 2; i <= n; i++){\n            dp[i] = (dp[i-1] + dp[i-2]) % M;  //Calculating Fibonacci number.\n        }\n        return dp[n];  //Returning Fibonacci number at index n.\n   }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}