{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712529,
            "title": "Array to Linked List",
            "titleSlug": "introduction-to-linked-list",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of integer <strong>arr. </strong>Your task is&nbsp;to construct the linked list from arr<strong> </strong>&amp;<strong> </strong></span><span style=\"font-size: 18px;\">return the <strong>head</strong> of the linked list.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [1, 2, 3, 4, 5]\n<strong>Output: </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5\n<strong>Explanation:</strong> Linked list for the given array will be<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/712529/Web/Other/blobid1_1722579459.png\" width=\"351\" height=\"71\" /><br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [2, 4, 6, 7, 5, 1, 0]\n<strong>Output: </strong>LinkedList: 2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1-&gt;0\n<strong>Explanation:</strong> Linked list for the given array will be<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/712529/Web/Other/blobid2_1722579470.png\" width=\"451\" height=\"71\" /><br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr`, construct a linked list from the elements of `arr` and return the head of the linked list.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5]",
                        "output": "LinkedList: 1->2->3->4->5",
                        "explanation": "The linked list is constructed by connecting the elements of the input array in the given order."
                    },
                    {
                        "input": "[2, 4, 6, 7, 5, 1, 0]",
                        "output": "LinkedList: 2->4->6->7->5->1->0",
                        "explanation": "The linked list is constructed by connecting the elements of the input array in the given order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate through the array, create nodes for each element, link them sequentially, and return the head node of the linked list.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to construct linked list from given array.\n    Node* constructLL(vector<int>& arr) {\n        Node* head = NULL;      // Initializing head pointer as NULL.\n        Node* cur = new Node(); // Creating a new node.\n        cur->data = arr[0];     // Setting node data as the first element of the array.\n        cur->next = NULL;       // Setting next pointer of the node to NULL.\n        head = cur;             // Making the newly created node as the head.\n        // Loop to create and connect the remaining nodes of the linked list.\n        for (int i = 1; i < arr.size(); i++) {\n            Node* tmp = new Node(); // Creating a new node.\n            tmp->data =\n                arr[i];       // Setting node data as the current element of the array.\n            tmp->next = NULL; // Setting next pointer of the node to NULL.\n            cur->next = tmp;  // Connecting the current node to the newly created node.\n            cur = tmp;        // Updating the current pointer to the newly created node.\n        }\n        return head; // Returning the head of the linked list.\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static Node constructLL(int arr[]) {\n        if (arr.length == 0) return null; // handle empty array case\n\n        // creating the head of the linked list\n        Node head = new Node(arr[0]);\n        Node cur = head;\n\n        // adding elements to the linked list\n        for (int i = 1; i < arr.length; i++) {\n            Node tmp = new Node(arr[i]);\n            cur.next = tmp;\n            cur = tmp;\n        }\n\n        // returning the head of the linked list\n        return head;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n'''\n# Node Class\n\tclass Node:\n\t    def __init__(self, data):   # data -> value stored in node\n\t        self.data = data\n\t        self.next = None\n'''\n\n\nclass Solution:\n\n    def constructLL(self, arr):\n        head = Node(arr[0])\n        origHead = head\n        for val in arr[1:]:\n            head.next = Node(val)\n            head = head.next\n        return origHead\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to construct linked list from given array.\n    construct(arr) {\n        if (arr.length === 0) return null; // Handle empty array case\n\n        // Creating the head node with the first element of the array.\n        let head = new Node(arr[0]);\n        // Initializing the variable origHead to store the reference of the head node.\n        let origHead = head;\n        // Iterating through the array starting from the second element.\n        for (let i = 1; i < arr.length; i++) {\n            // Creating a new node with the current element of the array.\n            let newNode = new Node(arr[i]);\n            // Connecting the current node to the next of the previous node.\n            head.next = newNode;\n            // Moving the head pointer to the new node that is connected currently.\n            head = head.next;\n        }\n        // Returning the reference of the original head node.\n        return origHead;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}