{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703304,
            "title": "Inverse Permutation",
            "titleSlug": "inverse-permutation0344",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> containing integers in the range from 1 to n, we need to find the inverse permutation of that array.<br /><strong>Inverse Permutation</strong> is a permutation that you will get by inserting the position of an element at the position specified by the element value in the array. For a better understanding, consider the following example:<br />Suppose we found element 4 at position 3 in an array, then in reverse permutation, we insert 3 (position of element 4 in the array) in position 4 (element value).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 4, 3, 2]\n<strong>Output: </strong>[1, 4, 3, 2]\n<strong>Explanation: </strong>For element 1 we insert position of 1 from arr1 i.e 1 at position 1 in arr2. For element 4 in arr1, we insert 2 from arr1 at position 4 in arr2. Similarly, for element 2 in arr1,we insert position of 2 i.e 4 in arr2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 3, 4, 5, 1]\n<strong>Output: </strong>[5, 1, 2, 3, 4]\n<strong>Explanation: </strong>As index 1 has value 2 so 1 will be placed at index 2, similarly 2 has 3 so 2 will be placed at index 3 similarly 3 has 4 so placed at 4, 4 has 5 so 4 placed at 5 and 5  has 1 so placed at index 1. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; n<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` containing integers in the range from 1 to *n*, find the inverse permutation of the array. The inverse permutation is constructed by placing the *index* of each element in `arr[]` at the *value* indicated by that element in the new array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= n"
                ],
                "testcases": [
                    {
                        "input": "[1, 4, 3, 2]",
                        "output": "[1, 4, 3, 2]",
                        "explanation": "The element 1 is at index 0 (or position 1, if 1-indexed). So, we place 1 at index 0 (or position 1) in the result. The element 4 is at index 3 (or position 4), so we place 4 at index 3 (or position 4) in the result. Similarly, the element 3 is at index 2 (or position 3), so we place 3 at index 2 (or position 3) in the result. The element 2 is at index 1 (or position 2), so we place 2 at index 1 (or position 2) in the result."
                    },
                    {
                        "input": "[2, 3, 4, 5, 1]",
                        "output": "[5, 1, 2, 3, 4]",
                        "explanation": "The element 2 is at index 0 (or position 1), so we put 1 at index 1 (or position 2). The element 3 is at index 1 (or position 2), so we put 2 at index 2 (or position 3). The element 4 is at index 2 (or position 3), so we put 3 at index 3 (or position 4). The element 5 is at index 3 (or position 4), so we put 4 at index 4 (or position 5). The element 1 is at index 4 (or position 5), so we put 5 at index 0 (or position 1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The idea is to use another array to store index and element mappings</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // C++ function to find inverse permutations\n    vector<int> inversePermutation(vector<int>& arr) {\n        int n = arr.size();\n        // to store element to index mappings\n        vector<int> ans(n);\n\n        // Inserting position at their\n        // respective element in second array\n        for (int i = 0; i < n; i++)\n            ans[arr[i] - 1] = i + 1;\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    // Function for finding maximum and value pair\n    public static ArrayList<Integer> inversePermutation(int arr[]) {\n        // Complete the function\n        int n = arr.length;\n        ArrayList<Integer> ans = new ArrayList<>(n);\n\n        // to store element to index mappings\n        int temp[] = new int[n];\n        // Inserting position at their\n        // respective element in second array\n        for (int i = 0; i < n; i++) {\n            temp[arr[i] - 1] = i + 1;\n        }\n        for (int i = 0; i < n; i++) ans.add(temp[i]);\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Python function to find inverse permutations\n    def inversePermutation(self, arr):\n        n = len(arr)\n        # To store element to index mappings\n        ans = [0] * n\n\n        # Inserting position at their\n        # respective element in second array\n        for i in range(n):\n            ans[arr[i] - 1] = i + 1\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    inversePermutation(arr) {\n        let n = arr.length;\n        // to store element to index mappings\n        let ans = new Array(n);\n        // Inserting position at their\n        // respective element in second array\n        for (let i = 0; i < n; i++) {\n            ans[arr[i] - 1] = i + 1;\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}