{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701226,
            "title": "Count Inversions",
            "titleSlug": "inversion-of-array-1587115620",
            "content": "<p><span >Given an array of integers <strong>arr[]</strong>. Find the <strong>Inversion Count</strong> in the array.<br />T</span><span >wo elements arr[i] and arr[j] form an inversion if <strong>arr[i] &gt; arr[j]</strong> and <strong>i &lt; j</strong>.</span></p>\n<blockquote>\n<p><span ><em><strong>Inversion Count</strong>: </em>For an array, inversion count indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0. <br />If an array is sorted in the reverse order then the inversion count is the maximum.&nbsp;</span></p>\n</blockquote>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: arr[] = [2, 4, 1, 3, 5]<br /><strong>Output</strong>: 3\n<strong>Explanation</strong>: The sequence 2, 4, 1, 3, 5 has three inversions (2, 1), (4, 1), (4, 3).</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [2, 3, 4, 5, 6]<br /><strong>Output</strong>: 0\n<strong>Explanation</strong>: As the sequence is already sorted so there is no inversion count.</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [10, 10, 10]<br /><strong>Output</strong>: 0\n<strong>Explanation</strong>: As all the elements of array are same, so there is no inversion count.</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &le; arr.size()</span><span >&nbsp;&le; 10</span><sup>5<br /></sup><span >1 &le; </span><span style=\"font-size: 18.6667px;\">arr[i]</span><span > &le; 10</span><sup>4</sup><sup><br /></sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We can use a divide and conquer technique like Merge Sort.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "makemytrip",
            "adobe",
            "bankbazaar",
            "myntra"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Function to merge two subarrays and count inversions\nint mergeAndCount(int arr[], int temp[], int left, int mid, int right) {\n    int i = left;    // Starting index for left subarray\n    int j = mid + 1; // Starting index for right subarray\n    int k = left;    // Starting index to store merged result\n    int inv_count = 0;\n\n    // Merge two sorted subarrays into temp\n    while (i <= mid && j <= right) {\n        if (arr[i] <= arr[j]) {\n            temp[k++] = arr[i++];\n        } else {\n            temp[k++] = arr[j++];\n            // All remaining elements in the left subarray are inversions\n            inv_count += (mid - i + 1);\n        }\n    }\n\n    // Copy remaining elements of the left subarray (if any)\n    while (i <= mid) {\n        temp[k++] = arr[i++];\n    }\n\n    // Copy remaining elements of the right subarray (if any)\n    while (j <= right) {\n        temp[k++] = arr[j++];\n    }\n\n    // Copy merged elements back into the original array\n    for (i = left; i <= right; i++) {\n        arr[i] = temp[i];\n    }\n\n    return inv_count;\n}\n\n// Function to apply merge sort and count inversions\nint mergeSortAndCount(int arr[], int temp[], int left, int right) {\n    int mid, inv_count = 0;\n\n    if (left < right) {\n        // Find the mid-point\n        mid = (left + right) / 2;\n\n        // Recursively count inversions in the left subarray\n        inv_count += mergeSortAndCount(arr, temp, left, mid);\n\n        // Recursively count inversions in the right subarray\n        inv_count += mergeSortAndCount(arr, temp, mid + 1, right);\n\n        // Merge the two subarrays and count split inversions\n        inv_count += mergeAndCount(arr, temp, left, mid, right);\n    }\n\n    return inv_count;\n}\n\n// Function to count inversions in the array\nint countInversions(int arr[], int n) {\n    int *temp = (int *)malloc(n * sizeof(int));\n    int inv_count = mergeSortAndCount(arr, temp, 0, n - 1);\n    free(temp);\n    return inv_count;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Counter to keep the count of inversions.\n    int my_counter = 0;\n\n    // p: initial point in the array, say left index\n    // q: mid point\n    // r: higher range\n    // Function to sort and merge two parts of array.\n    void merge(vector<int> &arr, int p, int q, int r) {\n        int l = q - p + 1;\n        int l2 = r - q;\n\n        vector<int> arr1(l), arr2(l2);\n\n        // Storing elements present in left half in arr1.\n        for (int i = 0; i < l; i++) {\n            arr1[i] = arr[i + p];\n        }\n        // Storing elements present in right half in arr2.\n        for (int i = 0; i < l2; i++) {\n            arr2[i] = arr[q + i + 1];\n        }\n\n        int left = 0, right = 0, k = p;\n\n        // Merging two arrays while counting inversions.\n        while (left < l && right < l2) {\n            if (arr1[left] <= arr2[right]) {\n                arr[k++] = arr1[left++];\n            } else {\n                arr[k++] = arr2[right++];\n                // Counting inversions.\n                my_counter += (l - left);\n            }\n        }\n\n        // Adding remaining elements from arr1 if any.\n        while (left < l) {\n            arr[k++] = arr1[left++];\n        }\n\n        // Adding remaining elements from arr2 if any.\n        while (right < l2) {\n            arr[k++] = arr2[right++];\n        }\n    }\n\n    // Function to apply merge sort and count inversions.\n    void mergeSort(vector<int> &arr, int p, int r) {\n        if (p < r) {\n            int q = (p + r) / 2;\n\n            // Recursively sorting both halves.\n            mergeSort(arr, p, q);\n            mergeSort(arr, q + 1, r);\n\n            // Merging the sorted halves and counting inversions.\n            merge(arr, p, q, r);\n        }\n    }\n\n    // Function to count inversions in the array.\n    int inversionCount(vector<int> &arr) {\n        my_counter = 0; // Resetting counter for each test case.\n        mergeSort(arr, 0, arr.size() - 1);\n        return my_counter;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to count inversions in the array.\n    static int inversionCount(int arr[]) {\n        int n = arr.length;\n        int temp[] = new int[n];\n        // returning the count of inversions in the array.\n        return _mergeSort(arr, temp, 0, n - 1);\n    }\n\n    // Function to mergesort the array, which uses divide and conquer algorithm\n    // on left and right halves of array for mergesort operation.\n    static int _mergeSort(int arr[], int temp[], int left, int right) {\n        int mid, inv_count = 0;\n        if (right > left) {\n            mid = (right + left) / 2;\n\n            // Calling recursive function to sort left half of the array.\n            inv_count = _mergeSort(arr, temp, left, mid);\n\n            // Calling recursive function to sort right half of the array.\n            inv_count += _mergeSort(arr, temp, mid + 1, right);\n\n            // Calling merge function which sorts and merges both halves\n            // of the array obtained after calling both recursive function.\n            inv_count += merge(arr, temp, left, mid + 1, right);\n        }\n        // returning the count of inversions in the array.\n        return inv_count;\n    }\n\n    // Function to sort and merge two parts of array and return inversion count.\n    static int merge(int arr[], int temp[], int left, int mid, int right) {\n        int i, j, k;\n        int inv_count = 0;\n        // i is pointer for left subarray.\n        i = left;\n        // j is pointer for right subarray.\n        j = mid;\n        // k is index for resultant merged subarray.\n        k = left;\n\n        // Using two pointers over the array which helps in storing the\n        // smaller element and thus merging the subarray.\n        while ((i <= mid - 1) && (j <= right)) {\n\n            // Comparing element of the array at pointers i and j and accordingly\n            // storing the smaller element and updating the pointers.\n            if (arr[i] <= arr[j]) {\n                temp[k++] = arr[i++];\n            } else {\n                temp[k++] = arr[j++];\n                // Adding the inversions which is the number of elements which\n                // are smaller than arr[j] in the left half of the array.\n                inv_count = inv_count + (mid - i);\n            }\n        }\n\n        // Copying the remaining elements of left subarray(if there are any)\n        // to temp.\n        while (i <= mid - 1) temp[k++] = arr[i++];\n\n        // Copying the remaining elements of right subarray(if there are any)\n        // to temp.\n        while (j <= right) temp[k++] = arr[j++];\n\n        // Copying back the merged elements to original array.\n        for (i = left; i <= right; i++) arr[i] = temp[i];\n\n        return inv_count;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    #Back-end complete function Template for Python 3\n\n    #global variable to count total inversions\n    inversion_count = 0\n\n    #Function to count inversions in the array.\n    def inversionCount(self, arr):\n        n = len(arr)\n        global inversion_count\n        inversion_count = 0\n        self.merge_sort(arr, 0, n - 1)\n        #returning the count of inversions in the array.\n        return inversion_count\n\n    #Function to sort and merge two parts of array.\n    def merge(self, arr, start, mid, end):\n        global inversion_count\n        temp = [0 for i in range(end - start + 1)]\n\n        #i is pointer for left subarray.\n        #j is pointer for right subarray.\n        #k is index for resultant merged subarray.\n        i, j, k = start, mid + 1, 0\n\n        #Using two pointers over the array which helps in storing the\n        #smaller element and thus merging the subarray.\n        while i <= mid and j <= end:\n            #Comparing element of the array at pointers i and j and accordingly\n            #storing the smaller element and updating the pointers.\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                k += 1\n                i += 1\n            else:\n                temp[k] = arr[j]\n                k += 1\n                j += 1\n                #Adding the inversions which is the number of elements which\n                #are smaller than arr[j] in the left half of the array.\n                inversion_count += mid - i + 1\n\n        #Copying the remaining elements of left subarray(if there are any) to temp.\n        while i <= mid:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n\n        #Copying the remaining elements of right subarray(if there are any) to temp.\n        while j <= end:\n            temp[k] = arr[j]\n            k += 1\n            j += 1\n\n        #Copying back the merged elements to original array.\n        for i in range(start, end + 1):\n            arr[i] = temp[i - start]\n\n    #Function to mergesort the array, which uses divide and conquer algorithm\n    #on left and right halves of array for mergesort operation.\n    def merge_sort(self, arr, start, end):\n        if start < end:\n            mid = (start + end) // 2\n            #Calling recursive function to sort left half of the array.\n            self.merge_sort(arr, start, mid)\n            #Calling recursive function to sort right half of the array.\n            self.merge_sort(arr, mid + 1, end)\n            #Calling merge function which sorts and merges both halves\n            #of the array obtained after calling both recursive function.\n            self.merge(arr, start, mid, end)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    private int myCounter = 0;\n\n    private void Merge(int[] arr, int p, int q, int r) {\n        int l = q - p + 1;\n        int l2 = r - q;\n\n        int[] arr1 = new int[l];\n        int[] arr2 = new int[l2];\n\n        Array.Copy(arr, p, arr1, 0, l);\n        Array.Copy(arr, q + 1, arr2, 0, l2);\n\n        int left = 0, right = 0, k = p;\n\n        while (left < l && right < l2) {\n            if (arr1[left] <= arr2[right]) {\n                arr[k++] = arr1[left++];\n            } else {\n                arr[k++] = arr2[right++];\n                myCounter += (l - left);\n            }\n        }\n\n        while (left < l) {\n            arr[k++] = arr1[left++];\n        }\n\n        while (right < l2) {\n            arr[k++] = arr2[right++];\n        }\n    }\n\n    private void MergeSort(int[] arr, int p, int r) {\n        if (p < r) {\n            int q = (p + r) / 2;\n            MergeSort(arr, p, q);\n            MergeSort(arr, q + 1, r);\n            Merge(arr, p, q, r);\n        }\n    }\n\n    // Function to count inversions in the array.\n    public int InversionCount(int[] arr) {\n        myCounter = 0;\n        MergeSort(arr, 0, arr.Length - 1);\n        return myCounter;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number}\n */\n\nclass Solution {\n    constructor() {\n        // Counter to keep the count of inversions.\n        this.my_counter = 0;\n    }\n\n    // p: initial point in the array, say left index\n    // q: mid point\n    // r: higher range\n    // Function to sort and merge two parts of array.\n    merge(arr, p, q, r) {\n        let l = q - p + 1;\n\n        let arr1 = new Array(l);\n\n        let l2 = r - q;\n\n        let arr2 = new Array(l2);\n\n        // Storing elements present in left half in the array arr1.\n        for (let i = 0; i < l; i++) {\n            arr1[i] = arr[i + p];\n        }\n        // Storing elements present in right half in the array arr2.\n        for (let i = 0; i < l2; i++) {\n            arr2[i] = arr[q + i + 1];\n        }\n\n        let left = 0, right = 0, k = p;\n\n        // Using two pointers over the two arrays which helps in storing the\n        // smaller element and thus merging the array.\n        while (left < l && right < l2) {\n            // Comparing element of the arrays arr1 and arr2 at pointers left and\n            // right and accordingly storing the smaller element and updating\n            // the pointers.\n            if (arr1[left] <= arr2[right]) {\n                arr[k] = arr1[left];\n                left++;\n            } else {\n                arr[k] = arr2[right];\n                right++;\n\n                // Adding the inversions which is the number of elements which\n                // are smaller than arr2[right] in the arr1 array.\n                this.my_counter += (l - left);\n            }\n            k++;\n        }\n\n        // Storing the remaining elements of left subarray (if there are any)\n        // in the array arr1.\n        while (left < l) {\n            arr[k++] = arr1[left++];\n        }\n\n        // Storing the remaining elements of right subarray (if there are any)\n        // in the array arr2.\n        while (right < l2) {\n            arr[k++] = arr2[right++];\n        }\n    }\n\n    // Function to mergesort the array, which uses divide and conquer algorithm\n    // on left and right halves of array for mergesort operation.\n    mergeSort(arr, p, r) {\n        if (p < r) {\n            let q = Math.floor((p + r) / 2);\n\n            // Calling recursive function to sort left half of the array.\n            this.mergeSort(arr, p, q);\n\n            // Calling recursive function to sort right half of the array.\n            this.mergeSort(arr, q + 1, r);\n\n            // Calling merge function which sorts and merges both halves\n            // of the array obtained after calling both recursive function.\n            this.merge(arr, p, q, r);\n        }\n    }\n\n    // Function to count inversions in the array.\n    inversionCount(arr) {\n        this.mergeSort(arr, 0, arr.length - 1);\n        // returning the count of inversions in the array.\n        return this.my_counter;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}