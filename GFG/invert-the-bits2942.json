{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703742,
            "title": "Invert the Bits",
            "titleSlug": "invert-the-bits2942",
            "content": "<p><span style=\"font-size:18px\">Given a number 32 bit number N&nbsp;.Find&nbsp;the number you get by inverting bits in its binary representation (i.e. 1 is made 0 and 0 is made 1). In other words,Negate(~) the number.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN=4289384\n<strong>Output:</strong>\n4290677911\n<strong>Explanation:</strong>\n00000000010000010111001101101000\nis the binary representation of 4289384.\nNegating this in 32 bits, we get\n11111111101111101000110010010111\nwhich is the binary representation of\n4290677911.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN=1\n<strong>Output:</strong>\n4294967294\n<strong>Explanation:</strong>\nBinary representation of 1 is\n00000000000000000000000000000001.\nNegating this we get\n11111111111111111111111111111110\nwhich is the binary representation of\n4294967294.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your task:</strong><br />\nYou don&#39;t need to read input or print anything.Your task is to complete the function <strong>invertBits()</strong> which takes a number N as input parameter and returns the negation of the number.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(1)<br />\n<strong>Expected Auxillary Space:</strong>O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;=N&lt;=10<sup>8</sup>+9</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Think about the Xor(^) operator.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    //Function to invert the bits of a number.\n    long long int invertBits(long long int N)\n    { \n        //Initialize x to 1.\n        long long int x=1;\n        \n        //Loop to calculate x as 2^32 - 1.\n        for(int i=0;i<32;i++)\n         x*=2;\n        x--;\n        \n        //Return the bitwise XOR of x and N.\n        return x^N; \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n\n    // Function to invert the bits of a given number\n    static long invertBits(long N){\n        long x=1;\n        \n        // Loop to calculate 2^32 - 1\n        for(int i=0;i<32;i++)\n            x*=2;\n        \n        // Using XOR operator to invert the bits of N\n        x--;\n        return x^N;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to invert the bits of a number.\n    def invertBits(self,bin):\n        x=1\n        for i in range(32):\n            x*=2\n        x-=1\n        return x^N",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    invertBits(bin)\n    {\n        let x = 1n; // Use BigInt type for x\n        for(let i = 0; i < 32; i++){\n            x *= 2n; // Use BigInt type for multiplication\n        }\n        x -= 1n; // Use BigInt type for subtraction\n        return x ^ BigInt(bin); // Convert bin to BigInt for XOR operation\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long invertBits(long N)\n    {\n        //Initialize x to 1.\n        long x=1;\n        \n        //Loop to calculate x as 2^32 - 1.\n        for(int i=0; i<32;i++)\n        {\n            x*=2;\n        }\n        x--;\n        \n        //Return the bitwise XOR of x and N.\n        return x^N;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}