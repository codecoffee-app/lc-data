{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707056,
            "title": "IPL 2021 - Final",
            "titleSlug": "ipl-2021-final--141634",
            "content": "<p><span style=\"font-size: 18px;\">IPL 2021 Finals are here and it is between the most successful team of the IPL Mumbai Indians and the team striving to grab their first trophy Royal Challengers Banglore. Rohit Sharma, captain of the team Mumbai Indians has the most experience in IPL finals, he feels lucky if he solves a programming question before the IPL finals. So, he asked the team's head coach&nbsp; Mahela Jayawardene for a question. Question is</span><span style=\"font-size: 18px;\">, given a string <strong>S </strong>consisting only of opening and closing parenthesis 'ie <strong>'(' &nbsp;</strong>and <strong>')'</strong>,&nbsp; the task is to find out the length of the longest valid parentheses</span><span style=\"font-size: 18px;\"> substring.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>NOTE: </strong>The length of the smallest valid substring&nbsp;<strong>( )</strong> is <strong>2</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: S</strong> = \"(()(</span><span style=\"font-size: 18px;\">\"\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>The longest valid \nsubstring is \"()\". Length = 2.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: S</strong> = \"()(())(</span><span style=\"font-size: 18px;\">\"\n<strong>Output:</strong> 6\n<strong>Explanation: </strong>The longest valid \nsubstring is \"()(())</span><span style=\"font-size: 18px;\">\". Length = 6.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 </span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> |S|&nbsp;</span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "The IPL 2021 Finals are approaching, and Rohit Sharma of Mumbai Indians seeks a programming challenge to boost his luck. Mahela Jayawardene presents him with the following: Given a string `S` containing only '(' and ')', find the length of the longest valid parentheses substring.",
                "constraints": [
                    "1 <= |S| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "(())",
                        "output": "4",
                        "explanation": "The longest valid substring is \"(())\". Length = 4."
                    },
                    {
                        "input": "(()(",
                        "output": "2",
                        "explanation": "The longest valid substring is \"()\". Length = 2."
                    },
                    {
                        "input": "()(())(",
                        "output": "6",
                        "explanation": "The longest valid substring is \"()(())\". Length = 6."
                    },
                    {
                        "input": ")()())",
                        "output": "4",
                        "explanation": "The longest valid substring is \"()()\". Length = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse the string on and keep track of the count of open parentheses and close parentheses with the help of two counters&nbsp;<strong>left</strong>&nbsp;and&nbsp;<strong>right</strong>&nbsp;respectively.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for c++\r\nclass Solution {\r\n  public:\r\n    int findMaxLen(string s) {\r\n        int n = s.length();\r\n\r\n        // Variables for left and right counter.\r\n        // maxlength to store the maximum length found so far\r\n        int left = 0, right = 0, maxlength = 0;\r\n\r\n        // Iterating the string from left to right\r\n        for (int i = 0; i < n; i++) {\r\n            // If \"(\" is encountered,\r\n            // then left counter is incremented\r\n            // else right counter is incremented\r\n            if (s[i] == '(')\r\n                left++;\r\n            else\r\n                right++;\r\n\r\n            // Whenever left is equal to right, it signifies\r\n            // that the subsequence is valid and\r\n            if (left == right) maxlength = max(maxlength, 2 * right);\r\n\r\n            // Reseting the counters when the subsequence\r\n            // becomes invalid\r\n            else if (right > left)\r\n                left = right = 0;\r\n        }\r\n\r\n        left = right = 0;\r\n\r\n        // Iterating the string from right to left\r\n        for (int i = n - 1; i >= 0; i--) {\r\n\r\n            // If \"(\" is encountered,\r\n            // then left counter is incremented\r\n            // else right counter is incremented\r\n            if (s[i] == '(')\r\n                left++;\r\n            else\r\n                right++;\r\n\r\n            // Whenever left is equal to right, it signifies\r\n            // that the subsequence is valid and\r\n            if (left == right) maxlength = max(maxlength, 2 * left);\r\n\r\n            // Reseting the counters when the subsequence\r\n            // becomes invalid\r\n            else if (left > right)\r\n                left = right = 0;\r\n        }\r\n        return maxlength;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    static int findMaxLen(String S) {\r\n        // code here\r\n        int n = S.length();\r\n\r\n        // Variables for left and right counter.\r\n        // maxlength to store the maximum length found so far\r\n        int left = 0, right = 0, maxlength = 0;\r\n\r\n        // Iterating the string from left to right\r\n        for (int i = 0; i < n; i++) {\r\n            // If \"(\" is encountered,\r\n            // then left counter is incremented\r\n            // else right counter is incremented\r\n            if (S.charAt(i) == '(')\r\n                left++;\r\n            else\r\n                right++;\r\n\r\n            // Whenever left is equal to right, it signifies\r\n            // that the subsequence is valid and\r\n            if (left == right)\r\n                maxlength = Math.max(maxlength, 2 * right);\r\n\r\n            // Reseting the counters when the subsequence\r\n            // becomes invalid\r\n            else if (right > left)\r\n                left = right = 0;\r\n        }\r\n\r\n        left = right = 0;\r\n\r\n        // Iterating the string from right to left\r\n        for (int i = n - 1; i >= 0; i--) {\r\n\r\n            // If \"(\" is encountered,\r\n            // then left counter is incremented\r\n            // else right counter is incremented\r\n            if (S.charAt(i) == '(')\r\n                left++;\r\n            else\r\n                right++;\r\n\r\n            // Whenever left is equal to right, it signifies\r\n            // that the subsequence is valid and\r\n            if (left == right) \r\n                maxlength = Math.max(maxlength, 2 * left);\r\n\r\n            // Reseting the counters when the subsequence\r\n            // becomes invalid\r\n            else if (left > right)\r\n                left = right = 0;\r\n        }\r\n        return maxlength;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for python3\r\n\r\nclass Solution:\r\n    def findMaxLen(ob, s):\r\n        n = len(s)\r\n\r\n        # Variables for left and right counter.\r\n        # maxlength to store the maximum length found so far\r\n        left = right = maxlength = 0\r\n\r\n        # Iterating the string from left to right\r\n        for i in range(n):\r\n            # If \"(\" is encountered,\r\n            # then left counter is incremented\r\n            # else right counter is incremented\r\n            if s[i] == '(':\r\n                left += 1\r\n            else:\r\n                right += 1\r\n\r\n            # Whenever left is equal to right, it signifies\r\n            # that the subsequence is valid and\r\n            if (left == right):\r\n                maxlength = max(maxlength, 2 * right)\r\n\r\n            # Reseting the counters when the subsequence\r\n            # becomes invalid\r\n            elif (right > left):\r\n                left = right = 0\r\n\r\n        left = right = 0\r\n\r\n        # Iterating the string from right to left\r\n        for i in range(n-1,-1,-1):\r\n\r\n            # If \"(\" is encountered,\r\n            # then left counter is incremented\r\n            # else right counter is incremented\r\n            if s[i] == '(':\r\n                left += 1\r\n            else:\r\n                right += 1\r\n\r\n            # Whenever left is equal to right, it signifies\r\n            # that the subsequence is valid and\r\n            if (left == right):\r\n                maxlength = max(maxlength, 2 * left)\r\n\r\n            # Reseting the counters when the subsequence\r\n            # becomes invalid\r\n            elif (left > right):\r\n                left = right = 0\r\n                \r\n        return maxlength",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Complete this function\n    public int findMaxLen(string s) {\n        int n = s.Length;\n\n        // Variables for left and right counter.\n        // maxlength to store the maximum length found so far\n        int left = 0, right = 0, maxlength = 0;\n\n        // Iterating the string from left to right\n        for (int i = 0; i < n; i++) {\n            // If \"(\" is encountered,\n            // then left counter is incremented\n            // else right counter is incremented\n            if (s[i] == '(')\n                left++;\n            else\n                right++;\n\n            // Whenever left is equal to right, it signifies\n            // that the subsequence is valid and\n            if (left == right) maxlength = Math.Max(maxlength, 2 * right);\n\n            // Resetting the counters when the subsequence\n            // becomes invalid\n            else if (right > left)\n                left = right = 0;\n        }\n\n        left = right = 0;\n\n        // Iterating the string from right to left\n        for (int i = n - 1; i >= 0; i--) {\n            // If \"(\" is encountered,\n            // then left counter is incremented\n            // else right counter is incremented\n            if (s[i] == '(')\n                left++;\n            else\n                right++;\n\n            // Whenever left is equal to right, it signifies\n            // that the subsequence is valid and\n            if (left == right) maxlength = Math.Max(maxlength, 2 * left);\n\n            // Resetting the counters when the subsequence\n            // becomes invalid\n            else if (left > right)\n                left = right = 0;\n        }\n\n        return maxlength;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {string} S\r\n * @return {number}\r\n*/\r\n\r\nclass Solution {\r\n    \r\n    findMaxLen(S){\r\n        let n = S.length;\r\n\r\n        // Variables for left and right counter.\r\n        // maxlength to store the maximum length found so far\r\n        let left = 0, right = 0, maxlength = 0;\r\n\r\n        // Iterating the string from left to right\r\n        for (let i = 0; i < n; i++) {\r\n            // If \"(\" is encountered,\r\n            // then left counter is incremented\r\n            // else right counter is incremented\r\n            if (S[i] == '(')\r\n                left++;\r\n            else\r\n                right++;\r\n\r\n            // Whenever left is equal to right, it signifies\r\n            // that the subsequence is valid and\r\n            if (left == right)\r\n                maxlength = Math.max(maxlength, 2 * right);\r\n\r\n            // Reseting the counters when the subsequence\r\n            // becomes invalid\r\n            else if (right > left)\r\n                left = right = 0;\r\n        }\r\n\r\n        left = right = 0;\r\n\r\n        // Iterating the string from right to left\r\n        for (let i = n - 1; i >= 0; i--) {\r\n\r\n            // If \"(\" is encountered,\r\n            // then left counter is incremented\r\n            // else right counter is incremented\r\n            if (S[i] == '(')\r\n                left++;\r\n            else\r\n                right++;\r\n\r\n            // Whenever left is equal to right, it signifies\r\n            // that the subsequence is valid and\r\n            if (left == right)\r\n                maxlength = Math.max(maxlength, 2 * left);\r\n\r\n            // Reseting the counters when the subsequence\r\n            // becomes invalid\r\n            else if (left > right)\r\n                left = right = 0;\r\n        }\r\n        return maxlength;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}