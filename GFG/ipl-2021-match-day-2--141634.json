{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707042,
            "title": "IPL 2021 - Match Day 2",
            "titleSlug": "ipl-2021-match-day-2--141634",
            "content": "<p><span style=\"font-size:18px\">Due to the rise of covid-19 cases in India, this year BCCI decided to organize knock-out matches in IPL rather than a league. </span></p>\r\n\r\n<p><span style=\"font-size:18px\">Today is matchday 2 and it is between the most loved team Chennai Super Kings and the most underrated team - Punjab Kings. </span> <span style=\"font-size:18px\">Stephen Fleming</span>, <span style=\"font-size:18px\">the head coach of CSK, analyzing the batting stats of Punjab. He has stats of runs scored by all N players in the previous season and he wants to find the maximum score for each and every contiguous sub-list of size K to strategize for the game. </span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 9, K = 3\r\narr[] = 1 2 3 1 4 5 2 3 6</span>\r\n<span style=\"font-size:18px\"><strong>Output: </strong>\r\n3 3 4 5 5 5 6 </span>\r\n<span style=\"font-size:18px\"><strong>Explanation: </strong>\r\n1st contiguous subarray = {1 2 3} Max = 3\r\n2nd contiguous subarray = {2 3 1} Max = 3\r\n3rd contiguous subarray = {3 1 4} Max = 4\r\n4th contiguous subarray = {1 4 5} Max = 5\r\n5th contiguous subarray = {4 5 2} Max = 5\r\n6th contiguous subarray = {5 2 3} Max = 5\r\n7th contiguous subarray = {2 3 6} Max = 6</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 10, K = 4\r\narr[] = 8 5 10 7 9 4 15 12 90 13</span>\r\n<span style=\"font-size:18px\"><strong>Output: </strong>\r\n10 10 10 15 15 90 90\r\n<strong>Explanation: \r\n</strong>1st contiguous subarray = {8 5 10 7}, Max = 10\r\n2nd contiguous subarray = {5 10 7 9}, Max = 10 \r\n3rd contiguous subarray = {10 7 9 4}, Max = 10 \r\n4th contiguous subarray = {7 9 4 15}, Max = 15\r\n5th contiguous subarray = {9 4 15 12}, Max = 15 \r\n6th contiguous subarray = {4 15 12 90}, Max = 90 \r\n7th contiguous subarray = {15 12 90 13}, Max = 90 </span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>max_of_subarrays()</strong> which takes the array, N, and K as input parameters and returns a list of integers denoting the maximum of every contiguous subarray of size K.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>6</sup><br />\r\n1 &le; K &le; N<br />\r\n0 &le; arr[i]&nbsp;&le; 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Stephen Fleming, the head coach of CSK, is analyzing Punjab Kings' batting stats from the previous season. Given an array of runs scored by N players, find the maximum score within each contiguous sub-array of size K. This will help him strategize for the upcoming match.",
                "constraints": [
                    "1 <= N <= 10^6",
                    "1 <= K <= N",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 9, K = 3\narr[] = 1 2 3 1 4 5 2 3 6",
                        "output": "3 3 4 5 5 5 6",
                        "explanation": "For the subarray {1, 2, 3}, the maximum is 3.\nFor the subarray {2, 3, 1}, the maximum is 3.\nFor the subarray {3, 1, 4}, the maximum is 4.\nFor the subarray {1, 4, 5}, the maximum is 5.\nFor the subarray {4, 5, 2}, the maximum is 5.\nFor the subarray {5, 2, 3}, the maximum is 5.\nFor the subarray {2, 3, 6}, the maximum is 6."
                    },
                    {
                        "input": "N = 10, K = 4\narr[] = 8 5 10 7 9 4 15 12 90 13",
                        "output": "10 10 10 15 15 90 90",
                        "explanation": "For the subarray {8, 5, 10, 7}, the maximum is 10.\nFor the subarray {5, 10, 7, 9}, the maximum is 10.\nFor the subarray {10, 7, 9, 4}, the maximum is 10.\nFor the subarray {7, 9, 4, 15}, the maximum is 15.\nFor the subarray {9, 4, 15, 12}, the maximum is 15.\nFor the subarray {4, 15, 12, 90}, the maximum is 90.\nFor the subarray {15, 12, 90, 13}, the maximum is 90."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">1. Try to solve this using window sliding technique. But, be aware, simple window sliding doesn&#39;t work. You should think of some data structure to act as window of size k with some feature of getting max of k elements in O(1) time.</span></p>",
            "<p>2. We create a <a href=\"https://www.geeksforgeeks.org/deque-set-1-introduction-applications/\" target=\"_blank\">Deque</a>, <em>Qi </em>of capacity k, that stores only useful elements of current window of k elements. An element is useful if it is in current window and is greater than all other elements on left side of it in current window. We process all array elements one by one and maintain <em>Qi </em>to contain useful elements of current window and these useful elements are maintained in sorted order. The element at front of the <em>Qi </em>is the largest and element at rear of <em>Qi </em>is the smallest of current window.</p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "directi"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\r\n  public:\r\n    //Function to find the maximum element in every subarray of size k.\r\n    vector<int> max_of_subarrays(vector<int> arr, int n, int k) {\r\n        vector<int> res;    //vector to store the maximum elements of subarrays\r\n        deque<int> q;   //deque to store indices of elements in current window\r\n\r\n        int i = 0;\r\n        //iterating over the first window of size k\r\n        for (i = 0; i < k; i++) {\r\n\r\n            //removing all the indices from deque which have elements\r\n            //less than or equal to current element from the back of deque.\r\n            while ((!q.empty()) && (arr[i] >= arr[q.back()])) q.pop_back();\r\n\r\n            //adding the current index to the back of deque.\r\n            q.push_back(i);\r\n        }\r\n\r\n        //iterating over the remaining elements.\r\n        for (; i < n; i++) {\r\n            //adding the maximum element of previous window to the result vector.\r\n            res.push_back(arr[q.front()]);\r\n\r\n            //removing the indices of elements which are\r\n            //no longer a part of the current window.\r\n            while ((!q.empty()) && (q.front() <= i - k)) q.pop_front();\r\n\r\n            //removing all the indices from deque which have elements\r\n            //less than or equal to current element from the back of deque.\r\n            while ((!q.empty()) && (arr[i] >= arr[q.back()])) q.pop_back();\r\n\r\n            //adding the current index to the back of deque.\r\n            q.push_back(i);\r\n        }\r\n\r\n        //adding the maximum element of the last window to the result vector.\r\n        res.push_back(arr[q.front()]);\r\n        q.pop_front();\r\n\r\n        //returning the vector of maximum elements of subarrays.\r\n        return res;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    static ArrayList<Integer> max_of_subarrays(int arr[], int n, int k) {\r\n        // Declaring and Initializing an ArrayList of base size 0\r\n        ArrayList<Integer> res = new ArrayList<Integer>(0);\r\n\r\n        // Declaring and Initializing an ArrayDeque\r\n        ArrayDeque<Integer> dq = new ArrayDeque<>();\r\n\r\n        // Creating a StringBuilder variable sb\r\n        StringBuilder sb = new StringBuilder();\r\n\r\n        int i = 0;\r\n\r\n        // adding only the maximum element index in the range\r\n        // 0 to k-1 and polling the remaining elements index\r\n        for (i = 0; i < k; i++) {\r\n            while (dq.isEmpty() == false && arr[i] >= arr[dq.peekLast()])\r\n                dq.pollLast();\r\n\r\n            dq.add(i);\r\n        }\r\n\r\n        // adding only the maximum element index in the range\r\n        // interval k and polling the remaining elements index\r\n        for (; i < n; i++) {\r\n            // adding the maximum in interval k\r\n            // to the ArrayList\r\n            res.add(arr[dq.peek()]);\r\n\r\n            while (dq.isEmpty() == false && (dq.peekFirst() <= i - k))\r\n                dq.pollFirst();\r\n\r\n            while (dq.isEmpty() == false && (arr[i] >= arr[dq.peekLast()]))\r\n                dq.pollLast();\r\n\r\n            dq.add(i);\r\n        }\r\n\r\n        // adding the last element of the\r\n        // ArrayDeque to the ArrayList\r\n        res.add(arr[dq.peek()]);\r\n        dq.pollFirst();\r\n\r\n        // returning the ArrayList of maximum elements\r\n        // in subArrays of size k\r\n        return res;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def max_of_subarrays(self,arr,n,k):\r\n        '''\r\n        you can use collections module here.\r\n        :param a: given array\r\n        :param n: size of array\r\n        :param k: value of k\r\n        :return: A list of required values \r\n        '''\r\n        res = []\r\n        d = deque()\r\n    \r\n        for i in range(k):\r\n            while len(d) and arr[i]>=arr[d[-1]]: # -1 repesents right end of deque\r\n                d.pop()\r\n            d.append(i)\r\n    \r\n        for i in range(k,n):\r\n            # print(arr[d[0]],end=\" \") # print element at front of deque\r\n            res.append (arr[d[0]])\r\n            while len(d) and d[0]<=i-k:\r\n                d.popleft()\r\n            while len(d) and arr[i]>=arr[d[-1]]:\r\n                d.pop()\r\n            d.append(i)\r\n    \r\n        res.append (arr[d[0]])\r\n        d.popleft()\r\n        return res",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr - Input array containing elements.\n * @param {number} n - Length of the input array.\n * @param {number} k - Size of the subarrays.\n * @returns {number[]} - Array containing the maximum element from each subarray.\n*/\nclass Solution {\n    max_of_subarrays(arr, n, k) {\n        let res = new Array(); // Create an empty array to store the maximum elements.\n        let q = new Array(); // Create an empty array to store indexes.\n\n        let i = 0; // Initialize a variable to keep track of the current index.\n        for (i = 0; i < k; i++) {\n            while (q.length != 0 && (arr[i] >= arr[q[q.length - 1]])) q.pop(); // Remove smaller elements from the end of the array.\n            q.push(i); // Add the current index to the array.\n        }\n\n        let f = 0; // Initialize a variable to store the index of the first element of the current subarray.\n        for (; i < n; i++) {\n\n            res.push(arr[q[f]]); // Add the maximum element from the previous subarray to the result array.\n\n            while ((q.length != f) && (q[f] <= i - k)) f++; // Remove the indexes which are not part of the current subarray.\n\n            while (q.length != f && (arr[i] >= arr[q[q.length - 1]])) q.pop(); // Remove smaller elements from the end of the array.\n\n            q.push(i); // Add the current index to the array.\n        }\n\n        res.push(arr[q[f]]); // Add the maximum element from the last subarray to the result array.\n        f++;\n\n        return res; // Return the array containing the maximum element from each subarray.\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    public List<int> max_of_subarrays(List<int> arr, int n, int k) {\n        List<int> res = new List<int>();\n        LinkedList<int> q = new LinkedList<int>();\n\n        for (int i = 0; i < k; ++i) {\n            while (q.Count > 0 && arr[i] >= arr[q.Last.Value]) {\n                q.RemoveLast();\n            }\n            q.AddLast(i);\n        }\n\n        for (int i = k; i < n; ++i) {\n            res.Add(arr[q.First.Value]);\n\n            while (q.Count > 0 && q.First.Value <= i - k) {\n                q.RemoveFirst();\n            }\n\n            while (q.Count > 0 && arr[i] >= arr[q.Last.Value]) {\n                q.RemoveLast();\n            }\n\n            q.AddLast(i);\n        }\n\n        res.Add(arr[q.First.Value]);\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}