{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710138,
            "title": "Graph is Tree or Not",
            "titleSlug": "is-it-a-tree",
            "content": "<p><span style=\"font-size: 18px;\">You are given an undirected graph of <strong>N</strong> nodes (numbered from 0 to N-1) and <strong>M</strong> edges. Return 1 if the graph is a tree, else return 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> The input graph can have self-loops and multiple edges.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">N = 4, M = 3</span>\n<span style=\"font-size: 18px;\">G = [[0, 1], [1, 2], [1, 3]]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> <br />1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: <br /></strong>Every node is reachable and the graph has no loops, so it is a tree</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong></span><span style=\"font-size: 18px;\">N = 4, M = 3</span>\n<span style=\"font-size: 18px;\">G = [[0, 1], [1, 2], [2, 0]]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> <br />0</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong> <br />3 is not connected to any </span><span style=\"font-size: 18px;\">node and there is a loop 0-&gt;1-&gt;2-&gt;0, so</span> <span style=\"font-size: 18px;\">it is not a tree.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>isTree()</strong> which takes the integer N (the number nodes in the input graph) and the edges representing the graph as input parameters and returns 1 if the input graph is a tree, else 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N+M)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 2*10<sup>5</sup><br />0 &lt;= M &lt;= 2*10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with N nodes (numbered from 0 to N-1) and M edges, determine if the graph is a tree. A tree is a connected graph with no cycles. The graph may contain self-loops and multiple edges.",
                "constraints": [
                    "1 <= N <= 2 * 10^5",
                    "0 <= M <= 2 * 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 4, M = 3\nG = [[0, 1], [1, 2], [1, 3]]",
                        "output": "1",
                        "explanation": "The graph is connected, and there are no cycles. Therefore, it is a tree."
                    },
                    {
                        "input": "N = 4, M = 3\nG = [[0, 1], [1, 2], [2, 0]]",
                        "output": "0",
                        "explanation": "The graph contains a cycle (0 -> 1 -> 2 -> 0) and is not fully connected as node 3 is isolated. Therefore, it is not a tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Think of the properties of trees:</span></p>\n\n<p><span style=\"font-size:18px\">1. Every node should be reachable from every other node.<br />\n2. There should not be any loop in the tree.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    int isTree(int n, int m, vector<vector<int>> &edges) \r\n    {\r\n        if(m!=n-1)\r\n            return false;\r\n            \r\n        vector<bool>vis(n,false);\r\n        vector<int>adj[n];\r\n        \r\n        for(int i=0;i<edges.size();i++)\r\n        {\r\n            adj[edges[i][0]].push_back(edges[i][1]);\r\n            adj[edges[i][1]].push_back(edges[i][0]);\r\n        }\r\n        \r\n        int node=0;\r\n        queue<int>q;\r\n    \r\n        vis[node]=true;\r\n        int visited=1;\r\n        q.push(node);\r\n        \r\n        while(q.size())\r\n        {\r\n            int curr=q.front();\r\n            q.pop();\r\n            for(auto it:adj[curr])\r\n            {\r\n                if(!vis[it])\r\n                {\r\n                    vis[it]=true;\r\n                    visited++;\r\n                    q.push(it);\r\n                }\r\n            }\r\n        }\r\n        return (visited==n);\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public boolean isTree(int n, int m, ArrayList<ArrayList<Integer>> edges) \r\n    {\r\n        if (m != n - 1)\r\n            return false;\r\n\r\n        boolean[] vis = new boolean[n];\r\n        ArrayList<Integer>[] adj = new ArrayList[n];\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            adj[i] = new ArrayList<>();\r\n        }\r\n\r\n        for (ArrayList<Integer> edge : edges) {\r\n            adj[edge.get(0)].add(edge.get(1));\r\n            adj[edge.get(1)].add(edge.get(0));\r\n        }\r\n\r\n        int node = 0;\r\n        Queue<Integer> q = new LinkedList<>();\r\n        vis[node] = true;\r\n        int visited = 1;\r\n        q.offer(node);\r\n\r\n        while (!q.isEmpty()) {\r\n            int curr = q.poll();\r\n            for (int neighbor : adj[curr]) {\r\n                if (!vis[neighbor]) {\r\n                    vis[neighbor] = true;\r\n                    visited++;\r\n                    q.offer(neighbor);\r\n                }\r\n            }\r\n        }\r\n\r\n        return visited == n;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from collections import deque\r\n\r\nclass Solution:\r\n    def isTree(self, n, m, edges):\r\n        if m != n - 1:\r\n            return 0\r\n\r\n        vis = [False] * n\r\n        adj = [[] for _ in range(n)]\r\n\r\n        for edge in edges:\r\n            adj[edge[0]].append(edge[1])\r\n            adj[edge[1]].append(edge[0])\r\n\r\n        node = 0\r\n        q = deque()\r\n\r\n        vis[node] = True\r\n        visited = 1\r\n        q.append(node)\r\n\r\n        while q:\r\n            curr = q.popleft()\r\n            for neighbor in adj[curr]:\r\n                if not vis[neighbor]:\r\n                    vis[neighbor] = True\r\n                    visited += 1\r\n                    q.append(neighbor)\r\n\r\n        return int(visited == n)\r\n        \r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {Array<Array<number>>} adj\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to check whether the given graph is a tree or not.\n    isTree(n, adj) {\n        let stack = [0];  // Initialize a stack with the starting node\n        let vis = new Array(n).fill(0);  // Initialize a visited array\n        vis[0] = 1;  // Mark the starting node as visited\n        let parent = new Array(n).fill(-1);  // Initialize parent array to track parent of each node\n\n        while (stack.length) {\n            let cur = stack.pop();  // Select the current node\n            for (let i of adj[cur]) {  // Iterate through all adjacent nodes of current node\n                if (vis[i] === 0) {  // If the adjacent node is not visited\n                    vis[i] = 1;  // Mark it as visited\n                    stack.push(i);  // Add it to the stack to explore its adjacent nodes later\n                    parent[i] = cur;  // Record the current node as its parent\n                } else if (i !== parent[cur]) {  // If the adjacent node is already visited and not the parent of the current node\n                    return 0;  // Return 0 as it indicates a cycle in the graph, hence not a tree\n                }\n            }\n        }\n\n        // Check if all nodes are visited\n        for (let j = 0; j < vis.length; j++) {\n            if (vis[j] === 0) {\n                return 0;  // If any node is not visited, the graph is not connected\n            }\n        }\n\n        return 1;  // If all nodes are visited without detecting any cycle, return 1 as it indicates a tree\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}