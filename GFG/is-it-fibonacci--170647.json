{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714058,
            "title": "Is it Fibonacci",
            "titleSlug": "is-it-fibonacci--170647",
            "content": "<p><span style=\"font-size:18px\">Geek just learned&nbsp;about Fibonacci numbers. </span></p>\r\n\r\n<blockquote>\r\n<p><span style=\"font-size:18px\">The Fibonacci Sequence is the series of numbers:&nbsp;0, 1, 1, 2, 3, 5, 8, 13, ...</span><br />\r\n<span style=\"font-size:18px\">where the next number is found by adding up the two numbers before it.</span></p>\r\n</blockquote>\r\n\r\n<p><span style=\"font-size:18px\">He defines a new series called&nbsp;Geeky numbers. Here the next number&nbsp;is the sum of the <strong>K</strong> preceding numbers.<br />\r\nYou are given an array of size K,&nbsp;<strong>GeekNum[ ],&nbsp;</strong>where the i<sup>th</sup>&nbsp;element of the array represents the i<sup>th</sup>&nbsp;Geeky&nbsp;number. Return its N<sup>th</sup>&nbsp;term.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Note:&nbsp;</span></strong><span style=\"font-size:18px\">This problem can be solved in O(N<sup>2</sup>) time complexity but the user has to solve this in O(N). The Constraints are less because there can be integer overflow in the terms.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 6, K = 1\r\nGeekNum[] = {4}\r\n<strong>Output:</strong>&nbsp;\r\n4\r\n<strong>Explanation</strong>: \r\nTerms are 4, 4, 4, 4, 4, 4</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 5, K = 3\r\nGeekNum[] = {0, 1, 2}\r\n<strong>Output:&nbsp;\r\n</strong>6\r\n<strong>Explanation</strong>: \r\nTerms are 0, 1, 2, 3, 6.\r\nSo the 5th term is 6</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>solve( )</strong>&nbsp;which takes integer N, K, and an array GeekNum[] as input parameters&nbsp;and returns the Nth term of the Geeky series.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: O(N)<br />\r\nExpected Space Complexity: O(N)</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; K <u>&lt;</u>&nbsp;30<br />\r\n1&nbsp;&le; N&nbsp;&le; 70<br />\r\nK&nbsp;&le; N<br />\r\n0&nbsp;<u>&lt;</u>&nbsp;GeekNum[ ] <u>&lt;</u>&nbsp;100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek has discovered Fibonacci numbers and now introduces a new series called Geeky numbers. In this series, each subsequent number is the sum of the *K* preceding numbers. Given an array `GeekNum[]` of size *K*, where the i-th element represents the i-th Geeky number, determine the N-th term of this series.",
                "constraints": [
                    "1 <= K <= 30",
                    "1 <= N <= 70",
                    "K <= N",
                    "0 <= GeekNum[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 6, K = 1, GeekNum[] = {4}",
                        "output": "4",
                        "explanation": "The Geeky series is 4, 4, 4, 4, 4, 4. Therefore, the 6th term is 4."
                    },
                    {
                        "input": "N = 5, K = 3, GeekNum[] = {0, 1, 2}",
                        "output": "6",
                        "explanation": "The Geeky series is 0, 1, 2, 3, 6. The 5th term is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to find the relation between terms. The next term is always the sum of the previous k term. So if you want to find the let&#39;s say x<sup>th</sup>&nbsp;term you should take the sum of (x - k</span><span style=\"font-size:15px\">)<sup>th</sup>,&nbsp;</span><span style=\"font-size:18px\">(x - k + 1</span><span style=\"font-size:15px\">)<sup>th</sup>,&nbsp;</span><span style=\"font-size:18px\">(x - k + 2</span><span style=\"font-size:15px\">)<sup>th</sup>,.........&nbsp;</span><span style=\"font-size:18px\">(x - 1</span><span style=\"font-size:15px\">)</span><sup><span style=\"font-size:15px\">th&nbsp;</span></sup><span style=\"font-size:18px\">terms</span><span style=\"font-size:15px\">.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to solve the problem\n    long long solve(int N, int K, vector<long long> GeekNum) {\n        // code here\n        long long sum = 0;\n        vector<long long> vec;\n\n        // Calculating the sum of all elements and storing them in a vector\n        for (auto it : GeekNum) sum += it, vec.push_back(it);\n\n        int beg = 0;\n        // While the size of the vector is less than N, add the sum to the vector\n        // and update the sum by subtracting the first element and adding the last element\n        while (vec.size() < N) {\n            vec.push_back(sum);\n            sum -= vec[beg];\n            sum += vec.back();\n            beg++;\n        }\n\n        // Return the Nth element in the vector\n        return vec[N - 1];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution():\r\n    def solve(self, N, K, GeekNum):\r\n        sumo = 0\r\n        for i in GeekNum:\r\n            #calculating the sum of all numbers in the list\r\n            sumo += i\r\n        beg = 0\r\n        #loop to fill the list until it reaches the required length\r\n        while len(GeekNum) < N:\r\n            #appending the sum of all numbers to the list\r\n            GeekNum.append(sumo)\r\n            #updating the sum by subtracting the first number and adding the last number\r\n            sumo -= GeekNum[beg]\r\n            sumo += GeekNum[-1]\r\n            beg += 1\r\n        #returning the Nth number in the list\r\n        return GeekNum[N-1]",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}