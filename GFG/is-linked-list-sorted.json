{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702083,
            "title": "Is Linked List Sorted",
            "titleSlug": "is-linked-list-sorted",
            "content": "<p><span style=\"font-size:18px\">Given a linked list of size <strong>n</strong>, you have to<strong> </strong>find whether the given linked list is <strong>sorted </strong>or <strong>not</strong>.<br />\r\nThe sorting can either be <strong>non-increasing</strong> or <strong>non-decreasing</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>LinkedList: 5-&gt;5-&gt;6-&gt;7-&gt;8\r\n<strong>Output: </strong>1</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>LinkedList: 2-&gt;5-&gt;7-&gt;8-&gt;99-&gt;7\r\n<strong>Output: </strong>0</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThe task is to complete the function <strong>isSorted()</strong> which takes<strong> head reference</strong> as argument.&nbsp;The <strong>function returns tr</strong><strong>ue </strong>if the LL is <strong>sorted</strong>, else it <strong>returns false</strong>. (The driver code prints 1 when the returned value is true, otherwise 0)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= number of nodes &lt;= 10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, determine if it is sorted in either non-increasing or non-decreasing order.\n\nIn other words, check if the linked list is either sorted from smallest to largest or from largest to smallest.",
                "constraints": [
                    "1 <= Number of nodes <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 5->5->6->7->8",
                        "output": "1",
                        "explanation": "The linked list is sorted in non-decreasing order (5 <= 5 <= 6 <= 7 <= 8)."
                    },
                    {
                        "input": "LinkedList: 2->5->7->8->99->7",
                        "output": "0",
                        "explanation": "The linked list is not sorted. It is neither non-increasing nor non-decreasing."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Keep two bool variables. One for non-Inc and one for non-dec, both initialized to true. Now, run a loop to check if it is non-inc. If not then set non-inc to false. Do similar thing for non-dec. Now return non-inc||non-dec</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n\r\nbool isSorted(Node * head)\r\n{\r\n    if(head==NULL || head->next==NULL)\r\n    return true;\r\n    \r\n    \r\n    bool increasing=true;\r\n    bool decreasing=true;\r\n    \r\n    Node * temp=head;\r\n    Node * temp2=head->next;\r\n    \r\n    while(temp2)\r\n    {\r\n        if(temp2->data<temp->data)\r\n            increasing=false;\r\n            \r\n        temp2=temp2->next;\r\n        temp=temp->next;\r\n    }\r\n    \r\n    temp=head;\r\n    temp2=head->next;\r\n    while(temp2)\r\n    {\r\n        if(temp2->data>temp->data)\r\n            decreasing=false;\r\n        \r\n        temp2=temp2->next;\r\n        temp=temp->next;\r\n    }\r\n    \r\n    return increasing||decreasing;\r\n    \r\n}\r\n    ",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\nclass Solution\r\n{\r\n    public static boolean isSorted(Node head)\r\n    {\r\n        if(head == null || head.next == null)\r\n            return true;\r\n\r\n\r\n        boolean increasing = true;\r\n        boolean decreasing = true;\r\n\r\n        Node temp = head;\r\n        Node temp2 = head.next;\r\n\r\n        while(temp2 != null)\r\n        {\r\n            if(temp2.data < temp.data)\r\n                increasing = false;\r\n\r\n            temp2 = temp2.next;\r\n            temp = temp.next;\r\n        }\r\n\r\n        temp=head;\r\n        temp2 = head.next;\r\n        while(temp2 != null)\r\n        {\r\n            if(temp2.data>temp.data)\r\n                decreasing = false;\r\n\r\n            temp2 = temp2.next;\r\n            temp = temp.next;\r\n        }\r\n\r\n        return increasing||decreasing;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\ndef isSorted(head):\r\n    if(head==None or head.next==None):\r\n        return 1\r\n    inc = 1\r\n    dec = 1\r\n    tmp = head \r\n    tmp2 = head.next\r\n    \r\n    while(tmp2!=None):\r\n        if(tmp2.data<tmp.data):\r\n            inc=0\r\n        tmp2=tmp2.next\r\n        tmp= tmp.next\r\n    \r\n    tmp = head \r\n    tmp2 = head.next\r\n    \r\n    while(tmp2!=None):\r\n        if(tmp2.data>tmp.data):\r\n            dec=0\r\n        tmp2=tmp2.next\r\n        tmp= tmp.next\r\n    \r\n    if(inc==1 or dec==1):\r\n        return 1\r\n    return 0",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/*LINKED LIST NODE\nclass Node {\n  constructor(x){\n    this.data = x;\n    this.next = null;\n  }\n}\n*/\n\n\n/**\n * @param {Node} head\n * @return {boolean}\n*/\n\nclass Solution {\n  isSorted(head){\n    if(head==null || head.next==null)\n        return true;\n\n\n    let increasing=true;\n    let decreasing=true;\n\n    let temp=head;\n    let temp2=head.next;\n\n    while(temp2)\n    {\n        if(temp2.data<temp.data)\n            increasing=false;\n\n        temp2=temp2.next;\n        temp=temp.next;\n    }\n\n    temp=head;\n    temp2=head.next;\n    while(temp2)\n    {\n        if(temp2.data>temp.data)\n            decreasing=false;\n\n        temp2=temp2.next;\n        temp=temp.next;\n    }\n\n    return increasing||decreasing;\n\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}