{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705064,
            "title": "Is Square",
            "titleSlug": "is-square1846",
            "content": "<p><span >Given four different points in a 2D plane, represented by their coordinates <strong>(x1 , y1), </strong></span><strong><span style=\"font-size: 18.6667px;\">(x2 , y2), </span></strong><span style=\"font-size: 18.6667px;\"><strong>(x3 , y3)</strong> and </span><span style=\"font-size: 18.6667px;\"><strong>(x4 , y4)</strong>.</span><span > The task is to determine whether these points can form a <strong>square</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\">x1 = </span><span style=\"font-size: 18px;\">20, y1 = 10, x2 = 10, y2 = 20, \n\\t x3 = 20, y3 = 20, x4 = 10, y4 = 10</span> \n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">Yes</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">The points (20,10), (10,20), (20,20), (10,10) forms a square.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\">x1 = </span><span style=\"font-size: 18px;\">2, y1 = 1, x2 = 10, y2 = 20, \n\\t x3 = 5, y3 = 6, x4 = 10, y4 = 10</span> \n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">No</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">The points (2,1), (10,20), (5,6), (10,10) doesn't form a square.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">-10<sup>3</sup> &le; x1, y1, x2, y2, x3, y3, x4, y4 &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Pick any point and calculate its distance from the rest of the points. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // A utility function to find square of distance\n    // from point (x,y) to point (a,b)\n    int distSq(int x, int y, int a, int b) {\n        return (x - a) * (x - a) + (y - b) * (y - b);\n    }\n\n    // This function returns true if ((x1,y1), (x2,y2), (x3,y3),\n    // (x4,y4)) form a square, otherwise false\n    bool isSq(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {\n        int d2 = distSq(x1, y1, x2, y2);\n        int d3 = distSq(x1, y1, x3, y3);\n        int d4 = distSq(x1, y1, x4, y4);\n\n        if (d2 == 0 || d3 == 0 || d4 == 0)\n            return false;\n\n        // If lengths of ((x1,y1), (x2,y2)) and ((x1,y1), (x3,y3)) are same, then\n        // following conditions must met to form a square.\n        // 1) Square of length of ((x1,y1), (x4,y4)) is same as twice\n        // the square of ((x1,y1), (x2,y2))\n        // 2) Square of length of ((x2,y2) , (x3,y3)) is same\n        // as twice the square of ((x2,y2) , (x4,y4))\n\n        if (d2 == d3 && 2 * d2 == d4 &&\n            2 * distSq(x2, y2, x4, y4) == distSq(x2, y2, x3, y3)) {\n            return true;\n        }\n\n        // The below two cases are similar to above case\n        if (d3 == d4 && 2 * d3 == d2 &&\n            2 * distSq(x3, y3, x2, y2) == distSq(x3, y3, x4, y4)) {\n            return true;\n        }\n        if (d2 == d4 && 2 * d2 == d3 &&\n            2 * distSq(x2, y2, x3, y3) == distSq(x2, y2, x4, y4)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    string isSquare(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {\n\n        if (isSq(x1, y1, x2, y2, x3, y3, x4, y4))\n            return \"Yes\";\n        else\n            return \"No\";\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // A utility function to find square of distance from point (x, y) to point (a, b)\n    public int distSq(int x, int y, int a, int b) {\n        return (x - a) * (x - a) + (y - b) * (y - b);\n    }\n\n    // This function returns true if ((x1, y1), (x2, y2), (x3, y3), (x4, y4)) form a\n    // square, otherwise false\n    public boolean isSq(int x1, int y1, int x2, int y2, int x3, int y3, int x4,\n                        int y4) {\n        int d2 = distSq(x1, y1, x2, y2);\n        int d3 = distSq(x1, y1, x3, y3);\n        int d4 = distSq(x1, y1, x4, y4);\n\n        if (d2 == 0 || d3 == 0 || d4 == 0) {\n            return false;\n        }\n\n        // Check conditions to form a square\n        if (d2 == d3 && 2 * d2 == d4 &&\n            2 * distSq(x2, y2, x4, y4) == distSq(x2, y2, x3, y3)) {\n            return true;\n        }\n\n        if (d3 == d4 && 2 * d3 == d2 &&\n            2 * distSq(x3, y3, x2, y2) == distSq(x3, y3, x4, y4)) {\n            return true;\n        }\n\n        if (d2 == d4 && 2 * d2 == d3 &&\n            2 * distSq(x2, y2, x3, y3) == distSq(x2, y2, x4, y4)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public String isSquare(int x1, int y1, int x2, int y2, int x3, int y3, int x4,\n                           int y4) {\n        if (isSq(x1, y1, x2, y2, x3, y3, x4, y4)) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import math\n\n\nclass Solution:\n    # A utility function to find square of distance from point (x, y) to point (a, b)\n    def distSq(self, x, y, a, b):\n        return (x - a) * (x - a) + (y - b) * (y - b)\n\n    # This function returns true if ((x1, y1), (x2, y2), (x3, y3), (x4, y4)) form a square, otherwise false\n    def isSq(self, x1, y1, x2, y2, x3, y3, x4, y4):\n        d2 = self.distSq(x1, y1, x2, y2)\n        d3 = self.distSq(x1, y1, x3, y3)\n        d4 = self.distSq(x1, y1, x4, y4)\n\n        if d2 == 0 or d3 == 0 or d4 == 0:\n            return False\n\n        # Check conditions to form a square\n        if (d2 == d3 and 2 * d2 == d4\n                and 2 * self.distSq(x2, y2, x4, y4) == self.distSq(\n                    x2, y2, x3, y3)):\n            return True\n\n        if (d3 == d4 and 2 * d3 == d2\n                and 2 * self.distSq(x3, y3, x2, y2) == self.distSq(\n                    x3, y3, x4, y4)):\n            return True\n\n        if (d2 == d4 and 2 * d2 == d3\n                and 2 * self.distSq(x2, y2, x3, y3) == self.distSq(\n                    x2, y2, x4, y4)):\n            return True\n\n        return False\n\n    def isSquare(self, x1, y1, x2, y2, x3, y3, x4, y4):\n        if self.isSq(x1, y1, x2, y2, x3, y3, x4, y4):\n            return \"Yes\"\n        else:\n            return \"No\"\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // A utility function to find square of distance\n    // from point (x,y) to point (a,b)\n    int distSq(int x, int y, int a, int b) {\n        return (x - a) * (x - a) + (y - b) * (y - b);\n    }\n\n    // This function returns true if ((x1,y1), (x2,y2), (x3,y3),\n    // (x4,y4)) form a square, otherwise false\n    bool isSq(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {\n        int d2 = distSq(x1, y1, x2, y2); // from (x1,y1) to (x2,y2)\n        int d3 = distSq(x1, y1, x3, y3); // from (x1,y1) to (x3,y3)\n        int d4 = distSq(x1, y1, x4, y4); // from (x1,y1) to (x4,y4)\n\n        if (d2 == 0 || d3 == 0 || d4 == 0) return false;\n\n        // If lengths of ((x1,y1), (x2,y2)) and ((x1,y1), (x3,y3)) are same, then\n        // following conditions must met to form a square.\n        // 1) Square of length of ((x1,y1), (x4,y4)) is same as twice\n        // the square of ((x1,y1), (x2,y2))\n        // 2) Square of length of ((x2,y2) , (x3,y3)) is same\n        // as twice the square of ((x2,y2) , (x4,y4))\n\n        if (d2 == d3 && 2 * d2 == d4 &&\n            2 * distSq(x2, y2, x4, y4) == distSq(x2, y2, x3, y3)) {\n            return true;\n        }\n\n        // The below two cases are similar to above case\n        if (d3 == d4 && 2 * d3 == d2 &&\n            2 * distSq(x3, y3, x2, y2) == distSq(x3, y3, x4, y4)) {\n            return true;\n        }\n        if (d2 == d4 && 2 * d2 == d3 &&\n            2 * distSq(x2, y2, x3, y3) == distSq(x2, y2, x4, y4)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public string isSquare(int x1, int y1, int x2, int y2, int x3, int y3, int x4,\n                           int y4) {\n        if (isSq(x1, y1, x2, y2, x3, y3, x4, y4))\n            return \"Yes\";\n        else\n            return \"No\";\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    isSquare(x1, y1, x2, y2, x3, y3, x4, y4) {\n        // Calculate the square of the distance between two points\n        const distSq = (x, y, a, b) => {\n            return (x - a) * (x - a) + (y - b) * (y - b);\n        };\n\n        // Calculate the distance between (x1, y1) and (x2, y2)\n        const d2 = distSq(x1, y1, x2, y2);\n        // Calculate the distance between (x1, y1) and (x3, y3)\n        const d3 = distSq(x1, y1, x3, y3);\n        // Calculate the distance between (x1, y1) and (x4, y4)\n        const d4 = distSq(x1, y1, x4, y4);\n\n        // If any distances are zero, the points cannot form a square\n        if (d2 === 0 || d3 === 0 || d4 === 0) {\n            return 'No';\n        }\n\n        // Check if the distances satisfy the conditions for forming a square\n        if (d2 === d3 && 2 * d2 === d4 && 2 * distSq(x2, y2, x4, y4) === distSq(x2, y2, x3, y3)) {\n            return 'Yes';\n        }\n        if (d3 === d4 && 2 * d3 === d2 && 2 * distSq(x3, y3, x2, y2) === distSq(x3, y3, x4, y4)) {\n            return 'Yes';\n        }\n        if (d2 === d4 && 2 * d2 === d3 && 2 * distSq(x2, y2, x3, y3) === distSq(x2, y2, x4, y4)) {\n            return 'Yes';\n        }\n\n        // If none of the conditions are met, the points cannot form a square\n        return 'No';\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}