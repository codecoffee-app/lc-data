{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705293,
            "title": "Is Sudoku Valid",
            "titleSlug": "is-sudoku-valid4820",
            "content": "<p><span style=\"font-size: 18px;\">Given an&nbsp;incomplete Sudoku&nbsp;configuration in terms of a 9x9 &nbsp;2-D square matrix(<strong>mat[][]</strong>)&nbsp;the task to check if the current configuration is valid or not where a 0 represents an empty block.<br /><strong>Note:</strong> Current valid configuration does not ensure validity of the final solved sudoku.&nbsp;<br /></span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> mat[][] = [\n[3, 0, 6, 5, 0, 8, 4, 0, 0]\n[5, 2, 0, 0, 0, 0, 0, 0, 0]\n[0, 8, 7, 0, 0, 0, 0, 3, 1]\n[0, 0, 3, 0, 1, 0, 0, 8, 0]\n[9, 0, 0, 8, 6, 3, 0, 0, 5]\n[0, 5, 0, 0, 9, 0, 6, 0, 0]\n[1, 3, 0, 0, 0, 0, 2, 5, 0]\n[0, 0, 0, 0, 0, 0, 0, 7, 4]\n[0, 0, 5, 2, 0, 6, 3, 0, 0]\n]\n<strong>Output:</strong> true\n<strong>Explaination:</strong> It is possible to have aproper sudoku.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> mat[][] = [\n[3, 0, 3, 5, 0, 8, 4, 0, 0]\n[5, 2, 0, 0, 0, 0, 0, 0, 0]\n[0, 8, 7, 0, 0, 0, 0, 3, 1]\n[0, 0, 3, 0, 1, 0, 0, 8, 0]\n[9, 0, 0, 8, 6, 3, 0, 0, 5]\n[0, 5, 0, 0, 9, 0, 6, 0, 0]\n[1, 3, 0, 0, 0, 0, 2, 5, 0]\n[0, 0, 0, 0, 0, 0, 0, 7, 4]\n[0, 0, 5, 2, 0, 6, 3, 0, 0]\n]\n<strong>Output:</strong> false\n<strong>Explaination:</strong> It is not possible to have aproper sudoku.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> mat[][] = [\n[2, 0, 2, 5, 0, 8, 4, 0, 0]\n[5, 2, 0, 0, 0, 0, 0, 0, 0]\n[0, 8, 7, 0, 0, 0, 0, 3, 1]\n[0, 0, 3, 0, 1, 0, 0, 8, 0]\n[9, 0, 0, 8, 6, 3, 0, 0, 5]\n[0, 5, 0, 0, 9, 0, 6, 0, 0]\n[1, 3, 0, 0, 0, 0, 2, 5, 0]\n[0, 0, 0, 0, 0, 0, 0, 7, 4]\n[0, 0, 5, 2, 0, 6, 3, 0, 0]\n]\n<strong>Output:</strong> false\n<strong>Explaination:</strong> It is not possible to have aproper sudoku.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />0 &le; mat[i][j] &le; 9</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Checking if the current structure is valid or not will be helpful.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to check if the given Sudoku board is valid or not.\n    bool isValid(vector<vector<int>>& mat) {\n        // Arrays to keep track of numbers in rows, columns, and boxes\n        int r[9][9], c[9][9], s[3][3][9];\n        memset(r, 0, sizeof(r));\n        memset(c, 0, sizeof(c));\n        memset(s, 0, sizeof(s));\n        int number;\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                // Checking if the cell contains a valid number\n                if (mat[i][j] > 0 && mat[i][j] <= 9) {\n                    number = mat[i][j] - 1;\n                    // Checking if the number is repeated in the same row\n                    if (r[i][number])\n                        return 0;\n                    r[i][number] = 1;\n                    // Checking if the number is repeated in the same column\n                    if (c[j][number])\n                        return 0;\n                    c[j][number] = 1;\n                    // Checking if the number is repeated in the same box\n                    if (s[i / 3][j / 3][number])\n                        return 0;\n                    s[i / 3][j / 3][number] = 1;\n                }\n            }\n        }\n        // If all checks pass, the Sudoku board is valid\n        return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean isValid(int mat[][]) {\n        // initialize 3D array to keep track of numbers in each box\n        int r[][] = new int[9][9];      // array to keep track of numbers in each row\n        int c[][] = new int[9][9];      // array to keep track of numbers in each column\n        int s[][][] = new int[3][3][9]; // array to keep track of numbers in each box\n\n        int number;\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                // if current number is between 1 to 9, check if it's already present in\n                // respective row, column, and box\n                if (mat[i][j] > 0 && mat[i][j] <= 9) {\n                    number = mat[i][j] - 1;\n                    // if number is already present in the row, return 0\n                    if (r[i][number] != 0) return false;\n                    // mark number as present in the row\n                    r[i][number] = 1;\n                    // if number is already present in the column, return 0\n                    if (c[j][number] != 0) return false;\n                    // mark number as present in the column\n                    c[j][number] = 1;\n                    // if number is already present in the box, return 0\n                    if (s[i / 3][j / 3][number] != 0) return false;\n                    // mark number as present in the box\n                    s[i / 3][j / 3][number] = 1;\n                }\n            }\n        }\n        // if Sudoku grid is valid, return 1\n        return true;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def isValid(self, mat):\n        # Creating matrices to keep track of numbers in rows, columns, and sub-grids\n        r = [[0 for i in range(9)]\n             for i in range(9)]  # matrix to track numbers in rows\n        c = [[0 for i in range(9)]\n             for i in range(9)]  # matrix to track numbers in columns\n        s = [[[0 for i in range(9)] for i in range(3)]\n             for i in range(3)]  # matrix to track numbers in sub-grids\n\n        number = 0\n        for i in range(0, 9):\n            for j in range(0, 9):\n                # Checking if the element at position (i,j) is a valid number\n                if (mat[i][j] > 0 and mat[i][j] <= 9):\n                    number = mat[i][j] - 1\n                    # Checking if the number is already present in the row\n                    if r[i][number] != 0:\n                        return 0\n                    r[i][number] = 1\n                    # Checking if the number is already present in the column\n                    if c[j][number] != 0:\n                        return 0\n                    c[j][number] = 1\n                    # Checking if the number is already present in the sub-grid\n                    if s[i // 3][j // 3][number] != 0:\n                        return 0\n                    s[i // 3][j // 3][number] = 1\n\n        # If all the numbers are valid and no duplicates are found, the sudoku is valid\n        return 1\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to check if the given Sudoku board is valid or not.\n    isValid(mat) {\n        // Arrays to keep track of numbers in rows, columns, and boxes\n        let r = new Array(9);\n        let c = new Array(9);\n        let s = new Array(3);\n\n        // Initialize the tracking arrays with zeros\n        for (let i = 0; i < 9; i++) {\n            r[i] = new Array(9).fill(0);\n            c[i] = new Array(9).fill(0);\n        }\n\n        for (let i = 0; i < 3; i++) {\n            s[i] = new Array(3);\n            for (let j = 0; j < 3; j++) {\n                s[i][j] = new Array(9).fill(0);\n            }\n        }\n\n        let number;\n        for (let i = 0; i < 9; i++) {\n            for (let j = 0; j < 9; j++) {\n                // Checking if the cell contains a valid number\n                if (mat[i][j] > 0 && mat[i][j] <= 9) {\n                    number = mat[i][j] - 1;\n                    // Checking if the number is repeated in the same row\n                    if (r[i][number]) return 0;\n                    r[i][number] = 1;\n                    // Checking if the number is repeated in the same column\n                    if (c[j][number]) return 0;\n                    c[j][number] = 1;\n                    // Checking if the number is repeated in the same box\n                    let boxRow = Math.floor(i / 3);\n                    let boxCol = Math.floor(j / 3);\n                    if (s[boxRow][boxCol][number]) return 0;\n                    s[boxRow][boxCol][number] = 1;\n                }\n            }\n        }\n        // If all checks pass, the Sudoku board is valid\n        return 1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}