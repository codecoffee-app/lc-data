{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702133,
            "title": "Is The Doubly Linked List Circular",
            "titleSlug": "is-the-doubly-linked-list-circular",
            "content": "<p><span style=\"font-size: 18px;\">Given a doubly linked list, the task is to check if it is circular or not.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>LinkedList: 2&lt;-&gt;3&lt;-&gt;4&lt;-&gt;5&lt;-&gt;6\n<strong>Output: </strong>0</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>LinkedList: 4&lt;--&gt;6\n(the last and the first node is connected,\ni.e. 6 &lt;--&gt; 4\n<strong>Output: </strong>1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>User Task:</strong><br />The task is to complete the function <strong>isCircular()</strong> which takes <strong>head </strong>reference as an argument. The function should return <strong>true </strong>if the doubly LL is circular and <strong>false </strong>if it is not. (if the returned value if true, the driver code prints 1, otherwise 0)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= Number of nodes &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a doubly linked list, determine if it is circular. A doubly linked list is considered circular if the last node's 'next' pointer points to the first node and the first node's 'prev' pointer points to the last node.",
                "constraints": [
                    "1 <= Number of nodes <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "Doubly Linked List: 2<->3<->4<->5<->6",
                        "output": "0",
                        "explanation": "The given doubly linked list is not circular as the last node (6) does not point back to the first node (2) and the first node does not point back to the last node."
                    },
                    {
                        "input": "Doubly Linked List: 4<-->6 (where 6 points to 4 and 4 points to 6)",
                        "output": "1",
                        "explanation": "The doubly linked list is circular because the last node (6) points to the first node (4) and the first node points to the last node."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;if(head-&gt;prev==NULL)<br />\n&nbsp;&nbsp;&nbsp; return false<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp; Node *temp=head-&gt;prev<br />\n&nbsp;&nbsp;&nbsp; if(temp-&gt;next==NULL)<br />\n&nbsp;&nbsp;&nbsp; return false<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp; if(temp-&gt;next==head &amp;&amp;head-&gt;prev==temp)<br />\n&nbsp;&nbsp;&nbsp; return true<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp; &nbsp;<br />\n&nbsp;&nbsp;&nbsp; return false</p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    bool isCircular(Node * head)\n    {\n        if(head->prev==NULL)\n        return false;\n        \n        Node *temp=head->prev;\n        if(temp->next==NULL)\n        return false;\n        \n        \n        if(temp->next==head &&head->prev==temp)\n        return true;\n        \n        \n        return false;\n        \n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    public static boolean isCircular(Node head)\n    {\n          if(head.prev == null)\n                return false;\n        \n        Node temp = head.prev;\n        if(temp.next == null)\n            return false;\n        \n        \n        if(temp.next == head && head.prev == temp)\n            return true;\n        \n        \n        return false;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def isCircular(self, head):\n        h = head\n\n        while head and head.next != h:\n            head = head.next\n\n        if not head:\n            return 0\n        else:\n            return 1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {Node} head\n * @returns {boolean}\n*/\n\nclass Solution {\n    //Function to check whether the linked list is circular.\n    isCircular(head)\n    {\n        //your code here\n        \n        //initialize two pointers, one at the head and another at head's next\n        let slow = head;\n        let fast = head.next;\n        \n        //traverse the linked list until either the fast pointer becomes null\n        //or the fast pointer reaches the slow pointer\n        while (fast !== null && fast.next !== null) {\n            //move slow pointer by 1 step\n            slow = slow.next;\n            //move fast pointer by 2 steps\n            fast = fast.next.next;\n            \n            //if fast pointer becomes equal to slow pointer, the linked list is circular\n            if (fast === slow) {\n                return true;\n            }\n        }\n        \n        //if the loop completes without finding any circular linked list, return false\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}