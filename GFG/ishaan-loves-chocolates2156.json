{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703329,
            "title": "Ishaan Loves Chocolates",
            "titleSlug": "ishaan-loves-chocolates2156",
            "content": "<p><span style=\"font-size:18px\">As we know, Ishaan has a love for chocolates. He has bought a huge chocolate bar that contains N chocolate squares. Each of the squares has a tastiness level which is denoted by an array A[].<br />\r\nIshaan can eat the first or the last square of the chocolate at once. Ishaan has a sister who loves chocolates too and she demands the last chocolate square. Now, Ishaan being greedy eats the more tasty square first.&nbsp;<br />\r\nDetermine the tastiness level of the square which his sister gets.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {5, 3, 1, 6, 9}\r\n<strong>Output :</strong> 1\r\n<strong>Explanation:\r\nInitially: 5 3 1 6 9</strong>\r\nIn first step: 5 3 1 6\r\nIn Second step: 5 3 1\r\nIn Third step: 3 1\r\nIn Fourth step: 1\r\nReturn 1</span></pre>\r\n\r\n<p><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {5, 9, 2, 6} <strong>\r\nOutput :</strong>  2\r\n\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>chocolates()</strong> that takes an array <strong>(arr)</strong>, sizeOfArray <strong>(n)</strong>&nbsp;and return the tastiness level of the square which his sister gets. The driver code takes care of the printing.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints :&nbsp;</strong><br />\r\n1 &le; N &le; 10<sup>5</sup><br />\r\n1 &le; A[i] &le; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Ishaan has a chocolate bar with N squares, each with a tastiness level A[]. He eats either the first or last square, choosing the tastier one. His sister gets the last remaining square. Determine the tastiness level of the square his sister receives.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= A[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr = {5, 3, 1, 6, 9}",
                        "output": "1",
                        "explanation": "Initially: 5 3 1 6 9\nIshaan eats 9: 5 3 1 6\nIshaan eats 6: 5 3 1\nIshaan eats 5: 3 1\nIshaan eats 3: 1\nSister gets 1"
                    },
                    {
                        "input": "arr = {5, 9, 2, 6}",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We are given a chocolate bar with squares. At a given time only the corner squares can be eaten.<br />\nWith the greedy approach, the maximum of 2 corners is to be eaten. So, with the two-pointer method, take 2 pointers pointing to each end and update them as per the square eaten.<br />\nWhen both pointers point to the same square, that is the required answer.</span></p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Function to find the maximum amount of chocolate\n\nint chocolates(int arr[], int l, int r) {\n    // Initializing the indices i and j\n    int i = 0, n = r + 1;\n    int j = n - 1;\n    \n    // Loop until i and j cross each other or there is only one element left\n    while (i < j && n > 1) {\n        // If the chocolate at index i is greater than the one at index j,\n        // move i to the next index\n        if (arr[i] > arr[j])\n            i++;\n        // If the chocolate at index j is greater than the one at index i,\n        // move j to the previous index\n        else\n            j--;\n        // Decrement the number of elements by 1\n        n--;\n    }\n    // Return the chocolate at index i as the maximum amount of chocolate\n    return arr[i];\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n      public:\n    // Function to find the maximum number of chocolates\n    int chocolates(int n, vector<int> &arr) {\n        int i = 0;\n        int j = n-1;\n        \n        // Iterate until i < j and n > 1\n        while(i < j and n > 1){\n            // If the number of chocolates at index i is greater than at index j, increment i\n            if(arr[i]> arr[j])\n                i++;\n            // Otherwise, decrement j\n            else\n                j--;\n            // Decrease the total number of chocolates\n            n--;\n        }\n        // Return the number of chocolates at index i\n        return arr[i];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\r\n    chocolates(arr,n){\r\n        let i = 0;\r\n        let j = n-1;\r\n        \r\n        while(i < j && n > 1){\r\n            if(arr[i] > arr[j])\r\n                i++;\r\n            else\r\n                j--;\r\n            n--;\r\n        }\r\n        return arr[i];\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    //Function to count number of chocolates.\n    public int chocolates(int n, List<int> arr)\n    {\n        int i = 0;\n        int j = n-1;\n        \n        // Iterate until i < j and n > 1\n        while(i < j && n > 1){\n            // If the number of chocolates at index i is greater than at index j, increment i\n            if(arr[i]> arr[j])\n                i++;\n            // Otherwise, decrement j\n            else\n                j--;\n            // Decrease the total number of chocolates\n            n--;\n        }\n        // Return the number of chocolates at index i\n        return arr[i];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}