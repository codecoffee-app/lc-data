{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702802,
            "title": "Ishaan's Internship",
            "titleSlug": "ishaans-internship4400",
            "content": "<p><span style=\"font-size:18px\">Ishaan wants to intern at GeeksForGeeks but for that he has to go through a test. There are n candidates applying for the internship including Ishaan and only one is to be selected.<br />\r\nSince he wants to qualify he asks you to help him. The test is as follows.<br />\r\nThe candidates are asked to stand in a line at positions 1 to n and given a number k. Now, every kth candidate remains and the rest are eliminated. This is repeated until the number of candidates are less than k.<br />\r\nOut of the remaining candidates, the one standing at smallest position is selected. You need to tell Ishaan at position he must stand to get selected.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input </strong>\r\nn = 30\r\nk = 3</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output </strong>\r\n27\r\n<strong>Explaination </strong>\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\r\n3 6 9 12 15 18 21 24 27 30\r\n9 18 27\r\n27</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input </strong>\r\nn = 18\r\nk = 3\r\n<strong>Output </strong> \r\n9\r\n<strong>Explaination </strong>\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\r\n3 6 9 12 15 18\r\n9 18 (less than k)\r\n9</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task :</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to Complete the function getCandidate()&nbsp;which takes two integer n and k as input parameters, and returns the answer.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>:&nbsp;O(log<sub>k</sub>n)<br />\r\n<strong>Expected Auxiliary Space</strong>:&nbsp;O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints </strong><br />\r\n1 &lt;= n &lt;= 10<sup>5</sup><br />\r\n2 &lt;= k &lt;= 10</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Ishaan is competing with n candidates for an internship at GeeksForGeeks. The selection process involves eliminating candidates in rounds. Initially, all candidates stand in a line from position 1 to n. In each round, every kth candidate remains while the rest are eliminated. This process repeats until the number of remaining candidates is less than k. The candidate with the smallest position among the remaining candidates is selected. Determine the initial position Ishaan must occupy to be selected for the internship.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "2 <= k <= 10"
                ],
                "testcases": [
                    {
                        "input": "n = 30\nk = 3",
                        "output": "27",
                        "explanation": "Initially, candidates stand at positions 1 to 30. In the first round, every 3rd candidate remains: 3, 6, 9, 12, 15, 18, 21, 24, 27, 30. In the second round, every 3rd of these remains: 9, 18, 27.  Since the number of remaining candidates (3) is equal to k (3), another round is not conducted. Among the remaining candidates, 9, 18, and 27, the smallest is not chosen, thus 27 is returned as the position Ishaan must start to win."
                    },
                    {
                        "input": "n = 18\nk = 3",
                        "output": "9",
                        "explanation": "Initially, candidates stand at positions 1 to 18. In the first round, every 3rd candidate remains: 3, 6, 9, 12, 15, 18. In the second round, every 3rd of these remains: 9, 18. The number of remaining candidates (2) is less than k (3). Among the remaining candidates (9 and 18), the smallest is 9. Therefore, the function returns 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Since every Kth candidate remains, it is quite clear that the last candidate to remain is the maximum possible power of K i.e. K^power.<br />\nWe need to find the maximum number which is less than or equal to N and also the power of K.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to find the largest power of k which divides n\nint getCandidate(int n, int k){\n    int i=0;\n    // while n is divisible by k, divide n by k and increment i\n    while(n>=k){\n        n=n/k;\n        i++;\n    }\n    // calculate the candidate value by raising k to the power of i\n    int ans = pow(k, i);\n    return ans;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //This method calculates the highest power of k that divides n\r\n    int getCandidate(int n, int k){\r\n        int i=0;\r\n        while(n>=k){\r\n            //Divide n by k until it is no longer divisible\r\n            n=n/k;\r\n            i++;\r\n        }\r\n        //Calculate the highest power of k using exponential function\r\n        int ans = (int)Math.pow(k, i);\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n#Function to calculate the candidate number\ndef getCandidate(n, k): \n    i = 0\n    #Loop to calculate the power of k in n\n    while(n >= k):\n        n = n // k\n        i = i + 1\n    #Calculating the candidate number using k raised to the power i\n    ans = int(pow(k, i))\n    return ans ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number} k\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to get the candidate number.\n    getCandidate(n, k)\n    {\n        let i = 0;\n        //Loop to calculate the power of k in n\n        while(n >= k){\n            n = Math.floor(n / k);\n            i = i + 1;\n        }\n        //Calculating the candidate number using k raised to the power i\n        let ans = Math.pow(k, i);\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int getCandidate(int n, int k)\n    {\n        int i = 0;\n        // while n is divisible by k, divide n by k and increment i\n        while (n >= k)\n        {\n            n /= k;\n            i++;\n        }\n        // calculate the candidate value by raising k to the power of i\n        int ans = (int)Math.Pow(k, i);\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}