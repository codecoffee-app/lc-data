{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701298,
            "title": "Isomorphic Strings",
            "titleSlug": "isomorphic-strings-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings <strong>s1</strong>&nbsp;and <strong>s2</strong>, check if these two&nbsp;strings are <strong>isomorphic </strong>to each other.<br /></span></p>\n<p><span style=\"font-size: 18px;\">If the characters in s1 can be changed to get s2, then two strings, s1 and s2, are isomorphic. </span><span style=\"font-size: 18px;\">A character must be completely swapped out for another character while maintaining the order of the characters. A character may map to itself, but no two characters may map to the same character.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s1 = \"aab\", s2 = \"xxy\"\n<strong>Output: </strong>true<strong>\nExplanation: </strong>There are two different characters in aab and xxy, i.e a and b with frequency 2 and 1 respectively.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s1 = \"aab\", s2 = \"xyz\"\n<strong>Output: </strong>false<strong>\nExplanation:  </strong>There are two different characters in aab but there are three different charactersin xyz. So there won't be one to one mapping between s1and s2.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s1 = \"aac\", s2 = \"xyz\"\n<strong>Output: </strong>false<strong>\nExplanation: </strong>There are two different characters in aab but there are three different charactersin xyz. So there won't be one to one mapping between s1and s2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |s1|, |s2| &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, determine if they are isomorphic. Two strings are isomorphic if the characters in `s1` can be replaced to get `s2`, adhering to the following rules:\n\n*   Each character in `s1` must map to exactly one character in `s2`.\n*   Each character in `s2` can be mapped to by at most one character in `s1`.\n*   The order of characters must be preserved during mapping.\n*   A character can map to itself.",
                "constraints": [
                    "1 <= |s1|, |s2| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "s1 = \"aab\", s2 = \"xxy\"",
                        "output": "true",
                        "explanation": "The string 'aab' has 'a' mapping to 'x', and 'b' mapping to 'y'. This mapping is consistent throughout the strings, making them isomorphic."
                    },
                    {
                        "input": "s1 = \"aab\", s2 = \"xyz\"",
                        "output": "false",
                        "explanation": "The string 'aab' contains only two unique characters ('a' and 'b'), while 'xyz' contains three ('x', 'y', and 'z'). Since the number of unique characters differs, a one-to-one mapping is not possible, and the strings are not isomorphic."
                    },
                    {
                        "input": "s1 = \"aac\", s2 = \"xyz\"",
                        "output": "false",
                        "explanation": "The string 'aac' contains two unique characters, 'a' and 'c', while the string 'xyz' contains three unique characters, 'x', 'y', and 'z'. Therefore, a one-to-one isomorphic mapping is not possible from s1 to s2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >If two strings are isomorphic ensuring a one-to-one character mapping from the first string to the second, using arrays to track character mappings and visited status.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if two strings are isomorphic.\n    bool areIsomorphic(string &s1, string &s2) {\n\n        int m = s1.length(), n = s2.length();\n\n        if (m != n)\n            return false;\n\n        // using a boolean array to mark visited characters in s2.\n        bool marked[MAX_CHARS] = {false};\n\n        // using map to store mapping of every character from s1 to\n        // that of s2. Initializing all entries of map as -1.\n        int map[MAX_CHARS];\n        memset(map, -1, sizeof(map));\n\n        for (int i = 0; i < n; i++) {\n            // if current character of s1 is seen first time in map.\n            if (map[s1[i]] == -1) {\n                // if current character of s2 is already\n                // seen, one to one mapping is not possible.\n                if (marked[s2[i]] == true)\n                    return false;\n\n                // marking current character of s2 as visited.\n                marked[s2[i]] = true;\n\n                // storing mapping of current characters.\n                map[s1[i]] = s2[i];\n            }\n\n            // if this isn't first appearance of current character in s1 then\n            // checking if previous appearance mapped to same character of s2.\n            else if (map[s1[i]] != s2[i])\n                return false;\n        }\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to check if two strings are isomorphic.\n    public static boolean areIsomorphic(String s1, String s2) {\n        int size = 256;\n\n        int m = s1.length();\n        int n = s2.length();\n\n        if (m != n) return false;\n\n        // using a boolean array to mark visited characters in s2.\n        Boolean[] marked = new Boolean[size];\n        Arrays.fill(marked, Boolean.FALSE);\n\n        // using map to store mapping of every character from s1 to\n        // that of s2. Initializing all entries of map as -1.\n        int[] map = new int[size];\n        Arrays.fill(map, -1);\n\n        for (int i = 0; i < n; i++) {\n            // if current character of s1 is seen first time in map.\n            if (map[s1.charAt(i)] == -1) {\n                // if current character of s2 is already\n                // seen, one to one mapping is not possible.\n                if (marked[s2.charAt(i)] == true) return false;\n\n                // marking current character of s2 as visited.\n                marked[s2.charAt(i)] = true;\n\n                // storing mapping of current characters.\n                map[s1.charAt(i)] = s2.charAt(i);\n            }\n\n            // if this isn't first appearance of current character in s1 then\n            // checking if previous appearance mapped to same character of s2.\n            else if (map[s1.charAt(i)] != s2.charAt(i))\n                return false;\n        }\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to check if two strings are isomorphic.\n    def areIsomorphic(self, s1, s2):\n\n        #default dict to store mapping of characters.\n        d = defaultdict(chr)\n\n        if (len(s1) != len(s2)):\n            return False\n\n        #using a boolean array to mark visited characters in s2.\n        marked = [0 for i in range(26)]\n\n        for i in range(len(s1)):\n            c = s1[i]\n            c_p = s2[i]\n\n            #if current character of s1 is seen first time in dict.\n            if (c not in d):\n\n                #if current character of s2 is already\n                #seen, one to one mapping is not possible.\n                if (marked[ord(c_p) - ord('a')]):\n                    return False\n                else:\n                    #marking current character of s2 as visited.\n                    marked[ord(c_p) - ord('a')] = 1\n                    #storing mapping of current characters.\n                    d[c] = c_p\n\n            #if this isn't first appearance of current character in s1 then\n            #checking if previous appearance mapped to same character of s2.\n            else:\n                if (d[c] != c_p):\n                    return False\n        return True\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\nclass Solution {\n    // Function to check if two strings are isomorphic.\n    public bool areIsomorphic(string s1, string s2) {\n        int m = s1.Length, n = s2.Length;\n\n        if (m != n) return false;\n\n        bool[] marked = new bool[256];\n\n        int[] map = new int[256];\n        for (int i = 0; i < 256; i++) map[i] = -1;\n\n        for (int i = 0; i < n; i++) {\n\n            if (map[s1[i]] == -1) {\n\n                if (marked[s2[i]] == true) return false;\n\n                marked[s2[i]] = true;\n\n                map[s1[i]] = s2[i];\n            }\n\n            else if (map[s1[i]] != s2[i])\n                return false;\n        }\n\n        return true;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {string} s1\n * @param {string} s2\n * @returns {boolean}\n */\n\nclass Solution {\n    // Function to check if two strings are isomorphic.\n    areIsomorphic(s1, s2) {\n        let m = s1.length, n = s2.length;\n        let MAX_CHARS = 256;\n\n        if (m != n) return false;\n\n        // using a boolean array to mark visited characters in s2.\n        let marked = new Array(MAX_CHARS);\n        marked.fill(false);\n\n        // using map to store mapping of every character from s1 to\n        // that of s2. Initializing all entries of map as -1.\n        let map = new Array(MAX_CHARS);\n        map.fill(-1);\n\n        for (let i = 0; i < n; i++) {\n            // if current character of s1 is seen first time in map.\n            if (map[s1.charCodeAt(i)] == -1) {\n                // if current character of s2 is already\n                // seen, one to one mapping is not possible.\n                if (marked[s2.charCodeAt(i)] == true) return false;\n\n                // marking current character of s2 as visited.\n                marked[s2.charCodeAt(i)] = true;\n\n                // storing mapping of current characters.\n                map[s1.charCodeAt(i)] = s2.charCodeAt(i);\n            }\n\n            // if this isn't first appearance of current character in s1 then\n            // checking if previous appearance mapped to same character of s2.\n            else if (map[s1.charCodeAt(i)] != s2.charCodeAt(i))\n                return false;\n        }\n\n        return true;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}