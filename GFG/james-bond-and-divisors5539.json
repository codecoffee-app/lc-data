{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705340,
            "title": "Count Divisors",
            "titleSlug": "james-bond-and-divisors5539",
            "content": "<p><span style=\"font-size:18px\">Given n you have to find sum of count of divisors from1 to n.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 2\n<strong>Output: </strong>3\n<strong>Explanation: </strong>No. of Divisors of 1 = 1,\nNo of Divisors of 2 = 2(1, 2).</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 4\n<strong>Output: </strong>8\n<strong>Explanation: </strong>No. of divisors of 1 = 1\nNo. of divisors of 2 = 2(1, 2)\nNo. of divisors of 3 = 2(1, 3)\nNo. of divisors of 4 = 3(1, 2, 4).</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything, Your task is to complete the function&nbsp;<strong>DivCountSum()&nbsp;</strong>which takes n as input parameter and returns the sum of count of divisors from 1 to n.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(nlog(n))<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(n)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= n &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use sieve and prime factorization.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\npublic:\n\tusing ll = long long int;\n\tvector<ll> primes;\n\tvoid sieve(ll upperbound) {\n\t\tll const sz = upperbound + 5;\n\t\tvector<bool>bs(sz, 1);\n\t\tll _sieve_size = upperbound + 1;\n\t\tbs[0] = bs[1] = 0; // except index 0 and 1\n\t\tfor (ll i = 2; i <= _sieve_size; i++) if (bs[i]) {\n\t\t// cross out multiples of i starting from i * i!\n\t\tfor (ll j = i * i; j <= _sieve_size; j += i) bs[j] = 0;\n\t\t\tprimes.push_back((int)i); // add this prime to the list of primes\n\t\t} \n\t} \n\n\tll numDiv(ll N) {\n\t\tll PF_idx = 0, PF = primes[PF_idx], ans = 1; // start from ans = 1\n\t\twhile (PF * PF <= N) {\n\t\t\tll power = 0; // count the power\n\t\t\twhile (N % PF == 0) { N /= PF; power++; }\n\t\t\tans *= (power + 1); // according to the formula\n\t\t\tPF = primes[++PF_idx];\n\t\t}\n\t\tif (N != 1) ans *= 2; // (last factor has pow = 1, we add 1 to it)\n\t\treturn ans;\n\t}\n\tint DivCountSum(int n){\n\t   sieve(n+5);\n\t   ll arr[n+5];\n\t   arr[0]=0;\n\t   for(int i=1;i<=n;i++){\n\t   \tarr[i]=arr[i-1]+numDiv(i);\n\t   }\n\t   return arr[n];\n\t}\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int DivCountSum(int n)\n    {\n        long upperbound = n + 5;\n        List<long> primes = new List<long>();\n        sieve(upperbound, primes);\n        long[] arr = new long[upperbound];\n        arr[0] = 0;\n        for (int i = 1; i <= n; i++)\n        {\n            arr[i] = arr[i - 1] + numDiv(i, primes);\n        }\n        return (int)arr[n];\n    }\n\n    public void sieve(long upperbound, List<long> primes)\n    {\n        long sz = upperbound + 5;\n        bool[] bs = new bool[sz];\n        long _sieve_size = upperbound + 1;\n        Array.Fill(bs, true);\n        bs[0] = bs[1] = false; // except index 0 and 1\n        for (long i = 2; i <= _sieve_size; i++)\n        {\n            if (bs[i])\n            {\n                // cross out multiples of i starting from i * i!\n                for (long j = i * i; j <= _sieve_size; j += i)\n                {\n                    bs[j] = false;\n                }\n                primes.Add(i); // add this prime to the list of primes\n            }\n        }\n    }\n\n    public long numDiv(long N, List<long> primes)\n    {\n        int PF_idx = 0;\n        long PF = primes[PF_idx];\n        long ans = 1; // start from ans = 1\n        while (PF * PF <= N)\n        {\n            long power = 0; // count the power\n            while (N % PF == 0)\n            {\n                N /= PF;\n                power++;\n            }\n            ans *= (power + 1); // according to the formula\n            if (++PF_idx < primes.Count)\n            {\n                PF = primes[PF_idx];\n            }\n            else\n            {\n                break;\n            }\n        }\n        if (N != 1)\n        {\n            ans *= 2; // (last factor has pow = 1, we add 1 to it)\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}