{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704036,
            "title": "Java 1-d and 2-d Array",
            "titleSlug": "java-1-d-and-2-d-array2952",
            "content": "<p><span style=\"font-size: 18px;\">Given a integer <strong>n</strong>. We have&nbsp;<strong>n*n</strong>&nbsp;values of a 2-d array,&nbsp;and&nbsp;&nbsp;<strong>n</strong> values of 1-d array. Task is to find the sum of the left&nbsp;diagonal values of the 2-d array and the max element of the 1-d array and print them with space in between.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>&acirc;&euro;&lsaquo;Input :</strong> arr[][] = {{1,2,3}, {4,5,6}, {7, 8,9}} \n\\t  and N = 3\nbrr[] = {3, 6, 9}\n<strong>Output :</strong> 15 9\n<strong>Explanation:</strong>\n1 2 3\n4 5 6\n7 8 9\nSo, this sum of left diagonal (1+ 5 + 9) = 15\nThe maximum element in an array brr is 9\nSo, will return {15, 9} as an answer.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>&acirc;&euro;&lsaquo;Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[][] = {{1,2}, {1, 2}} and N = 2\nbrr[] = {10, 1} <strong>\nOutput :</strong>  3 10 </span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />This is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>array()</strong> that takes a two-dimension array <strong>(a)</strong>, another one dimension array <strong>(b),</strong>&nbsp;sizeOfArray <strong>(n)</strong>, and return the ArrayList which is having&nbsp;the sum of the diagonal elements of the array <strong>a</strong> and the maximum number of the array&nbsp;<strong>b</strong>. The driver code takes care of the printing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong><br />1 &le; n &le; 100<br />1 &le; a[i][j], b[i] &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n`, you have an `n x n` 2D array and an `n`-element 1D array. Calculate the sum of the elements along the main (left) diagonal of the 2D array and find the maximum element in the 1D array. Return these two values, separated by a space.",
                "constraints": [
                    "1 <= n <= 100",
                    "1 <= a[i][j], b[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "arr = {{1,2,3}, {4,5,6}, {7,8,9}}, brr = {3, 6, 9}, n = 3",
                        "output": "15 9",
                        "explanation": "The main diagonal of `arr` is {1, 5, 9}, and their sum is 1 + 5 + 9 = 15. The maximum element in `brr` is 9."
                    },
                    {
                        "input": "arr = {{1,2}, {1, 2}}, brr = {10, 1}, n = 2",
                        "output": "3 10",
                        "explanation": "The main diagonal of `arr` is {1, 2}, and their sum is 1 + 2 = 3. The maximum element in `brr` is 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">First use the codition if i == j and sum all the element in 2-d array which satisfied that condition.&nbsp;<br />\nThen find the max element in an array b.<br />\nand return both these element after adding them into arraylist.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "Java",
                "full_func": "class Complete {\n    public static ArrayList<Integer> array(int a[][], int b[], int n) {\n        ArrayList<Integer> ans = new ArrayList<Integer>(); // create an ArrayList to store the result\n\n        int sum = 0; // initialize sum variable to 0\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) // check if the current element is from the diagonal \n                    sum += a[i][j]; // add the element to the sum\n            }\n        }\n        ans.add(sum); // add the sum to the ArrayList\n\n        int Max = 0; // initialize Max variable to 0\n        for (int i = 0; i < n; i++) {\n            if (Max < b[i]) // check if the current element in b[] is greater than Max\n                Max = b[i]; // update Max with the current element\n        }\n        ans.add(Max); // add the maximum element to the ArrayList\n\n        return ans; // return the result ArrayList\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}