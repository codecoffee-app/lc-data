{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700722,
            "title": "Java Abstract keyword",
            "titleSlug": "java-abstract-keyword",
            "content": "<p><span style=\"font-size:18px\"><strong><em>abstract</em></strong>&nbsp;is a non-access modifier in java applicable for classes, methods but&nbsp;<strong>not</strong>&nbsp;variables. It is used to achieve abstraction which is one of the pillar of Object Oriented Programming(OOP). Following is an example of abstract class.</span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\">abstract class A \r\n{\r\n    int prod;\r\n    abstract void m1(int p,int q);\r\n    void m2()\r\n    {\r\n\\t  System.out.println(prod);\r\n    }\r\n}</span></pre>\r\n\r\n<p><span style=\"font-size:18px\">As we know , we can&#39;t create an instance of an abstract class. Hence create and another class that extends the abstract class , then you can create an instance of the new class.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Also m1 method is abstract too, that means you must implement the&nbsp;body of that method in the child class.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Main function is already created in the editor and instance of class B is also created . So your task is&nbsp;to write just class B .&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Input:</strong><br />\r\nFirst line of input file contains an integer T, denoting the number of test cases. Then T test case follow. First and only line of each test case contains two&nbsp;integers a1 and a2.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Output:</strong><br />\r\nFor each test case,&nbsp;print output as the product of the two nos. a1 and a2.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=100<br />\r\n1&lt;=a1,a2&lt;=10<sup>3</sup></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example:</strong><br />\r\n<strong>Input:</strong><br />\r\n2<br />\r\n9 2<br />\r\n8 4</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Output:</strong><br />\r\n18<br />\r\n32</span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "OOP",
                "slug": "oop"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "Java",
                "full_func": "//Inheriting class B from class A\n\nclass B extends A \n{\n    //Method m1 takes two parameters p and q\n    //and multiplies them to get the product\n    void m1(int p,int q) {\n       prod=p*q;\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}