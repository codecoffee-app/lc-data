{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703577,
            "title": "Anagram Strings",
            "titleSlug": "java-anagram-strings3549",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings S1 and S2 . Return \"1\" if both strings are anagrams otherwise return \"0\" .</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>:<strong>&nbsp;</strong>An anagram of a string is another string with exactly the same quantity of each character in it, in any order.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: S1 = \"cdbkdub\" , S2 = \"dsbkcsdn\"\n<strong>Output:</strong>&nbsp;0&nbsp;\n<strong>Explanation</strong>: Length of S1 is not same\nas length of S2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>S1 = \"geeks\" , S2 = \"skgee\"\n<strong>Output:&nbsp;</strong>1\n<strong>Explanation</strong>: S1 has the same quantity&nbsp;\nof each character in it as S2.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>areAnagram()</strong>&nbsp;which takes S1 and S2 as input and returns \"1\" if both strings are anagrams otherwise returns \"0\".</span><br /><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(K) ,Where K= Contstant<br /><br /><strong>Constraints:</strong><br />1 &lt;= |S1|&nbsp;&lt;= 1000<br />1 &lt;= |S2|&nbsp;&lt;= 1000&nbsp;</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, S1 and S2, determine if they are anagrams of each other. Return \"1\" if they are anagrams, otherwise return \"0\".  An anagram is a string formed by rearranging the letters of another string, using all the original letters exactly once.",
                "constraints": [
                    "1 <= |S1| <= 1000",
                    "1 <= |S2| <= 1000"
                ],
                "testcases": [
                    {
                        "input": "S1 = \"cdbkdub\" , S2 = \"dsbkcsdn\"",
                        "output": "0",
                        "explanation": "The lengths of S1 and S2 are different. Therefore, they cannot be anagrams."
                    },
                    {
                        "input": "S1 = \"geeks\" , S2 = \"skgee\"",
                        "output": "1",
                        "explanation": "S1 and S2 contain the same characters with the same frequencies. Therefore, they are anagrams."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Hashing and do check for each character.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution {\n  public:\n    int areAnagram(string S1, string S2) {\n        // Create a hash array and initialize all values as 0\n        int hash[256] = {0};\n        int i;\n\n        // For each character in input strings, increment hash in\n        // the corresponding hash array\n        for (i = 0; i < S1.length(); i++) {\n            hash[S1[i]]++;\n            hash[S2[i]]--;\n        }\n\n        // If both strings are of different length. Removing this condition\n        // will make the program fail for strings like \"aaca\" and \"aca\"\n        if (S1.length() != S2.length()) return 0;\n\n        // See if there is any non-zero value in hash array\n        for (i = 0; i < 256; i++)\n            if (hash[i]) return 0;\n        return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static int areAnagram(String S1, String S2) {\n        // Create a hash array and initialize all values as 0\n        int[] hash = new int[256];\n        for (int i = 0; i < 256; i++) hash[i] = 0;\n        int i;\n        if (S1.length() != S2.length()) return 0;\n        // For each character in input strings, increment hash in\n        // the corresponding hash array\n        for (i = 0; i < S1.length(); i++) {\n            hash[(int)S1.charAt(i)]++;\n            hash[(int)S2.charAt(i)]--;\n        }\n\n        // If both strings are of different length. Removing this condition\n        // will make the program fail for strings like \"aaca\" and \"aca\"\n\n        // See if there is any non-zero value in hash array\n        for (i = 0; i < 256; i++)\n            if (hash[i] != 0) return 0;\n        return 1;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Function to find whether two strings are anagram of each other.\n    public int areAnagram(string S1, string S2)\n    {\n        // Create a hash array and initialize all values as 0\n        int[] hash = new int[256];\n        int i;\n\n        // For each character in input strings, increment hash in\n        // the corresponding hash array\n        for (i = 0; i < S1.Length; i++)\n        {\n            hash[S1[i]]++;\n            hash[S2[i]]--;\n        }\n\n        // If both strings are of different length. Removing this condition\n        // will make the program fail for strings like \"aaca\" and \"aca\"\n        if (S1.Length != S2.Length)\n            return 0;\n\n        // See if there is any non-zero value in hash array\n        for (i = 0; i < 256; i++)\n        {\n            if (hash[i] != 0)\n                return 0;\n        }\n        \n        return 1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}