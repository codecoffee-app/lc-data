{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700385,
            "title": "TreeMap Operations",
            "titleSlug": "java-collection-set-4-treemap",
            "content": "<p><span style=\"font-size: 18px;\">Implement different operations on Treemap. Operations will be performed by different types of queries.<br />A queries can be of four types:<br />1. <strong>a x y</strong>&nbsp;(adds an entry&nbsp;with key x and value&nbsp;y to the Treemap)<br />2. <strong>b x</strong> (print value of &nbsp;x if&nbsp;present in the Treemap else print -1.&nbsp;)<br />3. <strong>c</strong> (prints the size of the Treemap)<br />4. <strong>d x</strong> ( removes an entry&nbsp;with key x from the map )<br />5. <strong>e</strong> (print map sorted by key)</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: queries[][] = [[\"a 1 2\"], [\"a 66 3\"], [\"b 66\"], [\"d 1\"], [\"c\"], [\"e\"]]\n<strong>Output</strong>: 3 1 66</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nThere are five queries. Queries are performed in this order\n1. a 1 2    ---&gt;  map has a key 1 with value 2 \n2. a 66 3   ---&gt; map has a key 66 with value 3\n3. b 66     ---&gt; prints the value of key 66 if its present in the map ie 3.\n4. d 1\\t---&gt; removes an entry from map with key 1\n5. c\\t  ---&gt; prints the size of the map ie 1\n6. e\\t  ---&gt; prints the map sorted by key</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: queries[][] = [[\"a 1 66\"], [\"b 5\"], [\"c\"], [\"e\"]]\n<strong>Output</strong>: -1 1 1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nThere are three&nbsp;queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order\n1. a 1 66 &nbsp; ---&gt; adds a key 1 with a value of 66 in the map\n2. b 5 &nbsp; &nbsp; &nbsp;---&gt; &nbsp;since the key 5 is not present in the map hence -1 is printed.\n3. c &nbsp; &nbsp; &nbsp; &nbsp;---&gt; prints the size of the map ie 1 </span>\n<span style=\"font-size: 18px;\">4. e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;---&gt; prints the map sorted by key</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= q &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a Treemap data structure that supports the following operations based on different query types:\n\n1.  **Add (a x y):** Insert a new key-value pair (x, y) into the Treemap.\n2.  **Get (b x):** Retrieve the value associated with key x. If the key is not present, return -1.\n3.  **Size (c):** Return the number of key-value pairs in the Treemap.\n4.  **Remove (d x):** Delete the entry with key x from the Treemap.\n5.  **Print Sorted (e):** Print the contents of the Treemap sorted by key.  The format should be a space-separated list of keys.",
                "constraints": [
                    "1 <= number of queries (q) <= 100"
                ],
                "testcases": [
                    {
                        "input": "[[\"a 1 2\"], [\"a 66 3\"], [\"b 66\"], [\"d 1\"], [\"c\"], [\"e\"]]",
                        "output": "3 1 66",
                        "explanation": "The queries are processed as follows:\n- 'a 1 2': Inserts (1, 2) into the Treemap.\n- 'a 66 3': Inserts (66, 3) into the Treemap.\n- 'b 66': Returns the value associated with key 66, which is 3.\n- 'd 1': Removes the entry with key 1 from the Treemap.\n- 'c': Returns the current size of the Treemap, which is 1.\n- 'e': Returns the map sorted by key, which is 66."
                    },
                    {
                        "input": "[[\"a 1 66\"], [\"b 5\"], [\"c\"], [\"e\"]]",
                        "output": "-1 1 1",
                        "explanation": "The queries are processed as follows:\n- 'a 1 66': Inserts (1, 66) into the Treemap.\n- 'b 5': Attempts to retrieve the value associated with key 5. Since 5 is not present, it returns -1.\n- 'c': Returns the current size of the Treemap, which is 1.\n- 'e': Returns the map sorted by key, which is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:16px\"><strong>Operations</strong><br />\n<strong>Insert</strong><br />\nTo insert a pair with key x and value y to the map (m) m.put(x,y)<br />\n<strong>Erase</strong><br />\nTo remove a value with key x from the map (m) m.remove(x)<br />\n<strong>Find</strong><br />\nFinds if an element is present in the map if not present returns the end iterator<br />\nTo search if a value is present in a&nbsp;map we use m.containsKey(x) // it returns true if map contains value corrosponding to key<br />\n<strong>Size</strong><br />\nTo get the size of the map we use m.size();</span><br />\n<strong><span style=\"font-size:16px\">Print</span></strong><br />\n<span style=\"font-size:16px\">Use an iterator</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "Java",
                "full_func": "class GfG {\n    /* Insert an entry with key x and value y in map */\n    void add_Value(TreeMap<Integer, Integer> hm, int x, int y) {\n        hm.put(x, y);\n    }\n    \n    /* Return the value with key x from the map \n       if the map contains key x, else return -1 */\n    int find_value(TreeMap<Integer, Integer> hm, int x) {\n        int s = -1;\n        if (hm.containsKey(x))\n            s = hm.get(x);\n        \n        return s;\n    }\n    \n    /* Return the size of the map */\n    int getSize(TreeMap<Integer, Integer> hm) {\n        return hm.size();\n    }\n        \n    /* Remove the entry with key x from the map */        \n    void removeKey(TreeMap<Integer, Integer> hm, int x) {\n        hm.remove(x);\n    }\n    \n    /* Print map sorted by key using Iterator for traversing */\n    void sorted_By_Key(TreeMap<Integer, Integer> hm) {\n        Map<Integer, Integer> map = new TreeMap<Integer, Integer>(hm);\n        Set set1 = map.entrySet();\n        Iterator itr = set1.iterator();\n        while (itr.hasNext()) {\n            Map.Entry me = (Map.Entry) itr.next();\n            System.out.print(me.getKey() + \" \");\n        }\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}