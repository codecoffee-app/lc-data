{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700392,
            "title": "Java Collection | Set 5 (LinkedHash Set)",
            "titleSlug": "java-collection-set-5-linkedhash-set",
            "content": "<p><span style=\"font-size: 20px;\">Implement different operations on a LinkedHashset&nbsp;s&nbsp;.<br /><br /><strong>Input:</strong><br />The first line of input contains an integer <strong>T</strong> denoting the no of test cases . Then T test cases follow. The first line of input contains an integer <strong>Q</strong> denoting the no of queries . Then in the next line are <strong>Q</strong>&nbsp;space separated queries .<br />A query can be of&nbsp;four&nbsp;types&nbsp;<br />1. a x (inserts an element x to the LinkedHashSet s)</span><br /><span style=\"font-size: 20px;\">2. b (prints the contents of the LinkedHashSet s in increasing order)<br />3. c x&nbsp;(erases an element x from the LinkedHashSet s)<br />4. d x (prints 1 if the element x is present in the LinkedHashSet&nbsp;else print -1)<br />5. e (prints the size of the LinkedHashSet s)</span><br /><span style=\"font-size: 20px;\">6. f (prints the contents of the LinkedHashSet s in insertion order)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br /><span style=\"font-size: 20px;\"><strong>Output:</strong><br />The output for each test case will&nbsp;&nbsp;be space separated integers denoting the results of each query . </span></p>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br />1&lt;=T&lt;=100<br />1&lt;=Q&lt;=100<br /><br /><strong>Example:</strong></span></p>\n<p><span style=\"font-size: 20px;\"><strong>Input</strong><br />2<br />7<br />a 1 a 2 a 3 b c 2 b f<br />10 </span><br /><span style=\"font-size: 20px;\">a 5 a 4 a 3 a 2 a 1 b c 1 c 3 b f<br /><strong>&nbsp;<br />Output</strong></span></p>\n<p><span style=\"font-size: 20px;\">1 2 3 1 3 1 3<br />1 2 3 4 5 2 4 5 5 4 2 </span></p>\n<p><br /><span style=\"font-size: 20px;\"><strong>Explanation :<br />For the first test case</strong><br />There are seven queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />1. a 1 &nbsp; &nbsp; { insert 1 to LinkedHashSet now set has {1}&nbsp;}<br />2. a 2 &nbsp; &nbsp; {inserts 2&nbsp;to LinkedHashSet now set has {1,2}&nbsp;}<br />3. a 3 &nbsp; &nbsp; {inserts 3 to set now LinkedHashSet has {1,2,3}&nbsp;}<br />4. b &nbsp; &nbsp; &nbsp; &nbsp;{prints the LinkedHashSet contents ie 1,2,3}<br />5. c 2 &nbsp; &nbsp; {removes 2 from the LinkedHashSet&nbsp;}<br />6. b &nbsp; &nbsp; &nbsp; &nbsp;{prints the LinkedHashSet contents ie1,3} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br /><span style=\"font-size: 20px;\">7. f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {prints the LinkedHashSet contents in inserted order ie&nbsp; 1,3}&nbsp; </span></p>\n<p><span style=\"font-size: 20px;\"><strong>For the second test case&nbsp;</strong></span></p>\n<p><span style=\"font-size: 20px;\">There are ten queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />1. a 5&nbsp; &nbsp;&nbsp; {inserts 5 to set now set has {5}&nbsp;} </span></p>\n<p><span style=\"font-size: 20px;\">2. a 4 &nbsp;&nbsp;&nbsp; {inserts 4 to set now set has {5,4}&nbsp;}&nbsp;&nbsp;</span></p>\n<p><span style=\"font-size: 20px;\">3. a 3 &nbsp;&nbsp;&nbsp; {inserts 3 to set now set has {5,4,3}&nbsp;}&nbsp; </span></p>\n<p><span style=\"font-size: 20px;\">4. a 2 &nbsp;&nbsp;&nbsp; {inserts 2 to set now set has {5,4,3,2}&nbsp;}&nbsp; </span></p>\n<p><span style=\"font-size: 20px;\">5. a 1 &nbsp;&nbsp;&nbsp; {inserts 1 to set now set has {5,4,3,2,1}&nbsp;}&nbsp; </span></p>\n<p><span style=\"font-size: 20px;\">6. b &nbsp; &nbsp; &nbsp; &nbsp;{prints the LinkedHashSet contents in increasing order ie 1,2,3,4,5}&nbsp; </span></p>\n<p><span style=\"font-size: 20px;\">7. c 1 &nbsp; &nbsp; {removes 1 from the LinkedHashSet&nbsp;}&nbsp; </span></p>\n<p><span style=\"font-size: 20px;\">8. c 3 &nbsp; &nbsp; {removes 3 from the LinkedHashSet&nbsp;}&nbsp; </span></p>\n<p><span style=\"font-size: 20px;\">9. b&nbsp; &nbsp; &nbsp; &nbsp; {prints the LinkedHashSet contents in increasing order ie 2,4,5}&nbsp; </span></p>\n<p><span style=\"font-size: 20px;\">10. f&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; {prints the LinkedHashSet contents in inserted order ie 5,4,2} </span><br /><br /><br /><span style=\"font-size: 14px;\"><strong>Note:</strong>The <strong>Input/Output</strong> format and <strong>Example</strong> given are used for system's internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement different operations on a LinkedHashSet. You will be given a series of queries to perform on the LinkedHashSet. The queries include inserting elements, printing the set in increasing order, erasing elements, checking for element presence, printing the size of the set, and printing the set in insertion order.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= Q <= 100"
                ],
                "testcases": [
                    {
                        "input": "7\na 1 a 2 a 3 b c 2 b f",
                        "output": "1 2 3 1 3 1 3",
                        "explanation": "The following operations are performed:\n1.  Insert 1: {1}\n2.  Insert 2: {1, 2}\n3.  Insert 3: {1, 2, 3}\n4.  Print (increasing): 1 2 3\n5.  Erase 2: {1, 3}\n6.  Print (increasing): 1 3\n7.  Print (insertion): 1 3"
                    },
                    {
                        "input": "10\na 5 a 4 a 3 a 2 a 1 b c 1 c 3 b f",
                        "output": "1 2 3 4 5 2 4 5 5 4 2",
                        "explanation": "The following operations are performed:\n1. Insert 5: {5}\n2. Insert 4: {5, 4}\n3. Insert 3: {5, 4, 3}\n4. Insert 2: {5, 4, 3, 2}\n5. Insert 1: {5, 4, 3, 2, 1}\n6. Print (increasing): 1 2 3 4 5\n7. Erase 1: {5, 4, 3, 2}\n8. Erase 3: {5, 4, 2}\n9. Print (increasing): 2 4 5\n10. Print (insertion): 5 4 2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "Java",
                "full_func": "class GfG\r\n{\r\n\tvoid insert(LinkedHashSet<Integer> s, int x)\r\n\t{\r\n\t\ts.add(x);\r\n\t}\r\n\t\r\n\tvoid print_Contents_Increasing_Order(LinkedHashSet<Integer> s)\r\n\t{\r\n\t\r\n\t\tTreeSet<Integer> myTreeSet = new TreeSet<Integer>();\r\n\t\tmyTreeSet.addAll(s);\r\n\t\t//System.out.print(myTreeSet+\" \");\r\n\r\n        /* List list = new ArrayList(s);\r\n\t\tCollections.sort(list, Collections.reverseOrder());\r\n\t\tSet resultSet = new LinkedHashSet(list);*/\r\n         \r\n         \tIterator itr = myTreeSet.iterator();\r\n      \r\n\t\twhile(itr.hasNext()) \r\n\t\t{\r\n         Object element = itr.next();\r\n         System.out.print(element + \" \");\r\n\t\t}\r\n\t}\r\n\t\r\n\tvoid print_Contents_Insertion_Order(LinkedHashSet<Integer> s)\r\n\t{\r\n\t\r\n\t\t//TreeSet<Integer> myTreeSet = new TreeSet<Integer>();\r\n\t\t//myTreeSet.addAll(s);\r\n\t\t//System.out.print(myTreeSet+\" \");\r\n\r\n        /* List list = new ArrayList(s);\r\n\t\tCollections.sort(list, Collections.reverseOrder());\r\n\t\tSet resultSet = new LinkedHashSet(list);*/\r\n         \r\n         \tIterator itr = s.iterator();\r\n      \r\n\t\twhile(itr.hasNext()) \r\n\t\t{\r\n         Object element = itr.next();\r\n         System.out.print(element + \" \");\r\n\t\t}\r\n\t}\r\n\t\r\n\tvoid erase(LinkedHashSet<Integer> s, int x)\r\n\t{\r\n\t\t\r\n      \r\n\t\tif(s.contains(x))\r\n\t\t{\r\n\t\t\tfor(Iterator<Integer> itr = s.iterator(); itr.hasNext();)\r\n\t\t\t{\r\n\t\t\t\tInteger element = itr.next();\r\n\t\t\t\tif(element == x)\r\n\t\t\t\t\titr.remove();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tint size(LinkedHashSet<Integer> s)\r\n\t{\r\n\t\treturn s.size();\r\n\t}\r\n\t\t\r\n\tint find(LinkedHashSet<Integer> s, int x)\r\n\t{\r\n\t\tIterator itr = s.iterator();\r\n\t\t\r\n\t\tif(s.contains(x))\r\n\t\t\treturn 1;\r\n\t\telse \r\n\t\t\treturn -1;\r\n\t}\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}