{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705389,
            "title": "Java Collections | Set 6 (Stack)",
            "titleSlug": "java-collections-set-1-stack5707",
            "content": "<p><span style=\"font-size:18px\">Java provides an inbuilt object type called&nbsp;<strong>Stack</strong>. It is a collection that is based on the last in first out (LIFO) principle. Try this problem using Stack.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Given <strong>n</strong> elements of a stack <strong>st </strong>where the first value is the bottom-most value of the stack and the last one is the element at top of the stack, delete the middle element of the stack without using any additional data structure.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 5\r\nst = {1, 2, 3, 4, 5}\r\n<strong>Output:</strong> 5 4 2 1\r\n<strong>Explaination:</strong> The middle element is 3. If \r\nit is deleted and then the values are seen \r\nfrom top, this will be the order.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 6\r\nst = {1, 4, 9, 2, 6, 5}\r\n<strong>Output:</strong> 5 6 2 4 1\r\n<strong>Explaination:</strong> The middle element is 9 and if \r\nit is deleted this will be the stack traversal. </span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>deleteMid()</strong> which takes n and st as input parameters and returns a stack where the middle element is deleted.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(n)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n2 &le; n &le; 10<sup>3</sup><br />\r\n1 &le; st[i] &le; 10<sup>4</sup>&nbsp; &nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a stack `st` containing `n` elements, where the first element represents the bottom of the stack and the last element represents the top, remove the middle element of the stack. This must be done without using any additional data structures beyond the stack itself.\n\nThe stack in Java is based on the Last-In/First-Out (LIFO) principle.",
                "constraints": [
                    "2 <= n <= 10^3",
                    "1 <= st[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 5, st = {1, 2, 3, 4, 5}",
                        "output": "{5, 4, 2, 1}",
                        "explanation": "The middle element is 3. After deleting it, the remaining stack elements are {1, 2, 4, 5}. Displaying the stack from top to bottom gives {5, 4, 2, 1}."
                    },
                    {
                        "input": "n = 6, st = {1, 4, 9, 2, 6, 5}",
                        "output": "{5, 6, 2, 4, 1}",
                        "explanation": "The middle element is 9. After deleting it, the remaining stack elements are {1, 4, 2, 6, 5}. Displaying the stack from top to bottom gives {5, 6, 2, 4, 1}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Using&nbsp;two stack may be helpful.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "Java",
                "full_func": "// Class to delete the middle element from a stack\n\nclass Solution{\n    \n    // Function to delete middle element from a stack\n    // Takes the size of the stack and the stack itself as input\n    static Stack<Integer> deleteMid(int n, Stack<Integer> st)\n    {\n        int cnt = 0;\n        Stack<Integer> temp = new Stack<>();\n        \n        // Find the middle index of the stack\n        // Pop elements from the original stack and push them into a temporary stack until reaching the middle index\n        while(cnt < n/2) {\n            int x = st.pop();\n            temp.push(x);\n            cnt++;\n        }\n        \n        // Pop the middle element from the original stack\n        st.pop();\n        \n        // Push the remaining elements from the original stack into the temporary stack\n        while(!st.empty()){\n            int x = st.pop();\n            temp.push(x);\n        }\n        \n        // Create a new stack to store the final result\n        Stack<Integer> res = new Stack<>();\n        \n        // Pop elements from the temporary stack and push them into the new stack to reverse the order\n        while(!temp.empty()){\n            int y = temp.pop();\n            res.push(y);\n        }\n        \n        // Return the final result stack\n        return res;\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}