{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700734,
            "title": "Java Collections | Set 9 (Queue)",
            "titleSlug": "java-collections-set-9-queue",
            "content": "<p><span style=\"font-size: 18px;\">Implement different operations on a queue&nbsp;q&nbsp;.<br /><br /><strong>Input:</strong><br />The first line of input contains an integer&nbsp;<strong>T</strong>&nbsp;denoting the no of test cases . Then T test cases follow. The first line of input contains an integer&nbsp;<strong>Q</strong>&nbsp;denoting the no of queries . Then in the next line are&nbsp;<strong>Q</strong>&nbsp;space separated queries .<br />A query can be of&nbsp;four&nbsp;types&nbsp;<br />1. a x (Pushes an element x at the end of the&nbsp;queue&nbsp;q&nbsp;)<br />2. r (if queue&nbsp;is not empty&nbsp;pops the front&nbsp;element and prints it, else prints -1)<br />3. s (prints the size of the queue)<br />4. p (if queue&nbsp;is not empty prints the front&nbsp;element of the queue, else&nbsp;prints&nbsp;-1)<br /><br /><strong>Output:</strong><br />The output for each test case will&nbsp;&nbsp;be space separated integers denoting the results of each query .&nbsp;<br /><br /><strong>Constraints:</strong><br />1&lt;=T&lt;=100<br />1&lt;=Q&lt;=100<br /><br /><strong>Example:</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Input</strong><br />2<br />5<br />a 5 a 10 a 15 r p<br />4<br />a 5 r p s&nbsp;<br /><strong>&nbsp;<br />Output:</strong><br />5 10&nbsp;<br />5 -1 0&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>EXPLANATION:</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>In test case 1:&nbsp;</strong>&nbsp;In first query 5 is added to the queue.In second query 10 is added to the queue. In third query 15 is added to the queue. In fourth query 5 is removed from the queue and printed.In last query front&nbsp;element of the queue is printed i.e. 10.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement different operations on a queue `q`.\n\n**Input:**\nThe first line of input contains an integer **T** denoting the number of test cases. Then T test cases follow. The first line of input contains an integer **Q** denoting the number of queries. Then in the next line are **Q** space separated queries.\nA query can be of four types:\n1.  `a x` (Pushes an element x at the end of the queue `q`)\n2.  `r` (if queue is not empty pops the front element and prints it, else prints -1)\n3.  `s` (prints the size of the queue)\n4.  `p` (if queue is not empty prints the front element of the queue, else prints -1)\n\n**Output:**\nThe output for each test case will be space separated integers denoting the results of each query.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= Q <= 100"
                ],
                "testcases": [
                    {
                        "input": "5\na 5 a 10 a 15 r p",
                        "output": "5 10",
                        "explanation": "5 is added to the queue. 10 is added to the queue. 15 is added to the queue. 5 is removed from the queue and printed. The front element of the queue is printed, which is 10."
                    },
                    {
                        "input": "4\na 5 r p s",
                        "output": "5 -1 0",
                        "explanation": "5 is added to the queue. 5 is removed from the queue and printed. The queue is now empty so -1 is printed. The size of the queue is printed, which is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    Queue<Integer>q;\r\n    Solution(){\r\n        q=new LinkedList<>();\r\n    }\r\n    public void addElement(int key)\r\n    {\r\n        q.add(key);\r\n    }\r\n    public void RemoveElement()\r\n    {\r\n        if(q.size()!=0)\r\n        {int ele=q.remove();\r\n        System.out.print(ele+\" \");}\r\n        else\r\n        System.out.print(\"-1 \");\r\n    }\r\n    public void peekElement()\r\n    {\r\n        if(q.size()!=0)\r\n        {int pE=q.peek();\r\n        System.out.print(pE+\" \");}\r\n        else\r\n        System.out.print(\"-1 \");\r\n    }\r\n    public void Size()\r\n    {\r\n        int queueSize=q.size();\r\n        System.out.print(queueSize+\" \");\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}