{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705224,
            "title": "Java Operators(Arithmetic) | Set 1",
            "titleSlug": "java-operatorsarithmetic-set-12417",
            "content": "<p><span style=\"font-size: 18px;\">Given three numbers A,B and C. Find roots of quadratic equation Ax<sup>2</sup> + Bx + C = 0. (A not equal to &nbsp;0)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>A = 2, B = 3, C = 1\n<strong>Output: </strong>-0.5, -1\n<strong>Explanation:</strong> Roots of the equation\n2x<sup>2</sup>+3x+1=0 are -0.5 and -1.</span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>A = 2, B = 3, C = 4\n<strong>Output: </strong>-1\n<strong>Explanation: </strong>Roots of 2x<sup>2</sup>&nbsp;+ 3x + 4 = 0\nare not real.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anyhting. Your task is to complete the function&nbsp;<strong>FindRoots()&nbsp;</strong>which takes A, B and C as input parameters and returns a list of roots of the given equation in ascending order. If roots are not real numbers then return&nbsp;a list containing -1.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(1)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constrains:</strong><br />-100 &lt;= A, B, C &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three numbers A, B, and C, find the roots of the quadratic equation Ax\u00b2 + Bx + C = 0, where A is not equal to 0. If the roots are real, return them in ascending order. If the roots are not real numbers, return a list containing -1.",
                "constraints": [
                    "-100 <= A, B, C <= 100"
                ],
                "testcases": [
                    {
                        "input": "A = 2, B = 3, C = 1",
                        "output": "-1, -0.5",
                        "explanation": "The roots of the equation 2x\u00b2 + 3x + 1 = 0 are -1 and -0.5. Returning in ascending order: -1, -0.5."
                    },
                    {
                        "input": "A = 2, B = 3, C = 4",
                        "output": "-1",
                        "explanation": "The roots of the equation 2x\u00b2 + 3x + 4 = 0 are not real numbers. Returning -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Sridharacharya formula.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\npublic:\n    //Function to find the roots of a quadratic equation.\n    vector<double> FindRoots(int A, int B, int C) {\n    \tvector<double>ans;\n    \t\n    \t//calculating the discriminant.\n    \tdouble D = B*B - 4.0*A*C;\n    \t\n    \t//if discriminant is negative, equation has no real roots.\n    \tif(D < 0){\n    \t\tans.push_back(-1);\n    \t\treturn ans;\n    \t}\n    \t\n    \t//calculating the roots using quadratic formula.\n    \tdouble r1 = (-B + sqrt(D))/(2.0*A);\n    \tdouble r2 = (-B - sqrt(D))/(2.0*A);\n    \t\n    \t//storing the roots in the result vector.\n    \tans.push_back(r1);\n    \tans.push_back(r2);\n    \t\n    \t//sorting the roots in ascending order.\n    \tsort(ans.begin(), ans.end());\n    \t\n    \t//returning the result vector.\n    \treturn ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}