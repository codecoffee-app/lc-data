{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703632,
            "title": "Java Substring",
            "titleSlug": "java-substring5058",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>S</strong> and two integers <strong>L</strong> and <strong>R</strong>. Print the characters in the range <strong>L</strong> to <strong>R</strong> of the string.<br />\n<strong>NOTE: </strong>Assume zero based indexing<strong>.</strong></span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nS = &quot;cdbkdub</span><span style=\"font-size:18px\">&quot;\nL = 0 , R = 5\n<strong>Output:</strong>&nbsp;&quot;cdbkdu</span><span style=\"font-size:18px\">&quot;&nbsp;\n<strong>Explanation</strong>: Starting from index 0 (&#39;c&#39;)\nto index 5 (&#39;u&#39;).\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: \n</strong>S = &quot;sdiblcsdbud</span><span style=\"font-size:18px\">&quot;\nL = 3 , R = 7\n<strong>Output:&nbsp;</strong>&quot;blcsd&quot;\n<strong>Explanation</strong>: Starting from index 3 (&#39;b&#39;)\nto index 7 (&#39;d&#39;).</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>javaSub()&nbsp;</strong>which takes S, L, R&nbsp;as input parameter and returns the sting from the range L to R.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|S|)<br />\n<strong>Expected Auxiliary Space:</strong> O(|S|)<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;= |S|&nbsp;&lt;=1000<br />\n1 &lt;= L &lt;= 800<br />\n1 &lt;= R &lt;= 900</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string **S** and two integers **L** and **R**, extract and return the substring of **S** that lies within the index range [**L**, **R**] (inclusive). Note that the string uses zero-based indexing.",
                "constraints": [
                    "1 <= |S| <= 1000",
                    "1 <= L <= 800",
                    "1 <= R <= 900"
                ],
                "testcases": [
                    {
                        "input": "S = \"cdbkdub\", L = 0, R = 5",
                        "output": "\"cdbkdu\"",
                        "explanation": "The substring from index 0 to 5 (inclusive) of \"cdbkdub\" is \"cdbkdu\"."
                    },
                    {
                        "input": "S = \"sdiblcsdbud\", L = 3, R = 7",
                        "output": "\"blcsd\"",
                        "explanation": "The substring from index 3 to 7 (inclusive) of \"sdiblcsdbud\" is \"blcsd\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to print the characters from L to R of the given string .</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution {\n  public:\n    string javaSub(string S, int L, int R) {\n        // store the resulting string in final_S\n        string final_S = \"\";\n        // iterate from l to r\n        for (int i = L; i <= R; i++) {\n            // take every S[i]\n            final_S += S[i];\n        }\n        // final resulting string\n        return final_S;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function for Java\nclass Solution {\n    static String javaSub(String S, int L, int R) {\n        // store the resulting string in final_S\n        String final_S = new String();\n        // iterate from l to r\n        for (int i = L; i <= R; i++) {\n            // take S[i] for every ith position\n            final_S += String.valueOf(S.charAt(i));\n        }\n        // final resulting string\n        return final_S;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public string javaSub(string S, int L, int R)\n    {\n        string final_S = \"\";\n        for (int i = L; i <= R; i++)\n        {\n            final_S += S[i];\n        }\n        return final_S;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}