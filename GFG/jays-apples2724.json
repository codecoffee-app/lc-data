{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703338,
            "title": "Jay's Apples",
            "titleSlug": "jays-apples2724",
            "content": "<p><span style=\"font-size: 18px;\">Given a queue of persons represented by an array of integers, where each person is identified by a specific integer, find the minimum kilograms of apples that need to be distributed, ensuring that each person receives 1 kilogram of apples only once.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 1, 1, 1, 1]\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>The person identified by '1' appears multiple times but will only receive 1 kilogram of apples once. Therefore, the minimum apples required is 1 kg.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 2, 3, 1, 2]<strong>\nOutput:</strong> 3<br /><strong>Explanation:</strong> There are three distinct persons in the queue, so 3 kilograms of apples need to be distributed.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Count the distinct elements in an array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "set",
                "slug": "set"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minimumApple(vector<int>& arr) {\n        // Creating an unordered set to store unique values of apples\n        unordered_set<int> s;\n        // Inserting each apple into the set\n        for (int i = 0; i < arr.size(); i++) {\n            s.insert(arr[i]);\n        }\n        // Returning the size of the set, which represents the minimum number of apples\n        // required\n        return s.size();\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int minimumApple(int[] arr) {\n        // Using a HashSet to store unique values of apples\n        Set<Integer> uniqueApples = new HashSet<>();\n        for (int apple : arr) {\n            uniqueApples.add(apple);\n        }\n        // Returning the size of the set, which represents the minimum number of apples\n        // required\n        return uniqueApples.size();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minimumApple(self, arr):\n        # Use a set to store unique values\n        unique_apples = set(arr)\n        # Return the size of the set, which represents the minimum number of apples required\n        return len(unique_apples)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    minimumApple(arr) {\n        let uniqueApples =\n            new Set(arr); // Create a Set to store unique elements from the array.\n        return uniqueApples.size; // Return the size of the Set, which gives the count\n                                  // of unique elements.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}