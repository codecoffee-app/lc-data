{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714203,
            "title": "Job Sequencing Problem",
            "titleSlug": "job-sequencing-problem--170647",
            "content": "<p><span style=\"font-size: 18px;\">Given a set of <strong>N</strong> jobs where each <strong>job<sub>i</sub></strong>&nbsp;has a deadline and profit associated with it. Each job takes <strong><em>1</em></strong> unit of time to complete and only one job can be scheduled at a time. We earn the profit if and only if the job is completed by its deadline. The task is to find the number of jobs done and the&nbsp;<strong>maximum profit</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note: </span></strong><span style=\"font-size: 18px;\">J</span><span style=\"font-size: 18px;\">obs will be given in the form (Job<sub>id</sub>, Deadline,&nbsp;Profit) associated with that Job.</span><br /><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">N = 4\nJobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}\n<strong>Output:\n</strong>2 60<strong>\nExplanation:\n</strong>Since at deadline 1 Job3 can give the maximum profit and for deadline 4 we left with only Job1 hence<strong> </strong>Job<sub>1</sub>&nbsp;and Job<sub>3 </sub>can be done with maximum profit of 60 (20+40).</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">N = 5\nJobs = {(1,2,100),(2,1,19),(3,2,27),\n&nbsp;\\t (4,1,25),(5,1,15)}\n<strong>Output:\n</strong>2 127<strong>\nExplanation:\n</strong>2 jobs can be done with\nmaximum profit of 127 (100+27).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task</strong> :<br />You don't need to read input or print anything. Your task is to complete the function <strong>JobScheduling()</strong> which takes an integer <strong>N</strong> and an array of Jobs(Job id, Deadline,&nbsp;Profit) as input and returns an array <strong>ans[ ] </strong>in which<strong> ans[0] contains</strong>&nbsp;<strong>the count of jobs and</strong> <strong>ans[1] contains maximum profit</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>: O(NlogN)<br /><strong>Expected Auxilliary Space</strong>: O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>5</sup><br />1 &lt;= Deadline &lt;= N<br />1 &lt;= Profit &lt;= 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:16px\">Try to find a time slot i, such that slot is empty and i &lt; deadline and i is greatest.</span></p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution \r\n{\r\n    public:\r\n    //function used for sorting all jobs according to decreasing profit.\r\n    static bool comparison(Job a, Job b) \r\n    { \r\n    \treturn (a.profit > b.profit); \r\n    } \r\n    \r\n    //Function to find the maximum profit and the number of jobs done.\r\n    vector<int> JobScheduling(Job arr[], int n) \r\n    { \r\n        int res = 0, count = 0;\r\n        \r\n    \t//sorting all jobs according to decreasing order of profit.\r\n    \tsort(arr, arr+n, comparison); \r\n    \r\n        //array to store result (Sequence of jobs). \r\n    \tint result[n];\r\n    \t//boolean array to keep track of free time slots.\r\n    \tbool slot[n]; \r\n    \r\n    \t//initializing all slots to free.\r\n    \tfor (int i=0; i<n; i++) \r\n    \t\tslot[i] = false; \r\n    \r\n    \t//iterating through all given jobs.\r\n    \tfor (int i=0; i<n; i++) \r\n    \t{ \r\n        \t//finding a free slot for current job (Note that we start \r\n        \t//from the last possible slot). \r\n        \tfor (int j= arr[i].dead-1; j>=0; j--) \r\n        \t{ \r\n        \t\t//if free slot is found, we add current job to result array\r\n        \t\t//and make the current slot occupied. \r\n        \t\tif (slot[j]==false) \r\n        \t\t{ \r\n        \t\t\tresult[j] = i;  \r\n        \t\t\tslot[j] = true; \r\n        \t\t\tbreak; \r\n        \t\t} \r\n        \t} \r\n    \t} \r\n    \r\n    \tfor (int i=0; i<n; i++)\r\n    \t{ \r\n    \t    //if slot is occupied, we update the counter and \r\n    \t    //add its profit in final result.\r\n        \tif (slot[i]) {\r\n        \t    count++;\r\n        \t    res += arr[result[i]].profit;\r\n        \t}\r\n    \t}\r\n    \t\r\n    \t//storing the count of jobs and max profit in a list and returning it.\r\n    \tvector<int> ans;\r\n    \tans.push_back(count);\r\n    \tans.push_back(res);\r\n    \treturn ans;\r\n    } \r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end Complete Function template for JAVA\r\n\r\n\r\n//function used for sorting all jobs according to decreasing profit.\r\nclass jobComparator implements Comparator<Job> \r\n{\r\n    public int compare(Job j1, Job j2){\r\n        if(j1.profit > j2.profit)return -1;\r\n        if(j1.profit < j2.profit)return 1;\r\n        return 0;\r\n    }\r\n}\r\n\r\nclass Solution\r\n{\r\n    //Function to find the maximum profit and the number of jobs done.\r\n    int[] JobScheduling(Job arr[], int n)\r\n    {\r\n        //sorting all jobs according to decreasing order of profit.\r\n        Arrays.sort(arr, new jobComparator());\r\n        \r\n\r\n        int res=0, count=0;\r\n        //array to store result (Sequence of jobs).\r\n        int[] result = new int[n];\r\n        //boolean array to keep track of free time slots. \r\n        boolean[] slot = new boolean[n];\r\n        \r\n        //initializing all slots to free.\r\n        Arrays.fill(slot, false);\r\n        \r\n        //iterating through all given jobs.\r\n        for (int i=0; i<n; i++)\r\n        { \r\n            //finding a free slot for current job (Note that we start \r\n        \t//from the last possible slot).\r\n            for (int j= arr[i].deadline-1; j>=0; j--) \r\n            { \r\n                //if free slot is found, we add current job to result array\r\n        \t\t//and make the current slot occupied.\r\n                if (slot[j]==false)\r\n                { \r\n\t\t\t        result[j] = i; \r\n\t\t\t        slot[j] = true;\r\n\t\t\t        break; \r\n\t\t        } \r\n\t        } \r\n\t    } \r\n\t    for (int i=0; i<n; i++)\r\n\t    {\r\n\t        //if slot is occupied, we update the counter and \r\n    \t    //add its profit in final result.\r\n\t        if(slot[i]) {\r\n\t            count++;\r\n\t            res += arr[result[i]].profit;\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    //storing the count of jobs and max profit in a list and returning it.\r\n\t    int[] ans = new int[2];\r\n\t    ans[0] = count;\r\n\t    ans[1] = res;\r\n\t    return ans;\r\n    }\r\n    \r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to find the maximum profit and the number of jobs done.\r\n    def JobScheduling(self,Jobs,n):\r\n        \r\n        res,count = 0,0\r\n        \r\n        #sorting all jobs according to decreasing order of profit.\r\n        Jobs = sorted(Jobs , key = lambda x: x.profit, reverse=True)\r\n        \r\n        #array to store result (Sequence of jobs).\r\n        result = [0 for i in range(n)]\r\n        #boolean array to keep track of free time slots \r\n        #and initializing all slots to free.\r\n        slot = [False for i in range(n)]\r\n    \r\n        \r\n        #iterating through all given jobs.\r\n        for i in range(n):\r\n            \r\n            #finding a free slot for current job (Note that we start \r\n        \t#from the last possible slot).\r\n            for j in range(Jobs[i].deadline-1,-1,-1):\r\n                \r\n                #if free slot is found, we add current job to result array\r\n        \t\t#and make the current slot occupied.\r\n                if not slot[j]:\r\n                    result[j] = i\r\n                    slot[j] = True \r\n                    break\r\n                \r\n        #if slot is occupied, we update the counter and \r\n\t    #add its profit in final result.\r\n        for i in range(n):\r\n            if slot[i]:\r\n                res+=Jobs[result[i]].profit\r\n                count+=1\r\n    \r\n        #storing the count of jobs and max profit in a list and returning it.\r\n        ans = []\r\n        ans.append (count)\r\n        ans.append (res)\r\n        return ans\r\n        ",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}