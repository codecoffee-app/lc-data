{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701367,
            "title": "Job Sequencing Problem",
            "titleSlug": "job-sequencing-problem-1587115620",
            "content": "<p><span >You are given two arrays: <strong><code>deadline[]</code>,</strong> and <strong><code>profit[]</code>,</strong> which represent a set of jobs, where each job is associated with a <strong>deadline</strong>, and a <strong>profit</strong>. Each job takes 1 unit of time to complete, and only one job can be scheduled at a time. You will earn the profit associated with a job only if it is completed by its deadline.</span></p>\n<p><span >Your task is to find:</span></p>\n<ol>\n<li><span >The <strong>maximum number of jobs</strong> that can be completed within their deadlines.</span></li>\n<li><span >The <strong>total maximum profit</strong> earned by completing those jobs.</span></li>\n</ol>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>deadline[] = [4, 1, 1, 1], profit[] = [20, 10, 40, 30]\n<strong>Output: </strong>[2, 60]<strong>\nExplanation: </strong>Job<sub>1</sub> and Job<sub>3 </sub>can be done with maximum profit of 60 (20+40).\n</span></pre>\n<pre><span ><strong>Input: </strong>deadline[] = [2, 1, 2, 1, 1], profit[] = [100, 19, 27, 25, 15]\n<strong>Output: </strong>[2, 127]<strong>\nExplanation: </strong>Job<sub>1</sub> and Job<sub>3</sub> can be done with maximum profit of 127 (100+27).</span></pre>\n<pre><span ><strong>Input: </strong>deadline[] = [3, 1, 2, 2], profit[] = [50, 10, 20, 30]\n<strong>Output: </strong>[3, 100]<strong>\nExplanation: </strong>Job<sub>1</sub>, Job<sub>3</sub> and Job<sub>4</sub> can be completed with a maximum profit of 100 (50 + 20 + 30).</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; deadline.size() == profit.size() &le; 10<sup>5</sup><br />1 &le; deadline[i] &le; deadline.size()<br />1 &le; profit[i] &le; 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `deadline[]` and `profit[]`, representing a set of jobs. Each job has a deadline and a profit.  Each job takes 1 unit of time, and only one job can be scheduled at a time. The profit is earned only if the job is completed by its deadline. Determine the maximum number of jobs that can be completed within their deadlines and the total maximum profit earned by completing those jobs.",
                "constraints": [
                    "1 <= deadline.size() == profit.size() <= 10^5",
                    "1 <= deadline[i] <= deadline.size()",
                    "1 <= profit[i] <= 500"
                ],
                "testcases": [
                    {
                        "input": "deadline[] = [4, 1, 1, 1], profit[] = [20, 10, 40, 30]",
                        "output": "[2, 60]",
                        "explanation": "Jobs 1 and 3 can be completed, yielding a maximum profit of 60 (20 + 40)."
                    },
                    {
                        "input": "deadline[] = [2, 1, 2, 1, 1], profit[] = [100, 19, 27, 25, 15]",
                        "output": "[2, 127]",
                        "explanation": "Jobs 1 and 3 can be completed, yielding a maximum profit of 127 (100 + 27)."
                    },
                    {
                        "input": "deadline[] = [3, 1, 2, 2], profit[] = [50, 10, 20, 30]",
                        "output": "[3, 100]",
                        "explanation": "Jobs 1, 3, and 4 can be completed, yielding a maximum profit of 100 (50 + 20 + 30)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Process Jobs in order of their deadline, lowest deadline first.&nbsp;</span></p>",
            "<p><span >Use a priority queue to decide which job to skip based on profit.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "accolite",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> jobSequencing(vector<int> &deadline, vector<int> &profit) {\n        int n = deadline.size();\n        vector<int> ans = {0, 0};\n\n        // pair the profit and deadline of\n        // all the jos together\n        vector<pair<int, int>> jobs;\n        for (int i = 0; i < n; i++) {\n            jobs.push_back({deadline[i], profit[i]});\n        }\n\n        // sort the jobs based on deadline\n        // in ascending order\n        sort(jobs.begin(), jobs.end());\n\n        // to maintain the scheduled jobs based on profit\n        priority_queue<int, vector<int>, greater<int>> pq;\n\n        for (const auto &job : jobs) {\n\n            // if job can be scheduled within its deadline\n            if (job.first > pq.size())\n                pq.push(job.second);\n\n            // Replace the job with the lowest profit\n            else if (!pq.empty() && pq.top() < job.second) {\n                pq.pop();\n                pq.push(job.second);\n            }\n        }\n\n        while (!pq.empty()) {\n            ans[1] += pq.top();\n            pq.pop();\n            ans[0]++;\n        }\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public ArrayList<Integer> jobSequencing(int[] deadline, int[] profit) {\n        int n = deadline.length;\n        ArrayList<Integer> ans = new ArrayList<>(Arrays.asList(0, 0));\n\n        // Pair the profit and deadline of all the jobs together\n        List<int[]> jobs = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            jobs.add(new int[] {deadline[i], profit[i]});\n        }\n\n        // Sort the jobs based on deadline in ascending order\n        jobs.sort(Comparator.comparingInt(a -> a[0]));\n\n        // Min-heap to maintain the scheduled jobs based on profit\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n\n        for (int[] job : jobs) {\n\n            // If job can be scheduled within its deadline\n            if (job[0] > pq.size()) {\n                pq.add(job[1]);\n            }\n            // Replace the job with the lowest profit\n            else if (!pq.isEmpty() && pq.peek() < job[1]) {\n                pq.poll();\n                pq.add(job[1]);\n            }\n        }\n\n        while (!pq.isEmpty()) {\n            ans.set(1, ans.get(1) + pq.poll());\n            ans.set(0, ans.get(0) + 1);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def jobSequencing(self, deadline, profit):\n        n = len(deadline)\n        ans = [0, 0]\n\n        # pair the profit and deadline of\n        # all the jos together\n        jobs = [(deadline[i], profit[i]) for i in range(n)]\n\n        # sort the jobs based on deadline\n        # in ascending order\n        jobs.sort()\n\n        # to maintain the scheduled jobs based on profit\n        pq = []\n\n        for job in jobs:\n\n            # if job can be scheduled within its deadline\n            if job[0] > len(pq):\n                heapq.heappush(pq, job[1])\n            # Replace the job with the lowest profit\n            elif pq and pq[0] < job[1]:\n                heapq.heappop(pq)\n                heapq.heappush(pq, job[1])\n\n        while pq:\n            ans[1] += heapq.heappop(pq)\n            ans[0] += 1\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass MinHeap {\n    constructor() { this.heap = []; }\n\n    push(val) {\n        this.heap.push(val);\n        this.heapifyUp();\n    }\n\n    pop() {\n        if (this.heap.length === 1) return this.heap.pop();\n        const min = this.heap[0];\n        this.heap[0] = this.heap.pop();\n        this.heapifyDown();\n        return min;\n    }\n\n    top() { return this.heap.length > 0 ? this.heap[0] : null; }\n\n    size() { return this.heap.length; }\n\n    heapifyUp() {\n        let idx = this.heap.length - 1;\n        while (idx > 0) {\n            let parentIdx = Math.floor((idx - 1) / 2);\n            if (this.heap[parentIdx] <= this.heap[idx]) break;\n            [this.heap[parentIdx], this.heap[idx]] =\n                [ this.heap[idx], this.heap[parentIdx] ];\n            idx = parentIdx;\n        }\n    }\n\n    heapifyDown() {\n        let idx = 0;\n        while (true) {\n            let leftChildIdx = 2 * idx + 1;\n            let rightChildIdx = 2 * idx + 2;\n            let smallest = idx;\n\n            if (leftChildIdx < this.heap.length &&\n                this.heap[leftChildIdx] < this.heap[smallest]) {\n                smallest = leftChildIdx;\n            }\n            if (rightChildIdx < this.heap.length &&\n                this.heap[rightChildIdx] < this.heap[smallest]) {\n                smallest = rightChildIdx;\n            }\n            if (smallest === idx) break;\n\n            [this.heap[idx], this.heap[smallest]] =\n                [ this.heap[smallest], this.heap[idx] ];\n            idx = smallest;\n        }\n    }\n}\n\nclass Solution {\n    jobSequencing(deadline, profit) {\n        let n = deadline.length;\n        let ans = [ 0, 0 ];\n\n        // Pair jobs as [deadline, profit]\n        let jobs = [];\n        for (let i = 0; i < n; i++) {\n            jobs.push([ deadline[i], profit[i] ]);\n        }\n\n        // Sort jobs by deadline (ascending order)\n        jobs.sort((a, b) => a[0] - b[0]);\n\n        // Min-Heap to keep track of scheduled jobs based on profit\n        let minHeap = new MinHeap();\n\n        for (let job of jobs) {\n            if (minHeap.size() < job[0]) {\n                minHeap.push(job[1]); // Add profit\n            } else if (minHeap.size() > 0 && minHeap.top() < job[1]) {\n                minHeap.pop();\n                minHeap.push(job[1]);\n            }\n        }\n\n        // Compute total profit & number of jobs done\n        while (minHeap.size() > 0) {\n            ans[1] += minHeap.pop();\n            ans[0]++;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}