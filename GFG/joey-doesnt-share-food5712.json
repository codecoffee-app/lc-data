{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705566,
            "title": "Joey doesn't share food",
            "titleSlug": "joey-doesnt-share-food5712",
            "content": "<p><span style=\"font-size: 18px;\">Every friends fan know that joey loves food and monica loves to cook. So, on a occassion of thanksgiving monica made n&nbsp;types of food containing exactly 6 ingredients each. Monica is an excellent cook so she can cook food by adding any ingredient at any order. All ingredients contains protein on the scale of 1 to 10^6. Now, Chandler invented the fun game where everyone needs to find the successive protein rate in all n&nbsp;food of the ingredient on the top(6th ingredient is on top). Ross being the most curious wants to finish this game before dinner, so he wants your help to complete the task.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>nums = {{1,2,3,4,5,6}, \n{8,9,10,11,12,13}}\n<strong>Output: </strong>1\n<strong>Explanation: </strong>No matter how the arrangement is\nthe answer will be 1.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">nums = {{1,2,3,4,5,6},\n{2,3,4,5,6,7}, {3,4,5,6,7,10},\n{4,5,6,7,8,9}}\n<strong>Output: </strong>4\n<strong>Explanation: </strong>If ingredients are arranged in \nany order and let say if don't rearrange it, \nans will be 2.</span><span style=\"font-size: 18px;\"><code>\nAs 6 7 or 10 9. These are the successive \nprotein rate existing.\nIf we arrange it in order:\n1 2 3 4 5 6\n2 3 4 5 6 7\n3 4 6 7 10 5\n4 5 6 7 9 8\nNow the answer will be 4.\nAs 6 7 5 8, so these protein rates are successive\n(5 6 7 8).</code></span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;</strong>You don't need to read or print anything. Your task is to complete the function<strong>&nbsp;MaxmimumLength()&nbsp;</strong>which takes details of each food i,e nums as input parameter and returns the length of largest chain formed.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup>)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(n)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup><br />1 &lt;= protein scale &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Monica, a skilled chef, prepared 'n' types of food for Thanksgiving, each using exactly 6 ingredients. Each ingredient has a protein value between 1 and 10^6. Chandler introduces a game where participants need to find the longest possible chain of successive protein values among the 6th (top) ingredient of all 'n' foods. Ross, eager to finish the game before dinner, seeks your help to determine the length of this longest chain.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= protein scale <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "{{1,2,3,4,5,6}, {8,9,10,11,12,13}}",
                        "output": "1",
                        "explanation": "Regardless of how the ingredients are arranged within each food, the longest successive chain of the 6th ingredient is of length 1. (e.g., 6 and 13 are not successive)."
                    },
                    {
                        "input": "{{1,2,3,4,5,6}, {2,3,4,5,6,7}, {3,4,5,6,7,10}, {4,5,6,7,8,9}}",
                        "output": "4",
                        "explanation": "By rearranging the ingredients within each food, we can maximize the length of the successive chain of the 6th ingredient.  For example arranging each food as shown below result in a chain of 6, 7, 5, 8:\n1 2 3 4 5 6\n2 3 4 5 6 7\n3 4 6 7 10 5\n4 5 6 7 9 8\n\nThese give a successive chain length of 4 since (5, 6, 7, 8) are successive."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Including necessary libraries and defining constants\n\nconst int MAX = 1000010;\n\n// Declaring variables and vectors\n\nlong long iter, was[MAX];\nint pa[MAX], pb[MAX];\nvector <int> g[MAX];\n\nclass Solution {\npublic:\n\t// Function to perform depth-first search in the graph\n\n\tbool dfs(int v) {\n\t  was[v] = iter;\n\t  for (int j : g[v]) {\n\t    if (pb[j] == -1) {\n\t      pa[v] = j;\n\t      pb[j] = v;\n\t      return true;\n\t    }\n\t  }\n\t  for (int j : g[v]) {\n\t    if (was[pb[j]] != iter) {\n\t      if (dfs(pb[j])) {\n\t        pa[v] = j;\n\t        pb[j] = v;\n\t        return true;\n\t      }\n\t    }\n\t  }\n\t  return false;\n\t}\n\n\t// Function to find the maximum length of matches\n\n\tint MaxmimumLength(vector<vector<int>>nums){\n\t\tint n = nums.size();\n\t\t\n\t\t// Clearing the graph vectors\n\t\t\n\t\tfor(int i = 0; i < MAX; i++)\n\t\t    g[i].clear();\n\t\t\n\t\t// Populating the graph vectors\n\t\t\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < 6; j++){\n\t\t\t\tg[nums[i][j]].push_back(i);\n\t\t\t}\n\t\t}\n\t\n\t\t// Randomly shuffling the graph vectors\n\t\t\n\t\tfor(int i = 0; i < MAX; i++)\n\t\t\trandom_shuffle(g[i].begin(), g[i].end());\n\t\t\n\t\t// Initializing and resetting arrays\n\t\t\n\t    for (int i = 0; i < MAX; i++) {\n\t      pa[i] = -1;\n\t      was[i] = -1;\n\t    }\n\t    for (int j = 0; j < n; j++) {\n\t      pb[j] = -1;\n\t    }\n\t    \n\t    // Initializing necessary variables\n\t    \n\t    int ans = 0;\n\t    int rr = 0;\n\t    iter = 0;\n\t    \n\t    // Performing the maximum matching algorithm\n\t    \n\t    for (int ll = 1; ll < MAX; ll++) {\n\t      rr = max(rr, ll - 1);\n\t      while (true) {\n\t        iter++;\n\t        if (dfs(rr + 1)) {\n\t          rr++;\n\t        } else {\n\t          break;\n\t        }\n\t      }\n\t      ans = max(ans, rr - ll + 1);\n\t      if (pa[ll] != -1) {\n\t        pb[pa[ll]] = -1;\n\t        pa[ll] = -1;\n\t      }\n\t  \t}\n\t  \treturn ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}