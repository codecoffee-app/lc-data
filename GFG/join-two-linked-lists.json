{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702084,
            "title": "Join Two Linked Lists",
            "titleSlug": "join-two-linked-lists",
            "content": "<p><span style=\"font-size:18px\">Given two linked lists of size <strong>n1</strong> and <strong>n2</strong> respectively, you have to<strong> </strong><strong>join </strong>the <strong>head </strong>of second list to the tail of first so that we can traverse both the lists using head of 1st list.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>LinkedList1: 5\nLinkedList2: 1-&gt;2\n<strong>Output: </strong>5 1 2</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>LinkedList1: 1-&gt;2-&gt;9-&gt;6-&gt;5-&gt;7\nLinkedList2: 99-&gt;8-&gt;4\n<strong>Output: </strong>1 2 9 6 5 7 99 8 4</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nThe task is to complete the function <strong>joinTheLists()</strong> which takes<strong> head1 and head2 references</strong> as arguments. The <strong>function returns head of the first list</strong> after joining both lists. The <strong>printing </strong>is done <strong>automatically </strong>by the <strong>driver code</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n1).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= number of nodes in a linkedlist&nbsp;&lt;= 10<sup>3</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two singly linked lists, `list1` of size `n1` and `list2` of size `n2`, modify `list1` such that the tail of `list1` points to the head of `list2`. In other words, concatenate `list2` to the end of `list1`. Return the head of the modified `list1`.",
                "constraints": [
                    "1 <= Number of nodes in each linked list <= 1000"
                ],
                "testcases": [
                    {
                        "input": "LinkedList1: 5\nLinkedList2: 1->2",
                        "output": "5 1 2",
                        "explanation": "The tail of the first list (5) is connected to the head of the second list (1)."
                    },
                    {
                        "input": "LinkedList1: 1->2->9->6->5->7\nLinkedList2: 99->8->4",
                        "output": "1 2 9 6 5 7 99 8 4",
                        "explanation": "The tail of the first list (7) is connected to the head of the second list (99)."
                    },
                    {
                        "input": "LinkedList1: 1\nLinkedList2: null",
                        "output": "1",
                        "explanation": "The second list is empty, so the first list remains unchanged."
                    },
                    {
                        "input": "LinkedList1: null\nLinkedList2: 1->2",
                        "output": "null",
                        "explanation": "The first list is empty, so the result should be null as no join operation is performed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Strore the head of first list in temp and keep on moving temp until the next of temp is not null. Now just do temp-&gt;next=head2</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nNode * joinTheLists(Node * head1, Node * head2)\n{\n   Node * temp=head1;\n   while(temp->next)\n   temp=temp->next;\n   \n   temp->next=head2;\n   \n   return head1;\n}\n    \n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Join\n{\n    public static Node joinTheLists(Node head1, Node head2)\n    {\n           Node temp = head1;\n           while(temp.next != null)\n           temp = temp.next;\n           \n           temp.next = head2;\n           \n           return head1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\ndef joinTheLists(head1, head2):\n    tmp = head1\n    while(tmp.next!=None):\n        tmp=tmp.next\n    tmp.next = head2\n    return head1",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {Node} head1\n * @param {Node} head2\n * @returns {Node}\n*/\n\nclass Solution {\n    /**\n     * @param {Node} data\n     * @returns {Void}\n    */\n    constructor(data) {\n        this.data = data;\n        this.next = null;\n    }\n\n    joinTheLists(head1, head2)\n    {\n        let tmp = head1;\n        while(tmp.next !== null){\n            tmp = tmp.next;\n        }\n        tmp.next = head2;\n        return head1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}