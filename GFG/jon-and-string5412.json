{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703548,
            "title": "Sort string",
            "titleSlug": "jon-and-string5412",
            "content": "<p><span style=\"font-size:18px\">Given a string S, sort it in the following manner. Sorted string must contain a vowel as first letter and a consonant as next letter and so on OR a consonant as first letter and a vowel as next letter and so on, depending on the string. If there is no vowel left then print the remaining consonant in ascending order and vice versa.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\">Note: Order of vowel must be a-&gt;e-&gt;i-&gt;o-&gt;u and order of consonant must be b-&gt;c-&gt;d... and so on.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong> </span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> abcdei </span>\n\n<span style=\"font-size:18px\"><strong>Output:</strong> abecid </span>\n\n<span style=\"font-size:18px\"><strong>Explanation:</strong> &#39;a&#39; (Vowel) came first so the\npattern of sorted string is vcvcvcvc... </span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong> </span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> bcadefgh</span>\n\n<span style=\"font-size:18px\"><strong>Output:</strong> bacedfgh </span>\n\n<span style=\"font-size:18px\"><strong>Explanation:</strong> &#39;b&#39; (consonant) came first so\nthe pattern of sorted string is cvcvcvcv....</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: </strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function SortedString() which takes the string s as input parameters and returns the sorted string. </span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Constraints:</span></strong></p>\n\n<p><span style=\"font-size:18px\">1&lt;=|S|&lt;=1000000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S, rearrange it such that vowels and consonants alternate. The sorted string should begin with either a vowel followed by a consonant, or a consonant followed by a vowel.  The order of vowels should be a -> e -> i -> o -> u, and consonants should be sorted alphabetically. If one type of character (vowel or consonant) runs out, append the remaining characters of the other type in ascending order.",
                "constraints": [
                    "1 <= |S| <= 1000000"
                ],
                "testcases": [
                    {
                        "input": "abcdei",
                        "output": "abecid",
                        "explanation": "The string starts with 'a' (a vowel), so the pattern is vowel-consonant-vowel-consonant... leading to 'abecid'."
                    },
                    {
                        "input": "bcadefgh",
                        "output": "bacedfgh",
                        "explanation": "The string starts with 'b' (a consonant), so the pattern is consonant-vowel-consonant-vowel... leading to 'bacedfgh'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<pre>\n<span style=\"font-size:18px\">Use Hashing</span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//User function template for C++\n\n\nclass Solution\n{\n\t// To check whether a charcter is vowel or not\n\tprivate:\n\t\tbool is_vowel(char c)\n\t\t{\n\t\t\tif(c == 'a' or c == 'e' or c == 'i' or c =='o' or c=='u')\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\tpublic:\n\t\tstring SortedString(string s)\n\t\t{\n\t\t\tstring res=\"\";\n\t\t\tint n=s.size();\n\t\t\tvector<int>freq(26,0);\n\t\t\tfor(auto i: s)\n\t\t\t{\n\t\t\t\tfreq[i-'a']++;\n\t\t\t}\n\t\t\tint f=1;\n\t\t\tif(is_vowel(s[0]))\n\t\t\t\tf=0;\n\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t{\n\t\t\t\tif(!f)\n\t\t\t\t{\n\t\t\t\t\t// for changing the turn\n\t\t\t\t\tf=f^1;\n\t\t\t\t\tfor(int j = 0; j < 26; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(is_vowel(char(j+'a')) and freq[j])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tres = res + char(j+'a');\n\t\t\t\t\t\t\tfreq[j]--;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t// for changing the turn\n\t\t\t\t\tf=f^1;\n\t\t\t\t\tfor(int j = 0; j < 26; j++){\n\t\t\t\t\t\tif(!is_vowel(char(j+'a')) and freq[j])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tres = res + char(j+'a');\n\t\t\t\t\t\t\tfreq[j]--;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0; i < 26; i++)\n\t\t\t{\n\t\t\t\twhile(freq[i])\n\t\t\t\t{\n\t\t\t\t\tres = res + char(i+'a');\n\t\t\t\t\tfreq[i]--;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // To check whether a character is vowel or not\n    private bool IsVowel(char c)\n    {\n        if(c == 'a' || c == 'e' || c == 'i' || c =='o' || c=='u')\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public string SortedString(string s)\n    {\n        string res=\"\";\n        int n=s.Length;\n        int[] freq = new int[26];\n        for(int i = 0; i < n; i++)\n        {\n            freq[s[i]-'a']++;\n        }\n        int f=1;\n        if(IsVowel(s[0]))\n            f=0;\n        for(int i = 0; i < n; i++)\n        {\n            if(f == 0)\n            {\n                // for changing the turn\n                f=f^1;\n                for(int j = 0; j < 26; j++)\n                {\n                    if(IsVowel((char)(j+'a')) && freq[j] > 0)\n                    {\n                        res = res + (char)(j+'a');\n                        freq[j]--;\n                        break;\n                    }\n                }\n            }\n            else\n            {\n                // for changing the turn\n                f=f^1;\n                for(int j = 0; j < 26; j++)\n                {\n                    if(!IsVowel((char)(j+'a')) && freq[j] > 0)\n                    {\n                        res = res + (char)(j+'a');\n                        freq[j]--;\n                        break;\n                    }\n                }\n            }\n        }\n        for(int i = 0; i < 26; i++)\n        {\n            while(freq[i] > 0)\n            {\n                res = res + (char)(i+'a');\n                freq[i]--;\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}