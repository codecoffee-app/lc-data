{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705534,
            "title": "Josephus Circle using List",
            "titleSlug": "josephus-circle-using-list",
            "content": "<p><span style=\"font-size: 18px;\">You are given two integers <strong>n </strong>and <strong>k</strong> where n represents the total number of people who are standing in a circle, and k represents the person who gets killed in each iteration. You need to find which person is the last man standing. The indexing here starts from one. The counting starts from the first&nbsp;person and after each killing, the counting resets and start from the next neighbour of the killed person.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 3, k = 2\n<strong>Output: </strong>3<strong>\nExplanation: </strong>There are 3 persons so skipping 1 person i.e 1st person 2nd person will be killed. Thus the safe position is 3.</span></pre>\n<pre><span ><strong>Input: </strong>n = 5, k = 3\n<strong>Output: </strong>4<strong>\nExplanation: </strong>There are 5 persons so skipping 2 person i.e 3rd person will be killed. Thus the safe position is 4.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= k, n &lt;= 20</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, `n` and `k`, where `n` represents the number of people standing in a circle (numbered 1 to n), and `k` represents the killing interval.  Starting from person 1, every `k`th person is eliminated. After a person is killed, the counting restarts from the next living neighbor. Determine the index of the last remaining person.",
                "constraints": [
                    "2 <= k, n <= 20"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 2",
                        "output": "3",
                        "explanation": "With 3 people and a killing interval of 2, the first person killed is person 2.  Counting restarts from person 3, and skipping one person results in person 1 being killed next. The last person standing is person 3."
                    },
                    {
                        "input": "n = 5, k = 3",
                        "output": "4",
                        "explanation": "With 5 people and a killing interval of 3, the first person killed is person 3. Counting continues from person 4, and skipping two people results in person 1 being killed next.  Counting resumes at person 2, and skipping two people results in person 5 being killed next.  Then counting starts with person 2 and after 2 skips it becomes person 2 again as it is the only next available candidate and is killed. Finally person 4 remains."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the list as circular linked list.</p>",
            "<p>Once to reach the end of the list, initialize the iterator to the beginning of the list.</p>"
        ],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nint josephus(int n, int k) {\n    list<int> l;\n\n    for (int i = 1; i <= n; i++) {\n        l.push_back(i);\n    }\n\n    auto it = l.begin();\n\n    while (l.size() > 1) {\n        for (int count = 1; count < k; count++) {\n            it++;\n            if (it == l.end()) {\n                it = l.begin();\n            }\n        }\n        it = l.erase(it);\n\n        if (it == l.end())\n            it = l.begin();\n    }\n\n    return *l.begin();\n}",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}