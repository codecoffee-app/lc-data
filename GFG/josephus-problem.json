{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700361,
            "title": "Josephus problem",
            "titleSlug": "josephus-problem",
            "content": "<p><span >A total of <strong>n</strong> people are standing in a circle, and you are one of them playing a game. Starting from a person, <strong>k</strong> persons will be counted in order <strong>along the circle</strong>, and the <strong>k<sup>th</sup></strong> person will be killed. Then the next <strong>k</strong> persons will be counted along the circle, and again the <strong>k<sup>th</sup></strong>&nbsp;person will be killed. This cycle will continue until only a single person is left in the circle.</span></p>\n<p><span >If there are 5 people in the circle in the order <strong>A, B, C, D</strong>, and <strong>E</strong>, you will choose <strong>k=3</strong>. Starting from <strong>A</strong>, you will count <strong>A</strong>, <strong>B </strong>and <strong>C</strong>. <strong>C </strong>will be the <strong>3rd </strong>person and will be killed. Then you will continue counting from <strong>D</strong>, <strong>E </strong>and then <strong>A</strong>. <strong>A </strong>will be third person and will be killed.&nbsp;</span></p>\n<p><span >You will be given an array where the first element is the first person from whom the counting will start and the subsequent order of the people. You want to be the last one standing. Determine the index at which you should stand to survive the game. <strong>Return </strong>an integer denoting<strong>&nbsp;safe </strong>position.&nbsp;</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 3, k = 2\n<strong>Output: </strong>3<strong>\nExplanation: </strong>There are 3 persons so skipping 1 person i.e 1st person 2nd person will be killed. Thus the safe position is 3.</span></pre>\n<pre><span ><strong>Input: </strong>n = 5, k = 3\n<strong>Output: </strong>4<strong>\nExplanation: </strong>There are 5 persons so skipping 2 person i.e 3rd person will be killed. Thus the safe position is 4.</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &lt;= n, k &lt;= 20</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Imagine a circle of `n` people playing a deadly game. Starting from a designated person, every `k`-th person in the circle is eliminated. This process continues until only one person remains. Given the initial number of people (`n`) and the skip count (`k`), determine the index of the position that guarantees survival.",
                "constraints": [
                    "1 <= n <= 20",
                    "1 <= k <= 20"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 2",
                        "output": "3",
                        "explanation": "With 3 people and skipping 1 person (k=2), the safe position is 3."
                    },
                    {
                        "input": "n = 5, k = 3",
                        "output": "4",
                        "explanation": "With 5 people and skipping 2 people (k=3), the safe position is 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "walmart"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nint josephus(int n, int k) {\n    if (n == 1) // base case\n        return 1;\n    else\n        /* The position returned by josephus(n - 1, k) is adjusted because the\n             recursive call josephus(n - 1, k) considers the original position\n             k%n + 1 as position 1 */\n        return (josephus(n - 1, k) + k - 1) % n + 1; // recursion\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int josephus(int n, int k) {\n        if (n == 1) // base case\n            return 1;\n        else\n\n            /* The position returned by josephus(n - 1, k) is adjusted because the\n                 recursive call josephus(n - 1, k) considers the original position\n                 k%n + 1 as position 1 */\n            return (josephus(n - 1, k) + k - 1) % n + 1; // recursion\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n   // Function to find the survivor in the Josephus problem\n   public int josephus(int n, int k)\n    {\n      // Base case: if there is only one person left, return their position\n      if (n == 1)\n        return 1;\n      else\n      /* The position returned by josephus(n - 1, k) is adjusted because the \n       recursive call josephus(n - 1, k) considers the original position  \n       k%n + 1 as position 1 */\n        return (josephus(n - 1, k) + k-1) % n + 1; // Recursive call to josephus function\n    }\n\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def josephus(self, n, k):\n        if n == 1:\n            return 1  #Base case\n        else:\n            # Adjust the position returned by josephus(n - 1, k)\n            # to account for the original position k%n + 1 being\n            # considered as position 1\n            return (self.josephus(n - 1, k) + k - 1) % n + 1  #Recursion\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int josephus(int n, int k) {\n        if (n == 1) // base case\n            return 1;\n        else\n            return (josephus(n - 1, k) + k - 1) % n + 1; // recursion\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} n\n * @param {number} k\n * @returns {number}\n */\nclass Solution {\n\n    josephus(n, k) {\n        if (n === 1) // base case\n            return 1;\n        else\n\n            /* The position returned by josephus(n - 1, k) is adjusted because the\n                 recursive call josephus(n - 1, k) considers the original position\n                 k%n + 1 as position 1 */\n            return (this.josephus(n - 1, k) + k - 1) % n + 1; // recursion\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}