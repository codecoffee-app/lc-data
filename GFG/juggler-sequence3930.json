{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705067,
            "title": "Juggler Sequence",
            "titleSlug": "juggler-sequence3930",
            "content": "<p><span style=\"font-size: 18px;\">Juggler Sequence is a series of integers&nbsp;in which the first term starts with a positive integer number&nbsp;<em>a</em>&nbsp;and the remaining terms are generated from the immediate previous term using the below recurrence relation:<br /><br /><img style=\"width: 414px; height: 122px;\" src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/705067/Web/Other/2220ffd2-353d-4b30-b2aa-68fe4047f959_1685087657.png\" alt=\"Juggler Formula\" /><br /><br />Given a number n, find the Juggler Sequence for this number as the first term of the sequence until it becomes 1.</span></p>\n<p><br /><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 9\n<strong>Output:</strong> 9 27 140 11 36 6 2 1\n<strong>Explaination:</strong> We start with 9 and use \nabove formula to get next terms.</span></pre>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 6\n<strong>Output:</strong> 6 2 1\n<strong>Explaination:</strong> \n[6<sup>1/2</sup>] = 2. \n[2<sup>1/2</sup>] = 1.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your Task is to complete the function<strong> jugglerSequence()</strong> which takes n as the input parameter and returns a list of integers denoting the generated sequence.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n</span><span style=\"font-size: 18px;\">)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "The Juggler Sequence is a series of integers where the first term is a positive integer 'n'. Subsequent terms are generated using the following recurrence relation:\n\n- If the previous term is even: next term = floor(previous term^(1/2))\n- If the previous term is odd: next term = floor(previous term^(3/2))\n\nGiven a number 'n', generate the Juggler Sequence starting with 'n' until the sequence reaches 1.",
                "constraints": [
                    "1 <= n <= 100"
                ],
                "testcases": [
                    {
                        "input": "9",
                        "output": "9 27 140 11 36 6 2 1",
                        "explanation": "Starting with 9, the sequence is generated as follows:\n- 9 (initial)\n- 9 is odd: floor(9^(3/2)) = floor(27) = 27\n- 27 is odd: floor(27^(3/2)) = floor(140.29) = 140\n- 140 is even: floor(140^(1/2)) = floor(11.83) = 11\n- 11 is odd: floor(11^(3/2)) = floor(36.48) = 36\n- 36 is even: floor(36^(1/2)) = floor(6) = 6\n- 6 is even: floor(6^(1/2)) = floor(2.44) = 2\n- 2 is even: floor(2^(1/2)) = floor(1.41) = 1\n"
                    },
                    {
                        "input": "6",
                        "output": "6 2 1",
                        "explanation": "Starting with 6, the sequence is generated as follows:\n- 6 (initial)\n- 6 is even: floor(6^(1/2)) = floor(2.44) = 2\n- 2 is even: floor(2^(1/2)) = floor(1.41) = 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use the given formula. The sequence always ends at 1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "series",
                "slug": "series"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to generate the Juggler Sequence\n    vector<long long> jugglerSequence(long long n) {\n        // Initializing the result vector with the initial number\n        vector<long long> res;\n        res.emplace_back(n);\n\n        // Loop until the number becomes 1\n        while (n > 1) {\n            // If the number is odd, perform the juggler equation\n            if (n % 2)\n                n = (sqrt(n) * n);\n            // If the number is even, perform the juggler equation\n            else\n                n = sqrt(n);\n\n            // Add the number to the result vector\n            res.emplace_back(n);\n        }\n\n        // Return the final result vector\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    static List<Long> jugglerSequence(long n) {\n        // Initializing the result list with the initial number\n        List<Long> res = new ArrayList<>();\n        res.add(n);\n\n        // Loop until the number becomes 1\n        while (n > 1) {\n            // If the number is odd, perform the juggler equation\n            if (n % 2 == 1) n = (long)(Math.sqrt(n) * n);\n            // If the number is even, perform the juggler equation\n            else\n                n = (long)Math.sqrt(n);\n\n            // Add the number to the result list\n            res.add(n);\n        }\n\n        // Return the final result list\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from math import sqrt\n\n\nclass Solution:\n\n    def jugglerSequence(self, n):\n        # Initializing the result list with the initial number\n        res = [n]\n\n        # Loop until the number becomes 1\n        while n > 1:\n            # If the number is odd, perform the juggler equation\n            if n % 2:\n                n = int(sqrt(n) * n)\n            # If the number is even, perform the juggler equation\n            else:\n                n = int(sqrt(n))\n\n            # Add the number to the result list\n            res.append(n)\n\n        # Return the final result list\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}