{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704678,
            "title": "Jumbled Strings",
            "titleSlug": "jumbled-strings0431",
            "content": "<p><span style=\"font-size:18px\">You are provided an input string S and the string &ldquo;GEEKS&rdquo; . Find the number of ways in which the subsequence &ldquo;GEEKS&rdquo; can be formed from the&nbsp;string S.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input : </strong>S = &quot;GEEKS&quot;\r\n<strong>Output: </strong>1\r\n<strong>Explanation: \r\n</strong>&quot;GEEKS&quot; occurs in S only once.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input: </span></strong><span style=\"font-size:18px\">S = &quot;AGEEKKSB&quot;\r\n<strong>Output: </strong>2\r\n<strong>Explanation: </strong>Subsequenece<strong> </strong>&quot;GEEKS&quot; occurs in \r\nS two times. First one is taking the first \r\n&#39;K&#39; into consideration and second one is \r\ntaking second &#39;K&#39;.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your&nbsp;Task:</strong></span><br />\r\n<span style=\"font-size:18px\">You don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>TotalWays()</strong> which takes string S as input paramater and returns total ways modulo&nbsp;<strong>10<sup>9</sup>&nbsp;+ 7.</strong></span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity :&nbsp;</strong>O(N * K) where N is length of string and K is constant.<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(N * K)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:&nbsp;</strong><br />\r\n1 &lt;= Length od string &lt;= 10000&nbsp;</span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S, determine the number of ways to form the subsequence \"GEEKS\" from S. Return the count modulo 10^9 + 7.",
                "constraints": [
                    "1 <= Length of string S <= 10000"
                ],
                "testcases": [
                    {
                        "input": "GEEKS",
                        "output": "1",
                        "explanation": "The string \"GEEKS\" occurs in S only once."
                    },
                    {
                        "input": "AGEEKKSB",
                        "output": "2",
                        "explanation": "The subsequence \"GEEKS\" occurs in S two times. One way is to use the first 'K', and the other way is to use the second 'K'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of&nbsp;dynamic programming approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n\tpublic:\n\t//Function to find total number of ways to form the string \"GEEKS\" from a given string.\n\tint TotalWays(string str){\n\t\tint m = str.size();\n\t\tstring b = \"GEEKS\";\n\t\tint n = b.size();\n\t\tlong long int dp[n+1][m+1];\n\t\tlong long int MOD = 1000000007;\n\t\t\n\t\t//Initializing the first column of dp array to 0.\n\t\tfor(int i = 1; i <= n; ++i){\n\t\t\tdp[i][0] = 0;\n\t\t}\n\t\t\n\t\t//Initializing the first row of dp array to 1.\n\t\tfor(int i = 0; i <= m; ++i){\n\t\t\tdp[0][i] = 1;\n\t\t}\n\t\t\n\t\t//Iterating over the dp array and filling in the counts of forming \"GEEKS\".\n\t\tfor(int i = 1; i <= n; ++i){\n\t\t\tfor(int j = 1; j <= m; ++j){\n\t\t\t\t\n\t\t\t\t//If the current characters match, we add the counts of forming \"GEEKS\" from the previous substring \n\t\t\t\t//and the counts of forming \"GEEKS\" from the substring without the current character.\n\t\t\t\tif(b[i-1] == str[j-1]){\n\t\t\t\t\tdp[i][j] = (dp[i-1][j-1] + dp[i][j-1])%MOD;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Else, we simply carry forward the counts from the previous substring.\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = dp[i][j-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Returning the total number of ways to form \"GEEKS\" from the given string.\n\t\treturn (int)dp[n][m];\n\t}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}