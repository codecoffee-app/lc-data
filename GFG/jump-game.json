{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706104,
            "title": "Jump Game",
            "titleSlug": "jump-game",
            "content": "<p><span >Given a array of positive integers <strong>arr</strong>, where each element denotes the maximum length of jump you can cover. Find out if you can make it to the last index starting from the first index of the list, return true if you can reach the last index.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr<strong> = </strong>[1, 2, 0, 3, 0, 0] \n<strong>Output: </strong>true\n<strong>Explanation: </strong>Jump 1 step from first index to second index. Then jump 2 steps to reach 4<sub>th </sub>index, and now jump 2 steps to reach the end.\n</span></pre>\n<pre><span ><strong>Input:</strong> arr<strong> </strong><strong>= </strong>[1, 0, 2]\n<strong>Output: </strong>false\n<strong>Explanation: </strong>You can't reach the end of the array.\n</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />0 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">This problem can be solved in O(n) time using a Greedy approach.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "google",
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to check if we can reach the last index from 0th index.\n    bool canReach(vector<int> &arr) {\n        int n = arr.size();\n\n        // Initializing the current index to the last index.\n        int cur = n - 1;\n\n        // iterating from last index to 0th index.\n        for (int i = n - 1; i >= 0; i--) {\n            // checking if we can reach the current index from the ith index.\n            if (i + arr[i] >= cur)\n                cur = i; // updating the current index if true.\n        }\n\n        // returning 1 if we can reach the last index from 0th index,\n        // otherwise returning 0.\n        if (cur)\n            return 0;\n        else\n            return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to check if we can reach the last index from the 0th index.\n    public boolean canReach(int[] arr) {\n        int n = arr.length;\n\n        // Initializing the current index to the last index.\n        int cur = n - 1;\n\n        // Iterating from the last index to the 0th index.\n        for (int i = n - 1; i >= 0; i--) {\n            // Checking if we can reach the current index from the ith index.\n            if (i + arr[i] >= cur) {\n                cur = i; // Updating the current index if true.\n            }\n        }\n\n        // Returning 1 if we can reach the last index from 0th index,\n        // otherwise returning 0.\n        return cur == 0 ? true : false;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to check if we can reach the last index from the 0th index.\n    def canReach(self, arr):\n        n = len(arr)\n        # Initializing the current index to the last index.\n        cur = n - 1\n\n        # Iterating from the last index to the 0th index.\n        for i in range(n - 1, -1, -1):\n            # Checking if we can reach the current index from the ith index.\n            if i + arr[i] >= cur:\n                cur = i  # Updating the current index if true.\n\n        # Returning 1 if we can reach the last index from 0th index,\n        # otherwise returning 0.\n        return 1 if cur == 0 else 0",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    // Function to check if we can reach the last index from the 0th index.\n    canReach(arr) {\n        let n = arr.length;\n        let cur = n - 1;\n\n        // Iterating from the last index to the 0th index.\n        for (let i = n - 1; i >= 0; i--) {\n            if (i + arr[i] >= cur) {\n                cur = i; // Updating the current index if true.\n            }\n        }\n\n        // Returning 1 if we can reach the last index from 0th index,\n        // otherwise returning 0.\n        return cur === 0 ? 1 : 0;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}