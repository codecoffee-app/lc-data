{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703054,
            "title": "Jumping Caterpillars",
            "titleSlug": "jumping-caterpillars4412",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>n</strong> leaves numbered from <strong>1 </strong>to<strong> n.</strong>&nbsp;A caterpillar at leaf <strong>1</strong>. The array contains the jump power of the caterpillar.&nbsp; The caterpillar&nbsp;jumps from leaf to leaf in multiples of arr[j], <sub>&nbsp;</sub>j is specific to the caterpillar. Whenever a caterpillar reaches a leaf, it eats it a little bit. You have to find out how many leaves are left uneaten after all caterpillars have reached the end. Each caterpillar has its own jump factor denoted by arr[j], and each caterpillar starts at leaf number 1. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 3, 5], n = 10 \n<strong>Output:</strong> 2\n<strong>Explanation</strong>: The leaves eaten by the first caterpillar are (2, 4, 6, 8, 10). The leaves eaten by the second caterpilllar are (3, 6, 9). The leaves eaten by the third caterpilllar are (5, 10). Ultimately, the uneaten leaves are 1, 7 and their number is 2.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2], n = 5 \n<strong>Output:</strong> 3</span><br /><span ><strong>Explanation:</strong> The leave eaten are (2,4). The leaves (1,3,5) are uneaten.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>3</sup><sup><br /></sup>1 &le; arr[i] &le; 10<sup>4</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A caterpillar starts at leaf 1 and moves along n leaves numbered from 1 to n. You are given an array 'arr' representing the jump powers of different caterpillars. Each caterpillar jumps from leaf to leaf in multiples of its jump power (arr[i]). When a caterpillar lands on a leaf, it eats it. Determine the number of leaves that remain uneaten after all caterpillars have moved.",
                "constraints": [
                    "1 <= arr.size() <= 1000",
                    "1 <= arr[i] <= 10000"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [2, 3, 5], n = 10",
                        "output": "2",
                        "explanation": "Caterpillar 1 eats leaves 2, 4, 6, 8, and 10. Caterpillar 2 eats leaves 3, 6, and 9. Caterpillar 3 eats leaves 5 and 10. The uneaten leaves are 1 and 7, resulting in a count of 2."
                    },
                    {
                        "input": "arr[] = [2], n = 5",
                        "output": "3",
                        "explanation": "Caterpillar 1 eats leaves 2 and 4. The uneaten leaves are 1, 3, and 5, resulting in a count of 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >For each jumping factor mark the leaves that are visited and at last print the number of uneaten leaves</span></p>",
            "<p>Store all leaves numbered from 1 to n.<br />Start traversing the jumping factors list of caterpillars and check which leaves are eatable for that particular factor if so then remove those leaves from the list.<br />Do this for all jumping factors and compute the remaining leaves uneaten.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "myntra"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int uneatenLeaves(vector<int>& arr, int n) {\n        int sz = arr.size();\n        vector<int> visited(n + 1, 0);\n        for (int i = 0; i < sz; i++) {\n            for (int j = arr[i]; j <= n; j += arr[i]) {\n                // traversing the multiples and marking visited.\n                visited[j] = 1;\n            }\n        }\n        int c = 0;\n        for (int i = 1; i <= n; i++) {\n            // counting unvisited leaves\n            if (visited[i] == 0) {\n                c++;\n            }\n        }\n        return c;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "import java.util.*;\n\nclass Solution {\n    public int uneatenLeaves(int[] arr, int n) {\n        int sz = arr.length;\n        boolean[] visited = new boolean[n + 1];\n\n        for (int i = 0; i < sz; i++) {\n            for (int j = arr[i]; j <= n; j += arr[i]) {\n                // Traversing the multiples and marking visited.\n                visited[j] = true;\n            }\n        }\n\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            // Counting unvisited leaves\n            if (!visited[i]) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def uneatenLeaves(self, arr, n):\n        visited = [False] * (n + 1)\n\n        for i in range(len(arr)):\n            for j in range(arr[i], n + 1, arr[i]):\n                # Traversing the multiples and marking visited.\n                visited[j] = True\n\n        count = 0\n        for i in range(1, n + 1):\n            # Counting unvisited leaves\n            if not visited[i]:\n                count += 1\n\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    uneatenLeaves(arr, n) {\n        let visited = new Array(n + 1).fill(false);\n\n        for (let i = 0; i < arr.length; i++) {\n            for (let j = arr[i]; j <= n; j += arr[i]) {\n                // Traversing the multiples and marking visited.\n                visited[j] = true;\n            }\n        }\n\n        let count = 0;\n        for (let i = 1; i <= n; i++) {\n            // Counting unvisited leaves\n            if (!visited[i]) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}