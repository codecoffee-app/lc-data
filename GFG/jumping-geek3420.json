{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704180,
            "title": "Jumping Geek",
            "titleSlug": "jumping-geek3420",
            "content": "<p><span style=\"font-size:18px\">Once there was a Geek he was quite intelligent and was also fond of jumping. But he jumped in a pattern like 1 leap, 2 leap, 3 leap and again from the start after 3rd leap.<br />\r\n1 leap means if Geek is at point P then he will jump to P+1.<br />\r\n2 leap means if Geek is at point P then he will jump to P+2.<br />\r\n3 leap means if Geek is at point P then he will jump to P+3.<br />\r\nFind whether he could land up to a point <strong>N</strong> or not.</span><br />\r\n<span style=\"font-size:18px\"><strong>Note-</strong> He starts from point 0.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span><span style=\"font-size:18px\"> </span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span><strong> </strong><span style=\"font-size:18px\"><strong>N = </strong>0</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span> <span style=\"font-size:18px\">yes</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">Geek is already at Position 0.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span><span style=\"font-size:18px\"> </span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span><strong> </strong><span style=\"font-size:18px\"><strong>N = </strong>1</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span> <span style=\"font-size:18px\">yes</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">Geek will land at Position 1\r\nafter the 1st jump.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 3:</strong></span><span style=\"font-size:18px\"> </span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span><strong> </strong><span style=\"font-size:18px\"><strong>N = </strong>8</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span> <span style=\"font-size:18px\">no</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">Geek can&#39;t land at Position 8.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>jumpingGeek()</strong> which takes an Integer <strong>N</strong> as input and returns <strong>&quot;yes&quot;</strong> if geek can reach <strong>N</strong>, otherwise return <strong>&quot;no&quot;</strong>.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">0 &lt;= N &lt;= 10<sup>8</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A geek starts at position 0 and jumps according to a pattern: 1 leap, 2 leap, 3 leap, and then repeats (1, 2, 3, 1, 2, 3...). A 1 leap moves the geek from position P to P+1, a 2 leap moves them to P+2, and a 3 leap moves them to P+3. Determine if the geek can reach a target position N.",
                "constraints": [
                    "0 <= N <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "0",
                        "output": "yes",
                        "explanation": "The geek starts at position 0, so if N is 0, they are already there."
                    },
                    {
                        "input": "1",
                        "output": "yes",
                        "explanation": "The geek can reach position 1 with the first jump (a 1 leap)."
                    },
                    {
                        "input": "8",
                        "output": "no",
                        "explanation": "The sequence of jumps will be: 1, 2, 3, 1, 2, 3, ...  The positions reached are: 1, 3, 6, 7, 9, 12, ...  Position 8 is not reachable."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Geek lands at a position which is a multiple of 6 after every 3 jumps.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\nclass Solution {\r\n  public:\r\n    string jumpingGeek(int N) {\r\n        int r = N%6;\r\n        \r\n        if(r==0 || r==1 || r==3)\r\n            return \"yes\";\r\n        else\r\n            return \"no\";\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to determine if the number N is a \"jumping geek\"\n    // A number is considered a \"jumping geek\" if it leaves a remainder of 0, 1, or 3 when divided by 6\n    static String jumpingGeek(int N) {\n        // Calculate the remainder of N divided by 6\n        int r = N%6;\n        \n        // Check if the remainder is 0, 1, or 3\n        // Return \"yes\" if true, \"no\" otherwise\n        if(r==0 || r==1 || r==3)\n            return \"yes\";\n        else\n            return \"no\";\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def jumpingGeek(self, N):\r\n        \r\n        #Find the remainder of N divided by 6.\r\n        r = N%6\r\n        \r\n        #Check if the remainder is 0, 1, or 3\r\n        #If yes, return \"yes\"\r\n        if(r==0 or r==1 or r==3):\r\n            return \"yes\"\r\n        #If no, return \"no\"\r\n        else:\r\n            return \"no\"",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} N\r\n * @returns {string}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to find the Kth smallest number in the given array.\r\n    jumpingGeek(N)\r\n    {\r\n        //Find the remainder of N divided by 6.\r\n        let r = N % 6;\r\n\r\n        //Check if the remainder is 0, 1, or 3\r\n        //If yes, return \"yes\"\r\n        if(r == 0 || r == 1 || r == 3){\r\n            return \"yes\";\r\n        }\r\n        //If no, return \"no\"\r\n        else{\r\n            return \"no\";\r\n        }\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find if there is a path from source to destination\n    public string jumpingGeek(int N)\n    {\n        int r = N % 6;\n\n        if (r == 0 || r == 1 || r == 3)\n            return \"yes\";\n        else\n            return \"no\";\n    }\n\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}