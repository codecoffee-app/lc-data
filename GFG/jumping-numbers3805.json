{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705076,
            "title": "Jumping Numbers",
            "titleSlug": "jumping-numbers3805",
            "content": "<p><span style=\"font-size: 18px;\">Given a positive number, <strong>n</strong>. Find the largest Jumping Number with equal number of digits that is smaller than or equal to x.&nbsp;<br /><strong>Jumping Number: </strong>A number is called a Jumping Number if all adjacent digits in it differ by only 1. All single-digit numbers are considered as Jumping Numbers. <br />For example, <strong>7</strong>, <strong>898, 7</strong> and <strong>4343456</strong> are Jumping numbers but <strong>796, 677,</strong>&nbsp;and <strong>89098</strong> are not.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\"><strong>n = </strong>10</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">10</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">10 is the largest Jumping Number possible for x = 10.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\"><strong>n = </strong>50</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">45</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">45 is the largest Jumping Number possible for X = 50.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, find the largest Jumping Number that is less than or equal to `n` and has the same number of digits as `n`. A Jumping Number is defined as a number where the absolute difference between adjacent digits is exactly 1. All single-digit numbers are also considered Jumping Numbers.",
                "constraints": [
                    "1 <= n <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "10",
                        "explanation": "10 is a Jumping Number and is the largest Jumping Number less than or equal to 10."
                    },
                    {
                        "input": "50",
                        "output": "45",
                        "explanation": "45 is a Jumping Number and is the largest Jumping Number less than or equal to 50."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to generate all the Jumping numbers and be careful about the overflow of integers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // Generate all jumping numbers smaller than or equal to x starting\n    // with 'num'. It mainly does BFS starting from 'num'.\n    void bfs(long long n, long long num, long long &ans) {\n\n        // Create a queue and enqueue 'num' to it\n        queue<long long> q;\n        q.push(num);\n\n        // Do BFS starting from num\n        while (!q.empty()) {\n            num = q.front();\n            q.pop();\n\n            if (num <= n) {\n                // update the answer\n                ans = max(ans, num);\n\n                int last_dig = num % 10;\n\n                // If last digit is 9, dont append next digit\n                if (last_dig != 9)\n                    q.push((num * 10) + (last_dig + 1));\n\n                // If last digit is 0, dont append previous digit\n                if (last_dig != 0)\n                    q.push((num * 10) + (last_dig - 1));\n            }\n        }\n    }\n\n    long long jumpingNums(long long n) {\n\n        long long ans = 0;\n\n        for (int i = 1; i <= 9 && i <= n; i++)\n            bfs(n, i, ans);\n\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static long ans;\n\n    static long jumpingNums(long n) {\n        // code here\n        ans = 0;\n\n        for (int i = 1; i <= 9 && i <= n; i++) bfs(n, i);\n\n        return ans;\n    }\n\n    static void bfs(long n, long num) {\n        Queue<Long> q = new LinkedList<>();\n        q.add(num);\n        while (!q.isEmpty()) {\n            num = q.poll();\n\n            if (num <= n) {\n                ans = Math.max(ans, num);\n\n                long last_dig = (num % 10);\n\n                // If last digit is 9, dont append next digit\n                if (last_dig != 9) q.add((num * 10) + (last_dig + 1));\n\n                // If last digit is 0, dont append previous digit\n                if (last_dig != 0) q.add((num * 10) + (last_dig - 1));\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from collections import deque\n\n\nclass Solution:\n\n    def bfs(self, n, num):\n        q = deque()\n        q.append(num)\n\n        #performing BFS traversal\n        while q:\n            num = q.popleft()\n\n            #if the number is less than or equal to n,\n            #update the maximum jumping number\n            if num <= n:\n                self.ans = max(self.ans, num)\n\n                #get the last digit of the current number\n                last_dig = num % 10\n\n                #append relevant numbers to the queue\n                if last_dig != 9:\n                    q.append((num * 10) + (last_dig + 1))\n                if last_dig != 0:\n                    q.append((num * 10) + (last_dig - 1))\n\n    def jumpingNums(self, n):\n        self.ans = 0\n        for i in range(1, 10):\n            if i <= n:\n                self.bfs(n, i)\n\n        #return the maximum jumping number\n        return self.ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    jumpingNums(n) {\n        const queue = [];\n        const ans = [];\n\n        // Start from single digit numbers\n        for (let i = 1; i <= 9; i++) {\n            queue.push(i);\n        }\n\n        // Perform BFS traversal\n        while (queue.length > 0) {\n            const num = queue.shift();\n            if (num > n) {\n                break;\n            }\n\n            ans.push(num);\n\n            const lastDigit = num % 10;\n\n            // Generate next possible jumping numbers\n            if (lastDigit > 0) {\n                queue.push(num * 10 + (lastDigit - 1));\n            }\n            if (lastDigit < 9) {\n                queue.push(num * 10 + (lastDigit + 1));\n            }\n        }\n\n        // Return the maximum jumping number\n        return Math.max(...ans).toString();\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}