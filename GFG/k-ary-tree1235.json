{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705613,
            "title": "K-Ary Tree",
            "titleSlug": "k-ary-tree1235",
            "content": "<p><span style=\"font-size:18px\">Find the number of leaf nodes in a full <strong>k</strong>-ary tree of height <strong>m</strong>.<br />\n<strong>Note:</strong> You have to return the answer module 10<sup>9</sup>+7.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>k = </strong>2, <strong>m = </strong>2</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">4</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">A full Binary tree of height 2 has 4 leaf nodes.</span> </pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>k = </strong>2, <strong>m = </strong>1</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">2</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">A full Binary tree of height 1 has 2 leaf nodes.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>karyTree()</strong> which takes 2 Integers k, and m as input and returns the number of leaf nodes in a full k-ary Tree.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log(m))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= k,m &lt;= 10<sup>8</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a full k-ary tree of height m, find the number of leaf nodes. Return the answer modulo 10^9 + 7.",
                "constraints": [
                    "1 <= k, m <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "k = 2, m = 2",
                        "output": "4",
                        "explanation": "A full binary tree (k=2) of height 2 has 4 leaf nodes.  The root has two children, each of which have two children, resulting in 2 * 2 = 4 leaves."
                    },
                    {
                        "input": "k = 2, m = 1",
                        "output": "2",
                        "explanation": "A full binary tree (k=2) of height 1 has 2 leaf nodes.  The root has two children, both of which are leaves."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Every node except the leaf nodes have exactly k child nodes in a full k-ary tree.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n  \n    long long power(long long x, long long y, long long p = 1000000007)  \n    {  \n        long long res = 1;     // Initialize result  \n      \n        x = x % p; // Update x if it is more than or  \n                    // equal to p \n       \n        if (x == 0) return 0; // In case x is divisible by p; \n      \n        while (y > 0)  \n        {  \n            // If y is odd, multiply x with result  \n            if (y & 1)  \n                res = (res*x) % p;  \n      \n            // y must be even now  \n            y = y>>1; // y = y/2  \n            x = (x*x) % p;  \n        }  \n        return res;  \n    }  \n    \n    long long karyTree(int k, int m) {\n        \n        long long ans = power((long long)k, (long long)m);\n        \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    # Function to calculate the k-ary tree\n    def karyTree(self, k, m):\n        \n        # Calculate the answer using the pow function with modulo\n        ans = pow(k,m,1000000007)\n        \n        # Return the answer\n        return ans;",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long karyTree(int k, int m)\n    {\n        long p = 1000000007;\n        long res = 1;\n        \n        long x = k % p;\n        \n        if (x == 0) return 0;\n        \n        while (m > 0)  \n        {  \n            if ((m & 1) != 0)  // Use bitwise AND operator\n                res = (res*x) % p;  \n      \n            m = m>>1;\n            x = (x*x) % p;  \n        }  \n        \n        long ans = res;\n        \n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}