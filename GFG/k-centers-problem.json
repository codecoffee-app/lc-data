{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710359,
            "title": "K Centers Problem",
            "titleSlug": "k-centers-problem",
            "content": "<h4><span style=\"font-size:18px\">You have given N cities numbered from 0 to N-1. The distance between each pair of cities is given by N * N matrix MAT where MAT[i][j] denotes the distance between city i and j.</span></h4>\r\n\r\n<h4><span style=\"font-size:18px\">The task is to&nbsp;select K (K&lt;= N) ATM servers&nbsp; in such a way that the maximum distance of a city from the ATM Server is minimized.</span></h4>\r\n\r\n<h4><span style=\"font-size:18px\"><strong>Example 1:</strong></span></h4>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 4, K = 2,\r\nMAT[][] = {{0, 10, 7, 6},\r\n\\t     {10, 0, 8, 5},\r\n\\t     {7, 8, 0, 12},\r\n\\t     {6, 5, 12, 0}}\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:</strong><code>\r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/kcenters11-1649711037.png\" style=\"height:250px; width:500px\" /></code></span>\r\n\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function <strong>selectKcities() </strong>which takes N, K&nbsp; and MAT[][] as input parameter and returns an integer, indicating the maximum distance of a city from the ATM Server, which is minimized.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N * K * (2 ^ N))<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(K)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= K &lt;= N &lt;= 15<br />\r\n1 &lt;= MAT[i][j] &lt;= 10^9</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given `N` cities numbered from 0 to `N-1`. The distance between each pair of cities is provided in an `N x N` matrix `MAT`, where `MAT[i][j]` represents the distance between city `i` and city `j`.\n\nThe task is to select `K` (where `K <= N`) ATM server locations such that the maximum distance of any city to its nearest ATM server is minimized.  In other words, you want to find the optimal placement of `K` ATM servers to minimize the largest distance any city has to travel to reach an ATM server.",
                "constraints": [
                    "1 <= K <= N <= 15",
                    "1 <= MAT[i][j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 4, K = 2,\nMAT[][] = {{0, 10, 7, 6},\n             {10, 0, 8, 5},\n             {7, 8, 0, 12},\n             {6, 5, 12, 0}}",
                        "output": "6",
                        "explanation": "In this example, placing ATM servers at cities 0 and 3 results in the maximum distance of a city from an ATM server being 6.  City 0 has a distance of 0 to the nearest ATM (itself). City 1 has a distance of 5 to the nearest ATM (city 3). City 2 has a distance of 6 to the nearest ATM (city 0). City 3 has a distance of 0 to the nearest ATM (itself).  The maximum of these distances is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">This is a typical NP-Hard Problem. So to solve this probelm, One have to consider all the possible arrangement and calculate the maximum distance and retun the minimum out of those distances.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n  public:\r\n  void kCenterHelper(int k, int n, int &result, vector<int> &selected, vector<vector<int>> &mat)\r\n    {\r\n        if (k == 0)\r\n        {\r\n            // Find maximum distance of city from server.\r\n            int maxDist = 0;\r\n            for (int i = 0; i < n; i++)\r\n            {\r\n                int minDistServer = INT_MAX;\r\n                for (int j = 0; j < selected.size(); j++)\r\n                {\r\n                    minDistServer = min(minDistServer, mat[i][selected[j]]);\r\n                }\r\n                maxDist = max(maxDist, minDistServer);\r\n            }\r\n            result = min(result, maxDist);\r\n        }\r\n        else\r\n        {\r\n            int prev = (selected.size() > 0) ? selected.back() : -1;\r\n            for (int i = prev + 1; i < n; i++)\r\n            {\r\n                selected.push_back(i);\r\n                \r\n                // Recursively find ways of selecting remaining cities.\r\n                kCenterHelper(k - 1, n, result, selected, mat);\r\n                \r\n                // Backtrack to explore possible way of selection without city 'i'.\r\n                selected.pop_back();\r\n            }\r\n        }\r\n    }\r\n    \r\n    int selectKcities(int n, int k, vector<vector<int>> &mat)\r\n    {\r\n        vector<int> selected;\r\n        int result = INT_MAX;\r\n       \r\n        // Recursively try all possible way of selecting 'K' cities.\r\n        kCenterHelper(k, n, result, selected, mat);\r\n        \r\n        return result;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}