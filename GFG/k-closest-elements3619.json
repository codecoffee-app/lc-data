{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703315,
            "title": "K closest elements",
            "titleSlug": "k-closest-elements3619",
            "content": "<p><span style=\"font-size: 18px;\">Given a sorted array of unique elements in increasing order, <strong>arr</strong>[] of <strong>n</strong> integers, and a value <strong>x</strong>. Find the K closest elements to <strong>x</strong> in <strong>arr</strong>[].<br />Keep the following points in mind:</span></p>\n<ol>\n<li><span style=\"font-size: 18px;\">If&nbsp;<strong>x</strong>&nbsp;is present in the array, then it need not be considered. </span></li>\n<li><span style=\"font-size: 18px;\">If two elements have the same difference as <strong>x</strong>, the greater element is prioritized. </span></li>\n<li><span style=\"font-size: 18px;\">If sufficient elements are not present on the right side, take elements from the left and vice versa.</span><br />&nbsp;</li>\n</ol>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 13\narr[] = {12, 16, 22, 30, 35, 39, 42, \n\\t   45, 48, 50, 53, 55, 56}\nk = 4, x = 35\n<strong>Output:</strong> 39 30 42 45\n<strong>Explanation:</strong> \nFirst closest element to 35 is 39.\nSecond closest element to 35 is 30.\nThird closest element to 35 is 42.\nAnd fourth closest element to 35 is 45.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 5\narr[] = {1, 2, 3, 6, 10}\nk = 3, x = 4\n<strong>Output:</strong> 3 6 2\n<strong>Explanation:</strong>&nbsp;\nFirst closest element is 3.\nThere are two elements 2 and 6 for which \nthe difference with 4 is same i.e. 2.\nSo first take greatest number 6 \nthen the lower number 2.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Complete the function&nbsp;<strong>printKClosest()</strong>&nbsp;which takes <strong>arr[]</strong>, <strong>n</strong>, <strong>k,</strong> and <strong>x</strong><strong>&nbsp;</strong>as input parameters and returns an array of integers containing the K closest elements to&nbsp;</span><strong style=\"font-size: 18px;\">x</strong><span style=\"font-size: 18px;\">&nbsp;in <strong>arr</strong>[].</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(log n + k)<br /><strong>Expected Auxiliary Space:</strong> O(k)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>5</sup><br />1 &le; k &le; n<br />1 &le; x &le; 10<sup>6</sup></span><br /><span style=\"font-size: 18px;\">1 &le; arr[i] &le; 10</span><sup>6</sup></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr` of `n` unique integers in increasing order, and a value `x`, find the `k` closest elements to `x` in `arr`. Consider the following rules:\n\n1.  If `x` is present in the array, it should not be included in the result.\n2.  If two elements have the same absolute difference from `x`, prioritize the larger element.\n3.  If there are not enough elements on one side of `x`, include elements from the other side.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= k <= n",
                    "1 <= x <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 13\narr[] = {12, 16, 22, 30, 35, 39, 42, 45, 48, 50, 53, 55, 56}\nk = 4, x = 35",
                        "output": "39 30 42 45",
                        "explanation": "The four closest elements to 35 are 39, 30, 42, and 45, in that order based on proximity and the tie-breaking rule."
                    },
                    {
                        "input": "n = 5\narr[] = {1, 2, 3, 6, 10}\nk = 3, x = 4",
                        "output": "3 6 2",
                        "explanation": "The three closest elements to 4 are 3, 6, and 2. 3 is closest. Both 6 and 2 have same difference with 4, so 6 is picked as per question."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use binary search to look for crossover point ie -The point before which elements are smaller than or equal to x and after which elements are greater than x. Then compare elements on both sides of the crossover point to print k closest elements.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "priority-queue",
                "slug": "priority-queue"
            }
        ],
        "companies": [
            "amazon",
            "oyo-rooms"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> printKClosest(vector<int> arr, int n, int k, int x) {\n        vector<int> result;\n        vector<int> closest;\n\n        // Function to find the index where the array changes from values smaller to\n        // values greater than x\n        int l = findCrossOver(arr, 0, n - 1, x);\n\n        int r = l + 1; // Set r as the next index\n        int count = 0; // Counter for the number of closest values found\n\n        if (arr[l] == x) { // If the value at l is equal to x, move l to the left\n            l--;\n        }\n\n        // Compare the values at index l and r and select the closest value until k\n        // closest values are found\n        while (l >= 0 && r < n && count < k) {\n            if (x - arr[l] < arr[r] - x) {\n                closest.push_back(arr[l]);\n                l--;\n            } else {\n                closest.push_back(arr[r]);\n                r++;\n            }\n            count++;\n        }\n\n        // If k closest values are not found but there are still values to the left of l\n        while (count < k && l >= 0) {\n            closest.push_back(arr[l]);\n            l--;\n            count++;\n        }\n\n        // If k closest values are not found but there are still values to the right of\n        // r\n        while (count < k && r < n) {\n            closest.push_back(arr[r]);\n            r++;\n            count++;\n        }\n\n        // Copy closest values to result vector\n        for (int i = 0; i < k; i++) {\n            result.push_back(closest[i]);\n        }\n\n        return result;\n    }\n\n  private:\n    // Function to find the index where array changes from values smaller to values\n    // greater than x\n    int findCrossOver(vector<int>& arr, int low, int high, int x) {\n        if (arr[high] <= x) {\n            return high;\n        }\n        if (arr[low] > x) {\n            return low;\n        }\n        int mid = (low + high) / 2;\n        if (arr[mid] <= x && arr[mid + 1] > x) {\n            return mid;\n        } else if (arr[mid] < x) {\n            return findCrossOver(arr, mid + 1, high, x);\n        }\n        return findCrossOver(arr, low, mid - 1, x);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    private int findCrossOver(int[] arr, int low, int high, int x) {\n        if (arr[high] <= x) {\n            return high;\n        }\n        if (arr[low] > x) {\n            return low;\n        }\n        int mid = (low + high) / 2;\n        if (arr[mid] <= x && arr[mid + 1] > x) {\n            return mid;\n        } else if (arr[mid] < x) {\n            return findCrossOver(arr, mid + 1, high, x);\n        }\n        return findCrossOver(arr, low, mid - 1, x);\n    }\n\n    int[] printKClosest(int[] arr, int n, int k, int x) {\n        // code here\n        int[] result = new int[k];\n        List<Integer> closest = new ArrayList<>();\n\n        // Function to find the index where the array changes from values smaller to\n        // values greater than x\n        int l = findCrossOver(arr, 0, n - 1, x);\n\n        int r = l + 1; // Set r as the next index\n        int count = 0; // Counter for the number of closest values found\n\n        if (arr[l] == x) { // If the value at l is equal to x, move l to the left\n            l--;\n        }\n\n        // Compare the values at index l and r and select the closest value until k\n        // closest values are found\n        while (l >= 0 && r < n && count < k) {\n            if (x - arr[l] < arr[r] - x) {\n                closest.add(arr[l]);\n                l--;\n            } else {\n                closest.add(arr[r]);\n                r++;\n            }\n            count++;\n        }\n\n        // If k closest values are not found but there are still values to the left of l\n        while (count < k && l >= 0) {\n            closest.add(arr[l]);\n            l--;\n            count++;\n        }\n\n        // If k closest values are not found but there are still values to the right of\n        // r\n        while (count < k && r < n) {\n            closest.add(arr[r]);\n            r++;\n            count++;\n        }\n\n        // Convert List<Integer> to int[]\n        for (int i = 0; i < k; i++) {\n            result[i] = closest.get(i);\n        }\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def printKClosest(self, arr, n, k, x):\r\n        \r\n        # Function to find the index where the array changes from values smaller to values greater than x\r\n        def findCrossOver(arr, low, high, x):\r\n            if arr[high] <= x:\r\n                return high\r\n            if arr[low] > x:\r\n                return low\r\n            mid = (low + high) // 2\r\n            if arr[mid] <= x and arr[mid + 1] > x:\r\n                return mid\r\n            elif arr[mid] < x:\r\n                return findCrossOver(arr, mid + 1, high, x)\r\n            return findCrossOver(arr, low, mid - 1, x)\r\n        \r\n        l = findCrossOver(arr, 0, n - 1, x) # Find the index where array changes from values smaller to values greater than x\r\n        r = l + 1 # Set r as the next index\r\n        count = 0 # Counter for the number of closest values found\r\n        \r\n        if arr[l] == x: # If the value at l is equal to x, move l to the left\r\n            l -= 1\r\n        \r\n        closest = []\r\n        # Compare the values at index l and r and select the closest value until k closest values are found\r\n        while l >= 0 and r < n and count < k:\r\n            if (x - arr[l] < arr[r] - x):\r\n                closest.append(arr[l])\r\n                l -= 1\r\n            else:\r\n                closest.append(arr[r])\r\n                r += 1\r\n            count += 1\r\n        \r\n        # If k closest values are not found but there are still values to the left of l\r\n        while (count < k and l >= 0):\r\n            closest.append(arr[l])\r\n            l -= 1\r\n            count += 1\r\n        # If k closest values are not found but there are still values to the right of r\r\n        while (count < k and r < n):\r\n            closest.append(arr[r])\r\n            r += 1\r\n            count += 1\r\n        return closest",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the cross over point the point\n    // before which elements are smaller than or equal\n    // to x and after which greater than x\n    findCrossOver(arr, low, high, x) {\n        // Base cases\n        if (arr[high] <= x) return high;\n        if (arr[low] > x) return low;\n\n        // Find the middle point\n        let mid = Math.floor((low + high) / 2);\n\n        if (arr[mid] <= x && arr[mid + 1] > x)\n            return mid;\n        else if (arr[mid] < x)\n            return this.findCrossOver(arr, mid + 1, high, x);\n        else\n            return this.findCrossOver(arr, low, mid - 1, x);\n    }\n\n    printKClosest(arr, n, k, x) {\n        let l = this.findCrossOver(arr, 0, n - 1, x); // Find the crossover point\n        let r = l + 1;                                // Right index to search\n        let count = 0; // To keep track of count of elements already printed\n\n        // If x is present in arr[], then reduce left index\n        if (arr[l] == x) l--;\n\n        let closest = [];\n        // Compare elements on left and right of crossover\n        // point to find the k closest elements\n        while (l >= 0 && r < n && count < k) {\n            if (x - arr[l] < arr[r] - x)\n                closest.push(arr[l--]);\n            else\n                closest.push(arr[r++]);\n            count++;\n        }\n\n        // If there are no more elements on right side,\n        // then print left elements\n        while (count < k && l >= 0) {\n            closest.push(arr[l--]);\n            count++;\n        }\n\n        // If there are no more elements on left side\n        // print right elements\n        while (count < k && r < n) {\n            closest.push(arr[r++]);\n            count++;\n        }\n        return closest;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}