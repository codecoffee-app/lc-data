{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 885661,
            "title": "K Closest Points to Origin",
            "titleSlug": "k-closest-points-to-origin--172242",
            "content": "<p><span >Given an array of points where each point is represented as <strong>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</strong> on the X-Y plane and an integer <strong>k</strong>, return the k closest points to the origin (0, 0).</span></p>\n<p><span >The distance between two points on the X-Y plane is the Euclidean distance, defined as:&nbsp;</span></p>\n<p style=\"text-align: center;\"><span ><strong>sqrt( (x<sub>2</sub> - x<sub>1</sub>)<sup>2</sup> + (y<sub>2</sub> - y<sub>1</sub>)<sup>2</sup> )</strong></span></p>\n<p><span >Note: You can return the <strong>k</strong> closest points in any order, driver code will sort them before printing.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> k = 2, points[] = [[1, 3], [-2, 2], [5, 8], [0, 1]]</span><br /><span ><strong>Output:</strong> [[-2, 2], [0, 1]]</span><br /><span ><strong>Explanation:</strong> The Euclidean distances from the origin are:</span><br /><span >Point (1, 3) = sqrt(10)</span><br /><span >Point (-2, 2) = sqrt(8)</span><br /><span >Point (5, 8) = sqrt(89)</span><br /><span >Point (0, 1) = sqrt(1)</span><br /><span >The two closest points to the origin are [-2, 2] and [0, 1].</span></pre>\n<pre><span ><strong>Input:</strong> k = 1, points = [[2, 4], [-1, -1], [0, 0]]</span><br /><span ><strong>Output:</strong> [[0, 0]]</span><br /><span ><strong>Explanation: </strong>The Euclidean distances from the origin are:</span><br /><span >Point (2, 4) = sqrt(20)</span><br /><span >Point (-1, -1) = sqrt(2)</span><br /><span >Point (0, 0) = sqrt(0)</span><br /><span >The closest point to origin is (0, 0).</span></pre>\n<p><span ><strong>Constraints:</strong></span></p>\n<ul>\n<li><span >1 &lt;= k &lt;= points.size() &lt;= 10<sup>5</sup></span></li>\n<li><span >-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of points, where each point is represented as `points[i] = [x_i, y_i]` on the X-Y plane, and an integer `k`, return the `k` closest points to the origin (0, 0).  The distance between two points on the X-Y plane is the Euclidean distance, defined as: `sqrt((x_2 - x_1)^2 + (y_2 - y_1)^2)`. You can return the `k` closest points in any order.",
                "constraints": [
                    "1 <= k <= points.size() <= 10^5",
                    "-10^4 <= x_i, y_i <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "k = 2, points = [[1, 3], [-2, 2], [5, 8], [0, 1]]",
                        "output": "[[-2, 2], [0, 1]]",
                        "explanation": "The Euclidean distances from the origin are: Point (1, 3) = sqrt(10), Point (-2, 2) = sqrt(8), Point (5, 8) = sqrt(89), Point (0, 1) = sqrt(1). The two closest points to the origin are [-2, 2] and [0, 1]."
                    },
                    {
                        "input": "k = 1, points = [[2, 4], [-1, -1], [0, 0]]",
                        "output": "[[0, 0]]",
                        "explanation": "The Euclidean distances from the origin are: Point (2, 4) = sqrt(20), Point (-1, -1) = sqrt(2), Point (0, 0) = sqrt(0). The closest point to the origin is (0, 0)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "priority-queue",
                "slug": "priority-queue"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Geometric",
                "slug": "geometric"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    int squaredDistance(vector<int>& point) {\n        return point[0] * point[0] + point[1] * point[1];\n    }\n\n    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {\n        priority_queue<pair<int, int>> maxPQ;\n        for (int i = 0; i < points.size(); i++) {\n            maxPQ.push({squaredDistance(points[i]), i});\n            if (maxPQ.size() > k)\n                maxPQ.pop();\n        }\n        vector<vector<int>> answer(k);\n        for (int i = 0; i < k; i++) {\n            answer[i] = points[maxPQ.top().second];\n            maxPQ.pop();\n        }\n        return answer;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to calculate squared distance from the origin\n    public int squaredDistance(int[] point) {\n        return point[0] * point[0] + point[1] * point[1];\n    }\n\n    // Function to return the k closest points\n    public int[][] kClosest(int[][] points, int k) {\n        // PriorityQueue to store points based on their squared distance (max-heap)\n        PriorityQueue<int[]> maxPQ = new PriorityQueue<>(\n            (a, b) -> Integer.compare(squaredDistance(b), squaredDistance(a)));\n        // Add all points to the priority queue\n        for (int i = 0; i < points.length; i++) {\n            maxPQ.add(points[i]);\n            if (maxPQ.size() > k) {\n                maxPQ.poll(); // Remove the farthest point if the size exceeds k\n            }\n        }\n        // Extract the k closest points\n        int[][] answer = new int[k][2];\n        for (int i = 0; i < k; i++) {\n            answer[i] = maxPQ.poll();\n        }\n\n        return answer;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nimport heapq\n\n\nclass Solution:\n\n    def squared_distance(self, point: List[int]) -> int:\n        return point[0]**2 + point[1]**2\n\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n        max_heap = []\n        for i, point in enumerate(points):\n            distance = -self.squared_distance(point)  # Negate for max heap\n            heapq.heappush(max_heap, (distance, i))\n            if len(max_heap) > k:\n                heapq.heappop(max_heap)\n\n        return [points[i] for (_, i) in max_heap]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass MaxPriorityQueue {\n    constructor() {\n        this.heap = []; // Internal array to store heap elements\n    }\n\n    // Helper function to get the parent index\n    getParentIndex(index) { return Math.floor((index - 1) / 2); }\n\n    // Helper function to get the left child index\n    getLeftChildIndex(index) { return 2 * index + 1; }\n\n    // Helper function to get the right child index\n    getRightChildIndex(index) { return 2 * index + 2; }\n\n    // Function to swap two elements in the heap\n    swap(index1, index2) {\n        [this.heap[index1], this.heap[index2]] =\n            [ this.heap[index2], this.heap[index1] ];\n    }\n\n    // Insert an element with a priority into the queue\n    enqueue(element, priority) {\n        const newNode = {element, priority};\n        this.heap.push(newNode);\n        this.bubbleUp(this.heap.length - 1);\n    }\n\n    // Bubble up the element to maintain the heap property\n    bubbleUp(index) {\n        while (index > 0) {\n            const parentIndex = this.getParentIndex(index);\n            if (this.heap[index].priority <= this.heap[parentIndex].priority) {\n                break;\n            }\n            this.swap(index, parentIndex);\n            index = parentIndex;\n        }\n    }\n\n    // Remove and return the element with the highest priority\n    dequeue() {\n        if (this.heap.length === 1) {\n            return this.heap.pop();\n        }\n        const max = this.heap[0];\n        this.heap[0] = this.heap.pop();\n        this.bubbleDown(0);\n        return max;\n    }\n\n    // Bubble down the element to maintain the heap property\n    bubbleDown(index) {\n        const length = this.heap.length;\n        while (true) {\n            const leftIndex = this.getLeftChildIndex(index);\n            const rightIndex = this.getRightChildIndex(index);\n            let largest = index;\n\n            if (leftIndex < length &&\n                this.heap[leftIndex].priority > this.heap[largest].priority) {\n                largest = leftIndex;\n            }\n\n            if (rightIndex < length &&\n                this.heap[rightIndex].priority > this.heap[largest].priority) {\n                largest = rightIndex;\n            }\n\n            if (largest === index) {\n                break;\n            }\n\n            this.swap(index, largest);\n            index = largest;\n        }\n    }\n\n    // Get the size of the queue\n    size() { return this.heap.length; }\n\n    // Return the elements as an array\n    toArray() { return this.heap.slice(); }\n}\n\nclass Solution {\n    /**\n     * @param {number[][]} points\n     * @param {number} k\n     * @return {number}\n     */\n    // Function to calculate the squared distance of a point from the origin\n    squaredDistance(point) { return point[0] * point[0] + point[1] * point[1]; }\n\n    // Function to find k closest points to the origin\n    kClosest(points, k) {\n        let maxPQ = new MaxPriorityQueue();\n        for (let point of points) {\n            let dist = this.squaredDistance(point); // Use `this` to access the method\n            maxPQ.enqueue(point, dist);\n            if (maxPQ.size() > k) {\n                maxPQ.dequeue();\n            }\n        }\n\n        return maxPQ.toArray().map(entry => entry.element);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}