{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700154,
            "title": "K distance from root",
            "titleSlug": "k-distance-from-root",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree having <strong>n</strong> nodes and an integer <strong>k</strong>. Print all nodes that are at distance k from the root (root is considered at distance 0 from itself). Nodes should be printed from <strong>left to right</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>k = 0\n&nbsp;     1\n&nbsp;   /   \\\n&nbsp;  3     2<strong>\nOutput: </strong>1<br /><strong>Explanation: </strong>1 is the only node which is 0 distance from the root 1.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>k = 3\n&nbsp;\\t 1\n&nbsp;\\t/\n&nbsp;     2\n&nbsp;\\t\\\n&nbsp;\\t 1\n&nbsp;     /  \\\n&nbsp;    5    3<strong>\nOutput: </strong>5 3<br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:  </strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5 and 3 are the nodes which are at distance 3 from the root 3.<br />Here, returning 3 5 will be <strong>incorrect</strong>.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't have to take input. Complete the function&nbsp;<strong>Kdistance()&nbsp;</strong>that accepts&nbsp;<strong>root</strong> node<strong>&nbsp;</strong>and&nbsp;<strong>k&nbsp;</strong>as parameters and returns<strong> </strong>the&nbsp;value<strong>&nbsp;</strong>of the&nbsp;nodes<strong>&nbsp;</strong>that are at a distance k from the root.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>4</sup></span><br /><span style=\"font-size: 18px;\">0 &lt;= k &lt;= 30</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'n' nodes and an integer 'k', find all nodes that are exactly at a distance 'k' from the root node. The root is considered to be at distance 0 from itself. The nodes should be returned in a list, ordered from left to right.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "0 <= k <= 30"
                ],
                "testcases": [
                    {
                        "input": "k = 0\n     1\n   /   \\\n  3     2",
                        "output": "1",
                        "explanation": "The node 1 is at distance 0 from the root node 1."
                    },
                    {
                        "input": "k = 3\n    1\n   /\n  2\n  \\\n   1\n  /  \\\n 5    3",
                        "output": "5 3",
                        "explanation": "The nodes 5 and 3 are at distance 3 from the root node 1. The order is important and the left node (5) should come before the right node (3)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Traverse over tree using BFS/DFS.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "samsung",
            "ola-cabs"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Recursive function to print right view of a binary tree.\n    void KdistanceUtil(Node *root, int k, vector<int> &nodes) {\n        // Base Case\n        if (root == NULL)\n            return;\n        // if current node is at distance k from root, add it to the nodes vector\n        if (k == 0) {\n            nodes.push_back(root->data);\n            return;\n        }\n        // Recur for right subtree first, then left subtree\n        KdistanceUtil(root->left, k - 1, nodes);\n        KdistanceUtil(root->right, k - 1, nodes);\n    }\n\n    // Function to find nodes at distance k from root\n    vector<int> Kdistance(Node *root, int k) {\n        vector<int> nodes;\n        // call the recursive utility function to get the nodes at distance k\n        KdistanceUtil(root, k, nodes);\n        // return the nodes vector\n        return nodes;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n/*\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n    Node(int item)    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n} */\r\n\r\nclass Tree\r\n{\r\n    void KdistanceUtil(Node root,int k,ArrayList<Integer> nodes){\r\n        // Base case: If root is null, return\r\n        if(root == null){\r\n            return;\r\n        }\r\n        // If k is 0, add the data of root to the nodes list\r\n        if(k == 0){\r\n            nodes.add(root.data);\r\n            return;\r\n        }\r\n        // Recursively call KdistanceUtil on left and right child nodes with k-1\r\n        KdistanceUtil(root.left, k-1,nodes);\r\n        KdistanceUtil(root.right, k-1,nodes);\r\n    }\r\n    \r\n    // Recursive function to get nodes at distance k from the root\r\n    ArrayList<Integer> Kdistance(Node root, int k)\r\n    {\r\n        // Create an empty list to store nodes at distance k\r\n        ArrayList<Integer> nodes = new ArrayList<Integer>();\r\n        \r\n        // Call the KdistanceUtil function to populate the nodes list\r\n        KdistanceUtil(root,k,nodes);\r\n        \r\n        // Return the nodes list\r\n        return nodes;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find nodes at K distance from root\n    def KDistanceUtil(self, root, k, nodes):\n        # If root is None, return\n        if root is None:\n            return\n        # If k is 0, add root data to nodes list\n        if k == 0:\n            nodes.append(root.data)\n            return\n        else:\n            # Recursively traverse left subtree with k-1 distance\n            self.KDistanceUtil(root.left, k - 1, nodes)\n            # Recursively traverse right subtree with k-1 distance\n            self.KDistanceUtil(root.right, k - 1, nodes)\n\n    # Function to find nodes at K distance from root\n    def KDistance(self, root, k):\n        # Create an empty list to store nodes\n        nodes = []\n        # Call helper function to find nodes at K distance\n        self.KDistanceUtil(root, k, nodes)\n        # Return the list of nodes at K distance from root\n        return nodes\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    Kdistance(root, k) { // Function to find nodes at distance k from the root\n        let nodes = [];  // Initialize an empty array to store the nodes\n        this.KdistanceUtil(root, k, nodes); // Call the utility function to find nodes\n        return nodes;                       // Return the array with nodes at distance k\n    }\n\n    KdistanceUtil(root, k, nodes) { // Utility function to find nodes at distance k\n        if (root == null)           // Base case: if root is null, return\n            return;\n\n        if (k ==\n            0) { // If k equals to 0, the current node is at distance k from the root\n            nodes.push(root.data); // Add the current node's data to the array\n            return;\n        }\n        this.KdistanceUtil(\n            root.left, k - 1,\n            nodes); // Recursively call the function for the left subtree with k-1\n        this.KdistanceUtil(\n            root.right, k - 1,\n            nodes); // Recursively call the function for the right subtree with k-1\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}