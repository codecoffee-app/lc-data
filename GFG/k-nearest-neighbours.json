{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700625,
            "title": "K-Nearest Neighbours",
            "titleSlug": "k-nearest-neighbours",
            "content": "<p><span style=\"font-size:20px\">K-Nearest Neighbours is one of the most basic yet essential classification algorithms in Machine Learning. It belongs to the supervised learning domain and finds intense application in pattern recognition, data mining and intrusion detection.</span></p>\n\n<pre>\n<span style=\"font-size:20px\">For Example:\nConsider the following table of data points containing two \nfeatures/groups &quot;Red and Green&quot;:\n<img alt=\"\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/graph1-8.png\" style=\"height:351px; width:608px\" />\nGiven another set of data points (testing data), allocate \nthese points a feature/group by analyzing the training set.\nWhite Point represents an unclassified point\n<img alt=\"\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/graph2-2.png\" style=\"height:363px; width:643px\" />\n\n<strong>Intuition</strong>\nIf we plot these points on a graph, we may be able to locate \nsome clusters, or groups. Now, given an unclassified point, \nwe can assign it to a group by observing what group its \nnearest neighbours belong to. This means, a point close to a \ncluster of points classified as &lsquo;Red&rsquo; has a higher probability\nof getting classified as &lsquo;Red&rsquo;.Intuitively, we can see that the\nfirst point (2.5, 7) should be classified as &lsquo;Green&rsquo; and the \nsecond point (5.5, 4.5) should be classified as &lsquo;Red&rsquo;.\n</span></pre>\n\n<p><span style=\"font-size:20px\">Your are required&nbsp;to complete the function <strong>classifyAPoint()</strong>, which should return that to which feature/group will be the test data&nbsp;belong.</span></p>\n\n<p><span style=\"font-size:20px\"><strong>Input:</strong><br />\nThe function takes four&nbsp;arguments as input, an array of structure <strong>(arr[])</strong> whose each element represents the coordinates and the type of the feature/group to which the point belong, an integer <strong>N </strong>denoting the total number of points, an integer <strong>K </strong>denoting the number of neighbours to consider and an test data (test) whom which needed to be classified.<br />\nThere will be <strong>T</strong> test cases and for each test case the function will be called separately.&nbsp;&nbsp;<br />\n<br />\n<strong>Output:</strong><br />\nFor each test case function should return the group to which the test data would belong.<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;=T&lt;=100<br />\n1&lt;=N&lt;=100<br />\n-100.00&lt;=X,Y&lt;=100<br />\n<br />\n<strong>Example:<br />\nInput:</strong><br />\n5<br />\n1 2 1 1 3 1 2 3 0 0 1 0 0 0 0<br />\n1 1 3<br />\n5<br />\n1 2 0 1 3 1 2 3 0 0 1 1 0 0 1&nbsp;<br />\n1 1 4<br />\n<strong>Output:</strong><br />\n0<br />\n1</span></p>\n\n<p><strong>Note:</strong>The <strong>Input/Ouput</strong> format and <strong>Example</strong> given are used for system&#39;s internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Machine Learning",
                "slug": "machine-learning"
            }
        ],
        "companies": [
            "directi"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to compare two points based on their distance\nbool comparison(Point a, Point b)\n{\n\treturn (a.distance < b.distance);\n}\n\n// Function to classify a test point based on its nearest neighbors\nint classifyAPoint(Point arr[], int n, int k, Point test)\n{\n\t// Calculate the distances between the test point and all other points\n\tfor (int i = 0; i < n; i++)\n\t\tarr[i].distance =\n\t\t\tsqrt((arr[i].x - test.x) * (arr[i].x - test.x) +\n\t\t\t\t(arr[i].y - test.y) * (arr[i].y - test.y));\n\n\t// Sort the points based on their distances in ascending order\n\tsort(arr, arr+n, comparison);\n\t\n\tint freq1 = 0; // Frequency of points in group 0\n\tint freq2 = 0; // Frequency of points in group 1\n\t\n\t// Count the frequencies of the first k nearest neighbors\n\tfor (int i = 0; i < k; i++)\n\t{\n\t\tif (arr[i].grp == 0)\n\t\t\tfreq1++;\n\t\telse if (arr[i].grp == 1)\n\t\t\tfreq2++;\n\t}\n\t\n\t// Classify the test point based on the majority frequency\n\treturn (freq1 > freq2 ? 0 : 1);\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}