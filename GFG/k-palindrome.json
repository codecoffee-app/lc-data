{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700264,
            "title": "K-Palindrome",
            "titleSlug": "k-palindrome",
            "content": "<p><span style=\"font-size: 20px;\"><span style=\"font-size: 20px;\">Given a string <strong>s</strong> containing <strong>n</strong> lowercase alphabets and an integer <strong>k</strong>, a string is considered a \"<strong>k-palindrome</strong>\" if it can be converted into a palindrome by removing <strong>no more than k characters</strong>. Your task is to determine whether the given string s can be made into a k-palindrome or not.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>s = abcdecba<br />k = 1\n<strong>Output: <br /></strong>true<strong>\nExplanation: <br /></strong>Since k = 1, by removing either 'd' or 'e', the string can become a palindrome. <br />- Hence answer is <strong>true</strong>.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>s = abcd<br />k = 2\n<strong>Output: <br /></strong>false<strong>\nExplanation: <br /></strong>Since k = 2, we can remove at most 2 characters. but for given string it is impossible to make it palindrome by removing at most 2 characters.<br />- Hence answer is <strong>false</strong>.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />The task is to complete the function&nbsp;<strong>iskPalindrome() </strong>which takes a string <strong>s </strong>and an integer <strong>k</strong> as input parameters and returns the <strong>true</strong> if s is k-palindrome, else&nbsp;<strong>false</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 1000</span><br /><span style=\"font-size: 18px;\">0 &le; k &le; n</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` of length `n` containing lowercase alphabets and an integer `k`, determine if the string `s` is a k-palindrome. A string is considered a k-palindrome if it can be converted into a palindrome by removing at most `k` characters.",
                "constraints": [
                    "1 <= n <= 1000",
                    "0 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "s = abcdecba\nk = 1",
                        "output": "true",
                        "explanation": "With k = 1, removing either 'd' or 'e' transforms the string into a palindrome ('abceba' or 'abcdeba', which after removing the other letter becomes 'abcba')."
                    },
                    {
                        "input": "s = abcd\nk = 2",
                        "output": "false",
                        "explanation": "With k = 2, we can remove a maximum of 2 characters. However, it's impossible to make the string 'abcd' a palindrome by removing only 2 characters."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>try to relate this problem to longest palindromic subsequence problem</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "companies": [
            "facebook"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "int lcs1(string X, string Y, int m, int n) {\n    int L[m + 1][n + 1];\n\n    // Building L[m+1][n+1] in bottom up fashion\n    // L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1]\n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            // Initializing the first row and column with 0\n            if (i == 0 || j == 0)\n                L[i][j] = 0;\n            // If characters at index i-1 and j-1 are equal, increase LCS length\n            else if (X[i - 1] == Y[j - 1])\n                L[i][j] = L[i - 1][j - 1] + 1;\n            // If characters are not equal, take maximum of previous LCS lengths\n            else\n                L[i][j] = max(L[i - 1][j], L[i][j - 1]);\n        }\n    }\n    // L[m][n] contains length of LCS for X and Y\n    return L[m][n];\n}\n\nbool iskPalindrome(string s, int k) {\n    string rev = s;\n    reverse(rev.begin(), rev.end());\n    int l = lcs1(s, rev, s.length(), rev.length());\n    int len = s.length();\n    // If the difference between string length and LCS length is less than or equal to\n    // k, return true\n    return ((len - l) <= k);\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class GfG {\n\n    int lcs1(String X, String Y, int m, int n) {\n        int L[][] = new int[m + 1][n + 1];\n\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                if (i == 0 || j == 0)\n                    L[i][j] = 0;\n                else if (X.charAt(i - 1) == Y.charAt(j - 1))\n                    L[i][j] = L[i - 1][j - 1] + 1;\n                else if (L[i - 1][j] > L[i][j - 1])\n                    L[i][j] = L[i - 1][j];\n                else\n                    L[i][j] = L[i][j - 1];\n            }\n        }\n        return L[m][n];\n    }\n\n    boolean iskPalindrome(String str, int k) {\n        char tempcharArray[] = new char[str.length()];\n        for (int i = 0; i < str.length(); i++) tempcharArray[i] = str.charAt(i);\n\n        char charArray[] = new char[str.length()];\n        for (int j = 0; j < str.length(); j++)\n            charArray[j] = tempcharArray[str.length() - 1 - j];\n\n        String rev = new String(charArray);\n        StringBuffer buffer = new StringBuffer(str);\n\n        int len = str.length();\n        int l = lcs1(str, rev, str.length(), rev.length());\n\n        return ((len - l) <= k);\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Function to find longest common subsequence between two strings\ndef lcs(a, b, m, n):\n    lis = [[0 for x in range(m + 1)] for y in range(n + 1)]\n\n    # Filling the 2D table for longest common subsequence\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                lis[i][j] = 0\n            elif (a[i - 1] == b[j - 1]):\n                lis[i][j] = lis[i - 1][j - 1] + 1\n            else:\n                lis[i][j] = max(lis[i - 1][j], lis[i][j - 1])\n\n    return lis[m][n]\n\n\n# Function to check if a string can be transformed into a palindrome by removing k characters\ndef iskPalindrome(string, n):\n    lps = lcs(string, string[::-1], len(string), len(string))\n\n    # If the number of characters to be removed to make the string a palindrome is less than or equal to n, return 1\n    if (len(string) - lps <= n):\n        return True\n    else:\n        return False\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} s\n * @param {number} k\n * @returns {boolean}\n */\n\nclass Solution {\n    iskPalindrome(s, k) {\n        // code here\n        function lcs1(X, Y, m, n) {\n            let L = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0));\n\n            /* Following steps build L[m+1][n+1] in bottom up\n                fashion. Note that L[i][j] contains length of\n                LCS of X[0..i-1] and Y[0..j-1] */\n            for (let i = 0; i <= m; i++) {\n                for (let j = 0; j <= n; j++) {\n                    if (i === 0 || j === 0)\n                        L[i][j] = 0;\n                    else if (X[i - 1] === Y[j - 1])\n                        L[i][j] = L[i - 1][j - 1] + 1;\n                    else\n                        L[i][j] = Math.max(L[i - 1][j], L[i][j - 1]);\n                }\n            }\n            // L[m][n] contains length of LCS for X and Y\n            return L[m][n];\n        }\n\n        let rev = s.split(\"\").reverse().join(\"\");\n        let l = lcs1(s, rev, s.length, rev.length);\n        let len = s.length;\n        return (len - l <= k);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}