{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703253,
            "title": "K-th element of two  Arrays",
            "titleSlug": "k-th-element-of-two-sorted-array1317",
            "content": "<p><span style=\"font-size: 18px;\">Given two sorted arrays <strong>a[] </strong>and <strong>b[]</strong> and an element <strong>k</strong>, the task is to find the element that would be at the <strong>k<sup>th</sup></strong> position of the combined sorted array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a[] = [2, 3, 6, 7, 9], b[] = [1, 4, 8, 10], k = 5\n<strong>Output: </strong>6\n<strong>Explanation: </strong>The final combined sorted array would be [1, 2, 3, 4, 6, 7, 8, 9, 10]. The 5th element of this array is 6.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> a[] = [100, 112, 256, 349, 770], b[] = [72, 86, 113, 119, 265, 445, 892], k = 7\n<strong>Output: </strong>256\n<strong>Explanation: </strong>Combined sorted array is [72, 86, 100, 112, 113, 119, 256, 265, 349, 445, 770, 892]. The 7th element of this array is 256.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1 &lt;= a.size(), b.size() &lt;= 10<sup>6</sup></span></li>\n<li><span style=\"font-size: 18px;\">1 &lt;= k &lt;= a.size() + b.size()</span></li>\n<li><span style=\"font-size: 18px;\">0 &lt;= a[i], b[i] &lt; 10<sup>8</sup><br /></span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted arrays `a` and `b`, and an integer `k`, find the k-th smallest element in the combined sorted array formed by merging `a` and `b`.",
                "constraints": [
                    "1 <= a.size(), b.size() <= 10^6",
                    "1 <= k <= a.size() + b.size()",
                    "0 <= a[i], b[i] < 10^8"
                ],
                "testcases": [
                    {
                        "input": "a = [2, 3, 6, 7, 9], b = [1, 4, 8, 10], k = 5",
                        "output": "6",
                        "explanation": "Merging the arrays results in [1, 2, 3, 4, 6, 7, 8, 9, 10]. The 5th element (index 4) is 6."
                    },
                    {
                        "input": "a = [100, 112, 256, 349, 770], b = [72, 86, 113, 119, 265, 445, 892], k = 7",
                        "output": "256",
                        "explanation": "Merging the arrays results in [72, 86, 100, 112, 113, 119, 256, 265, 349, 445, 770, 892]. The 7th element (index 6) is 256."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use Binary Search, and carefully choose the range division conditions</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "companies": [
            "flipkart",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int kthElement(vector<int> &a, vector<int> &b, int k) {\n        int n = a.size(), m = b.size();\n\n        // If a[] has more elements, then call kthElement\n        // with reversed parameters\n        if (n > m)\n            return kthElement(b, a, k);\n\n        // Binary Search on the number of elements we can\n        // include in the first set from a[]\n        int lo = max(0, k - m), hi = min(k, n);\n\n        while (lo <= hi) {\n            int mid1 = (lo + hi) / 2;\n            int mid2 = k - mid1;\n\n            // Find elements to the left and right of partition in a[]\n            int l1 = (mid1 == 0 ? INT_MIN : a[mid1 - 1]);\n            int r1 = (mid1 == n ? INT_MAX : a[mid1]);\n\n            // Find elements to the left and right of partition in b[]\n            int l2 = (mid2 == 0 ? INT_MIN : b[mid2 - 1]);\n            int r2 = (mid2 == m ? INT_MAX : b[mid2]);\n\n            // If it is a valid partition\n            if (l1 <= r2 && l2 <= r1) {\n\n                // Find and return the maximum of l1 and l2\n                return max(l1, l2);\n            }\n\n            // Check if we need to take lesser elements from a[]\n            if (l1 > r2)\n                hi = mid1 - 1;\n\n            // Check if we need to take more elements from a[]\n            else\n                lo = mid1 + 1;\n        }\n\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int kthElement(int a[], int b[], int k) {\n        int n = a.length, m = b.length;\n\n        // If a[] has more elements, then call kthElement\n        // with reversed parameters\n        if (n > m) return kthElement(b, a, k);\n\n        // Binary Search on the number of elements we can\n        // include in the first set from a[]\n        int lo = Math.max(0, k - m), hi = Math.min(k, n);\n\n        while (lo <= hi) {\n            int mid1 = (lo + hi) / 2;\n            int mid2 = k - mid1;\n\n            // Find elements to the left and right of partition in a[]\n            int l1 = (mid1 == 0 ? Integer.MIN_VALUE : a[mid1 - 1]);\n            int r1 = (mid1 == n ? Integer.MAX_VALUE : a[mid1]);\n\n            // Find elements to the left and right of partition in a[]\n            int l2 = (mid2 == 0 ? Integer.MIN_VALUE : b[mid2 - 1]);\n            int r2 = (mid2 == m ? Integer.MAX_VALUE : b[mid2]);\n\n            // If it is a valid partition\n            if (l1 <= r2 && l2 <= r1) {\n                // Find and return the maximum of l1 and l2\n                return Math.max(l1, l2);\n            }\n\n            // Check if we need to take lesser elements from a[]\n            if (l1 > r2) hi = mid1 - 1;\n\n            // Check if we need to take more elements from a[]\n            else\n                lo = mid1 + 1;\n        }\n\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def kthElement(self, a, b, k):\n        n = len(a)\n        m = len(b)\n\n        # If a[] has more elements, then call kthElement\n        # with reversed parameters\n        if n > m:\n            return self.kthElement(b, a, k)\n\n        # Binary Search on the number of elements we can\n        # include in the first set from a[]\n        lo = max(0, k - m)\n        hi = min(k, n)\n\n        while lo <= hi:\n            mid1 = (lo + hi) // 2\n            mid2 = k - mid1\n\n            # Find elements to the left and right of partition in a[]\n            l1 = (mid1 == 0 and float('-inf') or a[mid1 - 1])\n            r1 = (mid1 == n and float('inf') or a[mid1])\n\n            # Find elements to the left and right of partition in b[]\n            l2 = (mid2 == 0 and float('-inf') or b[mid2 - 1])\n            r2 = (mid2 == m and float('inf') or b[mid2])\n\n            # If it is a valid partition\n            if l1 <= r2 and l2 <= r1:\n\n                # Find and return the maximum of l1 and l2\n                return max(l1, l2)\n\n            # Check if we need to take lesser elements from a[]\n            if l1 > r2:\n                hi = mid1 - 1\n\n            # Check if we need to take more elements from a[]\n            else:\n                lo = mid1 + 1\n\n        return 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    kthElement(a, b, k) {\n        let n = a.length, m = b.length;\n\n        // If a[] has more elements, then call kthElement\n        // with reversed parameters\n        if (n > m) {\n            return this.kthElement(b, a, k);\n        }\n\n        // Binary Search on the number of elements we can\n        // include in the first set from a[]\n        let lo = Math.max(0, k - m), hi = Math.min(k, n);\n\n        while (lo <= hi) {\n            let mid1 = Math.floor((lo + hi) / 2);\n            let mid2 = k - mid1;\n\n            // Find elements to the left and right of partition in a[]\n            let l1 = (mid1 === 0 ? -Infinity : a[mid1 - 1]);\n            let r1 = (mid1 === n ? Infinity : a[mid1]);\n\n            // Find elements to the left and right of partition in b[]\n            let l2 = (mid2 === 0 ? -Infinity : b[mid2 - 1]);\n            let r2 = (mid2 === m ? Infinity : b[mid2]);\n\n            // If it is a valid partition\n            if (l1 <= r2 && l2 <= r1) {\n\n                // Find and return the maximum of l1 and l2\n                return Math.max(l1, l2);\n            }\n\n            // Check if we need to take lesser elements from a[]\n            if (l1 > r2) {\n                hi = mid1 - 1;\n            }\n\n            // Check if we need to take more elements from a[]\n            else {\n                lo = mid1 + 1;\n            }\n        }\n\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}