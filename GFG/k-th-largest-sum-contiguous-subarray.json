{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709984,
            "title": "K-th Largest Sum Contiguous Subarray",
            "titleSlug": "k-th-largest-sum-contiguous-subarray",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>a</strong><strong>rr</strong>. You have to find the <strong>K-th</strong> <strong>largest</strong> sum of contiguous <strong>subarray</strong> within the array elements. In other words, overall subarrays, find the subarray with kth largest sum and return its sum of elements.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [3, 2, 1], k = 2 </span><strong><span style=\"font-size: 18px;\">\nOutput: </span></strong><span style=\"font-size: 18px;\">5</span><strong><span style=\"font-size: 18px;\">\nExplanation: </span></strong><span style=\"font-size: 18px;\">The different subarray sums we can get from the array are = [6, 5, 3, 2, 1]. Where 5 is the 2nd largest.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [2, 6, 4, 1], k = 3</span><strong><span style=\"font-size: 18px;\">\nOutput: </span></strong><span style=\"font-size: 18px;\">11</span><strong><span style=\"font-size: 18px;\">\nExplanation: </span></strong><span style=\"font-size: 18px;\">The different subarray sums we can get from the arrayare = [13, 12, 11, 10, 8, 6, 5, 4, 2, 1]. Where 11 is the 3rd </span><span style=\"font-size: 18px;\">largest.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup> * log k)<br /><strong>Expected Auxiliary Space:</strong> O(k)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= arr.size() &lt;= 100<br />1 &lt;= k &lt;= (n*(n+1))/2</span><br /><span style=\"font-size: 18px;\">-10<sup>5</sup> &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr`, find the K-th largest sum of all contiguous subarrays within the array. Return the sum of elements for the subarray that corresponds to the K-th largest sum.",
                "constraints": [
                    "1 <= arr.size() <= 100",
                    "1 <= k <= (n*(n+1))/2  where n is the size of the array",
                    "-10^5 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[3, 2, 1], k = 2",
                        "output": "5",
                        "explanation": "The sums of all possible subarrays are [6, 5, 3, 2, 1]. The 2nd largest sum is 5."
                    },
                    {
                        "input": "[2, 6, 4, 1], k = 3",
                        "output": "11",
                        "explanation": "The sums of all possible subarrays are [13, 12, 11, 10, 8, 6, 5, 4, 2, 1]. The 3rd largest sum is 11."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">Calculate prefix sums for the array, then use a min-heap to track the K largest subarray sums by iterating through all possible subarrays and updating the heap accordingly.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "priority-queue",
                "slug": "priority-queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the kth largest element in the given array.\n    int kthLargest(vector<int> &arr, int k) {\n        int N = arr.size();\n        vector<int> pre(N + 1);\n        pre[0] = 0;\n        pre[1] = arr[0];\n\n        // Calculating prefix sum of the array.\n        for (int i = 2; i <= N; i++) {\n            pre[i] = pre[i - 1] + arr[i - 1];\n        }\n\n        // Creating a min-heap to store the k largest elements.\n        priority_queue<int, vector<int>, greater<int>> pq;\n\n        // Iterating over all subarrays to find the k largest elements.\n        for (int i = 1; i <= N; i++) {\n            for (int j = i; j <= N; j++) {\n                int x = pre[j] - pre[i - 1];\n\n                // If heap size is less than k, add current element to heap.\n                if (pq.size() < k) {\n                    pq.push(x);\n                }\n\n                // If current element is larger than smallest element in heap,\n                // replace smallest element with current element.\n                else {\n                    if (pq.top() < x) {\n                        pq.pop();\n                        pq.push(x);\n                    }\n                }\n            }\n        }\n\n        // Returning the kth largest element.\n        return pq.top();\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int kthLargest(int[] arr, int k) {\n        int N = arr.length;\n        int[] pre = new int[N + 1];\n        pre[0] = 0;\n        pre[1] = arr[0];\n\n        // Calculating prefix sum of the array.\n        for (int i = 2; i <= N; i++) {\n            pre[i] = pre[i - 1] + arr[i - 1];\n        }\n\n        // Creating a min-heap to store the k largest elements.\n        PriorityQueue<Integer> pq = new PriorityQueue<>(k);\n\n        // Iterating over all subarrays to find the k largest elements.\n        for (int i = 1; i <= N; i++) {\n            for (int j = i; j <= N; j++) {\n                int x = pre[j] - pre[i - 1];\n\n                // If heap size is less than k, add current element to heap.\n                if (pq.size() < k) {\n                    pq.offer(x);\n                }\n                // If current element is larger than smallest element in heap,\n                // replace smallest element with current element.\n                else if (pq.peek() < x) {\n                    pq.poll();\n                    pq.offer(x);\n                }\n            }\n        }\n\n        // Returning the kth largest element.\n        return pq.peek();\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\nimport heapq\n\n\nclass Solution:\n\n    def kthLargest(self, arr, k) -> int:\n        N = len(arr)\n        pre = [0] * (N + 1)\n        pre[0] = 0\n        pre[1] = arr[0]\n\n        # Calculating prefix sum of the array.\n        for i in range(2, N + 1):\n            pre[i] = pre[i - 1] + arr[i - 1]\n\n        # Creating a min-heap to store the k largest elements.\n        pq = []\n\n        # Iterating over all subarrays to find the k largest elements.\n        for i in range(1, N + 1):\n            for j in range(i, N + 1):\n                x = pre[j] - pre[i - 1]\n\n                # If heap size is less than k, add current element to heap.\n                if len(pq) < k:\n                    heapq.heappush(pq, x)\n                # If current element is larger than smallest element in heap,\n                # replace smallest element with current element.\n                elif pq[0] < x:\n                    heapq.heappop(pq)\n                    heapq.heappush(pq, x)\n\n        # Returning the kth largest element.\n        return pq[0]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass MinPriorityQueue {\n    constructor() { this.elements = []; }\n\n    enqueue(val) {\n        this.elements.push(val);\n        this.elements.sort((a, b) => a - b);\n    }\n\n    dequeue() { return this.elements.shift(); }\n\n    front() { return {element : this.elements[0]}; }\n\n    size() { return this.elements.length; }\n}\n\nclass Solution {\n    // Function to find the kth largest element in the given array.\n    kthLargest(arr, k) {\n        const N = arr.length;\n        const pre = new Array(N + 1).fill(0);\n        pre[1] = arr[0];\n\n        // Calculating prefix sum of the array.\n        for (let i = 2; i <= N; i++) {\n            pre[i] = pre[i - 1] + arr[i - 1];\n        }\n\n        // Creating a min-heap to store the k largest elements.\n        const pq = new MinPriorityQueue();\n\n        // Iterating over all subarrays to find the k largest elements.\n        for (let i = 1; i <= N; i++) {\n            for (let j = i; j <= N; j++) {\n                const x = pre[j] - pre[i - 1];\n\n                // If heap size is less than k, add current element to heap.\n                if (pq.size() < k) {\n                    pq.enqueue(x);\n                }\n\n                // If current element is larger than the smallest element in the heap,\n                // replace the smallest element with the current element.\n                else {\n                    if (pq.front().element < x) {\n                        pq.dequeue();\n                        pq.enqueue(x);\n                    }\n                }\n            }\n        }\n\n        // Returning the kth largest element.\n        return pq.front().element;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}