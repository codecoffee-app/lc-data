{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701215,
            "title": "Kadane's Algorithm",
            "titleSlug": "kadanes-algorithm-1587115620",
            "content": "<p><span >Given an integer array <strong>arr[].</strong> You need to find the <strong>maximum</strong> sum of a subarray.<br /></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 3, -8, 7, -1, 2, 3]\n<strong>Output: </strong>11<strong>\nExplanation: </strong>The subarray {7, -1, 2, 3} has the largest sum 11.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [-2, -4]\n<strong>Output: </strong>-2<strong>\nExplanation: </strong>The subarray {-2} has the largest sum -2.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [5, 4, 1, 7, 8]\n<strong>Output: </strong>25<strong>\nExplanation: </strong>The subarray {5, 4, 1, 7, 8} has the largest sum 25.</span></pre>\n<p><span ><strong>Constraints:<br /></strong>1 &le; arr.size() &le; 10<sup>5</sup><strong><br /></strong>-10<sup>9</sup> &le; arr[i] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]`, find the maximum sum of any contiguous subarray within the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "-10^9 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[2, 3, -8, 7, -1, 2, 3]",
                        "output": "11",
                        "explanation": "The subarray [7, -1, 2, 3] yields the maximum sum of 11."
                    },
                    {
                        "input": "[-2, -4]",
                        "output": "-2",
                        "explanation": "The subarray [-2] yields the maximum sum of -2. In cases where all elements are negative, the single largest element is the maximum subarray sum."
                    },
                    {
                        "input": "[5, 4, 1, 7, 8]",
                        "output": "25",
                        "explanation": "The entire array [5, 4, 1, 7, 8] yields the maximum sum of 25."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #1e2229; font-family: Nunito; font-size: 14pt; background-color: #ffffff;\">Iterate through the array, tracking the current subarray sum and maximum sum. Reset the current sum to zero if it becomes negative.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho",
            "flipkart",
            "morgan-stanley",
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "snapdeal",
            "24*7-innovation-labs",
            "citrix",
            "de-shaw",
            "factset",
            "hike",
            "housing.com",
            "metlife",
            "ola-cabs",
            "oracle",
            "payu",
            "teradata",
            "visa",
            "walmart",
            "adobe",
            "google",
            "arcesium"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxSubarraySum(vector<int> &arr) {\n        int n = arr.size();\n\n        int maxh = 0, maxf = arr[0];\n\n        // Iterating over the array.\n        for (int i = 0; i < n; i++) {\n            // Updating max sum till current index.\n            maxh += arr[i];\n            // Storing max sum so far by choosing maximum between max\n            // sum so far and max till current index.\n            if (maxf < maxh)\n                maxf = maxh;\n\n            // If max sum at current index is negative, we do not need to add\n            // it to result so we update it to zero.\n            if (maxh < 0)\n                maxh = 0;\n        }\n        // returning the result.\n        return maxf;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the sum of contiguous subarray with maximum sum.\n    int maxSubarraySum(int[] arr) {\n        int n = arr.length;\n\n        int maxh = 0, maxf = arr[0];\n\n        // Iterating over the array.\n        for (int i = 0; i < n; i++) {\n\n            // Updating max sum till current index.\n            maxh += arr[i];\n            // Storing max sum so far by choosing maximum between max\n            // sum so far and max sum till current index.\n            if (maxf < maxh) maxf = maxh;\n\n            // If max sum till current index is negative, we do not need to add\n            // it to result so we update it to zero.\n            if (maxh < 0) maxh = 0;\n        }\n        // returning the result.\n        return maxf;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to find the sum of contiguous subarray with maximum sum.\n    def maxSubArraySum(self, arr):\n\n        size = len(arr)\n        max_so_far = -9999999 - 1\n        max_ending_here = 0\n\n        #Iterating over the array.\n        for i in range(0, size):\n            #Updating max sum till current index.\n            max_ending_here = max_ending_here + arr[i]\n\n            #Storing max sum so far by choosing maximum between max\n            #sum so far and max sum till current index.\n            if (max_so_far < max_ending_here):\n                max_so_far = max_ending_here\n\n            #If max sum till current index is negative, we do not need to add\n            #it to result so we update it to zero.\n            if max_ending_here < 0:\n                max_ending_here = 0\n\n        #returning the result.\n        return max_so_far\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {number}\n */\nclass Solution {\n    // Function to find the sum of contiguous subarray with maximum sum.\n    maxSubarraySum(arr) {\n        let maxh = 0, maxf = arr[0];\n\n        // Iterating over the array.\n        for (let i = 0; i < arr.length; i++) {\n            // Updating max sum till current index.\n            maxh += arr[i];\n            // Storing max sum so far by choosing maximum between max\n            // sum so far and max sum till current index.\n            maxf = Math.max(maxh, maxf);\n\n            // If max sum till current index is negative, we do not need to add\n            // it to result so we update it to zero.\n            if (maxh < 0) maxh = 0;\n        }\n        // returning the result.\n        return maxf;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}