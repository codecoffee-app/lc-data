{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702964,
            "title": "Keep Indices After Sorting",
            "titleSlug": "keep-indices-after-sorting",
            "content": "<p><span style=\"font-size: 18px;\">You are given an integer array <strong>arr[]</strong>. You need to create an ArrayList of objects of class <strong>ArrItem</strong> and then you have to sort this ArrayList by the first field. The sorting has to be done in increasing order. If the item field clashes then sort by index field in increasing order.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [5, 5, 4, 3, 2, 5]\n<strong>Output: </strong>(2,4) (3,3) (4,2) (5,0) (5,1) (5,5)</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Elements are sorted in increasing order and are printed in the format (item, index).</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [8, 5, 99, 1]\n<strong>Output: </strong>(1,3) (5,1) (8,0) (99,2)</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Elements are sorted in increasing order and are printed in the format (item, index).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.length &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]`, create an ArrayList of `ArrItem` objects. Sort this ArrayList in increasing order based on the 'item' field. If 'item' values are the same, sort by the 'index' field in increasing order.",
                "constraints": [
                    "1 <= arr.length <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "[5, 5, 4, 3, 2, 5]",
                        "output": "(2,4) (3,3) (4,2) (5,0) (5,1) (5,5)",
                        "explanation": "The elements are sorted based on their values in ascending order. When values are equal, the elements are sorted by their original index in the input array."
                    },
                    {
                        "input": "[8, 5, 99, 1]",
                        "output": "(1,3) (5,1) (8,0) (99,2)",
                        "explanation": "The elements are sorted based on their values in ascending order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:20px\">Create a class that implements comparator.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": {
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Sorting {\n    public ArrayList<ArrItem> sortedWithIndices(int arr[]) {\n        // creating an ArrayList of ArrItem type\n        ArrayList<ArrItem> ans = new ArrayList<>();\n\n        // adding elements to the AraryList\n        for (int i = 0; i < arr.length; i++) {\n            ans.add(new ArrItem(arr[i], i));\n        }\n\n        // sorting the ArrayList using custom\n        // comaprator of MyComp class\n        Collections.sort(ans, new MyComp());\n\n        // returning the ArrayList\n        return ans;\n    }\n}\n\nclass MyComp implements Comparator<ArrItem> {\n    public int compare(ArrItem i1, ArrItem i2) { return i1.item - i2.item; }\n}",
                "lang_text": "java"
            }
        },
        "platform": "GFG"
    }
}