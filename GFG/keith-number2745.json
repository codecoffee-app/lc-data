{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704968,
            "title": "Keith Number",
            "titleSlug": "keith-number2745",
            "content": "<p><span style=\"font-size:18px\">A <strong>x</strong>&nbsp;digit number <strong>n</strong>&nbsp;is called <strong>Keith number</strong> if it appears in a special sequence (defined below) generated using its digits. The special sequence has first <strong>x</strong>&nbsp;terms as digits of <strong>n</strong>&nbsp;and other terms are recursively evaluated as sum of previous <strong>x</strong>&nbsp;terms.The task is to find if a given number is <strong>Keith Number</strong> or not.</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: n = 197\r\n<strong>Output:</strong>&nbsp;1&nbsp;\r\n<strong>Explanation</strong>: 197 has 3 digits, so n = 3 \r\nThe number is Keith because it appears \r\nin the special sequence that has first\r\nthree terms as 1, 9, 7 and remaining\r\nterms evaluated using sum of previous 3\r\nterms. 1, 9, 7, 17, 33, 57, 107, <strong>197</strong>, ..... \r\n\r\n<strong>Example 2:</strong></span></pre>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 12\r\n<strong>Output:&nbsp;</strong>0\r\n<strong>Explanation</strong>: The number is not Keith \r\nbecause it doesn&#39;t appear in the special \r\nsequence generated using its digits. \r\n1, 2, 3, 5, 8, 13, 21, .....</span><span style=\"font-size:18px\"> \r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou dont need to read input or print anything. Complete the function <strong>isKeith()&nbsp;</strong>which takes n&nbsp;as input parameter and returns 1 if a given number is <strong>Keith Number </strong>else returns 0.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong> O(n*</span><span style=\"font-size:15px\"><span style=\"font-size:18px\">k</span></span><span style=\"font-size:18px\">)</span><br />\r\n<span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong> O(n)</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1&lt;= n&nbsp;&lt;=10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Add previous n digit of x(n digit number) until get the Keith.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "series",
                "slug": "series"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n    int isKeith(int x) \r\n{ \r\n    // Store all digits of x in a vector \"terms\" \r\n    // Also find number of digits and store in \"n\". \r\n    vector <int> terms; \r\n    int temp = x, n = 0; // n is number of digits in x \r\n    while (temp > 0) \r\n    { \r\n        terms.push_back(temp%10); \r\n        temp = temp/10; \r\n        n++; \r\n    } \r\n  \r\n    // To get digits in right order (from MSB to \r\n    // LSB) \r\n    reverse(terms.begin(), terms.end()); \r\n  \r\n    // Keep finding next trms of a sequence generated \r\n    // using digits of x until we either reach x or a \r\n    // number greate than x \r\n    int next_term = 0, i = n; \r\n    while (next_term < x) \r\n    { \r\n        next_term = 0; \r\n  \r\n        // Next term is sum of previous n terms \r\n        for (int j=1; j<=n; j++) \r\n            next_term += terms[i-j]; \r\n  \r\n        terms.push_back(next_term); \r\n        i++; \r\n    } \r\n  \r\n    /* When the control comes out of the while loop, \r\n       either the next_term is equal to the number \r\n       or greater than it. \r\n       If next_term is equal to x, then x is a \r\n       Keith number, else not */\r\n    if(next_term == x)return 1;\r\n    return 0; \r\n} \r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}