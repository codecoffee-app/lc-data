{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 703092,
      "title": "Two Sum - Pair with Given Sum",
      "titleSlug": "key-pair5616",
      "content": "<p><span ><span >Given an array </span><strong >arr[]</strong><span > of positive integers and another integer </span><strong >target</strong><span >. Determine if there exists two distinct indices such that the sum of there elements is equals to <strong>target.</strong></span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 4, 45, 6, 10, 8], target = 16\n<strong>Output: </strong>true\n<strong>Explanation:</strong> arr[3] + arr[4] = 6 + 10 = 16.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 4, 3, 6], target = 11\n<strong>Output:</strong> false\n<strong>Explanation:</strong> None of the pair makes a sum of 11.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [11], target = 11\n<strong>Output:</strong> false\n<strong>Explanation:</strong> No pair is possible as only one element is present in arr[].</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5<br /></sup><span style=\"font-size: 18.6667px;\">1 &le; target &le; 2*10</span><sup>5</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given an array of positive integers `arr[]` and a target integer `target`, determine if there exist two distinct indices `i` and `j` such that `arr[i] + arr[j] == target`.",
        "constraints": [
          "1 <= arr.size <= 10^5",
          "1 <= arr[i] <= 10^5",
          "1 <= target <= 2*10^5"
        ],
        "testcases": [
          {
            "input": "arr[] = [1, 4, 45, 6, 10, 8], target = 16",
            "output": "true",
            "explanation": "The elements at indices 3 and 4 sum up to the target: arr[3] + arr[4] = 6 + 10 = 16."
          },
          {
            "input": "arr[] = [1, 2, 4, 3, 6], target = 11",
            "output": "false",
            "explanation": "No pair of elements in the array sums up to 11."
          },
          {
            "input": "arr[] = [11], target = 11",
            "output": "false",
            "explanation": "The array contains only one element, so it is impossible to find two distinct indices."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p><span style=\"font-size: 14pt;\">Try to solve this problem using Hashing.</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Arrays",
        "slug": "arrays"
      },
      {
        "name": "Hash",
        "slug": "hash"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": [
      "zoho",
      "flipkart",
      "morgan-stanley",
      "accolite",
      "amazon",
      "microsoft",
      "factset",
      "hike",
      "adobe",
      "google",
      "wipro",
      "sap",
      "carwale"
    ],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    bool twoSum(vector<int>& arr, int target) {\n        unordered_map<int, int> hash;\n        for (int i = 0; i < arr.size(); i++) {\n            int numberToFind = target - arr[i];\n            // if numberToFind is found in map, return true\n            if (hash.find(numberToFind) != hash.end()) {\n                return true;\n            }\n            // number was not found. Put it in the map.\n            hash[arr[i]] = i;\n        }\n        return false;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "class Solution {\n    // Function to check if array has 2 elements\n    // whose sum is equal to the given value\n    boolean twoSum(int arr[], int target) {\n        int n = arr.length;\n        HashMap<Integer, Integer> hash = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            int numberToFind = target - arr[i];\n            // if numberToFind is found in map, return them\n            if (hash.containsKey(numberToFind)) {\n                return true;\n            }\n            // number was not found. Put it in the map.\n            hash.put(arr[i], i);\n        }\n        return false;\n    }\n};",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Initial Template for Python 3\nclass Solution:\n\n    def twoSum(self, arr, target):\n        hash_map = {}\n        for i in range(len(arr)):\n            number_to_find = target - arr[i]\n            # if numberToFind is found in map, return true\n            if number_to_find in hash_map:\n                return True\n            # number was not found. Put it in the map.\n            hash_map[arr[i]] = i\n        return False\n",
        "lang_text": "py"
      },
      {
        "lang": "Javascript",
        "full_func": "class Solution {\n    twoSum(arr, target) {\n        let hash = {};\n        for (let i = 0; i < arr.length; i++) {\n            let numberToFind = target - arr[i];\n            // if numberToFind is found in map, return true\n            if (numberToFind in hash) {\n                return true;\n            }\n            // number was not found. Put it in the map.\n            hash[arr[i]] = i;\n        }\n        return false;\n    }\n}\n",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
