{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704857,
            "title": "Kill Captain America",
            "titleSlug": "kill-captain-america0228",
            "content": "<p><span style=\"font-size: 18px;\">Captain America is hiding from Thanos in a maze full of <strong>n</strong> rooms connected by <strong>m</strong> gates. The maze is designed in such a way that each room leads to another room via gates. All connecting gates are unidirectional. Captain America is hiding only in those rooms which are accessible directly/indirectly through every other room in the maze.<br />Help Thanos find the number of rooms in which Captain America can hide.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 5, gates[][] = [[1, 2], [2, 3], [3, 4], [4, 3], [5, 4]]\n<strong>Output:</strong>&nbsp;2\n<strong>Explanation</strong>:\n<img src=\"https://media.geeksforgeeks.org/img-practice/ScreenShot2022-05-06at10-1651814266.png\" alt=\"\" />\nWe can look closesly after forming graph than captain america only can hide in a room 3 and 4 because they are the only room which have gates through them. So, answer is 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 2, gates[][] = [[1, 2]]\n</span><span style=\"font-size: 18px;\"><strong>Output: </strong>1<br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">:  <span >Room 2 is the only room that can be visited from other rooms</span></span><span >.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 30000<br />1 &le; m &le; 200000<br />1 &le; gates[i][0], gates[i][1] &le; n</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Captain America is hiding from Thanos in a maze with 'n' rooms connected by 'm' unidirectional gates. Thanos needs to find the number of rooms where Captain America can hide. Captain America can only hide in rooms that are accessible, either directly or indirectly, from every other room in the maze. Determine the count of such rooms.",
                "constraints": [
                    "1 <= n <= 30000",
                    "1 <= m <= 200000",
                    "1 <= gates[i][0], gates[i][1] <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 5, gates[][] = [[1, 2], [2, 3], [3, 4], [4, 3], [5, 4]]",
                        "output": "2",
                        "explanation": "Rooms 3 and 4 are the only rooms reachable from all other rooms in the maze. Therefore, Captain America can hide in either room 3 or 4, resulting in a count of 2."
                    },
                    {
                        "input": "n = 2, gates[][] = [[1, 2]]",
                        "output": "1",
                        "explanation": "Room 2 is the only room that can be reached from other rooms."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find all strongly connected components.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n    static const int MAXN = 40000;\n    vector<vector<int>> graph, graphT;\n    vector<int> sol;\n    vector<bool> visited;\n    vector<int> conne, in;\n\n    void dfs1(int S) {\n        visited[S] = true;\n        for (int i = 0; i < graph[S].size(); ++i) {\n            if (!visited[graph[S][i]]) {\n                dfs1(graph[S][i]);\n            }\n        }\n        sol.push_back(S);\n    }\n\n    void dfs2(int S, int c) {\n        visited[S] = false;\n        conne[S] = c;\n        for (int i = 0; i < graphT[S].size(); ++i) {\n            if (visited[graphT[S][i]]) {\n                dfs2(graphT[S][i], c);\n            }\n        }\n    }\n\n  public:\n    int captainAmerica(int n, vector<vector<int>>& gates) {\n        int m = gates.size();\n        sol.clear();\n        graph.assign(MAXN + 1, vector<int>());\n        graphT.assign(MAXN + 1, vector<int>());\n        visited.assign(MAXN + 1, false);\n        conne.assign(MAXN + 1, 0);\n        in.assign(MAXN + 1, 0);\n\n        // Build the graph and its transpose\n        for (int i = 0; i < m; ++i) {\n            int u = gates[i][0];\n            int v = gates[i][1];\n            graph[v].push_back(u);\n            graphT[u].push_back(v);\n        }\n\n        // Perform the first DFS to fill the order\n        for (int i = 1; i <= n; ++i) {\n            if (!visited[i]) {\n                dfs1(i);\n            }\n        }\n\n        // Perform the second DFS to assign components\n        int compon = 0;\n        for (int i = sol.size() - 1; i >= 0; --i) {\n            if (visited[sol[i]]) {\n                dfs2(sol[i], compon++);\n            }\n        }\n\n        // Count the in-degrees of each component\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j < graph[i].size(); ++j) {\n                if (conne[i] != conne[graph[i][j]]) {\n                    in[conne[graph[i][j]]]++;\n                }\n            }\n        }\n\n        // Count the number of components with no incoming edges\n        int ou = 0;\n        for (int i = 0; i < compon; ++i) {\n            if (in[i] == 0) {\n                ++ou;\n            }\n        }\n\n        if (ou > 1) {\n            return 0;\n        } else {\n            ou = 0;\n            for (int i = 1; i <= n; ++i) {\n                if (in[conne[i]] == 0) {\n                    ++ou;\n                }\n            }\n            return ou;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static int MAXN = 40000;\n    static ArrayList<ArrayList<Integer>> graph;\n    static ArrayList<ArrayList<Integer>> graphT;\n    static ArrayList<Integer> sol;\n    static boolean[] visited;\n    static int[] conne, in;\n\n    void dfs1(int S) {\n        visited[S] = true;\n        int i;\n        for (i = 0; i < graph.get(S).size(); ++i) {\n            if (!visited[graph.get(S).get(i)]) {\n                dfs1(graph.get(S).get(i));\n            }\n        }\n        sol.add(S);\n    }\n\n    void dfs2(int S, int c) {\n        visited[S] = false;\n        conne[S] = c;\n        int i;\n        for (i = 0; i < graphT.get(S).size(); ++i) {\n            if (visited[graphT.get(S).get(i)]) {\n                dfs2(graphT.get(S).get(i), c);\n            }\n        }\n    }\n\n    int captainAmerica(int n, int gates[][]) {\n        int t, i, v, j, compon, u, ou, lim, aa, bb, cc;\n        int m = gates.length;\n\n        sol = new ArrayList<>();\n        graph = new ArrayList<>();\n        graphT = new ArrayList<>();\n        for (i = 0; i < MAXN + 1; i++) {\n            graph.add(new ArrayList<>());\n            graphT.add(new ArrayList<>());\n        }\n\n        visited = new boolean[MAXN + 1];\n        conne = new int[MAXN + 1];\n        in = new int[MAXN + 1];\n\n        for (i = 1; i <= m; ++i) {\n            u = gates[i - 1][0];\n            v = gates[i - 1][1];\n            graph.get(v).add(u);\n            graphT.get(u).add(v);\n        }\n\n        for (i = 1; i <= n; ++i) {\n            if (!visited[i]) {\n                dfs1(i);\n            }\n        }\n        compon = 0;\n        for (i = sol.size() - 1; i >= 0; --i) {\n            if (visited[sol.get(i)]) {\n                dfs2(sol.get(i), compon++);\n            }\n        }\n        lim = compon;\n        for (i = 1; i <= n; ++i) {\n            for (j = 0; j < graph.get(i).size(); ++j) {\n                if (conne[i] != conne[graph.get(i).get(j)]) {\n                    in[conne[graph.get(i).get(j)]] += 1;\n                }\n            }\n        }\n        ou = 0;\n        for (i = 0; i < lim; ++i) {\n            if (in[i] == 0) {\n                ++ou;\n            }\n        }\n        if (ou > 1) {\n            return 0;\n        } else {\n            ou = 0;\n            for (i = 1; i <= n; ++i) {\n                if (in[conne[i]] == 0) {\n                    ++ou;\n                }\n            }\n            return ou;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    MAXN = 40000\n\n    def __init__(self):\n        self.graph = defaultdict(list)\n        self.graphT = defaultdict(list)\n        self.sol = []\n        self.visited = [False] * (self.MAXN + 1)\n        self.conne = [0] * (self.MAXN + 1)\n        self.in_degree = [0] * (self.MAXN + 1)\n\n    def dfs1(self, S):\n        \"\"\"Perform the first DFS to populate the stack in finishing order.\"\"\"\n        self.visited[S] = True\n        for neighbor in self.graph[S]:\n            if not self.visited[neighbor]:\n                self.dfs1(neighbor)\n        self.sol.append(S)\n\n    def dfs2(self, S, c):\n        \"\"\"Perform the second DFS to assign components.\"\"\"\n        self.visited[S] = False\n        self.conne[S] = c\n        for neighbor in self.graphT[S]:\n            if self.visited[neighbor]:\n                self.dfs2(neighbor, c)\n\n    def captainAmerica(self, n, gates):\n        \"\"\"Find the number of vertices in the strongly connected components.\"\"\"\n        self.graph = defaultdict(list)\n        self.graphT = defaultdict(list)\n        self.sol = []\n        self.visited = [False] * (n + 1)\n        self.conne = [0] * (n + 1)\n        self.in_degree = [0] * (n + 1)\n\n        # Build the graph and its transpose\n        for u, v in gates:\n            self.graph[v].append(u)\n            self.graphT[u].append(v)\n\n        # First DFS to populate the finishing order\n        for i in range(1, n + 1):\n            if not self.visited[i]:\n                self.dfs1(i)\n\n        # Second DFS to find strongly connected components\n        compon = 0\n        while self.sol:\n            node = self.sol.pop()\n            if self.visited[node]:\n                self.dfs2(node, compon)\n                compon += 1\n\n        # Count the in-degrees of each component\n        for i in range(1, n + 1):\n            for neighbor in self.graph[i]:\n                if self.conne[i] != self.conne[neighbor]:\n                    self.in_degree[self.conne[neighbor]] += 1\n\n        # Count components with no incoming edges\n        zero_in_degree = sum(1 for i in range(compon)\n                             if self.in_degree[i] == 0)\n\n        if zero_in_degree > 1:\n            return 0\n        else:\n            count = 0\n            for i in range(1, n + 1):\n                if self.in_degree[self.conne[i]] == 0:\n                    count += 1\n            return count\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    bool[] visited;\n    List<int>[] graph;\n    List<int>[] graphT;\n    List<int> sol;\n    int[] conne;\n    int[] inDegrees;\n\n    // Function to perform depth-first search on the graph\n    void dfs1(int S) {\n        visited[S] = true;\n        foreach (int neighbor in graph[S]) {\n            if (!visited[neighbor]) {\n                dfs1(neighbor);\n            }\n        }\n        sol.Add(S);\n    }\n\n    // Function to perform depth-first search on the transposed graph\n    void dfs2(int S, int c) {\n        visited[S] = false;\n        conne[S] = c;\n        foreach (int neighbor in graphT[S]) {\n            if (visited[neighbor]) {\n                dfs2(neighbor, c);\n            }\n        }\n    }\n\n    public int captainAmerica(int n, int[,] gates) {\n        int m = gates.GetLength(0); // Correctly getting the number of rows\n        visited = new bool[n + 1];\n        graph = new List<int>[n + 1];\n        graphT = new List<int>[n + 1];\n        sol = new List<int>();\n        conne = new int[n + 1];\n        inDegrees = new int[n + 1];\n\n        for (int i = 1; i <= n; i++) {\n            graph[i] = new List<int>();\n            graphT[i] = new List<int>();\n            visited[i] = false;\n            conne[i] = inDegrees[i] = 0;\n        }\n\n        for (int i = 0; i < m; i++) { // Adjusted for 0-based indexing\n            int u = gates[i, 0];\n            int v = gates[i, 1];\n            graph[v].Add(u);\n            graphT[u].Add(v);\n        }\n\n        for (int i = 1; i <= n; i++) {\n            if (!visited[i]) {\n                dfs1(i);\n            }\n        }\n\n        int compon = 0;\n\n        for (int i = sol.Count - 1; i >= 0; i--) {\n            if (visited[sol[i]]) {\n                dfs2(sol[i], compon++);\n            }\n        }\n\n        int lim = compon;\n\n        for (int i = 1; i <= n; i++) {\n            foreach (int neighbor in graph[i]) {\n                if (conne[i] != conne[neighbor]) {\n                    inDegrees[conne[neighbor]]++;\n                }\n            }\n        }\n\n        int ou = 0;\n\n        for (int i = 0; i < lim; i++) {\n            if (inDegrees[i] == 0) {\n                ou++;\n            }\n        }\n\n        if (ou > 1) {\n            return 0;\n        } else {\n            ou = 0;\n            for (int i = 1; i <= n; i++) {\n                if (inDegrees[conne[i]] == 0) {\n                    ou++;\n                }\n            }\n            return ou;\n        }\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number} n\n     * @param {number[][]} gates\n     * @return {number}\n     */\n    static MAXN = 40000;\n\n    constructor() {\n        this.graph = Array.from({length : Solution.MAXN + 1}, () => []);\n        this.graphT = Array.from({length : Solution.MAXN + 1}, () => []);\n        this.sol = [];\n        this.visited = new Array(Solution.MAXN + 1).fill(false);\n        this.conne = new Array(Solution.MAXN + 1).fill(0);\n        this.in_degree = new Array(Solution.MAXN + 1).fill(0);\n    }\n\n    // First DFS to populate the stack in finishing order\n    dfs1(S) {\n        this.visited[S] = true;\n        for (let neighbor of this.graph[S]) {\n            if (!this.visited[neighbor]) {\n                this.dfs1(neighbor);\n            }\n        }\n        this.sol.push(S);\n    }\n\n    // Second DFS to assign components\n    dfs2(S, c) {\n        this.visited[S] = false;\n        this.conne[S] = c;\n        for (let neighbor of this.graphT[S]) {\n            if (this.visited[neighbor]) {\n                this.dfs2(neighbor, c);\n            }\n        }\n    }\n\n    captainAmerica(n, gates) {\n        // Reinitialize the data structures\n        this.graph = Array.from({length : n + 1}, () => []);\n        this.graphT = Array.from({length : n + 1}, () => []);\n        this.sol = [];\n        this.visited = new Array(n + 1).fill(false);\n        this.conne = new Array(n + 1).fill(0);\n        this.in_degree = new Array(n + 1).fill(0);\n\n        // Build the graph and its transpose\n        for (let [u, v] of gates) {\n            this.graph[v].push(u);\n            this.graphT[u].push(v);\n        }\n\n        // First DFS to populate the finishing order\n        for (let i = 1; i <= n; ++i) {\n            if (!this.visited[i]) {\n                this.dfs1(i);\n            }\n        }\n\n        // Second DFS to find strongly connected components\n        let compon = 0;\n        while (this.sol.length > 0) {\n            let node = this.sol.pop();\n            if (this.visited[node]) {\n                this.dfs2(node, compon);\n                compon++;\n            }\n        }\n\n        // Count the in-degrees of each component\n        for (let i = 1; i <= n; ++i) {\n            for (let neighbor of this.graph[i]) {\n                if (this.conne[i] !== this.conne[neighbor]) {\n                    this.in_degree[this.conne[neighbor]]++;\n                }\n            }\n        }\n\n        // Count components with no incoming edges\n        let zero_in_degree = 0;\n        for (let i = 0; i < compon; ++i) {\n            if (this.in_degree[i] === 0) {\n                zero_in_degree++;\n            }\n        }\n\n        // If there are more than 1 component with no incoming edges, return 0\n        if (zero_in_degree > 1) {\n            return 0;\n        } else {\n            let count = 0;\n            for (let i = 1; i <= n; ++i) {\n                if (this.in_degree[this.conne[i]] === 0) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}