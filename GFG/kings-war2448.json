{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702876,
            "title": "King's War",
            "titleSlug": "kings-war2448",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr[]</strong> where each element arr[i] represents the power of the i-th enemy. You can only defeat enemies with the highest and lowest power, and each soldier can defeat only one enemy. Your task is to calculate the number of soldiers required.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> The array may contain duplicate values.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 5]\n<strong>Output: </strong>0\n<strong>Explanatation: </strong>The king will itself be able to defeat all the enemies.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 5]\n<strong>Output: </strong>1</span>\n<span style=\"font-size: 18px;\"><strong>Explanatation: </strong></span><span style=\"font-size: 18px;\">The king will defeat enemies with power 1 and 5, and he will need 1 soldier to defeat the enemy with power 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span><br />&nbsp;<br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6 </sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` representing the power of enemies, determine the number of soldiers required to defeat the remaining enemies after the king defeats the enemies with the highest and lowest power. Each soldier can defeat only one enemy. Note that the array may contain duplicate values.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 5]",
                        "output": "0",
                        "explanation": "The king defeats the enemy with power 1 and the enemy with power 5. Since there are no other enemies, no soldiers are needed."
                    },
                    {
                        "input": "[1, 2, 5]",
                        "output": "1",
                        "explanation": "The king defeats the enemy with power 1 and the enemy with power 5.  The remaining enemy has power 2, requiring 1 soldier to defeat."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Count the occurrences of the strongest and weakest powers, then think about the soldiers required.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the number of soldiers required\n    int findRequiredSoldiers(vector<int>& arr) {\n        if (arr.empty())\n            return 0; // Edge case: Empty array\n\n        int maxVal = INT_MIN;\n        int minVal = INT_MAX;\n        int maxCount = 0;\n        int minCount = 0;\n\n        // Traverse the array to find max, min and their counts\n        for (int num : arr) {\n            if (num > maxVal) {\n                maxVal = num;\n                maxCount = 1;\n            } else if (num == maxVal) {\n                maxCount++;\n            }\n\n            if (num < minVal) {\n                minVal = num;\n                minCount = 1;\n            } else if (num == minVal) {\n                minCount++;\n            }\n        }\n\n        int total = arr.size();\n\n        // If maxVal and minVal are the same, all elements are the same\n        if (maxVal == minVal) {\n            // All enemies are killed by king only\n            return 0;\n        }\n\n        // Return total number of elements minus the sum of counts of max and min\n        // elements\n        return total - (maxCount + minCount);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\nclass Solution {\n\n    public static int findRequiredSoldiers(int arr[]) {\n        if (arr.length == 0) return 0; // Edge case: Empty array\n\n        int maxVal = Integer.MIN_VALUE;\n        int minVal = Integer.MAX_VALUE;\n        int maxCount = 0;\n        int minCount = 0;\n\n        // Traverse the array to find max, min and their counts\n        for (int num : arr) {\n            if (num > maxVal) {\n                maxVal = num;\n                maxCount = 1;\n            } else if (num == maxVal) {\n                maxCount++;\n            }\n\n            if (num < minVal) {\n                minVal = num;\n                minCount = 1;\n            } else if (num == minVal) {\n                minCount++;\n            }\n        }\n\n        int total = arr.length;\n\n        // If maxVal and minVal are the same, all elements are the same\n        if (maxVal == minVal) {\n            // All enemies are killed by king only\n            return 0;\n        }\n\n        // Return total number of elements minus the sum of counts of max and min\n        // elements\n        return total - (maxCount + minCount);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findRequiredSoldiers(self, arr):\n        if not arr:  # Edge case: Empty array\n            return 0\n\n        maxVal = float('-inf')\n        minVal = float('inf')\n        maxCount = 0\n        minCount = 0\n\n        # Traverse the array to find max, min, and their counts\n        for num in arr:\n            if num > maxVal:\n                maxVal = num\n                maxCount = 1\n            elif num == maxVal:\n                maxCount += 1\n\n            if num < minVal:\n                minVal = num\n                minCount = 1\n            elif num == minVal:\n                minCount += 1\n\n        total = len(arr)\n\n        # If maxVal and minVal are the same, all elements are the same\n        if maxVal == minVal:\n            # All enemies are killed by king only\n            return 0\n\n        # Return total number of elements minus the sum of counts of max and min elements\n        return total - (maxCount + minCount)\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find the number of soldiers required\n    findRequiredSoldiers(arr) {\n        if (arr.length === 0) return 0; // Edge case: Empty array\n\n        let maxVal = -Infinity;\n        let minVal = Infinity;\n        let maxCount = 0;\n        let minCount = 0;\n\n        // Traverse the array to find max, min, and their counts\n        for (const num of arr) {\n            if (num > maxVal) {\n                maxVal = num;\n                maxCount = 1;\n            } else if (num === maxVal) {\n                maxCount++;\n            }\n\n            if (num < minVal) {\n                minVal = num;\n                minCount = 1;\n            } else if (num === minVal) {\n                minCount++;\n            }\n        }\n\n        const total = arr.length;\n\n        // If maxVal and minVal are the same, all elements are the same\n        if (maxVal === minVal) {\n            // All enemies are killed by king only\n            return 0;\n        }\n\n        // Return total number of elements minus the sum of counts of max and min\n        // elements\n        return total - (maxCount + minCount);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}