{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704512,
            "title": "Knapsack with Duplicate Items",
            "titleSlug": "knapsack-with-duplicate-items4201",
            "content": "<p><span style=\"font-size: 18px;\">Given a set of items, each with a weight and a value, represented by the array <strong>wt</strong> and&nbsp;<strong>val</strong> respectively. Also, a knapsack with a weight limit <strong>capacity</strong>.<br />The task is to fill the knapsack in such a way that we can get the maximum profit. Return the maximum profit.<br /><strong>Note:</strong> Each item can be taken any number of times.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> val = [1, 1], wt = [2, 1], capacity = 3\n<strong>Output:</strong> 3\n<strong>Explanation: </strong></span><span >The optimal choice is to pick the 2nd element 3 times.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>val[] = [6, 1, 7, 7], wt[] = [1, 3, 4, 5], capacity = 8\n<strong>Output:</strong> 48\n<strong>Explanation: </strong>The optimal choice is to pick the 1st element 8 times.<br /></span></pre>\n<pre><strong>Input: </strong>val[] = [6, 8, 7, 100], wt[] = [2, 3, 4, 5], capacity = 1\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>We can't pick any element .hence, total profit is 0.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= val.size() = wt.size() &lt;= 1000<br />1 &lt;= capacity &lt;= 1000<br />1 &lt;= val[i], wt[i] &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of items, where each item has a weight and a value represented by the arrays `wt` and `val` respectively, and a knapsack with a weight limit `capacity`. The goal is to fill the knapsack in a way that maximizes the total value of the items included. You can take each item any number of times. Return the maximum possible value.",
                "constraints": [
                    "1 <= val.size() = wt.size() <= 1000",
                    "1 <= capacity <= 1000",
                    "1 <= val[i], wt[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "val = [1, 1], wt = [2, 1], capacity = 3",
                        "output": "3",
                        "explanation": "The optimal choice is to pick the second element (weight 1, value 1) three times, resulting in a total value of 3."
                    },
                    {
                        "input": "val = [6, 1, 7, 7], wt = [1, 3, 4, 5], capacity = 8",
                        "output": "48",
                        "explanation": "The optimal choice is to pick the first element (weight 1, value 6) eight times, resulting in a total value of 48."
                    },
                    {
                        "input": "val = [6, 8, 7, 100], wt = [2, 3, 4, 5], capacity = 1",
                        "output": "0",
                        "explanation": "Since the capacity is 1, and all item weights are greater than 1, no items can be selected. Therefore, the maximum value is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use the 0/1 knapsack problem's concept. Think of the use of dynamic programming with a single array to iteratively update the maximum value achievable for each weight limit up to the given capacity.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to solve 0/1 knapsack problem\n    int knapSack(vector<int>& val, vector<int>& wt, int capacity) {\n        int N = val.size();\n        // Creating a vector to store maximum values for each weight\n        vector<int> dp(capacity + 1, 0);\n        int ans = 0;\n\n        // looping through each weight\n        for (int i = 0; i < capacity + 1; i++)\n            // looping through each item\n            for (int j = 0; j < N; j++)\n                // checking if current weight is less than or equal to the maximum\n                // weight\n                if (wt[j] <= i)\n                    // updating the maximum value for the current weight\n                    dp[i] = max(dp[i], dp[i - wt[j]] + val[j]);\n        // returning the maximum value for the maximum weight\n        return dp[capacity];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static int knapSack(int val[], int wt[], int capacity) {\n        int N = val.length;\n        // Creating an array to store the maximum value for each weight\n        int dp[] = new int[capacity + 1];\n        int ans = 0;\n\n        for (int i = 0; i < capacity + 1; i++) // Iterating through all possible weights\n            for (int j = 0; j < N; j++)        // Iterating through all items\n                if (wt[j] <= i) // If the weight of the item is less than or equal to\n                                // the current weight\n                    dp[i] = Math.max(\n                        dp[i], dp[i - wt[j]] + val[j]); // Updating the maximum value\n                                                        // for the current weight\n        return dp[capacity]; // Returning the maximum value for the total weight\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function template for Python\n\n\nclass Solution:\n    # Function to solve the knapsack problem\n    def knapSack(self, val, wt, capacity):\n        N = len(val)\n        # Create a dynamic programming array to store the values\n        dp = [0 for i in range(capacity + 1)]\n\n        ans = 0\n\n        # Iterate through each weight\n        for i in range(capacity + 1):\n            # Iterate through each item\n            for j in range(N):\n                # Check if the weight of the item is less than or equal to the current weight\n                if (wt[j] <= i):\n                    # Update the maximum value for the current weight\n                    dp[i] = max(dp[i], dp[i - wt[j]] + val[j])\n\n        # Return the maximum value for the given weight\n        return dp[capacity]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number} capacity\n * @param {number[]} val\n * @param {number[]} wt\n * @return {number}\n */\n\nclass Solution {\n\n    // knapSack function to solve the 0/1 Knapsack problem\n    knapSack(val, wt, capacity) {\n        // N is the number of items (length of the val and wt arrays)\n        let N = val.length;\n\n        // Initialize a 1D dp array to store the maximum value achievable for each\n        // weight from 0 to capacity\n        let dp = new Array(capacity + 1).fill(0);\n\n        // Variable to store the final answer (though it's not used in the code)\n        let ans = 0;\n\n        // Loop over all possible capacities from 0 to the given capacity\n        for (let i = 0; i < capacity + 1; i++) {\n            // Loop over all items\n            for (let j = 0; j < N; j++) {\n                // If the current item can fit in the knapsack (i.e., its weight is less\n                // than or equal to the current capacity)\n                if (wt[j] <= i) {\n                    // Update dp[i] to the maximum of its current value or the value by\n                    // including the j-th item\n                    dp[i] = Math.max(dp[i], dp[i - wt[j]] + val[j]);\n                }\n            }\n        }\n\n        // Return the maximum value achievable with the given capacity\n        return dp[capacity];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}