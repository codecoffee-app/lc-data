{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704853,
            "title": "Knight Walk",
            "titleSlug": "knight-walk4521",
            "content": "<p><span style=\"font-size: 18px;\">Given a square chessboard, the initial position of Knight and position of a target. Find out the minimum steps a Knight will take to reach the target position.If it cannot reach the target position return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong><br />The initial and the target position co-ordinates of&nbsp;Knight have been given accoring to 1-base indexing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=6\nknightPos[ ] = {4, 5}\ntargetPos[ ] = {1, 1}\n<strong>Output:</strong>\n3\n<strong>Explanation:</strong>\n<img src=\"https://media.geeksforgeeks.org/wp-content/uploads/KnightChess.jpg\" />\nKnight takes 3 step to reach from\n(4, 5) to (1, 1):\n(4, 5) -&gt; (5, 3) -&gt; (3, 2) -&gt; (1, 1). </span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=8\nknightPos[ ] = {7, 7}\ntargetPos[ ] = {1, 5}\n<strong>Output:</strong>\n4\n<strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">Knight takes 4 steps to reach from\n(7, 7) to (1, 5):\n(4, 5) -&gt; (6, 5) -&gt; (5, 3) -&gt; (7, 2) -&gt; (1, 5).</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>minStepToReachTarget()</strong>&nbsp;which takes the inital position of Knight (KnightPos), the target position of Knight (TargetPos) and the size of the chess board (N) as an input parameters&nbsp;and returns the minimum number of steps required by the knight to reach from its current position to the given target position.If it cannot reach the target position return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N<sup>2</sup>).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N<sup>2</sup>).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 1000<br />1 &lt;= Knight_pos(X, Y), Targer_pos(X, Y)&nbsp;&lt;= N</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">This problem can be seen as shortest path in unweighted graph. Therefore we use <a href=\"https://www.geeksforgeeks.org/breadth-first-traversal-for-a-graph/\">BFS</a> to solve this problem. We try all 8 possible positions where a Knight can reach from its position. If reachable position is not already visited and is inside the board, we push this state into queue with distance 1 more than its parent state. Finally we return distance of target position, when it gets pop out from queue. </span></p>\n\n<p><span style=\"font-size:18px\">Also, </span></p>\n\n<p><span style=\"font-size:18px\">Use of DFS&nbsp;to traverse every possible comination for the knight from xth and yth position.</span></p>\n\n<p><span style=\"font-size:18px\">Every possible position is (x+dx,x+dy).</span></p>\n\n<p><span style=\"font-size:18px\">int dx[8] = {2, 2, -2, -2, 1, 1, -1, -1};<br />\nint dy[8] = {-1, 1, 1, -1, 2, -2, 2, -2};</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "goldman-sachs",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\nprivate:\r\n\tstruct cell{\r\n\t\tint x; // x-coordinate of current position\r\n\t\tint y; // y-coordinate of current position\r\n\t\tint steps; // number of steps taken so far\r\n\t};\r\npublic:\r\n\t//Function to check if a position is valid or not.\r\n\tbool isValid(int x, int y, int N){\r\n\t\treturn (x >=0 and x < N and y >=0 and y < N); //check if x and y are within bounds\r\n\t}\r\n\t\r\n\t//Function to find the minimum number of steps to reach the target position.\r\n\tint minStepToReachTarget(vector<int>&KnightPos, vector<int>&TargetPos, int N){\r\n\t\tKnightPos[0]--; //decrement the x-coordinate of Knight's position\r\n\t\tKnightPos[1]--; //decrement the y-coordinate of Knight's position\r\n\t\tTargetPos[0]--; //decrement the x-coordinate of Target's position\r\n\t\tTargetPos[1]--; //decrement the y-coordinate of Target's position\r\n\t\tvector<vector<bool>>vis(N, vector<bool>(N, false)); //create a matrix to keep track of visited positions\r\n\t\tvector<vector<int>>dxy = {{2,1},{2,-1},{-2,1},{-2,-1},{1,2},{1,-2},{-1,2},{-1,-2}}; //possible x and y movements for the Knight\r\n\t\tqueue<cell>q; //create a queue to perform BFS\r\n\t\tq.push({KnightPos[0], KnightPos[1], 0}); //push the initial position of Knight with steps=0\r\n\t\tvis[KnightPos[0]][KnightPos[1]] = true; //mark the initial position as visited\r\n\t\twhile(!q.empty()){\r\n\t\t\tint x = q.front().x; //get the x-coordinate of current position\r\n\t\t\tint y = q.front().y; //get the y-coordinate of current position\r\n\t\t\tint steps = q.front().steps; //get the number of steps taken so far\r\n\t\t\tq.pop(); //remove the current position from the queue\r\n\t\t\tif(x == TargetPos[0] and y == TargetPos[1]) //if current position is the target position\r\n\t\t\t\treturn steps; //return the number of steps taken to reach the target position\r\n\t\t\t//check all possible movements from the current position\r\n\t\t\tfor(int i = 0; i < dxy.size(); i++){\r\n\t\t\t\tint n_x = x + dxy[i][0]; //calculate the new x-coordinate\r\n\t\t\t\tint n_y = y + dxy[i][1]; //calculate the new y-coordinate\r\n\t\t\t\tif(isValid(n_x, n_y, N) and !vis[n_x][n_y]){ //if the new position is valid and not visited\r\n\t\t\t\t\tq.push({n_x, n_y, steps+1}); //push the new position with updated steps\r\n\t\t\t\t\tvis[n_x][n_y] = true; //mark the new position as visited\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1; //if target position is not reachable, return -1\r\n\t}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end Complete function Template for JAVA\r\n\r\nclass Solution\r\n{\r\n    boolean isValid(int x, int y, int N){\r\n\t\treturn (x >=0 && x < N && y >=0 && y < N);\r\n\t}\r\n\t\r\n    public int minStepToReachTarget(int KnightPos[], int TargetPos[], int N)\r\n    {\r\n        KnightPos[0]--;\r\n\t\tKnightPos[1]--;\r\n\t\tTargetPos[0]--;\r\n\t\tTargetPos[1]--;\r\n\t\t\r\n\t\t\r\n\t\t// x and y direction, where a knight can move\r\n        int dx[] = { -2, -1, 1, 2, -2, -1, 1, 2 };\r\n        int dy[] = { -1, -2, -2, -1, 1, 2, 2, 1 };\r\n        \r\n\t\tboolean vis[][] = new boolean[N][N];\r\n\t\t\r\n\t\tQueue<ArrayList<Integer>> q = new LinkedList<>(); \r\n\t\tArrayList<Integer> temp = new ArrayList<>();\r\n\t\ttemp.add(KnightPos[0]);\r\n\t\ttemp.add(KnightPos[1]);\r\n\t\ttemp.add(0);\r\n\t\tq.add(temp);\r\n\t\t\r\n\t\tvis[KnightPos[0]][KnightPos[1]] = true;\r\n\t\t\r\n\t\twhile(!q.isEmpty())\r\n\t\t{\r\n\t\t    ArrayList<Integer> temp2 = q.poll();\r\n\t\t\tint x = temp2.get(0);\r\n\t\t\tint y = temp2.get(1);\r\n\t\t\tint steps = temp2.get(2);\r\n\t\t\t\r\n\t\t\tif(x == TargetPos[0] && y == TargetPos[1])\r\n\t\t\t\treturn steps;\r\n\t\t\t\t\r\n\t\t\tfor(int i=0; i<8; i++)\r\n\t\t\t{\r\n\t\t\t\tint n_x = x + dx[i];\r\n\t\t\t\tint n_y = y + dy[i];\r\n\t\t\t\tif(isValid(n_x, n_y, N) && !vis[n_x][n_y])\r\n\t\t\t\t{\r\n\t\t\t\t    ArrayList<Integer> temp1 = new ArrayList<>();\r\n            \t\ttemp1.add(n_x);\r\n            \t\ttemp1.add(n_y);\r\n            \t\ttemp1.add(steps+1);\r\n\t\t\t\t\tq.add(temp1);\r\n\t\t\t\t\tvis[n_x][n_y] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import deque\r\nclass Solution:\r\n    def isValid(self, x, y, N):\r\n        return (x >= 0 and x < N and y >= 0 and y < N)\r\n    def minStepToReachTarget(self, KnightPos, TargetPos, N):\r\n        dxy = [[2,1],[2,-1],[-2,1],[-2,-1],[1,2],[1,-2],[-1,2],[-1,-2]]\r\n        KnightPos[0]-=1\r\n        KnightPos[1]-=1\r\n        TargetPos[0]-=1\r\n        TargetPos[1]-=1\r\n        vis = [[False for i in range(N)] for j in range(N)]\r\n        q = deque()\r\n        q.append([KnightPos[0], KnightPos[1], 0])\r\n        vis[KnightPos[0]][KnightPos[1]] = True\r\n        while(len(q)):\r\n            cur = q.popleft()\r\n            x = cur[0]\r\n            y = cur[1]\r\n            steps = cur[2]\r\n            if(x == TargetPos[0] and y == TargetPos[1]):\r\n                return steps\r\n            for i in range(8):\r\n                n_x = x + dxy[i][0]\r\n                n_y = y + dxy[i][1]\r\n                if(self.isValid(n_x, n_y, N) and vis[n_x][n_y] == False):\r\n                    q.append([n_x, n_y, steps + 1])\r\n                    vis[n_x][n_y] = True\r\n        return -1",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} KnightPos\n * @param {number[]} TargetPos\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to find minimum number of steps required to reach the target position by the Knight.\n    minStepToReachTarget(KnightPos, TargetPos, N)\n    {\n        let dxy = [[2,1],[2,-1],[-2,1],[-2,-1],[1,2],[1,-2],[-1,2],[-1,-2]];\n        KnightPos[0]-=1;\n        KnightPos[1]-=1;\n        TargetPos[0]-=1;\n        TargetPos[1]-=1;\n        let vis = Array.from({ length: N }, () => Array(N).fill(false));\n        let q = [];\n        q.push([KnightPos[0], KnightPos[1], 0]);\n        vis[KnightPos[0]][KnightPos[1]] = true;\n        while(q.length){\n            let cur = q.shift();\n            let x = cur[0];\n            let y = cur[1];\n            let steps = cur[2];\n            if(x == TargetPos[0] && y == TargetPos[1]){\n                return steps;\n            }\n            for(let i = 0; i < 8; i++){\n                let n_x = x + dxy[i][0];\n                let n_y = y + dxy[i][1];\n                if(this.isValid(n_x, n_y, N) && !vis[n_x][n_y]){\n                    q.push([n_x, n_y, steps + 1]);\n                    vis[n_x][n_y] = true;\n                }\n            }\n        }\n        return -1;\n    }\n    \n    isValid(x, y, N){\n        return (x >= 0 && x < N && y >= 0 && y < N);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Function to check if a position is valid or not.\n    public bool IsValid(int x, int y, int N)\n    {\n        return (x >= 0 && x < N && y >= 0 && y < N); //check if x and y are within bounds\n    }\n    \n    //Function to find the minimum number of steps to reach the target position.\n    public int minStepToReachTarget(List<int> KnightPos, List<int> TargetPos, int N)\n    {\n        KnightPos[0]--; //decrement the x-coordinate of Knight's position\n        KnightPos[1]--; //decrement the y-coordinate of Knight's position\n        TargetPos[0]--; //decrement the x-coordinate of Target's position\n        TargetPos[1]--; //decrement the y-coordinate of Target's position\n        bool[][] vis = new bool[N][];\n        for (int i = 0; i < N; i++)\n        {\n            vis[i] = new bool[N];\n            for (int j = 0; j < N; j++)\n            {\n                vis[i][j] = false;\n            }\n        }\n        int[][] dxy = new int[8][] { new int[] { 2, 1 }, new int[] { 2, -1 }, new int[] { -2, 1 }, new int[] { -2, -1 },\n                                    new int[] { 1, 2 }, new int[] { 1, -2 }, new int[] { -1, 2 }, new int[] { -1, -2 } };\n        Queue<(int, int, int)> q = new Queue<(int, int, int)>();\n        q.Enqueue((KnightPos[0], KnightPos[1], 0)); //push the initial position of Knight with steps=0\n        vis[KnightPos[0]][KnightPos[1]] = true; //mark the initial position as visited\n        while (q.Count > 0)\n        {\n            int x = q.Peek().Item1; //get the x-coordinate of current position\n            int y = q.Peek().Item2; //get the y-coordinate of current position\n            int steps = q.Peek().Item3; //get the number of steps taken so far\n            q.Dequeue(); //remove the current position from the queue\n            if (x == TargetPos[0] && y == TargetPos[1]) //if current position is the target position\n                return steps; //return the number of steps taken to reach the target position\n            //check all possible movements from the current position\n            for (int i = 0; i < dxy.Length; i++)\n            {\n                int n_x = x + dxy[i][0]; //calculate the new x-coordinate\n                int n_y = y + dxy[i][1]; //calculate the new y-coordinate\n                if (IsValid(n_x, n_y, N) && !vis[n_x][n_y]) //if the new position is valid and not visited\n                {\n                    q.Enqueue((n_x, n_y, steps + 1)); //push the new position with updated steps\n                    vis[n_x][n_y] = true; //mark the new position as visited\n                }\n            }\n        }\n        return -1; //if target position is not reachable, return -1\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}