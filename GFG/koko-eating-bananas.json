{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712107,
            "title": "Koko Eating Bananas",
            "titleSlug": "koko-eating-bananas",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[] </strong>of integers where each element represents a pile of bananas, and Koko has<strong> k </strong>hours to finish all the piles, find the <strong>minimum</strong> number of bananas (s) Koko must eat per hour to finish all the bananas within <strong>k</strong> hours. Each hour, Koko chooses a pile and eats <strong>s</strong> bananas from it. If the pile has fewer than <strong>s</strong> bananas, she consumes the entire pile for that hour and won't eat any other banana during that hour.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span><span style=\"font-size: 18px;\"> </span></strong><span style=\"font-size: 18px;\"><span >arr[]</span><span > = [3, 6, 7, 11] , k = 8</span>\n<strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">4<br /></span><strong><span >Explanation: </span></strong><span style=\"font-size: 18.6667px;\">Koko eats at least 4 bananas per hour to finish all piles within 8 hours, as she can consume each pile in 1 + 2 + 2 + 3 = 8 hours.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [30, 11, 23, 4, 20], k = 5\n<strong>Output: </strong></span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">30<br /></span><strong style=\"font-size: 18px;\">Explanation:</strong><span style=\"font-size: 18px;\"> With 30 bananas per hour, Koko completes each pile in 1 hour, totaling 5 hours, which matches k = 5.</span></span></pre>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [5, 10, 15, 20], k = 7\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> At 10 bananas per hour, Koko finishes in 7 hours, just within the k = 7 limit.</span></span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraint:</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= arr.size() &lt;= 10<sup>5&nbsp;</sup><br />1 &lt;= arr[i] &lt;= 10</span><sup><span style=\"font-size: 18px;\">4</span></sup><br /><span style=\"font-size: 18px;\">arr.size() &lt;= k &lt;= 2*10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Koko loves to eat bananas. Given an array `arr[]` representing piles of bananas, where `arr[i]` is the number of bananas in the i-th pile, and an integer `k` representing the number of hours Koko has to eat all the bananas, determine the minimum number of bananas `s` Koko must eat per hour to finish all piles within `k` hours.  If a pile has fewer than `s` bananas, Koko eats the entire pile in that hour and doesn't eat from another pile.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= arr[i] <= 10^4",
                    "arr.length <= k <= 2 * 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr = [3, 6, 7, 11], k = 8",
                        "output": "4",
                        "explanation": "Koko can eat at a rate of 4 bananas per hour. This allows her to finish the piles in 1 + 2 + 2 + 3 = 8 hours, meeting the time constraint."
                    },
                    {
                        "input": "arr = [30, 11, 23, 4, 20], k = 5",
                        "output": "30",
                        "explanation": "Koko can eat at a rate of 30 bananas per hour. This allows her to finish each pile in 1 hour, resulting in a total of 5 hours which matches the time contraint."
                    },
                    {
                        "input": "arr = [5, 10, 15, 20], k = 7",
                        "output": "10",
                        "explanation": "Koko can eat at a rate of 10 bananas per hour. This allows her to finish all the piles in 7 hours, which meets the time constraint."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Perform a binary search on possible values of the divisor to minimize the maximum sum of hours required.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [
            "bloomberg",
            "amazon",
            "microsoft",
            "walmart",
            "adobe",
            "arcesium",
            "uber"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to solve the problem\n    int kokoEat(vector<int>& arr, int k) {\n        // Initialize the lower and upper bound for binary search\n        int l = 1;\n        int h = *max_element(arr.begin(), arr.end());\n\n        // Perform binary search\n        while (l < h) {\n\n            // Choose the middle value between l and h\n            int mid = l + (h - l) / 2;\n\n            // Calculate the total number of hours required to eat all piles\n            int sum = 0;\n            for (auto p : arr) {\n                sum += ceil((double)p / mid);\n            }\n\n            // If the total hours is less than or equal to the target hours, update h\n            if (sum <= k)\n                h = mid;\n            // Otherwise, update l\n            else\n                l = mid + 1;\n        }\n\n        // Return the minimum k that satisfies the target hours\n        return l;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int kokoEat(int[] arr, int k) {\n        // Initialize the lower and upper bounds for binary search\n        int l = 1;\n        int h = Arrays.stream(arr)\n                    .max()\n                    .getAsInt(); // Find the maximum element in the array\n\n        // Perform binary search\n        while (l < h) {\n            // Choose the middle value between l and h\n            int mid = l + (h - l) / 2;\n\n            // Calculate the total number of hours required to process all piles\n            int sum = 0;\n            for (int p : arr) {\n                sum += Math.ceil((double)p / mid);\n            }\n\n            // If the total hours is less than or equal to the target hours, update h\n            if (sum <= k) h = mid;\n            // Otherwise, update l\n            else\n                l = mid + 1;\n        }\n\n        // Return the minimum k that satisfies the target hours\n        return l;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nimport math\n\n\nclass Solution:\n\n    def kokoEat(self, arr, k):\n        # Initialize the lower and upper bound for binary search\n        l = 1\n        h = max(arr)  # Find the maximum element in the array\n\n        # Perform binary search\n        while l < h:\n            # Choose the middle value between l and h\n            mid = l + (h - l) // 2\n\n            # Calculate the total number of hours required to process all piles\n            total_hours = 0\n            for p in arr:\n                total_hours += math.ceil(p / mid)\n\n            # If the total hours is less than or equal to the target hours, update h\n            if total_hours <= k:\n                h = mid\n            # Otherwise, update l\n            else:\n                l = mid + 1\n\n        # Return the minimum value of k that satisfies the target hours\n        return l\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    kokoEat(arr, k) {\n        // Initialize the lower and upper bounds for binary search\n        let l = 1;\n        let h = Math.max(...arr); // Find the maximum element in the array\n\n        // Perform binary search\n        while (l < h) {\n            // Choose the middle value between l and h\n            let mid = Math.floor(l + (h - l) / 2);\n\n            // Calculate the total number of hours required to process all piles\n            let totalHours = 0;\n            for (let p of arr) {\n                totalHours += Math.ceil(p / mid);\n            }\n\n            // If the total hours is less than or equal to the target hours, update h\n            if (totalHours <= k) {\n                h = mid;\n            } else {\n                // Otherwise, update l\n                l = mid + 1;\n            }\n        }\n\n        // Return the minimum value of k that satisfies the target hours\n        return l;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}