{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 861885,
            "title": "Kth common ancestor in BST",
            "titleSlug": "kth-common-ancestor-in-bst",
            "content": "<p><span >Given a BST with <strong>n (n&gt;=2)</strong> nodes, find the <strong>kth</strong> common ancestor of nodes <strong>x</strong> and <strong>y</strong> in the given tree. Return <strong>-1</strong> if kth ancestor does not exist.<br /></span></p>\n<p><span >Nodes x and y will always be <strong>present</strong> in the input of a BST, and <strong>x != y</strong>.</span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>Input: </strong>\nInput tree<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/861885/Web/Other/blobid0_1712119495.png\" alt=\"\" width=\"371\" height=\"226\" /><br />k = 2, x = 40, y = 60 <br /><strong>Output:</strong><br />30<br /><strong>Explanation:</strong><br />Their 2nd common ancestor is 30.</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input: </strong><br />Input tree\n<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/861885/Web/Other/blobid1_1712119495.png\" alt=\"\" width=\"391\" height=\"212\" /><br />k = 2, x = 40, y = 60<br /><strong>Output:</strong><br />-1<br /><strong>Explanation:</strong><br />LCA of 40 and 60 is 50, which is root itself. There does not exists 2nd common ancestor in this case.<br /></span></pre>\n<div><span ><strong>Your task :</strong></span></div>\n<div><span >You don't have to read input or print anything. Your task is to complete the function&nbsp;<strong>kthCommonAncestor</strong><strong>()</strong> that takes the <strong>root</strong> of the tree, <strong>k</strong>, <strong>x</strong> and <strong>y</strong> as input and returns the kth common ancestor of x and y.<br /></span></div>\n<div>&nbsp;</div>\n<div><span ><strong>Expected Time Complexity:&nbsp;</strong>O(Height of the Tree)</span></div>\n<div><span ><strong>Expected Space Complexity:&nbsp;</strong>O(Height of the Tree)</span></div>\n<div>&nbsp;</div>\n<div><span ><strong>Your Task :</strong></span></div>\n<div><span >1 &lt;= n, k &lt;= 10<sup>5</sup><br />1 &lt;= node-&gt;data, x, y &lt;= 10<sup>9</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) with *n* (*n* >= 2) nodes, find the *k*th common ancestor of nodes *x* and *y* in the tree.  Nodes *x* and *y* are guaranteed to be present in the BST, and *x* != *y*. Return -1 if the *k*th ancestor does not exist.",
                "constraints": [
                    "1 <= n, k <= 10^5",
                    "1 <= node->data, x, y <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "BST: [20, 10, 30, 5, 15, 25, 35, null, null, 12, 18, null, null, null, null], k = 2, x = 12, y = 18",
                        "output": "20",
                        "explanation": "The Lowest Common Ancestor (LCA) of 12 and 18 is 15. The ancestor of 15 is 10 and the ancestor of 10 is 20. Thus the 2nd common ancestor is 20."
                    },
                    {
                        "input": "BST: [50, 40, 60, 30, null, null, 70, null, null, null, null, null, null], k = 2, x = 40, y = 60",
                        "output": "-1",
                        "explanation": "The Lowest Common Ancestor (LCA) of 40 and 60 is 50, which is the root.  There is no second common ancestor in this case."
                    },
                    {
                        "input": "BST: [5,3,6,2,4,null,null,1], k = 1, x = 1, y = 4",
                        "output": "3",
                        "explanation": "The Lowest Common Ancestor (LCA) of 1 and 4 is 3. Thus the 1st common ancestor is 3."
                    },
                    {
                        "input": "BST: [5,3,6,2,4,null,null,1], k = 2, x = 1, y = 4",
                        "output": "5",
                        "explanation": "The Lowest Common Ancestor (LCA) of 1 and 4 is 3. The ancestor of 3 is 5. Thus the 2nd common ancestor is 5."
                    },
                    {
                        "input": "BST: [5,3,6,2,4,null,null,1], k = 3, x = 1, y = 4",
                        "output": "-1",
                        "explanation": "The Lowest Common Ancestor (LCA) of 1 and 4 is 3. The ancestor of 3 is 5. There is no third common ancestor in this case."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Find out the LCA first and then traverse till LCA from the root.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\n    public:\n    Node* LCA(Node *root, int x, int y)\n    {\n        // base case\n        if(root==NULL)\n            return NULL;\n        \n        //If both x and y are smaller than data at current node, we call \n        //the function recursively for finding LCA in the left subtree. \n        if(x<root->data and y<root->data)\n        {\n            return LCA(root->left,x,y);\n        }\n        //If both x and y are greater than data at current node, we call \n        //the function recursively for finding LCA in the right subtree. \n        if(x>root->data and y > root->data)\n        {\n            return LCA(root->right,x,y);\n        }\n        \n        //returning the lowest common ancestor.\n        return root;\n    }\n    \n    void pathToNode(Node *root, Node *node, vector<int>&path)\n    {\n        path.push_back(root->data);\n        if(root->data==node->data)\n            return;\n        else if(node->data>root->data)\n            pathToNode(root->right,node,path);\n        else\n            pathToNode(root->left,node,path);\n    }\n    \n    int kthCommonAncestor(Node *root, int k,int x, int y)\n    {\n        Node *lca=LCA(root,x,y);\n        vector<int>path;\n        pathToNode(root,lca,path);\n        reverse(path.begin(),path.end());\n        if(path.size()<k)\n            return -1;\n        return path[k-1];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    Node LCA(Node root, int x, int y) {\n        if (root == null) return null;\n\n        if (x < root.data && y < root.data) return LCA(root.left, x, y);\n\n        if (x > root.data && y > root.data) return LCA(root.right, x, y);\n\n        return root;\n    }\n\n    void pathToNode(Node root, Node node, ArrayList<Integer> path) {\n        path.add(root.data);\n\n        if (root.data == node.data)\n            return;\n        else if (node.data > root.data)\n            pathToNode(root.right, node, path);\n        else\n            pathToNode(root.left, node, path);\n    }\n\n    public int kthCommonAncestor(Node root, int k, int x, int y) {\n        Node lca = LCA(root, x, y);\n        ArrayList<Integer> path = new ArrayList<Integer>();\n        pathToNode(root, lca, path);\n        Collections.reverse(path); // equivalent of reverse method in C++\n\n        if (path.size() < k) return -1;\n\n        return path.get(k - 1); // equivalent of path[k-1] in C++\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "'''\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n'''\n\n\nclass Solution:\n\n    def LCA(self, root, x, y):\n        # base case\n        if root is None:\n            return None\n\n        # If both x and y are smaller than data at current node, we call\n        # the function recursively for finding LCA in the left subtree.\n        if x < root.data and y < root.data:\n            return self.LCA(root.left, x, y)\n\n        # If both x and y are greater than data at current node, we call\n        # the function recursively for finding LCA in the right subtree.\n        if x > root.data and y > root.data:\n            return self.LCA(root.right, x, y)\n\n        # returning the lowest common ancestor.\n        return root\n\n    def pathToNode(self, root, node, path):\n        path.append(root.data)\n        if root.data == node.data:\n            return\n        elif node.data > root.data:\n            self.pathToNode(root.right, node, path)\n        else:\n            self.pathToNode(root.left, node, path)\n\n    def kthCommonAncestor(self, root, k, x, y):\n        lca = self.LCA(root, x, y)\n        path = []\n        self.pathToNode(root, lca, path)\n        path.reverse()\n        if len(path) < k:\n            return -1\n        return path[k - 1]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    constructor() { this.path = []; }\n\n    LCA(root, x, y) {\n        if (root === null) return null;\n\n        if (x < root.data && y < root.data) {\n            return this.LCA(root.left, x, y);\n        }\n\n        if (x > root.data && y > root.data) {\n            return this.LCA(root.right, x, y);\n        }\n\n        return root;\n    }\n\n    pathToNode(root, node) {\n        if (root === null || node === null) return;\n\n        this.path.push(root.data);\n        if (root.data === node.data) {\n            return;\n        } else if (node.data > root.data) {\n            this.pathToNode(root.right, node);\n        } else {\n            this.pathToNode(root.left, node);\n        }\n    }\n\n    kthCommonAncestor(root, k, x, y) {\n        const lca = this.LCA(root, x, y);\n        this.path = [];\n        this.pathToNode(root, lca);\n        this.path.reverse();\n        if (this.path.length < k) return -1;\n        return this.path[k - 1];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}