{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702982,
            "title": "Kth distance",
            "titleSlug": "kth-distance3757",
            "content": "<p><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\">Given an unsorted array <strong>arr </strong>and a<strong> </strong>number <strong>k </strong>which is smaller than the size of the array. Return <strong>true</strong> if the array contains any duplicate within <strong>k </strong>distance throughout the array else <strong>false</strong>.</span></p>\n<p><strong><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Input:</strong> arr[] = [1, 2, 3, 4, 1, 2, 3, 4], k = 3</span><br /><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Output:</strong> false</span><br /><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Explanation:</strong> All duplicates are more than k distance away.</span></pre>\n<pre><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Input:</strong> arr[] = [1, 2, 3, 1, 4, 5], k = 3</span><br /><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Output:</strong> true</span><br /><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Explanation:</strong> 1 is repeated at distance 3.<br /></span></pre>\n<pre><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Input:</strong> arr[] = [6, 8, 4, 1, 8, 5, 7], k = 3</span><br /><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Output:</strong> true</span><br /><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Explanation:</strong> 8 is repeated at distance 3.</span></pre>\n<p><strong><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\">Constraints:<br /></span></strong><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\">1 &le; arr.size() &le; 10<sup>6</sup><br /></span><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\">1 &le; k &lt; arr.size()<br /></span><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\">1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array `arr` and a number `k` (where `k` is smaller than the size of the array), determine if the array contains any duplicate values within a distance of `k` from each other. Return `true` if such duplicates exist; otherwise, return `false`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= k < arr.size()",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 3, 4, 1, 2, 3, 4], k = 3",
                        "output": "false",
                        "explanation": "All duplicate elements in the array are separated by a distance greater than `k`."
                    },
                    {
                        "input": "arr[] = [1, 2, 3, 1, 4, 5], k = 3",
                        "output": "true",
                        "explanation": "The number 1 appears twice in the array, and the distance between its occurrences is 3, which is equal to `k`."
                    },
                    {
                        "input": "arr[] = [6, 8, 4, 1, 8, 5, 7], k = 3",
                        "output": "true",
                        "explanation": "The number 8 appears twice in the array, and the distance between its occurrences is 3, which is equal to `k`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The idea is to to add elements to the hash. We also remove elements that are at more than k distance from the current element. Following is the detailed algorithm.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n\n    bool checkDuplicatesWithinK(vector<int>& arr, int k) {\n        int n = arr.size();\n        // Creates an empty hashset\n        unordered_set<int> myset;\n\n        // Traverse the input array\n        for (int i = 0; i < n; i++) {\n            // If already present n hash, then we found\n            // a duplicate within k distance\n            if (myset.find(arr[i]) != myset.end())\n                return true;\n\n            // Add this item to hashset\n            myset.insert(arr[i]);\n\n            // Remove the k+1 distant item\n            if (i >= k)\n                myset.erase(arr[i - k]);\n        }\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean checkDuplicatesWithinK(int[] arr, int k) {\n        int n = arr.length;\n        // Creates an empty HashSet\n        HashSet<Integer> myset = new HashSet<>();\n\n        // Traverse the input array\n        for (int i = 0; i < n; i++) {\n            // If already present in hashset, then we found\n            // a duplicate within k distance\n            if (myset.contains(arr[i])) {\n                return true;\n            }\n\n            // Add this item to hashset\n            myset.add(arr[i]);\n\n            // Remove the k+1 distant item\n            if (i >= k) {\n                myset.remove(arr[i - k]);\n            }\n        }\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def checkDuplicatesWithinK(self, arr, k):\n        n = len(arr)\n        # Creates an empty set\n        myset = set()\n\n        # Traverse the input array\n        for i in range(n):\n            # If already present in set, then we found\n            # a duplicate within k distance\n            if arr[i] in myset:\n                return True\n\n            # Add this item to set\n            myset.add(arr[i])\n\n            # Remove the k+1 distant item\n            if i >= k:\n                myset.remove(arr[i - k])\n\n        return False\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n//Back-end complete function Template for javascript\nclass Solution {\n    checkDuplicatesWithinK(arr, k) {\n        const n = arr.length;\n        // Creates an empty Set\n        const myset = new Set();\n\n        // Traverse the input array\n        for (let i = 0; i < n; i++) {\n            // If already present in set, then we found\n            // a duplicate within k distance\n            if (myset.has(arr[i])) {\n                return true;\n            }\n\n            // Add this item to set\n            myset.add(arr[i]);\n\n            // Remove the k+1 distant item\n            if (i >= k) {\n                myset.delete(arr[i - k]);\n            }\n        }\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}