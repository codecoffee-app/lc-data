{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700309,
            "title": "Kth element in Matrix",
            "titleSlug": "kth-element-in-matrix",
            "content": "<p><span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\">Given a&nbsp;N&nbsp;x N&nbsp;matrix, where every row and column is sorted in non-decreasing order. Find the kth smallest element in the matrix.</span></span></p>\n\n<div><span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Example 1:</strong></span></span></div>\n\n<pre>\n<span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Input:\n</strong>N = 4\nmat[][] =     {{16, 28, 60, 64},\n\\t\\t\\t {22, 41, 63, 91},\n\\t\\t\\t {27, 50, 87, 93},\n\\t\\t\\t {36, 78, 87, 94 }}\nK = 3\n<strong>Output: </strong>27\n<strong>Explanation: </strong>27 is the 3<sup>rd</sup> smallest element.</span></span></pre>\n\n<p>&nbsp;</p>\n\n<div><span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Example 2:</strong></span></span></div>\n\n<pre>\n<span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Input:\n</strong>N = 4\nmat[][] =     {{10, 20, 30, 40}\n\\t\\t\\t {15, 25, 35, 45}\n\\t\\t\\t {24, 29, 37, 48}\n\\t\\t\\t {32, 33, 39, 50}}\nK = 7\n<strong>Output: </strong>30\n<strong>Explanation: </strong>30 is the 7<sup>th</sup> smallest element.</span></span></pre>\n\n<div><br />\n<br />\n<strong><span style=\"font-size:18px\">Your Task:</span></strong><br />\n<span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\">You don&#39;t need to read input or print anything. Complete the function <strong>kthsmallest()</strong> which takes the mat, N and K as input parameters and returns the kth smallest element in the matrix.</span></span></div>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Expected Time Complexity:&nbsp;</strong>O(K*Log(N))<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N)</span></span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 50<br />\n1 &lt;= mat[][] &lt;= 10000</span></span><br />\n<span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\">1 &lt;= K &lt;= N*N</span></span><br />\n<br />\n&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N x N matrix where every row and column is sorted in non-decreasing order, find the Kth smallest element in the matrix.",
                "constraints": [
                    "1 <= N <= 50",
                    "1 <= mat[i][j] <= 10000",
                    "1 <= K <= N*N"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nmat[][] = {{16, 28, 60, 64},\n           {22, 41, 63, 91},\n           {27, 50, 87, 93},\n           {36, 78, 87, 94 }}\nK = 3",
                        "output": "27",
                        "explanation": "The 3rd smallest element in the given matrix is 27."
                    },
                    {
                        "input": "N = 4\nmat[][] = {{10, 20, 30, 40},\n           {15, 25, 35, 45},\n           {24, 29, 37, 48},\n           {32, 33, 39, 50}}\nK = 7",
                        "output": "30",
                        "explanation": "The 7th smallest element in the given matrix is 30."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use Heap Data Structure.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n// A structure to store an entry of heap.  The entry contains\n// a value from 2D array, row and column numbers of the value\nstruct HeapNode {\n    int val;  // value to be stored\n    int r;    // Row number of value in 2D array\n    int c;    // Column number of value in 2D array\n};\n\n// A utility function to swap two HeapNode items.\nvoid swap(HeapNode *x, HeapNode *y) {\n    HeapNode z = *x;\n    *x = *y;\n    *y = z;\n}\n\n// A utility function to minheapify the node harr[i] of a heap\n// stored in harr[]\nvoid minHeapify(HeapNode harr[], int i, int heap_size)\n{\n    int l = i*2 + 1;\n    int r = i*2 + 2;\n    int smallest = i;\n    if (l < heap_size && harr[l].val < harr[i].val)\n        smallest = l;\n    if (r < heap_size && harr[r].val < harr[smallest].val)\n        smallest = r;\n    if (smallest != i)\n    {\n        swap(&harr[i], &harr[smallest]);\n        minHeapify(harr, smallest, heap_size);\n    }\n}\n\n// A utility function to convert harr[] to a min heap\nvoid buildHeap(HeapNode harr[], int n)\n{\n    int i = (n - 1)/2;\n    while (i >= 0)\n    {\n        minHeapify(harr, i, n);\n        i--;\n    }\n}\n\n\n\nint kthSmallest(int mat[MAX][MAX], int n, int k)\n{\n    // k must be greater than 0 and smaller than n*n\n    if (k <= 0 || k > n*n)\n       return INT_MAX;\n\n    // Create a min heap of elements from first row of 2D array\n    HeapNode harr[n];\n    for (int i = 0; i < n; i++)\n        harr[i] =  {mat[0][i], 0, i};\n    buildHeap(harr, n);\n\n    HeapNode hr;\n    for (int i = 0; i < k; i++)\n    {\n       // Get current heap root\n       hr = harr[0];\n\n       // Get next value from column of root's value. If the\n       // value stored at root was last value in its column,\n       // then assign INFINITE as next value\n       int nextval = (hr.r < (n-1))? mat[hr.r + 1][hr.c]: INT_MAX;\n\n       // Update heap root with next value\n       harr[0] =  {nextval, (hr.r) + 1, hr.c};\n\n       // Heapify root\n       minHeapify(harr, 0, n);\n    }\n\n    // Return the value at last extracted root\n    return hr.val;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{ \n\t\n// A structure to store entry of heap. \n// The entry contains value from 2D array, \n// row and column numbers of the value \nstatic class HeapNode \n{ \n\t\n\t// Value to be stored \n\tint val; \n\t\n\t// Row number of value in 2D array \n\tint r; \n\t\n\t// Column number of value in 2D array \n\tint c; \n\t\n\tHeapNode(int val, int r, int c) \n\t{ \n\t\tthis.val = val; \n\t\tthis.c = c; \n\t\tthis.r = r; \n\t} \n} \n\n// A utility function to swap two HeapNode items. \nstatic void swap(int i, int min, HeapNode[] arr) \n{ \n\tHeapNode temp = arr[i]; \n\tarr[i] = arr[min]; \n\tarr[min] = temp; \n} \n\n// A utility function to minheapify the node \n// harr[i] of a heap stored in harr[] \nstatic void minHeapify(HeapNode harr[], \n\t\t\t\t\tint i, int heap_size) \n{ \n\tint l = 2 * i + 1; \n\tint r = 2 * i + 2; \n\tint min = i; \n\t\n\tif (l < heap_size && \n\t\tharr[l].val < harr[i].val) \n\t{ \n\t\tmin = l; \n\t} \n\tif (r < heap_size && \n\t\tharr[r].val < harr[min].val) \n\t{ \n\t\tmin = r; \n\t} \n\t\n\tif (min != i) \n\t{ \n\t\tswap(i, min, harr); \n\t\tminHeapify(harr, min, heap_size); \n\t} \n} \n\n// A utility function to convert \n// harr[] to a max heap \nstatic void buildHeap(HeapNode harr[], int n) \n{ \n\tint i = (n - 1) / 2; \n\twhile (i >= 0) \n\t{ \n\t\tminHeapify(harr, i, n); \n\t\ti--; \n\t} \n} \n\n// This function returns kth smallest \n// element in a 2D array mat[][] \npublic static int kthSmallest(int[][] mat, int n, int k) \n{ \n\t\n\t// k must be greater than 0 and \n\t// smaller than n*n \n\tif (k <= 0 || k > n * n) \n\t{ \n\t\treturn Integer.MAX_VALUE; \n\t} \n\t\n\t// Create a min heap of elements \n\t// from first row of 2D array \n\tHeapNode harr[] = new HeapNode[n]; \n\t\n\tfor(int i = 0; i < n; i++) \n\t{ \n\t\tharr[i] = new HeapNode(mat[0][i], 0, i); \n\t} \n\tbuildHeap(harr, n); \n\t\n\tHeapNode hr = new HeapNode(0, 0, 0); \n\t\n\tfor(int i = 0; i < k; i++) \n\t{ \n\t\t\n\t\t// Get current heap root \n\t\thr = harr[0]; \n\t\t\n\t\t// Get next value from column of root's \n\t\t// value. If the value stored at root was \n\t\t// last value in its column, then assign \n\t\t// INFINITE as next value \n\t\tint nextVal = hr.r < n - 1 ? \n\t\t\t\t\tmat[hr.r + 1][hr.c] : \n\t\t\t\t\tInteger.MAX_VALUE; \n\t\t\t\t\t\t\n\t\t// Update heap root with next value \n\t\tharr[0] = new HeapNode(nextVal, \n\t\t\t\t\t\t\thr.r + 1, hr.c); \n\t\t\t\t\t\t\t\t\n\t\t// Heapify root \n\t\tminHeapify(harr, 0, n); \n\t} \n\t\n\t// Return the value at last extracted root \n\treturn hr.val; \n}\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n# Program for kth largest element in a 2d array \n# sorted row-wise and column-wise \nfrom sys import maxsize \n\n# A structure to store an entry of heap. \n# The entry contains a value from 2D array, \n# row and column numbers of the value \nclass HeapNode: \n    def __init__(self, val, r, c): \n        self.val = val # value to be stored \n        self.r = r # Row number of value in 2D array \n        self.c = c # Column number of value in 2D array \n\n# A utility function to minheapify the node harr[i] \n# of a heap stored in harr[] \ndef minHeapify(harr, i, heap_size): \n    l = i * 2 + 1\n    r = i * 2 + 2\n    smallest = i \n    if l < heap_size and harr[l].val < harr[i].val: \n        smallest = l \n    if r < heap_size and harr[r].val < harr[smallest].val: \n        smallest = r \n\n    if smallest != i: \n        harr[i], harr[smallest] = harr[smallest], harr[i] \n        minHeapify(harr, smallest, heap_size) \n\n# A utility function to convert harr[] to a max heap \ndef buildHeap(harr, n): \n    i = (n - 1) // 2\n    while i >= 0: \n        minHeapify(harr, i, n) \n        i -= 1\n\n# This function returns kth smallest element \n# in a 2D array mat[][] \ndef kthSmallest(mat, n, k): \n\n    # k must be greater than 0 and smaller than n*n \n    if k <= 0 or k > n * n: \n        return maxsize \n\n    # Create a min heap of elements from \n    # first row of 2D array \n    harr = [0] * n \n    for i in range(n): \n        harr[i] = HeapNode(mat[0][i], 0, i) \n    buildHeap(harr, n) \n\n    hr = HeapNode(0, 0, 0) \n    for i in range(k): \n\n        # Get current heap root \n        hr = harr[0] \n\n        # Get next value from column of root's value. \n        # If the value stored at root was last value \n        # in its column, then assign INFINITE as next value \n        nextval = mat[hr.r + 1][hr.c] if (hr.r < n - 1) else maxsize \n\n        # Update heap root with next value \n        harr[0] = HeapNode(nextval, hr.r + 1, hr.c) \n\n        # Heapify root \n        minHeapify(harr, 0, n) \n\n    # Return the value at last extracted root \n    return hr.val \n\n\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}