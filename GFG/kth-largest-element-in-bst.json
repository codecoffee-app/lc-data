{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700427,
      "title": "Kth largest element in BST",
      "titleSlug": "kth-largest-element-in-bst",
      "content": "<p><span style=\"font-size: 18px;\">Given a <strong>Binary Search Tree</strong>. Your task is to complete the function which will return the <strong>kth largest</strong> element without doing any modification in the Binary Search Tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n&nbsp;     4</strong>\n&nbsp;   /   \\\n<strong>   </strong>2     9\nk = 2<strong> \nOutput: </strong>4<br /><strong>Explanation:</strong> 2nd Largest element in BST is 4</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>&nbsp; &nbsp; &nbsp; &nbsp;9\n&nbsp; &nbsp; &nbsp;&nbsp;  \\&nbsp;\n&nbsp;  &nbsp;&nbsp;  &nbsp;  <strong>10</strong>\nk = 1<strong>\nOutput: </strong>10<br /><strong>Explanation:</strong> 1st Largest element in BST is 10</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:\n&nbsp;     </strong><span style=\"font-size: 18px;\">4\n&nbsp;   /   \\\n</span><strong style=\"font-size: 18px;\">   2 </strong><span style=\"font-size: 18px;\">    9\nk = 3</span><strong style=\"font-size: 18px;\"> \nOutput: </strong><span style=\"font-size: 18px;\">2<br /><strong>Explanation:</strong> 3rd Largest element in BST is 2</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Constraints:<br /></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &lt;= number of nodes &lt;= 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5<br /></sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &lt;= node-&gt;data &lt;= 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5<br /></sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &lt;= k &lt;= number of nodes</span></span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA"
    },
    "similar": [],
    "hints": [
      "<p><span >The idea is to do reverse inorder traversal of BST. The reverse inorder traversal traverses all nodes in decreasing order. While doing the traversal, we keep track of count of nodes visited so far. When the count becomes equal to k, we stop the traversal and print the key. </span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Binary Search Tree",
        "slug": "binary-search-tree"
      },
      {
        "name": "Tree",
        "slug": "tree"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": ["accolite", "amazon", "microsoft", "samsung", "sap"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Utility function to find the kth largest element in a binary search tree\n    void kthLargestUtil(Node *root, int k, int &c, int &res) {\n        // Base case: if root is NULL or we have already found k elements\n\n        if (root == NULL || c >= k)\n            return;\n\n        // Recursively traverse the right subtree\n        kthLargestUtil(root->right, k, c, res);\n\n        // Increment the count\n        c++;\n\n        // If we have found the kth largest element, update the result\n        if (c == k) {\n            res = root->data;\n            return;\n        }\n\n        // Recursively traverse the left subtree\n        kthLargestUtil(root->left, k, c, res);\n    }\n\n    // Function to find the kth largest element in a binary search tree\n    int kthLargest(Node *root, int k) {\n        // Initialize count and result variables\n        int c = 0;\n        int res = -1;\n\n        // Call the utility function to find the kth largest element\n        kthLargestUtil(root, k, c, res);\n\n        // Return the result\n        return res;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    int count = 0;   // variable to keep track of the count\n    int result = -1; // variable to store the result\n\n    void kthLargestUtil(Node root, int k) {\n\n        if (root == null ||\n            count >=\n                k) // base case: if root is null or count is greater than or equal to k\n            return;\n        kthLargestUtil(root.right,\n                       k); // recursively call the function on the right child\n\n        count++; // increment the count\n\n        if (count == k) {       // if count is equal to k\n            result = root.data; // update the result with the data value of current root\n            return;\n        }\n        kthLargestUtil(root.left, k); // recursively call the function on the left child\n    }\n\n    int kthLargest(Node root, int k) {\n        kthLargestUtil(root,\n                       k); // call the utility function to find the kth largest element\n        return result;     // return the result\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #recursive function to find the kth largest element\r\n    def kthLargestUtil(self,root, k):\r\n        global c\r\n        global res\r\n        if(root==None or c>=k):\r\n            return\r\n        \r\n        #traverse right subtree first\r\n        self.kthLargestUtil(root.right, k)\r\n        \r\n        #increment count\r\n        c = c+1\r\n        \r\n        #if count is equal to k, set result to current node's data and return\r\n        if(c==k):\r\n            res = root.data\r\n            return\r\n        \r\n        #traverse left subtree\r\n        self.kthLargestUtil(root.left, k)\r\n    \r\n    #function to find the kth largest element\r\n    def kthLargest(self,root, k):\r\n        global c\r\n        global res\r\n        \r\n        #initialize count and result\r\n        c=0\r\n        res=-1\r\n        \r\n        #call the recursive function\r\n        self.kthLargestUtil(root, k)\r\n        \r\n        #return the result\r\n        return res",
        "lang_text": "python3"
      },
      {
        "lang": "Javascript",
        "full_func": "\nclass Solution {\n    // return the Kth largest element in the given BST rooted at 'root'\n    kthLargest(root, k) {\n\n        let countAndResult = {c : 0, res : -1};\n\n        function kthLargestUtil(node, k, countAndResult) {\n            // Base case: if root is NULL or we have already found k elements\n\n            if (node === null || countAndResult.c >= k) return;\n            // Recursively traverse the right subtree\n            kthLargestUtil(node.right, k, countAndResult);\n\n            countAndResult.c++;\n            // If we have found the kth largest element, update the result\n            if (countAndResult.c === k) {\n                countAndResult.res = node.data;\n                return;\n            }\n            // Recursively traverse the left subtree\n            kthLargestUtil(node.left, k, countAndResult);\n        }\n\n        // Call the utility function to find the kth largest element\n        kthLargestUtil(root, k, countAndResult);\n        return countAndResult.res;\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
