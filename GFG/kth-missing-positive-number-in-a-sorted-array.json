{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 874780,
            "title": "Kth Missing Positive Number in a Sorted Array",
            "titleSlug": "kth-missing-positive-number-in-a-sorted-array",
            "content": "<p><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">Given a sorted array of distinct positive integers </span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">arr[]</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">, we need to find the <strong>kth</strong> positive number that is missing from arr[].&nbsp;&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 3, 4, 7, 11], k = 5<br /><strong>Output: </strong>9<strong>\nExplanation: </strong>Missing are 1, 5, 6, 8, 9, 10&hellip; and 5th missing number is 9.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3], k = 2\n<strong>Output: </strong>5<strong>\nExplanation: </strong>Missing are 4, 5, 6&hellip; and 2nd missing number is 5.<br /></span></pre>\n<pre><strong>Input: </strong>arr[] = [3, 5, 9, 10, 11, 12], k = 2\n<strong>Output: </strong>2<strong>\nExplanation: </strong>Missing are 1, 2, 4, 6&hellip; and 2nd missing number is 2.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5<br /></sup>1 &lt;= k &lt;= 10<sup>5</sup><br />1 &lt;= arr[i]&lt;= 10<sup>6</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr` of distinct positive integers, find the k-th positive integer that is missing from the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= k <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr = [2, 3, 4, 7, 11], k = 5",
                        "output": "9",
                        "explanation": "The missing positive integers are 1, 5, 6, 8, 9, 10... The 5th missing positive integer is 9."
                    },
                    {
                        "input": "arr = [1, 2, 3], k = 2",
                        "output": "5",
                        "explanation": "The missing positive integers are 4, 5, 6... The 2nd missing positive integer is 5."
                    },
                    {
                        "input": "arr = [3, 5, 9, 10, 11, 12], k = 2",
                        "output": "2",
                        "explanation": "The missing positive integers are 1, 2, 4, 6... The 2nd missing positive integer is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">The idea is to use Binary Search. Since the array is sorted, we can find at any given index how many numbers are missing as arr[index] &ndash; (index+1).&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int kthMissing(vector<int> &arr, int k) {\n        int lo = 0, hi = arr.size() - 1;\n        int res = arr.size() + k;\n\n        // Binary Search for index where arr[i] > (i + k)\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            if (arr[mid] > mid + k) {\n                res = mid + k;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int kthMissing(int[] arr, int k) {\n        int lo = 0, hi = arr.length - 1;\n        int res = arr.length + k;\n\n        // Binary Search for index where arr[i] > (i + k)\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            if (arr[mid] > mid + k) {\n                res = mid + k;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def kthMissing(self, arr, k):\n        lo = 0\n        hi = len(arr) - 1\n        res = len(arr) + k\n\n        # Binary Search for index where arr[i] > (i + k)\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if arr[mid] > mid + k:\n                res = mid + k\n                hi = mid - 1\n            else:\n                lo = mid + 1\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    kthMissing(arr, k) {\n        let lo = 0, hi = arr.length - 1;\n        let res = arr.length + k;\n\n        // Binary Search for index where arr[i] > (i + k)\n        while (lo <= hi) {\n            let mid = Math.floor((lo + hi) / 2);\n            if (arr[mid] > mid + k) {\n                res = mid + k;\n                hi = mid - 1;\n            } else {\n                lo = mid + 1;\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}