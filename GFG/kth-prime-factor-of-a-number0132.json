{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704577,
            "title": "Kth Prime Factor",
            "titleSlug": "kth-prime-factor-of-a-number0132",
            "content": "<p><span style=\"font-size:18px\">Given two numbers<strong> n</strong> and <strong>k</strong>, find the k<sup>th</sup> prime factor&nbsp;of n.&nbsp;</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 225, k = 2\r\n<strong>Output:</strong> 3\r\n<strong>Explaination:</strong> The prime factors 3, 3, 5 \r\nand 5. So 3 is the 2nd one.</span></pre>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 81, k = 5\r\n<strong>Output:</strong> -1\r\n<strong>Explaination:</strong> The 4 prime factors are \r\n3, 3, 3, 3. So there is no 5th one.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>kthPrime()</strong> which takes the value n and k as input parameters and return&nbsp;the kth prime number. If k is greater than total number of primes then&nbsp;return -1.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(n*log(log n))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(n)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n &le; 10<sup>4</sup><br />\r\n1 &le; k &le; 50</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number `n` and an integer `k`, determine the k<sup>th</sup> prime factor of `n`. Prime factors should be considered in ascending order. If `n` has fewer than `k` prime factors, return -1.",
                "constraints": [
                    "1 <= n <= 10<sup>4</sup>",
                    "1 <= k <= 50"
                ],
                "testcases": [
                    {
                        "input": "n = 225, k = 2",
                        "output": "3",
                        "explanation": "The prime factorization of 225 is 3 x 3 x 5 x 5. The prime factors in ascending order are 3, 3, 5, 5. The 2nd prime factor is 3."
                    },
                    {
                        "input": "n = 81, k = 5",
                        "output": "-1",
                        "explanation": "The prime factorization of 81 is 3 x 3 x 3 x 3. The prime factors are 3, 3, 3, 3. Since there are only 4 prime factors, the 5th prime factor does not exist, so the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Get the prime factors and contribution of each prime factor towards the number n.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "factorial",
                "slug": "factorial"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to generate the prime factors using Sieve of Eratosthenes\n    void sieveOfEratosthenes(int s[], int n){\n        vector<bool> prime(n+5, false);\n        \n        // Mark even numbers with 2\n        for(int i = 2;i < n+5;i += 2)\n            s[i] = 2;\n        \n        // Mark odd numbers\n        for(int i = 3;i < n+5;i += 2){\n            if(prime[i] == false)\n                s[i] = i;\n            \n            // Mark multiples of prime numbers\n            for(int j = i;j*i < n+5;j += 2){\n                if(prime[i*j] == false){\n                    prime[i*j] = true;\n                    s[i*j] = i;\n                }\n            }\n        }\n    }\n    \n    // Function to find kth prime number\n    int kthPrime(int n, int k){\n        int s[n+5];\n        memset(s, -1, sizeof(s));\n        \n        // Generate prime factors using Sieve of Eratosthenes\n        sieveOfEratosthenes(s, n);\n        \n        // Find the kth prime factor\n        while(n > 1){\n            if(k == 1)\n                return s[n];\n            k--;\n            n /= s[n];\n        }\n        \n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the kth prime number.\n    public int kthPrime(int n, int k)\n    {\n        // Array to store prime factors using Sieve of Eratosthenes\n        int[] s = new int[n + 5];\n        \n        // Mark even numbers with 2\n        for(int i = 2; i < n + 5; i += 2)\n            s[i] = 2;\n        \n        // Mark odd numbers\n        for(int i = 3; i < n + 5; i += 2){\n            if(s[i] == 0)\n                s[i] = i;\n            \n            // Mark multiples of prime numbers\n            for(int j = i; j * i < n + 5; j += 2){\n                if(s[i * j] == 0){\n                    s[i * j] = i;\n                }\n            }\n        }\n        \n        // Find the kth prime factor\n        while(n > 1){\n            if(k == 1)\n                return s[n];\n            k--;\n            n /= s[n];\n        }\n        \n        return -1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}