{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881421,
            "title": "Kth smallest element",
            "titleSlug": "kth-smallest-element5545-1587115620--121437",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr</strong>[] of&nbsp;positive integers and a number&nbsp;<strong>k</strong>. The task is to find the k<sup>th</sup>&nbsp;smallest element in the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [3, 5, 4, 2, 9], k = 3\n<strong>Output</strong>: 4\n<strong>Explanation</strong>: Third smallest element in the array is 4.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [4, 3, 7, 6, 5], k = 5\n<strong>Output</strong>: 7\n<strong>Explanation</strong>: Fifth smallest element in the array is 7.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup><br />1 &lt;= k &lt;= arr.size()<br />Array do not contains duplicates.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the kth smallest element in the array.\n    int kthSmallest(vector<int>& arr, int k) {\n        int n = arr.size();\n        // using a priority queue.\n        priority_queue<int, vector<int>> pq;\n\n        for (int i = 0; i < n; i++) {\n            // if size of priority queue equals k, then we compare the element\n            // at top of priority queue with current element in the array.\n            if (pq.size() == k) {\n                // if top element is larger than arr[i], then we pop the top\n                // element and add arr[i] to the priority queue.\n                if (pq.top() > arr[i]) {\n                    pq.pop();\n                    pq.push(arr[i]);\n                }\n            }\n            // else we just add the current element to the priority queue.\n            else if (pq.size() < k) {\n                pq.push(arr[i]);\n            }\n        }\n        // returning the top element of the priority queue.\n        return pq.top();\n    }\n};",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}