{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701747,
            "title": "Kth Smallest",
            "titleSlug": "kth-smallest-element5635",
            "content": "<p><span style=\"font-size: 12pt;\">Given an array <strong>arr[]</strong> and an integer&nbsp;<strong>k</strong> where k is smaller than the size of the array, your task is to find the <strong>k<sup>th</sup> smallest</strong> element in the given array.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Follow up:</strong> Don't solve it using the inbuilt sort function.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [7, 10, 4, 3, 20, 15], k = 3\n<strong>Output:</strong> 7\n<strong>Explanation: </strong>3rd smallest element in the given array is 7.\n</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [2, 3, 1, 20, 15], k = 4 \n<strong>Output:</strong> 15\n<strong>Explanation: </strong>4th smallest element in the given array is 15.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &lt;= arr.size &lt;= 10<sup>6</sup><br />1&lt;= arr[i] &lt;= 10<sup>6</sup><sup><br /></sup>1 &lt;= k &lt;= n</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and an integer `k` (where `k` is smaller than the size of the array), find the k-th smallest element in the array.  You are prohibited from using built-in sorting functions.",
                "constraints": [
                    "1 <= arr.size <= 10^6",
                    "1 <= arr[i] <= 10^6",
                    "1 <= k <= n (where n is the size of the array)"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [7, 10, 4, 3, 20, 15], k = 3",
                        "output": "7",
                        "explanation": "After arranging the array elements in ascending order, the 3rd smallest element is 7."
                    },
                    {
                        "input": "arr[] = [2, 3, 1, 20, 15], k = 4",
                        "output": "15",
                        "explanation": "After arranging the array elements in ascending order, the 4th smallest element is 15."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >use a frequency array to count occurrences of each element, then accumulate counts to determine the k-th element.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "vmware",
            "accolite",
            "amazon",
            "microsoft",
            "snapdeal",
            "hike",
            "adobe",
            "google",
            "abco",
            "cisco"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    int kthSmallest(vector<int> &arr, int k) {\n\n        int max_element = arr[0];\n        int n = arr.size();\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > max_element) {\n                max_element = arr[i];\n            }\n        }\n\n        // Create an array to store the frequency of each\n        // element in the input array\n        int freq[max_element + 1] = {0};\n        for (int i = 0; i < n; i++) {\n            freq[arr[i]]++;\n        }\n\n        // Keep track of the cumulative frequency of elements\n        // in the input array\n        int count = 0;\n        for (int i = 0; i <= max_element; i++) {\n            if (freq[i] != 0) {\n                count += freq[i];\n                if (count >= k) {\n                    // If we have seen k or more elements,\n                    // return the current element\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    public static int kthSmallest(int[] arr, int k) {\n        int max_element = arr[0];\n        int n = arr.length;\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > max_element) {\n                max_element = arr[i];\n            }\n        }\n\n        // Create an array to store the frequency of each element in the input array\n        int[] freq = new int[max_element + 1];\n        for (int i = 0; i < n; i++) {\n            freq[arr[i]]++;\n        }\n\n        // Keep track of the cumulative frequency of elements in the input array\n        int count = 0;\n        for (int i = 0; i <= max_element; i++) {\n            if (freq[i] != 0) {\n                count += freq[i];\n                if (count >= k) {\n                    // If we have seen k or more elements, return the current element\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# User function Template for python3\n\n\nclass Solution:\n\n    def kthSmallest(self, arr, k):\n        max_element = max(arr)\n        n = len(arr)\n\n        # Create an array to store the frequency of each element in the input array\n        freq = [0] * (max_element + 1)\n        for i in range(n):\n            freq[arr[i]] += 1\n\n        # Keep track of the cumulative frequency of elements in the input array\n        count = 0\n        for i in range(max_element + 1):\n            if freq[i] != 0:\n                count += freq[i]\n                if count >= k:\n                    # If we have seen k or more elements, return the current element\n                    return i\n        return -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\n\nclass Solution {\n    kthSmallest(arr, k) {\n        let max_element = arr[0];\n        let n = arr.length;\n        for (let i = 1; i < n; i++) {\n            if (arr[i] > max_element) {\n                max_element = arr[i];\n            }\n        }\n\n        // Create an array to store the frequency of each element in the input array\n        let freq = new Array(max_element + 1).fill(0);\n        for (let i = 0; i < n; i++) {\n            freq[arr[i]]++;\n        }\n\n        // Keep track of the cumulative frequency of elements in the input array\n        let count = 0;\n        for (let i = 0; i <= max_element; i++) {\n            if (freq[i] != 0) {\n                count += freq[i];\n                if (count >= k) {\n                    // If we have seen k or more elements, return the current element\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}