{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709245,
            "title": "Kth Smallest Number in Multiplication Table",
            "titleSlug": "kth-smallest-number-in-multiplication-table",
            "content": "<p><span style=\"font-size: 18px;\">Given three integers <strong>M, N </strong>and<strong> K</strong>. Consider a grid of <strong>M * N</strong>, where <strong>mat[i][j] = i * j</strong> (1 based index). The task is to return the <strong>K<sup>th</sup></strong>&nbsp;smallest element in the <strong>M * N</strong> multiplication table.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nM = 3, N = 3\nK = 5\n<strong>Output: </strong>3\n<strong>Explanation:</strong> \n<img style=\"height: 204px; width: 400px;\" src=\"https://media.geeksforgeeks.org/img-practice/multtable1-grid-1637617528.jpg\" alt=\"\" />\nThe 5<sup>th</sup> smallest element is 3.&nbsp;\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nM = 2, N = 3\nK = 6\n<strong>Output: </strong>6&nbsp;\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= M, N&nbsp;&lt;= 3 * 10<sup>4</sup><br />1 &lt;= K&nbsp;&lt;= M * N</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three integers M, N, and K. Imagine a grid of M rows and N columns where the value at cell (i, j) is equal to i * j (using 1-based indexing). Find the Kth smallest element in this M * N multiplication table.",
                "constraints": [
                    "1 <= M, N <= 3 * 10^4",
                    "1 <= K <= M * N"
                ],
                "testcases": [
                    {
                        "input": "M = 3, N = 3, K = 5",
                        "output": "3",
                        "explanation": "Consider the multiplication table: [[1, 2, 3], [2, 4, 6], [3, 6, 9]].  The sorted list of elements is [1, 2, 2, 3, 3, 4, 6, 6, 9]. The 5th smallest element is 3."
                    },
                    {
                        "input": "M = 2, N = 3, K = 6",
                        "output": "6",
                        "explanation": "Consider the multiplication table: [[1, 2, 3], [2, 4, 6]]. The sorted list of elements is [1, 2, 2, 3, 4, 6]. The 6th smallest element is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A simple method is to generate the matrix. Sort the matrix and print the K<sup>th</sup>&nbsp;smallest element. Can we do it better?</span></p>\n\n<p><span style=\"font-size:18px\">How about applying Binary search?</span></p>",
            "<p><span style=\"font-size:18px\">For each of M&nbsp;rows, the&nbsp;i<sup>th</sup>&nbsp;row looks like [i, 2*i, 3*i, ..., n*i].&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\npublic:\r\n    // Function to check if the current value is enough to satisfy the condition\r\n    bool enough(int x, int m, int n, int k) {\r\n        int count = 0;\r\n        // Loop over each row and count the number of elements smaller than or equal to x\r\n        for (int i = 1; i <= m; i++) {\r\n            count += min(x / i, n);\r\n        }\r\n        // Return true if the count is greater than or equal to k\r\n        return count >= k;\r\n    }\r\n    \r\n    // Function to find the kth smallest element\r\n    int KthSmallest(int m, int n, int k) {\r\n        int lo = 1, hi = m * n;\r\n        // Binary search to find the minimum value that satisfies the condition\r\n        while (lo < hi) {\r\n            int mi = lo + (hi - lo) / 2;\r\n            // If enough(mi, m, n, k) returns false, increase the lower bound\r\n            if (!enough(mi, m, n, k)) lo = mi + 1;\r\n            // Otherwise, decrease the upper bound\r\n            else hi = mi;\r\n        }\r\n        // Return the lower bound as the kth smallest element\r\n        return lo;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to check if there are enough values less than or equal to x in the grid\n    public boolean enough(int x, int m, int n, int k) {\n        int count = 0;\n        for (int i = 1; i <= m; i++) {\n            // Increment the count by the minimum of x divided by i and n\n            count += Math.min(x / i, n);\n        }\n        // Return true if the count is greater than or equal to k, otherwise false\n        return count >= k;\n    }\n\n    // Method to find the kth smallest element in the grid\n    public int KthSmallest(int m, int n, int k) {\n        int lo = 1, hi = m * n;\n        while (lo < hi) {\n            int mi = lo + (hi - lo) / 2;\n            if (!enough(mi, m, n, k)) lo = mi + 1;\n            else hi = mi;\n        }\n        // Return the lowest value where there are enough elements less than or equal to it\n        return lo;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        l = 1\n        r = m*n\n        while(l < r): # binary search until left pointer is less than right pointer\n            mid = (l + r)//2 # calculate mid value\n            cnt = 0 # initialize count\n            for i in range (1, m+1): # iterate from 1 to m\n                cnt += min(mid//i, n) # calculate count by finding minimum of mid divided by i and n\n            if cnt < k: # if count is less than k, move left pointer to mid+1\n                l = mid + 1\n            else:\n                r = mid # move right pointer to mid\n        return l # return left pointer as the kth number",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\r\n{\r\n    // Function to check if the current value is enough to satisfy the condition\r\n    public bool enough(int x, int m, int n, int k)\r\n    {\r\n        int count = 0;\r\n        // Loop over each row and count the number of elements smaller than or equal to x\r\n        for (int i = 1; i <= m; i++)\r\n        {\r\n            count += Math.Min(x / i, n);\r\n        }\r\n        // Return true if the count is greater than or equal to k\r\n        return count >= k;\r\n    }\r\n\r\n    //Complete this function\r\n    public int KthSmallest(int m, int n, int k)\r\n    {\r\n        int lo = 1, hi = m * n;\r\n        // Binary search to find the minimum value that satisfies the condition\r\n        while (lo < hi)\r\n        {\r\n            int mi = lo + (hi - lo) / 2;\r\n            // If enough(mi, m, n, k) returns false, increase the lower bound\r\n            if (!enough(mi, m, n, k)) lo = mi + 1;\r\n            // Otherwise, decrease the upper bound\r\n            else hi = mi;\r\n        }\r\n        // Return the lower bound as the kth smallest element\r\n        return lo;\r\n    }\r\n\r\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Solution {\n    //Function to find the kth smallest number in a given range.\n    findKthNumber(m, n, k) {\n        let l = 1;\n        let r = m * n;\n        while (l < r) { // binary search until left pointer is less than right pointer\n            let mid = Math.floor((l + r) / 2); // calculate mid value\n            let cnt = 0; // initialize count\n            for (let i = 1; i <= m; i++) { // iterate from 1 to m\n                cnt += Math.min(Math.floor(mid / i), n); // calculate count by finding minimum of mid divided by i and n\n            }\n            if (cnt < k) { // if count is less than k, move left pointer to mid+1\n                l = mid + 1;\n            } else {\n                r = mid; // move right pointer to mid\n            }\n        }\n        return l; // return left pointer as the kth number\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}