{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703452,
            "title": "Large Factorials",
            "titleSlug": "large-factorials2539",
            "content": "<p><span style=\"font-size: 18px;\">Given a number <strong>n</strong>, the task is to calculate two values related to its factorial:<br /></span><span style=\"font-size: 18px;\">1)The first digit of the factorial of n.<br /></span><span style=\"font-size: 18px;\">2)The power of 10 that&nbsp; represents the factorial in the form d * 10^p, where d is the first digit and p is the power.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> n = 5\n<strong>Output :</strong> [1, 2]\n<strong>Explanation: </strong>Factorial of 5 = 120 .So, first digit = 1 and power of 10 = 2 (1 * 10<sup>2</sup>).\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> n = 9<strong>\nOutput :</strong> [3, 5] <br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:<span > </span></strong><span >Factorial of 9 = 362880 .So, first digit = 3 and power of 10 = 5 (1 * 10<sup>5</sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">).</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints<br /></strong></span><span style=\"font-size: 18px;\">1 &le; n&le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number 'n', calculate the first digit of n! (n factorial) and the power of 10 (p) such that n! can be represented as d * 10^p, where 'd' is the first digit.",
                "constraints": [
                    "1 <= n <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "[1, 2]",
                        "explanation": "5! = 120.  The first digit is 1, and it can be written as 1 * 10^2, so the power is 2."
                    },
                    {
                        "input": "9",
                        "output": "[3, 5]",
                        "explanation": "9! = 362880. The first digit is 3, and it can be written as approximately 3 * 10^5, so the power is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Focus on reducing the factorial value when it exceeds a single digit and track how many times you do this.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "factorial",
                "slug": "factorial"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> fact(int n) {\n        // Initialize variables to keep track of the loop counter and\n        // the power (number of trailing zeros)\n        int i, power = 0;\n        // Variable to store the factorial value, using double to\n        // handle large values\n        double fact = 1;\n\n        // Loop through numbers from 1 to n to calculate the factorial\n        for (i = 1; i <= n; i++) {\n            fact = fact * i;\n\n            // Reduce the factorial when it exceeds a single digit and increase the\n            // power count\n            while (int(fact) > 9) {\n                // Increase power by 1 for each time the factorial is divided\n                // by 10\n                power++;\n                fact = fact / 10;\n            }\n        }\n\n        vector<int> v;\n        // Store the last non-zero digit of the factorial in the vector\n        v.push_back(fact);\n        // Store the total number of trailing zeros (power) in the vector\n        v.push_back(power);\n\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    // Function for calculating the last non-zero digit and the number of trailing zeros\n    // in the factorial\n    public static ArrayList<Integer> fact(int n) {\n        // Initialize variables to keep track of the loop counter and\n        // the power (number of trailing zeros)\n        int i, power = 0;\n        // Variable to store the factorial value, using double to\n        // handle large values\n        double fact = 1;\n\n        // Loop through numbers from 1 to n to calculate the factorial\n        for (i = 1; i <= n; i++) {\n            fact = fact * i;\n\n            // Reduce the factorial when it exceeds a single digit and increase the\n            // power count\n            while ((int)fact > 9) {\n                // Increase power by 1 for each time the factorial is divided\n                // by 10\n                power++;\n                fact = fact / 10;\n            }\n        }\n\n        // Create an ArrayList to store the results\n        ArrayList<Integer> result = new ArrayList<>();\n        // Store the last non-zero digit of the factorial\n        result.add((int)fact);\n        // Store the total number of trailing zeros (power)\n        result.add(power);\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# User function Template for Python\n\n\nclass Solution:\n\n    def fact(self, n):\n        power = 0  # Initialize variable to keep track of the power (number of trailing zeros)\n        fact = 1.0  # Variable to store the factorial value, using float to handle large values\n\n        # Loop through numbers from 1 to n to calculate the factorial\n        for i in range(1, n + 1):\n            fact *= i\n\n            # Reduce the factorial when it exceeds a single digit and increase the power count\n            while int(fact) > 9:\n                power += 1  # Increase power by 1 for each time the factorial is divided by 10\n                fact /= 10  # Reduce the factorial by dividing it by 10\n\n        result = []\n        # Store the last non-zero digit of the factorial\n        result.append(int(fact))\n        # Store the total number of trailing zeros (power)\n        result.append(power)\n\n        return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\nclass Solution {\n    // Function to calculate factorial and return the last digit and number of trailing\n    // zeros\n    fact(n) {\n        // Initialize variables to keep track of the loop counter and\n        // the power (number of trailing zeros)\n        let i, power = 0;\n        // Variable to store the factorial value, using float to handle\n        // large values\n        let fact = 1.0;\n\n        // Loop through numbers from 1 to n to calculate the factorial\n        for (i = 1; i <= n; i++) {\n            fact *= i;\n\n            // Reduce the factorial when it exceeds a single digit and increase the\n            // power count\n            while (Math.floor(fact) > 9) {\n                // Increase power by 1 for each time the factorial is divided\n                // by 10\n                power++;\n                fact /= 10;\n            }\n        }\n\n        let result = [];\n        // Store the last non-zero digit of the factorial\n        result.push(Math.floor(fact));\n        // Store the total number of trailing zeros (power)\n        result.push(power);\n\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}