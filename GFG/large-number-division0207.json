{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703295,
            "title": "Large number division",
            "titleSlug": "large-number-division0207",
            "content": "<p><span style=\"font-size:18px\">Given a large number (represented as string <strong>S</strong>) &nbsp;which has to divided by another number (represented as int data type <strong>D</strong>). The task is to find division of these numbers.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;123456&quot; , D = 36\n<strong>Output:</strong> 3429\n<strong>Explanation:</strong> simply S/D = 3429\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;91345243&quot; , D = 67\n<strong>Output:</strong> 1363361\n<strong>Explanation: </strong>S/D = 1363361</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>longDivision()&nbsp;</strong>which accepts a string <strong>S</strong> and an integer divisor <strong>D</strong> as input parameter and <strong>returns</strong> a string.<br />\n<br />\n<strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>5&nbsp;</sup></span><br />\n&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a large number represented as a string **S**, divide it by another number represented as an integer **D**. Find the quotient of this division.",
                "constraints": [
                    "1 <= N <= 10^5, where N is the length of the string S."
                ],
                "testcases": [
                    {
                        "input": "S = \"123456\", D = 36",
                        "output": "3429",
                        "explanation": "123456 / 36 = 3429"
                    },
                    {
                        "input": "S = \"91345243\", D = 67",
                        "output": "1363361",
                        "explanation": "91345243 / 67 = 1363361"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to implement divison method which we learnt at school .</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\n    public:\n    \n    // A function to perform division of large numbers\n    string longDivision(string number, int divisor)\n    {\n    \t// As result can be very large store it in string\n    \tstring ans;\n    \n    \t// Find prefix of number that is larger\n    \t// than divisor.\n    \tint idx = 0;\n    \tint temp = number[idx] - '0';\n    \twhile (temp < divisor)\n    \ttemp = temp * 10 + (number[++idx] - '0');\n    \t\n    \t// Repeatedly divide divisor with temp. After \n    \t// every division, update temp to include one \n    \t// more digit.\n    \twhile (number.size() > idx)\n    \t{\n    \t\t// Store result in answer i.e. temp / divisor\n    \t\tans += (temp / divisor) + '0';\n    \t\t\n    \t\t// Take next digit of number\n    \t\ttemp = (temp % divisor) * 10 + number[++idx] - '0';\n    \t}\n    \t\n    \t// If divisor is greater than number\n    \tif (ans.length() == 0)\n    \t\treturn \"0\";\n    \t\n    \t// else return ans\n    \treturn ans;\n    }\n\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}