{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700351,
      "title": "Largest BST",
      "titleSlug": "largest-bst",
      "content": "<p><span style=\"font-size: 18px;\">You're given a binary tree. Your task is to find the<strong> size </strong>of the largest subtree within this binary tree that also satisfies the properties of a Binary Search Tree (BST). </span><span style=\"font-size: 18px;\">The size of a subtree is defined as the number of nodes it contains.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> A subtree of the binary tree is considered a BST if for every node in that subtree, the left child is less than the node, and the right child is greater than the node, without any duplicate values in the subtree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: root = [5, 2, 4, 1, 3]<br /></span><img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20241007154946544659/Root-to-leaf-path-sum-equal-to-a-given-number-copy.webp\" alt=\"Root-to-leaf-path-sum-equal-to-a-given-number-copy\" width=\"300\" height=\"267\" /><br /><span style=\"font-size: 18px;\"><strong>Output</strong>: 3</span><br /><span style=\"font-size: 18px;\"><strong>Explanation</strong>:</span><span >The following sub-tree is a BST of size 3<br /></span><img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20241008164418969970/Balance-a-Binary-Search-Tree-3-copy.webp\" alt=\"Balance-a-Binary-Search-Tree-3-copy\" width=\"249\" height=\"221\" /></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: root = [6, 7, 3, N, 2, 2, 4]<br /></span><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700351/Web/Other/blobid0_1732253153.png\" width=\"302\" height=\"267\" /><br /><span ><strong>Output</strong>: 3</span><br /><span ><strong>Explanation</strong>: The following sub-tree is a BST of size 3:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700351/Web/Other/blobid1_1732253193.png\" width=\"250\" height=\"221\" /><br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>5</sup><br />1 &le; node-&gt;data &le; 10<sup>5</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given a binary tree, find the size of the largest subtree that is also a Binary Search Tree (BST). The size of a subtree is the number of nodes it contains. A subtree is considered a BST if, for every node in the subtree, its left child's value is less than the node's value, and its right child's value is greater than the node's value.  There should be no duplicate values within a BST subtree.",
        "constraints": [
          "1 <= number of nodes <= 10^5",
          "1 <= node->data <= 10^5"
        ],
        "testcases": [
          {
            "input": "[5, 2, 4, 1, 3]",
            "output": "3",
            "explanation": "The subtree rooted at node 2 (with values 2, 1, and 3) is the largest BST with a size of 3."
          },
          {
            "input": "[6, 7, 3, null, 2, 2, 4]",
            "output": "3",
            "explanation": "The subtree rooted at node 2 (with values 2, 2, and 4) is the largest BST with a size of 3."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p>Think recursively for each node, determine if its left and right subtrees are BSTs, and then check if the current node can form a larger BST by comparing its value with the max of the left subtree and min of the right subtree.</p>"
    ],
    "relatedTopics": [
      {
        "name": "Binary Search Tree",
        "slug": "binary-search-tree"
      },
      {
        "name": "Tree",
        "slug": "tree"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      },
      {
        "name": "Sorting",
        "slug": "sorting"
      }
    ],
    "companies": ["flipkart", "amazon", "microsoft", "samsung", "de-shaw"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "// Structure to store information about a binary tree node.\nstruct node1\n{\n    int isbst;  // flag to indicate if the subtree is a binary search tree\n    int size;   // size of the subtree\n    int mn;     // minimum value in the subtree\n    int mx;     // maximum value in the subtree\n};\n\n// Recursive function to check if a binary tree is a binary search tree and return information about the subtree.\nstruct node1 bst(struct Node *root)\n{\n    struct node1 x; // create a node1 struct\n    if(root == NULL) {  // if the root is NULL (empty subtree)\n        // set the attributes of x to represent an empty subtree\n        x.isbst = 1;\n        x.size = 0;\n        x.mn = 1000000;\n        x.mx = 0;\n        return x;  // return x\n    }\n    struct node1 left = bst(root->left);   // recursively call bst on the left subtree\n    struct node1 right = bst(root->right); // recursively call bst on the right subtree\n    if(left.isbst == 1 && right.isbst == 1 && root->data > left.mx && root->data < right.mn) { // if both subtrees are binary search trees and the root value is within the range of the left and right subtrees\n        // set the attributes of x to represent a binary search tree\n        x.isbst = 1;\n        x.size = 1 + left.size + right.size;  // size is the sum of sizes of left and right subtrees plus 1 for the root node\n        x.mx = max(root->data,right.mx);      // maximum value is the maximum of the root value and the maximum of the right subtree\n        x.mn = min(root->data,left.mn);       // minimum value is the minimum of the root value and the minimum of the left subtree\n    }\n    else {\n        // set the attributes of x to represent a non-binary search tree\n        x.isbst = 0;\n        x.size = max(left.size,right.size);    // size is the maximum of the sizes of the left and right subtrees\n        x.mn = 1000000;                         // invalid minimum value\n        x.mx = 0;                                // invalid maximum value\n    }\n    return x;  // return x\n};\n\nclass Solution{\n    public:\n    int largestBst(Node *root)\n    {\n        return bst(root).size;   // call the bst function and return the size of the largest binary search tree\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "//Back-end complete function Template for Java\n\nclass Node1\n{\n    boolean isBst; // a flag to indicate if the subtree rooted at the current node is a valid BST\n    int size; // the size of the largest BST found so far\n    int mini; // the minimum value in the subtree rooted at the current node\n    int maxi; // the maximum value in the subtree rooted at the current node\n    \n    public Node1(boolean isBst, int size, int mini, int maxi)\n    {\n        this.isBst = isBst;\n        this.size = size;\n        this.mini = mini;\n        this.maxi = maxi;\n    }\n}\n\nclass Solution{\n    \n    static Node1 bst(Node root)\n    {\n        Node1 x; // create a new Node1 object\n        if(root == null) // base case: if the root is null\n        {\n            x = new Node1(true, 0, 1000000, 0); // return a Node1 object with isBst=true, size=0, mini=1000000, maxi=0\n            return x; // return the Node1 object\n        }\n        \n        Node1 left = bst(root.left); // recursively check the left subtree\n        Node1 right = bst(root.right); // recursively check the right subtree\n        if(left.isBst && right.isBst && root.data > left.maxi && root.data < right.mini) // if the current node is a valid BST based on its children and its value is within the correct range\n            x = new Node1(true, 1+left.size+right.size, Math.min(root.data, left.mini), Math.max(root.data, right.maxi)); // update x with isBst=true, size=1+left.size+right.size, mini=min(root.data, left.mini), maxi=max(root.data, right.maxi)\n        else\n            x = new Node1(false, Math.max(left.size, right.size), 1000000, 0); // update x with isBst=false, size=max(left.size, right.size), mini=1000000, maxi=0\n        \n        return x; // return the updated Node1 object\n    }\n    \n    static int largestBst(Node root)\n    {\n        return bst(root).size; // return the size of the largest BST found in the given binary tree\n    }\n      \n\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "class Node1:\n\n    def __init__(self, isbst, size, mn, mx):\n        self.isbst = isbst\n        self.size = size\n        self.mn = mn\n        self.mx = mx\n\n\nclass Solution:\n\n    def bst(self, root):\n        if root is None:\n            return Node1(True, 0, float('inf'), float('-inf'))\n\n        left = self.bst(root.left)  #recursively goes in left substree\n        right = self.bst(root.right)  #recursively goes in right subtree\n        #   if the current node is a valid BST based on its children and its value is within the correct range\n        if left.isbst and right.isbst and root.data > left.mx and root.data < right.mn:\n            return Node1(True, 1 + left.size + right.size,\n                         min(root.data, left.mn), max(root.data, right.mx))\n        else:\n            return Node1(False, max(left.size, right.size), float('inf'),\n                         float('-inf'))\n\n    def largestBst(self, root):\n        return self.bst(root).size  #return size of largest bst in bt\n",
        "lang_text": "py"
      },
      {
        "lang": "Javascript",
        "full_func": "class Solution {\n    largestBst(root) {\n        function bst(node) {\n            if (node === null) {\n                return { isbst: 1, size: 0, mn: Infinity, mx: -Infinity }\n            }\n            let left = bst(node.left);   // recursively goes in left subtree\n            let right = bst(node.right); // recursively goes in right subtree\n            let x = {\n                isbst : 0,\n                size : Math.max(left.size, right.size),\n                mn : Infinity,\n                mx : -Infinity\n            };\n            // check for conditions\n            if (left.isbst === 1 && right.isbst === 1 && node.key > left.mx &&\n                node.key < right.mn) {\n                x.isbst = 1;\n                x.size = 1 + left.size + right.size;\n                x.mn = Math.min(node.key, left.mn);\n                x.mx = Math.max(node.key, right.mx);\n            }\n            return x;\n        }\n\n        return bst(root).size; // return the size of largest bst in binary tree\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
