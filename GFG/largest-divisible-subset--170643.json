{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712816,
            "title": "Largest Divisible Subset",
            "titleSlug": "largest-divisible-subset--170643",
            "content": "<p><span >Given a set of&nbsp;<strong>distinct</strong>&nbsp;positive integers&nbsp;<code>nums</code>, return the largest subset&nbsp;<code>answer</code>&nbsp;such that every pair&nbsp;<code>(answer[i], answer[j])</code>&nbsp;of elements in this subset satisfies:</span></p>\n<ul>\n<li><span ><code>answer[i] % answer[j] == 0</code>, or</span></li>\n<li><span ><code>answer[j] % answer[i] == 0</code></span></li>\n</ul>\n<p><span >If there are multiple subsets of the largest size, return the <strong>lexicographically greatest array</strong> after sorting it in ascending order.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 6]\n<strong>Output: </strong>[1, 3, 6]\n<strong>Explanation: </strong>The largest divisible subset can be either [1, 2, 6] or [1, 3, 6], both having a length of 3. However, [1, 3, 6] is lexicographically greater than [1, 2, 6], so it is the correct output.</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [1, 2, 4, 8]\n<strong>Output: </strong>[1, 2, 4, 8]<br /><strong>Explanation:</strong> The largest divisible subset is [1, 2, 4, 8], where each element divides the next one. This subset is already the lexicographically greatest.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [3, 5, 10, 20, 21]\n<strong>Output: </strong>[5, 10, 20]\n<strong>Explanation: </strong>The largest divisible subset is [5, 10, 20], where each element is divisible by the previous one. Other valid subsets like [3] or [21] are smaller in size.</span></pre>\n<p><span ><strong>Constraint:</strong><br />1 &le; arr.size() &le; 10<sup>3</sup><br />1&nbsp; &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of distinct positive integers `nums`, find the largest subset `answer` where every pair of elements `(answer[i], answer[j])` in the subset satisfies either `answer[i] % answer[j] == 0` or `answer[j] % answer[i] == 0`. If multiple largest subsets exist, return the lexicographically greatest one after sorting it in ascending order.",
                "constraints": [
                    "1 <= arr.size() <= 10^3",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 6]",
                        "output": "[1, 3, 6]",
                        "explanation": "Both [1, 2, 6] and [1, 3, 6] are largest divisible subsets with length 3. [1, 3, 6] is lexicographically greater, thus the correct output."
                    },
                    {
                        "input": "[1, 2, 4, 8]",
                        "output": "[1, 2, 4, 8]",
                        "explanation": "The largest divisible subset is [1, 2, 4, 8], and it's already the lexicographically greatest."
                    },
                    {
                        "input": "[3, 5, 10, 20, 21]",
                        "output": "[5, 10, 20]",
                        "explanation": "The largest divisible subset is [5, 10, 20]. Other valid subsets like [3] or [21] are smaller."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the array, use dynamic programming to track divisibility, then reconstruct the largest subset in lexicographical order.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [
            "bloomberg",
            "facebook",
            "adobe",
            "google",
            "amazon",
            "apple",
            "microsoft",
            "yahoo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> largestDivisibleSubset(vector<int>& arr) {\n        int n = arr.size();\n        if (n == 0)\n            return {};\n\n        // Step 1: Sort the array in descending order to get lexicographically largest\n        // answer\n        sort(arr.begin(), arr.end(), greater<int>());\n\n        // Step 2: Create DP and tracking arrays\n        vector<int> dp(n, 1), prev(n, -1);\n        int maxIdx = 0, maxSize = 1;\n\n        // Step 3: Fill DP array to track the largest subset ending at each index\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (arr[j] % arr[i] == 0 && dp[i] < dp[j] + 1) {\n                    dp[i] = dp[j] + 1;\n                    prev[i] = j; // track the previous element index\n                }\n            }\n            // Keep track of the index of the largest subset found\n            if (dp[i] > maxSize) {\n                maxSize = dp[i];\n                maxIdx = i;\n            }\n        }\n\n        // Step 4: Reconstruct the largest divisible subset\n        vector<int> answer;\n        for (int i = maxIdx; i >= 0; i = prev[i]) {\n            answer.push_back(arr[i]);\n            if (prev[i] == i)\n                break; // backtrack until there are no more previous elements\n        }\n\n        // No need to reverse the result since we are working with descending order\n        return answer;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public ArrayList<Integer> largestDivisibleSubset(int[] arr) {\n        int n = arr.length;\n        if (n == 0)\n            return new ArrayList<>(); // Return an empty list if the array is empty\n\n        // Step 1: Sort the array in descending order to get lexicographically largest\n        // answer\n        Arrays.sort(arr); // Sort in ascending order\n        // Reverse to get descending order\n        for (int i = 0; i < n / 2; i++) {\n            int temp = arr[i];\n            arr[i] = arr[n - i - 1];\n            arr[n - i - 1] = temp;\n        }\n\n        // Step 2: Create DP and tracking arrays\n        int[] dp = new int[n];\n        int[] prev = new int[n];\n        Arrays.fill(dp, 1);    // Each element is a subset of size 1\n        Arrays.fill(prev, -1); // Initialize previous index array\n\n        int maxIdx = 0, maxSize = 1;\n\n        // Step 3: Fill DP array to track the largest subset ending at each index\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (arr[j] % arr[i] == 0 && dp[i] < dp[j] + 1) {\n                    dp[i] = dp[j] + 1;\n                    prev[i] = j; // Track the previous element index\n                }\n            }\n            // Keep track of the index of the largest subset found\n            if (dp[i] > maxSize) {\n                maxSize = dp[i];\n                maxIdx = i;\n            }\n        }\n\n        // Step 4: Reconstruct the largest divisible subset\n        ArrayList<Integer> answer = new ArrayList<>();\n        for (int i = maxIdx; i >= 0; i = prev[i]) {\n            answer.add(arr[i]);\n            if (prev[i] == i)\n                break; // backtrack until there are no more previous elements\n        }\n\n        return answer; // Return the result in descending order\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def largestDivisibleSubset(self, arr):\n        n = len(arr)\n        if n == 0:\n            return []\n\n        # Step 1: Sort the array in descending order to get lexicographically largest answer\n        arr.sort(reverse=True)\n\n        # Step 2: Create DP and tracking arrays\n        dp = [\n            1\n        ] * n  # dp[i] will store the size of largest divisible subset ending at index i\n        prev = [\n            -1\n        ] * n  # prev[i] will store the index of the previous element in the subset\n        maxIdx = 0  # Index of the largest subset\n        maxSize = 1  # Size of the largest subset\n\n        # Step 3: Fill DP array to track the largest subset ending at each index\n        for i in range(1, n):\n            for j in range(i):\n                if arr[j] % arr[i] == 0 and dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j  # Track the previous element index\n            # Keep track of the index of the largest subset found\n            if dp[i] > maxSize:\n                maxSize = dp[i]\n                maxIdx = i\n\n        # Step 4: Reconstruct the largest divisible subset\n        answer = []\n        i = maxIdx\n        while i >= 0:\n            answer.append(arr[i])\n            if prev[i] == i:\n                break  # Stop when there's no previous element\n            i = prev[i]\n\n        return answer\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\n\nclass Solution {\n    public List<int> largestDivisibleSubset(int[] arr) {\n        int n = arr.Length;\n        if (n == 0) return new List<int>();\n\n        // Step 1: Sort the array in descending order to get lexicographically largest\n        // answer\n        Array.Sort(arr, (a, b) => b.CompareTo(a));\n\n        // Step 2: Create DP and tracking arrays\n        int[] dp = new int[n];   // DP array to store the size of the largest divisible\n                                 // subset ending at each index\n        int[] prev = new int[n]; // Array to track the previous element in the subset\n        Array.Fill(\n            dp, 1); // Initialize DP array with 1 (each element is a subset of size 1)\n        Array.Fill(prev, -1); // Initialize previous index tracking with -1\n        int maxIdx = 0, maxSize = 1;\n\n        // Step 3: Fill DP array to track the largest subset ending at each index\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[j] % arr[i] == 0 && dp[i] < dp[j] + 1) {\n                    dp[i] = dp[j] + 1;\n                    prev[i] = j; // Track the previous element index\n                }\n            }\n            // Keep track of the index of the largest subset found\n            if (dp[i] > maxSize) {\n                maxSize = dp[i];\n                maxIdx = i;\n            }\n        }\n\n        // Step 4: Reconstruct the largest divisible subset\n        List<int> answer = new List<int>();\n        for (int i = maxIdx; i >= 0; i = prev[i]) {\n            answer.Add(arr[i]);\n            if (prev[i] == i)\n                break; // Backtrack until there are no more previous elements\n        }\n\n        // No need to reverse the result since we are working with descending order\n        return answer;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    largestDivisibleSubset(arr) {\n        let n = arr.length;\n        if (n === 0) return [];\n\n        // Step 1: Sort the array in descending order\n        arr.sort((a, b) => b - a);\n\n        // Step 2: Create DP and tracking arrays\n        let dp = new Array(n).fill(1);    // DP array to track largest subset size\n        let prev = new Array(n).fill(-1); // Tracking previous element index\n        let maxIdx = 0, maxSize = 1;\n\n        // Step 3: Fill DP array to track largest divisible subset at each index\n        for (let i = 1; i < n; i++) {\n            for (let j = 0; j < i; j++) {\n                if (arr[j] % arr[i] === 0 && dp[i] < dp[j] + 1) {\n                    dp[i] = dp[j] + 1;\n                    prev[i] = j; // Track previous index\n                }\n            }\n            // Update max size and index\n            if (dp[i] > maxSize) {\n                maxSize = dp[i];\n                maxIdx = i;\n            }\n        }\n\n        // Step 4: Reconstruct the largest divisible subset\n        let answer = [];\n        for (let i = maxIdx; i >= 0; i = prev[i]) {\n            answer.push(arr[i]);\n            if (prev[i] === i) break; // Stop when no more elements to trace\n        }\n\n        // No need to reverse since we are working in descending order\n        return answer;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}