{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703208,
            "title": "Largest Fibonacci Subsequence",
            "titleSlug": "largest-fibonacci-subsequence2206",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong> with positive integers, the task is to find the largest subsequence from the array which contains only <a href=\"http://www.geeksforgeeks.org/program-for-nth-fibonacci-number/\">Fibonacci numbers</a>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 4, 3, 9, 10, 13, 7]\n<strong>Output:</strong> [1, 3, 13]\n<strong>Explanation:</strong> The output three numbers are Fibonacci numbers.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [0, 2, 8, 5, 2, 1, 4, 13, 23]\n<strong>Output:</strong> [0, 2, 8, 5, 2, 1, 13]<br /><strong>Explanation: </strong></span><span >The output seven numbers are Fibonacci numbers.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= arr.size() &lt;=10<sup>5</sup><br />1&lt;= arr[i] &lt;=10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, find the largest subsequence containing only Fibonacci numbers.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[1, 4, 3, 9, 10, 13, 7]",
                        "output": "[1, 3, 13]",
                        "explanation": "The subsequence [1, 3, 13] consists only of Fibonacci numbers."
                    },
                    {
                        "input": "[0, 2, 8, 5, 2, 1, 4, 13, 23]",
                        "output": "[0, 2, 8, 5, 2, 1, 13]",
                        "explanation": "The subsequence [0, 2, 8, 5, 2, 1, 13] consists only of Fibonacci numbers."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Find max in the array. Generate Fibonacci numbers till the max and store them in the hash table. Traverse array again if the number is present in the hash table then add it to the result.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Fibonacci",
                "slug": "fibonacci"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\nclass Solution {\n  public:\n    bool isFibonacci(int num) {\n\n        // Using the property that a number is Fibonacci if and\n        // only if one of 5*n^2 + 4 or 5*n^2 - 4 is a perfect square.\n        int fact1 = 5 * num * num + 4;\n        int fact2 = 5 * num * num - 4;\n        int sqrtFact1 = (int)sqrt(fact1);\n        int sqrtFact2 = (int)sqrt(fact2);\n        return (sqrtFact1 * sqrtFact1 == fact1 || sqrtFact2 * sqrtFact2 == fact2);\n    }\n\n    // Function to find the largest Fibonacci subset\n    vector<int> findFibSubset(vector<int> arr) {\n        vector<int> res;\n\n        // Iterate through all elements of the array\n        for (int i = 0; i < arr.size(); i++) {\n            if (isFibonacci(arr[i])) {\n                res.push_back(arr[i]);\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to check if a number is Fibonacci\n    static boolean isFibonacci(int num) {\n\n        // Using the property that a number is Fibonacci if and only if\n        // one of (5 * n^2 + 4) or (5 * n^2 - 4) is a perfect square.\n        int fact1 = 5 * num * num + 4;\n        int fact2 = 5 * num * num - 4;\n        int sqrtFact1 = (int)Math.sqrt(fact1);\n        int sqrtFact2 = (int)Math.sqrt(fact2);\n        return (sqrtFact1 * sqrtFact1 == fact1 || sqrtFact2 * sqrtFact2 == fact2);\n    }\n\n    // Function to find the largest Fibonacci subset\n    static public ArrayList<Integer> findFibSubset(int arr[]) {\n        ArrayList<Integer> res = new ArrayList<>();\n\n        // Iterate through all elements of the array\n        for (int num : arr) {\n            if (isFibonacci(num)) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findFibSubset(self, arr):\n        res = []\n\n        # Iterate through all elements of the array\n        for num in arr:\n\n            # Using the property of Fibonacci series to check if `num` is a Fibonacci number\n            fact1 = 5 * (num**2) + 4\n            fact2 = 5 * (num**2) - 4\n            if int(fact1**0.5)**2 == fact1 or int(fact2**0.5)**2 == fact2:\n                res.append(num)\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find Fibonacci numbers in the subset\n    findFibSubset(arr) {\n        let res = [];\n\n        // Iterate through all elements of the array\n        for (let i = 0; i < arr.length; i++) {\n\n            // Using the property that a number is Fibonacci if\n            // and only if one of 5*n^2 + 4 or 5*n^2 - 4 is a\n            // perfect square\n            let fact1 = 5 * Math.pow(arr[i], 2) + 4;\n            let fact2 = 5 * Math.pow(arr[i], 2) - 4;\n            if (Math.pow(Math.round(Math.sqrt(fact1)), 2) === fact1 ||\n                Math.pow(Math.round(Math.sqrt(fact2)), 2) === fact2) {\n                res.push(arr[i]);\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}