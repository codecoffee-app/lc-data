{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702886,
            "title": "Form the Largest Number",
            "titleSlug": "largest-number-formed-from-an-array1117",
            "content": "<p><span >Given an array of integers&nbsp;<strong>arr[]</strong><strong>&nbsp;</strong>representing non-negative integers, arrange them so that after concatenating all of them in order, it results in the&nbsp;<strong>largest&nbsp;</strong>possible<strong>&nbsp;number</strong>. Since the result may be very large, return it as a string.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [3, 30, 34, 5, 9]\n<strong>Output:</strong> \"9534330\"\n<strong>Explanation:</strong> Given numbers are [3, 30, 34, 5, 9], the arrangement \"9534330\" gives the largest value.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [54, 546, 548, 60]\n<strong>Output:</strong> \"6054854654\"\n<strong>Explanation:</strong> Given numbers are [54, 546, 548, 60], the arrangement \"6054854654\" gives the largest value.<br /></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [3, 4, 6, 5, 9]\n<strong>Output:</strong> \"96543\"\n<strong>Explanation:</strong> Given numbers are [3, 4, 6, 5, 9], the arrangement \"96543\" gives the largest value.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />0 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of non-negative integers, arrange them such that when concatenated in order, they form the largest possible number. Return the largest number as a string.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[3, 30, 34, 5, 9]",
                        "output": "9534330",
                        "explanation": "Concatenating the numbers in the order 9, 5, 34, 3, and 30 results in the largest possible number: 9534330."
                    },
                    {
                        "input": "[54, 546, 548, 60]",
                        "output": "6054854654",
                        "explanation": "Concatenating the numbers in the order 60, 548, 546, and 54 results in the largest possible number: 6054854654."
                    },
                    {
                        "input": "[3, 4, 6, 5, 9]",
                        "output": "96543",
                        "explanation": "Concatenating the numbers in the order 9, 6, 5, 4, and 3 results in the largest possible number: 96543."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >1. Use of Comparison based sorting algorithm will be useful here</span></p>",
            "<p><span >2. Given two numbers X and Y, decide which number to put first &ndash; we compare two numbers XY (Y appended at the end of X) and YX (X appended at the end of Y). If XY is larger, then X should come before Y in output, else Y should come before.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "zoho",
            "amazon",
            "microsoft",
            "makemytrip"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // A comparison function which is used by sort() in printLargest()\n    static int myCompare(int x, int y) {\n        // first append y at the end of x\n        string xy = to_string(x) + to_string(y);\n\n        // then append x at the end of y\n        string yx = to_string(y) + to_string(x);\n\n        // Now see which of the two formed numbers is greater\n        return xy.compare(yx) > 0 ? 1 : 0;\n    }\n\n    // The main function that prints the arrangement with the largest value.\n    // The function accepts a vector of strings\n    string findLargest(vector<int> &arr) {\n        sort(arr.begin(), arr.end(), myCompare);\n\n        string ans;\n        for (int i = 0; i < arr.size(); i++)\n            ans += to_string(arr[i]);\n        if (ans[0] == '0')\n            return \"0\";\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // A comparison function used by sort in printLargest\n    static class MyCompare implements Comparator<String> {\n        public int compare(String x, String y) {\n            // Compare concatenated results as strings\n            String xy = x + y;\n            String yx = y + x;\n            return xy.compareTo(yx) > 0 ? -1 : 1; // Descending order\n        }\n    }\n\n    // The main function that prints the arrangement with the largest value.\n    String findLargest(int[] arr) {\n        // Convert int[] to String[] for custom sorting\n        String[] strArr =\n            Arrays.stream(arr).mapToObj(String::valueOf).toArray(String[] ::new);\n\n        // Sort array using the custom comparator\n        Arrays.sort(strArr, new MyCompare());\n\n        // Check if the largest value is \"0\"\n        if (strArr[0].equals(\"0\")) return \"0\";\n\n        // Concatenate all numbers to form the result\n        StringBuilder ans = new StringBuilder();\n        for (String num : strArr) ans.append(num);\n        return ans.toString();\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Backend Complete function Template for python3\n\n\nclass Solution:\n\n    @staticmethod\n    def my_compare(x, y):\n        # Compare concatenated strings to decide the order\n        if x + y > y + x:\n            return -1  # Descending order\n        elif x + y < y + x:\n            return 1\n        else:\n            return 0\n\n    def findLargest(self, arr):\n        # Sort array using custom comparator logic\n        arr = sorted(map(str, arr), key=lambda x: x * 10, reverse=True)\n\n        # Check if the largest value is \"0\"\n        if arr[0] == \"0\":\n            return \"0\"\n\n        # Concatenate all numbers to form the result\n        return ''.join(arr)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to print the largest number\n    findLargest(arr) {\n        // Sorting the array in descending order based on customized comparison\n        arr.sort((x, y) => {\n            const xy = x.toString() + y.toString(); // concatenating x and y as strings\n            const yx = y.toString() + x.toString(); // concatenating y and x as strings\n            return yx.localeCompare(\n                xy); // comparing the two concatenated strings in descending order\n        });\n\n        // If the largest value is \"0\", return \"0\"\n        if (arr[0] === 0) return \"0\";\n\n        // Concatenating all numbers in the sorted order\n        let ans = arr.join('');\n\n        return ans; // returning the final result as a string\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}