{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703601,
            "title": "Largest number in one swap",
            "titleSlug": "largest-number-in-one-swap1520",
            "content": "<p><span >Given a string<strong> s</strong>, return the <strong>lexicographically largest</strong> string that can be obtained by swapping at most <strong>one pair</strong> of characters in s.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"768\"\n<strong>Output: </strong>\"867\"\n<strong>Explanation: </strong>Swapping the 1st and 3rd characters(7 and 8 respectively), gives the lexicographically largest string.</span></pre>\n<pre><span ><strong>Input: </strong>s = \"333\"\n<strong>Output: </strong>\"333\"\n<strong>Explanation: </strong>Performing any swaps gives the same result i.e \"333\".\n</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; |s| &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, find the lexicographically largest string that can be obtained by swapping at most one pair of characters in `s`. If no swap improves the string, return the original string.",
                "constraints": [
                    "1 <= |s| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "768",
                        "output": "867",
                        "explanation": "Swapping the first and third characters (7 and 8) results in the lexicographically largest string."
                    },
                    {
                        "input": "333",
                        "output": "333",
                        "explanation": "No swap can produce a lexicographically larger string.  Therefore, the original string is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try swapping a larger character on the right&nbsp;with a smaller character on the left.:)</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    // Function to swap two characters in a string\n    string largestSwap(string &s) {\n        char maxDigit = '0';\n        int maxIndx = -1;\n        int l = -1;\n        int r = -1;\n\n        for (int i = s.size() - 1; i >= 0; i--) {\n\n            // current digit is the largest by far\n            if (s[i] > maxDigit) {\n                maxDigit = s[i];\n                maxIndx = i;\n                continue;\n            }\n\n            // best digit for swap if there is no more\n            // such situation on the left side\n            if (s[i] < maxDigit) {\n                l = i;\n                r = maxIndx;\n            }\n        }\n\n        // check for is number already in order\n        if (l == -1)\n            return s;\n\n        swap(s[l], s[r]);\n\n        return s;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to swap two characters in a string\n    public String largestSwap(String s) {\n        char[] arr = s.toCharArray();\n        char maxDigit = '0';\n        int maxIndex = -1;\n        int l = -1, r = -1;\n\n        for (int i = arr.length - 1; i >= 0; i--) {\n            // Current digit is the largest seen so far\n            if (arr[i] > maxDigit) {\n                maxDigit = arr[i];\n                maxIndex = i;\n                continue;\n            }\n\n            // Best digit for swap if there's no better option on the left\n            if (arr[i] < maxDigit) {\n                l = i;\n                r = maxIndex;\n            }\n        }\n\n        // If no swap is needed, return original string\n        if (l == -1) {\n            return s;\n        }\n\n        // Swap characters\n        char temp = arr[l];\n        arr[l] = arr[r];\n        arr[r] = temp;\n\n        return new String(arr);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def largestSwap(self, s):\n        arr = list(s)\n        max_digit = '0'\n        max_index = -1\n        l, r = -1, -1\n\n        # Traverse from right to left\n        for i in range(len(arr) - 1, -1, -1):\n            # If current digit is the largest seen so far\n            if arr[i] > max_digit:\n                max_digit = arr[i]\n                max_index = i\n                continue\n\n            # If there's a smaller digit before a larger one, mark swap positions\n            if arr[i] < max_digit:\n                l, r = i, max_index\n\n        # If no swap is needed, return the original string\n        if l == -1:\n            return s\n\n        # Swap characters\n        arr[l], arr[r] = arr[r], arr[l]\n\n        return \"\".join(arr)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    largestSwap(s) {\n        let arr = s.split(\"\"); // Convert string to array for easy swapping\n        let maxDigit = '0';\n        let maxIndex = -1;\n        let l = -1, r = -1;\n\n        // Traverse from right to left\n        for (let i = arr.length - 1; i >= 0; i--) {\n            // If current digit is the largest seen so far\n            if (arr[i] > maxDigit) {\n                maxDigit = arr[i];\n                maxIndex = i;\n                continue;\n            }\n\n            // If there's a smaller digit before a larger one, mark swap positions\n            if (arr[i] < maxDigit) {\n                l = i;\n                r = maxIndex;\n            }\n        }\n\n        // If no swap is needed, return the original string\n        if (l === -1) {\n            return s;\n        }\n\n        // Swap characters\n        [arr[l], arr[r]] = [ arr[r], arr[l] ];\n\n        return arr.join(\"\"); // Convert back to string\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}