{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704682,
            "title": "Largest number possible",
            "titleSlug": "largest-number-possible5028",
            "content": "<p><span style=\"font-size: 18px;\">Given two numbers <strong>n</strong> and <strong>s</strong>&nbsp;, find the <strong>largest number</strong> that can be formed with <strong>n</strong> digits and whose sum of digits should be equals to <strong>s</strong>. Return -1 if it is not possible.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 2, s = 9\n<strong>Output:</strong> 90\n<strong>Explaination:</strong> It is the biggest number with sum of digits equals to 9.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 3, s = 20\n<strong>Output:</strong> 992\n<strong>Explaination:</strong> It is the biggest number with sum of digits equals to 20.<br /></span></pre>\n<pre><strong>Input:</strong> n = 1, s = 0\n<strong>Output:</strong> 0</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>5</sup><br />0 &le; s &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers `n` and `s`, determine the largest possible number that can be formed using `n` digits such that the sum of its digits equals `s`. If no such number exists, return -1.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= s <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 2, s = 9",
                        "output": "90",
                        "explanation": "90 is the largest 2-digit number whose digits sum to 9."
                    },
                    {
                        "input": "n = 3, s = 20",
                        "output": "992",
                        "explanation": "992 is the largest 3-digit number whose digits sum to 20."
                    },
                    {
                        "input": "n = 1, s = 0",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Add the largest digit at the starting of the number.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the largest number that can be made with given sum of digits.\n    string findLargest(int n, int s) {\n        string ans = \"\";\n\n        // If the sum of digits is 0 and number of digits is more than 1,\n        // return -1 since it is not possible to form a number with only 0 digits.\n        if (s == 0 && n > 1)\n            return \"-1\";\n\n        // Iterating over each digit in the number.\n        for (int i = 0; i < n; i++) {\n\n            // If the sum is greater than or equal to 9,\n            // we add '9' to the number and subtract 9 from the sum.\n            if (s >= 9) {\n                ans += '9';\n                s -= 9;\n            }\n            // If the sum is less than 9, we add the corresponding digit\n            // to the number and set the sum to 0.\n            else {\n                ans += char(48 + s);\n                s = 0;\n            }\n        }\n\n        // If there is any remaining sum, it means we were not able to\n        // use up the entire sum, so we return -1.\n        if (s > 0)\n            return \"-1\";\n\n        // Returning the largest number that can be formed.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static String findLargest(int n, int s) {\n        // code here\n        StringBuilder sb = new StringBuilder();\n        if (s == 0 && n > 1) return \"-1\";\n        for (int i = 0; i < n; i++) {\n            if (s >= 9) {\n                sb.append('9');\n                s -= 9;\n            } else {\n                sb.append((char)(48 + s));\n                s = 0;\n            }\n        }\n        if (s > 0) return \"-1\";\n        return sb.toString();\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findLargest(self, n: int, s: int) -> str:\n        ans = \"\"\n\n        # If the sum of digits is 0 and the number of digits is more than 1,\n        # return \"-1\" since it is not possible to form a number with only 0 digits.\n        if s == 0 and n > 1:\n            return \"-1\"\n\n        # Iterating over each digit in the number.\n        for i in range(n):\n            # If the sum is greater than or equal to 9,\n            # we add '9' to the number and subtract 9 from the sum.\n            if s >= 9:\n                ans += '9'\n                s -= 9\n            # If the sum is less than 9, we add the corresponding digit\n            # to the number and set the sum to 0.\n            else:\n                ans += str(s)\n                s = 0\n\n        # If there is any remaining sum, it means we were not able to\n        # use up the entire sum, so we return \"-1\".\n        if s > 0:\n            return \"-1\"\n\n        # Returning the largest number that can be formed as a string.\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    findLargest(n, s) {\n        let ans = \"\";\n        if (s == 0 && n > 1) return \"-1\";\n        for (let i = 0; i < n; i++) {\n            if (s >= 9) {\n                ans += '9';\n                s -= 9;\n            } else {\n                ans += String.fromCharCode(48 + s);\n                s = 0;\n            }\n        }\n        if (s > 0) return \"-1\";\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}