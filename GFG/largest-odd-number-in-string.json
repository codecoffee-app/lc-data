{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712068,
            "title": "Largest odd number in string",
            "titleSlug": "largest-odd-number-in-string",
            "content": "<p><span style=\"font-size: 18px;\">Given a string<strong> S</strong>, representing a large integer. Return the<strong><em>&nbsp;</em>largest-valued odd&nbsp;</strong>integer (as a string) that is substring of the given string <strong>S</strong>.</span></p>\n<p><br /><span style=\"font-size: 18px;\">Note: A <strong>substring</strong> is a contiguous sequence of characters within a string. A null string (\"\") is also a substring.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre style=\"background: #eee; border: 1px solid #ccc; padding: 5px 10px;\"><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"504\"<br /><strong>Output:</strong> \"5\"<br /><strong>Explanation</strong>: The only subtring \"5\" is odd number.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input</strong>: s = \"2042\"<br /><strong>Output:</strong> \"\"<br /><strong>Explanation</strong>: All the possible non-empty substring have even value.</span></pre>\n<p>&nbsp;</p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>maxOdd()&nbsp;</strong>which takes the string<strong> S</strong>&nbsp;as input&nbsp;and returns the<strong><em>&nbsp;</em></strong>largest-valued odd<strong>&nbsp;</strong>integer&nbsp;that is substring of the given string.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=|S|&lt;=2*10<sup>5</sup></span></p>\n<p><span style=\"font-size: 18px;\"><strong>S</strong> only consists of digits and does not contain any leading zeros.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` representing a large integer, find the largest-valued odd integer (as a string) that is a substring of `S`.\n\nA substring is a contiguous sequence of characters within a string. An empty string (\" \") is also considered a substring.",
                "constraints": [
                    "1 <= |S| <= 2 * 10^5",
                    "S only consists of digits and does not contain any leading zeros."
                ],
                "testcases": [
                    {
                        "input": "504",
                        "output": "5",
                        "explanation": "The substring \"5\" is the only odd number substring of the given input string."
                    },
                    {
                        "input": "2042",
                        "output": "",
                        "explanation": "All possible non-empty substrings have even values. Therefore, the largest odd substring is an empty string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    //Function to find largest odd number from the given string.\n    string maxOdd(string s) {\n        int idx = s.size() - 1;\n        \n        //iterating from the end of the string to find the largest odd number.\n        while (idx >= 0) {\n            //checking if the current character is odd.\n            if ((s[idx] - '0') % 2) break;\n            idx--;\n        }\n        \n        //if no odd number found, return an empty string.\n        if (idx < 0) return \"\";\n        \n        //returning the substring from the beginning of the string to the index with the largest odd number.\n        return s.substr(0, idx + 1);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to find the maximum odd number in a string\n    String maxOdd(String s) {\n        int idx = s.length() - 1; // Set the index to the last character of the string\n        while (idx >= 0) { // Loop through the string from the end\n            if ((s.charAt(idx) - '0') % 2 != 0) break; // Check if the character at index is odd, exit the loop if it is\n            idx--; // Decrement the index\n        }\n        if (idx < 0) return \"\"; // If no odd number is found, return an empty string\n        return s.substring(0, idx + 1); // Return the substring from the start to the index (inclusive)\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to find the rightmost odd digit in the string.\n    def maxOdd(self, s):\n        p = -1\n        #iterating over the string from the rightmost digit.\n        for i in range(len(s)-1, -1, -1):\n            #if the current digit is odd, store its index and break the loop.\n            if int(s[i])&1:\n                p = i\n                break\n        #if no odd digit is found, return an empty string.\n        if p == -1:\n            return ''\n        #return the string from start till the rightmost odd digit index.\n        return s[:p+1]",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}