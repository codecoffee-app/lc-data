{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702865,
            "title": "Largest Permutation",
            "titleSlug": "largest-permutation1351",
            "content": "<p><span >Given a permutation&nbsp;as an array and an integer k. Print the lexicographically largest permutation after at most k swaps.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [4, 5, 2, 1, 3], k = 3\n<strong>Output:</strong> [5, 4, 3, 2, 1]\n<strong>Explanation</strong>: Swap 1<sup>st</sup> and 2<sup>nd</sup> elements: 5 4 2 1 3 Swap 3<sup>rd</sup> and 5<sup>th</sup> elements: 5 4 3 1 2 Swap 4<sup>th</sup> and 5<sup>th</sup> elements: 5 4 3 2 1 </span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 1, 3], k = 1\n<strong>Output: </strong>[3, 1, 2]\n<strong>Explanation</strong>: Swap 1<sup>st</sup> and 3<sup>re</sup> elements: 3 1 2 </span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span ><strong>Constraints:</strong><br />2 &le; arr.size() &le; 10<sup>6<br /></sup>1&nbsp;&le; k &le; arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array representing a permutation and an integer 'k', find the lexicographically largest permutation achievable by performing at most 'k' swaps.",
                "constraints": [
                    "2 \u2264 arr.size() \u2264 10^6",
                    "1 \u2264 k \u2264 arr.size()"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [4, 5, 2, 1, 3], k = 3",
                        "output": "[5, 4, 3, 2, 1]",
                        "explanation": "The algorithm should perform the following swaps:\n1. Swap 1st and 2nd elements: [5, 4, 2, 1, 3]\n2. Swap 3rd and 5th elements: [5, 4, 3, 1, 2]\n3. Swap 4th and 5th elements: [5, 4, 3, 2, 1]"
                    },
                    {
                        "input": "arr[] = [2, 1, 3], k = 1",
                        "output": "[3, 1, 2]",
                        "explanation": "The algorithm should swap the 1st and 3rd elements: [3, 1, 2]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Create a HashMap or an array of length n to store element-index pair or map element to its index. In each iteration swap the ith element with the element n &ndash; i. where i is the index or count of the loop. Also swap their position, i.e. update the hashmap or array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\nclass Solution {\n  public:\n    // Function to perform K-swap permutation.\n    vector<int> KswapPermutation(vector<int>& arr, int k) {\n        // creating an array to store the positions of elements.\n        int n = arr.size();\n        int pos[n + 1];\n\n        // filling the positions array with the indices of elements.\n        for (int i = 0; i < n; ++i)\n            pos[arr[i]] = i;\n\n        // iterating over the array and performing swaps until k becomes 0.\n        for (int i = 0; i < n && k; ++i) {\n            // skipping if the element is already at its correct position.\n            if (arr[i] == n - i)\n                continue;\n\n            // swapping the elements and updating the positions array.\n            int temp = pos[n - i];\n            pos[arr[i]] = pos[n - i];\n            pos[n - i] = i;\n            swap(arr[temp], arr[i]);\n            --k;\n        }\n        return arr;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to perform K-swap permutation.\n    public ArrayList<Integer> KswapPermutation(int[] arr, int k) {\n        int n = arr.length;\n        int[] pos =\n            new int[n + 1]; // creating an array to store the positions of elements.\n\n        // filling the positions array with the indices of elements.\n        for (int i = 0; i < n; ++i) {\n            pos[arr[i]] = i;\n        }\n\n        // iterating over the array and performing swaps until k becomes 0.\n        for (int i = 0; i < n && k > 0; ++i) {\n            // skipping if the element is already at its correct position.\n            if (arr[i] == n - i) continue;\n\n            // swapping the elements and updating the positions array.\n            int temp = pos[n - i];\n            pos[arr[i]] = pos[n - i];\n            pos[n - i] = i;\n            swap(arr, temp, i);\n            --k;\n        }\n\n        // Converting the modified array to an ArrayList.\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : arr) {\n            result.add(num);\n        }\n\n        return result;\n    }\n\n    // Helper function to swap elements in an array.\n    void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    # Function to perform K-swap permutation.\n    def KswapPermutation(self, arr, k):\n        n = len(arr)\n        pos = [0] * (n + 1\n                     )  # Creating an array to store the positions of elements.\n\n        # Filling the positions array with the indices of elements.\n        for i in range(n):\n            pos[arr[i]] = i\n\n        # Iterating over the array and performing swaps until k becomes 0.\n        for i in range(n):\n            if k == 0:\n                break\n\n            # Skipping if the element is already at its correct position.\n            if arr[i] == n - i:\n                continue\n\n            # Swapping the elements and updating the positions array.\n            temp = pos[n - i]\n            pos[arr[i]] = pos[n - i]\n            pos[n - i] = i\n            arr[temp], arr[i] = arr[i], arr[temp]\n            k -= 1\n\n        return arr\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n\n    // Function to perform K-swap permutation.\n    KswapPermutation(arr, k) {\n        let n = arr.length;\n        let pos = new Array(n + 1).fill(\n            0); // Creating an array to store the positions of elements.\n\n        // Filling the positions array with the indices of elements.\n        for (let i = 0; i < n; ++i) {\n            pos[arr[i]] = i;\n        }\n\n        // Iterating over the array and performing swaps until k becomes 0.\n        for (let i = 0; i < n && k > 0; ++i) {\n            // Skipping if the element is already at its correct position.\n            if (arr[i] === n - i) continue;\n\n            // Swapping the elements and updating the positions array.\n            let temp = pos[n - i];\n            pos[arr[i]] = pos[n - i];\n            pos[n - i] = i;\n            this.swap(arr, temp, i);\n            k--;\n        }\n\n        return arr;\n    }\n\n    // Helper function to swap elements in an array.\n    swap(arr, i, j) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}