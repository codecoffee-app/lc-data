{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703958,
            "title": "Largest prime factor",
            "titleSlug": "largest-prime-factor2601",
            "content": "<p><span >Given a number <strong><code>n</code></strong>, your task is to find the largest prime factor of <code>n</code>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 5\n<strong>Output: </strong>5\n<strong>Explanation: </strong>The prime factorization of 5 is just 5. Therefore, the largest prime factor is 5.</span></pre>\n<pre><span ><strong>Input: </strong>n = 24\n<strong>Output: </strong>3\n<strong>Explanation: </strong>The prime factorization of 24 is <span class=\"katex\"><span class=\"katex-mathml\">2<sup>3</sup>&times;3</span></span>. Among the prime factors (2, 3), the largest is 3.</span></pre>\n<pre><span ><strong>Input: </strong>n = 13195\n<strong>Output: </strong>29\n<strong>Explanation: </strong>The prime factorization of 13195 is <span class=\"katex\"><span class=\"katex-mathml\">5&times;7&times;13&times;29</span></span>. The largest prime factor is 29.</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >2 &lt;= n &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Start by dividing n by 2, then check for odd factors up to &radic;n for the largest prime.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "yahoo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int largestPrimeFactor(int n) {\n        int num = 2;\n        // loop till sqrt(n)\n        while ((num * num) <= n) {\n            if (n % num == 0) // if num divides n evenly\n                n /= num;     // divide n by num\n            else\n                num++; // increase num if it doesn't divide n\n        }\n        return n;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static int largestPrimeFactor(int n) {\n        int num = 2;\n        // loop till sqrt(n)\n        while ((num * num) <= n) {\n            if (n % num == 0) // if num divides n evenly\n                n /= num;     // divide n by num\n            else\n                num++; // increase num if it doesn't divide n\n        }\n        return n;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def largestPrimeFactor(self, n):\n        num = 2\n        # loop till sqrt(n)\n        while num * num <= n:\n            if n % num == 0:  # if num divides n evenly\n                n //= num  # divide n by num\n            else:\n                num += 1  # increase num if it doesn't divide n\n        return n\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\npublic class Solution {\n    // Function to find the largest prime factor of a given number n.\n    public int largestPrimeFactor(int n) {\n        int num = 2;\n        // Loop till sqrt(n)\n        while ((num * num) <= n) {\n            if (n % num == 0) // If num divides n evenly\n                n /= num;     // Divide n by num\n            else\n                num++; // Increase num if it doesn't divide n\n        }\n        return n; // Return the largest prime factor\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    largestPrimeFactor(n) {\n        let num = 2;\n        while ((num * num) <= n) {\n            if (n % num === 0) {\n                n /= num;\n            } else {\n                num++;\n            }\n        }\n        return n;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}