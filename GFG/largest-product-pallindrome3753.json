{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705015,
            "title": "Largest Product Pallindrome",
            "titleSlug": "largest-product-pallindrome3753",
            "content": "<p><span style=\"font-size:18px\">Given a value N, find out the largest palindrome number which is product of two N-digit numbers.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 2\n<strong>Output: </strong>9009\n<strong>Explanation:</strong></span><strong> </strong><span style=\"font-size:18px\">9009 is the largest number \nwhich is product of two 2-digit numbers. \n9009 = 91*99.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 1\n<strong>Output: </strong>9\n<strong>Explanation: </strong>9 is the largest number \nwhich is product of two 1-digit numbers. \n3 * 3 = 9.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anyhting. Your task is to complete the function&nbsp;<strong>LargestProductPalin()</strong>&nbsp;which takes N as input parameter and returns largest palindromic product of 2 N-digit numbers.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(10<sup>n+1</sup>)<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 6</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer N, determine the largest palindrome that can be formed by the product of two N-digit numbers.",
                "constraints": [
                    "1 <= N <= 6"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "9009",
                        "explanation": "The largest palindrome formed by the product of two 2-digit numbers is 9009, which is equal to 91 * 99."
                    },
                    {
                        "input": "1",
                        "output": "9",
                        "explanation": "The largest palindrome formed by the product of two 1-digit numbers is 9, which is equal to 3 * 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Optimize your solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "yahoo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    \n    //Function to find the largest palindrome product of N-digit numbers.\n    long long int LargestProductPalin(int N)\n    {\n        long long upper_limit, lower_limit;\n        upper_limit = 0;\n        lower_limit = 0;\n        \n        //finding the upper limit by multiplying 9 with N-digit numbers.\n        for(int i = 1; i <= N; i++)\n            upper_limit *= 10, upper_limit += 9;\n        \n        //finding the lower limit by adding 1 to the upper limit divided by 10.\n        lower_limit = 1 + upper_limit/10;\n        \n        //variable to store the maximum product.\n        long long int max_product = 0;\n        \n        //loop through all N-digit numbers from upper_limit to lower_limit.\n        for(long long int i = upper_limit; i >= lower_limit; i--){\n            for(long long int j = i; j >= lower_limit; j--){\n                \n                //calculating the product of i and j.\n                long long int product = i * j;\n                \n                //if the product is less than the current maximum product, break.\n                if(product < max_product)\n                    break;\n                \n                //reversing the product to check if it is a palindrome.\n                long long int rev = 0;\n                long long x = product;\n                while(x){\n                    rev = rev*10 + x%10;\n                    x /= 10;\n                }\n                \n                //if the product is a palindrome and greater than the current maximum product, update the maximum product.\n                if(product == rev and product > max_product)\n                    max_product = product;\n            }\n        }\n        \n        //returning the maximum product.\n        return max_product;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Function to find the largest product palindrome of given digit length.\n    public long LargestProductPalin(int N)\n    {\n        long upper_limit = 0, lower_limit = 0;\n    \n        //finding the upper limit by multiplying 9 with N-digit numbers.\n        for(int i = 1; i <= N; i++)\n            upper_limit = upper_limit * 10 + 9;\n    \n        //finding the lower limit by adding 1 to the upper limit divided by 10.\n        lower_limit = 1 + upper_limit/10;\n    \n        //variable to store the maximum product.\n        long max_product = 0;\n    \n        //loop through all N-digit numbers from upper_limit to lower_limit.\n        for(long i = upper_limit; i >= lower_limit; i--){\n            for(long j = i; j >= lower_limit; j--){\n                \n                //calculating the product of i and j.\n                long product = i * j;\n                \n                //if the product is less than the current maximum product, break.\n                if(product < max_product)\n                    break;\n                \n                //reversing the product to check if it is a palindrome.\n                long rev = 0;\n                long x = product;\n                while(x != 0){\n                    rev = rev*10 + x%10;\n                    x /= 10;\n                }\n                \n                //if the product is a palindrome and greater than the current maximum product, update the maximum product.\n                if(product == rev && product > max_product)\n                    max_product = product;\n            }\n        }\n    \n        //returning the maximum product.\n        return max_product;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}