{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700283,
            "title": "Largest product",
            "titleSlug": "largest-product",
            "content": "<p><span >Given an array <strong>arr</strong>&nbsp;and an integer <strong>k</strong>. You have to find the maximum product of k contiguous elements in the array.&nbsp;<br /><br /><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] =<strong> </strong>[1, 2, 3, 4] and k = 2<br /><strong>Output: </strong>12&nbsp;<br /><strong>Explanation: </strong>The sub-array of size 2 will be 3 4 and the product is 12.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 6, 7, 8] and k = 3<br /><strong>Output: </strong>336<br /><strong>Explanation: </strong>The sub-array of size 3 will be 6 7 8 and the product is 336.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)</span><br /><span ><strong>Expected Auxilary Space:&nbsp;</strong>O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= k&lt;= 8<br />1&lt;= arr[i] &lt;=10<sup>2</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` and an integer `k`, find the maximum product of `k` contiguous elements in the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= k <= 8",
                    "1 <= arr[i] <= 10^2"
                ],
                "testcases": [
                    {
                        "input": "arr = [1, 2, 3, 4], k = 2",
                        "output": "12",
                        "explanation": "The contiguous subarray of size 2 with the maximum product is [3, 4], and their product is 3 * 4 = 12."
                    },
                    {
                        "input": "arr = [1, 6, 7, 8], k = 3",
                        "output": "336",
                        "explanation": "The contiguous subarray of size 3 with the maximum product is [6, 7, 8], and their product is 6 * 7 * 8 = 336."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to find first subarray of size k product then use the sliding window concept to check all subarrays of size of k.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findMaxProduct(vector<int>& arr, int k) {\n        int n = arr.size();\n        int i = 0, j = 0;\n        // Initializing mx to 0\n        int mx = 0;\n        int p = 1;\n        while (j < n) {\n            p *= arr[j];\n            if ((j - i + 1) < k) {\n                // subarray size is less than k\n                j++;\n            } else {\n                // subarray size is equal to k\n                // updating mx\n                mx = max(mx, p);\n                p /= arr[i];\n                j++;\n                i++;\n            }\n        }\n        return mx;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findMaxProduct(int[] arr, int k) {\n        int n = arr.length;\n        int i = 0, j = 0;\n        // Initializing mx to 0\n        int mx = 0;\n        int p = 1;\n\n        while (j < n) {\n            p *= arr[j];\n\n            if ((j - i + 1) < k) {\n                // Subarray size is less than k\n                j++;\n            } else {\n                // Subarray size is equal to k\n                // Updating mx\n                mx = Math.max(mx, p);\n                p /= arr[i];\n                j++;\n                i++;\n            }\n        }\n        return mx;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findMaxProduct(self, arr, k):\n        n = len(arr)\n        i = 0\n        j = 0\n        # Initializing mx to 0\n        mx = 0\n        p = 1\n\n        while j < n:\n            p *= arr[j]\n\n            if (j - i + 1) < k:\n                # Subarray size is less than k\n                j += 1\n            else:\n                # Subarray size is equal to k\n                # Updating mx\n                mx = max(mx, p)\n                p //= arr[i]\n                j += 1\n                i += 1\n\n        return mx\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMaxProduct(arr, k) {\n        const n = arr.length;\n        let i = 0, j = 0;\n        // Initializing mx to 0\n        let mx = 0;\n        let p = 1;\n\n        while (j < n) {\n            p *= arr[j];\n\n            if ((j - i + 1) < k) {\n                // Subarray size is less than k\n                j++;\n            } else {\n                // Subarray size is equal to k\n                // Updating mx\n                mx = Math.max(mx, p);\n                p /= arr[i];\n                j++;\n                i++;\n            }\n        }\n        return mx;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}