{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705423,
            "title": "Largest square formed in a matrix",
            "titleSlug": "largest-square-formed-in-a-matrix0806",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary matrix <strong>mat</strong>, find out the maximum length of a side of a <strong>square</strong> sub-matrix with all 1s.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Input: </strong>mat = [[0, 1, 1, 0, 1], \n&nbsp;\\t\\t [1, 1, 0, 1, 0],<br />\\t\\t  [0, 1, 1, 1, 0],<br />\\t\\t  [1, 1, 1, 1, 0],<br />\\t\\t  [1, 1, 1, 1, 1],<br />\\t\\t  [0, 0, 0, 0, 0]]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/705423/Web/Other/blobid0_1720438143.png\" width=\"401\" height=\"149\" /><br />The maximum length of a side of the square sub-matrix is 3 where every element is 1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>mat = [[1, 1], \n&nbsp;\\t\\t [1, 1]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The maximum length of a side of the square sub-matrix is 2. The matrix itself is the maximum sized sub-matrix in this case.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>mat = [[0, 0], \n&nbsp;\\t\\t [0, 0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no 1 in the matrix.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; mat.size(), mat[i].size() &le; 500<br />0 &le; mat[i][j] &le; 1&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary matrix `mat`, determine the maximum side length of a square submatrix containing only 1s.",
                "constraints": [
                    "1 <= mat.size(), mat[i].size() <= 500",
                    "0 <= mat[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[[0, 1, 1, 0, 1], [1, 1, 0, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 1, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]]",
                        "output": "3",
                        "explanation": "The largest square submatrix with all 1s has a side length of 3."
                    },
                    {
                        "input": "[[1, 1], [1, 1]]",
                        "output": "2",
                        "explanation": "The matrix itself is a square submatrix of size 2x2 containing only 1s."
                    },
                    {
                        "input": "[[0, 0], [0, 0]]",
                        "output": "0",
                        "explanation": "The matrix contains no 1s, so the largest square submatrix of 1s has side length 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Size of the square matrix ending at (i, j) depends on the sizes of square matrices ending at (i-1, j-1), (i-1, j) and (i, j-1).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [
            "amazon",
            "samsung",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the maximum size of square submatrix with all 1s.\n    int maxSquare(vector<vector<int>>& mat) {\n        // Initialize a 2D array to store the sizes of the square submatrices.\n        int n = mat.size(), m = mat[0].size();\n        int sub[n][m], maxsize = 0;\n\n        // Initialize the first row of the submatrix array and update the maximum size.\n        for (int i = 0; i < m; i++) {\n            sub[0][i] = mat[0][i];\n            maxsize = max(maxsize, sub[0][i]);\n        }\n\n        // Initialize the first column of the submatrix array and update the maximum\n        // size.\n        for (int i = 0; i < n; i++) {\n            sub[i][0] = mat[i][0];\n            maxsize = max(maxsize, sub[i][0]);\n        }\n\n        // Base on the elements of the input matrix, calculate the size of the square\n        // submatrices and update the maximum size.\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                if (mat[i][j] == 1)\n                    sub[i][j] =\n                        min(sub[i - 1][j - 1], min(sub[i][j - 1], sub[i - 1][j])) + 1;\n                else\n                    sub[i][j] = 0;\n                maxsize = max(maxsize, sub[i][j]);\n            }\n        }\n\n        // Return the maximum size of the square submatrix.\n        return maxsize;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static int maxSquare(int mat[][]) {\n        int n = mat.length, m = mat[0].length;\n        int max = 0;\n        // loop through each element in the matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                // check if the element is not in the first row or column\n                // and it is not equal to zero\n                if ((i != 0 && j != 0) && mat[i][j] != 0) {\n                    // calculate the minimum of the three adjacent elements and add it\n                    // to the current element\n                    mat[i][j] = mat[i][j] +\n                                Math.min(mat[i - 1][j],\n                                         Math.min(mat[i - 1][j - 1], mat[i][j - 1]));\n                }\n                // update the maximum square value\n                max = max < mat[i][j] ? mat[i][j] : max;\n            }\n        }\n        // return the maximum square value\n        return max;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def maxSquare(self, mat):\n        # Initialize a 2D array to store the sizes of the square submatrices.\n        n = len(mat)  # Number of rows\n        m = len(mat[0])  # Number of columns\n        sub = [[0] * m for _ in range(n)]\n        maxsize = 0\n\n        # Initialize the first row of the submatrix array and update the maximum size.\n        for i in range(m):\n            sub[0][i] = mat[0][i]\n            maxsize = max(maxsize, sub[0][i])\n\n        # Initialize the first column of the submatrix array and update the maximum size.\n        for i in range(n):\n            sub[i][0] = mat[i][0]\n            maxsize = max(maxsize, sub[i][0])\n\n        # Based on the elements of the input matrix, calculate the size of the square submatrices\n        # and update the maximum size.\n        for i in range(1, n):\n            for j in range(1, m):\n                if mat[i][j] == 1:\n                    sub[i][j] = min(sub[i - 1][j - 1],\n                                    min(sub[i][j - 1], sub[i - 1][j])) + 1\n                else:\n                    sub[i][j] = 0\n                maxsize = max(maxsize, sub[i][j])\n\n        # Return the maximum size of the square submatrix.\n        return maxsize\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the maximum size of square submatrix with all 1s.\n    maxSquare(mat) {\n        // Initialize a 2D array to store the sizes of the square submatrices.\n        let n = mat.length; // Number of rows\n        let m = mat[0].length;\n        let sub = new Array(n).fill(0).map(() => new Array(m).fill(0));\n        let maxsize = 0;\n\n        // Initialize the first row of the submatrix array and update the maximum size.\n        for (let i = 0; i < m; i++) {\n            sub[0][i] = mat[0][i];\n            maxsize = Math.max(maxsize, sub[0][i]);\n        }\n\n        // Initialize the first column of the submatrix array and update the maximum\n        // size.\n        for (let i = 0; i < n; i++) {\n            sub[i][0] = mat[i][0];\n            maxsize = Math.max(maxsize, sub[i][0]);\n        }\n\n        // Based on the elements of the input matrix, calculate the size of the square\n        // submatrices and update the maximum size.\n        for (let i = 1; i < n; i++) {\n            for (let j = 1; j < m; j++) {\n                if (mat[i][j] === 1)\n                    sub[i][j] = Math.min(sub[i - 1][j - 1],\n                                         Math.min(sub[i][j - 1], sub[i - 1][j])) +\n                                1;\n                else\n                    sub[i][j] = 0;\n                maxsize = Math.max(maxsize, sub[i][j]);\n            }\n        }\n\n        // Return the maximum size of the square submatrix.\n        return maxsize;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}