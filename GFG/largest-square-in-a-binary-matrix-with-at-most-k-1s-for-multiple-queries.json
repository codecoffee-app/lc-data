{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706309,
            "title": "Binary Matrix with at most K 1s",
            "titleSlug": "largest-square-in-a-binary-matrix-with-at-most-k-1s-for-multiple-queries",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary matrix <strong>M</strong> with <strong>R </strong>rows and <strong>C</strong> columns, where each element of the matrix will be 0 or 1. Find the largest square that can be formed with center <strong>(i, j)</strong> and contains atmost <strong>K</strong> 1s. There are Q queries, a single query has two integers denoting the centre (i,j) of the square.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>R = 4, C = 5\nM = {{1, 0, 1, 0, 0}&nbsp;\n     {1, 0, 1, 1, 1}&nbsp;\n     {1, 1, 1, 1, 1}&nbsp;\n     {1, 0, 0, 1, 0}}\nK = 9, Q = 1\nq_i[] = {1}\nq_j[] = {2}\n<strong>Output:\n</strong>3\n<strong>Explanation:</strong>\nMaximum length square with center\nat (1, 2)&nbsp;that can be formed is of\n3 length from (0, 1) to (2, 3).</span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>R = 3, C = 3\nM = {{1, 1, 1}&nbsp;\n     {1, 1, 1}&nbsp;\n     {1, 1, 1}}\nK = 9, Q = 2\nq_i[] = {1, 2}\nq_j[] = {1, 2}\n<strong>Output :</strong>\n3 1</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>largestSquare()</strong>&nbsp;which takes 2 integers R, and C followed by a list of lists M denoting the binary matrix and then three integers i,j, and K as input and returns a list of integers denting the largest Square possible for each query.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(R*C + Q*log(MIN_DIST)), <br /></span><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:</strong> O(R*C)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; R,C &le; 500<br />1 &le; Q &le; 10<sup>4</sup><br />0 &le; K &le; R*C<br />0 &le; i &lt; R<br />0 &le; j &lt; C</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary matrix M with R rows and C columns, where each element is either 0 or 1. Find the largest square that can be formed with center (i, j) and contains at most K 1s. You will receive Q queries. Each query provides the center (i, j) of the square.",
                "constraints": [
                    "1 <= R, C <= 500",
                    "1 <= Q <= 10^4",
                    "0 <= K <= R*C",
                    "0 <= i < R",
                    "0 <= j < C"
                ],
                "testcases": [
                    {
                        "input": "R = 4, C = 5\nM = {{1, 0, 1, 0, 0}, {1, 0, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 0, 0, 1, 0}}\nK = 9, Q = 1\nq_i[] = {1}\nq_j[] = {2}",
                        "output": "3",
                        "explanation": "The maximum length square centered at (1, 2) that contains at most 9 ones is of length 3, spanning from (0, 1) to (2, 3)."
                    },
                    {
                        "input": "R = 3, C = 3\nM = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}\nK = 9, Q = 2\nq_i[] = {1, 2}\nq_j[] = {1, 2}",
                        "output": "3 1",
                        "explanation": "For the first query centered at (1,1), the maximum square size is 3. For the second query centered at (2,2), the maximum square size is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Dynammic Program + Binary Search.</span></p>",
            "<p><span style=\"font-size:18px\">Use DP to count the number of 1s in each square and then increment the length by 1 until the limit and then finally check the count of the 1s is less than the K or not. If yes, then update the answer.</span></p>\n\n<p><span style=\"font-size:18px\">To compute the number of 1s in a submatrix from (x1, y1) to (x2, y2) using:</span></p>\n\n<p>&nbsp;</p>\n\n<pre>\n<span style=\"font-size:18px\">Number of 1&#39;s = sumDP[x2][y2] - sumDP[x2][y1-1] -\n\n                sumDP[x1-1][y2] + sumDP[x1-1][y1-1]</span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "directi"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    vector<int> largestSquare(vector<vector<int>> matrix, int R, int C, int K, int Q, int q_i[], int q_j[]) {\r\n        \r\n        int countDP[R][C]; \r\n        memset(countDP, 0, sizeof(countDP)); \r\n      \r\n        // Precomputation of the countDP \r\n        // prefix sum of the matrix \r\n        countDP[0][0] = matrix[0][0]; \r\n        for (int i = 1; i < R; i++) \r\n            countDP[i][0] = countDP[i - 1][0] + \r\n                                 matrix[i][0]; \r\n        for (int j = 1; j < C; j++) \r\n            countDP[0][j] = countDP[0][j - 1] + \r\n                                 matrix[0][j]; \r\n        for (int i = 1; i < R; i++) \r\n            for (int j = 1; j < C; j++) \r\n                countDP[i][j] = matrix[i][j] + \r\n                           countDP[i - 1][j] + \r\n                           countDP[i][j - 1] - \r\n                       countDP[i - 1][j - 1]; \r\n        \r\n        vector<int> res;\r\n        \r\n        // Loop to solve each query \r\n        for (int q = 0; q < Q; q++) { \r\n            int i = q_i[q]; \r\n            int j = q_j[q]; \r\n            int min_dist = min(min(i, j), \r\n              min(R - i - 1, C - j - 1)); \r\n            int ans = -1, l = 0, u = min_dist; \r\n              \r\n            // Binary Search to the side which \r\n            // have atmost in K 1's in square \r\n            while (l <= u) { \r\n                int mid = (l + u) / 2; \r\n                int x1 = i - mid, x2 = i + mid; \r\n                int y1 = j - mid, y2 = j + mid; \r\n                // Count total number of 1s in \r\n                // the sub square considered \r\n                int count = countDP[x2][y2]; \r\n                if (x1 > 0) \r\n                    count -= countDP[x1 - 1][y2]; \r\n                if (y1 > 0) \r\n                    count -= countDP[x2][y1 - 1]; \r\n                if (x1 > 0 && y1 > 0) \r\n                    count += countDP[x1 - 1][y1 - 1]; \r\n                  \r\n                // If the count is less than or \r\n                // equals to the maximum move \r\n                // to right half \r\n                if (count <= K) { \r\n                    ans = 2 * mid + 1; \r\n                    l = mid + 1; \r\n                } \r\n                else\r\n                    u = mid - 1; \r\n            } \r\n            if(ans==-1)\r\n                ans = 0;\r\n            res.push_back(ans);\r\n        } \r\n        \r\n        return res;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end function Template for Java\r\n\r\nclass Solution {\r\n    static ArrayList<Integer> largestSquare(ArrayList<ArrayList<Integer>> M, int R, int C, int K, int Q, int[] q_i, int[] q_j) {\r\n        int countDP[][] = new int[R][C]; \r\n        for(int i = 0; i < R; i++)\r\n            for(int j = 0; j < C; j++)\r\n                countDP[i][j] = 0; \r\n     \r\n        // Precomputation of the countDP \r\n        // prefix sum of the matrix \r\n        countDP[0][0] = M.get(0).get(0); \r\n         \r\n        for(int i = 1; i < R; i++) \r\n            countDP[i][0] = countDP[i - 1][0] + \r\n                                 M.get(i).get(0); \r\n         \r\n        for(int j = 1; j < C; j++) \r\n            countDP[0][j] = countDP[0][j - 1] + \r\n                             M.get(0).get(j); \r\n         \r\n        for(int i = 1; i < R; i++) \r\n            for(int j = 1; j < C; j++) \r\n                countDP[i][j] = M.get(i).get(j) + \r\n                               countDP[i - 1][j] + \r\n                               countDP[i][j - 1] - \r\n                               countDP[i - 1][j - 1]; \r\n                               \r\n        ArrayList<Integer> res = new ArrayList<>();\r\n         \r\n        // Loop to solve each query \r\n        for(int q = 0; q < Q; q++)\r\n        { \r\n            int i = q_i[q]; \r\n            int j = q_j[q]; \r\n             \r\n            int min_dist = Math.min(Math.min(i, j), \r\n                                    Math.min(R - i - 1,\r\n                                             C - j - 1)); \r\n                                              \r\n            int ans = -1, l = 0, u = min_dist; \r\n             \r\n            // Binary Search to the side which \r\n            // have atmost in K 1's in square \r\n            while (l <= u)\r\n            { \r\n                int mid = (l + u) / 2; \r\n                int x1 = i - mid, x2 = i + mid; \r\n                int y1 = j - mid, y2 = j + mid; \r\n                 \r\n                // Count total number of 1s in \r\n                // the sub square considered \r\n                int count = countDP[x2][y2]; \r\n                 \r\n                if (x1 > 0) \r\n                    count -= countDP[x1 - 1][y2]; \r\n                if (y1 > 0) \r\n                    count -= countDP[x2][y1 - 1]; \r\n                if (x1 > 0 && y1 > 0) \r\n                    count += countDP[x1 - 1][y1 - 1]; \r\n                 \r\n                // If the count is less than or \r\n                // equals to the maximum move \r\n                // to right half \r\n                if (count <= K) \r\n                { \r\n                    ans = 2 * mid + 1; \r\n                    l = mid + 1; \r\n                } \r\n                else\r\n                    u = mid - 1; \r\n            } \r\n            if(ans == -1)\r\n                ans = 0;\r\n            res.add(ans); \r\n        } \r\n        return res;\r\n    }\r\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end function Template for python3\r\n\r\nclass Solution:\r\n    def largestSquare(self, M, R, C, K, Q, q_i, q_j):\r\n        countDP = [[0 for x in range(C)]\r\n                  for x in range(R)] \r\n     \r\n        # Precomputing the countDP \r\n        # prefix sum of the matrix \r\n        countDP[0][0] = M[0][0] \r\n         \r\n        for i in range(1, R):\r\n            countDP[i][0] = (countDP[i - 1][0] +\r\n                                  M[i][0])\r\n        for j in range(1, C):\r\n            countDP[0][j] = (countDP[0][j - 1] +\r\n                              M[0][j])\r\n        for i in range(1, R):\r\n            for j in range(1, C):\r\n                countDP[i][j] = (M[i][j] +\r\n                                countDP[i - 1][j] +\r\n                                countDP[i][j - 1] -\r\n                                countDP[i - 1][j - 1])\r\n        \r\n        res = []\r\n        \r\n        # Loop to solve Queries \r\n        for q in range(0,Q):\r\n            i = q_i[q]\r\n            j = q_j[q]\r\n             \r\n            # Calculating the maximum \r\n            # possible distance of the \r\n            # centre from edge \r\n            min_dist = min(i, j, R - i - 1, \r\n                                 C - j - 1)\r\n            ans = -1\r\n            l = 0\r\n            u = min_dist\r\n             \r\n            while (l <= u):\r\n                mid = int((l + u) / 2) \r\n                x1 = i - mid\r\n                x2 = i + mid \r\n                y1 = j - mid\r\n                y2 = j + mid \r\n                 \r\n            # Count total number of 1s in \r\n            # the sub square considered \r\n                count = countDP[x2][y2]\r\n                 \r\n                if (x1 > 0):\r\n                        count -= countDP[x1 - 1][y2] \r\n                if (y1 > 0):\r\n                        count -= countDP[x2][y1 - 1]\r\n                if (x1 > 0 and y1 > 0): \r\n                        count += countDP[x1 - 1][y1 - 1]\r\n                 \r\n            # If the count is less than or \r\n            # equals to the maximum move \r\n            # to right half \r\n                if (count <= K): \r\n                        ans = 2 * mid + 1\r\n                        l = mid + 1\r\n                else:\r\n                    u = mid - 1\r\n            \r\n            if ans==-1:\r\n                ans = 0\r\n            res.append(ans)\r\n            \r\n        return res",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number[][]} arr\n * @param {number} n\n * @param {number} m\n * @param {number} k\n * @param {number} q\n * @param {number[]} q_i\n * @param {number[]} q_j\n * @returns {number[]}\n*/\n\nclass Solution{\n    largestSquare(arr, n, m, k, q, q_i, q_j){\n        // Precomputation of the countDP \n        // prefix sum of the matrix \n        let countDP = [];\n        for (let i = 0; i < n; i++) {\n            countDP.push(new Array(m).fill(0));\n        }\n\n        countDP[0][0] = arr[0][0];\n        for (let i = 1; i < n; i++) {\n            countDP[i][0] = countDP[i-1][0] + arr[i][0];\n        }\n        for (let j = 1; j < m; j++) {\n            countDP[0][j] = countDP[0][j-1] + arr[0][j];\n        }\n        for (let i = 1; i < n; i++) {\n            for (let j = 1; j < m; j++) {\n                countDP[i][j] = arr[i][j] + countDP[i-1][j] + countDP[i][j-1] - countDP[i-1][j-1];\n            }\n        }\n        \n        let res = [];\n        \n        // Loop to solve each query \n        for (let q = 0; q < q_i.length; q++) { \n            let i = q_i[q];\n            let j = q_j[q];\n            let min_dist = Math.min(Math.min(i, j), Math.min(n - i - 1, m - j - 1));\n            let ans = -1, l = 0, u = min_dist;\n              \n            // Binary Search to the side which \n            // have atmost in k 1's in square \n            while (l <= u) { \n                let mid = Math.floor((l + u) / 2); \n                let x1 = i - mid, x2 = i + mid; \n                let y1 = j - mid, y2 = j + mid; \n                // Count total number of 1s in \n                // the sub square considered \n                let count = countDP[x2][y2];\n                if (x1 > 0) \n                    count -= countDP[x1 - 1][y2]; \n                if (y1 > 0) \n                    count -= countDP[x2][y1 - 1]; \n                if (x1 > 0 && y1 > 0) \n                    count += countDP[x1 - 1][y1 - 1]; \n                  \n                // If the count is less than or \n                // equals to the maximum move \n                // to right half \n                if (count <= k) { \n                    ans = 2 * mid + 1; \n                    l = mid + 1; \n                } \n                else\n                    u = mid - 1; \n            } \n            if(ans == -1)\n                ans = 0;\n            res.push(ans);\n        } \n        \n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}