{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700245,
            "title": "Largest subarray of 0's and 1's",
            "titleSlug": "largest-subarray-of-0s-and-1s",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong> of 0s and 1s. Find and return the length of the <strong>longest</strong> subarray with <strong>equal</strong> number of 0s and 1s.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 0, 1, 1, 1, 0, 0]\n<strong>Output: </strong>6<strong>\nExplanation: </strong>arr[1...6] is the longest subarray with three 0s and three 1s.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 0, 1, 1, 0]\n<strong>Output: </strong>4<br /><strong>Explnation: </strong>arr[0...3] or arr[1...4] is the longest subarray with two 0s and two 1s.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0]\n<strong>Output: </strong>0<br /><strong>Explnation: </strong>There is no subarray with an equal number of 0s and 1s.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />0 &lt;= arr[i] &lt;= 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of 0s and 1s, find the length of the longest subarray containing an equal number of 0s and 1s.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[1, 0, 1, 1, 1, 0, 0]",
                        "output": "6",
                        "explanation": "The subarray [0, 1, 1, 1, 0, 0] (from index 1 to 6) is the longest subarray containing three 0s and three 1s."
                    },
                    {
                        "input": "[0, 0, 1, 1, 0]",
                        "output": "4",
                        "explanation": "The subarrays [0, 0, 1, 1] (from index 0 to 3) or [0, 1, 1, 0] (from index 1 to 4) are the longest subarrays, each containing two 0s and two 1s."
                    },
                    {
                        "input": "[0]",
                        "output": "0",
                        "explanation": "There is no subarray with an equal number of 0s and 1s in the input array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Convert all the 0's to -1, thus the problem reduces to find the length of largest subarray giving sum 0.</p>",
            "<p>2. After converting 0&#39;s, we can maintain hashmap to keep track of indices of getting subarray sum equal to 0.<br />\nAlso we will keep updating maxLen of subarray by subtracting last zero sum index from current index.</p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "morgan-stanley",
            "amazon",
            "makemytrip"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the maximum length of subarray with equal 0s and 1s\n    int maxLen(vector<int> &arr) {\n        int n = arr.size();\n        // Creating a hashmap to store the sum as key and index as value\n        unordered_map<int, int> hM;\n\n        // Initializing variables\n        int sum = 0;\n        int max_len = 0;\n        int ending_index = -1;\n\n        // Converting all 0s to -1s in the input array\n        for (int i = 0; i < n; i++)\n            arr[i] = (arr[i] == 0) ? -1 : 1;\n\n        // Traversing through the array\n        for (int i = 0; i < n; i++) {\n            // Updating the sum\n            sum += arr[i];\n\n            // Checking if the sum is equal to 0\n            if (sum == 0) {\n                max_len = i + 1;  // Updating the maximum length\n                ending_index = i; // Updating the ending index\n            }\n\n            // Checking if the sum+n exists in the hashmap\n            if (hM.find(sum + n) != hM.end()) {\n                // Updating the maximum length and ending index if necessary\n                if (max_len < i - hM[sum + n]) {\n                    max_len = i - hM[sum + n];\n                    ending_index = i;\n                }\n            } else\n                hM[sum + n] = i; // Storing the sum+n and its index in the hashmap\n        }\n\n        // Returning the maximum length\n        return max_len;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxLen(int[] arr) {\n\n        int n = arr.length;\n        // Store the cumulative sum of the array in another array called sum\n        int sum[] = new int[arr.length];\n        sum[0] = arr[0] == 0 ? -1 : 1; // If element is 0, add -1 to sum, else add 1\n        for (int i = 1; i < sum.length; i++)\n            sum[i] = sum[i - 1] + (arr[i] == 0 ? -1 : 1);\n\n        // Create a HashMap to store the first occurrence of cumulative sum\n        Map<Integer, Integer> pos = new HashMap<Integer, Integer>();\n        int maxLen = 0; // Initialize max length of subarray to 0\n        int i = 0;      // Initialize variable i to 0\n        // Loop through the cumulative sum\n        for (int s : sum) {\n            // If cumulative sum is 0, update the max length to current index + 1\n            if (s == 0) maxLen = Math.max(maxLen, i + 1);\n\n            // If the cumulative sum exists in the HashMap,\n            // update the max length to the difference between current index and the\n            // first occurrence of the sum\n            if (pos.containsKey(s))\n                maxLen = Math.max(maxLen, i - pos.get(s));\n            else\n                pos.put(s, i); // Add the sum and the index to the HashMap\n\n            i++; // Increment i by 1\n        }\n        return maxLen; // Return the max length of subarray\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to find the maximum length of subarray with equal number\n    #of 0s and 1s.\n    def maxLen(self, arr):\n        n = len(arr)\n        #creating an array to store the sum of elements in arr.\n        s = [0] * len(arr)\n\n        #setting the first element of s based on the first element of arr.\n        if (arr[0] == 0):\n            s[0] = -1\n        else:\n            s[0] = 1\n\n        #iterating over the rest of the elements in arr.\n        for i in range(1, len(s)):\n\n            #updating the sum based on the current element in arr.\n            if (arr[i] == 0):\n                s[i] = s[i - 1] - 1\n            else:\n                s[i] = s[i - 1] + 1\n\n        #creating a dictionary to store the sum as the key and the index\n        #as the value.\n        d = dict()\n\n        #variable to keep track of the maximum length of the subarray\n        mx_len = 0\n\n        #variable to keep track of the current index.\n        i = 0\n\n        #iterating over the elements in s.\n        for j in s:\n\n            #if the sum is 0, it means we have equal number of 0s and 1s\n            #so we update the maximum length.\n            if (j == 0):\n                mx_len = max(mx_len, i + 1)\n\n            #if the sum is already present in the dictionary, it means we\n            #have a subarray with equal number of 0s and 1s, so we update\n            #the maximum length.\n            if (d.get(j) != None):\n                mx_len = max(mx_len, i - d[j])\n\n            #if the sum is not present in the dictionary, we add it with\n            #the current index.\n            else:\n                d[j] = i\n\n            #incrementing the index.\n            i = i + 1\n\n        #returning the maximum length.\n        return mx_len\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxLen(arr) {\n        let n = arr.length;\n        let hM = new Map();\n\n        let sum = 0;\n        let max_len = 0;\n        let ending_index = -1;\n\n        for (let i = 0; i < n; i++) arr[i] = (arr[i] == 0) ? -1 : 1;\n\n        for (let i = 0; i < n; i++) {\n            sum += arr[i];\n            if (sum == 0) {\n                max_len = i + 1;\n                ending_index = i;\n            }\n\n            if (hM.has(sum + n)) {\n                if (max_len < i - hM.get(sum + n)) {\n                    max_len = i - hM.get(sum + n);\n                    ending_index = i;\n                }\n            } else\n                hM.set(sum + n, i);\n        }\n\n        return max_len;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}