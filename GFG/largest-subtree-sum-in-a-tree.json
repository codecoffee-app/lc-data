{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710066,
            "title": "Largest subtree sum in a tree",
            "titleSlug": "largest-subtree-sum-in-a-tree",
            "content": "<p>Given a binary tree. The task is to find subtree with maximum sum in the tree and return its sum.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n\\t\\t  1\r\n\\t\\t/   \\\r\n\\t     2\\t3\r\n\\t    / \\    / \\\r\n\\t   4   5  6   7\r\n<strong>Output: </strong>28\r\n<strong>Explanation:</strong> \r\nAs all the tree elements are positive,\r\nthe largest subtree sum is equal to\r\nsum of all tree elements.</pre>\r\n\r\n<pre>\r\n\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong>\r\n\\t\\t   1\r\n\\t\\t/    \\\r\n\\t    -2\\t3\r\n\\t    / \\    /  \\\r\n\\t   4   5  -6   2\r\n<strong>Output: </strong>7\r\n<strong>Explanation: </strong>\r\nSubtree with largest sum is : \r\n  -2\r\n /  \\ \r\n4    5\r\nAlso, entire tree sum is also 7.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>findLargestSubtreeSum</strong><strong>()</strong>&nbsp;which takes the root of a binary tree and returns an integer.<br />\r\n&nbsp;</p>\r\n\r\n<p><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</p>\r\n\r\n<p><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10^5<br />\r\n-10^3&nbsp;&lt;= tree.val&nbsp;&lt;= 10^3</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Do post order traversal of the binary tree</p>",
            "<p>At every node, find left subtree value and right subtree value recursively. The value of subtree rooted at current node is equal to sum of current node value, left node subtree sum and right node subtree sum. Compare current subtree sum with overall maximum subtree sum so far.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    int findLargestSubtreeSumUtil(Node* root, int& ans)\r\n{\r\n    // If current node is null then\r\n    // return 0 to parent node.\r\n    if (root == NULL)    \r\n        return 0;\r\n     \r\n    // Subtree sum rooted at current node.\r\n    int currSum = root->data +\r\n      findLargestSubtreeSumUtil(root->left, ans)\r\n      + findLargestSubtreeSumUtil(root->right, ans);\r\n \r\n    // Update answer if current subtree\r\n    // sum is greater than answer so far.\r\n    ans = max(ans, currSum);\r\n \r\n    // Return current subtree sum to\r\n    // its parent node.\r\n    return currSum;\r\n}\r\n \r\n// Function to find largest subtree sum.\r\nint findLargestSubtreeSum(Node* root)\r\n{\r\n    // If tree does not exist,\r\n    // then answer is 0.\r\n    if (root == NULL)    \r\n        return 0;\r\n     \r\n    // Variable to store maximum subtree sum.\r\n    int ans = INT_MIN;\r\n \r\n    // Call to recursive function to\r\n    // find maximum subtree sum.\r\n    findLargestSubtreeSumUtil(root, ans);\r\n \r\n    return ans;\r\n}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static int ans;\n    \n    // Function to find the largest subtree sum\n    public static int findLargestSubtreeSum(Node root) {\n        ans=Integer.MIN_VALUE;\n        // Call the recursive function to calculate subtree sums\n        fun(root);\n        // Return the maximum subtree sum\n        return ans;\n    }\n    \n    // Recursive function to calculate subtree sums\n    public static int fun(Node root) {\n        // Check if the current node is null, return 0\n        if(root==null) return 0;\n        \n        // Calculate the subtree sum of the left subtree\n        int p1=fun(root.left);\n        // Calculate the subtree sum of the right subtree\n        int p2=fun(root.right);\n        \n        // Calculate the current subtree sum by adding the data of the current node,\n        // the sum of the left subtree, and the sum of the right subtree\n        int currSum = root.data+p1+p2;\n        \n        // Update the maximum subtree sum\n        ans=Math.max(ans,currSum);\n        \n        // Return the sum of the current subtree\n        return currSum;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    \r\n    # Function to find the largest subtree sum\r\n    def findLargestSubtreeSumUtil(self,root):\r\n        if root==None:\r\n            return 0\r\n        else:\r\n            # Calculate the current subtree sum\r\n            currsum=root.data+self.findLargestSubtreeSumUtil(root.left)+self.findLargestSubtreeSumUtil(root.right)\r\n            \r\n            # Update the maximum sum if necessary\r\n            self.ans=max(self.ans,currsum)\r\n            return currsum\r\n        \r\n    # Main function to find the largest subtree sum\r\n    def findLargestSubtreeSum(self, root ) -> int:\r\n        self.ans=-float(\"inf\")\r\n        \r\n        # Return 0 if root is None\r\n        if root==None:\r\n            return 0\r\n        \r\n        # Call the utility function to find the largest subtree sum\r\n        self.findLargestSubtreeSumUtil(root)\r\n        \r\n        # Return the maximum sum\r\n        return self.ans",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}