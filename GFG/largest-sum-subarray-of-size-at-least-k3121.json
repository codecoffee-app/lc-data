{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703363,
            "title": "Largest Sum Subarray of Size at least K",
            "titleSlug": "largest-sum-subarray-of-size-at-least-k3121",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>a</strong> of length <strong>n </strong>and a number <strong>k</strong>, find the <strong>largest sum </strong>of the <a href=\"https://www.geeksforgeeks.org/array-subarray-subsequence-and-subset/\"><strong>subarray</strong></a> containing <strong>at least k </strong>numbers. It is guaranteed that the size of array is <strong>at-least k</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input : \n</strong>n = 4\na[] = {1, -2, 2, -3}\nk = 2\n<strong>Output : </strong>\n1\n<strong>Explanation :</strong>\nThe sub-array of length at-least 2<br /></span><span style=\"font-size: 18px;\">that produces greatest sum is {1, -2, 2}</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input :\n</strong>n = 6<strong> </strong>\na[] = {1, 1, 1, 1, 1, 1}\nk = 2\n<strong>Output : </strong>\n6<br /><strong>Explanation :<br /></strong></span><span >The sub-array of length at-least 2</span><br /><span >that produces greatest sum is {1, 1, 1, 1, 1, 1}</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>maxSumWithK()</strong>&nbsp;which takes the array <strong>a[]</strong>, its size <strong>n </strong>and an integer <strong>k </strong>as inputs and returns the value of the <strong>largest sum </strong>of the subarray containing <strong>at least k </strong>numbers.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup><br />-10<sup>5 </sup>&lt;= a[i] &lt;= 10<sup>5</sup><br />1 &lt;= k &lt;= n</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">1) We first compute maximum sum till every index and store it in an array maxSum[].<br />\n2) After filling the array, we use the <a href=\"https://www.geeksforgeeks.org/sliding-window-maximum-maximum-of-all-subarrays-of-size-k/\">sliding window concept</a> of size k. Keep track of sum of current k elements. To compute sum of current window, remove first element of previous window and add current element. After getting the sum of current window, we add the maxSum of the previous window, if it is greater than current max, then update it else not.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "facebook",
            "paytm",
            "myntra"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Returns maximum sum of a subarray with at-least\r\n// k elements.\r\nclass Solution{\r\n    public:\r\n    long long int maxSumWithK(long long int a[], long long int n, long long int k) {\r\n        // maxSum[i] is going to store maximum sum\r\n        // till index i.\r\n        long long int maxSum[n];\r\n        maxSum[0] = a[0];\r\n    \r\n        // We use Kadane's algorithm to fill maxSum[]\r\n        // Below code is taken from method 3 of\r\n        // http://www.geeksforgeeks.org/largest-sum-contiguous-subarray/\r\n        long long int curr_max = a[0];\r\n        for (long long int i = 1; i < n; i++) {\r\n            curr_max = max(a[i], curr_max + a[i]);\r\n            maxSum[i] = curr_max;\r\n        }\r\n    \r\n        // Sum of first k elements\r\n        long long int sum = 0;\r\n        for (long long int i = 0; i < k; i++) sum += a[i];\r\n    \r\n        // Use the concept of sliding window\r\n        long long int result = sum;\r\n        for (long long int i = k; i < n; i++) {\r\n            // Compute sum of k elements ending\r\n            // with a[i].\r\n            sum = sum + a[i] - a[i - k];\r\n    \r\n            // Update result if required\r\n            result = max(result, sum);\r\n    \r\n            // Include maximum sum till [i-k] also\r\n            // if it increases overall max.\r\n            result = max(result, sum + maxSum[i - k]);\r\n        }\r\n        return result;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    // Returns maximum sum of a subarray with at least k elements.\r\n    public long maxSumWithK(long[] a, long n, long k) {\r\n        // maxSum[i] is going to store maximum sum till index i.\r\n        long[] maxSum = new long[(int) n];\r\n        maxSum[0] = a[0];\r\n\r\n        // Using Kadane's algorithm to fill maxSum[]\r\n        long currMax = a[0];\r\n        for (int i = 1; i < n; i++) {\r\n            currMax = Math.max(a[i], currMax + a[i]);\r\n            maxSum[i] = currMax;\r\n        }\r\n\r\n        // Sum of first k elements\r\n        long sum = 0;\r\n        for (int i = 0; i < k; i++) sum += a[i];\r\n\r\n        // Using the concept of sliding window\r\n        long result = sum;\r\n        for (int i = (int) k; i < n; i++) {\r\n            // Compute sum of k elements ending with a[i]\r\n            sum = sum + a[i] - a[i - (int) k];\r\n\r\n            // Update result if required\r\n            result = Math.max(result, sum);\r\n\r\n            // Include maximum sum till [i-k] also if it increases overall max\r\n            result = Math.max(result, sum + maxSum[i - (int) k]);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution():\r\n    def maxSumWithK(self, a, n, k):\r\n    \r\n        ans=-float('inf')  #initialize ans with negative infinity to track the maximum sum\r\n    \r\n        curr=0  #initialize curr with 0 to calculate the current sum\r\n        prev=0  #initialize prev with 0 to keep track of sum of previous subarray\r\n    \r\n        for i in range(n):  #iterate through the given array\r\n            \r\n            if i<k:  #if current index i is less than k\r\n                \r\n                curr+=a[i]  #add the value at current index i to curr\r\n                prev+=a[i]  #add the value at current index i to prev\r\n                \r\n            else:\r\n                ans=max(ans,curr,prev)  #compare and update the maximum sum so far\r\n    \r\n                prev+=a[i]-a[i-k]  #subtract the value at i-k index from prev and add the value at current index i\r\n                curr+=a[i]  #add the value at current index i to curr\r\n                \r\n                curr=max(curr,prev)  #check and update the current sum\r\n    \r\n        ans=max(ans,prev,curr)  #compare and update the maximum sum at the end\r\n    \r\n        return ans  #return the maximum sum",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long maxSumWithK(long[] a, long n, long k)\n    {\n        // maxSum[i] is going to store maximum sum\n        // till index i.\n        long[] maxSum = new long[n];\n        maxSum[0] = a[0];\n\n        // We use Kadane's algorithm to fill maxSum[]\n        // Below code is taken from method 3 of\n        // http://www.geeksforgeeks.org/largest-sum-contiguous-subarray/\n        long curr_max = a[0];\n        for (long i = 1; i < n; i++)\n        {\n            curr_max = Math.Max(a[i], curr_max + a[i]);\n            maxSum[i] = curr_max;\n        }\n    \n        // Sum of first k elements\n        long sum = 0;\n        for (long i = 0; i < k; i++)\n        {\n            sum += a[i];\n        }\n    \n        // Use the concept of sliding window\n        long result = sum;\n        for (long i = k; i < n; i++)\n        {\n            // Compute sum of k elements ending\n            // with a[i].\n            sum = sum + a[i] - a[i - k];\n    \n            // Update result if required\n            result = Math.Max(result, sum);\n    \n            // Include maximum sum till [i-k] also\n            // if it increases overall max.\n            result = Math.Max(result, sum + maxSum[i - k]);\n        }\n        return result;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to find maximum sum subarray by removing at most k elements.\n    maxSumWithK(a, n, k) {\n        let ans = -Infinity; //initialize ans with negative infinity to track the maximum sum\n        let curr = 0; //initialize curr with 0 to calculate the current sum\n        let prev = 0; //initialize prev with 0 to keep track of sum of previous subarray\n\n        for (let i = 0; i < n; i++) { //iterate through the given array\n            if (i < k) { //if current index i is less than k\n                curr += a[i]; //add the value at current index i to curr\n                prev += a[i]; //add the value at current index i to prev\n            } else {\n                ans = Math.max(ans, curr, prev); //compare and update the maximum sum so far\n                prev += a[i] - a[i - k]; //subtract the value at i-k index from prev and add the value at current index i\n                curr += a[i]; //add the value at current index i to curr\n                curr = Math.max(curr, prev); //check and update the current sum\n            }\n        }\n        ans = Math.max(ans, prev, curr); //compare and update the maximum sum at the end\n        return ans; //return the maximum sum\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}