{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706290,
            "title": "Largest value in each level",
            "titleSlug": "largest-value-in-each-level",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree, find the largest value in each level.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input :</span></strong>\n<span style=\"font-size: 18px;\">\\t  1\n\\t / \\\n\\t2   3 </span>\n\n<span style=\"font-size: 18px;\"><strong>Output :</strong> 1 3</span>\n<strong><span style=\"font-size: 18px;\">Explanation : </span></strong>\n<span style=\"font-size: 18px;\">There are two levels in the tree :\n</span><span style=\"font-size: 18px;\">1. {1}, max = 1</span>\n<span style=\"font-size: 18px;\">2. {2, 3}, max = 3</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input :</span></strong>\n<span style=\"font-size: 18px;\">\\t  4\n\\t / \\\n\\t9   2\n     / \\   \\\n    3   5   7 </span>\n\n<span style=\"font-size: 18px;\"><strong>Output :</strong> 4 9 7</span>\n<strong><span style=\"font-size: 18px;\">Explanation : </span></strong>\n<span style=\"font-size: 18px;\">There are three levels in the tree:</span>\n<span style=\"font-size: 18px;\">1. {4}, max = 4</span>\n<span style=\"font-size: 18px;\">2. {9, 2}, max = 9</span>\n<span style=\"font-size: 18px;\">3. {3, 5, 7}, max=7</span></pre>\n<div><strong><span style=\"font-size: 18px;\">Your task :</span></strong></div>\n<div><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function <strong>largestValues()</strong> which takes the root node of the tree as input and returns a vector containing the largest value in each level.&nbsp;</span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Expected Time Complexity :</strong> O(n) , where n = number of nodes</span></div>\n<div><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space :</strong> O(n) , where n = number of nodes</span></div>\n<div>&nbsp;</div>\n<div><strong><span style=\"font-size: 18px;\">Constraints :&nbsp;</span></strong></div>\n<div><span style=\"font-size: 18px;\">1 &le;&nbsp;Number of nodes &le;&nbsp;10^5</span></div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the largest value at each level of the tree.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "    1\n   / \\\n  2   3",
                        "output": "1 3",
                        "explanation": "Level 1: {1}, max = 1\nLevel 2: {2, 3}, max = 3"
                    },
                    {
                        "input": "    4\n   / \\\n  9   2\n     / \\   \\\n    3   5   7",
                        "output": "4 9 7",
                        "explanation": "Level 1: {4}, max = 4\nLevel 2: {9, 2}, max = 9\nLevel 3: {3, 5, 7}, max = 7"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Recursively traverse tree in preorder fashion.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\n    public:\n    void helper(vector<int>& res, Node* root, int d)\n    {\n        if (!root)\n            return;\n    \n        // Expand list size\n        if (d == res.size())\n            res.push_back(root->data);\n    \n        else\n    \n            // to ensure largest value\n            // on level is being stored\n            res[d] = max(res[d], root->data);\n    \n        // Recursively traverse left and\n        // right subtrees in order to find\n        // out the largest value on each level\n        helper(res, root->left, d + 1);\n        helper(res, root->right, d + 1);\n    }\n    \n    // function to find largest values\n    public:\n    vector<int> largestValues(Node* root)\n    {\n        vector<int> res;\n        helper(res, root, 0);\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end function Template for Java\n\nclass Solution\n{\n    public void helper(ArrayList<Integer> res, Node root, int d)\n    {\n        if (root == null)\n            return;\n    \n        // Expand list size\n        if (d == res.size())\n            res.add(root.data);\n    \n        else\n    \n            // to ensure largest value\n            // on level is being\n            res.set(d,Math.max(res.get(d), root.data));\n    \n        // Recursively traverse left and\n        // right subtrees in order to find\n        // out the largest value on each level\n        helper(res, root.left, d + 1);\n        helper(res, root.right, d + 1);\n    }\n    public ArrayList<Integer> largestValues(Node root)\n    {\n        ArrayList<Integer> res = new ArrayList<>();\n        helper(res,root,0);\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end function Template for python3\n\nclass Solution:\n    # Helper function to find the largest value in each level of the tree\n    def helper(self, res, root, d):\n        # Base case: if root is None, return\n        if root == None:\n            return\n        \n        # If the current level is at the end of the list, add the root value\n        if d==len(res):\n            res.append(root.data)\n        \n        # If the current level is already in the list, update the value with the maximum\n        else:\n            res[d] = max(res[d], root.data)\n        \n        # Recursively call the function for the left and right children of the root\n        self.helper(res,root.left,d+1)\n        self.helper(res,root.right,d+1)\n    \n    # Main function to find the largest values in each level of the tree\n    def largestValues(self, root):\n        # Initialize an empty list to store the largest values\n        global res\n        res=[]\n        \n        # Call the helper function to find the largest values\n        self.helper(res,root,0)\n        \n        # Return the list of largest values\n        return res",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    helper(res, root, d) {\n        if (!root) return;\n\n        // Expand list size\n        if (d === res.length) {\n            res.push(root.data);\n        } else {\n            // to ensure largest value on level is being stored\n            res[d] = Math.max(res[d], root.data);\n        }\n\n        // Recursively traverse left and right subtrees in order to find out the largest\n        // value on each level\n        this.helper(res, root.left, d + 1);\n        this.helper(res, root.right, d + 1);\n    }\n\n    // function to find largest values\n    largestValues(root) {\n        const res = [];\n        this.helper(res, root, 0);\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}