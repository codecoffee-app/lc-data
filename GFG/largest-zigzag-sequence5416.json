{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705462,
            "title": "Largest zigzag sequence",
            "titleSlug": "largest-zigzag-sequence5416",
            "content": "<p><span style=\"font-size:18px\">Given a matrix <strong>M</strong> of size <strong>n * n</strong>, the task is to&nbsp;find sum of the zigzag sequence with the largest sum. A zigzag sequence starts from the top and ends at the bottom. Two consecutive elements of sequence cannot belong to same column.</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 3\r\nM = {{3, 1, 2}, \r\n&nbsp;    {4, 8, 5}, \r\n&nbsp;    {6, 9, 7}}\r\n<strong>Output:</strong> 18\r\n<strong>Explaination:</strong> The sequence is (3, 8, 7).</span></pre>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 3\r\nM = {{1, 2, 4}, \r\n&nbsp;    {3, 9, 6}, \r\n&nbsp;    {11, 3, 15}}\r\n<strong>Output:</strong> 28\r\n<strong>Explaination:</strong> The sequence is 4, 9, 15.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>zigzagSequence()</strong> which takes n and M as input parameters and returns the highest zigzag sum.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n<sup>3</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(n<sup>2</sup>)&nbsp;&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n &le; 100<br />\r\n1 &le; M[i][j] &le; 1000&nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square matrix **M** of size **n x n**, find the maximum sum of a zigzag sequence. A zigzag sequence starts from the top row and ends at the bottom row of the matrix. Importantly, no two consecutive elements in the sequence can be from the same column.",
                "constraints": [
                    "1 \u2264 n \u2264 100",
                    "1 \u2264 M[i][j] \u2264 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 3\nM = {{3, 1, 2}, {4, 8, 5}, {6, 9, 7}}",
                        "output": "18",
                        "explanation": "The zigzag sequence with the largest sum is (3, 8, 7), which sums to 18."
                    },
                    {
                        "input": "n = 3\nM = {{1, 2, 4}, {3, 9, 6}, {11, 3, 15}}",
                        "output": "28",
                        "explanation": "The zigzag sequence with the largest sum is (4, 9, 15), which sums to 28."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each cell find out the maximum value which can be upon reaching that cell.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "directi"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    int zigzagSequence(int n, vector<vector<int>> M){\n        int dp[n][n]; // create a 2D dp array of size n x n to store the maximum zigzag sequence values\n        for(int i = 0;i < n;i++)\n            for(int j = 0;j < n;j++)\n                dp[i][j] = 0; // initialize all elements of dp array to 0\n        for(int i = 0;i < n;i++)\n            dp[0][i] = M[0][i]; // set the first row of dp array to the first row of matrix M\n        for(int i = 1;i < n;i++){ // iterate from second row to last row\n            for(int j = 0;j < n;j++){ // iterate through all columns of each row\n                for(int k = 0;k < n;k++){ // iterate through all columns of previous row\n                    if(j != k)\n                        dp[i][k] = max(dp[i][k], dp[i-1][j]+M[i][k]); // update the maximum value in dp array by comparing the current value with the sum of previous value and current value in matrix M\n                }\n            }\n        }\n        int res = 0; // initialize the result variable to 0\n        for(int i = 0;i < n;i++)\n            res = max(res, dp[n-1][i]); // find the maximum value in the last row of dp array\n        return res; // return the maximum zigzag sequence value\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution\n{\n    public int zigzagSequence(int n, List<List<int>> M)\n    {\n        int[,] dp = new int[n, n]; // create a 2D dp array of size n x n to store the maximum zigzag sequence values\n        \n        for(int i = 0; i < n; i++)\n        {\n            for(int j = 0; j < n; j++)\n            {\n                dp[i, j] = 0; // initialize all elements of dp array to 0\n            }\n        }\n        \n        for(int i = 0; i < n; i++)\n        {\n            dp[0, i] = M[0][i]; // set the first row of dp array to the first row of matrix M\n        }\n        \n        for(int i = 1; i < n; i++) // iterate from second row to last row\n        {\n            for(int j = 0; j < n; j++) // iterate through all columns of each row\n            {\n                for(int k = 0; k < n; k++) // iterate through all columns of previous row\n                {\n                    if(j != k)\n                    {\n                        dp[i, k] = Math.Max(dp[i, k], dp[i-1, j] + M[i][k]); // update the maximum value in dp array by comparing the current value with the sum of previous value and current value in matrix M\n                    }\n                }\n            }\n        }\n        \n        int res = 0; // initialize the result variable to 0\n        \n        for(int i = 0; i < n; i++)\n        {\n            res = Math.Max(res, dp[n-1, i]); // find the maximum value in the last row of dp array\n        }\n        \n        return res; // return the maximum zigzag sequence value\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}