{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713143,
            "title": "Last modified ball",
            "titleSlug": "last-modified-ball--170645",
            "content": "<p><span style=\"font-size:18px\">Samwell laid out <strong>N</strong> bowls&nbsp;in a straight line&nbsp;and put a few marbles randomly in each bowl, i<sup>th</sup> bowl has <strong>A[i]</strong> marbles. A bowl can never have more than 9 marbles at a time. A&nbsp;bowl can have zero marbles. Now Samwells friend adds one more marble to the last bowl, after this addition all the bowls must still be aligned with the rules mentioned above. Adding a marble follows the same rules as of addition with carryover. You are given the initial list of the number of marbles in each bowl find the position of the bowl&nbsp;which was last modified. It is guaranteed that there is at least one bowl which has at least one space left.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note</strong>: Consider one-based indexing.</span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 4\r\nA[] = {3, 1, 4, 5}\r\n<strong>Output:</strong>&nbsp;\r\n4\r\n<strong>Explanation</strong>: \r\nThe last bowl has 5 marbels, we can just \r\nadd the marbel here.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\nA[] = {1, 9, 9}\r\n<strong>Output:&nbsp;\r\n</strong>1\r\n<strong>Explanation</strong>: \r\nWhen we add the marbel to last bowl we \r\nhave to move one marbel to 2nd bowl, \r\nto add the marbel in 2nd bowl we have \r\nto move one marbel to 1st bowl.\r\nHence the last modified bowl is 1.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>solve( )</strong>&nbsp;which takes <strong>N</strong>&nbsp;and&nbsp;<strong>A[ ]</strong>&nbsp;as input parameters&nbsp;and returns the position of the last modified bowl.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N&nbsp;&le; 10<sup>5</sup><br />\r\n0<sup>&nbsp;</sup>&le; A[i] &le; 9</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given N bowls arranged in a straight line, each containing a certain number of marbles (A[i]). Each bowl can hold a maximum of 9 marbles.  You start by adding one marble to the last bowl.  This addition may trigger carry-overs, similar to addition in arithmetic. The goal is to determine the index (1-based) of the leftmost bowl that was modified as a result of this process.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= A[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nA[] = {3, 1, 4, 5}",
                        "output": "4",
                        "explanation": "Adding 1 to the last bowl (index 4) changes its value to 6 (5 + 1 = 6), without affecting other bowls. Therefore, the last modified bowl is at index 4."
                    },
                    {
                        "input": "N = 3\nA[] = {1, 9, 9}",
                        "output": "1",
                        "explanation": "Adding 1 to the last bowl (A[2] = 9) results in A[2] becoming 0 and a carry-over of 1 to the previous bowl (A[1]). This causes A[1] to become 0 and carries over 1 to A[0]. Thus A[0] becomes 2. The leftmost modified bowl is A[0] which is at index 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We can place the marble, where there is an empty space means (A[i]&lt;9).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\npublic:\n    //Function to find the index of the first non-9 element from the end of the vector.\n    int solve(int N, vector<int> A) {\n        // code here\n\n        //Iterating from the end of the vector.\n        for (int i = N - 1; i >= 0; i--)\n            //Checking if the element is not 9, if true, returning the index.\n            if (A[i] != 9)\n                return i + 1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    int solve(int N, int[] A) {\n        // iterate from the end of the array\n        for (int i = N - 1; i >= 0; i--) \n            // check if element is not equal to 9\n            if (A[i] != 9) \n                // return the index + 1\n                return i + 1;\n        \n        // if all elements are 9, return 0\n        return 0;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution():\r\n    def solve(self, N, A):\r\n        #initialize counter\r\n        c = 1 \r\n        \r\n        #loop backwards through the array and find the first non-nine digit\r\n        for i in range(n-1,-1,-1):\r\n            if A[i] != 9:\r\n                break\r\n        \r\n        #return the index + 1\r\n        return i+1",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}