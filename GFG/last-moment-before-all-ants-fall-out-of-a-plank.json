{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878151,
            "title": "Last Moment Before All Ants Fall Out of a Plank",
            "titleSlug": "last-moment-before-all-ants-fall-out-of-a-plank",
            "content": "<p><span >We have a wooden plank of the length <strong>n</strong> units. Some ants are walking on the plank, each ant moves with a speed of <strong>1</strong> unit per second. Some of the ants move to the left, the other move to the right. <br />When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time. When an ant reaches one end of the plank at a time <strong>t</strong>, it falls out of the plank immediately.</span></p>\n<p><span >Given an integer <strong>n</strong> and two integer arrays <strong>left[]</strong> and <strong>right[]</strong>, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 4, left[] = [2], right[] = [0, 1, 3]<br /><strong>Output:</strong> 4<br />\\t  <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/878151/Web/Other/blobid0_1730198301.jpg\" width=\"286\" height=\"328\" /><br /><strong>Explanation: </strong>As seen in the above image, the last ant falls off the plank at t = 4.</span></pre>\n<pre><span ><strong>Input:</strong>  n = 4, left[] = [], right[] = [0, 1, 2, 3, 4]\n<strong>Output: </strong>4<strong><br /></strong> &nbsp; &nbsp; &nbsp; &nbsp;<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/878151/Web/Other/blobid0_1730198642.jpg\" width=\"283\" height=\"267\" /><br /> <strong>Explanation:</strong> All ants are going to the right, the ant at index 0 needs 7 seconds to fall.<br /></span></pre>\n<pre><span ><strong>Input:</strong> n = 3, left[] = [0], right[] = [3]\n<strong>Output:</strong> 0<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> </span><span style=\"font-family: -apple-system, system-ui, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, sans-serif;\">The ants will fall off the plank as they are already on the end of the plank.</span></span></pre>\n<p><span ><strong>Constraints:<br /></strong>1 &lt;= n &lt;= 10<sup>5<br /></sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">0 &lt;= left.length &lt;= n + 1<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">0 &lt;= left[i] &lt;= n<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">0 &lt;= right.length &lt;= n + 1<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">0 &lt;= right[i] &lt;= n<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &lt;= left.length + right.length &lt;= n + 1<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">All values of left and right are unique, and each value can appear only in one of the two arrays.</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Consider a wooden plank of length 'n' units. Ants are walking on the plank at a speed of 1 unit per second. Some ants move left, others move right. When two ants moving in opposite directions meet, they instantly change directions and continue moving. Assume changing directions takes no time. An ant falls off the plank when it reaches either end.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= left.length <= n + 1",
                    "0 <= left[i] <= n",
                    "0 <= right.length <= n + 1",
                    "0 <= right[i] <= n",
                    "1 <= left.length + right.length <= n + 1",
                    "All values of left and right are unique, and each value can appear only in one of the two arrays."
                ],
                "testcases": [
                    {
                        "input": "n = 4, left[] = [2], right[] = [0, 1, 3]",
                        "output": "4",
                        "explanation": "The last ant falls off the plank at t = 4."
                    },
                    {
                        "input": "n = 4, left[] = [], right[] = [0, 1, 2, 3, 4]",
                        "output": "4",
                        "explanation": "All ants are going to the right. The ant at position 4 takes 4 seconds to fall off."
                    },
                    {
                        "input": "n = 3, left[] = [0], right[] = [3]",
                        "output": "3",
                        "explanation": "The last ant falls off the plank at t = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Focus on determining the maximum distance for ants falling off from both ends of the plank.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    int getLastMoment(int n, vector<int>& left, vector<int>& right) {\n        int ans = 0;\n\n        // Calculate max time for ants moving left\n        for (int num : left) {\n            ans = max(ans, num);\n        }\n\n        // Calculate max time for ants moving right\n        for (int num : right) {\n            ans = max(ans, n - num);\n        }\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public int getLastMoment(int n, int left[], int right[]) {\n        int ans = 0;\n\n        // Calculate max time for ants moving left\n        for (int num : left) {\n            ans = Math.max(ans, num);\n        }\n\n        // Calculate max time for ants moving right\n        for (int num : right) {\n            ans = Math.max(ans, n - num);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def getLastMoment(self, n, left, right):\n        # Calculate max time for ants moving left\n        max_left = max(left) if left else 0\n\n        # Calculate max time for ants moving right\n        max_right = max(n - r for r in right) if right else 0\n\n        return max(max_left, max_right)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    getLastMoment(n, left, right) {\n        let ans = 0;\n\n        // Calculate max time for ants moving left\n        for (let num of left) {\n            ans = Math.max(ans, num);\n        }\n\n        // Calculate max time for ants moving right\n        for (let num of right) {\n            ans = Math.max(ans, n - num);\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}