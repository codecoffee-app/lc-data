{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702698,
            "title": "Last seen array element",
            "titleSlug": "last-seen-array-element1501",
            "content": "<p><span style=\"font-size: 20px;\">Given an array <strong>arr[]&nbsp; </strong>of integers that might contain duplicates, find the element whose last appearance is earliest.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input :</strong> arr[] = [10, 30, 20, 10, 20]\n<strong>Output :</strong> 30\n<strong>Explanation: </strong></span><span style=\"font-size: 20px;\">The element 30 has the earliest last appearance at index 1. Therefore, the output is 30. Even though 10 and 20 appear multiple times, their last appearances occur at later indices (3 and 4, respectively), so 30 is the correct answer.</span></pre>\n<pre><span style=\"font-size: 20px;\"><span ><strong>Input :</strong> arr[] = [10, 20, 30, 40, 10]\n<strong>Output :</strong> 20<br /><strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:  </span></strong>The element 20 has the earliest last appearance at index 1. Therefore, the output is 20. <br /></span></span></pre>\n<p><span style=\"font-size: 20px;\"><strong>Expected Time Complexity:</strong> O(n)<br /></span><strong style=\"font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Expected Auxiliary Space:</strong><span style=\"font-size: 20px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> O(n)</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br />1&lt;=arr.size()&lt;=10<sup>6</sup><br />1&lt;=arr[i]&lt;=10<sup>6</sup></span><br />&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integers that might contain duplicates, find the element whose last appearance is earliest (smallest index).",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[10, 30, 20, 10, 20]",
                        "output": "30",
                        "explanation": "The element 30 last appears at index 1. While 10 and 20 appear multiple times, their last appearances are at indices 3 and 4 respectively. Thus, 30 is the element with the earliest last appearance."
                    },
                    {
                        "input": "[10, 20, 30, 40, 10]",
                        "output": "20",
                        "explanation": "The element 20 last appears at index 1. Therefore, it's the element with the earliest last appearance."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a Map to track the last occurrence of each element, then find the element with the smallest last occurrence index.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int lastSeenElement(vector<int>& arr) {\n        int n = arr.size(); // Get the size of the vector\n\n        // Store last occurrence index of every element\n        unordered_map<int, int> hash;\n        for (int i = 0; i < n; i++) {\n            hash[arr[i]] = i;\n        }\n\n        // Find the element with the minimum index value\n        int res_ind = INT_MAX;\n        int res;\n        for (auto& x : hash) {\n            if (x.second < res_ind) {\n                res_ind = x.second;\n                res = x.first;\n            }\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "import java.util.HashMap;\n\nclass Solution {\n\n    public static int lastSeenElement(int[] arr) {\n        // Store last occurrence index of every element\n        HashMap<Integer, Integer> hash = new HashMap<>();\n        for (int i = 0; i < arr.length; i++) {\n            hash.put(arr[i], i);\n        }\n\n        // Find the element with the minimum index value\n        int resInd = Integer.MAX_VALUE;\n        int res = -1;\n        for (HashMap.Entry<Integer, Integer> entry : hash.entrySet()) {\n            if (entry.getValue() < resInd) {\n                resInd = entry.getValue();\n                res = entry.getKey();\n            }\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def lastSeenElement(self, arr):\n        # Dictionary to store the last occurrence index of each element\n        last_occurrence = {}\n        for i, num in enumerate(arr):\n            last_occurrence[num] = i\n\n        # Find the element with the minimum index value\n        min_index = float('inf')\n        result = None\n        for key, index in last_occurrence.items():\n            if index < min_index:\n                min_index = index\n                result = key\n\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the last seen element with the smallest index\n    lastSeenElement(arr) {\n        // Create a map to store the last occurrence index of each element\n        const lastOccurrence = new Map();\n\n        // Populate the map with the last occurrence index of each element\n        arr.forEach((num, index) => { lastOccurrence.set(num, index); });\n\n        // Initialize variables to find the element with the minimum index\n        let minIndex = Infinity;\n        let result;\n\n        // Iterate through the map to find the element with the smallest index\n        for (const [key, index] of lastOccurrence) {\n            if (index < minIndex) {\n                minIndex = index;\n                result = key;\n            }\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}