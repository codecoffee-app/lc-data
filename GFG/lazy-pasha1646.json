{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703686,
            "title": "Rotate String",
            "titleSlug": "lazy-pasha1646",
            "content": "<p><span style=\"font-size: 18px;\">Given a string s of size n and q queries.Each query is either of the following types:<br />Type 1- Rotate the string by K character from the end.<br />Type 2- Print the character at the I'th index of the resulting string at that instant.<br />Answer all queries.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn=7 q=5\ns=abcdefg\nQuery<sub>1</sub>: Type=1 K=2\nQuery<sub>2</sub>: Type=2 I=0\nQuery<sub>3</sub>: Type=2 I=6\nQuery<sub>4</sub>: Type=1 K=4\nQuery<sub>5</sub>: Type=2 I=1\n<strong>Output:</strong>\nf\ne\nc\n<strong>Explanation:</strong>\nAfter First query String becomes-\"fgabcde\"\nSecond query returns - 'f'\nThird query returns -'e'\nAfter Fourth Query String becomes-\"bcdefga\"\nFifth Query returns -'c'</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn=5 q=2\ns=geeks\nQuery<sub>1</sub>: Type=1 K=4\nQuery<sub>2</sub>: Type=2 I=4\n<strong>Output:</strong>\ng\n<strong>Explanation:</strong>\nAfter first query,string becomes \"eeksg\".\nSecond query returns 'g'.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your task:</strong><br />You don't need to read input or print anything.Your task is to complete&nbsp;the function <strong>StringQuery() </strong>which takes an integer N,an integer Q, a string S and two arrays Q1 and Q2(containing Query type and K/I respectively) and returns an array containing the answers to the queries.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>O(q)<br /><strong>Expected Auxillary Space:</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=n&lt;=10<sup>5</sup><br />1&lt;=q&lt;=10<sup>4</sup><br />1&lt;=Type&lt;=2<br />1&lt;=K&lt;=10<sup>9</sup><br />0&lt;=I&lt;N</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` of size `n` and `q` queries, process each query. There are two types of queries:\n\n*   **Type 1:** Rotate the string `s` by `K` characters from the end.\n*   **Type 2:** Print the character at the `I`th index of the resulting string `s` at that instant.\n\nAnswer all the queries of Type 2 and return them as an array.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= q <= 10^4",
                    "1 <= Type <= 2",
                    "1 <= K <= 10^9",
                    "0 <= I < N"
                ],
                "testcases": [
                    {
                        "input": "n=7 q=5\ns=abcdefg\nQuery1: Type=1 K=2\nQuery2: Type=2 I=0\nQuery3: Type=2 I=6\nQuery4: Type=1 K=4\nQuery5: Type=2 I=1",
                        "output": "f\ne\nc",
                        "explanation": "Initially, s = \"abcdefg\".\n\nQuery 1: Rotate by K=2: s becomes \"fgabcde\".\nQuery 2: Index I=0: Character at index 0 is 'f'.\nQuery 3: Index I=6: Character at index 6 is 'e'.\nQuery 4: Rotate by K=4: s becomes \"bcdefga\".\nQuery 5: Index I=1: Character at index 1 is 'c'."
                    },
                    {
                        "input": "n=5 q=2\ns=geeks\nQuery1: Type=1 K=4\nQuery2: Type=2 I=4",
                        "output": "g",
                        "explanation": "Initially, s = \"geeks\".\n\nQuery 1: Rotate by K=4: s becomes \"eeksg\".\nQuery 2: Index I=4: Character at index 4 is 'g'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">There is no need to actually rotate the string.Just keeping count is enough.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "implementation",
                "slug": "implementation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to shift index by K\n    int shift(int K, int N, int index) {\n        index -= K;\n        index %= N;\n        if (index < 0)\n            index += N;\n        index %= N;\n        return index;\n    }\n\n    // Function to find character at given index I\n    int findcharat(int I, int index, int N) {\n        int charleftfromend = N - index;\n        if (N - index >= I + 1)\n            return index + I;\n        else {\n            I -= charleftfromend;\n            return I;\n        }\n    }\n\n    // Function to perform string queries\n    vector<char> StringQuery(int N, int Q, string S, int Q1[], int Q2[]) {\n        vector<char> ans;\n        int index = 0;\n\n        // Iterate through the query array\n        for (int i = 0; i < Q; i++) {\n            if (Q1[i] == 1) {\n                // If query type is 1, shift the index\n                index = shift(Q2[i] % N, N, index);\n            } else {\n                // If query type is 2, find the character at given index\n                int res = findcharat(Q2[i], index, N);\n                ans.push_back(S[res]);\n            }\n        }\n\n        return ans; // Return the resulting characters\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to shift index by K\n    shift(K, N, index) {\n        index -= K;\n        index %= N;\n        if (index < 0) index += N;\n        index %= N;\n        return index;\n    }\n\n    // Function to find character at given index I\n    findcharat(I, index, N) {\n        let charleftfromend = N - index;\n        if (charleftfromend >= I + 1) {\n            return index + I;\n        } else {\n            I -= charleftfromend;\n            return I;\n        }\n    }\n\n    // Function to perform string queries\n    StringQuery(N, Q, S, Q1, Q2) {\n        let ans = [];\n        let index = 0;\n\n        // Iterate through the query array\n        for (let i = 0; i < Q; i++) {\n            if (Q1[i] === 1) {\n                // If query type is 1, shift the index\n                index = this.shift(Q2[i] % N, N, index);\n            } else {\n                // If query type is 2, find the character at given index\n                let res = this.findcharat(Q2[i], index, N);\n                ans.push(S[res]);\n            }\n        }\n\n        return ans; // Return the resulting characters\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}