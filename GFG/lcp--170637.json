{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710278,
            "title": "LCP",
            "titleSlug": "lcp--170637",
            "content": "<p><span style=\"font-size:18px\"><strong>Note: This&nbsp;<a href=\"http://practice.geeksforgeeks.org/problem-of-the-day\">POTD</a>&nbsp;is a part of&nbsp;<a href=\"https://practice.geeksforgeeks.org/summer-carnival-2022?utm_source=potd&amp;utm_medium=problempage&amp;utm_campaign=gsc22\">Geek Summer Carnival</a>. Solve all POTD consecutively from 5th to 10th April and get a chance to win exclusive discount vouchers on our GfG courses.</strong></span></p>\r\n\r\n<hr />\r\n<p><span style=\"font-size:18px\">Geek is at the geek summer carnival. He is given an array of N strings. To unlock exclusive course discounts he needs to find the longest common prefix among all strings present in the array. Can you help him ?</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\">Input:\r\nN = 4\r\nar[] = {geeksforgeeks, geeks, geek, geezer}</span>\r\n\r\n<span style=\"font-size:18px\">Output:\r\ngee</span>\r\n\r\n<span style=\"font-size:18px\">Explanation: \r\nLongest common prefix in all the given string is gee. </span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\">Input:\r\nN = 3\r\nar[] = {apple, ape, april}</span>\r\n\r\n<span style=\"font-size:18px\">Output:\r\nap</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function LCP() that takes integer n and ar[] as input parameters and return the LCP (in case there is no common prefix return -1).&nbsp;</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected time complexity: </strong>O(NlogN)<br />\r\n<strong>Expected space complexity:</strong> O(string length)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10^3<br />\r\n1 &lt;= String Length &lt;= 100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek is participating in the Geek Summer Carnival. He's presented with an array of N strings and needs to find the longest common prefix (LCP) among all of them to unlock exclusive course discounts. Can you help Geek determine this LCP?",
                "constraints": [
                    "1 <= N <= 10^3",
                    "1 <= String Length <= 100"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nar[] = {geeksforgeeks, geeks, geek, geezer}",
                        "output": "gee",
                        "explanation": "The longest common prefix among \"geeksforgeeks\", \"geeks\", \"geek\", and \"geezer\" is \"gee\"."
                    },
                    {
                        "input": "N = 3\nar[] = {apple, ape, april}",
                        "output": "ap",
                        "explanation": "The longest common prefix among \"apple\", \"ape\", and \"april\" is \"ap\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>There are many ways to solve this&nbsp;problem , sorting array of string is one of the way.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Trie",
                "slug": "trie"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n// Function to find the longest common prefix \r\nclass Solution{\r\npublic:\r\n    string LCP(string ar[], int n) \r\n    { \r\n      \r\n        // If size is 0, return empty string \r\n        if (n == 0) \r\n            return \"\"; \r\n      \r\n        if (n == 1) \r\n            return ar[0]; \r\n      \r\n        // Sort the given array \r\n        sort(ar, ar + n); \r\n      \r\n        // Find the minimum length from  \r\n        // first and last string \r\n        int en = min(ar[0].size(), ar[n - 1].size()); \r\n      \r\n        // Now the common prefix in first and  \r\n        // last string is the longest common prefix \r\n        string first = ar[0], last = ar[n - 1]; \r\n        int i = 0; \r\n        while (i < en && first[i] == last[i]) \r\n            i++; \r\n      \r\n        string pre = first.substr(0, i); \r\n        if(pre.size()==0)\r\n            return \"-1\";\r\n        return pre; \r\n    } \r\n};\r\n  ",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public String lcp(String s[],int n)\r\n    {\r\n        if (n == 0) return \"\"; // if there are no strings, return an empty string\r\n        \r\n        if (n == 1) return s[0]; // if there is only one string, return that string\r\n        \r\n        Arrays.sort(s); // sort the array of strings\r\n        \r\n        int l = Math.min(s[0].length(), s[n - 1].length()); // get the minimum length of the first and last string\r\n        \r\n        String first = s[0], last = s[n - 1]; // get the first and last string\r\n        int lcp_len = 0; // initialize the length of the longest common prefix to 0\r\n        while (lcp_len < l && first.charAt(lcp_len) == last.charAt(lcp_len)) \r\n            lcp_len++; // increment the lcp_len until the characters at the corresponding index are equal\r\n        \r\n        if(lcp_len == 0)    return \"-1\"; // if the lcp_len is still 0, there is no common prefix among all strings, return -1\r\n        \r\n        return first.substring(0,lcp_len); // return the substring with the length of lcp_len from the first string\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    # Function to find the longest common prefix\r\n    def LCP(self,arr,n):\r\n        # Sorting the array\r\n        arr.sort()\r\n        \r\n        # Getting the first element of the sorted array\r\n        fst=arr[0]\r\n        # Initializing the length of the longest common prefix\r\n        lcp=len(fst)\r\n        \r\n        # Iterating through each element of the array\r\n        for e in arr:\r\n            i=0\r\n            \r\n            # Comparing the characters of each element with the corresponding character of the first element\r\n            while fst[i]==e[i]:\r\n                i+=1\r\n                \r\n                # Breaking the loop if the index exceeds the length of the lcp or the length of the current element\r\n                if i>=lcp or i>=len(e):\r\n                    break\r\n            \r\n            # Updating the length of the lcp if a smaller common prefix is found\r\n            if i<lcp:\r\n                lcp=i\r\n                \r\n        # Returning -1 if no common prefix is found, otherwise returning the lcp\r\n        if lcp==0:\r\n            return -1\r\n        return fst[:lcp]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the longest common prefix in a list of strings.\n    LCP(arr, n) {\n        // Sorting the array\n        arr.sort();\n\n        // Getting the first element of the sorted array\n        let fst=arr[0];\n        // Initializing the length of the longest common prefix\n        let lcp=fst.length;\n\n        // Iterating through each element of the array\n        for (let e of arr) {\n            let i=0;\n\n            // Comparing the characters of each element with the corresponding character of the first element\n            while (fst[i]===e[i]) {\n                i+=1;\n\n                // Breaking the loop if the index exceeds the length of the lcp or the length of the current element\n                if (i>=lcp || i>=e.length) {\n                    break;\n                }\n            }\n\n            // Updating the length of the lcp if a smaller common prefix is found\n            if (i<lcp) {\n                lcp=i;\n            }\n        }\n\n        // Returning -1 if no common prefix is found, otherwise returning the lcp\n        if (lcp===0) {\n            return -1;\n        }\n        return fst.slice(0,lcp);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}