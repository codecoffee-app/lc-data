{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705176,
            "title": "LCS of '0' K Repeated String",
            "titleSlug": "lcs-of-0-k-repeated-string5642",
            "content": "<p><span style=\"font-size:18px\">Given a Binary string <strong>st</strong> and a number <strong>k</strong>. You have to find the Longest continuous sequence of &#39;0&#39; after repeating Given string K time.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> k = 3\nst = 100001\n<strong>Output:</strong> 4\n<strong>Explaination:</strong> The string repeated k times \nbecome 100001100001100001. Here the longest \ncontinuous sequence of 0 is 4.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> k = 4\nst = 000\n<strong>Output:</strong> 12\n<strong>Explaination:</strong> When st is repeated 4 times \nit become 000000000000. The longest sequence \nbecomes of length 12.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>lcsK()</strong> which takes k and st as input parameters and returns the length of the longest continuous sequence of 0&#39;s after repeating st k times.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|st|)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; |st| &le; 10<sup>5</sup><br />\n1 &le; k &le; 10<sup>5</sup>&nbsp;&nbsp;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string `st` and a number `k`, find the length of the longest continuous sequence of '0's after repeating the string `st` `k` times.",
                "constraints": [
                    "1 <= |st| <= 10^5",
                    "1 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "k = 3\nst = 100001",
                        "output": "4",
                        "explanation": "The string '100001' repeated 3 times becomes '100001100001100001'. The longest continuous sequence of 0s has length 4."
                    },
                    {
                        "input": "k = 4\nst = 000",
                        "output": "12",
                        "explanation": "The string '000' repeated 4 times becomes '000000000000'. The longest sequence of 0s has length 12."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Calculate the length of longest consecutive sequence of 0. The consecutive 0&#39;s at first and last also should be considered.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find the maximum length of consecutive 0's in the string\n    // that can be formed by repeating the given string k times\n    int lcsK(int k, string st){\n        int count = 0, maxi = INT_MIN;\n        \n        // iterating over the string to find the maximum length of consecutive 0's\n        for(int i = 0;i < st.size();i++){\n            if(st[i] == '0')\n                count ++;\n            else\n                count = 0;\n            \n            // updating the maximum count of consecutive 0's\n            maxi = max(maxi, count);\n        }\n        \n        // checking if the maximum count equals to the length of the string\n        if(maxi == st.size())\n            return (k*maxi);\n        \n        // if k is greater than 1, then we can also consider prefix\n        // substring of the string for consecutive 0's\n        if(k > 1){\n            for(int i = 0;i < st.size();i++){\n                if(st[i] == '0')\n                    count++;\n                else\n                    break;\n                \n                // updating the maximum count of consecutive 0's by considering prefix\n                maxi = max(maxi, count);\n            }\n        }\n        \n        // returning the maximum length of consecutive 0's\n        return maxi;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the length of Longest Common Subsequence with sum \n    //less than or equal to K.\n    public int lcsK(int k, string st)\n    {\n        int count = 0, maxi = int.MinValue;\n        \n        // iterating over the string to find the maximum length of consecutive 0's\n        for(int i = 0; i < st.Length; i++)\n        {\n            if(st[i] == '0')\n                count ++;\n            else\n                count = 0;\n            \n            // updating the maximum count of consecutive 0's\n            maxi = Math.Max(maxi, count);\n        }\n        \n        // checking if the maximum count equals to the length of the string\n        if(maxi == st.Length)\n            return (k * maxi);\n        \n        // if k is greater than 1, then we can also consider prefix\n        // substring of the string for consecutive 0's\n        if(k > 1)\n        {\n            for(int i = 0; i < st.Length; i++)\n            {\n                if(st[i] == '0')\n                    count++;\n                else\n                    break;\n                \n                // updating the maximum count of consecutive 0's by considering prefix\n                maxi = Math.Max(maxi, count);\n            }\n        }\n        \n        // returning the maximum length of consecutive 0's\n        return maxi;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}