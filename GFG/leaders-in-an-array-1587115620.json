{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701210,
            "title": "Array Leaders",
            "titleSlug": "leaders-in-an-array-1587115620",
            "content": "<p><span >You are given an array <strong><code>arr</code></strong> of positive integers. Your task is to find all the leaders in the array. An element is considered a leader if it is greater than or equal to all elements to its right. The rightmost element is always a leader.</span></p>\n<p><span ><strong>Examples:<br /></strong></span></p>\n<pre><span ><strong>Input: </strong>arr = [16, 17, 4, 3, 5, 2]\n<strong>Output: </strong>[17, 5, 2]<strong>\nExplanation: </strong>Note that there is nothing greater on the right side of 17, 5 and, 2.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr = [10, 4, 2, 4, 1]\n<strong>Output: </strong>[10, 4, 4, 1]<br /><strong>Explanation:</strong> Note that both of the 4s are in output, as to be a leader an equal element is also allowed on the right. side</span></pre>\n<pre><span ><strong>Input: </strong>arr = [5, 10, 20, 40]<br /><strong>Output: </strong>[40]<br /><strong>Explanation:</strong> When an array is sorted in increasing order, only the rightmost element is leader.</span></pre>\n<pre><span ><strong>Input: </strong>arr = [30, 10, 10, 5]<br /><strong>Output:</strong> [30, 10, 10, 5]<br /><strong>Explanation:</strong> When an array is sorted in non-increasing order, all elements are leaders.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />0 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, identify and return all the leaders within the array. An element is a leader if it is greater than or equal to all elements to its right. The rightmost element of the array is always considered a leader.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[16, 17, 4, 3, 5, 2]",
                        "output": "[17, 5, 2]",
                        "explanation": "17 is greater than all elements to its right, 5 is greater than 2, and 2 is the rightmost element."
                    },
                    {
                        "input": "[10, 4, 2, 4, 1]",
                        "output": "[10, 4, 4, 1]",
                        "explanation": "10 is greater than all elements to its right. The first 4 is greater than or equal to the elements to its right. The second 4 is greater than or equal to the elements to its right. 1 is the rightmost element."
                    },
                    {
                        "input": "[5, 10, 20, 40]",
                        "output": "[40]",
                        "explanation": "In an array sorted in increasing order, only the rightmost element (40) is a leader."
                    },
                    {
                        "input": "[30, 10, 10, 5]",
                        "output": "[30, 10, 10, 5]",
                        "explanation": "In an array sorted in non-increasing order, all elements are leaders as each element is greater or equal to all elements on its right."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Traverse the array from right to left, keep track of the maximum element, and add elements greater than or equal to it.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "payu",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n    // Function to find the leaders in the array.\n  public:\n    vector<int> leaders(vector<int>& arr) {\n        vector<int> v;\n        int n = arr.size(); // Get the size of the array\n\n        int current_max = arr[n - 1]; // Initialize with the last element\n\n        // We start traversing the array from the last element.\n        for (int i = n - 1; i >= 0; i--) {\n            // Comparing the current element with the maximum element stored.\n            // If current element is greater than or equal to the max, we add the\n            // element.\n            if (arr[i] >= current_max) {\n                current_max = arr[i]; // Updating the maximum element.\n                v.push_back(\n                    current_max); // Storing the current element in vector for leaders.\n            }\n        }\n        // Finally reversing the vector in which leaders are stored.\n        reverse(v.begin(), v.end());\n        // Returning the vector.\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to find the leaders in the array.\n    static ArrayList<Integer> leaders(int arr[]) {\n        ArrayList<Integer> res = new ArrayList<>();\n        int n = arr.length; // Using array length to get the size of the array\n\n        int maxEle = arr[n - 1]; // Initialize with the last element\n\n        // We start traversing the array from the last element.\n        for (int i = n - 1; i >= 0; i--) {\n            // Comparing the current element with the maximum element stored.\n            if (arr[i] >= maxEle) {\n                maxEle = arr[i]; // Updating the maximum element.\n                res.add(maxEle); // Storing the current element in the result list.\n            }\n        }\n\n        // Reversing the list to return the leaders in the correct order.\n        Collections.reverse(res);\n        return res; // Returning the result list.\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    #Function to find the leaders in the array.\n    def leaders(self, arr):\n        ans = []\n        n = len(arr)  # Get the length of the array\n        maxx = arr[n - 1]  # Initialize with the last element\n\n        # We start traversing the array from the last element.\n        for i in range(n - 1, -1, -1):\n            # Comparing the current element with the maximum element stored.\n            if arr[i] >= maxx:\n                maxx = arr[i]  # Updating the maximum element.\n                ans.append(maxx)  # Appending the current element.\n\n        # Reversing the array.\n        ans.reverse()\n        # Returning the answer.\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    // Function to find the leaders in the array.\n    public List<int> leaders(int[] arr) {\n        List<int> leadersList = new List<int>();\n        int n = arr.Length; // Get the array size\n\n        int max = arr[n - 1]; // Initialize with the last element\n\n        // We start traversing the array from the last element.\n        for (int i = n - 1; i >= 0; i--) {\n            // Comparing the current element with the maximum element stored.\n            if (arr[i] >= max) {\n                max = arr[i];         // Updating the maximum element.\n                leadersList.Add(max); // Adding the current element to the leaders list.\n            }\n        }\n\n        // Reversing the list to return the leaders in correct order.\n        leadersList.Reverse();\n        return leadersList; // Returning the list of leaders.\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\n/**\n * @param {number[]} a\n * @returns {number[]}\n */\nclass Solution {\n    // Function to find the leaders in the array.\n    leaders(a) {\n        let v = [];\n        let n = a.length; // Get the length of the array\n\n        let max = a[n - 1]; // Initialize with the last element\n\n        // Traverse the array from the last element\n        for (let i = n - 1; i >= 0; i--) {\n            // Comparing the current element with the maximum element stored\n            if (a[i] >= max) {\n                max = a[i];  // Updating the maximum element\n                v.push(max); // Storing the current element\n            }\n        }\n\n        // Reversing the array of leaders\n        v.reverse();\n        return v; // Returning the result\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}