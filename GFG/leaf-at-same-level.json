{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700307,
            "title": "Leaves at Same Level or Not",
            "titleSlug": "leaf-at-same-level",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree with n nodes, determine whether all the leaf nodes are at the same level or not. Return true if all leaf nodes are at the same level, and false otherwise.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [1, 2, 3]<strong><br /></strong>    1<br />   / \\<br />  2   3<br /><strong>Output: </strong>true<br /><strong>Explanation: </strong>The binary tree has a height of 2 and the leaves are at the same level.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [10, 20, 30, 10, 15, N, N]<strong><br /></strong>    10<br />   /  \\<br /> 20   30<br /> /  \\<br /> 10   15<br /><strong>Output: </strong>false<br /><strong>Explanation: </strong>The binary tree has a height of 3 and the leaves are not at the same level.<br /></span></pre>\n<pre><strong>Input: </strong>root = [3, 2, 1]<br />    3<br />   / \\<br />  2   1<br /><strong>Output: </strong>true<br /><strong>Explanation: </strong>The binary tree has a height of 2 and the leaves are at the same level.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'n' nodes, determine if all leaf nodes are at the same level. Return `true` if all leaf nodes are at the same level, and `false` otherwise.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3]",
                        "output": "true",
                        "explanation": "The binary tree has a height of 2, and the leaves (2 and 3) are at the same level."
                    },
                    {
                        "input": "[10, 20, 30, 10, 15, null, null]",
                        "output": "false",
                        "explanation": "The binary tree's leaves (10, 15, and 30) are not all at the same level; 10 and 15 are at level 3 while 30 is at level 2."
                    },
                    {
                        "input": "[3, 2, 1]",
                        "output": "true",
                        "explanation": "The binary tree has a height of 2, and the leaves (2 and 1) are at the same level."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Travel the tree maintaining the depth at each level. And check if two leaf nodes are at different heights.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if all leaf nodes are at the same level.\n    bool ok(Node *root, int level, int *leafLevel) {\n\n        // if tree is empty, return true\n        if (root == NULL)\n            return true;\n\n        // if current node is a leaf node\n        if (root->left == NULL && root->right == NULL) {\n\n            // if leaf level is not set yet, set it and return true\n            if (*leafLevel == 0) {\n                *leafLevel = level;\n                return true;\n            }\n\n            // if leaf level is already set, check if current level matches leaf level\n            return (level == *leafLevel);\n        }\n\n        // recursively check if left and right subtrees satisfy the condition\n        return ok(root->left, level + 1, leafLevel) &&\n               ok(root->right, level + 1, leafLevel);\n    }\n\n    // Function to check if all leaf nodes are at the same level.\n    bool check(Node *root) {\n        int level = 0, leafLevel = 0;\n        // call helper function and return the result\n        return ok(root, level, &leafLevel);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Leaf {\n    int leaflevel = 0;\n}\n\nclass Solution {\n    boolean checkutil(Node node, int level, Leaf leafLevel) {\n        // Base case: If current node is null, return true\n        if (node == null) return true;\n\n        // If current node is a leaf node\n        if (node.left == null && node.right == null) {\n            // If this is the first leaf node encountered, store its level and return\n            // true\n            if (leafLevel.leaflevel == 0) {\n                leafLevel.leaflevel = level;\n                return true;\n            }\n            // If the current leaf node is at the same level as the first encountered\n            // leaf node, return true\n            return (level == leafLevel.leaflevel);\n        }\n\n        // Recursive call on left and right child, incrementing the level by 1\n        return (checkutil(node.left, level + 1, leafLevel) &&\n                checkutil(node.right, level + 1, leafLevel));\n    }\n\n    boolean check(Node root) {\n        Leaf mylevel = new Leaf();\n        int level = 0;\n        // Call to the util function to check if all leaf nodes are at the same level\n        return checkutil(root, level, mylevel);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Static variable to store the level of the first encountered leaf node\n    leafLevel = 0\n\n    # Helper function to check if all leaf nodes are at the same level\n    def checkUtil(self, node, level):\n        # If the node is None (empty tree or end of branch), return True\n        if node is None:\n            return True\n\n        # If the current node is a leaf node\n        if node.left is None and node.right is None:\n            global leafLevel  # Use the global leafLevel variable\n\n            # If leafLevel is not set, set it to the current level\n            if leafLevel == 0:\n                leafLevel = level\n                return True\n\n            # Check if the current leaf node is at the same level as the first leaf node\n            return level == leafLevel\n\n        # Recursively check the left and right subtrees\n        return self.checkUtil(node.left, level + 1) and self.checkUtil(\n            node.right, level + 1)\n\n    # Function to check if all leaf nodes are at the same level\n    # Returns True if they are, otherwise False\n    def check(self, root):\n        global leafLevel  # Reset the global leafLevel variable\n        leafLevel = 0\n        # Call the helper function starting from the root node and level 0\n        return self.checkUtil(root, 0)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\n/*\nclass Node\n{\n    constructor(x){\n        this.data = x; // Data value of the node\n        this.left = null; // Pointer to the left child\n        this.right = null; // Pointer to the right child\n    }\n}\n*/\n\n/**\n * Class containing methods to check if all leaf nodes are at the same level.\n */\nclass Solution {\n    /**\n     * Function to check if all leaf nodes are at the same level.\n     * @param {Node} root - The root node of the binary tree.\n     * @return {boolean} - Returns true if all leaf nodes are at the same level,\n     *     otherwise false.\n     */\n    check(root) {\n        /**\n         * Helper function to recursively check leaf levels.\n         * @param {Node} root - The current node being checked.\n         * @param {number} level - The current level of the node in the tree.\n         * @param {number[]} leafLevel - An array used to store the level of the first\n         *     encountered leaf node.\n         * @return {boolean} - True if all leaf nodes are at the same level, otherwise\n         *     false.\n         */\n        function ok(root, level, leafLevel) {\n            // If the current node is null, return true (base case for recursion)\n            if (root == null) return true;\n\n            // If the current node is a leaf node\n            if (root.left == null && root.right == null) {\n                // If the leaf level is not yet set, set it to the current level\n                if (leafLevel[0] == 0) {\n                    leafLevel[0] = level;\n                    return true;\n                }\n\n                // Check if the current leaf node's level matches the first leaf node's\n                // level\n                return (level == leafLevel[0]);\n            }\n\n            // Recursively check the left and right subtrees\n            return ok(root.left, level + 1, leafLevel) &&\n                   ok(root.right, level + 1, leafLevel);\n        }\n\n        // Initialize the starting level and an array to store the leaf level\n        var level = 0;\n        var leafLevel =\n            [ 0 ]; // Using an array to simulate pass-by-reference for leafLevel\n\n        // Call the helper function and return its result\n        return ok(root, level, leafLevel);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}