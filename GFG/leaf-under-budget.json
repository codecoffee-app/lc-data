{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700631,
            "title": "Leaf under budget",
            "titleSlug": "leaf-under-budget",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree&nbsp;and a <strong>budget</strong>.&nbsp;Assume&nbsp;you are at the root of the tree<strong>(level 1)</strong>, you need to maximise the count of&nbsp;leaf nodes you can visit in your budget if the <strong>cost of visiting </strong>a leaf node is equal to the <strong>level of that leaf node</strong>. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span>\n<span style=\"font-size: 18px;\">\\t\\t\\t10\n\\t\\t    /    \\\n\\t\\t   8\\t2\n\\t\\t /\\t/   \\\n\\t\\t3\\t3     6\n\\t\\t\\t  \\\n\\t\\t\\t   4\nand budget = 8</span>\n<span style=\"font-size: 18px;\"><strong>Output: 2</strong></span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">Cost For visiting Leaf Node 3: 3\nCost For visiting Leaf Node 4: 4\nCost For visiting Leaf Node 6: 3\nIn budget 8 one can visit Max 2 Leaf Nodes.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span>\n\\t   <span style=\"font-size: 18px;\">1\n&nbsp;\\t/   \\\n&nbsp;     2     3\n&nbsp;    / \\   / \\\n&nbsp;   4   5 6   7\nand budget = 5</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>1<br /><strong>Explanation:</strong> We can only visit either node 4 or 5.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong></p>\n<p><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>getCount()&nbsp;</strong>which takes root node of the tree and a integer denoting the budget as input parameters and returns an integer denoting the count of visited leaf nodes of the tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=N&lt;=10<sup>5</sup><br />1&lt;=budget&lt;=10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and a budget, your task is to maximize the number of leaf nodes you can visit within the given budget, starting from the root (level 1). The cost to visit a leaf node is equal to its level in the tree.",
                "constraints": [
                    "1 <= N <= 10^5 (where N is the number of nodes in the tree)",
                    "1 <= budget <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "Binary tree:\n     10\n    /  \\\n   8    2\n  / \\  / \\\n 3   3 6  null\n       \\ \n        4\nBudget = 8",
                        "output": "2",
                        "explanation": "The leaf nodes are 3 (level 3), 3 (level 3), 6 (level 3), and 4 (level 4). Their respective costs are 3, 3, 3, and 4.  With a budget of 8, we can visit two leaf nodes (e.g., the two nodes with cost 3)."
                    },
                    {
                        "input": "Binary tree:\n    1\n   / \\\n  2   3\n / \\ / \\\n4   5 6   7\nBudget = 5",
                        "output": "1",
                        "explanation": "The leaf nodes are 4, 5, 6, and 7, all at level 3.  Their cost is 3 each. With a budget of 5, you can only afford to visit one of them."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find levels of all the leaf nodes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "oracle"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\npublic:\n    //Function to recursively get the path length to each leaf node and store it in the `leaf_height` vector.\n    void getLeafHeightRecur(Node *node, vector<int> &leaf_height, int pathLen)\n    {\n        //Base case: If the node is NULL, return.\n        if (node == NULL)\n            return;\n        \n        pathLen++; //Increment the path length by 1.\n        \n        //If the node is a leaf node (i.e., both left and right child are NULL), add the path length to the `leaf_height` vector.\n        if (node->left == NULL && node->right == NULL)\n        {\n            leaf_height.push_back(pathLen);\n        }\n        //If the node is not a leaf node, recursively call the function on its left and right child.\n        else\n        {\n            getLeafHeightRecur(node->left, leaf_height, pathLen);\n            getLeafHeightRecur(node->right, leaf_height, pathLen);\n        }\n    }\n\n    //Function to count the number of paths with sum greater than or equal to `k`.\n    int getCount(Node *root, int k)\n    {\n        vector<int> leaf_height;\n        //Get the path length to each leaf node by calling the recursive function.\n        getLeafHeightRecur(root, leaf_height, 0);\n        sort(leaf_height.begin(), leaf_height.end()); //Sort the `leaf_height` vector in non-decreasing order.\n        \n        int cnt = 0; //Initialize a counter variable to keep track of the number of paths.\n        for (int i = 0; i < leaf_height.size(); i++)\n        {\n            //If subtracting the current path length from `k` results in a negative value, return the count.\n            if (k - leaf_height[i] < 0)\n                return cnt;\n            else\n                cnt++; //Increment the counter by 1.\n            \n            k -= leaf_height[i]; //Subtract the current path length from `k`.\n        }\n        \n        return cnt; //Return the count.\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    class Res\n    {\n       ArrayList<Integer> leaf_height = new ArrayList<Integer>();  // Create a list to store the leaf heights\n    }\n    \n    public void getLeafHeightRecur(Node node, Res r, int pathLen)  // Recursive function to get the leaf heights\n    {\n        \n        if (node==null)\treturn;  // If the node is null, return\n        \n        pathLen++;  // Increment the path length\n        \n        if (node.left==null && node.right==null)  // If the node is a leaf node\n        {\n            r.leaf_height.add(pathLen);  // Add the path length to the list of leaf heights\n             \n        }\n        \n        // Recursively call the function on the left and right child nodes\n        else{  \n            getLeafHeightRecur(node.left, r, pathLen);\n            getLeafHeightRecur(node.right, r, pathLen);\n        }\n    }\n\n    \n    public int getCount(Node node, int bud)\n    {\n        Res r = new Res();\n        getLeafHeightRecur(node, r, 0);  // Call the recursive function to get the leaf heights\n        Collections.sort(r.leaf_height);  // Sort the leaf heights in ascending order\n        int cnt = 0;\n         \n        for(int i=0; i<r.leaf_height.size(); i++)  // Iterate through the sorted leaf heights\n        {\n            if(bud-r.leaf_height.get(i)<0)  // Check if the remaining budget is less than the current leaf height\n                return cnt;  // If so, return the count\n            else \n                cnt++;  // Increment the count\n            bud-=r.leaf_height.get(i);  // Subtract the current leaf height from the budget\n        }\n        \n        return cnt;  // Return the final count    \n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to count the number of nodes at each level in the tree.\n    def budg(self,root,d,lv):\n        if not root:\n            return\n        \n        #If the current node is a leaf node, update the dictionary with the count of nodes at the current level.\n        if not root.left and not root.right:\n            if lv in d:\n                d[lv]+=1\n            else:\n                d[lv]=1\n            return\n        \n        #Recursively call the function for the left and right subtrees, updating the level by 1.\n        self.budg(root.left,d,lv+1)\n        self.budg(root.right,d,lv+1)\n\n    #Function to count the number of nodes whose budget sum is less than or equal to n.\n    def getCount(self,root,n):\n        d=dict()\n        \n        #Call the budg function to count the number of nodes at each level in the tree.\n        self.budg(root,d,1)\n        \n        c=0\n        s=0\n        \n        #Iterate through the dictionary in sorted order of levels.\n        for k in sorted(d):\n            \n            #Check if adding the current level's nodes to the sum exceeds or is equal to n.\n            if s+(d[k]*k)>=n:\n                break\n            \n            #Update the sum and count of nodes.\n            s+=(d[k]*k)\n            c+=d[k]\n        \n        #If the sum is equal to n, add the nodes at the current level to the count and return.\n        else:\n            return c\n        \n        #Calculate the remaining budget required.\n        lb=n-s\n        \n        #Calculate the number of nodes that can be added at the current level to satisfy the remaining budget.\n        ln=lb//k\n        \n        #If there are enough nodes at the current level, add them to the count and return.\n        if d[k]>=ln:\n            c+=ln\n            return c\n        \n        #If there are not enough nodes at the current level, add all of them to the count and continue.\n        else:\n            return c+d[k]",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Solution {\n  getCount(root, k) {\n    let leaf_height = [];\n  \n    function getLeafHeightRecur(node, leaf_height, pathLen) {\n      if (node === null) {\n        return;\n      }\n      pathLen++;\n      if (node.left === null && node.right === null) {\n        leaf_height.push(pathLen);\n      } else {\n        getLeafHeightRecur(node.left, leaf_height, pathLen);\n        getLeafHeightRecur(node.right, leaf_height, pathLen);\n      }\n    }\n  \n    getLeafHeightRecur(root, leaf_height, 0);\n  \n    leaf_height.sort((a, b) => a - b);\n  \n    let cnt = 0;\n    for (let i = 0; i < leaf_height.length; i++) {\n      if (k - leaf_height[i] < 0) {\n        return cnt;\n      } else {\n        cnt++;\n      }\n      k -= leaf_height[i];\n    }\n  \n    return cnt;\n  }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}