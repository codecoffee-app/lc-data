{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704949,
            "title": "Least Prime Factor",
            "titleSlug": "least-prime-factor5216",
            "content": "<p><span style=\"font-size: 18px;\">Given a number N, find the least prime factors for all numbers from 1 to N.&nbsp; The least prime factor of an integer X is the smallest prime number that divides it.<br /><strong>Note : </strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1 needs to be printed for 1.</span></li>\n<li><span style=\"font-size: 18px;\">You need to return an array/vector/list of <strong>size N+1</strong>&nbsp;and need to use <strong>1-based indexing</strong> to store the answer for each number.</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: N = 6\n<strong>Output:</strong> [0, 1, 2, 3, 2, 5, 2]&nbsp;\n<strong>Explanation</strong>: least prime factor of 1 = 1,\nleast prime factor of 2 = 2,\nleast prime factor of 3 = 3,\nleast prime factor of 4 = 2,\nleast prime factor of 5 = 5,\nleast prime factor of 6 = 2.\nSo answer is[1, 2, 3, 2, 5, 2]. </span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 4\n<strong>Output:&nbsp;</strong>[0, 1, 2, 3, 2]\n<strong>Explanation</strong>: least prime factor of 1 = 1,\nleast prime factor of 2 = 2,\nleast prime factor of 3 = 3,\nleast prime factor of 4 = 2.\nSo answer is[1, 2, 3, 2]. \n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong>leastPrimeFactor()&nbsp;</strong>which takes N as input parameter and returns a list of integers containing all the least prime factors of each number from 1 to N.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(NlogN)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2&lt;= n &lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N, find the least prime factors for all numbers from 1 to N. The least prime factor of an integer X is the smallest prime number that divides it.\n\nNote:\n\n*   The least prime factor of 1 is defined as 1.\n*   You must return an array of size N+1 using 1-based indexing to store the answer for each number.",
                "constraints": [
                    "2 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "6",
                        "output": "[0, 1, 2, 3, 2, 5, 2]",
                        "explanation": "The least prime factors for numbers 1 to 6 are: 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 2, 5 -> 5, 6 -> 2. Hence, the output is [0, 1, 2, 3, 2, 5, 2]."
                    },
                    {
                        "input": "4",
                        "output": "[0, 1, 2, 3, 2]",
                        "explanation": "The least prime factors for numbers 1 to 4 are: 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 2. Hence, the output is [0, 1, 2, 3, 2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">use&nbsp;<a href=\"https://www.geeksforgeeks.org/sieve-of-eratosthenes/\">sieve of Eratosthenes</a>.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n    vector<int> leastPrimeFactor(int n) \r\n    { \r\n        // Create a vector to store least primes. \r\n        // Initialize all entries as 0. \r\n        vector<int> least_prime(n+1, 0); \r\n      \r\n        // We need to print 1 for 1. \r\n        least_prime[1] = 1; \r\n      \r\n        for (int i = 2; i <= n; i++) \r\n        { \r\n            // least_prime[i] == 0 \r\n            // means it i is prime \r\n            if (least_prime[i] == 0) \r\n            { \r\n                // marking the prime number \r\n                // as its own lpf \r\n                least_prime[i] = i; \r\n      \r\n                // mark it as a divisor for all its \r\n                // multiples if not already marked \r\n                for (int j = 2*i; j <= n; j += i) \r\n                    if (least_prime[j] == 0) \r\n                       least_prime[j] = i; \r\n            } \r\n        } \r\n      \r\n        // Return least prime factor of \r\n        // of numbers till n \r\n        return least_prime;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\n{\n    public int[] leastPrimeFactor(int n)\n    {\n        // code here\n        int least_prime[]=new int[n+1]; \n      \n        // We need to print 1 for 1. \n        least_prime[1] = 1; \n      \n        for (int i = 2; i <= n; i++) \n        { \n            // least_prime[i] == 0 \n            // means it i is prime \n            if (least_prime[i] == 0) \n            { \n                // marking the prime number \n                // as its own lpf \n                least_prime[i] = i; \n      \n                // mark it as a divisor for all its \n                // multiples if not already marked \n                for (int j = 2*i; j <= n; j += i) \n                    if (least_prime[j] == 0) \n                       least_prime[j] = i; \n            } \n        } \n      \n        // Return least prime factor of \n        // of numbers till n \n        return least_prime;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def leastPrimeFactor(self, n):\n        # Create a list to store least primes.\n        # Initialize all entries as 0.\n        least_prime = [0] * (n + 1)\n\n        # We need to assign 1 for 1.\n        least_prime[1] = 1\n\n        for i in range(2, n + 1):\n            # least_prime[i] == 0\n            # means i is prime\n            if least_prime[i] == 0:\n                # Marking the prime number\n                # as its own least prime factor\n                least_prime[i] = i\n\n                # Mark it as a divisor for all its multiples if not already marked\n                for j in range(2 * i, n + 1, i):\n                    if least_prime[j] == 0:\n                        least_prime[j] = i\n\n        # Return the least prime factor of numbers till n\n        return least_prime\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to find least prime factors of all numbers from 1 to n.\n    leastPrimeFactor(n) {\n        // Create a list to store least primes.\n        // Initialize all entries as 0.\n        let least_prime = new Array(n+1).fill(0);\n        \n        // We need to assign 1 for 1.\n        least_prime[1] = 1;\n\n        for(let i=2; i<=n; i++) {\n            // least_prime[i] == 0 means i is prime\n            if(least_prime[i] == 0) {\n                // Marking the prime number as its own least prime factor\n                least_prime[i] = i;\n\n                // Mark it as a divisor for all its multiples if not already marked\n                for(let j=2*i; j<=n; j+=i) {\n                    if(least_prime[j] == 0) {\n                        least_prime[j] = i;\n                    }\n                }\n            }\n        }\n\n        // Return the least prime factor of numbers till n\n        return least_prime.slice(1);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}