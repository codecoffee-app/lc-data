{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700615,
            "title": "Leaves to DLL",
            "titleSlug": "leaves-to-dll",
            "content": "<p><span style=\"font-size: 12pt;\">Given a Binary Tree, extract all its leaf nodes to form a Doubly Link List starting from the leftmost leaf. Modify the original tree to make the DLL thus removing the leaf nodes from the tree. Consider the left and right pointers of the tree to be the previous and next pointer of the DLL respectively.</span><br /><br /><span style=\"font-size: 12pt;\"><strong>Note:&nbsp;</strong>The generated output will contain the in-order traversal of the modified tree, the DLL from left to right, and the DLL from right to left.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input:</strong>\n<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700615/Web/Other/blobid1_1722317045.png\" width=\"398\" height=\"262\" /></span><br /><span style=\"font-size: 12pt;\"><strong>Output: </strong>\nModified Tree :<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700615/Web/Other/blobid2_1722317056.png\" width=\"401\" height=\"169\" />\nDoubly Linked List :\n4 &lt;-&gt; 5 &lt;-&gt; 6 &lt;-&gt; 7<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700615/Web/Other/blobid3_1722317094.png\" height=\"100\" />\n<strong>Explanation:</strong>\nThe leaf nodes are modified to form the DLL in-place. Thus their links are removed from  the tree.</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input:</strong></span><br /><span style=\"font-size: 12pt;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700615/Web/Other/blobid4_1722317145.png\" width=\"401\" height=\"264\" /></span><br /><span style=\"font-size: 12pt;\"><strong>Output: </strong>\nModified Tree :</span><br /><span style=\"font-size: 12pt;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700615/Web/Other/blobid5_1722317194.png\" width=\"401\" height=\"169\" /></span><br /><span style=\"font-size: 12pt;\">Doubly Linked List:\n4 &lt;-&gt; 5 &lt;-&gt; 3<br /></span><span style=\"font-size: 12pt;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700615/Web/Other/blobid6_1722317203.png\" width=\"400\" height=\"90\" /></span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(height of tree)<br /><br /><strong>Constraints:</strong><br />1 &le; number of nodes in tree, data of nodes &le; 10<sup>4<br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, extract all its leaf nodes and connect them to form a Doubly Linked List (DLL). The DLL should start with the leftmost leaf.  Modify the original tree by removing the extracted leaf nodes.  The left and right pointers of the tree nodes should be used as the previous and next pointers of the DLL nodes, respectively.\n\nThe problem requires an in-place transformation, meaning you should modify the original tree and create the DLL without using significant extra memory. The final output should include the inorder traversal of the modified tree and both left-to-right and right-to-left traversals of the generated DLL.",
                "constraints": [
                    "1 <= number of nodes in tree, data of nodes <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "Binary Tree: Root = 1, Left(1) = 2, Right(1) = 3, Left(2) = 4, Right(2) = 5, Left(3) = 6, Right(3) = 7",
                        "output": "Modified Tree (Inorder): 2 1 3\nDoubly Linked List (Left to Right): 4 <-> 5 <-> 6 <-> 7\nDoubly Linked List (Right to Left): 7 <-> 6 <-> 5 <-> 4",
                        "explanation": "The leaf nodes (4, 5, 6, 7) are extracted and connected to form the DLL. The original tree is modified to remove these leaves. Only the non-leaf nodes (1, 2, 3) remain."
                    },
                    {
                        "input": "Binary Tree: Root = 1, Left(1) = 2, Right(1) = 3, Left(2) = 4, Right(2) = 5",
                        "output": "Modified Tree (Inorder): 2 1\nDoubly Linked List (Left to Right): 4 <-> 5 <-> 3\nDoubly Linked List (Right to Left): 3 <-> 5 <-> 4",
                        "explanation": "The leaf nodes (4, 5, 3) are extracted from the tree to form a doubly linked list. The tree after extraction now contains only the nodes 1 and 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse leaves, connect and remove them, adding to the start of the linked list in reverse order by processing the right subtree first, then the left.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "linkedin"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    Node *head;\n\n    Solution()\n        : head(nullptr) {}\n\n    Node *convertToDLL_util(Node *root) {\n        // If root is NULL, return NULL.\n        if (root == NULL)\n            return NULL;\n        // If the current node is a leaf node,\n        // update the pointers for the doubly linked list.\n        if (root->left == NULL && root->right == NULL) {\n            root->right = head;\n            if (head != NULL)\n                (head)->left = root;\n            head = root;\n            return NULL;\n        }\n        // Recursive function call for the right subtree.\n        root->right = convertToDLL_util(root->right);\n        // Recursive function call for the left subtree.\n        root->left = convertToDLL_util(root->left);\n        // Return the root node after updating the pointers.\n        return root;\n    }\n\n    // Function to convert the binary tree to doubly linked list.\n    Node *convertToDLL(Node *root) {\n        // Initializing the head pointer as NULL.\n        head = NULL;\n        // Calling the utility function to convert the binary tree to doubly linked\n        // list.\n        root = convertToDLL_util(root);\n        // Returning the head pointer of the doubly linked list.\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// class to convert a binary tree to a doubly linked list\n\nclass Solution {\n\n    Node head, prev, till;\n\n    // utility function to convert binary tree to DLL\n    public Node convertToDLLUTIL(Node root) {\n\n        // if root is null, return null\n        if (root == null) return null;\n\n        // if root is a leaf node, add it to the DLL\n        if (root.left == null && root.right == null) {\n\n            // if head is null, set head, prev and till to root\n            // else add the leaf node to the DLL\n            if (head == null) {\n                head = root;\n                prev = root;\n                till = root;\n            } else {\n                prev.right = root;\n                root.left = prev;\n                prev = root;\n            }\n\n            return null;\n        }\n\n        // recursively convert left and right subtrees to DLLs\n        root.left = convertToDLLUTIL(root.left);\n        root.right = convertToDLLUTIL(root.right);\n\n        // return the root node\n        return root;\n    }\n\n    // function to convert binary tree to DLL\n    public Node convertToDLL(Node root) {\n        // initialize head, prev and till to null\n        head = null;\n        prev = null;\n        till = null;\n\n        // call the utility function to convert the tree to DLL\n        convertToDLLUTIL(root);\n\n        // return the head node of the DLL\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def __init__(self):\n        self.head = None\n\n    # Function to recursively convert a binary tree to doubly linked list.\n    def convertToDLL_util(self, root):\n        if root is None:\n            return None\n\n        # If leaf node, update the right pointer to the head and left pointer to None.\n        if root.left is None and root.right is None:\n            root.right = self.head\n            if self.head is not None:\n                self.head.left = root\n            self.head = root\n            return None\n\n        # Recursively convert the right subtree and left subtree to doubly linked list.\n        root.right = self.convertToDLL_util(root.right)\n        root.left = self.convertToDLL_util(root.left)\n        return root\n\n    # Main function to convert binary tree to doubly linked list.\n    def convertToDLL(self, root):\n        self.head = None\n        self.convertToDLL_util(root)\n        return self.head\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() {\n        let head, prev, tail; // Declare variables to store the head, previous node, and tail of the doubly linked list.\n    }\n    \n    convertToDLLUTIL(root) {\n        if (root === null) return null; // Base case: if root is null, return null.\n        \n        if (root.left === null && root.right === null) { // If the current node has no left or right child, it is a leaf node.\n            if (this.head === null) { // If this is the first leaf node encountered, set it as the head of the doubly linked list.\n                this.head = root;\n                this.prev = root;\n                this.tail = root;\n            } else { // If this is not the first leaf node, update the previous node's right pointer to point to the current node and update the current node's left pointer to the previous node.\n                this.prev.right = root;\n                root.left = this.prev;\n                this.prev = root;\n            }\n            return null; // Return null to indicate the end of a leaf node.\n        }\n        \n        root.left = this.convertToDLLUTIL(root.left); // Recursively convert the left subtree to a doubly linked list.\n        root.right = this.convertToDLLUTIL(root.right); // Recursively convert the right subtree to a doubly linked list.\n        return root; // Return the current node.\n    }\n    \n    convertToDLL(root) {\n        this.head = null; // Initialize the head of the doubly linked list as null.\n        this.prev = null; // Initialize the previous node as null.\n        this.tail = null; // Initialize the tail of the doubly linked list as null.\n        this.convertToDLLUTIL(root); // Call the utility function to convert the binary tree to a doubly linked list.\n        return this.head; // Return the head of the doubly linked list.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}