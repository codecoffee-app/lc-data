{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702775,
            "title": "Left Index",
            "titleSlug": "left-index1524",
            "content": "<p><span style=\"font-size: 18px;\">Given a sorted array of&nbsp;integers of size N and a number X. Find the leftmost index of X in the array arr[].</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong></span>:\n<span style=\"font-size: 18px;\">N = 10\narr[] = {1, 1, 2, 2, 3, 4, 5, 5, 6, 7}\nX = 1\n<strong>Output:</strong>&nbsp;0&nbsp;\n<strong>Explanation</strong>: Because&nbsp;the element 1   \nappears twice and its left most \noccurrence is at index 0.</span>\n</pre>\n<p><br /><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 5\narr[] = {2, 2, 3, 3, 4}\nX = 4\n<strong>Output:&nbsp;</strong>4\n<strong>Explanation</strong>: Because element 4 appears \nonly once at index 4.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>leftIndex()</strong>&nbsp;which takes the array arr[], its size N<strong>&nbsp;</strong>and an integer X<strong>&nbsp;</strong>as input parameters&nbsp;and returns the leftmost occurrence of X&nbsp;in arr[]. If X&nbsp;is not present in the array, return <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(LogN)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>6</sup></span><br /><span style=\"font-size: 18px;\">-10<sup>5&nbsp;</sup>&lt;= arr[i] &lt;= 10<sup>5</sup><br />Array may contain duplicate elements.&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use binary search to find element x.&nbsp;If element is found, then go for its lower bound index, the index at which it&#39;s occurrence starts.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\r\n\r\nint leftIndex(int N, int arr[], int X){    \r\n    int low = 0, high = N-1;\r\n    while(low <= high)\r\n    {\r\n        int mid = low + ((high-low)/2);\r\n        if((arr[mid] == X) && (mid == 0 || (arr[mid-1] < X)))\r\n            return mid;\r\n\r\n        if(X > arr[mid])\r\n            low = mid+1;\r\n        else\r\n            high = mid-1;\r\n    }\r\n    return -1;\r\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution{   \r\npublic:\r\n    int leftIndex(int N, int arr[], int X){    \r\n        int low = 0, high = N-1;\r\n        while(low <= high)\r\n        {\r\n            int mid = low + ((high-low)/2);\r\n            if(arr[mid] == X && (mid == 0 or (arr[mid-1] < X)))\r\n                return mid;\r\n    \r\n            if(X > arr[mid])\r\n                low = mid+1;\r\n\r\n            else\r\n                high = mid-1;\r\n        }\r\n        return -1;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    static int leftIndex(int N, int arr[], int X){\r\n        int low = 0, high = N-1;\r\n        while(low <= high){\r\n            int mid = low + ((high-low)/2);\r\n            \r\n            if(arr[mid] == X && (mid == 0 || (arr[mid-1] < X)))\r\n                return mid;\r\n            if(X > arr[mid])\r\n                low = mid+1;\r\n            else\r\n                high = mid-1;   \r\n        }\r\n        return -1;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def leftIndex (self, N, arr, X):\r\n        low = 0\r\n        high = N - 1\r\n        \r\n        while low <= high:\r\n            mid = ((low + high)//2)\r\n            if(arr[mid] == X and (mid == 0 or (arr[mid-1] < X))):\r\n                return mid\r\n            if(X > arr[mid]):\r\n                low = mid+1 \r\n            else:\r\n                high = mid-1\r\n        return -1\r\n\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n\nclass Solution{\n    leftIndex(N, arr, X)\n    {\n         let low = 0, high = N - 1;\n    \n        while (low <= high) {\n            let mid = low + Math.floor((high - low) / 2);\n    \n            if (arr[mid] === X && (mid === 0 || arr[mid - 1] < X)) {\n                return mid;\n            }\n    \n            if (X > arr[mid]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return -1;\n    }\n}\n\n\n",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\n\nclass Solution{\n    \n    //Function to find the left index of the subarray with sum X\n    public int leftIndex(int N, int[] arr, int X)\n    {\n        int low = 0, high = N-1;\n        while(low <= high)\n        {\n            int mid = low + ((high-low)/2);\n            if(arr[mid] == X && (mid == 0 || (arr[mid-1] < X)))\n                return mid;\n    \n            if(X > arr[mid])\n                low = mid+1;\n\n            else\n                high = mid-1;\n        }\n        return -1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}