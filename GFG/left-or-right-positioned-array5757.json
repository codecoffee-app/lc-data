{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702722,
            "title": "Left or Right Positioned Array",
            "titleSlug": "left-or-right-positioned-array5757",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>, determine if it can be rearranged such that each element is equal to the number of elements to its left or the number of elements to its right. Return <strong>true</strong> if the condition is met, otherwise return <strong>false</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 3, 3, 2]\n<strong>Output: </strong>true\n<strong>Explanation: </strong>This array has one such arrangement [3, 1, 2, 3]. In this arrangement, first element '3' indicates that three numbers are after it, the 2nd element '1' indicates that one number is before it, the 3rd element '2' indicates that two elements are before it.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 6, 5, 4, 3, 2, 1]\n<strong>Output: </strong>false\n<strong>Explanation: </strong>No such arrangement is possible</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 0, 1, 3]\n<strong>Output: </strong>true\n<strong>Explanation: </strong>Possible arrangement is [0, 1, 2, 3]</span></pre>\n<p><span style=\"font-size: 18px;\"><br /></span><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space: </strong>O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0&le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, determine if it can be rearranged such that each element is equal to either the number of elements to its left or the number of elements to its right.  Return `true` if such a rearrangement is possible, and `false` otherwise.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 3, 3, 2]",
                        "output": "true",
                        "explanation": "The array can be rearranged as [3, 1, 2, 3]. In this arrangement, 3 has three elements to its right, 1 has one element to its left, and 2 has two elements to its left."
                    },
                    {
                        "input": "[1, 6, 5, 4, 3, 2, 1]",
                        "output": "false",
                        "explanation": "No such arrangement is possible."
                    },
                    {
                        "input": "[2, 0, 1, 3]",
                        "output": "true",
                        "explanation": "A possible arrangement is [0, 1, 2, 3]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to place each element at its index or its mirror position, ensuring no position is filled twice.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check Left or Right Positioned Array.\n    // arr[] is array of n elements.\n    bool leftRight(vector<int>& arr) {\n        int n = arr.size(); // Get the size of the array.\n        // Initialize visited array with size n and all values 0.\n        vector<int> visited(n, 0);\n\n        // Traverse each element of the array.\n        for (int i = 0; i < n; i++) {\n            // Element must be smaller than n.\n            if (arr[i] < n) {\n                // Try to place arr[i] at position arr[i] or at position n-arr[i]-1.\n                if (visited[arr[i]] == 0)\n                    visited[arr[i]] = 1;\n                else if (arr[i] < n && visited[n - arr[i] - 1] == 0)\n                    visited[n - arr[i] - 1] = 1;\n                else\n                    return false; // If neither position is available, return false.\n            } else {\n                return false; // If arr[i] is greater than or equal to n, it's invalid.\n            }\n        }\n\n        // Check if all positions are occupied.\n        for (int i = 0; i < n; i++) {\n            if (visited[i] == 0)\n                return false;\n        }\n\n        return true; // Return true if all positions are occupied.\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to check Left or Right Positioned Array\n    public static boolean leftRight(int arr[]) {\n\n        int n = arr.length; // Get the size of the array\n        // Initialize a visited array with size n and all\n        // values set to 0\n        int[] visited = new int[n];\n\n        // Traverse each element of the array\n        for (int i = 0; i < n; i++) {\n            // Element must be smaller than n\n            if (arr[i] < n) {\n                // Try to place arr[i] at position arr[i] or at position n-arr[i]-1\n                if (visited[arr[i]] == 0) {\n                    visited[arr[i]] = 1;\n                } else if (visited[n - arr[i] - 1] == 0) {\n                    visited[n - arr[i] - 1] = 1;\n                } else {\n                    return false; // If neither position is available, return false\n                }\n            } else {\n                return false; // If arr[i] is greater than or equal to n, it's invalid\n            }\n        }\n\n        // Check if all positions are occupied\n        for (int i = 0; i < n; i++) {\n            if (visited[i] == 0) {\n                return false;\n            }\n        }\n\n        return true; // Return true if all positions are occupied\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def leftRight(self, arr):\n        n = len(arr)  # Get the size of the array\n        # Initialize a visited array of size n with all values set to 0\n        visited = [0] * n\n\n        # Traverse each element of the array\n        for i in range(n):\n            # Element must be smaller than n\n            if arr[i] < n:\n                # Try to place arr[i] at position arr[i] or at position n-arr[i]-1\n                if visited[arr[i]] == 0:\n                    visited[arr[i]] = 1\n                elif visited[n - arr[i] - 1] == 0:\n                    visited[n - arr[i] - 1] = 1\n                else:\n                    return False  # If neither position is available, return False\n            else:\n                return False  # If arr[i] is greater than or equal to n, it's invalid\n\n        # Check if all positions are occupied\n        for i in range(n):\n            if visited[i] == 0:\n                return False\n\n        return True  # Return True if all positions are occupied\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr\n * @returns {boolean}\n */\n\nclass Solution {\n    // Function to check if the array elements can be positioned correctly.\n    leftRight(arr) {\n        let n = arr.length; // Get the size of the array\n        // Initialize a visited array with size n and all values 0\n        let visited = new Array(n).fill(0);\n\n        // Traverse each element of the array\n        for (let i = 0; i < n; i++) {\n            // Element must be smaller than n\n            if (arr[i] < n) {\n                // Try to place arr[i] at position arr[i] or at position n-arr[i]-1\n                if (visited[arr[i]] === 0) {\n                    visited[arr[i]] = 1;\n                } else if (visited[n - arr[i] - 1] === 0) {\n                    visited[n - arr[i] - 1] = 1;\n                } else {\n                    return false; // If neither position is available, return false\n                }\n            } else {\n                return false; // If arr[i] is greater than or equal to n, it's invalid\n            }\n        }\n\n        // Check if all positions are occupied\n        for (let i = 0; i < n; i++) {\n            if (visited[i] === 0) {\n                return false;\n            }\n        }\n\n        return true; // Return true if all positions are occupied\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}