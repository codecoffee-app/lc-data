{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703455,
            "title": "Left out candies",
            "titleSlug": "left-out-candies5652",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>n</strong> students sitting in a circle, distribute <strong>m</strong> candies to these students. The <strong>i<sub>th</sub></strong>&nbsp;student can take only&nbsp;<strong>i</strong> candies. If <strong>i<sub>th</sub></strong> student does not get the required amount of&nbsp;candies&nbsp;he will not take it. Distribute the candies starting from the 1st student and moving along the circle of students till you reach&nbsp;a student you can not give candies to. You need to find the amount of&nbsp;candies left.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4, m = 11\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> You first give 1 candy to 1st student, 2 to 2nd , 3 to 3rd , 4 to 4th then again 1 to first. All candies are finished with none left out.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4, m = 12\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>&nbsp;You are left with only one candy.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(logn)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&thinsp;&le;&thinsp;n&thinsp;&le;&thinsp;10<sup>6</sup><br />1&thinsp;&le;&thinsp;m&thinsp;&le;&thinsp;10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >First find the left candies when you are distributing candies for last round. It can be easily derivable that to distribute candies to n students we need n*(n+1)/2 candies. Now use binary search to check for&nbsp;which i you are able to distribute candies to students 1 to i, but&nbsp;you can't distribute any more.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to calculate how many candies will be left\n\nclass Solution {\n  public:\n    long long leftCandies(long long n, long long m) {\n\n        // Calculate the total candies left\n        long long leftCandies = m % ((n * (n + 1)) / 2);\n\n        // Initialize left and right pointers\n        long long l = 0, r = n - 1;\n\n        // Initialize the answer variable\n        long long ans = leftCandies;\n\n        // Binary search to find the minimum candies needed to remove\n        while (l <= r) {\n            long long mid = (l + r) / 2;\n\n            // If the current number of candies is greater than the candies needed,\n            // update the right pointer to search for a smaller number\n            if (leftCandies < (mid * (mid + 1)) / 2) {\n                r = mid - 1;\n            }\n            // If the current number of candies is less than the candies needed,\n            // update the answer and update the left pointer to search for a larger\n            // number\n            else {\n                ans = min(ans, leftCandies - (mid * (mid + 1)) / 2);\n                l = mid + 1;\n            }\n        }\n\n        // Return the minimum candies needed to remove\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public long leftCandies(long n, long m) {\n        // Calculate the total candies left\n        long totalCandies = (n * (n + 1)) / 2;\n        long leftCandies = m % totalCandies;\n\n        // Initialize left and right pointers\n        long l = 0, r = n - 1;\n\n        // Initialize the answer variable\n        long ans = leftCandies;\n\n        // Binary search to find the minimum candies needed to remove\n        while (l <= r) {\n            long mid = (l + r) / 2;\n\n            // If the current number of candies is greater than the candies needed,\n            // update the right pointer to search for a smaller number\n            if (leftCandies < (mid * (mid + 1)) / 2) {\n                r = mid - 1;\n            }\n            // If the current number of candies is less than the candies needed,\n            // update the answer and update the left pointer to search for a larger\n            // number\n            else {\n                ans = Math.min(ans, leftCandies - (mid * (mid + 1)) / 2);\n                l = mid + 1;\n            }\n        }\n\n        // Return the minimum candies needed to remove\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def leftCandies(self, n, m):\n        # Calculate the total candies left\n        total_candies = (n * (n + 1)) // 2\n        left_candies = m % total_candies\n\n        # Initialize left and right pointers\n        l, r = 0, n - 1\n\n        # Initialize the answer variable\n        ans = left_candies\n\n        # Binary search to find the minimum candies needed to remove\n        while l <= r:\n            mid = (l + r) // 2\n\n            # If the current number of candies is greater than the candies needed,\n            # update the right pointer to search for a smaller number\n            if left_candies < (mid * (mid + 1)) // 2:\n                r = mid - 1\n            # If the current number of candies is less than the candies needed,\n            # update the answer and update the left pointer to search for a larger\n            # number\n            else:\n                ans = min(ans, left_candies - (mid * (mid + 1)) // 2)\n                l = mid + 1\n\n        # Return the minimum candies needed to remove\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    leftCandies(n, m) {\n        // Calculate the total candies left\n        let totalCandies = (n * (n + 1)) / 2;\n        let leftCandies = m % totalCandies;\n\n        // Initialize left and right pointers\n        let l = 0, r = n - 1;\n\n        // Initialize the answer variable\n        let ans = leftCandies;\n\n        // Binary search to find the minimum candies needed to remove\n        while (l <= r) {\n            let mid = Math.floor((l + r) / 2);\n\n            // If the current number of candies is greater than the candies needed,\n            // update the right pointer to search for a smaller number\n            if (leftCandies < (mid * (mid + 1)) / 2) {\n                r = mid - 1;\n            }\n            // If the current number of candies is less than the candies needed,\n            // update the answer and update the left pointer to search for a larger\n            // number\n            else {\n                ans = Math.min(ans, leftCandies - (mid * (mid + 1)) / 2);\n                l = mid + 1;\n            }\n        }\n\n        // Return the minimum candies needed to remove\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}