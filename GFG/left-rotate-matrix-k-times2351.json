{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705284,
            "title": "Rotate Each Row of Matrix K Times",
            "titleSlug": "left-rotate-matrix-k-times2351",
            "content": "<p><span >You are given an integer <strong>k </strong>and<strong> </strong>matrix&nbsp;<strong>mat.&nbsp;</strong>Rotate the elements of the given matrix to the left <strong>k</strong> times and return the resulting matrix.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k=1, mat=[[1,2,3]<br />\\t\\t     [4,5,6]<br />\\t\\t     [7,8,9]]\n<strong>Output: </strong>[[2, 3, 1]<br />\\t   [5, 6, 4]\n\\t   [8, 9, 7]]\n<strong>Explanation: </strong>Rotate the matrix by one<br />1 2 3\\t 2 3 1<br />4 5 6  =&gt;  5 6 4<br /></span><span >7 8 9\\t 8 9 7</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k=2, mat=[[1, 2, 3]<br />\\t\\t     [4, 5, 6]<br />\\t\\t     [7, 8, 9]]\n<strong>Output: </strong>[[3, 1, 2]\n\\t   [6, 4, 5]\n\\t   [9, 7, 8]]\n<strong>Explanation:<span > </span></strong><span >After rotating the matrix looks like<br />1 2 3\\t 2 3 1\\t 3 1 2<br />4 5 6  =&gt;  5 6 4  =&gt;   6 4 5<br /></span></span><span >7 8 9\\t 8 9 7\\t 9 7 8</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n*m)<br /><strong>Expected Auxillary Space: </strong>O(n*m)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>1&lt;=k&lt;=10<sup>4</sup><strong><br /></strong></span><span style=\"font-size: 18px;\">1&lt;= mat.size(), mat[0].size, mat[i][j] &lt;=1000<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"box-sizing: border-box; line-height: 1.6rem; font-family: var(--gfg-font-primary); font-size: 14pt;\">Elements that go beyond the beginning of the row wrap around(i.e. taking the modulo) to the end of the row.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to rotate the matrix\n    vector<vector<int>> rotateMatrix(int k, vector<vector<int>> mat) {\n        // Creating a new matrix to store the rotated matrix\n        int n = mat.size();\n        int m = mat[0].size();\n        vector<vector<int>> ans(n, vector<int>(m));\n\n        // Taking modulo of k with m to handle cases where k exceeds m\n        k %= m;\n\n        // Iterating over rows and columns of the matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                // Calculating the new column index for the rotated element\n                int newCol = (j - k + m) % m;\n                // Assigning the element at i,j in the original matrix to ans[i][newCol]\n                ans[i][newCol] = mat[i][j];\n            }\n        }\n        // Returning the rotated matrix\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function template for java\n\nclass Solution {\n    // Function to rotate the given matrix by K columns\n    int[][] rotateMatrix(int k, int mat[][]) {\n        // Calculate the number of rows (n) and columns (m) from the matrix\n        int n = mat.length;\n        int m = mat[0].length;\n\n        // Create a new matrix to store the rotated matrix\n        int ans[][] = new int[n][m];\n\n        // Reduce k to a value within the range of m to avoid unnecessary rotations...\n        k %= m;\n\n        // Iterate through each element of the matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                // Calculate the new position for each element after rotation\n                ans[i][(j - k + m) % m] = mat[i][j];\n            }\n        }\n\n        // Return the rotated matrix\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to rotate the given matrix by K columns\n    def rotateMatrix(self, k, mat):\n        # Calculate the number of rows (n) and columns (m) from the matrix\n        n = len(mat)\n        m = len(mat[0])\n\n        # Create a new matrix to store the rotated matrix\n        ans = [[0] * m for _ in range(n)]\n\n        # Reduce k to a value within the range of m to avoid unnecessary rotations\n        k %= m\n\n        # Iterate through each element of the matrix\n        for i in range(n):\n            for j in range(m):\n                # Calculate the new position for each element after rotation\n                ans[i][(j - k + m) % m] = mat[i][j]\n\n        # Return the rotated matrix\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}