{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700174,
            "title": "Left View of Binary Tree",
            "titleSlug": "left-view-of-binary-tree",
            "content": "<p>You are given the <strong>root </strong>of a binary tree. Your task is to return the <em>left view</em> of the binary tree. The <em>left view</em> of a binary tree is the set of nodes visible when the tree is viewed from the left side.</p>\n<p>If the tree is empty, return an empty list.</p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>root[] = [1, 2, 3, 4, 5, N, N]\n<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/876845/Web/Other/blobid0_1731456264.png\" width=\"298\" height=\"261\" /></span>\n<strong>Output:</strong> [<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">1, 2, 4]<br /></span><strong>Explanation: </strong>From the left side of the tree, only the nodes 1, 2, and 4 are visible.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/876845/Web/Other/blobid1_1731456288.png\" width=\"285\" height=\"260\" /> </span></pre>\n<pre><span ><strong>Input: </strong>root[] = [1, 2, 3, N, N, 4, N, N, 5, N, N]<strong><br /></strong><strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/876845/Web/Other/blobid2_1731456332.png\" width=\"278\" height=\"332\" /></strong>\n<strong>Output: </strong>[1, 2, 4, 5]<br /><strong>Explanation: </strong>From the left side of the tree, the nodes 1, 2, 4, and 5 are visible.<strong><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/876845/Web/Other/blobid3_1731456373.png\" width=\"260\" height=\"302\" /><br /></strong></span></pre>\n<pre><span ><strong>Input:</strong> root[] = [N]\n<strong>Output: </strong>[]</span></pre>\n<p><span ><strong>Constraints:</strong><br />0 &lt;= number of nodes &lt;= 10<sup>6</sup><br />0 &lt;= node -&gt; data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary tree, return its left view. The left view consists of the set of nodes visible when the tree is observed from the left side. If the tree is empty, return an empty list.",
                "constraints": [
                    "0 <= number of nodes <= 10^6",
                    "0 <= node -> data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5, N, N]",
                        "output": "[1, 2, 4]",
                        "explanation": "From the left side, only nodes 1, 2, and 4 are visible."
                    },
                    {
                        "input": "[1, 2, 3, N, N, 4, N, N, 5, N, N]",
                        "output": "[1, 2, 4, 5]",
                        "explanation": "From the left side, nodes 1, 2, 4, and 5 are visible."
                    },
                    {
                        "input": "[N]",
                        "output": "[]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use level-order traversal and track the first node at each level to get the left view.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "flipkart",
            "accolite",
            "amazon",
            "oyo-rooms",
            "samsung",
            "snapdeal",
            "makemytrip",
            "ola-cabs",
            "adobe",
            "qualcomm",
            "twitter",
            "knowlarity",
            "open-solutions"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to get the left view of the binary tree.\n    void leftViewUtil(vector<int> &vec, Node *root, int level, int *max_level) {\n        // if root is null, we simply return.\n        if (root == NULL)\n            return;\n\n        // if this is the first node of its level then it is in the left view.\n        if (*max_level < level) {\n            // storing data of current node in list.\n            vec.push_back(root->data);\n            *max_level = level;\n        }\n\n        // calling function recursively for left and right subtrees of current node.\n        leftViewUtil(vec, root->left, level + 1, max_level);\n        leftViewUtil(vec, root->right, level + 1, max_level);\n    }\n\n    // Function to return a list containing elements of left view of the binary tree.\n    vector<int> leftView(Node *root) {\n        int max_level = 0;\n        vector<int> vec;\n        leftViewUtil(vec, root, 1, &max_level);\n        // returning the list.\n        return vec;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    int max_level = 0;\n\n    // Function to get the left view of the binary tree.\n    void leftViewUtil(ArrayList<Integer> result, Node root, int level) {\n        // if root is null, we simply return.\n        if (root == null) return;\n\n        // if this is the first root of its level then it is in the left view.\n        if (max_level < level) {\n            // storing data of current root in list.\n            result.add(root.data);\n            max_level = level;\n        }\n\n        // calling function recursively for left and right\n        // subtrees of current root.\n        leftViewUtil(result, root.left, level + 1);\n        leftViewUtil(result, root.right, level + 1);\n    }\n\n    // Function to return list containing elements of left view of binary tree.\n    ArrayList<Integer> leftView(Node root) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        leftViewUtil(result, root, 1);\n        // returning the list.\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Function to get the left view of the binary tree.\nclass Solution:\n\n    def leftViewUtil(self, result, root, level):\n        global max_level\n\n        #if root is null, we simply return.\n        if (root == None):\n            return\n\n        #if this is the first root of its level then it is in the left view.\n        if (max_level < level):\n            #storing data of current root in list.\n            result.append(root.data)\n            max_level = level\n\n        #calling function recursively for left and right subtrees of current root.\n        self.leftViewUtil(result, root.left, level + 1)\n        self.leftViewUtil(result, root.right, level + 1)\n\n    #Function to return a list containing elements of left view of the binary tree.\n    def LeftView(self, root):\n        global max_level\n        max_level = 0\n        result = []\n        self.leftViewUtil(result, root, 1)\n        #returning the list.\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\n// Definition of Node class is assumed to be provided as per the existing code context\nclass Solution {\n    // Complete this function\n    // Function to return a list containing elements of left view of the binary tree.\n    public List<int> LeftView(Node root) {\n        List<int> result = new List<int>();\n        int max_level = 0;\n        LeftViewUtil(result, root, 1, ref max_level);\n        // returning the list.\n        return result;\n    }\n\n    // Function to get the left view of the binary tree.\n    private void LeftViewUtil(List<int> result, Node root, int level,\n                              ref int max_level) {\n        // if root is null, we simply return.\n        if (root == null) return;\n\n        // if this is the first node of its level then it is in the left view.\n        if (max_level < level) {\n            // storing data of current node in list.\n            result.Add(root.data);\n            max_level = level;\n        }\n\n        // calling function recursively for left and right subtrees of current node.\n        LeftViewUtil(result, root.left, level + 1, ref max_level);\n        LeftViewUtil(result, root.right, level + 1, ref max_level);\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    leftViewUtil(result, root, level, max_level) {\n        // if root is null, we simply return.\n        if (root == null) {\n            return;\n        }\n\n        // if this is the last node of its level then it is in the right view.\n        if (max_level[0] < level) {\n            // storing data of current node in list.\n            result.push(root.data);\n            max_level[0] = level;\n        }\n\n        // calling function recursively for right and left\n        // subtrees of current node.\n        this.leftViewUtil(result, root.left, level + 1, max_level);\n        this.leftViewUtil(result, root.right, level + 1, max_level);\n    }\n\n    leftView(root) {\n        // your code here\n        let max_level = [ 0 ];\n        let result = [];\n        this.leftViewUtil(result, root, 1, max_level);\n        // returning the list.\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}