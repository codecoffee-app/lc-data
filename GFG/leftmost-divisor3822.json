{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705640,
            "title": "Leftmost Divisor",
            "titleSlug": "leftmost-divisor3822",
            "content": "<p><span style=\"font-size: 18px;\">For any two given positive integers p&nbsp;and q, find (if present) the leftmost digit in the number obtained by computing the exponent p<sup>q</sup>&nbsp; i.e. p&nbsp;raised to the power q, such that it is a divisor of p<sup>q</sup>.<br /><strong>Note: </strong>p<sup>q</sup><sup>&nbsp;</sup>may be a very huge number, so if the number of digits in p<sup>q</sup> is greater than 18, you need to extract the first 10 digits of the result and&nbsp; check if any digit of that number divides the number.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: p = 1, q = 1\n<strong>Output:</strong>&nbsp;1&nbsp;\n<strong>Explanation</strong>: 1 raised to the power 1 gives 1, \nwhich is a divisor of itself i.e. 1.</span>  \n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>p = 5, q = 2\n<strong>Output:&nbsp;</strong>5\n<strong>Explanation</strong>: The exponent 5 raised to the power 2 \ngives 25, wherein leftmost digit 2, does not \ndivide 25 but 5 does. Hence output is 5. \n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You dont need to read input or print anything. Complete the function <strong>leftMostDiv()&nbsp;</strong>which takes p&nbsp;and q&nbsp;as input parameter and returns&nbsp;the left-most digit in the number p<sup>q</sup>&nbsp;which is a divisor of p<sup>q</sup>. If no such digit exists, returns&nbsp;-1.<br /><br /><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)<br /><br /><strong>Constraints:</strong><br />1 &lt;= p&nbsp;, q&nbsp;&lt;=50</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two positive integers `p` and `q`, find the leftmost digit in the number obtained by computing `p` raised to the power of `q` (p<sup>q</sup>), such that this digit is a divisor of p<sup>q</sup>.  If p<sup>q</sup> has more than 18 digits, consider only the first 10 digits for finding a divisor.",
                "constraints": [
                    "1 <= p <= 50",
                    "1 <= q <= 50"
                ],
                "testcases": [
                    {
                        "input": "p = 1, q = 1",
                        "output": "1",
                        "explanation": "1 raised to the power of 1 equals 1.  Since 1 divides 1, the output is 1."
                    },
                    {
                        "input": "p = 5, q = 2",
                        "output": "5",
                        "explanation": "5 raised to the power of 2 equals 25. The leftmost digit, 2, does not divide 25. However, the rightmost digit, 5, does divide 25. Hence, the output is 5."
                    },
                    {
                        "input": "p = 2, q = 3",
                        "output": "8",
                        "explanation": "2 raised to the power of 3 equals 8. The leftmost digit 8, divides 8, so the output is 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>If the number of digits are less than or equal to 18, you can simple fit P<sup>Q</sup>&nbsp;in long long. Then just traverse the number from left to right to find any divisors. and if not then follow note and try to use&nbsp;q*(log10(p)).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Operators",
                "slug": "operators"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\nlong long power(long long a,long long b)\n{\n    if(a==1||b==0)\n    return 1;\n    else \n    {\n        if(b%2==0)\n        {\n            return power(a*a,b/2);\n        }\n        else\n        {\n            return a*power(a*a,(b-1)/2);\n        }\n        \n    }\n}\nint leftMostDiv(int p, int q){\n    bool flag=false;\n        int digits=1+floor(q*(log10(p)));\n        if(digits<=18)\n        {\n            long long n=power(p,q);\n            string number=to_string(n);\n            for(int i=0;i<number.length();i++)\n            {\n                if(number[i]=='0')\n                continue;\n                else\n                {\n                    if(n%(number[i]-'0')==0)\n                    {\n                        flag=true;\n                        return number[i]-'0';\n                        // break;\n                        \n                    }\n                }\n            }\n            if(flag==false)\n            return -1;\n        }\n        else\n        {\n            double answer=(double)q*(log10(p));\n           double  temp=((pow(10,answer-(int)answer))*pow(10,9));\n             long long first_ten=temp;\n             //  cout<<first_ten<<endl;\n               \n               string f_ten=to_string(first_ten);\n               \n               for(int i=0;i<f_ten.length();i++)\n                 {\n                if(f_ten[i]=='0')\n                continue;\n                else\n                {\n                    if(first_ten%(f_ten[i]-'0')==0)\n                    {\n                   //   cout<<fixed<<setprecision(10)<<\"DEBUG \"<<first_ten<<endl;\n                        flag=true;\n                        return f_ten[i]-'0';\n                        // break;\n                        \n                    }\n                }\n              }\n              if(flag==false)\n              return -1;\n               \n            \n            \n        }\n}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}