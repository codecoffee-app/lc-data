{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701276,
            "title": "Unit Area of largest region of 1's",
            "titleSlug": "length-of-largest-region-of-1s-1587115620",
            "content": "<p><span style=\"font-size:18px\">Given a grid of dimension <strong>n</strong>x<strong>m&nbsp;</strong>containing 0s and 1s. Find the unit area of the largest region of 1s.<br />\r\nRegion of 1&#39;s is a group of 1&#39;s connected 8-directionally (horizontally, vertically, diagonally).</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>grid = {{1,1,1,0},{0,0,1,0},{0,0,0,1}}\r\n<strong>Output: </strong>5\r\n<strong>Explanation: </strong>The grid is-\r\n<span style=\"color:#FF0000\">1 1 1</span> 0\r\n0 0 <span style=\"color:#FF0000\">1 </span>0\r\n0 0 0 <span style=\"color:#FF0000\">1\r\n</span>The largest region of 1&#39;s is colored\r\nin orange.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>grid = {{0,1}}\r\n<strong>Output: </strong>1\r\n<strong>Explanation: </strong>The grid is-\r\n0 <span style=\"color:#FF0000\">1\r\n</span>The largest region of 1&#39;s is colored in \r\norange.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anyhting. Your task is to complete the function&nbsp;<strong>findMaxArea()&nbsp;</strong>which takes grid as input parameter and returns the area of the largest region of 1&#39;s.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n*m)<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(n*m)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n, m &le; 500</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a grid of dimensions n x m containing 0s and 1s, find the area (number of cells) of the largest connected region of 1s. A region of 1s is defined as a group of 1s connected 8-directionally (horizontally, vertically, and diagonally).",
                "constraints": [
                    "1 <= n, m <= 500"
                ],
                "testcases": [
                    {
                        "input": "grid = {{1,1,1,0},{0,0,1,0},{0,0,0,1}}",
                        "output": "5",
                        "explanation": "The largest connected region of 1s consists of 5 cells, as indicated in the example."
                    },
                    {
                        "input": "grid = {{0,1}}",
                        "output": "1",
                        "explanation": "The largest connected region of 1s consists of a single cell."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "samsung",
            "ola-cabs",
            "google",
            "salesforce"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n    public:\r\n    \r\n    //these lists are used to get row and column numbers\r\n    //of 8 neighbours of a given cell.\r\n    vector<int>dx = {-1,1,0,0,1,1,-1,-1};\r\n    vector<int>dy = {0,0,-1,1,1,-1,1,-1};\r\n    \r\n    //Function to check whether the cell is within the matrix bounds.\r\n    bool isValid(int x, int y, int n, int m){\r\n        return (x >=0 and x < n and y >= 0 and y < m);\r\n    }\r\n    \r\n    //Function to find unit area of the largest region of 1s.\r\n    int findMaxArea(vector<vector<int>>& grid)\r\n    {\r\n        int ans = 0;\r\n        int n = grid.size();\r\n        int m = grid[0].size();\r\n        \r\n        //using queue to store the cell indexes which have grid value 1.\r\n        queue<pair<int, int>>q;\r\n        \r\n        //traversing all the cells of the matrix.\r\n        for(int i = 0; i < n; i++)\r\n        {\r\n            for(int j = 0; j < m; j++)\r\n            {\r\n                //if grid value is 1, we update the grid value as 0 \r\n\t\t\t    //and push the cell indexes into queue.\r\n                if(grid[i][j] == 1)\r\n                {\r\n                    grid[i][j] = 0;\r\n                    int cnt = 1;\r\n                    q.push({i,j});\r\n                    \r\n                    while(!q.empty())\r\n                    {\r\n                        //storing the cell indexes at top of \r\n                        //queue and popping them.\r\n                        int x = q.front().first;\r\n                        int y = q.front().second;\r\n                        q.pop();\r\n                        \r\n                        //iterating over the adjacent cells.\r\n                        for(int k = 0; k < 8; k++)\r\n                        {\r\n                            int n_x = x + dx[k];\r\n                            int n_y = y + dy[k];\r\n                            \r\n                            //if indexes are within range and grid value is 1,\r\n                            //we update the grid value as 0, increment counter \r\n\t\t\t                //and push the cell indexes into queue.\r\n                            if(isValid(n_x, n_y, n, m) and grid[n_x][n_y] == 1)\r\n                            {\r\n                                grid[n_x][n_y] = 0;\r\n                                cnt++;\r\n                                q.push({n_x, n_y});\r\n                            }\r\n                        }\r\n                    }\r\n                    //updating maximum area.\r\n                    ans = max(ans, cnt);\r\n                }\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end Complete function Template for JAVA\r\n\r\nclass Solution\r\n{\r\n    int count;\r\n    //Function to check if a given cell (row, col) can be included in DFS.\r\n    static boolean isSafe(int[][] M,int row,int col,boolean[][] visited,int ROW,int COL)\r\n    {\r\n        //if the cell is within the matrix bounds and value at cell is 1 and\r\n        //the cell is not visited, we return true else false.\r\n        return ((row >= 0)&&(row<ROW)&&(col>=0)&& (col < COL)\r\n                             && (M[row][col] == 1 && !visited[row][col]));\r\n    }\r\n\r\n    \r\n    void DFS(int[][] M,int row,int col,boolean[][] visited,int ROW,int COL)\r\n    {\r\n        //these arrays are used to get row and column numbers\r\n        //of 8 neighbours of a given cell.\r\n        int[] dx = { -1, -1, -1, 0, 0, 1, 1, 1 };\r\n        int[] dy = { -1, 0, 1, -1, 1, -1, 0, 1 };\r\n\r\n        //marking the current cell as visited.\r\n        visited[row][col] = true;\r\n\r\n        //iterating over the adjacent cells.\r\n        for (int k = 0; k < 8; k++) \r\n        {\r\n            //if cell indexes are within range, we increment the count\r\n            //and call the function recursively.\r\n            if (isSafe(M, row + dx[k], col + dy[k],visited, ROW, COL)) \r\n            {\r\n                count++;\r\n                DFS(M, row + dx[k], col + dy[k],visited, ROW, COL);\r\n            }\r\n        }\r\n    }\r\n    \r\n    //Function to find unit area of the largest region of 1s.\r\n    public int findMaxArea(int[][] grid)\r\n    {\r\n        int ROW = grid.length;\r\n        int COL = grid[0].length;\r\n        \r\n        //using boolean array to mark visited nodes.\r\n        boolean[][] visited = new boolean[ROW][COL];\r\n\r\n        int result = 0;\r\n        //traversing all the cells of the matrix.\r\n        for (int i = 0; i < ROW; i++) \r\n        {\r\n            for (int j = 0; j < COL; j++) \r\n            {\r\n                //if a cell has value 1 is not visited, we call DFS function.\r\n                if (grid[i][j] == 1 && !visited[i][j]) \r\n                {\r\n                    count = 1;\r\n                    DFS(grid, i, j, visited, ROW, COL);\r\n\r\n                    //updating maximum area.\r\n                    result = Math.max(result, count);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\r\n\r\nfrom collections import deque\r\nclass Solution:\r\n    \r\n    #Function to check whether the cell is within the matrix bounds.\r\n    def isValid(self, x, y, n, m):\r\n        return (x >= 0 and x < n and y >= 0 and y < m)\r\n    \r\n    \r\n    #Function to find unit area of the largest region of 1s.\r\n    def findMaxArea(self, grid):\r\n        n = len(grid)\r\n        m = len(grid[0])\r\n        \r\n        #these lists are used to get row and column numbers\r\n        #of 8 neighbours of a given cell.\r\n        dx = [-1,1,0,0,1,1,-1,-1]\r\n        dy = [0,0,1,-1,1,-1,1,-1]\r\n        \r\n        #queue to store the cell indexes which have grid value 1.\r\n        q = deque()\r\n        ans = 0\r\n        \r\n        #traversing all the cells of the matrix.\r\n        for i in range(n):\r\n            for j in range(m):\r\n                \r\n                #if grid value is 1, we update the grid value as 0 \r\n\t\t\t    #and push the cell indexes into queue.\r\n                if(grid[i][j] == 1):\r\n                    cnt =  1\r\n                    grid[i][j] =  0\r\n                    q.append([i,j])\r\n                    \r\n                    \r\n                    while(len(q)):\r\n                        \r\n                        #storing the cell indexes at top of \r\n                        #queue and popping them.\r\n                        cur = q.popleft()\r\n                        x = cur[0]\r\n                        y = cur[1]\r\n                        \r\n                        #iterating over the adjacent cells.\r\n                        for k in range(8):\r\n                            n_x = x + dx[k]\r\n                            n_y = y + dy[k]\r\n                            \r\n                            #if indexes are within range and grid value is 1,\r\n                            #we update the grid value as 0, increment counter \r\n\t\t\t                #and push the cell indexes into queue.\r\n                            if(self.isValid(n_x,n_y,n,m) and grid[n_x][n_y]==1):\r\n                                cnt = cnt + 1\r\n                                grid[n_x][n_y] = 0\r\n                                q.append([n_x, n_y])\r\n                                \r\n                    #updating maximum area.\r\n                    ans = max(ans, cnt)\r\n        \r\n        return ans\r\n        \r\n        \r\n        ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n\r\n/**\r\n * @param {number[][]} grid\r\n * @returns {number}\r\n*/\r\nclass Solution \r\n{\r\n    //Function to check whether the cell is within the matrix bounds.\r\n    isValid(x, y, n, m){\r\n        return (x >=0 && x < n && y >= 0 && y < m);\r\n    }\r\n    \r\n    //Function to find unit area of the largest region of 1s.\r\n    findMaxArea(grid)\r\n    {\r\n        //these lists are used to get row and column numbers\r\n        //of 8 neighbours of a given cell.\r\n        let dx = new Array(-1,1,0,0,1,1,-1,-1);\r\n        let dy = new Array(0,0,-1,1,1,-1,1,-1);\r\n        \r\n        let ans = 0;\r\n        let n = grid.length;\r\n        let m = grid[0].length;\r\n        \r\n        //queue to store the cell indexes which have grid value 1.\r\n        let q = new Array();\r\n        \r\n        //traversing all the cells of the matrix.\r\n        for(let i = 0; i < n; i++)\r\n        {\r\n            for(let j = 0; j < m; j++)\r\n            {\r\n                //if grid value is 1, we update the grid value as 0 \r\n\t\t\t    //and push the cell indexes into queue.\r\n                if(grid[i][j] == 1)\r\n                {\r\n                    grid[i][j] = 0;\r\n                    let cnt = 1;\r\n                    let tmp = new Array(i,j);\r\n                    q.push(tmp);\r\n                    \r\n                    while(q.length!=0)\r\n                    {\r\n                        //storing the cell indexes at front of \r\n                        //queue and popping them.\r\n                        let x =q[0][0];\r\n                        let y = q[0][1];\r\n                        q.shift();\r\n                        \r\n                        //iterating over the adjacent cells.\r\n                        for(let k = 0; k < 8; k++)\r\n                        {\r\n                            let n_x = x + dx[k];\r\n                            let n_y = y + dy[k];\r\n                            \r\n                            //if indexes are within range and grid value is 1,\r\n                            //we update the grid value as 0, increment counter \r\n\t\t\t                //and push the cell indexes into queue.\r\n                            if(this.isValid(n_x,n_y,n,m) && grid[n_x][n_y]==1)\r\n                            {\r\n                                grid[n_x][n_y] = 0;\r\n                                cnt++;\r\n                                let tmp = new Array(n_x,n_y);\r\n                                q.push(tmp);\r\n                            }\r\n                        }\r\n                    }\r\n                    //updating maximum area.\r\n                    ans = Math.max(ans, cnt);\r\n                }\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    private int[] dx = {-1, 1, 0, 0, 1, 1, -1, -1};\n    private int[] dy = {0, 0, -1, 1, 1, -1, 1, -1};\n\n    private bool IsValid(int x, int y, int n, int m)\n    {\n        return (x >= 0 && x < n && y >= 0 && y < m);\n    }\n\n    public int findMaxArea(int[][] grid)\n    {\n        int ans = 0;\n        int n = grid.Length;\n        int m = grid[0].Length;\n\n        Queue<(int, int)> q = new Queue<(int, int)>();\n\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < m; j++)\n            {\n                if (grid[i][j] == 1)\n                {\n                    grid[i][j] = 0;\n                    int cnt = 1;\n                    q.Enqueue((i, j));\n\n                    while (q.Count > 0)\n                    {\n                        int x = q.Peek().Item1;\n                        int y = q.Peek().Item2;\n                        q.Dequeue();\n\n                        for (int k = 0; k < 8; k++)\n                        {\n                            int n_x = x + dx[k];\n                            int n_y = y + dy[k];\n\n                            if (IsValid(n_x, n_y, n, m) && grid[n_x][n_y] == 1)\n                            {\n                                grid[n_x][n_y] = 0;\n                                cnt++;\n                                q.Enqueue((n_x, n_y));\n                            }\n                        }\n                    }\n                    ans = Math.Max(ans, cnt);\n                }\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}