{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703161,
            "title": "Length of Last word",
            "titleSlug": "length-of-last-word5721",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong> consisting of upper/lower-case alphabets and empty space characters &lsquo; &lsquo;. The string may contain spaces at the end. You will have return the length of last word which consists of alphabets only.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :<br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"Geeks for Geeks\"<strong>\nOutput: </strong>5\n<strong>Explanation: </strong>The last word is \"Geeks\" of length 5.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"Start Coding Here \"\n<strong>Output: </strong>4\n<strong>Explanation: </strong>The last word is \"Here\" of length 4.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>findLength()&nbsp;</strong>which takes a single argument(string s) and returns the length of last word of the string.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|s|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=|s|&lt;=100</span></p>\n<p><span style=\"font-size: 18px;\">|s| denotes the length of the string s.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of uppercase/lowercase alphabets and empty space characters ' '. The string may contain spaces at the end. Return the length of the last word, which consists of only alphabets.",
                "constraints": [
                    "1 <= |s| <= 100",
                    "|s| denotes the length of the string s."
                ],
                "testcases": [
                    {
                        "input": "Geeks for Geeks",
                        "output": "5",
                        "explanation": "The last word is \"Geeks\" which has a length of 5."
                    },
                    {
                        "input": "Start Coding Here ",
                        "output": "4",
                        "explanation": "The last word is \"Here\" which has a length of 4."
                    },
                    {
                        "input": "Hello World",
                        "output": "5",
                        "explanation": "The last word is \"World\" which has a length of 5."
                    },
                    {
                        "input": "   fly me   to   the moon  ",
                        "output": "4",
                        "explanation": "The last word is \"moon\" which has a length of 4."
                    },
                    {
                        "input": "luffy is still joyboy",
                        "output": "6",
                        "explanation": "The last word is \"joyboy\" which has a length of 6."
                    },
                    {
                        "input": "a",
                        "output": "1",
                        "explanation": "The last word is \"a\" which has a length of 1."
                    },
                    {
                        "input": " ",
                        "output": "0",
                        "explanation": "There are no words, so length is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>start iterating from the back of the string and find the length of the first word that occurs from there.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nint findLength(string str) \n{ \n\tint count = 0; \n\tbool flag = false; \n\tfor (int i = str.length() - 1; i >= 0; i--) { \n\t\t// Once the first character from last \n\t\t// is encountered, set char_flag to true. \n\t\tif ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')) { \n\t\t\tflag = true; \n\t\t\tcount++; \n\t\t} \n\t\t// When the first space after the \n\t\t// characters (from the last) is \n\t\t// encountered, return the length \n\t\t// of the last word \n\t\telse { \n\t\t\tif (flag == true) \n\t\t\t\treturn count; \n\t\t} \n\t} \n\treturn count; \n} \n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution \n{ \n    int findLength(String s) \n    { \n        int count = 0; \n        boolean flag = false; \n        for (int i = s.length() - 1; i >= 0; i--) { \n\t\t    // Once the first character from last \n\t\t    // is encountered, set char_flag to true. \n\t\t    if ((s.charAt(i) >= 'a' && s.charAt(i) <= 'z') || (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')) { \n\t\t\t    flag = true; \n\t\t\t    count++; \n\t\t    } \n\t\t    // When the first space after the \n\t\t    // characters (from the last) is \n\t\t    // encountered, return the length \n\t\t    // of the last word \n\t\t    else { \n\t\t\t    if (flag == true) \n\t\t\t\t    return count; \n\t\t    }     \n\t    } \n\t    return count;    \n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}