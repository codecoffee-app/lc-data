{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700461,
            "title": "Longest Palindrome in Linked List",
            "titleSlug": "length-of-longest-palindrome-in-linked-list",
            "content": "<p><span style=\"font-size: 12pt;\">Given a linked list, return an integer denoting the length of the longest palindrome list that exists in the given linked list.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input:&nbsp;</strong>Linked List: 2-&gt;3-&gt;7-&gt;3-&gt;2-&gt;12-&gt;24</span><br /><span style=\"font-size: 12pt;\"><strong>Output:</strong> 5</span><br /><span style=\"font-size: 12pt;\"><strong>Explanation: </strong>2 -&gt; 3 -&gt; 7 -&gt; 3 -&gt; 2 is the linked list whose nodes leads to a palindrome.</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input:&nbsp;</strong>Linked List: <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">12-&gt;4-&gt;4-&gt;3-&gt;14<br /></span><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700461/Web/Other/blobid1_1722778355.png\" width=\"400\" height=\"50\" /></span><br /><span style=\"font-size: 12pt;\"><strong>Output:</strong> 2<br /></span><strong style=\"font-size: 12pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 12pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">4 -&gt; 4 is the linked list whose nodes leads to a palindrome with length 2.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity: </strong>O(n<sup>2)</sup><strong><br />Expected Space Complexity:</strong> O(1)</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>4<br /></sup>1 &lt;= data of nodes &lt;= 10<sup>5</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, determine the length of the longest palindromic sublist within it.",
                "constraints": [
                    "1 <= number of nodes <= 10^4",
                    "1 <= data of nodes <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "Linked List: 2->3->7->3->2->12->24",
                        "output": "5",
                        "explanation": "The longest palindromic sublist is 2->3->7->3->2, which has a length of 5."
                    },
                    {
                        "input": "Linked List: 12->4->4->3->14",
                        "output": "2",
                        "explanation": "The longest palindromic sublist is 4->4, which has a length of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >We iterate through the given a linked list and one by one reverse every prefix of the linked list from the left.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "palindrome",
                "slug": "palindrome"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int countCommon(Node *a, Node *b) {\n        int count = 0;\n\n        // loop to count coomon in the list starting\n        // from node a and b\n        for (; a && b; a = a->next, b = b->next)\n\n            // increment the count for same values\n            if (a->data == b->data)\n                ++count;\n            else\n                break;\n\n        return count;\n    }\n\n    // Returns length of the longest palindrome\n    // sublist in given list\n    int maxPalindrome(Node *head) {\n        int result = 0;\n        Node *prev = NULL, *curr = head;\n\n        // loop till the end of the linked list\n        while (curr) {\n            // The sublist from head to current\n            // reversed.\n            Node *next = curr->next;\n            curr->next = prev;\n\n            // check for odd length palindrome\n            // by finding longest common list elements\n            // beginning from prev and from next (We\n            // exclude curr)\n            result = max(result, 2 * countCommon(prev, next) + 1);\n\n            // check for even length palindrome\n            // by finding longest common list elements\n            // beginning from curr and from next\n            result = max(result, 2 * countCommon(curr, next));\n\n            // update prev and curr for next iteration\n            prev = curr;\n            curr = next;\n        }\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to count the number of common elements in two linked lists\n    public static int countCommon(Node a, Node b) {\n        int count = 0;\n        // iterate over both linked lists until one of them reaches the end\n        for (; a != null && b != null; a = a.next, b = b.next) {\n            // if the data of the current nodes is equal, increase the count\n            if (a.data == b.data) {\n                ++count;\n            } else {\n                break; // if data is not equal, break the loop\n            }\n        }\n        return count; // return the count of common elements\n    }\n\n    // Function to find the maximum length of palindrome in a linked list\n    public static int maxPalindrome(Node head) {\n        int result = 0;\n        Node prev = null; // initialize previous node as null\n        Node curr = head; // initialize current node as the head of the linked list\n\n        // iterate over the linked list\n        while (curr != null) {\n            Node next = curr.next; // store the next node of current node\n            curr.next = prev;      // reverse the link of current node to previous node\n\n            // calculate the maximum length of palindrome by comparing count of common\n            // elements between previous and next nodes, and between current and next\n            // nodes\n            result = Math.max(result, 2 * countCommon(prev, next) + 1);\n            result = Math.max(result, 2 * countCommon(curr, next));\n\n            prev = curr; // update previous node as current node\n            curr = next; // update current node as next node\n        }\n\n        return result; // return the maximum length of palindrome\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxPalindrome(self, head):\n\n        # Function to find the common elements between two linked lists\n        def common(a, b):\n            cnt = 0\n            while (a and b):\n                if (a.data == b.data):\n                    cnt += 1\n                else:\n                    break\n                a = a.next\n                b = b.next\n            return cnt\n\n        res = 0\n        curr = head\n        prev = None\n\n        # Reversing the linked list\n        while (curr):\n            next = curr.next\n            curr.next = prev\n\n            # Updating the maximum palindrome length\n            res = max(res, 2 * common(prev, next) + 1)\n            res = max(res, 2 * common(curr, next))\n\n            # Moving to the next elements\n            prev = curr\n            curr = next\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    countCommon(a, b) {\n        let count = 0;\n\n        // loop to count coomon in the list starting from a and b\n        for (; a && b; a = a.next, b = b.next) {\n            // increment the count for same values\n            if (a.data === b.data)\n                ++count;\n            else\n                break;\n        }\n\n        return count;\n    }\n\n    /* Should return length of the longest palindrome linked list are can form */\n    maxPalindrome(node) {\n        let result = 0;\n        let prev = null;\n        let curr = node;\n\n        // loop till the end of the linked list\n        while (curr) {\n            // The sublist from head to current reversed.\n            let next = curr.next;\n            curr.next = prev;\n\n            // check for odd length palindrome\n            // by finding longest common list elements\n            // beginning from prev and from next (We exclude curr)\n            result = Math.max(result, 2 * this.countCommon(prev, next) + 1);\n\n            // check for even length palindrome\n            // by finding longest common list elements\n            // beginning from curr and from next\n            result = Math.max(result, 2 * this.countCommon(curr, next));\n\n            // update prev and curr for next iteration\n            prev = curr;\n            curr = next;\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}