{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703381,
            "title": "Length of longest subarray",
            "titleSlug": "length-of-longest-subarray0440",
            "content": "<p><span >Given an array <strong>arr[]</strong>, return the length of the longest subarray of non-negative integers.</span><br /><span >Note:<strong> </strong>Subarray here means a continuous part of the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 3, 4, -1, -2, 1, 5, 6, 3]\n<strong>Output: </strong>4\n<strong>Explanation: </strong>The subarray [ 1, 5, 6, 3] has longest length 4 and contains no negative integers</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 0, 0, 1, -1, -1, 0, 0, 1, 0]\n<strong>Output: </strong>4\n<strong>Explanation: </strong>Subarrays [1, 0, 0, 1] and [0, 0, 1, 0] have equal lengths but sum of first one is greater so that will be the output.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />-10<sup>6&nbsp;</sup>&lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the length of the longest subarray containing only non-negative integers.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "-10^6 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2, 3, 4, -1, -2, 1, 5, 6, 3]",
                        "output": "4",
                        "explanation": "The longest subarray of non-negative integers is [1, 5, 6, 3], which has a length of 4."
                    },
                    {
                        "input": "[1, 0, 0, 1, -1, -1, 0, 0, 1, 0]",
                        "output": "4",
                        "explanation": "Both subarrays [1, 0, 0, 1] and [0, 0, 1, 0] have a length of 4, but the problem statement doesn't specify what to do in case of ties, the testcase implies returning any of the valid lengths is correct."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a loop to traverse the array, count consecutive non-negative integers, and update the maximum count when a negative element is encountered.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n    /* Function that returns the longest subarray\n       of non-negative integers */\n  public:\n    int longestSubarry(vector<int>& arr) {\n        int res = 0; // Initialize result\n        int n = arr.size();\n        // Traverse array\n        for (int i = 0; i < n; i++) {\n            // Count of current non-negative integers\n            int curr_count = 0;\n            while (i < n && arr[i] >= 0) {\n                curr_count++;\n                i++;\n            }\n\n            // Update result if required.\n            res = max(res, curr_count);\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function that returns the longest subarray of non-negative integers\n    public int longestSubarray(int arr[]) {\n        int res = 0; // Initialize result\n        int n = arr.length;\n\n        // Traverse the array\n        for (int i = 0; i < n; i++) {\n            // Count of current non-negative integers\n            int currCount = 0;\n\n            // Continue counting as long as the current element is non-negative\n            while (i < n && arr[i] >= 0) {\n                currCount++;\n                i++;\n            }\n\n            // Update result if required\n            res = Math.max(res, currCount);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def longestSubarray(self, arr):\n        res = 0  # Initialize result\n        n = len(arr)\n\n        i = 0\n        while i < n:\n            # Count of current non-negative integers\n            curr_count = 0\n\n            # Continue counting as long as the current element is non-negative\n            while i < n and arr[i] >= 0:\n                curr_count += 1\n                i += 1\n\n            # Update result if required\n            res = max(res, curr_count)\n\n            # Move to the next element to start a new subarray\n            i += 1\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    longestSubarray(arr) {\n        let res = 0; // Initialize result\n        let n = arr.length;\n\n        let i = 0;\n        while (i < n) {\n            // Count of current non-negative integers\n            let currCount = 0;\n\n            // Continue counting as long as the current element is non-negative\n            while (i < n && arr[i] >= 0) {\n                currCount++;\n                i++;\n            }\n\n            // Update result if required\n            res = Math.max(res, currCount);\n\n            // Move to the next element to start a new subarray\n            i++;\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}