{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713586,
            "title": "Length of the longest subarray with positive product",
            "titleSlug": "length-of-the-longest-subarray-with-positive-product--170646",
            "content": "<p><span style=\"font-size:18px\">Given an array&nbsp;<strong>arr[]</strong>&nbsp;consisting of <strong>n</strong>&nbsp;integers</span><span style=\"font-size:18px\">, find&nbsp;the length&nbsp;of the longest subarray with&nbsp;<strong>positive (non zero) product</strong>.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>arr[] ={0, 1, -2, -3, -4} </span>\r\n<span style=\"font-size:18px\"><strong>Output:\r\n</strong>3</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong> \r\nThe longest subarray with positive product is: \r\n{1, -2, -3}.</span><span style=\"font-size:18px\">Therefore, the required length is 3.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>arr[]={-1, -2, 0, 1, 2}\r\n<strong>Output:\r\n</strong>2\r\n<strong>Explanation:</strong>\r\nThe longest subarray with positive products \r\nare: {-1, -2}, {1, 2}. Therefore, the required \r\nlength is 2.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;</strong>This is a function problem. You don&#39;t need to take any input, as it is already accomplished by the driver code. You just need to complete the function&nbsp;<strong>maxLength</strong>() that takes array<strong>&nbsp;arr[],&nbsp;</strong>and an integer<strong>&nbsp;n</strong>&nbsp;as parameters and return the length of the longest subarray where the product of all of its element is positive.&nbsp;</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(n).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Constraints:</strong></span></div>\r\n\r\n<div><span style=\"font-size:18px\">&nbsp;1&lt;=n&lt;=10<sup>5</sup></span></div>\r\n\r\n<div><span style=\"font-size:18px\">-10<sup>9</sup>&lt;=arr[i]&lt;=10<sup>9</sup></span><br />\r\n&nbsp;</div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of `n` integers, find the length of the longest subarray with a positive (non-zero) product.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "-10^9 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[0, 1, -2, -3, -4]",
                        "output": "3",
                        "explanation": "The longest subarray with a positive product is {1, -2, -3}, which has a length of 3."
                    },
                    {
                        "input": "[-1, -2, 0, 1, 2]",
                        "output": "2",
                        "explanation": "The longest subarrays with positive products are {-1, -2} and {1, 2}, each with a length of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A subarray with positive product cannot contain any zero.</span></p>",
            "<p><span style=\"font-size:18px\">A sub-array with positive product has no&nbsp;or even number of negative numbers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n    public:\n        //Function to find the maximum length of subarray with non-negative integers.\n        int maxLength(vector<int> &arr,int n){\n            int pos = 0,neg = 0,ans = 0;\n\n            //iterating over the array.\n            for(int i = 0;i<n;i++){\n\n                //if current element is 0, reset pos and neg counters.\n                if(arr[i]==0){\n                    pos = 0;\n                    neg = 0;\n                } \n                //if current element is positive, increment pos counter.\n                else if (arr[i] > 0){\n                    pos+=1;\n\n                    //if neg counter is positive, increment neg counter as well.\n                    if(neg > 0){\n                        neg+=1;\n                    }\n                } \n                //if current element is negative,\n                else if(arr[i]<0){\n                    //store pos counter value in temp variable.\n                    int temp = pos;\n\n                    //if neg counter is positive, update pos counter as 1 + neg counter.\n                    if(neg > 0){\n                        pos = 1+neg;\n                    } \n                    //else set pos counter to 0.\n                    else {\n                        pos = 0;\n                    }\n\n                    //update neg counter as 1 + temp.\n                    neg = 1 + temp;\n                }\n                \n                //update ans to maximum of ans and pos counter value.\n                ans = max(ans,pos);\n            }\n            \n            //return the maximum length of subarray with non-negative integers.\n            return ans;\n        }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    /* Function to return the length of the\r\n       longest subarray with ppositive product */\r\n    int maxLength(int arr[], int n) { \r\n        int pos = 0,neg = 0,ans = 0;\r\n        for(int i = 0;i<n;i++){\r\n            if(arr[i]==0){\r\n                // If current element is 0, reset positive and negative counters to 0\r\n                pos = 0;\r\n                neg = 0;\r\n            } else if (arr[i] > 0){\r\n                // If current element is positive, increment positive counter\r\n                pos+=1;\r\n                if(neg > 0){\r\n                    // If negative counter is non-zero, increment it as well\r\n                    neg+=1;\r\n                }\r\n            } else if(arr[i]<0){\r\n                // If current element is negative, swap positive and negative counters\r\n                int temp = pos;\r\n                if(neg > 0){\r\n                    pos = 1+neg;\r\n                    // If negative counter is non-zero, increment positive counter by one more than it\r\n                } else {\r\n                    pos = 0;\r\n                }\r\n                neg = 1 + temp;\r\n                // Increment negative counter by 1\r\n            }\r\n            ans = Math.max(ans,pos);\r\n            // Update ans with the maximum value of positive counter encountered so far\r\n        }\r\n        return ans;\r\n    }\r\n   \r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to find the maximum length of subarray with consecutive elements.\r\n    def maxLength(self,arr,n):\r\n        #Initializing variables\r\n        pos = 0  #Number of positive elements in current subarray\r\n        neg = 0  #Number of negative elements in current subarray\r\n        ans = 0  #Answer, representing the maximum length of subarray\r\n        \r\n        #Iterating over the array\r\n        for i in range(n):\r\n            #If current element is 0, reset positive and negative counts\r\n            if arr[i] == 0:\r\n                pos,neg = 0,0\r\n            #If current element is positive, increment positive count and update negative count if needed\r\n            elif arr[i] > 0 :\r\n                pos+=1\r\n                if neg > 0:\r\n                    neg+=1\r\n            #If current element is negative, update positive count and negative count\r\n            else:\r\n                temp = pos\r\n                if neg > 0:\r\n                    pos = neg + 1\r\n                else:\r\n                    pos = 0\r\n                neg = temp + 1\r\n            #Update the answer with the maximum length of subarray\r\n            ans = max(ans,pos)\r\n        #Return the maximum length of subarray\r\n        return ans",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to find the length of the longest subarray\n    //with distinct elements.\n    maxLength(arr, n)\n    {\n        let pos = 0;  //Number of positive elements in current subarray\n        let neg = 0;  //Number of negative elements in current subarray\n        let ans = 0;  //Answer, representing the maximum length of subarray\n        \n        //Iterating over the array\n        for (let i = 0; i < n; i++) {\n            //If current element is 0, reset positive and negative counts\n            if (arr[i] === 0) {\n                pos = 0;\n                neg = 0;\n            }\n            //If current element is positive, increment positive count and update negative count if needed\n            else if (arr[i] > 0) {\n                pos++;\n                if (neg > 0) {\n                    neg++;\n                }\n            }\n            //If current element is negative, update positive count and negative count\n            else {\n                let temp = pos;\n                if (neg > 0) {\n                    pos = neg + 1;\n                } else {\n                    pos = 0;\n                }\n                neg = temp + 1;\n            }\n            //Update the answer with the maximum length of subarray\n            ans = Math.max(ans, pos);\n        }\n        //Return the maximum length of subarray\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}