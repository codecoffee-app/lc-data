{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703172,
            "title": "Length of the longest substring",
            "titleSlug": "length-of-the-longest-substring3036",
            "content": "<p><span >Given a string <strong>s</strong>, find the length of the longest substring without repeating characters. <br /><br /><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"geeksforgeeks\"<strong>\nOutput: </strong>7\n<strong>Explanation: </strong>Longest substring is \"eksforg\".</span></pre>\n<pre><span ><strong>Input: </strong>s = \"abdefgabef\"\n<strong>Output: </strong>6\n<strong>Explanation: </strong>Longest substring are \"abdefg\" , \"bdefga\" and \"defgab\".</span></pre>\n<pre><span ><strong>Input: </strong>s = \"aaaaa\"<strong>\nOutput: </strong>1\n<strong>Explanation: </strong>Longest substring is \"a\".</span></pre>\n<div><span ><strong>Constraints:</strong><br />1 &le; s.size() &le; 10<sup>5</sup></span></div>\n<div><span >It is guaranteed that all characters of the String s will be lowercase letters from <strong>'a'</strong> to <strong>'z'</strong></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, determine the length of the longest substring that contains no repeating characters.",
                "constraints": [
                    "1 <= s.size() <= 10^5",
                    "All characters of the string s will be lowercase letters from 'a' to 'z'"
                ],
                "testcases": [
                    {
                        "input": "geeksforgeeks",
                        "output": "7",
                        "explanation": "The longest substring without repeating characters is 'eksforg', which has a length of 7."
                    },
                    {
                        "input": "abdefgabef",
                        "output": "6",
                        "explanation": "The longest substrings without repeating characters are 'abdefg', 'bdefga', and 'defgab', all having a length of 6."
                    },
                    {
                        "input": "aaaaa",
                        "output": "1",
                        "explanation": "The longest substring without repeating characters is 'a', which has a length of 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Scan the string from left to right, keep track of the maximum length of non repeating character substring seen so far in a temporary variable.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft",
            "google",
            "synopsys"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int longestUniqueSubstring(string &s) {\n        int n = s.length();\n        int cur_len = 1; // lenght of current subsing\n        int max_len = 1; // result\n        int prev_index;  //  previous index\n        int i;\n        int visited[26];\n\n        for (i = 0; i < 26; i++)\n            visited[i] = -1;\n        visited[s[0] - 'a'] = 0;\n\n        for (i = 1; i < n; i++) {\n            prev_index = visited[s[i] - 'a'];\n\n            if (prev_index == -1 || i - cur_len > prev_index)\n                cur_len++;\n\n            else {\n                if (cur_len > max_len)\n                    max_len = cur_len;\n\n                cur_len = i - prev_index;\n            }\n\n            visited[s[i] - 'a'] = i;\n        }\n\n        if (cur_len > max_len)\n            max_len = cur_len;\n        return max_len;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int longestUniqueSubstring(String s) {\n        int n = s.length();\n        int cur_len = 1; // lenght of current subsing\n        int max_len = 1; // result\n        int prev_index;  //  previous index\n        int i;\n        int visited[] = new int[26];\n\n        for (i = 0; i < 26; i++) visited[i] = -1;\n\n        visited[s.charAt(0) - 'a'] = 0;\n\n        for (i = 1; i < n; i++) {\n            prev_index = visited[s.charAt(i) - 'a'];\n\n            if (prev_index == -1 || i - cur_len > prev_index)\n                cur_len++;\n\n            else {\n                if (cur_len > max_len) max_len = cur_len;\n\n                cur_len = i - prev_index;\n            }\n\n            visited[s.charAt(i) - 'a'] = i;\n        }\n\n        if (cur_len > max_len) max_len = cur_len;\n\n        return max_len;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to find the length of the longest substring with unique characters\n    def longestUniqueSubstring(self, s):\n        # Getting the length of the input string\n        n = len(s)\n\n        # Variable to store the current length of unique substring\n        cur_len = 0  # It should start from 0 to count the substring length\n\n        # Variable to store the maximum length of unique substring\n        max_len = 0  # Also starting from 0\n\n        # Dictionary to store the visited characters and their indices\n        visited = {}\n\n        # Iterate through the string\n        for i in range(n):\n            # If the current character was seen previously and is part of the current substring\n            if s[i] in visited and i - cur_len <= visited[s[i]]:\n                # If it was part of the current window, update cur_len and start a new window\n                cur_len = i - visited[s[i]]\n            else:\n                # Else, increase the current length\n                cur_len += 1\n\n            # Update the last index of the current character\n            visited[s[i]] = i\n\n            # Update max_len if needed\n            if cur_len > max_len:\n                max_len = cur_len\n\n        # Return the maximum length of the unique substring\n        return max_len\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "/**\n * @param {sing} s\n * @returns {number}\n */\nclass Solution {\n    longestUniqueSubstring(s) {\n        let n = s.length;\n        let cur_len = 1; // length of current subsing\n        let max_len = 1; // result\n        let prev_index;  // previous index\n        let visited = [];\n\n        for (let i = 0; i < 26; i++) {\n            visited[i] = -1;\n        }\n\n        visited[s[0].charCodeAt(0) - 'a'.charCodeAt(0)] = 0;\n\n        for (let i = 1; i < n; i++) {\n            prev_index = visited[s[i].charCodeAt(0) - 'a'.charCodeAt(0)];\n\n            if (prev_index === -1 || i - cur_len > prev_index) {\n                cur_len++;\n            } else {\n                if (cur_len > max_len) {\n                    max_len = cur_len;\n                }\n\n                cur_len = i - prev_index;\n            }\n\n            visited[s[i].charCodeAt(0) - 'a'.charCodeAt(0)] = i;\n        }\n\n        if (cur_len > max_len) {\n            max_len = cur_len;\n        }\n\n        return max_len;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}