{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703126,
            "title": "Sort Unsorted Subarray",
            "titleSlug": "length-unsorted-subarray3022",
            "content": "<p><span style=\"font-size: 18px;\">Given an unsorted array <strong>arr[]</strong>. Find the subarray a<strong>rr[s...e]</strong> such that sorting this subarray makes the whole array sorted.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note:&nbsp;</span></strong><span style=\"font-size: 18px;\">If the given array is already sorted then return <strong>[0, 0]</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60]\n<strong>Output: </strong>[3, 8]\n<strong>Explanation:</strong> Sorting subarray starting from index 3 and ending at index 8 results in sorted array. Initial array: [10, 12, 20, <strong>30, 25, 40, 32, 31, 35,</strong> 50, 60], Final array: [10, 12, 20, <strong>25, 30, 31, 32, 35, 40,</strong> 50, 60](After sorting the bold part).</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 1, 15, 25, 6, 7, 30, 40, 50]\n<strong>Output:</strong> [2, 5]\n<strong>Explanation:</strong> Sorting subarray starting from index 2 and ending at index 5 results in sorted array. Initial array: [0, 1, <strong>15, 25, 6, 7,</strong> 30, 40, 50], Final array: [0, 1, <strong>6, 7, 15, 25,</strong> 30, 40, 50](After sorting the bold part).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 2*10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array `arr[]`, find the subarray `arr[s...e]` such that sorting this subarray makes the entire array sorted. If the given array is already sorted, return `[0, 0]`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 2*10^6"
                ],
                "testcases": [
                    {
                        "input": "[10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60]",
                        "output": "[3, 8]",
                        "explanation": "Sorting the subarray from index 3 to 8 ([30, 25, 40, 32, 31, 35]) results in a sorted array. The sorted subarray becomes [25, 30, 31, 32, 35, 40], and the entire array is [10, 12, 20, 25, 30, 31, 32, 35, 40, 50, 60]."
                    },
                    {
                        "input": "[0, 1, 15, 25, 6, 7, 30, 40, 50]",
                        "output": "[2, 5]",
                        "explanation": "Sorting the subarray from index 2 to 5 ([15, 25, 6, 7]) results in a sorted array. The sorted subarray becomes [6, 7, 15, 25], and the entire array is [0, 1, 6, 7, 15, 25, 30, 40, 50]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Assume that <strong>arr[i] ... arr[j]</strong> is the desired subarray. Then, we know that the subarrays <strong>arr[0] ... arr[i-1]</strong> and <strong>arr[j+1] ... arr[n-1]</strong> are sorted in increasing order.</p>\n<p>Doing this, we have divided the complete array into 3 subarrays, Can you relate the min/max of the first 2 subarrays and the min/max of the last 2 subarrays? We basically need to minimize the length of the subarray <strong>arr[i] ... arr[j]</strong>.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "microsoft",
            "makemytrip",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution {\n  public:\n    vector<int> printUnsorted(vector<int>& arr) {\n        int n = arr.size();\n        int s = 0, e = n - 1, i, max, min;\n\n        // Step 1(a) of above algorithm\n        for (s = 0; s < n - 1; s++) {\n            if (arr[s] > arr[s + 1])\n                break;\n        }\n        if (s == n - 1) {\n            return {0, 0};\n        }\n\n        // Step 1(b) of above algorithm\n        for (e = n - 1; e > 0; e--) {\n            if (arr[e] < arr[e - 1])\n                break;\n        }\n\n        // Step 2(a) of above algorithm\n        max = arr[s];\n        min = arr[s];\n        for (i = s + 1; i <= e; i++) {\n            if (arr[i] > max)\n                max = arr[i];\n            if (arr[i] < min)\n                min = arr[i];\n        }\n\n        // Step 2(b) of above algorithm\n        for (i = 0; i < s; i++) {\n            if (arr[i] > min) {\n                s = i;\n                break;\n            }\n        }\n\n        // Step 2(c) of above algorithm\n        for (i = n - 1; i >= e + 1; i--) {\n            if (arr[i] < max) {\n                e = i;\n                break;\n            }\n        }\n\n        // Step 3 of above algorithm\n        return {s, e};\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int[] printUnsorted(int[] arr) {\n        int n = arr.length;\n        int s = 0, e = n - 1;\n\n        // Step 1(a)\n        for (s = 0; s < n - 1; s++) {\n            if (arr[s] > arr[s + 1]) break;\n        }\n        if (s == n - 1) {\n            return new int[] {0, 0};\n        }\n\n        // Step 1(b)\n        for (e = n - 1; e > 0; e--) {\n            if (arr[e] < arr[e - 1]) break;\n        }\n\n        // Step 2(a)\n        int max = arr[s];\n        int min = arr[s];\n        for (int i = s + 1; i <= e; i++) {\n            if (arr[i] > max) max = arr[i];\n            if (arr[i] < min) min = arr[i];\n        }\n\n        // Step 2(b)\n        for (int i = 0; i < s; i++) {\n            if (arr[i] > min) {\n                s = i;\n                break;\n            }\n        }\n\n        // Step 2(c)\n        for (int i = n - 1; i >= e + 1; i--) {\n            if (arr[i] < max) {\n                e = i;\n                break;\n            }\n        }\n\n        return new int[] {s, e};\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def printUnsorted(self, arr):\n        n = len(arr)\n        s = 0\n        e = n - 1\n\n        # Step 1(a)\n        for s in range(n - 1):\n            if arr[s] > arr[s + 1]:\n                break\n        if s == n - 1:\n            return [0, 0]\n\n        # Step 1(b)\n        for e in range(n - 1, 0, -1):\n            if arr[e] < arr[e - 1]:\n                break\n\n        # Step 2(a)\n        max_val = arr[s]\n        min_val = arr[s]\n        for i in range(s + 1, e + 1):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if arr[i] < min_val:\n                min_val = arr[i]\n\n        # Step 2(b)\n        for i in range(s):\n            if arr[i] > min_val:\n                s = i\n                break\n\n        # Step 2(c)\n        for i in range(n - 1, e, -1):\n            if arr[i] < max_val:\n                e = i\n                break\n\n        return [s, e]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    printUnsorted(arr) {\n        const n = arr.length;\n        let s = 0;\n        let e = n - 1;\n\n        // Step 1(a)\n        for (s = 0; s < n - 1; s++) {\n            if (arr[s] > arr[s + 1]) break;\n        }\n        if (s === n - 1) {\n            return [ 0, 0 ];\n        }\n\n        // Step 1(b)\n        for (e = n - 1; e > 0; e--) {\n            if (arr[e] < arr[e - 1]) break;\n        }\n\n        // Step 2(a)\n        let maxVal = arr[s];\n        let minVal = arr[s];\n        for (let i = s + 1; i <= e; i++) {\n            if (arr[i] > maxVal) maxVal = arr[i];\n            if (arr[i] < minVal) minVal = arr[i];\n        }\n\n        // Step 2(b)\n        for (let i = 0; i < s; i++) {\n            if (arr[i] > minVal) {\n                s = i;\n                break;\n            }\n        }\n\n        // Step 2(c)\n        for (let i = n - 1; i >= e + 1; i--) {\n            if (arr[i] < maxVal) {\n                e = i;\n                break;\n            }\n        }\n\n        return [ s, e ];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}