{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705286,
            "title": "Let's Go Shopping!",
            "titleSlug": "lets-go-shopping4621",
            "content": "<p><span style=\"font-size: 18px;\">A person visits a merchandise&nbsp;showroom and sees 5 items available, T-shirts - Rs 1000, bags- Rs 2000, Jackets - Rs 3000, Ball - Rs 4000 , Shoes - Rs 5000. All items of same type are priced the same and there are at least 100 pieces of every item available. Also there was an offer&nbsp;buy 2 get 1&nbsp;free on same item. So, he decided to buy some stuff, but he had only one condition that number of items he takes home should be minimum.</span></p>\n<p>Note - You've to spend all of yours money.</p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 22000\n<strong>Output:</strong>&nbsp;6&nbsp;\n<strong>Explanation</strong>: For Rs 22000 he will buy 1 ball \nfor 4000, 1 jacket for 3000 &amp; 3 shoes for \n15000 and he will get 1 extra pair of \nshoes free. On total making it 6 items.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3500\n<strong>Output:&nbsp;</strong>-1\n<strong>Explanation</strong>: Impossible to use full\namount of 3500.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You dont need to read input or print anything. Complete the function <strong>minimumItem()&nbsp;</strong>which takes n&nbsp;as input parameter and returns minimum number of item you can purchase in total money you have. If it is impossible to use full amount return -1.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(logn)<br /><strong>Expected Auxiliary Space:</strong> O(1)<br /><br /><strong>Constraints:</strong><br />1&lt;= n&nbsp;&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A person visits a merchandise showroom with 5 items available: T-shirts (Rs 1000), bags (Rs 2000), jackets (Rs 3000), balls (Rs 4000), and shoes (Rs 5000). All items of the same type have the same price, and there are at least 100 pieces of each item. There's also a 'buy 2 get 1 free' offer on the same item. The person wants to buy items such that the total number of items taken home is minimized, while spending all the money.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "22000",
                        "output": "6",
                        "explanation": "To spend Rs 22000, the person can buy 1 ball (Rs 4000), 1 jacket (Rs 3000), and 3 shoes (Rs 15000). With the 'buy 2 get 1 free' offer on shoes, buying 2 shoes gets 1 free, effectively buying 3 pairs with payment of 2. Therefore total items becomes 1 + 1 + (2+1) = 6."
                    },
                    {
                        "input": "3500",
                        "output": "-1",
                        "explanation": "It is impossible to spend exactly Rs 3500 using the available items and the given offer."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Math.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n    // Function to find the minimum number of items needed based on the given conditions.\r\n    int minimumItem(int n){\r\n        int x=5000,a,b=0;\r\n        \r\n        // Checking if the input falls within the given range and is divisible by 1000.\r\n        if(n%1000==0&&n>0&&n<500001){\r\n            \r\n            // Iterating until the input is reduced to 0.\r\n            while(n!=0){\r\n                \r\n                // Calculating the number of times the current denomination can be used.\r\n                a=int(n/x);\r\n                \r\n                // Adjusting the number of times the current denomination is used for even values.\r\n                if(a%2==0&&a!=0)\r\n                    a--;\r\n                \r\n                // Updating the remaining amount by subtracting the current denomination.\r\n                n=n-a*x;\r\n                \r\n                // Calculating the total number of items used.\r\n                a=int(a/2)+a;\r\n                x=x-1000;\r\n                b=b+a;\r\n            }\r\n            return b;\r\n        }\r\n        else \r\n            return -1;;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    //Function to get the minimum element from the array.\n    public int minimumItem(int n)\n    {\n        int x=5000,a,b=0;\n\n        // Checking if the input falls within the given range and is divisible by 1000.\n        if(n%1000==0&&n>0&&n<500001)\n        {\n            \n            // Iterating until the input is reduced to 0.\n            while(n!=0)\n            {\n                \n                // Calculating the number of times the current denomination can be used.\n                a=n/x;\n                \n                // Adjusting the number of times the current denomination is used for even values.\n                if(a%2==0&&a!=0)\n                    a--;\n                \n                // Updating the remaining amount by subtracting the current denomination.\n                n=n-a*x;\n                \n                // Calculating the total number of items used.\n                a=a/2+a;\n                x=x-1000;\n                b=b+a;\n            }\n            return b;\n        }\n        else \n            return -1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}