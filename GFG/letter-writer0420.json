{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704698,
            "title": "Letter Writer ",
            "titleSlug": "letter-writer0420",
            "content": "<p><span style=\"font-size:18px\">Geek works at the post office and he writes the following types of letters.</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\"><strong>Corporate Letters: </strong>12 letters of this type can be written in an hour.</span></li>\r\n\t<li><span style=\"font-size:18px\"><strong>Informal Letters: </strong>10 letters of this type can be written in an hour.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\">Given N&nbsp;number of letters, find&nbsp;the minimum number of hours he&nbsp;needs to generate a&nbsp;combination of both types without wasting any time.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 33\r\n<strong>Output:</strong> -1\r\n<strong>Explaination:</strong> 33 letters can not be generated\r\nwithout wasting any time.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 36\r\n<strong>Output:</strong> 3\r\n<strong>Explaination:</strong> 36 corporate letters can \r\nbe written in 3 hours.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>minHours()</strong> which takes the value N as input parameters and returns the minimum hours. Return <strong>-1</strong> if N letters cannot be written without wasting any time.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek works at the post office and can write two types of letters:\n\n*   Corporate Letters: 12 letters per hour.\n*   Informal Letters: 10 letters per hour.\n\nGiven N, the number of letters, find the minimum number of hours needed to write exactly N letters using a combination of both types, without wasting any time. If it's impossible to write exactly N letters, return -1.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "33",
                        "output": "-1",
                        "explanation": "It is not possible to generate 33 letters using a combination of 10 and 12 letters per hour without wasting any time."
                    },
                    {
                        "input": "36",
                        "output": "3",
                        "explanation": "36 corporate letters can be written in 3 hours (36 / 12 = 3)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try out all the possible combinations.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find minimum number of hours required\n    int minHours(int N){\n        // If N is less than 10 or not divisible by 2, return -1\n        if (N < 10 || N%2 != 0)\n            return -1;\n        \n        int q = N/12; // Calculate the quotient of N divided by 12\n        \n        int mini = 1000000007; // Initialize mini to a large value\n        \n        // Iterate from 0 to q\n        for(int i = 0; i <= q; i++){\n            // Check if (N - (i * 12)) is divisible by 10\n            if((N - (i * 12))%10 == 0){\n                int y = (N - (i*12))/10; // Calculate the quotient of (N - (i * 12)) divided by 10\n                mini = min(i + y, mini); // Update mini with the minimum value of (i + y) and mini\n            }\n        }\n        \n        // If no valid combinations were found, return -1\n        if(mini == 1000000007)\n            return -1;\n        \n        // Return the minimum number of hours required\n        return mini;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int minHours(int N)\n    {\n        // If N is less than 10 or not divisible by 2, return -1\n        if (N < 10 || N%2 != 0)\n            return -1;\n        \n        int q = N/12; // Calculate the quotient of N divided by 12\n        \n        int mini = 1000000007; // Initialize mini to a large value\n        \n        // Iterate from 0 to q\n        for(int i = 0; i <= q; i++){\n            // Check if (N - (i * 12)) is divisible by 10\n            if((N - (i * 12))%10 == 0){\n                int y = (N - (i*12))/10; // Calculate the quotient of (N - (i * 12)) divided by 10\n                mini = Math.Min(i + y, mini); // Update mini with the minimum value of (i + y) and mini\n            }\n        }\n        \n        // If no valid combinations were found, return -1\n        if(mini == 1000000007)\n            return -1;\n        \n        // Return the minimum number of hours required\n        return mini;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}