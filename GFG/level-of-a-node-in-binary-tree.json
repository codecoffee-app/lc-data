{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700544,
            "title": "Level of a Node in Binary Tree",
            "titleSlug": "level-of-a-node-in-binary-tree",
            "content": "<p><span >Given a Binary Tree and a target <strong>key</strong>, you need to find the level of the target key in the given Binary Tree.</span></p>\n<p><span ><strong>Note:</strong> The level of the root node is <strong>1</strong>. If no such key exists then return<strong> 0</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> root = [1, 2, 3], target = 4\n&nbsp;\\t 1\n&nbsp;     /   \\\n&nbsp;    2     3<strong>\nOutput: </strong>0</span></pre>\n<pre><span ><strong>Input: </strong>root = [3, 2, 5, 1, 4], target = 4\n&nbsp;\\t  3\n&nbsp;\\t/   \\\n&nbsp;     2     5\n&nbsp;   /   \\\n&nbsp;  1     4<strong>\nOutput: </strong>3\n</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &lt;= number of nodes&lt;= 10<sup>5</sup></span><br /><span >1 &lt;= data of a node&lt;= 10<sup>5</sup></span><br /><span >1 &lt;= target &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and a target key, find the level of the target key within the tree. The root node is considered to be at level 1. If the target key is not found in the tree, return 0.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= data of a node <= 10^5",
                    "1 <= target <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, 3], target = 4",
                        "output": "0",
                        "explanation": "The target key (4) is not present in the binary tree.  Therefore, the level is 0."
                    },
                    {
                        "input": "root = [3, 2, 5, 1, 4], target = 4",
                        "output": "3",
                        "explanation": "The target key (4) is found at level 3 in the binary tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The idea is to start from the root and level as 1. If the key matches with root&rsquo;s data, return level. Else recursively call for left and right subtrees with level as level + 1.</span></p>",
            "<p>https://www.geeksforgeeks.org/get-level-of-a-node-in-a-binary-tree/</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n    public:\n        \t// Function to get the level of a node in a binary tree\n    \tint getLevelUtil(struct Node* node, int data, int level)\n    \t{\n    \t\t// if node is null, return 0\n    \t\tif (node == NULL) \n    \t\t\treturn 0;\n    \t\t\n    \t\t// if data is found in the current node, return the current level\n    \t\tif (node->data == data) \n    \t\t\treturn level;\n    \t\t\n    \t\t// recursively check the left subtree for the data\n    \t\tint downlevel = getLevelUtil(node->left, data, level+1);\n    \t\t\n    \t\t// if data is found in the left subtree, return the level\n    \t\tif (downlevel != 0) \n    \t\t\treturn downlevel;\n    \t\t\n    \t\t// if data is not found in the left subtree, check the right subtree\n    \t\tdownlevel = getLevelUtil(node->right, data, level+1);\n    \t\t\n    \t\t// return the level of the data regardless of whether it was found or not\n    \t\treturn downlevel;\n    \t}\n    \t\n    \t// Function to get the level of a node in a binary tree\n    \tint getLevel(struct Node *node, int target)\n    \t{\n    \t\t// call the utility function to retrieve the level of the target node\n    \t\treturn getLevelUtil(node, target, 1);\n    \t}\n    \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution\n{\n    // Function to get the level of a specific node in a binary tree\n    int getLevelUtil(Node node, int data, int level)\n    {\n        // Base case: if the node is null, return 0\n        if (node == null) \n            return 0; \n\n        // If the value of the current node is equal to the required data, return the current level\n        if (node.data == data) \n            return level; \n\n        // Recursively call the function on the left and right subtrees to find the level of the node\n        int downlevel = getLevelUtil(node.left, data, level + 1); \n\n        // If the node is found in the left subtree, return the level\n        if (downlevel != 0) \n            return downlevel; \n\n        // If the node is not found in the left subtree, recursively call the function on the right subtree\n        downlevel = getLevelUtil(node.right, data, level + 1); \n\n        // Return the level of the node found in either the left or right subtree\n        return downlevel; \n    } \n\n    /* Returns level of given data value */\n    int getLevel(Node node, int data)  \n    { \n        // Call the utility function to get the level of the specified node\n        return getLevelUtil(node, data, 1); \n    } \n\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    # Function to get the level of a node in a binary tree\n    def getLevelU(self, root,data,lv):\n        if not root:\n            return\n        if root.data==data:\n            return lv\n        if root.left and root.right:\n            return self.getLevelU(root.left,data,lv+1) or self.getLevelU(root.right,data,lv+1)\n        if root.right:\n            return self.getLevelU(root.right,data,lv+1)\n        else:\n            return self.getLevelU(root.left,data,lv+1)\n    \n    # Function to get the level of a given node in a binary tree\n    def getLevel(self,root,fNode):\n        \n        lvl=self.getLevelU(root,fNode,1)\n        if lvl:\n            return lvl\n        else:\n            return 0",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution \n{\n    getLevelUtil(node, data, level) // Function to get the level of a given data value in a tree.\n    {\n    \tif (node === null) // If the tree is empty, return 0.\n            return 0; \n   \n        if (node.data === data) // If the current node has the given data value, return the current level.\n            return level; // level represents the depth of the current node in the tree.\n   \n        let downlevel = this.getLevelUtil(node.left, data, level + 1); // Recursively call the function for the left subtree.\n        if (downlevel !== 0) // If the data value is found in the left subtree, return the level.\n            return downlevel; // downlevel variable stores the level of the data value.\n   \n        downlevel = this.getLevelUtil(node.right, data, level + 1); // Recursively call the function for the right subtree.\n        return downlevel; // Return the level of the data value found in the right subtree.\n    } \n   \n    /* Returns level of given data value */\n    getLevel(node, data) // Function to get the level of a given data value in a tree.\n    { \n        return this.getLevelUtil(node, data, 1); // Call the utility function to get the level starting from the root node at level 1.\n    } \n\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}