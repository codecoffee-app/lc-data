{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700201,
            "title": "Level Order in spiral form",
            "titleSlug": "level-order-traversal-in-spiral-form",
            "content": "<p><span >Given a binary tree and the task is to find the spiral order traversal of the tree and return the list containing the elements.<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Spiral order Traversal mean:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> Starting from level 0 for root node, for all the even levels we print the node's value from right to left and for all the odd levels we print the node's value from left to right.</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> <br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">For below tree, function should return [1, 2, 3, 4, 5, 6, 7]</span></span></p>\n<p><span ><strong>&nbsp;</strong></span><img src=\"https://www.geeksforgeeks.org/wp-content/uploads/2009/12/spiral_order.gif\" alt=\"spiral_order\" width=\"386\" height=\"207\" /></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>root = [1, 3, 2]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n &nbsp;&nbsp; /&nbsp;&nbsp; \\\n &nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp; 2\n<strong>Output: </strong>[1, 3, 2]<br /><strong>Explanation</strong>: Start with root (1), print level 0 (right to left), then level 1 (left to right).</span></pre>\n<pre><span ><strong>Input: </strong>root = [10, 20, 30, 40, 60]<strong><br /></strong>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp; \\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30\n &nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp; \\\n &nbsp;&nbsp; 40&nbsp;&nbsp;&nbsp;&nbsp; 60\n<strong>Output: </strong>[10, 20, 30, 60, 40]<br /><strong>Explanation</strong>: Start with root (10), print level 0 (right to left), level 1 (left to right), and continue alternating.</span></pre>\n<pre><span ><strong>Input: </strong>root = [1, 2, N, 4]\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp; \n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;\n &nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;\n &nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; \n<strong>Output: </strong>[1, 2, 4]<br /><strong>Explanation</strong>: Start with root (1), then level 1 (left to right), then level 2 (right to left).</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />0 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use a flag to alternate between left-to-right and right-to-left traversal for each level and a queue to process nodes level by level.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "morgan-stanley",
            "accolite",
            "amazon",
            "microsoft",
            "hike",
            "housing.com",
            "makemytrip",
            "ola-cabs",
            "payu",
            "teradata",
            "walmart",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> findSpiral(Node* root) {\n        vector<int> ans;\n        if (root == nullptr)\n            return ans;\n\n        vector<Node*> q;\n        q.push_back(root);\n        bool f = false; // first we have to move from right to left\n        while (!q.empty()) {\n            vector<int> temp;\n            vector<Node*> curr;\n            for (Node* node : q) {\n                temp.push_back(node->data);\n                if (node->left)\n                    curr.push_back(node->left);\n                if (node->right)\n                    curr.push_back(node->right);\n            }\n            if (f) { // moving from left to right then simply add temp to ans\n                ans.insert(ans.end(), temp.begin(), temp.end());\n                f = false;\n            } else {\n                // moving from right to left then reverse the temp array and add to ans\n                ans.insert(ans.end(), temp.rbegin(), temp.rend());\n                f = true;\n            }\n            q = curr;\n        }\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to return a list containing the spiral order traversal of a binary tree.\n    ArrayList<Integer> findSpiral(Node root) {\n        ArrayList<Integer> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n\n        // Deque to hold the nodes at each level\n        Deque<Node> deque = new LinkedList<>();\n        deque.add(root);\n        boolean leftToRight = false; // flag to determine the order of traversal\n\n        while (!deque.isEmpty()) {\n            int size = deque.size();\n            ArrayList<Integer> level = new ArrayList<>();\n\n            for (int i = 0; i < size; i++) {\n                Node node = deque.pollFirst();\n\n                if (node != null) {\n                    level.add(node.data);\n\n                    // Add child nodes to the deque for next level\n                    if (node.left != null) {\n                        deque.addLast(node.left);\n                    }\n                    if (node.right != null) {\n                        deque.addLast(node.right);\n                    }\n                }\n            }\n\n            // If the current level needs to be added in reverse order, reverse the\n            // level array\n            if (!leftToRight) {\n                Collections.reverse(level);\n            }\n\n            // Add the current level's nodes to the result list\n            result.addAll(level);\n            // Toggle the order for the next level\n            leftToRight = !leftToRight;\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "'''\nclass Node:\n    def __init__(self, val):\n        self.right = None\n        self.data = val\n        self.left = None\n'''\n\n\nclass Solution:\n\n    def findSpiral(self, root):\n        if not root:\n            return []\n\n        q = [root]\n        ans = []\n        f = False  # Flag to alternate between left-to-right and right-to-left traversal\n\n        while q:\n            curr = []  # List to store the current level's nodes\n            temp = []  # List to store the current level's values\n\n            for node in q:\n                temp.append(node.data)\n                if node.left:\n                    curr.append(node.left)\n                if node.right:\n                    curr.append(node.right)\n\n            # If f is True, add values left-to-right, else reverse for right-to-left\n            if f:\n                ans.extend(temp)\n                f = False\n            else:\n                ans.extend(temp[::-1])\n                f = True\n\n            # Update q with the nodes for the next level\n            q = curr\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public List<int> findSpiral(Node root) {\n        List<int> ans = new List<int>();\n        if (root == null) return ans;\n\n        List<Node> q = new List<Node> { root };\n        bool f = false; // Initially, move from right to left\n        while (q.Count > 0) {\n            List<int> temp = new List<int>();\n            List<Node> curr = new List<Node>();\n\n            foreach (Node node in q) {\n                temp.Add(node.data);\n                if (node.left != null) curr.Add(node.left);\n                if (node.right != null) curr.Add(node.right);\n            }\n\n            if (f) {\n                // Moving from left to right\n                ans.AddRange(temp);\n                f = false;\n            } else {\n                // Moving from right to left\n                temp.Reverse();\n                ans.AddRange(temp);\n                f = true;\n            }\n\n            q = curr;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findSpiral(root) {\n        if (!root) {\n            return [];\n        }\n\n        let q = [ root ];\n        let ans = [];\n        let f = false;\n\n        while (q.length) {\n            let curr = [];\n            let temp = [];\n\n            for (let i = 0; i < q.length; i++) {\n                temp.push(q[i].data);\n                if (q[i].left) {\n                    curr.push(q[i].left);\n                }\n                if (q[i].right) {\n                    curr.push(q[i].right);\n                }\n            }\n\n            if (f) {\n                ans.push(...temp);\n                f = false;\n            } else {\n                ans.push(...temp.reverse());\n                f = true;\n            }\n\n            q = curr;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}