{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700248,
            "title": "Level Order Line by Line",
            "titleSlug": "level-order-traversal-line-by-line",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>Binary Tree</strong>, your task is to find its level order traversal.<br /><strong>Note:&nbsp;</strong>The driver code prints the levels '$' separated.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [1, 4, N, 4, 2]\n&nbsp; &nbsp; &nbsp; &nbsp;   </span><span style=\"font-size: 20px;\">1\n &nbsp; &nbsp; &nbsp; &nbsp;/\n &nbsp; &nbsp;&nbsp; &nbsp;4\n &nbsp; &nbsp; /&nbsp; &nbsp;\\\n &nbsp; &nbsp;4&nbsp; &nbsp;  2</span><span style=\"font-size: 18px;\">\n<strong>Output:</strong>1 $ 4 $ 4 2 $</span>\n<span ><strong>Explanation:  </strong>At first level 1 present then at second level 4 present then at third level 4 2 present.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [10, 20, 30, 40, 60]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10\n &nbsp;&nbsp;&nbsp;&nbsp;     /&nbsp;&nbsp;&nbsp; \\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30\n &nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\n &nbsp;&nbsp; 40&nbsp;&nbsp;&nbsp;&nbsp; 60\n<strong>Output: </strong>10 $ 20 30 $ 40 60 $<br /></span><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">At first level 10 present then at second level 20 30 present then at third level 40 60 present.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [10. 20, 30, 40, 70]\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10\n &nbsp;&nbsp;&nbsp;&nbsp;     /&nbsp;&nbsp;&nbsp; \\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;30\n &nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\n &nbsp;&nbsp; 40&nbsp;&nbsp;&nbsp;&nbsp; 70\n<strong>Output: </strong>10 $ 20 30 $ 40 70 $<br /></span><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">At first level 10 present then at second level 20 30 present then at third level 40 70 present.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 1000<br />0 &lt;= node-&gt;data &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, your task is to find its level order traversal. The output should represent the nodes at each level, separated by '$'.",
                "constraints": [
                    "1 <= number of nodes <= 1000",
                    "0 <= node->data <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1, 4, N, 4, 2]",
                        "output": "1 $ 4 $ 4 2 $",
                        "explanation": "Level 1: 1. Level 2: 4. Level 3: 4, 2."
                    },
                    {
                        "input": "[10, 20, 30, 40, 60]",
                        "output": "10 $ 20 30 $ 40 60 $",
                        "explanation": "Level 1: 10. Level 2: 20, 30. Level 3: 40, 60."
                    },
                    {
                        "input": "[10, 20, 30, 40, 70]",
                        "output": "10 $ 20 30 $ 40 70 $",
                        "explanation": "Level 1: 10. Level 2: 20, 30. Level 3: 40, 70."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >For level order, the best is to use BFS algorithm.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft",
            "snapdeal",
            "hike"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n\n    // Function to return the level order traversal line by line of a tree.\n    vector<vector<int>> levelOrder(struct Node* node) {\n        // creating an empty queue for level order traversal.\n        queue<Node*> q;\n        q.push(node);\n\n        vector<vector<int>> result;\n        while (1) {\n            int size = q.size();\n            if (size == 0)\n                break;\n\n            // creating a list to store the nodes at a particular level.\n            vector<int> level;\n\n            while (size > 0) {\n                // storing front element of queue in list and removing it from queue.\n                Node* node = q.front();\n                q.pop();\n                level.push_back(node->data);\n\n                // storing the left child of the parent node in queue.\n                if (node->left)\n                    q.push(node->left);\n\n                // storing the right child of the parent node in queue.\n                if (node->right)\n                    q.push(node->right);\n                size--;\n            }\n            // adding the level list in answer.\n            result.push_back(level);\n        }\n        // returning the final list.\n        return result;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    // Function to return the level order traversal line by line of a tree.\n    static ArrayList<ArrayList<Integer>> levelOrder(Node node) {\n        // creating an empty queue for level order traversal.\n        Queue<Node> q = new LinkedList<>();\n        q.add(node);\n        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();\n\n        while (true) {\n            int size = q.size();\n            if (size == 0) break;\n\n            // creating a list to store the nodes at a particular level.\n            ArrayList<Integer> level = new ArrayList<Integer>();\n\n            while (size > 0) {\n                // storing front element of queue in list and\n                // removing it from queue.\n                node = q.peek();\n                q.poll();\n                level.add(node.data);\n\n                // storing the left child of the parent node in queue.\n                if (node.left != null) q.add(node.left);\n\n                // storing the right child of the parent node in queue.\n                if (node.right != null) q.add(node.right);\n                size--;\n            }\n            // adding the level list in answer.\n            result.add(level);\n        }\n        // returning the final list.\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import queue\n\n\nclass Solution:\n\n    def levelOrder(self, root):\n\n        result = []\n\n        #creating an empty queue for level order traversal.\n        q = queue.Queue()\n        q.put(root)\n\n        while q.qsize():\n            curr_level_size = q.qsize()\n\n            #creating a list to store the nodes at a particular level.\n            level = []\n\n            for i in range(curr_level_size):\n\n                #storing front element of queue in list and\n                #removing it from queue.\n                curr_node = q.get()\n                level.append(curr_node.data)\n\n                #storing the left child of the parent node in queue.\n                if curr_node.left:\n                    q.put(curr_node.left)\n\n                #storing the right child of the parent node in queue.\n                if curr_node.right:\n                    q.put(curr_node.right)\n\n            #adding the level list in answer.\n            result.append(level)\n\n        #returning the final list.\n        return result\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} node\n * @returns {number[][]}\n*/\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    //Function to return the level order traversal line by line of a tree.\n    levelOrder(node)\n    {\n        //creating an empty queue for level order traversal.\n        let q = [];\n        let start_q = 0;\n        q.push(node);\n    \n        let result = [];\n        while(1)\n        {\n            let size = q.length-start_q;\n            if(size === 0)\n                break;\n                \n            //creating a list to store the nodes at a particular level.\n            let level = [];\n            \n            while(size>0)\n            {\n                //storing front element of queue in list and \n                //removing it from queue.\n                let node1 = q[start_q];\n                start_q++;\n                level.push(node1.data);\n                \n    \n                //storing the left child of the parent node in queue.\n                if(node1.left)\n                    q.push(node1.left);\n    \n                //storing the right child of the parent node in queue.\n                if(node1.right)\n                    q.push(node1.right);\n                size--;\n            }\n            //adding the level list in answer.\n            result.push(level);\n        }\n        //returning the final list.\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}