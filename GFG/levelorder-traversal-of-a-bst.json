{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701090,
            "title": "Levelorder traversal of a BST",
            "titleSlug": "levelorder-traversal-of-a-bst",
            "content": "<p><em><span style=\"font-size:18px\">Levelorder traversal means traversing through the tree level by level, from left to right.</span></em><br />\r\n<span style=\"font-size:18px\">Given a BST, find its level-order traversal.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>\\t5\r\n&nbsp;   /   \\\r\n&nbsp;  2     7\r\n&nbsp;  \\\\t\\\r\n&nbsp;   3\\t8\r\n<strong>Output: </strong>5 2 7 3 8</span>\r\n<strong><span style=\"font-size:18px\">Explanation: </span></strong><span style=\"font-size:18px\">Move top to down and then left to right and keep printing elements.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>&nbsp;  &nbsp;30\r\n &nbsp; /\r\n&nbsp;10\r\n &nbsp; \\ \r\n&nbsp;  20\r\n<strong>Output: </strong>30 10 20\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong></span><br />\r\n<span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Complete the function&nbsp;</span><span style=\"font-size:18px\"><strong>levelOrder()</strong></span><span style=\"font-size:18px\">&nbsp;that takes the root of the BST as input parameter and returns a list of integers containing the level-order traversal of the BST.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N), where N = number of nodes in BST.<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= Number of nodes &lt;= 10<sup>5</sup><br />\r\n1 &lt;= Value of a node<sub>&nbsp;</sub>&lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Back-end complete function Template for C\r\n\r\nint res[100000];\r\n// Function to return a list containing the level-order traversal of the tree.\r\nint* levelOrder(struct node* root) {\r\n    int rear, front;\r\n    struct node** queue = createQueue(&front, &rear);\r\n    struct node* temp_node = root;\r\n    int cnt = 0;\r\n    while (temp_node) {\r\n        res[cnt++] = temp_node->data;\r\n\r\n        /*Enqueue left child */\r\n        if (temp_node->left) enQueue(queue, &rear, temp_node->left);\r\n\r\n        /*Enqueue right child */\r\n        if (temp_node->right) enQueue(queue, &rear, temp_node->right);\r\n\r\n        /*Dequeue node and make it temp_node*/\r\n        temp_node = deQueue(queue, &front);\r\n    }\r\n    return res;\r\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\n// Function to return the level order traversal of a BST.\r\nvector<int> levelOrder(struct Node *node) {\r\n    vector<int> res;\r\n    // if node is null, we return the list.\r\n    if (node == NULL) return res;\r\n\r\n    // creating an empty queue for level order traversal.\r\n    queue<Node *> q;\r\n    q.push(node);\r\n\r\n    while (q.empty() == false) {\r\n        // storing front element of queue in list and removing it from queue\r\n        Node *node = q.front();\r\n        res.push_back(node->data);\r\n        q.pop();\r\n\r\n        // storing the left child of the parent node in queue.\r\n        if (node->left != NULL) q.push(node->left);\r\n\r\n        // storing the right child of the parent node in queue.\r\n        if (node->right != NULL) q.push(node->right);\r\n    }\r\n    // returning the list.\r\n    return res;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    // Function to return the level order traversal of a BST.\r\n    static ArrayList<Integer> levelOrder(Node node) {\r\n        ArrayList<Integer> res = new ArrayList<Integer>(0);\r\n\r\n        // if node is null, we return the list.\r\n        if (node == null) return res;\r\n\r\n        // creating an empty queue for level order traversal.\r\n        Queue<Node> q = new LinkedList<>();\r\n        q.add(node);\r\n\r\n        while (q.isEmpty() == false) {\r\n            // storing front element of queue in list and removing it from\r\n            // queue.\r\n            node = q.peek();\r\n            res.add(node.data);\r\n            q.poll();\r\n\r\n            // storing the left child of the parent node in queue.\r\n            if (node.left != null) q.add(node.left);\r\n\r\n            // storing the right child of the parent node in queue.\r\n            if (node.right != null) q.add(node.right);\r\n        }\r\n        // returning the list.\r\n        return res;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n#Function to return the level order traversal of a BST.\r\ndef levelOrder(root):\r\n    \r\n    res = []\r\n    \r\n    #if node is null, we return the list.\r\n    if root is None:\r\n        return res\r\n        \r\n    #creating an empty queue for level order traversal.\r\n    que = []\r\n    que.append(root)\r\n    \r\n    while 1:\r\n        n = len(que)\r\n        if n==0:\r\n            break\r\n        while(n>0):\r\n            \r\n            #storing front element of queue in list and \r\n            #removing it from queue.\r\n            node = que.pop(0)\r\n            res.append (node.data)\r\n            \r\n            #storing the left child of the parent node in queue.\r\n            if node.left != None:\r\n                que.append(node.left)\r\n            \r\n            #storing the right child of the parent node in queue.\r\n            if node.right != None:\r\n                que.append(node.right)\r\n            n-=1\r\n            \r\n    #returning the list.\r\n    return res\r\n\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\r\n\r\n\r\nclass Solution\r\n{\r\n    // Function to return the level order traversal of a BST.\r\n    public List<int> levelOrder(Node root)\r\n    {\r\n        List<int> res = new List<int> ();\r\n        // if node is null, we return the list.\r\n        if (root == null) return res;\r\n    \r\n        // creating an empty queue for level order traversal.\r\n        Queue<Node> q = new Queue<Node> ();\r\n        q.Enqueue(root);\r\n    \r\n        while (q.Count > 0) {\r\n            // storing front element of queue in list and removing it from queue\r\n            Node node = q.Peek();\r\n            res.Add(node.data);\r\n            q.Dequeue();\r\n    \r\n            // storing the left child of the parent node in queue.\r\n            if (node.left != null) q.Enqueue(node.left);\r\n    \r\n            // storing the right child of the parent node in queue.\r\n            if (node.right != null) q.Enqueue(node.right);\r\n        }\r\n        // returning the list.\r\n        return res;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} node\r\n * @returns {number[]}\r\n*/\r\n\r\nclass Solution {\r\n    // Function to return the level order traversal of a BST.\r\n    levelOrder(node) {\r\n        let res = [];\r\n        // if node is null, we return the list.\r\n        if (node === null) return res;\r\n\r\n        // creating an empty queue for level order traversal.\r\n        let q = [];\r\n        let start = 0;\r\n        q.push(node);\r\n\r\n        while (q.length !== start) {\r\n            // storing front element of queue in list and removing it from\r\n            // queue.\r\n            let node = q[start];\r\n            res.push(node.data);\r\n            start++;\r\n\r\n            // storing the left child of the parent node in queue.\r\n            if (node.left !== null) q.push(node.left);\r\n\r\n            // storing the right child of the parent node in queue.\r\n            if (node.right !== null) q.push(node.right);\r\n        }\r\n        // returning the list.\r\n        return res;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}