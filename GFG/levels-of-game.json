{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710025,
            "title": "Levels Of Game",
            "titleSlug": "levels-of-game",
            "content": "<p><span style=\"font-size: 18px;\">You are playing a game. At each level of the game, you have to choose one of the roads to go to the next level. Initially, you have h amount of health and m&nbsp;amount of money.<br />If you take the first road then health decreases by 20 and money increase by 5.&nbsp;If you take the second road then your health decreases by 5 and money decrease by 10. If you take the third&nbsp;road then your health increases by 3&nbsp;and money increase by 2.<br />You have to tell what is the maximum level you can reach up to under the constraints that in no two consecutive levels you can select the same road twice and once your health or money becomes &lt;= 0 game ends(that level is not counted).</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nH=2\nM=10\n<strong>Output:</strong>\n1\n<strong>Explanation:</strong>\nFor the first level, we can only choose the third road.\nNow we cannot move ahead anymore.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nH=20\nM=8\n<strong>Output:</strong>\n5\n<strong>Explanation:</strong>\nGo like this:- R3(23,10)-&gt;R1(3,15)-&gt;R3(6,17)-&gt;\nR2(1,7)-&gt;R3(4,9)-&gt; game ends as we cannot choose\nany more roads.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>maxLevel()</strong>&nbsp;which takes in the health and the money as input and returns the maximum level that can be reached by you.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N*N)</span><br /><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= H,M&lt;=800.&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are playing a game where you navigate through levels by choosing one of three roads at each level. You start with an initial health `H` and money `M`.  The goal is to reach the maximum possible level under certain constraints.\n\n*   **Road 1:** Health decreases by 20, Money increases by 5.\n*   **Road 2:** Health decreases by 5, Money decreases by 10.\n*   **Road 3:** Health increases by 3, Money increases by 2.\n\nYour health and money must always remain above zero. Additionally, you cannot choose the same road in two consecutive levels. Determine the maximum level you can reach.",
                "constraints": [
                    "1 <= H, M <= 800"
                ],
                "testcases": [
                    {
                        "input": "H=2\nM=10",
                        "output": "1",
                        "explanation": "With H=2 and M=10, you can only choose the third road (R3). This increases your health and money. However, since it's the only possible move, the game ends after the first level since you can't choose the same road again.  Therefore, the maximum level reachable is 1."
                    },
                    {
                        "input": "H=20\nM=8",
                        "output": "5",
                        "explanation": "One possible optimal path is: R3 (23, 10) -> R1 (3, 15) -> R3 (6, 17) -> R2 (1, 7) -> R3 (4, 9). Choosing another road at level 6 would result in either health or money being zero or less, so the game ends, and the maximum level reached is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Dp</p>",
            "<p>Greedy algorithm will also work</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n//Initializing a 3D array to store the maximum level at each combination of h, m, and c\nint dp[2020][2020][3]={-1};\n\n//Recursive function to calculate the maximum level\nint f(int h,int m,int c)\n{\n    //Base case: if either h or m becomes 0 or negative, return -1\n    if(h<=0 || m<=0)\n        return -1;\n    \n    //Checking if the current combination of h, m, and c has already been calculated\n    if(dp[h][m][c]!=-1)\n        return dp[h][m][c];\n    \n    //Defining the possible moves and initializing the maximum level to 0\n    vector <pair<int,int>> s={{-20,5},{-5,-10},{3,2}};\n    int ans=0;\n    \n    //Looping through the possible moves and calculating the maximum level recursively\n    for(int i=0;i<3;i++)\n    {\n        //Avoiding going back to the same move\n        if(i!=c)\n        {\n            ans=max(ans,f(h+s[i].first,m+s[i].second,i)+1);\n        }\n    }\n    \n    //Storing the calculated maximum level in the dp matrix for future use\n    dp[h][m][c]=ans;\n    \n    //Returning the calculated maximum level\n    return ans;\n}\n\nclass Solution{\npublic:\n    //Function to find the maximum level for a given h and m\n    int maxLevel(int h,int m)\n    {\n        //Initializing the dp matrix with -1\n        for(int i=0;i<2020;i++)\n        {\n            for(int j=0;j<2020;j++)\n            {\n                for(int k=0;k<3;k++)\n                    dp[i][j][k]=-1;\n            }\n        }\n        \n        //Initializing the maximum level to 0\n        int ans=0;\n        \n        //Looping through all the possible starting moves and finding the maximum level\n        for(int c=0;c<3;c++)\n        {\n            ans=max(ans,f(h,m,c));\n        }\n        \n        //Returning the maximum level\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    static int dp[][][] = new int[2020][2020][3]; // 3D array to store the maximum level achievable at each combination of h, m, and c\n    static int f(int h,int m,int c)\n    {\n        if(h<=0 || m<=0)\n            return -1;\n        if(dp[h][m][c]!=-1) // Check if the maximum level has already been calculated for this combination, if yes then return it\n            return dp[h][m][c];\n        \n        int [][] s = {{-20,5},{-5,-10},{3,2}}; // Array to store the changes to h and m for each option of c\n        int ans=0;\n        for(int i=0;i<3;i++)\n        {\n            if(i!=c) // Check if the option i is not the same as the current option c\n            {\n                ans = Math.max(ans,f(h+s[i][0],m+s[i][1],i)+1); // Recursively calculate the maximum level for the new combination of h, m, and i\n            }\n        }\n        dp[h][m][c]=ans; // Store the maximum level for the current combination of h, m, and c\n        \n        return ans;\n    }\n    \n    public static int maxLevel(int h,int m) {\n        for(int i=0;i<2020;i++)\n        {\n            for(int j=0;j<2020;j++)\n            {\n                for(int k=0;k<3;k++)\n                    dp[i][j][k]=-1; // Initialize the dp array with -1 to indicate that the maximum level has not been calculated yet\n            }\n        }\n        \n        int ans=0;\n        for(int c=0;c<3;c++)\n        {\n            ans=Math.max(ans,f(h,m,c)); // Calculate the maximum level for each option of c and store the maximum value in ans\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\r\nclass Solution:\r\n    def maxLevel(self, h:int,m:int) -> int:\r\n        # code here\r\n        dp = [[None for j in range(1500)] for i in range(1500)]\r\n        def rec(h,m):\r\n            if h<=0 or m<=0:\r\n                return 0\r\n            if dp[h][m]!=None:\r\n                return dp[h][m]\r\n            a = rec(h-5+3,m-10+2)+2\r\n            b = rec(h-20+3,m+5+2)+2\r\n            dp[h][m] = max(a,b)\r\n            return dp[h][m]\r\n        return rec(h,m)-1",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} h\r\n * @param {number} m\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to find the maximum number of levels that can be completed.\r\n    maxLevel(h, m)\r\n    {\r\n        // code here\r\n        let dp = new Array(1500);\r\n        for(let i=0; i<1500; i++){\r\n            dp[i] = new Array(1500);\r\n        }\r\n        function rec(h,m){\r\n            if (h<=0 || m<=0){\r\n                return 0;\r\n            }\r\n            if (dp[h][m]!=undefined){\r\n                return dp[h][m];\r\n            }\r\n            let a = rec(h-5+3,m-10+2)+2;\r\n            let b = rec(h-20+3,m+5+2)+2;\r\n            dp[h][m] = Math.max(a,b);\r\n            return dp[h][m];\r\n        }\r\n        return rec(h,m)-1;\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Initializing a 3D array to store the maximum level at each combination of h, m, and c\n    int[,,] dp = new int[2020, 2020, 3];\n\n    //Recursive function to calculate the maximum level\n    public int f(int h, int m, int c)\n    {\n        //Base case: if either h or m becomes 0 or negative, return -1\n        if (h <= 0 || m <= 0)\n            return -1;\n\n        //Checking if the current combination of h, m, and c has already been calculated\n        if (dp[h, m, c] != -1)\n            return dp[h, m, c];\n\n        //Defining the possible moves and initializing the maximum level to 0\n        int[,] s = new int[,] { { -20, 5 }, { -5, -10 }, { 3, 2 } };\n        int ans = 0;\n\n        //Looping through the possible moves and calculating the maximum level recursively\n        for (int i = 0; i < 3; i++)\n        {\n            //Avoiding going back to the same move\n            if (i != c)\n            {\n                ans = Math.Max(ans, f(h + s[i, 0], m + s[i, 1], i) + 1);\n            }\n        }\n\n        //Storing the calculated maximum level in the dp matrix for future use\n        dp[h, m, c] = ans;\n\n        //Returning the calculated maximum level\n        return ans;\n    }\n\n    //Function to find the maximum level for a given h and m\n    public int maxLevel(int h, int m)\n    {\n        //Initializing the dp matrix with -1\n        for (int i = 0; i < 2020; i++)\n        {\n            for (int j = 0; j < 2020; j++)\n            {\n                for (int k = 0; k < 3; k++)\n                    dp[i, j, k] = -1;\n            }\n        }\n\n        //Initializing the maximum level to 0\n        int ans = 0;\n\n        //Looping through all the possible starting moves and finding the maximum level\n        for (int c = 0; c < 3; c++)\n        {\n            ans = Math.Max(ans, f(h, m, c));\n        }\n\n        //Returning the maximum level\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}