{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705238,
            "title": "Lexicographically Previous Permutation",
            "titleSlug": "lexicographically-previous-permutation3620",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>s</strong>, find lexicographically previous&nbsp;permutation of it.<br />\n<strong>For example:</strong>&nbsp;Lexicographically previous&nbsp;permutation of &ldquo;4321&rdquo; is &ldquo;4312&quot;. If the string is sorted in ascending order, then the&nbsp;lexicographically previous&nbsp;permutation doesn&rsquo;t exist.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: s = &quot;4321&quot;\n<strong>Output:</strong> &quot;4312&quot; \n<strong>Explanation</strong>: lexicographically previous\npermutation of &ldquo;4321&rdquo; is &ldquo;4312&rdquo;</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>s =<strong> </strong>&quot;1234&quot;\n<strong>Output: </strong>&quot;None&quot;\n<strong>Explanation</strong>: &quot;1234&quot; is sorted in\nascending order, hence &quot;None&quot;. </span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>prevPermutation()&nbsp;</strong>which takes string <strong>s</strong>&nbsp;as input parameter and returns lexicographically previous permutation of <strong>s</strong>&nbsp;and if there is no lexicographically previous permutation of <strong>s</strong>, it&nbsp;returns &quot;None&quot;.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|s|)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; |s|&nbsp;&le; 10<sup>3</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, find its lexicographically previous permutation. If the string is sorted in ascending order, then no lexicographically previous permutation exists.",
                "constraints": [
                    "1 <= |s| <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "4321",
                        "output": "4312",
                        "explanation": "The lexicographically previous permutation of \"4321\" is \"4312\"."
                    },
                    {
                        "input": "1234",
                        "output": "None",
                        "explanation": "\"1234\" is sorted in ascending order, hence no previous permutation exists."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use prev_permutation() function.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n  //Function to find the previous permutation of a string.\n  string prevPermutation(string s){\n    //using std::prev_permutation function to find the previous permutation.\n    if(prev_permutation(s.begin(),s.end()))\n        return s;\n    else\n        return \"None\";\n  } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the lexicographically previous permutation of the given string.\n    public string prevPermutation(string s)\n    {\n        char[] arr = s.ToCharArray();\n        if (prev_permutation(arr, 0, s.Length - 1))\n        {\n            return new string(arr);\n        }\n        else\n        {\n            return \"None\";\n        }\n    }\n\n    //Function to find the previous permutation.\n    private bool prev_permutation(char[] arr, int low, int high)\n    {\n        int i = high;\n        while (i > low && arr[i] >= arr[i - 1])\n        {\n            i--;\n        }\n        if (i <= low)\n        {\n            return false;\n        }\n        int j = high;\n        while (arr[j] >= arr[i - 1])\n        {\n            j--;\n        }\n        char temp = arr[i - 1];\n        arr[i - 1] = arr[j];\n        arr[j] = temp;\n        Array.Reverse(arr, i, high - i + 1);\n        return true;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}