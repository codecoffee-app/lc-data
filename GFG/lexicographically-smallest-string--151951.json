{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881859,
            "title": "Lexicographically Smallest String",
            "titleSlug": "lexicographically-smallest-string--151951",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>, find the&nbsp;</span><span style=\"font-size: 18px;\">lexicographically smallest string after rotating the string left any number of times (possibly 0).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong><br /><strong>Input:&nbsp;</strong>s = \"abcd\"<br /><strong>Output: </strong>\"abcd\"<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>The string we are getting after each rotation are \"abcd\", \"bcda\", \"cdab\", \"dabc\" and so on. Lexicographically smallest among them is \"abcd\".</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= s.size() &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Take every window of size n and then find the lexicographically smallest string.</p>\n\n<p>Algorithm:<br />\nfor every window of size n:<br />\n&nbsp; &nbsp;check if it is smaller than the previous other n size window.<br />\n&nbsp; &nbsp;if yes then update your answer.</p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            },
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nstring lexi_string(string &s) {\n    string s1;\n    s1 = s + s;\n    int ans = 0;\n    int i;\n    int n;\n    n = s.size();\n    for (i = 1; i < n; i++) {\n        int c = 0;\n        int cur;\n        int j;\n        cur = ans;\n        j = i;\n        int f = 0;\n        while (c < n) {\n            if (s1[j] < s1[cur]) {\n                f = 1;\n                break;\n            }\n            if (s1[cur] < s1[j]) {\n                f = 0;\n                break;\n            }\n            cur++;\n            j++;\n            c++;\n        }\n        if (f == 1) {\n            ans = i;\n        }\n    }\n    string w = \"\";\n    for (int k = ans; k < ans + n; k++) {\n        w += s1[k];\n    }\n    return w;\n}",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}