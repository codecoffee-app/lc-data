{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707603,
            "title": "License Key Formatting",
            "titleSlug": "license-key-formatting",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>S</strong>&nbsp;that consists of only alphanumeric characters and dashes.<strong>&nbsp;</strong>The string is separated into&nbsp;<strong>N + 1</strong>&nbsp;groups by&nbsp;<strong>N</strong>&nbsp;dashes. Also given an integer&nbsp;<strong>K</strong>.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\">We want to reformat the string&nbsp;<strong>S</strong>,&nbsp;such that each group contains exactly&nbsp;<strong>K</strong>&nbsp;characters, except for the first group, which could be shorter than&nbsp;<strong>K</strong>&nbsp;but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Return the reformatted string.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: \r\n</strong>S = &quot;5F3Z-2e-9-w&quot;, K = 4\r\n<strong>Output: &quot;</strong>5F3Z-2E9W&quot;\r\n<strong>Explanation:&nbsp;</strong>The string <strong>S</strong>&nbsp;has been split into two\r\nparts, each part has 4 characters. Note that two\r\nextra dashes are not needed and can be removed.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nS = &quot;2-5g-3-J&quot;, K = 2\r\n<strong>Output: </strong>&quot;2-5G-3J&quot;\r\n<strong>Explanation:&nbsp;</strong>The string s has been split \r\ninto three parts, each part has 2 characters \r\nexcept the first part as it could\r\nbe shorter as mentioned above.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>ReFormatString()</strong>&nbsp;which takes a string&nbsp;<strong>S</strong><strong>&nbsp;</strong>and an integer <strong>K</strong>&nbsp;as input&nbsp;and returns the reformatted string.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; S.length() &le; 10<sup>5</sup></span><br />\r\n<span style=\"font-size:18px\">1 &le; K &le; 10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` consisting of alphanumeric characters and dashes, where the string is separated into `N + 1` groups by `N` dashes, and an integer `K`. Reformat the string such that each group contains exactly `K` characters, except for the first group, which can be shorter than `K` but must contain at least one character. Insert dashes between groups and convert all lowercase letters to uppercase. Return the reformatted string.",
                "constraints": [
                    "1 <= S.length() <= 10^5",
                    "1 <= K <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "S = \"5F3Z-2e-9-w\", K = 4",
                        "output": "\"5F3Z-2E9W\"",
                        "explanation": "The string S has been split into two parts, each part has 4 characters. Extra dashes are removed."
                    },
                    {
                        "input": "S = \"2-5g-3-J\", K = 2",
                        "output": "\"2-5G-3J\"",
                        "explanation": "The string S has been split into three parts, each part has 2 characters except the first part, which can be shorter."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Every&nbsp;<code>(K+1)<sup>th</sup></code>&nbsp;character from the tail of the formatted string must be a&nbsp;<code>&#39;-&#39;</code>.</span></p>",
            "<p><span style=\"font-size:18px\">Traverse the string backwards:</span></p>\n\n<p><span style=\"font-size:18px\">1. If current character is not &quot;-&quot;, convert the character to upper case letter.</span></p>\n\n<p><span style=\"font-size:18px\">2. Put a counter, and if the current count is equal to&nbsp;<strong>K</strong>, insert &quot;-&quot; at <strong>(K+1)<sup>th</sup>&nbsp;</strong>position.</span></p>\n\n<p><span style=\"font-size:18px\">3, At the end, reverse the string.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution\n{\n   public:\n    // Function to reformat the given string with a specific format.\n    string ReFormatString(string S, int K){\n    \tstring res = \"\"; //Initializing an empty string to store the result\n        int cnt = 0; // Initializing a counter to keep track of the number of characters\n        for (int i = S.size()-1; i >= 0; --i) {\n            if (S[i] != '-') { // Checking if the character is not a hyphen\n                res += toupper(S[i]); // Converting the character to uppercase and appending it to the result string\n                if (++cnt == K) { // Incrementing the counter and checking if it has reached the specified number K\n                    cnt = 0; // Resetting the counter\n                    res += '-'; // Adding a hyphen after every K characters\n                }\n            }\n        }\n        if (res.back() == '-') { // Checking if the last character of the result string is a hyphen\n            res.pop_back(); // Removing the last character (hyphen)\n        }\n        reverse(res.begin(), res.end()); // Reversing the result string\n        return res; // Returning the reformatted string\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Backend complete function Template for Java\n\nclass Solution{\n    // Function to reformat the string by adding '-' every K characters from right to left\n    static String ReFormatString(String S, int K){\n        StringBuilder res = new StringBuilder(); // StringBuilder to store the reformed string\n        int cnt = 0; // Counter variable to keep track of the number of characters added\n        \n        // Loop from right to left through the string\n        for(int i=S.length()-1; i>=0; i--){\n            // Check if the current character is not '-'\n            if(S.charAt(i) != '-') {\n                Character cap = Character.toUpperCase(S.charAt(i)); // Convert the character to uppercase\n                \n                // Check if cnt is not zero and divisible by K\n                if(cnt != 0 && cnt % K == 0) {\n                    cnt = 1; // Reset the counter to 1\n                    res.insert(0,'-'); // Insert '-' character to separate groups\n                    res.insert(0,cap); // Insert the uppercase character\n                }\n                else {\n                    cnt++; // Increment the counter\n                    res.insert(0,cap); // Insert the uppercase character\n                }\n            }\n        }\n        \n        return res.toString(); // Return the reformed string\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\nclass Solution:\n    #Function to reformat the string.\n    def ReFormatString(self, S, K):\n        res = [] #list to store the reformatted string\n        cnt = 0 #variable to count the characters\n        \n        #iterating over the input string from right to left\n        for i in range(len(S)-1,-1,-1):\n            if S[i] != '-':\n                res.append(S[i].upper()) #converting character to uppercase and adding it to the result string\n                cnt += 1 #incrementing character count\n                \n                #if character count becomes equal to K, add '-' to the result string and reset count.\n                if cnt == K:\n                    cnt = 0\n                    res.append('-')\n        \n        #if last character in the result string is '-', remove it.\n        if len(res) and res[-1] == '-':\n            res.pop()\n        \n        res = res[::-1] #reverse the string\n        res = \"\".join(res) #convert list to string\n        \n        return res #return the reformatted string.",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {string} S\r\n * @param {number} K\r\n * @returns {string}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to reformat the string with the given rules.\r\n    ReFormatString(S, K)\r\n    {\r\n        let res = []; //list to store the reformatted string\r\n        let cnt = 0; //variable to count the characters\r\n        \r\n        //iterating over the input string from right to left\r\n        for (let i = S.length-1; i >= 0; i--) {\r\n            if (S[i] !== '-') {\r\n                res.push(S[i].toUpperCase()); //converting character to uppercase and adding it to the result string\r\n                cnt++; //incrementing character count\r\n                \r\n                //if character count becomes equal to K, add '-' to the result string and reset count.\r\n                if (cnt === K) {\r\n                    cnt = 0;\r\n                    res.push('-');\r\n                }\r\n            }\r\n        }\r\n        \r\n        //if last character in the result string is '-', remove it.\r\n        if (res.length && res[res.length-1] === '-') {\r\n            res.pop();\r\n        }\r\n        \r\n        res = res.reverse(); //reverse the string\r\n        res = res.join(\"\"); //convert list to string\r\n        \r\n        return res; //return the reformatted string.\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution\n{\n    // Function to reformat the given string with a specific format.\n    public string ReFormatString(string S, int K)\n    {\n        StringBuilder res = new StringBuilder(); // Initializing a StringBuilder to store the result\n        int cnt = 0; // Initializing a counter to keep track of the number of characters\n        \n        // Iterate through the string in reverse\n        for (int i = S.Length - 1; i >= 0; --i)\n        {\n            if (S[i] != '-') // Checking if the character is not a hyphen\n            {\n                res.Append(Char.ToUpper(S[i])); // Converting the character to uppercase and appending it to the result\n                if (++cnt == K) // Incrementing the counter and checking if it has reached the specified number K\n                {\n                    cnt = 0; // Resetting the counter\n                    res.Append('-'); // Adding a hyphen after every K characters\n                }\n            }\n        }\n        \n        // Checking if the last character of the result string is a hyphen and remove it if necessary\n        if (res.Length > 0 && res[res.Length - 1] == '-')\n        {\n            res.Remove(res.Length - 1, 1); // Removing the last character (hyphen)\n        }\n        \n        // Reverse the result string\n        char[] arr = res.ToString().ToCharArray();\n        Array.Reverse(arr);\n        \n        return new string(arr); // Returning the reformatted string\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}