{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704660,
            "title": "Line passing through 2 points",
            "titleSlug": "line-passing-through-2-points5031",
            "content": "<p><span style=\"font-size:18px\">Given two points <strong>P(a, b)</strong> and <strong>Q(c, d)</strong>&nbsp;in the coordinate plane, find the equation of the line passing through both the points.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> P = (3, 2)\nQ = (2, 6)\n<strong>Output:</strong> 4x+1y=14\n<strong>Explaination:</strong> Using the formula to get\nline equation from two points we can\nget it.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> P = (3, 2)\nQ = (5, 7)\n<strong>Output:</strong> 5x-2y=11\n<strong>Explaination:</strong> If we use the formula to\nget line equation from two points we\nget this equation.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>getLine()</strong> which takes the values a, b, c and d as input parameters and returns a string which represents the equation.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; a, b, c, d &le; 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two points P(a, b) and Q(c, d) in the coordinate plane, determine the equation of the line that passes through both points. Express the equation in the form Ax + By = C, where A, B, and C are integers.",
                "constraints": [
                    "1 <= a, b, c, d <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "P = (3, 2)\nQ = (2, 6)",
                        "output": "4x+1y=14",
                        "explanation": "Using the two-point form of a line, we calculate the slope and y-intercept to derive the equation 4x + y = 14."
                    },
                    {
                        "input": "P = (3, 2)\nQ = (5, 7)",
                        "output": "5x-2y=11",
                        "explanation": "Applying the two-point form, we find the slope and rearrange the equation to the form 5x - 2y = 11."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use the formula (x<sub>2</sub>-x<sub>1</sub>)*(y-y<sub>1</sub>) = (y<sub>2</sub>-y<sub>1</sub>)*(x-x<sub>1</sub>).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Geometric",
                "slug": "geometric"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to get the equation of a line given two points\n    string getLine(int a, int b, int c, int d)\n    {\n        // Calculate the slope of the line\n        int m1 = d - b;\n        int m2 = a - c;\n\n        // Calculate the y-intercept of the line\n        int c1 = m1*a + m2*b;\n\n        string s;\n\n        // Check if slope is negative or positive to format the equation\n        if(m2 < 0)\n            s = to_string(m1)+\"x\"+to_string(m2)+\"y=\"+to_string(c1);\n        else\n            s = to_string(m1)+\"x+\"+to_string(m2)+\"y=\"+to_string(c1);\n\n        // Return the equation of the line\n        return s;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}