{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701280,
            "title": "Linear Probing in Hashing",
            "titleSlug": "linear-probing-in-hashing-1587115620",
            "content": "<p><em><span style=\"font-size: 18px;\">Linear probing is a collision-handling technique in hashing. Linear probing says that whenever a collision occurs, search for the immediate next position. </span></em></p>\n<p><span style=\"font-size: 18px;\">Given an array of integers and a hash table size. Fill the array elements into a hash table using&nbsp;<strong>Linear Probing&nbsp;</strong>to handle collisions. Duplicate elements must be mapped to the same position in the hash table while colliding elements must be mapped to the [(value+1)%hashSize]<em> </em>position.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong> :-&nbsp;</span><span style=\"font-size: 18px;\"> If there's no more space to insert a new element, just&nbsp;</span><strong style=\"font-size: 18px;\">drop&nbsp;</strong><span style=\"font-size: 18px;\">that element.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>hashSize = 10\nsizeOfArray = 4 \nArray[] = {4,14,24,44}\n<strong>Output:\n</strong>-1 -1 -1 -1 4 14 24 44 -1 -1<strong>\nExplanation: <br /></strong>4%10=4, So put 4 in hashtable[4].<br />Now, 14%10=4, but hashtable[4] is already filled so put 14 in the next slot and so on for further elements.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>hashSize = 10\nsizeOfArray = 4 \nArray[] = {9,99,999,9999}\n<strong>Output:\n</strong>99 999 9999 -1 -1 -1 -1 -1 -1 9<strong>\nExplanation: <br /></strong>9%10=9, So put 9 in hashtable[9]. <br />Now, 99%10=9, but hashtable[9] is already filled so put 99 in the (99+1)%10 = 0 slot so 99 goes into hashtable[0] and so on for further elements.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>linearProbing()</strong> which takes the hash table size (HashSize), an integers array arr[], and its size N as input parameters and inserts all the elements of the array arr[] into a hash table. The function should return the hash table.&nbsp;<br />The empty cells of the hash table are to be given a value of -1.<br />Also, if there's no more space to insert a new element, just&nbsp;<strong>drop&nbsp;</strong>that element.&nbsp;</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= hashSize &lt;= 1000<br />1 &lt;= sizeOfArray &lt;= 10000<br />0 &lt;= Array[] &lt;= 10<sup>5</sup></span></p>\n<div id=\"professor_prebid-root\"></div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a hash table using linear probing to handle collisions. Given an array of integers `arr` and a hash table size `hashSize`, insert the elements of `arr` into the hash table. When a collision occurs, probe for the next available slot using the formula `(value + 1) % hashSize`. If a duplicate element is encountered, map it to the same position. If no free slot is found, drop the element.",
                "constraints": [
                    "1 <= hashSize <= 1000",
                    "1 <= sizeOfArray <= 10000",
                    "0 <= Array[] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "hashSize = 10\nsizeOfArray = 4\nArray[] = {4,14,24,44}",
                        "output": "-1 -1 -1 -1 4 14 24 44 -1 -1",
                        "explanation": "4 % 10 = 4, so 4 is placed at hashtable[4]. 14 % 10 = 4, but hashtable[4] is occupied, so 14 is placed at the next available slot, hashtable[5]. Similarly, 24 and 44 are placed at hashtable[6] and hashtable[7] respectively."
                    },
                    {
                        "input": "hashSize = 10\nsizeOfArray = 4\nArray[] = {9,99,999,9999}",
                        "output": "99 999 9999 -1 -1 -1 -1 -1 -1 9",
                        "explanation": "9 % 10 = 9, so 9 is placed at hashtable[9]. 99 % 10 = 9, but hashtable[9] is occupied. Using linear probing, (99+1)%10 = 0, so 99 is placed at hashtable[0]. Similarly, 999 is placed at hashtable[1], and 9999 is placed at hashtable[2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "",
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to fill the array elements into a hash table\n    // using Linear Probing to handle collisions.\n    vector<int> linearProbing(int hashSize, int arr[], int sizeOfArray) {\n        // Your code here\n        vector<int> hash(hashSize);\n\n        // storing -1 at all indexes in the hash table.\n        for (int i = 0; i < hashSize; i++)\n            hash[i] = -1;\n\n        // iterating over the array.\n        for (int i = 0; i < sizeOfArray; i++) {\n            // if the value of hash table at index (arr[i]%hashSize) is -1\n            // which means empty then, we insert arr[i] at that place.\n            if (hash[arr[i] % hashSize] == -1) {\n                hash[arr[i] % hashSize] = arr[i];\n            }\n            // else we move linearly from the filled position\n            // to find an index with -1 in hash table.\n            else {\n                int counter = 0;\n                int k = (arr[i]) % hashSize;\n                int flag = 0;\n                // using a loop which runs until we find an index with -1\n                // in hash table which means empty.\n                while (counter < hashSize && hash[k] != -1) {\n                    if (hash[k] == arr[i]) {\n                        flag = 1;\n                        break;\n                    }\n                    k = (k + 1) % hashSize;\n                    counter++;\n                }\n                if (flag == 1)\n                    continue;\n                // if we find a position where arr[i] can be inserted\n                // then we insert the element.\n                if (counter < hashSize)\n                    hash[k] = arr[i];\n            }\n        }\n        // returning the hash table.\n        return hash;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    //Function to fill the array elements into a hash table \r\n    //using Linear Probing to handle collisions.\r\n    int[] linearProbing(int hash_size, int arr[], int array_size)\r\n        {\r\n            int hash_table[] = new int[hash_size];\r\n            \r\n            //storing -1 at all indexes in the hash table.\r\n            for(int i = 0; i < hash_size; i++)\r\n                 hash_table[i] = -1;\r\n            \r\n            //iterating over the array. \r\n            for(int i=0;i<array_size;i++)\r\n            {\r\n                //if the value of hash table at index (arr[i]%hashSize) is -1 \r\n                //which means empty then, we insert arr[i] at that place.\r\n                if(hash_table[arr[i]%hash_size]==-1)\r\n                {\r\n                    hash_table[arr[i]%hash_size]=arr[i];\r\n                }\r\n                //else we move linearly from the filled position \r\n                //to find an index with -1 in hash table.\r\n                else\r\n                {\r\n                    int counter=0;\r\n                    int k=(arr[i])%hash_size;\r\n                    int flag=0;\r\n                    //using a loop which runs until we find an index with -1\r\n                    //in hash table which means empty.\r\n                    while(counter<hash_size&&hash_table[k]!=-1)\r\n                    {\r\n                        if(hash_table[k]==arr[i])\r\n                        {\r\n                            flag=1;\r\n                            break;\r\n                        }\r\n                         k=(k+1)%hash_size;\r\n                         counter++;\r\n                    }\r\n                    if(flag==1)\r\n                        continue;\r\n                    //if we find a position where arr[i] can be inserted \r\n                    //then we insert the element.\r\n                    if(counter<hash_size)\r\n                    hash_table[k]=arr[i];\r\n                }\r\n            }\r\n            //returning the hash table.\r\n            return hash_table;\r\n        }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\nclass Solution:\r\n    \r\n    #Function to fill the array elements into a hash table \r\n    #using Linear Probing to handle collisions.\r\n    def linearProbing(self, hashSize, arr, sizeOfArray):\r\n        \r\n        #storing -1 at all indexes in the hash table.\r\n        hash=[-1]*hashSize\r\n        \r\n        #iterating over the array. \r\n        for i in range(sizeOfArray):\r\n            \r\n            #if the value of hash table at index (arr[i]%hashSize) is -1 \r\n            #which means empty then, we insert arr[i] at that place.\r\n            if(hash[arr[i]%hashSize]==-1): \r\n                hash[arr[i]%hashSize]=arr[i]\r\n            \r\n            #else we move linearly from the filled position \r\n            #to find an index with -1 in hash table.\r\n            else:\r\n                k=(arr[i])%hashSize;\r\n                counter=0\r\n                flag = 0\r\n                #using a loop which runs until we find an index with -1\r\n                #in hash table which means empty.\r\n                while(counter<hashSize and hash[k]!=-1):\r\n                    if(hash[k]==arr[i]):\r\n                        flag=1\r\n                        break\r\n                    k=(1+k)%hashSize;\r\n                    counter+=1\r\n                \r\n                if flag==1:\r\n                    continue\r\n                #if we find a position where arr[i] can be inserted \r\n                #then we insert the element.\r\n                if(counter<hashSize):\r\n                    hash[k]=arr[i]\r\n                    \r\n        #returning the hash table.            \r\n        return hash\r\n        \r\n        ",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Function to fill the array elements into a hash table\n    //using Linear Probing to handle collisions.\n    public List<int> linearProbing(int hashSize, int[] arr, int sizeOfArray)\n    {\n        //Your code here\n        List<int> hash = new List<int>(hashSize);\n\n        //storing -1 at all indexes in the hash table.\n        for (int i = 0; i < hashSize; i++)\n            hash.Add(-1);\n\n        //iterating over the array. \n        for (int i = 0; i < sizeOfArray; i++)\n        {\n            //if the value of hash table at index (arr[i]%hashSize) is -1 \n            //which means empty then, we insert arr[i] at that place.\n            if (hash[arr[i] % hashSize] == -1)\n            {\n                hash[arr[i] % hashSize] = arr[i];\n            }\n            //else we move linearly from the filled position \n            //to find an index with -1 in hash table.\n            else\n            {\n                int counter = 0;\n                int k = (arr[i]) % hashSize;\n                int flag = 0;\n                //using a loop which runs until we find an index with -1\n                //in hash table which means empty.\n                while (counter < hashSize && hash[k] != -1)\n                {\n                    if (hash[k] == arr[i])\n                    {\n                        flag = 1;\n                        break;\n                    }\n                    k = (k + 1) % hashSize;\n                    counter++;\n                }\n                if (flag == 1)\n                    continue;\n                //if we find a position where arr[i] can be inserted \n                //then we insert the element.\n                if (counter < hashSize)\n                    hash[k] = arr[i];\n            }\n        }\n        //returning the hash table.\n        return hash;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {number} hashSize\r\n * @param {number[]} arr\r\n * @param {number} sizeOfArray\r\n * @returns {number[]}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to fill the array elements into a hash table \r\n    //using Linear Probing to handle collisions.\r\n    linearProbing(hashSize, arr, sizeOfArray)\r\n    {\r\n        let hash = new Array(hashSize);\r\n        \r\n        //storing -1 at all indexes in the hash table.\r\n        for(let i=0;i<hashSize;i++)\r\n            hash[i]=-1;\r\n            \r\n        //iterating over the array. \r\n        for(let i=0;i<sizeOfArray;i++)\r\n        {\r\n            //if the value of hash table at index (arr[i]%hashSize) is -1 \r\n            //which means empty then, we insert arr[i] at that place.\r\n            if(hash[arr[i]%hashSize]==-1)\r\n            {\r\n                hash[arr[i]%hashSize]=arr[i];\r\n            }\r\n            //else we move linearly from the filled position \r\n            //to find an index with -1 in hash table.\r\n            else\r\n            { \r\n                let counter=0;\r\n                let k=(arr[i])%hashSize;\r\n                let flag = 0;\r\n                //using a loop which runs until we find an index with -1\r\n                //in hash table which means empty.\r\n                while(counter<hashSize&&hash[k]!=-1)\r\n                {\r\n                    if(hash[k]==arr[i])\r\n                    {\r\n                        flag=1;\r\n                        break;\r\n                    }\r\n                    k=(k+1)%hashSize;\r\n                    counter++;\r\n                }\r\n                if(flag==1)\r\n                    continue;\r\n                //if we find a position where arr[i] can be inserted \r\n                //then we insert the element.\r\n                if(counter<hashSize) \r\n                hash[k]=arr[i];\r\n            }\r\n        }\r\n        //returning the hash table.\r\n        return hash;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}