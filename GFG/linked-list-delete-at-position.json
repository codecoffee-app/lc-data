{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702081,
            "title": "Linked List Delete at Position",
            "titleSlug": "linked-list-delete-at-position",
            "content": "<p><span style=\"font-size:18px\">Given a linked list of size <strong>n</strong>, you have to<strong> delete the node at position pos </strong>of the linked list and return the new head. The position of initial node is 1.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5\r\npos = 4\r\n<strong>Output: </strong>1 2 3 5</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>LinkedList: 2-&gt;5-&gt;7-&gt;8-&gt;99-&gt;100\r\npos = 6\r\n<strong>Output: </strong>2 5 7 8 99</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThe task is to complete the function <strong>deleteAtPosition()</strong> which takes<strong> head reference</strong> and <strong>pos </strong>as argument&nbsp;<strong>and returns</strong> reference to the <strong>new head </strong>node, which is then used to display the list. The <strong>printing </strong>is done <strong>automatically </strong>by the <strong>driver code</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(pos).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n2 &lt;= number of nodes &lt;= 10<sup>3</sup><br />\r\n1 &lt;= pos &lt;= n</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of size 'n', implement a function to delete the node at a specified position 'pos'. The head of the linked list and the position 'pos' are provided as input. The first node in the linked list is considered to be at position 1. Return the head of the modified linked list after deleting the node at the given position.",
                "constraints": [
                    "2 <= number of nodes <= 1000",
                    "1 <= pos <= n"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1->2->3->4->5, pos = 4",
                        "output": "1 2 3 5",
                        "explanation": "The node at position 4 (value 4) is deleted from the list."
                    },
                    {
                        "input": "LinkedList: 2->5->7->8->99->100, pos = 6",
                        "output": "2 5 7 8 99",
                        "explanation": "The node at position 6 (value 100) is deleted from the list."
                    },
                    {
                        "input": "LinkedList: 1->2->3, pos = 1",
                        "output": "2 3",
                        "explanation": "The node at the head of the list is deleted."
                    },
                    {
                        "input": "LinkedList: 1->2, pos = 2",
                        "output": "1",
                        "explanation": "The node at the end of the list is deleted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Simply keep a counter and keep moving till counter becomes equal to pos. Now you also need the reference to the previous pos and next of pos. Simply connect the prev next to next of pos.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\r\n\r\nstruct Node * deleteAtPosition(struct Node *head, int pos)\r\n{\r\n    if(pos==1)\r\n    {\r\n        struct Node * temp=head;\r\n        head=head->next;\r\n        temp->next=NULL;\r\n        return head;\r\n    }\r\n    \r\n    struct Node * curr=head;\r\n    struct Node * prev=head;\r\n    int count=1;\r\n    \r\n    while(count<pos)\r\n    {\r\n        count++;\r\n        prev=curr;\r\n        curr=curr->next;\r\n        \r\n    }\r\n    \r\n    struct Node * next = curr->next;\r\n    curr->next=NULL;\r\n    prev->next=next;\r\n    return head;\r\n    \r\n    \r\n}\r\n\r\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nNode * deleteAtPosition(Node *head,int pos)\r\n{\r\n    if(pos==1)\r\n    {\r\n        Node * temp=head;\r\n        head=head->next;\r\n        temp->next=NULL;\r\n        \r\n        delete temp;\r\n        return head;\r\n    }\r\n    \r\n    Node * curr=head;\r\n    Node * prev=head;\r\n    int count=1;\r\n    \r\n    while(count<pos)\r\n    {\r\n        count++;\r\n        prev=curr;\r\n        curr=curr->next;\r\n        \r\n    }\r\n    \r\n    Node * next=curr->next;\r\n    curr->next=NULL;\r\n    prev->next=next;\r\n    \r\n    delete curr;\r\n    \r\n    return head;\r\n    \r\n    \r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Delete\r\n{\r\n    Node deleteAtPosition(Node head, int pos)\r\n    {\r\n        if(pos==1)\r\n        {\r\n            Node temp = head;\r\n            head = head.next;\r\n            temp.next = null;\r\n            \r\n            \r\n            return head;\r\n        }\r\n        \r\n        Node curr = head;\r\n        Node prev = head;\r\n        int count=1;\r\n        \r\n        while(count<pos)\r\n        {\r\n            count++;\r\n            prev = curr;\r\n            curr =curr.next;\r\n            \r\n        }\r\n        \r\n        Node next = curr.next;\r\n        curr.next = null;\r\n        prev.next = next;\r\n        \r\n        \r\n        \r\n        return head;\r\n        \r\n        \r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\ndef deleteAtPosition(head, pos):\r\n    if(pos==1):\r\n        tmp = head\r\n        head=head.next\r\n        tmp.next=None\r\n        del tmp\r\n        return head\r\n    \r\n    curr = head \r\n    prev = head\r\n    cnt=1\r\n    while(cnt<pos):\r\n        cnt+=1\r\n        prev=curr\r\n        curr=curr.next\r\n    \r\n    next = curr.next\r\n    curr.next=None\r\n    prev.next = next\r\n    \r\n    del curr\r\n    return head\r\n    \r\n    ",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/*LINKED LIST NODE\r\nclass Node {\r\n  constructor(x){\r\n    this.data = x;\r\n    this.next = null;\r\n  }\r\n}\r\n*/\r\n\r\n/**\r\n * @param {Node} head\r\n * @param {number} pos\r\n * @return {Node}\r\n*/\r\n\r\nclass Solution {\r\n  deleteAtPosition(head,pos){\r\n    //code here\r\n    if(pos===1){\r\n        let temp = head;\r\n        head = head.next;\r\n        temp.next = null;\r\n        \r\n        return head;\r\n    }\r\n    \r\n    let curr = head;\r\n    let prev = head;\r\n    let count = 1;\r\n    \r\n    while(count<pos){\r\n        count++;\r\n        prev = curr;\r\n        curr = curr.next;\r\n        \r\n    }\r\n    \r\n    let next = curr.next;\r\n    curr.next = null;\r\n    prev.next = next;\r\n    \r\n    return head;   \r\n  }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public Node deleteAtPosition(Node head, int pos)\n    {\n        if(pos==1)\n        {\n            Node temp=head;\n            head=head.next;\n            temp.next=null;\n        \n            //delete temp;\n            return head;\n        }\n    \n        Node curr=head;\n        Node prev=head;\n        int count=1;\n    \n        while(count<pos)\n        {\n            count++;\n            prev=curr;\n            curr=curr.next;\n        \n        }\n    \n        Node nextNode=curr.next;\n        curr.next=null;\n        prev.next=nextNode;\n    \n        //delete curr;\n    \n        return head;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}