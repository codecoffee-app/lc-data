{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700085,
            "title": "Linked List in Zig-Zag fashion",
            "titleSlug": "linked-list-in-zig-zag-fashion",
            "content": "<p><span style=\"font-size: 18px;\">Given a<strong> </strong>Linked list <strong>head</strong>, rearrange it such that the converted list should be of the form a &lt;= b &gt;= c &lt;= d &gt;= e &lt;= f .. where <strong>a, b, c</strong> are consecutive data nodes of the linked list and such that the order of linked list is sustained.</span></p>\n<p><span style=\"font-size: 18px;\">For example: In 11 15 20 5 10 we consider only 11 20 5 15 10 because it satisfies the above condition and the order of the linked list. 5 20 11 15 10 is not considered as it does not follow the order of the linked list.</span></p>\n<p><span style=\"font-size: 18px;\">To maintain the order, keep swapping the <strong>adjacent</strong> nodes of the linked list (whenever required) to get the desired output.&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note:&nbsp;</span></strong><span style=\"font-size: 18px;\">You have to return the head to Zig-Zag LinkedList, and the driver code will print \"true\" if your&nbsp;</span><span style=\"font-size: 18px;\">LinkedList is Zig-Zag else it will print \"false\".</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4 <br /><strong>Output: </strong>true<br /></span><span ><strong>Explanation:<br /></strong></span><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700085/Web/Other/blobid0_1720589981.png\" width=\"400\" height=\"150\" /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>LinkedList: 11-&gt;15-&gt;20-&gt;5-&gt;10<br /><strong>Output: </strong>true<strong>\nExplanation: <br /></strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700085/Web/Other/blobid1_1720590010.png\" width=\"400\" height=\"150\" /><strong><br /></strong>In the given linked list, after arranging them as 11 &lt; 20 &gt; 5 &lt; 15 &gt; 10 in the pattern as asked above.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 1000<br />1 &lt;= node -&gt; data &lt;= 10<sup>4</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, rearrange it to follow a zig-zag pattern: a <= b >= c <= d >= e <= f, and so on.  The original order of the nodes in the linked list must be maintained. To achieve this, you can only swap adjacent nodes. Return the head of the modified linked list. The zig-zag pattern starts with a less than or equal to comparison.",
                "constraints": [
                    "1 <= number of nodes <= 1000",
                    "1 <= node -> data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "1->2->3->4",
                        "output": "1->3->2->4",
                        "explanation": "The linked list is rearranged to 1 <= 3 >= 2 <= 4."
                    },
                    {
                        "input": "11->15->20->5->10",
                        "output": "11->20->5->15->10",
                        "explanation": "The linked list is rearranged to 11 <= 20 >= 5 <= 15 >= 10."
                    },
                    {
                        "input": "4->3->7->8->6->2->1",
                        "output": "3->7->4->8->2->6->1",
                        "explanation": "null"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >If the next element is expected to be greater but is smaller, swap the current with the next. Similarly, if the next element is expected to be smaller, but is larger, swap the current with the next. This swapping won't affect the sorted sequence before the current node.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "oyo-rooms"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n\n  public:\n    Node* zigZag(Node* head) {\n\n        bool flag = true;\n\n        // Traverse linked list starting from head.\n        Node* current = head;\n        while (current->next != NULL) {\n            if (flag) {\n                // flag==TRUE indicates that next element should\n                // be larger than current\n                if (current->data > current->next->data)\n                    swap(current->data, current->next->data);\n            } else {\n                // flag==FALSE indicates that next element should\n                // be smaller than current\n                if (current->data < current->next->data)\n                    swap(current->data, current->next->data);\n            }\n\n            current = current->next;\n            flag = !flag; /* flip flag for reverse checking */\n        }\n\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    Node zigZag(Node head) {\n        boolean flag = true;\n\n        // Traverse linked list starting from head.\n        Node current = head;\n        while (current != null && current.next != null) {\n            if (flag) {\n                // flag==true indicates that next element should\n                // be larger than current\n                if (current.data > current.next.data) swap(current);\n            } else {\n                // flag==false indicates that next element should\n                // be smaller than current\n                if (current.data < current.next.data) swap(current);\n            }\n\n            current = current.next;\n            flag = !flag; // Flip flag for reverse checking\n        }\n\n        return head;\n    }\n\n    private void swap(Node node) {\n        int temp = node.data;\n        node.data = node.next.data;\n        node.next.data = temp;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def zigzag(self, head_node):\n        flag = True\n\n        # Traverse linked list starting from head.\n        curr_node = head_node\n        while curr_node.next is not None:\n\n            if flag:\n                # flag==TRUE indicates that next element should\n                # be larger than current\n                if curr_node.data > curr_node.next.data:\n                    curr_node.data, curr_node.next.data = curr_node.next.data, curr_node.data\n\n            else:\n                # flag==FALSE indicates that next element should\n                # be smaller than current\n                if curr_node.data < curr_node.next.data:\n                    curr_node.data, curr_node.next.data = curr_node.next.data, curr_node.data\n\n            curr_node = curr_node.next\n            flag = not flag\n            # flip flag for reverse checking\n\n        return head_node\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Solution class\nclass Solution {\n    zigZag(head) {\n        let flag = true;\n        let current = head;\n\n        while (current && current.next) {\n            if (flag) {\n                // flag=true indicates next element should be larger than current\n                if (current.data > current.next.data) {\n                    let temp = current.data;\n                    current.data = current.next.data;\n                    current.next.data = temp;\n                }\n            } else {\n                // flag=false indicates next element should be smaller than current\n                if (current.data < current.next.data) {\n                    let temp = current.data;\n                    current.data = current.next.data;\n                    current.next.data = temp;\n                }\n            }\n\n            current = current.next;\n            flag = !flag; // flip flag for reverse checking\n        }\n\n        return head;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}