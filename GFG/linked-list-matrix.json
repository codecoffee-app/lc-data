{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700639,
            "title": "Linked List Matrix",
            "titleSlug": "linked-list-matrix",
            "content": "<p><span >Given a Matrix <strong>mat</strong> of<strong> n*n</strong> size. Your task is constructing a 2D linked list representation of the given matrix.</span></p>\n<pre><span ><strong>Input:</strong> mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n<strong>Output: </strong><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700639/Web/Other/blobid0_1727092864.png\" width=\"336\" height=\"273\" /><br /></span></pre>\n<pre><span ><strong>Input: </strong>mat = [[23, 28], [23, 28]]</span><br /><span ><strong>Output:</strong></span><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700639/Web/Other/blobid1_1726147286.png\" width=\"336\" height=\"201\" /></pre>\n<p><span style=\"box-sizing: border-box; line-height: 1.7em; font-family: Nunito; font-size: 14pt; color: #1e2229; background-color: #ffffff;\"><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; font-family: var(--gfg-font-secondary) !important; font-size: 17px !important; color: var(--text-color) !important; background-color: var(--background) !important;\">Expected Time Complexity:&nbsp;</span>O(n<sup>2</sup>)</span><br style=\"box-sizing: border-box; line-height: 1.7em; font-family: Nunito; font-size: 17px; color: #1e2229; background-color: #ffffff;\" /><span style=\"box-sizing: border-box; line-height: 1.7em; font-family: Nunito; font-size: 14pt; color: #1e2229; background-color: #ffffff;\"><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; font-family: var(--gfg-font-secondary) !important; font-size: 17px !important; color: var(--text-color) !important; background-color: var(--background) !important;\">Expected Space Complexity:&nbsp;</span></span><span style=\"color: #1e2229; font-family: Nunito; font-size: 18.6667px; background-color: #ffffff;\">O(n</span><sup style=\"color: #1e2229; font-family: Nunito;\">2</sup><span style=\"color: #1e2229; font-family: Nunito; font-size: 18.6667px; background-color: #ffffff;\">)</span></p>\n<p><strong><span style=\"font-size: 18.6667px;\">Constraints:<br /></span></strong><span style=\"font-size: 18.6667px;\">1 &lt;= mat.size() &lt;=15<sup><br /></sup></span><span style=\"font-size: 18.6667px;\">1 &lt;= mat[i][j] &lt;=10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square matrix `mat` of size n*n, construct a 2D linked list representation of the matrix. Each node in the linked list will correspond to an element in the matrix.  The 'right' pointer of a node should point to the node representing the element to its right in the matrix. The 'down' pointer of a node should point to the node representing the element below it in the matrix.",
                "constraints": [
                    "1 <= mat.size() <= 15",
                    "1 <= mat[i][j] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
                        "output": "A 2D linked list where the first row is 1->2->3, the second row is 4->5->6, the third row is 7->8->9. The first column is 1->4->7, the second column is 2->5->8, the third column is 3->6->9.",
                        "explanation": "The linked list represents the matrix with each node linked to its right and downward neighbors."
                    },
                    {
                        "input": "[[23, 28], [23, 28]]",
                        "output": "A 2D linked list where the first row is 23->28 and the second row is 23->28.  The first column is 23->23 and the second column is 28->28.",
                        "explanation": "The linked list represents the 2x2 matrix with appropriate 'right' and 'down' connections."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Construct a 2D linked list where each node contains matrix value, with right and down pointers to adjacent elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "factset"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to recursively construct the linked matrix from a given 2D matrix\nclass Solution {\n  public:\n    Node* constructUtil(vector<vector<int>>& mat, int i, int j, int m, int n) {\n        // Base case: if we are out of bounds, return NULL\n        if (i >= m || j >= n)\n            return NULL;\n\n        // Create a new Node with the current matrix value\n        Node* temp = new Node(mat[i][j]);\n\n        // Recursively construct the right and down pointers\n        temp->right = constructUtil(mat, i, j + 1, m, n);\n        temp->down = constructUtil(mat, i + 1, j, m, n);\n\n        // Return the constructed Node\n        return temp;\n    }\n\n    // Function to construct the linked matrix given a 2D matrix\n    Node* constructLinkedMatrix(vector<vector<int>>& mat) {\n        int m = mat.size();\n        int n = mat[0].size();\n        return constructUtil(mat, 0, 0, m, n);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Method to construct a linked list from a 2D array\n    static Node constructUtil(int arr[][], int i, int j, int m, int n) {\n        if (i >= m || j >= n) return null;\n\n        // Create a new node with data from the 2D array\n        Node temp = new Node(arr[i][j]);\n\n        // Recursively construct the right and down pointers\n        temp.right = constructUtil(arr, i, j + 1, m, n);\n        temp.down = constructUtil(arr, i + 1, j, m, n);\n\n        // Return the constructed node\n        return temp;\n    }\n\n    // Function to construct the linked list from a 2D array\n    static Node construct(int arr[][]) {\n        int m = arr.length;\n        int n = arr[0].length;\n        return constructUtil(arr, 0, 0, m, n);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\nclass Solution:\n\n    def constructUtil(self, mat, i, j, m, n):\n        # Base case: if index exceeds the matrix size, return None\n        if i >= n or j >= m:\n            return None\n\n        # Create a new node with the value from the matrix\n        temp = Node(mat[i][j])\n\n        # Construct the right and down pointers recursively\n        temp.right = self.constructUtil(mat, i, j + 1, m, n)\n        temp.down = self.constructUtil(mat, i + 1, j, m, n)\n\n        return temp\n\n    def constructLinkedMatrix(self, mat):\n        n = len(mat)\n        m = len(mat[0])\n        # Call the utility function to construct the linked matrix starting from the top-left corner (0, 0)\n        return self.constructUtil(mat, 0, 0, m, n)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructUtil(mat, i, j, m, n) {\n        if (i >= n || j >= m) return null; // Base case for recursion\n\n        let temp = new Node(mat[i][j]); // Create new node with current matrix value\n\n        // Construct right and down pointers recursively\n        temp.right = this.constructUtil(mat, i, j + 1, m, n);\n        temp.down = this.constructUtil(mat, i + 1, j, m, n);\n\n        return temp; // Return the constructed node\n    }\n\n    constructLinkedMatrix(mat) {\n        let n = mat.length;\n        let m = mat[0].length;\n        return this.constructUtil(mat, 0, 0, m, n); // Start from the top-left corner\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}