{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700056,
            "title": "Linked list of strings forms a palindrome",
            "titleSlug": "linked-list-of-strings-forms-a-palindrome",
            "content": "<p><span >Given a linked list with string data, check whether the combined string formed is palindrome. If the combined string is palindrome then return <strong>true </strong>otherwise return <strong>false</strong>.<br /></span></p>\n<p><strong><span >Example:</span></strong></p>\n<pre><span ><strong>Input:</strong><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700056/Web/Other/blobid0_1719813534.png\" width=\"400\" height=\"80\" /><br /><strong>Output : </strong>true<br /><strong>Explanation: A</strong>s string \"abcddcba\" is palindrome the function should return true.</span></pre>\n<pre><span ><strong>Input:</strong><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700056/Web/Other/blobid1_1719813588.png\" width=\"400\" height=\"80\" /><br /><strong>Output : </strong>false<br /><strong>Explanation: </strong>As string \"abcdba\" is not palindrome the function should return false.</span></pre>\n<p><span ><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: #1e2229; background-color: #ffffff; font-family: var(--gfg-font-secondary) !important;\">Expected Time Complexity: &nbsp;</span>O(n)<br /></span><span ><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: #1e2229; background-color: #ffffff; font-family: var(--gfg-font-secondary) !important;\">Expected Auxiliary Space: </span>O(n)</span></p>\n<p><span ><strong>Constraints:<br /></strong>1 &lt;= Node.data.length&lt;= 10<sup>3<br /></sup>1&lt;=list.length&lt;=10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Create a string by appending all the data items from the linkedlist and then check for palindrome</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "palindrome",
                "slug": "palindrome"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to check if a given string is a palindrome or not\nclass Solution {\n  public:\n    bool isPalin(string str) {\n        int length = str.length();\n        for (int i = 0; i < length; i++) {\n            if (str[i] != str[length - 1 - i])\n                return false;\n        }\n        return true;\n    }\n\n    // Function to compute if the linked list forms a palindrome\n    bool compute(struct Node* root) {\n        string a = \"\"; // Initialize an empty string\n        struct Node* temp =\n            root; // Create a temporary node pointer and assign it the root value\n        if (temp == NULL)\n            return false; // If the linked list is empty, return false\n        while (temp) {\n            a.append(temp->data); // Append the data of each node to the string 'a'\n            temp = temp->next;    // Move to the next node\n        }\n        return isPalin(a); // Check if the string 'a' is a palindrome\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public boolean isPalin(String str) {\n        int length = str.length();\n        for (int i = 0; i < length; i++) {\n            if (str.charAt(i) != str.charAt(length - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean compute(Node root) {\n        String a = \"\";\n        Node temp = root;\n        if (temp == null) {\n            return false;\n        }\n        while (temp != null) {\n            a += temp.data;\n            temp = temp.next;\n        }\n        return isPalin(a);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\n# Function to compute and check if the given linked list is a palindrome\ndef compute(h):\n    s = ''\n    # Iterating through the linked list and adding the data to a string\n    while h:\n        s += h.data\n        h = h.next\n    # Checking if the string is equal to its reverse, indicating it is a palindrome\n    return s == s[::-1]\n\n\n# Function to print the elements of the linked list\ndef printList(head):\n    # Iterating through the linked list and printing the data\n    while head:\n        print(head.data, end=' ')\n        head = head.next\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    compute(head) {\n        // Initialize an empty string to store the elements of the linked list.\n        let s = \"\";\n        // Create a temporary variable to traverse the linked list, starting from the\n        // head.\n        let temp = head;\n        // Traverse the linked list and concatenate the data of each node to the string.\n        while (temp !== null) {\n            s += temp.data;\n            temp = temp.next;\n        }\n        // Call the isPalin function with the concatenated string and return the result.\n        return this.isPalin(s);\n    }\n\n    isPalin(S) {\n        // Initialize pointers to the leftmost and rightmost elements of the string.\n        let l = 0, r = S.length - 1;\n        // Loop until the pointers meet in the middle.\n        while (l < r) {\n            // Check if the characters at the left and right positions are equal.\n            // If they are not equal, the string is not a palindrome, so return false.\n            if (S[l] !== S[r]) {\n                return false;\n            }\n            // Move the left pointer one position to the right.\n            l++;\n            // Move the right pointer one position to the left.\n            r--;\n        }\n        // If the loop completes without returning false, it means the string is a\n        // palindrome, so return true.\n        return true;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}