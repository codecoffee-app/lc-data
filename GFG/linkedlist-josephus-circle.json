{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703448,
            "title": "LinkedList Josephus Circle",
            "titleSlug": "linkedlist-josephus-circle",
            "content": "<p><span style=\"font-size: 18px;\">You are given two integers <strong>n</strong> and <strong>k</strong> where n represents the total number of people who are standing in a circle, and k represents the person who gets killed in each iteration.<br /></span><span style=\"font-size: 18px;\">You need to find which person is the last man standing. The indexing here starts from zero. The counting starts from the zero<sup>th</sup> person and after each killing, the counting resets and start from the next neighbor of the killed person.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 7, k = 3\n<strong>Output: </strong>3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:<br /></strong>With 7 people in the circle [0, 1, 2, 3, 4, 5, 6], counting every 3rd person:<br />First, person 2 is killed: circle becomes [0, 1, 3, 4, 5, 6]<br />Second, person 5 is killed: circle becomes [0, 1, 3, 4, 6]<br />Third, person 1 is killed: circle becomes [0, 3, 4, 6]<br />Next, person 6 is killed: circle becomes [0, 3, 4]<br />Next, person 4 is killed: circle becomes [0,3]<br />Finally, person 0 is killed, leaving 3 as the last person standing</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= k, n &lt;= 20</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use a LinkedList to simulate a circular one and use iterator to move to every k person, after killing kth person remove it from the LinkedList</p>"
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\npublic static int josephus(int n, int k)\n\t{\n\t    LinkedList<Integer> ll = new LinkedList<>();\n\t    \n\t    //adding numbers from 0 to n-1\n\t    //denoting the id of the people\n\t    for(int i=0;i<n;i++)\n\t    {\n\t        ll.add(i);\n\t    }\n\t    \n\t    //creating an iterator to the LinkedList\n\t   Iterator<Integer>it=ll.iterator();\n\t   \n\t   //running the while loop till one person remains\n\t   while(ll.size()>1)\n\t   {\n\t       //initializing the count of he living persons\n\t       int count=0;\n\t       \n\t       //running the loop till count of living persons is less than k\n\t       while(count<k)\n\t       {\n\t           //running the loop till count is less than k\n\t           //and list has next element\n\t           while(it.hasNext() && count<k)\n\t           {\n\t               it.next();\n\t               count++;\n\t               \n\t           }\n\t       \n\t            //since they are all standing in a circle\n\t            //therefor assigning the iteraror back to the \n\t            //starting psotion if count is less than k\n\t           if(count<k)\n\t           {\n\t               it=ll.iterator();\n\t               it.next();\n\t               count++;\n\t               \n\t               \n\t           }\n\t       }\n\t            //removing the kth person\n\t           it.remove();\n\t           \n\t   }\n\t   //returing then person who remains till the last\n\t   return ll.getFirst();\n\t}",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}