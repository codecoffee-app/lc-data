{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705190,
            "title": "Geek and knots",
            "titleSlug": "little-murph-and-knots0402",
            "content": "<p><span style=\"font-size:18px\">Given two walls A, B with M, N hooks respectively. You are given K ropes. By using one rope you can connect one hook on wall A with another hook on wall B. One hook can connect with only one rope.&nbsp;Find the number of <strong>different ways</strong> you can use all the K ropes.<br />\r\nTwo ways that use the&nbsp;<strong>exact same set</strong> of hooks from wall A <strong>and</strong> wall B are considered to be same.&nbsp;</span></p>\r\n\r\n<blockquote>\r\n<p><span style=\"font-size:18px\">For Example,&nbsp;<br />\r\nA1 &nbsp; &nbsp;A2 &nbsp; &nbsp;A3 &nbsp; &nbsp; </span><span style=\"font-size:18px\">&nbsp;is same as</span><span style=\"font-size:18px\">&nbsp;&nbsp; &nbsp; A1&nbsp;&nbsp; A2&nbsp;&nbsp; A3 &nbsp; &nbsp;&nbsp;</span><span style=\"font-size:18px\">and can be ignored.</span><br />\r\n<span style=\"font-size:18px\">&nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\r\nB1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; B2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;B2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B1</span></p>\r\n</blockquote>\r\n\r\n<p><span style=\"font-size:18px\">Because both knots are using same set of wall A hooks (A1, A3) and same set of wall B hooks (B1,B2)<br />\r\n<strong>Note:</strong>&nbsp;Answer can be large, return the answer modulo 10<sup>9</sup>+7.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nM = 3, N = 2, K = 2\r\n<strong>Output:</strong> 3\r\n<strong>Explanation: </strong>\r\nhooks on Wall A are A1, A2, A3.\r\nhooks on wall B are B1, B2. </span>\r\n<span style=\"font-size:18px\">Different Possible Knots are\r\nK1 = (A1-B1, A2-B2), K2 = (A1-B1, A3-B2), \r\nK3 = (A2-B1, A3-B2)  \r\nEach of these use different set of hooks from wall A. </span>\r\n\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nM = 2, N = 2, K = 2\r\n<strong>Output:</strong> 1\r\n<strong>Explanation: \r\n</strong>A1   A2 \r\n|    | \r\nB1   B2\r\nThere is only one way to select 2 hooks \r\nfrom wall A and 2 from wall B. </span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>knots()</strong> which takes M, N and K as input parameters and returns the number of possible knots. Return the answer modulo 10<sup>9</sup>+7.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(max(N2, M2))<br />\r\n<strong>Expected Auxiliary Space: </strong>O(max(N2, M2))</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N, M, K &le; 1000<br />\r\n1 &le; K &le; min(N, M)&nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two walls, A and B, with M and N hooks respectively. You have K ropes. Each rope connects one hook on wall A to one hook on wall B, and each hook can only be connected to one rope. Find the number of distinct ways to use all K ropes, modulo 10^9 + 7. Two configurations are considered the same if they use the exact same set of hooks from wall A and the exact same set of hooks from wall B, regardless of the specific pairings between those hooks.",
                "constraints": [
                    "1 <= N, M, K <= 1000",
                    "1 <= K <= min(N, M)"
                ],
                "testcases": [
                    {
                        "input": "M = 3, N = 2, K = 2",
                        "output": "3",
                        "explanation": "Wall A has hooks A1, A2, A3. Wall B has hooks B1, B2.  The possible distinct sets of connections are: {(A1-B1, A2-B2)}, {(A1-B1, A3-B2)}, {(A2-B1, A3-B2)}. Note that we only care about the sets of hooks used, not the specific pairings within those sets."
                    },
                    {
                        "input": "M = 2, N = 2, K = 2",
                        "output": "1",
                        "explanation": "Wall A has hooks A1, A2. Wall B has hooks B1, B2. There is only one way to select 2 hooks from wall A and 2 hooks from wall B: using all of them.  The connections are {(A1-B1, A2-B2)} or {(A1-B2, A2-B1)}, but since the *set* of hooks {A1, A2} on wall A and {B1, B2} on wall B are the same, these are not considered distinct arrangements."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find the combinatorial formula.<br />\nNumber of ways to choose K from M * Number of ways to choose K from N. </span></p>",
            "<p><span style=\"font-size:18px\"><sup>N</sup>C<sub>K</sub> * <sup>M</sup>C<sub>K</sub></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n// Function to calculate the number of knots\n\nclass Solution{\npublic:\n    int mod = 1000000007;\n    \n    int knots(int M, int N, int K){\n        \n        // Initialize a 2D array to store combinations\n        long comb[max(M,N)+1][max(M,N)+1];\n        \n        // Calculate combinations using dynamic programming\n        for(int i = 0;i <= max(M, N);i++){\n            \n            // Set first and last elements as 1\n            comb[i][0] = comb[i][i] = 1;\n            \n            // Calculate combinations for remaining elements\n            for(int j = 1;j < i;j++)\n                comb[i][j] = ((comb[i-1][j]%mod) + (comb[i-1][j-1]%mod))%mod;\n        }\n        \n        // Calculate the final answer using combinations\n        int ans = (comb[N][K]*comb[M][K])%mod;\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    static int mod = 1000000007;\r\n    static int knots(int M, int N, int K){\r\n        long [][] comb = new long[Math.max(M,N)+1][Math.max(M,N)+1];\r\n        for(int i = 0;i <= Math.max(M, N);i++){\r\n            comb[i][0] = comb[i][i] = 1;\r\n            for(int j = 1;j < i;j++)\r\n                comb[i][j] = ((comb[i-1][j]%mod) + (comb[i-1][j-1]%mod))%mod;\r\n        }\r\n        long ans = (comb[N][K]*comb[M][K])%mod;\r\n        return (int)ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def knots(self, M, N, K):\r\n        # code here\r\n        def s(a,b):\r\n            i=1\r\n            j=a\r\n            k=b\r\n            while(k>0):\r\n                k-=1\r\n                i=i*j\r\n                j-=1\r\n            #print(i)\r\n            p=1\r\n            for j in range(1,b+1):\r\n                p=p*j\r\n            #print(p)\r\n            return (i//p)\r\n        ans=s(M,K)*s(N,K)\r\n        return ans%(1000000007)",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    int mod = 1000000007;\n\n    public int knots(int M, int N, int K)\n    {\n        long[,] comb = new long[Math.Max(M, N) + 1, Math.Max(M, N) + 1];\n\n        for (int i = 0; i <= Math.Max(M, N); i++)\n        {\n            comb[i, 0] = comb[i, i] = 1;\n\n            for (int j = 1; j < i; j++)\n                comb[i, j] = ((comb[i - 1, j] % mod) + (comb[i - 1, j - 1] % mod)) % mod;\n        }\n\n        int ans = (int)((comb[N, K] * comb[M, K]) % mod);\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}