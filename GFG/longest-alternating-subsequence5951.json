{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705274,
            "title": "Longest alternating subsequence",
            "titleSlug": "longest-alternating-subsequence5951",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr</strong>. </span><span style=\"font-size: 18px;\">Your task is to find the <strong>longest </strong>length of a good sequence. </span><span style=\"font-size: 18px;\">A good sequence {<em>x1, x2, .. xn</em>} is an alternating sequence if its elements satisfy one of the following relations :</span></p>\n<p><span style=\"font-size: 18px;\">1.&nbsp; x1 &lt; x2 &gt; x3 &lt; x4 &gt; x5. . . . . and so on<br /></span><span style=\"font-size: 18px;\">2.&nbsp; x1 &gt;x2 &lt; x3 &gt; x4 &lt; x5. . . . . and so on</span></p>\n<p><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Note:&nbsp;</strong><span style=\"font-size: 18px;\">A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.</span><br /><br /><strong style=\"font-size: 18px;\">Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr= [1, 5, 4]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>The entire sequenece is a good sequence.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr= [</span><span style=\"font-size: 18px;\">1, 17, 5, 10, 13, 15, 10, 5, 16, 8]\n<strong>Output: </strong>7\n<strong>Explanation: </strong>There are several subsequences that achieve this length. \nOne maximum length good subsequences is [1, 17, 10, 13, 10, 16, 8].</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)<br /><br /><strong>Constraints:<br /></strong>1 &lt;= nums.size() &lt;= 10<sup>5&nbsp;</sup><strong><br /></strong></span><span style=\"font-size: 18px;\">1 &lt;= nums[i] &lt;= 10<sup>4&nbsp;</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr`, find the length of the longest good subsequence. A good sequence {x1, x2, ..., xn} is an alternating sequence if its elements satisfy one of the following conditions:\n\n1. x1 < x2 > x3 < x4 > x5 ...\n2. x1 > x2 < x3 > x4 < x5 ...\n\nA subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.",
                "constraints": [
                    "1 <= nums.size() <= 10^5",
                    "1 <= nums[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[1, 5, 4]",
                        "output": "3",
                        "explanation": "The entire sequence [1, 5, 4] satisfies the condition x1 < x2 > x3, thus it is a good sequence of length 3."
                    },
                    {
                        "input": "[1, 17, 5, 10, 13, 15, 10, 5, 16, 8]",
                        "output": "7",
                        "explanation": "One possible good subsequence of maximum length is [1, 17, 10, 13, 10, 16, 8]. It satisfies the condition x1 < x2 > x3 < x4 > x5 < x6 > x7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">We can construct the longest sequence with the help of local minimums and local maximums.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the maximum length of alternating subsequence\n    int alternatingMaxLength(vector<int>& arr) {\n        // If the size of the nums array is less than 2, return the size itself\n        if (arr.size() < 2)\n            return arr.size();\n        int up = 1, down = 1;\n        // Iterate through the nums array starting from the second element\n        for (int i = 1; i < arr.size(); i++) {\n            // If the current number is greater than the previous number, increase the\n            // \"up\" count\n            if (arr[i] > arr[i - 1])\n                up = down + 1;\n            // If the current number is less than the previous number, increase the\n            // \"down\" count\n            else if (arr[i] < arr[i - 1])\n                down = up + 1;\n        }\n        // Return the maximum value between \"up\" and \"down\"\n        return max(up, down);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public int alternatingMaxLength(int[] arr) {\n        // code here\n        int up = 1;\n        int down = 1;\n        int i = 0;\n        while (i < arr.length - 1) {\n            if (arr[i + 1] - arr[i] > 0)\n                up = down + 1;\n            else if (arr[i + 1] - arr[i] < 0)\n                down = up + 1;\n            i++;\n        }\n        if (up > down)\n            return up;\n        else\n            return down;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    # Function to find the maximum length of alternating subsequence\n    def alternatingMaxLength(self, arr):\n        # If the size of the nums list is less than 2, return the size itself\n        if len(arr) < 2:\n            return len(arr)\n\n        up = 1\n        down = 1\n\n        # Iterate through the nums list starting from the second element\n        for i in range(1, len(arr)):\n            # If the current number is greater than the previous number, increase the \"up\" count\n            if arr[i] > arr[i - 1]:\n                up = down + 1\n            # If the current number is less than the previous number, increase the \"down\" count\n            elif arr[i] < arr[i - 1]:\n                down = up + 1\n\n        # Return the maximum value between \"up\" and \"down\"\n        return max(up, down)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution {\n    // Complete this function\n    public int alternatingMaxLength(List<int> arr) {\n        // If the size of the nums list is less than 2, return the size itself\n        if (arr.Count < 2) return arr.Count;\n\n        int up = 1, down = 1;\n\n        // Iterate through the nums list starting from the second element\n        for (int i = 1; i < arr.Count; i++) {\n            // If the current number is greater than the previous number, increase the\n            // \"up\" count\n            if (arr[i] > arr[i - 1]) up = down + 1;\n            // If the current number is less than the previous number, increase the\n            // \"down\" count\n            else if (arr[i] < arr[i - 1])\n                down = up + 1;\n        }\n\n        // Return the maximum value between \"up\" and \"down\"\n        return Math.Max(up, down);\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    alternatingMaxLength(arr) {\n        if (arr.length < 2) {\n            return arr.length;\n        }\n\n        let up = 1;\n        let down = 1;\n\n        for (let i = 1; i < arr.length; i++) {\n            if (arr[i] > arr[i - 1]) {\n                up = down + 1;\n            } else if (arr[i] < arr[i - 1]) {\n                down = up + 1;\n            }\n        }\n\n        return Math.max(up, down);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}