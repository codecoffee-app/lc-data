{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703290,
            "title": "Longest Arithmetic Subsequence",
            "titleSlug": "longest-arithmetic-progression1019",
            "content": "<p><span >Given an array <strong>arr[]</strong> of sorted and distinct positive integers. The task is to find the length of the longest arithmetic progression in a given array<strong>.</strong></span></p>\n<p><span ><strong>Note: </strong></span><span style=\"font-size: 18.6667px;\">A sequence seq is an arithmetic progression if seq[i + 1] - seq[i] are all the same value (for 0 &lt;= i &lt; seq.length - 1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>arr[] = [1, 7, 10, 13, 14, 19]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest arithmetic progression is [1, 7, 13, 19].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>arr[] = [2, 4, 6, 8, 10]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The whole array is in AP.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(n<sup>2</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 1000<br />1 &le; arr[i] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr[]` of distinct positive integers, determine the length of the longest arithmetic progression (AP) within the array.\n\nNote: A sequence `seq` is considered an arithmetic progression if the difference between consecutive elements (seq[i+1] - seq[i]) is constant for all valid indices `i`.",
                "constraints": [
                    "1 <= arr.size() <= 1000",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[1, 7, 10, 13, 14, 19]",
                        "output": "4",
                        "explanation": "The longest arithmetic progression is [1, 7, 13, 19], with a common difference of 6. It has length 4."
                    },
                    {
                        "input": "[2, 4, 6, 8, 10]",
                        "output": "5",
                        "explanation": "The entire array [2, 4, 6, 8, 10] forms an arithmetic progression with a common difference of 2. It has length 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >To find the length of the longest arithmetic progression, use a 2D DP table to track the length of sequences with various differences.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "snapdeal",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the length of the longest arithmetic progression in the given\n    // array.\n    int lengthOfLongestAP(vector<int>& arr) {\n        int n = arr.size();\n        int ans =\n            0; // Variable to store the length of the longest arithmetic progression\n        int maxval = 0; // Variable to store the maximum value in the array\n\n        // Finding the maximum value in the array\n        for (int i = 0; i < n; i++) {\n            maxval = max(arr[i], maxval);\n        }\n\n        // Creating a 2D vector to store the lengths of arithmetic progressions for\n        // different differences\n        vector<vector<int>> dp(2 * maxval + 1, vector<int>(n, 0));\n\n        // Iterate through all pairs of elements to populate the dp array\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                // Calculating the difference between the elements arr[i] and arr[j],\n                // and adding maxval to ensure that the difference is positive\n                int dif = arr[i] - arr[j] + maxval;\n\n                // Storing the length of the arithmetic progression in dp[dif][i]\n                dp[dif][i] = dp[dif][j] + 1;\n\n                // Updating the length of the longest arithmetic progression if\n                // dp[dif][i] is larger\n                ans = max(ans, dp[dif][i]);\n            }\n        }\n\n        // Returning the length of the longest arithmetic progression, adding 1 to\n        // account for the initial element in the progression\n        return ans + 1;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the length of the longest arithmetic progression in the given\n    // array.\n    int lengthOfLongestAP(Integer[] arr) {\n        int n = arr.length;\n        int ans =\n            0; // Variable to store the length of the longest arithmetic progression\n        int maxval = 0; // Variable to store the maximum value in the array\n\n        // Finding the maximum value in the array\n        for (int i = 0; i < n; i++) {\n            maxval = Math.max(arr[i], maxval);\n        }\n\n        // Creating a 2D array to store the lengths of arithmetic progressions for\n        // different differences\n        int[][] dp = new int[2 * maxval + 1][n];\n\n        // Iterate through all pairs of indices to populate the dp array\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                // Calculating the difference between the elements arr[i] and arr[j],\n                // and adding maxval to ensure that the difference is positive\n                int dif = arr[i] - arr[j] + maxval;\n\n                // Storing the length of the arithmetic progression in dp[dif][i]\n                dp[dif][i] = dp[dif][j] + 1;\n\n                // Updating the length of the longest arithmetic progression if\n                // dp[dif][i] is larger\n                ans = Math.max(ans, dp[dif][i]);\n            }\n        }\n\n        // Returning the length of the longest arithmetic progression, adding 1 to\n        // account for the initial element in the progression\n        return ans + 1;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def lengthOfLongestAP(self, arr):\n        n = len(arr)\n        ans = 0\n        maxval = 0\n        #Finding the maximum value in the array A\n        for i in range(n):\n            maxval = max(arr[i], maxval)\n        #Creating a 2D array dp with size (2*maxval+1)xn\n        dp = [[0 for i in range(n)] for j in range(2 * maxval + 1)]\n        #Iterating through the array A\n        for i in range(n):\n            #Iterating through the array A from 0 to i-1\n            for j in range(i):\n                #Finding the difference between A[i] and A[j] and adding maxval\n                dif = arr[i] - arr[j] + maxval\n                #Updating the value in dp[dif][i] with the maximum of dp[dif][j] + 1\n                dp[dif][i] = dp[dif][j] + 1\n                #Updating ans with the maximum value between ans and dp[dif][i]\n                ans = max(ans, dp[dif][i])\n        #Returning the length of the longest arithmetic progression\n        return ans + 1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} Set\n * @param {number} n\n * @return {number}\n */\n\nclass Solution {\n    lengthOfLongestAP(arr) {\n\n        let n = arr.length;\n        let ans = 0;\n        let maxval = 0;\n        for (let i = 0; i < n; i++) {\n            maxval = Math.max(arr[i], maxval);\n        }\n        let dp = new Array(2 * maxval + 1).fill(0).map(() => new Array(n).fill(0));\n        for (let i = 1; i < n; ++i) {\n            for (let j = 0; j < i; ++j) {\n                let dif = arr[i] - arr[j] + maxval;\n                dp[dif][i] = dp[dif][j] + 1;\n                ans = Math.max(ans, dp[dif][i]);\n            }\n        }\n        return ans + 1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}