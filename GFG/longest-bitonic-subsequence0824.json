{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704595,
            "title": "Longest Bitonic subsequence",
            "titleSlug": "longest-bitonic-subsequence0824",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of positive integers. Find&nbsp;the <strong>maximum</strong> length of <strong>Bitonic subsequence.&nbsp;</strong><br />A subsequence of array is called Bitonic if it is first strictly increasing, then strictly decreasing. R</span><span style=\"font-size: 18px;\">eturn the maximum length of bitonic subsequence.</span><br />&nbsp;<br /><span ><strong>Note</strong> : A strictly increasing or a <strong>strictly</strong> decreasing sequence should not be considered as a bitonic sequence</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5, nums[] = [1, 2, 5, 3, 2]\n<strong>Output: </strong>5\n<strong>Explanation: </strong>The sequence {1, 2, 5} is increasing and the sequence {3, 2} is decreasing so merging both we will get length 5.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 8, nums[] = [1, 11, 2, 10, 4, 5, 2, 1]\n<strong>Output: </strong>6\n<strong>Explanation: </strong>The bitonic sequence {1, 2, 10, 4, 2, 1} has length 6.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5, nums[] = [10, 20, 30]\n<strong>Output: </strong>0\n<strong>Explanation: </strong>The decreasing or increasing part cannot be empty</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3, nums[] = [10, 10, 10]\n<strong>Output: </strong>0\n<strong>Explanation: </strong>The subsequences must be strictly increasing or decreasing</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le;&nbsp;length of array &le; 10<sup>3</sup><br />1 &le; arr[i] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, find the maximum length of a Bitonic subsequence. A Bitonic subsequence is defined as a subsequence that is first strictly increasing and then strictly decreasing. Note that a strictly increasing or strictly decreasing sequence alone is not considered a Bitonic sequence.",
                "constraints": [
                    "1 <= length of array <= 10^3",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 5, nums[] = [1, 2, 5, 3, 2]",
                        "output": "5",
                        "explanation": "The subsequence {1, 2, 5} is increasing, and the subsequence {3, 2} is decreasing.  Combining them results in a Bitonic subsequence of length 5."
                    },
                    {
                        "input": "n = 8, nums[] = [1, 11, 2, 10, 4, 5, 2, 1]",
                        "output": "6",
                        "explanation": "The bitonic sequence {1, 2, 10, 4, 2, 1} has length 6."
                    },
                    {
                        "input": "n = 5, nums[] = [10, 20, 30]",
                        "output": "0",
                        "explanation": "A Bitonic sequence must have both an increasing and a decreasing part.  A strictly increasing or decreasing sequence does not qualify as Bitonic."
                    },
                    {
                        "input": "n = 3, nums[] = [10, 10, 10]",
                        "output": "0",
                        "explanation": "The subsequences must be strictly increasing or strictly decreasing."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find the longest increasing sequence and the longest decreasing sequence.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft",
            "cisco"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int LongestBitonicSequence(int n, vector<int> nums) {\n        vector<int> lis(n, 1);\n        /* Compute LIS values from left to right */\n        for (int i = 1; i < n; i++)\n            for (int j = 0; j < i; j++)\n                if (nums[i] > nums[j] and lis[i] < lis[j] + 1)\n                    lis[i] = lis[j] + 1; // updating LIS value for current index\n\n        vector<int> lds(n, 1);\n        /* Compute LDS values from right to left */\n        for (int i = n - 2; i >= 0; i--)\n            for (int j = n - 1; j > i; j--)\n                if (nums[i] > nums[j] and lds[i] < lds[j] + 1)\n                    lds[i] = lds[j] + 1; // updating LDS value for current index\n\n        /* Return the maximum value of lis[i] + lds[i] - 1*/\n        int ans = 0; // initializing ans with length of longest bitonic sequence\n        for (int i = 1; i < n - 1; i++)\n            if (lis[i] > 1 && lds[i] > 1) {\n                ans = max(ans,\n                          lis[i] + lds[i] - 1); // updating ans if current index has\n                                                // non-zero values for both LIS and LDS\n            }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int LongestBitonicSequence(int n, int[] nums) {\n        int[] lis = new int[n];\n        Arrays.fill(lis, 1);\n        /* Compute LIS values from left to right */\n        for (int i = 1; i < n; i++)\n            for (int j = 0; j < i; j++)\n                if (nums[i] > nums[j] && lis[i] < lis[j] + 1)\n                    lis[i] = lis[j] + 1; // updating LIS value for current index\n\n        int[] lds = new int[n];\n        Arrays.fill(lds, 1);\n        /* Compute LDS values from right to left */\n        for (int i = n - 2; i >= 0; i--)\n            for (int j = n - 1; j > i; j--)\n                if (nums[i] > nums[j] && lds[i] < lds[j] + 1)\n                    lds[i] = lds[j] + 1; // updating LDS value for current index\n\n        /* Return the maximum value of lis[i] + lds[i] - 1*/\n        int ans = 0; // initializing ans with length of longest bitonic sequence\n        for (int i = 1; i < n - 1; i++)\n            if (lis[i] > 1 && lds[i] > 1) {\n                ans = Math.max(\n                    ans, lis[i] + lds[i] - 1); // updating ans if current index has\n                                               // non-zero values for both LIS and LDS\n            }\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def LongestBitonicSequence(self, n, nums):\n        lis = [1] * n\n        # Compute LIS values from left to right\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j] and lis[i] < lis[j] + 1:\n                    lis[i] = lis[j] + 1  # updating LIS value for current index\n\n        lds = [1] * n\n        # Compute LDS values from right to left\n        for i in range(n - 2, -1, -1):\n            for j in range(n - 1, i, -1):\n                if nums[i] > nums[j] and lds[i] < lds[j] + 1:\n                    lds[i] = lds[j] + 1  # updating LDS value for current index\n\n        # Return the maximum value of lis[i] + lds[i] - 1\n        ans = 0  # initializing ans with length of longest bitonic sequence\n        for i in range(1, n - 1):\n            if lis[i] > 1 and lds[i] > 1:\n                ans = max(\n                    ans, lis[i] + lds[i] - 1\n                )  # updating ans if current index has non-zero values for both LIS and LDS\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n    * @param number n\n    * @param number[] nums\n\n    * @returns number\n    */\n    LongestBitonicSequence(n, nums) {\n        // code here\n        // Compute LIS values from left to right\n        let lis = new Array(n).fill(1);\n        for (let i = 1; i < n; i++) {\n            for (let j = 0; j < i; j++) {\n                if (nums[i] > nums[j] && lis[i] < lis[j] + 1) {\n                    lis[i] = lis[j] + 1; // Updating LIS value for current index\n                }\n            }\n        }\n\n        // Compute LDS values from right to left\n        let lds = new Array(n).fill(1);\n        for (let i = n - 2; i >= 0; i--) {\n            for (let j = n - 1; j > i; j--) {\n                if (nums[i] > nums[j] && lds[i] < lds[j] + 1) {\n                    lds[i] = lds[j] + 1; // Updating LDS value for current index\n                }\n            }\n        }\n\n        // Find the maximum value of lis[i] + lds[i] - 1\n        let ans = 0; // Initializing the answer\n        for (let i = 1; i < n - 1; i++) {\n            if (lis[i] > 1 && lds[i] > 1) {\n                ans = Math.max(ans, lis[i] + lds[i] - 1); // Updating answer\n            }\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}