{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703368,
            "title": "Longest Common Increasing Subsequence",
            "titleSlug": "longest-common-increasing-subsequence1437",
            "content": "<p><span style=\"font-size: 18px;\">Given two arrays, <strong>a[]</strong> and <strong>b[]</strong>, find the length of the longest common increasing subsequence(LCIS).&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a[] = [3, 4, 9, 1], b[] = [5, 3, 8, 9, 10, 2, 1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest increasing subsequence that is common is {3, 9} and its length is 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a[] = [1, 1, 4, 3], b[] = [1, 1, 3, 4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There are two common subsequences {1, 4} and {1, 3} both of length 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= a.size(), b.size() &lt;= 10<sup>3</sup><br />1 &lt;= a[i], b[i] &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use dynamic programming with a dp array to track the length of the longest common increasing subsequence. Compare elements of both arrays and update dp based on matches and previous values.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\nclass Solution {\n  public:\n    int LCIS(vector<int>& arr1, vector<int>& arr2) {\n        int m = arr1.size();\n        int n = arr2.size();\n\n        // Initialize table to store lengths of LCIS\n        vector<int> table(n, 0);\n\n        // Traverse all elements of arr1[]\n        for (int i = 0; i < m; i++) {\n            // Initialize current length of LCIS\n            int current = 0;\n\n            // For each element of arr1[], traverse all elements of arr2[]\n            for (int j = 0; j < n; j++) {\n                // If both arrays have the same element\n                if (arr1[i] == arr2[j]) {\n                    if (current + 1 > table[j]) {\n                        table[j] = current + 1;\n                    }\n                }\n\n                // Seek for the previous smaller common element for current element of\n                // arr1\n                if (arr1[i] > arr2[j]) {\n                    if (table[j] > current) {\n                        current = table[j];\n                    }\n                }\n            }\n        }\n\n        // The maximum value in table[] is the result\n        return *max_element(table.begin(), table.end());\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Backend complete function template for Java\nclass Solution {\n    public int LCIS(int[] arr1, int[] arr2) {\n        int m = arr1.length;\n        int n = arr2.length;\n\n        // Initialize table to store lengths of LCIS\n        int[] table = new int[n];\n        Arrays.fill(table, 0);\n\n        // Traverse all elements of arr1[]\n        for (int i = 0; i < m; i++) {\n            // Initialize current length of LCIS\n            int current = 0;\n\n            // For each element of arr1[], traverse all elements of arr2[]\n            for (int j = 0; j < n; j++) {\n                // If both arrays have the same element\n                if (arr1[i] == arr2[j]) {\n                    if (current + 1 > table[j]) {\n                        table[j] = current + 1;\n                    }\n                }\n\n                // Seek for the previous smaller common element for current element of\n                // arr1\n                if (arr1[i] > arr2[j]) {\n                    if (table[j] > current) {\n                        current = table[j];\n                    }\n                }\n            }\n        }\n\n        // The maximum value in table[] is the result\n        int result = 0;\n        for (int i = 0; i < n; i++) {\n            if (table[i] > result) {\n                result = table[i];\n            }\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def LCIS(self, arr1, arr2):\n        m = len(arr1)  # Get the length of arr1\n        n = len(arr2)  # Get the length of arr2\n\n        # Initialize a dp array to store the lengths of LCIS ending at each element in arr2\n        dp = [0] * n\n\n        for i in range(m):  # Iterate through arr1\n            current = 0  # Initialize a variable to keep track of the maximum LCIS length seen so far\n            for j in range(n):  # Iterate through arr2\n                if arr1[i] == arr2[j]:  # If elements match\n                    dp[j] = max(\n                        dp[j], current + 1\n                    )  # Update dp[j] if a longer LCIS ending at arr2[j] is found\n                if arr1[i] > arr2[j]:  # If arr1[i] is greater than arr2[j]\n                    current = max(\n                        current, dp[j]\n                    )  # Update current to the maximum LCIS length seen so far\n        return max(dp)  # Return the maximum LCIS length found in dp\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @returns {number}\n */\n\nclass Solution {\n    LCIS(arr1, arr2) {\n        const m = arr1.length;\n        const n = arr2.length;\n        const dp = new Array(n).fill(0); // Initialize dp array to store LCIS lengths\n\n        for (let i = 0; i < m; i++) {\n            let current = 0;\n            for (let j = 0; j < n; j++) {\n                if (arr1[i] === arr2[j]) {\n                    dp[j] = Math.max(dp[j], current + 1);\n                }\n                if (arr1[i] > arr2[j]) {\n                    current = Math.max(current, dp[j]);\n                }\n            }\n        }\n\n        return Math.max(...dp); // Return the maximum value in dp\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}