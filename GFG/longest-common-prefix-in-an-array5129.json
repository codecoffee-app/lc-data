{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703199,
            "title": "Longest Common Prefix of Strings",
            "titleSlug": "longest-common-prefix-in-an-array5129",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of strings <strong>arr[].</strong>&nbsp;Return the <strong>longest common prefix</strong> among each and every strings present in the array. </span><span style=\"font-size: 18px;\">If there's no prefix common in all the strings, return \"\".</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [\"geeksforgeeks\", \"geeks\", \"geek\", \"geezer\"]\n<strong>Output:</strong> \"gee\"\n<strong>Explanation</strong>: \"gee\" is the longest common prefix in all the given strings.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [\"hello\", \"world\"]\n<strong>Output:</strong> \"\"\n<strong>Explanation</strong>: There's no common prefix in the given strings.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |arr| &le; 10<sup>3</sup><br />1 &le; |arr[i]| &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of strings `arr[]`, find the longest common prefix string amongst all strings in the array. If there is no common prefix, return an empty string \"\".",
                "constraints": [
                    "1 <= |arr| <= 1000",
                    "1 <= |arr[i]| <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[\"geeksforgeeks\", \"geeks\", \"geek\", \"geezer\"]",
                        "output": "gee",
                        "explanation": "The longest string that is a prefix of all the input strings is \"gee\"."
                    },
                    {
                        "input": "[\"hello\", \"world\"]",
                        "output": "",
                        "explanation": "There is no common prefix between the input strings, so the output is an empty string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Traverse the first string and check till which index its characters can be placed in the result.&nbsp;<br />If there comes a character which cannot be placed, we simply break out without checking for the further characters.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "vmware",
            "microsoft",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    string longestCommonPrefix(vector<string> arr) {\n        int n = arr.size();\n        if (n == 1)\n            return arr[0];\n\n        string res = \"\";\n        bool include;\n        for (int i = 0; i < arr[0].length(); ++i) {\n            include = true;\n            for (int j = 1; j < n; ++j) {\n                // checking if the current character arr[0][i] is eligible\n                // for being included in the result or not\n                if (i >= arr[j].length() || arr[0][i] != arr[j][i]) {\n                    include = false;\n                    break;\n                }\n            }\n            // if it can't be included, we need not check the further characters\n            if (!include)\n                break;\n            // if it can be included, we include it and check ahead\n            res += arr[0][i];\n        }\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Backend complete function template for JAVA\n\nclass Solution {\n    public String longestCommonPrefix(String arr[]) {\n        int n = arr.length;\n        if (n == 1) return arr[0];\n        String res = \"\";\n        boolean include;\n        for (int i = 0; i < arr[0].length(); ++i) {\n            include = true;\n            for (int j = 1; j < n; ++j) {\n                // checking if the current character arr[0][i] is eligible\n                // for being included in the result or not\n                if (i >= arr[j].length() || arr[0].charAt(i) != arr[j].charAt(i)) {\n                    include = false;\n                    break;\n                }\n            }\n            // if it can't be included, we need not check the further characters\n            if (!include) break;\n            // if it can be included, we include it and check ahead\n            res += arr[0].charAt(i);\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function template for Python\n\n\nclass Solution:\n\n    #Function to find the longest common prefix.\n    def longestCommonPrefix(self, arr):\n        n = len(arr)\n        #If there is only one string in the array, it is the longest common prefix.\n        if n == 1: return arr[0]\n        res = \"\"\n        include = False\n\n        #Iterating over the characters of the first string in the array.\n        for i in range(len(arr[0])):\n            include = True\n\n            #Iterating over the strings in the array to check if the character at the current index\n            #is present in all the strings.\n            for j in range(n):\n\n                #If the current index is beyond the length of any string in the array or if the character\n                #at the current index is different from the character in the first string at the same index,\n                #then the character is not included in the common prefix.\n                if i >= len(arr[j]) or arr[0][i] != arr[j][i]:\n                    include = False\n                    break\n\n            #If the character at the current index is included in the common prefix for all strings,\n            #it is added to the result string.\n            if include == False: break\n            res += arr[0][i]\n\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public string LongestCommonPrefix(string[] arr) {\n        int n = arr.Length;\n        if (n == 0) return \"\";\n\n        string prefix = arr[0];\n\n        for (int i = 1; i < n; i++) {\n            while (!arr[i].StartsWith(prefix)) {\n                if (prefix.Length == 0) return \"\";\n                prefix = prefix.Substring(0, prefix.Length - 1);\n            }\n        }\n\n        return prefix;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string[]} arr\n * @param {number} n\n * @returns {string}\n */\n\nclass Solution {\n    longestCommonPrefix(arr) {\n        let n = arr.length;\n        if (n == 1) return arr[0];\n\n        let res = \"\";\n        let include;\n        for (let i = 0; i < arr[0].length; ++i) {\n            include = true;\n            for (let j = 1; j < n; ++j) {\n                // checking if the current character arr[0][i] is eligible\n                // for being included in the result or not\n                if (i >= arr[j].length || arr[0][i] != arr[j][i]) {\n                    include = false;\n                    break;\n                }\n            }\n            // if it can't be included, we need not check the further characters\n            if (!include) break;\n            // if it can be included, we include it and check ahead\n            res += arr[0][i];\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}