{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701429,
            "title": "Longest Common Subsequence",
            "titleSlug": "longest-common-subsequence-1587115620",
            "content": "<p><span >Given two strings <strong><code>s1</code></strong> and <strong><code>s2</code></strong>, return the length of their <strong>longest common subsequence </strong>(LCS). If there is no common subsequence, return <strong>0</strong>.</span></p>\n<p><span ><em><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; text-align: justify; background-color: #f9f9f9;\"><span style=\"color: #273239; font-family: Nunito, sans-serif;\"><span style=\"letter-spacing: 0.162px;\">A subsequence is a sequence that can be derived from the given string by deleting some or no elements without changing the order of the remaining elements. </span></span><span style=\"color: #273239; font-family: Nunito, sans-serif;\"><span style=\"letter-spacing: 0.162px;\">For example, \"ABE\" is a subsequence of \"ABCDE\".</span></span></span></em></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s1 = \"ABCDGH\", s2 = \"AEDFHR\"\n<strong>Output: </strong>3<strong>\nExplanation: </strong>The longest common subsequence of \"ABCDGH\" and \"AEDFHR\" is \"ADH\", which has a length of 3.\n</span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"ABC\", s2 = \"AC\"\n<strong>Output: </strong>2<strong>\nExplanation: </strong>The longest common subsequence of \"ABC\" and \"AC\" is \"AC\", which has a length of 2.</span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"XYZW\", s2 = \"XYWZ\"\n<strong>Output: </strong>3<strong>\nExplanation: </strong>The longest common subsequences of \"XYZW\" and \"XYWZ\" are \"XYZ\" and \"XYW\", both of length 3.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1&lt;= s1.size(), s2.size() &lt;=10<sup>3<br /></sup>Both strings s1 and s2 contain only uppercase English letters.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings `s1` and `s2`, find the length of their longest common subsequence (LCS). A subsequence is a sequence that can be derived from a string by deleting some or no elements without changing the order of the remaining elements. If no common subsequence exists, return 0.",
                "constraints": [
                    "1 <= s1.size(), s2.size() <= 1000",
                    "Both strings s1 and s2 contain only uppercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"ABCDGH\", s2 = \"AEDFHR\"",
                        "output": "3",
                        "explanation": "The longest common subsequence is \"ADH\", which has a length of 3."
                    },
                    {
                        "input": "s1 = \"ABC\", s2 = \"AC\"",
                        "output": "2",
                        "explanation": "The longest common subsequence is \"AC\", which has a length of 2."
                    },
                    {
                        "input": "s1 = \"XYZW\", s2 = \"XYWZ\"",
                        "output": "3",
                        "explanation": "The longest common subsequences are \"XYZ\" and \"XYW\", both of length 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use <strong>dynamic programming</strong> where <code>DP[i][j]</code> represents the length of the longest common subsequence of <code>s1[0...i-1]</code> and <code>s2[0...j-1]</code></span></p>",
            "<p><span >If <code>s1[i-1] == s2[j-1]</code>, then <code>DP[i][j] = DP[i-1][j-1] + 1</code>; otherwise, <code>DP[i][j] = max(DP[i-1][j], DP[i][j-1])</code></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "vmware",
            "amazon",
            "microsoft",
            "citrix",
            "makemytrip"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int lcs(string& s1, string& s2) {\n        int m = s1.length(), n = s2.length();\n\n        // dp vector is initialized to all zeros\n        // This vector stores the LCS values for the current row.\n        // dp[j] represents LCS of s1[0..i] and s2[0..j]\n        vector<int> dp(n + 1, 0);\n\n        // i and j represent the lengths of s1 and s2 respectively\n        for (int i = 1; i <= m; ++i) {\n\n            // prev stores the value from the previous\n            // row and previous column (i-1), (j -1)\n            // Used to keep track of LCS[i-1][j-1] while updating dp[j]\n            int prev = dp[0];\n\n            for (int j = 1; j <= n; ++j) {\n\n                // temp temporarily stores the current\n                // dp[j] before it gets updated\n                int temp = dp[j];\n\n                // If characters match, add 1 to the value\n                // from the previous row and previous column\n                // dp[j] = 1 + LCS[i-1][j-1]\n                if (s1[i - 1] == s2[j - 1])\n                    dp[j] = 1 + prev;\n                else\n                    // Otherwise, take the maximum of the\n                    // left (dp[j-1]) and top (dp[j]) values\n                    dp[j] = max(dp[j - 1], dp[j]);\n\n                // Update prev for the next iteration\n                // This keeps the value of the previous\n                // row (i-1) for future comparisons\n                prev = temp;\n            }\n        }\n\n        // The last element of the vector contains the length of the LCS\n        // dp[n] stores the length of LCS of s1[0..m] and s2[0..n]\n        return dp[n];\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    static int lcs(String s1, String s2) {\n        int m = s1.length();\n        int n = s2.length();\n\n        // dp array is initialized to all zeros\n        int[] dp = new int[n + 1];\n\n        // i and j represent the lengths of s1 and s2 respectively\n        for (int i = 1; i <= m; ++i) {\n\n            // prev stores the value from the previous\n            // row and previous column (i-1), (j -1)\n            int prev = dp[0];\n\n            for (int j = 1; j <= n; ++j) {\n\n                // temp temporarily stores the current\n                // dp[j] before it gets updated\n                int temp = dp[j];\n                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n\n                    // If characters match, add 1 to the value\n                    // from the previous row and previous column\n                    dp[j] = 1 + prev;\n                } else {\n\n                    // Otherwise, take the maximum of the\n                    // left and top values\n                    dp[j] = Math.max(dp[j - 1], dp[j]);\n                }\n\n                // Update prev for the next iteration\n                prev = temp;\n            }\n        }\n\n        // The last element of the array contains\n        // the length of the LCS\n        return dp[n];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def lcs(self, s1, s2):\n        m = len(s1)\n        n = len(s2)\n\n        # dp array is initialized to all zeros\n        dp = [0] * (n + 1)\n\n        # i and j represent the lengths of s1\n        # and s2 respectively\n        for i in range(1, m + 1):\n\n            # prev stores the value from the previous\n            # row and previous column (i-1), (j -1)\n            prev = dp[0]\n\n            for j in range(1, n + 1):\n\n                # temp temporarily stores the current\n                # dp[j] before it gets updated\n                temp = dp[j]\n                if s1[i - 1] == s2[j - 1]:\n\n                    # If characters match, add 1 to the value\n                    # from the previous row and previous column\n                    dp[j] = 1 + prev\n                else:\n\n                    # Otherwise, take the maximum of the\n                    # left and top values\n                    dp[j] = max(dp[j - 1], dp[j])\n\n                # Update prev for the next iteration\n                prev = temp\n\n        # The last element of the list contains\n        # the length of the LCS\n        return dp[n]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int lcs(string s1, string s2) {\n        int m = s1.Length;\n        int n = s2.Length;\n\n        // dp array is initialized to all zeros\n        int[] dp = new int[n + 1];\n\n        // i and j represent the lengths of\n        // s1 and s2 respectively\n        for (int i = 1; i <= m; ++i) {\n\n            // prev stores the value from the previous\n            // row and previous column (i-1), (j -1)\n            int prev = dp[0];\n\n            for (int j = 1; j <= n; ++j) {\n\n                // temp temporarily stores the current\n                // dp[j] before it gets updated\n                int temp = dp[j];\n                if (s1[i - 1] == s2[j - 1]) {\n\n                    // If characters match, add 1 to the value\n                    // from the previous row and previous column\n                    dp[j] = 1 + prev;\n                } else {\n\n                    // Otherwise, take the maximum of the\n                    // left and top values\n                    dp[j] = Math.Max(dp[j - 1], dp[j]);\n                }\n\n                // Update prev for the next iteration\n                prev = temp;\n            }\n        }\n\n        // The last element of the array\n        // contains the length of the LCS\n        return dp[n];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for JavaScript\n\n/**\n * @param {string} s1\n * @param {string} s2\n * @returns {number}\n */\nclass Solution {\n    lcs(s1, s2) {\n        const m = s1.length;\n        const n = s2.length;\n\n        // dp array is initialized to all zeros\n        const dp = Array(n + 1).fill(0);\n\n        // i and j represent the lengths of s1 and s2\n        // respectively\n        for (let i = 1; i <= m; ++i) {\n\n            // prev stores the value from the previous\n            // row and previous column (i-1), (j -1)\n            let prev = dp[0];\n\n            for (let j = 1; j <= n; ++j) {\n\n                // temp temporarily stores the current\n                // dp[j] before it gets updated\n                const temp = dp[j];\n                if (s1[i - 1] === s2[j - 1]) {\n\n                    // If characters match, add 1 to the value\n                    // from the previous row and previous column\n                    dp[j] = 1 + prev;\n                } else {\n\n                    // Otherwise, take the maximum of the\n                    // left and top values\n                    dp[j] = Math.max(dp[j - 1], dp[j]);\n                }\n\n                // Update prev for the next iteration\n                prev = temp;\n            }\n        }\n\n        // The last element of the array\n        // contains the length of the LCS\n        return dp[n];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}