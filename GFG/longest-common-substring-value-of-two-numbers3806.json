{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703204,
            "title": "Longest common substring value of two numbers",
            "titleSlug": "longest-common-substring-value-of-two-numbers3806",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">Given two integers n and m. Find the <strong>longest common contiguous subset</strong> in binary representation of both the numbers and print its decimal value.</span><br /><span style=\"font-size: 18px;\"><strong>Note</strong>: If there's a tie in the length of the longest common contiguous subset, return the one with the <strong>highest decimal value</strong> among them.</span><br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: n</strong> = 10, m = 11\n<strong>Output:</strong> 5\n<strong>Explanation</strong>: 10 in Binary is \"1010\" and\n11 in Binary is \"1011\". The longest common\ncontiguous subset is \"101\" which has a\ndecimal value of 5.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 8, m = 16\n<strong>Output:</strong> 8\n<strong>Explanation</strong>: 8 in Binary is \"1000\" and\n16 in Binary is \"10000\". The longest common\ncontiguous subset is \"1000\" which has a\ndecimal value of 8.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>longestCommon()&nbsp;</strong>which takes two integers n and m as inputs and returns the Decimal representation of the longest common contiguous subset in the Binary representation of n and m.<br /><br /></span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O((log(max (n, m))<sup>3</sup>).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O((log(max (n, m))<sup>2</sup>).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=n,m&lt;=10<sup>10</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, `n` and `m`, find the longest common contiguous subset in their binary representations. Return the decimal value of this subset.\n\nNote: If there is a tie in the length of the longest common contiguous subset, return the one with the highest decimal value among them.",
                "constraints": [
                    "1 <= n, m <= 10^10"
                ],
                "testcases": [
                    {
                        "input": "n = 10, m = 11",
                        "output": "5",
                        "explanation": "10 in binary is '1010', and 11 in binary is '1011'. The longest common contiguous subset is '101', which has a decimal value of 5."
                    },
                    {
                        "input": "n = 8, m = 16",
                        "output": "8",
                        "explanation": "8 in binary is '1000', and 16 in binary is '10000'. The longest common contiguous subset is '1000', which has a decimal value of 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Reduce the Q to find the longest common substring in the 2 strings representing the binary forms of the numbers.</span></p>\n<p><span style=\"font-size: 18px;\">Note: Make sure you choose the substring with the maximum decimal value in case 2 or more substrings have the maximum length.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "citrix"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "long long int decimal (string bin)\n{\n    long long int temp = 1, ans = 0;\n\n    for (int i = bin.length () - 1; i >= 0; --i)\n    {\n        ans += (bin[i] - '0') * temp;\n        temp *= 2;\n    }\n    return ans;\n}\n\nlong long int longestCommonSubstr (string s1, string s2, int n, int m)\n{\n    // dp[i][j] stores the longest common substring length\n    // in s1[0...i-1] and s2[0....j-1]\n\n    int dp[n + 1][m + 1];\n\n    // if one of strings have length zero, longest common substring\n    // will also be of 0 length\n    for (int i = 0; i < n; ++i)\n        dp[i][0] = 0;\n\n    for (int i = 0; i < m; ++i)\n        dp[0][i] = 0;\n\n    int res = 0, maxlen = 0;\n    string bin = \"\";\n    for (int i = 1; i <= n; ++i)\n    {\n        for (int j = 1; j <= m; ++j)\n        {\n            // if current characters are same, we increase the length by 1\n            if (s1[i - 1] == s2[j - 1])\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n            // else, there's no common substring ending at i - 1 and j - 1\n            else\n                dp[i][j] = 0;\n\n            // updating the answer if we got a substring with same length\n            // but higher value\n            if (dp[i][j] == maxlen)\n            {\n                if (decimal (s1.substr (i - dp[i][j], dp[i][j])) > decimal (bin))\n                {\n                    bin = s1.substr (i - dp[i][j], dp[i][j]);\n                    maxlen = dp[i][j];\n                }\n            }\n\n            // updating the answer if we got a substring with greater length\n            else if (dp[i][j] > maxlen)\n            {\n                maxlen = dp[i][j];\n                bin = s1.substr (i - dp[i][j], dp[i][j]);\n            }\n        }\n    }\n    return decimal (bin);\n}\n\nlong long int longestCommon (long long int n1, long long int n2)\n{\n    string b1 = \"\";\n    string b2 = \"\";\n\n    while (n1)\n    {\n        if (n1 % 2 == 1) b1 += \"1\";\n        else b1 += \"0\";\n\n        n1 /= 2;\n    }\n\n    reverse (b1.begin (), b1.end ());\n\n    while (n2)\n    {\n        if (n2 % 2 == 1) b2 += \"1\";\n        else b2 += \"0\";\n\n        n2 /= 2;\n    }\n\n    reverse (b2.begin (), b2.end ());\n\n    return longestCommonSubstr (b1, b2, b1.length (), b2.length ());\n}\n// Contributed By: Pranay Bansal\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n    * @param number n\n    * @param number m\n\n    * @returns number\n    */\n    decimal(bin) {\n        let temp = 1, ans = 0;\n\n        for (let i = bin.length - 1; i >= 0; --i) {\n            ans += (bin[i] - '0') * temp;\n            temp *= 2;\n        }\n        return ans;\n    }\n\n    longestCommonSubstr(s1, s2, n, m) {\n        // dp[i][j] stores the longest common substring length\n        // in s1[0...i-1] and s2[0....j-1]\n\n        let dp = Array.from({length : n + 1}, () => Array(m + 1).fill(0));\n\n        // if one of strings have length zero, longest common substring\n        // will also be of 0 length\n        for (let i = 0; i < n; ++i) dp[i][0] = 0;\n\n        for (let j = 0; j < m; ++j) dp[0][j] = 0;\n\n        let res = 0, maxlen = 0;\n        let bin = \"\";\n        for (let i = 1; i <= n; ++i) {\n            for (let j = 1; j <= m; ++j) {\n                // if current characters are same, we increase the length by 1\n                if (s1[i - 1] === s2[j - 1]) dp[i][j] = 1 + dp[i - 1][j - 1];\n                // else, there's no common substring ending at i - 1 and j - 1\n                else\n                    dp[i][j] = 0;\n\n                // updating the answer if we got a substring with same length\n                // but higher value\n                if (dp[i][j] === maxlen) {\n                    if (this.decimal(s1.substr(i - dp[i][j], dp[i][j])) >\n                        this.decimal(bin)) {\n                        bin = s1.substr(i - dp[i][j], dp[i][j]);\n                        maxlen = dp[i][j];\n                    }\n                }\n\n                // updating the answer if we got a substring with greater length\n                else if (dp[i][j] > maxlen) {\n                    maxlen = dp[i][j];\n                    bin = s1.substr(i - dp[i][j], dp[i][j]);\n                }\n            }\n        }\n        return this.decimal(bin);\n    }\n\n    longestCommon(n1, n2) {\n\n        //   console.log(n1);\n        //   console.log(n2);\n        let b1 = \"\";\n        let b2 = \"\";\n\n        while (n1) {\n            if (n1 % 2 == 1)\n                b1 += \"1\";\n            else\n                b1 += \"0\";\n\n            n1 = Math.floor(n1 / 2);\n        }\n\n        b1 = b1.split('').reverse().join('');\n\n        while (n2) {\n            if (n2 % 2 === 1)\n                b2 += \"1\";\n            else\n                b2 += \"0\";\n\n            n2 = Math.floor(n2 / 2);\n        }\n\n        b2 = b2.split('').reverse().join('');\n        // console.log(b1);\n        //   console.log(b2);\n        return this.longestCommonSubstr(b1, b2, b1.length, b2.length);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}