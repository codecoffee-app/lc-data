{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703201,
            "title": "Longest Common Substring",
            "titleSlug": "longest-common-substring1452",
            "content": "<p><span style=\"font-size: 18px;\">You are given two strings <strong>s1</strong> and <strong>s2</strong>. Your task is to find the length of the <strong>longest common substring </strong>among the given strings.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s1 = \"ABCDGH\", s2 = \"ACDGHR\"\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: The longest common substring is \"CDGH\" with a length of 4.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s1 = \"abc\", s2 = \"acb\"\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: The longest common substrings are \"a\", \"b\", \"c\" all having length 1.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s1 = \"YZ\", s2 = \"yz\"\n<strong>Output:</strong> 0</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= s1.size(), s2.size() &lt;= 10<sup>3</sup><br />Both strings may contain upper and lower case alphabets.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, determine the length of their longest common substring.",
                "constraints": [
                    "1 <= s1.size(), s2.size() <= 1000",
                    "Strings may contain upper and lower case alphabets."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"ABCDGH\", s2 = \"ACDGHR\"",
                        "output": "4",
                        "explanation": "The longest common substring is \"CDGH\", which has a length of 4."
                    },
                    {
                        "input": "s1 = \"abc\", s2 = \"acb\"",
                        "output": "1",
                        "explanation": "The longest common substrings are \"a\", \"b\", and \"c\", each with a length of 1."
                    },
                    {
                        "input": "s1 = \"YZ\", s2 = \"yz\"",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try using DP. dp[i][j] can represent the&nbsp;longest common substring length in&nbsp;s1[0...i-1] and s2[0....j-1]</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    int longestCommonSubstr(string& str1, string& str2) {\n        int n = str1.size(), m = str2.size();\n        int dp[1001][1001];\n        // dp[i][j] stores the longest common substring length\n        // in s1[0...i-1] and s2[0....j-1]\n\n        // if one of strings have length zero, longest common substring\n        // will also be of 0 length\n        for (int i = 0; i < n; ++i)\n            dp[i][0] = 0;\n\n        for (int i = 0; i < m; ++i)\n            dp[0][i] = 0;\n\n        int res = 0; // ans\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 1; j <= m; ++j) {\n                // if current characters are same, we increase the length by 1\n                if (str1[i - 1] == str2[j - 1])\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                // else, there's no common substring ending at i - 1 and j - 1\n                else\n                    dp[i][j] = 0;\n\n                res = max(res, dp[i][j]); // storing the answer\n            }\n        }\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    int longestCommonSubstr(String str1, String str2) {\n        int n = str1.length(), m = str2.length();\n        int dp[][] = new int[1001][1001];\n        // dp[i][j] stores the longest common substring length\n        // in s1[0...i-1] and s2[0....j-1]\n\n        // if one of strings have length zero, longest common substring\n        // will also be of 0 length\n        for (int i = 0; i < n; ++i) dp[i][0] = 0;\n\n        for (int i = 0; i < m; ++i) dp[0][i] = 0;\n\n        int res = 0; // ans\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 1; j <= m; ++j) {\n                // if current characters are same, we increase the length by 1\n                if (str1.charAt(i - 1) == str2.charAt(j - 1))\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                // else, there's no common substring ending at i - 1 and j - 1\n                else\n                    dp[i][j] = 0;\n\n                res = Math.max(res, dp[i][j]); // storing the answer\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def longestCommonSubstr(self, str1, str2):\n        #Initializing variables\n        n = len(str1)\n        m = len(str2)\n        dp = [[0 for i in range(m + 1)] for i in range(n + 1)]\n\n        #Initializing result variable\n        res = 0\n\n        #Iterating over the strings and filling up the dp array\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                #If characters match, increment dp[i][j] by 1\n                if str1[i - 1] == str2[j - 1]:\n                    dp[i][j] = 1 + dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 0\n\n                #Updating result with the maximum value of dp[i][j]\n                res = max(res, dp[i][j])\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    longestCommonSubstr(str1, str2) {\n        let n = str1.length, m = str2.length;\n        let dp = new Array(n + 1);\n        for (let i = 0; i <= n; i++) {\n            dp[i] = new Array(m + 1).fill(0);\n        }\n\n        let res = 0;\n        for (let i = 1; i <= n; i++) {\n            for (let j = 1; j <= m; j++) {\n                if (str1.charAt(i - 1) === str2.charAt(j - 1)) {\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                    res = Math.max(res, dp[i][j]);\n                }\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}