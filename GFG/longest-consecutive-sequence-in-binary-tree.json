{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700492,
            "title": "Longest consecutive sequence in Binary tree",
            "titleSlug": "longest-consecutive-sequence-in-binary-tree",
            "content": "<p><span style=\"font-size:18px\">Given a Binary Tree find the length of the longest path which comprises of connected nodes with consecutive values in increasing order.&nbsp;</span></p>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input :\\t</strong>\n\\t     1\\t\\t\\t\\t\\t \n\\t   /   \\\\t\\t\\t\\t  \n\\t  2     3\\t\\t\\t    </span>\n\n<span style=\"font-size:18px\"><strong>Output:</strong> 2</span>\n\n<span style=\"font-size:18px\"><strong>Explanation : </strong>Longest sequence is 1, 2.</span></pre>\n\n<p><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input :    </strong>\n\\t\\t10\\t\\t\\t\\t\\t \n\\t   /     \\\\t\\t\\t\\t  \n\\t 20\\t 30\\t\\t\\t    \n\\t/  \\\\t/\n     40\\t60   90    </span>\n\n<span style=\"font-size:18px\"><strong>Output : </strong> -1</span>\n\n<span style=\"font-size:18px\"><strong>Explanation: </strong>For the above test case no \nsequence is possible. So output is -1.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>longestConsecutive()</strong> which takes root node as input parameter and returns the length of the longest consecutive increasing sequence (of at least </span><span style=\"font-size:18px\">length</span><span style=\"font-size:18px\">&nbsp;2) in the given Binary Tree. If such a sequence does not exist, return&nbsp;-1.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(Height of Tree)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10^3</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, find the length of the longest path composed of connected nodes with consecutive values in increasing order. The path must have a length of at least 2.",
                "constraints": [
                    "1 <= N <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "     1\t\t\t\t\t \n\t   /   \\\t\t\t\t  \n\t  2     3\t\t\t    ",
                        "output": "2",
                        "explanation": "The longest consecutive sequence is 1, 2, which has a length of 2."
                    },
                    {
                        "input": "\t\t10\t\t\t\t\t \n\t   /     \\\t\t\t\t  \n\t 20\t 30\t\t\t    \n\t/  \\\t/",
                        "output": "-1",
                        "explanation": "There is no consecutive sequence of length at least 2 in the given tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You just need to keep a track of the parent value of the every node and check if the current node value is 1 greater than its parent value.<br />\nIf it is, then the length of the current sequence increases by 1.<br />\nElse, the length of the current sequence becomes 1 as the above chain gets broken (note that the sequence has to be consecutively present in the tree).</p>\n\n<p>Did you take care of the root node?&nbsp;It has no parent.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n  public:\n    // Recursive function to calculate the length of the longest consecutive sequence in the binary tree\n    void longestConsecutiveUtil(Node* root, int curLength,int expected, int& res)\n    {\n    \t// Base case: if the current node is NULL, return\n    \tif (root == NULL)\n    \t\treturn;\n    \t\n    \t// If the value of the current node is the expected value in the consecutive sequence,\n    \t// increment the current length, otherwise reset the current length to 1\n    \tif (root->data == expected)\n    \t\tcurLength++;\n    \telse\n    \t\tcurLength = 1;\n    \t\n    \t// Update the result with the maximum of the current length and the previous result\n    \tres = max(res, curLength);\n    \t\n    \t// Recursively call the function for the left and right subtrees,\n    \t// updating the expected value to be the value of the current node plus 1\n    \tlongestConsecutiveUtil(root->left, curLength,root->data + 1, res);\n    \tlongestConsecutiveUtil(root->right, curLength,root->data + 1, res);\n    }\n    \n    // Function to calculate the length of the longest consecutive sequence in the binary tree\n    int longestConsecutive(Node* root)\n    {\n    \t// Base case: if the root is NULL, the longest consecutive sequence length is 0\n    \tif (root == NULL)\n    \t\treturn 0;\n    \t\n    \tint res = 0; // Initialize the result variable as 0\n    \t\n    \t// Call the recursive helper function to calculate the length of the longest consecutive sequence\n    \tlongestConsecutiveUtil(root, 0, root->data, res);\n    \t\n    \t// If the result is less than or equal to 1, it means there is no consecutive sequence,\n    \t// so return -1\n    \tif(res<=1)return -1;\n    \t\n    \t// Return the length of the longest consecutive sequence\n    \treturn res;\n    }\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    // variable to store the final result\n\tpublic static int res=0;\n\n\t// method to find the longest consecutive path in a binary tree\n\tpublic int longestConsecutive(Node root){\n\t\tif(root==null)\n\t\t\treturn 0;\n\t\tres=0;\n\t\tlongestConsecutiveutil(root,0,root.data);\n\n\t\t// if the result is 1, there is no consecutive path, so return -1\n\t\tif(res==1)\n    \t\treturn -1;\n\t\t\n\t\t// return the result\n\t\treturn res;\n\t}\n\n\t// helper method to recursively find the longest consecutive path\n\tpublic static void longestConsecutiveutil(Node root,int curLength,int expected){\n\t\tif(root==null)\n\t\t\treturn;\n\n\t\t// if the current node's value is equal to the expected value, increment the current length\n\t\tif(root.data==expected){\n\t\t\tcurLength++;\n\t\t}\n\t\telse{\n\t\t\t// if the current node's value is not equal to the expected value, reset the current length to 1\n\t\t\tcurLength=1;\n\t\t}\n\n\t\t// update the result with the maximum length\n\t\tres=Math.max(res,curLength);\n\n\t\t// recursively call the method for the left and right children of the current node\n\t\tlongestConsecutiveutil(root.left,curLength,root.data+1);\n\t\tlongestConsecutiveutil(root.right,curLength,root.data+1);\n\t}\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "res = 0\n\nclass Solution:\n\n    #Utility function to find the length of the longest consecutive sequence\n    def longConsUtil(self, root, curlength, expected):\n\n        #if the root is None, return\n        if root is None:\n            return\n\n        #if the value of the root is equal to the expected value,\n        #increment the current length\n        if root.data == expected:\n            curlength+=1\n\n        #if the value of the root is not equal to the expected value,\n        #reset the current length to 1\n        else:\n            curlength = 1\n\n        #update the maximum length of consecutive sequence\n        global res\n        res = max(res, curlength)\n\n        #recursive call for the left and right subtree\n        self.longConsUtil(root.left, curlength, root.data + 1)\n        self.longConsUtil(root.right, curlength, root.data + 1)\n\n    #Function to find the length of the longest consecutive sequence\n    def longestConsecutive(self, root):\n\n        #if the root is None, return 0\n        if root is None:\n            return 0\n\n        #initialize the maximum length to 0\n        global res\n        res = 0\n\n        #utility function to find the length of the longest consecutive sequence\n        self.longConsUtil(root, 0, root.data)\n\n        #if the maximum length is less than or equal to 1, return -1\n        if(res<=1):\n            return -1\n\n        #return the maximum length of consecutive sequence\n        return res",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    longestConsecutive(root){\n        if(root == null){\n            return 0;\n        }\n        let res = this.longestConsecutiveUtil(root, 0, root.data);\n        if(res <= 1){\n            return -1;\n        }\n        return res;\n    }\n\n    longestConsecutiveUtil(root, curLength, expected){\n        if(root == null){\n            return 0;\n        }\n        if(root.data == expected){\n            curLength++;\n        } else {\n            curLength = 1;\n        }\n        let left = this.longestConsecutiveUtil(root.left, curLength, root.data + 1);\n        let right = this.longestConsecutiveUtil(root.right, curLength, root.data + 1);\n        return Math.max(curLength, left, right);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}