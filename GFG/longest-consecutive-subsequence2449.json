{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701295,
            "title": "Longest Consecutive Subsequence",
            "titleSlug": "longest-consecutive-subsequence2449",
            "content": "<p><span >Given an array <strong>arr[]</strong> of non-negative integers. Find the <strong>length</strong> of the longest sub-sequence such that elements in the subsequence are consecutive integers, the<strong> consecutive numbers</strong> can be in <strong>any order.</strong></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 6, 1, 9, 4, 5, 3]\n<strong>Output: </strong>6<strong>\nExplanation: </strong>The consecutive numbers here are 1, 2, 3, 4, 5, 6. These 6 numbers form the longest consecutive subsquence.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 9, 3, 10, 4, 20, 2]\n<strong>Output: </strong>4<strong>\nExplanation: </strong>1, 2, 3, 4 is the longest consecutive subsequence.</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [15, 13, 12, 14, 11, 10, 9]\n<strong>Output</strong>: 7\n<strong>Explanation</strong>: The longest consecutive subsequence is 9, 10, 11, 12, 13, 14, 15, which has a length of 7.\n</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />0 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of non-negative integers, find the length of the longest sub-sequence such that the elements in the sub-sequence are consecutive integers. The consecutive numbers can be in any order.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2, 6, 1, 9, 4, 5, 3]",
                        "output": "6",
                        "explanation": "The longest consecutive sub-sequence is 1, 2, 3, 4, 5, 6, with a length of 6."
                    },
                    {
                        "input": "[1, 9, 3, 10, 4, 20, 2]",
                        "output": "4",
                        "explanation": "The longest consecutive sub-sequence is 1, 2, 3, 4, with a length of 4."
                    },
                    {
                        "input": "[15, 13, 12, 14, 11, 10, 9]",
                        "output": "7",
                        "explanation": "The longest consecutive sub-sequence is 9, 10, 11, 12, 13, 14, 15, with a length of 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >&nbsp;Think about how you can use a data structure that allows for fast lookups to check consecutive elements efficiently.</span></p>",
            "<p><span >Consider how you might track the lengths of sequences as you identify the start of each new consecutive sequence in the array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "walmart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // Function to return length of longest subsequence of consecutive integers.\n    int longestConsecutive(vector<int>& arr) {\n        int n = arr.size();\n        int arr2[1000001] = {0};\n        int count = 0;\n        int maximum = -1;\n        int ans = INT_MIN;\n        for (int i = 0; i < n; i++) {\n            arr2[arr[i]]++;\n            maximum = max(maximum, arr[i]);\n        }\n        for (int i = 0; i <= maximum; i++) {\n            if (arr2[i] >= 1) {\n                count++;\n            } else {\n                ans = max(ans, count);\n                count = 0;\n            }\n            ans = max(ans, count);\n        }\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to return length of longest subsequence of consecutive integers.\n    public int longestConsecutive(int[] arr) {\n        int n = arr.length;\n        int[] arr2 = new int[1000001];\n        int count = 0;\n        int maximum = -1;\n        int ans = Integer.MIN_VALUE;\n\n        // Populate the frequency array and find maximum element in arr\n        for (int i = 0; i < n; i++) {\n            arr2[arr[i]]++;\n            maximum = Math.max(maximum, arr[i]);\n        }\n\n        // Traverse the frequency array to find the longest consecutive subsequence\n        for (int i = 0; i <= maximum; i++) {\n            if (arr2[i] >= 1) {\n                count++;\n            } else {\n                ans = Math.max(ans, count);\n                count = 0;\n            }\n            ans = Math.max(ans, count);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to return length of longest subsequence of consecutive integers.\n    def longestConsecutive(self, arr):\n        #using a Set to store elements.\n        n = len(arr)\n        s = set()\n        ans = 0\n\n        #inserting all the array elements in Set.\n        for ele in arr:\n            s.add(ele)\n\n        #checking each possible sequence from the start.\n        for i in range(n):\n\n            #if current element is starting element of a sequence then only\n            #we try to find out the length of sequence.\n            if (arr[i] - 1) not in s:\n\n                j = arr[i]\n                #then we keep checking whether the next consecutive elements\n                #are present in Set and we keep incrementing the counter.\n                while (j in s):\n                    j += 1\n\n                #storing the maximum count.\n                ans = max(ans, j - arr[i])\n\n        #returning the length of longest subsequence.\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int LongestConsecutive(int[] arr) {\n        if (arr.Length == 0) return 0;\n\n        HashSet<int> numSet = new HashSet<int>(arr);\n        int longestStreak = 0;\n\n        foreach (int num in numSet) {\n            if (!numSet.Contains(num - 1)) {\n                int currentNum = num;\n                int currentStreak = 1;\n\n                while (numSet.Contains(currentNum + 1)) {\n                    currentNum++;\n                    currentStreak++;\n                }\n\n                longestStreak = Math.Max(longestStreak, currentStreak);\n            }\n        }\n\n        return longestStreak;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr\n * @returns {number}\n */\nclass Solution {\n    // Function to return length of longest subsequence of consecutive integers.\n    longestConsecutive(arr) {\n        let n = arr.length;\n        let arr2 = new Array(1000001).fill(0);\n        let count = 0;\n        let maximum = -1;\n        let ans = Number.MIN_SAFE_INTEGER;\n\n        // Populate the frequency array and find maximum element in arr\n        for (let i = 0; i < n; i++) {\n            arr2[arr[i]]++;\n            maximum = Math.max(maximum, arr[i]);\n        }\n\n        // Traverse the frequency array to find the longest consecutive subsequence\n        for (let i = 0; i <= maximum; i++) {\n            if (arr2[i] >= 1) {\n                count++;\n            } else {\n                ans = Math.max(ans, count);\n                count = 0;\n            }\n            ans = Math.max(ans, count);\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}