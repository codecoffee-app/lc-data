{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703205,
            "title": "Longest substring with distinct characters",
            "titleSlug": "longest-distinct-characters-in-string5848",
            "content": "<p><span >Given a string <strong>s</strong>, find the length of the longest substring with all distinct characters.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"geeksforgeeks\"\n<strong>Output:</strong> 7\n<strong>Explanation</strong>: \"eksforg\" is the longest substring with all distinct characters.\n</span></pre>\n<pre><span ><strong>Input</strong>: s = \"aaa\"\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: \"a\" is the longest substring with all distinct characters.<br /></span></pre>\n<pre><span ><strong>Input: </strong>s = \"abcdefabcbb\"<strong>\nOutput: </strong>6<strong>\nExplanation: </strong>The longest substring with all distinct characters is \"abcdef\", which has a length of 6.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1&lt;= s.size()&lt;=3*10<sup>4<br /></sup>All the characters are in lowercase.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try using a 2 pointer approach. Move the right pointer till you get a repeating character. Then, move the left character until you skip that repeated character's first occurrence.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "housing.com",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    const int MAX_CHAR = 26;\n\n    int longestUniqueSubstr(string &s) {\n        if (s.length() == 0 || s.length() == 1)\n            return s.length();\n\n        int res = 0;\n        vector<bool> vis(MAX_CHAR, false);\n\n        // left and right pointer of sliding window\n        int left = 0, right = 0;\n        while (right < s.length()) {\n\n            // If character is repeated, move left pointer marking\n            // visited characters as false until the repeating\n            // character is no longer part of the current window\n            while (vis[s[right] - 'a'] == true) {\n\n                vis[s[left] - 'a'] = false;\n                left++;\n            }\n\n            vis[s[right] - 'a'] = true;\n\n            // The length of the current window (right - left + 1)\n            // is calculated and answer is updated accordingly.\n            res = max(res, (right - left + 1));\n            right++;\n        }\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static final int MAX_CHAR = 26;\n\n    public int longestUniqueSubstr(String s) {\n        if (s.length() == 0 || s.length() == 1) return s.length();\n\n        int res = 0;\n        boolean[] vis = new boolean[MAX_CHAR];\n\n        // left and right pointer of sliding window\n        int left = 0, right = 0;\n        while (right < s.length()) {\n\n            // If character is repeated, move left pointer marking\n            // visited characters as false until the repeating\n            // character is no longer part of the current window\n            while (vis[s.charAt(right) - 'a'] == true) {\n                vis[s.charAt(left) - 'a'] = false;\n                left++;\n            }\n\n            vis[s.charAt(right) - 'a'] = true;\n\n            // The length of the current window (right - left + 1)\n            // is calculated and answer is updated accordingly.\n            res = Math.max(res, (right - left + 1));\n            right++;\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def longestUniqueSubstr(self, s):\n        MAX_CHAR = 26\n        if len(s) == 0 or len(s) == 1:\n            return len(s)\n\n        res = 0\n        vis = [False] * MAX_CHAR\n\n        # left and right pointer of sliding window\n        left = 0\n        right = 0\n        while right < len(s):\n\n            # If character is repeated, move left pointer marking\n            # visited characters as false until the repeating\n            # character is no longer part of the current window\n            while vis[ord(s[right]) - ord('a')] == True:\n                vis[ord(s[left]) - ord('a')] = False\n                left += 1\n\n            vis[ord(s[right]) - ord('a')] = True\n\n            # The length of the current window (right - left + 1)\n            # is calculated and answer is updated accordingly.\n            res = max(res, (right - left + 1))\n            right += 1\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} s\n * @return {number}\n */\nclass Solution {\n\n    longestUniqueSubstr(s) {\n        const MAX_CHAR = 26;\n        if (s.length === 0 || s.length === 1) return s.length;\n\n        let res = 0;\n        let vis = new Array(MAX_CHAR).fill(false);\n\n        // left and right pointer of sliding window\n        let left = 0, right = 0;\n        while (right < s.length) {\n\n            // If character is repeated, move left pointer marking\n            // visited characters as false until the repeating\n            // character is no longer part of the current window\n            while (vis[s[right].charCodeAt(0) - 'a'.charCodeAt(0)] === true) {\n\n                vis[s[left].charCodeAt(0) - 'a'.charCodeAt(0)] = false;\n                left++;\n            }\n\n            vis[s[right].charCodeAt(0) - 'a'.charCodeAt(0)] = true;\n\n            // The length of the current window (right - left + 1)\n            // is calculated and answer is updated accordingly.\n            res = Math.max(res, (right - left + 1));\n            right++;\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}