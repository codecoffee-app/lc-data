{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702884,
            "title": "Farthest Index",
            "titleSlug": "longest-equal-prefix3139",
            "content": "<p><span style=\"font-size: 18px;\">Given a positive integer <strong>x</strong> and an array <strong>arr</strong> of positive integers. We need to find the farthest index at which <strong>x</strong> is present. If&nbsp;<span style=\"box-sizing: border-box; margin: 0px; padding: 0px;\">any occurrence of&nbsp;<strong>x&nbsp;</strong>doesn't exist, </span>then return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [7, 42, 5, 6, 42, 8, 7, 5, 3, 6, 7] and x = 7\n<strong>Output:</strong> 11\n<strong>Explanation</strong>: The last index contains value 7.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 2]\n<strong>Output:</strong> 1<br /><strong>Expplanation: </strong>The farthest index which contains value x is 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i], x &le; 10<sup>5</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `x` and an array `arr` of positive integers, find the index of the last occurrence of `x` in `arr`. If `x` is not found in `arr`, return -1.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= arr[i], x <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr = [7, 42, 5, 6, 42, 8, 7, 5, 3, 6, 7], x = 7",
                        "output": "10",
                        "explanation": "The last index containing the value 7 is 10 (0-based indexing)."
                    },
                    {
                        "input": "arr = [1, 2, 2], x = 2",
                        "output": "2",
                        "explanation": "The last index containing the value 2 is 2 (0-based indexing)."
                    },
                    {
                        "input": "arr = [1, 2, 3], x = 4",
                        "output": "-1",
                        "explanation": "The value 4 is not present in the array."
                    },
                    {
                        "input": "arr = [5], x = 5",
                        "output": "0",
                        "explanation": "The value 5 is at index 0."
                    },
                    {
                        "input": "arr = [], x = 5",
                        "output": "-1",
                        "explanation": "The array is empty and does not contain the value 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >We start from index 1 and run a loop till the end of the array. We keep updating whenever we found array element equal to x.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findIndex(vector<int>& arr, int x) {\n        int nx = 0, ny = 0;\n        int n = arr.size();\n\n        int result = -1; // initializing result to -1\n\n        // iterating over the array\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                result = i + 1;\n                // update the result.\n            }\n        }\n        return result; // returning the result index\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findIndex(int[] arr, int x) {\n        int result = -1; // Initializing result to -1\n        int n = arr.length;\n\n        // Iterating over the array\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) {\n                result = i + 1; // Update the result index (1-based)\n            }\n        }\n        return result; // Returning the result index\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findIndex(self, arr, x):\n        result = -1  # Initializing result to -1\n        n = len(arr)\n\n        # Iterating over the array\n        for i in range(n):\n            if arr[i] == x:\n                result = i + 1\n                # Update the result index (1-based)\n\n        return result  # Returning the result index\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    findIndex(arr, x) {\n        let result = -1; // Initializing result to -1\n        let n = arr.length;\n\n        // Iterating over the array\n        for (let i = 0; i < n; i++) {\n            if (arr[i] === x) {\n                result = i + 1; // Update the result index (1-based)\n            }\n        }\n        return result; // Returning the result index\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}