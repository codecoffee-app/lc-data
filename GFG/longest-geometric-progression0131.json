{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705451,
            "title": "Longest Geometric Progression",
            "titleSlug": "longest-geometric-progression0131",
            "content": "<p><span style=\"font-size: 18px;\">Given a set of numbers, find the Length of the Longest Geometrix Progression (</span><strong style=\"font-size: 18px;\">LLGP</strong><span style=\"font-size: 18px;\">) that can be formed using the elements of the set in any order. The common ratio of GP must be an integer.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 3\narr = {2, 4, 3}\n<strong>Output:</strong> 2\n<strong>Explaination:</strong> The longest geometric\nprogression is {2, 4}.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 6\nArr = {5, 7, 15, 10, 20, 29}\n<strong>Output:</strong> 3\n<strong>Explaination:</strong> The longest geometric \nprogression is {5, 10, 20}.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>lenOfLongestGP()</strong>&nbsp;which takes the array a<strong>rr[]</strong> and its size <strong>N&nbsp;</strong>as input parameters&nbsp;and returns&nbsp;the&nbsp;Length of the Longest&nbsp;Geometrix&nbsp;Progression (<strong>LLGP</strong>).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(N<sup>2</sup>)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 100</span><br /><span style=\"font-size: 18px;\">1 &le; arr[i]&nbsp;&le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Dp.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Returns length of the \n// longest GP subarr of arr[]\nint lenOfLongestGP(int arr[], int N)\n{\n    // Base cases\n    if (N < 2)\n        return N;\n    if (N == 2)\n        return (arr[1] % arr[0] == 0) ? 2 : 1;\n \n    // Let us sort the arr first\n    sort(arr, arr+N);\n \n    // An entry L[i][j] in this \n    // table stores LLGP with\n    // arr[i] and arr[j] as first \n    // two elements of GP\n    // and j > i.\n    int L[N][N];\n \n    // Initialize result (A single element \n    // is always a GP)\n    int llgp = 1;\n \n    // Initialize values of last column\n    for (int i = 0; i < N - 1; ++i) {\n        if (arr[N-1] % arr[i] == 0)\n        {\n            L[i][N-1] = 2;\n            if (2 > llgp)\n              llgp = 2;\n        }\n        else\n        {\n            L[i][N-1] = 1;\n        }\n    }\n    L[N-1][N-1] = 1;\n \n \n    // Consider every element as \n    // second element of GP\n    for (int j = N - 2; j >= 1; --j)\n    {\n        // Search for i and k for j\n        int i = j - 1, k = j+1;\n        while (i>=0 && k <= N-1)\n        {\n             \n            // Two cases when i, j and k don't form\n            // a GP.\n            if (arr[i] * arr[k] < arr[j]*arr[j])\n            {\n                ++k;\n            }\n            else if (arr[i] * arr[k] > arr[j]*arr[j])\n            {\n                if (arr[j] % arr[i] == 0)\n                {\n                    L[i][j] = 2;\n                }\n                else\n                {\n                    L[i][j] = 1;\n                }\n                --i;\n            }\n \n \n            // i, j and k form GP, LLGP with i and j as\n            // first two elements is equal to LLGP with\n            // j and k as first two elements plus 1.\n            // L[j][k] must have been filled before as\n            // we run the loop from right side\n            else\n            {\n                if (arr[j] % arr[i] == 0)\n                {\n                    L[i][j] = L[j][k] + 1;\n \n                    // Update overall LLGP\n                    if (L[i][j] > llgp)\n                        llgp = L[i][j];\n                } else {\n                  L[i][j] = 1;\n                }\n \n \n                // Change i and k to fill more L[i][j]\n                // values for current j\n                --i;\n                ++k;\n            }\n        }\n \n        // If the loop was stopped due to k becoming\n        // more than n-1, arr the remaining entries\n        // in column j as 1 or 2 based on divisibility\n        // of arr[j] by arr[i]\n        while (i >= 0)\n        {\n            if (arr[j] % arr[i] == 0)\n            {\n                L[i][j] = 2;\n                if (2 > llgp)\n                    llgp = 2;\n            }\n            else\n                L[i][j] = 1;\n            --i;\n        }\n    }\n \n    // Return result\n    return llgp;\n}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}