{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703867,
            "title": "Longest Increasing Subarray",
            "titleSlug": "longest-increasing-subarray3811",
            "content": "<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\">Given an array <strong>arr[]</strong> of integers. The problem is finding the longest contiguous subarray's length such that every element is strictly greater than its previous element in the same subarray.</span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Input: </strong>arr[] = [5, 6, 3, 5, 7, 8, 9, 1, 2]\n<strong>Output: </strong>5<br /><strong>Explanation: </strong>here the subarray <strong>arr[2:6]</strong> = [3, 5, 7, 8, 9] is longest subarray to follow strictly increasing order.</span></pre>\n<pre><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Input: </strong>arr[] = [12, 13, 1, 5, 4, 7, 8, 10, 10, 11]\n<strong>Output: </strong>4<br /></span><strong style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\">Explanation: </strong><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\">here the subarray </span><strong style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\">arr[4:7]</strong><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"> = [4, 7, 8, 10] is longest subarray to follow strictly increasing order.</span></pre>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Constraints:</strong> </span><br /><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\">1&lt;= arr.size() &lt;=10<sup>6</sup><br />1&lt;= arr[i] &lt;=10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the length of the longest contiguous subarray where each element is strictly greater than the previous element.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[5, 6, 3, 5, 7, 8, 9, 1, 2]",
                        "output": "5",
                        "explanation": "The longest strictly increasing contiguous subarray is [3, 5, 7, 8, 9], with a length of 5."
                    },
                    {
                        "input": "[12, 13, 1, 5, 4, 7, 8, 10, 10, 11]",
                        "output": "4",
                        "explanation": "The longest strictly increasing contiguous subarray is [4, 7, 8, 10], with a length of 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try iterating through the array and increase the count if you get a greater element than the last one if not start count equals zero again. Can you find the maximum?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the length of longest increasing subarray\n    int lenOfLongIncSubArr(vector<int> &arr) {\n        int n = arr.size();\n        int max = 1, len = 1;\n        // Iterating over the array\n        for (int i = 1; i < n; i++) {\n            // If current element is greater than previous element,\n            // increment length of increasing subarray\n            if (arr[i] > arr[i - 1])\n                len++;\n            else {\n                // If not, check if the current length is greater than\n                // the previous maximum length, update the maximum length\n                // and reset length to 1\n                if (max < len)\n                    max = len;\n                len = 1;\n            }\n        }\n        // Check again if the current length is greater than the previous\n        // maximum length, in case the array ends with an increasing subarray\n        if (max < len)\n            max = len;\n        return max;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to find the length of longest increasing subarray\n    public int lenOfLongIncSubArr(List<Integer> arr) {\n        int n = arr.size();\n        int max = 1, len = 1;\n\n        // Iterating over the array\n        for (int i = 1; i < n; i++) {\n            // If current element is greater than previous element,\n            // increment length of increasing subarray\n            if (arr.get(i) > arr.get(i - 1)) {\n                len++;\n            } else {\n                // If not, check if the current length is greater than\n                // the previous maximum length, update the maximum length\n                // and reset length to 1\n                if (max < len) max = len;\n                len = 1;\n            }\n        }\n\n        // Check again if the current length is greater than the previous\n        // maximum length, in case the array ends with an increasing subarray\n        if (max < len) max = len;\n\n        return max;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def lenOfLongIncSubArr(self, arr):\n        n = len(arr)\n        if n == 0:\n            return 0\n\n        max_len = 1\n        current_len = 1\n\n        for i in range(1, n):\n            if arr[i] > arr[i - 1]:\n                current_len += 1\n            else:\n                if max_len < current_len:\n                    max_len = current_len\n                current_len = 1\n\n        # Check once more in case the longest increasing subarray\n        # ends at the last element\n        if max_len < current_len:\n            max_len = current_len\n\n        return max_len\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    // Function to find the length of longest increasing subarray\n    lenOfLongIncSubArr(arr) {\n        let n = arr.length;\n        let max = 1, len = 1;\n\n        // Iterating over the array\n        for (let i = 1; i < n; i++) {\n            // If current element is greater than previous element,\n            // increment length of increasing subarray\n            if (arr[i] > arr[i - 1]) {\n                len++;\n            } else {\n                // If not, check if the current length is greater than\n                // the previous maximum length, update the maximum length\n                // and reset length to 1\n                if (max < len) max = len;\n                len = 1;\n            }\n        }\n\n        // Check again if the current length is greater than the previous\n        // maximum length, in case the array ends with an increasing subarray\n        if (max < len) max = len;\n\n        return max;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}