{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701428,
            "title": "Longest Increasing Subsequence",
            "titleSlug": "longest-increasing-subsequence-1587115620",
            "content": "<p><span >Given an array <strong><code>arr[]</code></strong> of non-negative integers, the task is to find the <strong>length</strong> of the <strong>Longest Strictly Increasing Subsequence (LIS)</strong>.</span></p>\n<p><span >A subsequence is <strong>strictly increasing</strong> if each element in the subsequence is strictly less than the next element.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr<span class=\"hljs-selector-attr\">[]</span> = <span class=\"hljs-selector-attr\">[5, 8, 3, 7, 9, 1]</span>\n<strong>Output: </strong>3<strong>\nExplanation: </strong>The longest strictly increasing subsequence could be <code>[5, 7, 9]</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, which has a length of 3.</span></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]\n<strong>Output: </strong>6<strong>\nExplanation: </strong>One of the possible longest strictly increasing subsequences is <code>[0, 2, 6, 9, 13, 15]</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, which has a length of 6.</span></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [3, 10, 2, 1, 20]\n<strong>Output: </strong>3<strong>\nExplanation: </strong>The longest strictly increasing subsequence could be <code>[3, 10, 20]</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, which has a length of 3.</span></span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &le; arr.size() &le; 10<sup>3</sup><br />0 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of non-negative integers, find the length of the Longest Strictly Increasing Subsequence (LIS). A subsequence is strictly increasing if each element is strictly greater than the preceding element.",
                "constraints": [
                    "1 <= arr.size() <= 10^3",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[5, 8, 3, 7, 9, 1]",
                        "output": "3",
                        "explanation": "One possible longest strictly increasing subsequence is [5, 7, 9], which has length 3."
                    },
                    {
                        "input": "[0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]",
                        "output": "6",
                        "explanation": "One possible longest strictly increasing subsequence is [0, 2, 6, 9, 13, 15], which has length 6."
                    },
                    {
                        "input": "[3, 10, 2, 1, 20]",
                        "output": "3",
                        "explanation": "One possible longest strictly increasing subsequence is [3, 10, 20], which has length 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 1em; line-height: 1.6rem; font-family: Nunito; color: #1e2229; font-size: 16px; background-color: #ffffff;\"><span ><span style=\"box-sizing: border-box; line-height: 1.6rem; font-family: var(--gfg-font-primary);\">The idea is to use binary search by </span><span style=\"box-sizing: border-box; line-height: 1.6rem; font-family: var(--gfg-font-primary);\">maintaining lists of increasing sequences.&nbsp;</span></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "samsung",
            "bankbazaar"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int lis(vector<int>& arr) {\n        // Binary search approach\n        int n = arr.size();\n        vector<int> ans;\n\n        // Initialize the answer vector with the\n        // first element of arr\n        ans.push_back(arr[0]);\n\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > ans.back()) {\n\n                // If the current number is greater\n                // than the last element of the answer\n                // vector, it means we have found a\n                // longer increasing subsequence.\n                // Hence, we append the current number\n                // to the answer vector.\n                ans.push_back(arr[i]);\n            } else {\n\n                // If the current number is not\n                // greater than the last element of\n                // the answer vector, we perform\n                // a binary search to find the smallest\n                // element in the answer vector that\n                // is greater than or equal to the\n                // current number.\n\n                // The lower_bound function returns\n                // an iterator pointing to the first\n                // element that is not less than\n                // the current number.\n                int low = lower_bound(ans.begin(), ans.end(), arr[i]) - ans.begin();\n\n                // We update the element at the\n                // found position with the current number.\n                // By doing this, we are maintaining\n                // a sorted order in the answer vector.\n                ans[low] = arr[i];\n            }\n        }\n\n        // The length of the answer vector\n        // represents the length of the\n        // longest increasing subsequence.\n        return ans.size();\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static int lis(int arr[]) {\n        // Binary search approach\n        int n = arr.length;\n        List<Integer> ans = new ArrayList<>();\n\n        // Initialize the answer list with the\n        // first element of arr\n        ans.add(arr[0]);\n\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > ans.get(ans.size() - 1)) {\n                // If the current number is greater\n                // than the last element of the answer\n                // list, it means we have found a\n                // longer increasing subsequence.\n                // Hence, we append the current number\n                // to the answer list.\n                ans.add(arr[i]);\n            } else {\n                // If the current number is not\n                // greater than the last element of\n                // the answer list, we perform\n                // a binary search to find the smallest\n                // element in the answer list that\n                // is greater than or equal to the\n                // current number.\n\n                // The binarySearch method returns\n                // the index of the first element that is not less than\n                // the current number.\n                int low = Collections.binarySearch(ans, arr[i]);\n\n                // We update the element at the\n                // found position with the current number.\n                // By doing this, we are maintaining\n                // a sorted order in the answer list.\n                if (low < 0) {\n                    low = -(low + 1);\n                }\n                ans.set(low, arr[i]);\n            }\n        }\n\n        // The size of the answer list\n        // represents the length of the\n        // longest increasing subsequence.\n        return ans.size();\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def lis(self, arr):\n        # Binary search approach\n        n = len(arr)\n        ans = []\n\n        # Initialize the answer list with the\n        # first element of arr\n        ans.append(arr[0])\n\n        for i in range(1, n):\n            if arr[i] > ans[-1]:\n                # If the current number is greater\n                # than the last element of the answer\n                # list, it means we have found a\n                # longer increasing subsequence.\n                # Hence, we append the current number\n                # to the answer list.\n                ans.append(arr[i])\n            else:\n                # If the current number is not\n                # greater than the last element of\n                # the answer list, we perform\n                # a binary search to find the smallest\n                # element in the answer list that\n                # is greater than or equal to the\n                # current number.\n                low = 0\n                high = len(ans) - 1\n                while low < high:\n                    mid = low + (high - low) // 2\n                    if ans[mid] < arr[i]:\n                        low = mid + 1\n                    else:\n                        high = mid\n                # We update the element at the\n                # found position with the current number.\n                # By doing this, we are maintaining\n                # a sorted order in the answer list.\n                ans[low] = arr[i]\n\n        # The length of the answer list\n        # represents the length of the\n        # longest increasing subsequence.\n        return len(ans)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr\n * @returns {number}\n */\nclass Solution {\n    lis(arr) {\n        // Binary search approach\n        const n = arr.length;\n        const ans = [];\n\n        // Initialize the answer array with the first element of arr\n        ans.push(arr[0]);\n\n        for (let i = 1; i < n; i++) {\n            if (arr[i] > ans[ans.length - 1]) {\n                // If the current number is greater than the last element\n                // of the answer array, it means we have found a\n                // longer increasing subsequence. Hence, we push the current number\n                // to the answer array.\n                ans.push(arr[i]);\n\n            } else {\n                // If the current number is not greater than the last element of\n                // the answer array, we perform a binary search to find the smallest\n                // element in the answer array that is greater than or equal to the\n                // current number.\n\n                // The indexOf function returns the first index at which the current\n                // number can be inserted to maintain sorted order.\n                const low = ans.findIndex((el) => el >= arr[i]);\n\n                // We update the element at the found position with the current number.\n                // By doing this, we are maintaining a sorted order in the answer array.\n                ans[low] = arr[i];\n            }\n        }\n\n        // The length of the answer array represents the length of the\n        // longest increasing subsequence.\n        return ans.length;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}