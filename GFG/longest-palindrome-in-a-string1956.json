{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706172,
            "title": "Longest Palindromic Substring",
            "titleSlug": "longest-palindrome-in-a-string1956",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>, return the <strong>longest palindromic substring</strong> in s.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\">Substring of string s is </span><span style=\"font-size: 18px;\">a <strong>contiguous</strong> sequence of characters within a string, i.e.</span><span style=\"font-size: 18px;\"> s[ i . . . . j ] where 0 &le; i &le; j &lt; len(s)<strong>.</strong></span></p>\n<p><span style=\"font-size: 18px;\">Palindromic string is a<strong> </strong></span><span style=\"font-size: 18px;\">string which reads the <strong>same </strong>forwards and backwards. More formally, s is palindrome if reverse(s) = s.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\">If there are multiple longest palindromic substrings, return the substring with the <strong>least </strong>starting index .</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"aaaabbaa</span>\"\n<span style=\"font-size: 18px;\"><strong>Output: </strong>aabbaa</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>The longest palindrome string present in\nthe given string is \"aabbaa\".<br /></span></pre>\n<pre><span><strong>Input: </strong>s = \"geeks</span>\"\n<span><strong>Output: </strong>ee</span>\n<span><strong>Explanation: </strong>The longest palindrome string present in\nthe given string is \"ee\".</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |s| &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, find the longest palindromic substring within `s`. A palindromic substring is a contiguous sequence of characters within `s` that reads the same forwards and backwards (i.e., reverse(substring) == substring). If multiple longest palindromic substrings exist, return the one with the smallest starting index.",
                "constraints": [
                    "1 <= |s| <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "aaaabbaa",
                        "output": "aabbaa",
                        "explanation": "The longest palindromic substring in \"aaaabbaa\" is \"aabbaa\"."
                    },
                    {
                        "input": "geeks",
                        "output": "ee",
                        "explanation": "The longest palindromic substring in \"geeks\" is \"ee\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">1. Concept of DP will be useful to solve this problem. In DP we can use tabulation method which is to store answers by cumulating answers from bottom to up.<br />\nHere dp[n][n], n is the length of string. The table will be of boolean data type which will be filled in bottom up manner.</span></p>",
            "<p><span style=\"font-size:18px\">2. The value of dp[i][j] is true, if the substring is palindrome, otherwise false. To calculate dp[i][j], we first check the value of dp[i+1][j-1], if the value is true and str[i] is same as str[j], then we make dp[i][j] true. Otherwise, the value of dp[i][j] is made false.</span></p>",
            "<p><span style=\"font-size:18px\">3. Another method where we can use O(1) space.<br />\nThe idea is to generate all even length and odd length palindromes and keep track of the longest palindrome seen so far.</span></p>",
            "<p><span style=\"font-size:18px\">4. Step to generate odd length palindrome:<br />\n&nbsp; &nbsp; Fix a centre and expand in both directions for longer palindromes.</span></p>\n\n<p><span style=\"font-size:18px\">&nbsp;&nbsp; Step to generate even length palindrome<br />\n&nbsp;&nbsp; Fix two centre ( low and high ) and expand in both directions for longer palindromes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "companies": [
            "zoho",
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "makemytrip",
            "visa",
            "walmart",
            "qualcomm",
            "groupon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find the longest palindrome substring\n    string longestPalindrome(string S) {\n\n        int i, high, low, len, start = 0, max = 1;\n        len = S.size();\n\n        // Looping through each character of the string\n        for (i = 1; i < len; i++) {\n            low = i - 1;\n            high = i;\n\n            // Checking for palindrome with odd length\n            while (low >= 0 && high < len && S[low] == S[high]) {\n                if (high - low + 1 > max) {\n                    max = high - low + 1;\n                    start = low;\n                }\n                --low;\n                ++high;\n            }\n\n            low = i - 1;\n            high = i + 1;\n\n            // Checking for palindrome with even length\n            while (low >= 0 && high < len && S[low] == S[high]) {\n                if (high - low + 1 > max) {\n                    max = high - low + 1;\n                    start = low;\n                }\n                --low;\n                ++high;\n            }\n        }\n\n        // Returning the longest palindrome substring\n        return S.substr(start, max);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public String longestPalindrome(String Str) {\n        // initialize variables\n        int i, high, low, len, start = 0, max = 1;\n        // get length of the input string\n        len = Str.length();\n        // convert the string to character array\n        char[] S = Str.toCharArray();\n\n        // iterate through each character of the string\n        for (i = 1; i < len; i++) {\n            // check for palindrome with odd length\n            low = i - 1;\n            high = i;\n            // expand the palindrome around the current character\n            while (low >= 0 && high < len && S[low] == S[high]) {\n                // update the maximum length of palindrome and its starting index\n                if (high - low + 1 > max) {\n                    max = high - low + 1;\n                    start = low;\n                }\n                // move the pointers towards the center\n                --low;\n                ++high;\n            }\n            // check for palindrome with even length\n            low = i - 1;\n            high = i + 1;\n            // expand the palindrome around the current character\n            while (low >= 0 && high < len && S[low] == S[high]) {\n                // update the maximum length of palindrome and its starting index\n                if (high - low + 1 > max) {\n                    max = high - low + 1;\n                    start = low;\n                }\n                // move the pointers towards the center\n                --low;\n                ++high;\n            }\n        }\n\n        // return the longest palindrome substring\n        return Str.substring(start, start + max);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def longestPalindrome(self, S):\n        start = 0  # starting index of longest palindrome substring\n        maxi = 1  # length of longest palindrome substring\n\n        n = len(S)  # length of input string\n\n        # iterate through each character of the string\n        for i in range(1, n):\n            low = i - 1  # starting index of substring for odd length palindrome\n            high = i  # ending index of substring for odd length palindrome\n\n            # expand the substring as long as it is a palindrome\n            while low >= 0 and high < n and S[low] == S[high]:\n                if high - low + 1 > maxi:\n                    maxi = high - low + 1\n                    start = low\n                low -= 1\n                high += 1\n\n            low = i - 1  # starting index of substring for even length palindrome\n            high = i + 1  # ending index of substring for even length palindrome\n\n            # expand the substring as long as it is a palindrome\n            while low >= 0 and high < n and S[low] == S[high]:\n                if high - low + 1 > maxi:\n                    maxi = high - low + 1\n                    start = low\n\n                low -= 1\n                high += 1\n\n        return S[start:start +\n                 maxi]  # return the longest palindrome substring found\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} S\n * @return {string}\n */\n\nclass Solution {\n    longestPalindrome(S) {\n        let len = S.length;\n        let start = 0;\n        let max = 1;\n\n        for (let i = 1; i < len; i++) {\n            let low = i - 1;\n            let high = i;\n\n            while (low >= 0 && high < len && S[low] == S[high]) {\n                if (high - low + 1 > max) {\n                    max = high - low + 1;\n                    start = low;\n                }\n                low--;\n                high++;\n            }\n\n            low = i - 1;\n            high = i + 1;\n\n            while (low >= 0 && high < len && S[low] == S[high]) {\n                if (high - low + 1 > max) {\n                    max = high - low + 1;\n                    start = low;\n                }\n                low--;\n                high++;\n            }\n        }\n\n        return S.substr(start, max);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}