{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703220,
            "title": "Longest Palindrome in a String",
            "titleSlug": "longest-palindrome-in-a-string3411",
            "content": "<p><span >Given a string <strong><code>s</code></strong>, your task is to find the longest palindromic substring within <code>s</code>. </span></p>\n<blockquote>\n<p><span >A <strong>substring</strong> is a <strong>contiguous </strong>sequence of characters within a string, defined as <code>s[i...j]</code> where <code>0 &le; i &le; j &lt; len(s)</code>.</span></p>\n<p><span >A <strong>palindrome</strong> is a string that reads the <strong>same </strong>forward and backward. More formally, <code>s</code> is a palindrome if <code>reverse(s) == s</code>.</span></p>\n</blockquote>\n<p><span ><strong>Note:</strong> If there are multiple palindromic substrings with the same length, return the <strong>first occurrence</strong> of the longest palindromic substring from left to right.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>s = &ldquo;forgeeksskeegfor&rdquo; <strong>\nOutput: </strong>&ldquo;geeksskeeg&rdquo;<strong>\nExplanation: </strong>There are several possible palindromic substrings like &ldquo;kssk&rdquo;, &ldquo;ss&rdquo;, &ldquo;eeksskee&rdquo; etc. But the substring &ldquo;geeksskeeg&rdquo; is the longest among all.</span></pre>\n<pre><span ><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>s = &ldquo;Geeks&rdquo; <strong>\nOutput: </strong>&ldquo;ee&rdquo;\n</span><strong >Explanation</strong><span >: <span style=\"background-color: #b4d7ff;\">\"ee\" is the longest palindromic substring of \"Geeks\".</span></span><span > </span></span></pre>\n<pre><span ><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>s = &ldquo;abc&rdquo; <strong>\nOutput: </strong>&ldquo;a&rdquo;\n</span><strong >Explanation</strong><span >: \"a\", \"b\" and \"c\" are longest palindromic substrings of same length. So,</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> the first occurrence is returned.</span></span></pre>\n<p><span ><strong >Constraints:</strong><br /><span >1 &le; s.size() &le; 10</span><sup><span >3</span><br /><span >s consist of only lowercase English letters.</span><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, find the longest palindromic substring within `s`. A substring is a contiguous sequence of characters within a string (e.g., `s[i...j]` where `0 <= i <= j < len(s)`). A palindrome is a string that reads the same forward and backward (i.e., `reverse(s) == s`). If multiple palindromic substrings have the same length, return the first occurrence from left to right.",
                "constraints": [
                    "1 <= s.size() <= 1000",
                    "s consists of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "forgeeksskeegfor",
                        "output": "geeksskeeg",
                        "explanation": "The longest palindromic substring in \"forgeeksskeegfor\" is \"geeksskeeg\"."
                    },
                    {
                        "input": "Geeks",
                        "output": "ee",
                        "explanation": "The longest palindromic substring in \"Geeks\" is \"ee\"."
                    },
                    {
                        "input": "abc",
                        "output": "a",
                        "explanation": "The longest palindromic substrings in \"abc\" are \"a\", \"b\", and \"c\", all with length 1.  The first occurrence is \"a\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Expand around each character to find the longest palindrome, considering both odd and even lengths.</span></p>\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "palindrome",
                "slug": "palindrome"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho",
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "makemytrip",
            "visa",
            "walmart",
            "google",
            "qualcomm",
            "groupon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string longestPalindrome(string &s) {\n        int count = -1;\n        string ans = \"\";\n\n        // Get the length of the input string.\n        int n = s.length();\n\n        // Create a boolean 2D array to store palindrome information.\n        bool dp[n][n];\n\n        // Iterate through different substring lengths.\n        for (int g = 0; g < n; g++) {\n            for (int i = 0, j = g; j < n; i++, j++) {\n                // Check if the substring is of length 1 (base case).\n                if (g == 0) {\n                    dp[i][j] = true;\n                } else if (g == 1) {\n                    // Check if the substring is of length 2 (base case).\n                    dp[i][j] = (s[i] == s[j]);\n                } else {\n                    // Check if the current substring is a\n                    // palindrome based on its ends.\n                    dp[i][j] = (s[i] == s[j] && dp[i + 1][j - 1]);\n                }\n\n                // Update the longest palindrome and its length if found.\n                if (dp[i][j] && count < j - i + 1) {\n                    ans = s.substr(i, j - i + 1);\n                    count = ans.length();\n                }\n            }\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Static method to find the longest palindromic substring\n    static String longestPalindrome(String s) {\n\n        // Initialize variables to keep track of the\n        // longest palindrome and its length.\n        int count = -1;\n        String ans = \"\";\n\n        // Get the length of the input string.\n        int n = s.length();\n\n        // Create a boolean 2D array to store palindrome information.\n        boolean[][] dp = new boolean[n][n];\n\n        // Iterate through different substring lengths.\n        for (int g = 0; g < n; g++) {\n            for (int i = 0, j = g; j < n; i++, j++) {\n                // Check if the substring is of length 1 (base case).\n                if (g == 0) {\n                    dp[i][j] = true;\n                } else if (g == 1) {\n                    // Check if the substring is of length 2 (base case).\n                    dp[i][j] = (s.charAt(i) == s.charAt(j));\n                } else {\n                    // Check if the current substring is a\n                    // palindrome based on its ends.\n                    dp[i][j] = (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]);\n                }\n\n                // Update the longest palindrome and its length if found.\n                if (dp[i][j] && count < s.substring(i, j + 1).length()) {\n                    ans = s.substring(i, j + 1);\n                    count = ans.length();\n                }\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def longestPalindrome(self, s):\n\n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n\n        start, maxLen = 0, 1\n\n        # All substrings of length 1 are palindromes\n        for i in range(n):\n            dp[i][i] = True\n\n        # Check for sub-string of length 2\n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                dp[i][i + 1] = True\n                if maxLen < 2:\n                    start = i\n                    maxLen = 2\n\n        # Check for lengths greater than 2\n        for k in range(3, n + 1):\n            for i in range(n - k + 1):\n                j = i + k - 1\n\n                if dp[i + 1][j - 1] and s[i] == s[j]:\n                    dp[i][j] = True\n\n                    if k > maxLen:\n                        start = i\n                        maxLen = k\n\n        return s[start:start + maxLen]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    longestPalindrome(s) {\n        // Initialize variables to keep track of the\n        // longest palindrome and its length.\n        let count = -1;\n        let ans = \"\";\n\n        // Get the length of the input string.\n        const n = s.length;\n\n        // Create a boolean 2D array to store\n        // palindrome information.\n        const dp = Array.from({length : n}, () => Array(n).fill(false));\n\n        // Iterate through different substring lengths.\n        for (let g = 0; g < n; g++) {\n            for (let i = 0, j = g; j < n; i++, j++) {\n                // Check if the substring is of length 1 (base case).\n                if (g === 0) {\n                    dp[i][j] = true;\n                } else if (g === 1) {\n                    // Check if the substring is of length 2 (base case).\n                    dp[i][j] = s[i] === s[j];\n                } else {\n                    // Check if the current substring is a\n                    // palindrome based on its ends.\n                    dp[i][j] = s[i] === s[j] && dp[i + 1][j - 1];\n                }\n\n                // Update the longest palindrome and its length if found.\n                if (dp[i][j] && count < j - i + 1) {\n                    ans = s.substring(i, j + 1);\n                    count = ans.length;\n                }\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}