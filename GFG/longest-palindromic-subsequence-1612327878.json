{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703355,
            "title": "Longest Palindromic Subsequence",
            "titleSlug": "longest-palindromic-subsequence-1612327878",
            "content": "<p><span >Given a string <strong>s</strong>, return the <strong>length </strong>of the longest palindromic subsequence.</span></p>\n<p><span >A subsequence is a sequence that can be derived from the given sequence by deleting some or no elements without changing the order of the remaining elements.</span></p>\n<p><span ><span style=\"font-size: 18.6667px;\">A palindromic sequence is a sequence that reads the same forward and backward.</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"bbabcbcab\"\n<strong>Output:</strong> 7\n<strong>Explanation</strong>: Subsequence \"babcbab\" is the longest subsequence which is also a palindrome.\n</span></pre>\n<pre><span ><strong>Input</strong>: s = \"abcd\"\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: \"a\", \"b\", \"c\" and \"d\" are palindromic and all have a length 1.\n</span></pre>\n<pre><span ><strong>Input</strong>: s = \"agbdba\"\n<strong>Output:</strong> 5\n<strong>Explanation</strong>: The longest palindromic subsequence is \"abdba\", which has a length of 5. The characters in this subsequence are taken from the original string \"agbdba\", and they maintain the order of the string while forming a palindrome.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; s.size() &le; 1000<br />The string contains only lowercase letters.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, find the length of the longest palindromic subsequence. A subsequence is formed by deleting zero or more characters from the original string without changing the order of the remaining characters. A palindromic sequence reads the same forwards and backward.",
                "constraints": [
                    "1 <= s.size() <= 1000",
                    "The string contains only lowercase letters."
                ],
                "testcases": [
                    {
                        "input": "bbabcbcab",
                        "output": "7",
                        "explanation": "The longest palindromic subsequence is \"babcbab\", which has length 7."
                    },
                    {
                        "input": "abcd",
                        "output": "1",
                        "explanation": "Each character forms a palindromic subsequence of length 1 (e.g., \"a\", \"b\", \"c\", \"d\")."
                    },
                    {
                        "input": "agbdba",
                        "output": "5",
                        "explanation": "The longest palindromic subsequence is \"abdba\", which has a length of 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use dynamic programming to compare the string with its reverse and track common subsequences.</span></p>",
            "<p><span >Optimize the solution by storing intermediate results in a 2D array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int longestPalinSubseq(string &s) {\n        int n = s.length();\n        string rev_s = s;\n        reverse(rev_s.begin(), rev_s.end());\n\n        // A palindrome reads the same from front and reverse.\n        // Hence, the longest palindromic subsequence is\n        // basically the longest common subsequence in\n        // s and reverse(s)\n        int dp[n + 1][n + 1];\n\n        // Fill the dp array to find the longest palindromic subsequence\n        for (int i = 0; i <= n; ++i) {\n            for (int j = 0; j <= n; ++j) {\n                if (i == 0 || j == 0)\n                    dp[i][j] = 0;\n                else {\n                    if (s[i - 1] == rev_s[j - 1])\n                        dp[i][j] = 1 + dp[i - 1][j - 1];\n                    else\n                        dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[n][n];\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Backend complete function Template for Java\n\nclass Solution {\n    public int longestPalinSubseq(String s) {\n        int n = s.length();\n\n        StringBuilder st = new StringBuilder();\n        st.append(s);\n        st.reverse();\n\n        String rev_s = st.toString();\n\n        // A palindrome reads the same from front and reverse.\n        // Hence, the longest palindromic subsequence is\n        // basically the longest common subsequence in\n        // s and reverse(s)\n        int[][] dp = new int[n + 1][n + 1];\n\n        // Fill the dp array to find the longest palindromic subsequence\n        for (int i = 0; i <= n; ++i) {\n            for (int j = 0; j <= n; ++j) {\n                if (i == 0 || j == 0)\n                    dp[i][j] = 0;\n                else {\n                    if (s.charAt(i - 1) == rev_s.charAt(j - 1))\n                        dp[i][j] = 1 + dp[i - 1][j - 1];\n                    else\n                        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[n][n];\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Backend complete function Template for python3\n\n\nclass Solution:\n    # Function to find the length of the longest palindromic subsequence.\n    def longestPalinSubseq(self, s):\n        n = len(s)\n        rev_s = s[::-1]  # Reverse the string to compare with original\n\n        # Creating a dp array with size (n+1) x (n+1).\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n        # Filling up the dp array with the lengths of palindromic subsequences.\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == rev_s[j - 1]:\n                    dp[i][j] = 1 + dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        # Returning the length of the longest palindromic subsequence.\n        return dp[n][n]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\n/**\n * @param {string} s\n * @return {number}\n */\n\nclass Solution {\n    longestPalinSubseq(s) {\n        let n = s.length;\n        // Reverse the string s\n        let B = s.split('').reverse().join('');\n\n        // Create a dp array with size (n+1) x (n+1) initialized to 0\n        let dp = new Array(n + 1).fill(0).map(() => new Array(n + 1).fill(0));\n\n        // Fill the dp array based on longest common subsequence logic\n        for (let i = 1; i <= n; ++i) {\n            for (let j = 1; j <= n; ++j) {\n                if (s[i - 1] === B[j - 1]) {\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        // Return the length of the longest palindromic subsequence\n        return dp[n][n];\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}