{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700446,
            "title": "Longest Palindromic Substring in Linear Time",
            "titleSlug": "longest-palindromic-substring-in-linear-time",
            "content": "<p><span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\">Given a string, find the longest substring which is palindrome in Linear time O(N).</span></span></p>\n\n<p><span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Input:</strong></span><br />\n<span style=\"font-family:arial,helvetica,sans-serif\">The first line of input contains an integer T denoting the no of test cases . Then T test cases follow. The only&nbsp;line of each test case contains a string.</span></span></p>\n\n<p><span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Output:</strong></span><br />\n<span style=\"font-family:arial,helvetica,sans-serif\">For each test case print the&nbsp;Longest Palindromic Substring. If there are multiple such&nbsp;substrings of same length, print the one which appears first in the input string.</span></span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n<span style=\"font-family:arial,helvetica,sans-serif\">1 &lt;= T &lt;= 100</span><br />\n<span style=\"font-family:arial,helvetica,sans-serif\">1 &lt;= N &lt;= 50</span></span></p>\n\n<p><span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Example:</strong></span></span><br />\n<span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Input:</strong></span></span><br />\n<span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\">2</span><br />\n<span style=\"font-family:arial,helvetica,sans-serif\">babcbabcbaccba</span><br />\n<span style=\"font-family:arial,helvetica,sans-serif\">forgeeksskeegfor</span></span></p>\n\n<p><span style=\"font-size:18px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Output:</strong></span><br />\n<span style=\"font-family:arial,helvetica,sans-serif\">abcbabcba</span><br />\n<span style=\"font-family:arial,helvetica,sans-serif\">geeksskeeg</span></span></p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:14px\"><span style=\"font-family:arial,helvetica,sans-serif\"><strong>Note:</strong>The <strong>Input/Ouput</strong> format and <strong>Example</strong> given are used for system&#39;s internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.</span></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string, find the longest palindromic substring in linear time O(N). A palindromic substring is a substring that reads the same forwards and backward. If there are multiple substrings of the same maximum length, return the one that appears first in the input string.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 50 (Length of the string)"
                ],
                "testcases": [
                    {
                        "input": "babcbabcbaccba",
                        "output": "abcbabcba",
                        "explanation": "The longest palindromic substring in 'babcbabcbaccba' is 'abcbabcba'."
                    },
                    {
                        "input": "forgeeksskeegfor",
                        "output": "geeksskeeg",
                        "explanation": "The longest palindromic substring in 'forgeeksskeegfor' is 'geeksskeeg'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Whenever you find a palindromic substring about an index&nbsp;<strong>i</strong>,&nbsp;spanning&nbsp;<strong>x</strong>&nbsp;indexes to the left and <strong>x</strong>&nbsp;on right, this means, the&nbsp;<strong>x</strong>&nbsp;locations to the right are a mirror image of the&nbsp;<strong>x</strong>&nbsp;elements of the left. This implies, the lengths of palindromes about the indexes on the left can be used to find the palindromes on the right of&nbsp;<strong>i</strong>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// solution\n\nstring LongestPalindromeSubString(string text)\n{\n    int size = 2 * text.size() - 1;\n    int* pairs = new int[size]();\n    \n    // elements in pairs [] represent possible pivots\n    // about which palindromes can be found:\n    //\n    // text[0]        text[1]        text[2] ...\n    // pivot0  pivot1 pivot2  pivot3 pivot4  ...\n    // \n    // pairs[i] represents the number of matching pairs\n    // found about pivot i\n    \n    int longest = 1, index = 0;\n    // length of longest palindrome and its\n    // start index in string text\n    \n    int box = 0, mirror;\n    // box represents the end (index in text string)\n    // of the last ending palindrome discovered\n    // mirror is the pivot for it\n    \n    for( int i=1 ; i < size ; i++ )\n    {\n        int left_c = (i-1)/2;\n        int right_c = (i+2)/2;\n        // the closest indexes of string text, around pivot i\n        \n        if( right_c < box )\n        {\n            int identical = pairs[ mirror - ( i - mirror ) ];\n            // checking size of palindrome around mirror image\n            // of pivot i\n            \n            if(right_c + identical > box+1)\n                // if palindome exceed limits of box:\n                identical = box+1 - right_c;\n            \n            right_c += identical;\n            pairs[i] = identical;\n            left_c -= identical;\n            \n            if( right_c <= box || right_c == text.size() )\n                continue;\n        }\n        \n        while( left_c>=0 && right_c<text.size() && ( text[left_c] == text[right_c] ) )\n        // expanding as long as characters match\n        {\n            left_c--;\n            right_c++;\n            pairs[i]++;\n        }\n        \n        if(pairs[i] > 1 && right_c-1 > box)\n        // storing location of new box and mirror\n        {\n            box = right_c - 1;\n            mirror = i;\n        }\n        \n        int length = 2*pairs[i];\n        if(i%2==0) length++;\n        // length of palindrome about i\n        \n        if(length>longest)\n        {\n            // updating return substring\n            longest = length;\n            index = (i+1)/2 - length/2;\n        }\n    }\n    \n    return text.substr(index,longest);\n}\n\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass solution\n{\n    static String LongestPalindromeSubString(String text)\n    {\n        int size = 2 * text.length() - 1;\n        int pairs[] = new int[size];\n        \n        // elements in pairs [] represent possible pivots\n        // about which palindromes can be found:\n        //\n        // text[0]        text[1]        text[2] ...\n        // pivot0  pivot1 pivot2  pivot3 pivot4  ...\n        // \n        // pairs[i] represents the number of matching pairs\n        // found about pivot i\n        \n        int longest = 1, index = 0;\n        // length of longest palindrome and its\n        // start index in string text\n        \n        int box = 0, mirror=0;\n        // box represents the end (index in text string)\n        // of the last ending palindrome discovered\n        // mirror is the pivot for it\n        \n        for( int i=1 ; i < size ; i++ )\n        {\n            pairs[i] = 0;\n            int left_c = (i-1)/2;\n            int right_c = (i+2)/2;\n            // the closest indexes of string text, around pivot i\n            \n            if( right_c < box )\n            {\n                int identical = pairs[ mirror - ( i - mirror ) ];\n                // checking size of palindrome around mirror image\n                // of pivot i\n                \n                if(right_c + identical > box+1)\n                    // if palindome exceed limits of box:\n                    identical = box+1 - right_c;\n                \n                right_c += identical;\n                pairs[i] = identical;\n                left_c -= identical;\n                \n                if( right_c <= box || right_c == text.length() )\n                    continue;\n            }\n            \n            while( left_c>=0 && right_c<text.length() && ( text.charAt(left_c) == text.charAt(right_c) ) )\n            // expanding as long as characters match\n            {\n                left_c--;\n                right_c++;\n                pairs[i]++;\n            }\n            \n            if(pairs[i] > 1 && right_c-1 > box)\n            // storing location of new box and mirror\n            {\n                box = right_c - 1;\n                mirror = i;\n            }\n            \n            int length = 2*pairs[i];\n            if(i%2==0) length++;\n            // length of palindrome about i\n            \n            if(length>longest)\n            {\n                // updating return substring\n                longest = length;\n                index = (i+1)/2 - length/2;\n            }\n        }\n        \n        return text.substring(index,index+longest);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\ndef LongestPalindromeSubString(text):\n    pairs = [ 0 for _ in range(2*len(text)-1) ]\n    \n    # elements in pairs [] represent possible pivots\n    # about which palindromes can be found:\n    #\n    # text[0]        text[1]        text[2] ...\n    # pivot0  pivot1 pivot2  pivot3 pivot4  ...\n    # \n    # pairs[i] represents the number of matching pairs\n    # found about pivot i\n    \n    longest=1\n    index=0\n    # length of longest palindrome and its\n    # start index in string text\n    \n    box=0\n    mirror=0\n    # box represents the end (index in text string)\n    # of the last ending palindrome discovered\n    # mirror is the pivot for it\n    \n    for i in range(1,len(pairs)):\n        left_c = (i-1)//2\n        right_c = (i+2)//2\n        # the closest indexes of string text, around pivot i\n        \n        if right_c<box:\n            identical = pairs[ mirror - ( i - mirror ) ];\n            # checking size of palindrome around mirror image\n            # of pivot i\n            \n            if right_c+identical > box+1:\n                # if palindome exceed limits of box:\n                identical = box+1-right_c\n            \n            right_c += identical\n            pairs[i] = identical\n            left_c -= identical\n            \n            if right_c<=box or right_c==len(text):\n                continue\n        \n        while left_c>=0 and right_c<len(text) and text[left_c]==text[right_c]:\n            # expanding as long as characters match\n            left_c -=1\n            right_c +=1\n            pairs[i] +=1\n        \n        if pairs[i]>1 and right_c-1>box:\n            # storing location of new box and mirror\n            box = right_c-1\n            mirror = i\n        \n        length = 2*pairs[i]\n        if i%2==0:\n            length +=1\n        # length of palindrome about i\n        \n        if length>longest:\n            # updating return substring\n            longest=length\n            index=(i+1)//2 - length//2\n    \n    return text[ index : index+longest ]\n\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to return the longest palindrome substring\n    public string LongestPalindromeSubString(string text)\n    {\n        int size = 2 * text.Length - 1;\n        int[] pairs = new int[size];\n\n        int longest = 1;\n        int index = 0;\n\n        int box = 0;\n        int mirror = 0; // Initialize mirror variable\n\n        for (int i = 1; i < size; i++)\n        {\n            int left_c = (i - 1) / 2;\n            int right_c = (i + 2) / 2;\n\n            if (right_c < box)\n            {\n                int identical = pairs[mirror - (i - mirror)];\n\n                if (right_c + identical > box + 1)\n                    identical = box + 1 - right_c;\n\n                right_c += identical;\n                pairs[i] = identical;\n                left_c -= identical;\n\n                if (right_c <= box || right_c == text.Length)\n                    continue;\n            }\n\n            while (left_c >= 0 && right_c < text.Length && (text[left_c] == text[right_c]))\n            {\n                left_c--;\n                right_c++;\n                pairs[i]++;\n            }\n\n            if (pairs[i] > 1 && right_c - 1 > box)\n            {\n                box = right_c - 1;\n                mirror = i;\n            }\n\n            int length = 2 * pairs[i];\n            if (i % 2 == 0) length++;\n\n            if (length > longest)\n            {\n                longest = length;\n                index = (i + 1) / 2 - length / 2;\n            }\n        }\n\n        return text.Substring(index, longest);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}