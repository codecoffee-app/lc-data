{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710248,
            "title": "Longest Path in a Directed Acyclic Graph",
            "titleSlug": "longest-path-in-a-directed-acyclic-graph",
            "content": "<p><span style=\"font-size: 18px;\">Given a Weighted&nbsp;<strong>D</strong>irected&nbsp;<strong>A</strong>cyclic&nbsp;<strong>G</strong>raph (DAG) and a source vertex s in it, find the longest distances from s to all other vertices in the given graph. R</span><span style=\"font-size: 18px;\">eturn the distance array,&nbsp; in the distance array instead of passing <strong>INF</strong> you need to have <strong>INT_MIN</strong> driver will automatically update it to <strong>INF</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n<strong> </strong>= 3, m = 2, s = 0, edges[] = [[0,2,1],[0,1,1]]\n<strong>Output: </strong>distance[] = [0,1,1]\n<strong>Explanation: </strong>The shortest distance of vertex 1 from 0 is 1 and that of two is also 1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 6,m = 10, s = 1, edges[] = [[0,1,5],[0,2,3],[1,3,6],[1,2,2],[2,4,4],[2,5,2],[2,3,7],[3,5,1],[3,4,-1],[4,5,-2]]\n<strong>Output: </strong>distance[] = [INF,0,2,9,8,10]\n<strong>Explanation: </strong>The vertex zero is not reachable from vertex 1 so its distance is INF, for 2 it is 2, for 3 it is 9, the same goes for 4 and 5.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(V+E)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(V)</span><br /><br /></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10</span><sup><span style=\"font-size: 15px;\">3</span></sup><br /><span style=\"font-size: 18px;\">1&lt;=m&lt;=n*(n-1)/2</span><br /><span style=\"font-size: 18px;\">0&lt;=edges[i][0],edges[i][1]<br />-100&lt;=edges[i][2]&lt;=100.</span><br /><span style=\"font-size: 18px;\">&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a weighted directed acyclic graph (DAG) and a source vertex 's', find the longest distances from 's' to all other vertices in the graph. Return an array representing the longest distances from the source vertex 's' to each vertex. If a vertex is unreachable from the source, represent its distance as INT_MIN (which the driver will later convert to INF).",
                "constraints": [
                    "1 <= n <= 1000",
                    "1 <= m <= n*(n-1)/2",
                    "0 <= edges[i][0], edges[i][1] < n",
                    "-100 <= edges[i][2] <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 2, s = 0, edges = [[0,2,1],[0,1,1]]",
                        "output": "[0, 1, 1]",
                        "explanation": "The longest distance from vertex 0 to vertex 1 is 1, and the longest distance from vertex 0 to vertex 2 is also 1."
                    },
                    {
                        "input": "n = 6, m = 10, s = 1, edges = [[0,1,5],[0,2,3],[1,3,6],[1,2,2],[2,4,4],[2,5,2],[2,3,7],[3,5,1],[3,4,-1],[4,5,-2]]",
                        "output": "[INT_MIN, 0, 2, 9, 8, 10]",
                        "explanation": "Vertex 0 is not reachable from vertex 1, so its distance is INT_MIN. The longest distance from vertex 1 to vertex 2 is 2. The longest distance from vertex 1 to vertex 3 is 9. The longest distance from vertex 1 to vertex 4 is 8. The longest distance from vertex 1 to vertex 5 is 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Topo Sort</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\n// Function to perform topological sorting\nvoid topo(int src,vector<int> &vis,vector<vector<pair<int,int>>> g,vector<int>& order){\n    vis[src] = 1;\n    // Iterating over the adjacent nodes\n    for(auto x:g[src]){\n        // If the node is not visited, perform topological sorting\n        if(!vis[x.first])\n            topo(x.first,vis,g,order);\n    }\n    // Pushing the current node into the order vector\n    order.push_back(src);\n}\n\nclass Solution\n{\n    public:\n      // Function to find the maximum distance from a given source node to all other nodes\n      vector <int> maximumDistance(vector<vector<int>> edges,int v,int e,int src)\n      {\n\n            vector<vector<pair<int,int>>> g(v);\n            // Creating the adjacency list from the given edges\n            for(auto j:edges){\n                g[j[0]].push_back({j[1],j[2]});\n            }\n            // Vector to store the order of nodes after topological sorting\n            vector <int> order;\n            // Vector to track visited nodes during topological sorting\n            vector<int> vis(v,0);\n            // Performing topological sorting on all nodes\n            for(int i=0;i<v;i++){\n                if(!vis[i]){\n                    topo(i,vis,g,order);                    \n                }                                  \n            }\n            // Vector to store the maximum distance from the source node to all other nodes\n            vector<int> dist(v);\n            // Initializing all distances as INT_MIN except for the source node\n            for(int i=0;i<v;i++) dist[i] = INT_MIN;\n            dist[src] = 0;\n            // Iterating over the nodes in reverse topological order\n            for(int i=v-1;i>=0;i--){\n                // If the distance of the current node is not INT_MIN\n                if(dist[order[i]]!= INT_MIN){\n                    // Updating the distances of the adjacent nodes if a shorter path is found\n                    for(auto x:g[order[i]]){\n                        int v = dist[x.first];\n                        int w = x.second;\n                        int u = dist[order[i]];\n                        if(u + w > v)\n                            dist[x.first] = u + w;\n                    }\n                }\n            }\n\n            // Returning the maximum distance from the source node to all other nodes\n            return dist;\n      }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\nclass Solution{\r\n\tstatic class Pair{\r\n\t\tint first, second;\r\n\t\tPair(int first, int second){\r\n\t\t\tthis.first = first;\r\n\t\t\tthis.second = second;\r\n\t\t}\r\n\t}\r\n    static void topo(int src, boolean [] vis, ArrayList<ArrayList<Pair>> g, ArrayList<Integer> order){\r\n        vis[src] = true;\r\n        for(Pair x : g.get(src)){\r\n            if(!vis[x.first])\r\n                topo(x.first,vis,g,order);\r\n        }\r\n        order.add(src);\r\n    }\r\n    public static int [] maximumDistance(int v, int e, int src, int[][] edges) {\r\n        ArrayList<ArrayList<Pair>> g = new ArrayList<>();\r\n        for(int i = 0; i < v; i++)\r\n        \tg.add(new ArrayList<>());\r\n    \t//vector<vector<pair<int,int>>> g(v);\r\n        for(int [] j:edges){\r\n            g.get(j[0]).add(new Pair(j[1],j[2]));\r\n        }\r\n        ArrayList<Integer> order = new ArrayList<>();\r\n        boolean [] vis = new boolean[v];\r\n//        vector <int> order;\r\n//        vector<int> vis(v,0);\r\n        for(int i=0;i<v;i++){\r\n            if(!vis[i]){\r\n                topo(i,vis,g,order);                    \r\n            }                                  \r\n        }\r\n        int [] dist = new int[v];\r\n        //vector<int> dist(v);\r\n        for(int i=0;i<v;i++) dist[i] = Integer.MIN_VALUE;\r\n        dist[src] = 0;\r\n        for(int i=v-1;i>=0;i--){\r\n            if(dist[order.get(i)]!=Integer.MIN_VALUE){\r\n                for(Pair x:g.get(order.get(i))){\r\n                    int vv = dist[x.first];\r\n                    int w = x.second;\r\n                    int u = dist[order.get(i)];\r\n                    if(u + w > vv)\r\n                        dist[x.first] = u + w;\r\n                }\r\n            }\r\n        }\r\n\r\n        return dist;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}