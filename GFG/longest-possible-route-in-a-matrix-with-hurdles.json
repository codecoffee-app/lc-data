{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709901,
            "title": "Longest Possible Route in a Matrix with Hurdles",
            "titleSlug": "longest-possible-route-in-a-matrix-with-hurdles",
            "content": "<p><span style=\"font-size: 18px;\">Given an N&nbsp;x M&nbsp;matrix, with a few hurdles(denoted by 0) arbitrarily placed, calculate the length of the longest possible route possible from source<strong>(xs,ys)</strong> to a destination<strong>(xd,yd)</strong> within the matrix. We are allowed to move to only adjacent cells which are not hurdles. The route cannot contain any diagonal moves and a location once visited in a particular path cannot be visited again.If it is impossible to reach the destination from the source return <strong>-1</strong>.</span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">{xs,ys} = {0,0}</span>\n<span style=\"font-size: 18px;\">{xd,yd} = {1,7}</span>\n<span style=\"font-size: 18px;\">matrix = 1 1 1 1 1 1 1 1 1 1</span>\n<span style=\"font-size: 18px;\">\\t   1 1 0 1 1 0 1 1 0 1</span>\n<span style=\"font-size: 18px;\">\\t   1 1 1 1 1 1 1 1 1 1</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">24</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong>\n<strong><span style=\"font-size: 18px;\"><img style=\"height: 175px; width: 500px;\" src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/matrix_highlight.png\" alt=\"\" /></span></strong></pre>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong>\n<span style=\"font-size: 18px;\">{xs,ys} = {0,3}</span>\n<span style=\"font-size: 18px;\">{xd,yd} = {2,2}</span>\n<span style=\"font-size: 18px;\">matrix =<strong><span style=\"font-size: 18px;\"> </span></strong>1 0 0 1 0</span>\n<span style=\"font-size: 18px;\">\\t   0 0 0 1 0</span>\n<span style=\"font-size: 18px;\">\\t   0 1 1 0 0</span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">-1</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong>\n<span style=\"font-size: 18px;\">We can see that it is impossible to</span>\n<span style=\"font-size: 18px;\">reach the cell (2,2) from (0,3).</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>longestPath()&nbsp;</strong>which takes matrix ,source and destination as&nbsp;input parameters and returns an integer denoting the longest path.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(2^(N*M))<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N*M)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N,M &lt;= 10</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N x M matrix, where some cells are marked as hurdles (represented by 0), determine the length of the longest possible path from a source cell (xs, ys) to a destination cell (xd, yd).  Movement is allowed only to adjacent cells (up, down, left, right) that are not hurdles.  A cell cannot be visited more than once in a single path. If no path exists from the source to the destination, return -1.",
                "constraints": [
                    "1 <= N, M <= 10"
                ],
                "testcases": [
                    {
                        "input": "{xs, ys} = {0, 0}\n{xd, yd} = {1, 7}\nmatrix = 1 1 1 1 1 1 1 1 1 1\n\t   1 1 0 1 1 0 1 1 0 1\n\t   1 1 1 1 1 1 1 1 1 1",
                        "output": "24",
                        "explanation": "The longest path from (0,0) to (1,7) without revisiting cells and avoiding hurdles is of length 24."
                    },
                    {
                        "input": "{xs, ys} = {0, 3}\n{xd, yd} = {2, 2}\nmatrix = 1 0 0 1 0\n\t   0 0 0 1 0\n\t   0 1 1 0 0",
                        "output": "-1",
                        "explanation": "There is no possible path from (0,3) to (2,2) due to the placement of the hurdles."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nstruct Pair\r\n{\r\n    // true if destination is found\r\n    bool found = false;\r\n\r\n    // stores cost of longest path from current cell to\r\n    // destination cell\r\n    int value = 0;\r\n    Pair(bool f, int val)\r\n    {\r\n        found = f;\r\n        value = val;\r\n    }\r\n};\r\n\r\nclass Solution\r\n{\r\nprivate:\r\n    int dx[4] = {0, 0, 1, -1};\r\n    int dy[4] = {1, -1, 0, 0};\r\n\r\npublic:\r\n    // Function to find Longest Possible Route in the\r\n    // matrix with hurdles. If the destination is not reachable\r\n    // the function returns false with cost INT_MAX.\r\n    // (i, j) is source cell and (x, y) is destination cell.\r\n    Pair findLongestPathUtil(vector<vector<int>> &mat, int i, int j, int x,\r\n                             int y, vector<vector<bool>> visited)\r\n    {\r\n\r\n        \r\n\r\n        // if not a valid cell, return false\r\n        if (i < 0 || i >= mat.size() || j < 0 || j >= mat[0].size() || mat[i][j] == 0 || visited[i][j])\r\n        {\r\n            Pair p = {false, INT_MAX};\r\n            return p;\r\n        }\r\n        \r\n        // if (i, j) itself is destination, return true\r\n        if (i == x && j == y)\r\n        {\r\n            Pair p = {true, 0};\r\n            return p;\r\n        }\r\n\r\n        // include (i, j) in current path i.e.\r\n        // set visited(i, j) to true\r\n        visited[i][j] = true;\r\n\r\n        // res stores longest path from current cell (i, j) to\r\n        // destination cell (x, y)\r\n        int res = INT_MIN;\r\n\r\n        // go left from current cell\r\n        for (int k = 0; k < 4; k++)\r\n        {\r\n            int ii = i + dx[k];\r\n            int jj = j + dy[k];\r\n            Pair sol = findLongestPathUtil(mat, ii, jj, x, y, visited);\r\n            if (sol.found)\r\n                res = max(res, sol.value);\r\n        }\r\n\r\n        // Backtrack\r\n        visited[i][j] = false;\r\n\r\n        // if destination can be reached from current cell,\r\n        // return true\r\n        if (res != INT_MIN)\r\n        {\r\n            Pair p = {true, 1 + res};\r\n            return p;\r\n        }\r\n        else // if destination can't be reached from current cell return false\r\n        {\r\n\r\n            Pair p = {false, INT_MAX};\r\n            return p;\r\n        }\r\n    }\r\n\r\n    int longestPath(vector<vector<int>> mat, int xs, int ys, int xd, int yd)\r\n    {\r\n\r\n        int N = mat.size();\r\n        int M = mat[0].size();\r\n        vector<vector<bool>> visited(N + 1, vector<bool>(M + 1, false));\r\n\r\n        Pair p = findLongestPathUtil(mat, xs, ys, xd, yd, visited);\r\n\r\n        return p.found ? p.value : -1;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Pair\r\n{\r\n    boolean found = false;\r\n    int value = 0;\r\n    Pair(boolean f, int val)\r\n    {\r\n        this.found = f;\r\n        this.value = val;\r\n    }\r\n}\r\nclass Solution {\r\n    static int dx[] = {0, 0, 1, -1};\r\n    static int dy[] = {1, -1, 0, 0};\r\n    \r\n    static Pair findLongestPathUtil(int [][]mat, int i, int j, int x,\r\n                             int y, boolean [][]visited)\r\n    {\r\n\r\n        \r\n\r\n        // if not a valid cell, return false\r\n        if (i < 0 || i >= mat.length || j < 0 || j >= mat[0].length || mat[i][j] == 0 || visited[i][j])\r\n        {\r\n            Pair p = new Pair(false, Integer.MAX_VALUE);\r\n            return p;\r\n        }\r\n        // if (i, j) itself is destination, return true\r\n        if (i == x && j == y)\r\n        {\r\n            Pair p = new Pair(true, 0);\r\n            return p;\r\n        }\r\n        // include (i, j) in current path i.e.\r\n        // set visited(i, j) to true\r\n        visited[i][j] = true;\r\n\r\n        // res stores longest path from current cell (i, j) to\r\n        // destination cell (x, y)\r\n        int res = Integer.MIN_VALUE;\r\n\r\n        // go left from current cell\r\n        for (int k = 0; k < 4; k++)\r\n        {\r\n            int ii = i + dx[k];\r\n            int jj = j + dy[k];\r\n            Pair sol = findLongestPathUtil(mat, ii, jj, x, y, visited);\r\n            if (sol.found)\r\n                res = Math.max(res, sol.value);\r\n        }\r\n\r\n        // Backtrack\r\n        visited[i][j] = false;\r\n\r\n        // if destination can be reached from current cell,\r\n        // return true\r\n        if (res != Integer.MIN_VALUE)\r\n        {\r\n            Pair p = new Pair(true, 1 + res);\r\n            return p;\r\n        }\r\n        else // if destination can't be reached from current cell return false\r\n        {\r\n\r\n            Pair p = new Pair(false, Integer.MAX_VALUE);\r\n            return p;\r\n        }\r\n    }\r\n    \r\n    public static int longestPath(int[][] mat,int n,int m,int xs,int ys,int xd,int yd) {\r\n        int N = mat.length;\r\n        int M = mat[0].length;\r\n        boolean [][] visited = new boolean[N+1][M+1];\r\n\r\n        Pair p = findLongestPathUtil(mat, xs, ys, xd, yd, visited);\r\n\r\n        return p.found ? p.value : -1;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import sys\r\nfrom typing import List\r\nsys.setrecursionlimit(10**5)\r\nclass Solution:\r\n    def isSafe(self,pos, n,m,visited, mat):\r\n        return pos[0]>=0 and pos[0]<n and pos[1]>=0 and pos[1]<m and mat[pos[0]][pos[1]]!=0 and (pos[0],pos[1]) not in visited\r\n    def util(self,start, end, mat, visited, n,m, res, d):\r\n        visited.add((start[0],start[1]))\r\n        if start[0]==end[0] and start[1]==end[1]:\r\n            if res[0]<d:\r\n                res[0]=d\r\n                visited.remove((start[0],start[1]))\r\n                return\r\n        path=[[0,1],[1,0],[0,-1],[-1,0]]\r\n        for p in path:\r\n            if self.isSafe((start[0]+p[0], start[1]+p[1]), n,m, visited, mat):\r\n                self.util((start[0]+p[0], start[1]+p[1]), end, mat, visited, n,m, res, d+1)\r\n        visited.remove((start[0],start[1]))\r\n        return\r\n    def longestPath(self,mat : List[List[int]],n : int, m : int, xs : int, ys : int, xd : int, yd : int) -> int:\r\n        # code here\r\n        # if mat[xs][ys]==0 or mat[xd][yd]==0:\r\n        #     return -1\r\n        visited=set()\r\n        visited.add((xs,ys))\r\n        # q=Queue()\r\n        res=[0]\r\n        \r\n        if mat[xs][ys]==0 :\r\n            return -1\r\n        self.util((xs,ys),(xd,yd), mat, visited, n,m, res,0)\r\n        if res[0]!=0:\r\n            return res[0]\r\n        return -1",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    longestPath(mat, n, m, xs, ys, xd, yd) {\n        let visited = new Set();\n        visited.add(`${xs},${ys}`);\n        \n        function isSafe(pos, n, m, visited, mat) {\n            const [x, y] = pos;\n            return x >= 0 && x < n && y >= 0 && y < m && mat[x][y] != 0 && !visited.has(`${x},${y}`);\n        }\n        \n        function util(start, end, mat, visited, n, m, res, d) {\n            const [sx, sy] = start;\n            visited.add(`${sx},${sy}`);\n            \n            if (sx == end[0] && sy == end[1]) {\n                if (res[0] < d) {\n                    res[0] = d;\n                    visited.delete(`${sx},${sy}`);\n                    return;\n                }\n            }\n            \n            const path = [[0,1], [1,0], [0,-1], [-1,0]];\n            \n            for (let p of path) {\n                const [cx, cy] = [sx + p[0], sy + p[1]];\n                if (isSafe([cx, cy], n, m, visited, mat)) {\n                    util([cx, cy], end, mat, visited, n, m, res, d + 1);\n                }\n            }\n            \n            visited.delete(`${sx},${sy}`);\n            return;\n        }\n        \n        let res = [0];\n        \n        if (mat[xs][ys] == 0) {\n            return -1;\n        }\n        \n        util([xs, ys], [xd, yd], mat, visited, n, m, res, 0);\n        \n        if (res[0] != 0) {\n            return res[0];\n        }\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}