{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703402,
            "title": "Longest Prefix Suffix",
            "titleSlug": "longest-prefix-suffix2527",
            "content": "<p><span style=\"font-size: 18px;\">Given a string of characters <strong>s</strong>, find the length of the longest prefix which is also a suffix.<br /></span><span style=\"font-size: 18px;\">Note: Prefix and suffix can be overlapping but they should not be equal to the entire string.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"abab\"</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 2\n<strong>Explanation:</strong> \"ab\" is the longest prefix and suffix. </span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><span style=\"font-size: 18px;\"> s = \"aabcdaabc\"<br /></span><span style=\"font-size: 18px;\"><strong>Output: </strong>4<br /><strong>Explanation:</strong> The string \"aabc\" is the longest prefix and suffix.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"aaaa\"</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 3\n<strong>Explanation:</strong> \"aaa\" is the longest prefix and suffix. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; s.size() &le; 10<sup>6</sup><br /><strong>s</strong>&nbsp;contains only lowercase English alphabets.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase English alphabets, find the length of the longest prefix of `s` which is also a suffix of `s`. The prefix and suffix can overlap, but should not be equal to the entire string itself.",
                "constraints": [
                    "1 <= s.size() <= 10^6",
                    "s contains only lowercase English alphabets."
                ],
                "testcases": [
                    {
                        "input": "abab",
                        "output": "2",
                        "explanation": "The longest prefix that is also a suffix is \"ab\", which has length 2."
                    },
                    {
                        "input": "aabcdaabc",
                        "output": "4",
                        "explanation": "The longest prefix that is also a suffix is \"aabc\", which has length 4."
                    },
                    {
                        "input": "aaaa",
                        "output": "3",
                        "explanation": "The longest prefix that is also a suffix is \"aaa\", which has length 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use preprocessing algorithm of KMP.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "microsoft",
            "makemytrip"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find the length of the longest proper prefix which is also a proper\n    // suffix\n    int longestPrefixSuffix(string &s) {\n        vector<int> A(s.size(), 0);\n        int j = 0, i = 1;\n\n        // Loop to calculate the prefix array\n        while (i < s.size()) {\n            if (s[i] == s[j]) {\n                // Increment j by 1 and assign the value to the prefix array\n                A[i] = j + 1;\n                j++;\n                i++;\n            } else {\n                if (j == 0)\n                    i++;\n                else\n                    // Set j to the previous value in the prefix array\n                    j = A[j - 1];\n            }\n        }\n\n        // Return the last element of the prefix array\n        return A.back();\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Backend complete function for JAVA\n\nclass Solution {\n    // Function to calculate the Longest Proper Prefix which is also a Suffix (lps) of\n    // the given string\n    int longestPrefixSuffix(String s) {\n        int[] A = new int[s.length()];\n        int j = 0, i = 1;\n        while (i < s.length()) {\n            if (s.charAt(i) == s.charAt(j)) {\n                A[i] = j + 1;\n                j++;\n                i++;\n            } else {\n                if (j == 0)\n                    i++;\n                else\n                    j = A[j - 1];\n            }\n        }\n\n        return A[s.length() - 1];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find the length of the longest proper prefix which is also a proper suffix\n    def longestPrefixSuffix(self, s):\n        A = [0] * len(\n            s)  # Initialize an array of size equal to the length of the string\n        j = 0  # Initialize j to 0\n        i = 1  # Initialize i to 1\n\n        # Loop to calculate the prefix array\n        while i < len(s):\n            if s[i] == s[j]:  # If characters match\n                A[i] = j + 1  # Set the prefix array at i to j + 1\n                j += 1\n                i += 1\n            else:\n                if j == 0:\n                    i += 1  # Move to the next character\n                else:\n                    j = A[j -\n                          1]  # Set j to the previous value in the prefix array\n\n        return A[-1]  # Return the last element of the prefix array\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    public int longestPrefixSuffix(string str) {\n        List<int> A = new List<int>(new int[str.Length]);\n        int j = 0, i = 1;\n\n        while (i < str.Length) {\n            if (str[i] == str[j]) {\n                A[i] = j + 1;\n                j++;\n                i++;\n            } else {\n                if (j == 0) {\n                    i++;\n                } else {\n                    j = A[j - 1];\n                }\n            }\n        }\n\n        return A[A.Count - 1];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} s\n * @returns {number}\n */\n\nclass Solution {\n    longestPrefixSuffix(s) {\n        let A = new Array(s.length).fill(0);\n        let j = 0, i = 1;\n\n        while (i < s.length) {\n            if (s[i] == s[j]) {\n                A[i] = j + 1;\n                j++;\n                i++;\n            } else {\n                if (j == 0)\n                    i++;\n                else\n                    j = A[j - 1];\n            }\n        }\n\n        return A[A.length - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}