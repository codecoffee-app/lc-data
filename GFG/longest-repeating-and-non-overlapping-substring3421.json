{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703689,
            "title": "Longest repeating and non-overlapping substring",
            "titleSlug": "longest-repeating-and-non-overlapping-substring3421",
            "content": "<p><span >Given a string <strong>s</strong>, find the longest repeating non-overlapping substring in it. In other words find 2 identical substrings of maximum length which <strong>do not overlap</strong>. Return the longest non-overlapping substring. Return <strong>-1</strong>&nbsp;if no such string exists.</span></p>\n<p><span >Note:<strong> </strong>Multiple Answers are possible but you have to return the substring whose <strong>first occurrence</strong> is earlier.</span></p>\n<p><span >For Example: \"abhihiab\", here both <strong>\"ab\"</strong> and <strong>\"hi\"</strong> are possible answers. But you will have to return <strong>\"ab\"</strong> because its first occurrence appears before the first occurrence of \"hi\".</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong>&nbsp;s =<strong> </strong>\"acdcdacdc\"\n<strong>Output: </strong>\"acdc\"\n<strong>Explanation: </strong>The string \"acdc\" is the longest Substring of s which is repeating but not overlapping.</span></pre>\n<pre><span ><strong>Input:</strong> s = \"geeksforgeeks\"<br /><strong>Output: </strong>\"geeks\"<br /><strong>Explanation: </strong>The string \"geeks\" is the longest subString of s which is repeating but not overlapping.<br /></span></pre>\n<pre><span ><strong>Input:</strong>&nbsp;s =<strong> </strong>\"heheheh\"\n<strong>Output: </strong>\"heh\"\n<strong>Explanation: </strong>The string \"heh\" is the longest Substring of s which is repeating but not overlapping.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= s.size() &lt;= 10<sup>3</sup><br />s contains only lowercase English alphabets.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, find the longest repeating non-overlapping substring. This means finding two identical substrings of maximum length within `s` that do not share any characters (they don't overlap). Return this longest non-overlapping substring. If no such string exists, return -1.",
                "constraints": [
                    "1 <= s.size() <= 1000",
                    "s contains only lowercase English alphabets."
                ],
                "testcases": [
                    {
                        "input": "acdcdacdc",
                        "output": "acdc",
                        "explanation": "The string 'acdc' is the longest substring of s that repeats without overlapping."
                    },
                    {
                        "input": "geeksforgeeks",
                        "output": "geeks",
                        "explanation": "The string 'geeks' is the longest substring of s that repeats without overlapping."
                    },
                    {
                        "input": "heheheh",
                        "output": "heh",
                        "explanation": "The string 'heh' is the longest substring of s that repeats without overlapping."
                    },
                    {
                        "input": "abhihiab",
                        "output": "ab",
                        "explanation": "Both 'ab' and 'hi' are possible answers, but 'ab' is returned because its first occurrence appears earlier in the string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The basic idea is to find the longest repeating suffix for all prefixes in the string s. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "makemytrip",
            "walmart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string longestSubstring(string& s) {\n        int N = s.size();\n        int LCSRe[N + 1][N + 1];\n\n        // Setting all to 0\n        memset(LCSRe, 0, sizeof(LCSRe));\n\n        string res;         // To store result\n        int res_length = 0; // To store length of result\n\n        // building table in bottom-up manner\n        int i, index = 0;\n        for (i = 1; i <= N; i++) {\n            for (int j = i + 1; j <= N; j++) {\n                // (j-i) > LCSRe[i-1][j-1] to remove\n                // overlapping\n                if (s[i - 1] == s[j - 1] && LCSRe[i - 1][j - 1] < (j - i)) {\n                    LCSRe[i][j] = LCSRe[i - 1][j - 1] + 1;\n\n                    // updating maximum length of the\n                    // substring and updating the finishing\n                    // index of the suffix\n                    if (LCSRe[i][j] > res_length) {\n                        res_length = LCSRe[i][j];\n                        index = max(i, index);\n                    }\n                } else\n                    LCSRe[i][j] = 0;\n            }\n        }\n\n        // If we have non-empty result, then insert all\n        // characters from first character to last\n        // character of string\n        if (res_length > 0)\n            for (i = index - res_length + 1; i <= index; i++)\n                res.push_back(s[i - 1]);\n        if (res == \"\")\n            res = \"-1\";\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public String longestSubstring(String s) {\n        int N = s.length();\n        int[][] LCSRe = new int[N + 1][N + 1];\n\n        // Setting all to 0\n        for (int[] row : LCSRe) {\n            Arrays.fill(row, 0);\n        }\n\n        StringBuilder res = new StringBuilder(); // To store result\n        int res_length = 0;                      // To store length of result\n        int index = 0; // To store the starting index of the longest substring\n\n        // building table in bottom-up manner\n        for (int i = 1; i <= N; i++) {\n            for (int j = i + 1; j <= N; j++) {\n                // (j-i) > LCSRe[i-1][j-1] to remove\n                // overlapping\n                if (s.charAt(i - 1) == s.charAt(j - 1) &&\n                    LCSRe[i - 1][j - 1] < (j - i)) {\n                    LCSRe[i][j] = LCSRe[i - 1][j - 1] + 1;\n\n                    // updating maximum length of the\n                    // substring and updating the starting\n                    // index of the longest substring\n                    if (LCSRe[i][j] > res_length) {\n                        res_length = LCSRe[i][j];\n                        index = Math.max(i, index);\n                    }\n                } else {\n                    LCSRe[i][j] = 0;\n                }\n            }\n        }\n\n        // If we have non-empty result, then insert all\n        // characters from the starting index to the\n        // length of the longest substring\n        if (res_length > 0) {\n            for (int i = index - res_length + 1; i <= index; i++) {\n                res.append(s.charAt(i - 1));\n            }\n        } else {\n            res.append(\"-1\");\n        }\n\n        return res.toString();\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    # Function to find the longest substring with at most N distinct characters.\n    def longestSubstring(self, s):\n        N = len(s)\n        # Creating a 2D array dp to store the longest substring length\n        dp = [[0] * (N + 1) for i in range(N + 1)]\n        # Initializing variables maxi and start to track the maximum length and starting index of the substring\n        maxi = 0\n        start = 0\n        # Looping through the string to fill the dp array\n        for i in range(0, N):\n            for j in range(i + 1, N):\n                # Checking if the current characters are equal and the distance between them is greater than the current longest substring length\n                if s[i] == s[j] and j - i > dp[i][j]:\n                    # Increasing the length of the substring by 1 and updating the dp array\n                    dp[i + 1][j + 1] = 1 + dp[i][j]\n                    # Updating the maximum length and starting index if the current length is larger\n                    if dp[i + 1][j + 1] > maxi:\n                        start = j\n                        maxi = dp[i + 1][j + 1]\n\n        # Checking if the resulting substring is empty and returning -1 if true\n        if s[start - maxi + 1:start + 1] == \"\":\n            return -1\n        # Returning the longest substring\n        return s[start - maxi + 1:start + 1]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\nclass Solution {\n    // Function to find the longest substring without repeating characters.\n    longestSubstring(s) {\n        // Length of the input string\n        let N = s.length;\n\n        // 2D DP array to store the length of repeating substring ending at specific\n        // indices\n        let dp = Array.from({length : N + 1}, () => new Array(N + 1).fill(0));\n\n        // Variables to store the maximum length of repeating substring and its starting\n        // index\n        let maxi = 0;\n        let start = 0;\n\n        // Iterate over each character in the string\n        for (let i = 0; i < N; i++) {\n            // Compare the current character with all subsequent characters\n            for (let j = i + 1; j < N; j++) {\n                // If characters match and the gap between them is greater than the\n                // previous value in dp\n                if (s[i] === s[j] && j - i > dp[i][j]) {\n                    // Update dp for the next indices based on previous value + 1\n                    dp[i + 1][j + 1] = 1 + dp[i][j];\n\n                    // If the current substring length is greater than the recorded\n                    // maximum length\n                    if (dp[i + 1][j + 1] > maxi) {\n                        // Update start index and maximum length of repeating substring\n                        start = j;\n                        maxi = dp[i + 1][j + 1];\n                    }\n                }\n            }\n        }\n\n        // If the calculated start and length do not form a valid substring\n        if (start - maxi + 1 > start) {\n            return -1;\n        }\n\n        // Return the longest substring without repeating characters\n        return s.substring(start - maxi + 1, start + 1);\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}