{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705261,
            "title": "Longest Repeating Subsequence",
            "titleSlug": "longest-repeating-subsequence2004",
            "content": "<p><span style=\"font-size: 18px;\">Given string str, find the length of the longest repeating subsequence such that it can be found twice in the given string. </span></p>\n<p><span style=\"font-size: 18px;\">The two identified subsequences A and B can use the same ith character from string <strong>s</strong> if and only if that ith character has different indices in A and B. For example, A = \"xax\" and B = \"xax\" then the index of the first \"x\" must be different in the original string for A and B.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"axxzxy\"\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>The given array with indexes looks like\na x x z x y \n0 1 2 3 4 5</span>\n<span style=\"font-size: 18px;\">The longest subsequence is \"xx\". It appears twice as explained below.</span>\n<span style=\"font-size: 18px;\"><strong>subsequence A</strong>\nx x\n0 1  &lt;-- index of subsequence A\n------\n1 2  &lt;-- index of s</span>\n<span style=\"font-size: 18px;\"><strong>subsequence B</strong>\nx x\n0 1  &lt;-- index of subsequence B\n------\n2 4  &lt;-- index of s</span>\n<span style=\"font-size: 18px;\">We are able to use character 'x' (at index 2 in s) in both subsequences as it appears on index 1 in subsequence A and index 0 in subsequence B.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"axxxy\"\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>The given array with indexes looks like\na x x x y&nbsp;\n0 1 2 3 4\nThe longest subsequence is \"xx\". It appears twice as explained below.\n<strong>subsequence A</strong>\nx x\n0 1 &nbsp;&lt;-- index of subsequence A\n------\n1 2 &nbsp;&lt;-- index of s\n<strong>subsequence B</strong>\nx x\n0 1 &nbsp;&lt;-- index of subsequence B\n------\n2 3 &nbsp;&lt;-- index of s\nWe are able to use character 'x' (at index 2 in s) in both subsequencesas it appears on index 1 in subsequence A and index 0 in subsequence B.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= s.size() &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, find the length of the longest repeating subsequence. A repeating subsequence is a sequence of characters that appears at least twice in the string.  When identifying two instances of the subsequence (A and B), the same character from the original string `s` can be used in both A and B only if its indices are different in A and B.",
                "constraints": [
                    "1 <= s.size() <= 1000"
                ],
                "testcases": [
                    {
                        "input": "axxzxy",
                        "output": "2",
                        "explanation": "The longest repeating subsequence is \"xx\". One instance of \"xx\" can be found at indices 1 and 2 of \"axxzxy\". Another instance can be found at indices 2 and 4.  Since the index positions are different between the two subsequences, they are valid."
                    },
                    {
                        "input": "axxxy",
                        "output": "2",
                        "explanation": "The longest repeating subsequence is \"xx\". One instance of \"xx\" can be found at indices 1 and 2 of \"axxxy\". Another instance can be found at indices 2 and 3. Since the index positions are different between the two subsequences, they are valid."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Think of it as finding the Longest Common Subsequence (LCS) of the string with itself, but ensure the indices of matching characters are different.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int LongestRepeatingSubsequence(string &s) {\n        int n = s.length();\n\n        // Create and initialize DP table\n        int dp[n + 1][n + 1];\n        for (int i = 0; i <= n; i++)\n            for (int j = 0; j <= n; j++)\n                dp[i][j] = 0;\n\n        // Fill dp table (similar to LCS loops)\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                // If characters match and indexes are not same\n                if (s[i - 1] == s[j - 1] && i != j)\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                // If characters do not match\n                else\n                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);\n            }\n        }\n        return dp[n][n];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int LongestRepeatingSubsequence(String s) {\n        int n = s.length();\n\n        // Create and initialize DP table\n        int[][] dp = new int[n + 1][n + 1];\n\n        // Fill the DP table (similar to LCS loops)\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                // If characters match and indexes are not the same\n                if (s.charAt(i - 1) == s.charAt(j - 1) && i != j) {\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                }\n                // If characters do not match\n                else {\n                    dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);\n                }\n            }\n        }\n\n        return dp[n][n];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def LongestRepeatingSubsequence(self, s: str) -> int:\n        n = len(s)\n\n        # Create and initialize DP table\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n        # Fill dp table (similar to LCS loops)\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                # If characters match and indexes are not the same\n                if s[i - 1] == s[j - 1] and i != j:\n                    dp[i][j] = 1 + dp[i - 1][j - 1]\n                # If characters do not match\n                else:\n                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n\n        return dp[n][n]\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Complete this function\n    // Function to find the longest repeating subsequence in the given string.\n    public int LongestRepeatingSubsequence(string s) {\n        int n = s.Length;\n\n        // Create and initialize DP table\n        int[,] dp = new int[n + 1, n + 1];\n        for (int i = 0; i <= n; i++)\n            for (int j = 0; j <= n; j++) dp[i, j] = 0;\n\n        // Fill dp table (similar to LCS loops)\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                // If characters match and indexes are not same\n                if (s[i - 1] == s[j - 1] && i != j) dp[i, j] = 1 + dp[i - 1, j - 1];\n                // If characters do not match\n                else\n                    dp[i, j] = Math.Max(dp[i, j - 1], dp[i - 1, j]);\n            }\n        }\n        return dp[n, n];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    LongestRepeatingSubsequence(s) {\n        let n = s.length;\n\n        // Create and initialize DP table\n        let dp = [];\n        for (let i = 0; i <= n; i++) {\n            dp[i] = [];\n            for (let j = 0; j <= n; j++) {\n                dp[i][j] = 0;\n            }\n        }\n\n        // Fill dp table (similar to LCS loops)\n        for (let i = 1; i <= n; i++) {\n            for (let j = 1; j <= n; j++) {\n                // If characters match and indexes are not same\n                if (s[i - 1] == s[j - 1] && i != j) {\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                }\n                // If characters do not match\n                else {\n                    dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);\n                }\n            }\n        }\n        return dp[n][n];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}