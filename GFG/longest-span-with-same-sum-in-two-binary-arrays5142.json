{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702727,
            "title": "Longest Span in two Binary Arrays",
            "titleSlug": "longest-span-with-same-sum-in-two-binary-arrays5142",
            "content": "<p><span style=\"font-size: 18px;\">Given two<strong> </strong>binary<strong> </strong>arrays <strong>arr1[]</strong> and <strong>arr2[]</strong> of same size. Find the length of the longest common span [i, j] where j&gt;=i such that <strong>arr1[i..j]</strong> is equal to <strong>arr2[i..j]</strong>.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1[] = [0, 1, 0, 0, 0, 0], arr2[] = [1, 0, 1, 0, 0, 1]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest span with same sum is from index 1 to 4 following zero based indexing.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1[] = [0, 0, 1, 1, 0, 0], arr2[] = [1, 0, 1, 0, 0, 1]\n<strong>Output:</strong> 5<br /><strong>Explanation:</strong> The longest span with same sum is from index 1 to 5 following zero based indexing.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />0 &lt;= arr1[i], arr2[i] &lt;= 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary arrays, `arr1` and `arr2`, of the same size, find the length of the longest common span [i, j] (where j >= i) such that the sum of elements in `arr1[i..j]` is equal to the sum of elements in `arr2[i..j]`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr1[i], arr2[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "arr1[] = [0, 1, 0, 0, 0, 0], arr2[] = [1, 0, 1, 0, 0, 1]",
                        "output": "4",
                        "explanation": "The longest span with an equal sum between the two arrays is from index 1 to 4 (inclusive), using zero-based indexing.  The sum of arr1[1..4] (1+0+0+0 = 1) is equal to the sum of arr2[1..4] (0+1+0+0 = 1)."
                    },
                    {
                        "input": "arr1[] = [0, 0, 1, 1, 0, 0], arr2[] = [1, 0, 1, 0, 0, 1]",
                        "output": "5",
                        "explanation": "The longest span with an equal sum between the two arrays is from index 1 to 5 (inclusive), using zero-based indexing.  The sum of arr1[1..5] (0+1+1+0+0 = 2) is equal to the sum of arr2[1..5] (0+1+0+0+1 = 2)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Maintain a sum that increases if encounter 1 in arr1&nbsp; and decreases when encounter 1 in arr2. now try to find the largest span which ends at index i and store maximum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int longestCommonSum(vector<int> &arr1, vector<int> &arr2) {\n        int n = arr1.size();\n        vector<int> diff(n);\n\n        // Step 1: Calculate the difference array\n        // The difference array `diff` will store the difference between corresponding\n        // elements of `arr1` and `arr2`.\n        for (int i = 0; i < n; ++i) {\n            diff[i] = arr1[i] - arr2[i];\n        }\n\n        unordered_map<int, int> sumMap; // To store the first occurrence of each sum\n        int sum = 0, maxLength = 0;\n\n        // Step 2: Traverse the difference array and find the longest subarray with sum\n        // 0\n        for (int i = 0; i < n; ++i) {\n            sum += diff[i]; // Accumulate the sum\n\n            // If the sum is 0, the subarray from index 0 to i has the same sum in both\n            // arrays\n            if (sum == 0) {\n                maxLength = i + 1;\n            }\n\n            // If this sum has been seen before, the subarray between the previous\n            // index and the current index has a sum of 0.\n            if (sumMap.find(sum) != sumMap.end()) {\n                maxLength = max(maxLength, i - sumMap[sum]);\n            } else {\n                // Store the first occurrence of this sum\n                sumMap[sum] = i;\n            }\n        }\n        // Return the length of the longest subarray with the same sum\n        return maxLength;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public int longestCommonSum(int[] arr1, int[] arr2) {\n        int n = arr1.length;\n        int[] diff = new int[n];\n\n        // Create the difference array\n        for (int i = 0; i < n; i++) {\n            diff[i] = arr1[i] - arr2[i];\n        }\n\n        Map<Integer, Integer> sumMap =\n            new HashMap<>(); // To store the first occurrence of each sum\n        int currentSum = 0;\n        int maxLength = 0;\n\n        for (int i = 0; i < n; i++) {\n            currentSum += diff[i];\n\n            // If the sum is zero, the entire subarray from 0 to i has the same sum\n            if (currentSum == 0) {\n                maxLength = i + 1;\n            }\n\n            // If the current sum has been seen before, calculate the length of the\n            // subarray\n            if (sumMap.containsKey(currentSum)) {\n                maxLength = Math.max(maxLength, i - sumMap.get(currentSum));\n            } else {\n                sumMap.put(currentSum, i);\n            }\n        }\n\n        return maxLength;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def longestCommonSum(self, arr1, arr2):\n        n = len(arr1)\n\n        # Step 1: Calculate the difference array\n        # The difference array `diff` stores the difference between corresponding\n        # elements of `arr1` and `arr2`.\n        diff = [arr1[i] - arr2[i] for i in range(n)]\n\n        sum_map = {}  # To store the first occurrence of each cumulative sum\n        current_sum = 0\n        max_length = 0\n\n        # Step 2: Traverse the difference array and find the longest subarray with sum 0\n        for i in range(n):\n            current_sum += diff[i]  # Update the cumulative sum\n\n            # If the cumulative sum is 0, the subarray from index 0 to i has the same sum in both arrays\n            if current_sum == 0:\n                max_length = i + 1\n\n            # If this cumulative sum has been seen before, the subarray between the previous\n            # index and the current index has a sum of 0.\n            if current_sum in sum_map:\n                max_length = max(max_length, i - sum_map[current_sum])\n            else:\n                # Store the first occurrence of this cumulative sum\n                sum_map[current_sum] = i\n\n        return max_length  # Return the length of the longest subarray with the same sum\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    longestCommonSum(arr1, arr2) {\n        let n = arr1.length;\n        let diff = new Array(n);\n\n        // Create the difference array\n        for (let i = 0; i < n; i++) {\n            diff[i] = arr1[i] - arr2[i];\n        }\n\n        let sumMap = new Map(); // To store the first occurrence of each sum\n        let currentSum = 0;\n        let maxLength = 0;\n\n        for (let i = 0; i < n; i++) {\n            currentSum += diff[i];\n\n            // If the sum is zero, the entire subarray from 0 to i has the same sum\n            if (currentSum === 0) {\n                maxLength = i + 1;\n            }\n\n            // If the current sum has been seen before, calculate the length of the\n            // subarray\n            if (sumMap.has(currentSum)) {\n                maxLength = Math.max(maxLength, i - sumMap.get(currentSum));\n            } else {\n                sumMap.set(currentSum, i);\n            }\n        }\n\n        return maxLength;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}