{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712573,
            "title": "Longest String Chain",
            "titleSlug": "longest-string-chain",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array of&nbsp;<code>words</code>&nbsp;where each word consists of lowercase English letters. <br /></span><span style=\"font-size: 18px;\"><code>word<sub>A</sub></code>&nbsp;is a&nbsp;<strong>predecessor</strong>&nbsp;of&nbsp;<code>word<sub>B</sub></code>&nbsp;if and only if we can insert&nbsp;<strong>exactly one</strong>&nbsp;letter anywhere in&nbsp;<code>word<sub>A</sub></code>&nbsp;<strong>without changing </strong>the order of the other characters&nbsp;to make it equal to&nbsp;<code>word<sub>B</sub></code>. </span><span style=\"font-size: 18px;\">For example,&nbsp;<code>\"abc\"</code>&nbsp;is a&nbsp;<strong>predecessor</strong>&nbsp;of&nbsp;<code>\"ab<u>a</u>c\"</code>, while&nbsp;<code>\"cba\"</code>&nbsp;is not a&nbsp;<strong>predecessor</strong>&nbsp;of&nbsp;<code>\"bcad\"</code>.</span></p>\n<p><span style=\"font-size: 18px;\">A&nbsp;<strong>word chain</strong><em>&nbsp;</em>is a sequence of words&nbsp;<code>[word<sub>1</sub>, word<sub>2</sub>, ..., word<sub>k</sub>]</code>&nbsp;with&nbsp;<code>k &gt;= 1</code>, where&nbsp;<code>word<sub>1</sub></code>&nbsp;is a&nbsp;<strong>predecessor</strong>&nbsp;of&nbsp;<code>word<sub>2</sub></code>,&nbsp;<code>word<sub>2</sub></code>&nbsp;is a&nbsp;<strong>predecessor</strong>&nbsp;of&nbsp;<code>word<sub>3</sub></code>, and so on. A single word is trivially a&nbsp;<strong>word chain</strong>&nbsp;with&nbsp;<code>k = 1</code>.</span></p>\n<p><span style=\"font-size: 18px;\">Return&nbsp;the&nbsp;<strong>length</strong>&nbsp;of the&nbsp;<strong>longest possible word chain</strong>&nbsp;with words chosen from the given list of&nbsp;<code>words</code> in <strong>any order</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>words[] = [\"ba\", \"b\", \"a\", \"bca\", \"bda\", \"bdca\"]\n<strong>Output: </strong>4\n<strong>Explanation: </strong>One of the longest word chains is [\"a\", \"<u>b</u>a\", \"b<u>d</u>a\", \"bd<u>c</u>a\"].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>words[] = [\"abc\", \"a\", \"ab\"]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>The longest chain is {\"a\", \"ab\" \"abc\"}</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>words[] = [\"abcd\", \"dbqca\"]\n<strong>Output: </strong>1\n<strong>Explanation: </strong>The trivial word chain [\"abcd\"] is one of the longest word chains.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraint:</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= words.length &lt;= 10<sup>4</sup><br />1 &lt;= words[i].length &lt;= 10</span><br />&nbsp;<span style=\"font-size: 18px;\">words[i] only consists of lowercase English letters.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of lowercase English words, `words`, determine the length of the longest possible word chain that can be formed using words from the given array. A word `wordA` is considered a predecessor of `wordB` if `wordB` can be formed by inserting exactly one letter into `wordA` without changing the order of the other characters.",
                "constraints": [
                    "1 <= words.length <= 10^4",
                    "1 <= words[i].length <= 10",
                    "words[i] only consists of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "[\"ba\", \"b\", \"a\", \"bca\", \"bda\", \"bdca\"]",
                        "output": "4",
                        "explanation": "One of the longest word chains is [\"a\", \"ba\", \"bda\", \"bdca\"]."
                    },
                    {
                        "input": "[\"abc\", \"a\", \"ab\"]",
                        "output": "3",
                        "explanation": "The longest chain is [\"a\", \"ab\", \"abc\"]."
                    },
                    {
                        "input": "[\"abcd\", \"dbqca\"]",
                        "output": "1",
                        "explanation": "The trivial word chain [\"abcd\"] is one of the longest word chains."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Custom comparison function to sort strings by their lengths\n    bool static cmp(const string& a, const string& b) { return a.size() < b.size(); }\n\n    // Function to find the length of the longest string chain\n    int longestStringChain(vector<string>& words) {\n\n        // Sort the words by length\n        sort(words.begin(), words.end(), cmp);\n\n        // Create an unordered map to store the\n        // maximum chain length for each word\n        unordered_map<string, int> dp;\n\n        int res = 1;\n\n        // Iterate through each word in the sorted list of words\n        for (const string& w : words) {\n\n            dp[w] = 1; // Initialize length for the current word\n\n            // Try removing one character at a time to\n            // check if it forms a valid predecessor\n            for (int i = 0; i < w.size(); ++i) {\n                string pred = w.substr(0, i) + w.substr(i + 1);\n                if (dp.find(pred) != dp.end()) {\n                    dp[w] = max(dp[w], dp[pred] + 1);\n                }\n            }\n\n            res = max(res, dp[w]);\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int longestStringChain(String words[]) {\n        // Sort words by length\n        Arrays.sort(words, (a, b) -> a.length() - b.length());\n\n        // HashMap to store the maximum chain length for each word\n        HashMap<String, Integer> dp = new HashMap<>();\n\n        int res = 1;\n\n        // Iterate through each word in the sorted array\n        for (String w : words) {\n            dp.put(w, 1); // Initialize length for current word\n\n            // Try removing one character at a time\n            for (int i = 0; i < w.length(); i++) {\n                String pred = w.substring(0, i) + w.substring(i + 1);\n                if (dp.containsKey(pred)) {\n                    dp.put(w, Math.max(dp.get(w), dp.get(pred) + 1));\n                }\n            }\n\n            res = Math.max(res, dp.get(w));\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def longestStringChain(self, words):\n        # Sort words by length\n        words.sort(key=len)\n\n        # Dictionary to store the maximum chain length for each word\n        dp = {}\n\n        res = 1\n\n        # Iterate through each word in the sorted list\n        for w in words:\n            dp[w] = 1  # Initialize length for current word\n\n            # Try removing one character at a time\n            for i in range(len(w)):\n                pred = w[:i] + w[i + 1:]\n                if pred in dp:\n                    dp[w] = max(dp[w], dp[pred] + 1)\n\n            res = max(res, dp[w])\n\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    longestStringChain(words) {\n        // Sort words by length\n        words.sort((a, b) => a.length - b.length);\n\n        // Map to store the maximum chain length for each word\n        let dp = new Map();\n\n        let res = 1;\n\n        // Iterate through each word in the sorted list\n        for (let w of words) {\n            dp.set(w, 1); // Initialize length for current word\n\n            // Try removing one character at a time\n            for (let i = 0; i < w.length; i++) {\n                let pred = w.slice(0, i) + w.slice(i + 1);\n                if (dp.has(pred)) {\n                    dp.set(w, Math.max(dp.get(w), dp.get(pred) + 1));\n                }\n            }\n\n            res = Math.max(res, dp.get(w));\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}