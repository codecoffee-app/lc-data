{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703043,
            "title": "Longest Subarray with Sum K",
            "titleSlug": "longest-sub-array-with-sum-k0809",
            "content": "<p><span >Given an array <strong><code>arr[]</code></strong> containing integers and an integer <strong><code>k</code></strong>, your task is to find the length of the longest subarray where the sum of its elements is equal to the given value&nbsp;<strong style=\"font-size: 18.6667px;\"><code>k</code></strong>. If there is no subarray with sum equal to&nbsp;<strong style=\"font-size: 18.6667px;\"><code>k</code></strong>, return <strong style=\"font-size: 18.6667px;\"><code>0</code></strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [10, 5, 2, 7, 1, -10], k = 15\n<strong>Output:</strong> 6\n<strong>Explanation: </strong></span><span style=\"font-size: 18.6667px;\">Subarrays with sum = 15 are [5, 2, 7, 1], [10, 5] and [10, 5, 2, 7, 1, -10]. The length of the longest subarray with a sum of 15 is 6.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [-5, 8, -14, 2, 4, 12], k = -5\n<strong>Output:</strong> 5\n<strong>Explanation: </strong></span><span style=\"font-size: 18.6667px;\">Only subarray with sum = -5 is [-5, 8, -14, 2, 4] of length 5.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [10, -10, 20, 30], k = 5\n<strong>Output:</strong> 0\n<strong>Explanation: </strong></span><span style=\"font-size: 18.6667px;\">No subarray with sum = 5 is present in arr[].</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &le; arr.size() &le; 10<sup>5<br /></sup><span style=\"font-size: 18.6667px;\">-10</span><sup>4&nbsp;</sup><span style=\"font-size: 18.6667px;\">&le; arr[i] &le; 10</span><sup>4</sup><sup><br /></sup></span><span >-10<sup>9 </sup>&le; k &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` containing integers and an integer `k`, find the length of the longest subarray whose elements sum up to `k`. If no such subarray exists, return 0.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "-10^4 <= arr[i] <= 10^4",
                    "-10^9 <= k <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [10, 5, 2, 7, 1, -10], k = 15",
                        "output": "6",
                        "explanation": "The longest subarray with a sum of 15 is [10, 5, 2, 7, 1, -10], which has a length of 6. Other subarrays with sum 15 include [5, 2, 7, 1] and [10, 5]."
                    },
                    {
                        "input": "arr[] = [-5, 8, -14, 2, 4, 12], k = -5",
                        "output": "5",
                        "explanation": "The only subarray with a sum of -5 is [-5, 8, -14, 2, 4], having a length of 5."
                    },
                    {
                        "input": "arr[] = [10, -10, 20, 30], k = 5",
                        "output": "0",
                        "explanation": "No subarray in arr[] has a sum of 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Iterate over the array and keep storing the available sums in a hashmap.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int longestSubarray(vector<int>& arr, int k) {\n        unordered_map<int, int>\n            prefixSumIndices; // Maps cumulative sum to its earliest index\n        int currentSum = 0, longestLength = 0;\n\n        // Traverse through the array\n        for (int i = 0; i < arr.size(); i++) {\n            currentSum += arr[i]; // Accumulate the current sum\n\n            // Check if subarray starting from index 0 equals k\n            if (currentSum == k)\n                longestLength = i + 1;\n\n            // If (currentSum - k) exists in the map, update longestLength\n            if (prefixSumIndices.find(currentSum - k) != prefixSumIndices.end()) {\n                longestLength =\n                    max(longestLength, i - prefixSumIndices[currentSum - k]);\n            }\n\n            // Store the current sum in the map if it hasn't been stored yet\n            if (prefixSumIndices.find(currentSum) == prefixSumIndices.end())\n                prefixSumIndices[currentSum] = i;\n        }\n\n        return longestLength; // Return the length of the longest subarray\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public int longestSubarray(int[] arr, int k) {\n        // HashMap to store (sum, index) pairs\n        HashMap<Integer, Integer> map = new HashMap<>();\n        int sum = 0, maxLen = 0;\n\n        // Traverse the given array\n        for (int i = 0; i < arr.length; i++) {\n            // Accumulate sum\n            sum += arr[i];\n\n            // When subarray starts from index 0\n            if (sum == k) {\n                maxLen = i + 1;\n            }\n\n            // If 'sum' is not present in the map, add it with the index 'i'\n            if (!map.containsKey(sum)) {\n                map.put(sum, i);\n            }\n\n            // Check if 'sum - k' is present in the map or not\n            if (map.containsKey(sum - k)) {\n                // Update maxLength if needed\n                maxLen = Math.max(maxLen, i - map.get(sum - k));\n            }\n        }\n\n        // Return the required maximum length\n        return maxLen;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from collections import defaultdict\n\n\nclass Solution:\n\n    # Function to find the length of the longest subarray with sum 'k'\n    def longestSubarray(self, arr, k):\n        # Creating a default dictionary\n        # Default value for non-existent keys will be 0\n        um = defaultdict(lambda: 0)\n\n        # Initializing variables\n        current_sum = 0\n        maxLen = 0\n\n        # Iterating through the array\n        for i in range(len(arr)):  # Use len(arr) instead of n\n            # Calculating the current sum\n            current_sum += arr[i]\n\n            # Checking if the current sum is equal to 'k'\n            if current_sum == k:\n                maxLen = i + 1\n\n            # Adding the current sum to the dictionary if it doesn't exist\n            if current_sum not in um:\n                um[current_sum] = i\n\n            # Checking if the difference between the current sum and 'k' exists in the dictionary\n            if (current_sum - k) in um:\n                # Updating maxLen if needed\n                maxLen = max(maxLen, i - um[current_sum - k])\n\n        # Returning the maximum subarray length\n        return maxLen\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr\n * @param {number} k\n * @returns {number}\n */\nclass Solution {\n    longestSubarray(arr, k) {\n        // Map implemented as hash table\n        let um = new Map();\n        let sum = 0, maxLen = 0;\n\n        // Traverse the given array\n        for (let i = 0; i < arr.length; i++) {\n            // Accumulate sum\n            sum += arr[i];\n\n            // When subarray starts from index '0'\n            if (sum === k) {\n                maxLen = i + 1;\n            }\n\n            // Make an entry for 'sum' if it is not present in 'um'\n            if (!um.has(sum)) {\n                um.set(sum, i);\n            }\n\n            // Check if 'sum - k' is present in 'um' or not\n            if (um.has(sum - k)) {\n                // Update maxLength\n                maxLen = Math.max(maxLen, i - um.get(sum - k));\n            }\n        }\n\n        // Required maximum length\n        return maxLen;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}