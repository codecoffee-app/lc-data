{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702683,
            "title": "Longest sub-sequence such that difference between adjacents is one",
            "titleSlug": "longest-sub-sequence-such-that-difference-between-adjacents-is-one2558",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>. The task is to find the longest subsequence such that the absolute difference between adjacents is one.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [10, 9, 4, 5, 4, 8, 6]\n<strong>Output :</strong> 3\n<strong>Explanation: </strong>As longest subsequences with difference 1 are, (\"10, 9, 8\"), (\"4, 5, 4\") and (\"4, 5, 6\"). \n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [1, 2, 3, 2, 3, 7, 2, 1]\n<strong>Output :</strong> 7<br /></span><span style=\"font-size: 18px;\"><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">As longest subsequences with difference 1 is, (\"1, 2, 3, 2, 3, 2, 1\"). </span>\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:&nbsp;</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup></span><span style=\"font-size: 18px;\">1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]`, find the length of the longest subsequence where the absolute difference between adjacent elements is exactly 1.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[10, 9, 4, 5, 4, 8, 6]",
                        "output": "3",
                        "explanation": "One of the longest subsequences with an absolute difference of 1 between adjacent elements is [10, 9, 8], another is [4, 5, 4], and another is [4, 5, 6]. Each of these has length 3."
                    },
                    {
                        "input": "[1, 2, 3, 2, 3, 7, 2, 1]",
                        "output": "7",
                        "explanation": "The longest subsequence with an absolute difference of 1 between adjacent elements is [1, 2, 3, 2, 3, 2, 1], which has length 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a hash map to dynamically track and update the longest subsequence lengths based on adjacent numbers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int longLenSub(vector<int>& arr) {\n        // Edge case: If the array is empty, return 0\n        if (arr.empty())\n            return 0;\n\n        // Create an unordered_map to store the maximum subsequence length ending with a\n        // specific number\n        unordered_map<int, int> mp;\n\n        // Initialize the map with the first element having a subsequence length of 1\n        mp[arr[0]] = 1;\n\n        // Initialize the answer with 1, as the minimum subsequence length is 1\n        int ans = 1;\n\n        // Get the size of the array\n        int n = arr.size();\n\n        // Iterate through the array starting from the second element\n        for (int i = 1; i < n; ++i) {\n            // Variable to store the maximum subsequence length for the current element\n            int len = 0;\n\n            // Check if there's a subsequence ending with (arr[i] - 1)\n            if (mp.find(arr[i] - 1) != mp.end()) {\n                len = mp[arr[i] - 1];\n            }\n\n            // Check if there's a subsequence ending with (arr[i] + 1)\n            if (mp.find(arr[i] + 1) != mp.end()) {\n                // Update len to the maximum of current len and the length of\n                // subsequence ending with (arr[i] + 1)\n                len = max(len, mp[arr[i] + 1]);\n            }\n\n            // Update the map with the current element and its corresponding subsequence\n            // length If the current element is already in the map, take the maximum of\n            // existing length and (len + 1) Otherwise, set it to (len + 1)\n            if (mp.find(arr[i]) != mp.end()) {\n                mp[arr[i]] = max(mp[arr[i]], len + 1);\n            } else {\n                mp[arr[i]] = len + 1;\n            }\n\n            // Update the answer if the current subsequence length is greater than the\n            // previous maximum\n            ans = max(ans, mp[arr[i]]);\n        }\n\n        // Return the length of the longest valid subsequence found\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\nimport java.util.HashMap;\n\nclass Solution {\n\n    public int longLenSub(int[] arr) {\n        // Edge Case: If the array is empty, return 0 as there are no elements to form a\n        // subsequence.\n        if (arr == null || arr.length == 0) {\n            return 0;\n        }\n\n        // HashMap to store the maximum length of the subsequence ending with a specific\n        // number. Key: The number in the array. Value: The length of the longest\n        // subsequence ending with the key.\n        HashMap<Integer, Integer> map = new HashMap<>();\n\n        // Initialize the map with the first element having a subsequence length of 1.\n        map.put(arr[0], 1);\n\n        // Initialize the answer with 1, as the minimum possible subsequence length\n        // is 1.\n        int ans = 1;\n\n        // Get the size of the array for iteration purposes.\n        int n = arr.length;\n\n        // Iterate through the array starting from the second element (index 1).\n        for (int i = 1; i < n; i++) {\n            // Variable to store the maximum subsequence length that can be extended by\n            // arr[i].\n            int len = 0;\n\n            // Check if there exists a subsequence ending with (arr[i] - 1).\n            if (map.containsKey(arr[i] - 1)) {\n                // If such a subsequence exists, update len to the length of that\n                // subsequence.\n                len = map.get(arr[i] - 1);\n            }\n\n            // Check if there exists a subsequence ending with (arr[i] + 1).\n            if (map.containsKey(arr[i] + 1)) {\n                // Update len to the maximum of current len and the length of the\n                // subsequence ending with (arr[i] + 1).\n                len = Math.max(len, map.get(arr[i] + 1));\n            }\n\n            // Update the map with the current element.\n            // The length of the subsequence ending with arr[i] is len + 1 (including\n            // arr[i]). If arr[i] is already present in the map, take the maximum of the\n            // existing value and (len + 1). This ensures that we always store the\n            // longest possible subsequence length for arr[i].\n            if (map.containsKey(arr[i])) {\n                map.put(arr[i], Math.max(map.get(arr[i]), len + 1));\n            } else {\n                map.put(arr[i], len + 1);\n            }\n\n            // Update the answer if the current subsequence length is greater than the\n            // previously recorded maximum.\n            ans = Math.max(ans, map.get(arr[i]));\n        }\n\n        // Return the length of the longest valid subsequence found.\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def longLenSub(self, arr):\n        # Edge Case: If the array is empty, return 0 as there are no elements to form a subsequence.\n        if not arr:\n            return 0\n\n        # Dictionary to store the maximum length of the subsequence ending with a specific number.\n        # Key: The number in the array.\n        # Value: The length of the longest subsequence ending with the key.\n        mp = {}\n\n        # Initialize the dictionary with the first element having a subsequence length of 1.\n        mp[arr[0]] = 1\n\n        # Initialize the answer with 1, as the minimum possible subsequence length is 1.\n        ans = 1\n\n        # Iterate through the array starting from the second element.\n        for num in arr[1:]:\n            # Variable to store the maximum subsequence length that can be extended by the current number.\n            length = 0\n\n            # Check if there's a subsequence ending with (num - 1).\n            if (num - 1) in mp:\n                length = mp[num - 1]\n\n            # Check if there's a subsequence ending with (num + 1).\n            if (num + 1) in mp:\n                # Update length to the maximum of current length and the length of subsequence ending with (num + 1).\n                length = max(length, mp[num + 1])\n\n            # Update the dictionary with the current number and its corresponding subsequence length.\n            # If the current number is already in the dictionary, take the maximum of existing length and (length + 1).\n            # This ensures that we always store the longest possible subsequence length for the current number.\n            if num in mp:\n                mp[num] = max(mp[num], length + 1)\n            else:\n                mp[num] = length + 1\n\n            # Update the answer if the current subsequence length is greater than the previous maximum.\n            ans = max(ans, mp[num])\n\n        # Return the length of the longest valid subsequence found.\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * Function to find the length of the longest subsequence where\n     * each element is either one less or one more than its adjacent element.\n     *\n     * @param {number[]} arr - The input array of integers.\n     * @return {number} - The length of the longest such subsequence.\n     */\n    longLenSub(arr) {\n        /**\n         * Edge Case Handling:\n         * If the input array is empty, return 0 as there are no elements to form a\n         * subsequence.\n         */\n        if (!arr || arr.length === 0) {\n            return 0;\n        }\n\n        /**\n         * Dictionary (Object) to store the maximum length of the subsequence ending\n         * with a specific number. Key: The number in the array. Value: The length of\n         * the longest subsequence ending with the key.\n         */\n        const map = {};\n\n        /**\n         * Initialize the map with the first element having a subsequence length of 1.\n         */\n        map[arr[0]] = 1;\n\n        /**\n         * Initialize the answer with 1, as the minimum possible subsequence length\n         * is 1.\n         */\n        let ans = 1;\n\n        /**\n         * Iterate through the array starting from the second element.\n         */\n        for (let i = 1; i < arr.length; i++) {\n            const num = arr[i];\n\n            /**\n             * Variable to store the maximum subsequence length that can be extended by\n             * the current number.\n             */\n            let length = 0;\n\n            /**\n             * Check if there's a subsequence ending with (num - 1).\n             * If such a subsequence exists, consider its length.\n             */\n            if (map.hasOwnProperty(num - 1)) {\n                length = map[num - 1];\n            }\n\n            /**\n             * Check if there's a subsequence ending with (num + 1).\n             * If such a subsequence exists, update the length to the maximum of the\n             * current length and the length of that subsequence.\n             */\n            if (map.hasOwnProperty(num + 1)) {\n                length = Math.max(length, map[num + 1]);\n            }\n\n            /**\n             * Update the map with the current number and its corresponding subsequence\n             * length. If the current number is already in the map, take the maximum of\n             * existing length and (length + 1). This ensures that we always store the\n             * longest possible subsequence length for the current number.\n             */\n            if (map.hasOwnProperty(num)) {\n                map[num] = Math.max(map[num], length + 1);\n            } else {\n                map[num] = length + 1;\n            }\n\n            /**\n             * Update the answer if the current subsequence length is greater than the\n             * previously recorded maximum.\n             */\n            ans = Math.max(ans, map[num]);\n        }\n\n        /**\n         * Return the length of the longest valid subsequence found.\n         */\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}