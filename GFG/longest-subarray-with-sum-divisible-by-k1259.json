{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702926,
            "title": "Longest subarray with sum divisible by K",
            "titleSlug": "longest-subarray-with-sum-divisible-by-k1259",
            "content": "<p><span >Given an array <strong>arr[]</strong> and a positive integer <strong>k</strong>, find the length of the <strong>longest </strong>subarray with the sum of the elements <strong>divisible </strong>by <strong>k</strong>.<br /><strong>Note:&nbsp;</strong>If there is no subarray with sum divisible by k, then return 0.<br /></span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 7, 6, 1, 4, 5], k = 3\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>The subarray [7, 6, 1, 4] has sum = 18, which is divisible by 3.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [-2, 2, -5, 12, -11, -1, 7], k = 3\n<strong>Output:</strong> 5\n<strong>Explanation: </strong>The subarray [2, -5, 12, -11, -1] has sum = -3, which is divisible by 3.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, -2], k = 2\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>The subarray is [2, -2] has sum = 0, which is divisible by 2.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= k &lt;= 10<sup>6</sup><br />-10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup>&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of integers and a positive integer `k`, find the length of the longest subarray whose sum is divisible by `k`. If no such subarray exists, return 0.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= k <= 10^6",
                    "-10^6 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [2, 7, 6, 1, 4, 5], k = 3",
                        "output": "4",
                        "explanation": "The subarray [7, 6, 1, 4] has a sum of 18, which is divisible by 3."
                    },
                    {
                        "input": "arr[] = [-2, 2, -5, 12, -11, -1, 7], k = 3",
                        "output": "5",
                        "explanation": "The subarray [2, -5, 12, -11, -1] has a sum of -3, which is divisible by 3."
                    },
                    {
                        "input": "arr[] = [1, 2, -2], k = 2",
                        "output": "2",
                        "explanation": "The subarray [2, -2] has a sum of 0, which is divisible by 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Iterate over the array while storing the sum of prefixes covered and the remainder when that sum is divided by k. Store the index at which a particular remainder is found in a hashmap.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft",
            "snapdeal"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to find the maximum length of subarray with sum divisible by k.\n    // It takes a vector of integers, number of elements in the vector, and an integer k\n    // as parameters.\n    int longestSubarrayDivK(vector<int>& arr, int k) {\n        int n = arr.size(), res = 0;\n        unordered_map<int, int> prefIdx;\n        int sum = 0;\n\n        // Iterate over all ending points\n        for (int i = 0; i < n; i++) {\n\n            // prefix sum mod k (handling negative prefix sum)\n            sum = ((sum + arr[i]) % k + k) % k;\n\n            // If sum == 0, then update result with the\n            // length of subarray arr[0...i]\n            if (sum == 0)\n                res = i + 1;\n\n            // Update max length for repeating sum\n            else if (prefIdx.find(sum) != prefIdx.end()) {\n                res = max(res, i - prefIdx[sum]);\n            }\n\n            // Store the first occurrence of sum\n            else {\n                prefIdx[sum] = i;\n            }\n        }\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the length of the longest subarray\n    // with the sum divisible by k\n    int longestSubarrayDivK(int[] arr, int k) {\n        int n = arr.length, res = 0;\n        Map<Integer, Integer> prefIdx = new HashMap<>();\n        int sum = 0;\n\n        // Iterate over all ending points\n        for (int i = 0; i < n; i++) {\n\n            // prefix sum mod k (handling negative prefix sum)\n            sum = ((sum + arr[i]) % k + k) % k;\n\n            // If sum == 0, then update result with the\n            // length of subarray arr[0...i]\n            if (sum == 0) res = i + 1;\n\n            // Update max length for repeating sum\n            else if (prefIdx.containsKey(sum)) {\n                res = Math.max(res, i - prefIdx.get(sum));\n            }\n\n            // Store the first occurrence of sum\n            else {\n                prefIdx.put(sum, i);\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def longestSubarrayDivK(self, arr, k):\n        n = len(arr)\n        res = 0\n        prefIdx = {}\n        sum = 0\n\n        # Iterate over all ending points\n        for i in range(n):\n\n            # prefix sum mod k\n            sum = (sum + arr[i]) % k\n\n            # If sum == 0, then update result with the\n            # length of subarray arr[0...i]\n            if sum == 0:\n                res = i + 1\n\n            # Update max length for repeating sum\n            elif sum in prefIdx:\n                res = max(res, i - prefIdx[sum])\n\n            # Store the first occurrence of sum\n            else:\n                prefIdx[sum] = i\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    longestSubarrayDivK(arr, k) {\n        let n = arr.length, res = 0;\n        let prefIdx = new Map();\n        let sum = 0;\n\n        // Iterate over all ending points\n        for (let i = 0; i < n; i++) {\n\n            // prefix sum mod k (handling negative prefix sum)\n            sum = ((sum + arr[i]) % k + k) % k;\n\n            // If sum == 0, then update result with the\n            // length of subarray arr[0...i]\n            if (sum === 0) res = i + 1;\n\n            // Update max length for repeating sum\n            else if (prefIdx.has(sum)) {\n                res = Math.max(res, i - prefIdx.get(sum));\n            }\n\n            // Store the first occurrence of sum\n            else {\n                prefIdx.set(sum, i);\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}