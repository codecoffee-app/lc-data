{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704413,
            "title": "Longest subsequence-1",
            "titleSlug": "longest-subsequence-such-that-difference-between-adjacents-is-one4724",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer array <strong>arr[]</strong>, find the length of the longest subsequence such that the absolute difference between adjacent elements is 1.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 9, 4, 5, 4, 8, 6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The three possible subsequences of length 3 are {10, 9, 8}, {4, 5, 4}, and {4, 5, 6}, where adjacent elements have a absolute difference of 1. No valid subsequence of greater length could be formed.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 2, 3, 4, 5]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> All the elements can be included in the valid subsequence.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10</span><sup><span style=\"font-size: 14.999999046325684px;\">3</span></sup><br /><span style=\"font-size: 18px;\">1 &le; arr[i] &le; 10</span><sup><span style=\"font-size: 14.999999046325684px;\">3</span></sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]`, determine the length of the longest subsequence where the absolute difference between adjacent elements is exactly 1.",
                "constraints": [
                    "1 <= arr.size() <= 1000",
                    "1 <= arr[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[10, 9, 4, 5, 4, 8, 6]",
                        "output": "3",
                        "explanation": "One possible subsequence is {10, 9, 8}. Another is {4, 5, 4}, and {4, 5, 6}.  No subsequence exists with a length greater than 3 that satisfies the condition."
                    },
                    {
                        "input": "[1, 2, 3, 4, 5]",
                        "output": "5",
                        "explanation": "All elements can be included in a valid subsequence, as the absolute difference between consecutive elements is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use the concept of longest increasing subsequence.</span></p>",
            "<p><span style=\"font-size: 18px;\">The only modification required in the concept is to update the answer for that index when the difference is 1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int longestSubseq(vector<int> &arr) {\n        // Initializing the dp array\n        int n = arr.size();\n\n        int dp[n];\n        for (int i = 0; i < n; i++)\n            dp[i] = 1;\n\n        // Calculating longest subsequence with adjacent elements having\n        // difference of 1\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (abs(arr[i] - arr[j]) == 1)\n                    dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n\n        // calculating the answer\n        int ans = 1;\n        for (int i = 0; i < n; i++)\n            ans = max(ans, dp[i]);\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int longestSubseq(int[] arr) {\n        int n = arr.length;\n        // Initializing the dp array\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n\n        // Calculating longest subsequence with adjacent elements having\n        // difference of 1\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (Math.abs(arr[i] - arr[j]) == 1) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n\n        // Calculating the answer\n        int ans = 1;\n        for (int i = 0; i < n; i++) {\n            ans = Math.max(ans, dp[i]);\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def longestSubseq(self, arr):\n        n = len(arr)\n\n        # Initializing the dp array\n        dp = [1] * n\n\n        # Calculating longest subsequence with adjacent elements having\n        # a difference of 1\n        for i in range(1, n):\n            for j in range(i):\n                if abs(arr[i] - arr[j]) == 1:\n                    dp[i] = max(dp[i], dp[j] + 1)\n\n        # Calculating the answer\n        return max(dp)\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number[]} arr\n     * @returns {number}\n     */\n    longestSubseq(arr) {\n        let n = arr.length;\n\n        // Initializing the dp array\n        let dp = new Array(n).fill(1);\n\n        // Calculating the longest subsequence with adjacent elements having\n        // a difference of 1\n        for (let i = 1; i < n; i++) {\n            for (let j = 0; j < i; j++) {\n                if (Math.abs(arr[i] - arr[j]) === 1) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n\n        // Calculating the answer\n        return Math.max(...dp);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}