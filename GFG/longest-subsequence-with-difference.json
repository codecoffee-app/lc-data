{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 874781,
            "title": "Longest subsequence with difference",
            "titleSlug": "longest-subsequence-with-difference",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr</strong>, return the&nbsp;</span><span style=\"background-color: #ffffff; color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px;\"><strong>maximum length</strong> of the subsequence with the difference between adjacent elements as either 0 or 1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr = [2, 5, 6, 3, 7, 6, 5, 8]\n<strong>Output:</strong> 5\n<strong>Explanation: </strong>The subsequence is {5, 6, 7, 6, 5}.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr = [-2, -1, 5, -1, 4, 0, 3]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>The subsequence is {-2, -1, -1, 0}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />-10<sup>5</sup> &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr`, find the maximum length of a subsequence where the absolute difference between adjacent elements is either 0 or 1.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "-10^5 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2, 5, 6, 3, 7, 6, 5, 8]",
                        "output": "5",
                        "explanation": "One possible subsequence is {5, 6, 7, 6, 5}."
                    },
                    {
                        "input": "[-2, -1, 5, -1, 4, 0, 3]",
                        "output": "4",
                        "explanation": "One possible subsequence is {-2, -1, -1, 0}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">The idea is to create a hash map with tuples in the form&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">(ele, len)</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">, where&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">len</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;denotes the length of the longest subsequence ending with the element&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">ele</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// User function template for C++\nclass Solution {\n  public:\n    int maxLenSub(vector<int> &arr) {\n        // hash table to map the array element with the\n        // length of the longest subsequence of which\n        // it is a part of and is the last element of\n        // that subsequence\n        unordered_map<int, int> um;\n\n        // to store the maximum length subsequence\n        int maxLen = 0;\n\n        // traverse the array elements\n        for (int i = 0; i < arr.size(); i++) {\n            // initialize current length\n            // for element arr[i] as 0\n            int len = 0;\n\n            // if 'arr[i]-1' is in 'um' and its length of\n            // subsequence is greater than 'len'\n            if (um.find(arr[i] - 1) != um.end() && len < um[arr[i] - 1])\n                len = um[arr[i] - 1];\n\n            // if 'arr[i]' is in 'um' and its length of\n            // subsequence is greater than 'len'\n            if (um.find(arr[i]) != um.end() && len < um[arr[i]])\n                len = um[arr[i]];\n\n            // if 'arr[i]+1' is in 'um' and its length of\n            // subsequence is greater than 'len'\n            if (um.find(arr[i] + 1) != um.end() && len < um[arr[i] + 1])\n                len = um[arr[i] + 1];\n\n            // update arr[i] subsequence length in 'um'\n            um[arr[i]] = len + 1;\n\n            // update maximum length\n            maxLen = max(maxLen, um[arr[i]]);\n        }\n\n        // required maximum length subsequence\n        return maxLen;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    public int maxLenSub(int[] arr) {\n        // Code Here\n        // HashMap to map array elements to the length of the subsequence\n        HashMap<Integer, Integer> map = new HashMap<>();\n\n        // To store the maximum length subsequence\n        int maxLen = 0;\n\n        // Traverse the array elements\n        for (int num : arr) {\n            // Initialize current length\n            int len = 0;\n\n            // Check if arr[i]-1 exists and its length is greater than len\n            if (map.containsKey(num - 1)) len = Math.max(len, map.get(num - 1));\n\n            // Check if arr[i] exists and its length is greater than len\n            if (map.containsKey(num)) len = Math.max(len, map.get(num));\n\n            // Check if arr[i]+1 exists and its length is greater than len\n            if (map.containsKey(num + 1)) len = Math.max(len, map.get(num + 1));\n\n            // Update arr[i] subsequence length in the map\n            map.put(num, len + 1);\n\n            // Update maximum length\n            maxLen = Math.max(maxLen, map.get(num));\n        }\n\n        return maxLen;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\nclass Solution:\n\n    def maxLenSub(self, arr):\n        # Code Here\n        # Dictionary to map the array element to the length of the subsequence\n        um = {}\n\n        # To store the maximum length subsequence\n        max_len = 0\n\n        # Traverse the array elements\n        for num in arr:\n\n            # Initialize current length\n            length = 0\n\n            # Check if arr[i]-1 exists and its length is greater than len\n            length = max(length, um.get(num - 1, 0))\n\n            # Check if arr[i] exists and its length is greater than len\n            length = max(length, um.get(num, 0))\n\n            # Check if arr[i]+1 exists and its length is greater than len\n            length = max(length, um.get(num + 1, 0))\n\n            # Update arr[i] subsequence length in the dictionary\n            um[num] = length + 1\n\n            # Update maximum length\n            max_len = max(max_len, um[num])\n\n        return max_len\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    maxLenSub(arr) {\n        // Code Here\n        // Map to store array elements with the length of subsequences\n        let map = new Map();\n\n        // To store the maximum length subsequence\n        let maxLen = 0;\n\n        // Traverse the array elements\n        for (let num of arr) {\n\n            // Initialize current length\n            let len = 0;\n\n            // Check if arr[i]-1 exists and its length is greater than len\n            len = Math.max(len, map.get(num - 1) || 0);\n\n            // Check if arr[i] exists and its length is greater than len\n            len = Math.max(len, map.get(num) || 0);\n\n            // Check if arr[i]+1 exists and its length is greater than len\n            len = Math.max(len, map.get(num + 1) || 0);\n\n            // Update arr[i] subsequence length in the map\n            map.set(num, len + 1);\n\n            // Update maximum length\n            maxLen = Math.max(maxLen, len + 1);\n        }\n\n        return maxLen;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}