{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700670,
            "title": "longest substring containing '1'",
            "titleSlug": "longest-substring-containing-1",
            "content": "<p><span style=\"font-size:20px\">Given a function that takes a binary string. The task is to return the longest size of contiguous substring containing only &lsquo;1&rsquo;.</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Input:</strong><br />\r\nThe first line of input contains an integer T denoting the no&nbsp;of test cases.Then T test cases follow. Each test case contains a string S.</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Output:</strong><br />\r\nFor each test case return the maximum length of required sub string.</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Constraints:&nbsp;</strong><br />\r\n1&lt;=T&lt;=100<br />\r\n1&lt;=|string length|&lt;=10<sup>4</sup></span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Example:<br />\r\nInput:</strong><br />\r\n2<br />\r\n110<br />\r\n11101110</span><br />\r\n<span style=\"font-size:20px\"><strong>Output:</strong><br />\r\n2<br />\r\n3</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Function to calculate the maximum length of consecutive 1's in a string.\n\nint maxlength(string s)\n{\n    int l=s.length(); //getting the length of the string\n    int max2=0; //variable to store the maximum length of consecutive 1's\n    int max3=0; //variable to store the overall maximum length of consecutive 1's\n    int i;\n    bool flag=false; //flag variable to indicate if we have encountered a 1 before\n\n    for(i=0;i<l;i++)\n    {\n        if(s[i]=='1' && flag==false) //if current character is 1 and no previous 1 encountered\n        {\n            flag=true; //set flag to true to indicate first 1 encountered\n            max2++; //increment the count of consecutive 1's\n        }\n        else if(s[i]=='1'&& flag==true) //if current character is 1 and previous 1 encountered\n        {\n            max2++; //increment the count of consecutive 1's\n        }\n        else if(s[i]=='0' && flag==true) //if current character is 0 and previous 1 encountered\n        {\n            max3=max(max2,max3); //get the maximum of current count and overall maximum count\n            max2=0; //reset the count of consecutive 1's\n            flag=false; //reset the flag\n        }\n    }\n    return max(max3,max2); //return the overall maximum count of consecutive 1's\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class GfG{\n    public int count(String s){\n        // Splitting the input string into an array of substrings by the delimiter \"0\"\n        String[] a = s.split(\"0\");\n\t    int len = 0;\n\t    for(String b : a){\n\t        // Finding the maximum length of the substrings\n\t        len = Math.max(b.length(), len);\n\t    }\n\t    // Returning the maximum length of the substrings\n\t    return len;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\ndef maxlength(s):\r\n    n=len(s)\r\n    max2=0 #initialize max2 variable to keep track of current consecutive 1's\r\n    max3=0 #initialize max3 variable to store the maximum length of consecutive 1's\r\n    flag=False #initialize flag variable as False to indicate that we haven't encountered a 1 yet\r\n  \r\n  #iterate through the string\r\n    for i in range(0,n):\r\n        if(s[i]==\"1\" and flag==False): #if the current character is 1 and flag is False, it means it is the first 1 in the sequence\r\n            flag=True #set the flag to True to indicate that we have encountered a 1\r\n            max2=max2+1 #increment the max2 variable by 1\r\n        elif(s[i]==\"1\" and flag==True): #if the current character is 1 and flag is True, it means it is part of the consecutive 1's sequence\r\n            max2=max2+1 #increment the max2 variable by 1\r\n        elif(s[i]==\"0\" and flag==True): #if the current character is 0 and flag is True, it means the consecutive 1's sequence has ended\r\n            max3=max(max2,max3) #compare max2 and max3 and store the maximum length in max3\r\n            max2=0 #reset max2 to 0 to start counting the length of the next consecutive 1's sequence\r\n            flag=False #set flag to False to indicate that we haven't encountered a 1 yet\r\n  \r\n    return max(max3,max2) #return the maximum length of consecutive 1's",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\n\nclass Solution {\n    \n    // Function to find the maximum length of consecutive \"1\"s in a string.\n    maxLength(S){\n        let ans = 0; // Initialize a variable to store the maximum length.\n        let cnt = 0; // Initialize a counter variable.\n        for(let it of S){ // Iterate through each character in the string.\n            if(it === \"1\"){ // If the character is \"1\", increment the counter.\n                cnt++; \n            } else { // If the character is not \"1\", check if the count is greater than the current maximum length and reset the counter.\n                if(cnt > ans) ans = cnt; \n                cnt = 0;\n            }\n        }\n        if(cnt > ans) ans = cnt; // Check if the count at the end of the iteration is greater than the current maximum length.\n        return ans; // Return the maximum length of consecutive \"1\"s in the string.\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//Function to calculate the maximum length of consecutive 1's in a string.\npublic class Solution{\n    public int maxlength(string s)\n    {\n        int l = s.Length; //getting the length of the string\n        int max2 = 0; //variable to store the maximum length of consecutive 1's\n        int max3 = 0; //variable to store the overall maximum length of consecutive 1's\n        int i;\n        bool flag = false; //flag variable to indicate if we have encountered a 1 before\n\n        for(i = 0; i < l; i++)\n        {\n            if(s[i] == '1' && flag == false) //if current character is 1 and no previous 1 encountered\n            {\n                flag = true; //set flag to true to indicate first 1 encountered\n                max2++; //increment the count of consecutive 1's\n            }\n            else if(s[i] == '1' && flag == true) //if current character is 1 and previous 1 encountered\n            {\n                max2++; //increment the count of consecutive 1's\n            }\n            else if(s[i]== '0' && flag== true) //if current character is 0 and previous 1 encountered\n            {\n                max3 = Math.Max(max2,max3); //get the maximum of current count and overall maximum count\n                max2 = 0; //reset the count of consecutive 1's\n                flag = false; //reset the flag\n            }\n        }\n        return Math.Max(max3,max2); //return the overall maximum count of consecutive 1's\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}