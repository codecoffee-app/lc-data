{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705195,
            "title": "Longest valid Parentheses",
            "titleSlug": "longest-valid-parentheses5657",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>&nbsp;consisting of opening and closing parenthesis '<strong>(</strong>' and '<strong>)</strong>'. Find the length of the longest valid parenthesis substring.</span></p>\n<p><span style=\"font-size: 18px;\">A parenthesis string is valid if:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">For every opening parenthesis, there is a closing parenthesis.</span></li>\n<li><span style=\"font-size: 18px;\">The closing parenthesis must be after its opening parenthesis.</span></li>\n</ul>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"((()\"\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest valid parenthesis substring is \"()\".</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \")()())\"\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest valid parenthesis substring is \"()()\".</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"())()\"\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest valid parenthesis substring is \"()\".</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; s.size() &le; 10<sup>6</sup>&nbsp;&nbsp;<br />s consists of '(' and ')' only</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of opening and closing parentheses '(' and ')', find the length of the longest *valid* (well-formed) parenthesis substring. A valid parenthesis string has a matching closing parenthesis for every opening parenthesis, and the closing parenthesis appears after its corresponding opening parenthesis.",
                "constraints": [
                    "1 <= s.size() <= 10^6",
                    "s consists of '(' and ')' only"
                ],
                "testcases": [
                    {
                        "input": "((()",
                        "output": "2",
                        "explanation": "The longest valid parenthesis substring is '()'."
                    },
                    {
                        "input": ")()())",
                        "output": "4",
                        "explanation": "The longest valid parenthesis substring is '()()'."
                    },
                    {
                        "input": "())()",
                        "output": "2",
                        "explanation": "The longest valid parenthesis substring is '()'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each index find out what can be the maximum sequence starting from that index.</span></p>",
            "<p><span style=\"font-size:18px\">A valid sequence always starts with open brace at starting and closing bracket at the end and at any point number of opening braces are greater than or equal to number of closing braces.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Templaate for C++\n\nclass Solution {\n  public:\n    int maxLength(string s) {\n        stack<int> st;\n\n        // Push -1 as the initial index to\n        // handle the edge case\n        st.push(-1);\n        int maxLen = 0;\n\n        // Traverse the string\n        for (int i = 0; i < s.length(); i++) {\n\n            // If we encounter an opening parenthesis,\n            // push its index\n            if (s[i] == '(') {\n                st.push(i);\n            } else {\n\n                // If we encounter a closing parenthesis,\n                // pop the stack\n                st.pop();\n\n                // If stack is empty, push the current index\n                // as a base for the next valid substring\n                if (st.empty()) {\n                    st.push(i);\n                } else {\n\n                    // Update maxLength with the current length\n                    // of the valid parentheses substring\n                    maxLen = max(maxLen, i - st.top());\n                }\n            }\n        }\n\n        return maxLen;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Templaate for JAVA\n\nclass Solution {\n    // Function to find the length of the\n    // longest valid parentheses substring\n    static int maxLength(String s) {\n        Stack<Integer> stack = new Stack<>();\n\n        // Push -1 as the initial index to\n        // handle the edge case\n        stack.push(-1);\n        int maxLen = 0;\n\n        // Traverse the string\n        for (int i = 0; i < s.length(); i++) {\n\n            // If we encounter an opening parenthesis,\n            // push its index\n            if (s.charAt(i) == '(') {\n                stack.push(i);\n            } else {\n\n                // If we encounter a closing parenthesis,\n                // pop the stack\n                stack.pop();\n\n                // If stack is empty, push the current index\n                // as a base for the next valid substring\n                if (stack.isEmpty()) {\n                    stack.push(i);\n                } else {\n\n                    // Update maxLength with the current length\n                    // of the valid parentheses substring\n                    maxLen = Math.max(maxLen, i - stack.peek());\n                }\n            }\n        }\n\n        return maxLen;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Templaate for Python\nclass Solution:\n\n    def maxLength(self, s):\n        stack = []\n\n        # Push -1 as the initial index to\n        # handle the edge case\n        stack.append(-1)\n        maxLen = 0\n\n        # Traverse the string\n        for i in range(len(s)):\n\n            # If we encounter an opening parenthesis,\n            # push its index\n            if s[i] == '(':\n                stack.append(i)\n            else:\n\n                # If we encounter a closing parenthesis,\n                # pop the stack\n                stack.pop()\n\n                # If stack is empty, push the current index\n                # as a base for the next valid substring\n                if not stack:\n                    stack.append(i)\n                else:\n\n                    # Update maxLength with the current length\n                    # of the valid parentheses substring\n                    maxLen = max(maxLen, i - stack[-1])\n\n        return maxLen\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    // Function to find the length of the\n    // longest valid parentheses substring\n    public int maxLength(string s) {\n        Stack<int> stack = new Stack<int>();\n\n        // Push -1 as the initial index to handle\n        //   the edge case\n        stack.Push(-1);\n        int maxLen = 0;\n\n        // Traverse the string\n        for (int i = 0; i < s.Length; i++) {\n\n            // If we encounter an opening parenthesis,\n            // push its index\n            if (s[i] == '(') {\n                stack.Push(i);\n            } else {\n\n                // If we encounter a closing parenthesis,\n                // pop the stack\n                stack.Pop();\n\n                // If stack is empty, push the current index\n                // as a base for the next valid substring\n                if (stack.Count == 0) {\n                    stack.Push(i);\n                } else {\n\n                    // Update maxLength with the current length\n                    // of the valid parentheses substring\n                    maxLen = Math.Max(maxLen, i - stack.Peek());\n                }\n            }\n        }\n\n        return maxLen;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} s\n * @returns {number}\n */\n\nclass Solution {\n    maxLength(s) {\n        let stack = [];\n\n        // Push -1 as the initial index to handle\n        // the edge case\n        stack.push(-1);\n        let maxLen = 0;\n\n        // Traverse the string\n        for (let i = 0; i < s.length; i++) {\n\n            // If we encounter an opening parenthesis,\n            // push its index\n            if (s[i] === '(') {\n                stack.push(i);\n            } else {\n\n                // If we encounter a closing parenthesis,\n                // pop the stack\n                stack.pop();\n\n                // If stack is empty, push the current index\n                // as a base for the next valid substring\n                if (stack.length === 0) {\n                    stack.push(i);\n                } else {\n\n                    // Update maxLength with the current length\n                    // of the valid parentheses substring\n                    maxLen = Math.max(maxLen, i - stack[stack.length - 1]);\n                }\n            }\n        }\n\n        return maxLen;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}