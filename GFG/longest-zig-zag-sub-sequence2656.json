{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705275,
            "title": "Longest Zig-Zag Sub Sequence",
            "titleSlug": "longest-zig-zag-sub-sequence2656",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>nums</strong> of <strong>n</strong>&nbsp;positive integers. The task is to find the longest Zig-Zag subsequence problem such that all elements of this are alternating (nums<sub>i-1</sub> &lt; nums<sub>i</sub> &gt; nums<sub>i+1</sub>&nbsp;or nums<sub>i-1</sub>&nbsp;&gt; nums<sub>i</sub>&nbsp;&lt; nums<sub>i+1</sub>).</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>nums = {1,5,4}\n<strong>Output: </strong>3\n<strong>Explanation: </strong>The entire sequenece is a \nZig-Zag sequence.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Examplae 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>nums = {1,17,5,10,13,15,10,5,16,8}\n<strong>Ooutput: </strong>7\n<strong>Explanation: </strong>There are several subsequences\nthat achieve this length. \nOne is {1,17,10,13,10,16,8}.\n</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anyhting. Your task is to complete the function ZigZagMaxLength()&nbsp;which takes the sequence&nbsp; nums as input parameter and returns the maximum length of alternating sequence.<br />\n<br />\n<strong>Expected Time Complexity:&nbsp;</strong>O(n)<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &lt;= n &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use Dynamic programming.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to find the maximum length of the zigzag sequence\nclass Solution {\n    public:\n        int ZigZagMaxLength(vector<int>&nums){\n            // If there are less than 2 elements in the array, return the size of the array\n            if(nums.size() < 2)\n                return nums.size();\n            \n            // Initialize the variables for tracking the length of zigzag sequence\n            int up = 1, down = 1;\n            \n            // Iterate through the array starting from index 1\n            for(int i = 1; i < nums.size(); i++){\n                // If the current element is greater than the previous element, increase the length of the \"up\" sequence\n                if(nums[i] > nums[i-1])\n                    up = down + 1;\n                // If the current element is less than the previous element, increase the length of the \"down\" sequence\n                else if(nums[i] < nums[i-1])\n                    down  = up + 1;\n            }\n            \n            // Return the maximum length of the zigzag sequence\n            return max(up, down);\n        }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//User function Template for Java\n\nclass Solution\n{\n    public int ZigZagMaxLength(int[] nums)\n    {\n        // get the length of the input array\n        int n = nums.length;\n        // check if the array has less than 2 elements\n        if(n < 2){\n            // return the length\n            return n;\n        }\n\n        // initialize variables for counting the length of the zigzag sequence\n        int up = 1, down = 1;\n        \n        // iterate through the array starting from the second element\n        for(int i = 1; i < n; i++){\n            // check if the current element is greater than the previous element\n            if(nums[i] > nums[i-1]){\n                // if so, update the length of the up sequence\n                up = down + 1;\n            }\n            // check if the current element is less than the previous element\n            else if(nums[i] < nums[i-1]){\n                // if so, update the length of the down sequence\n                down  = up + 1;\n            }\n        }\n        \n        // return the maximum length between the up and down sequences\n        return Math.max(up, down);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Initial Template for Python 3\nclass Solution:\n    #Function to find the length of longest subsequence of given array.\n    def ZigZagMaxLength(self, nums):\n        \n        # Code here\n        #if length of nums is less than 2, return the length of nums.\n        if len(nums) < 2:\n            return len(nums)\n        #initialize up and down variables to 1.\n        up = 1\n        down = 1\n        #iterating over the array starting from the second element.\n        for i in range(1, len(nums)):\n            #checking if current element is greater than the previous element.\n            #if yes, update up variable as down+1.\n            if nums[i] > nums[i - 1]:\n                up = down + 1\n            #checking if current element is less than the previous element.\n            #if yes, update down variable as up+1.\n            elif nums[i] < nums[i - 1]:\n                down = up + 1\n        #returning the maximum of up and down, which is the length of the longest zigzag subsequence.\n        return max(up, down)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} nums\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the length of longest subsequence of even-odd.\n    ZigZagMaxLength(nums)\n    {\n        //if length of nums is less than 2, return the length of nums.\n        if (nums.length < 2) {\n            return nums.length;\n        }\n\n        //initialize up and down variables to 1.\n        let up = 1;\n        let down = 1;\n\n        //iterating over the array starting from the second element.\n        for (let i = 1; i < nums.length; i++) {\n            //checking if current element is greater than the previous element.\n            //if yes, update up variable as down+1.\n            if (nums[i] > nums[i - 1]) {\n                up = down + 1;\n            }\n            //checking if current element is less than the previous element.\n            //if yes, update down variable as up+1.\n            else if (nums[i] < nums[i - 1]) {\n                down = up + 1;\n            }\n        }\n\n        //returning the maximum of up and down, which is the length of the longest zigzag subsequence.\n        return Math.max(up, down);\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int ZigZagMaxLength(List<int> nums)\n    {\n        // If there are less than 2 elements in the array, return the size of the array\n        if(nums.Count < 2)\n            return nums.Count;\n            \n        // Initialize the variables for tracking the length of zigzag sequence\n        int up = 1, down = 1;\n            \n        // Iterate through the array starting from index 1\n        for(int i = 1; i < nums.Count; i++){\n            // If the current element is greater than the previous element, increase the length of the \"up\" sequence\n            if(nums[i] > nums[i-1])\n                up = down + 1;\n            // If the current element is less than the previous element, increase the length of the \"down\" sequence\n            else if(nums[i] < nums[i-1])\n                down  = up + 1;\n        }\n            \n        // Return the maximum length of the zigzag sequence\n        return Math.Max(up, down);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}