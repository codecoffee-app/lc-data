{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705609,
            "title": "Lots of Work",
            "titleSlug": "lots-of-work3233",
            "content": "<p><span style=\"font-size:18px\">Ronit had always wished to become a writer. He became a very popular writer. However he knew that with popularity comes lots of work. Time passed and Ronit was deprived of sleep. His parents were now&nbsp;concerned. They advised him to minimize the amount of time he works each day. However Ronit has to complete <strong>n</strong>&nbsp;books in <strong>m</strong>&nbsp;days.<br />\nHe has to&nbsp;write the books in the given order but he can&nbsp;write any&nbsp;number of books each day.&nbsp;He can&nbsp;complete all the books before m&nbsp;days.&nbsp;He knew that he would take an amount of time<strong> Arr[i]</strong> to write his i<sup>th</sup> book. He wanted to find out the minimum amount of time T such that if he worked&nbsp;for a time less than or equal to T each day, he could complete his work on or before m&nbsp;days.&nbsp;He is a very good writer but is weak in algorithms. So he wants you to help him out.</span><br />\n<span style=\"font-size:18px\"><strong>Note</strong>: Ronit cannot start working on a book on one day and complete it on the next day.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nn = 5, m = 2\nArr = {1, 3, 2, 1, 2}\n<strong>Output:</strong> 5\n<strong>Explaination:</strong> Ronit has 2 days to complete 5 \nbooks. He&nbsp;completes the first 2 books on the \nfirst day and takes a total time of 4 &le; 5. He \ncompletes the remaining books on the second day \nand takes a total time of 5 &le; 5. Hence T = 5.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nn = 4, m = 3\nArr = {1, 3, 4, 2}\n<strong>Output:</strong> 4\n<strong>Explaination:</strong> Ronit has 3 days to complete 4 \nbooks. He&nbsp;completes the first 2 books on the \nfirst day and takes a total time of 4 &le; 4. \nHe completes the remaining two books on the \nsecond and third day. Hence T = 4.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>minAmountOfTime()</strong>&nbsp;which takes the array <strong>Arr[]</strong> and its size <strong>n</strong>&nbsp;and <strong>m</strong>&nbsp;as input parameters&nbsp;and returns the minimum amount of time.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n*m)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; n&nbsp;&le;&nbsp;1000<br />\n1 &le; m&nbsp;&le; n<br />\n1 &le;&nbsp;Arr[i] &le;&nbsp;100</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Ronit, a successful writer, faces a dilemma. His popularity has led to sleep deprivation, causing his parents concern. He needs to complete 'n' books within 'm' days, writing them in the given order. Each book 'i' takes Arr[i] time to write.  Determine the minimum time 'T' he can work each day such that he finishes all books on or before 'm' days. Ronit cannot split work on a book across multiple days.",
                "constraints": [
                    "1 <= n <= 1000",
                    "1 <= m <= n",
                    "1 <= Arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 5, m = 2\nArr = {1, 3, 2, 1, 2}",
                        "output": "5",
                        "explanation": "Ronit can complete the first two books (1 + 3 = 4) on day 1, which is less than or equal to 5. He then completes the remaining books (2 + 1 + 2 = 5) on day 2, which is also less than or equal to 5. Thus, the minimum time T is 5."
                    },
                    {
                        "input": "n = 4, m = 3\nArr = {1, 3, 4, 2}",
                        "output": "4",
                        "explanation": "Ronit can complete the first two books (1 + 3 = 4) on day 1, taking time less than or equal to 4.  He can complete the third book (4) on day 2 and the fourth book (2) on day 3, with each day's work less than or equal to 4.  Therefore, the minimum time T is 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to distribute the books on all m days so that time taken on a particular day is as small as possible.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution {\n  public:\n  // Function to find the minimum amount of time required to perform the tasks.\n    long  minAmountOfTime(long Arr[], long n, long m){\n        long count=0,count1=0,t=0,T=0,max=0;\n\n        // Calculating the total time required for all the tasks.\n        for(long i=0;i<n;i++){\n            t+=Arr[i];\n\n            // Finding the maximum time required for a single task.\n            if(Arr[i]>max)\n               max=Arr[i];\n        }\n\n        // Calculating the initial minimum time required for each person to perform the tasks.\n        T=ceil((double)t/m);\n\n        // Checking if the initial minimum time is less than the maximum individual task time.\n        // If it is, then the minimum time required should be the maximum individual task time.\n        if(T<max)\n             T=max;\n\n        // Looping until we find the minimum time required that allows all tasks to be performed by m people.\n        while(1)\n        {\n            count=0;\n            count1=1;\n            for(long i=0;i<n;i++)\n            {\n                // Checking if adding the current task time to the current count will exceed the current minimum time.\n                if((count+Arr[i])<=T)\n                     count+=Arr[i];\n                else\n                {\n                    // If it does, then increment the count of people required and set the current count to the current task time.\n                    count=Arr[i];\n                    count1++;\n                }\n            }\n\n            // If the count of people required is less than or equal to m, we have found the minimum time required.\n            if(count1<=m)\n               break;\n\n            // If not, we increment the minimum time and continue the loop.\n            T++;\n        }\n        \n        // Returning the minimum time required.\n        return T;\n  }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}