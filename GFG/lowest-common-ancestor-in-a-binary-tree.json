{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700221,
            "title": "LCA in  Binary Tree",
            "titleSlug": "lowest-common-ancestor-in-a-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\">Given a Binary Tree with all <strong>unique</strong> values and two nodes value,&nbsp;<strong>n1</strong> and <strong>n2</strong>. The task is to find the<strong>&nbsp;lowest common ancestor</strong> of the given two nodes. We may assume that either both n1 and n2 are present in the tree or none of them are&nbsp;present. </span></span></p>\n<p><span style=\"font-size: 18px;\">LCA: It is the first common ancestor of both the nodes n1 and n2 from bottom of tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [1,2,3,4,5,6,7], n1 = 5 , n2 = 6<br />\n&nbsp;     <img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20220726133857/UntitledDiagramdrawio-300x179.png\" />\n<strong>Output: </strong><span style=\"font-family: arial,helvetica,sans-serif;\">1\n</span><strong>Explanation: </strong></span><span style=\"font-size: 18px;\">LCA of 5 and 6 is 1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">root = [5, 2, N, 3, 4], n1 = 3 , n2 = 4 <br />\n\\t     5    \n\\t&nbsp;   /    \n\\t&nbsp;  2  \n\\t&nbsp; / \\  \n\\t&nbsp;3   4\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-family: arial,helvetica,sans-serif;\">2\n</span><strong style=\"font-size: 18px;\">Explanation: </strong><span style=\"font-size: 18px;\">LCA of 3 and 4 is 2.</span><strong style=\"font-size: 18px;\"> </strong></span></pre>\n<pre><span ><strong >Input: </strong><span >root = </span><span style=\"font-size: 18.6667px;\">[5, 2, N, 3, 4], n1 = 5 , n2 = 4 <br /></span><span >\n\\t     5    \n\\t&nbsp;   /    \n\\t&nbsp;  2  \n\\t&nbsp; / \\  \n\\t&nbsp;3   4\n</span><strong >Output: </strong><span style=\"font-family: arial,helvetica,sans-serif;\">5\n</span><strong >Explanation: </strong><span >LCA of 5 and 4 is 5.</span><strong > </strong></span></pre>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>5</sup><br />1 &le; node-&gt;data &le; 10<sup>5</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where all node values are unique, find the lowest common ancestor (LCA) of two given nodes, `n1` and `n2`. Assume that both `n1` and `n2` are present in the tree.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root = [1,2,3,4,5,6,7], n1 = 5 , n2 = 6",
                        "output": "1",
                        "explanation": "The lowest common ancestor of nodes with values 5 and 6 is the root node with value 1."
                    },
                    {
                        "input": "root = [5, 2, N, 3, 4], n1 = 3 , n2 = 4",
                        "output": "2",
                        "explanation": "The lowest common ancestor of nodes with values 3 and 4 is the node with value 2."
                    },
                    {
                        "input": "root = [5, 2, N, 3, 4], n1 = 5 , n2 = 4",
                        "output": "5",
                        "explanation": "The lowest common ancestor of nodes with values 5 and 4 is the node with value 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "snapdeal",
            "makemytrip",
            "payu",
            "google",
            "times-internet",
            "cisco",
            "paypal",
            "expedia",
            "twitter",
            "american-express"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    // Function to return the lowest common ancestor in a Binary Tree.\n    Node *lca(Node *root, int n1, int n2) {\n\n        if (root == NULL)\n            return NULL;\n\n        // if either n1 or n2 matches with data at current node, we return root.\n        //  (Note that if a node is ancestor of other, then the ancestor node\n        // becomes the lowest common ancestor).\n        if (root->data == n1 or root->data == n2)\n            return root;\n\n        // calling the lca function recursively for left and right subtrees.\n        Node *l = lca(root->left, n1, n2);\n        Node *r = lca(root->right, n1, n2);\n\n        // if both of the above calls return non-NULL value then one node\n        // is present in one subtree and other is present in another subtree.\n        // So, this node is the lowest common ancestor.\n        if (l and r)\n            return root;\n\n        // else we check if left subtree or right subtree is the\n        // lowest common ancestor.\n        return (l != NULL) ? l : r;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Backend complete function template for JAVA\n\nclass Solution {\n    // Function to return the lowest common ancestor in a Binary Tree.\n    Node lca(Node root, int n1, int n2) {\n\n        if (root == null) return null;\n\n        // if either n1 or n2 matches with data at current node, we return root.\n        //  (Note that if a node is ancestor of other, then the ancestor node\n        // becomes the lowest common ancestor).\n        if (root.data == n1 || root.data == n2) return root;\n\n        // calling the lca function recursively for left and right subtrees.\n        Node l = lca(root.left, n1, n2);\n        Node r = lca(root.right, n1, n2);\n\n        // if both of the above calls return non-NULL value then one node\n        // is present in one subtree and other is present in another subtree.\n        // So, this node is the lowest common ancestor.\n        if (l != null && r != null) return root;\n\n        // else we check if left subtree or right subtree is the\n        // lowest common ancestor.\n        return (l != null) ? l : r;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n'''\nclass Node:\n    def __init__(self, val):\n        self.right = None\n        self.data = val\n        self.left = None\n'''\n\n\nclass Solution:\n\n    #Function to return the lowest common ancestor in a Binary Tree.\n    def lca(self, root, n1, n2):\n\n        if root is None:\n            return None\n\n        #if either n1 or n2 matches with data at current node, we return root.\n        # (Note that if a node is ancestor of other, then the ancestor node\n        #becomes the lowest common ancestor).\n        if root.data == n1 or root.data == n2:\n            return root\n\n        #calling the lca function recursively for left and right subtrees.\n        left_lca = self.lca(root.left, n1, n2)\n        right_lca = self.lca(root.right, n1, n2)\n\n        #if both of the above calls return non-NULL value then one node\n        #is present in one subtree and other is present in another subtree.\n        #So, this node is the lowest common ancestor.\n        if left_lca and right_lca:\n            return root\n\n        #else we check if left subtree or right subtree is the\n        #lowest common ancestor.\n        if left_lca is not None:\n            return left_lca\n        else:\n            return right_lca\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n * @param {number} n1\n * @param {number} n2\n * @returns {Node}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to return the lowest common ancestor in a Binary Tree.\n    lca(root, n1, n2) {\n        if (root === null) return null;\n\n        // if either n1 or n2 matches with data at current node, we return root.\n        //  (Note that if a node is ancestor of other, then the ancestor node\n        // becomes the lowest common ancestor).\n        if (root.data == n1 || root.data == n2) return root;\n\n        // calling the lca function recursively for left and right subtrees.\n        let l = this.lca(root.left, n1, n2);\n        let r = this.lca(root.right, n1, n2);\n\n        // if both of the above calls return non-NULL value then one node\n        // is present in one subtree and other is present in another subtree.\n        // So, this node is the lowest common ancestor.\n        if (l && r) return root;\n\n        // else we check if left subtree or right subtree is the\n        // lowest common ancestor.\n        if (l != null) return l;\n        return r;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}