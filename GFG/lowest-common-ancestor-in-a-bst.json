{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700236,
            "title": "Lowest Common Ancestor in a BST",
            "titleSlug": "lowest-common-ancestor-in-a-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Search Tree (with all values unique) and two nodes <strong>n1 </strong>and <strong>n2 </strong>(n1 != n2). </span><span style=\"font-size: 18px;\">You may assume that both nodes exist in the tree. Find the </span><strong style=\"font-size: 18px;\">Lowest Common Ancestor (LCA)</strong><span style=\"font-size: 18px;\"> of the given two nodes in the BST.</span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong>LCA</strong> between two nodes <strong>n1 </strong>and <strong>n2 </strong>is defined as the lowest node that has both n1 and n2 as descendants (where we allow a node to be a descendant of itself).</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [5, 4, 6, 3, N, N, 7, N, N, N, 8], n1 = 7, n2 = 8\n\\t  <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700236/Web/Other/blobid0_1738413634.png\" alt=\"\" width=\"301\" height=\"263\" />\n<strong>Output: </strong>7<br /><strong>Explanation:</strong> 7 is the closest node to both 7 and 8, which is also an ancestor of both the nodes.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">root = [20, 8, 22, 4, 12, N, N, N, N, 10, 14], n1 = 8, n2 = 14<br />\\t  <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700236/Web/Other/blobid1_1739265251.png\" width=\"288\" height=\"254\" /> &nbsp; &nbsp; &nbsp;  \n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">8<br /><strong>Explanation:</strong> 8 is the closest node to both 8 and 14, which is also an ancestor of both the nodes.</span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [2, 1, 3], n1 = 1, n2 = 3\n\\t  <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700236/Web/Other/blobid1_1738413633.png\" alt=\"\" width=\"309\" height=\"249\" />\n<strong>Output: </strong>2<br /><strong>Explanation:</strong> 2 is the closest node to both 1 and 3, which is also an ancestor of both the nodes.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= node-&gt;data &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= n1, n2 &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) with unique values and two distinct nodes, `n1` and `n2`, find the Lowest Common Ancestor (LCA) of these nodes. Assume that both `n1` and `n2` exist in the tree.\n\nThe LCA of two nodes is defined as the lowest node in the tree that has both `n1` and `n2` as descendants (including the possibility of a node being a descendant of itself).",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node data <= 10^5",
                    "1 <= n1, n2 <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root = [5, 4, 6, 3, null, null, 7, null, null, null, 8], n1 = 7, n2 = 8",
                        "output": "7",
                        "explanation": "The lowest common ancestor of nodes 7 and 8 is node 7 itself, as it is the closest ancestor to both nodes."
                    },
                    {
                        "input": "root = [20, 8, 22, 4, 12, null, null, null, null, 10, 14], n1 = 8, n2 = 14",
                        "output": "8",
                        "explanation": "The lowest common ancestor of nodes 8 and 14 is node 8 itself, being the closest ancestor to both nodes."
                    },
                    {
                        "input": "root = [2, 1, 3], n1 = 1, n2 = 3",
                        "output": "2",
                        "explanation": "The lowest common ancestor of nodes 1 and 3 is node 2.  Node 2 is the root, and thus the ancestor of both 1 and 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Find the split point where one value is on the left and the other on the right of the current node and that node is the LCA.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "maq-software",
            "synopsys"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to find the lowest common ancestor in a BST.\nclass Solution {\n  public:\n    // Function to find LCA of n1 and n2, assuming\n    // that both nodes n1 and n2 are present in BST\n    Node* LCA(Node* root, Node* n1, Node* n2) {\n\n        while (root != nullptr) {\n\n            // If both n1 and n2 are smaller than root,\n            // then LCA lies in left\n            if (root->data > n1->data && root->data > n2->data)\n                root = root->left;\n\n            // If both n1 and n2 are greater than root,\n            // then LCA lies in right\n            else if (root->data < n1->data && root->data < n2->data)\n                root = root->right;\n\n            // Else Ancestor is found\n            else\n                break;\n        }\n\n        return root;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the lowest common ancestor in a BST.\n    static Node LCA(Node root, Node n1, Node n2) {\n\n        while (root != null) {\n\n            // If both n1 and n2 are smaller than root,\n            // then LCA lies in left\n            if (root.data > n1.data && root.data > n2.data) root = root.left;\n\n            // If both n1 and n2 are greater than root,\n            // then LCA lies in right\n            else if (root.data < n1.data && root.data < n2.data)\n                root = root.right;\n\n            // Else Ancestor is found\n            else\n                break;\n        }\n\n        return root;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find LCA of n1 and n2, assuming\n    # that both nodes n1 and n2 are present in BST\n    def LCA(self, root, n1, n2):\n\n        while root:\n\n            # If both n1 and n2 are smaller than root,\n            # then LCA lies in left\n            if root.data > n1.data and root.data > n2.data:\n                root = root.left\n\n            # If both n1 and n2 are greater than root,\n            # then LCA lies in right\n            elif root.data < n1.data and root.data < n2.data:\n                root = root.right\n\n            # Else Ancestor is found\n            else:\n                break\n\n        return root\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {Node} root\n * @param {Node} n1\n * @param {Node} n2\n * @returns {Node}\n */\n\nclass Solution {\n    // Function to find LCA of n1 and n2, assuming\n    // that both nodes n1 and n2 are present in BST\n    LCA(root, n1, n2) {\n\n        while (root !== null) {\n\n            // If both n1 and n2 are smaller than root,\n            // then LCA lies in left\n            if (root.data > n1.data && root.data > n2.data) root = root.left;\n\n            // If both n1 and n2 are greater than root,\n            // then LCA lies in right\n            else if (root.data < n1.data && root.data < n2.data)\n                root = root.right;\n\n            // Else Ancestor is found\n            else\n                break;\n        }\n        return root;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}