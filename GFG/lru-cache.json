{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700366,
            "title": "LRU Cache",
            "titleSlug": "lru-cache",
            "content": "<p><span style=\"font-size: 18px;\">Design a data structure that works like a LRU Cache. Here&nbsp;<strong>cap</strong>&nbsp;denotes&nbsp;the capacity of the cache and&nbsp;<strong>Q</strong>&nbsp;denotes the number of queries. Query can be&nbsp;</span><span style=\"font-size: 18px;\">of two types:</span></p>\n<ol>\n<li><span style=\"font-size: 18px;\"><strong>PUT</strong>&nbsp;<strong>x</strong>&nbsp;<strong>y</strong>: sets the value of the key&nbsp;<strong>x</strong>&nbsp;with value&nbsp;<strong>y</strong></span></li>\n<li><span style=\"font-size: 18px;\"><strong>GET</strong>&nbsp;<strong>x</strong>: gets the value of key <strong>x</strong>&nbsp;if present else returns&nbsp;<strong>-1</strong>.</span></li>\n</ol>\n<p><span style=\"font-size: 18px;\">The LRUCache class has two methods&nbsp;<strong>get</strong>() and&nbsp;<strong>put</strong>() which are defined as follows.</span></p>\n<ol>\n<li><span style=\"font-size: 18px;\"><strong>get(key)</strong>: returns the value of the key if it&nbsp;already exists in the cache otherwise returns&nbsp;<strong>-1.</strong></span></li>\n<li><span style=\"font-size: 18px;\"><strong>put(key, value)</strong>: if the key is already present, update its value. If not present, add the key-value pair to the cache. If the cache reaches its capacity it should remove the least recently used item before inserting the new item.</span></li>\n<li><span style=\"font-size: 18px;\">In the&nbsp;<strong>constructor</strong>&nbsp;of the class the capacity of the cache should be initialized.</span></li>\n</ol>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>cap = 2, Q = 2, Queries = [[\"PUT\", 1, 2], [\"GET\", 1]]\n<strong>Output: </strong>[2]<strong>\nExplanation: </strong>Cache Size = 2\n[\"PUT\", 1, 2] will insert the key-value pair (1, 2) in the cache,\n[\"GET\", 1] will print the value corresponding to Key 1, ie 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>cap = 2, Q = 8, Queries = [[\"PUT\", 1, 2], [\"PUT\", 2, 3], [\"PUT\", 1, 5], [\"PUT\", 4, 5], [\"PUT\", 6, 7], [\"GET\", 4], [\"PUT\", 1, 2], [\"GET\", 3]]<br /><strong>Output: </strong>[5, -1]<strong>\nExplanation: </strong>Cache Size = 2\n[\"PUT\", 1, 2] will insert the pair (1,2) in the cache.\n[\"PUT\", 2, 3] will insert the pair (2,3) in the cache: 1-&gt;2, 2-&gt;3(the most recently used one is kept at the rightmost position)&nbsp;\n[\"PUT\", 1, 5] will replace the value of 1 from 2 to 5 : 2 -&gt; 3, 1 -&gt; 5\n[\"PUT\", 4, 5] : 1 -&gt; 5, 4 -&gt; 5 (Cache size is 2, hence we delete the least recently used key-value pair)\n[\"PUT\", 6, 7] : 4 -&gt; 5, 6 -&gt; 7&nbsp;\n[\"GET\", 4] : Prints 5 (The cache now looks like 6 -&gt; 7, 4-&gt;5)\n[\"PUT\", 1, 2] : 4 -&gt; 5, 1 -&gt; 2  (Cache size is 2, hence we delete the least recently used key-value pair)\n[\"GET\", 3] : No key value pair having key = 3. Hence, -1 is printed.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= cap &lt;= 10<sup>3</sup><br />1 &lt;= Q &lt;= 10<sup>5</sup><br />1 &lt;= x, y &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a data structure that simulates an LRU (Least Recently Used) cache. The cache has a fixed capacity. Implement `PUT` and `GET` operations with the following behavior:\n\n*   **PUT x y:**  Insert or update the key-value pair (x, y) in the cache. If the cache is full, evict the least recently used item before inserting the new pair.\n*   **GET x:**  Retrieve the value associated with key x. Return -1 if the key is not present in the cache.\n\nImplement the LRUCache class with the following methods:\n\n*   `LRUCache(capacity)`: Constructor to initialize the cache with the given capacity.\n*   `get(key)`: Retrieves the value of the key if present, otherwise returns -1.\n*   `put(key, value)`: Inserts or updates the key-value pair. Evicts the least recently used item if the cache is full.",
                "constraints": [
                    "1 <= cap <= 10^3",
                    "1 <= Q <= 10^5",
                    "1 <= x, y <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "cap = 2, Q = 2, Queries = [[\"PUT\", 1, 2], [\"GET\", 1]]",
                        "output": "[2]",
                        "explanation": "Cache has capacity 2.  PUT(1, 2) inserts the pair. GET(1) returns 2."
                    },
                    {
                        "input": "cap = 2, Q = 8, Queries = [[\"PUT\", 1, 2], [\"PUT\", 2, 3], [\"PUT\", 1, 5], [\"PUT\", 4, 5], [\"PUT\", 6, 7], [\"GET\", 4], [\"PUT\", 1, 2], [\"GET\", 3]]",
                        "output": "[5, -1]",
                        "explanation": "Cache has capacity 2. PUT(1,2), PUT(2,3), PUT(1,5) updates 1, PUT(4,5) evicts 2. PUT(6,7) evicts 1. GET(4) returns 5. PUT(1,2) evicts 6. GET(3) returns -1 (not found)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to create a doubly linkedlist and then manipulate the most recenlty used node in every operation</p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Design-Pattern",
                "slug": "design-pattern"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "zoho",
            "flipkart",
            "morgan-stanley",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "samsung",
            "snapdeal",
            "hike",
            "makemytrip",
            "ola-cabs",
            "visa",
            "walmart",
            "goldman-sachs",
            "adobe",
            "google",
            "yahoo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "struct Node {\n    int key;\n    int value;\n    Node *next, *pre;\n\n    Node(int key, int value) {\n        this->key = key;\n        this->value = value;\n        next = pre = NULL;\n    }\n};\n\nclass LRUCache {\n  private:\n    static unordered_map<int, Node *> hsmap;\n    static int capacity, count;\n    static Node *head, *tail;\n\n  public:\n    // Constructor for initializing the cache capacity with the given value.\n    LRUCache(int cap) {\n        unordered_map<int, Node *> temp;\n        hsmap = temp;\n        capacity = cap;\n        head = new Node(0, 0);\n        tail = new Node(0, 0);\n        head->next = tail;\n        head->pre = NULL;\n        tail->next = NULL;\n        tail->pre = head;\n        count = 0;\n    }\n\n    void addToHead(Node *node) {\n        node->next = head->next;\n        node->next->pre = node;\n        node->pre = head;\n        head->next = node;\n    }\n\n    // Function to delete a node.\n    void deleteNode(Node *node) {\n        node->pre->next = node->next;\n        node->next->pre = node->pre;\n    }\n\n    // Function to return value corresponding to the key.\n    int get(int key) {\n        // if element is present in map,\n        if (hsmap.count(key) > 0) {\n            Node *node = hsmap[key];\n            int result = node->value;\n\n            deleteNode(node);\n            addToHead(node);\n\n            // returning the value.\n            return result;\n        }\n        // else we return -1.\n        return -1;\n    }\n\n    // Function for storing key-value pair.\n    void put(int key, int value) {\n        if (hsmap.count(key) > 0) {\n            Node *node = hsmap[key];\n            node->value = value;\n            deleteNode(node);\n            addToHead(node);\n        } else {\n            Node *node = new Node(key, value);\n            hsmap[key] = node;\n            if (count < capacity) {\n                count++;\n                addToHead(node);\n            } else {\n                hsmap.erase(tail->pre->key);\n                deleteNode(tail->pre);\n                addToHead(node);\n            }\n        }\n    }\n};\n\n// initializing static members.\nunordered_map<int, Node *> temp;\nint LRUCache::capacity = 0;\nNode *LRUCache::head = new Node(0, 0);\nNode *LRUCache::tail = new Node(0, 0);\nint LRUCache::count = 0;\nunordered_map<int, Node *> LRUCache::hsmap = temp;\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Node {\n    int key, value;\n    Node next, pre;\n\n    Node(int key, int value) {\n        this.key = key;\n        this.value = value;\n        next = pre = null;\n    }\n}\n\nclass LRUCache {\n    private static Map<Integer, Node> hsMap;\n    private static int capacity, count;\n    private static Node head, tail;\n\n    // Constructor for initializing the cache capacity with the given value.\n    LRUCache(int cap) {\n        hsMap = new HashMap<>();\n        this.capacity = cap;\n        head = new Node(0, 0);\n        tail = new Node(0, 0);\n        head.next = tail;\n        head.pre = null;\n        tail.next = null;\n        tail.pre = head;\n        count = 0;\n    }\n\n    public static void addToHead(Node node) {\n        node.next = head.next;\n        node.next.pre = node;\n        node.pre = head;\n        head.next = node;\n    }\n\n    // Function to delete a node.\n    public static void deleteNode(Node node) {\n        node.pre.next = node.next;\n        node.next.pre = node.pre;\n    }\n\n    // Function to return value corresponding to the key.\n    public static int get(int key) {\n        // if element is present in map,\n        if (hsMap.get(key) != null) {\n            Node node = hsMap.get(key);\n            int result = node.value;\n            deleteNode(node);\n            addToHead(node);\n\n            // returning the value.\n            return result;\n        }\n        // else we return -1.\n        return -1;\n    }\n\n    // Function for storing key-value pair.\n    public static void put(int key, int value) {\n        if (hsMap.get(key) != null) {\n            Node node = hsMap.get(key);\n            node.value = value;\n            deleteNode(node);\n            addToHead(node);\n        } else {\n            Node node = new Node(key, value);\n            hsMap.put(key, node);\n            if (count < capacity) {\n                count++;\n                addToHead(node);\n            } else {\n                hsMap.remove(tail.pre.key);\n                deleteNode(tail.pre);\n                addToHead(node);\n            }\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Node:\n\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = self.pre = None\n\n\nclass LRUCache:\n    hsmap = dict()\n    capacity = count = 0\n    head = tail = None\n\n    #Constructor for initializing the cache capacity with the given value.\n    def __init__(self, cap):\n        self.hsmap = dict()\n        self.capacity = cap\n        self.head = Node(0, 0)\n        self.tail = Node(0, 0)\n\n        self.head.next = self.tail\n        self.head.pre = None\n        self.tail.next = None\n        self.tail.pre = self.head\n        count = 0\n\n    def addToHead(self, node):\n        node.next = self.head.next\n        node.next.pre = node\n        node.pre = self.head\n        self.head.next = node\n\n    #Function to delete a node.\n    def deleteNode(self, node):\n        node.pre.next = node.next\n        node.next.pre = node.pre\n\n    #Function to return value corresponding to the key.\n    def get(self, key):\n\n        #if element is present in map,\n        if key in self.hsmap:\n\n            node = self.hsmap[key]\n            result = node.value\n            self.deleteNode(node)\n            self.addToHead(node)\n\n            #returning the value.\n            return result\n\n        #else we return -1.\n        else:\n            return -1\n\n    #Function for storing key-value pair.\n    def put(self, key, value):\n\n        if key in self.hsmap:\n\n            node = self.hsmap[key]\n            node.value = value\n            self.deleteNode(node)\n            self.addToHead(node)\n        else:\n            node = Node(key, value)\n            self.hsmap[key] = node\n\n            if self.count < self.capacity:\n                self.count += 1\n                self.addToHead(node)\n            else:\n                self.hsmap.pop(self.tail.pre.key)\n                self.deleteNode(self.tail.pre)\n                self.addToHead(node)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class LRUCache {\n    private class Node {\n        public int Key;\n        public int Value;\n        public Node Prev, Next;\n\n        public Node(int key, int value) {\n            Key = key;\n            Value = value;\n            Prev = Next = null;\n        }\n    }\n\n    private int Capacity;\n    private int Count;\n    private Node Head, Tail;\n    private Dictionary<int, Node> Cache;\n\n    // Constructor for initializing the cache capacity with the given value.\n    public LRUCache(int cap) {\n        Capacity = cap;\n        Count = 0;\n        Cache = new Dictionary<int, Node>();\n\n        Head = new Node(0, 0); // Dummy head\n        Tail = new Node(0, 0); // Dummy tail\n\n        Head.Next = Tail;\n        Tail.Prev = Head;\n    }\n\n    // Function to add a node at the head.\n    private void addToHead(Node node) {\n        node.Next = Head.Next;\n        node.Prev = Head;\n        Head.Next.Prev = node;\n        Head.Next = node;\n    }\n\n    // Function to delete a node.\n    private void deleteNode(Node node) {\n        Node prev = node.Prev;\n        Node next = node.Next;\n\n        prev.Next = next;\n        next.Prev = prev;\n    }\n\n    // Function to return value corresponding to the key.\n    public int get(int key) {\n        if (Cache.ContainsKey(key)) {\n            Node node = Cache[key];\n            int result = node.Value;\n\n            // Move the accessed node to the head\n            deleteNode(node);\n            addToHead(node);\n\n            return result;\n        }\n        return -1; // If key is not found\n    }\n\n    // Function for storing key-value pair.\n    public void put(int key, int value) {\n        if (Cache.ContainsKey(key)) {\n            Node node = Cache[key];\n            node.Value = value;\n\n            // Move the updated node to the head\n            deleteNode(node);\n            addToHead(node);\n        } else {\n            Node node = new Node(key, value);\n            Cache[key] = node;\n\n            if (Count < Capacity) {\n                Count++;\n                addToHead(node);\n            } else {\n                // Remove the least recently used node\n                Cache.Remove(Tail.Prev.Key);\n                deleteNode(Tail.Prev);\n                addToHead(node);\n            }\n        }\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Node {\n    constructor(key, value) {\n        this.key = key;\n        this.value = value;\n        this.next = null;\n        this.pre = null;\n    }\n}\n\nclass LRUCache {\n    // Constructor for initializing the cache capacity with the given value.\n    constructor(cap) {\n        this.hsmap = new Map();\n        this.capacity = cap;\n        this.count = 0;\n        this.head = new Node(0, 0);\n        this.tail = new Node(0, 0);\n        this.head.next = this.tail;\n        this.head.pre = null;\n        this.tail.next = null;\n        this.tail.pre = this.head;\n    }\n\n    addToHead(node) {\n        node.next = this.head.next;\n        node.next.pre = node;\n        node.pre = this.head;\n        this.head.next = node;\n    }\n\n    // Function to delete a node.\n    deleteNode(node) {\n        node.pre.next = node.next;\n        node.next.pre = node.pre;\n    }\n\n    /**\n     * @param {number} key\n     * @returns {number}\n     */\n\n    // Function to return value corresponding to the key.\n    get(key) {\n        // if element is present in map,\n        if (this.hsmap.has(key)) {\n            let node = this.hsmap.get(key);\n            let result = node.value;\n            this.deleteNode(node);\n            this.addToHead(node);\n\n            // returning the value.\n            return result;\n        }\n        // else we return -1.\n        return -1;\n    }\n\n    /**\n     * @param {number} key\n     * @param {number} value\n     * @return {void}\n     */\n\n    // Function for storing key-value pair.\n    put(key, value) {\n        if (this.hsmap.has(key)) {\n            let node = this.hsmap.get(key);\n            node.value = value;\n            this.deleteNode(node);\n            this.addToHead(node);\n        } else {\n            let node = new Node(key, value);\n            this.hsmap.set(key, node);\n            if (this.count < this.capacity) {\n                this.count++;\n                this.addToHead(node);\n            } else {\n                this.hsmap.delete(this.tail.pre.key);\n                this.deleteNode(this.tail.pre);\n                this.addToHead(node);\n            }\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}