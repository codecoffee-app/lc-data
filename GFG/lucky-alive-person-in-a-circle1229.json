{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704621,
            "title": "Lucky alive person in a circle",
            "titleSlug": "lucky-alive-person-in-a-circle1229",
            "content": "<p><span style=\"font-size:18px\">Given <strong>N</strong> people standing in a circle where <strong>1<sup>st</sup></strong>&nbsp;is having a sword, find the luckiest person in the circle, if, from 1<sup>st</sup>&nbsp;soldier who is having a sword each has to kill the next soldier and handover the sword to next soldier, in turn, the soldier will kill the adjacent soldier and handover the sword to next soldier such that one soldier remains in this war who is not killed by anyone.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\n<strong>Output:</strong>\n3\n<strong>Explanation:</strong>\nIn first go 1 3 5 (remains) \nas 2 and 4 killed by 1 and 3. \nIn second go 3 will remain \nas 5 killed 1 and 3rd killed 5 \nhence, 3 remains alive.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 10\n<strong>Output:</strong>\n5\n<strong>Explanation:</strong>\nIn first 1 3 5 7 9 \nremains&nbsp;as 2 4 6 8 10 \nwere killed by 1 3 5 7 \nand 9. In second 1 5 9 \nare left as 1 kills 3 \nand &nbsp;5 kill the 7th \nsoldier.In third 5th \nsoldiers remain alive as \n9 kills the 1st soldier and \n5 kill the 9th soldier.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>find()</strong>&nbsp;which takes an integer N as input parameter&nbsp;and returns the output as the soldier who was lucky in the game.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(log N)<br />\n<strong>Expected Space Complexity: </strong>O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=N&lt;=10<sup>8</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "N people are standing in a circle, numbered from 1 to N. Person 1 has a sword. Starting with person 1, each person kills the next person in the circle and passes the sword to the person after the one they killed. This continues until only one person remains. Find the number of the last remaining person.",
                "constraints": [
                    "1 <= N <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "3",
                        "explanation": "Initially, the people are arranged as: 1 2 3 4 5.  1 kills 2 and passes the sword to 3. 3 kills 4 and passes the sword to 5. 5 kills 1 and passes the sword to 3. 3 kills 5, and 3 is the last remaining person."
                    },
                    {
                        "input": "10",
                        "output": "5",
                        "explanation": "Initially, the people are arranged as: 1 2 3 4 5 6 7 8 9 10.  The process continues until only person 5 remains."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Form a formula/pattern.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "circular-linked-list",
                "slug": "circular-linked-list"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "circular linked list",
                "slug": "circular-linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    int find(int N)\n    {\n        // Find value of 2 ^ (1 + floor(Log n)) \n        // which is a power of 2 whose value \n        // is just above n. \n        int p = 1; \n        while (p <= N) \n        p *= 2; \n        \n        // Return 2n - 2^(1+floor(Logn)) + 1 \n        return (2 * N) - p + 1; \n    }\n\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    static int find(int N)\n    {\n        // Find value of 2 ^ (1 + floor(Log n)) \n        // which is a power of 2 whose value \n        // is just above n. \n        int p = 1; \n        while (p <= N) \n        p *= 2; \n        \n        // Return 2n - 2^(1+floor(Logn)) + 1 \n        return (2 * N) - p + 1;  \n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def find(self,N):\n        # Find value of 2 ^ (1 + floor(Log n)) \n        # which is a power of 2 whose value \n        # is just above n. \n        p = 1\n        while (p <= N):\n            p *= 2\n        \n        # Return 2n - 2^(1+floor(Logn)) + 1 \n        return (2 * N) - p + 1",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to find the soldier who was lucky in the game.\n    find(N)\n    {\n        // Find value of 2 ^ (1 + floor(Log n))\n        // which is a power of 2 whose value\n        // is just above n.\n        let p = 1;\n        while (p <= N) {\n            p *= 2;\n        }\n        \n        // Return 2n - 2^(1+floor(Logn)) + 1\n        return (2 * N) - p + 1;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int find(int N)\n    {\n        int p = 1;\n        while (p <= N)\n        {\n            p *= 2;\n        }\n\n        return (2 * N) - p + 1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}