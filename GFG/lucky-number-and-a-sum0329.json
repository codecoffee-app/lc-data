{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704421,
            "title": "Lucky number and a sum",
            "titleSlug": "lucky-number-and-a-sum0329",
            "content": "<p><span style=\"font-size:18px\">Given a number N.Find the minimum Lucky number, the sum of whose digits is equal to N.<br />\nNote:-Lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7.&nbsp;</span></p>\n\n<p><br />\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN=29\n<strong>Output:</strong>\n44777\n<strong>Explanation:</strong>\n44777 is the smallest number whose \ndigit-sum(4+4+7+7+7) is equal to 29.</span></pre>\n\n<p><br />\n<strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN=9\n<strong>Output:</strong>\n-1\n<strong>Explanation:</strong>\nThere is no lucky number whose digit-sum\nis equal to 9.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything.Your task is to complete the function <strong>minimumLuckyNumber()</strong> which takes a number N as input parameters and returns the minimum Lucky number(in the form of a string)&nbsp;whose digit-sum is equal to N. If there is no lucky number whose digit-sum is equal to N, then return -1.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(N)<br />\n<strong>Expected Auxillary Space:</strong>O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=N&lt;=10</span><sup><span style=\"font-size:18px\">5</span></sup></p>\n\n<p><sup><span style=\"font-size:18px\">Note:The answer may not fit in 64 bit integer representations.</span></sup></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N, find the smallest lucky number whose digits sum to N. Lucky numbers are positive integers that contain only the digits 4 and 7.",
                "constraints": [
                    "1 <= N <= 100000"
                ],
                "testcases": [
                    {
                        "input": "29",
                        "output": "44777",
                        "explanation": "The smallest lucky number with a digit sum of 29 is 44777 (4 + 4 + 7 + 7 + 7 = 29)."
                    },
                    {
                        "input": "9",
                        "output": "-1",
                        "explanation": "There is no lucky number whose digits sum to 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find out the minimal number of fours such that after taking out the fours the rest of the number is divisible by 7.</span></p>",
            "<p><span style=\"font-size:18px\">There can at most floor(N/4) number of 4s in the number.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Numbers",
                "slug": "numbers"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the minimum lucky number\n    string minimumLuckyNumber(int N) {\n        string ans = \"\";\n        // Iterate from 0 to N divided by 4\n        for (int i = 0; i * 4 <= N; i++) {\n            int rem = N - i * 4;\n            // Check if the remaining number is divisible by 7\n            if (rem % 7 == 0) {\n                // Append '4' i times to the answer\n                for (int j = 0; j < i; j++) ans += '4';\n                // Append '7' rem/7 times to the answer\n                for (int j = 0; j < rem / 7; j++) ans += '7';\n                return ans;\n            }\n        }\n        // Return -1 if no lucky number is found\n        return \"-1\";\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find the minimum lucky number\n    String minimumLuckyNumber(int N) {\n        String ans = \"\"; // Initializing the string result\n        // Looping from 0 to N/4 to check all possible combinations\n        for (int i = 0; i * 4 <= N; i++) {\n            int rem = N - i * 4; // Calculating remainder\n            // Checking if the remainder is divisible by 7\n            if (rem % 7 == 0) {\n                // Appending '4' i times to the answer string\n                for (int j = 0; j < i; j++) ans += '4';\n                // Appending '7' rem/7 times to the answer string\n                for (int j = 0; j < rem / 7; j++) ans += '7';\n                return ans; // Returning the final answer\n            }\n        }\n        return \"-1\"; // Returning -1 if no lucky number is found\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to find the minimum lucky number.\n    def minimumLuckyNumber(self,N):\n        ans=\"\"\n        #iterating over all possible number of 4s in the lucky number.\n        for i in range(N//4+1):\n            rem = N-i*4\n            #checking if the remaining number is divisible by 7.\n            if rem%7==0:\n                #adding the required number of 4s to the answer.\n                for _ in range(i):\n                    ans+='4'\n                #adding the required number of 7s to the answer.\n                for _ in range(rem//7):\n                    ans+='7'\n                return  ans\n        #if no lucky number is found.\n        return \"-1\"",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @returns {String}\n**/\n\nclass Solution {\n    //Function to find the minimum lucky number.\n    minimumLuckyNumber(N) {\n        let ans = \"\";\n        //iterating over all possible number of 4s in the lucky number.\n        for (let i = 0; i <= Math.floor(N/4); i++) {\n            let rem = N - i*4;\n            //checking if the remaining number is divisible by 7.\n            if (rem % 7 == 0) {\n                //adding the required number of 4s to the answer.\n                for (let j = 0; j < i; j++) {\n                    ans += '4';\n                }\n                //adding the required number of 7s to the answer.\n                for (let j = 0; j < rem/7; j++) {\n                    ans += '7';\n                }\n                return ans;\n            }\n        }\n        //if no lucky number is found.\n        return \"-1\";\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}