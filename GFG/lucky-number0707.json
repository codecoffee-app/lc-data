{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703802,
            "title": "Lucky Number",
            "titleSlug": "lucky-number0707",
            "content": "<p style=\"text-align:justify\"><span style=\"font-size:18px\">A n digit number has n*(n+1)/2 sub-numbers.&nbsp; For example, all possible sub-numbers of <strong>975</strong> are <strong>9 7 5 97 75 975</strong>. A number is called Lucky if all sub-numbers have different digit product.&nbsp; Digit product of a number is product of its digits.&nbsp;&nbsp; </span></p>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-size:18px\">For example, the number <strong>23</strong> is Lucky.&nbsp; Sub-numbers of it are <strong>2</strong>,<strong> 3</strong> and <strong>23</strong> and digit products are <strong>2</strong>, <strong>3 </strong>and <strong>6 </strong>respectively (All digit products are different). <strong>975</strong> is also lucky. Print 1 if given Number is Lucky else Print 0.</span></p>\r\n\r\n<p style=\"text-align:justify\">&nbsp;</p>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>N = </strong>324\r\n<strong>Output:</strong>\r\n1\r\n<strong>Explanation:</strong>\r\nAll subsequences form different Digit\r\nProducts. So, Output is 1.</span></pre>\r\n\r\n<p style=\"text-align:justify\"><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n<strong>N = </strong>323\r\n<strong>Output:</strong>\r\n0\r\n<strong>Explanation:</strong>\r\nSubsequences 32, and 23 form same\r\nDigit Product, i.e, 6. So, Output is 0.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>isLuckyOrNot()</strong> which takes an Integer N as input and returns the answer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O((Number of Digits)<sup>2</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(Number of Digits)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>18</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A number is considered 'Lucky' if all its sub-numbers have distinct digit products. A sub-number is a contiguous sequence of digits within the original number. The digit product of a number is the product of its individual digits. Given an integer N, determine if it's a Lucky number.",
                "constraints": [
                    "1 <= N <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "324",
                        "output": "1",
                        "explanation": "The sub-numbers of 324 are 3, 2, 4, 32, 24, and 324. Their respective digit products are 3, 2, 4, 6, 8, and 24. Since all digit products are distinct, 324 is a Lucky number."
                    },
                    {
                        "input": "323",
                        "output": "0",
                        "explanation": "The sub-numbers of 323 are 3, 2, 3, 32, 23, and 323. Their respective digit products are 3, 2, 3, 6, 6, and 18. The digit products 6 appears twice (from sub-numbers 32 and 23), so 323 is not a Lucky number."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Iterate over all substrings of given number, and then check if the number resulting from the multiplication has been stored&nbsp; or not. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "epic-systems"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    int isLuckyOrNot(long long N) {\r\n        \r\n        int b[19],i=0;\r\n        \r\n        while(N!=0)\r\n        {\r\n            b[i++]=N%10;      // storing the digits of N in array b.\r\n            N/=10;\r\n        }\r\n        \r\n        N=i;      // number of digits in N\r\n        \r\n        int tot = (N*(N+1))/2;     // Total number of subsequences.\r\n        \r\n        set<long long> s;\r\n        \r\n        for(int i=0 ; i<N ; i++)\r\n        {\r\n            long long num=1;\r\n            for(int j=i ; j<N ; j++)\r\n            {\r\n                num=num*b[j];\r\n                s.insert(num);     // appending all products in set.\r\n            }\r\n        }\r\n        \r\n        // If set size is equal to total subsequences\r\n        // then all digit products are different\r\n        if(s.size()==tot)\r\n            return 1;\r\n        else\r\n            return 0;\r\n        \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Function to check if the given number is lucky or not.\n    public int isLuckyOrNot(long N)\n    {\n        int[] b = new int[19];\n        int i = 0;\n        \n        while(N!=0)\n        {\n            b[i++] = (int)(N % 10);      // storing the digits of N in array b.\n            N /= 10;\n        }\n        \n        int numDigits = i;      // number of digits in N\n        \n        int tot = (numDigits * (numDigits+1)) / 2;     // Total number of subsequences.\n        \n        HashSet<long> s = new HashSet<long>();\n        \n        for(int j=0 ; j<numDigits ; j++)\n        {\n            long num = 1;\n            for(int k=j ; k<numDigits ; k++)\n            {\n                num *= b[k];\n                s.Add(num);     // appending all products in set.\n            }\n        }\n        \n        // If set size is equal to total subsequences\n        // then all digit products are different\n        if(s.Count == tot)\n            return 1;\n        else\n            return 0;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}