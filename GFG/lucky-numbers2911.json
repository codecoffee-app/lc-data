{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701691,
            "title": "Lucky Numbers",
            "titleSlug": "lucky-numbers2911",
            "content": "<p><span style=\"font-size: 18px;\"><strong>Lucky numbers</strong> are subset of integers. Process of arriving at lucky numbers is:<br />Take the set of integers 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,&hellip;&hellip;<br />First, delete every <strong>second </strong>number, we get following reduced set.<br />1, 3, 5, 7, 9, 11, 13, 15, 17, 19,&hellip;&hellip;&hellip;&hellip;<br />Now, delete every <strong>third</strong> number, we get<br />1, 3, 7, 9, 13, 15, 19,&hellip;.&hellip;.<br />Continue this process indefinitely&hellip;&hellip;<br />Any number that does <strong>NOT</strong> get deleted due to above process is called &ldquo;<strong>lucky</strong>&rdquo;.</span></p>\n<p><span style=\"font-size: 18px;\">You are given a number <strong>N</strong>, you need to tell whether the number is lucky or not. If the number is lucky return 1 otherwise 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 5\n<strong>Output: </strong>0<strong>\nExplanation: </strong>5 is not a lucky number as it gets <br />deleted in the second iteration.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 19\n<strong>Output: </strong>1<strong>\nExplanation: </strong>19 is a lucky number because <br />it does not get deleted throughout the process.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. You only need to complete the function <strong>isLucky()&nbsp;</strong>that takes N&nbsp;as parameter and returns either False&nbsp;if the N&nbsp;is not lucky else True.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= N &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A lucky number is defined by a specific filtering process on the set of positive integers. Initially, we start with the sequence 1, 2, 3, 4, ....  In the first step, every second number is removed. In the next step, every third number of the remaining sequence is removed. This process continues indefinitely. A number is considered 'lucky' if it is never removed during this process.\n\nGiven an integer N, determine if it is a lucky number according to this definition.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "0",
                        "explanation": "5 is not a lucky number because it is removed during the second iteration of the filtering process."
                    },
                    {
                        "input": "19",
                        "output": "1",
                        "explanation": "19 is a lucky number because it survives all iterations of the filtering process without being removed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nbool check(int n,int counter)\n{\n    if(counter<=n) {\n        if(n%counter==0)\n            return false;\n        //calculate next position of input no \n        n = n-n/counter;\n        counter++;\n        //make recursive call with updated counter \n        //and position return check(n, counter);\n        return check(n, counter);\n    }\n    else\n        return true;\n}\nbool isLucky(int n) {\n    return check(n, 2);\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n    bool check(int n,int counter)\n    {\n        if(counter<=n) {\n            if(n%counter==0)\n                return false;\n            //calculate next position of input no \n            n = n-n/counter;\n            counter++;\n            //make recursive call with updated counter \n            //and position return check(n, counter);\n            return check(n, counter);\n        }\n        else\n            return true;\n    }\n    bool isLucky(int n) {\n        return check(n, 2);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    public static boolean check(int n,int counter)\n    {\n        if(counter<=n){\n            if(n%counter==0)\n                return false;\n\t\t    // calculate next position of input number\n\t\t    n=n-n/counter;\n\t\t    counter++;\n\t\t    // make recursive call with updated counter \n\t\t    // and position return check(n, counter);\n\t\t    return check(n, counter);\n        }    \n       \telse\n       \t\treturn true;\n    }\n    \n    \n    public static boolean isLucky(int n)\n    {\n        return check(n,2);\n    }\n    \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def check(self, n,c):\n        if(c<=n):\n            if n%c==0:\n                c=2\n                return False;\n            # calculate next position of input no \n            n = n-n//c\n            c+=1\n            # make recursive call with updated counter and position\n            return self.check(n,c)\n        \n        else:\n            return True\n    def isLucky(self, n): \n        return self.check(n,2)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public bool isLucky(int n)\n    {\n        return check(n, 2);\n    }\n    \n    public bool check(int n, int counter)\n    {\n        if(counter <= n)\n        {\n            if(n % counter == 0)\n                return false;\n            \n            n = n - n / counter;\n            counter++;\n            \n            return check(n, counter);\n        }\n        else\n        {\n            return true;\n        }\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} n\n * @returns {boolean}\n*/\n\nclass Solution {\n    check(n,counter)\n    {\n        // variable next_position is just for readability of \n        // the program we can remove it and use n only  \n       \tif(counter<=n)\n       \t{\n\t\t\tif(n%counter==0)\n\t\t\t\treturn false;\n\t\t\t//calculate next position of input number\n\t\t\t//Math.floor(n) is used to get largest integer smaller than n\n\t\t\tn=n-Math.floor(n/counter);\n\t\t\tcounter++;\n\t\t\t// make recursive call with updated counter and position\n\t\t\treturn this.check(n, counter);\n       \t}      \n   \t\telse\n   \t\t\treturn true;\n        \n    }\n    isLucky(n)\n    {\n        return this.check(n,2);   \n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}