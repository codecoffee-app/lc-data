{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706079,
            "title": "Lucy's Neighbours",
            "titleSlug": "lucys-neighbours--141631",
            "content": "<p><span style=\"font-size: 18px;\">Lucy lives in house number <strong>x</strong>. She has a list of <strong>n</strong> house numbers in the society. Distance between houses can be determined by studying the difference between house numbers. Help her find out <strong>k</strong> closest neighbors. Return the list of house numbers in sorted order.<br /><strong>Note: </strong>If two houses are equidistant and Lucy has to pick only one, the house with the smaller house number is given preference.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5, x = 0, k = 4, arr[] = [-21, 21, 4, -12, 20] </span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>-21 -12 4 20</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>The closest neighbour is house number 4. Followed by -12 and 20. -21 and 21 are both equal distance from X=0. Therefore, Lucy can only pick 1. Based on the given condition she picks -21 as it is the smaller of the two. </span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 6, x = 5, k = 3</span>, <span style=\"font-size: 18px;\">arr[] = [10, 2, 14, 4, 7, 6]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>4 6 7</span> \n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n log n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; k &le; n &le; 10<sup>5</sup>&nbsp;<br />-10<sup>4</sup> &le; x, arr[i] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of house numbers `arr` in a society, find the `k` closest neighbors to Lucy, who lives in house number `x`.  The distance between houses is the absolute difference between their house numbers. If two houses are equidistant from Lucy's house, the house with the smaller number is preferred.",
                "constraints": [
                    "1 <= k <= n <= 10^5",
                    "-10^4 <= x, arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 5, x = 0, k = 4, arr[] = [-21, 21, 4, -12, 20]",
                        "output": "-21 -12 4 20",
                        "explanation": "House number 4 is the closest. Next closest are -12 and 20. -21 and 21 are equidistant from x = 0. Since -21 is smaller, it is selected."
                    },
                    {
                        "input": "n = 6, x = 5, k = 3, arr[] = [10, 2, 14, 4, 7, 6]",
                        "output": "4 6 7",
                        "explanation": "The three closest house numbers to 5 are 4, 6, and 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Make a max heap of k houses&nbsp;with custom Compare function that firstly gives priority to maximum distance but if the two distances are same then priority is given to house with greater house number.&nbsp;</span><br />\n&nbsp;</p>",
            "<p><span style=\"font-size:18px\">1) Make a max heap&nbsp;with first k elements.<br />\n2) For every element from (k+1)<sup>th</sup> to n<sup>th</sup>, do the following.<br />\n&hellip;..a) Find difference of current element with x.<br />\n&hellip;..b) If difference is more than root of heap, ignore current element.<br />\n&hellip;..c) Else insert the current element to the heap after removing the root.<br />\n3) Finally the heap has k closest elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    struct Info{\n    \tint distance; // variable to store the distance of house from x\n    \tint houseno; // variable to store the house number\n    \n    \t//constructor to initialize distance and houseno\n    \tInfo(int x,int y)\n    \t{\n    \t\tdistance = x;\n    \t\thouseno = y;\n    \t}\n    };\n    \n    struct Compare{\n    \tbool operator() (Info const& p1,Info const& p2 )\n    \t{\n    \t\tif (p1.distance == p2.distance)\t// if distances are equal, compare houseno\n    \t\t\treturn p1.houseno < p2.houseno;\n    \t\telse\n    \t\t    return p1.distance < p2.distance; // else compare distance\n    \t}\n    };\n    \n    public:\n    //Function to find k closest elements to x\n    vector<int> Kclosest(vector<int>arr, int n, int x, int k) \n    { \n    \tvector<int> result; // vector to store the closest elements\n    \tpriority_queue <Info, vector<Info>, Compare> pq; // priority queue to store the k closest elements\n    \n    \t//pushing the first k elements into the priority queue\n    \tfor (int i = 0; i < k; i++) \n    \t{\n    \t\tInfo obj(abs(arr[i] - x) , arr[i] ); // creating an object of Info and pushing it into the priority queue\n    \t\tpq.push(obj); \n    \t}\n    \n    \t//iterating from the kth element to the last element\n    \tfor (int i = k; i < n; i++) \n    \t{ \n    \t\tint diff = abs(arr[i] - x); // calculating the distance of current element from x\n    \t\t\n    \t\t//if the distance is greater than the maximum distance in the priority queue, continue to next iteration\n    \t\tif (diff > pq.top().distance) \n    \t\t\tcontinue; \n    \t\t\n    \t\t//if the distance is equal to the maximum distance in the priority queue and the house number is greater, continue to next iteration\n    \t\tif (diff == pq.top().distance && arr[i] > pq.top().houseno) \n    \t\t\tcontinue; \n    \t\t\n    \t\tpq.pop(); // pop the maximum distance element from the priority queue\n    \t\tInfo obj(abs(arr[i] - x) , arr[i] ); // create a new Info object with the current element and its distance from x\n    \t\tpq.push(obj); // push the new object into the priority queue\n    \t} \n    \t\n    \t//pop all the elements from the priority queue and store them in the result vector\n    \twhile (pq.empty() == false) { \n    \t\tresult.push_back(pq.top().houseno);\n    \t\tpq.pop();\n    \t}\n    \t\n    \tsort(result.begin(),result.end()); // sort the result vector in ascending order\n    \treturn result; //return the result vector\n    }      \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\n// Creating a class to store distance and house number\nclass Info{\n\tint distance;\n\tint houseno;\n\n\t// Constructor for the Info class\n\tInfo(int x,int y){\n\t\tdistance = x;\n\t\thouseno = y;\n\t}\n}\n\n// Creating a comparer to compare two Info objects\nclass Compare implements Comparator<Info>{ \n\tpublic int compare (Info p1,Info p2 ){\n\t\t// If distances are equal\n\t\tif (p1.distance == p2.distance)\t{\n\t\t\t// If house numbers of p1 is less than house number of p2\n\t\t\tif (p1.houseno < p2.houseno)\n\t\t\t\treturn +1;\n\t\t\t// If house numbers of p1 is greater than house number of p2\n\t\t\tif (p1.houseno > p2.houseno)\n\t\t\t\treturn -1;\n\t\t\treturn 0;\n\t\t}\n\t\t// If distances are not equal\n\t\telse {\n   \t\t\t// If distance of p1 is less than distance of p2\n\t\t\tif (p1.distance < p2.distance)\n\t\t\t\treturn +1;\n\t\t\t// If distance of p1 is greater than distance of p2\n\t\t\tif (p1.distance > p2.distance)\n\t\t\t\treturn -1;\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n\nclass Solution { \n\tpublic ArrayList<Integer> Kclosest(int arr[], int n, int x, int k){ \n\t\t// Creating an ArrayList to store the result\n\t\tArrayList<Integer> result= new ArrayList<Integer>();\n\t\t// Creating a priority queue with the comparer\n\t\tPriorityQueue<Info> pq = new PriorityQueue<Info>(k, new Compare()); \n\n\t\t// Adding k elements to the priority queue\n\t\tfor (int i = 0; i < k; i++){ \n\t\t\tInfo obj = new Info(Math.abs(arr[i] - x) , arr[i] );\n\t\t\tpq.add(obj); \n\t\t}\n\n\t\t// Iterating through the remaining elements in the array\n\t\tfor (int i = k; i < n; i++){ \n\t\t\tint diff = Math.abs(arr[i] - x); \n\t\t\t// If difference is greater than distance of the top element in priority queue, continue to the next iteration\n\t\t\tif (diff > pq.peek().distance) \n\t\t\t\tcontinue; \n\n\t\t\t// If difference is equal to distance of the top element in priority queue and house number is greater, continue to the next iteration\n\t\t\tif (diff == pq.peek().distance && arr[i] > pq.peek().houseno) \n\t\t\t\tcontinue; \n\n\t\t\t// Remove the top element from priority queue and add the current element\n\t\t\tpq.remove();\n\t\t\tInfo obj = new Info(Math.abs(arr[i] - x) , arr[i] );\n\t\t\tpq.add(obj);\n\t\t} \n\t\t\n\t\t// Adding elements from the priority queue to the result ArrayList\n\t\twhile (pq.size() >0) { \n\t\t\tresult.add(pq.peek().houseno);\n\t\t\tpq.remove();\n\t\t}\n\t\t\n\t\t// Sorting the result ArrayList\n\t\tCollections.sort(result);\n\t\t\n\t\t// Returning the result ArrayList\n\t\treturn result;\n\t}    \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def Kclosest(self, arr, n, x, k):\n        max_heap = [ ( -1*abs(x-arr[i]) , -1*arr[i] ) for i in range(k) ]\n        heapq.heapify(max_heap)\n        # python heapq generates min heap\n        # it can be used as max_heap by multiplying elements by -1\n        \n        for i in range(k,n):\n            dist = -1*max_heap[0][0]\n            hno  = -1*max_heap[0][1]\n            if abs(arr[i]-x)<dist or ( abs(arr[i]-x)==dist and arr[i]<hno ):\n                heapq.heappop(max_heap)\n                heapq.heappush( max_heap, ( -1*abs(x-arr[i]) , -1*arr[i] ) )\n        \n        ret=[ -1*x[1] for x in max_heap]\n        ret.sort()\n        return ret",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}