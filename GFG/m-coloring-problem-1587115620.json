{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701374,
            "title": "M-Coloring Problem",
            "titleSlug": "m-coloring-problem-1587115620",
            "content": "<p><span >You are given an undirected graph consisting of <strong><code>v</code></strong>&nbsp;vertices and a list of&nbsp;<strong>edges</strong>, along with an integer&nbsp;<strong><code>m</code></strong>. Your task is to determine whether it is possible to color the graph using at most&nbsp;<code>m</code>&nbsp;different colors such that no two adjacent vertices share the same color. Return&nbsp;<code>true</code>&nbsp;if the graph can be colored with at most&nbsp;<code>m</code>&nbsp;colors, otherwise return&nbsp;<code>false</code>.<br /></span></p>\n<p><span ><strong>Note:</strong>&nbsp;The graph is indexed with 0-based indexing.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>v = 4, edges[] = [(0,1),(1,2),(2,3),(3,0),(0,2)], m = 3\n<strong>Output: </strong>true<strong>\nExplanation: </strong>It is possible to color the given graph using 3 colors, for example, one of the possible ways vertices can be colored as follows:\nVertex 0: Color 3\nVertex 1: Color 2\nVertex 2: Color 1\nVertex 3: Color 2\n</span></pre>\n<pre><span ><strong>Input: </strong>v = 3, edges[] = [(0,1),(1,2),(0,2)], m = 2\n<strong>Output: </strong>false<br /><strong>Explanation: </strong>It is not possible to color the given graph using only 2 colors because vertices 0, 1, and 2 form a triangle.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(m<sup>V</sup>)</span><br /><span ><strong>Expected Auxiliary&nbsp;</strong><strong>Space:</strong> O(v<sup>2</sup>)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; v &le; 20<br />1 &le; edges.size() &le; (v*(v-1))/2<br />0 &le; edges[i][j] &le; n-1<br />1 &le; m &le; v</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with `v` vertices and a list of `edges`, determine if it's possible to color the graph using at most `m` different colors such that no two adjacent vertices have the same color. The graph is 0-indexed.",
                "constraints": [
                    "1 <= v <= 20",
                    "1 <= edges.size() <= (v*(v-1))/2",
                    "0 <= edges[i][j] <= n-1",
                    "1 <= m <= v"
                ],
                "testcases": [
                    {
                        "input": "v = 4, edges = [(0,1),(1,2),(2,3),(3,0),(0,2)], m = 3",
                        "output": "true",
                        "explanation": "The graph can be colored using 3 colors. For example: Vertex 0: Color 3, Vertex 1: Color 2, Vertex 2: Color 1, Vertex 3: Color 2."
                    },
                    {
                        "input": "v = 3, edges = [(0,1),(1,2),(0,2)], m = 2",
                        "output": "false",
                        "explanation": "The graph cannot be colored using only 2 colors because vertices 0, 1, and 2 form a triangle, requiring 3 colors."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use backtracking to try coloring each vertex with one of the m colors. Check if adjacent vertices have the same color; if not, proceed to the next vertex recursively.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Class to solve the graph coloring problem\nclass Solution {\n  public:\n    // Function to check if it's safe to color vertex v with color c\n    bool isSafe(int v, vector<vector<int>>& graph, int color[], int c, int V) {\n        // Checking if the connected nodes to v have the same color as c\n        for (int i = 0; i < V; i++) {\n            if (graph[v][i] && c == color[i]) {\n                return false; // Not safe if adjacent vertex has the same color\n            }\n        }\n        return true; // Safe to color\n    }\n\n    // Utility function for graph coloring\n    bool graphColoringUtil(vector<vector<int>>& graph, int m, int color[], int v,\n                           int V) {\n        // If all vertices have been assigned color, return true\n        if (v == V) {\n            return true;\n        }\n\n        // Try different colors for vertex v\n        for (int c = 1; c <= m; c++) {\n            // Check if this color can be assigned to vertex v\n            if (isSafe(v, graph, color, c, V)) {\n                color[v] = c; // Assign color to vertex v\n\n                // Recur to assign colors to the next vertex\n                if (graphColoringUtil(graph, m, color, v + 1, V)) {\n                    return true; // Successful coloring\n                }\n\n                // Backtrack if not successful\n                color[v] = 0; // Reset color for backtracking\n            }\n        }\n        return false; // If no color can be assigned\n    }\n\n    // Function to determine if the graph can be colored with at most m colors\n    bool graphColoring(int V, vector<pair<int, int>>& edges, int m) {\n        // Create adjacency list\n        vector<vector<int>> graph(V, vector<int>(V, 0));\n        for (auto edge : edges) {\n            graph[edge.first][edge.second] = 1; // Undirected graph\n            graph[edge.second][edge.first] = 1; // Undirected graph\n        }\n\n        int* color = new int[V];   // Array to store colors assigned to vertices\n        fill(color, color + V, 0); // Initialise all vertices as uncolored (0)\n\n        // Check if colors can be assigned\n        bool result = graphColoringUtil(graph, m, color, 0, V);\n        delete[] color; // Free allocated memory\n        return result;  // Return result of graph coloring\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n// Class to solve the graph coloring problem\nclass Solution {\n    // Function to check if it's safe to color vertex v with color c\n    boolean isSafe(int vertex, int[][] graph, int[] color, int currentColor,\n                   int totalVertices) {\n        // Checking if the connected nodes to vertex have the same color as currentColor\n        for (int i = 0; i < totalVertices; i++) {\n            if (graph[vertex][i] == 1 && currentColor == color[i]) {\n                return false; // Not safe if adjacent vertex has the same color\n            }\n        }\n        return true; // Safe to color\n    }\n\n    // Utility function for graph coloring\n    boolean graphColoringUtil(int[][] graph, int maxColors, int[] color, int vertex,\n                              int totalVertices) {\n        // If all vertices have been assigned color, return true\n        if (vertex == totalVertices) {\n            return true;\n        }\n\n        // Try different colors for vertex\n        for (int currentColor = 1; currentColor <= maxColors; currentColor++) {\n            // Check if this color can be assigned to vertex\n            if (isSafe(vertex, graph, color, currentColor, totalVertices)) {\n                color[vertex] = currentColor; // Assign color to vertex\n\n                // Recur to assign colors to the next vertex\n                if (graphColoringUtil(graph, maxColors, color, vertex + 1,\n                                      totalVertices)) {\n                    return true; // Successful coloring\n                }\n\n                // Backtrack if not successful\n                color[vertex] = 0; // Reset color for backtracking\n            }\n        }\n        return false; // If no color can be assigned\n    }\n\n    // Function to determine if the graph can be colored with at most m colors\n    boolean graphColoring(int v, List<int[]> edges, int m) {\n        // Create adjacency matrix\n        int[][] graph = new int[v][v];\n        for (int[] edge : edges) {\n            graph[edge[0]][edge[1]] = 1; // Undirected graph\n            graph[edge[1]][edge[0]] = 1; // Undirected graph\n        }\n\n        int[] color = new int[v]; // Array to store colors assigned to vertices\n        Arrays.fill(color, 0);    // Initialize all vertices as uncolored (0)\n\n        // Check if colors can be assigned\n        return graphColoringUtil(graph, m, color, 0, v);\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to check if it's safe to color vertex v with color c\n    def isSafe(self, v, graph, color, c, V):\n        # Checking if the connected nodes to v have the same color as c\n        for i in range(V):\n            if graph[v][i] == 1 and color[i] == c:\n                return False  # Not safe if adjacent vertex has the same color\n        return True  # Safe to color\n\n    # Utility function for graph coloring\n    def graphColoringUtil(self, graph, m, color, v, V):\n        # If all vertices have been assigned color, return true\n        if v == V:\n            return True\n\n        # Try different colors for vertex v\n        for c in range(1, m + 1):\n            # Check if this color can be assigned to vertex v\n            if self.isSafe(v, graph, color, c, V):\n                color[v] = c  # Assign color to vertex v\n\n                # Recur to assign colors to the next vertex\n                if self.graphColoringUtil(graph, m, color, v + 1, V):\n                    return True  # Successful coloring\n\n                # Backtrack if not successful\n                color[v] = 0  # Reset color for backtracking\n        return False  # If no color can be assigned\n\n    # Function to determine if the graph can be colored with at most m colors\n    def graphColoring(self, V, edges, m):\n        # Create adjacency list\n        graph = [[0] * V for _ in range(V)]\n        for edge in edges:\n            graph[edge[0]][edge[1]] = 1  # Undirected graph\n            graph[edge[1]][edge[0]] = 1  # Undirected graph\n\n        color = [0] * V  # Array to store colors assigned to vertices\n\n        # Check if colors can be assigned\n        return self.graphColoringUtil(graph, m, color, 0, V)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to check if it's safe to color vertex v with color c\n    isSafe(v, graph, color, c, V) {\n        // Checking if the connected nodes to v have the same color as c\n        for (let i = 0; i < V; i++) {\n            if (graph[v][i] === 1 && color[i] === c) {\n                return false; // Not safe if adjacent vertex has the same color\n            }\n        }\n        return true; // Safe to color\n    }\n\n    // Utility function for graph coloring\n    graphColoringUtil(graph, m, color, v, V) {\n        // If all vertices have been assigned color, return true\n        if (v === V) {\n            return true;\n        }\n\n        // Try different colors for vertex v\n        for (let c = 1; c <= m; c++) {\n            // Check if this color can be assigned to vertex v\n            if (this.isSafe(v, graph, color, c, V)) {\n                color[v] = c; // Assign color to vertex v\n\n                // Recur to assign colors to the next vertex\n                if (this.graphColoringUtil(graph, m, color, v + 1, V)) {\n                    return true; // Successful coloring\n                }\n\n                // Backtrack if not successful\n                color[v] = 0; // Reset color for backtracking\n            }\n        }\n        return false; // If no color can be assigned\n    }\n\n    // Function to determine if the graph can be colored with at most m colors\n    graphColoring(V, edges, m) {\n        // Create adjacency list\n        const graph = Array.from({length : V}, () => Array(V).fill(0));\n        for (const edge of edges) {\n            graph[edge[0]][edge[1]] = 1; // Undirected graph\n            graph[edge[1]][edge[0]] = 1; // Undirected graph\n        }\n\n        const color = Array(V).fill(0); // Array to store colors assigned to vertices\n\n        // Check if colors can be assigned\n        return this.graphColoringUtil(graph, m, color, 0, V);\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}