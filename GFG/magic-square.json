{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878164,
            "title": "Magic Square",
            "titleSlug": "magic-square",
            "content": "<p><span >Given a&nbsp;<strong>n*n&nbsp;</strong>matrix&nbsp;<strong>mat[][]&nbsp;</strong>,check whether the matrix is a&nbsp;<strong>magic square&nbsp;</strong>or not.</span></p>\n<blockquote>\n<p><span >A Magic Square is a n x n matrix of distinct elements from 1 to n<sup>2</sup>&nbsp;where the sum of any row, column, or diagonal is always equal to the same number.</span></p>\n</blockquote>\n<p><strong><span >Examples:</span></strong></p>\n<pre><strong><span >Input: </span></strong><span >mat = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]<br /><strong>Output: </strong>\"Magic Square\"<br /><strong>Explanation: </strong>R1-&gt;2+7+6=15, R2-&gt;9+5+1=15, R3-&gt;4+3+8=15<br />\\t\\t C1-&gt;2+9+4=15, C2-&gt;7+5+3=15, C3-&gt;6+1+8=15<br />\\t\\t D1-&gt;2+5+8=15, D2=6+5+4=15</span></pre>\n<pre><strong><span >Input:</span></strong><span > mat = [[1, 2], [3, 4]]<br /><strong>Output: </strong>\"Not a Magic Square\"<br /><strong>Explanation: </strong>Sum of all rows and columns are not same.</span></pre>\n<pre><strong><span >Input:</span></strong><span > mat = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]<br /><strong>Output: </strong>\"Not a Magic Square\"<br /><strong>Explanation: </strong>All sums are same but all elements from 1 to n<sup>2</sup> are not present.<br /></span></pre>\n<p><strong><span >Constraints:<br /></span></strong><span >1 &nbsp;&lt;= &nbsp;mat.length &nbsp;&lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an n*n matrix `mat[][]`, determine whether it is a magic square.",
                "constraints": [
                    "1 <= mat.length <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[[2, 7, 6], [9, 5, 1], [4, 3, 8]]",
                        "output": "Magic Square",
                        "explanation": "The sum of each row, column, and diagonal is equal to 15. All elements are distinct and within the range of 1 to n^2 (which is 9 in this case)."
                    },
                    {
                        "input": "[[1, 2], [3, 4]]",
                        "output": "Not a Magic Square",
                        "explanation": "The sum of rows and columns are not the same. Row sums are 3 and 7, column sums are 4 and 6. Therefore, it is not a magic square."
                    },
                    {
                        "input": "[[1, 1, 1], [1, 1, 1], [1, 1, 1]]",
                        "output": "Not a Magic Square",
                        "explanation": "Although all row, column and diagonal sums are the same (equal to 3), the elements are not distinct and do not cover the range from 1 to n^2. Only the number 1 is present, violating the condition of having distinct numbers."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    static string magicSquare(vector<vector<int>>& mat) {\n        int n = mat.size();\n        if (n == 0 || mat[0].size() != n) {\n            return \"Not a Magic Square\";\n        }\n\n        int magicSum = 0;\n        for (int j = 0; j < n; j++) {\n            magicSum += mat[0][j];\n        }\n\n        unordered_set<int> elements;\n        int maxElement = n * n;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                int value = mat[i][j];\n                if (value < 1 || value > maxElement || elements.count(value)) {\n                    return \"Not a Magic Square\";\n                }\n                elements.insert(value);\n            }\n        }\n\n        for (int i = 1; i < n; i++) {\n            int rowSum = 0;\n            for (int j = 0; j < n; j++) {\n                rowSum += mat[i][j];\n            }\n            if (rowSum != magicSum) {\n                return \"Not a Magic Square\";\n            }\n        }\n\n        for (int j = 0; j < n; j++) {\n            int colSum = 0;\n            for (int i = 0; i < n; i++) {\n                colSum += mat[i][j];\n            }\n            if (colSum != magicSum) {\n                return \"Not a Magic Square\";\n            }\n        }\n\n        int diag1Sum = 0, diag2Sum = 0;\n        for (int i = 0; i < n; i++) {\n            diag1Sum += mat[i][i];\n            diag2Sum += mat[i][n - i - 1];\n        }\n        if (diag1Sum != magicSum || diag2Sum != magicSum) {\n            return \"Not a Magic Square\";\n        }\n\n        return \"Magic Square\";\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public static String magicSquare(int mat[][]) {\n        int n = mat.length;\n        if (n == 0 || mat[0].length != n) {\n            return \"Not a Magic Square\"; // Ensure it's an n x n matrix\n        }\n\n        // Calculate the magic sum (sum of the first row)\n        int magicSum = 0;\n        for (int j = 0; j < n; j++) {\n            magicSum += mat[0][j];\n        }\n\n        // Check that all elements are distinct and range from 1 to n^2\n        HashSet<Integer> elements = new HashSet<>();\n        int maxElement = n * n;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                int value = mat[i][j];\n                if (value < 1 || value > maxElement || !elements.add(value)) {\n                    return \"Not a Magic Square\"; // Out of range or duplicate element\n                }\n            }\n        }\n\n        // Check sums of all rows\n        for (int i = 1; i < n; i++) {\n            int rowSum = 0;\n            for (int j = 0; j < n; j++) {\n                rowSum += mat[i][j];\n            }\n            if (rowSum != magicSum) {\n                return \"Not a Magic Square\";\n            }\n        }\n\n        // Check sums of all columns\n        for (int j = 0; j < n; j++) {\n            int colSum = 0;\n            for (int i = 0; i < n; i++) {\n                colSum += mat[i][j];\n            }\n            if (colSum != magicSum) {\n                return \"Not a Magic Square\";\n            }\n        }\n\n        // Check sum of the main diagonal\n        int diag1Sum = 0;\n        for (int i = 0; i < n; i++) {\n            diag1Sum += mat[i][i];\n        }\n        if (diag1Sum != magicSum) {\n            return \"Not a Magic Square\";\n        }\n\n        // Check sum of the secondary diagonal\n        int diag2Sum = 0;\n        for (int i = 0; i < n; i++) {\n            diag2Sum += mat[i][n - i - 1];\n        }\n        if (diag2Sum != magicSum) {\n            return \"Not a Magic Square\";\n        }\n\n        // All checks passed; it's a magic square\n        return \"Magic Square\";\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def magicSquare(self, mat):\n        n = len(mat)\n        if n == 0 or len(mat[0]) != n:\n            return \"Not a Magic Square\"\n\n        magicSum = sum(mat[0])\n\n        elements = set()\n        maxElement = n * n\n        for row in mat:\n            for value in row:\n                if value < 1 or value > maxElement or value in elements:\n                    return \"Not a Magic Square\"\n                elements.add(value)\n\n        for i in range(1, n):\n            if sum(mat[i]) != magicSum:\n                return \"Not a Magic Square\"\n\n        for j in range(n):\n            if sum(mat[i][j] for i in range(n)) != magicSum:\n                return \"Not a Magic Square\"\n\n        diag1Sum = sum(mat[i][i] for i in range(n))\n        diag2Sum = sum(mat[i][n - i - 1] for i in range(n))\n        if diag1Sum != magicSum or diag2Sum != magicSum:\n            return \"Not a Magic Square\"\n\n        return \"Magic Square\"\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    magicSquare(mat) {\n        const n = mat.length;\n\n        // Calculate the magic sum (sum of the first row)\n        let magicSum = 0;\n        for (let j = 0; j < n; j++) {\n            magicSum += mat[0][j];\n        }\n\n        // Check that all elements are distinct and range from 1 to n^2\n        const elements = new Set();\n        const maxElement = n * n;\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < n; j++) {\n                const value = mat[i][j];\n                if (value < 1 || value > maxElement || elements.has(value)) {\n                    return \"Not a Magic Square\"; // Out of range or duplicate element\n                }\n                elements.add(value);\n            }\n        }\n\n        // Check sums of all rows\n        for (let i = 1; i < n; i++) {\n            let rowSum = 0;\n            for (let j = 0; j < n; j++) {\n                rowSum += mat[i][j];\n            }\n            if (rowSum !== magicSum) {\n                return \"Not a Magic Square\";\n            }\n        }\n\n        // Check sums of all columns\n        for (let j = 0; j < n; j++) {\n            let colSum = 0;\n            for (let i = 0; i < n; i++) {\n                colSum += mat[i][j];\n            }\n            if (colSum !== magicSum) {\n                return \"Not a Magic Square\";\n            }\n        }\n\n        // Check sum of the main diagonal\n        let diag1Sum = 0;\n        for (let i = 0; i < n; i++) {\n            diag1Sum += mat[i][i];\n        }\n        if (diag1Sum !== magicSum) {\n            return \"Not a Magic Square\";\n        }\n\n        // Check sum of the secondary diagonal\n        let diag2Sum = 0;\n        for (let i = 0; i < n; i++) {\n            diag2Sum += mat[i][n - i - 1];\n        }\n        if (diag2Sum !== magicSum) {\n            return \"Not a Magic Square\";\n        }\n\n        // All checks passed; it's a magic square\n        return \"Magic Square\";\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}