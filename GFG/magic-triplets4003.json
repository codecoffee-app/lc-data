{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 704703,
      "title": "Magic Triplets",
      "titleSlug": "magic-triplets4003",
      "content": "<p><span style=\"font-size: 18px;\">Given an array of size n, a triplet (a[i], a[j], a[k]) is called a Magic Triplet if a[i] &lt; a[j] &lt; a[k] and i &lt; j &lt; k. &nbsp;Count the number of magic triplets in a given array.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [3, 2, 1]\n<strong>Output: </strong>0\n<strong>Explanation: </strong>There is no magic triplet.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [1, 2, 3, 4]\n<strong>Output: </strong>4\n<strong>Explanation: </strong>Fours magic triplets are \n(1, 2, 3), (1, 2, 4), (1, 3, 4) and \n(2, 3, 4).</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>countTriplets()</strong>&nbsp;which takes the array nums[] as input parameter and returns the number&nbsp;of magic triplets in the array.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N<sup>2</sup>)&nbsp;<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= length of array &lt;= 1000<br />1 &lt;= arr[i] &lt;= 100000</span></p>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given an array of size n, a triplet (arr[i], arr[j], arr[k]) is considered a Magic Triplet if arr[i] < arr[j] < arr[k] and i < j < k. Determine the number of Magic Triplets present in the given array.",
        "constraints": [
          "1 <= length of array <= 1000",
          "1 <= arr[i] <= 100000"
        ],
        "testcases": [
          {
            "input": "[3, 2, 1]",
            "output": "0",
            "explanation": "In the array [3, 2, 1], no combination of three elements satisfies both the increasing value and index conditions required for a Magic Triplet."
          },
          {
            "input": "[1, 2, 3, 4]",
            "output": "4",
            "explanation": "The Magic Triplets in the array [1, 2, 3, 4] are: (1, 2, 3), (1, 2, 4), (1, 3, 4), and (2, 3, 4). Therefore, the count of Magic Triplets is 4."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p>Find number which are greater than a[i] in right side of a[i] and the numbers which are smaller than a[i] in left side of a[i].</p>"
    ],
    "relatedTopics": [
      {
        "name": "Arrays",
        "slug": "arrays"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": ["de-shaw"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n    public:\n    //Function to count triplets.\n    int countTriplets(vector<int>nums) {\n        int ans = 0;\n        \n        //iterating over the middle element of the triplets.\n        for(int i = 1 ; i < nums.size()-1 ; i++) {\n            int left = 0, right = 0;\n            \n            //iterating over the elements on the left side of middle element.\n            for(int j = i-1 ; j >= 0 ; j--) {\n                //counting the number of elements smaller than middle element.\n                if(nums[i] > nums[j])left++;\n            }\n\t        \n\t        //iterating over the elements on the right side of middle element.\n            for(int j = i + 1 ; j < nums.size() ; j++) {\n                //counting the number of elements greater than middle element.\n                if(nums[i] < nums[j])right++;\n            }\n            \n            //calculating the number of triplets.\n            ans+=(left*right);\n        }\n        \n        //returning the count of triplets.\n        return ans;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "class Solution{\n    public int countTriplets(int[] nums){\n        int ans=0; // variable to store the final answer\n        \n        int n=nums.length; // length of the input array\n        \n        for(int i=0;i<n;i++){ // loop through each element in the array\n            int left=0; // variable to store the count of elements less than nums[i] on the left side\n            int right=0; // variable to store the count of elements greater than nums[i] on the right side\n            \n            for(int j=0;j<i;j++){ // loop through elements on the left side of nums[i]\n                if(nums[j]<nums[i]){ // if element is less than nums[i]\n                    left++; // increment the count\n                }\n            }\n            \n            for(int j=i+1;j<n;j++){ // loop through elements on the right side of nums[i]\n                if(nums[i]<nums[j]){ // if element is greater than nums[i]\n                    right++; // increment the count\n                }\n            }\n            \n            ans+=left*right; // calculate the total number of triplets that can be formed using nums[i]\n        }\n        \n        return ans; // return the final answer\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "class Solution:\n\n    def countTriplets(self, nums):\n        ans = 0\n\n        # loop through each element in the nums array\n        for i in range(len(nums)):\n            left = 0\n            right = 0\n\n            # check all elements to the left of the current element\n            for j in range(i - 1, -1, -1):\n                if nums[i] > nums[j]:\n                    left += 1\n\n            # check all elements to the right of the current element\n            for j in range(i + 1, len(nums)):\n                if nums[i] < nums[j]:\n                    right += 1\n\n            # increment answer by the product of left and right counts\n            ans += left * right\n\n        return ans\n",
        "lang_text": "py"
      },
      {
        "lang": "C#",
        "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int countTriplets(List<int> nums)\n    {\n        int ans = 0;\n        \n        //iterating over the middle element of the triplets.\n        for(int i = 1 ; i < nums.Count-1 ; i++) {\n            int left = 0, right = 0;\n            \n            //iterating over the elements on the left side of middle element.\n            for(int j = i-1 ; j >= 0 ; j--) {\n                //counting the number of elements smaller than middle element.\n                if(nums[i] > nums[j])left++;\n            }\n\t        \n\t        //iterating over the elements on the right side of middle element.\n            for(int j = i + 1 ; j < nums.Count ; j++) {\n                //counting the number of elements greater than middle element.\n                if(nums[i] < nums[j])right++;\n            }\n            \n            //calculating the number of triplets.\n            ans+=(left*right);\n        }\n        \n        //returning the count of triplets.\n        return ans;\n    }\n}",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "//User function Template for javascript\n/**\n * @param {number[]} nums\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to count triplets.\n    countTriplets(nums)\n    {\n        let ans = 0;\n        \n        // loop through each element in the nums array\n        for (let i = 0; i < nums.length; i++) {\n           let left = 0;\n           let right = 0;\n           \n           // check all elements to the left of the current element\n           for (let j = i-1; j >= 0; j--) {\n               if (nums[i] > nums[j]) {\n                   left += 1;\n               }\n           }\n           \n           // check all elements to the right of the current element\n           for (let j = i+1; j < nums.length; j++) {\n               if (nums[i] < nums[j]) {\n                   right += 1;\n               }\n           }\n           \n           // increment answer by the product of left and right counts\n           ans += left * right;\n        }\n        \n        return ans;\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
