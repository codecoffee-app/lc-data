{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700662,
            "title": "Magical Number",
            "titleSlug": "magical-number-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Your friend loves magic and he has coined a new term - \"<strong>Magical number</strong>\". To perform his magic, he needs that magic number. You are given a <strong>sorted</strong>&nbsp;array&nbsp;<strong>arr&nbsp;</strong>of&nbsp;<strong>distinct</strong>&nbsp;integers. A number arr[<span style=\"font-family: terminal, monaco, monospace;\">i</span>] is a magical number if arr[<span style=\"font-family: terminal, monaco, monospace;\">i</span>] =<span style=\"font-family: terminal, monaco, monospace;\">&nbsp;i</span>&nbsp;(0-based indexing).<br />You have to return the leftmost magical number present in the given array arr, if there is no magical number in the array arr then return -1<br /></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [-2, -1, 2, 4, 6]\n<strong>Output: </strong>2<br /><strong>Explanation:</strong> There is only one magical number present at index <strong>2 </strong>because arr[2] = 2.</span></pre>\n<pre><strong><span >Input: </span></strong><span >arr[] = [-1, 1, 2, 3, 5, 7]<br /><strong>Output: </strong>1<br /><strong>Explanation:</strong> There are three magical numbers 1,2 and 3 present in the array, so leftmost magical number is 1.</span></pre>\n<pre><strong><span >Input: </span></strong><span >arr[] = [-12, 0, 1, 2, 3, 4]<br /><strong>Output: </strong>-1<br /><strong>Explanation:</strong> There is no magical numbers present in the array, so the output is -1. </span></pre>\n<p><strong style=\"font-size: 18px;\">Constraints:<br /></strong><span style=\"font-size: 18px;\">1 &le; arr.size() &le; 10</span><sup>6<br /></sup><span style=\"font-size: 18px;\">-10</span><sup>9</sup><span style=\"font-size: 18px;\">&nbsp;&le; arr[i] &le; 10</span><sup>9</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr` of distinct integers, a magical number is defined as an element `arr[i]` such that `arr[i] == i` (0-based indexing). Find and return the leftmost magical number present in the array. If no such number exists, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-10^9 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[-2, -1, 2, 4, 6]",
                        "output": "2",
                        "explanation": "The number 2 is a magical number because arr[2] = 2. It is the only magical number in the array."
                    },
                    {
                        "input": "[-1, 1, 2, 3, 5, 7]",
                        "output": "1",
                        "explanation": "The numbers 1, 2, and 3 are all magical numbers.  1 is the leftmost, so it is returned."
                    },
                    {
                        "input": "[-12, 0, 1, 2, 3, 4]",
                        "output": "-1",
                        "explanation": "There are no magical numbers in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a binary search approach</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to find the magical number in the given array.\nclass Solution {\n  public:\n    int findMagicalNumber(vector<int>& arr) {\n        int ans = -1;\n        int low = 0;\n        int high = arr.size() - 1;\n\n        // Binary search to find the magical number.\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] == mid) {\n                ans = mid;\n                high = mid - 1;\n            } else if (arr[mid] > mid) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findMagicalNumber(int[] arr) {\n        int ans = -1;\n        int low = 0;\n        int high = arr.length - 1;\n\n        // Binary search to find the magical number.\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (arr[mid] == mid) { // If the element at mid is equal to its index\n                ans = mid;         // Update the answer\n                high = mid - 1; // Continue searching in the left half to find the first\n                                // occurrence\n            } else if (arr[mid] >\n                       mid) {   // If the element at mid is greater than its index\n                high = mid - 1; // Search in the left half\n            } else {            // If the element at mid is less than its index\n                low = mid + 1;  // Search in the right half\n            }\n        }\n\n        return ans; // Return the found magical number or -1 if not found\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def findMagicalNumber(self, arr):\n        ans = -1\n        low = 0\n        high = len(arr) - 1\n\n        # Binary search to find the magical number.\n        while low <= high:\n            mid = low + (high - low) // 2\n            if arr[mid] == mid:  # If the element at mid is equal to its index\n                ans = mid  # Update the answer\n                high = mid - 1  # Continue searching in the left half to find the first occurrence\n            elif arr[\n                    mid] > mid:  # If the element at mid is greater than its index\n                high = mid - 1  # Search in the left half\n            else:  # If the element at mid is less than its index\n                low = mid + 1  # Search in the right half\n\n        return ans  # Return the found magical number or -1 if not found\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMagicalNumber(arr) {\n        let ans = -1;\n        let low = 0;\n        let high = arr.length - 1;\n\n        // Binary search to find the magical number.\n        while (low <= high) {\n            let mid = Math.floor(low + (high - low) / 2);\n            if (arr[mid] === mid) { // If the element at mid is equal to its index\n                ans = mid;          // Update the answer\n                high = mid - 1; // Continue searching in the left half to find the first\n                                // occurrence\n            } else if (arr[mid] >\n                       mid) {   // If the element at mid is greater than its index\n                high = mid - 1; // Search in the left half\n            } else {            // If the element at mid is less than its index\n                low = mid + 1;  // Search in the right half\n            }\n        }\n\n        return ans; // Return the found magical number or -1 if not found\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}