{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701220,
            "title": "Majority Element",
            "titleSlug": "majority-element-1587115620",
            "content": "<p><span >Given an array <strong>arr</strong>. Find the majority element in the array. If no majority exists, return -1.</span></p>\n<p><span ><strong>Note:</strong> A majority element in an array is an element that appears </span><strong >strictly </strong><span >more than</span><strong > arr.size()/2 times</strong><span > in the array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [3, 1, 3, 3, 2]\n<strong>Output: </strong>3<strong>\nExplanation: </strong>Since, 3 is present more than n/2 times, so it is the majority element.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [7]\n<strong>Output: </strong>7<strong>\nExplanation: </strong>Since, 7 is single element and present more than n/2 times, so it is the majority element.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 13]\n<strong>Output: </strong>-1<strong>\nExplanation: </strong>Since, no element is present more than n/2 times, so there is no majority element.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />0 &le; arr[i]&le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr`, find the majority element in the array. A majority element is defined as an element that appears strictly more than `arr.size()/2` times. If no majority element exists, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[3, 1, 3, 3, 2]",
                        "output": "3",
                        "explanation": "The element 3 appears 3 times, which is more than n/2 (5/2 = 2.5), therefore it is the majority element."
                    },
                    {
                        "input": "[7]",
                        "output": "7",
                        "explanation": "The element 7 appears once, which is more than n/2 (1/2 = 0.5), therefore it is the majority element."
                    },
                    {
                        "input": "[2, 13]",
                        "output": "-1",
                        "explanation": "No element appears more than n/2 (2/2 = 1) times, therefore there is no majority element."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the <strong>Boyer-Moore Voting Algorithm</strong> to find a candidate in linear time, then verify if it's the majority element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "de-shaw",
            "google",
            "nagarro",
            "atlassian"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    /* Function to find Majority Element */\n    int majorityElement(vector<int>& arr) {\n        int n = arr.size();\n        int candidate = -1;\n        int count = 0;\n\n        // Find a candidate\n        for (int num : arr) {\n            if (count == 0) {\n                candidate = num;\n                count = 1;\n            } else if (num == candidate) {\n                count++;\n            } else {\n                count--;\n            }\n        }\n\n        // Validate the candidate\n        count = 0;\n        for (int num : arr) {\n            if (num == candidate) {\n                count++;\n            }\n        }\n\n        // If count is greater than n / 2, return the candidate; otherwise, return -1\n        if (count > n / 2) {\n            return candidate;\n        } else {\n            return -1;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Backend complete function template for JAVA\n\nclass Solution {\n\n    static int majorityElement(int arr[]) {\n        int n = arr.length;\n        int candidate = -1;\n        int count = 0;\n\n        // Find a candidate\n        for (int num : arr) {\n            if (count == 0) {\n                candidate = num;\n                count = 1;\n            } else if (num == candidate) {\n                count++;\n            } else {\n                count--;\n            }\n        }\n\n        // Validate the candidate\n        count = 0;\n        for (int num : arr) {\n            if (num == candidate) {\n                count++;\n            }\n        }\n\n        // If count is greater than n / 2, return the candidate; otherwise, return -1\n        if (count > n / 2) {\n            return candidate;\n        } else {\n            return -1;\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def majorityElement(self, arr):\n        n = len(arr)\n        candidate = -1\n        count = 0\n\n        # Find a candidate\n        for num in arr:\n            if count == 0:\n                candidate = num\n                count = 1\n            elif num == candidate:\n                count += 1\n            else:\n                count -= 1\n\n        # Validate the candidate\n        count = 0\n        for num in arr:\n            if num == candidate:\n                count += 1\n\n        # If count is greater than n / 2, return the candidate; otherwise, return -1\n        if count > n // 2:\n            return candidate\n        else:\n            return -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\n\n//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} a\n * @returns {number}\n */\n\nclass Solution {\n    /* Function to find the candidate for Majority */\n    majorityElement(arr) {\n        const n = arr.length;\n        let candidate = -1;\n        let count = 0;\n\n        // Find a candidate\n        for (const num of arr) {\n            if (count === 0) {\n                candidate = num;\n                count = 1;\n            } else if (num === candidate) {\n                count++;\n            } else {\n                count--;\n            }\n        }\n\n        // Validate the candidate\n        count = 0;\n        for (const num of arr) {\n            if (num === candidate) {\n                count++;\n            }\n        }\n\n        // If count is greater than n / 2, return the candidate; otherwise, return -1\n        if (count > n / 2) {\n            return candidate;\n        } else {\n            return -1;\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}