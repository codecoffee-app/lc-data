{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712100,
            "title": "Majority Element II",
            "titleSlug": "majority-vote",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array of integer <strong>arr[]</strong> where each number represents a vote to a candidate. Return the candidates that have votes greater than <strong>one-third</strong> of the total votes, If there's <strong>not</strong> a majority vote, return an empty array.&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note:</span></strong><span style=\"font-size: 18px;\"> The answer should be returned in an increasing format.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [</span><span style=\"font-size: 18px;\">2, 1, 5, 5, 5, 5, 6, 6, 6, 6, 6]\n<strong>Output: </strong>[5, 6]\n<strong>Explanation: </strong>5 and 6 occur more n/3 times.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5]\n<strong>Output: </strong>[]<br /><strong>Explanation: </strong>o candidate occur more than n/3 times.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Constraint:</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />-</span><span style=\"font-size: 18px;\">10</span><sup>9</sup><span style=\"font-size: 18px;\">&nbsp;&lt;= arr[i] &lt;= 10</span><sup>9</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nint* findMajority(int arr[], int n, int* resultSize) {\n    int num1 = 0, num2 = 0, c1 = 0, c2 = 0;\n\n    // Boyer-Moore Voting Algorithm\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == num1)\n            c1++;\n        else if (arr[i] == num2)\n            c2++;\n        else if (c1 == 0) {\n            num1 = arr[i];\n            c1++;\n        } else if (c2 == 0) {\n            num2 = arr[i];\n            c2++;\n        } else {\n            c1--;\n            c2--;\n        }\n    }\n\n    c1 = 0, c2 = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == num1)\n            c1++;\n        else if (arr[i] == num2)\n            c2++;\n    }\n\n    // Allocate memory for the result\n    int* result = (int*)malloc(2 * sizeof(int));\n    *resultSize = 0;\n\n    if (c1 > n / 3)\n        result[(*resultSize)++] = num1;\n    if (c2 > n / 3)\n        result[(*resultSize)++] = num2;\n    if (*resultSize == 2 && result[0] > result[1]) {\n        int temp = result[1];\n        result[1] = result[0];\n        result[0] = temp;\n    }\n    return result;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the majority elements in the array\n    vector<int> findMajority(vector<int>& arr) {\n        int n = arr.size();\n        int num1 = 0, num2 = 0;\n        int c1 = 0, c2 = 0;\n        vector<int> res;\n\n        // Finding the two most frequent numbers using Boyer-Moore algorithm\n        for (auto x : arr) {\n            if (x == num1)\n                c1++;\n            else if (x == num2)\n                c2++;\n            else if (c1 == 0) {\n                num1 = x;\n                c1++;\n            } else if (c2 == 0) {\n                num2 = x;\n                c2++;\n            } else {\n                c1--;\n                c2--;\n            }\n        }\n        c1 = 0, c2 = 0;\n        // Counting the occurrences of num1 and num2\n        for (auto x : arr) {\n            if (x == num1)\n                c1++;\n            else if (x == num2)\n                c2++;\n        }\n        // Checking if num1 and num2 are majority elements\n        if (c1 > n / 3)\n            res.push_back(num1);\n        if (c2 > n / 3)\n            res.push_back(num2);\n\n        sort(res.begin(), res.end());\n        // If no majority elements, add -1 to the result vector\n        // if (res.size() == 0)\n        //     res.push_back(-1);\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the majority elements in the array\n    public List<Integer> findMajority(int[] nums) {\n        int n = nums.length;\n        int num1 = 0, num2 = 0, c1 = 0, c2 = 0;\n\n        // Finding the two most frequent numbers using the Boyer-Moore algorithm\n        for (int x : nums) {\n            if (x == num1) {\n                c1++;\n            } else if (x == num2) {\n                c2++;\n            } else if (c1 == 0) {\n                num1 = x;\n                c1++;\n            } else if (c2 == 0) {\n                num2 = x;\n                c2++;\n            } else {\n                c1--;\n                c2--;\n            }\n        }\n\n        // Reset the counts to check if num1 and num2 are indeed the majority\n        c1 = 0;\n        c2 = 0;\n        for (int x : nums) {\n            if (x == num1) {\n                c1++;\n            } else if (x == num2) {\n                c2++;\n            }\n        }\n\n        // Prepare the result list\n        List<Integer> result = new ArrayList<>();\n        if (c1 > n / 3) result.add(num1);\n        if (c2 > n / 3) result.add(num2);\n\n        // Sort the result and convert it to an array\n        Collections.sort(result);\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find the majority elements in the array\n    def findMajority(self, nums):\n        n = len(nums)\n        num1, num2, c1, c2 = 0, 0, 0, 0\n        res = []\n\n        # Finding the two most frequent numbers using Boyer-Moore algorithm\n        for x in nums:\n            if x == num1:\n                c1 += 1\n            elif x == num2:\n                c2 += 1\n            elif c1 == 0:\n                num1 = x\n                c1 = 1\n            elif c2 == 0:\n                num2 = x\n                c2 = 1\n            else:\n                c1 -= 1\n                c2 -= 1\n\n        c1, c2 = 0, 0\n        # Counting the occurrences of num1 and num2\n        for x in nums:\n            if x == num1:\n                c1 += 1\n            elif x == num2:\n                c2 += 1\n\n        # Checking if num1 and num2 are majority elements\n        if c1 > n / 3:\n            res.append(num1)\n        if c2 > n / 3:\n            res.append(num2)\n        res.sort()\n        # If no majority elements, add -1 to the result list\n        # if len(res) == 0:\n        #     res.append(-1)\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\nclass Solution {\n    public List<int> FindMajority(List<int> nums) {\n        int n = nums.Count;\n        int num1 = 0, num2 = 0, c1 = 0, c2 = 0;\n        var result = new List<int>();\n\n        // Boyer-Moore Voting Algorithm\n        foreach (var num in nums) {\n            if (num == num1)\n                c1++;\n            else if (num == num2)\n                c2++;\n            else if (c1 == 0) {\n                num1 = num;\n                c1++;\n            } else if (c2 == 0) {\n                num2 = num;\n                c2++;\n            } else {\n                c1--;\n                c2--;\n            }\n        }\n\n        c1 = 0;\n        c2 = 0;\n        foreach (var num in nums) {\n            if (num == num1)\n                c1++;\n            else if (num == num2)\n                c2++;\n        }\n\n        if (c1 > n / 3) result.Add(num1);\n        if (c2 > n / 3) result.Add(num2);\n        result.Sort();\n\n        return result;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the majority elements in the array\n    findMajority(nums) {\n        let n = nums.length;\n        let num1 = 0, num2 = 0, c1 = 0, c2 = 0;\n        let res = [];\n\n        // Finding the two most frequent numbers using Boyer-Moore algorithm\n        for (let x of nums) {\n            if (x === num1) {\n                c1++;\n            } else if (x === num2) {\n                c2++;\n            } else if (c1 === 0) {\n                num1 = x;\n                c1 = 1;\n            } else if (c2 === 0) {\n                num2 = x;\n                c2 = 1;\n            } else {\n                c1--;\n                c2--;\n            }\n        }\n\n        c1 = 0;\n        c2 = 0;\n        // Counting the occurrences of num1 and num2\n        for (let x of nums) {\n            if (x === num1) {\n                c1++;\n            } else if (x === num2) {\n                c2++;\n            }\n        }\n\n        // Checking if num1 and num2 are majority elements\n        if (c1 > Math.floor(n / 3)) res.push(num1);\n        if (c2 > Math.floor(n / 3)) res.push(num2);\n        res.sort();\n        // If no majority elements, add -1 to the result list\n        // if (res.length === 0) res.push(-1);\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}