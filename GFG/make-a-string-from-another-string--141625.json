{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703362,
            "title": "Make a string from another string",
            "titleSlug": "make-a-string-from-another-string--141625",
            "content": "<p><span style=\"font-size:18px\">Given two strings <strong>A</strong> and <strong>B</strong>, find if the first string can be made from second by deleting some characters from second and rearranging the&nbsp;remaining characters.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nA = &quot;GeeksforGeeks&quot; \nB = &quot;rteksfoGrdsskGeggehes&quot;\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: Keeping the bold characters and\ndiscarding others: &quot;<strong>r</strong>t<strong>eksfoG</strong>rds<strong>skGe</strong>gg<strong>e</strong>h<strong>e</strong>s&quot;.\n</span></pre>\n\n<p><span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nA = &quot;Hello&quot; \nB = &quot;Geek&quot;\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: We can&#39;t make A from B after\nany deletions.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>isPoss()&nbsp;</strong>which takes the string A and string B&nbsp;as input parameters&nbsp;and returns true&nbsp;if A can be made from B after some deletions and rearranging the remaining characters. Else, returns false.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|A| + |B|).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; |A|, |B| &le; 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, A and B, determine if string A can be formed by deleting characters from string B and then rearranging the remaining characters.",
                "constraints": [
                    "1 <= |A|, |B| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "A = \"GeeksforGeeks\"\nB = \"rteksfoGrdsskGeggehes\"",
                        "output": "1",
                        "explanation": "String A can be formed from B by selecting the characters 'r', 'e', 'k', 's', 'f', 'o', 'G', 's', 's', 'k', 'G', 'e', 'g', 'g', 'e', 'h', 'e' from B, which when rearranged become GeeksforGeeks."
                    },
                    {
                        "input": "A = \"Hello\"\nB = \"Geek\"",
                        "output": "0",
                        "explanation": "It is not possible to form 'Hello' from 'Geek' by deleting characters and rearranging."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If any character has a higher frequency in B than A, then the answer is not possible. Else, it is.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nbool isPoss (string A, string B)\n{\n    unordered_map <char, int> freq;\n    \n    // increasing the frequency by 1 if a character occurs in B\n    for (int i = 0; i < B.length (); ++i)\n    {\n        freq[B[i]]++;\n    }\n    \n    // decreasing the frequency by 1 if a character occurs in A\n    for (int i = 0; i < A.length (); ++i)\n    {\n        freq[A[i]]--;\n    }\n    \n    // if any character has a frequency greater in B and lesser in A,\n    // we return fasle\n    for (auto i : freq)\n    {\n        if (i.second < 0) \n            return 0;\n    }\n    return 1;\n}\n// Contributed By: Pranay Bansal\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public bool isPoss(string A, string B)\n    {\n        Dictionary<char, int> freq = new Dictionary<char, int>();\n        \n        // increasing the frequency by 1 if a character occurs in B\n        for (int i = 0; i < B.Length; ++i)\n        {\n            if (freq.ContainsKey(B[i]))\n                freq[B[i]]++;\n            else\n                freq[B[i]] = 1;\n        }\n        \n        // decreasing the frequency by 1 if a character occurs in A\n        for (int i = 0; i < A.Length; ++i)\n        {\n            if (freq.ContainsKey(A[i]))\n                freq[A[i]]--;\n            else\n                freq[A[i]] = -1;\n        }\n        \n        // if any character has a frequency greater in B and lesser in A,\n        // we return false\n        foreach (var item in freq)\n        {\n            if (item.Value < 0) \n                return false;\n        }\n        \n        return true;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}