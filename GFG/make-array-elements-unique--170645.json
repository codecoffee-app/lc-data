{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713145,
            "title": "Make array elements unique",
            "titleSlug": "make-array-elements-unique--170645",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer array <strong>arr[ ]</strong>, your task is to find the <strong>minimum</strong> number of <strong>increment</strong> operations required to make all the array elements <strong>unique</strong>. i.e. no value in the array should occur more than once. In one operation, a value can be incremented by 1 only.</span></p>\n<p><span >Note: The answer will always fit into a 32-bit integer.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 2, 1, 2, 1, 7]\n<strong>Output: </strong>6\n<strong>Explanation: </strong>After 6 moves, the array could be [3, 4, 1, 2, 5, 7]. It can be shown that it is impossible for the array to have all unique values with 5 or less operations.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 2]\n<strong>Output: </strong>1\n<strong>Explanation: </strong>After one operation [2 -&gt; 3], the array could be [1, 2, 3].</span></pre>\n<pre><strong>Input: </strong>arr[] = [5, 4, 3, 2, 1]\n<strong>Output: </strong>0\n<strong>Explanation: </strong>All elements are unique.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &le; arr.size() &le; 10<sup>6<br /></sup></span><span style=\"font-size: 18px;\">0 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]`, determine the minimum number of increment operations needed to ensure all elements in the array are unique. In each operation, an element can be incremented by 1.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[3, 2, 1, 2, 1, 7]",
                        "output": "6",
                        "explanation": "After 6 increment operations, the array can become [3, 4, 1, 2, 5, 7], where all elements are unique. It's impossible to achieve unique elements with fewer than 6 operations."
                    },
                    {
                        "input": "[1, 2, 2]",
                        "output": "1",
                        "explanation": "One increment operation on the second '2' transforms the array into [1, 2, 3], where all elements are unique."
                    },
                    {
                        "input": "[5, 4, 3, 2, 1]",
                        "output": "0",
                        "explanation": "All elements in the input array are already unique."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to think of an approach by sorting the input array and by allocating unique values from left to right.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "dunzo"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to calculate the minimum number of increments required.\n    int minIncrements(vector<int>& arr) {\n\n        int ans = 0, N = arr.size();\n        sort(arr.begin(), arr.end()); // Sorting the array in ascending order.\n\n        // Looping through the array and checking for any elements that are smaller or\n        // equal to the previous element.\n        for (int i = 1; i < N; i++) {\n            if (arr[i] <= arr[i - 1]) {\n                // Calculating the difference between the previous element and the\n                // current element and adding 1 to it. Then adding this difference to\n                // the answer variable.\n                ans += (arr[i - 1] - arr[i] + 1);\n                // Updating the current element to be one greater than the previous\n                // element.\n                arr[i] = arr[i - 1] + 1;\n            }\n        }\n        // Returning the minimum number of increments required.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to calculate the minimum number of increments\n    public int minIncrements(int[] arr) {\n        // Initialize the answer variable to store the total number of increments\n        int ans = 0, N = arr.length;\n\n        // Sort the array in ascending order\n        Arrays.sort(arr);\n\n        // Iterate through the array starting from the second element\n        for (int i = 1; i < N; i++) {\n            // If the current element is less than or equal to the previous element\n            if (arr[i] <= arr[i - 1]) {\n                // Calculate the difference between the previous element and current\n                // element, and add 1 to it This is the minimum number of increments\n                // needed to make the current element greater than the previous element\n                ans += (arr[i - 1] - arr[i] + 1);\n\n                // Update the current element to be one greater than the previous\n                // element\n                arr[i] = arr[i - 1] + 1;\n            }\n        }\n        // Return the total number of increments needed to make the array sorted in\n        // non-decreasing order\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to find the minimum number of increments required.\n    def minIncrements(self, arr):\n\n        ans = 0\n        N = len(arr)\n        #sorting the array.\n        arr.sort()\n\n        #iterating over the array.\n        for i in range(1, N):\n\n            #if the current element is less than or equal to the previous element.\n            if (arr[i] <= arr[i - 1]):\n\n                #calculating the number of increments required and updating the answer.\n                ans += (arr[i - 1] - arr[i] + 1)\n\n                #increasing the value of the current element to maintain increasing order.\n                arr[i] = arr[i - 1] + 1\n\n        #returning the minimum number of increments required.\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find minimum number of increments/decrements required.\n    minIncrements(arr) {\n        let ans = 0, N = arr.length;\n\n        // sorting the array numerically.\n        arr.sort((a, b) => a - b);\n\n        // iterating over the array.\n        for (let i = 1; i < N; i++) {\n            // if the current element is less than or equal to the previous element.\n            if (arr[i] <= arr[i - 1]) {\n                // calculating the number of increments required and updating the\n                // answer.\n                ans += (arr[i - 1] - arr[i] + 1);\n                // increasing the value of the current element to maintain increasing\n                // order.\n                arr[i] = arr[i - 1] + 1;\n            }\n        }\n\n        // returning the minimum number of increments required.\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}