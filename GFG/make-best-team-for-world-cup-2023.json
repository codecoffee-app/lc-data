{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 717584,
            "title": "Make best team for World Cup 2023",
            "titleSlug": "make-best-team-for-world-cup-2023",
            "content": "<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 12pt;\">ICC Cricket World Cup 2023 is going on and you need to make your own team. There are a total of&nbsp;<strong>n </strong>players available. You are also given the performance average of these&nbsp;<strong>n</strong>&nbsp;players in the form of an array <strong>arr[ ]</strong>. These average values are non-negative integers.</span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 12pt;\">These&nbsp;<strong>n</strong>&nbsp;players are standing in a queue. You need to pick some players from the given <strong>n </strong>players to form your own team. The rules for selecting players are as follows :</span></p>\n<ul>\n<li><span style=\"font-family: arial, helvetica, sans-serif; font-size: 12pt;\">At every step you select <strong>at most one player</strong> from the remaining players and who is not selected in previous rounds. (Remember, selecting a player does not remove him from the queue).</span></li>\n<li><span style=\"font-family: arial, helvetica, sans-serif; font-size: 12pt;\">After every step, the <strong>first </strong>and <strong>last</strong> player in the remaining queue are removed. So, after the <strong>ith step</strong> (where i starts from1), ith player and (n - i+1) th player are removed from the queue.</span></li>\n<li><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\">We keep repeating this process until the queue becomes empty.</span></li>\n</ul>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 12pt;\">Your task is to select the players for your team in such a way that the sum of the average players of your team is the <strong>maximum</strong> possible.</span></p>\n<p><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><span style=\"font-family: arial, helvetica, sans-serif;\"><strong>Input: </strong>arr[] =&nbsp; [1, 5, 2, 4, 3]<br /><strong>Output: </strong>11<br /><strong>Explanation:&nbsp;</strong></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">In the first move, select the player with average</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><code>4</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">(index 4), then remove the first and last players (</span><code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">and</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><code>3</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">). The array becomes</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><code>[5, 2]</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.&nbsp;</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">In the second move, select the player with average</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><code>5</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">(index 1), then remove the first and last players (</span><code>5</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">and</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><code>2</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">). The array becomes</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><code>[]</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.&nbsp;</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">The selected players are</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><code>4</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">,</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><code>5</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">, and</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><code>2</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">. Their total sum is</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;</span><code>4 + 5 + 2 = 11</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></pre>\n<pre style=\"--darkreader-inline-bgcolor: #222426; --darkreader-inline-bgimage: initial; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-top: #3e4446; background: #eeeeee; border: 1px solid #cccccc; padding-top: 5px; padding-right: 10px; padding-bottom: 5px;\"><span style=\"font-family: arial, helvetica, sans-serif; font-size: 12pt;\"><strong>Input: </strong>arr[] =&nbsp; [1, 5, 5, 1]</span><br style=\"font-size: 18px;\" /><span style=\"font-family: arial, helvetica, sans-serif; font-size: 12pt;\"><strong>Output:&nbsp;</strong>10<br /></span></pre>\n<p><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Expected Time Complexity:&nbsp;&nbsp;</strong>O(nlog(n))<br /><strong>Expected Space Complexity:&nbsp;&nbsp;</strong>O(n)</span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 12pt;\"><strong>Constraints:</strong><br />1 &le; arr.size &le;&nbsp; 10<sup>5&nbsp;</sup><br />0 &le;&nbsp;arr[i]<sub>&nbsp;&nbsp;</sub>&le; 10<sup>9</sup>&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "The ICC Cricket World Cup 2023 is underway, and you are tasked with forming your own team. You have a pool of 'n' players to choose from. Each player has a performance average, represented by the array 'arr[]', containing non-negative integers. The players are arranged in a queue.\n\nThe selection process follows these rules:\n\n*   In each step, you can select at most one player from the remaining queue who hasn't been selected in previous steps.\n*   After each selection, the first and last players in the queue are removed. Specifically, in the 'ith' step, the 'ith' player and the '(n - i + 1)th' player are removed.\n*   The process continues until the queue is empty.\n\nYour goal is to maximize the sum of the average performances of the players you select for your team.",
                "constraints": [
                    "1 <= arr.size <= 10^5",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1, 5, 2, 4, 3]",
                        "output": "11",
                        "explanation": "In the first move, select the player with average 4 (index 3), then remove the first (1) and last (3) players. The array becomes [5, 2]. In the second move, select the player with average 5 (index 0), then remove the first (5) and last (2) players. The selected players are 4 and 5. Their total sum is 4 + 5 = 9. The output will be 9 as selecting 2 is not optimal"
                    },
                    {
                        "input": "[1, 5, 5, 1]",
                        "output": "10",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Pick the largest element in each step and calculate the rest.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the maximum sum of selected players' averages\n    long long maximumSum(vector<long> arr) {\n        int N = arr.size(); // Get the size of the array\n        int i, j;\n        long long ans = 0; // Variable to store the result (sum of selected averages)\n\n        // If the number of players is odd, select the middle player initially\n        if ((N % 2) == 1) {\n            ans = arr[N / 2]; // Middle element of the array is added to the sum\n        }\n\n        // Initialize pointers for the selection process\n        if ((N % 2) == 0) {\n            i = N / 2 - 1; // Left pointer for even-sized array\n            j = N / 2;     // Right pointer for even-sized array\n        } else {\n            i = N / 2 - 1; // Left pointer for odd-sized array\n            j = N / 2 + 1; // Right pointer for odd-sized array\n        }\n\n        priority_queue<int> q; // Max-heap to store selected players' averages\n\n        // Process elements from the queue in pairs from both ends\n        for (; i >= 0; i--, j++) {\n            q.push(arr[i]); // Push the left element into the max-heap\n            q.push(arr[j]); // Push the right element into the max-heap\n\n            ans = ans + q.top(); // Add the maximum element to the sum\n            q.pop();             // Remove the maximum element from the max-heap\n        }\n\n        return ans; // Return the total sum of selected players' averages\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    public static long maximumSum(int[] arr) {\n        int N = arr.length;\n        long ans = 0;\n\n        // If the number of players is odd, select the middle player initially\n        if (N % 2 == 1) {\n            ans = arr[N / 2]; // Add the middle element to the result\n        }\n\n        // Initialize pointers for the selection process\n        int i, j;\n        if (N % 2 == 0) {\n            i = N / 2 - 1; // Left pointer for even-sized array\n            j = N / 2;     // Right pointer for even-sized array\n        } else {\n            i = N / 2 - 1; // Left pointer for odd-sized array\n            j = N / 2 + 1; // Right pointer for odd-sized array\n        }\n\n        // Max-heap to store the selected players' averages\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);\n\n        // Process elements from the queue in pairs from both ends\n        while (i >= 0) {\n            // Add both the left and right elements to the max-heap\n            maxHeap.add(arr[i]);\n            maxHeap.add(arr[j]);\n\n            // Select the maximum element from the heap and add it to the sum\n            ans += maxHeap.poll(); // Poll removes and returns the maximum element from\n                                   // the heap\n\n            // Move pointers inward\n            i--;\n            j++;\n        }\n\n        return ans; // Return the total sum of selected players' averages\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from typing import List\nimport heapq\n\n\nclass Solution:\n\n    def maximumSum(self, arr: List[int]) -> int:\n        N = len(arr)\n        ans = 0\n\n        # If the number of players is odd, select the middle player initially\n        if N % 2 == 1:\n            ans = arr[N // 2]  # Add the middle element to the result\n\n        # Initialize pointers for the selection process\n        if N % 2 == 0:\n            i = N // 2 - 1  # Left pointer for even-sized array\n            j = N // 2  # Right pointer for even-sized array\n        else:\n            i = N // 2 - 1  # Left pointer for odd-sized array\n            j = N // 2 + 1  # Right pointer for odd-sized array\n\n        # Max-heap to store the selected players' averages\n        max_heap = []\n\n        # Process elements from the queue in pairs from both ends\n        while i >= 0:\n            # Add both the left and right elements to the max-heap (use -ve values to simulate max-heap)\n            heapq.heappush(max_heap, -arr[i])\n            heapq.heappush(max_heap, -arr[j])\n\n            # Select the maximum element from the heap and add it to the sum (revert to positive)\n            ans += -heapq.heappop(max_heap)\n\n            # Move pointers inward\n            i -= 1\n            j += 1\n\n        return ans  # Return the total sum of selected players' averages\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to calculate the maximum sum of selected players' averages\n    maximumSum(A) {\n        let N = A.length; // Get the size of the array\n        let ans = 0;      // Variable to store the result (sum of selected averages)\n\n        // If the number of players is odd, select the middle player initially\n        if (N % 2 === 1) {\n            ans =\n                A[Math.floor(N / 2)]; // Middle element of the array is added to the sum\n        }\n\n        let i, j;\n        // Initialize pointers for the selection process\n        if (N % 2 === 0) {\n            i = N / 2 - 1; // Left pointer for even-sized array\n            j = N / 2;     // Right pointer for even-sized array\n        } else {\n            i = Math.floor(N / 2) - 1; // Left pointer for odd-sized array\n            j = Math.floor(N / 2) + 1; // Right pointer for odd-sized array\n        }\n\n        const maxArr = []; // Array to store the maximum elements in sorted order\n\n        // Process elements from the queue in pairs from both ends\n        for (; i >= 0; i--, j++) {\n            this.insertSorted(maxArr,\n                              A[i]); // Insert left element into the sorted array\n            this.insertSorted(maxArr,\n                              A[j]); // Insert right element into the sorted array\n\n            ans += maxArr.pop(); // Extract the largest element from the sorted array\n        }\n\n        return ans; // Return the total sum of selected players' averages\n    }\n\n    // Helper function to insert an element into a sorted array in the correct position\n    insertSorted(arr, element) {\n        let index = 0;\n        // Find the correct position to insert the element\n        while (index < arr.length && arr[index] < element) {\n            index++;\n        }\n        arr.splice(index, 0, element); // Insert the element at the correct position\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}