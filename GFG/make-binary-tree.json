{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700289,
            "title": "Linked List to Binary Tree",
            "titleSlug": "make-binary-tree",
            "content": "<p><span >Given a Linked List Representation of Complete Binary Tree. Your task is to construct the Binary tree from the given LinkedList and return the root of the tree.<br />The result will be judged by printing the level order traversal of the Binary tree. </span></p>\n<p><span ><strong>Note:&nbsp;</strong>The complete binary tree is represented as a linked list in a way where if the root node is stored at position i, its left, and right children are stored at position&nbsp;<strong>2*i+1</strong>, and&nbsp;<strong>2*i+2</strong> respectively. H is the height of the tree and this space is used implicitly for the recursion stack.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>linkedList: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5\n<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700289/Web/Other/blobid0_1725432465.png\" width=\"365\" height=\"73\" /> <br /><strong>Output: </strong>root[] = [1, 2, 3, 4, 5]<strong>\nExplanation: </strong>The tree would look like <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700289/Web/Other/blobid5_1725432604.png\" width=\"395\" height=\"207\" /> <br />Now, the level order traversal of the above tree is 1 2 3 4 5.\n</span></pre>\n<pre><span ><strong>Input: </strong>linkedList: 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700289/Web/Other/blobid1_1725432484.png\" width=\"350\" height=\"70\" /><br /><strong>Output: </strong>root[] = [5, 4, 3, 2, 1]<strong>\nExplanation: </strong>The tree would look like\n<img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700289/Web/Other/blobid4_1725432586.png\" width=\"397\" height=\"208\" /> <br />Now, the level order traversal of the above tree is 5 4 3 2 1.</span></pre>\n<pre><span ><strong>Input: </strong>linkedList: 10 -&gt; 20<br /><strong>Output: </strong>root[] = [10, 20]<strong>\nExplanation: </strong>The Binary Tree formed is:</span><br /><span >     10\n    /\n   20\nThe level order traversal of this tree is <code>[10, 20]</code>.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= numbers of nodes &lt;= 10<sup>6</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a linked list representation of a complete binary tree, construct the binary tree from the given linked list and return the root of the tree. The tree structure follows the complete binary tree property, where if a node is at index i, its left child is at 2*i+1 and its right child is at 2*i+2.",
                "constraints": [
                    "1 <= Number of nodes <= 10^6",
                    "1 <= Node data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "linkedList: 1 -> 2 -> 3 -> 4 -> 5",
                        "output": "root[] = [1, 2, 3, 4, 5]",
                        "explanation": "The level order traversal of the constructed tree is [1, 2, 3, 4, 5]."
                    },
                    {
                        "input": "linkedList: 5 -> 4 -> 3 -> 2 -> 1",
                        "output": "root[] = [5, 4, 3, 2, 1]",
                        "explanation": "The level order traversal of the constructed tree is [5, 4, 3, 2, 1]."
                    },
                    {
                        "input": "linkedList: 10 -> 20",
                        "output": "root[] = [10, 20]",
                        "explanation": "The binary tree formed has 10 as the root and 20 as its left child. The level order traversal is [10, 20]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\"> It traverses the linked list, treating every two consecutive nodes as left and right children of a parent node, and constructs the binary tree accordingly.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Queue",
                "slug": "queue"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Define the Solution class and convert method\nclass Solution {\n  public:\n    TreeNode* linkedListToBinaryTree(Node* head) {\n        if (!head)\n            return NULL;\n\n        // Create the root of the tree\n        TreeNode* root = new TreeNode(head->data);\n        queue<TreeNode*> q;\n        q.push(root);\n        head = head->next;\n\n        while (head) {\n            TreeNode* parent = q.front();\n            q.pop();\n\n            // Left child\n            TreeNode* leftChild = new TreeNode(head->data);\n            parent->left = leftChild;\n            q.push(leftChild);\n            head = head->next;\n            if (!head)\n                break;\n\n            // Right child\n            TreeNode* rightChild = new TreeNode(head->data);\n            parent->right = rightChild;\n            q.push(rightChild);\n            head = head->next;\n        }\n\n        return root;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public TreeNode linkedListToBinaryTree(Node head) {\n        if (head == null) return null;\n\n        TreeNode root = new TreeNode(head.data);\n        Queue<TreeNode> q = new LinkedList<>();\n        q.add(root);\n        head = head.next;\n\n        while (head != null) {\n            TreeNode parent = q.poll();\n\n            // Left child\n            TreeNode leftChild = new TreeNode(head.data);\n            parent.left = leftChild;\n            q.add(leftChild);\n            head = head.next;\n            if (head == null) break;\n\n            // Right child\n            TreeNode rightChild = new TreeNode(head.data);\n            parent.right = rightChild;\n            q.add(rightChild);\n            head = head.next;\n        }\n\n        return root;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# Function to convert linked list to binary tree\nclass Solution:\n\n    def linkedListToBinaryTree(self, head):\n        # Queue to store the parent nodes\n        q = []\n\n        # Base case: if linked list is empty\n        if head is None:\n            return None\n\n        # The first node is always the root node\n        root = Tree(head.data)\n        q.append(root)\n\n        head = head.next  # Move to the next node in the linked list\n\n        # Process the linked list and build the binary tree\n        while head:\n            parent = q.pop(0)  # Pop the front node from the queue\n\n            # Assign the left child if available\n            leftChild = Tree(head.data)\n            parent.left = leftChild\n            q.append(leftChild)\n            head = head.next  # Move to the next node in the linked list\n\n            # Assign the right child if available\n            if head:\n                rightChild = Tree(head.data)\n                parent.right = rightChild\n                q.append(rightChild)\n                head = head.next  # Move to the next node in the linked list\n\n        return root\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    linkedListToBinaryTree(head) {\n        if (!head) return null;\n\n        // Create the root of the tree\n        let root = new TreeNode(head.data);\n        let queue = [];\n        queue.push(root);\n        head = head.next;\n\n        while (head) {\n            let parent = queue.shift();\n\n            // Left child\n            let leftChild = new TreeNode(head.data);\n            parent.left = leftChild;\n            queue.push(leftChild);\n            head = head.next;\n            if (!head) break;\n\n            // Right child\n            let rightChild = new TreeNode(head.data);\n            parent.right = rightChild;\n            queue.push(rightChild);\n            head = head.next;\n        }\n\n        return root;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}