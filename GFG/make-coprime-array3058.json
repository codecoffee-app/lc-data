{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702924,
            "title": "Make Co-prime Array",
            "titleSlug": "make-coprime-array3058",
            "content": "<p><span >Given an array of elements, find the minimum number of insertions to convert the given array into a co-prime array adjacent pair-wise.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 7, 28]\n<strong>Output: </strong>1<strong>\nExplanation: </strong>Here, 1st pair = {2, 7} are co-primes( gcd(2, 7) = 1). 2nd pair = {7, 28} are not co-primes, insert 9 between them. gcd(7, 9) = 1 and gcd(9, 28) = 1.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [5, 10, 20]\n<strong>Output : </strong>2<strong>\nExplanation: </strong>Here, there is no pair which are co-primes. Insert 7 between (5, 10) and 1 between (10, 20).</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />1&lt;= arr.size() &lt;=10<sup>6</sup><br />1&lt;= arr[i] &lt;=10</span><sup>6</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, determine the minimum number of insertions required to make all adjacent pairs co-prime. Two numbers are considered co-prime if their greatest common divisor (GCD) is 1.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2, 7, 28]",
                        "output": "1",
                        "explanation": "The pair (2, 7) is co-prime (GCD(2, 7) = 1). The pair (7, 28) is not co-prime. Inserting 9 between 7 and 28 makes them co-prime: GCD(7, 9) = 1 and GCD(9, 28) = 1."
                    },
                    {
                        "input": "[5, 10, 20]",
                        "output": "2",
                        "explanation": "No adjacent pairs are co-prime initially. Inserting 7 between 5 and 10, and 1 between 10 and 20 will make all adjacent pairs co-prime."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Observe that to make a pair to become co-primes we have to insert a number which makes the newly formed pairs co-primes. So, we have to check every adjacent pair for their co-primality and insert a number if required. Now, what is the number that should be inserted? Let us take two numbers a and b. If any of a or b is 1, then GCD(a, b) = 1. So, we can insert ONE(1) at every pair. For efficiency, we use <a href=\"https://www.geeksforgeeks.org/eulers-totient-function/\" target=\"_blank\" rel=\"noopener\">euler&rsquo;s gcd function&nbsp;</a>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to count non-coprime adjacent pairs\n    int countCoPrime(const vector<int>& arr) {\n        // Counting adjacent pairs that are not co-prime.\n        int count = 0;\n        int n = arr.size();\n        for (int i = 1; i < n; i++) {\n            // Checking if adjacent elements are co-prime\n            if (__gcd(arr[i], arr[i - 1]) != 1) {\n                count++;\n            }\n        }\n        return count; // Number of non-coprime adjacent pairs\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Solution class for counting non-coprime adjacent pairs\nclass Solution {\n    public int countCoPrime(int[] arr) {\n        int count = 0;\n        for (int i = 1; i < arr.length; i++) {\n            if (gcd(arr[i], arr[i - 1]) != 1) {\n                count++;\n            }\n        }\n        return count; // Number of non-coprime adjacent pairs\n    }\n\n    // Helper method to calculate the greatest common divisor (GCD)\n    private int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "import math\n\n\nclass Solution:\n    #Function to count the number of co-prime pairs in the array.\n    def countCoPrime(self, arr):\n        count = 0\n        #Iterating over the array to check co-prime pairs.\n        for i in range(1, len(arr)):\n            #Checking if the gcd of current element and previous element is 1.\n            if math.gcd(arr[i], arr[i - 1]) != 1:\n                count += 1\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n//  Solution class to count non-coprime adjacent pairs\nclass Solution {\n    countCoPrime(arr) {\n        let count = 0;\n        for (let i = 1; i < arr.length; i++) {\n            if (this.gcd(arr[i], arr[i - 1]) !== 1) {\n                count++;\n            }\n        }\n        return count; // Number of non-coprime adjacent pairs\n    }\n\n    // Helper method to calculate the greatest common divisor (GCD)\n    gcd(a, b) {\n        while (b !== 0) {\n            let temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}