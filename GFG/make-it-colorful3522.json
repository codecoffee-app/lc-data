{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705568,
            "title": "Make it Colorful",
            "titleSlug": "make-it-colorful3522",
            "content": "<p><span style=\"font-size: 18px;\">In a party, there are 4 dress codes i.e. one can either wear Red(R) or Blue(B) or Green(G) or Yellow(Y). Photographer needs the most colorful picture possible, so he arranges people in a specific order like RGBYRGBY, RYBGRY, RYBGR, RGBYRGB but not in&nbsp;order like GGBRGBR, BGYBGY, GBGGBYR. Using the given information find out&nbsp;the number of people of a particular color required in the order (if there is a place for a particular color) to have the colorful picture.&nbsp;Given the order <strong>s</strong> you need to find out the required colour of every type. String lower than size 4&nbsp;always contains the pattern. (Here '!' means empty.)</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = YRGBYRGB\n<strong>Output:</strong> R0G0B0Y0\n<strong>Explanation:</strong> No colour is required as there \nis no empty space in the string.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = !!!!RYGB\n<strong>Output:</strong> R1G1B1Y1\n<strong>Explanation:</strong> To maintain the order the sequence \nwill be 'RYGBRYGB'.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>extraCount()</strong> which takes string s and returns a list containing the number of required R, G, B and Y respectively.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(|s|)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |s| &le; 1000&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "In a party, people can wear Red(R), Blue(B), Green(G), or Yellow(Y) attire. A photographer aims to capture the most vibrant picture and arranges people in a pattern (e.g., RGBYRGBY, RYBGRY, RYBGR, RGBYRGB). Invalid arrangements are those not following a cyclical pattern of these four colors (e.g., GGBRGBR, BGYBGY, GBGGBYR). Given an arrangement `s`, determine how many of each color are needed to complete the cyclical pattern. If the string length is less than 4, it is considered to always contain the correct pattern. '!' represents an empty space.",
                "constraints": [
                    "1 <= |s| <= 1000"
                ],
                "testcases": [
                    {
                        "input": "YRGBYRGB",
                        "output": "R0G0B0Y0",
                        "explanation": "No additional colors are needed, as the string already follows a valid pattern and contains all colors."
                    },
                    {
                        "input": "!!!!RYGB",
                        "output": "R1G1B1Y1",
                        "explanation": "To complete the 'RYGB' pattern, one of each color (R, Y, G, B) is required to fill the empty spaces."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find out the pattern first. Then finding the missing ones is an easy task.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "pattern-printing",
                "slug": "pattern-printing"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to count the number of extra occurrences of each color\n    vector<int> extraCount(string s){\n        int a = 0, b = 0, c = 0, d = 0, i, j, flag = 0, sum = 0;\n        vector<int> v;\n        // Iterating through the string backwards\n        for(int i = s.size()-1;i >= 0;i--){\n            // Checking if there are enough characters left to compare\n            if(i-4>=0){\n                // Checking if the current character is the same as the character four positions ahead\n                if(s[i] == s[i-4])\n                    continue;\n                // Checking if the current character or the character four positions ahead is 'R'\n                if(s[i] == 'R' or s[i-4] == 'R'){\n                    s[i] = 'R';\n                    s[i-4] = 'R';\n                    a++;\n                }\n                // Checking if the current character or the character four positions ahead is 'B'\n                else if(s[i] == 'B' or s[i-4] == 'B'){\n                    s[i] = 'B';\n                    s[i-4] = 'B';\n                    b++;\n                }\n                // Checking if the current character or the character four positions ahead is 'Y'\n                else if(s[i] == 'Y' or s[i-4] == 'Y'){\n                    s[i] = 'Y';\n                    s[i-4] = 'Y';\n                    c++;\n                }\n                // Checking if the current character or the character four positions ahead is 'G'\n                else if(s[i] == 'G' or s[i-4] == 'G'){\n                    s[i] = 'G';\n                    s[i-4] = 'G';\n                    d++;\n                }\n            }\n        }\n        // Store the counts of extra occurrences in the vector\n        v.push_back(a);\n        v.push_back(b);\n        v.push_back(c);\n        v.push_back(d);\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}