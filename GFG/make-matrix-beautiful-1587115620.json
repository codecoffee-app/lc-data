{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701256,
            "title": "Make Matrix Beautiful",
            "titleSlug": "make-matrix-beautiful-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">A beautiful matrix is a matrix in which the sum of elements in each row and column is equal. Given a square matrix&nbsp;<strong>mat[][]</strong>. Find the&nbsp;minimum number of operation(s) that are required to make the matrix beautiful.&nbsp;In one operation you can&nbsp;<strong>increment</strong>&nbsp;the&nbsp;value of any one&nbsp;<strong>cell by 1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: mat[][] = [[1, 2], [3, 4]]\n<strong>Output</strong>: 4\n<strong>Explanation</strong>: Increment value of cell(0, 0) by 3 and increment value of cell(0, 1) by 1. Hence total 4 operation are required. Such that all rows and columns have sum of 7.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: mat[][] = [[1, 2, 3], [4, 2, 3], [3, 2, 1]]\n<strong>Output</strong>: 6\n<strong>Explanation</strong>: Increment value of cell(0, 0) by 1, increment value of cell(0, 1) by 2, </span><span >increment value of cell(2, 1) by 1, increment value of cell(2, 2) by 2. Such that all rows and columns have sum of 9.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: mat[][] = [[0, 2], [3, 4]]\n<strong>Output</strong>: 5\n<strong>Explanation</strong>: Increment value of cell(0, 0) by 4, increment value of cell(0, 1) by 1. Hence total 5 operation are required.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= mat.size(), mat[0].size() &lt;= 500<br />1 &lt;= mat[i][j] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A beautiful matrix is a square matrix in which the sum of elements in each row and each column is equal. Given a square matrix `mat[][]`, determine the minimum number of operations required to transform it into a beautiful matrix. In a single operation, you can increment the value of any one cell by 1.",
                "constraints": [
                    "1 <= mat.size(), mat[0].size() <= 500",
                    "1 <= mat[i][j] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[[1, 2], [3, 4]]",
                        "output": "4",
                        "explanation": "Incrementing mat[0][0] by 3 and mat[0][1] by 1 results in all rows and columns summing to 7, requiring a total of 4 operations."
                    },
                    {
                        "input": "[[1, 2, 3], [4, 2, 3], [3, 2, 1]]",
                        "output": "6",
                        "explanation": "Incrementing mat[0][0] by 1, mat[0][1] by 2, mat[2][1] by 1, and mat[2][2] by 2 results in all rows and columns summing to 9, requiring a total of 6 operations."
                    },
                    {
                        "input": "[[0, 2], [3, 4]]",
                        "output": "5",
                        "explanation": "Incrementing mat[0][0] by 4 and mat[0][1] by 1 results in all rows and columns having an equal sum, requiring a total of 5 operations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<ul>\n\t<li><span style=\"font-size:18px\">Let&rsquo;s assume that&nbsp;<strong>maxSum</strong>&nbsp;is the maximum sum among all rows and columns. We just need to increment some cells such that the sum of any row or column becomes &lsquo;maxSum&rsquo;.&nbsp;</span></li>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find minimum number of operations that are required\n    // to make the matrix beautiful.\n    int findMinOperation(vector<vector<int> >& mat) {\n        int i, j, n = mat.size();\n        int ans = 0, maxi = 0;\n        vector<int> rowSum(n, 0), colSum(n, 0);\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = 0; j < n; j++) {\n                sum += mat[i][j];\n            }\n            rowSum[i] = sum;\n            maxi = max(maxi, rowSum[i]);\n        }\n        for (int j = 0; j < n; j++) {\n            int sum = 0;\n            for (int i = 0; i < n; i++) {\n                sum += mat[i][j];\n            }\n            colSum[i] = sum;\n            maxi = max(maxi, colSum[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                // finding minimum increment required in either row or column.\n                int minAdd = min(maxi - rowSum[i], maxi - colSum[j]);\n                ans += minAdd;\n                rowSum[i] += minAdd;\n                colSum[j] += minAdd;\n            }\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int findMinOperation(int[][] mat) {\n        int n = mat.length;\n        int ans = 0, maxi = 0;\n        int[] rowSum = new int[n];\n        int[] colSum = new int[n];\n\n        // Row sums and finding maximum row sum\n        for (int i = 0; i < n; i++) {\n            int sum = 0;\n            for (int j = 0; j < n; j++) {\n                sum += mat[i][j];\n            }\n            rowSum[i] = sum;\n            maxi = Math.max(maxi, rowSum[i]);\n        }\n\n        // Column sums and finding maximum column sum\n        for (int j = 0; j < n; j++) {\n            int sum = 0;\n            for (int i = 0; i < n; i++) {\n                sum += mat[i][j];\n            }\n            colSum[j] = sum;\n            maxi = Math.max(maxi, colSum[j]);\n        }\n\n        // Calculating the minimum operations\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                int minAdd = Math.min(maxi - rowSum[i], maxi - colSum[j]);\n                ans += minAdd;\n                rowSum[i] += minAdd;\n                colSum[j] += minAdd;\n            }\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def findMinOperation(self, mat):\n        n = len(mat)\n        ans = 0\n        maxi = 0\n        rowSum = [0] * n\n        colSum = [0] * n\n\n        # Row sums and finding maximum row sum\n        for i in range(n):\n            rowSum[i] = sum(mat[i])\n            maxi = max(maxi, rowSum[i])\n\n        # Column sums and finding maximum column sum\n        for j in range(n):\n            colSum[j] = sum(mat[i][j] for i in range(n))\n            maxi = max(maxi, colSum[j])\n\n        # Calculating the minimum operations\n        for i in range(n):\n            for j in range(n):\n                minAdd = min(maxi - rowSum[i], maxi - colSum[j])\n                ans += minAdd\n                rowSum[i] += minAdd\n                colSum[j] += minAdd\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMinOperation(mat) {\n        let n = mat.length;\n        let ans = 0, maxi = 0;\n        let rowSum = new Array(n).fill(0);\n        let colSum = new Array(n).fill(0);\n\n        // Row sums and finding maximum row sum\n        for (let i = 0; i < n; i++) {\n            rowSum[i] = mat[i].reduce((sum, val) => sum + val, 0);\n            maxi = Math.max(maxi, rowSum[i]);\n        }\n\n        // Column sums and finding maximum column sum\n        for (let j = 0; j < n; j++) {\n            colSum[j] = mat.reduce((sum, row) => sum + row[j], 0);\n            maxi = Math.max(maxi, colSum[j]);\n        }\n\n        // Calculating the minimum operations\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < n; j++) {\n                let minAdd = Math.min(maxi - rowSum[i], maxi - colSum[j]);\n                ans += minAdd;\n                rowSum[i] += minAdd;\n                colSum[j] += minAdd;\n            }\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}