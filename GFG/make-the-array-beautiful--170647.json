{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714010,
            "title": "Make the array beautiful",
            "titleSlug": "make-the-array-beautiful--170647",
            "content": "<p><span style=\"font-size:18px\">Given an array of negative and non-negative integers. You have to make the array beautiful. An array is beautiful if two adjacent integers, arr[i] and arr[i+1] are either negative or non-negative. And you can do the following&nbsp;operation any number of times until the array becomes beautiful.</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">If two adjacent integers are&nbsp;different i.e. one of them is negative and other is non-negative, remove them.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\">Return the beautiful array after performing the above operation.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong>An empty array is also a beautiful array. There can be many adjacent integers which are different as stated above. So remove different adjacent integers as described above from <strong>left to right</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>4 2 -2 1<strong>\r\nOutput: </strong>4 1\r\n<strong>Explanation:</strong> As at indices 1 and 2 , 2 and -2 have\r\ndifferent sign, they are removed. And the  the final\r\narray is: 4 1.</span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input: </span></strong><span style=\"font-size:18px\">2 -2 1 -1</span><strong><span style=\"font-size:18px\">\r\nOutput: </span></strong><span style=\"font-size:18px\">[]</span><strong><span style=\"font-size:18px\">\r\nExplanation: </span></strong><span style=\"font-size:18px\">As at indices 0 and 1, 2 and -2 have\r\ndifferent sign, so they are removed. Now the array\r\nis 1 -1.Now 1 and -1 are also removed as they have\r\ndifferent sign. So the final array is empty. </span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>makeBeautiful()&nbsp;</strong>which takes an array as an input parameter and returns an array.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Space Complexity:</strong> O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= size of the array&nbsp;&lt;= 10</span><sup><span style=\"font-size:18px\">5</span></sup><br />\r\n<span style=\"font-size:18px\">-10<sup>5</sup> &lt;= arr[i] &lt;= 10</span><sup><span style=\"font-size:18px\">5</span></sup><br />\r\n&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers (both negative and non-negative), transform it into a 'beautiful' array. An array is considered beautiful if every pair of adjacent integers has the same sign (either both negative or both non-negative). You can perform the following operation any number of times:\n\nIf two adjacent integers have different signs (one negative and one non-negative), remove them.\n\nReturn the resulting beautiful array after applying this operation repeatedly from left to right until no more such removals are possible.\n\nNote: An empty array is also considered beautiful.",
                "constraints": [
                    "1 <= size of the array <= 10^5",
                    "-10^5 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "4 2 -2 1",
                        "output": "4 1",
                        "explanation": "The elements 2 and -2 at indices 1 and 2 have different signs, so they are removed, resulting in the array [4, 1]."
                    },
                    {
                        "input": "2 -2 1 -1",
                        "output": "[]",
                        "explanation": "The elements 2 and -2 at indices 0 and 1 have different signs, so they are removed. The array becomes [1, -1]. Now, 1 and -1 also have different signs, so they are removed, resulting in an empty array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The idea is to traverse the array from left to right and remove current and previous integer if they have different i.e. negative and non-negative.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to check if two elements have opposite signs\n    bool check(int a, int b) {\n        return ((a < 0 && b >= 0) || (a >= 0 && b < 0));\n    }\n    // Function to make the array beautiful\n    vector<int> makeBeautiful(vector<int> arr) {\n        vector<int> st;\n        // Iterating over the array\n        for (int i = 0; i < arr.size(); ++i) {\n            // Checking if the current element and the element at the top of the stack have opposite signs\n            if (!st.empty() && check(st.back(), arr[i]))\n                // If they have opposite signs, removing the top element from the stack\n                st.pop_back();\n            else\n                // If they have the same sign or the stack is empty, pushing the current element into the stack\n                st.push_back(arr[i]);\n        }\n        // Returning the remaining elements in the stack\n        return st;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static ArrayList<Integer> makeBeautiful(int[] arr) {\r\n        // code here\r\n        ArrayList<Integer> l = new ArrayList<>();\r\n        for (int i = 0; i < arr.length; i++) {\r\n            if (l.size() == 0) {\r\n                l.add(arr[i]);\r\n            } else {\r\n                if (check(l.get(l.size() - 1), arr[i])) {\r\n                    l.remove(l.size() - 1);\r\n                } else {\r\n                    l.add(arr[i]);\r\n                }\r\n            }\r\n        }\r\n        return l;\r\n    }\r\n    static boolean check(int a, int b) {\r\n        return ((a < 0 && b >= 0) || (a >= 0 && b < 0));\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom typing import List\r\n\r\nclass Solution:\r\n    def makeBeautiful(self, arr: List[int]) -> List[int]:\r\n        # code here\r\n        \r\n        # Function to check if two consecutive elements have opposite signs\r\n        def check(a, b):\r\n            return (a < 0 and b >= 0) or (a >= 0 and b < 0)\r\n        \r\n        # Stack to store the result\r\n        st = []\r\n        \r\n        # Iterating over the array\r\n        for i in range(len(arr)):\r\n            # If the last element in the stack and current element have opposite signs, pop the last element\r\n            if len(st) > 0 and check(st[-1], arr[i]):\r\n                st.pop()\r\n            # If the last element in the stack and current element have the same sign or the stack is empty, append the current element to the stack\r\n            else:\r\n                st.append(arr[i])\r\n        \r\n        # Return the updated stack\r\n        return st",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {number[]}\n*/\n\nclass Solution\n{\n    //Function to make the given array beautiful.\n    makeBeautiful(arr)\n    {\n        //Function to check if two consecutive elements have opposite signs\n        function check(a, b) {\n            return (a < 0 && b >= 0) || (a >= 0 && b < 0);\n        }\n        \n        //Stack to store the result\n        let st = [];\n        \n        //Iterating over the array\n        for (let i = 0; i < arr.length; i++) {\n            //If the last element in the stack and current element have opposite signs, pop the last element\n            if (st.length > 0 && check(st[st.length - 1], arr[i])) {\n                st.pop();\n            }\n            //If the last element in the stack and current element have the same sign or the stack is empty, append the current element to the stack\n            else {\n                st.push(arr[i]);\n            }\n        }\n        \n        //Return the updated stack\n        return st;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}