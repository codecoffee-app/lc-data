{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705156,
            "title": "Make Zeroes",
            "titleSlug": "make-zeroes4042",
            "content": "<p><span style=\"font-size: 18px;\">Given a matrix&nbsp;of&nbsp; size n x&nbsp;m. Your task is to make Zeroes, that means in whole matrix when you find a zero,&nbsp;convert its upper, lower, left, and right value to zero and make that element the sum of the upper, lower, left and right value. Do the following tasks according to the initial matrix.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>matrix = {{1, 2, 3, 4},\n\\t\\t     {5, 6, 0, 7}, \n&nbsp;\\t\\t    {8, 9, 4, 6},\n\\t\\t     {8, 4, 5, 2}}\n<strong>Output:</strong>&nbsp;{{1, 2, 0, 4}, \n&nbsp;\\t  {5, 0, 20, 0},\n\\t   {8, 9, 0, 6}, \n&nbsp;\\t  {8, 4, 5, 2}}\n<strong>Explanation:</strong>&nbsp;As matrix[1][2] = 0, we will\nperform the operation here. Then matrix[1][2]\n= matrix[0][2] + matrix[2][2] + matrix[1][1] \n+ matrix[1][3] and matrix[0][2] = matrix[2][2] \n= matrix[1][1] = matrix[1][3] = 0.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>matrix = {{1, 2}, \n&nbsp;\\t\\t    {3, 4}}\n<strong>output: </strong>{{1, 2}, \n&nbsp;\\t  {3, 4}}</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>MakeZeros()</strong>&nbsp;which takes the matrix as input parameter and does the given task according to initial matrix. You don't need to return anything. The driver code prints the modified matrix itself in the output.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n * m)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(n * m)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n, m &le; 100<br />0 &le; matrix[i][j] &le; 100, where 0 &le; i &le; n and 0 &le; j &le; m</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of size n x m, your task is to transform it based on the following rule: When a zero is encountered in the matrix, convert its adjacent elements (up, down, left, and right) to zero.  The zero element itself should then be replaced by the sum of its original adjacent elements.  Perform these operations based on the initial state of the matrix.",
                "constraints": [
                    "1 <= n, m <= 100",
                    "0 <= matrix[i][j] <= 100, where 0 <= i < n and 0 <= j < m"
                ],
                "testcases": [
                    {
                        "input": "[[1, 2, 3, 4], [5, 6, 0, 7], [8, 9, 4, 6], [8, 4, 5, 2]]",
                        "output": "[[1, 2, 0, 4], [5, 0, 20, 0], [8, 9, 0, 6], [8, 4, 5, 2]]",
                        "explanation": "The element at matrix[1][2] is 0. Therefore, matrix[1][2] becomes matrix[0][2] + matrix[2][2] + matrix[1][1] + matrix[1][3] = 3 + 4 + 6 + 7 = 20. Also, matrix[0][2], matrix[2][2], matrix[1][1], and matrix[1][3] are set to 0."
                    },
                    {
                        "input": "[[1, 2], [3, 4]]",
                        "output": "[[1, 2], [3, 4]]",
                        "explanation": "Since there are no zeros in the matrix, no changes are made."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Find all (i,j) where matrix[i][j] = 0, then do the task.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\npublic:\n    //Function to make the neighboring zeros effect.\n    void MakeZeros(vector<vector<int> >& matrix) {\n        int n = matrix.size();\n        int m = matrix[0].size();\n        vector<int>a, b;\n        vector<vector<int>>res(n, vector<int>(m,0));\n        //iterating through the matrix to find the zeros and their neighbors.\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                //if current element is zero, add its coordinates to a and b.\n                if(!matrix[i][j]){\n                    a.push_back(i);\n                    b.push_back(j);\n                }\n                //copying the current matrix to res.\n                res[i][j] = matrix[i][j];\n            }\n        }\n        //iterating through the zeros and their neighbors.\n        for(int x = 0; x < a.size(); x++){\n            int i = a[x];\n            int j = b[x];\n            int cnt = 0;\n            //checking and updating the neighbors of zeros.\n            if(i-1 >= 0)\n                cnt += matrix[i-1][j], res[i-1][j] = 0;\n            if(i+1 < n)\n                cnt += matrix[i+1][j], res[i+1][j] = 0;\n            if(j-1 >= 0)\n                cnt += matrix[i][j-1], res[i][j-1] = 0;\n            if(j+1 < m)\n                cnt += matrix[i][j+1], res[i][j+1] = 0;\n            //updating the current zero to the count of its neighbors.\n            res[i][j] = cnt;\n        }\n        //copying the updated values from res to matrix.\n        for(int i = 0; i < n; i++)\n            for(int j = 0; j < m; j++)\n                matrix[i][j] = res[i][j];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function template for Python 3\n\n\nclass Solution:\n\n    # Function to convert all zeros in the matrix and update the matrix.\n    def MakeZeros(self, matrix):\n        # Getting the number of rows and columns in the matrix.\n        n = len(matrix)\n        m = len(matrix[0])\n\n        # Creating two lists to store the row and column indices of zeros.\n        a = []\n        b = []\n\n        # Initializing a new matrix to store the updated values.\n        res = []\n        for i in range(n):\n            t = [0] * m\n            res.append(t)\n\n        # Finding all zero elements in the matrix and storing their indices.\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == 0:\n                    a.append(i)\n                    b.append(j)\n                res[i][j] = matrix[i][j]\n\n        # Updating the matrix based on the neighbors of zero elements.\n        for x in range(len(a)):\n            i = a[x]\n            j = b[x]\n            cnt = 0\n\n            # Checking if there is a neighbor element above the current one.\n            if i - 1 >= 0:\n                cnt += matrix[i - 1][j]\n                res[i - 1][j] = 0\n\n            # Checking if there is a neighbor element below the current one.\n            if i + 1 < n:\n                cnt += matrix[i + 1][j]\n                res[i + 1][j] = 0\n\n            # Checking if there is a neighbor element to the left of the current one.\n            if j - 1 >= 0:\n                cnt += matrix[i][j - 1]\n                res[i][j - 1] = 0\n\n            # Checking if there is a neighbor element to the right of the current one.\n            if j + 1 < m:\n                cnt += matrix[i][j + 1]\n                res[i][j + 1] = 0\n\n            # Updating the current element with the sum of its neighbors.\n            res[i][j] = cnt\n\n        # Updating the original matrix with the values from the updated matrix.\n        for i in range(n):\n            for j in range(m):\n                matrix[i][j] = res[i][j]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public void MakeZeros(List<List<int>> matrix)\n    {\n        int n = matrix.Count;\n        int m = matrix[0].Count;\n        List<int> a = new List<int>();\n        List<int> b = new List<int>();\n        List<List<int>> res = new List<List<int>>();\n        for (int i = 0; i < n; i++)\n        {\n            res.Add(new List<int>());\n            for (int j = 0; j < m; j++)\n            {\n                res[i].Add(0);\n            }\n        }\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < m; j++)\n            {\n                if (matrix[i][j] == 0)\n                {\n                    a.Add(i);\n                    b.Add(j);\n                }\n                res[i][j] = matrix[i][j];\n            }\n        }\n        for (int x = 0; x < a.Count; x++)\n        {\n            int i = a[x];\n            int j = b[x];\n            int cnt = 0;\n            if (i - 1 >= 0)\n                cnt += matrix[i - 1][j];\n            if(i - 1 >= 0)\n                res[i - 1][j] = 0;\n            if (i + 1 < n)\n                cnt += matrix[i + 1][j];\n            if(i + 1 < n)\n                res[i + 1][j] = 0;\n            if (j - 1 >= 0)\n                cnt += matrix[i][j - 1];\n            if(j - 1 >= 0)\n                res[i][j - 1] = 0;\n            if (j + 1 < m)\n                cnt += matrix[i][j + 1];\n            if(j + 1 < m)\n                res[i][j + 1] = 0;\n            res[i][j] = cnt;\n        }\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < m; j++)\n            {\n                matrix[i][j] = res[i][j];\n            }\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}