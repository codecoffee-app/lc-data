{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 716818,
            "title": "Making A Large Island",
            "titleSlug": "making-a-large-island",
            "content": "<p><span >You are given an<strong> n x n </strong>binary matrix<strong> grid[][]</strong>. You are allowed to change at most one<strong> 0</strong> to <strong>1</strong>.&nbsp;</span><span style=\"font-size: 18.6667px;\">A group of <strong>connected 1s</strong> forms an island. Two 1s are connected if they share one of their sides with each other.</span></p>\n<p><span >Return the size of the <strong>largest island</strong> in the grid after applying this operation.</span></p>\n<p><strong><span >Examples:</span></strong></p>\n<pre><span ><strong><span >Input: </span></strong><span >grid[] = [[1,0],[0,1]]</span><br /><strong><span >Output: </span></strong><span >3</span><br /><strong><span >Explanation: </span></strong><span style=\"font-size: 18.6667px;\">Change any one 0 to 1 and connect two 1s, then we get an island with area = 3.</span></span></pre>\n<pre><strong><span >Input: </span></strong><span >grid[] = [[1,1],[1,0]]</span><br /><strong><span >Output: </span></strong><span >4</span><br /><strong><span >Explanation: </span></strong><span style=\"font-size: 18.6667px;\">Change the only 0 to 1 and make the island bigger, then we get an island with area = 4.</span></pre>\n<pre><strong><span >Input: </span></strong><span >grid[] = [[1,1],[1,1]]</span><br /><strong><span >Output: </span></strong><span >4</span><br /><strong><span >Explanation: </span></strong><span style=\"font-size: 18.6667px;\">Can't change any 0 to 1, only one island possible with area = 4.</span></pre>\n<p><strong><span style=\"font-size: 18.6667px;\">Constraints:</span></strong></p>\n<p><span style=\"font-size: 18.6667px;\">1 &lt;= n &lt;= 500<br />0 &lt;= grid[i][j] &lt;= 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an n x n binary matrix grid, you are allowed to change at most one 0 to 1. A group of connected 1s forms an island. Two 1s are connected if they share a side. Return the size of the largest island in the grid after applying this operation.",
                "constraints": [
                    "1 <= n <= 500",
                    "0 <= grid[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[[1,0],[0,1]]",
                        "output": "3",
                        "explanation": "By changing one of the 0s to 1, we can connect two existing 1s to form a single island of size 3."
                    },
                    {
                        "input": "[[1,1],[1,0]]",
                        "output": "4",
                        "explanation": "Changing the 0 to 1 connects all the 1s, forming a single island of size 4."
                    },
                    {
                        "input": "[[1,1],[1,1]]",
                        "output": "4",
                        "explanation": "Since there are no 0s in the grid, no change can be made. The only island present already has a size of 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Explore every island using DFS, count its area, give it an island index and save the result to a {index: area} map<br /></span></p>",
            "<p><span style=\"font-size: 18.6667px;\">Loop every cell == 0, check its connected islands and calculate total islands area.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "union-find",
                "slug": "union-find"
            }
        ],
        "companies": [
            "intuit"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\npublic:\n    int dfs(vector<vector<int>>& grid, int i, int j, int index) {\n        int n=grid.size();\n        if(i<0 || i>=n || j<0 || j>=n || grid[i][j]!=1) return 0;\n        grid[i][j]=index;\n        int count = dfs(grid, i+1, j, index) + \n                    dfs(grid, i-1, j, index) + \n                    dfs(grid, i, j+1, index) + \n                    dfs(grid, i, j-1, index);\n        return count+1;\n    }\n    \n    void findNeighbours(vector<vector<int>>& grid, int i, int j, set<int>& s) {\n\t\t//finding adjacent island groups\n        int n=grid.size();\n        if(i>0) s.insert(grid[i-1][j]);\n        if(j>0) s.insert(grid[i][j-1]);\n        if(i<n-1) s.insert(grid[i+1][j]);\n        if(j<n-1) s.insert(grid[i][j+1]);\n    }\n    \n    int largestIsland(vector<vector<int>>& grid) {\n        int n=grid.size(), res=0, index=2, count;\n        map<int, int> area;\n        for(int i=0;i<n;i++) {\n            for(int j=0;j<n;j++) {\n                if(grid[i][j]==1) {\n                    area[index]=dfs(grid, i, j, index);\n                    res=max(res, area[index++]);\n                }\n            }\n        }\n\n        for(int i=0;i<n;i++) {\n            for(int j=0;j<n;j++) {\n                if(grid[i][j]==0) {\n                    set<int> s;\n                    findNeighbours(grid, i, j, s);\n                    count=1;   \n                    for(int i:s)\n                        count+=area[i];     \n                    res=max(res, count);\n                }\n            }\n        }\n        \n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int largestIsland(int[][] grid) {\n        Map<Integer, Integer> regionsArea = new HashMap<>();\n        regionsArea.put(0, 0);\n\n        int n = grid.length;\n        int region = 2;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    int area = floodFill(grid, i, j, region);\n                    regionsArea.put(region, area);\n                    region++;\n                }\n            }\n        }\n\n        int max = regionsArea.getOrDefault(2, 0);\n        for (int r = 0; r < n; r++) {\n            for (int c = 0; c < n; c++) {\n                if (grid[r][c] == 0) {\n                    Set<Integer> neighbors = new HashSet<>();\n                    neighbors.add(r > 0 ? grid[r - 1][c] : 0);\n                    neighbors.add(c > 0 ? grid[r][c - 1] : 0);\n                    neighbors.add(r < n - 1 ? grid[r + 1][c] : 0);\n                    neighbors.add(c < n - 1 ? grid[r][c + 1] : 0);\n                    int area = 1;\n                    for (int neighbor : neighbors) {\n                        area += regionsArea.get(neighbor);\n                    }\n                    if (area > max) {\n                        max = area;\n                    }\n                }\n            }\n        }\n\n        return max;\n    }\n\n    public int floodFill(int[][] grid, int r, int c, int region) {\n        int n = grid.length;\n        if (r < 0 || r >= n || c < 0 || c >= n || grid[r][c] != 1) {\n            return 0;\n        }\n\n        grid[r][c] = region;\n\n        int sum = 1;\n        sum += floodFill(grid, r, c + 1, region);\n        sum += floodFill(grid, r + 1, c, region);\n        sum += floodFill(grid, r, c - 1, region);\n        sum += floodFill(grid, r - 1, c, region);\n\n        return sum;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import defaultdict\r\n\r\nclass Solution:\r\n    def dfs(self, grid, i, j, index):\r\n        n = len(grid)\r\n        if i < 0 or i >= n or j < 0 or j >= n or grid[i][j] != 1:\r\n            return 0\r\n        grid[i][j] = index\r\n        count = self.dfs(grid, i + 1, j, index) + \\\r\n                self.dfs(grid, i - 1, j, index) + \\\r\n                self.dfs(grid, i, j + 1, index) + \\\r\n                self.dfs(grid, i, j - 1, index)\r\n        return count + 1\r\n\r\n    def findNeighbours(self, grid, i, j, s):\r\n        n = len(grid)\r\n        if i > 0:\r\n            s.add(grid[i - 1][j])\r\n        if j > 0:\r\n            s.add(grid[i][j - 1])\r\n        if i < n - 1:\r\n            s.add(grid[i + 1][j])\r\n        if j < n - 1:\r\n            s.add(grid[i][j + 1])\r\n\r\n    def largestIsland(self, grid):\r\n        n = len(grid)\r\n        res = 0\r\n        index = 2\r\n        area = defaultdict(int)\r\n        \r\n        for i in range(n):\r\n            for j in range(n):\r\n                if grid[i][j] == 1:\r\n                    area[index] = self.dfs(grid, i, j, index)\r\n                    res = max(res, area[index])\r\n                    index += 1\r\n                    \r\n\r\n        for i in range(n):\r\n            for j in range(n):\r\n                if grid[i][j] == 0:\r\n                    s = set()\r\n                    self.findNeighbours(grid, i, j, s)\r\n                    count = 1\r\n                    for k in s:\r\n                        count += area[k]\r\n                    res = max(res, count)\r\n\r\n        return res",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Complete this function\n    public int largestIsland(List<List<int>> grid) {\n        int n = grid.Count;\n        int res = 0;\n        int index = 2;\n        Dictionary<int, int> area = new Dictionary<int, int>();\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    area[index] = Dfs(grid, i, j, index);\n                    res = Math.Max(res, area[index++]);\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 0) {\n                    HashSet<int> s = new HashSet<int>();\n                    FindNeighbours(grid, i, j, s);\n                    int count = 1;\n                    foreach (int val in s) {\n                        if (area.ContainsKey(val)) {\n                            count += area[val];\n                        }\n                    }\n                    res = Math.Max(res, count);\n                }\n            }\n        }\n\n        return res;\n    }\n\n    private int Dfs(List<List<int>> grid, int i, int j, int index) {\n        int n = grid.Count;\n        if (i < 0 || i >= n || j < 0 || j >= n || grid[i][j] != 1) return 0;\n\n        grid[i][j] = index;\n        int count = Dfs(grid, i + 1, j, index) + Dfs(grid, i - 1, j, index) +\n                    Dfs(grid, i, j + 1, index) + Dfs(grid, i, j - 1, index);\n        return count + 1;\n    }\n\n    private void FindNeighbours(List<List<int>> grid, int i, int j, HashSet<int> s) {\n        int n = grid.Count;\n        if (i > 0 && grid[i - 1][j] > 1) s.Add(grid[i - 1][j]);\n        if (j > 0 && grid[i][j - 1] > 1) s.Add(grid[i][j - 1]);\n        if (i < n - 1 && grid[i + 1][j] > 1) s.Add(grid[i + 1][j]);\n        if (j < n - 1 && grid[i][j + 1] > 1) s.Add(grid[i][j + 1]);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}