{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703226,
            "title": "Making elements distinct",
            "titleSlug": "making-elements-distinct3139",
            "content": "<p><span style=\"font-size:18px\">Given a sorted integer array. We need to make array elements distinct by increasing values and keeping the array sum minimum possible. We need to print the minimum possible sum as output.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note</strong> :- After increasing the values of the array , the sorted order should be maintained.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {2, 2, 3, 5, 6}\r\n<strong>Output :</strong> 20\r\n<strong>Explanation:</strong>\r\nWe make the array as {2, 3, 4, 5, 6}. \r\nSum becomes 2 + 3 + 4 + 5 + 6 = 20\r\n\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {20, 20} <strong>\r\nOutput :</strong>  41</span></pre>\r\n\r\n<p><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>minSum()</strong> that takes an array <strong>(arr)</strong>, sizeOfArray <strong>(n),</strong>&nbsp;and return the minimum possible sum. The driver code takes care of the printing.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n2 &le; N &le; 10<sup>5</sup><br />\r\n1 &le; A[i] &le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted integer array, transform it into an array with distinct elements by incrementing values while minimizing the overall sum. Maintain the sorted order during this transformation. Determine the minimum possible sum of the resulting distinct array.",
                "constraints": [
                    "2 <= N <= 10^5",
                    "1 <= A[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "{2, 2, 3, 5, 6}",
                        "output": "20",
                        "explanation": "The array can be transformed into {2, 3, 4, 5, 6}. The sum of the elements is 2 + 3 + 4 + 5 + 6 = 20."
                    },
                    {
                        "input": "{20, 20}",
                        "output": "41",
                        "explanation": "The array can be transformed into {20, 21}. The sum of the elements is 20 + 21 = 41."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The array is sorted. So, you need to check the previous element should be small the i<sup>th</sup>. Just use brute force try to make i<sup>th</sup>&nbsp;index greater than a[i-1].</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "long long int minSum(int arr[], int n)\r\n{\r\n\tlong long int sum = arr[0], prev = arr[0];\r\n\r\n\tfor (int i = 1; i < n; i++) {\r\n\r\n\t\t// If violation happens, make current\r\n\t\t// value as 1 plus previous value and\r\n\t\t// add to sum.\r\n\t\tif (arr[i] <= prev) {\r\n\t\t\tprev = prev + 1;\r\n\t\t\tsum = sum + prev;\r\n\t\t}\r\n\r\n\t\t// No violation.\r\n\t\telse {\r\n\t\t\tsum = sum + arr[i];\r\n\t\t\tprev = arr[i];\r\n\t\t}\r\n\t}\r\n\r\n\treturn sum;\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long minSum(int[] arr, int n)\n    {\n        long sum = arr[0];\n        long prev = arr[0];\n\n        for (int i = 1; i < n; i++) {\n\n            // If violation happens, make current\n            // value as 1 plus previous value and\n            // add to sum.\n            if (arr[i] <= prev) {\n                prev = prev + 1;\n                sum = sum + prev;\n            }\n\n            // No violation.\n            else {\n                sum = sum + arr[i];\n                prev = arr[i];\n            }\n        }\n\n        return sum;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}