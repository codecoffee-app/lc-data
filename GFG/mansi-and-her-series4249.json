{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705571,
            "title": "Mansi and her series",
            "titleSlug": "mansi-and-her-series4249",
            "content": "<p><span style=\"font-size:18px\">Mansi is fond of solving mental ability questions. Today while solving some questions she came across a series which she was unable to solve. Help her to find the nth term of the series.<br />\nn&nbsp; nth term<br />\n1 &nbsp;3<br />\n2 &nbsp;8<br />\n3 &nbsp;18<br />\n4 &nbsp;32<br />\n5 &nbsp;60<br />\n.<br />\n.<br />\n.<br />\n10 &nbsp;300<br />\n<br />\n<strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: n = 1\n<strong>Output:</strong>&nbsp;3&nbsp;\n<strong>Explanation</strong>: The first term of the series is 3.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 2\n<strong>Output:&nbsp;</strong>8\n<strong>Explanation</strong>: The second term of the series is 3. \n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>nthTerm()&nbsp;</strong>which takes n&nbsp;as input parameter and returns the nth term of the series.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(nlogn)<br />\n<strong>Expected Auxiliary Space:</strong> O(n)<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;= n&nbsp;&lt;=6000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Mansi is fascinated by mental ability questions and is currently stumped by a number series. Your task is to help her determine the nth term of the series, given the following sequence pattern:\n\nn  nth term\n1   3\n2   8\n3   18\n4   32\n5   50\n...\n...\n...\n10  300",
                "constraints": [
                    "1 <= n <= 6000"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "3",
                        "explanation": "The first term in the series is 3."
                    },
                    {
                        "input": "2",
                        "output": "8",
                        "explanation": "The second term in the series is 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use seive.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "series",
                "slug": "series"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n int MAX_SIZE = 60001; \n  \n// Function to generate N prime numbers using  \n// Sieve of Eratosthenes \nvoid SieveOfEratosthenes(vector<int> &primes)  \n{  \n    // Create a boolean array \"IsPrime[0..MAX_SIZE]\" and  \n    // initialize all entries it as true. A value in  \n    // IsPrime[i] will finally be false if i is  \n    // Not a IsPrime, else true.  \n    bool IsPrime[MAX_SIZE];  \n    memset(IsPrime, true, sizeof(IsPrime));  \n    \n    for (int p = 2; p * p < MAX_SIZE; p++)  \n    {  \n        // If IsPrime[p] is not changed, then it is a prime  \n        if (IsPrime[p] == true)  \n        {  \n            // Update all multiples of p greater than or   \n            // equal to the square of it  \n            // numbers which are multiple of p and are  \n            // less than p^2 are already been marked.   \n            for (int i = p * p; i <  MAX_SIZE; i += p)  \n                IsPrime[i] = false;  \n        }  \n    }  \n    \n    // Store all prime numbers  \n    for (int p = 2; p < MAX_SIZE; p++)  \n       if (IsPrime[p])  \n            primes.push_back(p); \n             \n}\nint nthTerm(int n){\n    vector<int> primes; \n    SieveOfEratosthenes(primes); \n    return n*(primes[n-1]+1);\n}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n static int MAX_SIZE = 60001; \n      \n    // To store all prime numbers \n    static ArrayList<Integer> primes = \n       new ArrayList<Integer>(); \n      \n    // Function to generate N prime numbers  \n    // using Sieve of Eratosthenes \n    static void SieveOfEratosthenes()  \n    {  \n        // Create a boolean array \"IsPrime[0..MAX_SIZE]\"  \n        // and initialize all entries it as true.  \n        // A value in IsPrime[i] will finally be false  \n        // if i is Not a IsPrime, else true.  \n        boolean [] IsPrime = new boolean[MAX_SIZE];  \n          \n        for(int i = 0; i < MAX_SIZE; i++) \n            IsPrime[i] = true; \n          \n        for (int p = 2; p * p < MAX_SIZE; p++)  \n        {  \n            // If IsPrime[p] is not changed,  \n            // then it is a prime  \n            if (IsPrime[p] == true)  \n            {  \n                // Update all multiples of p greater than or  \n                // equal to the square of it  \n                // numbers which are multiple of p and are  \n                // less than p^2 are already been marked.  \n                for (int i = p * p; i < MAX_SIZE; i += p)  \n                    IsPrime[i] = false;  \n            }  \n        }  \n      \n        // Store all prime numbers  \n        for (int p = 2; p < MAX_SIZE; p++)  \n        if (IsPrime[p] == true)  \n                primes.add(p); \n    }  \nint  nthTerm(int n){\n    \n    SieveOfEratosthenes(); \n    return n*(primes.get(n-1)+1);\n}\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    public int MAX_SIZE = 60001;\n\n    public void SieveOfEratosthenes(List<int> primes)\n    {\n        bool[] IsPrime = new bool[MAX_SIZE];\n        for (int i = 0; i < MAX_SIZE; i++)\n        {\n            IsPrime[i] = true;\n        }\n\n        for (int p = 2; p * p < MAX_SIZE; p++)\n        {\n            if (IsPrime[p] == true)\n            {\n                for (int i = p * p; i < MAX_SIZE; i += p)\n                    IsPrime[i] = false;\n            }\n        }\n\n        for (int p = 2; p < MAX_SIZE; p++)\n        {\n            if (IsPrime[p])\n            {\n                primes.Add(p);\n            }\n        }\n    }\n\n    public int nthTerm(int n)\n    {\n        List<int> primes = new List<int>();\n        SieveOfEratosthenes(primes);\n        return n * (primes[n - 1] + 1);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}