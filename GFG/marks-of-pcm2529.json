{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702899,
            "title": "Marks of PCM",
            "titleSlug": "marks-of-pcm2529",
            "content": "<p><span style=\"font-size:18px\">You are provided with marks of <strong>N</strong> students in Physics, Chemistry and Maths.<br />\nPerform the following 3 operations:&nbsp;</span></p>\n\n<ul>\n\t<li><span style=\"font-size:18px\">Sort the students in Ascending order of their Physics marks.</span></li>\n\t<li><span style=\"font-size:18px\">Once this is done, sort the students having same marks in Physics in the descending order of their Chemistry marks.</span></li>\n\t<li><span style=\"font-size:18px\">Once this is also done, sort the students having same marks in Physics and Chemistry in the ascending order of their Maths marks.</span></li>\n</ul>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 10\nphy[] = {4 1 10 4 4 4 1 10 1 10}\nchem[] = {5 2 9 6 3 10 2 9 14 10}\nmath[] = {12 3 6 5 2 10 16 32 10 4}\n<strong>Output:\n</strong>1 14 10\n1 2 3\n1 2 16\n4 10 10\n4 6 5\n4 5 12\n4 3 2\n10 10 4\n10 9 6\n10 9 32\n<strong>Explanation</strong>: Firstly, the Physics marks of \nstudents are sorted in ascending order.\nThose having same marks in Physics have\ntheir Chemistry marks in descending order.\nThose having same marks in both Physics\nand Chemistry have their Math marks in\nascending order.\n</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\n\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>customSort()&nbsp;</strong>which takes &nbsp;<strong>phy</strong>[],&nbsp;&nbsp;<strong>chem</strong>[],&nbsp;&nbsp;<strong>math</strong>[]&nbsp; and an integer <strong>N </strong>denoting the marks and the number of students. The function sorts the marks in the described order and the final changes should be made in the given arrays only.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(NLogN).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given the marks of `N` students in Physics, Chemistry, and Maths. Sort the students based on the following criteria:\n\n1.  Sort in ascending order of Physics marks.\n2.  For students with the same Physics marks, sort in descending order of Chemistry marks.\n3.  For students with the same Physics and Chemistry marks, sort in ascending order of Maths marks.",
                "constraints": [
                    "1 <= N <= 10000"
                ],
                "testcases": [
                    {
                        "input": "N = 10\nphy[] = {4, 1, 10, 4, 4, 4, 1, 10, 1, 10}\nchem[] = {5, 2, 9, 6, 3, 10, 2, 9, 14, 10}\nmath[] = {12, 3, 6, 5, 2, 10, 16, 32, 10, 4}",
                        "output": "phy[] = {1, 1, 1, 4, 4, 4, 4, 10, 10, 10}\nchem[] = {14, 2, 2, 10, 6, 5, 3, 10, 9, 9}\nmath[] = {10, 16, 3, 2, 5, 12, 6, 4, 32, 10}",
                        "explanation": "The Physics marks are sorted in ascending order. Students with the same Physics marks are sorted in descending order of Chemistry marks. Finally, students with the same Physics and Chemistry marks are sorted in ascending order of Maths marks."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try using a custom custom comparator with the normal sorting function.</p>\n\n<p>The custom comparator must first check the physics marks of the 2 students. If they&#39;re unequal, we sort them in increasing order.<br />\nIf they are equal, then we check the Chemistry marks. If chemistry marks are unequal, we sort them in decreasing order.<br />\nIf both Physics and Chemistry marks are equal, we simply sort them in increasing order of the math marks.</p>\n\n<p>Make sure that the final marks of the students are not intermixed. That is, if a student had a, b and c marks in the input, then in the output as well, the student must have marks a, b and c.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\n    public:\n    static bool cmp (pair <int, pair <int,int>> a, pair <int, pair <int,int>> b)\n    {\n        // if the physics marks are not same, sort them in increasing order\n    \tif (a.first != b.first)\n    \t\treturn a.first < b.first;\n    \t\t\n    \t// if physics marks are same\n    \telse\n    \t{\n    \t    // if chem marks are not same, sort them in decreasing order\n    \t\tif (a.second.first != b.second.first)\n    \t\t\treturn a.second.first > b.second.first;\n    \t\t\t\n    \t\t// if both physics and chemistry marks are same, \n    \t\t// sort in the increasing order of math marks\n    \t\telse\n    \t\t\treturn a.second.second < b.second.second;\n    \t}\n    \n    }\n    \n    void customSort (int phy[], int chem[], int math[], int n)\n    {\n    \tvector < pair <int, pair <int,int>> > arr (n);\n    \t\n    \t// storing the marks of all 3 subjects of a student together\n    \tfor (int i = 0; i < n; ++i)\n    \t{\n    \t\tarr[i].first = phy[i];\n    \t\tarr[i].second.first = chem[i];\n    \t\tarr[i].second.second = math[i];\n    \t}\n    \n    \tsort (arr.begin (), arr.end (), cmp);\n    \t\n    \t// updating the original arrays with the new order\n    \tfor (int i = 0; i < n; ++i)\n    \t{\n    \t\tphy[i] = arr[i].first;\n    \t\tchem[i] = arr[i].second.first;\n    \t\tmath[i] = arr[i].second.second;\n    \t}\n    }\n    \n    // Contributed By: Pranay Bansal\n\n  \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}