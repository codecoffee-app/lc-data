{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704556,
            "title": "Matrix Chain Multiplication",
            "titleSlug": "matrix-chain-multiplication0303",
            "content": "<p><span style=\"font-size: 18px;\">Given an&nbsp;</span><span style=\"font-size: 18px;\">array&nbsp;</span><strong style=\"font-size: 18px;\">arr[] </strong><span style=\"font-size: 18px;\">which represents</span><strong style=\"font-size: 18px;\"> the&nbsp;</strong><span style=\"font-size: 18px;\">dimensions of</span><span style=\"font-size: 18px;\"> a sequence of matrices&nbsp;</span><span style=\"font-size: 18px;\">where the&nbsp;</span><strong style=\"font-size: 18px;\">i<sup>th</sup></strong><span style=\"font-size: 18px;\">&nbsp;matrix has the dimensions&nbsp;</span><strong style=\"font-size: 18px;\">(arr[i-1] x arr[i])</strong><span style=\"font-size: 18px;\"> for i&gt;=1</span><span style=\"font-size: 18px;\">, find the most efficient way to multiply these matrices together. The efficient way is the one that involves the least number of multiplications.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 1, 3, 4]\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> There are 3 matrices of dimensions 2 &times; 1, 1 &times; 3, and 3 &times; 4, Let this 3 input matrices be M1, M2, and M3. There are two ways to multiply: ((M1 x M2) x M3) and (M1 x (M2 x M3)), note that the result of (M1 x M2) is a 2 x 3 matrix and result of (M2 x M3) is a 1 x 4 matrix. <br /></span><span style=\"font-size: 18px;\">((M1 x M2) x M3)  requires (2 x 1 x 3) + (2 x 3 x 4) = 30 \n(M1 x (M2 x M3))  requires (1 x 3 x 4) + (2 x 1 x 4) = 20. <br /></span><span style=\"font-size: 18px;\">The minimum of these two is 20.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 2, 3, 4, 3]\n<strong>Output:</strong> 30\n<strong>Explanation:</strong> There are 4 matrices of dimensions 1 &times; 2, 2 &times; 3, 3 &times; 4, 4 &times; 3. Let this 4 input matrices be M1, M2, M3 and M4. The minimum number of multiplications are obtained by ((M1 x M2) x M3) x M4). The minimum number is (1 x 2 x 3) + (1 x 3 x 4) + (1 x 4 x 3) = 30.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [3, 4]\n<strong>Output:</strong> 0<br /><strong>Explanation:</strong> As there is only one matrix so, there is no cost of multiplication.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong>&nbsp;<br />2 &le; arr.size() &le; 100<br />1 &le; arr[i] &le; 200</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` representing the dimensions of a sequence of matrices, where the i<sup>th</sup> matrix has dimensions `(arr[i-1] x arr[i])` for i >= 1, determine the most efficient way to multiply these matrices together. Efficiency is defined by the minimum number of scalar multiplications required.",
                "constraints": [
                    "2 <= arr.size() <= 100",
                    "1 <= arr[i] <= 200"
                ],
                "testcases": [
                    {
                        "input": "[2, 1, 3, 4]",
                        "output": "20",
                        "explanation": "There are 3 matrices of dimensions 2 x 1, 1 x 3, and 3 x 4. The optimal parenthesization is (M1 x (M2 x M3)), which requires (1 x 3 x 4) + (2 x 1 x 4) = 20 multiplications."
                    },
                    {
                        "input": "[1, 2, 3, 4, 3]",
                        "output": "30",
                        "explanation": "There are 4 matrices of dimensions 1 x 2, 2 x 3, 3 x 4, 4 x 3.  The optimal parenthesization requires 30 multiplications, achieved by  ((M1 x M2) x M3) x M4 which equals (1 x 2 x 3) + (1 x 3 x 4) + (1 x 4 x 3) = 30."
                    },
                    {
                        "input": "[3, 4]",
                        "output": "0",
                        "explanation": "With only one matrix, no multiplication is needed, so the cost is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >For each pattern of parenthesis try to find out the number of multiplications required.</span></p>",
            "<p><span >Leverage the optimal substructure property with dynamic programming to efficiently minimize matrix multiplication cost.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "microsoft",
            "factset"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int matrixMultiplication(vector<int> &arr) {\n        int n = arr.size();\n        // Create a 2D DP array to store the minimum\n        // multiplication costs\n        vector<vector<int>> dp(n, vector<int>(n, 0));\n\n        // Fill the DP array.\n        // Here, len is the chain length\n        for (int len = 2; len < n; len++) {\n            for (int i = 0; i < n - len; i++) {\n                int j = i + len;\n                dp[i][j] = INT_MAX;\n\n                for (int k = i + 1; k < j; k++) {\n                    int cost = dp[i][k] + dp[k][j] + arr[i] * arr[k] * arr[j];\n                    dp[i][j] = min(dp[i][j], cost);\n                }\n            }\n        }\n\n        // The minimum cost is stored in dp[0][n-1]\n        return dp[0][n - 1];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static int matrixMultiplication(int arr[]) {\n        int n = arr.length;\n\n        // Create a 2D DP array to store minimum\n        // multiplication costs\n        int[][] dp = new int[n][n];\n\n        // Fill the DP array\n        // len is the chain length\n        for (int len = 2; len < n; len++) {\n            for (int i = 0; i < n - len; i++) {\n                int j = i + len;\n                dp[i][j] = Integer.MAX_VALUE;\n\n                for (int k = i + 1; k < j; k++) {\n                    int cost = dp[i][k] + dp[k][j] + arr[i] * arr[k] * arr[j];\n                    if (cost < dp[i][j]) {\n                        dp[i][j] = cost;\n                    }\n                }\n            }\n        }\n\n        // Minimum cost is in dp[0][n-1]\n        return dp[0][n - 1];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def matrixMultiplication(self, arr):\n        n = len(arr)\n\n        # Create a 2D DP array to store min\n        # multiplication costs\n        dp = [[0] * n for _ in range(n)]\n\n        # Fill the DP array\n        # length is the chain length\n        for length in range(2, n):\n            for i in range(n - length):\n                j = i + length\n                dp[i][j] = float('inf')\n\n                for k in range(i + 1, j):\n                    cost = dp[i][k] + dp[k][j] + arr[i] * arr[k] * arr[j]\n                    dp[i][j] = min(dp[i][j], cost)\n\n        # Minimum cost is in dp[0][n-1]\n        return dp[0][n - 1]\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int matrixMultiplication(int[] arr) {\n        int n = arr.Length;\n\n        // Create a 2D DP array to store minimum\n        // multiplication costs\n        int[,] dp = new int[n, n];\n\n        // Fill the DP array\n        // len is the chain length\n        for (int len = 2; len < n; len++) {\n            for (int i = 0; i < n - len; i++) {\n                int j = i + len;\n                dp[i, j] = int.MaxValue;\n\n                for (int k = i + 1; k < j; k++) {\n                    int cost = dp[i, k] + dp[k, j] + arr[i] * arr[k] * arr[j];\n                    if (cost < dp[i, j]) {\n                        dp[i, j] = cost;\n                    }\n                }\n            }\n        }\n\n        // Minimum cost is in dp[0][n-1]\n        return dp[0, n - 1];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    matrixMultiplication(arr) {\n        const n = arr.length;\n\n        // Create a 2D DP array to store min\n        // multiplication costs\n        const dp = Array.from({length : n}, () => Array(n).fill(0));\n\n        // Fill the DP array\n        // len is the chain length\n        for (let len = 2; len < n; len++) {\n            for (let i = 0; i < n - len; i++) {\n                let j = i + len;\n                dp[i][j] = Infinity;\n\n                for (let k = i + 1; k < j; k++) {\n                    let cost = dp[i][k] + dp[k][j] + arr[i] * arr[k] * arr[j];\n                    dp[i][j] = Math.min(dp[i][j], cost);\n                }\n            }\n        }\n\n        // Minimum cost is in dp[0][n-1]\n        return dp[0][n - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}