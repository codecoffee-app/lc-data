{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705884,
            "title": "Matrix Game - 1",
            "titleSlug": "matrix-game-10229",
            "content": "<p><span style=\"font-size:18px\">Given <strong>N</strong> and&nbsp;a <strong>N*N matrix</strong> containing 0&rsquo;s and 1&rsquo;s. Group all the row numbers (starting index 0) which are having 1&rsquo;s at same position.</span></p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=4\r\nmatrix= [0010</span>\r\n\\t\\t<span style=\"font-size:18px\">0100</span>\r\n\\t\\t<span style=\"font-size:18px\">0010</span>\r\n\\t\\t<span style=\"font-size:18px\">0000]\r\n<strong>Output:</strong>\r\n0 1</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">In the above test case, 1st and 3rd row have\r\nthe 1&#39;s at same column,i.e., 2(starting index \r\nfrom 0) so group first and third row. And print \r\nthe index of first row, i.e., 0 (starting index \r\nfrom 0).</span>\r\n<span style=\"font-size:18px\">For second row, as it is the only row with same \r\nindexing of 1&#39;s so print it&#39;s index , i.e., 1.</span>\r\n<span style=\"font-size:18px\">For forth row, 1 is not present in this row so \r\ndidn&#39;t print anything.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=1\r\nmatrix = [0]\r\n<strong>Output:</strong>\r\n-1\r\n<strong>Explanation:</strong>\r\nThere is no row containing 1.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div><strong><span style=\"font-size:18px\">Your task:</span></strong></div>\r\n\r\n<div><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function</span><strong><span style=\"font-size:18px\"> groupRows(), </span></strong><span style=\"font-size:18px\">which takes &nbsp;the <strong>matrix</strong>&nbsp;and an integer <strong>N</strong> as input parameters and returns a list of row numbers after grouping. If there is no row containing 1, return&nbsp;<strong>-1</strong>.</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(n*n)</span></div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Auxiliary Space: </strong>O(n*n)</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><strong><span style=\"font-size:18px\">Constraints:</span></strong></div>\r\n\r\n<div><span style=\"font-size:18px\">1&lt;=N&lt;=20</span></div>\r\n\r\n<div>&nbsp;</div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N x N matrix containing 0s and 1s, group all row numbers (starting index 0) that have 1s at the same column positions. Return a list of the first row number for each group.",
                "constraints": [
                    "1 <= N <= 20"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nmatrix = [[0, 0, 1, 0],\n          [0, 1, 0, 0],\n          [0, 0, 1, 0],\n          [0, 0, 0, 0]]",
                        "output": "[0, 1]",
                        "explanation": "Rows 0 and 2 both have a 1 in the 2nd column (index 2). Row 1 has a 1 in the 1st column (index 1). Row 3 has no 1s. The output contains the lowest index of each group (0 and 1)."
                    },
                    {
                        "input": "N = 1\nmatrix = [[0]]",
                        "output": "-1",
                        "explanation": "No row contains a 1."
                    },
                    {
                        "input": "N = 2\nmatrix = [[1,0],[1,0]]",
                        "output": "[0]",
                        "explanation": "Both rows 0 and 1 has 1 at the same column so output is [0]"
                    },
                    {
                        "input": "N = 2\nmatrix = [[0,1],[1,0]]",
                        "output": "[0,1]",
                        "explanation": "row 0 has 1 at index 1. row 1 has 1 at index 0. so the output is [0,1]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>As it is a 0 , 1 matrix(binary) convert each row in Decimal form. And check the unique rows starting from index 0.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "ola-cabs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n//Function to group rows based on binary conversion of strings.\nvector<int> groupRows(vector<string> M, int n)\n{\n    set<int> s;\n    \n    //iterating over all the rows.\n    for(int i=0;i<n;i++)\n    {\n        //converting the binary string to number.\n        int number=stoi(M[i],0,2);\n        \n        //if non-zero number, inserting into set.\n        if(number)\n            s.insert(number);\n    }\n    \n    vector<int> ans;\n    \n    //iterating over set and adding numbers to answer vector.\n    for(int i=0;i<s.size();i++)\n        ans.push_back(i);\n        \n    //if no rows in answer, inserting -1.\n    if(!ans.size())\n        ans.push_back(-1);\n        \n    return ans;\n    \n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}