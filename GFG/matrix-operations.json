{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710021,
            "title": "Matrix Operations",
            "titleSlug": "matrix-operations",
            "content": "<p><span style=\"font-size:18px\">Given a binary matrix&nbsp;of dimensions <strong>M&nbsp;* N.&nbsp;</strong>One can perform the given operation in&nbsp;the matrix.</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">If the value of&nbsp;<strong>matrix[i][j]</strong>&nbsp;is&nbsp;<strong>0</strong>, then traverse in the same direction and check the next value.</span></li>\r\n\t<li><span style=\"font-size:18px\">If the value of&nbsp;<strong>matrix[i][j]</strong>&nbsp;is&nbsp;<strong>1</strong>, then update&nbsp;<strong>matrix[i][j]</strong>&nbsp;to&nbsp;<strong>0</strong>&nbsp;and change the current direction from&nbsp;<strong>up</strong>,&nbsp;<strong>right</strong>,&nbsp;<strong>down</strong>, or&nbsp;<strong>left</strong>&nbsp;to the directions&nbsp;<strong>right</strong>,&nbsp;<strong>down</strong>,&nbsp;<strong>left</strong>, and&nbsp;<strong>up</strong>&nbsp;respectively.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\">Initially you start from <strong>cell(0, 0)</strong>, moving in <strong>right</strong> direction.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">The task is to find the first cell&nbsp;of the matrix </span>&nbsp;<span style=\"font-size:18px\">which&nbsp;</span><span style=\"font-size:18px\">leads to outside the matrix from</span><span style=\"font-size:18px\">&nbsp;the traversal of the given matrix&nbsp;from the cell&nbsp;<strong>(0, 0)</strong> by performing the operations.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nmatrix[][] = {{0,1},\r\n\\t\\t  {1,0}}</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong> (1,1)\r\n<strong>Explanation:</strong>\r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/endpoint1-1622886995.jpg\" style=\"height:178px; width:300px\" />\r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/endpoint2-1622887085.jpg\" style=\"height:178px; width:500px\" />\r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/endpoint3-1622887174.jpg\" style=\"height:250px; width:500px\" /></span>\r\n\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nmatrix[][] = {{0, 1, 1, 1, 0},</span>\r\n\\t\\t\\t <span style=\"font-size:18px\">{1, 0, 1, 0, 1},\r\n\\t\\t  {1, 1, 1, 0, 0}}</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong> (2,0)</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>endPoints()</strong>&nbsp;that take the matrix as input parameter and output the last cell before the pointer gets outside of the matrix.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constrains:</strong><br />\r\n1&lt;= M, N&nbsp;&lt;=1000<br />\r\n0&lt;= matrix[i][j] &lt;=1</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary matrix of dimensions M * N, simulate a traversal starting from cell (0, 0) moving in the right direction.  The traversal follows these rules:\n\n*   If the current cell value is 0, continue moving in the same direction.\n*   If the current cell value is 1, change the cell's value to 0 and change the movement direction according to the following mapping:\n    *   Up -> Right\n    *   Right -> Down\n    *   Down -> Left\n    *   Left -> Up\n\nFind the last cell visited before the traversal moves outside the boundaries of the matrix.",
                "constraints": [
                    "1 <= M, N <= 1000",
                    "0 <= matrix[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "matrix = {{0,1},{1,0}}",
                        "output": "(1,1)",
                        "explanation": "The traversal path is (0,0) -> (0,1) -> (1,1) -> (1,0) -> out of bounds (bottom).  The last valid cell is (1,0) before it changes to up towards (1,1). then right and it goes out of bounds at (1,1)."
                    },
                    {
                        "input": "matrix = {{0, 1, 1, 1, 0},{1, 0, 1, 0, 1},{1, 1, 1, 0, 0}}",
                        "output": "(2,0)",
                        "explanation": "The traversal starts at (0, 0) and proceeds right. Detailed steps involve changes in direction based on encountering '1's until the path goes out of bounds, finally exiting from (2,0)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    bool issafe(int m, int n, int i, int j)\r\n    {\r\n     \r\n      // Cases for invalid cells\r\n      if (i < 0)\r\n        return false;\r\n      if (j < 0)\r\n        return false;\r\n      if (i >= m)\r\n        return false;\r\n      if (j >= n)\r\n        return false;\r\n     \r\n      // Return true if valid\r\n      return true;\r\n    }\r\n     \r\n    // Function to find indices of cells\r\n    // of a matrix from which traversal\r\n    // leads to out of the matrix\r\n    pair<int,int> endPoints(vector<vector<int>> arr){\r\n     \r\n      // Starting from cell (0, 0),\r\n      // traverse in right direction\r\n      int m = arr.size();\r\n      int n = arr[0].size();\r\n      int i = 0;\r\n      int j = 0;\r\n      int current_i = 0;\r\n      int current_j = 0;\r\n     \r\n      char current_d = 'r';\r\n     \r\n      // Stores direction changes\r\n      map<char,char> rcd = {{'l', 'u'},{'u', 'r'},\r\n                            {'r', 'd'},\r\n                            {'d', 'l'}};\r\n     \r\n      // Iterate until the current cell\r\n      // exceeds beyond the matrix\r\n      while (issafe(m, n, i, j)){\r\n     \r\n        // Current index\r\n        current_i = i;\r\n        current_j = j;\r\n     \r\n        // If the current cell is 1\r\n        if (arr[i][j] == 1){\r\n     \r\n          char move_in = rcd[current_d];\r\n     \r\n          // Update arr[i][j] = 0\r\n          arr[i][j] = 0;\r\n     \r\n          // Update indices according\r\n          // to the direction\r\n          if (move_in == 'u')\r\n            i -= 1;\r\n          else if(move_in == 'd')\r\n            i += 1;\r\n          else if(move_in == 'l')\r\n            j -= 1;\r\n          else if(move_in == 'r')\r\n            j += 1;\r\n     \r\n          current_d = move_in;\r\n     \r\n        }\r\n     \r\n        // Otherwise\r\n        else{\r\n          // Update indices according\r\n          // to the direction\r\n          if (current_d == 'u')\r\n            i -= 1;\r\n          else if(current_d == 'd')\r\n            i += 1;\r\n          else if(current_d == 'l')\r\n            j -= 1;\r\n          else if(current_d == 'r')\r\n            j += 1;\r\n        }\r\n      }\r\n     \r\n      // The exit cooridnates\r\n      return {current_i, current_j};\r\n     \r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    static boolean issafe(int m, int n, int i, int j)\r\n    {\r\n     \r\n      // Cases for invalid cells\r\n      if (i < 0)\r\n        return false;\r\n      if (j < 0)\r\n        return false;\r\n      if (i >= m)\r\n        return false;\r\n      if (j >= n)\r\n        return false;\r\n     \r\n      // Return true if valid\r\n      return true;\r\n    }\r\n     \r\n    // Function to find indices of cells\r\n    // of a matrix from which traversal\r\n    // leads to out of the matrix\r\n    static int [] endPoints(int [][]arr, int m, int n){\r\n     \r\n      // Starting from cell (0, 0),\r\n      // traverse in right direction\r\n      int i = 0;\r\n      int j = 0;\r\n      int current_i = 0;\r\n      int current_j = 0;\r\n     \r\n      char current_d = 'r';\r\n     \r\n      // Stores direction changes\r\n      Map<Character,Character> rcd = new HashMap<>();\r\n      rcd.put('l', 'u');\r\n      rcd.put('u', 'r');\r\n      rcd.put('r', 'd');\r\n      rcd.put('d', 'l');\r\n     \r\n      // Iterate until the current cell\r\n      // exceeds beyond the matrix\r\n      while (issafe(m, n, i, j)){\r\n     \r\n        // Current index\r\n        current_i = i;\r\n        current_j = j;\r\n     \r\n        // If the current cell is 1\r\n        if (arr[i][j] == 1){\r\n     \r\n          char move_in = rcd.get(current_d);\r\n     \r\n          // Update arr[i][j] = 0\r\n          arr[i][j] = 0;\r\n     \r\n          // Update indices according\r\n          // to the direction\r\n          if (move_in == 'u')\r\n            i -= 1;\r\n          else if(move_in == 'd')\r\n            i += 1;\r\n          else if(move_in == 'l')\r\n            j -= 1;\r\n          else if(move_in == 'r')\r\n            j += 1;\r\n     \r\n          current_d = move_in;\r\n     \r\n        }\r\n     \r\n        // Otherwise\r\n        else{\r\n          // Update indices according\r\n          // to the direction\r\n          if (current_d == 'u')\r\n            i -= 1;\r\n          else if(current_d == 'd')\r\n            i += 1;\r\n          else if(current_d == 'l')\r\n            j -= 1;\r\n          else if(current_d == 'r')\r\n            j += 1;\r\n        }\r\n      }\r\n     \r\n      // The exit cooridnates\r\n      return new int[]{current_i, current_j};\r\n     \r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution():\r\n    def issafe(self, m, n, i, j):\r\n     \r\n      if (i < 0):\r\n        return False\r\n      if (j < 0):\r\n        return False\r\n      if (i >= m):\r\n        return False\r\n      if (j >= n):\r\n        return False\r\n     \r\n      return True\r\n\r\n    def endPoints(self, matrix, m, n):\r\n     \r\n      i = 0\r\n      j = 0\r\n      current_i = 0\r\n      current_j = 0\r\n      current_d = 'r'\r\n     \r\n      rcd = {'l':'u','u':'r','r':'d','d':'l'}\r\n     \r\n      while (self.issafe(m, n, i, j)):\r\n        current_i = i\r\n        current_j = j\r\n     \r\n        if (matrix[i][j] == 1):\r\n     \r\n          move_in = rcd.get(current_d)\r\n          matrix[i][j] = 0\r\n     \r\n          if (move_in == 'u'):\r\n            i -= 1\r\n          elif(move_in == 'd'):\r\n            i += 1\r\n          elif(move_in == 'l'):\r\n            j -= 1\r\n          elif(move_in == 'r'):\r\n            j += 1\r\n     \r\n          current_d = move_in\r\n     \r\n        else:\r\n          if (current_d == 'u'):\r\n            i -= 1\r\n          elif(current_d == 'd'):\r\n            i += 1\r\n          elif(current_d == 'l'):\r\n            j -= 1\r\n          elif(current_d == 'r'):\r\n            j += 1\r\n     \r\n      return [current_i, current_j]\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\r\n\r\nclass Solution {\r\n  issafe(m, n, i, j) {\r\n    // Cases for invalid cells\r\n    if (i < 0) return false;\r\n    if (j < 0) return false;\r\n    if (i >= m) return false;\r\n    if (j >= n) return false;\r\n\r\n    // Return true if valid\r\n    return true;\r\n  }\r\n  endPoints(arr, m, n) {\r\n    // code here\r\n    // Starting from cell (0, 0),\r\n    // traverse in right direction\r\n\r\n    let i = 0;\r\n    let j = 0;\r\n    let current_i = 0;\r\n    let current_j = 0;\r\n\r\n    let current_d = 'r';\r\n\r\n    // Stores direction changes\r\n    let rcd = { l: 'u', u: 'r', r: 'd', d: 'l' };\r\n\r\n    // Iterate until the current cell\r\n    // exceeds beyond the matrix\r\n    while (this.issafe(m, n, i, j)) {\r\n      // Current index\r\n      current_i = i;\r\n      current_j = j;\r\n      // If the current cell is 1\r\n      if (arr[i][j] === 1) {\r\n        let move_in = rcd[current_d];\r\n\r\n        // Update arr[i][j] = 0\r\n        arr[i][j] = 0;\r\n\r\n        // Update indices according\r\n        // to the direction\r\n        if (move_in === 'u') i -= 1;\r\n        else if (move_in === 'd') i += 1;\r\n        else if (move_in === 'l') j -= 1;\r\n        else if (move_in === 'r') j += 1;\r\n\r\n        current_d = move_in;\r\n      }\r\n\r\n      // Otherwise\r\n      else {\r\n        // Update indices according\r\n        // to the direction\r\n        if (current_d === 'u') i -= 1;\r\n        else if (current_d === 'd') i += 1;\r\n        else if (current_d === 'l') j -= 1;\r\n        else if (current_d === 'r') j += 1;\r\n      }\r\n    }\r\n\r\n    // The exit cooridnates\r\n    return [current_i, current_j];\r\n  }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}