{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700559,
            "title": "Max and min element in Binary Tree",
            "titleSlug": "max-and-min-element-in-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree, find <strong>maximum </strong>and <strong>minimum </strong>elements in it.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>\n</span>\\t     <img style=\"height: 310px; width: 311px;\" src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/maxMin.png\" alt=\"\" />\n<span style=\"font-size: 18px;\"><strong>Output: </strong>11 1\n<strong>Explanation:</strong></span> <span style=\"font-size: 18px;\">The maximum and minimum element in this binary tree is 11 and 1 respectively.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span>\n\\t  <span style=\"font-size: 18px;\">   6\n&nbsp;\\t / \\\n&nbsp;\\t5   8\n&nbsp;     /\n&nbsp;    2</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>8 2<br /><strong>Explanation: </strong></span><span >The maximum and minimum element in this binary tree is 8 and 2 respectively.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= data of a node &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, find the maximum and minimum values present in the tree.",
                "constraints": [
                    "The number of nodes in the tree is between 1 and 100,000 (inclusive).",
                    "The value of each node is between 1 and 100,000 (inclusive)."
                ],
                "testcases": [
                    {
                        "input": "       6\n     / \\\n    5   8\n   / \n  2",
                        "output": "8 2",
                        "explanation": "The largest value in the tree is 8, and the smallest value is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use recursion and tree traversal.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\npublic:\n    //Function to find the maximum value in a binary tree.\n    int findMax(Node *root)\n    {\n        //If root is null, return INT_MIN as there is no value to compare.\n        if (root == nullptr)\n        {\n            return INT_MIN;\n        }\n        //Return the maximum value among root's data and maximum values in its left and right subtree.\n        return max({root->data, findMax(root->left), findMax(root->right)});\n    }\n\n    //Function to find the minimum value in a binary tree.\n    int findMin(Node *root)\n    {\n        //If root is null, return INT_MAX as there is no value to compare.\n        if (root == nullptr)\n        {\n            return INT_MAX;\n        }\n        //Return the minimum value among root's data and minimum values in its left and right subtree.\n        return min({root->data, findMin(root->left), findMin(root->right)});\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution{\n    // Function to find the maximum value in a binary tree\n    public static int findMax(Node root){\n        // If the root is null, return the minimum possible value\n        if(root==null){\n            return Integer.MIN_VALUE;\n        }\n        // Find the maximum value between the root data, the maximum value in the left subtree, and the maximum value in the right subtree\n        return Math.max(root.data, Math.max(findMax(root.left), findMax(root.right)));\n    }\n  \n    // Function to find the minimum value in a binary tree\n    public static int findMin(Node root){\n         // If the root is null, return the maximum possible value\n        if(root==null){\n            return Integer.MAX_VALUE;\n        }\n        // Find the minimum value between the root data, the minimum value in the left subtree, and the minimum value in the right subtree\n        return Math.min(root.data, Math.min(findMin(root.left), findMin(root.right)));\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to find maximum value in a binary tree.\n    def findMax(self,root):\n        if(root==None):\n            return -1000000\n        return max(root.data,self.findMax(root.left),self.findMax(root.right))\n    \n    #Function to find minimum value in a binary tree.\n    def findMin(self,root):\n        if(root==None):\n            return 1000000\n        return min(root.data,self.findMin(root.left),self.findMin(root.right))",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\n\nclass Solution {\n  findMax(root) {\n    if (root === null) return Number.MIN_VALUE; // If the root is null, return the minimum possible value.\n    return Math.max( // Return the maximum among the root's value, the maximum value in the left subtree, and the maximum value in the right subtree.\n      root.data,\n      this.findMax(root.left),\n      this.findMax(root.right)\n    );\n  }\n  findMin(root) {\n    if (root === null) return Number.MAX_VALUE; // If the root is null, return the maximum possible value.\n    return Math.min( // Return the minimum among the root's value, the minimum value in the left subtree, and the minimum value in the right subtree.\n      root.data,\n      this.findMin(root.left),\n      this.findMin(root.right)\n    );\n  }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}