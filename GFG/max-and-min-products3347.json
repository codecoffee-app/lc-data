{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702739,
            "title": "Max and Min Products",
            "titleSlug": "max-and-min-products3347",
            "content": "<p class=\"whitespace-pre-wrap break-words\"><span >Given an array <strong>arr[]</strong> of integers, find the maximum and minimum possible product among all subsets of the array.</span></p>\n<p class=\"whitespace-pre-wrap break-words\"><span ><strong>Examples:</strong></span></p>\n<pre class=\"whitespace-pre-wrap break-words\"><span ><strong>Input:</strong> arr[] = [1, 2, 3]\n<strong>Output:</strong> [6, 1]\n<strong>Explanation:</strong> Maximum product is 6 obtained by multiplying 2 and 3. Minimum product is 1 obtained by selecting only 1.</span></pre>\n<pre class=\"whitespace-pre-wrap break-words\"><span ><strong>Input:</strong> arr[] = [4, -2, 5]\n<strong>Output:</strong> [20, -40]\n<strong>Explanation:</strong> Maximum product is 20 obtained by multiplying 4 and 5. Minimum product is -40 obtained by multiplying 4, -2, and 5.</span></pre>\n<p class=\"whitespace-pre-wrap break-words\"><span ><strong>Expected Time Complexity:</strong> O(n) <br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span > </span></p>\n<p class=\"whitespace-pre-wrap break-words\"><span ><strong>Constraints:</strong> <br />1 &le; arr.size() &le; 10<sup>6</sup><br />-10<sup>5</sup> &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum and minimum possible product among all its subsets.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-10^5 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3]",
                        "output": "[6, 1]",
                        "explanation": "The maximum product (6) is achieved by multiplying 2 and 3. The minimum product (1) is achieved by selecting the element 1 as a subset."
                    },
                    {
                        "input": "[4, -2, 5]",
                        "output": "[20, -40]",
                        "explanation": "The maximum product (20) is achieved by multiplying 4 and 5. The minimum product (-40) is achieved by multiplying 4, -2, and 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try Storing maximum and minimum product at each point.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<long long> maxMinProduct(vector<int>& arr) {\n        long long int n = arr.size();\n        if (n == 0)\n            return {0, 0}; // Handle empty array\n\n        long long int curMaxProduct = arr[0];\n        long long int curMinProduct = arr[0];\n        long long int prevMaxProduct = arr[0];\n        long long int prevMinProduct = arr[0];\n        long long int maxProduct = arr[0];\n        long long int minProduct = arr[0];\n\n        for (int i = 1; i < n; ++i) {\n            // Compute current max and min products\n            curMaxProduct = max(prevMaxProduct * arr[i],\n                                max(prevMinProduct * arr[i], (long long)arr[i]));\n            curMaxProduct = max(curMaxProduct, prevMaxProduct);\n\n            curMinProduct = min(prevMaxProduct * arr[i],\n                                min(prevMinProduct * arr[i], (long long)arr[i]));\n            curMinProduct = min(curMinProduct, prevMinProduct);\n\n            // Update overall max and min products\n            maxProduct = max(maxProduct, curMaxProduct);\n            minProduct = min(minProduct, curMinProduct);\n\n            // Update previous products for next iteration\n            prevMaxProduct = curMaxProduct;\n            prevMinProduct = curMinProduct;\n        }\n\n        return {maxProduct, minProduct};\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<Long> maxMinProduct(int[] arr) {\n        int n = arr.length;\n        if (n == 0) return Arrays.asList(0L, 0L); // Handle empty array\n\n        long curMaxProduct = arr[0];\n        long curMinProduct = arr[0];\n        long prevMaxProduct = arr[0];\n        long prevMinProduct = arr[0];\n        long maxProduct = arr[0];\n        long minProduct = arr[0];\n\n        for (int i = 1; i < n; ++i) {\n            // Compute current max and min products\n            curMaxProduct = Math.max(prevMaxProduct * arr[i],\n                                     Math.max(prevMinProduct * arr[i], arr[i]));\n            curMaxProduct = Math.max(curMaxProduct, prevMaxProduct);\n\n            curMinProduct = Math.min(prevMaxProduct * arr[i],\n                                     Math.min(prevMinProduct * arr[i], arr[i]));\n            curMinProduct = Math.min(curMinProduct, prevMinProduct);\n\n            // Update overall max and min products\n            maxProduct = Math.max(maxProduct, curMaxProduct);\n            minProduct = Math.min(minProduct, curMinProduct);\n\n            // Update previous products for next iteration\n            prevMaxProduct = curMaxProduct;\n            prevMinProduct = curMinProduct;\n        }\n\n        return Arrays.asList(maxProduct, minProduct);\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def maxMinProduct(self, arr):\n        n = len(arr)\n        if n == 0:\n            return [0, 0]  # Handle empty array\n\n        curMaxProduct = arr[0]\n        curMinProduct = arr[0]\n        prevMaxProduct = arr[0]\n        prevMinProduct = arr[0]\n        maxProduct = arr[0]\n        minProduct = arr[0]\n\n        for i in range(1, n):\n            # Compute current max and min products\n            curMaxProduct = max(prevMaxProduct * arr[i],\n                                max(prevMinProduct * arr[i], arr[i]))\n            curMaxProduct = max(curMaxProduct, prevMaxProduct)\n            curMinProduct = min(prevMaxProduct * arr[i],\n                                min(prevMinProduct * arr[i], arr[i]))\n            curMinProduct = min(curMinProduct, prevMinProduct)\n\n            # Update overall max and min products\n            maxProduct = max(maxProduct, curMaxProduct)\n            minProduct = min(minProduct, curMinProduct)\n\n            # Update previous products for next iteration\n            prevMaxProduct = curMaxProduct\n            prevMinProduct = curMinProduct\n\n        return [maxProduct, minProduct]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxMinProduct(arr) {\n        const n = arr.length;\n        if (n === 0) return [ 0, 0 ]; // Handle empty array\n\n        let curMaxProduct = arr[0];\n        let curMinProduct = arr[0];\n        let prevMaxProduct = arr[0];\n        let prevMinProduct = arr[0];\n        let maxProduct = arr[0];\n        let minProduct = arr[0];\n\n        for (let i = 1; i < n; i++) {\n            // Compute current max and min products\n            curMaxProduct = Math.max(prevMaxProduct * arr[i],\n                                     Math.max(prevMinProduct * arr[i], arr[i]));\n            curMaxProduct = Math.max(curMaxProduct, prevMaxProduct);\n\n            curMinProduct = Math.min(prevMaxProduct * arr[i],\n                                     Math.min(prevMinProduct * arr[i], arr[i]));\n            curMinProduct = Math.min(curMinProduct, prevMinProduct);\n\n            // Update overall max and min products\n            maxProduct = Math.max(maxProduct, curMaxProduct);\n            minProduct = Math.min(minProduct, curMinProduct);\n\n            // Update previous products for next iteration\n            prevMaxProduct = curMaxProduct;\n            prevMinProduct = curMinProduct;\n        }\n\n        return [ maxProduct, minProduct ];\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}