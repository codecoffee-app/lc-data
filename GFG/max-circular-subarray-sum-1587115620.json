{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701216,
            "title": "Max Circular Subarray Sum",
            "titleSlug": "max-circular-subarray-sum-1587115620",
            "content": "<p><span >Given an array of integers <strong>arr[]</strong> in a <strong>circular</strong> fashion. Find </span><span >the <strong>maximum </strong>subarray sum that we can get if we assume the array to be circular.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [8, -8, 9, -9, 10, -11, 12]\n<strong>Output: </strong>22<strong>\nExplanation: </strong>Starting from the last element of the array, i.e, 12, and moving in a circular fashion, we have max subarray as 12, 8, -8, 9, -9, 10, which gives maximum sum as 22.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [10, -3, -4, 7, 6, 5, -4, -1]\n<strong>Output: </strong>23<strong>\nExplanation: </strong>Maximum sum of the circular subarray is 23. The subarray is [7, 6, 5, -4, -1, 10].<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [-1, 40, -14, 7, 6, 5, -4, -1] </span><br /><span ><strong>Output: </strong>52<strong>\nExplanation: </strong>Circular Subarray [7, 6, 5, -4, -1, -1, 40] has the maximum sum, which is 52.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />-10<sup>4&nbsp;</sup>&lt;= arr[i] &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a circular array of integers `arr[]`, find the maximum possible sum of a contiguous subarray within the array. The array is considered circular, meaning the last element is adjacent to the first element.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "-10^4 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[8, -8, 9, -9, 10, -11, 12]",
                        "output": "22",
                        "explanation": "The maximum circular subarray sum is achieved by the subarray [12, 8, -8, 9, -9, 10], which sums to 22."
                    },
                    {
                        "input": "[10, -3, -4, 7, 6, 5, -4, -1]",
                        "output": "23",
                        "explanation": "The maximum circular subarray sum is achieved by the subarray [7, 6, 5, -4, -1, 10], which sums to 23."
                    },
                    {
                        "input": "[-1, 40, -14, 7, 6, 5, -4, -1]",
                        "output": "52",
                        "explanation": "The maximum circular subarray sum is achieved by the subarray [7, 6, 5, -4, -1, -1, 40], which sums to 52."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Kadane&rsquo;s algorithm to find the max subarray sum, then try wrapping by subtracting the min subarray sum from the total array sum; take the maximum of these.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find maximum circular subarray sum.\n    int circularSubarraySum(vector<int> &a) {\n        int n = a.size();\n        bool flag = false;\n        int count = 0;\n        int maxx = INT_MIN;\n        for (int i = 0; i < n; i++) {\n            // Storing the maximum element in the array.\n            if (a[i] > maxx)\n                maxx = a[i];\n            // Counting total number of negative numbers in the array.\n            if (a[i] < 0)\n                count++;\n        }\n        if (count == n)\n            return maxx;\n\n        // Case 1:We get the maximum sum using standard Kadane's algorithm.\n        int max_kadane = kadane(a);\n\n        // Case 2:We now find the maximum sum that includes corner elements.\n        int max_wrap = 0, i;\n        for (i = 0; i < n; i++) {\n            // Calculating total sum of array elements.\n            max_wrap += a[i];\n            // Inverting the sign of array elements.\n            a[i] = -a[i];\n        }\n\n        // Maximum sum with corner elements will be:\n        // Total sum of array elements-(-max subarray sum after changing\n        // sign of array elements).\n        max_wrap = max_wrap + kadane(a);\n\n        // The maximum circular subarray sum will be maximum of two sums.\n        return (max_wrap > max_kadane) ? max_wrap : max_kadane;\n    }\n\n    // Standard Kadane's algorithm to find maximum subarray sum.\n    int kadane(vector<int> &a) {\n        int max_so_far = 0, max_ending_here = 0;\n        int i;\n        int n = a.size();\n        for (i = 0; i < n; i++) {\n            // Storing max sum till current index.\n            max_ending_here = max_ending_here + a[i];\n            // If max sum till current index is negative, we update it to 0.\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n            // Storing the max sum so far.\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to find maximum circular subarray sum.\n    public int circularSubarraySum(int a[]) {\n        int n = a.length;\n        int count = 0;\n        int maxx = Integer.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n            // Storing the maximum element in the array.\n            if (a[i] > maxx) maxx = a[i];\n            // Counting total number of negative numbers in the array.\n            if (a[i] < 0) count++;\n        }\n        if (count == n) return maxx;\n\n        // Case 1:We get the maximum sum using standard Kadane's algorithm.\n        int max_kadane = kadane(a);\n\n        // Case 2:We now find the maximum sum that includes corner elements.\n        int max_wrap = 0;\n        for (int i = 0; i < n; i++) {\n            // Calculating total sum of array elements.\n            max_wrap += a[i];\n            // Inverting the sign of array elements.\n            a[i] = -a[i];\n        }\n\n        // Maximum sum with corner elements will be:\n        // Total sum of array elements-(-max subarray sum after changing\n        // sign of array elements).\n        max_wrap = max_wrap + kadane(a);\n\n        // The maximum circular subarray sum will be maximum of two sums.\n        return (max_wrap > max_kadane) ? max_wrap : max_kadane;\n    }\n\n    // Standard Kadane's algorithm to find maximum subarray sum.\n    public int kadane(int a[]) {\n        int n = a.length;\n        int max_so_far = 0, max_ending_here = 0;\n        for (int i = 0; i < n; i++) {\n            // Storing max sum till current index.\n            max_ending_here = max_ending_here + a[i];\n\n            // If max sum till current index is negative, we update it to 0.\n            if (max_ending_here < 0) max_ending_here = 0;\n\n            // Storing the max sum so far.\n            if (max_so_far < max_ending_here) max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# finding the maximum sum subarray\n\n\n#Standard Kadane's algorithm to find maximum subarray sum.\ndef kadane(arr):\n\n    max_so_far = 0\n    max_ending_here = 0\n    n = len(arr)\n    for i in range(0, n):\n        #Storing max sum till current index.\n        max_ending_here = max_ending_here + arr[i]\n\n        #If max sum till current index is negative, we update it to 0.\n        if (max_ending_here < 0):\n            max_ending_here = 0\n\n        #Storing the max sum so far.\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n    return max_so_far\n\n\n#Function to find maximum circular subarray sum.\ndef circularSubarraySum(arr):\n    n = len(arr)\n    count = 0\n    maxx = -sys.maxsize - 1\n    for i in range(0, n):\n        #Storing the maximum element in the array.\n        if (arr[i] > maxx):\n            maxx = arr[i]\n        #Counting total number of negative numbers in the array.\n        if (arr[i] < 0):\n            count = count + 1\n\n    if (count == n):\n        return maxx\n\n#Case 1:We get the maximum sum using standard Kadane's algorithm.\n    max_kadane = kadane(arr)\n\n    #Case 2:We now find the maximum sum that includes corner elements.\n    max_wrap = 0\n    for i in range(0, n):\n        #Calculating total sum of array elements.\n        max_wrap += arr[i]\n        #Inverting the sign of array elements.\n        arr[i] = -arr[i]\n\n\n#Maximum sum with corner elements will be:\n#Total sum of array elements-(-max subarray sum after changing\n#sign of array elements).\n    max_wrap = max_wrap + kadane(arr)\n\n    #The maximum circular sum will be maximum of two sums.\n    if max_wrap > max_kadane:\n        return max_wrap\n    else:\n        return max_kadane\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {[number[]} arr\n * @returns {number}\n */\nclass Solution {\n    // Function to find maximum circular subarray sum.\n    circularSubarraySum(arr) {\n        let flag = false;\n        let count = 0;\n        let N = arr.length;\n        let maxx = -1e9;\n        for (let i = 0; i < N; i++) {\n            // Storing the maximum element in the array.\n            if (arr[i] > maxx) maxx = arr[i];\n            // Counting total number of negative numbers in the array.\n            if (arr[i] < 0) count++;\n        }\n        if (count == N) return maxx;\n\n        // Case 1:We get the maximum sum using standard Kadane's algorithm.\n        let max_kadane = this.kadane(arr);\n\n        // Case 2:We now find the maximum sum that includes corner elements.\n        let max_wrap = 0, i;\n        for (i = 0; i < N; i++) {\n            // Calculating total sum of array elements.\n            max_wrap += arr[i];\n            // Inverting the sign of array elements.\n            arr[i] = -arr[i];\n        }\n\n        // Maximum sum with corner elements will be:\n        // Total sum of array elements-(-max subarray sum after changing\n        // sign of array elements).\n        max_wrap = max_wrap + this.kadane(arr);\n\n        // The maximum circular subarray sum will be maximum of two sums.\n        return (max_wrap > max_kadane) ? max_wrap : max_kadane;\n    }\n\n    // Standard Kadane's algorithm to find maximum subarray sum.\n    kadane(arr) {\n        let N = arr.length;\n        let max_so_far = 0, max_ending_here = 0;\n        let i;\n        for (i = 0; i < N; i++) {\n            // Storing max sum till current index.\n            max_ending_here = max_ending_here + arr[i];\n            // If max sum till current index is negative, we update it to 0.\n            if (max_ending_here < 0) max_ending_here = 0;\n\n            // Storing the max sum so far.\n            if (max_so_far < max_ending_here) max_so_far = max_ending_here;\n        }\n        return max_so_far;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}