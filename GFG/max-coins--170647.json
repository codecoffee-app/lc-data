{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714273,
            "title": "Max Coins",
            "titleSlug": "max-coins--170647",
            "content": "<p><span style=\"font-size: 18px;\">You are given a 2D integer array <strong>ranges </strong>whose length is <strong>n </strong>where&nbsp;<strong>ranges[i]=[start<sub>i</sub>, end,coins<sub>i</sub>]</strong> means all integers from start<sub>i</sub> to end<sub>i</sub> inclusive start<sub>i</sub> and end<sub>i</sub> are present and we get <strong>coins<sub>i</sub></strong>&nbsp;amount of <strong>coins</strong> when we select this <strong>i<sup>th</sup></strong> range. You can select <strong>at most</strong>&nbsp;two intervals so as to collect maximum coins but if you select two ranges then those two ranges <strong>should not intersect or overlap but can touch each other.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: <br /></span><span style=\"font-size: 18px;\">1. You can select at max 2 ranges and they should not intersect with each other but they can touch themselves.<br />2. Two ranges (A1,A2) and (A3,A4) are overlapping when A3&lt;A2, for example (2,3) and (2,4) are overlapping, (2,5) and (4,6) are overlapping, but (2,3) and (3,4) are not overlapping also (2,2) and (2,2) are not overlapping.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :\n</strong>n=3\nranges={{1,3,4},{2,3,5},{3,4,2}}</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>7</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nWe can see that we can take 2nd and \n3rd ranges as they are not intersecting\n(only touching) we get maximum Coins by \ntaking these ranges(5+2=7).</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong>\nn=5\nranges={{1,3,4},{2,3,5},{3,4,2},{5,8,9},{2,8,10}}</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>14</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nWe can see that we can take 2nd and \n4th ranges as they are not intersecting \nwe get maximum Coins(5+9=14) by taking \nthese ranges.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>maxCoins()</strong> which takes an integer <strong>n</strong>(<strong>length of ranges</strong>), integer 2D integer array<strong> ranges,&nbsp;</strong>and you have to return the <strong>maximum</strong> number of <strong>coins</strong>&nbsp;you got after selecting <strong>at most</strong>&nbsp;two ranges that are not intersecting.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn)<br /><strong>Expected Space Complexity:</strong> O(n)</span><br /><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=<strong>n</strong>&lt;=10<sup>5</sup><br />0&lt;=<strong>ranges</strong>[i][0]&lt;=<strong>ranges</strong>[i][1]&lt;=10<sup>9</sup><br />0&lt;=<strong>ranges</strong>[i][2](coins)&lt;=10<sup>6</sup><br />The sum of n over all test cases won't exceed 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D integer array `ranges` of length `n`, where `ranges[i] = [start_i, end_i, coins_i]` represents an interval from `start_i` to `end_i` (inclusive) that yields `coins_i` coins when selected. The goal is to select at most two non-overlapping ranges to maximize the total coins collected. Two ranges are considered non-overlapping if the end of one range is less than or equal to the start of the other.  Ranges can touch but cannot overlap.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= ranges[i][0] <= ranges[i][1] <= 10^9",
                    "0 <= ranges[i][2] (coins) <= 10^6",
                    "The sum of n over all test cases won't exceed 10^6"
                ],
                "testcases": [
                    {
                        "input": "n=3\nranges={{1,3,4},{2,3,5},{3,4,2}}",
                        "output": "7",
                        "explanation": "Selecting the second range ([2, 3, 5]) and the third range ([3, 4, 2]) yields a total of 5 + 2 = 7 coins. These ranges touch but do not overlap, and this combination provides the maximum possible coin total."
                    },
                    {
                        "input": "n=5\nranges={{1,3,4},{2,3,5},{3,4,2},{5,8,9},{2,8,10}}",
                        "output": "14",
                        "explanation": "Selecting the second range ([2, 3, 5]) and the fourth range ([5, 8, 9]) yields a total of 5 + 9 = 14 coins. These ranges do not overlap, and no other combination of one or two ranges results in a higher coin total."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We can store the maximum coins we can get with a starting point greater than a particular value&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    int dp(int idx,int d,vector<vector<int>> &ranges,vector<vector<int>> &memo){\n        // base case: if the index is beyond the ranges or d exceeds 1, return 0\n        if(idx>=ranges.size() or d>1) return 0;\n        \n        // check if the result for current index and d is already memoized\n        if(memo[idx][d]!=-1) return memo[idx][d];\n        \n        // assume not taking the current range and move to the next index and same d\n        int ans=dp(idx+1,d,ranges,memo);\n        \n        // find the new index to continue with d+1\n        int new_idx=1e9,l=idx+1,r=ranges.size()-1;\n        while(l<=r){\n            int mid=l+(r-l)/2;\n            if(ranges[mid][0]>=ranges[idx][1]){\n                new_idx=mid;\n                r=mid-1;\n            }\n            else{\n                l=mid+1;\n            }\n        }\n        \n        // assume taking the current range and move to the new index for d+1\n        ans=max(ans,dp(new_idx,d+1,ranges,memo)+ranges[idx][2]);\n        \n        // memoize the result for current index and d\n        return memo[idx][d]=ans;\n    }\n    \n    int maxCoins(int n,vector<vector<int>> &ranges){\n        // sort the ranges based on the starting point\n        sort(ranges.begin(),ranges.end());\n        \n        // create memoization table\n        vector<vector<int>> memo(n+5,vector<int>(2,-1));\n        \n        // call the dp function with initial index 0 and d 0\n        return dp(0,0,ranges,memo);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\r\n    static int dp[][];\r\n    public static int maxCoins(int n,int ranges[][])\r\n    {\r\n        Arrays.sort(ranges,new Comparator<int[]>(){\r\n            public int compare(int first[],int second[]){\r\n                if(first[0]==second[0])\r\n                return first[1]-second[1];\r\n                else\r\n                return first[0]-second[0];\r\n            }\r\n        });\r\n        dp=new int[n+1][3];\r\n        for(int i=0;i<n+1;i++){\r\n            Arrays.fill(dp[i],-1);\r\n        }\r\n        return fun(ranges,0,0);\r\n    }\r\n    public static int fun(int ranges[][],int i,int taken)\r\n    {\r\n        \r\n        if(i>=ranges.length || taken>1) return 0;\r\n        if(dp[i][taken]!=-1){\r\n            return dp[i][taken];\r\n        }\r\n        int ans=fun(ranges,i+1,taken);\r\n        int new_idx=(int)(1e9),l=i+1,r=ranges.length-1;\r\n        while(l<=r){\r\n            int mid=l+(r-l)/2;\r\n            if(ranges[mid][0]>=ranges[i][1]){\r\n                new_idx=mid;\r\n                r=mid-1;\r\n            }\r\n            else{\r\n                l=mid+1;\r\n            }\r\n        }\r\n        ans=Math.max(ans,fun(ranges,new_idx,taken+1)+ranges[i][2]);\r\n        return dp[i][taken]=ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom bisect import bisect_left\n\n\nclass Solution:\n    def maxCoins(self,n,ranges):\n        #Sorting the ranges based on their end points \n        ranges.sort(key=lambda x:(x[1],x[0]))\n        \n        #Initializing variables\n        temp=[-1]\n        d={}\n        d[-1]=0\n        ans=0\n        prev=0\n        \n        #Iterating over the ranges\n        for i in range(n):\n            #Updating the maximum answer\n            ans=max(ans,ranges[i][2])\n            \n            #Finding the index of the start point in the temp list\n            ind=bisect_left(temp,ranges[i][0])\n            \n            #Checking if the start point is not found and adjusting the index\n            if ind>=len(temp) or ranges[i][0]<temp[ind]:\n                ind-=1\n            \n            #Updating the maximum answer by considering the current range and the previous maximum answer\n            ans=max(ans,ranges[i][2]+d[temp[ind]])\n            \n            #Updating the maximum answer for the current end point\n            d[ranges[i][1]]=max(prev,ranges[i][2])\n            \n            #Adding the current end point to the temp list\n            temp.append(ranges[i][1])\n            \n            #Updating the previous maximum answer\n            prev=max(prev,ranges[i][2])\n        \n        #Returning the maximum answer\n        return ans",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}