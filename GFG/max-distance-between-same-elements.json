{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700402,
            "title": "Max distance between same elements",
            "titleSlug": "max-distance-between-same-elements",
            "content": "<p><span style=\"font-size: 20px;\">Given an array <strong>arr[]</strong>, the task is to find the maximum distance between two occurrences of an element. If no element has two occurrences, then return 0.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input: </strong></span><span style=\"font-size: 20px;\">arr[] = [1, 1, 2, 2, 2, 1]</span>\n<span style=\"font-size: 20px;\"><strong>Output: </strong>5</span>\n<span style=\"font-size: 20px;\"><strong>Explanation: </strong>distance for 1 is: 5-0 = 5, distance for 2 is : 4-2 = 2, So max distance is 5.</span></pre>\n<pre><span style=\"font-size: 20px;\"><strong>Input: </strong>arr[] = [3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2]</span>\n<span style=\"font-size: 20px;\"><strong>Output: </strong>10</span>\n<span style=\"font-size: 20px;\"><strong>Explanation: </strong></span><span style=\"font-size: 20px;\">maximum distance for 2 is 11-1 = 10, maximum distance for 1 is 4-2 = 2 ,maximum distance for 4 is 10-5 = 5, So max distance is 10.<br /></span></pre>\n<pre><strong><span style=\"font-size: 20px;\">Input: </span></strong><span style=\"font-size: 20px;\">arr[] = [1, 2, 3, 6, 5, 4]<br /><strong>Output: </strong>0<br /><strong>Explanation: </strong>No element has two occurrences, so maximum distance = 0.<br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity </strong>:&nbsp; O(n)<br /><strong>Expected Auxilliary Space </strong>: O(n)</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 20px;\">1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, find the maximum distance between two occurrences of the same element. The distance is calculated as the difference between the indices of the last and first occurrences of the element. If no element has more than one occurrence, return 0.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1, 1, 2, 2, 2, 1]",
                        "output": "5",
                        "explanation": "The element 1 has first occurrence at index 0 and last occurrence at index 5, distance is 5-0 = 5. The element 2 has first occurrence at index 2 and last occurrence at index 4, distance is 4-2 = 2.  The maximum distance is 5."
                    },
                    {
                        "input": "[3, 2, 1, 2, 1, 4, 5, 8, 6, 7, 4, 2]",
                        "output": "10",
                        "explanation": "The element 2 has first occurrence at index 1 and last occurrence at index 11, distance is 11-1 = 10. The element 1 has first occurrence at index 2 and last occurrence at index 4, distance is 4-2 = 2. The element 4 has first occurrence at index 5 and last occurrence at index 10, distance is 10-5 = 5. The maximum distance is 10."
                    },
                    {
                        "input": "[1, 2, 3, 6, 5, 4]",
                        "output": "0",
                        "explanation": "No element has more than one occurrence. Therefore, the maximum distance is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use data structure to store the farthest occurrences of elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxDistance(vector<int> &arr) {\n        int n = arr.size();\n        unordered_map<int, int> mp;\n        int max_dist = 0;\n        for (int i = 0; i < n; i++) {\n            if (mp.find(arr[i]) == mp.end())\n                mp[arr[i]] = i;\n            else\n                max_dist = max(max_dist, i - mp[arr[i]]);\n        }\n        return max_dist;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxDistance(int[] arr) {\n        int n = arr.length;\n        Map<Integer, Integer> mp = new HashMap<>();\n        int max_dist = 0;\n        for (int i = 0; i < n; i++) {\n            if (!mp.containsKey(arr[i])) {\n                mp.put(arr[i], i);\n            } else {\n                max_dist = Math.max(max_dist, i - mp.get(arr[i]));\n            }\n        }\n        return max_dist;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def maxDistance(self, arr):\n        n = len(arr)\n        mp = {}\n        max_dist = 0\n        for i in range(n):\n            if arr[i] not in mp:\n                mp[arr[i]] = i\n            else:\n                max_dist = max(max_dist, i - mp[arr[i]])\n        return max_dist\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxDistance(arr) {\n        let n = arr.length;\n        let mp = new Map();\n        let max_dist = 0;\n        for (let i = 0; i < n; i++) {\n            if (!mp.has(arr[i])) {\n                mp.set(arr[i], i);\n            } else {\n                max_dist = Math.max(max_dist, i - mp.get(arr[i]));\n            }\n        }\n        return max_dist;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}