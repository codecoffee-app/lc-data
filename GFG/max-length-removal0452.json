{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702740,
            "title": "Max Length Removal",
            "titleSlug": "max-length-removal0452",
            "content": "<p><span >You are given a binary string <code>S</code> consisting of only characters '0' and '1'. You can repeatedly delete any occurrence of the sub-string \"100\" from <code>S</code>. Your task is to determine the length of the longest continuous sub-string that can be completely removed by applying this deletion operation.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"1011100000100\"\n<strong>Output: </strong>6\n<strong>Explanation: <br /></strong>The sub-strings that can be removed are highlighted as: <code>101{110000}0{100}</code>.</span><br /><span >First, we can remove the sub-string \"110000\" by transforming it into \"100\" and then further removing \"100\", leaving the string \"1010\" (length = 6 removed).</span><br /><span >Then, we can remove the next \"100\" (length = 3 removed).</span><br /><span >The longest removable sub-string is \"110000\", and its length is 6.</span></pre>\n<pre><span ><strong>Input: </strong>s = \"111011\"\n<strong>Output: </strong>0\n<strong>Explanation: </strong>There is no sub-string which can be make null.</span></pre>\n<p><span ><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; string length &le; 10<sup>6</sup><br />s[i] = {0, 1}</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string `S` consisting of only '0' and '1' characters, determine the length of the longest continuous substring that can be completely removed by repeatedly deleting occurrences of the substring \"100\".",
                "constraints": [
                    "1 <= string length <= 10^6",
                    "s[i] = {0, 1}"
                ],
                "testcases": [
                    {
                        "input": "1011100000100",
                        "output": "6",
                        "explanation": "The longest removable substring is \"110000\", which can be transformed into \"100\" and then removed. The length of \"110000\" is 6."
                    },
                    {
                        "input": "111011",
                        "output": "0",
                        "explanation": "No substring can be removed from the input string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Keep track of continuous segments where \"100\" appears. For each such segment, simulate deletions and count the removed characters. Use a stack or greedy approach to identify removable patterns efficiently.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": null,
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\n  public:\n    // Function to find the length of longest sub-string that\n    // can me make removed\n    // arr  --> pair type of array whose first field store\n    //          character in string and second field stores\n    //          corresponding index of that character\n    int longestNull(string str) {\n        vector<pair<char, int> > arr;\n\n        // store {'@',-1} in arr , here this value will\n        // work as base index\n        arr.push_back({'@', -1});\n\n        int maxlen = 0; // Initialize result\n\n        // one by one iterate characters of string\n        for (int i = 0; i < str.length(); ++i) {\n            // make pair of char and index , then store\n            // them into arr\n            arr.push_back({str[i], i});\n\n            // now if last three elements of arr[]  are making\n            // sub-string \"100\" or not\n            while (arr.size() >= 3 && arr[arr.size() - 3].first == '1' &&\n                   arr[arr.size() - 2].first == '0' &&\n                   arr[arr.size() - 1].first == '0') {\n                // if above condition is true then delete\n                // sub-string \"100\" from arr[]\n                arr.pop_back();\n                arr.pop_back();\n                arr.pop_back();\n            }\n\n            // index of current last element in arr[]\n            int tmp = arr.back().second;\n\n            // This is important, here 'i' is the index of\n            // current charcater inserted into arr[]\n            // and 'tmp' is the index of last element in arr[]\n            // after continuous deletion of sub-string\n            // \"100\" from arr[] till we make it null, difference\n            // of these to 'i-tmp' gives the length of current\n            // sub-string that can be make null by continuous\n            // deletion of sub-string \"100\"\n            maxlen = max(maxlen, i - tmp);\n        }\n\n        return maxlen;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n// Java implementation of program to find\n// the maximum length that can be removed\nclass Solution {\n    // User defined class Pair\n    static class Pair {\n        char first;\n        int second;\n\n        Pair(char first, int second) {\n            this.first = first;\n            this.second = second;\n        }\n    }\n\n    /* Function to find the length of longest\n    sub-string that can me make removed\n     arr  --> pair type of array whose first\n              field store character in string\n              and second field stores\n              corresponding index of that character*/\n    public static int longestNull(String str) {\n        ArrayList<Pair> arr = new ArrayList<>();\n\n        // store {'@',-1} in arr , here this value\n        // will work as base index\n        arr.add(new Pair('@', -1));\n\n        int maxlen = 0; // Initialize result\n\n        // one by one iterate characters of string\n        for (int i = 0; i < str.length(); ++i) {\n            // make pair of char and index , then\n            // store them into arr\n            arr.add(new Pair(str.charAt(i), i));\n\n            // now if last three elements of arr[]\n            // are making sub-string \"100\" or not\n            while (arr.size() >= 3 && arr.get(arr.size() - 3).first == '1' &&\n                   arr.get(arr.size() - 2).first == '0' &&\n                   arr.get(arr.size() - 1).first == '0') {\n                // if above condition is true then\n                // delete sub-string \"100\" from arr[]\n                arr.remove(arr.size() - 3);\n                arr.remove(arr.size() - 2);\n                arr.remove(arr.size() - 1);\n            }\n\n            // index of current last element in arr[]\n            int tmp = arr.get(arr.size() - 1).second;\n\n            // This is important, here 'i' is the index\n            // of current character inserted into arr[]\n            // and 'tmp' is the index of last element\n            // in arr[] after continuous deletion of\n            // sub-string \"100\" from arr[] till we make\n            // it null, difference of these to 'i-tmp'\n            // gives the length of current sub-string\n            // that can be make null by continuous\n            // deletion of sub-string \"100\"\n            maxlen = Math.max(maxlen, i - tmp);\n        }\n\n        return maxlen;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n# Python3 implementation of program to find the maximum length\n# that can be removed\n\n\n# Function to find the length of longest sub-that\n# can me make removed\n# arr --> pair type of array whose first field store\n#         character in and second field stores\n#         corresponding index of that character\nclass Solution:\n\n    def longestNull(self, S):\n\n        arr = []\n\n        # store {'@',-1} in arr , here this value will\n        # work as base index\n        arr.append(['@', -1])\n\n        maxlen = 0  # Initialize result\n\n        # one by one iterate characters of Sing\n        for i in range(len(S)):\n            # make pair of char and index , then store\n            # them into arr\n            arr.append([S[i], i])\n\n            # now if last three elements of arr[] are making\n            # sub-\"100\" or not\n            while (len(arr) >= 3 and arr[len(arr) - 3][0] == '1'\n                   and arr[len(arr) - 2][0] == '0'\n                   and arr[len(arr) - 1][0] == '0'):\n\n                # if above condition is true then delete\n                # sub-\"100\" from arr[]\n                arr.pop()\n                arr.pop()\n                arr.pop()\n\n            # index of current last element in arr[]\n            tmp = arr[-1]\n            # This is important, here 'i' is the index of\n            # current character inserted into arr[]\n            # and 'tmp' is the index of last element in arr[]\n            # after continuous deletion of sub-Sing\n            # \"100\" from arr[] till we make it null, difference\n            # of these to 'i-tmp' gives the length of current\n            # sub-that can be make null by continuous\n            # deletion of sub-\"100\"\n            maxlen = max(maxlen, i - tmp[1])\n\n        return maxlen\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int longestNull(string str) {\n        List<KeyValuePair<char, int>> arr = new List<KeyValuePair<char, int>>();\n\n        // store {'@',-1} in arr , here this value will\n        // work as base index\n        arr.Add(new KeyValuePair<char, int>('@', -1));\n\n        int maxlen = 0; // Initialize result\n\n        // one by one iterate characters of string\n        for (int i = 0; i < str.Length; ++i) {\n            // make pair of char and index , then store\n            // them into arr\n            arr.Add(new KeyValuePair<char, int>(str[i], i));\n\n            // now if last three elements of arr[]  are making\n            // sub-string \"100\" or not\n            while (arr.Count >= 3 && arr[arr.Count - 3].Key == '1' &&\n                   arr[arr.Count - 2].Key == '0' && arr[arr.Count - 1].Key == '0') {\n                // if above condition is true then delete\n                // sub-string \"100\" from arr[]\n                arr.RemoveAt(arr.Count - 1);\n                arr.RemoveAt(arr.Count - 1);\n                arr.RemoveAt(arr.Count - 1);\n            }\n\n            // index of current last element in arr[]\n            int tmp = arr[arr.Count - 1].Value;\n\n            // This is important, here 'i' is the index of\n            // current charcater inserted into arr[]\n            // and 'tmp' is the index of last element in arr[]\n            // after continuous deletion of sub-string\n            // \"100\" from arr[] till we make it null, difference\n            // of these to 'i-tmp' gives the length of current\n            // sub-string that can be make null by continuous\n            // deletion of sub-string \"100\"\n            maxlen = Math.Max(maxlen, i - tmp);\n        }\n\n        return maxlen;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {string} S\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the length of longest subsequence of zeros.\n    longestNull(S) {\n        let arr = [];\n\n        // store {'@',-1} in arr , here this value will\n        // work as base index\n        arr.push([ '@', -1 ]);\n\n        let maxlen = 0; // Initialize result\n\n        // one by one iterate characters of Sing\n        for (let i = 0; i < S.length; i++) {\n            // make pair of char and index , then store\n            // them into arr\n            arr.push([ S[i], i ]);\n\n            // now if last three elements of arr[] are making\n            // sub-\"100\" or not\n            while (arr.length >= 3 && arr[arr.length - 3][0] == '1' &&\n                   arr[arr.length - 2][0] == '0' && arr[arr.length - 1][0] == '0') {\n\n                // if above condition is true then delete\n                // sub-\"100\" from arr[]\n                arr.pop();\n                arr.pop();\n                arr.pop();\n            }\n\n            // index of current last element in arr[]\n            let tmp = arr[arr.length - 1];\n            // This is important, here 'i' is the index of\n            // current character inserted into arr[]\n            // and 'tmp' is the index of last element in arr[]\n            // after continuous deletion of sub-Sing\n            // \"100\" from arr[] till we make it null, difference\n            // of these to 'i-tmp' gives the length of current\n            // sub-that can be make null by continuous\n            // deletion of sub-\"100\"\n            maxlen = Math.max(maxlen, i - tmp[1]);\n        }\n\n        return maxlen;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}