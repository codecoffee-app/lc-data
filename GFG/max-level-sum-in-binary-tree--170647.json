{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714121,
            "title": "Max Level Sum in Binary Tree",
            "titleSlug": "max-level-sum-in-binary-tree--170647",
            "content": "<p><span style=\"font-size:18px\">Given a Binary Tree having positive and negative nodes. Find the maximum sum of a level in the given Binary Tree.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :\\t\\t   </strong>\r\n\\t\\t 4\r\n\\t    /    \\\r\n\\t   2     -5\r\n\\t  / \\    / \\\r\n\\t-1   3  -2  6</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 6</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Explanation :</strong>\r\nSum of all nodes of 0&#39;th level is 4\r\nSum of all nodes of 1&#39;th level is -3\r\nSum of all nodes of 2&#39;th level is 6\r\nHence maximum sum is 6</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :\\t    </strong>\r\n\\t\\t1\r\n\\t    /   \\\r\n\\t   2     3\r\n\\t  / \\     \\\r\n\\t 4   5     8\r\n\\t\\t    / \\\r\n\\t\\t   6   7  </span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output : </strong> 17</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Explanation: </strong>Maximum sum is at level 2.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\r\nYou dont need to read input or print anything. Complete the function <strong>maxLevelSum()</strong> which takes root node as input parameter and returns the maximum sum of any horizontal level in the given Binary Tree.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)</span>, <span style=\"font-size:18px\">where N is no of node.</span><br />\r\n<span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong> O(W), Where W is the max width of the tree.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with positive and negative node values, find the maximum sum of all nodes at any level within the tree.",
                "constraints": [
                    "1 <= N <= 10^4, where N is the number of nodes in the tree."
                ],
                "testcases": [
                    {
                        "input": "         4\n        /    \\\n       2     -5\n      / \\    / \\\n     -1   3  -2  6",
                        "output": "6",
                        "explanation": "The level sums are: Level 0: 4, Level 1: -3, Level 2: 7. The maximum level sum is 7."
                    },
                    {
                        "input": "         1\n        /   \\\n       2     3\n      / \\     \\\n     4   5     8\n            / \\\n           6   7",
                        "output": "17",
                        "explanation": "The maximum level sum is at level 2 with the sum of 6 + 7=13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">The idea is to do level order traversal of tree.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Tree",
                "slug": "tree"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n  public:\r\n    int maxLevelSum(Node *root) {\r\n        // Base case\r\n        if (root == NULL) return 0;\r\n    \r\n        // Initialize result\r\n        int result = root->data;\r\n    \r\n        // Do Level order traversal keeping track of number\r\n        // of nodes at every level.\r\n        queue<Node *> q;\r\n        q.push(root);\r\n        while (!q.empty()) {\r\n            // Get the size of queue when the level order\r\n            // traversal for one level finishes\r\n            int count = q.size();\r\n    \r\n            // Iterate for all the nodes in the queue currently\r\n            int sum = 0;\r\n            while (count--) {\r\n                // Dequeue an node from queue\r\n                Node *temp = q.front();\r\n                q.pop();\r\n    \r\n                // Add this node's value to current sum.\r\n                sum = sum + temp->data;\r\n    \r\n                // Enqueue left and right children of\r\n                // dequeued node\r\n                if (temp->left != NULL) q.push(temp->left);\r\n                if (temp->right != NULL) q.push(temp->right);\r\n            }\r\n    \r\n            // Update the maximum node count value\r\n            result = max(sum, result);\r\n        }\r\n    \r\n        return result;\r\n    }\r\n\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Code by: Saksham Raj Seth\r\n\r\nclass Solution {\r\n    public static int maxLevelSum(Node root) {\r\n        if (root == null) return 0;\r\n        int result = root.data;\r\n        Queue<Node> q = new LinkedList<Node>();\r\n        q.add(root);\r\n        while (q.size() > 0) {\r\n            int count = q.size();\r\n            int sum = 0;\r\n            while (count-- > 0) {\r\n                Node temp = q.peek();\r\n                q.poll();\r\n                sum = sum + temp.data;\r\n                if (temp.left != null) q.add(temp.left);\r\n                if (temp.right != null) q.add(temp.right);\r\n            }\r\n            result = Math.max(sum, result);\r\n        }\r\n        return result;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to find the maximum level sum in a binary tree.\n    def maxLevelSum(self, root):\n        # If the root is None, return 0.\n        if root is None:\n            return 0\n        \n        result = root.data\n        q = []\n        q.append(root)  # Add the root to the queue.\n        \n        while q!=[]:\n            c = len(q)  # Get the number of nodes in the current level.\n            res = 0\n            \n            while c!=0:\n                c -= 1\n                temp = q[0]  # Get the first node in the queue.\n                q.pop(0)  # Remove the first node from the queue.\n                \n                res = res + temp.data  # Sum up the data of the current node.\n                \n                if temp.left is not None:\n                    q.append(temp.left)  # Add the left child to the queue.\n                if temp.right is not None:\n                    q.append(temp.right)  # Add the right child to the queue.\n            \n            result = max(res, result)  # Update the maximum sum so far.\n        \n        return result  # Return the maximum level sum.",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/*\r\nclass Node\r\n{\r\n    constructor(x){\r\n        this.data=x;\r\n        this.left=null;\r\n        this.right=null;\r\n    }\r\n}\r\n*/\r\n\r\n/**\r\n * @param {Node} root\r\n * @return {number}\r\n*/\r\nclass Solution {\r\n  \tmaxLevelSum(root){\r\n  \t\t//code here\r\n  \t\tif (root == null) return 0;\r\n    \r\n        let result = root.data;\r\n    \r\n        let q = [];\r\n        q.push(root);\r\n        while (q.length > 0) {\r\n            let count = q.length;\r\n    \r\n            let sum = 0;\r\n            while (count > 0) {\r\n                let temp = q.shift();\r\n    \r\n                sum += temp.data;\r\n    \r\n                if (temp.left != null) q.push(temp.left);\r\n                if (temp.right != null) q.push(temp.right);\r\n    \r\n                count--;\r\n            }\r\n    \r\n            result = Math.max(sum, result);\r\n        }\r\n    \r\n        return result;\r\n  \t}\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}