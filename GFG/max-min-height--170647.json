{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714120,
            "title": "Max min Height",
            "titleSlug": "max-min-height--170647",
            "content": "<p><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">You have a garden with <strong>n </strong>flowers lined up in a row. The height of <strong>ith flower is a</strong></span></span></span><strong><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><sub>i</sub></span></span></span></strong><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"> units. You will water them for <strong>k</strong> days. In one day you can water <strong>w</strong> continuous flowers (you can do this only once in a single day). Whenever you water a flower its height increases by <strong>1</strong> unit. You need to <strong>maximize the height</strong> of the <strong>smallest flower</strong> all the time.</span></span></span></p>\n<p><span style=\"font-family: Arial;\"><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></span></p>\n<pre><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><strong><span style=\"font-family: Arial;\"><span style=\"font-size: 13.5pt;\">Input:</span></span> </strong></span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><span style=\"font-family: Arial;\"><span style=\"font-size: 13.5pt;\">n = 6</span></span>, </span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><span style=\"font-family: Arial;\"><span style=\"font-size: 13.5pt;\">k = 2</span></span>, </span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><span style=\"font-family: Arial;\"><span style=\"font-size: 13.5pt;\">w = 3</span></span>, </span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">a[] = [2, 2, 2, 2, 1, 1]</span></span></span>\n<span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><strong>Output:</strong> </span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">2</span></span></span>\n<span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><strong>Explanation:</strong> </span></span></span><span style=\"color: #000000; font-family: Arial; font-size: 13.5pt;\">Water last three flowers for first day &amp; first three flowers for second day. </span><span style=\"color: #000000; font-family: Arial; font-size: 13.5pt;\">The new heights</span> <span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">will be [3, 3, 3, 3, 2, 2]</span></span></span></pre>\n<pre><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><strong><span style=\"font-family: Arial;\"><span style=\"font-size: 13.5pt;\">Input:</span></span> </strong></span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><span style=\"font-family: Arial;\"><span style=\"font-size: 13.5pt;\">n = 2</span></span>, </span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><span style=\"font-family: Arial;\"><span style=\"font-size: 13.5pt;\">k = 5</span></span>, </span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><span style=\"font-family: Arial;\"><span style=\"font-size: 13.5pt;\">w = 1,</span></span> </span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">a[] = [5, 8]</span></span></span>\n<span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><strong><span style=\"font-family: Arial;\"><span style=\"font-size: 13.5pt;\">Output:</span></span> </strong></span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">9</span></span></span>\n<span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><strong><span style=\"font-family: Arial;\"><span style=\"font-size: 13.5pt;\">Explanation:</span></span> </strong></span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><span style=\"font-family: Arial;\"><span style=\"font-size: 13.5pt;\">For the first four days water the first flower then</span></span> </span></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">water the last flower once.</span></span></span></pre>\n<p><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\"><strong>Constraints:</strong></span></span></span><br /><span style=\"font-size: 18px;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">1 &le; n &le; 10<sup>5</sup></span></span></span><br /><span style=\"font-size: 18px;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">1 &le; w &le; n</span></span></span><br /><span style=\"font-size: 18px;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">1 &le; k &le; 10<sup>5</sup></span></span></span><br /><span style=\"font-size: 18px;\"><span style=\"font-family: Arial;\"><span style=\"color: #000000;\">1 &le; a[i] &le; 10<sup>9</sup></span></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use Binary search between the minimum &amp; maximum possible height of the tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\n    public:\n        // Function to check if current minimum height is valid or not.\n        bool isvalid(vector <int> &a, int n, int k, int w, long long int mid)\n        {\n            // Array to store the prefix sum of the previous heights.\n            long long int ps[n];\n            fill(ps, ps+n, 0ll);\n            long long int ans = 0;\n\n            // Iterating over each height.\n            for(long long int i = 0; i < n; i++)\n            {\n                // Calculating the prefix sum and checking if the current height is less than the current minimum height.\n                if(i - 1 >= 0)\n                    ps[i] += ps[i-1];\n                if(a[i] + ps[i] < mid)\n                {\n                    // Updating the prefix sum and the total number of adjustments required.\n                    long long int e = mid - a[i] - ps[i];\n                    ans += e;\n                    ps[i] += e;\n\n                    // Reducing the height adjustments for the next window of width w.\n                    if(i + w < n)\n                        ps[i+w] -= e;\n                }\n            }\n            return (ans <= k); // Checking if the total adjustments required is less than or equal to k.\n        }\n\n        // Function to maximize the minimum height.\n        long long int maximizeMinHeight(int n, int k, int w, vector <int> &a)\n        {\n            int ans = 0;\n            long long int l = 0, h = 1e14;\n\n            // Binary search to find the maximum valid minimum height.\n            while(l <= h)\n            {\n                long long int mid = (l + h) / 2;\n\n                // Checking if the current height is valid.\n                if(isvalid(a, n, k, w, mid))\n                {\n                    l = mid + 1; // Updating the lower bound.\n                    ans = mid; // Updating the maximum valid minimum height.\n                }\n                else\n                {\n                    h = mid - 1; // Updating the upper bound.\n                }\n            }\n            return ans; // Returning the maximum valid minimum height.\n        }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": " class Solution {\r\n    public boolean isvalid(int [] a, int n, int k, int w, long mid) {\r\n        long[] ps = new long[n];\r\n        Arrays.fill(ps, 0);\r\n        long ans = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            if (i - 1 >= 0)\r\n                ps[i] += ps[i - 1];\r\n            if (a[i] + ps[i] < mid) {\r\n                long e = mid - a[i] - ps[i];\r\n                ans += e;\r\n                ps[i] += e;\r\n                if (i + w < n)\r\n                    ps[i + w] -= e;\r\n            }\r\n        }\r\n        return (ans <= k);\r\n    }\r\n\r\n    public long maximizeMinHeight(int n, int k, int w, int [] a) {\r\n        long ans = 0;\r\n        long l = 0, h = (long) 1e14;\r\n        while (l <= h) {\r\n            long mid = (l + h) / 2;\r\n            if (isvalid(a, n, k, w, mid)) {\r\n                l = mid + 1;\r\n                ans = mid;\r\n            } else {\r\n                h = mid - 1;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution():\r\n    # Function to check if a certain height value is feasible or not.\r\n    def isValid(self, arr, val, w, m):\r\n        n = len(arr)\r\n        difSum = [0]*n\r\n        pref = 0\r\n        for i in range(n):\r\n            pref -= difSum[i]\r\n            req = max(0, val - arr[i]-pref)\r\n            m -= req\r\n            pref += req\r\n            if i+w < n:\r\n                difSum[i+w] += req\r\n        if m < 0:\r\n            return False\r\n        return True\r\n\r\n    # Function to maximize the minimum height.\r\n    def maximizeMinHeight(self, n, k, w, a):\r\n        l = 0\r\n        r = 10**9+1\r\n        # Using binary search to find the maximum feasible height.\r\n        while l < r-1:\r\n            mid = (l+r)//2\r\n            if self.isValid(a, mid, w, k):\r\n                l = mid\r\n            else:\r\n                r = mid - 1\r\n        \r\n        # Checking if the maximum height is feasible.\r\n        while r >= l:\r\n            if self.isValid(a, r, w, k):\r\n                return r\r\n            r -= 1",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution\n{\n    // Function to check if current minimum height is valid or not.\n    private bool IsValid(List<int> a, int n, int k, int w, long mid)\n    {\n        // Array to store the prefix sum of the previous heights.\n        long[] ps = new long[n];\n        Array.Fill(ps, 0L);\n        long ans = 0;\n\n        // Iterating over each height.\n        for (int i = 0; i < n; i++)\n        {\n            // Calculating the prefix sum and checking if the current height is less than the current minimum height.\n            if (i > 0)\n                ps[i] += ps[i - 1];\n            if (a[i] + ps[i] < mid)\n            {\n                // Updating the prefix sum and the total number of adjustments required.\n                long e = mid - a[i] - ps[i];\n                ans += e;\n                ps[i] += e;\n\n                // Reducing the height adjustments for the next window of width w.\n                if (i + w < n)\n                    ps[i + w] -= e;\n            }\n        }\n        return (ans <= k); // Checking if the total adjustments required is less than or equal to k.\n    }\n\n    // Function to maximize the minimum height.\n    public long maximizeMinHeight(int n, int k, int w, List<int> a)\n    {\n        long ans = 0;\n        long l = 0, h = (long)Math.Pow(10, 14);\n\n        // Binary search to find the maximum valid minimum height.\n        while (l <= h)\n        {\n            long mid = (l + h) / 2;\n\n            // Checking if the current height is valid.\n            if (IsValid(a, n, k, w, mid))\n            {\n                l = mid + 1; // Updating the lower bound.\n                ans = mid; // Updating the maximum valid minimum height.\n            }\n            else\n            {\n                h = mid - 1; // Updating the upper bound.\n            }\n        }\n        return ans; // Returning the maximum valid minimum height.\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}