{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702864,
            "title": "Max Odd Sum",
            "titleSlug": "max-odd-sum0651",
            "content": "<p><span >Given an array <strong>arr[]</strong> of integers, determine whether a subsequence exists with an odd sum. If such a subsequence exists, return the maximum possible odd sum. If no subsequence with an odd sum can be formed, return -1.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr = [4, -3, 3, -5]</span><br /><span ><strong>Output:</strong> 7</span><br /><span ><strong>Explanation:</strong> The subsequence with the maximum odd sum is [4, 3], and the sum is 4 + 3 = 7.</span></pre>\n<pre><span ><strong>Input:</strong> arr = [2, 5, -4, 3, -1]</span><br /><span ><strong>Output:</strong> 9</span><br /><span ><strong>Explanation:</strong> The subsequence with the maximum odd sum is [2, 5, 3, -1], and the sum is 2 + 5 + 3 + (-1) = 9.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)</span><br /><span ><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &le; arr.length &le; 10^6</span><br /><span >-10^3 &le; arr[i] &le; 10^3</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, determine whether a subsequence exists with an odd sum. If such a subsequence exists, return the maximum possible odd sum. If no subsequence with an odd sum can be formed, return -1.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "-10^3 <= arr[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "[4, -3, 3, -5]",
                        "output": "7",
                        "explanation": "The subsequence [4, 3] yields the maximum odd sum of 7."
                    },
                    {
                        "input": "[2, 5, -4, 3, -1]",
                        "output": "9",
                        "explanation": "The subsequence [2, 5, 3, -1] yields the maximum odd sum of 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>take all positive integers to get the maximum sum, if the sum is odd then return the sum but if the sum is even then find the smallest odd that can be subtracted.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find maximum odd subarray sum.\n    int findMaxOddSum(vector<int> &arr) {\n        int n = arr.size();\n        // Initializing minimum odd number to maximum value.\n        int min_odd = INT_MAX;\n\n        // Flag to check if array contains odd number or not.\n        bool isOdd = false;\n\n        // Variable to store sum of elements.\n        int sum = 0;\n\n        // Iterating over the array.\n        for (int i = 0; i < n; i++) {\n            // Adding positive elements to the sum.\n            if (arr[i] > 0)\n                sum = sum + arr[i];\n\n            // Checking if current element is odd.\n            if (arr[i] % 2 != 0) {\n                isOdd = true;\n                // Updating minimum odd number.\n                if (min_odd > abs(arr[i]))\n                    min_odd = abs(arr[i]);\n            }\n        }\n\n        // If no odd number is found, return -1.\n        if (isOdd == false)\n            return -1;\n\n        // If sum is even, subtract the minimum odd number.\n        if (sum % 2 == 0)\n            sum = sum - min_odd;\n\n        // Returning sum of odd elements.\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findMaxOddSum(int[] arr) {\n        int minOdd = Integer.MAX_VALUE;\n        boolean isOdd = false;\n        int sum = 0;\n\n        for (int num : arr) {\n            if (num > 0) {\n                sum += num;\n            }\n            if (num % 2 != 0) {\n                isOdd = true;\n                minOdd = Math.min(minOdd, Math.abs(num));\n            }\n        }\n\n        if (!isOdd) {\n            return -1;\n        }\n        if (sum % 2 == 0) {\n            sum -= minOdd;\n        }\n        return sum;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findMaxOddSum(self, arr):\n        # Initializing the minimum odd number to a large value.\n        min_odd = float('inf')\n\n        # Flag to check if array contains any odd numbers.\n        isOdd = False\n\n        # Variable to store the sum of positive elements.\n        sum = 0\n\n        # Iterating over the array.\n        for num in arr:\n            # Adding positive elements to the sum.\n            if num > 0:\n                sum += num\n\n            # Checking if current element is odd.\n            if num % 2 != 0:\n                isOdd = True\n                # Updating the minimum odd number.\n                if min_odd > abs(num):\n                    min_odd = abs(num)\n\n        # If no odd number is found, return -1.\n        if not isOdd:\n            return -1\n\n        # If sum is even, subtract the minimum odd number to make it odd.\n        if sum % 2 == 0:\n            sum -= min_odd\n\n        # Returning the sum of odd elements.\n        return sum\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMaxOddSum(arr) {\n        let minOdd = Infinity;\n        let isOdd = false;\n        let sum = 0;\n\n        for (let num of arr) {\n            if (num > 0) {\n                sum += num;\n            }\n            if (num % 2 !== 0) {\n                isOdd = true;\n                minOdd = Math.min(minOdd, Math.abs(num));\n            }\n        }\n\n        if (!isOdd) {\n            return -1;\n        }\n        if (sum % 2 === 0) {\n            sum -= minOdd;\n        }\n        return sum;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}