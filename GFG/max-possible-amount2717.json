{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703892,
            "title": "Max possible amount",
            "titleSlug": "max-possible-amount2717",
            "content": "<p><span style=\"font-size: 18px;\">Given a row of <strong>n</strong> coins of values <strong>arr[1],</strong> <strong>arr[2], </strong>... <strong>arr[n]</strong>, where <strong>n</strong> is even. Geek plays a game against an opponent by alternating turns.&nbsp;In each turn, a player selects either the first or last coin from the row, removes it from the row permanently, and&nbsp;receives the value of the coin. Determine the <strong>maximum</strong> <strong>possible amount </strong>geek can get if he moves first.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> Both of them play optimally</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: N = 4, arr[] = {5, 3, 7, 10}\n<strong>Output:</strong> 15\n<strong>Explanation</strong>: </span>\n<span style=\"font-size: 18px;\">Geek chooses 10.\nOpponent chooses 7.\nGeek chooses 5.\nOpponent chooses 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 4, arr[] = {8, 15, 3, 7}\n<strong>Output: </strong>22\n<strong>Explanation</strong>: \nGeek chooses 7.\nOpponent chooses 8.\nGeek chooses 15.\nOpponent chooses 3.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>maxAmount</code>()&nbsp;</strong>which takes <strong>N</strong>&nbsp; and array <strong>arr</strong> as input parameter and returns the maximum value geek can get.<br /><br /><strong>Expected Time Complexity:</strong> O(<strong>N<sup>2</sup></strong>)<br /><strong>Expected Auxiliary Space:</strong> O(<strong>N<sup>2</sup></strong>)<br /><br /><strong>Constraints:</strong><br />2 &le; N &le; 10<sup>3</sup></span><br /><span style=\"font-size: 18px;\">1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a row of 'n' coins with values represented by the array 'arr[1], arr[2], ..., arr[n]', where 'n' is an even number. Geek and an opponent take turns selecting either the first or last coin from the row, removing it, and claiming its value.  Assuming both players play optimally, determine the maximum possible amount Geek can obtain if they move first.",
                "constraints": [
                    "2 \u2264 N \u2264 10^3",
                    "1 \u2264 arr[i] \u2264 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 4, arr[] = {5, 3, 7, 10}",
                        "output": "15",
                        "explanation": "Geek chooses 10. Opponent chooses 7. Geek chooses 5. Opponent chooses 3. This sequence leads to Geek obtaining a total value of 15."
                    },
                    {
                        "input": "N = 4, arr[] = {8, 15, 3, 7}",
                        "output": "22",
                        "explanation": "Geek chooses 7. Opponent chooses 8. Geek chooses 15. Opponent chooses 3. This results in Geek getting a total value of 22."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>There are two choices:</p>\n\n<ol>\n\t<li>The user chooses the &lsquo;ith&rsquo; coin with value &lsquo;Vi&rsquo;: The opponent either chooses (i+1)th coin or jth coin. The opponent intends to choose the coin which leaves the user with <strong>minimum value</strong>.<br />\n\ti.e. The user can collect the value <strong>Vi + min(F(i+2, j), F(i+1, j-1) )</strong>.<br />\n\t&nbsp;</li>\n\t<li>The user chooses the &lsquo;jth&rsquo; coin with value &lsquo;Vj&rsquo;: The opponent either chooses &lsquo;ith&rsquo; coin or &lsquo;(j-1)th&rsquo; coin. The opponent intends to choose the coin which leaves the user with the minimum value, i.e. the user can collect the value <strong>Vj + min(F(i+1, j-1), F(i, j-2) )</strong>.</li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\n\tpublic:\n\tint maxAmount(int arr[], int n)\n\t{\n\t\t\n\t\t// Create a table to store \n\t    // solutions of subproblems \n\t    int table[n][n]; \n\t  \n\t    // Fill table using above \n\t    // recursive formula. Note \n\t    // that the table is filled \n\t    // in diagonal fashion (similar \n\t    // to http:// goo.gl/PQqoS), \n\t    // from diagonal elements to \n\t    // table[0][n-1] which is the result. \n\t    for (int gap = 0; gap < n; ++gap) { \n\t        for (int i = 0, j = gap; j < n; ++i, ++j) { \n\t            // Here x is value of F(i+2, j), \n\t            // y is F(i+1, j-1) and \n\t            // z is F(i, j-2) in above recursive \n\t            // formula \n\t            int x = ((i + 2) <= j) \n\t                        ? table[i + 2][j] \n\t                        : 0; \n\t            int y = ((i + 1) <= (j - 1)) \n\t                        ? table[i + 1][j - 1] \n\t                        : 0; \n\t            int z = (i <= (j - 2)) \n\t                        ? table[i][j - 2] \n\t                        : 0; \n\t  \n\t            table[i][j] = max( \n\t                arr[i] + min(x, y), \n\t                arr[j] + min(y, z)); \n\t        } \n\t    } \n\t  \n\t    return table[0][n - 1]; \n\n\t}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxAmount(self, A, N):\n        # Initializing the dynamic programming table\n        dp = [[[0, 0] for i in range(N)] for j in range(N)]\n        arr = A[:]\n\n        # Initializing the base cases\n        dp[0][0] = [A[0], 0]\n        for i in range(1, N):\n            arr[i] += arr[i - 1]\n            dp[i][i] = [A[i], 0]\n\n        col = 0\n\n        # Iterating over the diagonals\n        while col < N:\n            col += 1\n\n            # Iterating over each cell in the diagonal\n            for row in range(N - col):\n                L, R = row, row + col\n\n                # Selecting the maximum amount based on two options\n                m1 = A[L] + dp[L + 1][R][1]\n                m2 = A[R] + dp[L][R - 1][1]\n                x = max(m1, m2)\n\n                # Updating the dp table\n                dp[L][R] = [x, arr[R] - arr[L] + A[L] - x]\n\n        # Returning the maximum amount\n        return dp[0][-1][0]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution{\n    maxAmount(arr,n){\n        // Create a table to store \n\t    // solutions of subproblems \n\t    let table = new Array(n).fill(0).map(() => new Array(n).fill(0));\n\t  \n\t    // Fill table using above \n\t    // recursive formula. Note \n\t    // that the table is filled \n\t    // in diagonal fashion (similar \n\t    // to http:// goo.gl/PQqoS), \n\t    // from diagonal elements to \n\t    // table[0][n-1] which is the result. \n\t    for (let gap = 0; gap < n; ++gap) { \n\t        for (let i = 0, j = gap; j < n; ++i, ++j) { \n\t            // Here x is value of F(i+2, j), \n\t            // y is F(i+1, j-1) and \n\t            // z is F(i, j-2) in above recursive \n\t            // formula \n\t            let x = ((i + 2) <= j) \n\t                        ? table[i + 2][j] \n\t                        : 0; \n\t            let y = ((i + 1) <= (j - 1)) \n\t                        ? table[i + 1][j - 1] \n\t                        : 0; \n\t            let z = (i <= (j - 2)) \n\t                        ? table[i][j - 2] \n\t                        : 0; \n\t  \n\t            table[i][j] = Math.max( \n\t                arr[i] + Math.min(x, y), \n\t                arr[j] + Math.min(y, z)); \n\t        } \n\t    } \n\t  \n\t    return table[0][n - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}