{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700288,
            "title": "Max  rectangle",
            "titleSlug": "max-rectangle",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary matrix <strong>mat[][] </strong>of size <strong>n * m</strong>. Find the maximum area of a rectangle formed only of <strong>1s</strong> in the given matrix. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">mat[][] = [[0, 1, 1, 0],\n\\t\\t    [1, 1, 1, 1],\n\\t\\t    [1, 1, 1, 1],\n\\t\\t    [1, 1, 0, 0]]\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">8</span><strong style=\"font-size: 18px;\">\nExplanation: </strong><span style=\"font-size: 18px;\">The largest rectangle with only 1&rsquo;s is from (1, 0) to (2, 3) which is\n[1, 1, 1, 1]\n[1, 1, 1, 1]\nand area is 4 *2 = 8</span></span><span style=\"font-size: 18px;\">.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> mat[][] = [[0, 1, 1],\n\\t\\t    [1, 1, 1],\n\\t\\t    [0, 1, 1]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The largest rectangle with only 1&rsquo;s is from (0, 1) to (2, 2) which is\n[1, 1]\n[1, 1]\n[1, 1]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= mat.size(), mat[0].size()&lt;=1000<br />0&lt;=mat[][]&lt;=1<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use the approach of finding <a href=\"https://www.geeksforgeeks.org/largest-rectangle-under-histogram/\">maximum rectangle in a histogram</a>.</span></p>",
            "<p><span style=\"font-size:18px\">The idea is to update each column of a given row with corresponding column of previous row and find largest histogram area for that row.</span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Step 1:</strong> Find maximum area for row[0]\n<strong>Step 2:</strong>\n    for each row in 1 to N - 1\n        for each column in that row\n            if A[row][column] == 1\n              update A[row][column] with\n                A[row][column] += A[row - 1][column]\n    find area for that row\n    and update maximum area so far </span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "samsung",
            "makemytrip",
            "directi",
            "intuit",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the maximum area of a rectangle\n    // in a histogram\n    int mhist(vector<int> &row, int m1) {\n\n        stack<int> result; // create a stack to store the indices\n\n        int top_val; // variable to store the value at the top of the stack\n\n        int max_area = 0; // initialize max_area to 0\n\n        int area = 0; // initialize area to 0\n        int i = 0;    // initialize i to 0\n        for (i = 0; i < m1;) {\n\n            // if the stack is empty or the current element is larger\n            // than or equal to the element at the top of the stack,\n            // push the index onto the stack and move to the next element\n            if (result.empty() || row[result.top()] <= row[i])\n                result.push(i++);\n\n            else {\n                top_val = row[result.top()]; // get the value at the top of the stack\n                result.pop();                // pop the element from the stack\n                area = top_val * i; // calculate the area with the popped element\n\n                // if the stack is not empty, calculate the area\n                // using the current index minus the index at the top of the stack\n                if (!result.empty())\n                    area = top_val * (i - result.top() - 1);\n\n                max_area = max(area, max_area); // update the maximum area\n            }\n        }\n\n        // calculate the area for any remaining elements in the stack\n        while (!result.empty()) {\n            top_val = row[result.top()]; // get the value at the top of the stack\n            result.pop();                // pop the element from the stack\n            area = top_val * i;          // calculate the area with the popped element\n\n            // if the stack is not empty, calculate the area\n            // using the current index minus the index at the top of the stack\n            if (!result.empty())\n                area = top_val * (i - result.top() - 1);\n\n            max_area = max(area, max_area); // update the maximum area\n        }\n        return max_area; // return the maximum area\n    }\n\n    // Function to calculate the maximum area of a rectangle\n    // in the given matrix.\n    int kewl(vector<vector<int>> &mat) {\n        int n = mat.size(), m = mat[0].size();\n        int res =\n            mhist(mat[0], m); // initialize res with the maximum area of the first row\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n\n                // if the current element is non-zero,\n                // update it with the sum of the current element\n                // and the element above it\n                if (mat[i][j])\n                    mat[i][j] += mat[i - 1][j];\n            }\n            res = max(res, mhist(mat[i], m)); // calculate the maximum area for the\n                                              // current row and update res\n        }\n        return res; // return the maximum area\n    }\n\n    // Function to calculate the maximum area of a rectangle\n    // in the given matrix.\n    int maxArea(vector<vector<int>> &mat) {\n        return kewl(mat); // call the helper function to find the maximum area\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Finds the maximum area under the histogram\n    // represented by histogram.  See below article for\n\n    static int maxHist(int R, int C, int row[]) {\n        // Create an empty stack. The stack holds indexes of\n        // hist[] array/ The bars stored in stack are always\n        // in increasing order of their heights.\n        Stack<Integer> result = new Stack<Integer>();\n\n        int top_val; // Top of stack\n\n        int max_area = 0; // Initialize max area in current\n        // row (or histogram)\n\n        int area = 0; // Initialize area with current top\n\n        // Run through all bars of given histogram (or row)\n        int i = 0;\n        while (i < C) {\n            // If this bar is higher than the bar on top\n            // stack, push it to stack\n            if (result.empty() || row[result.peek()] <= row[i])\n                result.push(i++);\n\n            else {\n                // If this bar is lower than top of stack,\n                // then calculate area of rectangle with\n                // stack top as the smallest (or minimum\n                // height) bar. 'i' is 'right index' for the\n                // top and element before top in stack is\n                // 'left index'\n                top_val = row[result.peek()];\n                result.pop();\n                area = top_val * i;\n\n                if (!result.empty()) area = top_val * (i - result.peek() - 1);\n                max_area = Math.max(area, max_area);\n            }\n        }\n\n        // Now pop the remaining bars from stack and\n        // calculate area with every popped bar as the\n        // smallest bar\n        while (!result.empty()) {\n            top_val = row[result.peek()];\n            result.pop();\n            area = top_val * i;\n            if (!result.empty()) area = top_val * (i - result.peek() - 1);\n\n            max_area = Math.max(area, max_area);\n        }\n        return max_area;\n    }\n\n    // Returns area of the largest rectangle with all 1s in\n    // mat[][]\n    static int maxArea(int mat[][]) {\n        int R = mat.length;\n        int C = mat[0].length;\n\n        // Calculate area for first row and initialize it as\n        // result\n        int result = maxHist(R, C, mat[0]);\n\n        // iterate over row to find maximum rectangular area\n        // considering each row as histogram\n        for (int i = 1; i < R; i++) {\n\n            for (int j = 0; j < C; j++)\n\n                // if mat[i][j] is 1 then add mat[i -1][j]\n                if (mat[i][j] == 1) mat[i][j] += mat[i - 1][j];\n\n            // Update result if area with current row (as\n            // last row of rectangle) is more\n            result = Math.max(result, maxHist(R, C, mat[i]));\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n# Finds the maximum area under the histogram represented\n# by histogram. See below article for details.\n# https:#www.geeksforgeeks.org/largest-rectangle-under-histogram/\nclass Solution:\n\n    def maxHist(self, row, C):\n\n        # Create an empty stack. The stack holds\n        # indexes of hist array/ The bars stored\n        # in stack are always in increasing order\n        # of their heights.\n        result = list()\n\n        top_val = 0  # Top of stack\n\n        max_area = 0  # Initialize max area in current\n        # row (or histogram)\n\n        area = 0  # Initialize area with current top\n\n        # Run through all bars of given\n        # histogram (or row)\n        i = 0\n        while (i < C):\n\n            # If this bar is higher than the\n            # bar on top stack, push it to stack\n            if (len(result) == 0) or (row[result[-1]] <= row[i]):\n                result.append(i)\n                i += 1\n            else:\n\n                # If this bar is lower than top of stack,\n                # then calculate area of rectangle with\n                # stack top as the smallest (or minimum\n                # height) bar. 'i' is 'right index' for\n                # the top and element before top in stack\n                # is 'left index'\n                top_val = row[result[-1]]\n                result.pop()\n                area = top_val * i\n\n                if (len(result)):\n                    area = top_val * (i - result[-1] - 1)\n                max_area = max(area, max_area)\n\n        # Now pop the remaining bars from stack\n        # and calculate area with every popped\n        # bar as the smallest bar\n        while (len(result)):\n            top_val = row[result[-1]]\n            result.pop()\n            area = top_val * i\n            if (len(result)):\n                area = top_val * (i - result[-1] - 1)\n\n            max_area = max(area, max_area)\n\n        return max_area\n\n    # Returns area of the largest rectangle\n    # with all 1s in mat\n    def maxArea(self, mat):\n        R = len(mat)\n        C = len(mat[0])\n        # Calculate area for first row and\n        # initialize it as result\n        result = self.maxHist(mat[0], C)\n\n        # iterate over row to find maximum rectangular\n        # area considering each row as histogram\n        for i in range(1, R):\n\n            for j in range(C):\n\n                # if mat[i][j] is 1 then add mat[i -1][j]\n                if (mat[i][j]):\n                    mat[i][j] += mat[i - 1][j]\n\n            # Update result if area with current\n            # row (as last row) of rectangle) is more\n            result = max(result, self.maxHist(mat[i], C))\n\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution {\n    public int maxArea(int[][] mat) {\n        int n = mat.Length;\n        int m = mat[0].Length;\n        int[][] dp = new int [n][];\n        for (int i = 0; i < n; i++) {\n            dp[i] = new int[m];\n        }\n\n        for (int j = 0; j < m; j++) {\n            dp[0][j] = mat[0][j];\n        }\n\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (mat[i][j] == 1) {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                }\n            }\n        }\n\n        int maxArea = 0;\n        for (int i = 0; i < n; i++) {\n            int area = maxHistogramArea(dp[i], m);\n            maxArea = Math.Max(maxArea, area);\n        }\n\n        return maxArea;\n    }\n\n    private int maxHistogramArea(int[] row, int m) {\n        Stack<int> result = new Stack<int>();\n        int topVal;\n        int maxArea = 0;\n        int area = 0;\n        int i = 0;\n\n        while (i < m) {\n            if (result.Count == 0 || row[result.Peek()] <= row[i]) {\n                result.Push(i);\n                i++;\n            } else {\n                topVal = row[result.Peek()];\n                result.Pop();\n\n                if (result.Count > 0) {\n                    area = topVal * (i - result.Peek() - 1);\n                } else {\n                    area = topVal * i;\n                }\n\n                maxArea = Math.Max(maxArea, area);\n            }\n        }\n\n        while (result.Count > 0) {\n            topVal = row[result.Peek()];\n            result.Pop();\n\n            if (result.Count > 0) {\n                area = topVal * (i - result.Peek() - 1);\n            } else {\n                area = topVal * i;\n            }\n\n            maxArea = Math.Max(maxArea, area);\n        }\n\n        return maxArea;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n// User function Template for javascript\n\n/**\n * @param {number[][]} mat\n * @returns {number}\n */\n\nclass Solution {\n    maxArea(mat) {\n        let n = mat.length;\n        let m = mat[0].length;\n        // Function to calculate maximum rectangular area in a\n        // histogram\n        let histogram =\n            (row, m1) => {\n                let stack = []; // Create an empty stack\n\n                let top_val; // Top of stack\n\n                let max_area = 0; // Initialize max area\n\n                let area = 0; // Initialize area\n\n                let i = 0;\n                for (i = 0; i < m1;) {\n\n                    if (stack.length === 0 || row[stack[stack.length - 1]] <= row[i]) {\n                        stack.push(i++);\n                    } else {\n                        top_val = row[stack[stack.length - 1]];\n                        stack.pop();\n                        area = top_val * i;\n\n                        if (stack.length !== 0) {\n                            area = top_val * (i - stack[stack.length - 1] - 1);\n                        }\n                        max_area = Math.max(area, max_area);\n                    }\n                }\n\n                while (stack.length !== 0) {\n                    top_val = row[stack[stack.length - 1]];\n                    stack.pop();\n                    area = top_val * i;\n\n                    if (stack.length !== 0) {\n                        area = top_val * (i - stack[stack.length - 1] - 1);\n                    }\n\n                    max_area = Math.max(area, max_area);\n                }\n                return max_area;\n            }\n\n        let kewl =\n            (mat, n, m) => {\n                let res = histogram(mat[0], m);\n                for (let i = 1; i < n; i++) {\n                    for (let j = 0; j < m; j++) {\n                        if (mat[i][j]) {\n                            mat[i][j] += mat[i - 1][j];\n                        }\n                    }\n                    res = Math.max(res, histogram(mat[i], m));\n                }\n                return res;\n            }\n\n        return kewl(mat, n, m);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}