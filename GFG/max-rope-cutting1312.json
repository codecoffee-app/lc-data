{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703234,
            "title": "Cut rope to maximise product",
            "titleSlug": "max-rope-cutting1312",
            "content": "<p><span style=\"font-size: 18px;\">Given a rope of length </span><span style=\"font-size: 18px;\"><strong>n</strong> meters, your task is to cut it into multiple smaller ropes such that the product of their lengths is maximized. At least one cut is mandatory.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 2\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Since 1 cut is mandatory. Maximum obtainable product is <strong>1 * 1 = 1</strong>.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Maximum obtainable product is <strong>2 * 3 = 6</strong>.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; n &le; 58</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a rope of length *n* meters. Your task is to cut the rope into multiple smaller ropes, making at least one cut, such that the product of the lengths of the smaller ropes is maximized.",
                "constraints": [
                    "2 <= n <= 58"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "1",
                        "explanation": "Since at least one cut is required, the rope of length 2 must be cut into two pieces of length 1 each. The product is 1 * 1 = 1."
                    },
                    {
                        "input": "5",
                        "output": "6",
                        "explanation": "The rope of length 5 can be cut into pieces of length 2 and 3. The product is 2 * 3 = 6. This is the maximum possible product."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use Dynamic Programming.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\nint maxProduct(int n) {\n    int *dp = (int *)malloc((n + 1) * sizeof(int));\n    if (dp == NULL) {\n        return -1; // Handle memory allocation failure\n    }\n\n    for (int i = 0; i <= n; i++) {\n        dp[i] = 0; // Initialize dp array\n    }\n\n    for (int i = 2; i <= n; i++) {\n        for (int len = 1; len <= i / 2; len++) {\n            if (len * dp[i - len] > dp[i]) {\n                dp[i] = len * dp[i - len];\n            }\n            if (len * (i - len) > dp[i]) {\n                dp[i] = len * (i - len);\n            }\n        }\n    }\n\n    int result = dp[n];\n    free(dp); // Free allocated memory\n    return result;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxProduct(int n) {\n        vector<int> dp(n + 1);\n        for (int i = 2; i <= n; i++) {\n            for (int len = 1; len <= i / 2; len++) {\n                dp[i] = max(dp[i], len * dp[i - len]);\n                dp[i] = max(dp[i], len * (i - len));\n            }\n        }\n        return dp[n];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public int maxProduct(int n) {\n        int[] dp = new int[n + 1];\n        for (int i = 2; i <= n; i++) {\n            for (int len = 1; len <= i / 2; len++) {\n                dp[i] = Math.max(dp[i], len * dp[i - len]);\n                dp[i] = Math.max(dp[i], len * (i - len));\n            }\n        }\n        return dp[n];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def maxProduct(self, n: int) -> int:\n        dp = [0] * (n + 1)\n        for i in range(2, n + 1):\n            for length in range(1, i // 2 + 1):\n                dp[i] = max(dp[i], length * dp[i - length])\n                dp[i] = max(dp[i], length * (i - length))\n        return dp[n]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    maxProduct(n) {\n        let dp = new Array(n + 1).fill(0);\n        for (let i = 2; i <= n; i++) {\n            for (let len = 1; len <= Math.floor(i / 2); len++) {\n                dp[i] = Math.max(dp[i], len * dp[i - len]);\n                dp[i] = Math.max(dp[i], len * (i - len));\n            }\n        }\n        return dp[n];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}