{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702877,
            "title": "Max Score from Subarray Mins",
            "titleSlug": "max-sum-in-sub-arrays0824",
            "content": "<p><span >Given an array <strong>arr[]</strong>, with 0-based indexing, select any two indexes, <strong>i</strong> and <strong>j</strong> such that <strong>i &lt; j</strong>. From the subarray <strong>arr[i...j]</strong>, select the <strong>smallest</strong> and <strong>second smallest&nbsp;</strong>numbers and add them, you will get the <strong>score </strong>for that subarray. Return the <strong>maximum </strong>possible score<strong> </strong>across all the subarrays of array <strong>arr[]</strong>.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input :</strong> arr[] = [4, 3, 1, 5, 6]\n<strong>Output :</strong> 11\n<strong>Explanation :</strong> Subarrays with smallest and second smallest are:- [4, 3] smallest = 3,second smallest = 4\n[4, 3, 1] smallest = 1, second smallest = 3\n[4, 3, 1, 5] smallest = 1, second smallest = 3\n[4, 3, 1, 5, 6] smallest = 1, second smallest = 3\n[3, 1] smallest = 1, second smallest = 3\n[3, 1, 5] smallest = 1, second smallest = 3\n[3, 1, 5, 6] smallest = 1, second smallest = 3\n[1, 5] smallest = 1, second smallest = 5\n[1, 5, 6] smallest = 1, second smallest = 5\n[5, 6] smallest = 5, second smallest = 6\nMaximum sum among all above choices is, 5 + 6 = 11.</span></pre>\n<pre><span ><strong>Input :</strong> arr[] = [5, 4, 3, 1, 6] \n<strong>Output :</strong> 9</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />2 &le; arr.size &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of size n (0-based indexing), find the maximum possible score across all its subarrays.  For each subarray `arr[i...j]` where `i < j`, calculate the score by summing the smallest and second smallest elements within that subarray. Return the largest score found among all possible subarrays.",
                "constraints": [
                    "2 <= arr.size <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[4, 3, 1, 5, 6]",
                        "output": "11",
                        "explanation": "Consider all possible subarrays:\n- [4, 3]: smallest = 3, second smallest = 4, score = 7\n- [4, 3, 1]: smallest = 1, second smallest = 3, score = 4\n- [4, 3, 1, 5]: smallest = 1, second smallest = 3, score = 4\n- [4, 3, 1, 5, 6]: smallest = 1, second smallest = 3, score = 4\n- [3, 1]: smallest = 1, second smallest = 3, score = 4\n- [3, 1, 5]: smallest = 1, second smallest = 3, score = 4\n- [3, 1, 5, 6]: smallest = 1, second smallest = 3, score = 4\n- [1, 5]: smallest = 1, second smallest = 5, score = 6\n- [1, 5, 6]: smallest = 1, second smallest = 5, score = 6\n- [5, 6]: smallest = 5, second smallest = 6, score = 11\nThe maximum score is 11."
                    },
                    {
                        "input": "[5, 4, 3, 1, 6]",
                        "output": "9",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Answer the maximum sum of two consecutive element in array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find pair with maximum sum\n    int pairWithMaxSum(vector<int> &arr) {\n        int N = arr.size();\n        int ans = 0;\n\n        // Iterate over the array\n        for (int i = 1; i < N; i++)\n            // Update ans with maximum sum of current and previous element\n            ans = max(arr[i] + arr[i - 1], ans);\n\n        // Return the maximum sum\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find pair with maximum sum\n    public int pairWithMaxSum(int arr[]) {\n        int n = arr.length;\n        int ans = Integer.MIN_VALUE;\n\n        // Iterate over the array\n        for (int i = 1; i < n; i++) {\n            // Update ans with maximum sum of current and previous element\n            ans = Math.max(arr[i] + arr[i - 1], ans);\n        }\n\n        // Return the maximum sum\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def pairWithMaxSum(self, arr):\n        N = len(arr)\n        ans = float('-inf')  # Initialize to negative infinity\n\n        # Iterate over the array\n        for i in range(1, N):\n            # Update ans with maximum sum of current and previous element\n            ans = max(arr[i] + arr[i - 1], ans)\n\n        # Return the maximum sum\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    pairWithMaxSum(arr) {\n        let N = arr.length;\n        let ans = Number.NEGATIVE_INFINITY;\n\n        for (let i = 1; i < N; i++) {\n            ans = Math.max(arr[i] + arr[i - 1], ans);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}