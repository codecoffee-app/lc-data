{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700276,
            "title": "Max sum in the configuration",
            "titleSlug": "max-sum-in-the-configuration",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer array(0-based indexing) <strong>arr[]</strong><strong>. </strong>Find&nbsp;the <strong>maximum</strong> value of the sum of<strong> i*arr[i] </strong>for all <strong>0 &lt;= i &lt;= arr.size()-1</strong>,<strong>&nbsp;</strong>where&nbsp;<strong>arr</strong><strong>[i]</strong> is the element at index <strong>i </strong>in the arr[]. The only operation allowed is to <strong>rotate(clockwise or counterclockwise)</strong> the array any number of times.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [8, 3, 1, 2]\n<strong>Output: </strong>29<strong>\nExplanation: </strong>Out of all the possible configurations by rotating the elements: arr[] = [3, 1, 2, 8] here (3*0) + (1*1) + (2*2) + (8*3) sum is maximum i.e. 29.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3]\n<strong>Output: </strong>8<strong>\nExplanation: </strong>Out of all the possible configurations by rotating the elements: arr[] = [1, 2, 3] here (1*0) + (2*1) + (3*2) sum is maximum i.e. 8.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [4, 13]\n<strong>Output: </strong>13</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=arr.size()&lt;=10<sup>4</sup><br />1&lt;=arr[i]&lt;=20</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use the formula for rotation sum: <span class=\"katex\">new_val=prev_val&minus;(cum_sum&minus;arr[i&minus;1])+arr[i&minus;1]&times;(n&minus;1)</span> and keep track of the maximum over the array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxSum(vector<int> &arr) {\n        int n = arr.size();\n        int cum_sum = 0;\n        for (int i = 0; i < n; i++) {\n            cum_sum += arr[i];\n        }\n\n        // calculating initial value and setting max as initial value\n        int initial_val = 0;\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            initial_val += i * arr[i];\n            max = initial_val;\n        }\n\n        for (int i = 1; i < n; i++) {\n            int temp = initial_val - (cum_sum - arr[i - 1]) + arr[i - 1] * (n - 1);\n            initial_val = temp;\n            if (temp > max)\n                max = temp;\n        }\n\n        return max;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    int maxSum(int[] arr) {\n        int n = arr.length;\n        int cum_sum = 0;\n        for (int i = 0; i < n; i++) cum_sum += arr[i];\n\n        int initial_val = 0;\n        int max = 0;\n\n        for (int i = 0; i < n; i++) {\n            initial_val += i * arr[i];\n            max = initial_val;\n        }\n\n        for (int i = 1; i < n; i++) {\n            int temp = initial_val - (cum_sum - arr[i - 1]) + arr[i - 1] * (n - 1);\n            initial_val = temp;\n            if (temp > max) max = temp;\n        }\n\n        return max;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# User function Template for python3\n\n\nclass Solution:\n\n    def maxSum(self, arr):\n        n = len(arr)\n\n        # Calculate the cumulative sum of the array\n        cum_sum = sum(arr)\n\n        # Calculate the initial rotation sum\n        initial_val = sum(i * arr[i] for i in range(n))\n        max_val = initial_val  # Initialize max as the initial rotation sum\n\n        # Iteratively calculate rotation sums\n        for i in range(1, n):\n            # Rotation formula:\n            # new_val = previous_val - (cum_sum - arr[i-1]) + arr[i-1] * (n-1)\n            initial_val = initial_val - (cum_sum -\n                                         arr[i - 1]) + arr[i - 1] * (n - 1)\n            max_val = max(max_val, initial_val)\n\n        return max_val\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n\n    maxSum(arr) {\n        let n = arr.length;\n\n        // Calculate cumulative sum of the array\n        let cum_sum = arr.reduce((a, b) => a + b, 0);\n\n        // Calculate the initial rotation sum\n        let initial_val = 0;\n        for (let i = 0; i < n; i++) {\n            initial_val += i * arr[i];\n        }\n\n        let max_val = initial_val; // Initialize max as the initial rotation sum\n\n        // Iteratively calculate rotation sums\n        for (let i = 1; i < n; i++) {\n            // Rotation formula:\n            // new_val = previous_val - (cum_sum - arr[i-1]) + arr[i-1] * (n-1)\n            initial_val = initial_val - (cum_sum - arr[i - 1]) + arr[i - 1] * (n - 1);\n            max_val = Math.max(max_val, initial_val);\n        }\n\n        return max_val;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}