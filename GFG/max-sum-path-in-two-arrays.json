{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700241,
            "title": "Max sum path in two arrays",
            "titleSlug": "max-sum-path-in-two-arrays",
            "content": "<p><span style=\"font-size: 18px;\">Given two <strong>sorted</strong> arrays of <strong>distinct </strong>integers <strong>arr1</strong> and <strong>arr2</strong>. Each array may have some elements in common with the other array. Find the <strong>maximum sum of a path</strong> from the beginning of any array to the end of any array. You can switch from one array to another array only at the common elements. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp; When we switch from one array to other,&nbsp; we need to consider the common element only once in the result.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :&nbsp;</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1 = [2, 3, 7, 10, 12] , arr2 = [1, 5, 7, 8]\n<strong>Output: </strong>35<strong>\nExplanation: </strong>The path will be 1+5+7+10+12 = 35, where 1 and 5 come from arr2 and then 7 is common so we switch to arr1 and add 10 and 12.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1 = [1, 2, 3] , arr2[] = [3, 4, 5]\n<strong>Output: </strong>15<strong>\nExplanation: </strong>The path will be 1+2+3+4+5=15.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(m + n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr1.size(), arr2.size() &lt;= 10<sup>4</sup><br />1 &lt;= arr1[i], arr2[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use two pointers to traverse both arrays and calculate maximum sum paths.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxPathSum(vector<int> &arr1, vector<int> &arr2) {\n        int i = 0, j = 0;\n        int result = 0, sum1 = 0, sum2 = 0;\n        int m = arr1.size(), n = arr2.size();\n        // Using two pointers to iterate over two arrays\n        while (i < m && j < n) {\n            // if ar1 is smaller than ar2, incresing ar1 and adding its value to sum1\n            if (arr1[i] < arr2[j])\n                sum1 += arr1[i++];\n            // if ar2 is smaller than ar1, incresing ar2 and adding its value to sum2\n            else if (arr1[i] > arr2[j])\n                sum2 += arr2[j++];\n            // if ar1=ar2, checking the maximum sum obtained from both the arrays\n            // updating result and sum1 and sum2 is again changed to zero\n            else {\n                result += max(sum1, sum2);\n                sum1 = 0, sum2 = 0;\n                while (i < m && j < n && arr1[i] == arr2[j]) {\n                    result = result + arr1[i++];\n                    j++;\n                }\n            }\n        }\n        // if jth pointer reaches end\n        while (i < m)\n            sum1 += arr1[i++];\n        // if ith pointer reaches end\n        while (j < n)\n            sum2 += arr2[j++];\n\n        // last maximum sum to be added after the end of the loop\n        result += max(sum1, sum2);\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public int maxPathSum(List<Integer> arr1, List<Integer> arr2) {\n        int i = 0, j = 0;\n        int result = 0, sum1 = 0, sum2 = 0;\n        int m = arr1.size(), n = arr2.size();\n\n        // Using two pointers to iterate over two arrays\n        while (i < m && j < n) {\n            // if arr1 is smaller than arr2, increasing arr1 and adding its value to\n            // sum1\n            if (arr1.get(i) < arr2.get(j)) sum1 += arr1.get(i++);\n            // if arr2 is smaller than arr1, increasing arr2 and adding its value to\n            // sum2\n            else if (arr1.get(i) > arr2.get(j))\n                sum2 += arr2.get(j++);\n            // if arr1 equals arr2, checking the maximum sum obtained from both the\n            // arrays updating result and sum1 and sum2 are again changed to zero\n            else {\n                result += Math.max(sum1, sum2);\n                sum1 = 0;\n                sum2 = 0;\n                while (i < m && j < n && arr1.get(i).equals(arr2.get(j))) {\n                    result += arr1.get(i++);\n                    j++;\n                }\n            }\n        }\n\n        // if jth pointer reaches end\n        while (i < m) sum1 += arr1.get(i++);\n        // if ith pointer reaches end\n        while (j < n) sum2 += arr2.get(j++);\n\n        // last maximum sum to be added after the end of the loop\n        result += Math.max(sum1, sum2);\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxPathSum(self, arr1, arr2):\n        i, j = 0, 0\n        result, sum1, sum2 = 0, 0, 0\n        m, n = len(arr1), len(arr2)\n\n        # Using two pointers to iterate over two arrays\n        while i < m and j < n:\n            # if arr1 is smaller than arr2, increasing arr1 and adding its value to sum1\n            if arr1[i] < arr2[j]:\n                sum1 += arr1[i]\n                i += 1\n            # if arr2 is smaller than arr1, increasing arr2 and adding its value to sum2\n            elif arr1[i] > arr2[j]:\n                sum2 += arr2[j]\n                j += 1\n            # if arr1 equals arr2, checking the maximum sum obtained from both the arrays\n            # updating result and sum1 and sum2 are again changed to zero\n            else:\n                result += max(sum1, sum2)\n                sum1 = 0\n                sum2 = 0\n                while i < m and j < n and arr1[i] == arr2[j]:\n                    result += arr1[i]\n                    i += 1\n                    j += 1\n\n        # if jth pointer reaches end\n        while i < m:\n            sum1 += arr1[i]\n            i += 1\n        # if ith pointer reaches end\n        while j < n:\n            sum2 += arr2[j]\n            j += 1\n\n        # last maximum sum to be added after the end of the loop\n        result += max(sum1, sum2)\n\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxPathSum(arr1, arr2) {\n        let i = 0, j = 0;\n        let result = 0, sum1 = 0, sum2 = 0;\n        let m = arr1.length, n = arr2.length;\n\n        // Using two pointers to iterate over two arrays\n        while (i < m && j < n) {\n            // if arr1 is smaller than arr2, increasing arr1 and adding its value to\n            // sum1\n            if (arr1[i] < arr2[j]) {\n                sum1 += arr1[i++];\n            }\n            // if arr2 is smaller than arr1, increasing arr2 and adding its value to\n            // sum2\n            else if (arr1[i] > arr2[j]) {\n                sum2 += arr2[j++];\n            }\n            // if arr1 equals arr2, checking the maximum sum obtained from both the\n            // arrays updating result and sum1 and sum2 are again changed to zero\n            else {\n                result += Math.max(sum1, sum2);\n                sum1 = 0;\n                sum2 = 0;\n                while (i < m && j < n && arr1[i] === arr2[j]) {\n                    result += arr1[i++];\n                    j++;\n                }\n            }\n        }\n\n        // if jth pointer reaches end\n        while (i < m) {\n            sum1 += arr1[i++];\n        }\n        // if ith pointer reaches end\n        while (j < n) {\n            sum2 += arr2[j++];\n        }\n\n        // last maximum sum to be added after the end of the loop\n        result += Math.max(sum1, sum2);\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}