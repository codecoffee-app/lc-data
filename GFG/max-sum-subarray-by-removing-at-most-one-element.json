{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700420,
            "title": "Max sum subarray by removing at most one element",
            "titleSlug": "max-sum-subarray-by-removing-at-most-one-element",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong>. You need to find the maximum sum of the sub-array with the condition that you are allowed to skip at most <strong>one</strong> element.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, -4, 5]\n<strong>Output: </strong>11<strong>\nExplanation: </strong>We can get maximum sum subarray by skipping -4.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-2, -3, 4, -1, -2, 1, 5, -3]\n<strong>Output: </strong>9<strong>\nExplanation: </strong>We can get maximum sum subarray by skipping -2 as [4,-1,1,5] sums to 9, which is the maximum achievable sum.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />-10<sup>6</sup>&nbsp;&lt;= arr[i]&lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum sum of a subarray with the allowance of skipping at most one element within the subarray.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-10^6 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, -4, 5]",
                        "output": "11",
                        "explanation": "The maximum sum subarray can be obtained by skipping -4, resulting in the subarray [1, 2, 3, 5] with a sum of 11."
                    },
                    {
                        "input": "[-2, -3, 4, -1, -2, 1, 5, -3]",
                        "output": "9",
                        "explanation": "The maximum sum subarray can be obtained by skipping -2, resulting in the subarray [4, -1, -2, 1, 5] with a sum of 7, or by skipping -1 resulting in [4, -2, 1, 5] with sum of 8 or by skipping -3 and taking the subarray [4, -1, -2, 1, 5] with sum 7.  The maximum sum subarray can be obtained by skipping -2, resulting in the subarray [4, -1, 1, 5] with a sum of 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the maximum possible sum for every index from its left and right. Skip each element and take the maximum sum.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\n  public:\n    // Function to return maximum sum subarray by removing at most one element.\n    int maxSumSubarray(vector<int>& arr) {\n        int n = arr.size();\n        // l[i] and r[i] will store maximum sum subarray at ith index in\n        // forward and backward directions respectively.\n        int l[n], r[n];\n\n        // initializing current max and max so far with arr[0].\n        int cur = arr[0];\n        int max1 = arr[0];\n        l[0] = cur;\n\n        // calculating maximum sum subarrays in forward direction.\n        for (int i = 1; i < n; i++) {\n            // updating current maximum and max so far.\n            cur = max(arr[i], cur + arr[i]);\n            max1 = max(max1, cur);\n\n            // storing current maximum till ith index in forward array.\n            l[i] = cur;\n        }\n\n        // initializing current max and max so far with arr[n-1].\n        cur = arr[n - 1];\n        max1 = arr[n - 1];\n        r[n - 1] = cur;\n\n        // calculating maximum sum subarrays in backward direction.\n        for (int i = n - 2; i >= 0; i--) {\n            // updating current maximum and max so far.\n            cur = max(arr[i], cur + arr[i]);\n            max1 = max(max1, cur);\n\n            // storing current maximum till ith index in backward array.\n            r[i] = cur;\n        }\n\n        // initializing final answer by max so far so that case when no element\n        // is removed to get maximum sum subarray is also handled.\n        int ans = max1;\n\n        for (int i = 1; i < n - 1; i++) {\n            // skipping the ith value and choosing the\n            // maximum from answer and l[i-1]+r[i+1].\n            ans = max(ans, l[i - 1] + r[i + 1]);\n        }\n\n        // returning the final answer.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    // Function to return maximum sum subarray by removing at most one element.\n    public static int maxSumSubarray(int arr[]) {\n        // fw[i] and bw[i] will store maximum sum subarray at ith index in\n        // forward and backward directions respectively.\n        int n = arr.length;\n        int[] fw = new int[n];\n        int[] bw = new int[n];\n\n        // initializing current max and max so far with arr[0].\n        int cur_max = arr[0], max_so_far = arr[0];\n        fw[0] = cur_max;\n\n        // calculating maximum sum subarrays in forward direction.\n        for (int i = 1; i < n; i++) {\n            // updating current maximum and max so far.\n            cur_max = Math.max(arr[i], cur_max + arr[i]);\n            max_so_far = Math.max(max_so_far, cur_max);\n\n            // storing current maximum till ith index in forward array.\n            fw[i] = cur_max;\n        }\n\n        // initializing current max and max so far with arr[n-1].\n        cur_max = max_so_far = bw[n - 1] = arr[n - 1];\n\n        // calculating maximum sum subarrays in backward direction.\n        for (int i = n - 2; i >= 0; i--) {\n            // updating current maximum and max so far.\n            cur_max = Math.max(arr[i], cur_max + arr[i]);\n            max_so_far = Math.max(max_so_far, cur_max);\n\n            // storing current maximum till ith index in backward array.\n            bw[i] = cur_max;\n        }\n\n        // initializing final answer by max so far so that case when no element\n        // is removed to get maximum sum subarray is also handled.\n        int fans = max_so_far;\n\n        for (int i = 1; i < n - 1; i++) {\n            // skipping the ith value and choosing the\n            // maximum from answer and fw[i-1]+bw[i+1].\n            fans = Math.max(fans, fw[i - 1] + bw[i + 1]);\n        }\n        // returning the final answer.\n        return fans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    #Function to return maximum sum subarray by removing at most one element.\n    def maxSumSubarray(self, arr):\n\n        n = len(arr)\n        #fw[i] and bw[i] will store maximum sum subarray at ith index in\n        #forward and backward directions respectively.\n        fw = [0 for i in range(n)]\n        bw = [0 for i in range(n)]\n\n        #initializing current max and max so far with arr[0].\n        curmax = arr[0]\n        maxsofar = arr[0]\n        fw[0] = curmax\n\n        #calculating maximum sum subarrays in forward direction.\n        for i in range(1, n):\n\n            #updating current maximum and max so far.\n            curmax = max(arr[i], curmax + arr[i])\n            maxsofar = max(maxsofar, curmax)\n\n            #storing current maximum till ith index in forward array.\n            fw[i] = curmax\n\n        #initializing current max and max so far with arr[n-1].\n        curmax = maxsofar = bw[n - 1] = arr[n - 1]\n\n        #calculating maximum sum subarrays in backward direction.\n        for i in range(n - 2, -1, -1):\n\n            #updating current maximum and max so far.\n            curmax = max(arr[i], curmax + arr[i])\n            maxsofar = max(maxsofar, curmax)\n\n            #storing current maximum till ith index in backward array.\n            bw[i] = curmax\n\n        #initializing final answer by max so far so that case when no element\n        #is removed to get maximum sum subarray is also handled.\n        final = maxsofar\n\n        for i in range(1, n - 1):\n\n            #skipping the ith value and choosing the\n            #maximum from answer and fw[i-1]+bw[i+1].\n            final = max(final, fw[i - 1] + bw[i + 1])\n\n        #returning the final answer.\n        return final\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    // Function to return maximum sum subarray by removing at most one element.\n    maxSumSubarray(arr) {\n        // l[i] and r[i] will store maximum sum subarray at ith index in\n        // forward and backward directions respectively.\n        let n = arr.length;\n        let l = new Array(n);\n        let r = new Array(n);\n\n        // initializing current max and max so far with arr[0].\n        let cur = arr[0];\n        let max1 = arr[0];\n        l[0] = cur;\n\n        // calculating maximum sum subarrays in forward direction.\n        for (let i = 1; i < n; i++) {\n            // updating current maximum and max so far.\n            cur = Math.max(arr[i], cur + arr[i]);\n            max1 = Math.max(max1, cur);\n\n            // storing current maximum till ith index in forward array.\n            l[i] = cur;\n        }\n\n        // initializing current max and max so far with arr[n-1].\n        cur = arr[n - 1];\n        max1 = arr[n - 1];\n        r[n - 1] = cur;\n\n        // calculating maximum sum subarrays in backward direction.\n        for (let i = n - 2; i >= 0; i--) {\n            // updating current maximum and max so far.\n            cur = Math.max(arr[i], cur + arr[i]);\n            max1 = Math.max(max1, cur);\n\n            // storing current maximum till ith index in backward array.\n            r[i] = cur;\n        }\n\n        // initializing final answer by max so far so that case when no element\n        // is removed to get maximum sum subarray is also handled.\n        let ans = max1;\n\n        for (let i = 1; i < n - 1; i++) {\n            // skipping the ith value and choosing the\n            // maximum from answer and l[i-1]+r[i+1].\n            ans = Math.max(ans, l[i - 1] + r[i + 1]);\n        }\n        // returning the final answer.\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}