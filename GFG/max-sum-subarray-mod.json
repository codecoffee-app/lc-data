{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 891371,
            "title": "Max Sum Subarray Mod",
            "titleSlug": "max-sum-subarray-mod",
            "content": "<p><span >Given an array of<span style=\"font-family: math;\"> </span><span >n </span>elements and an integer <span class=\"katex\">m</span>, find the maximum value of the sum of any subarray modulo m.</span></p>\n<p>.<strong style=\"font-size: 18.6667px;\">Examples:</strong></p>\n<pre><span ><strong>Input</strong>: arr[] = [10, 7, 18], m = 13\n<strong>Output</strong>: 12\n<strong>Explanation</strong>: All subarrays and their modulo values:<br /></span><span style=\"font-size: 18.6667px;\">[10] &rarr; 10 mod 13 = 10  \n[7] &rarr; 7 mod 13 = 7  \n[18] &rarr; 18 mod 13 = 5  \n[10, 7] &rarr; 17 mod 13 = 4  \n[7, 18] &rarr; 25 mod 13 = 12  \n[10, 7, 18] &rarr; 35 mod 13 = 9<br /></span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [3, 3, 9, 9, 5], m = 7\n<strong>Output</strong>: 6\n<strong>Explanation</strong>: The subarray [3,3] has maximum sub-array sum modulo 7</span></pre>\n<p><span ><strong>Constraints:</strong></span></p>\n<p><span >1 &le; arr.size() &le; 10<sup>5<br /></sup></span><span >1 &le; m &le;&nbsp;10<sup>9</sup><br />1 &le; arr[i] &le; 10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Maintain a running prefix sum and take modulo m at each step</p>",
            "<p>Use a Set to efficiently find the smallest prefix greater than the current sum.</p>",
            "<p>Check for better results using (pre - minValue + m) % m</p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int maxSub(vector<int>& arr, int m) {\n        int pre = 0, mx = 0;\n\n        // Create an ordered set to store prefix sums for efficient searching.\n        set<int> s;\n        s.insert(0);\n\n        // Loop through each element in the array.\n        for (int i = 0; i < arr.size(); i++) {\n            pre = (pre + arr[i]) % m;\n            mx = max(mx, pre);\n\n            // Find the smallest prefix in the set greater than the current prefix.\n            auto it = s.lower_bound(pre + 1);\n\n            // If such a prefix exists, calculate the potential maximum modulo sum.\n            if (it != s.end())\n                mx = max(mx, (pre - *it + m) % m);\n\n            // Insert the current prefix sum into the set for future comparisons.\n            s.insert(pre);\n        }\n        return mx;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxSub(List<Integer> arr, int m) {\n        int pre = 0, mx = 0;\n\n        // Using TreeSet to store prefix sums for efficient searching.\n        TreeSet<Integer> s = new TreeSet<>();\n        s.add(0);\n\n        // Loop through each element in the array.\n        for (int i = 0; i < arr.size(); i++) {\n            pre = (pre + arr.get(i)) % m;\n            mx = Math.max(mx, pre);\n\n            // Find the smallest prefix in the set greater than the current prefix.\n            Integer it = s.ceiling(pre + 1);\n            if (it != null) {\n                mx = Math.max(mx, (pre - it + m) % m);\n            }\n\n            // Insert the current prefix sum into the set for future comparisons.\n            s.add(pre);\n        }\n        return mx;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxSub(self, arr, m):\n        pre = 0\n        mx = 0\n        s = [0]  # Sorted list for prefix sums\n\n        for num in arr:\n            pre = (pre + num) % m\n            mx = max(mx, pre)\n\n            # Find the smallest prefix sum greater than pre\n            idx = self.lower_bound(s, pre + 1)\n            if idx < len(s):\n                mx = max(mx, (pre - s[idx] + m) % m)\n\n            # Insert pre in sorted order\n            insert_idx = self.lower_bound(s, pre)\n            s.insert(insert_idx, pre)\n\n        return mx\n\n    def lower_bound(self, arr, value):\n        low, high = 0, len(arr)\n        while low < high:\n            mid = (low + high) // 2\n            if arr[mid] < value:\n                low = mid + 1\n            else:\n                high = mid\n        return low\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function\nfunction maxSub(arr, m) {\n    let pre = 0, mx = 0;\n    let s = []; // sorted array of prefix sums\n    s.push(0);\n    for (let i = 0; i < arr.length; i++) {\n        pre = (pre + arr[i]) % m;\n        mx = Math.max(mx, pre);\n        let idx = lowerBound(s, pre + 1);\n        if (idx < s.length) {\n            mx = Math.max(mx, (pre - s[idx] + m) % m);\n        }\n        let insertIdx = lowerBound(s, pre);\n        s.splice(insertIdx, 0, pre);\n    }\n    return mx;\n}\n\nfunction lowerBound(arr, value) {\n    let low = 0, high = arr.length;\n    while (low < high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] < value) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}