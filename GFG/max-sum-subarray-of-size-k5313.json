{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703836,
            "title": "Max Sum Subarray of size K",
            "titleSlug": "max-sum-subarray-of-size-k5313",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of integers<strong> arr[]&nbsp;</strong> and a number<strong> k</strong>. Return&nbsp;the <strong>maximum sum</strong> of a subarray of size k.</span></p>\n<p><span >Note: A subarray is a contiguous part of any given array.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span ><strong>Input:</strong> arr[] = [100, 200, 300, 400] , k = 2\n<strong>Output: </strong>700\n<strong>Explanation: </strong>arr<sub>3 </sub> + arr<sub>4</sub> = 700, which is maximum.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [100, 200, 300, 400] , k = 4\n<strong>Output: </strong>1000\n<strong>Explanation: </strong>arr<sub>1</sub> + arr<sub>2</sub> + arr<sub>3 </sub>+ arr<sub>4</sub> = 1000, </span><span style=\"font-size: 18px;\"><span >which is maximum.</span><br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><span ><strong>Input:</strong> arr[] = [100, 200, 300, 400] , k = 1\n<strong>Output: </strong>400\n<strong>Explanation: </strong>arr<sub>4</sub> = 400, which is maximum.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6<br /></sup>1 &lt;= arr[i]&lt;= 10<sup>6<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= k&lt;= arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try fixing two-pointers iterating over the array and calculating the values.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Misc",
                "slug": "misc"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "oyo-rooms"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find the maximum sum of a subarray of size K.\n    int maximumSumSubarray(vector<int>& arr, int k) {\n\n        int n = arr.size();\n        int res = 0;\n        // Calculating the sum of the first K elements in the array.\n        for (int i = 0; i < k; i++)\n            res += arr[i];\n\n        int curr_sum = res;\n        // Iterating over the remaining elements in the array.\n        for (int i = k; i < n; i++) {\n            // Calculating the sum of the current subarray by subtracting the first\n            // element of the previous subarray and adding the current element.\n            curr_sum += arr[i] - arr[i - k];\n            // Updating the result with the maximum of the current sum and the previous\n            // result.\n            res = max(res, curr_sum);\n        }\n\n        // Returning the maximum sum of a subarray of size K.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maximumSumSubarray(int[] arr, int k) {\n        int n = arr.length;\n        int res = 0;\n\n        // Calculating the sum of the first K elements in the array.\n        for (int i = 0; i < k; i++) {\n            res += arr[i];\n        }\n\n        int curr_sum = res;\n\n        // Iterating over the remaining elements in the array.\n        for (int i = k; i < n; i++) {\n            // Calculating the sum of the current subarray by\n            // subtracting the first element of the previous subarray\n            // and adding the current element.\n            curr_sum += arr[i] - arr[i - k];\n            // Updating the result with the maximum of the current sum\n            // and the previous result.\n            res = Math.max(res, curr_sum);\n        }\n\n        // Returning the maximum sum of a subarray of size K.\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maximumSumSubarray(self, arr, k):\n        n = len(arr)\n        res = sum(arr[:k])  # Calculate the sum of the first k elements\n        curr_sum = res\n\n        for i in range(k, n):\n            curr_sum += arr[i] - arr[i - k]  # Update the current sum\n            res = max(res, curr_sum)  # Update the maximum sum if necessary\n\n        return res  # Return the maximum sum of a subarray of size k\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to find the maximum sum of a subarray of size K.\n    public int MaximumSumSubarray(int[] arr, int k) {\n        int n = arr.Length;\n        int res = 0;\n\n        // Calculating the sum of the first K elements in the array.\n        for (int i = 0; i < k; i++) res += arr[i];\n\n        int curr_sum = res;\n        // Iterating over the remaining elements in the array.\n        for (int i = k; i < n; i++) {\n            // Calculating the sum of the current subarray by subtracting the first\n            // element of the previous subarray and adding the current element.\n            curr_sum += arr[i] - arr[i - k];\n            // Updating the result with the maximum of the current sum and the previous\n            // result.\n            res = Math.Max(res, curr_sum);\n        }\n\n        // Returning the maximum sum of a subarray of size K.\n        return res;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maximumSumSubarray(arr, k) {\n        let n = arr.length;\n        let res = 0;\n\n        // Calculate the sum of the first k elements\n        for (let i = 0; i < k; i++) {\n            res += arr[i];\n        }\n\n        let curr_sum = res;\n\n        // Iterate over the remaining elements\n        for (let i = k; i < n; i++) {\n            curr_sum += arr[i] - arr[i - k]; // Update the current sum\n            res = Math.max(res, curr_sum);   // Update the maximum sum\n        }\n\n        return res; // Return the maximum sum of a subarray of size k\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}