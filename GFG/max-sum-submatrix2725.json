{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703323,
            "title": "Max sum submatrix",
            "titleSlug": "max-sum-submatrix2725",
            "content": "<p><span style=\"font-size:18px\">Given a matrix of size NxM and a list of queries containing (a,b) pairs. Find the maximum sum among all (a x b) sub-matrices of the matrix.&nbsp;<br />\r\n<strong>Note:</strong> The rows and columns of the submatrix must be contiguous. For example:</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3, M = 4\r\nmat[][] = {{1, 2, 3, 9}, \r\n\\t     {4, 5, 6, 2}, \r\n\\t     {8, 3, 2, 6}}\r\nQ = 1\r\nQueries[] = {(3,2)}</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 28</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nHere a = 3 and b = 2.</span>\r\n\r\n<span style=\"font-size:18px\">The first 3x2 submatrix is:\r\n1 2\r\n4 5\r\n8 3\r\nThe sum of elements in this is 23.</span>\r\n\r\n<span style=\"font-size:18px\">The second 3x2 submatrix is:\r\n2 3\r\n5 6\r\n3 2\r\nThe sum of elements in this is 21.</span>\r\n\r\n<span style=\"font-size:18px\">The third 3x2 submatrix is:\r\n3 9\r\n6 2\r\n2 6\r\nThe sum of elements in this is 28.</span>\r\n\r\n<span style=\"font-size:18px\">The maximum among these is 28.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3, M = 4\r\nmat[][] = {{1, 2, 3, 9}, \r\n\\t     {4, 5, 6, 2}, \r\n\\t     {8, 3, 2, 6}}\r\nQ = 3\r\nQueries[] = {(1, 1), (2, 2), (3, 3)}</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 9 20 38</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 3:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 2, M = 7\r\nmat[][] = {{49, 44, 46, 22, 24, 11, 2}, \r\n\\t     {5, 25, 24, 28, 20, 47, 47}}\r\nQ = 1\r\nQueries = {(2, 1)}</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 70</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>maxSubMatrixSumQueries() </strong>which takes the 2D array of integers mat, n, m, queries and q as input parameters and returns an array of integers denoting the maximum sum for each query.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(Q*N*M)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N*M)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>3</sup><br />\r\n1 &le; M &le; 10<sup>3</sup><br />\r\n1 &le; Q &le; 100<br />\r\n1 &le; a &le; N<br />\r\n1 &le; b &le; M<br />\r\n1 &le; mat[i][j] &le; 10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of size N x M and a list of queries, each containing a pair of integers (a, b). For each query, find the maximum sum among all a x b sub-matrices within the given matrix. The rows and columns of the submatrix must be contiguous.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "1 <= M <= 10^3",
                    "1 <= Q <= 100",
                    "1 <= a <= N",
                    "1 <= b <= M",
                    "1 <= mat[i][j] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "N = 3, M = 4\nmat[][] = {{1, 2, 3, 9}, \n          {4, 5, 6, 2}, \n          {8, 3, 2, 6}}\nQ = 1\nQueries[] = {(3,2)}",
                        "output": "28",
                        "explanation": "For the query (3, 2), we consider all 3x2 sub-matrices. The sub-matrices are:\n{{1, 2}, {4, 5}, {8, 3}} (sum = 23)\n{{2, 3}, {5, 6}, {3, 2}} (sum = 21)\n{{3, 9}, {6, 2}, {2, 6}} (sum = 28). The maximum sum is 28."
                    },
                    {
                        "input": "N = 3, M = 4\nmat[][] = {{1, 2, 3, 9}, \n          {4, 5, 6, 2}, \n          {8, 3, 2, 6}}\nQ = 3\nQueries[] = {(1, 1), (2, 2), (3, 3)}",
                        "output": "9 20 38",
                        "explanation": null
                    },
                    {
                        "input": "N = 2, M = 7\nmat[][] = {{49, 44, 46, 22, 24, 11, 2}, \n          {5, 25, 24, 28, 20, 47, 47}}\nQ = 1\nQueries = {(2, 1)}",
                        "output": "70",
                        "explanation": "For the query (2, 1), we consider all 2x1 sub-matrices. The sub-matrices are:\n{{49}, {5}} (sum = 54)\n{{44}, {25}} (sum = 69)\n{{46}, {24}} (sum = 70)\n{{22}, {28}} (sum = 50)\n{{24}, {20}} (sum = 44)\n{{11}, {47}} (sum = 58)\n{{2}, {47}} (sum = 49). The maximum sum is 70."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Create an auxiliary array to answer sum queries for size a*b.<br />\n<a href=\"https://www.geeksforgeeks.org/submatrix-sum-queries/\">https://www.geeksforgeeks.org/submatrix-sum-queries/</a><br />\nGo through this article and check how to answer submatrix sum queries for the given size a*b.</p>\n\n<p>Now use that function and calculate max submatrix sum of all submartices of size a*b.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution{\r\npublic:\r\n    // Function to preprcess input mat[M][N]. This function\r\n    // mainly fills aux[M][N] such that aux[i][j] stores sum\r\n    // of elements from (0,0) to (i,j)\r\n    void preProcess(vector<int> mat[], vector<int> aux[], int n, int m) {\r\n        // Copy first row of mat[][] to aux[][]\r\n        for (int i = 0; i < m; i++) aux[0][i] = mat[0][i];\r\n\r\n        // Do column wise sum\r\n        for (int i = 1; i < n; i++)\r\n            for (int j = 0; j < m; j++) aux[i][j] = mat[i][j] + aux[i - 1][j];\r\n\r\n        // Do row wise sum\r\n        for (int i = 0; i < n; i++)\r\n            for (int j = 1; j < m; j++) aux[i][j] += aux[i][j - 1];\r\n    }\r\n\r\n    // A O(1) time function to compute sum of submatrix\r\n    // between (tli, tlj) and (rbi, rbj) using aux[][]\r\n    // which is built by the preprocess function\r\n    int sumQuery(vector<int> aux[], int tli, int tlj, int rbi, int rbj) {\r\n        // result is now sum of elements between (0, 0) and\r\n        // (rbi, rbj)\r\n        int res = aux[rbi][rbj];\r\n\r\n        // Remove elements between (0, 0) and (tli-1, rbj)\r\n        if (tli > 0) res = res - aux[tli - 1][rbj];\r\n\r\n        // Remove elements between (0, 0) and (rbi, tlj-1)\r\n        if (tlj > 0) res = res - aux[rbi][tlj - 1];\r\n\r\n        // Add aux[tli-1][tlj-1] as elements between (0, 0)\r\n        // and (tli-1, tlj-1) are subtracted twice\r\n        if (tli > 0 && tlj > 0) res = res + aux[tli - 1][tlj - 1];\r\n\r\n        return res;\r\n    }\r\n\r\n    vector<int> maxSubMatrixSumQueries(vector<int> mat[], int n, int m,\r\n                                       vector<pair<int, int>> &queries, int q) {\r\n        vector<int> aux[n];\r\n        for (int i = 0; i < n; i++) aux[i].assign(m, 0);\r\n        preProcess(mat, aux, n, m);\r\n\r\n        vector<int> maxSum(q, 0);\r\n        for (int qi = 0; qi < q; qi++) {\r\n            for (int i = 0; i < n - queries[qi].first + 1; i++) {\r\n                for (int j = 0; j < m - queries[qi].second + 1; j++) {\r\n                    maxSum[qi] = max(maxSum[qi],\r\n                                     sumQuery(aux, i, j, i + queries[qi].first - 1,\r\n                                              j + queries[qi].second - 1));\r\n                }\r\n            }\r\n        }\r\n        return maxSum;\r\n    }\r\n};\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}