{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713543,
            "title": "Max Sum without Adjacents",
            "titleSlug": "max-sum-without-adjacents--170645",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>Arr&nbsp;</strong>of size <strong>N</strong>&nbsp;containing&nbsp;positive integers. Find the maximum sum of a subsequence such that no two numbers in the sequence should be adjacent in the array. </span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 6\r\nArr[] = {5, 5, 10, 100, 10, 5}\r\n<strong>Output:</strong> 110\r\n<strong>Explanation:</strong> If you take indices 0, 3\r\nand 5, then Arr[0]+Arr[3]+Arr[5] =\r\n5+100+5 = 110.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 4\r\nArr[] = {3, 2, 7, 10}\r\n<strong>Output:</strong> 13\r\n<strong>Explanation: </strong>3 and 10 forms a non\r\ncontinuous  subsequence with maximum\r\nsum.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>findMaxSum()</strong>&nbsp;which takes the&nbsp;array of&nbsp;integers&nbsp;<strong>arr&nbsp;</strong>and&nbsp;<strong>n</strong><strong>&nbsp;</strong>as parameters and returns an integer denoting the answer. It is guaranteed that your answer will always fit in the 32-bit integer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>6</sup><br />\r\n1 &le; Arr<sub>i</sub> &le; 10<sup>7</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, find the maximum sum of a subsequence such that no two numbers in the sequence are adjacent in the array.",
                "constraints": [
                    "1 <= N <= 10^6",
                    "1 <= Arr[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "N = 6, Arr[] = {5, 5, 10, 100, 10, 5}",
                        "output": "110",
                        "explanation": "The subsequence {5, 100, 5} at indices 0, 3, and 5 gives the maximum sum of 5 + 100 + 5 = 110, with no adjacent elements."
                    },
                    {
                        "input": "N = 4, Arr[] = {3, 2, 7, 10}",
                        "output": "13",
                        "explanation": "The subsequence {3, 10} at indices 0 and 3 gives the maximum sum of 3 + 10 = 13, with no adjacent elements."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can use two variables to maintain the max sum.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "amazon",
            "oyo-rooms",
            "factset",
            "walmart",
            "adobe",
            "oxigen-wallet",
            "yahoo"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution{\r\npublic:\r\n\t// calculate the maximum sum with out adjacent\r\n\tint findMaxSum(vector<int>&arr, int n) {\r\n\t    if (n == 0) return 0;\r\n\r\n\t    int value1 = arr[0];\r\n\t    if (n == 1) return value1;\r\n\r\n\t    int value2 = max(arr[0], arr[1]);\r\n\t    if (n == 2) return value2;\r\n\r\n\t    // contains maximum sum at the end\r\n\t    int max_sum = 0;\r\n\r\n\t    // Fill remaining positions\r\n\t    for (int i = 2; i < n; i++) {\r\n\t        max_sum = max(arr[i] + value1, value2);\r\n\t        value1 = value2;\r\n\t        value2 = max_sum;\r\n\t    }\r\n\r\n\t    return max_sum;\r\n\t}\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    int findMaxSum(int arr[], int n) {\r\n        if (n == 0) return 0;\r\n\r\n\t    int value1 = arr[0];\r\n\t    if (n == 1) return value1;\r\n\r\n\t    int value2 = Math.max(arr[0], arr[1]);\r\n\t    if (n == 2) return value2;\r\n\r\n\t    // contains maximum sum at the end\r\n\t    int max_sum = 0;\r\n\r\n\t    // Fill remaining positions\r\n\t    for (int i = 2; i < n; i++) {\r\n\t        max_sum = Math.max(arr[i] + value1, value2);\r\n\t        value1 = value2;\r\n\t        value2 = max_sum;\r\n\t    }\r\n\r\n\t    return max_sum;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    \r\n    def findMaxSum(self,arr, n):\r\n        # initializing the dp array\r\n        dp = [0]*n\r\n        # if there is only one element in the array, return that element\r\n        if n == 1:\r\n            return arr[0]\r\n        # for the first two elements, choose the maximum of the two\r\n        dp[0] = arr[0]\r\n        dp[1] = max(arr[0], arr[1])\r\n        # iterating through the rest of the elements\r\n        for i in range(2, n):\r\n            # choose the maximum of skipping the current element or adding it to the previous sum\r\n            dp[i] = max(dp[i-1], dp[i-2]+arr[i])\r\n        # return the maximum sum\r\n        return dp[n-1]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to find the sum of contiguous subarray with maximum sum.\n    findMaxSum(arr, n)\n    {\n        // initializing the dp array\n        let dp = new Array(n);\n        // if there is only one element in the array, return that element\n        if (n === 1) {\n            return arr[0];\n        }\n        // for the first two elements, choose the maximum of the two\n        dp[0] = arr[0];\n        dp[1] = Math.max(arr[0], arr[1]);\n        // iterating through the rest of the elements\n        for (let i = 2; i < n; i++) {\n            // choose the maximum of skipping the current element or adding it to the previous sum\n            dp[i] = Math.max(dp[i-1], dp[i-2] + arr[i]);\n        }\n        // return the maximum sum\n        return dp[n-1];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}