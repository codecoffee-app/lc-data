{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710036,
            "title": "Max Sum without Adjacents 2",
            "titleSlug": "max-sum-without-adjacents-2",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>a</strong><strong>rr</strong>&nbsp;containing positive integers. Find the maximum sum that can be formed which has no three consecutive elements present from the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 2, 3]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> All three element present in the array is consecutive, hence we have to consider just two element sum having maximum,which is 2+3 = 5</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [3000, 2000, 1000, 3, 10]\n<strong>Output: </strong>5013\n<strong>Explanation:</strong> 3000 + 2000 + 3 + 10 = 5013. Here no three elements is consecutive in that subsequence.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, find the maximum sum that can be formed such that no three consecutive elements from the array are included in the sum.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3]",
                        "output": "5",
                        "explanation": "The array contains three consecutive elements. To maximize the sum without including three consecutive elements, we select 2 and 3, resulting in a sum of 5."
                    },
                    {
                        "input": "[3000, 2000, 1000, 3, 10]",
                        "output": "5013",
                        "explanation": "The optimal selection of elements to maximize the sum while avoiding three consecutive elements is [3000, 2000, 3, 10], resulting in a sum of 5013."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming to keep track of the maximum sum at each position while ensuring no three consecutive elements are included.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    int findMaxSum(vector<int>& arr) {\n        // Stores result for subarray arr[0..i], i.e.,\n        // maximum possible sum in subarray arr[0..i]\n        // such that no three elements are consecutive.\n        int n = arr.size();\n        int sum[n];\n\n        // Base cases (process first three elements)\n        if (n >= 1)\n            sum[0] = arr[0];\n\n        if (n >= 2)\n            sum[1] = arr[0] + arr[1];\n\n        if (n > 2)\n            sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]));\n\n        // Process rest of the elements\n        // We have three cases\n        // 1) Exclude arr[i], i.e., sum[i] = sum[i-1]\n        // 2) Exclude arr[i-1], i.e., sum[i] = sum[i-2] + arr[i]\n        // 3) Exclude arr[i-2], i.e., sum[i-3] + arr[i] + arr[i-1]\n        for (int i = 3; i < n; i++)\n            sum[i] = max(max(sum[i - 1], sum[i - 2] + arr[i]),\n                         arr[i] + arr[i - 1] + sum[i - 3]);\n\n        return sum[n - 1];\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int findMaxSum(int[] arr) {\n        int n = arr.length;\n        if (n == 0) return 0; // Handle empty array\n\n        int[] sum = new int[n];\n\n        // Base cases (process first three elements)\n        if (n >= 1) {\n            sum[0] = arr[0];\n        }\n\n        if (n >= 2) {\n            sum[1] = arr[0] + arr[1];\n        }\n\n        if (n > 2) {\n            sum[2] = Math.max(sum[1], Math.max(arr[1] + arr[2], arr[0] + arr[2]));\n        }\n\n        // Process rest of the elements\n        // We have three cases\n        // 1) Exclude arr[i], i.e., sum[i] = sum[i-1]\n        // 2) Exclude arr[i-1], i.e., sum[i] = sum[i-2] + arr[i]\n        // 3) Exclude arr[i-2], i.e., sum[i] = arr[i] + arr[i-1] + sum[i-3]\n        for (int i = 3; i < n; i++) {\n            sum[i] = Math.max(Math.max(sum[i - 1], sum[i - 2] + arr[i]),\n                              arr[i] + arr[i - 1] + sum[i - 3]);\n        }\n\n        return sum[n - 1];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def findMaxSum(self, arr):\n        n = len(arr)\n        if n == 0:\n            return 0  # Handle empty array\n\n        # Initialize a list to store the sums\n        sum_arr = [0] * n\n\n        # Base cases (process first three elements)\n        if n >= 1:\n            sum_arr[0] = arr[0]\n\n        if n >= 2:\n            sum_arr[1] = arr[0] + arr[1]\n\n        if n > 2:\n            sum_arr[2] = max(sum_arr[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n\n        # Process the rest of the elements\n        for i in range(3, n):\n            sum_arr[i] = max(max(sum_arr[i - 1], sum_arr[i - 2] + arr[i]),\n                             arr[i] + arr[i - 1] + sum_arr[i - 3])\n\n        return sum_arr[n - 1]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    findMaxSum(arr) {\n        const n = arr.length;\n        if (n === 0) return 0; // Handle empty array\n\n        // Initialize an array to store the sums\n        const sum = new Array(n).fill(0);\n\n        // Base cases (process first three elements)\n        if (n >= 1) {\n            sum[0] = arr[0];\n        }\n\n        if (n >= 2) {\n            sum[1] = arr[0] + arr[1];\n        }\n\n        if (n > 2) {\n            sum[2] = Math.max(sum[1], Math.max(arr[1] + arr[2], arr[0] + arr[2]));\n        }\n\n        // Process the rest of the elements\n        for (let i = 3; i < n; i++) {\n            sum[i] = Math.max(Math.max(sum[i - 1], sum[i - 2] + arr[i]),\n                              arr[i] + arr[i - 1] + sum[i - 3]);\n        }\n\n        return sum[n - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}