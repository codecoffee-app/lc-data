{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703083,
            "title": "Max Sum without Adjacents",
            "titleSlug": "max-sum-without-adjacents2430",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr</strong>&nbsp;containing positive integers. Find the maximum sum<strong>&nbsp;</strong>of any possible subsequence such that no two numbers in the subsequence should be adjacent in array&nbsp;<strong>arr</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 5, 10, 100, 10, 5]\n<strong>Output:</strong> 110\n<strong>Explanation:</strong> If you take indices 0, 3 and 5, then = 5+100+5 = 110.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 2, 7, 10]\n<strong>Output:</strong> 13\n<strong>Explanation: </strong>3 and 10 forms a non continuous subsequence with maximum sum.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [9, 1, 6, 10]\n<strong>Output:</strong> 19\n<strong>Explanation: </strong>9 and 10 forms a non continuous subsequence with maximum sum.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr<sub>i</sub>&nbsp;&le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of positive integers, find the maximum sum of any subsequence such that no two numbers in the subsequence are adjacent in `arr`.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[5, 5, 10, 100, 10, 5]",
                        "output": "110",
                        "explanation": "Selecting the elements at indices 0, 3, and 5 yields the subsequence [5, 100, 5] with a sum of 110, which is the maximum possible sum."
                    },
                    {
                        "input": "[3, 2, 7, 10]",
                        "output": "13",
                        "explanation": "Selecting 3 and 10 forms a non-adjacent subsequence with a sum of 13. Other subsequences may have smaller sums, making 13 the maximum."
                    },
                    {
                        "input": "[9, 1, 6, 10]",
                        "output": "19",
                        "explanation": "The optimal solution is to select 9 and 10 to form a non-adjacent subsequence with the maximum sum of 19."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Algorithm:</strong></p>\n\n<ol>\n\t<li>Tackle some basic cases, if the length of the array is 0, print 0, if the length of the array is 1, print the first element, if the length of the array is 2, print maximum of two elements.</li>\n\t<li>Create two variables&nbsp;<em>value1</em>&nbsp;and&nbsp;<em>value2</em>&nbsp;<em>value1</em>&nbsp;as&nbsp;<em>array[0]</em>&nbsp;and&nbsp;<em>value2</em>&nbsp;as maximum of&nbsp;<em>array[0]</em>&nbsp;and&nbsp;<em>array[1]</em>&nbsp;and a variable&nbsp;<em>max_val</em>&nbsp;to store the answer</li>\n\t<li>Traverse the array from the second element to the end of array.</li>\n\t<li>For every index, update&nbsp;<em>max_val</em>&nbsp;as maximum of&nbsp;<em>value1 + array[i]</em>&nbsp;and&nbsp;<em>value2</em>, this step defines the two cases, if an element is selected then the previous element cannot be selected and if an element is not selected then the previous element can be selected.</li>\n\t<li>For every index, Update&nbsp;<em>value1 = value2</em>&nbsp;and&nbsp;<em>value2 = max_val</em></li>\n\t<li>Print the value of&nbsp;<em>max_val</em></li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "flipkart",
            "amazon",
            "oyo-rooms",
            "factset",
            "walmart",
            "adobe",
            "oxigen-wallet",
            "yahoo"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to calculate the maximum sum without selecting adjacent elements\n    int findMaxSum(vector<int>& arr) {\n        int n = arr.size(); // Get the size of the input array\n\n        // If the array is empty, there is no sum to calculate\n        if (n == 0)\n            return 0;\n\n        // Initialize value1 with the first element\n        int value1 = arr[0];\n\n        // If there's only one element, return its value as the maximum sum\n        if (n == 1)\n            return value1;\n\n        // Initialize value2 with the maximum of the first two elements\n        int value2 = max(arr[0], arr[1]);\n\n        // If there are only two elements, return the maximum of them\n        if (n == 2)\n            return value2;\n\n        // Initialize max_sum to store the maximum sum found so far\n        int max_sum = 0;\n\n        // Iterate through the array starting from the third element\n        for (int i = 2; i < n; i++) {\n            // At each step, decide whether to include the current element\n            // If included, add its value to value1 (which is two steps back)\n            // Otherwise, carry forward value2 (which is the previous maximum)\n            max_sum = max(arr[i] + value1, value2);\n\n            // Update value1 to be the previous value2\n            value1 = value2;\n\n            // Update value2 to be the new max_sum\n            value2 = max_sum;\n        }\n\n        // After the loop, value2 contains the maximum sum without adjacent elements\n        return max_sum;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function template for Java\n\nclass Solution {\n    // Function to calculate the maximum sum without selecting adjacent elements\n    public int findMaxSum(int[] arr) {\n        int n = arr.length; // Get the length of the input array\n\n        // If the array is empty, there is no sum to calculate\n        if (n == 0) return 0;\n\n        // Initialize value1 with the first element of the array\n        int value1 = arr[0];\n\n        // If there's only one element, return its value as the maximum sum\n        if (n == 1) return value1;\n\n        // Initialize value2 with the maximum of the first two elements\n        int value2 = Math.max(arr[0], arr[1]);\n\n        // If there are only two elements, return the maximum of them\n        if (n == 2) return value2;\n\n        // Initialize maxSum to store the maximum sum found so far\n        int maxSum = 0;\n\n        // Iterate through the array starting from the third element (index 2)\n        for (int i = 2; i < n; i++) {\n            // At each step, decide whether to include the current element\n            // If included, add its value to value1 (which is two steps back)\n            // Otherwise, carry forward value2 (which is the previous maximum)\n            maxSum = Math.max(arr[i] + value1, value2);\n\n            // Update value1 to be the previous value2\n            value1 = value2;\n\n            // Update value2 to be the new maxSum\n            value2 = maxSum;\n        }\n\n        // After the loop, maxSum (or value2) contains the maximum sum without adjacent\n        // elements\n        return maxSum;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Back-end complete function template for Python\n\n\nclass Solution:\n\n    def findMaxSum(self, arr):\n        n = len(arr)  # Get the length of the input array\n\n        # If the array is empty, there is no sum to calculate\n        if n == 0:\n            return 0\n\n        # Initialize value1 with the first element of the array\n        value1 = arr[0]\n\n        # If there's only one element, return its value as the maximum sum\n        if n == 1:\n            return value1\n\n        # Initialize value2 with the maximum of the first two elements\n        value2 = max(arr[0], arr[1])\n\n        # If there are only two elements, return the maximum of them\n        if n == 2:\n            return value2\n\n        # Initialize max_sum to store the maximum sum found so far\n        max_sum = 0\n\n        # Iterate through the array starting from the third element (index 2)\n        for i in range(2, n):\n            # At each step, decide whether to include the current element\n            # If included, add its value to value1 (which is two steps back)\n            # Otherwise, carry forward value2 (which is the previous maximum)\n            max_sum = max(arr[i] + value1, value2)\n\n            # Update value1 to be the previous value2\n            value1 = value2\n\n            # Update value2 to be the new max_sum\n            value2 = max_sum\n\n        # After the loop, max_sum (or value2) contains the maximum sum without adjacent elements\n        return max_sum\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function template for JavaScript\n\nclass Solution {\n    // Function to calculate the maximum sum without selecting adjacent elements\n    findMaxSum(arr) {\n        let n = arr.length; // Get the length of the input array\n\n        // If the array is empty, there is no sum to calculate\n        if (n === 0) return 0;\n\n        // Initialize value1 with the first element of the array\n        let value1 = arr[0];\n\n        // If there's only one element, return its value as the maximum sum\n        if (n === 1) return value1;\n\n        // Initialize value2 with the maximum of the first two elements\n        let value2 = Math.max(arr[0], arr[1]);\n\n        // If there are only two elements, return the maximum of them\n        if (n === 2) return value2;\n\n        // Initialize max_sum to store the maximum sum found so far\n        let max_sum = 0;\n\n        // Iterate through the array starting from the third element (index 2)\n        for (let i = 2; i < n; i++) {\n            // At each step, decide whether to include the current element\n            // If included, add its value to value1 (which is two steps back)\n            // Otherwise, carry forward value2 (which is the previous maximum)\n            max_sum = Math.max(arr[i] + value1, value2);\n\n            // Update value1 to be the previous value2\n            value1 = value2;\n\n            // Update value2 to be the new max_sum\n            value2 = max_sum;\n        }\n\n        // After the loop, max_sum (or value2) contains the maximum sum without adjacent\n        // elements\n        return max_sum;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}