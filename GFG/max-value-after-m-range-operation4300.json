{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702954,
            "title": "Max value after m range operation",
            "titleSlug": "max-value-after-m-range-operation4300",
            "content": "<p>Given an array <code>arr</code> of size <strong><code>n</code></strong>, with all initial values set to <code>0</code>, the task is to perform a series of range increment operations as described below:</p>\n<p><strong>Increment(ai, bi, ki):</strong><br />Increment the values in <code>arr</code> from index <strong><code>ai</code></strong> to <strong><code>bi</code></strong> (both inclusive) by <strong><code>ki</code></strong>.</p>\n<p>After performing <code>m</code> operations, calculate the maximum value in the array <code>arr[]</code>.</p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5, a[] = [0, 1, 2], b[] = [1, 4, 3], k[] = [100, 100, 100]\n<strong>Output:</strong> 200\n<strong>Explanation</strong>: <br />Initially, arr = [0, 0, 0, 0, 0]\nAfter the first operation: arr = [100, 100, 0, 0, 0]\nAfter the second operation: arr = [100, 200, 100, 100, 100]\nAfter the third operation: arr = [100, 200, 200, 200, 100]\nThe maximum element after all operations is 200.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4, a[] = [1, 0, 3], b[] = [2, 0, 3], k[] = [603, 286, 882]\n<strong>Output:</strong> 882\n<strong>Explanation</strong>: <br />Initially, arr = [0, 0, 0, 0]\nAfter the first operation: arr = [0, 603, 603, 0]\nAfter the second operation: arr = [286, 603, 603, 0]\nAfter the third operation: arr = [286, 603, 603, 882]\nThe maximum element after all operations is 882.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(m + n), m is the number of operations.<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10<sup>6<br /></sup></span><span style=\"font-size: 18px;\">1 &le; a.size() = b.size() = k.size() &le; 10</span><sup>6</sup><br /><span style=\"font-size: 18px;\">0 &le; a<sub>i </sub> &le; b<sub>i</sub> &le; n-1<br /></span><span style=\"font-size: 18px;\">0 &le; k<sub>i</sub> &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `n`, initialized with all values set to 0, perform a series of range increment operations. Each operation, Increment(ai, bi, ki), increases the values in `arr` from index `ai` to `bi` (inclusive) by `ki`. After applying all `m` operations, determine the maximum value in the resulting array `arr[]`.",
                "constraints": [
                    "1 <= n <= 10^6",
                    "1 <= a.size() = b.size() = k.size() <= 10^6",
                    "0 <= a<sub>i</sub> <= b<sub>i</sub> <= n-1",
                    "0 <= k<sub>i</sub> <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 5, a[] = [0, 1, 2], b[] = [1, 4, 3], k[] = [100, 100, 100]",
                        "output": "200",
                        "explanation": "Initially, arr = [0, 0, 0, 0, 0].\nOperation 1: arr = [100, 100, 0, 0, 0].\nOperation 2: arr = [100, 200, 100, 100, 100].\nOperation 3: arr = [100, 200, 200, 200, 100].\nThe maximum value is 200."
                    },
                    {
                        "input": "n = 4, a[] = [1, 0, 3], b[] = [2, 0, 3], k[] = [603, 286, 882]",
                        "output": "882",
                        "explanation": "Initially, arr = [0, 0, 0, 0].\nOperation 1: arr = [0, 603, 603, 0].\nOperation 2: arr = [286, 603, 603, 0].\nOperation 3: arr = [286, 603, 603, 882].\nThe maximum value is 882."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a difference array to efficiently handle range increment operations. Update the start and end+1 indices, then compute the prefix sum to find the maximum value in the final array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "factset"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the maximum value after applying given operations.\n    int findMax(int n, vector<int>& a, vector<int>& b, vector<int>& k) {\n        // Creating an array (vector) to store the changes made at each index.\n        vector<int> arr(n + 1, 0); // Initialize with 0 values\n\n        // Get the number of operations (size of a, b, or k).\n        int m = a.size();\n\n        // Looping through each operation.\n        for (int i = 0; i < m; i++) {\n            // Getting the lower and upper bounds of the operation.\n            int lowerbound = a[i];\n            int upperbound = b[i];\n\n            // Adding the value of the operation to the lower bound index.\n            arr[lowerbound] += k[i];\n\n            // Subtracting the value of the operation from the upper bound + 1 index.\n            if (upperbound + 1 < n)\n                arr[upperbound + 1] -= k[i];\n        }\n\n        // Initializing variables for cumulative sum and result.\n        long long sum = 0;\n        int res = INT_MIN;\n\n        // Looping through each index and updating the cumulative sum and result.\n        for (int i = 0; i < n; ++i) {\n            sum += arr[i];\n            res = max(res, (int)sum);\n        }\n\n        // Returning the maximum value after all operations.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n//Back-end complete function template in Java\nclass Solution {\n    // Function to find the maximum value after applying given operations.\n    public int findMax(int n, int[] a, int[] b, int[] k) {\n        // Creating an array to store the changes made at each index.\n        long[] arr = new long[n + 1]; // Initialize with 0 values\n\n        // Get the number of operations (size of a, b, or k).\n        int m = a.length;\n\n        // Looping through each operation.\n        for (int i = 0; i < m; i++) {\n            // Getting the lower and upper bounds of the operation.\n            int lowerbound = a[i];\n            int upperbound = b[i];\n\n            // Adding the value of the operation to the lower bound index.\n            arr[lowerbound] += k[i];\n\n            // Subtracting the value of the operation from the upper bound + 1 index.\n            if (upperbound + 1 < n) {\n                arr[upperbound + 1] -= k[i];\n            }\n        }\n\n        // Initializing variables for cumulative sum and result.\n        long sum = 0;\n        long res = Long.MIN_VALUE;\n\n        // Looping through each index and updating the cumulative sum and result.\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n            res = Math.max(res, sum);\n        }\n\n        // Returning the maximum value after all operations.\n        return (int)res; // Return as an int\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def find_max(self, n, a, b, k):\n        # Creating an array to store the changes made at each index.\n        arr = [0] * (n + 1)  # Initialize with 0 values\n\n        # Get the number of operations (size of a, b, or k).\n        m = len(a)\n\n        # Looping through each operation.\n        for i in range(m):\n            # Getting the lower and upper bounds of the operation.\n            lowerbound = a[i]\n            upperbound = b[i]\n\n            # Adding the value of the operation to the lower bound index.\n            arr[lowerbound] += k[i]\n\n            # Subtracting the value of the operation from the upper bound + 1 index.\n            if upperbound + 1 < n:\n                arr[upperbound + 1] -= k[i]\n\n        # Initializing variables for cumulative sum and result.\n        sum_value = 0\n        res = float('-inf')\n\n        # Looping through each index and updating the cumulative sum and result.\n        for i in range(n):\n            sum_value += arr[i]\n            res = max(res, sum_value)\n\n        # Returning the maximum value after all operations.\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    findMax(n, a, b, k) {\n        // Creating an array to store the changes made at each index.\n        const arr = new Array(n + 1).fill(0); // Initialize with 0 values\n\n        // Get the number of operations (size of a, b, or k).\n        const m = a.length;\n\n        // Looping through each operation.\n        for (let i = 0; i < m; i++) {\n            // Getting the lower and upper bounds of the operation.\n            const lowerbound = a[i];\n            const upperbound = b[i];\n\n            // Adding the value of the operation to the lower bound index.\n            arr[lowerbound] += k[i];\n\n            // Subtracting the value of the operation from the upper bound + 1 index.\n            if (upperbound + 1 < n) {\n                arr[upperbound + 1] -= k[i];\n            }\n        }\n\n        // Initializing variables for cumulative sum and result.\n        let sumValue = 0;\n        let res = Number.NEGATIVE_INFINITY;\n\n        // Looping through each index and updating the cumulative sum and result.\n        for (let i = 0; i < n; i++) {\n            sumValue += arr[i];\n            res = Math.max(res, sumValue);\n        }\n\n        // Returning the maximum value after all operations.\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}