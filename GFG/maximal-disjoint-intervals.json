{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 891621,
            "title": "Maximal Disjoint Intervals",
            "titleSlug": "maximal-disjoint-intervals",
            "content": "<p><span >You are given a 2d array <strong>arr[][]</strong> of n time slots, represented as a list of <strong>intervals</strong>, where each interval consists of a <strong>start time</strong> and an <strong>end time</strong>. Your task is to return the <strong>maximum number</strong> of <strong>non-overlapping</strong> time slots.</span><br /><span ><strong>Note:</strong> Two intervals <strong>[a, b]</strong> and <strong>[c, d]</strong> are considered <strong>non-overlapping</strong> if they do not share any common points.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:&nbsp;</strong>n = 4, arr[][] = [[1, 4], [2, 3], [4, 6], [8, 9]]<br /><strong>Output:</strong> </span><span style=\"font-size: 18.6667px;\">[</span><span style=\"font-size: 18.6667px;\">[2, 3], [4, 6], [8, 9]]<br /><strong>Explanation:</strong>&nbsp;If we include the interval [1, 4], it overlaps with both [2, 3] and [4, 6].&nbsp;Instead, by selecting [2, 3], [4, 6], and [8, 9], we obtain the maximum number of non-overlapping intervals.</span></pre>\n<pre><span ><strong>Input:&nbsp;</strong>n = 3, arr[][] = [[1, 9], [2, 3], [5, 7]]<br /><strong>Output:</strong> </span><span style=\"font-size: 18.6667px;\">[</span><span style=\"font-size: 18.6667px;\">[2, 3], [5, 7]]</span><span style=\"font-size: 18.6667px;\"><br /><strong>Explanation:</strong> By selecting [2, 3] and [5, 7], we obtain the maximum number of non-overlapping intervals.<br /></span></pre>\n<p><span ><strong>Constraints:<br /></strong></span><span >1 &le; n &le;&nbsp; 10<sup>5</sup><sup><br /></sup>0 &le; arr[i][0] &lt; arr[i][1] &le; 5*10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to sort the vector elements\n    // by second element of pairs\n    static bool comp(const vector<int>& a, const vector<int>& b) {\n        return (a[1] < b[1]);\n    }\n\n    vector<vector<int>> maxDisjointInterval(vector<vector<int>>& arr) {\n        // Sort the array of intervals\n        // based on second element\n        sort(arr.begin(), arr.end(), comp);\n\n        // Stores the end point of the last\n        // interval included in the maximal\n        int end = -1;\n\n        // Stores the maximal disjoint set\n        vector<vector<int>> ans;\n\n        for (int i = 0; i < arr.size(); i++) {\n\n            // If the current interval has\n            // start point greater than the\n            // end point of the last interval\n            if (arr[i][0] > end) {\n                ans.push_back(arr[i]);\n                end = arr[i][1];\n            }\n        }\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Comparator to sort intervals by their end time\n    static class IntervalComparator implements Comparator<int[]> {\n        public int compare(int[] a, int[] b) { return Integer.compare(a[1], b[1]); }\n    }\n\n    public List<int[]> maxDisjointInterval(int[][] arr) {\n        // Sort the array of intervals based on the second element\n        Arrays.sort(arr, new IntervalComparator());\n\n        // Stores the end point of the last interval included in the maximal set\n        int end = -1;\n\n        // Stores the maximal disjoint set\n        List<int[]> ans = new ArrayList<>();\n\n        for (int[] interval : arr) {\n            // If the current interval has a start point greater than the end point\n            // of the last included interval\n            if (interval[0] > end) {\n                ans.add(interval);\n                end = interval[1];\n            }\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def maxDisjointInterval(arr):\n    # Sort intervals based on the second element (end time)\n    arr.sort(key=lambda x: x[1])\n\n    # Stores the end point of the last interval included in the maximal set\n    end = -1\n\n    # Stores the maximal disjoint set\n    ans = []\n\n    for interval in arr:\n        # If the current interval's start is greater than the last included interval's end\n        if interval[0] > end:\n            ans.append(interval)\n            end = interval[1]\n\n    return ans",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public List<int[]> MaxDisjointInterval(int[][] arr) {\n        // Sort intervals based on their end time\n        Array.Sort(arr, (a, b) => a[1].CompareTo(b[1]));\n\n        int end = -1;\n        List<int[]> result = new List<int[]>();\n\n        foreach (var interval in arr) {\n            // If the current interval's start is greater than the last included\n            // interval's end\n            if (interval[0] > end) {\n                result.Add(interval);\n                end = interval[1];\n            }\n        }\n\n        return result;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the maximal set of mutually disjoint intervals\n    maxDisjointInterval(arr) {\n        // Sort intervals based on their end time\n        arr.sort((a, b) => a[1] - b[1]);\n\n        let end = -1;\n        let result = [];\n\n        for (let interval of arr) {\n            // If the current interval's start is greater than the last included\n            // interval's end\n            if (interval[0] > end) {\n                result.push(interval);\n                end = interval[1];\n            }\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}