{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 702670,
      "title": "Max Value Permutation",
      "titleSlug": "maximize-arrii-of-an-array0026",
      "content": "<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\">Given an array,&nbsp;<strong>arr</strong>&nbsp;of&nbsp;integers. Your task is to write a program to find the maximum value of&nbsp;<strong>&sum;arr[i]*i</strong>, where i = 0, 1, 2,., n-1. You are allowed to rearrange the elements of the array.<strong><br />Note</strong>: Since the output could be large, print the answer modulo&nbsp;<strong>10<sup>9</sup>+7</strong>.</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [5, 3, 2, 4, 1]\n<strong>Output:</strong> 40\n<strong>Explanation: </strong>If we arrange the array as [1, 2, 3, 4, 5] then we can see that the minimum index will multiply with minimum number and maximum index will multiply with maximum number. So, 1*0 + 2*1 + 3*2 + 4*3 + 5*4 = 0+2+6+12+20 = 40 mod(10<sup>9</sup>+7) = 40\n</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [1, 2, 3]\n<strong>Output:</strong> 8 <br /><strong>Explanation: </strong>If we arrange the array as [1, 2, 3], then the minimum index will multiply with the minimum number and the maximum index will multiply with the maximum number: 1*0 + 2*1 + 3*2 = 0 + 2 + 6 = 8 mod(10<sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">9</sup><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">+7)</span> = 8.<strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><br /></strong></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [7, 7, 7, 7]\n<strong>Output:</strong> 42<br /><strong>Explanation</strong>: Sorted or unsorted, each element is 7. The sum becomes: 7 &lowast; 0 + 7 &lowast; 1 + 7 &lowast; 2 + 7 &lowast; 3 = 0 + 7 + 14 + 21 = 42 </span></pre>\n<p><span ><span style=\"font-family: arial, helvetica, sans-serif;\"><strong>Constraints:</strong><br />1 &le; arr.size &le; 10<sup>5</sup><br />1 &le; arr[i]&nbsp;&le; 10<sup>5</sup></span></span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given an array `arr` of integers, rearrange the elements to maximize the value of the sum \u2211arr[i]*i, where i ranges from 0 to n-1. Return the maximum possible sum modulo 10^9 + 7.",
        "constraints": [
          "1 \u2264 arr.size \u2264 10^5",
          "1 \u2264 arr[i] \u2264 10^5"
        ],
        "testcases": [
          {
            "input": "[5, 3, 2, 4, 1]",
            "output": "40",
            "explanation": "Sort the array to [1, 2, 3, 4, 5]. The sum is 1*0 + 2*1 + 3*2 + 4*3 + 5*4 = 0 + 2 + 6 + 12 + 20 = 40. 40 mod (10^9 + 7) = 40."
          },
          {
            "input": "[1, 2, 3]",
            "output": "8",
            "explanation": "Sort the array to [1, 2, 3]. The sum is 1*0 + 2*1 + 3*2 = 0 + 2 + 6 = 8. 8 mod (10^9 + 7) = 8."
          },
          {
            "input": "[7, 7, 7, 7]",
            "output": "42",
            "explanation": "The array contains identical elements. The sum is 7*0 + 7*1 + 7*2 + 7*3 = 0 + 7 + 14 + 21 = 42. 42 mod (10^9 + 7) = 42."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p><span >Scale the largest value maximally and the smallest minimally by sorting the array and computing the sum of <code>arr[i] * i</code> for <code>i = 0 to n-1</code>.</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Arrays",
        "slug": "arrays"
      },
      {
        "name": "Sorting",
        "slug": "sorting"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      },
      {
        "name": "Algorithms",
        "slug": "algorithms"
      }
    ],
    "companies": ["sap"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "class Solution {\n  public:\n    int mod = 1e9 + 7; // Modulus value to prevent overflow\n\n    int maxValue(vector<int> &arr) {\n        // sort(a,a+n);\n        int n = arr.size();\n        // Sorting the array in ascending order to maximize the sum\n        sort(arr.begin(), arr.end());\n\n        // Initialize answer as 0\n        unsigned long long int ans = 0;\n\n        // Calculating the sum of the product of each element with its index\n        // Using modulo at each step to avoid overflow\n        for (int i = 0; i < n; i++)\n            ans = (ans + ((unsigned long long)arr[i] * i) % mod) % mod;\n\n        return ans;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "//Back-end complete function template for Java\n\nclass Solution {\n\n    int maxValue(int arr[]) {\n        int n = arr.length;\n        int mod = 1000000007; // Modulus value to prevent overflow\n\n        // Sorting the array in ascending order to maximize the sum\n        Arrays.sort(arr);\n\n        long ans = 0; // Initialize answer as 0\n\n        // Calculating the sum of the product of each element with its index\n        // Using modulo at each step to avoid overflow\n        for (int i = 0; i < n; i++) ans = (ans + ((long)arr[i] * i) % mod) % mod;\n\n        return (int)ans; // Cast result to int for final answer\n    }\n}\n",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to maximize the sum\n    #by rearranging the array elements.\n    def maxValue(self, arr):\n\n        n = len(arr)\n        arr.sort()  #sorting the array\n\n        mod = 1000000007  #taking modulo for large values\n\n        s = 0  #variable to store the sum\n\n        for i in range(n):\n            s += arr[\n                i] * i  #calculating the sum of array elements multiplied by their index\n            s = s % mod  #taking modulo to avoid large sum value\n\n        return s % mod  #returning the final sum after taking modulo.\n",
        "lang_text": "python3"
      },
      {
        "lang": "Javascript",
        "full_func": "class Solution {\n    constructor() {\n        this.mod = 1e9 + 7; // Modulus to keep results within integer limits\n    }\n\n    maxValue(arr) {\n        let n = arr.length;\n\n        // Sorting the array in ascending order to maximize the sum\n        arr.sort((a, b) => a - b);\n\n        let ans = 0n; // Using BigInt for large integer calculations\n\n        // Calculating the sum of the product of each element with its index\n        // Applying modulo to prevent overflow\n        for (let i = 0; i < n; i++) {\n            ans = (ans + (BigInt(arr[i]) * BigInt(i)) % BigInt(this.mod)) %\n                  BigInt(this.mod);\n        }\n\n        return Number(ans); // Convert BigInt result back to Number for the final answer\n    }\n}\n",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
