{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704035,
            "title": "Maximize dot product",
            "titleSlug": "maximize-dot-product2649",
            "content": "<p><span style=\"font-size: 18px;\">Given two arrays <strong>a</strong> and <strong>b</strong> of positive integers of size <strong>n</strong> and <strong>m</strong> where <strong>n &gt;= m</strong>, the task is to maximize the dot product by inserting zeros in the second array but you cannot disturb the order of elements.<br /><br />Dot product of array a and b of size n is <strong>a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1].</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: <br />n = 5, a[] = {2, 3, 1, 7, 8} \nm = 3, b[] = {3, 6, 7}\n<strong>Output:</strong> <br />107\n<strong>Explanation</strong>: <br />We get maximum dot product after inserting 0 at first and third positions in second array.<br />Therefore b becomes {0, 3, 0, 6, 7}. \nMaximum dot product = 2*0 + 3*3 + 1*0 + 7*6 + 8*7 = 107.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: <br />n = 3, a[] = {1, 2, 3}\nm = 1, b[] = {4} \n<strong>Output:</strong> <br />12 \n<strong>Explanation</strong>: <br />We get maximum dot product after inserting 0 at first and second positions in second array.<br />Therefore b becomes {0, 0, 4}. \nMaximum Dot Product = 1*0 + 2*0 + 3*4 = 12.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>maxDotProduct</code>()&nbsp;</strong>which takes <strong>n, m</strong>, array <strong>a </strong>and<strong> b</strong> as input parameters and returns the maximum value.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*m)<br /><strong>Expected Auxiliary Space:</strong> O(n*m)<br /><br /><strong>Constraints:</strong><br />1 &le; m &le;n &le; 10<sup>3</sup></span><br /><span style=\"font-size: 18px;\">1 &le; a[i], b[i] &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays `a` and `b` of positive integers of size `n` and `m` respectively, where `n >= m`, determine the maximum dot product achievable by inserting zeros into array `b` without altering the order of its original elements. The dot product of two arrays `a` and `b` of size `n` is defined as `a[0]*b[0] + a[1]*b[1] + ... + a[n-1]*b[n-1]`.",
                "constraints": [
                    "1 <= m <= n <= 10^3",
                    "1 <= a[i], b[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "n = 5, a[] = {2, 3, 1, 7, 8} \nm = 3, b[] = {3, 6, 7}",
                        "output": "107",
                        "explanation": "The optimal arrangement of array `b` after inserting zeros is {0, 3, 0, 6, 7}. The resulting dot product is 2*0 + 3*3 + 1*0 + 7*6 + 8*7 = 107."
                    },
                    {
                        "input": "n = 3, a[] = {1, 2, 3}\nm = 1, b[] = {4}",
                        "output": "12",
                        "explanation": "The optimal arrangement of array `b` after inserting zeros is {0, 0, 4}. The resulting dot product is 1*0 + 2*0 + 3*4 = 12."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Another way to look at this problem is, for every pair of elements element A[i] and B[j] where j &gt;= i , we have two choices:</span></p>\n<ol>\n<li><span style=\"font-size: 14pt;\">We multiply A[i] and B[j] and add to the product (We include A[i]).</span></li>\n<li><span style=\"font-size: 14pt;\">We exclude A[i] from product (In other words, we insert 0 at current position in B[])</span></li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "directi"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\n\t\t\n\n\tpublic:\n\tint maxDotProduct(int n, int m, int a[], int b[]) \n\t{ \n\t\t// Create 2D Matrix that stores dot product \n\t    // dp[i+1][j+1] stores product considering b[0..i] \n\t    // and a[0...j]. Note that since all m > n, we fill \n\t    // values in upper diagonal of dp[][] \n\t    int dp[m+1][n+1]; \n\t    memset(dp, 0, sizeof(dp)); \n\t  \n\t    // Traverse through all elements of B[] \n\t    for (int i=1; i<=m; i++) \n\t  \n\t        // Consider all values of a[] with indexes greater \n\t        // than or equal to i and compute dp[i][j] \n\t        for (int j=i; j<=n; j++) \n\t  \n\t            // Two cases arise \n\t            // 1) Include a[j] \n\t            // 2) Exclude a[j] (insert 0 in b[])  \n\t            dp[i][j] = max((dp[i-1][j-1] + (a[j-1]*b[i-1])) , \n\t                            dp[i][j-1]); \n\t  \n\t    // return Maximum Dot Product \n\t    return dp[m][n] ; \n\t} \n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public int maxDotProduct(int N, int M, int[] A, int[] B) {\r\n        // Create 2D Matrix that stores dot product\r\n        // dp[i+1][j+1] stores product considering B[0..i]\r\n        // and A[0...j]. Note that since all M > N, we fill\r\n        // values in upper diagonal of dp[][]\r\n        int[][] dp = new int[M + 1][N + 1];\r\n\r\n        // Traverse through all elements of B[]\r\n        for (int i = 1; i <= M; i++) {\r\n\r\n            // Consider all values of A[] with indexes greater\r\n            // than or equal to i and compute dp[i][j]\r\n            for (int j = i; j <= N; j++) {\r\n\r\n                // Two cases arise\r\n                // 1) Include A[j]\r\n                // 2) Exclude A[j] (insert 0 in B[])\r\n                dp[i][j] = Math.max(dp[i - 1][j - 1] + (A[j - 1] * B[i - 1]), dp[i][j - 1]);\r\n            }\r\n        }\r\n        // return Maximum Dot Product\r\n        return dp[M][N];\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def maxDotProduct(self, n, m, A, B):\n        # Function to calculate the dot product of two arrays\n        def product(p1, p2):\n            summe = 0\n            # Iterate through both arrays and calculate the sum of products\n            while (p1 < n and p2 < m):\n                summe += (A[p1] * B[p2])\n                p1 += 1\n                p2 += 1\n            return summe\n\n        # Recursive function to solve the problem\n        def solve(p1, p2):\n            # Base case: if either array is fully traversed, return 0\n            if (p1 == n and p2 == m) or (p2 == m):\n                return 0\n            # Base case: if one array is fully traversed, return negative infinity\n            if (p1 == n):\n                return float('-inf')\n            # Check if subproblem has already been solved\n            key = str(p1) + \"_\" + str(p2)\n            if (key in dp):\n                return dp[key]\n            # Calculate maximum dot product considering two cases:\n            # 1. Include the current elements and move to the next elements in both arrays\n            not_zero = A[p1] * B[p2] + solve(p1 + 1, p2 + 1)\n\n            # 2. Do not include the current element in array A and move to the next element in array A\n            zero = solve(p1 + 1, p2)\n\n            # Store the maximum dot product in the dp dictionary\n            dp[key] = max(zero, not_zero)\n            return dp[key]\n\n        # Calculate the difference in length between arrays A and B\n        diff = n - m\n        # If both arrays have the same length, directly calculate the dot product\n        if (diff == 0):\n            return product(0, 0)\n        else:\n            # Initialize a dp dictionary to store results of subproblems\n            dp = {}\n            # Solve the problem recursively and return the maximum dot product\n            ans = solve(0, 0)\n            return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    maxDotProduct(n, m, a, b) {\n        // Create 2D Matrix that stores dot product\n        // dp[i+1][j+1] stores product considering b[0..i]\n        // and a[0...j]. Note that since all m > n, we fill\n        // values in upper diagonal of dp[][]\n        // let dp = new Array(m + 1).fill(null).map(() => new Array(n + 1).fill(0));\n        let dp = new Array(m + 1);\n        for (let i = 0; i < dp.length; i++) {\n            dp[i] = new Array(n + 1).fill(0);\n        }\n\n        // Traverse through all elements of B[]\n        for (let i = 1; i <= m; i++) {\n\n            // Consider all values of a[] with indexes greater\n            // than or equal to i and compute dp[i][j]\n            for (let j = i; j <= n; j++) {\n\n                // Two cases arise\n                // 1) Include a[j]\n                // 2) Exclude a[j] (insert 0 in b[])\n                dp[i][j] =\n                    Math.max(dp[i - 1][j - 1] + (a[j - 1] * b[i - 1]), dp[i][j - 1]);\n            }\n        }\n        // return Maximum Dot Product\n        return dp[m][n];\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}