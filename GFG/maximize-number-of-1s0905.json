{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702728,
            "title": "Maximize Number of 1's",
            "titleSlug": "maximize-number-of-1s0905",
            "content": "<p><span >Given a binary array <strong><code>arr[]</code></strong> (containing only 0s and 1s) and an integer <strong><code>k</code></strong>, you are allowed to flip at most <code>k</code> 0s to 1s. Find the maximum number of consecutive 1's that can be obtained in the array after performing the operation at most <code>k</code> times.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 0, 1], k = 1\n<strong>Output: </strong>3\n<strong>Explanation: </strong>Maximum subarray of <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">consecutive</span> 1's is of size 3 which can be obtained after flipping the zero present at the 1st index.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 0, 0, 1, 0, 1, 0, 1], k = 2\n<strong>Output: </strong>5\n<strong>Explanation: </strong>By flipping the zeroes at indices 4 and 6, we get the longest subarray from index 3 to 7 containing all 1&rsquo;s.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1], k = 2\n<strong>Output: </strong>2\n<strong>Explanation: </strong>Since the array is already having the max consecutive 1's, hence we dont need to perform any operation. Hence the answer is 2</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />0 &lt;= k &lt;= arr.size()<br />0 &lt;= arr[i] &lt;= 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary array `arr` (containing only 0s and 1s) and an integer `k`, you are allowed to flip at most `k` 0s to 1s. Find the maximum number of consecutive 1s that can be obtained in the array after performing the operation at most `k` times.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= k <= arr.size()",
                    "0 <= arr[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "arr = [1, 0, 1], k = 1",
                        "output": "3",
                        "explanation": "By flipping the 0 at index 1 to a 1, the array becomes [1, 1, 1]. The longest consecutive sequence of 1s has length 3."
                    },
                    {
                        "input": "arr = [1, 0, 0, 1, 0, 1, 0, 1], k = 2",
                        "output": "5",
                        "explanation": "By flipping the 0s at indices 4 and 6 to 1s, the array becomes [1, 0, 0, 1, 1, 1, 1, 1].  The longest consecutive sequence of 1s, from index 3 to 7, has length 5."
                    },
                    {
                        "input": "arr = [1, 1], k = 2",
                        "output": "2",
                        "explanation": "The array already consists of consecutive 1s. No flips are needed, so the maximum number of consecutive 1s is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a sliding window to track the longest subarray with at most k zeros, adjusting the window size accordingly.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "microsoft",
            "makemytrip"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // k is the maximum number of zeros allowed to flip\n    int maxOnes(vector<int>& arr, int k) {\n        int maxLen = 0, l = 0, zeros = 0;\n\n        // iterate over the array\n        for (int r = 0; r < arr.size(); r++) {\n            // count zeros\n            if (arr[r] == 0)\n                zeros++;\n\n            // adjust window size\n            while (zeros > k) {\n                if (arr[l] == 0)\n                    zeros--;\n                l++;\n            }\n\n            // update max length\n            maxLen = max(maxLen, r - l + 1);\n        }\n\n        return maxLen;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // k is the maximum number of zeros allowed to flip\n    public int maxOnes(int[] arr, int k) {\n        // maxLen stores the size of the largest window\n        int maxLen = 0;\n        // l is the left pointer of the sliding window\n        int l = 0;\n        // zeros counts the number of zeros in the current window\n        int zeros = 0;\n\n        // Iterate through the array using the right pointer r\n        for (int r = 0; r < arr.length; r++) {\n            // If the current element is zero, increment zeros\n            if (arr[r] == 0) zeros++;\n\n            // If the number of zeros exceeds k, move the left pointer to shrink the\n            // window\n            while (zeros > k) {\n                // If the leftmost element is zero, decrement zeros\n                if (arr[l] == 0) zeros--;\n                // Move the left pointer to the right\n                l++;\n            }\n\n            // Update maxLen to the size of the current valid window\n            maxLen = Math.max(maxLen, r - l + 1);\n        }\n\n        // Return the maximum size of the window found\n        return maxLen;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # k is the maximum number of zeros allowed to flip\n    def maxOnes(self, arr, k):\n        # maxLen stores the size of the largest window\n        maxLen = 0\n        # l is the left pointer of the sliding window\n        l = 0\n        # zeros counts the number of zeros in the current window\n        zeros = 0\n\n        # Iterate through the array using the right pointer r\n        for r in range(len(arr)):\n            # If the current element is zero, increment zeros\n            if arr[r] == 0:\n                zeros += 1\n\n            # If the number of zeros exceeds k, move the left pointer to shrink the window\n            while zeros > k:\n                # If the leftmost element is zero, decrement zeros\n                if arr[l] == 0:\n                    zeros -= 1\n                # Move the left pointer to the right\n                l += 1\n\n            # Update maxLen to the size of the current valid window\n            maxLen = max(maxLen, r - l + 1)\n\n        # Return the maximum size of the window found\n        return maxLen\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxOnes(arr, k) {\n        let maxLen = 0; // Initialize variable to store maximum length of subarray with\n                        // at most k zeros\n        let l = 0;      // Initialize left pointer for sliding window\n        let zeros = 0; // Initialize variable to count number of zeros in current window\n\n        for (let r = 0; r < arr.length;\n             r++) {             // Iterate over the array using right pointer\n            if (arr[r] === 0) { // If current element is zero, increment zeros count\n                zeros++;\n            }\n\n            while (zeros > k) { // While zeros count exceeds k, move left pointer and\n                                // decrease zeros count\n                if (arr[l] === 0) {\n                    zeros--;\n                }\n                l++;\n            }\n\n            maxLen = Math.max(\n                maxLen, r - l + 1); // Update maxLen with maximum length found so far\n        }\n\n        return maxLen; // Return the maximum length of subarray with at most k zeros\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}