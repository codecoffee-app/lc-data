{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701611,
            "title": "Maximize Number of Toys",
            "titleSlug": "maximize-number-of-toys",
            "content": "<p><span style=\"font-size: 18px;\">You are given an integer array <strong>arr[] </strong>that denotes the<strong> prices </strong>of inividual toys. You are also given an <strong>amount k</strong> that is the<strong> total money</strong> you have. You need to maximize the number of toys you can have with the k amount.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [5, 4, 3, 2, 1], k = 8\n<strong>Output: </strong>3\n<strong>Explanation: </strong>With k=8 amount, you can purchase toys with prices 3 2 1 so total of 3 toys.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [1, 2, 3, 4, 5], k = 15\n<strong>Output: </strong>5\n<strong>Explanation: </strong>With k=15 amount, you can purchase all the toys.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>4</sup><br />1 &le; k &le; 10<sup>4</sup><br />1 &le; arr<sub>i</sub> &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` representing the prices of toys and an amount `k` representing the total money you have, determine the maximum number of toys you can purchase.",
                "constraints": [
                    "1 <= arr.length <= 10^4",
                    "1 <= k <= 10^4",
                    "1 <= arr[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "arr = [5, 4, 3, 2, 1], k = 8",
                        "output": "3",
                        "explanation": "By purchasing the toys with prices 3, 2, and 1, the total cost is 6, which is less than or equal to k=8. You can purchase a maximum of 3 toys."
                    },
                    {
                        "input": "arr = [1, 2, 3, 4, 5], k = 15",
                        "output": "5",
                        "explanation": "With k=15, you can afford to purchase all 5 toys in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:20px\">Use a priority queue</span>.</p>",
            "<p><span style=\"font-size:20px\">Increment number of toys variable if the amount left is greater than the price of the toy.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Java",
                "slug": "java"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Java-Collections",
                "slug": "java-collections"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int maxToys(vector<int>& arr, int k) {\n        priority_queue<int, vector<int>, greater<int> > pq;\n        int n = arr.size();\n        for (int i = 0; i < n; i++)\n            pq.push(arr[i]);\n        int counter = 0;\n\n        while (!pq.empty() && k >= pq.top()) {\n            counter++;\n            k = k - pq.top();\n            pq.pop();\n        }\n        return counter;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public static int max_toys(int arr[], int k) {\n        // Creating a PriorityQueue with natural ordering\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        int n = arr.length;\n        // adding all the elements from\n        // the ArrayList to the PriorityQueue\n        for (int i = 0; i < n; i++) pq.add(arr[i]);\n\n        // Initializing the total toys\n        // count to 0\n        int counter = 0;\n\n        // running the loop till size of\n        // PriorityQueue is not 0\n        // and the top element is less\n        // than eqaul to remaining amount\n        while (pq.size() > 0 && k >= pq.peek()) {\n            // incrementing the total toys count\n            counter++;\n\n            // Subracting the amount from the price\n            // of the toy bought\n            k = k - pq.poll();\n        }\n\n        // returing total number of toys\n        // that can be purchases using k\n        return counter;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def max_toys(self, arr, k):\n        # Create a priority queue with the elements of the array\n        n = len(arr)\n        pq = PriorityQueue()\n        for i in range(n):\n            pq.put(arr[i])\n\n        # Counter for the number of toys\n        counter = 0\n\n        # While there are elements in the priority queue and the\n        # available money is greater than or equal to the smallest price\n        while not pq.empty() and k >= pq.queue[0]:\n            counter += 1\n            k -= pq.get(\n            )  # Subtract the price of the toy from the available money\n\n        return counter\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}