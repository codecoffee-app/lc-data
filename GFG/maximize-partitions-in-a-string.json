{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875838,
            "title": "Maximize partitions in a String",
            "titleSlug": "maximize-partitions-in-a-string",
            "content": "<p><span >Given a string <strong>s </strong>of lowercase English alphabets, your task is to return the <strong>maximum</strong> number of substrings formed, after possible <strong>partitions</strong> (probably zero) of <strong>s </strong>such that <strong>no two</strong> substrings have a <strong>common character</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18.6667px;\"><strong>Input: s = </strong>\"acbbcc\"<strong><br /></strong></span><span style=\"font-size: 18.6667px;\"><strong>Output: </strong>2<strong><br /></strong></span><span style=\"font-size: 18.6667px;\"><strong>Explanation: </strong>\"a\" and \"cbbcc\" are two substrings that do not share any characters between them.</span></pre>\n<pre><span ><strong>Input</strong>: s = \"ababcbacadefegdehijhklij\"</span><br /><span ><strong>Output</strong>: 3</span><br /><span ><strong>Explanation</strong>: Partitioning at the index 8 and at 15 produces three substrings: &ldquo;ababcbaca&rdquo;, &ldquo;defegde&rdquo;, and &ldquo;hijhklij&rdquo; such that none of them have a common character. So, the maximum number of substrings formed is 3.</span></pre>\n<pre><span ><strong>Input</strong>: s = \"aaa\"</span><br /><span ><strong>Output</strong>: 1</span><br /><span ><strong>Explanation</strong>: Since the string consists of same characters, no further partition can be performed. Hence, the number of substring (here the whole string is considered as the substring) is 1.</span><span ><br /></span></pre>\n<p><span ><strong>Constraints:</strong> </span><br /><span >1 &le; s.size() &le; 10<sup>5</sup></span><br /><span >'a' &le; s[i] &le; 'z'&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase English alphabets, determine the maximum number of substrings that can be formed by partitioning `s` such that no two substrings share a common character.",
                "constraints": [
                    "1 <= s.size() <= 10^5",
                    "s[i] is a lowercase English alphabet ('a' to 'z')"
                ],
                "testcases": [
                    {
                        "input": "acbbcc",
                        "output": "2",
                        "explanation": "The string can be partitioned into \"a\" and \"cbbcc\". These substrings do not share any common characters."
                    },
                    {
                        "input": "ababcbacadefegdehijhklij",
                        "output": "3",
                        "explanation": "The string can be partitioned into \"ababcbaca\", \"defegde\", and \"hijhklij\". None of these substrings share any common characters."
                    },
                    {
                        "input": "aaa",
                        "output": "1",
                        "explanation": "Since the string consists of the same character, no further partition is possible. The entire string is considered as a single substring."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxPartitions(string &s) {\n\n        vector<int> first(26, -1), last(26, -1);\n\n        for (int i = 0; i < s.size(); i++) {\n            if (first[s[i] - 'a'] == -1)\n                first[s[i] - 'a'] = i;\n            last[s[i] - 'a'] = i;\n        }\n\n        int count = 0;\n        int end = 0;\n\n        for (int i = 0; i < s.size(); i++) {\n\n            // Expand interval\n            end = max(end, last[s[i] - 'a']);\n\n            // When we reach the end of a partition\n            if (i == end) {\n\n                // New partition formed\n                count++;\n            }\n        }\n\n        return count;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxPartitions(String s) {\n        // Arrays to store first and last occurrence of each character\n        int[] first = new int[26], last = new int[26];\n        Arrays.fill(first, -1);\n        Arrays.fill(last, -1);\n\n        // Find the first and last occurrence of each character\n        for (int i = 0; i < s.length(); i++) {\n            if (first[s.charAt(i) - 'a'] == -1) first[s.charAt(i) - 'a'] = i;\n            last[s.charAt(i) - 'a'] = i;\n        }\n\n        int count = 0;\n        int end = 0;\n\n        // Iterate through the string to find partitions\n        for (int i = 0; i < s.length(); i++) {\n\n            // Expand interval\n            end = Math.max(end, last[s.charAt(i) - 'a']);\n\n            // When we reach the end of a partition\n            if (i == end) {\n\n                // New partition formed\n                count++;\n            }\n        }\n\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxPartitions(self, s):\n        # Arrays to store first and last occurrence of each character\n        first = [-1] * 26\n        last = [-1] * 26\n\n        # Find the first and last occurrence of each character\n        for i in range(len(s)):\n            if first[ord(s[i]) - ord('a')] == -1:\n                first[ord(s[i]) - ord('a')] = i\n            last[ord(s[i]) - ord('a')] = i\n\n        count = 0\n        end = 0\n\n        # Iterate through the string to find partitions\n        for i in range(len(s)):\n\n            # Expand interval\n            end = max(end, last[ord(s[i]) - ord('a')])\n\n            # When we reach the end of a partition\n            if i == end:\n\n                # New partition formed\n                count += 1\n\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxPartitions(s) {\n        // Arrays to store first and last occurrence of each character\n        let first = new Array(26).fill(-1);\n        let last = new Array(26).fill(-1);\n\n        // Find the first and last occurrence of each character\n        for (let i = 0; i < s.length; i++) {\n            if (first[s.charCodeAt(i) - 'a'.charCodeAt(0)] === -1) {\n                first[s.charCodeAt(i) - 'a'.charCodeAt(0)] = i;\n            }\n            last[s.charCodeAt(i) - 'a'.charCodeAt(0)] = i;\n        }\n\n        let count = 0;\n        let end = 0;\n\n        // Iterate through the string to find partitions\n        for (let i = 0; i < s.length; i++) {\n\n            // Expand interval\n            end = Math.max(end, last[s.charCodeAt(i) - 'a'.charCodeAt(0)]);\n\n            // When we reach the end of a partition\n            if (i === end) {\n\n                // New partition formed\n                count++;\n            }\n        }\n\n        return count;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}