{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703616,
            "title": "Maximize permutations",
            "titleSlug": "maximize-permutations2915",
            "content": "<p><span style=\"font-size:18px\">Given two numbers <strong>N</strong> and <strong>M.</strong> Construct maximal number by permuting (changing order) the digits of<strong> N</strong>, not exceeding <strong>M</strong>.<strong> </strong><br />\nIt is allowed to leave <strong>N</strong> as it is. If there&#39;s no Permutation of digits of <strong>N</strong> which doesn&#39;t exceed <strong>M</strong>, then print -1.<br />\n<strong>Note : </strong>Answer shouldn&#39;t have any leading zeroes.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong> </span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\n<strong>N = </strong>123\n<strong>M = </strong>222\n<strong>Output:</strong>\n213\n<strong>Explanation: </strong>There are total 3! permutations \npossible for N = 123, but the only permutation \nthat satisfies the given condition is 213.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong> </span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\n<strong>N = </strong> 3921\n<strong>M = </strong>10000\n<strong>Output:</strong>\n9321\n<strong>Explanation: </strong>Among all the Possible Permutations,\n9321 is Maximum.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>maxPerm()</strong> which takes two Integers N&nbsp;and M as input parameters&nbsp;and returns the answer.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|N|<sup>2</sup>)<br />\n<strong>Expected Auxiliary Space:</strong> O(|N|)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; A, B &le; 10<sup>7</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two numbers N and M, find the largest possible number that can be formed by rearranging the digits of N, such that the resulting number is less than or equal to M. If no such rearrangement exists, return -1. The result must not have leading zeros.",
                "constraints": [
                    "1 <= N <= 10^7",
                    "1 <= M <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "N = 123\nM = 222",
                        "output": "213",
                        "explanation": "The digits of N can be permuted in several ways. Only 213 is less than or equal to 222. It's also the largest such permutation."
                    },
                    {
                        "input": "N = 3921\nM = 10000",
                        "output": "9321",
                        "explanation": "9321 is the largest permutation of the digits of N that does not exceed M."
                    },
                    {
                        "input": "N=123\nM=122",
                        "output": "-1",
                        "explanation": "No permutation of 123 is less than or equal to 122"
                    },
                    {
                        "input": "N=10\nM=9",
                        "output": "-1",
                        "explanation": "No permutation of 10 is less than or equal to 9. Note that 01 is an invalid solution due to leading zero"
                    },
                    {
                        "input": "N=100\nM=100",
                        "output": "100",
                        "explanation": "The only possible permutation is the original number itself, which is 100 and is equal to M."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Convert N to a string and sort the digits.<br />\nSwap two characters at a time and check for which maximum value the condition holds.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxPerm(int N , int M) {\n        \n        string N1 = to_string(N); \n        \n        // Sorting the digits of the \n        // number in increasing order. \n        sort(N1.begin(), N1.end()); \n  \n        for (int i = 0; i < N1.size(); i++) \n            for (int j = i + 1; j < N1.size(); j++) { \n      \n                // Copying the string into another \n                // temp string. \n                string t = N1; \n      \n                // Swaping the j-th char(digit) \n                // with i-th char(digit) \n                swap(t[j], t[i]); \n      \n                // Sorting the temp string  \n                // from i-th pos to end. \n                sort(t.begin() + i + 1, t.end()); \n      \n                // Checking if the string t is  \n                // greater than string N and less \n                // than or equal to the number M. \n                if (stoi(t) > stoi(N1) && stoi(t) <= M) \n                  \n                    // If yes then, we will permanently \n                    // swap the i-th char(or digit) \n                    // with j-th char(digit). \n                    swap(N1[i], N1[j]); \n            } \n      \n        // Returns the maximized number. \n        \n        N = stoi(N1);\n        \n        if(N>M)\n            return -1;\n        else\n            return N; \n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}