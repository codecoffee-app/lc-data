{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703616,
            "title": "Maximize permutations",
            "titleSlug": "maximize-permutations2915",
            "content": "<p><span style=\"font-size:18px\">Given two numbers <strong>N</strong> and <strong>M.</strong> Construct maximal number by permuting (changing order) the digits of<strong> N</strong>, not exceeding <strong>M</strong>.<strong> </strong><br />\nIt is allowed to leave <strong>N</strong> as it is. If there&#39;s no Permutation of digits of <strong>N</strong> which doesn&#39;t exceed <strong>M</strong>, then print -1.<br />\n<strong>Note : </strong>Answer shouldn&#39;t have any leading zeroes.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong> </span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\n<strong>N = </strong>123\n<strong>M = </strong>222\n<strong>Output:</strong>\n213\n<strong>Explanation: </strong>There are total 3! permutations \npossible for N = 123, but the only permutation \nthat satisfies the given condition is 213.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong> </span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\n<strong>N = </strong> 3921\n<strong>M = </strong>10000\n<strong>Output:</strong>\n9321\n<strong>Explanation: </strong>Among all the Possible Permutations,\n9321 is Maximum.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>maxPerm()</strong> which takes two Integers N&nbsp;and M as input parameters&nbsp;and returns the answer.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|N|<sup>2</sup>)<br />\n<strong>Expected Auxiliary Space:</strong> O(|N|)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; A, B &le; 10<sup>7</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Convert N to a string and sort the digits.<br />\nSwap two characters at a time and check for which maximum value the condition holds.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxPerm(int N , int M) {\n        \n        string N1 = to_string(N); \n        \n        // Sorting the digits of the \n        // number in increasing order. \n        sort(N1.begin(), N1.end()); \n  \n        for (int i = 0; i < N1.size(); i++) \n            for (int j = i + 1; j < N1.size(); j++) { \n      \n                // Copying the string into another \n                // temp string. \n                string t = N1; \n      \n                // Swaping the j-th char(digit) \n                // with i-th char(digit) \n                swap(t[j], t[i]); \n      \n                // Sorting the temp string  \n                // from i-th pos to end. \n                sort(t.begin() + i + 1, t.end()); \n      \n                // Checking if the string t is  \n                // greater than string N and less \n                // than or equal to the number M. \n                if (stoi(t) > stoi(N1) && stoi(t) <= M) \n                  \n                    // If yes then, we will permanently \n                    // swap the i-th char(or digit) \n                    // with j-th char(digit). \n                    swap(N1[i], N1[j]); \n            } \n      \n        // Returns the maximized number. \n        \n        N = stoi(N1);\n        \n        if(N>M)\n            return -1;\n        else\n            return N; \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int maxPerm(int N, int M)\n    {\n        string N1 = N.ToString(); \n        \n        // Sorting the digits of the \n        // number in increasing order. \n        var tempArray = N1.ToCharArray();\n        Array.Sort(tempArray);\n        N1 = new string(tempArray);\n  \n        for (int i = 0; i < N1.Length; i++)\n        {\n            for (int j = i + 1; j < N1.Length; j++)\n            { \n                // Copying the string into another \n                // temp string. \n                string t = N1; \n      \n                // Swaping the j-th char(digit) \n                // with i-th char(digit) \n                var temp = t.ToCharArray();\n                var tempChar = temp[j];\n                temp[j] = temp[i];\n                temp[i] = tempChar;\n                t = new string(temp);\n      \n                // Sorting the temp string  \n                // from i-th pos to end. \n                tempArray = t.Substring(i + 1).ToCharArray();\n                Array.Sort(tempArray);\n                t = t.Substring(0, i + 1) + new string(tempArray);\n      \n                // Checking if the string t is  \n                // greater than string N and less \n                // than or equal to the number M. \n                if (int.Parse(t) > int.Parse(N1) && int.Parse(t) <= M) \n                {    \n                    // If yes then, we will permanently \n                    // swap the i-th char(or digit) \n                    // with j-th char(digit). \n                    temp = N1.ToCharArray();\n                    tempChar = temp[i];\n                    temp[i] = temp[j];\n                    temp[j] = tempChar;\n                    N1 = new string(temp);\n                }\n            } \n        }\n      \n        // Returns the maximized number. \n        \n        N = int.Parse(N1);\n        \n        if(N > M)\n            return -1;\n        else\n            return N; \n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}