{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702738,
            "title": "Maximize sum after K negations",
            "titleSlug": "maximize-sum-after-k-negations1149",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of integers of size <strong>N</strong> and a number <strong>K</strong>., You must modify array <strong>arr[]</strong> exactly <strong>K</strong>&nbsp;number of times. Here modify array means in each operation you can replace any array element either <strong>arr[i] </strong>by<strong> -arr[i]</strong> or <strong>-arr[i] </strong>by<strong> arr[i]</strong>. You need to perform this operation in such a way that after K operations, the sum of the array must be maximum.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 5, K = 1\narr[] = {1, 2, -3, 4, 5}\n<strong>Output:</strong>\n15\n<strong>Explanation:\n</strong>We have k=1 so we can change -3 to 3 and\nsum all the elements to produce 15 as output.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 10, K = 5\narr[] = {5, -2, 5, -4, 5, -12, 5, 5, 5, 20}\n<strong>Output:</strong>\n68\n<strong>Explanation:\n</strong>Here  we have k=5 so we turn -2, -4, -12 to\n2, 4, and 12 respectively. Since we have\nperformed 3 operations so k is now 2. To get\nmaximum sum of array we can turn positive\nturned 2 into negative and then positive\nagain so k is 0. Now sum is\n5+5+4+5+12+5+5+5+20+2 = 68</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You <strong>don't</strong> have to print anything, printing is done by the driver code itself. You have to complete the function <strong>maximizeSum()</strong> which takes the array <strong>A[]</strong>, its size <strong>N</strong><strong>, </strong>and an integer <strong>K </strong>as inputs and returns the maximum possible sum.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N,K &le; 10<sup>5</sup><br />-10<sup>9</sup> &le; Ai &le; 10<sup>9</sup> </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(N*logN)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>&nbsp;</strong></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N integers and an integer K, modify the array exactly K times.  Each modification involves replacing an element arr[i] with -arr[i] or vice versa. Maximize the sum of the array after K modifications.",
                "constraints": [
                    "1 <= N, K <= 10^5",
                    "-10^9 <= Ai <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 5, K = 1\narr[] = {1, 2, -3, 4, 5}",
                        "output": "15",
                        "explanation": "By changing -3 to 3, the array becomes {1, 2, 3, 4, 5}. The sum is 1 + 2 + 3 + 4 + 5 = 15."
                    },
                    {
                        "input": "N = 10, K = 5\narr[] = {5, -2, 5, -4, 5, -12, 5, 5, 5, 20}",
                        "output": "68",
                        "explanation": "First, convert -2, -4, and -12 to 2, 4, and 12 respectively, using 3 operations. K is now 2. To maximize the sum, change the smallest positive element (2) to -2, and then back to 2, using the remaining 2 operations.  The sum is 5 + 2 + 5 + 4 + 5 + 12 + 5 + 5 + 5 + 20 = 68."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Change all the negetive into positive untill k permits. Now there are two cases:</span></p>\n\n<p><span style=\"font-size:18px\">If all negetive is changed to positive and k&gt;0<br />\n&nbsp;&nbsp; case-1: if k is even<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select a number a[i] and flip its sign even number of times making the value of k=0 and a[i] will remain positive.<br />\n&nbsp;&nbsp; case-2:&nbsp; else k is odd:<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select smallest number from the array and change it to negetive, and k becomes zero due to case-1.</span></p>\n\n<p><span style=\"font-size:18px\">The final answer will be sum of the array.</span></p>\n\n<p><span style=\"font-size:18px\">else k==0<br />\nSum the array and print the answer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n    public:\n    typedef long long int ll; //define a typealias for long long int\n    \n    //Function to maximize the sum based on given conditions.\n    long long int maximizeSum(long long int a[], int n, int k)\n    {\n        sort(a,a+n); //sorting the array in ascending order\n        \n        ll sum=0, i;\n        \n        //iterating over the array\n        for(i=0;i<n;i++){\n            //if the current element is negative and we still have\n            //remaining negative numbers to replace, make it positive\n            //and reduce the value of k.\n            if(a[i]<0 and k>0){\n                a[i]*=-1;\n                k--;\n            }\n        }\n        \n        sort(a,a+n); //sorting the array again after making changes\n        \n        //calculating the sum of all elements in the array\n        for(i=0;i<n;i++)\n        sum+=a[i];\n        \n        //if k is odd, subtract twice the minimum value in the array\n        if(k&1)\n        sum-=2*a[0];\n        \n        return sum; //return the maximum possible sum\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    // Function to maximize the sum of given array elements\n    // by negating k smallest negative elements\n    public static long maximizeSum(long a[], int n, int k) {\n        \n        // Sort the array in non-decreasing order\n        Arrays.sort(a);\n        \n        // Iterate through the array\n        for(int i=0;i<n;i++) {\n            \n            // If the current element is negative and\n            // we still have remaining negations (k > 0)\n            if(a[i]<0 && k>0) {\n                // Negate the current element\n                a[i]*=-1;\n                // Decrease the count of remaining negations\n                k--;\n            }\n        }\n        \n        // Sort the array again after negating elements\n        Arrays.sort(a);\n        \n        long sum = 0;\n        \n        // Calculate the sum of all elements in the array\n        for(int i=0;i<n;i++)\n            sum+=a[i];\n        \n        // If the count of remaining negations is odd (k%2 == 1)\n        // Subtract twice the smallest element from the sum\n        if(k%2==1)\n            sum-=2*a[0];\n        \n        // Return the final sum\n        return sum;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    # Function to maximize the sum\n    def maximizeSum(self, a, n, k):\n        # Sorting the array\n        a.sort()\n        sum = 0\n        for i in range(0,n):\n            # If the element is negative and we have available k operations\n            if(a[i]<0 and k>0):\n                # Making the element positive\n                a[i]*=-1\n                # Decreasing the k value\n                k-=1\n        \n        # Sorting the array again\n        a.sort()\n        for i in range(0,n):\n            # Adding all the elements\n            sum+=a[i]\n        \n        # Adjusting the sum based on remaining k value\n        if(k&1):\n            sum-=2*a[0]\n        return sum",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Function to maximize the sum.\n    public long maximizeSum(long[] arr, int n, int k)\n    {\n        //Sorting the array in ascending order\n        Array.Sort(arr);\n        \n        long sum = 0;\n        \n        //Iterating over the array\n        for(int i = 0; i < n; i++)\n        {\n            //If the current element is negative and we still have\n            //remaining negative numbers to replace, make it positive\n            //and reduce the value of k.\n            if(arr[i] < 0 && k > 0)\n            {\n                arr[i] *= -1;\n                k--;\n            }\n        }\n        \n        //Sorting the array again after making changes\n        Array.Sort(arr);\n        \n        //Calculating the sum of all elements in the array\n        for(int i = 0; i < n; i++)\n        {\n            sum += arr[i];\n        }\n        \n        //If k is odd, subtract twice the minimum value in the array\n        if(k % 2 == 1)\n        {\n            sum -= 2 * arr[0];\n        }\n        \n        //Returning the maximum possible sum\n        return sum;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n * @param {number} k\n * @return {number} \n*/\n\nclass Solution {\n    maximizeSum(arr,n,k){\n       //sort the array in ascending order\n       arr.sort((a, b) => a - b);\n       \n       let sum = 0;\n       let i = 0;\n       \n       for(i = 0; i < n; i++){\n           //if the current element is negative and k is still greater than 0\n           if(arr[i] < 0 && k > 0){\n               //make the current element positive\n               arr[i] *= -1;\n               k--;\n           }\n       }\n       \n       //sort the array in ascending order again\n       arr.sort((a, b) => a - b);\n       \n       for(i = 0; i < n; i++){\n           sum += arr[i];\n       }\n       \n       //if k is still an odd number, subtract twice the smallest element from the sum \n       if(k & 1){\n           sum -= 2 * arr[0];\n       }\n       \n       return sum;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}