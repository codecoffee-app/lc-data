{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702872,
            "title": "Maximize The Array",
            "titleSlug": "maximize-the-array3340",
            "content": "<p><span style=\"font-size: 18px;\">Given two integer arrays arr1 and arr2 of size n. Use the greatest elements from the given arrays to create a new array of size n such that it consists of only unique elements and the sum of all its elements is maximum.<br />The created elements should contain the elements of arr2 followed by elements of arr1 in order of their appearance.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> The input array will be given in such way, that every time it is possible to make a new arr by maintaing the following conditions.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 5\narr1 = {7, 4, 8, 0, 1}\narr2 = {9, 7, 2, 3, 6}\n<strong>Output: </strong>9 7 6 4 8\n<strong>Explanation:</strong> 9, 7, 6 are from 2nd array\nand 4, 8 from 1st array.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: n</strong> = 4\narr1 = {6, 7, 5, 3}\narr2 = {5, 6, 2, 9} \n<strong>Output:</strong> 5 6 9 7 \n<strong>Explanation:</strong> 5, 6, 9 are from 2nd array\nand 7 from 1st array.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task: </strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>maximizeArray()</strong> which takes the array arr1[], arr2[] and n as input parameters and returns the desired array of integers.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlog(n))<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup><br />0 &lt;=arr1[i]&lt;= 10<sup>9</sup><br />0 &lt;= arr2[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integer arrays, `arr1` and `arr2`, each of size `n`, create a new array of size `n` consisting of only unique elements. The new array should be constructed by selecting the greatest possible elements from `arr1` and `arr2` to maximize the sum of its elements. The array should be built by considering elements from `arr2` first, followed by elements from `arr1`, maintaining their original order of appearance. It is guaranteed that a valid solution exists.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= arr1[i] <= 10^9",
                    "0 <= arr2[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 5\narr1 = {7, 4, 8, 0, 1}\narr2 = {9, 7, 2, 3, 6}",
                        "output": "9 7 6 4 8",
                        "explanation": "The optimal solution selects 9, 7, and 6 from `arr2`. Then, it selects 4 and 8 from `arr1` to complete the array with unique and maximal elements."
                    },
                    {
                        "input": "n = 4\narr1 = {6, 7, 5, 3}\narr2 = {5, 6, 2, 9}",
                        "output": "5 6 9 7",
                        "explanation": "The optimal solution selects 5, 6, and 9 from `arr2`. Then, it selects 7 from `arr1` to complete the array with unique and maximal elements."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use priority queue to get max element effiecienctly.</p>",
            "<p>Sort the extracted array to order the arrays.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution{   \r\npublic:\r\n    struct compare {\r\n        bool operator()(vector<int> const &v1, vector<int> const &v2) {\r\n            // not same element\r\n            if (v1[0] != v2[0]) {\r\n                // place large element first\r\n                return v1[0] < v2[0];\r\n            }\r\n                // same element\r\n            else {\r\n                // from same array\r\n                if(v1[1] == v2[1]){\r\n                    // small index first\r\n                    return v1[2] > v2[2];\r\n                }\r\n                // from diff array\r\n                // give 2nd array priority\r\n                return v1[1] != 2;\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    vector<int> maximizeArray(int arr1[], int arr2[], int n) {\r\n        priority_queue<vector<int>, vector<vector<int>>, compare> pq;\r\n        for (int i = 0; i < n; i++) {\r\n            vector<int> v(3);\r\n            v[0] = arr1[i], v[1] = 1, v[2] = i;\r\n            pq.push(v);\r\n        }\r\n        for (int i = 0; i < n; i++) {\r\n            vector<int> v(3);\r\n            v[0] = arr2[i], v[1] = 2, v[2] = i;\r\n            pq.push(v);\r\n        }\r\n\r\n        vector<int> ans;\r\n        vector<pair<int, int>> ans1, ans2;\r\n        int lastSeen = -1;\r\n        while (!pq.empty()) {\r\n            auto v = pq.top();\r\n            pq.pop();\r\n\r\n            // only uniques allowed\r\n            if (lastSeen == v[0]) {\r\n                continue;\r\n            }\r\n            if (v[1] == 1) {\r\n                ans1.emplace_back(v[2], v[0]);\r\n            } else {\r\n                ans2.emplace_back(v[2], v[0]);\r\n            }\r\n            lastSeen = v[0];\r\n            if (ans1.size() + ans2.size() == n) {\r\n                break;\r\n            }\r\n        }\r\n        sort(ans1.begin(), ans1.end());\r\n        sort(ans2.begin(), ans2.end());\r\n        for (auto pp : ans2) {\r\n            ans.push_back(pp.second);\r\n        }\r\n        for (auto pp : ans1) {\r\n            ans.push_back(pp.second);\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    ArrayList<Integer> maximizeArray(int[] arr1, int[] arr2, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());\n        ArrayList<Integer> ans = new ArrayList<>();\n        for (int item : arr1) pq.add(item);\n        for (int item : arr2) pq.add(item);\n        HashSet<Integer> set = new HashSet<>();\n        while (set.size() != n) {\n            set.add(pq.poll());\n        }\n        for (int item : arr2) {\n            if (set.contains(item)) {\n                set.remove(item);\n                ans.add(item);\n            }\n        }\n        for (int item : arr1) {\n            if (set.contains(item)) {\n                set.remove(item);\n                ans.add(item);\n            }\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "\r\nimport heapq\r\nclass Solution:\r\n    def maximizeArray(self, arr1, arr2, n):\r\n        arr=arr1+arr2\r\n        heapq._heapify_max(arr)\r\n        maxArr={}\r\n        ele_count=0\r\n        while ele_count<n:\r\n            if len(arr)>0:\r\n                x=heapq._heappop_max(arr)\r\n            else:\r\n                break\r\n            if x not in maxArr:\r\n                maxArr[x]=1\r\n                ele_count+=1\r\n       \r\n        li=[]\r\n        for ele in arr2:\r\n            if maxArr.get(ele,0)>0:\r\n                maxArr[ele]=0\r\n                li.append(ele)\r\n        for ele in arr1:\r\n            if maxArr.get(ele,0)>0:\r\n                maxArr[ele]=0\r\n                li.append(ele)\r\n     \r\n        return li",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class MinPriorityQueue {\n    constructor(comparator) {\n        this._heap = [];\n        this._comparator = comparator || ((a, b) => a[0] - b[0]);\n    }\n\n    isEmpty() { return this._heap.length === 0; }\n\n    size() { return this._heap.length; }\n\n    peek() { return this._heap[0]; }\n\n    enqueue(value) {\n        this._heap.push(value);\n        this._siftUp();\n        return this.size();\n    }\n\n    dequeue() {\n        const poppedValue = this.peek();\n        const bottom = this.size() - 1;\n        if (bottom > 0) {\n            this._swap(0, bottom);\n        }\n        this._heap.pop();\n        this._siftDown();\n        return poppedValue;\n    }\n\n    _parent(index) { return Math.floor((index - 1) / 2); }\n\n    _leftChild(index) { return index * 2 + 1; }\n\n    _rightChild(index) { return index * 2 + 2; }\n\n    _swap(index1, index2) {\n        [this._heap[index1], this._heap[index2]] =\n            [ this._heap[index2], this._heap[index1] ];\n    }\n\n    _siftUp() {\n        let nodeIndex = this.size() - 1;\n        while (nodeIndex > 0 &&\n               this._comparator(this._heap[nodeIndex],\n                                this._heap[this._parent(nodeIndex)]) < 0) {\n            this._swap(nodeIndex, this._parent(nodeIndex));\n            nodeIndex = this._parent(nodeIndex);\n        }\n    }\n\n    _siftDown() {\n        let nodeIndex = 0;\n        while ((this._leftChild(nodeIndex) < this.size() &&\n                this._comparator(this._heap[this._leftChild(nodeIndex)],\n                                 this._heap[nodeIndex]) < 0) ||\n               (this._rightChild(nodeIndex) < this.size() &&\n                this._comparator(this._heap[this._rightChild(nodeIndex)],\n                                 this._heap[nodeIndex]) < 0)) {\n            const smallerChildIndex =\n                this._rightChild(nodeIndex) < this.size() &&\n                        this._comparator(this._heap[this._rightChild(nodeIndex)],\n                                         this._heap[this._leftChild(nodeIndex)]) < 0\n                    ? this._rightChild(nodeIndex)\n                    : this._leftChild(nodeIndex);\n            this._swap(nodeIndex, smallerChildIndex);\n            nodeIndex = smallerChildIndex;\n        }\n    }\n}\n\nclass Solution {\n    constructor() {\n        this.compare = (v1, v2) => {\n            // not same element\n            if (v1[0] !== v2[0]) {\n                // place large element first\n                return v2[0] - v1[0];\n            } else {\n                // same element\n                if (v1[1] === v2[1]) {\n                    // small index first\n                    return v1[2] - v2[2];\n                }\n                // from different array\n                // give 2nd array priority\n                return v2[1] - v1[1];\n            }\n        };\n    }\n\n    maximizeArray(n, arr1, arr2) {\n        let pq = new MinPriorityQueue(this.compare);\n        for (let i = 0; i < n; i++) {\n            pq.enqueue([ arr1[i], 1, i ]);\n        }\n        for (let i = 0; i < n; i++) {\n            pq.enqueue([ arr2[i], 2, i ]);\n        }\n\n        let ans = [];\n        let ans1 = [], ans2 = [];\n        let lastSeen = -1;\n        while (!pq.isEmpty()) {\n            let v = pq.dequeue();\n\n            // only uniques allowed\n            if (lastSeen === v[0]) {\n                continue;\n            }\n            if (v[1] === 1) {\n                ans1.push([ v[2], v[0] ]);\n            } else {\n                ans2.push([ v[2], v[0] ]);\n            }\n            lastSeen = v[0];\n            if (ans1.length + ans2.length === n) {\n                break;\n            }\n        }\n\n        ans1.sort((a, b) => a[0] - b[0]);\n        ans2.sort((a, b) => a[0] - b[0]);\n        for (let pp of ans2) {\n            ans.push(pp[1]);\n        }\n        for (let pp of ans1) {\n            ans.push(pp[1]);\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}