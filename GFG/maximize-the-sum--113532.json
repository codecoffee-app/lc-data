{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881455,
            "title": "Maximium Sum",
            "titleSlug": "maximize-the-sum--113532",
            "content": "<div class=\"row bottom\">\n<div class=\"col-xs-12 textAlign\">\n<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">You are given an integer array </span><strong style=\"font-size: 18px;\">arr[]</strong><span style=\"font-size: 18px;\"> and an integer </span><strong style=\"font-size: 18px;\">k</strong><span style=\"font-size: 18px;\">. Your task is to select <strong>k</strong> integers from the array such that the sum of the selected integers is maximized.&nbsp;You can select only the element which has the maximum frequency. The element will be removed from the array after being selected. If there are many elements with the maximum frequency then you can choose any. Your aim is to </span><strong style=\"font-size: 18px;\">maximize</strong><span style=\"font-size: 18px;\"> the sum.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Input:</span> </strong></span><span style=\"font-size: 18px;\">k = 3, arr[] = [1, 1, 2, 3, 3]\n<strong>Output: </strong>7</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Intially both 3 and 1 have maximum frequency, we will select 3, now frequency of 1 is maximum so we will select 1 now we have all elements once so we can choose anyone, we will select 3. This will result in sum 3+1+3=7</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= k &lt;= arr.size() &lt;=10<sup>5</sup><br />1&lt;= arr[i] &lt;=10<sup>5</sup></span></p>\n</div>\n</div>\n<pre>&nbsp;</pre>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use priority queue to have the&nbsp;maximum frequency element at the top.<br />\nAlgorithm:<br />\nstore the {frequency,element} in the priority queue<br />\nwhile(c&lt;k):<br />\n&nbsp; &nbsp; &nbsp; pair p &lt;- top element of queue<br />\n&nbsp; &nbsp; &nbsp; add to sum<br />\n&nbsp; &nbsp; &nbsp; reduce the frequency by 1<br />\n&nbsp; &nbsp; &nbsp; if frequency greater than 1 then add to queue again<br />\n&nbsp; &nbsp; &nbsp; c=c+1<br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "priority-queue",
                "slug": "priority-queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int maximum_sum(int k, vector<int> &v) {\n        int n = v.size();\n        unordered_map<int, int> m1;\n        int i;\n        int sum = 0;\n        for (i = 0; i < n; i++) {\n            m1[v[i]]++;\n        }\n        priority_queue<pair<int, int>> pq;\n\n        for (auto i : m1) {\n            pq.push({i.second, i.first});\n        }\n\n        int c = 0;\n        while (c < k) {\n            pair<int, int> p;\n            p = pq.top();\n            pq.pop();\n            p.first--;\n            sum += p.second;\n            if (p.first) {\n                pq.push(p);\n            }\n            c++;\n        }\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}