{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703337,
            "title": "Maximize the sum of selected numbers from a sorted array to make it empty",
            "titleSlug": "maximize-the-sum-of-selected-numbers-from-an-array-to-make-it-empty0836",
            "content": "<p><span style=\"font-size:18px\">Given a array of<strong> N</strong> numbers, we need to maximize the sum of selected numbers. At each step, you need to select a number A<sub>i</sub>, delete one occurrence of&nbsp;<strong>A<sub>i</sub>-1 (if exists), and A<sub>i</sub></strong>&nbsp;each from the array. Repeat these steps until the array gets empty. The problem is to maximize the sum of the selected numbers.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong> Numbers need to be selected from maximum to minimum.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {1, 2, 2, 2, 3, 4}\r\n<strong>Output :</strong> 10\r\n<strong>Explanation:</strong>\r\nWe select 4, so 4 and 3 are deleted leaving us with {1,2,2,2}.\r\nThen we select 2, so 2 &amp; 1 are deleted. We are left with{2,2}.\r\nWe select 2 in next two steps, thus the sum is 4+2+2+2=10.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {1, 2, 3} <strong>\r\nOutput :</strong>  4\r\n<strong>Explanation:</strong> We select 3, so 3 and 2 are deleted leaving us with {1}. Then we select 1, 0 doesn&#39;t exist so we delete 1. thus the sum is 3+1=4.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>maximizeSum()</strong> that takes an array <strong>(arr)</strong>, sizeOfArray <strong>(n),</strong>&nbsp;and return the maximum sum of the selected numbers. The driver code takes care of the printing.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(NlogN).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N).</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup><br />\r\n1 &le; A[i] &le; 10<sup>5</sup></span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N numbers, the goal is to maximize the sum of selected numbers. In each step, select a number A<sub>i</sub>, then delete one occurrence of A<sub>i</sub>-1 (if it exists) and one occurrence of A<sub>i</sub> from the array. Repeat these steps until the array is empty. The objective is to maximize the sum of the selected numbers. Numbers need to be selected from maximum to minimum.",
                "constraints": [
                    "1 <= N <= 10<sup>5</sup>",
                    "1 <= A[i] <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "{1, 2, 2, 2, 3, 4}",
                        "output": "10",
                        "explanation": "Select 4, delete 4 and 3 leaving {1,2,2,2}. Select 2, delete 2 and 1 leaving {2,2}. Select 2 twice, deleting the remaining 2s. Total sum is 4 + 2 + 2 + 2 = 10."
                    },
                    {
                        "input": "{1, 2, 3}",
                        "output": "4",
                        "explanation": "Select 3, delete 3 and 2 leaving {1}. Select 1, delete 1. Total sum is 3 + 1 = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\">Our aim is to maximize the sum of the selected numbers. The idea is to pre-calculate the occurrence of all numbers x in the array a[] in a hash&nbsp;<strong>ans</strong>. Now our recurrence relation will decide either to select a number or not. If we select the number then we take the occurrences of that number and the value stored at ans[i-2] as ans[i-1] will be deleted and not be taken to count. If we do not select the number then we take ans[i-1] which have been pre-calculated while moving forward.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\r\n  public:\r\n  //Function to maximize the sum with the given array.\r\n  int maximizeSum(int a[], int n){\r\n      \r\n        unordered_map<int, int> ans;\r\n        int sum=0;\r\n        bool arr[n];\r\n        \r\n        //Initializing all elements of arr[] as false.\r\n        for(int i=0;i<n;i++){\r\n            arr[i]=false;\r\n        }\r\n        \r\n        //counting frequency of each element in the array.\r\n        for (int i = 0; i < n; i++)\r\n        \tans[a[i]]++;\r\n        \r\n        //iterating from the last element of the array.\r\n        for(int i=n-1;i>=0;i--)\r\n        {\r\n            //checking if the element has been used already or not.\r\n            if(arr[i] == false)\r\n            {\r\n                arr[i]=true;\r\n                sum+= a[i];\r\n                \r\n                //checking if the previous element of a[i] is available or not.\r\n                if(ans[a[i]-1] > 0)\r\n                {\r\n                    //if available, using that element and decrementing its frequency.\r\n                    arr[i-ans[a[i]]]=true;\r\n                    ans[a[i]-1]--;\r\n                }\r\n            }\r\n        }\r\n        //returning the maximum possible sum.\r\n        return sum;\r\n    }\r\n  \r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Complete{\n    // Function for finding maximum and value pair\n    public static int maximizeSum (int arr[], int n) {\n        //Complete the function\n        \n        // using a HashMap to store the frequency of elements\n        HashMap<Integer,Integer> hm=new HashMap<>();\n        int sum=0;\n        \n        // using a boolean array to check if an element has already been considered\n        boolean check[]=new boolean[n];\n        \n        // counting the frequency of elements in the array and storing it in the HashMap\n        for (int i = 0; i < n; i++)\n        \thm.put(arr[i],hm.getOrDefault(arr[i],0)+1);\n        \n        // iterating the array from the last element\n        for(int i=n-1;i>=0;i--)\n        {\n            if(!check[i])\n            {\n                check[i]=true;\n                // adding the current element to the sum\n                sum+= arr[i];\n                \n                // checking if there is a smaller element present and its frequency is greater than 0\n                if(hm.getOrDefault(arr[i]-1,0) > 0)\n                {\n                    // marking the smaller element as checked and reducing its frequency by 1\n                    check[i-hm.get(arr[i])]=true;\n                    hm.put(arr[i]-1,hm.get(arr[i]-1)-1);\n                }\n            }\n        }\n        \n        // returning the maximum sum of values\n        return sum;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from collections import defaultdict\r\n\r\nclass Solution:\r\n\r\n    #Function to maximize the sum according to given conditions.\r\n    def maximizeSum (self,arr, n) : \r\n\r\n        #Creating a dictionary to store the frequency of each element.\r\n        ans=defaultdict(int)\r\n        a=[False]*n\r\n        sum=0\r\n\r\n        #updating the frequency of each element in the dictionary.\r\n        for el in arr:\r\n            ans[el]+=1\r\n\r\n        #iterating the elements of the array in reverse order.\r\n        for i in range(n-1,-1,-1):\r\n\r\n            #if the element is not used yet.\r\n            if a[i]==False:\r\n\r\n                #mark it as used and add it to the sum.\r\n                a[i]=True\r\n                sum+=arr[i]\r\n\r\n                #if there are more elements with value arr[i]-1,\r\n                #mark them as used and reduce their frequency by 1.\r\n                if (ans[arr[i]-1]>0):\r\n                    a[i-ans[arr[i]]]=True\r\n                    ans[arr[i]-1]-=1\r\n                    \r\n        return sum",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}