{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704665,
            "title": "Maximize Toys",
            "titleSlug": "maximize-toys0331",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr[ ]</strong> of length <strong>N</strong> consisting cost of <strong>N</strong> toys and&nbsp;an integer <strong>K</strong> depicting the amount with you. Your task is to find maximum number of toys you can buy&nbsp;with <strong>K</strong> amount.&nbsp;</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> \nN = 7 \nK = 50\narr[] = {1, 12, 5, 111, 200, 1000, 10}\n<strong>Output:</strong> 4\n<strong>Explaination:</strong> The costs of the toys \nyou can buy are 1, 12, 5 and 10.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> \nN = 3 \nK = 100\narr[] = {20, 30, 50}\n<strong>Output:</strong> 3\n<strong>Explaination:</strong> You can buy all toys.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>toyCount()</strong> which takes the integer <strong>N</strong>,&nbsp;integer <strong>K</strong> and the array <strong>arr[ ] </strong>as input parameters&nbsp;and returns the maximum count of toys you can have.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N * Log(N))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup><br />\n1 &le; K, arr[i] &le; 10<sup>9</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of length `N` representing the costs of `N` toys, and an integer `K` representing the amount of money you have, find the maximum number of toys you can buy with the amount `K`.",
                "constraints": [
                    "1 \u2264 N \u2264 10^5",
                    "1 \u2264 K, arr[i] \u2264 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 7, K = 50, arr = [1, 12, 5, 111, 200, 1000, 10]",
                        "output": "4",
                        "explanation": "The toys with costs 1, 12, 5, and 10 can be purchased, totaling a cost of 28, which is less than or equal to K = 50. Therefore, the maximum number of toys that can be bought is 4."
                    },
                    {
                        "input": "N = 3, K = 100, arr = [20, 30, 50]",
                        "output": "3",
                        "explanation": "You can buy all three toys, as their total cost (20 + 30 + 50 = 100) is equal to K. Therefore, the maximum number of toys that can be bought is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Picking the lowest valued one is the optimal way.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to find the maximum number of toys that can be bought.\n    int toyCount(int N, int K, vector<int> arr)\n    {\n        //sorting the array in ascending order.\n        sort(arr.begin(), arr.end());\n        int sum = 0, i;\n        //iterating over the array to find the maximum number of toys.\n        for(i = 0; i < N; i++){\n            //if sum of prices exceeds the budget, break the loop.\n            if(sum + arr[i] > K)\n                break;\n            //updating the sum with the current price.\n            sum += arr[i];\n        }\n        //returning the maximum number of toys that can be bought.\n        return i;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    static int toyCount(int N, int K, int arr[])\n    {\n        // Sort the array in ascending order\n        Arrays.sort(arr);\n\n        int sum = 0, i;\n        for(i = 0; i < N; i++){\n            // Check if adding the current element to the sum exceeds the maximum price\n            if(sum + arr[i] > K)\n                break;\n\n            // Add the current element to the sum\n            sum += arr[i];\n        }\n        // Return the index of the last element that can be purchased\n        return i;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def toyCount(self, N, K, arr):\n        # sorting the array in ascending order\n        arr.sort();\n        \n        Sum = 0\n        cnt = 0\n        \n        # iterating over the array elements\n        for i in range(N):\n            if Sum + arr[i] > K :\n                # breaking the loop if adding current element exceeds the given value K\n                break\n            Sum += arr[i]\n            cnt += 1\n        \n        # returning the count of elements added to the sum\n        return cnt",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} N\n * @param {number} K\n * @returns {number}\n*/\n\nclass Solution {\n    \n    toyCount(arr, N, K) {\n        arr.sort((a, b) => a - b); // Sorts the array in ascending order\n        let sum = 0;\n        let i;\n        \n        for(i = 0; i < N; i++) {\n            if(sum + arr[i] > K) {\n                break;\n            } \n            sum += arr[i];\n        }\n        \n        return i;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}