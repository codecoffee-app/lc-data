{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703443,
            "title": "Maximum average subarray",
            "titleSlug": "maximum-average-subarray5859",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>a</strong><strong>rr</strong> of size&nbsp;<strong>n</strong> and a positive integer <strong>k</strong>, find the subarray of length <strong>k</strong> with the maximum average. <strong>You need to</strong> <strong>return the starting index of the subarray</strong>. If there are multiple subarrays with the same maximum average, <strong>return the smallest starting index</strong>.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>k = 4, n = 6\narr[] = {1, 12, -5, -6, 50, 3}\n<strong>Output:</strong> 12 -5 -6 50\n<strong>Explanation:</strong> Maximum average is (12 - 5 - 6 + 50)/4 = 51/4.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>k = 3, n = 7\narr[] = {3, -435, 335, 10, -50, 100, 20}\n<strong>Output:</strong> 335 10 -50\n<strong>Explanation:</strong> Maximum average is (335 + 10 - 50)/3 = 295/3.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>findMaxAverage()</strong>&nbsp;which takes the array of integers&nbsp;<strong>arr, </strong>its size <strong>n</strong>&nbsp;and integer&nbsp;<strong>k&nbsp;</strong>as input parameters and returns an integer&nbsp;denoting the starting index of the subarray.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br /><br /><strong>Constraints</strong><br />1 &lt;= k &lt;= n &lt;= 10<sup>5</sup><br />0 &lt;= |arr[i]| &lt;= 10<sup>3</sup></span></p>\n<div id=\"highlighter--hover-tools\" style=\"display: none;\">\n<div id=\"highlighter--hover-tools--container\">\n<div class=\"highlighter--icon highlighter--icon-copy\" title=\"Copy\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-change-color\" title=\"Change Color\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-delete\" title=\"Delete\">&nbsp;</div>\n</div>\n</div>\n<div id=\"highlighter--hover-tools\" style=\"display: none;\">\n<div id=\"highlighter--hover-tools--container\">\n<div class=\"highlighter--icon highlighter--icon-copy\" title=\"Copy\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-change-color\" title=\"Change Color\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-delete\" title=\"Delete\">&nbsp;</div>\n</div>\n</div>\n<div id=\"highlighter--hover-tools\" style=\"display: none;\">\n<div id=\"highlighter--hover-tools--container\">\n<div class=\"highlighter--icon highlighter--icon-copy\" title=\"Copy\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-change-color\" title=\"Change Color\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-delete\" title=\"Delete\">&nbsp;</div>\n</div>\n</div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `n` and a positive integer `k`, find the subarray of length `k` with the maximum average. Return the starting index of the subarray. If multiple subarrays have the same maximum average, return the smallest starting index.",
                "constraints": [
                    "1 <= k <= n <= 10^5",
                    "0 <= |arr[i]| <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "k = 4, n = 6\narr[] = {1, 12, -5, -6, 50, 3}",
                        "output": "1",
                        "explanation": "The subarray {12, -5, -6, 50} has the maximum average of (12 - 5 - 6 + 50) / 4 = 51 / 4. Its starting index is 1."
                    },
                    {
                        "input": "k = 3, n = 7\narr[] = {3, -435, 335, 10, -50, 100, 20}",
                        "output": "2",
                        "explanation": "The subarray {335, 10, -50} has the maximum average of (335 + 10 - 50) / 3 = 295 / 3. Its starting index is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Create an auxiliary array of size n. Store cumulative sum of elements in this array. Using this we can compute sum between two indexes in O(1) time.</span><br />\n&nbsp;</p>",
            "<p><span style=\"font-size:18px\">To avoid using extra space<br />\n1) Compute sum of first &lsquo;k&rsquo; elements and store it in sum and max_sum<br />\n2) Do following for every element arr[i] where i varies from &lsquo;k&rsquo; to &lsquo;n-1&rsquo;<br />\n&hellip;&hellip;.a) Remove arr[i-k] from sum and add arr[i], i.e., do sum += arr[i] &ndash; arr[i-k]<br />\n&hellip;&hellip;.b) If new sum becomes more than max_sum so far, update max_sum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution{   \r\npublic:\r\n    int findMaxAverage(int arr[], int n, int k) {\r\n        // Check if 'k' is valid\r\n        if (k > n) return -1;\r\n\r\n        // Compute sum of first 'k' elements\r\n        int sum = arr[0];\r\n        for (int i = 1; i < k; i++) sum += arr[i];\r\n\r\n        int max_sum = sum, max_end = k - 1;\r\n\r\n        // Compute sum of remaining subarrays\r\n        for (int i = k; i < n; i++) {\r\n            sum = sum + arr[i] - arr[i - k];\r\n            if (sum > max_sum) {\r\n                max_sum = sum;\r\n                max_end = i;\r\n            }\r\n        }\r\n        // Return starting index\r\n        return max_end - k + 1;\r\n    }\r\n};\r\n      \r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution {\r\n    int findMaxAverage(int[] arr, int n, int k) {\r\n         if (k > n) return -1;\r\n\r\n        // Compute sum of first 'k' elements\r\n        int sum = arr[0];\r\n        for (int i = 1; i < k; i++) \r\n            sum += arr[i];\r\n\r\n        int max_sum = sum, max_end = k - 1;\r\n\r\n        // Compute sum of remaining subarrays\r\n        for (int i = k; i < n; i++) {\r\n            sum = sum + arr[i] - arr[i - k];\r\n            if (sum > max_sum) {\r\n                max_sum = sum;\r\n                max_end = i;\r\n            }\r\n        }\r\n        // Return starting index\r\n        return max_end - k + 1;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def findMaxAverage(self, arr, n, k):\n        # initialize variables\n        summ=0\n        left=0\n        # calculate the sum of first k elements\n        summ=sum(arr[:k])\n        maxSum=summ\n        # initialize a pointer j at index k\n        j=k\n        # iterate through the array starting from index k\n        while j<n:\n            # update the current sum by removing the first element from the previous sum and adding the next element\n            summ=summ+arr[j]-arr[j-k]\n            # check if the current sum is greater than the maximum sum seen so far\n            if summ>maxSum:\n                maxSum=summ\n                # update the starting index of the subarray with the maximum sum\n                left=j-k+1\n            j+=1\n        # return the starting index of the subarray with the maximum sum\n        return left",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\n\nclass Solution{\n    //Complete this function\n    public int findMaxAverage(int[] arr, int n, int k) {\n        // Check if 'k' is valid\n        if (k > n) return -1;\n\n        // Compute sum of first 'k' elements\n        int sum = arr[0];\n        for (int i = 1; i < k; i++) sum += arr[i];\n\n        int max_sum = sum, max_end = k - 1;\n\n        // Compute sum of remaining subarrays\n        for (int i = k; i < n; i++) {\n            sum = sum + arr[i] - arr[i - k];\n            if (sum > max_sum) {\n                max_sum = sum;\n                max_end = i;\n            }\n        }\n        // Return starting index\n        return max_end - k + 1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}