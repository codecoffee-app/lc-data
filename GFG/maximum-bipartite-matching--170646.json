{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713588,
            "title": "Maximum Bipartite Matching",
            "titleSlug": "maximum-bipartite-matching--170646",
            "content": "<p><span style=\"font-size: 18px;\">There are M job applicants and N jobs.&nbsp; Each applicant has a subset of jobs that he/she is interested in. Each job opening can only accept one applicant and a job applicant can be appointed for only one job. Given a matrix <strong>G</strong> with <strong>M</strong>&nbsp;rows and <strong>N</strong> columns&nbsp;where G(i,j) denotes i<sup>th&nbsp;</sup>applicant is interested in the j<sup>th&nbsp;</sup>job. Find the maximum number of applicants who can get the job.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong>M = 3, N = 5\nG = {{1,1,0,1,1},{0,1,0,0,1},\n{1,1,0,1,1}}\n<strong>Output: </strong>3\n<strong>Explanation: </strong>There is one of the possible\nassignment-\nFirst applicant gets the 1st job.\nSecond applicant gets the 2nd job.\nThird applicant gets the 4th job.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>M = 6, N = 2\nG = {{1,1},{0,1},{0,1},{0,1},\n{0,1},{1,0}}\n<strong>Output: </strong>2\n<strong>Explanation: </strong>There is one of the possible\nassignment-\nFirst applicant gets the 1st job.\nSecond applicant gets the 2nd job.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read to print anything. Your task is to complete the function&nbsp;<strong>maximumMatch()&nbsp;</strong>which takes matrix G as input parameter and returns the maximum number of applicants who can get the job.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N<sup>3</sup>).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N, M &le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "There are M job applicants and N jobs. Each applicant has a subset of jobs they are interested in. Each job opening can only accept one applicant, and an applicant can be appointed to only one job. Given a matrix G with M rows and N columns, where G(i,j) = 1 denotes that the i-th applicant is interested in the j-th job, and G(i,j) = 0 denotes they are not, find the maximum number of applicants who can be assigned to a job.",
                "constraints": [
                    "1 <= N, M <= 100"
                ],
                "testcases": [
                    {
                        "input": "M = 3, N = 5\nG = {{1,1,0,1,1},{0,1,0,0,1},{1,1,0,1,1}}",
                        "output": "3",
                        "explanation": "One possible assignment: Applicant 1 gets job 1, applicant 2 gets job 2, and applicant 3 gets job 4."
                    },
                    {
                        "input": "M = 6, N = 2\nG = {{1,1},{0,1},{0,1},{0,1},{0,1},{1,0}}",
                        "output": "2",
                        "explanation": "One possible assignment: Applicant 1 gets job 1, and applicant 2 gets job 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Kuhn&#39;s Algorithm for Maximum Bipartite Matching</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\npublic:\r\n\tvector<int>mt;\r\n\tvector<bool>used;\r\n\tbool try_kunh(int u, vector<vector<int>>&G){\r\n\t    for (int v = 0; v < G[0].size(); v++){\r\n\t        if (G[u][v] && !used[v])\r\n\t        {\r\n\t            used[v] = true;\r\n\t            if (mt[v] < 0 || try_kunh(mt[v], G))\r\n\t            {\r\n\t                mt[v] = u;\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t    }\r\n    return false;\r\n\t}\r\n\tint maximumMatch(vector<vector<int>>&G){\r\n\t\tint m = G.size();\r\n\t\tint n = G[0].size();\r\n\t\tint N = max(n, m);\r\n\t\tint ans = 0;\r\n\t\tmt.assign(N, -1);\r\n\t\tfor(int i = 0; i < m; i++){\r\n\t\t\tused.assign(N, false);\r\n\t\t\tif(try_kunh(i, G))\r\n\t\t\t\tans++;\r\n\t\t}\r\n\t\treturn ans;\r\n\t}\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//User function Template for Java\r\n\r\nclass Solution\r\n{\r\n    boolean bpm(int bpGraph[][], int u, \r\n                boolean seen[], int matchR[], int M, int N)\r\n    {\r\n        // Try every job one by one\r\n        for (int v = 0; v < N; v++)\r\n        {\r\n            // If applicant u is interested \r\n            // in job v and v is not visited\r\n            if (bpGraph[u][v]==1 && !seen[v])\r\n            {\r\n                \r\n                // Mark v as visited\r\n                seen[v] = true; \r\n\r\n                // If job 'v' is not assigned to\r\n                // an applicant OR previously\r\n                // assigned applicant for job v (which\r\n                // is matchR[v]) has an alternate job available.\r\n                // Since v is marked as visited in the \r\n                // above line, matchR[v] in the following\r\n                // recursive call will not get job 'v' again\r\n                if (matchR[v] < 0 || bpm(bpGraph, matchR[v],\r\n                                         seen, matchR, M, N))\r\n                {\r\n                    matchR[v] = u;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // Returns maximum number \r\n    // of matching from M to N\r\n    int maxBPM(int bpGraph[][], int M, int N)\r\n    {\r\n        // An array to keep track of the \r\n        // applicants assigned to jobs. \r\n        // The value of matchR[i] is the \r\n        // applicant number assigned to job i, \r\n        // the value -1 indicates nobody is assigned.\r\n        int matchR[] = new int[N];\r\n\r\n        // Initially all jobs are available\r\n        for(int i = 0; i < N; ++i)\r\n            matchR[i] = -1;\r\n\r\n        // Count of jobs assigned to applicants\r\n        int result = 0; \r\n        for (int u = 0; u < M; u++)\r\n        {\r\n            // Mark all jobs as not seen \r\n            // for next applicant.\r\n            boolean seen[] =new boolean[N] ;\r\n            for(int i = 0; i < N; ++i)\r\n                seen[i] = false;\r\n\r\n            // Find if the applicant 'u' can get a job\r\n            if (bpm(bpGraph, u, seen, matchR, M, N))\r\n                result++;\r\n        }\r\n        return result;\r\n    }\r\n    public int maximumMatch(int[][] G)\r\n    {\r\n        // Code here\r\n        int M=G.length;\r\n        int N=G[0].length;\r\n        int ans = maxBPM(G,M,N);\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def try_kunh(self, u, G, used, mt):\n        # Function to check if there is an augmenting path starting from vertex u\n        for v in range(len(G[0])):\n            # Check if there is an edge between u and v and v is not used yet\n            if (G[u][v] and used[v] == False):\n                used[v] = True\n                # If v is not matched with any other vertex or there is an augmenting path starting from mt[v]\n                if (mt[v] < 0 or self.try_kunh(mt[v], G, used, mt)):\n                    mt[v] = u\n                    return True\n        return False\n\n    def maximumMatch(self, G):\n        m = len(G)\n        n = len(G[0])\n        N = max(n, m)\n        ans = 0\n        mt = [-1 for i in range(N)]\n        # Try to find an augmenting path starting from each vertex in G\n        for i in range(m):\n            used = [False for j in range(N)]\n            # If an augmenting path is found, increment the count of matches\n            if (self.try_kunh(i, G, used, mt)):\n                ans = ans + 1\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number[][]} G\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to find maximum number of edges that can be added \r\n    //to the graph such that there is no cycle and graph remains connected.\r\n    maximumMatch(G)\r\n    {\r\n        let m = G.length;\r\n        let n = G[0].length;\r\n        let N = Math.max(n, m);\r\n        let ans = 0;\r\n        let mt = new Array(N).fill(-1);\r\n        // Try to find an augmenting path starting from each vertex in G\r\n        for (let i = 0; i < m; i++) {\r\n            let used = new Array(N).fill(false);\r\n            // If an augmenting path is found, increment the count of matches\r\n            if (this.try_kunh(i, G, used, mt)) {\r\n                ans = ans + 1;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    try_kunh(u, G, used, mt) {\r\n        // Function to check if there is an augmenting path starting from vertex u\r\n        for (let v = 0; v < G[0].length; v++) {\r\n            // Check if there is an edge between u and v and v is not used yet\r\n            if (G[u][v] && !used[v]) {\r\n                used[v] = true;\r\n                // If v is not matched with any other vertex or there is an augmenting path starting from mt[v]\r\n                if (mt[v] < 0 || this.try_kunh(mt[v], G, used, mt)) {\r\n                    mt[v] = u;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}