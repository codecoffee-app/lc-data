{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700533,
            "title": "Maximum Bipartite Matching",
            "titleSlug": "maximum-bipartite-matching",
            "content": "<p><span style=\"font-size: 18px;\">There are M job applicants and N jobs.&nbsp; Each applicant has a subset of jobs that he/she is interseted in. Each job opening can only accept one applicant and a job applicant can be appointed for only one job. Given a matrix <strong>G </strong>where G(i,j) denotes i<sup>th&nbsp;</sup>applicant is interested in j<sup>th&nbsp;</sup>job. Find an assignment of jobs to applicant in such that as many applicants as possible get jobs.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>G = {{1,1,0,1,1},{0,1,0,0,1},\n{1,1,0,1,1}}\n<strong>Output: </strong>3\n<strong>Explanation: </strong>There is one of the possible\nassignment-\nFirst applicant gets the 1st job.\nSecond applicant gets the 2nd job.\nThird applicant gets the 3rd job.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>G = {{1,1},{0,1},{0,1},{0,1},\n{0,1},{1,0}}\n<strong>Output: </strong>2\n<strong>Explanation: </strong>There is one of the possible\nassignment-\nFirst applicant gets the 1st job.\nSecond applicant gets the 2nd job.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read to print anything. Your task is to complete the function&nbsp;<strong>maximumMatch()&nbsp;</strong>which takes matrix G as input parameter and returns the maximum number of applicants who can get the job.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N<sup>3</sup>)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N, M &le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix G representing the interests of M job applicants for N jobs, find the maximum number of applicants that can be assigned to jobs. Each applicant can only be assigned to one job, and each job can only be assigned to one applicant. G(i,j) = 1 if the i-th applicant is interested in the j-th job, and 0 otherwise.",
                "constraints": [
                    "1 <= N, M <= 100"
                ],
                "testcases": [
                    {
                        "input": "{{1,1,0,1,1},{0,1,0,0,1},{1,1,0,1,1}}",
                        "output": "3",
                        "explanation": "One possible assignment is:\n- Applicant 1 gets job 1.\n- Applicant 2 gets job 2.\n- Applicant 3 gets job 4."
                    },
                    {
                        "input": "{{1,1},{0,1},{0,1},{0,1},{0,1},{1,0}}",
                        "output": "2",
                        "explanation": "One possible assignment is:\n- Applicant 1 gets job 1.\n- Applicant 2 gets job 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Kuhn&#39;s Algorithm for Maximum Bipartite Matching</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\npublic:\n\tvector<int>mt;\n\tvector<bool>used;\n\tbool try_kunh(int u, vector<vector<int>>&G){\n\t    for (int v = 0; v < G[0].size(); v++){\n\t        if (G[u][v] && !used[v])\n\t        {\n\t            used[v] = true;\n\t            if (mt[v] < 0 || try_kunh(mt[v], G))\n\t            {\n\t                mt[v] = u;\n\t                return true;\n\t            }\n\t        }\n\t    }\n    return false;\n\t}\n\tint maximumMatch(vector<vector<int>>&G){\n\t\tint m = G.size();\n\t\tint n = G[0].size();\n\t\tint N = max(n, m);\n\t\tint ans = 0;\n\t\tmt.assign(N, -1);\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tused.assign(N, false);\n\t\t\tif(try_kunh(i, G))\n\t\t\t\tans++;\n\t\t}\n\t\treturn ans;\n\t}\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//User function Template for Java\n\nclass Solution\n{\n    boolean bpm(int bpGraph[][], int u, \n                boolean seen[], int matchR[], int M, int N)\n    {\n        // Try every job one by one\n        for (int v = 0; v < N; v++)\n        {\n            // If applicant u is interested \n            // in job v and v is not visited\n            if (bpGraph[u][v]==1 && !seen[v])\n            {\n                \n                // Mark v as visited\n                seen[v] = true; \n\n                // If job 'v' is not assigned to\n                // an applicant OR previously\n                // assigned applicant for job v (which\n                // is matchR[v]) has an alternate job available.\n                // Since v is marked as visited in the \n                // above line, matchR[v] in the following\n                // recursive call will not get job 'v' again\n                if (matchR[v] < 0 || bpm(bpGraph, matchR[v],\n                                         seen, matchR, M, N))\n                {\n                    matchR[v] = u;\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    // Returns maximum number \n    // of matching from M to N\n    int maxBPM(int bpGraph[][], int M, int N)\n    {\n        // An array to keep track of the \n        // applicants assigned to jobs. \n        // The value of matchR[i] is the \n        // applicant number assigned to job i, \n        // the value -1 indicates nobody is assigned.\n        int matchR[] = new int[N];\n\n        // Initially all jobs are available\n        for(int i = 0; i < N; ++i)\n            matchR[i] = -1;\n\n        // Count of jobs assigned to applicants\n        int result = 0; \n        for (int u = 0; u < M; u++)\n        {\n            // Mark all jobs as not seen \n            // for next applicant.\n            boolean seen[] =new boolean[N] ;\n            for(int i = 0; i < N; ++i)\n                seen[i] = false;\n\n            // Find if the applicant 'u' can get a job\n            if (bpm(bpGraph, u, seen, matchR, M, N))\n                result++;\n        }\n        return result;\n    }\n    public int maximumMatch(int[][] G)\n    {\n        // Code here\n        int M=G.length;\n        int N=G[0].length;\n        int ans = maxBPM(G,M,N);\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def try_kunh(self, u, G, used, mt):\n        # iterating over all the vertices v in G[u]\n        for v in range(len(G[0])):\n            # if there is an edge between u and v and v is not used\n            if (G[u][v] and used[v] == False):\n                # mark v as used\n                used[v] = True\n                # if v is not matched with any other vertex or\n                # recursively trying to match the vertex mt[v] with some other vertex\n                if (mt[v] < 0 or self.try_kunh(mt[v], G, used, mt)):\n                    mt[v] = u\n                    # return True once we find a matching for v\n                    return True\n        # return False if a matching for v cannot be found\n        return False\n\n    def maximumMatch(self, G):\n        m = len(G)\n        n = len(G[0])\n        N = max(n, m)\n        ans = 0\n        mt = [-1 for i in range(N)]\n        # iterate over all the vertices in G\n        for i in range(m):\n            used = [False for j in range(N)]\n            # try to match vertex i\n            if (self.try_kunh(i, G, used, mt)):\n                ans = ans + 1\n        # return the maximum number of matches\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution{\n    maximumMatch(G){\n        let mt = [];\n        let used = [];\n\n        function try_kunh(u, G){\n            for (let v = 0; v < G[0].length; v++){\n                if (G[u][v] && !used[v]){\n                    used[v] = true;\n                    if (mt[v] < 0 || try_kunh(mt[v], G)){\n                        mt[v] = u;\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        let m = G.length;\n        let n = G[0].length;\n        let N = Math.max(n, m);\n        let ans = 0;\n        mt = new Array(N).fill(-1);\n        \n        for(let i = 0; i < m; i++){\n            used = new Array(N).fill(false);\n            if(try_kunh(i, G))\n                ans++;\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}