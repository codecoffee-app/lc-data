{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703864,
            "title": "Maximum bitonic subarray sum",
            "titleSlug": "maximum-bitonic-subarray-sum5616",
            "content": "<p><span >Given an array <strong>arr[]</strong> of integers, the task is to find the maximum sum of a bitonic subarray. A bitonic subarray is one in which the elements first increase, may stay the same, and then decrease. A strictly increasing or strictly decreasing subarray is also considered a bitonic subarray.</span><br /><br /><span ><strong>Examples:</strong><br /></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [5, 3, 9, 2, 7, 6, 4]</span><br /><span ><strong>Output:</strong> 19</span><br /><span ><strong>Explanation: </strong>The subarray with the maximum sum is [2, 7, 6, 4] with a sum of 19.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [5, 4, 3, 2, 1, 10, 6]</span><br /><span ><strong>Output:</strong> 17</span><br /><span ><strong>Explanation: </strong>The subarray with the maximum sum is [10, 6], with a sum of 17.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)</span><br /><span ><strong>Expected Auxiliary Space:</strong> O(1)</span><br /><br /><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum sum of a bitonic subarray. A bitonic subarray is defined as a sequence of numbers that monotonically increase (or stay the same) and then monotonically decrease.  A strictly increasing or strictly decreasing subarray is also considered a bitonic subarray.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[5, 3, 9, 2, 7, 6, 4]",
                        "output": "19",
                        "explanation": "The bitonic subarray with the maximum sum is [2, 7, 6, 4]. The sum of this subarray is 2 + 7 + 6 + 4 = 19."
                    },
                    {
                        "input": "[5, 4, 3, 2, 1, 10, 6]",
                        "output": "17",
                        "explanation": "The bitonic subarray with the maximum sum is [10, 6]. The sum of this subarray is 10 + 6 = 16."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >It can be solved with constant memory. Indeed, since we are looking for contiguous subarrays, we can separate the initial array into bitonic chunks and compare their sums.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find maximum sum of a bitonic subarray\n    long long maxSumBitonicSubArr(vector<int>& arr) {\n        int n = arr.size();\n\n        long long maxSum = arr[0], currentSum = arr[0];\n        int flag = 0;\n\n        for (int i = 1; i < n; i++) {\n            // Check if current element is greater than previous\n            if (arr[i] > arr[i - 1]) {\n                // Start new subarray if previous was decreasing\n                if (flag == 2) {\n                    currentSum = arr[i - 1] + arr[i];\n                } else {\n                    // Continue increasing subarray\n                    currentSum += arr[i];\n                }\n                flag = 1;\n            } else if (arr[i] < arr[i - 1]) {\n                // Continue or start decreasing subarray\n                currentSum += arr[i];\n                flag = 2;\n            } else {\n                // Handle equal elements based on previous subarray type\n                if (flag == 2) {\n                    maxSum = max(maxSum, currentSum);\n                    currentSum = arr[i];\n                } else {\n                    currentSum += arr[i];\n                }\n            }\n            // Update maxSum for each step\n            maxSum = max(maxSum, currentSum);\n        }\n\n        return maxSum;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the maximum sum of a bitonic subarray in a given array of\n    // integers.\n    public long maxSumBitonicSubArr(int[] arr) {\n        int n = arr.length;\n\n        long maxSum = arr[0], currentSum = arr[0];\n        // flag indicates the direction of the subarray; 0: no direction, 1: increasing,\n        // 2: decreasing\n        int flag = 0;\n\n        for (int i = 1; i < n; i++) {\n            // Handle case when the current element is greater than the previous one.\n            if (arr[i] > arr[i - 1]) {\n                if (flag == 2) {\n                    // Start a new sum if the sequence was previously decreasing.\n                    currentSum = arr[i - 1] + arr[i];\n                } else {\n                    // Continue adding to sum if the sequence is increasing.\n                    currentSum += arr[i];\n                }\n                flag = 1;\n            } else if (arr[i] < arr[i - 1]) {\n                // Continue adding to sum if the sequence starts or continues to\n                // decrease.\n                currentSum += arr[i];\n                flag = 2;\n            } else {\n                // Handle equal elements based on the sequence type.\n                if (flag == 2) {\n                    maxSum = Math.max(maxSum, currentSum);\n                    currentSum = arr[i];\n                } else {\n                    currentSum += arr[i];\n                }\n            }\n            // Update the maximum sum found so far.\n            maxSum = Math.max(maxSum, currentSum);\n        }\n\n        return maxSum;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxSumBitonicSubArr(self, arr):\n        n = len(arr)\n\n        max_sum = arr[0]\n        current_sum = arr[0]\n        flag = 0  # 0: no direction, 1: increasing, 2: decreasing\n\n        for i in range(1, n):\n            # Handle case when current element is greater than the previous\n            if arr[i] > arr[i - 1]:\n                if flag == 2:\n                    # Start new sum if previous sequence was decreasing\n                    current_sum = arr[i - 1] + arr[i]\n                else:\n                    # Continue summing if increasing\n                    current_sum += arr[i]\n                flag = 1\n            elif arr[i] < arr[i - 1]:\n                # Continue or start decreasing sequence\n                current_sum += arr[i]\n                flag = 2\n            else:\n                # Handle equal elements\n                if flag == 2:\n                    max_sum = max(max_sum, current_sum)\n                    current_sum = arr[i]\n                else:\n                    current_sum += arr[i]\n            # Update max sum at each iteration\n            max_sum = max(max_sum, current_sum)\n\n        return max_sum\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxSumBitonicSubArr(arr) {\n        const n = arr.length;\n\n        let maxSum = arr[0];\n        let currentSum = arr[0];\n        let flag = 0; // 0: no direction, 1: increasing, 2: decreasing\n\n        for (let i = 1; i < n; i++) {\n            if (arr[i] > arr[i - 1]) {\n                if (flag === 2) {\n                    // Start new sum if previous trend was decreasing\n                    currentSum = arr[i - 1] + arr[i];\n                } else {\n                    // Continue adding if trend is increasing\n                    currentSum += arr[i];\n                }\n                flag = 1;\n            } else if (arr[i] < arr[i - 1]) {\n                // Continue or start a new decreasing sequence\n                currentSum += arr[i];\n                flag = 2;\n            } else {\n                // Handle cases when consecutive elements are equal\n                if (flag === 2) {\n                    maxSum = Math.max(maxSum, currentSum);\n                    currentSum = arr[i];\n                } else {\n                    currentSum += arr[i];\n                }\n            }\n            // Update the maximum sum found so far\n            maxSum = Math.max(maxSum, currentSum);\n        }\n\n        return maxSum;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}