{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703893,
            "title": "Maximum calorie",
            "titleSlug": "maximum-calorie0056",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>Arr</strong> of size <strong>N</strong>, each element of the array represents the amount of calories, the task is to calculate the maximum of amount of calories you can get remembering the fact&nbsp;that you cannot take three consecutive calories.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: N = 5, arr[] = {3, 2, 1, 10, 3}\n<strong>Output:</strong> 18\n<strong>Explanation</strong>: </span><span style=\"font-size:18px\">You can take</span> <span style=\"font-size:18px\">1st, 2nd, 4th \nand 5th calories (3 + 2 + 10 + 3) = 18</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 2, arr[] = {8, 15}\n<strong>Output: </strong>23\n<strong>Explanation</strong>: You can take</span> <span style=\"font-size:18px\">1st and 2nd\ncalories (8 + 15) = 23</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp; </strong></span><br />\n<span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Complete the function <strong><code>maxCalories</code>() </strong>which takes <strong>N</strong>&nbsp; and array <strong>Arr</strong> as input parameter and returns an integer value.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(<strong>N</strong>)<br />\n<strong>Expected Auxiliary Space:</strong> O(<strong>N</strong>)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup></span><br />\n<span style=\"font-size:18px\">1 &le; Arr[i] &le; 10<sup>4</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `Arr` of size `N`, where each element represents the amount of calories, calculate the maximum amount of calories you can obtain. The constraint is that you cannot select three consecutive elements from the array.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= Arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "N = 5, arr[] = {3, 2, 1, 10, 3}",
                        "output": "18",
                        "explanation": "The optimal selection is elements at indices 0, 1, 3, and 4 (3 + 2 + 10 + 3 = 18).  Selecting any other combination of elements, ensuring no three consecutive elements are included, will not yield a higher sum."
                    },
                    {
                        "input": "N = 2, arr[] = {8, 15}",
                        "output": "23",
                        "explanation": "The optimal selection is elements at indices 0 and 1 (8 + 15 = 23). Since N=2, all elements can be taken."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<pre>\nsum[i] : Stores result for subarray arr[0..i], i.e.,\n         maximum possible sum in subarray arr[0..i]\n         such that no three elements are consecutive.\n\nsum[0] = arr[0]\n\n// Note : All elements are positive\nsum[1] = arr[0] + arr[1]\n\n// We have three cases\n// 1) Exclude arr[2], i.e., sum[2] = sum[1]\n// 2) Exclude arr[1], i.e., sum[2] = sum[0] + arr[2]\n// 3) Exclude arr[0], i.e., sum[2] = arr[1] + arr[2] \nsum[2] = max(sum[1], arr[0] + arr[2], arr[1] + arr[2])\n\nIn general,\n// We have three cases\n// 1) Exclude arr[i],  i.e.,  sum[i] = sum[i-1]\n// 2) Exclude arr[i-1], i.e., sum[i] = sum[i-2] + arr[i]\n// 3) Exclude arr[i-2], i.e., sum[i-3] + arr[i] + arr[i-1] \nsum[i] = max(sum[i-1], sum[i-2] + arr[i],\n             sum[i-3] + arr[i] + arr[i-1])</pre>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\n\tpublic:\n\tint maxCalories(int arr[], int n)\n\t{\n\t\t\n\t\t// Stores result for subarray arr[0..i], i.e., \n\t    // maximum possible sum in subarray arr[0..i] \n\t    // such that no three elements are consecutive. \n\t    int sum[n]; \n\t  \n\t    // Base cases (process first three elements) \n\t    if (n >= 1) \n\t        sum[0] = arr[0]; \n\t  \n\t    if (n >= 2) \n\t        sum[1] = arr[0] + arr[1]; \n\t  \n\t    if (n > 2) \n\t        sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])); \n\t  \n\t    // Process rest of the elements \n\t    // We have three cases \n\t    // 1) Exclude arr[i], i.e., sum[i] = sum[i-1] \n\t    // 2) Exclude arr[i-1], i.e., sum[i] = sum[i-2] + arr[i] \n\t    // 3) Exclude arr[i-2], i.e., sum[i-3] + arr[i] + arr[i-1] \n\t    for (int i = 3; i < n; i++) \n\t        sum[i] = max(max(sum[i - 1], sum[i - 2] + arr[i]), \n\t                     arr[i] + arr[i - 1] + sum[i - 3]); \n\t  \n\t    return sum[n - 1]; \n\n\t}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}