{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705192,
            "title": "Maximum Collatz sequence length",
            "titleSlug": "maximum-collatz-sequence-length5849",
            "content": "<p><span style=\"font-size:18px\">Starting with any positive integer&nbsp;<strong>N</strong>, we define the Collatz sequence corresponding to N as the numbers formed by the following operations:<br />\r\nIf&nbsp;<var>N&nbsp;</var>is even,<var>&nbsp;N</var>&rarr;&nbsp;<var>N</var>/2<br />\r\nif&nbsp;<var>N&nbsp;</var>is odd, &nbsp;&nbsp;<var>N</var>&rarr; 3<var>N</var>+ 1<br />\r\nIt is conjectured but not yet proven that no matter which positive integer we start with; we always end up with 1.<br />\r\nFor example, 10 &rarr; 5&nbsp; &rarr; 16&nbsp; &rarr; 8&nbsp; &rarr; 4&nbsp; &rarr; 2&nbsp; &rarr; 1. You have to give the maximum collatz sequence length among all the numbers from 1 to N(both included).</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 1\r\n<strong>Output:</strong> 1\r\n<strong>Explaination:</strong> Here N can have only one \r\nvalue 1.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 3\r\n<strong>Output:</strong> 8\r\n<strong>Explaination:</strong> For N= 3 we need to check \r\nsequence length when sequence starts with \r\n1, 2, and 3.\r\nwhen sequence starts with 1, it&#39;s : 1 \r\nlength = 1\r\nwhen sequence starts with 2, it&#39;s : 2-&gt;1, \r\nlength = 2\r\nwhen sequence starts with 3, it&#39;s : \r\n3-&gt;10-&gt;5-&gt;16-&gt;8-&gt;4-&gt;2-&gt;1, length = 8.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function&nbsp;<strong>collatzLength()</strong>which takes N as input parameter and returns the maximum collatz sequence length.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(N)<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt; N &lt; 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer N, find the maximum Collatz sequence length among all numbers from 1 to N (inclusive). The Collatz sequence for a number N is generated as follows:\n\n- If N is even, N becomes N / 2.\n- If N is odd, N becomes 3N + 1.\n\nThe Collatz conjecture states that starting with any positive integer, the sequence will eventually reach 1. This conjecture is unproven.",
                "constraints": [
                    "1 < N < 10^6"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "For N = 1, the only sequence is 1, which has length 1."
                    },
                    {
                        "input": "3",
                        "output": "8",
                        "explanation": "For N = 3, we examine the Collatz sequence lengths for 1, 2, and 3:\n- Starting with 1: 1 (length 1)\n- Starting with 2: 2 -> 1 (length 2)\n- Starting with 3: 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1 (length 8)\nThe maximum length is 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Derive the collatz sequenc length for all numbers from 1 to N and find the maximum length.</span></p>",
            "<p><span style=\"font-size:18px\">Use previously calculated values for time optimization.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the Collatz length of a number\n    int collatzLength(int N){\n        int a[N+2];\n        // iterate through numbers from 1 to N\n        for(int i = 1; i <= N; i++){\n            int j = i;\n            int counting = 1;\n            // calculate the Collatz sequence for each number\n            while(j > 1){\n                // if the number is even, divide by 2\n                if(j%2==0)\n                    j/=2;\n                // if the number is odd, multiply by 3 and add 1\n                else if(j%2 == 1)\n                    j = 3*j + 1;\n                // check if a smaller number in the sequence has already been calculated\n                if(j<i){\n                   counting += a[j];\n                   j = 1; // exit the loop\n                }\n                else counting++;\n            }\n            // store the Collatz length for the current number\n            a[i]=counting;\n       }\n       // find the maximum Collatz length among all numbers from 1 to N\n       for(int i = 2; i <= N; i++){\n            if(a[i] < a[i-1])\n                a[i]=a[i-1];\n       }\n       // return the Collatz length of N\n       return a[N];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Function to calculate the Collatz length of a number\n    public int collatzLength(int N)\n    {\n        int[] a = new int[N + 2];\n        // iterate through numbers from 1 to N\n        for (int i = 1; i <= N; i++)\n        {\n            int j = i;\n            int counting = 1;\n            // calculate the Collatz sequence for each number\n            while (j > 1)\n            {\n                // if the number is even, divide by 2\n                if (j % 2 == 0)\n                    j /= 2;\n                // if the number is odd, multiply by 3 and add 1\n                else if (j % 2 == 1)\n                    j = 3 * j + 1;\n                // check if a smaller number in the sequence has already been calculated\n                if (j < i)\n                {\n                    counting += a[j];\n                    j = 1; // exit the loop\n                }\n                else counting++;\n            }\n            // store the Collatz length for the current number\n            a[i] = counting;\n        }\n        // find the maximum Collatz length among all numbers from 1 to N\n        for (int i = 2; i <= N; i++)\n        {\n            if (a[i] < a[i - 1])\n                a[i] = a[i - 1];\n        }\n        // return the Collatz length of N\n        return a[N];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}