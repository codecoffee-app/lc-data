{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711971,
            "title": "Maximum Connected group",
            "titleSlug": "maximum-connected-group",
            "content": "<p><span style=\"font-size: 18px;\">You are given a square&nbsp;binary grid. A grid is considered binary if every value in the grid is either&nbsp;<strong>1 or 0.&nbsp;</strong></span><span style=\"font-size: 18px;\">You can change&nbsp;<strong>at most one</strong>&nbsp;cell in the grid from&nbsp;<strong>0 to 1</strong>.&nbsp;</span><span style=\"font-size: 18px;\">You need to find the largest group of connected&nbsp;&nbsp;<strong>1's</strong>.&nbsp;</span><span style=\"font-size: 18px;\">Two cells are said to be connected if both are&nbsp;<strong>adjacent</strong>(top, bottom, left, right)&nbsp;to each other and both have the same value.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">grid = [1, 1]\n\\t\\t [0, 1]\n<strong>Output</strong>: 4\n<strong>Explanation</strong>: By changing cell (2,1), we can obtain a connected group of 4 1's\n[1, 1]\n[<strong>1,</strong> 1]</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: grid = [1, 0, 1]<br /></span><span style=\"font-size: 18px;\">\\t\\t [1, 0, 1]\n\\t\\t [1, 0, 1]\n<strong>Output</strong>: 7\n<strong>Explanation</strong>: By changing cell (3,2), we can obtain a connected group of 7 1's\n[1, 0, 1]<br />[1, 0, 1]\n[1, <strong>1,</strong> 1]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong>: O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space</strong>: O(</span><span style=\"font-size: 18px;\">n</span><sup>2</sup><span style=\"font-size: 18px;\">)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong>:<br />1 &lt;= size of the grid&lt;= 500<br />0 &lt;= grid[i][j] &lt;= 1<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square binary grid (a grid where each cell contains either 0 or 1), find the largest connected group of 1s after changing at most one 0 to a 1. Two cells are considered connected if they are adjacent (top, bottom, left, or right) and have the same value.",
                "constraints": [
                    "1 <= size of the grid <= 500",
                    "0 <= grid[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[[1, 1], [0, 1]]",
                        "output": "4",
                        "explanation": "Changing the cell at (1, 0) from 0 to 1 creates a connected group of four 1s: [[1, 1], [1, 1]]."
                    },
                    {
                        "input": "[[1, 0, 1], [1, 0, 1], [1, 0, 1]]",
                        "output": "7",
                        "explanation": "Changing the cell at (2, 1) from 0 to 1 creates a connected group of seven 1s: [[1, 0, 1], [1, 0, 1], [1, 1, 1]]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use depth-first search (DFS) to find and measure connected components of '1's in a grid. It then evaluates each '0' cell to see if converting it to '1' can merge multiple components to maximize the connected area.</p>"
        ],
        "relatedTopics": [
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int dfs(vector<vector<int>>& grid, int i, int j, int index) {\n        int n = grid.size();\n        if (i < 0 || i >= n || j < 0 || j >= n || grid[i][j] != 1)\n            return 0;\n        grid[i][j] = index;\n        int count = dfs(grid, i + 1, j, index) + dfs(grid, i - 1, j, index) +\n                    dfs(grid, i, j + 1, index) + dfs(grid, i, j - 1, index);\n        return count + 1;\n    }\n\n    void findNeighbours(vector<vector<int>>& grid, int i, int j, set<int>& s) {\n        // finding adjacent island groups\n        int n = grid.size();\n        if (i > 0)\n            s.insert(grid[i - 1][j]);\n        if (j > 0)\n            s.insert(grid[i][j - 1]);\n        if (i < n - 1)\n            s.insert(grid[i + 1][j]);\n        if (j < n - 1)\n            s.insert(grid[i][j + 1]);\n    }\n\n    int MaxConnection(vector<vector<int>>& grid) {\n        int n = grid.size(), res = 0, index = 2, count;\n        map<int, int> area;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1) {\n                    area[index] = dfs(grid, i, j, index);\n                    res = max(res, area[index++]);\n                    // if the grid is one large island, we would find the maximum size\n                    // island here\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 0) {\n                    set<int> s;\n                    findNeighbours(grid, i, j, s);\n                    count = 1; // to account for the converted island\n                    for (int i : s)\n                        count += area[i]; // count the number of islands in the adjacent\n                                          // groups\n                    res = max(res, count);\n                }\n            }\n        }\n\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Arrays for maintaining the changes in rows and columns\n    int[] dr = new int[] {-1, 0, 1, 0};\n    int[] dc = new int[] {0, -1, 0, 1};\n    int[][] grid;\n    int N;\n\n    // Method to find the maximum connected area in the grid\n    public int MaxConnection(int[][] grid) {\n        this.grid = grid;\n        N = grid.length;\n\n        int index = 2;\n        // Array to store the area of each connected component\n        int[] area = new int[N * N + 2];\n        for (int r = 0; r < N; ++r) {\n            for (int c = 0; c < N; ++c) {\n                if (grid[r][c] == 1) {\n                    // Use DFS to find the connected components and update their area\n                    area[index] = dfs(r, c, index++);\n                }\n            }\n        }\n\n        int ans = 0;\n        for (int x : area) {\n            ans = Math.max(ans, x);\n        }\n\n        // Iterate through each cell in the grid\n        for (int r = 0; r < N; ++r) {\n            for (int c = 0; c < N; ++c) {\n                if (grid[r][c] == 0) {\n                    // HashSet to store the unique connected components adjacent to the\n                    // current cell\n                    Set<Integer> seen = new HashSet();\n                    // Iterate through the neighbors of the current cell\n                    for (Integer move : neighbors(r, c)) {\n                        if (grid[move / N][move % N] > 1) {\n                            seen.add(grid[move / N][move % N]);\n                        }\n                    }\n\n                    int bns = 1;\n                    for (int i : seen) {\n                        // Calculate the total area by adding the area of all adjacent\n                        // connected components\n                        bns += area[i];\n                    }\n                    ans = Math.max(ans, bns);\n                }\n            }\n        }\n\n        return ans;\n    }\n\n    // DFS method to find the connected components and update their area\n    public int dfs(int r, int c, int index) {\n        int ans = 1;\n        grid[r][c] = index;\n        // Iterate through the neighbors of the current cell\n        for (Integer move : neighbors(r, c)) {\n            // If the neighbor is part of a connected component, update its area\n            if (grid[move / N][move % N] == 1) {\n                grid[move / N][move % N] = index;\n                ans += dfs(move / N, move % N, index);\n            }\n        }\n\n        return ans;\n    }\n\n    // Method to get the neighbors of a cell\n    public List<Integer> neighbors(int r, int c) {\n        List<Integer> ans = new ArrayList();\n        // Iterate through the four possible directions\n        for (int k = 0; k < 4; ++k) {\n            int nr = r + dr[k];\n            int nc = c + dc[k];\n            // Check if the neighbor is within the grid boundaries\n            if (0 <= nr && nr < N && 0 <= nc && nc < N) {\n                ans.add(nr * N + nc);\n            }\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from typing import List, Set\nfrom collections import defaultdict\n\n\nclass Solution:\n    #Function to perform depth-first search on grid.\n    def dfs(self, grid: List[List[int]], i: int, j: int, index: int) -> int:\n        n = len(grid)\n        if i < 0 or i >= n or j < 0 or j >= n or grid[i][j] != 1:\n            return 0\n        grid[i][j] = index\n        count = self.dfs(grid, i + 1, j, index) + self.dfs(grid, i - 1, j, index) + \\\n                self.dfs(grid, i, j + 1, index) + self.dfs(grid, i, j - 1, index)\n        return count + 1\n\n    #Function to find neighbors of a cell in the grid.\n    def findNeighbours(self, grid: List[List[int]], i: int, j: int,\n                       s: Set[int]) -> None:\n        n = len(grid)\n        if i > 0:\n            s.add(grid[i - 1][j])\n        if j > 0:\n            s.add(grid[i][j - 1])\n        if i < n - 1:\n            s.add(grid[i + 1][j])\n        if j < n - 1:\n            s.add(grid[i][j + 1])\n\n    #Function to find maximum connections in the grid.\n    def MaxConnection(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        res = 0\n        index = 2\n        area = defaultdict(int)\n\n        #Iterating over the grid to perform dfs on islands.\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    area[index] = self.dfs(grid, i, j, index)\n                    res = max(res, area[index])\n                    index += 1\n\n        #Iterating over the grid to find maximum connections.\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    s = set()\n                    self.findNeighbours(grid, i, j, s)\n                    count = 1  # to account for the converted island\n                    for val in s:\n                        count += area[val]\n                    res = max(res, count)\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number} n\n     * @param {number[][]} grid\n     * @returns {number}\n     */\n    MaxConnection(n, grid) {\n        // Initialize seen array to keep track of visited cells\n        let seen = [...Array(grid.length) ].map(r => new Array(grid[0].length).fill(0));\n        let islandmap = {'0' : 0}; // Zero is for handling errors in later stage\n        let id = 0;\n        let result = 0;\n\n        // DFS function to mark the cells of an island\n        function dfs(row, col, id) {\n            if (!isvalid(row, col) || seen[row][col] != 0 || grid[row][col] != 1)\n                return;\n            seen[row][col] = id;\n            if (!islandmap[id]) islandmap[id] = 0;\n            islandmap[id]++;\n            for (let [r, c] of [[ row + 1, col ], [ row, col + 1 ], [ row - 1, col ],\n                                [ row, col - 1 ]]) {\n                dfs(r, c, id);\n            }\n        }\n\n        // Function to check if a cell is within grid bounds\n        function isvalid(row, col) {\n            return row >= 0 && row < grid.length && col >= 0 && col < grid[0].length;\n        }\n\n        // First pass: identify all islands and mark them with unique ids\n        for (let row = 0; row < grid.length; row++) {\n            for (let col = 0; col < grid[0].length; col++) {\n                if (grid[row][col] == 1 && seen[row][col] == 0) {\n                    id++;\n                    dfs(row, col, id);\n                }\n            }\n        }\n\n        // Second pass: check each zero cell to find the maximum connected island size\n        for (let row = 0; row < grid.length; row++) {\n            for (let col = 0; col < grid[0].length; col++) {\n                if (grid[row][col] == 0) {\n                    let left = isvalid(row, col - 1)\n                                   ? seen[row][col - 1]\n                                   : 0; // setting to zero, since invalid value doesn't\n                                        // have any island!\n                    let up = isvalid(row - 1, col) ? seen[row - 1][col] : 0;\n                    let right = isvalid(row, col + 1) ? seen[row][col + 1] : 0;\n                    let down = isvalid(row + 1, col) ? seen[row + 1][col] : 0;\n\n                    let ids = new Set([ left, up, right, down ]);\n                    let sum = 0;\n                    for (let _id of ids) sum += islandmap[_id];\n                    result = Math.max(result, sum + 1);\n                }\n            }\n        }\n\n        // If there are no zeros, then we already have a large island with id \"1\".\n        return result !== 0 ? result : islandmap[1];\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}