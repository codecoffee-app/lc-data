{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712233,
            "title": "Maximum Depth Of Binary Tree",
            "titleSlug": "maximum-depth-of-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree, find its <strong>maximum</strong>&nbsp;<strong>depth</strong>.<br />A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />&nbsp;root&nbsp; --&gt;&nbsp; &nbsp; &nbsp;1<br />  &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp; /&nbsp;&nbsp; \\<br />  &nbsp; &nbsp; &nbsp; &nbsp;   3&nbsp; &nbsp;  2<br />  &nbsp; &nbsp; &nbsp; &nbsp;  /<br />  &nbsp; &nbsp; &nbsp; &nbsp; 4 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><br /><strong><span style=\"font-size: 18px;\">Output:</span></strong><span style=\"font-size: 18px;\"> 3<br /><strong>Explanation:</strong><br />Maximum depth is between nodes 1 and 4, which is 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n root --&gt;    10\n\\t     /    \\\n\\t    20    30\n\\t     \\\\t\\  \n\\t     40     60\n\\t\\t\\t/\n\\t\\t     2 </span>\n<strong><span style=\"font-size: 18px;\">Output: </span></strong><span style=\"font-size: 18px;\">4\n<strong>Explanation:</strong>\nMaximum depth is between nodes 10 and 2, which is 4\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task: &nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong>maxDepth()</strong> which takes the root node as an input parameter and returns the maximum depth.</span><br />&nbsp;<br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(N)<br /><strong>Expected Auxiliary Space: </strong>O(height of the tree)</span><br />&nbsp;<br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10^5</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find its maximum depth. The maximum depth of a binary tree is the number of nodes along the longest path from the root node down to the farthest leaf node.",
                "constraints": [
                    "1 <= N <= 10^5, where N is the number of nodes in the tree."
                ],
                "testcases": [
                    {
                        "input": "root --> 1\n        /  \\\n       3    2\n      /",
                        "output": "3",
                        "explanation": "The maximum depth is 3, corresponding to the path from node 1 to node 4."
                    },
                    {
                        "input": "root --> 10\n       /  \\\n      20   30\n     /   /\n    40  60\n   / \n  2",
                        "output": "4",
                        "explanation": "The maximum depth is 4, corresponding to the path from node 10 to node 2 (at depth 4)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-family: Arial; font-size: 14pt; white-space-collapse: preserve; background-color: #ffffff;\">Try to think of using a depth-first search (DFS) approach to solve this problem.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "facebook"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n  public:\r\n    int maxDepth(Node *root) {\r\n        if (root == NULL) return 0;\r\n    \r\n        if (root->left == NULL and root->right == NULL) return 1;\r\n        // no child nodes indicate base case\r\n    \r\n        int left, right;\r\n        if (root->left != NULL) left = maxDepth(root->left);\r\n        // finding depth of left sub tree\r\n        else\r\n            left = INT_MIN;\r\n    \r\n        if (root->right != NULL) right = maxDepth(root->right);\r\n        // finding depth of right sub tree\r\n        else\r\n            right = INT_MIN;\r\n    \r\n        return 1 + max(left, right);\r\n    }\r\n\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n/*\r\n// A Binary Tree node\r\nclass Node\r\n{\r\n    int data;\r\n    Node left, right;\r\n\r\n    Node(int item)\r\n    {\r\n        data = item;\r\n        left = right = null;\r\n    }\r\n}\r\n*/\r\nclass Solution {\r\n  public static int maxDepth(Node root) {\r\n    // code here\r\n      // Base Condition\r\n        if(root == null) return 0;\r\n        // Hypothesis\r\n        int left = maxDepth(root.left);\r\n        int right = maxDepth(root.right);\r\n        // Induction\r\n        return Math.max(left, right) + 1;\r\n  }\r\n}\r\n     \r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "import sys\r\nsys.setrecursionlimit(100000)\r\n\r\n#Node class to represent a binary tree node.\r\nclass Node:\r\n    def __init__(self, val):\r\n        self.right = None\r\n        self.data = val\r\n        self.left = None\r\n\r\nclass Solution:\r\n   \r\n    #Recursive function to find the maximum depth of the binary tree.\r\n    def maxDepth(self,root):\r\n        if not root:\r\n            return 0\r\n        else:\r\n            return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {Node} root\n * @returns {number}\n*/\nclass Solution {\n    //Function to find the maximum depth of the binary tree.\n    maxDepth(root) {\n        if (!root) {\n            return 0;\n        } else {\n            return 1 + Math.max(this.maxDepth(root.left), this.maxDepth(root.right));\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}