{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703264,
            "title": "Maximum difference Indexes",
            "titleSlug": "maximum-difference-10429",
            "content": "<p><span >Given an array <strong>arr[]</strong> of integers, find the maximum possible gap. The gap is defined as the difference between the indices of an element's first and last appearance in the array. If an element appears only once, its gap is 0.</span></p>\n<p><span ><strong>Examples</strong>:</span></p>\n<pre><span ><strong>Input:</strong> arr[] = [2, 1, 3, 4, 2, 1, 5, 1, 7]</span><br /><span ><strong>Output:</strong> 6</span><br /><span ><strong>Explanation:</strong> For the array with 0-based indexing, the number 1's first appearance is at index 1 and its last appearance is at index 7. The gap is 7 - 1 = 6, which is the maximum gap in this array.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [5, 3, 4, 3, 5, 2, 5, 3]</span><br /><span ><strong>Output:</strong> 6</span><br /><span ><strong>Explanation:</strong> For the array with 0-based indexing, the number 3's first appearance is at index 1 and its last appearance is at index 7. The gap is 7 - 1 = 6, which is the maximum gap in this array.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)</span><br /><span ><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span ><strong>Constraints:<br /></strong></span><span >1 &le; arr.size() &le; 10<sup>6</sup></span><br /><span >-10<sup>5</sup> &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum difference between the indices of an element's first and last occurrence. If an element appears only once, its gap is 0.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-10^5 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2, 1, 3, 4, 2, 1, 5, 1, 7]",
                        "output": "6",
                        "explanation": "The element '1' first appears at index 1 and last appears at index 7. The gap is 7 - 1 = 6, which is the largest gap found within the array."
                    },
                    {
                        "input": "[5, 3, 4, 3, 5, 2, 5, 3]",
                        "output": "6",
                        "explanation": "The element '3' first appears at index 1 and last appears at index 7. The gap is 7 - 1 = 6, which is the largest gap found within the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Store the first index of the element, as that element occurs again get the difference between indices and return the maximum difference.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxGap(vector<int>& arr) {\n        unordered_map<int, pair<int, int>> indices;\n\n        // Track the first and last occurrences of each element\n        for (int i = 0; i < arr.size(); i++) {\n            if (indices.find(arr[i]) == indices.end()) {\n                indices[arr[i]] = {i, i};\n            } else {\n                indices[arr[i]].second = i;\n            }\n        }\n\n        // Calculate the maximum gap\n        int maxGap = 0;\n        for (const auto& entry : indices) {\n            int gap = entry.second.second - entry.second.first;\n            maxGap = max(maxGap, gap);\n        }\n\n        return maxGap;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "import java.util.*;\n\nclass Solution {\n    public int maxGap(List<Integer> arr) {\n        Map<Integer, int[]> indices = new HashMap<>();\n\n        // Track the first and last occurrences of each element\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (!indices.containsKey(num)) {\n                indices.put(num, new int[] {i, i});\n            } else {\n                indices.get(num)[1] = i;\n            }\n        }\n\n        // Calculate the maximum gap\n        int maxGap = 0;\n        for (int[] indexPair : indices.values()) {\n            int gap = indexPair[1] - indexPair[0];\n            maxGap = Math.max(maxGap, gap);\n        }\n\n        return maxGap;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxGap(self, arr):\n        firstIndex = {}\n        lastIndex = {}\n        maxGap = 0\n\n        for i, num in enumerate(arr):\n            if num not in firstIndex:\n                firstIndex[num] = i\n            lastIndex[num] = i\n\n        for num in firstIndex:\n            gap = lastIndex[num] - firstIndex[num]\n            maxGap = max(maxGap, gap)\n\n        return maxGap\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxGap(arr) {\n        const indices = new Map();\n\n        // Track the first and last occurrences of each element\n        arr.forEach((num, i) => {\n            if (!indices.has(num)) {\n                indices.set(num, [ i, i ]);\n            } else {\n                indices.get(num)[1] = i;\n            }\n        });\n\n        // Calculate the maximum gap\n        let maxGap = 0;\n        indices.forEach(([ first, last ]) => {\n            const gap = last - first;\n            maxGap = Math.max(maxGap, gap);\n        });\n\n        return maxGap;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}