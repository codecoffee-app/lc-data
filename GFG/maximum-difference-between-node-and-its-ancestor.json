{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700227,
            "title": "Maximum difference between node and its ancestor",
            "titleSlug": "maximum-difference-between-node-and-its-ancestor",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree, you need to find the maximum value which you can get by subtracting the value of node B from the value of node A, where A and B are two nodes of the binary tree and A is an <strong>ancestor</strong> of B.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>&nbsp;   5\n / &nbsp; &nbsp;\\\n2 &nbsp; &nbsp;  1\n<strong>Output: </strong>4<strong>\nExplanation:</strong>The maximum difference we can get is 4, which is bewteen 5 and 1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>&nbsp;     1\n &nbsp;&nbsp; / &nbsp;  \\\n &nbsp; 2&nbsp; &nbsp; &nbsp; 3\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;\\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 7\n<strong>Output: </strong>-1<strong>\nExplanation:</strong>The maximum difference we can get is -1, which is between 1 and 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(H).<br />Note: H is the height of the tree.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= Number of edges &lt;= 10<sup>4</sup><br />0 &lt;= Data of a node &lt;= 10<sup>5</sup></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>The <strong>Input/Output</strong> format and <strong>Examples</strong> given are used for the system's internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from the stdin/console. The task is to complete the function specified, and not to write the full code.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the maximum difference between a node A and one of its descendants, node B, where the difference is calculated as A - B.",
                "constraints": [
                    "2 <= Number of edges <= 10^4",
                    "0 <= Data of a node <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "     5\n  /   \\\n 2     1",
                        "output": "4",
                        "explanation": "The maximum difference is 4, achieved by subtracting the value of node 1 from the value of node 5 (5 - 1 = 4)."
                    },
                    {
                        "input": "      1\n    /   \\\n   2     3\n         \\\n          7",
                        "output": "-1",
                        "explanation": "The maximum difference is -1, achieved by subtracting the value of node 2 from the value of node 1 (1 - 2 = -1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Function to find the maximum difference.\r\nint maxDiffUtil(Node *t,int *res)\r\n{\r\n    //returning Maximum int value if node is null.\r\n    if (t == NULL) \r\n        return INT_MAX; \r\n  \r\n    //if there are no child nodes then we just return data at current node.\r\n    if (t->left == NULL && t->right == NULL) \r\n        return t->data; \r\n  \r\n    //recursively calling for left and right subtrees and \r\n    //choosing their minimum.\r\n    int val = min(maxDiffUtil(t->left, res), \r\n                  maxDiffUtil(t->right, res)); \r\n  \r\n    //updating res if (node value - min value from subtrees) is bigger than res.\r\n    *res = max(*res, t->data - val); \r\n  \r\n    //returning minimum value got so far.\r\n    return min(val, t->data);\r\n}\r\n\r\n//Function to return the maximum difference between any node and its ancestor.\r\nint maxDiff(Node *root)\r\n{\r\n    int res=INT_MIN;\r\n    maxDiffUtil(root,&res);\r\n    //returning the result.\r\n    return res;\r\n}\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\nclass Tree\r\n{\r\n   class Res \r\n    {\r\n        int r = Integer.MIN_VALUE;\r\n    }\r\n    \r\n    //Function to find the maximum difference.\r\n    int maxDiffUtil(Node t,Res res)\r\n    {\r\n        //returning Maximum int value if node is null.\r\n        if (t == null) \r\n            return Integer.MAX_VALUE; \r\n           \r\n        //if there are no child nodes then we just return data at current node.\r\n        if (t.left == null && t.right == null) \r\n            return t.data; \r\n   \r\n        //recursively calling for left and right subtrees and \r\n        //choosing their minimum.\r\n        int val = Math.min(maxDiffUtil(t.left, res), \r\n                maxDiffUtil(t.right, res)); \r\n   \r\n        //updating res if (node value - min value from subtrees) \r\n        //is bigger than res.\r\n        res.r = Math.max(res.r, t.data - val); \r\n   \r\n        //returning minimum value got so far.\r\n        return Math.min(val, t.data); \r\n    }\r\n\r\n    //Function to return the maximum difference between any \r\n    //node and its ancestor.\r\n    int maxDiff(Node root)\r\n    {\r\n        Res res = new Res();\r\n        maxDiffUtil(root, res);\r\n        //returning the result.\r\n        return res.r;\r\n    }\r\n}\r\n\r\n\r\n\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n_MIN = -2147483648\r\n_MAX = 2147483648\r\n\r\n#Function to find the maximum difference.\r\ndef maxDiffUtil(t, res):\r\n    \r\n    #returning Maximum int value if node is null.\r\n    if (t == None):\r\n        return _MAX, res\r\n  \r\n    #if there are no child nodes then we just return data at current node.\r\n    if (t.left == None and t.right == None): \r\n        return t.data, res \r\n  \r\n    #recursively calling for left and right subtrees and \r\n    #choosing their minimum.\r\n    a, res = maxDiffUtil(t.left, res) \r\n    b, res = maxDiffUtil(t.right, res) \r\n    val = min(a, b) \r\n  \r\n    #updating res if (node value - min value from subtrees) is bigger than res.\r\n    res = max(res, t.data - val) \r\n      \r\n    #returning minimum value got so far.\r\n    return min(val, t.data), res\r\n\r\n\r\n#Function to return the maximum difference between any node and its ancestor.\r\ndef maxDiff(root):\r\n    \r\n    res = _MIN \r\n    x, res = maxDiffUtil(root, res) \r\n    #returning the result.\r\n    return res \r\n\r\n\r\n\r\n\r\n\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\r\n\r\n\r\nclass Solution\r\n{\r\n    //Function to find the maximum difference.\r\n    int maxDiffUtil(Node t,ref int res)\r\n    {\r\n        //returning Maximum int value if node is null.\r\n        if (t == null) \r\n            return int.MaxValue; \r\n      \r\n        //if there are no child nodes then we just return data at current node.\r\n        if (t.left == null && t.right == null) \r\n            return t.data; \r\n      \r\n        //recursively calling for left and right subtrees and \r\n        //choosing their minimum.\r\n        int val = Math.Min(maxDiffUtil(t.left,ref res), \r\n                      maxDiffUtil(t.right,ref res)); \r\n      \r\n        //updating res if (node value - min value from subtrees) is bigger than res.\r\n        res = Math.Max(res, t.data - val); \r\n      \r\n        //returning minimum value got so far.\r\n        return Math.Min(val, t.data);\r\n    }\r\n    //Function to return the maximum difference between any node and its ancestor.\r\n    public int maxDiff(Node root)\r\n    {\r\n        int res=int.MinValue;\r\n        maxDiffUtil(root,ref res);\r\n        //returning the result.\r\n        return res;\r\n    }\r\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}