{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710013,
            "title": "Maximum difference between pair in a matrix",
            "titleSlug": "maximum-difference-between-pair-in-a-matrix",
            "content": "<p><span style=\"font-size: 18px;\">Given an <strong>n x n</strong> matrix, <strong>mat[n][n]</strong> of integers. The task is to&nbsp;find the maximum value of <strong>mat(c, d)- mat(a, b)</strong> over all choices of indexes such that both <strong>c &gt; a</strong> and <strong>d &gt; b</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>mat[N][N] = {{ 1, 2, -1, -4, -20 },\n\\t\\t {<strong> -8</strong>, -3, 4, 2, 1 }, \n\\t\\t { 3, 8, 6, 1, 3 },\n\\t\\t { -4, -1, 1, 7, -6 },\n\\t\\t { 0, -4, <strong>10</strong>, -5, 1 }};\n<strong>Output: </strong>18\n<strong>Explanation:</strong> The maximum value is 18 as mat[4][2] - mat[1][0] = 18 has maximum difference.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>findMaxValue</strong><strong>()</strong>&nbsp;which takes a&nbsp;matrix mat&nbsp;and returns an integer as output.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(n<sup>2</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n&lt;= 10<sup>3</sup><br />-10<sup>3</sup>&lt;= mat[i][j] &lt;=10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an n x n matrix, mat[n][n] of integers, find the maximum value of mat[c, d] - mat[a, b] over all choices of indices such that c > a and d > b.",
                "constraints": [
                    "1 <= n <= 10^3",
                    "-10^3 <= mat[i][j] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "mat[N][N] = {{ 1, 2, -1, -4, -20 }, { -8, -3, 4, 2, 1 }, { 3, 8, 6, 1, 3 }, { -4, -1, 1, 7, -6 }, { 0, -4, 10, -5, 1 }};",
                        "output": "18",
                        "explanation": "The maximum difference is 18, achieved by subtracting mat[1][0] (-8) from mat[4][2] (10)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A&nbsp;<strong>simple solution</strong>&nbsp;would be to apply Brute-Force. For all values mat(a, b) in the matrix, we find mat(c, d) that has maximum value such that c &gt; a and d &gt; b and keeps on updating maximum value found so far. We finally return the maximum value.</span></p>\n\n<p><span style=\"font-size:18px\">How about pre-processing the values with some auxiliary matrix?</span></p>",
            "<p><span style=\"font-size:18px\">We pre-process the matrix such that index(i, j) stores max of elements in matrix from (i, j) to (N-1, N-1) and in the process keeps on updating maximum value found so far. We finally return the maximum value.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\npublic:\r\n    int findMaxValue(vector<vector<int>>&mat, int N)\r\n{\r\n    //stores maximum value\r\n    int maxValue = INT_MIN;\r\n \r\n    // maxArr[i][j] stores max of elements in matrix\r\n    // from (i, j) to (N-1, N-1)\r\n    int maxArr[N][N];\r\n \r\n    // last element of maxArr will be same's as of\r\n    // the input matrix\r\n    maxArr[N-1][N-1] = mat[N-1][N-1];\r\n \r\n    // preprocess last row\r\n    int maxv = mat[N-1][N-1];  // Initialize max\r\n    for (int j = N - 2; j >= 0; j--)\r\n    {\r\n        if (mat[N-1][j] > maxv)\r\n            maxv = mat[N - 1][j];\r\n        maxArr[N-1][j] = maxv;\r\n    }\r\n \r\n    // preprocess last column\r\n    maxv = mat[N - 1][N - 1];  // Initialize max\r\n    for (int i = N - 2; i >= 0; i--)\r\n    {\r\n        if (mat[i][N - 1] > maxv)\r\n            maxv = mat[i][N - 1];\r\n        maxArr[i][N - 1] = maxv;\r\n    }\r\n \r\n    // preprocess rest of the matrix from bottom\r\n    for (int i = N-2; i >= 0; i--)\r\n    {\r\n        for (int j = N-2; j >= 0; j--)\r\n        {\r\n            // Update maxValue\r\n            if (maxArr[i+1][j+1] - mat[i][j] >\r\n                                            maxValue)\r\n                maxValue = maxArr[i + 1][j + 1] - mat[i][j];\r\n \r\n            // set maxArr (i, j)\r\n            maxArr[i][j] = max(mat[i][j],\r\n                               max(maxArr[i][j + 1],\r\n                                   maxArr[i + 1][j]) );\r\n        }\r\n    }\r\n \r\n    return maxValue;\r\n}\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}