{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703404,
            "title": "Maximum difference of zeros and ones in binary string",
            "titleSlug": "maximum-difference-of-zeros-and-ones-in-binary-string4111",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary string <strong>S</strong>&nbsp;consisting of 0s and 1s. The task is to find the <strong>maximum difference</strong> of the number of <strong>0s</strong> and the number of <strong>1s</strong> (number of 0s &ndash; number of 1s) in the&nbsp;substrings of a string.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> In the case of all 1s, the answer will be -1. </span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong> : S = \"11000010001\" \n<strong>Output</strong> : 6 \n<strong>Explanatio:</strong> From index 2 to index 9, \nthere are 7 0s and 1 1s, so number \nof 0s - number of 1s is 6. </span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> S = \"111111\"</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> -1\n<strong>Explanation:</strong> S contains 1s only </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your task:</strong><br />You do not need to read any input or print anything. The task is to complete the function <strong>maxSubstring()</strong>, which takes a string as input and returns an integer. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(|S|)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; |S| &le; 10<sup>5</sup><br />S contains 0s and 1s only</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string **S** consisting of 0s and 1s, find the maximum difference between the number of 0s and the number of 1s (number of 0s - number of 1s) found in any substring of **S**. If the string contains only 1s, return -1.",
                "constraints": [
                    "1 <= |S| <= 10^5",
                    "S contains 0s and 1s only"
                ],
                "testcases": [
                    {
                        "input": "11000010001",
                        "output": "6",
                        "explanation": "The substring from index 2 to index 9 (0-based indexing) has seven 0s and one 1. The difference (7 - 1) is 6, which is the maximum possible difference."
                    },
                    {
                        "input": "111111",
                        "output": "-1",
                        "explanation": "The string contains only 1s, so the maximum difference is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Assume o as 1 and 1 as -1, then apply Kadane&rsquo;s algorithm</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Kadane",
                "slug": "kadane"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\t//Function to find the maximum substring sum.\n\tint maxSubstring(string S)\n\t{\n\t\tint n = S.size();\n\t\t\n\t\t//creating an array to store the values of 1 and -1 based on '0' and '1' in the string.\n\t\tint arr[n];\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tarr[i] = (S[i] == '0')?1:-1;\n\n\t\t//initializing the current and answer variables to the first element of the array.\n\t\tint cur = arr[0], ans = arr[0];\n\n\t\t//iterating through the array to find the maximum sum.\n\t\tfor (int i = 1; i < n; i++) \n\t   \t{ \n\t        //updating the current sum by taking the maximum value between the current element and the sum of current element and previous sum.\n\t        cur = max(arr[i], cur + arr[i]); \n\t        \n\t        //updating the answer by taking the maximum value between the current sum and the answer.\n\t        ans = max(ans, cur); \n\t   \t} \n\n\t   //returning the maximum sum.\n\t   return ans; \n\t}\t \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//User function Template for Java\n\nclass Solution {\n    int maxSubstring(String str) {\n        // code here\n        int n = str.length();\n        int current_sum = 0;\n        int max_sum = 0;\n \n        // traverse a binary string from left to right\n        for (int i = 0; i < n; i++) {\n \n            // add current value to the current_sum\n            // according to the Character\n            // if it's '0' add 1 else -1\n            current_sum += (str.charAt(i) == '0' ? 1 : -1);\n \n            if (current_sum < 0)\n                current_sum = 0;\n \n            // update maximum sum\n            max_sum = Math.max(current_sum, max_sum);\n        }\n        // return -1 if string does not contain any zero\n        // that means string contains all ones otherwise max_sum\n        return max_sum == 0 ? -1 : max_sum;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def maxSubstring(self, string):\n        n = len(string)\n        current_sum = 0\n        max_sum = 0\n\n        # traverse a binary string from left\n        # to right\n        for i in range(n):\n\n            # add current value to the current_sum\n            # according to the Character\n            # if it's '0' add 1 else -1\n            current_sum += (1 if string[i] == '0' else -1)\n\n            if current_sum < 0:\n                current_sum = 0\n\n            # update maximum sum\n            max_sum = max(current_sum, max_sum)\n\n        # return -1 if string does not contain\n        # any zero that means all ones\n        # otherwise max_sum\n        return max_sum if max_sum else -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution{\n    maxSubstring(S){\n        const n = S.length;\n        let arr = [];\n        for(let i = 0; i < n; i++)\n            arr[i] = (S[i] === '0')?1:-1;\n\n        let cur = arr[0], ans = arr[0];\n\n        for (let i = 1; i < n; i++) \n        { \n            cur = Math.max(arr[i], cur + arr[i]); \n            ans = Math.max(ans, cur); \n        } \n\n        return ans; \n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}