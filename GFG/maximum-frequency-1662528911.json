{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712059,
            "title": "Maximum Frequency",
            "titleSlug": "maximum-frequency-1662528911",
            "content": "<p><span style=\"font-size: 18px;\">Given an interger array <strong>arr[]&nbsp;</strong>of size <strong>n</strong>&nbsp;and an interger <strong>k</strong>. Return the <strong>maximum frequency</strong> of an element in the array after using <strong>atmost</strong> k <strong>Increment&nbsp;</strong>operations.&nbsp;</span><span style=\"font-size: 18px;\">In one operation, you can choose an index and increment its value by 1. After performing <strong>atmost k</strong> operations return the&nbsp;</span><strong style=\"font-size: 18px;\">maximum frequency</strong><span style=\"font-size: 18px;\"> of an element in the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn=3\narr[] = {2,2,4},k=4\n<strong>Output:</strong> 3\n<strong>Explanation</strong>: Apply two <strong>increment </strong>operations on index 0 and two operations\non index 1 to make arr[]={4,4,4}.Frequency of 4 is 3.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn=4\narr[] = {7,7,7,7},k=5\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: It is optimal to not use any operation and the Frequency of 7 is 4.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>max</strong><strong>Frequency()&nbsp;</strong>which takes the array arr[] ,interger n &nbsp;and integer&nbsp; k as input and returns the maximum frequency of an element.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(nlogn).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n,k&nbsp;&le; 10<sup>5</sup><br />1 &le; arr[i]&nbsp;&le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr[]` of size `n` and an integer `k`, determine the maximum frequency of any element in the array after performing at most `k` increment operations. In each operation, you can choose an index in the array and increment the value at that index by 1.",
                "constraints": [
                    "1 <= n, k <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n=3\narr[] = {2,2,4},k=4",
                        "output": "3",
                        "explanation": "By applying two increment operations to the element at index 0 and two operations to the element at index 1, the array can be transformed into `arr[] = {4,4,4}`. The frequency of 4 is then 3, which is the maximum possible frequency achievable."
                    },
                    {
                        "input": "n=4\narr[] = {7,7,7,7},k=5",
                        "output": "4",
                        "explanation": "No operations are needed. The frequency of 7 is already 4, which is the maximum possible frequency."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    //Function to find maximum frequency of any element\n    //after performing atmost K operations.\n    int maxFrequency(int arr[], int n, int k) {\n        //sorting the array in ascending order\n        sort(arr, arr + n);\n\n        //initializing the maximum frequency as 0\n        int ans = 0;\n        //initializing a pointer i at 0\n        int i = 0;\n\n        //iterating through the array from start to end\n        for (int j = 0; j < n; j++) {\n            //adding the current element to the operation limit\n            k += arr[j];\n\n            //checking if the current element is feasible to repeat to get maximum frequency\n            while (k < arr[j] * (j - i + 1)) {\n                //subtracting the first element from the operation limit\n                k -= arr[i];\n                //moving the pointer i to the next element\n                i++;\n            }\n\n            //updating the maximum frequency if a new maximum is found\n            ans = max(ans, j - i + 1);\n        }\n\n        //returning the maximum frequency of any element\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    public static int maxFrequency(int[] arr, int n, int k) {\r\n        Arrays.sort(arr);\r\n        int ans = 0;\r\n        int i = 0;\r\n        for (int j = 0; j < n; j++) \r\n        {\r\n            k += arr[j];\r\n            while (k < arr[j] * (j - i + 1)) {\r\n                k -= arr[i];\r\n                i++;\r\n            }\r\n\r\n            ans = Math.max(ans, j - i + 1);\r\n        }\r\n      return ans;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def maxFrequency(self, a, n, k):\r\n        n = len(a)\r\n        a.sort()\r\n        ans = 1\r\n        left = 0\r\n        right = 0\r\n        sumOfValues = 0\r\n        \r\n        while right < n:\r\n            # Trying to check for maximum frequency of this element\r\n            currentVal = a[right]\r\n            sumOfValues += currentVal\r\n            \r\n            while k < ((currentVal * (right - left + 1)) - sumOfValues):\r\n                # Shifting the window to the right to maintain maximum frequency\r\n                sumOfValues -= a[left]\r\n                left += 1\r\n            \r\n            ans = max(ans, right - left + 1)\r\n            right += 1\r\n            \r\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxFrequency(a, n, k) {\n        a.sort((x, y) => x - y); // Sorting the input array in ascending order\n\n        let ans = 1; // Initialize the maximum frequency to 1\n        let left = 0; // Initialize the left pointer\n        let right = 0; // Initialize the right pointer\n        let sumOfValues = 0; // Initialize the sum of values\n\n        while (right < n) {\n            // Trying to check for maximum frequency of this element\n            let currentVal = a[right];\n            sumOfValues += currentVal;\n\n            while (k < ((currentVal * (right - left + 1)) - sumOfValues)) {\n                // Shifting the window to the right to maintain maximum frequency\n                sumOfValues -= a[left];\n                left += 1;\n            }\n\n            ans = Math.max(ans, right - left + 1); // Update the maximum frequency\n\n            right += 1; // Move the right pointer to the next element\n        }\n\n        return ans; // Return the maximum frequency\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}