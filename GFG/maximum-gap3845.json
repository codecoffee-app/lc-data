{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702710,
            "title": "Maximum Gap",
            "titleSlug": "maximum-gap3845",
            "content": "<p><span style=\"font-size: 18px;\">Given an unsorted array <strong>arr[]</strong> of positive elements. Your task is to find the maximum difference between the successive elements in its sorted form.<br />Return 0 if the array contains less than 2 elements.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 10, 5]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The maximum difference between successive elements of array is 5 ie abs(5-10).<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 10, 2]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The maximum difference between successive elements of array is 8 ie abs(2-10).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array `arr` of positive integers, find the maximum difference between successive elements in its sorted form. Return 0 if the array contains fewer than 2 elements.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 10, 5]",
                        "output": "5",
                        "explanation": "The sorted array is [1, 5, 10]. The maximum difference between successive elements is |5 - 10| = 5."
                    },
                    {
                        "input": "[1, 10, 2]",
                        "output": "8",
                        "explanation": "The sorted array is [1, 2, 10]. The maximum difference between successive elements is |2 - 10| = 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >An&nbsp;<strong>efficient solution</strong> is based on the idea of&nbsp;<a href=\"https://www.geeksforgeeks.org/pigeonhole-sort/\">Pigeonhole sorting</a>. We don't actually sort the array, we just have to fill the buckets and keep track of the maximum and minimum value of each bucket. If we found an empty bucket, The maximum gap would be the difference of the <strong>maximum value in the previous bucket and &ndash; the minimum value in the next bucket</strong>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "hunanasset"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution {\n  public:\n    int maxSortedAdjacentDiff(vector<int>& arr) {\n        int n = arr.size();\n        if (n < 2)\n            return 0;\n        // Find maximum and minimum in arr[]\n\n        int maxVal = arr[0], minVal = arr[0];\n        for (int i = 1; i < n; i++) {\n            maxVal = max(maxVal, arr[i]);\n            minVal = min(minVal, arr[i]);\n        }\n\n        // bucket size\n        int bSize = max(1, (maxVal - minVal) / (n - 1));\n        // number of buckets\n        int bNum = (maxVal - minVal) / bSize + 1;\n\n        // Arrays to store maximum and minimum values\n        // in bNum buckets of differences.\n        int maxBucket[bNum];\n        int minBucket[bNum];\n        fill_n(maxBucket, bNum, INT_MIN);\n        fill_n(minBucket, bNum, INT_MAX);\n\n        // Traversing through array elements and\n        // filling in appropriate bucket if bucket\n        // is empty. Else updating bucket values.\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == maxVal || arr[i] == minVal)\n                continue;\n\n            // Finding index of bucket.\n            int index = (float)(floor(arr[i] - minVal) / bSize);\n\n            // Filling/Updating maximum value of bucket\n            if (maxBucket[index] == INT_MIN)\n                maxBucket[index] = arr[i];\n            else\n                maxBucket[index] = max(maxBucket[index], arr[i]);\n\n            // Filling/Updating minimum value of bucket\n            if (minBucket[index] == INT_MAX)\n                minBucket[index] = arr[i];\n            else\n                minBucket[index] = min(minBucket[index], arr[i]);\n        }\n\n        // Finding maximum difference between maximum value\n        // of previous bucket minus minimum of current bucket.\n        int prev_val = minVal;\n        int max_gap = 0;\n        for (int i = 0; i < bNum; i++) {\n            if (minBucket[i] == INT_MAX)\n                continue;\n            max_gap = max(max_gap, minBucket[i] - prev_val);\n            prev_val = maxBucket[i];\n        }\n        max_gap = max(max_gap, maxVal - prev_val);\n\n        return max_gap;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    int maxSortedAdjacentDiff(int[] arr) {\n        int n = arr.length;\n        if (n < 2) return 0;\n        int maxVal = arr[0];\n        int minVal = arr[0];\n        for (int i = 1; i < n; i++) {\n            maxVal = Math.max(maxVal, arr[i]);\n            minVal = Math.min(minVal, arr[i]);\n        }\n\n        // bucket size\n        int bSize = Math.max(1, (maxVal - minVal) / (n - 1));\n        // number of buckets\n        int bNum = (maxVal - minVal) / bSize + 1;\n\n        // Arrays to store maximum and minimum values\n        // in bNum buckets of differences.\n        int maxBucket[] = new int[bNum];\n        int minBucket[] = new int[bNum];\n        Arrays.fill(maxBucket, 0, bNum, Integer.MIN_VALUE);\n        Arrays.fill(minBucket, 0, bNum, Integer.MAX_VALUE);\n        // Traversing through array elements and\n        // filling in appropriate bucket if bucket\n        // is empty. Else updating bucket values.\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == maxVal || arr[i] == minVal) {\n                continue;\n            }\n\n            // Finding index of bucket.\n            int index = (int)(Math.round((arr[i] - minVal) / bSize));\n\n            // Filling/Updating maximum value of bucket\n            if (maxBucket[index] == Integer.MIN_VALUE) {\n                maxBucket[index] = arr[i];\n            } else {\n                maxBucket[index] = Math.max(maxBucket[index], arr[i]);\n            }\n\n            // Filling/Updating minimum value of bucket\n            if (minBucket[index] == Integer.MAX_VALUE) {\n                minBucket[index] = arr[i];\n            } else {\n                minBucket[index] = Math.min(minBucket[index], arr[i]);\n            }\n        }\n\n        // Finding maximum difference between maximum value\n        // of previous bucket minus minimum of current bucket.\n        int prev_val = minVal;\n        int max_gap = 0;\n        for (int i = 0; i < bNum; i++) {\n            if (minBucket[i] == Integer.MAX_VALUE) {\n                continue;\n            }\n            max_gap = Math.max(max_gap, minBucket[i] - prev_val);\n            prev_val = maxBucket[i];\n        }\n        max_gap = Math.max(max_gap, maxVal - prev_val);\n\n        return max_gap;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nimport math\n\n\nclass Solution:\n\n    def maxSortedAdjacentDiff(self, arr):\n        # Find maximum and minimum in arr[]\n        n = len(arr)\n        if n < 2:\n            return 0\n        maxVal, minVal = arr[0], arr[0]\n        for i in range(1, n):\n            maxVal = max(maxVal, arr[i])\n            minVal = min(minVal, arr[i])\n\n        # bucket size\n        bSize = max(1, (maxVal - minVal) // (n - 1))\n        # number of buckets\n        bNum = (maxVal - minVal) // bSize + 1\n        INT_MIN = -math.inf\n        INT_MAX = math.inf\n        # Arrays to store maximum and minimum\n        # values in bNum buckets of differences.\n        maxBucket = [INT_MIN] * (bNum)\n        minBucket = [INT_MAX] * (bNum)\n\n        # Traversing through array elements and\n        # filling in appropriate bucket if bucket\n        # is empty. Else updating bucket values.\n        for i in range(0, n):\n            if arr[i] == maxVal or arr[i] == minVal:\n                continue\n\n            # Finding index of bucket.\n            index = (arr[i] - minVal) // bSize\n\n            # Filling/Updating maximum value\n            # of bucket\n            if maxBucket[index] == INT_MIN:\n                maxBucket[index] = arr[i]\n            else:\n                maxBucket[index] = max(maxBucket[index], arr[i])\n\n            # Filling/Updating minimum value of bucket\n            if minBucket[index] == INT_MAX:\n                minBucket[index] = arr[i]\n            else:\n                minBucket[index] = min(minBucket[index], arr[i])\n\n        # Finding maximum difference between\n        # maximum value of previous bucket\n        # minus minimum of current bucket.\n        prev_val, max_gap = minVal, 0\n\n        for i in range(0, bNum):\n            if minBucket[i] == INT_MAX:\n                continue\n\n            max_gap = max(max_gap, minBucket[i] - prev_val)\n            prev_val = maxBucket[i]\n\n        max_gap = max(max_gap, maxVal - prev_val)\n\n        return max_gap\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @return {number}\n */\nclass Solution {\n    maxSortedAdjacentDiff(arr) {\n        let n = arr.length;\n        if (n < 2) return 0;\n\n        // Find maximum and minimum in arr[]\n        let maxVal = arr[0];\n        let minVal = arr[0];\n        for (let i = 1; i < n; i++) {\n            maxVal = Math.max(maxVal, arr[i]);\n            minVal = Math.min(minVal, arr[i]);\n        }\n\n        // bucket size\n        let bSize = Math.max(1, Math.floor((maxVal - minVal) / (n - 1)));\n\n        // number of buckets\n        let bNum = Math.floor((maxVal - minVal) / bSize) + 1;\n\n        // Arrays to store maximum and minimum values\n        // in bNum buckets of differences.\n        let maxBucket = new Array(bNum).fill(Number.MIN_SAFE_INTEGER);\n        let minBucket = new Array(bNum).fill(Number.MAX_SAFE_INTEGER);\n\n        // Traversing through array elements and\n        // filling in appropriate bucket if bucket\n        // is empty. Else updating bucket values.\n        for (let i = 0; i < n; i++) {\n            if (arr[i] === maxVal || arr[i] === minVal) continue;\n\n            // Finding index of bucket.\n            let index = Math.floor((arr[i] - minVal) / bSize);\n\n            // Filling/Updating maximum value of bucket\n            if (maxBucket[index] === Number.MIN_SAFE_INTEGER)\n                maxBucket[index] = arr[i];\n            else\n                maxBucket[index] = Math.max(maxBucket[index], arr[i]);\n\n            // Filling/Updating minimum value of bucket\n            if (minBucket[index] === Number.MAX_SAFE_INTEGER)\n                minBucket[index] = arr[i];\n            else\n                minBucket[index] = Math.min(minBucket[index], arr[i]);\n        }\n\n        // Finding maximum difference between maximum value\n        // of previous bucket minus minimum of current bucket.\n        let prev_val = minVal;\n        let max_gap = 0;\n        for (let i = 0; i < bNum; i++) {\n            if (minBucket[i] === Number.MAX_SAFE_INTEGER) continue;\n            max_gap = Math.max(max_gap, minBucket[i] - prev_val);\n            prev_val = maxBucket[i];\n        }\n        max_gap = Math.max(max_gap, maxVal - prev_val);\n\n        return max_gap;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}