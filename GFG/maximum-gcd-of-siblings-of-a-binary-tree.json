{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706340,
            "title": "Maximum GCD of siblings of a binary tree",
            "titleSlug": "maximum-gcd-of-siblings-of-a-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a 2d list that represents the nodes of a <a href=\"https://www.geeksforgeeks.org/binary-tree-data-structure/\">Binary tree</a> with <strong>N</strong> nodes, the task is to find the maximum <a href=\"https://www.geeksforgeeks.org/c-program-find-gcd-hcf-two-numbers/\">GCD</a> of the siblings of this tree without actually constructing it.<br /><strong>Note: </strong>If there are no pairs of siblings in the given tree, print 0. Also, if given that there's an edge between a and b in the form of {a,b} in the list, then a is the parent node.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 7\narr = {{4, 5}, {4, 2}, {2, 3}, {2, 1}, {3, 6}, {3, 12}}\n<strong>Output:\n</strong>6\n<strong>Explanation:</strong>\n</span><img style=\"height: 367px; width: 400px;\" src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/706340/Web/Other/ed5aea1d-c652-439f-b288-a2c013c1f0c1_1685087770.png\" alt=\"\" />\n<span style=\"font-size: 18px;\">For the above tree, the maximum GCD\nfor the sibilings is 6, formed for the\nnodes 6 and 12 for the children of node 3.</span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 3\narr[] = {{1,2}, {1,4}} \n<strong>Output :</strong>\n2</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/706340/Web/Other/9b440579-82d9-4460-8fed-21d07d75bfa5_1685087771.png\" alt=\"\" />\n<span style=\"font-size: 18px;\">For the above tree, the maximum GCD\nfor the sibilings is 2, formed for the\nnodes 2 and 4 for the children of node 1.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>maxBinTreeGCD()</strong>&nbsp;which takes an integer N and a 2-d list denoting the edges as input and returns the maximum GCD of sibilings of the tree.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(E*logE), where E is the number of edges in the Tree.<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br />There might be edges with similar values</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Just sort the edges and check the gcd of sibilings of the parent root for each node.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int maxBinTreeGCD(vector<vector<int>> arr, int N) {\r\n        \r\n        // Single child or no child\r\n        if (N<=2)\r\n            return 0;\r\n        \r\n        // Sort the list of edges first\r\n        sort(arr.begin(), arr.end());\r\n     \r\n        // To get the first pair\r\n        vector<int> a = arr[0];\r\n        vector<int> b;\r\n        int ans = 0;\r\n        for (int i=1; i<N-1; i++) {\r\n            b = arr[i];\r\n     \r\n            // If both the pairs belongs to\r\n            // the same parent\r\n            if (b[0] == a[0])\r\n     \r\n                // Update ans with the max\r\n                // of current gcd and\r\n                // gcd of both children\r\n                ans = max(ans, __gcd(a[1], b[1]));\r\n     \r\n            // Update previous\r\n            // for next iteration\r\n            a = b;\r\n        }\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\n\r\nclass Solution{\r\n    static int gcd(int a, int b)\r\n    {\r\n        // Everything divides 0\r\n        if (a == 0)\r\n          return b;\r\n        if (b == 0)\r\n          return a;\r\n      \r\n        // base case\r\n        if (a == b)\r\n            return a;\r\n      \r\n        // a is greater\r\n        if (a > b)\r\n            return gcd(a-b, b);\r\n        return gcd(a, b-a);\r\n    }\r\n    static int maxBinTreeGCD(ArrayList<ArrayList<Integer>> arr, int N) {\r\n        // Single child or no child\r\n        if (N<=2)\r\n            return 0;\r\n        \r\n        // Sort the list of edges first\r\n        Collections.sort(arr, new Comparator<ArrayList<Integer>>(){\r\n            @Override\r\n            public int compare(ArrayList<Integer> a1, ArrayList<Integer> a2){\r\n                return a1.get(0) - a2.get(0);\r\n            }\r\n        });\r\n     \r\n        // To get the first pair\r\n        ArrayList<Integer> a = arr.get(0);\r\n        ArrayList<Integer> b;\r\n        int ans = 0;\r\n        for (int i=1; i<N-1; i++) {\r\n            b = arr.get(i);\r\n     \r\n            // If both the pairs belongs to\r\n            // the same parent\r\n            if (b.get(0) == a.get(0))\r\n     \r\n                // Update ans with the max\r\n                // of current gcd and\r\n                // gcd of both children\r\n                ans = Math.max(ans, gcd(a.get(1), b.get(1)));\r\n     \r\n            // Update previous\r\n            // for next iteration\r\n            a = b;\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\r\n\r\nclass Solution:\r\n    def maxBinTreeGCD(self, arr, N):\r\n        # code here \r\n        if (len(arr) == 1 or len(arr) == 0):\r\n            return 0\r\n      \r\n        arr.sort()\r\n\r\n        # To get the first pair\r\n        a = arr[0]\r\n        ans = 0\r\n        for i in range(1, len(arr)):\r\n            b = arr[i]\r\n\r\n            # If both the pairs belongs to\r\n            # the same parent\r\n            if (b[0] == a[0]):\r\n\r\n                # Update ans with the max\r\n                # of current gcd and\r\n                # gcd of both children\r\n                ans = max(ans, gcd(a[1], b[1]))\r\n\r\n            # Update previous\r\n            # for next iteration\r\n            a = b\r\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {number[][]} arr\r\n * @param {number} N\r\n * @return {number}\r\n*/\r\n\r\nclass Solution {\r\n  maxBinTreeGCD(arr,N){\r\n    // Single child or no child\r\n    if (N<=2)\r\n        return 0;\r\n\r\n    // Sort the list of edges first\r\n    arr.sort((a, b) => a[0] - b[0]);\r\n\r\n    // To get the first pair\r\n    let a = arr[0];\r\n    let b;\r\n    let ans = 0;\r\n    for (let i=1; i<N-1; i++) {\r\n        b = arr[i];\r\n\r\n        // If both the pairs belongs to\r\n        // the same parent\r\n        if (b[0] === a[0])\r\n\r\n            // Update ans with the max\r\n            // of current gcd and\r\n            // gcd of both children\r\n            ans = Math.max(ans, gcd(a[1], b[1]));\r\n\r\n        // Update previous\r\n        // for next iteration\r\n        a = b;\r\n    }\r\n    return ans;\r\n\r\n    // gcd function to find the greatest common divisor\r\n    function gcd(a, b) {\r\n        if (b === 0)\r\n            return a;\r\n        return gcd(b, a % b);\r\n    }\r\n  }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public int maxBinTreeGCD(List<List<int>> arr, int N)\n    {\n        // Single child or no child\n        if (N <= 2)\n            return 0;\n\n        // Sort the list of edges first\n        arr.Sort((a, b) => a[0].CompareTo(b[0]));\n\n        // To get the first pair\n        List<int> parent = arr[0];\n        List<int> child;\n        int ans = 0;\n        for (int i = 1; i < N - 1; i++)\n        {\n            child = arr[i];\n\n            // If both the pairs belong to the same parent\n            if (child[0] == parent[0])\n\n                // Update ans with the max of current gcd and gcd of both children\n                ans = Math.Max(ans, gcd(parent[1], child[1]));\n\n            // Update parent for the next iteration\n            parent = child;\n        }\n        return ans;\n    }\n\n    // Function to calculate gcd\n    private int gcd(int a, int b)\n    {\n        if (b == 0)\n            return a;\n        return gcd(b, a % b);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}