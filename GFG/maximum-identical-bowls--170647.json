{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714167,
            "title": "Maximum Identical Bowls",
            "titleSlug": "maximum-identical-bowls--170647",
            "content": "<p><span style=\"font-size: 18px;\">There are <strong>N</strong> bowls containing cookies. In one operation, you can take one cookie from any of the non-empty bowls and put it into another bowl. If the bowl becomes empty you discard it. You can perform the above operation any number of times. You want to know the <strong>maximum</strong> number of bowls you can have with an identical number of cookies.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>All the non-discarded bowls should contain the identical number of cookies.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 3\narr[] = {3, 1, 5}\n<strong>Output:</strong> 3\n<strong>Explanation</strong>: We can put 2 cookies one by one from the <br />3rd bowl and put them into the 2nd bowl.Now the array\nbecomes {3, 3, 3}. Each bowl now contains 3 cookies.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 4\narr[] = {1, 2, 6, 5}\n<strong>Output: </strong>2\n<strong>Explanation</strong>: We can take 6 cookies one by one from the <br />3rd bowl and put them into 1st bowl, now the array becomes \n{7, 2, 0, 5}. We discard the 3rd array as it becomes\n empty. Hence, arr={7, 2, 5}. Now, we take 5 cookies \none by one from 3rd bowl and put them into the 2nd bowl. <br /></span><span style=\"font-size: 18px;\">Hence arr={7, 7, 0}. Discarding 3rd empty bowl, number of \nbowls containing identical number of cookies i.e 7 is 2.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp; </strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>getMaximum()</strong> which takes the array arr[] and its size N as input parameters and returns the maximum number of bowls we can have with an identical number of cookies.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>9</sup><br />Array may contain duplicate elements.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given N bowls containing cookies, you can move one cookie from a non-empty bowl to another. An empty bowl is discarded. Determine the maximum number of bowls that can have the same number of cookies after performing any number of operations.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^9",
                    "Array may contain duplicate elements."
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr[] = {3, 1, 5}",
                        "output": "3",
                        "explanation": "By moving cookies, we can make each bowl contain 3 cookies.  The array becomes {3, 3, 3}."
                    },
                    {
                        "input": "N = 4\narr[] = {1, 2, 6, 5}",
                        "output": "2",
                        "explanation": "We can transfer cookies such that two bowls contain 7 cookies each, and the other bowls are emptied and discarded. One possible transformation is: {1, 2, 6, 5} -> {7, 2, 0, 5} -> {7, 7, 0, 0}. The final array effectively becomes {7, 7}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The answer is one of the divisors of the sum of all the elements in the array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\n\n    public:\n    // Function to get the maximum possible number of equal subarrays\n    int getMaximum(int N , vector<int>arr){\n        long long total = 0;\n        // Calculating the sum of all elements in the array\n        for(int &x:arr){\n            total+=x;\n        }\n        // Checking for maximum number of equal subarrays\n        for(int i = N; i >= 1; i--){\n            if(total%i==0)\n                return i;\n        }\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int getMaximum(int N, int[] arr) {\r\n        // code here\r\n        long total=0;\r\n        for(int i=0;i<N;i++){\r\n            total+=arr[i];\r\n        }\r\n        int p=0;\r\n        for(int i=N;i>=1;i--){\r\n            if(total%i==0){\r\n                p=i;\r\n                break;\r\n            }\r\n        }\r\n        return p;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import List\n\nclass Solution:\n    def getMaximum(self, N : int, arr : List[int]) -> int:\n        # calculating the total sum of all elements in the array\n        total = 0\n        for x in arr:\n            total += x\n        \n        # iterating from N to 1 in reverse order\n        for i in range(N, 0, -1):\n            # checking if total sum is divisible by i \n            if total % i == 0:\n                # return the current value of i as the maximum value\n                return i\n        \n        # if no maximum value is found, return 0\n        return 0",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number[]} arr\n * @returns {Number}\n*/\n\nclass Solution {\n    //Function to get maximum element from a list.\n    getMaximum(N, arr) {\n        let total = 0;\n        for(let x of arr) {\n            total += x;\n        }\n        \n        for(let i = N; i > 0; i--) {\n            if(total % i === 0) {\n                return i;\n            }\n        }\n        \n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}