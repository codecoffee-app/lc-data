{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701209,
            "title": "Maximum Index",
            "titleSlug": "maximum-index-1587115620",
            "content": "<p><span >Given an array <strong>arr</strong> of positive integers. The task is to return the maximum of <strong>j - i</strong> subjected to the constraint of <strong>arr[i] <u>&lt;</u> arr[j] </strong>and <strong>i <u>&lt;</u>&nbsp;j</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 10]\n<strong>Output: </strong>1<strong>\nExplanation: </strong>arr[0] <u style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&lt;</u> arr[1] so (j-i) is 1-0 = 1.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [34, 8, 10, 3, 2, 80, 30, 33, 1]\n<strong>Output: </strong>6<strong>\nExplanation: </strong>In the given array arr[1] &lt; arr[7] satisfying the required condition(arr[i] <u>&lt;</u> arr[j]) thus giving the maximum difference of j - i which is 6(7-1).\n</span></pre>\n<p><span ><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of positive integers, find the maximum difference `j - i` such that `arr[i] <= arr[j]` and `i < j`.",
                "constraints": [
                    "1 <= arr.size <= 10^6",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1, 10]",
                        "output": "1",
                        "explanation": "The condition arr[i] <= arr[j] is satisfied for i=0 and j=1, since arr[0] (1) <= arr[1] (10).  The difference j-i = 1-0 = 1. This is the maximum possible difference."
                    },
                    {
                        "input": "[34, 8, 10, 3, 2, 80, 30, 33, 1]",
                        "output": "6",
                        "explanation": "The condition arr[i] <= arr[j] is satisfied for i=1 and j=7, since arr[1] (8) <= arr[7] (33).  The difference j-i = 7-1 = 6. This yields the largest possible difference between indices that satisfy the given condition."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Utilize two auxiliary arrays to track the minimum elements from the left (<code>LMin</code>) and maximum elements from the right (<code>RMax</code>).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            }
        ],
        "companies": [
            "vmware",
            "amazon",
            "microsoft",
            "makemytrip"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // Function to find the maximum index difference.\n    int maxIndexDiff(vector<int> &arr) {\n        int n = arr.size();\n        if (n == 1) {\n            return 0;\n        }\n        int maxDiff;\n        int i, j;\n\n        int *LMin = new int[n];\n        int *RMax = new int[n];\n\n        // Constructing LMin[] such that LMin[i] stores the minimum value\n        // from (arr[0], arr[1], ... arr[i]).\n        LMin[0] = arr[0];\n        for (i = 1; i < n; ++i)\n            LMin[i] = min(arr[i], LMin[i - 1]);\n\n        // Constructing RMax[] such that RMax[j] stores the maximum value\n        // from (arr[j], arr[j+1], ..arr[n-1]).\n        RMax[n - 1] = arr[n - 1];\n        for (j = n - 2; j >= 0; --j)\n            RMax[j] = max(arr[j], RMax[j + 1]);\n\n        i = 0, j = 0, maxDiff = -1;\n        // Traversing both arrays from left to right to find optimum j-i.\n        // This process is similar to merge() of MergeSort.\n        while (j < n && i < n) {\n            if (LMin[i] <= RMax[j]) {\n                // Updating the maximum difference.\n                maxDiff = max(maxDiff, j - i);\n                j = j + 1;\n            } else\n                i = i + 1;\n        }\n        // returning the maximum difference.\n        return maxDiff;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the maximum index difference.\n    int maxIndexDiff(int[] arr) {\n        int n = arr.length;\n        if (n == 1) {\n            return 0;\n        }\n        int maxDiff = -1;\n        int[] LMin = new int[n];\n        int[] RMax = new int[n];\n\n        LMin[0] = arr[0];\n        for (int i = 1; i < n; ++i) LMin[i] = Math.min(arr[i], LMin[i - 1]);\n\n        RMax[n - 1] = arr[n - 1];\n        for (int j = n - 2; j >= 0; --j) RMax[j] = Math.max(arr[j], RMax[j + 1]);\n\n        int i = 0, j = 0;\n        while (i < n && j < n) {\n            if (LMin[i] <= RMax[j]) {\n                maxDiff = Math.max(maxDiff, j - i);\n                j++;\n            } else {\n                i++;\n            }\n        }\n        return maxDiff;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxIndexDiff(self, arr):\n        n = len(arr)\n        if n == 1:\n            return 0\n        maxDiff = -1\n        LMin = [0] * n\n        RMax = [0] * n\n\n        LMin[0] = arr[0]\n        for i in range(1, n):\n            LMin[i] = min(arr[i], LMin[i - 1])\n\n        RMax[n - 1] = arr[n - 1]\n        for j in range(n - 2, -1, -1):\n            RMax[j] = max(arr[j], RMax[j + 1])\n\n        i, j = 0, 0\n        while i < n and j < n:\n            if LMin[i] <= RMax[j]:\n                maxDiff = max(maxDiff, j - i)\n                j += 1\n            else:\n                i += 1\n\n        return maxDiff\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Position this line where user code will be pasted.\n\nclass Solution {\n    maxIndexDiff(arr) {\n        let n = arr.length;\n        if (n === 1) {\n            return 0;\n        }\n        let maxDiff = -1;\n        let LMin = new Array(n);\n        let RMax = new Array(n);\n\n        LMin[0] = arr[0];\n        for (let i = 1; i < n; ++i) {\n            LMin[i] = Math.min(arr[i], LMin[i - 1]);\n        }\n\n        RMax[n - 1] = arr[n - 1];\n        for (let j = n - 2; j >= 0; --j) {\n            RMax[j] = Math.max(arr[j], RMax[j + 1]);\n        }\n\n        let i = 0, j = 0;\n        while (i < n && j < n) {\n            if (LMin[i] <= RMax[j]) {\n                maxDiff = Math.max(maxDiff, j - i);\n                j++;\n            } else {\n                i++;\n            }\n        }\n\n        return maxDiff;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}