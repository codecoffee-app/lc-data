{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702697,
            "title": "Maximum Index",
            "titleSlug": "maximum-index3307",
            "content": "<p><span >Given an array,<strong> arr[] </strong>of<strong> </strong>non-negative integers. The task is to return the maximum of <strong>j - i (i&lt;=j)</strong>&nbsp;subjected to the constraint of <strong>arr[i] &lt;= arr[j]</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [34, 8, 10, 3, 2, 80, 30, 33, 1]</span><br /><span ><strong>Output: </strong>6</span><br /><span ><strong>Explanation: </strong>In the given array arr[1] &lt; arr[7] satisfying the required condition (arr[i] &lt;= arr[j]) thus giving the maximum difference of j - i which is 7-1 = 6.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [18, 17]</span><br /><span ><strong>Output: </strong>0</span><br /><span ><strong>Explanation:</strong> We can either take i and j as 0 and 0 or we cantake 1 and 1 both give the same result 0.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [10, 10, 10, 10]</span><br /><span ><strong>Output: </strong>3</span><br /><span ><strong>Explanation:</strong> Since all elements are equal, any pair of indices will satisfy the condition arr[i] &lt;= arr[j]. The maximum difference is between j = 3 and i = 0, resulting in j - i = 4.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of non-negative integers, find the maximum difference `j - i` such that `i <= j` and `arr[i] <= arr[j]`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[34, 8, 10, 3, 2, 80, 30, 33, 1]",
                        "output": "6",
                        "explanation": "The maximum difference is achieved when i = 1 (arr[1] = 8) and j = 7 (arr[7] = 33), as arr[1] <= arr[7] and 7 - 1 = 6."
                    },
                    {
                        "input": "[18, 17]",
                        "output": "0",
                        "explanation": "Since no element arr[i] <= arr[j] exists for i<j. The maximum difference is when i=0 and j=0, therefore 0."
                    },
                    {
                        "input": "[10, 10, 10, 10]",
                        "output": "3",
                        "explanation": "All elements are equal, so any i and j where i <= j satisfy the condition.  The maximum difference is achieved when i = 0 and j = 3, so 3 - 0 = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >To maximize <code>j - i</code> where <code>A[i] &lt;= A[j]</code>, we don't consider elements before <code>i</code> or after <code>j</code>. Any element before <code>i</code> would violate the condition, and any element after <code>j</code> would reduce the difference.</span></p>",
            "<p>For the observation, in previous hint, make 2 arrays,&nbsp;<br />\n<strong>First</strong>, will store smallest occuring element before the element<br />\n<strong>Second</strong>, will store largest occuring element after the element</p>\n\n<p>Traverse the Second&nbsp;array, till the element in second array is larger than or equal to First array, and store the index difference. And if it becomes smaller, traverse the first array till it again becomes larger.</p>\n\n<p>And store the <strong>max difference </strong>of this index difference.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "vmware",
            "amazon",
            "snapdeal",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find maximum index difference\n    int maxIndexDiff(vector<int> &arr) {\n        int n = arr.size();\n        int maxDiff;\n        int i, j;\n\n        // Array to store minimum value from left side\n        int *LMin = new int[n];\n\n        // Array to store maximum value from right side\n        int *RMax = new int[n];\n\n        /* Construct LMin[] such that LMin[i] stores the minimum value\n            from (arr[0], arr[1], ... arr[i]) */\n        LMin[0] = arr[0];\n        for (i = 1; i < n; ++i)\n            LMin[i] = min(arr[i], LMin[i - 1]);\n\n        /* Construct RMax[] such that RMax[j] stores the maximum value\n           from (arr[j], arr[j+1], ..arr[n-1]) */\n        RMax[n - 1] = arr[n - 1];\n        for (j = n - 2; j >= 0; --j)\n            RMax[j] = max(arr[j], RMax[j + 1]);\n\n        /* Traverse both arrays from left to right to find optimum j - i\n            This process is similar to merge() of MergeSort */\n        i = 0, j = 0, maxDiff = -1;\n        while (j < n && i < n) {\n            if (LMin[i] <= RMax[j]) {\n                // Update maxDiff if a larger difference is found\n                maxDiff = max(maxDiff, j - i);\n                j = j + 1;\n            } else\n                i = i + 1;\n        }\n\n        // Return the maximum index difference\n        return maxDiff;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to calculate the maximum index difference\n    // in the given array.\n    int maxIndexDiff(int arr[]) {\n        int n = arr.length;\n        // If the array has only one element, return 0 as the\n        // maximum index difference is 0 in this case.\n        if (n == 1) {\n            return 0;\n        }\n\n        // Array to store the minimum value from the left side\n        // of each element.\n        int LMin[] = new int[n];\n        // Array to store the maximum value from the right side\n        // of each element.\n        int RMax[] = new int[n];\n\n        // Construct LMin[] array.\n        LMin[0] = arr[0];\n        for (int i = 1; i < n; ++i) LMin[i] = Integer.min(arr[i], LMin[i - 1]);\n\n        // Construct RMax[] array.\n        RMax[n - 1] = arr[n - 1];\n        for (int j = n - 2; j >= 0; --j) RMax[j] = Integer.max(arr[j], RMax[j + 1]);\n\n        // Traverse both arrays to find the maximum index difference.\n        int i = 0, j = 0, maxDiff = -1;\n        while (j < n && i < n) {\n            if (LMin[i] <= RMax[j]) {\n                maxDiff = Integer.max(maxDiff, j - i);\n                j++;\n            } else\n                i++;\n        }\n\n        // Return the maximum index difference.\n        return maxDiff;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\nclass Solution:\n    # Function to find the maximum difference between two indices i and j\n    # where j > i and arr[j] >= arr[i]\n    def maxIndexDiff(self, arr):\n        n = len(arr)\n        Lmin = []\n        Rmax = []\n\n        # Initializing Lmin and Rmax arrays\n        for i in range(n):\n            Lmin.append(0)\n            Rmax.append(0)\n\n        Lmin[0] = arr[0]\n\n        # Calculating the minimum element in the left side of each element\n        # and storing it in Lmin array\n        for i in range(1, n):\n            Lmin[i] = min(arr[i], Lmin[i - 1])\n\n        Rmax[n - 1] = arr[n - 1]\n\n        # Calculating the maximum element in the right side of each element\n        # and storing it in Rmax array\n        for j in range(n - 2, -1, -1):\n            Rmax[j] = max(arr[j], Rmax[j + 1])\n\n        # Initializing variables i and j\n        i = 0\n        j = 0\n        maxdiff = -1\n\n        # Loop to find the maximum difference between indices i and j\n        while (j < n and i < n):\n            if (Lmin[i] <= Rmax[j]):\n                maxdiff = max(maxdiff, j - i)\n                j += 1\n            else:\n                i += 1\n\n        return maxdiff\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {number[]} arr - Input array of numbers\n * @returns {number} - Maximum difference between the indexes\n */\nclass Solution {\n    maxIndexDiff(arr) {\n        let n = arr.length;\n        let maxDiff; // Initialize variable to store maximum difference\n        let i, j;    // Declare loop variables\n        let LMin =\n            new Array(n); // Declare array to store the minimum value from the left\n        let RMax =\n            new Array(n); // Declare array to store the maximum value from the right\n\n        /* Construct LMin[] such that LMin[i] stores the minimum value\n        from (arr[0], arr[1], ... arr[i]) */\n        LMin[0] = arr[0]; // Initialize first element of LMin with first element of arr\n        for (i = 1; i < n; ++i)\n            LMin[i] = Math.min(arr[i], LMin[i - 1]); // Calculate minimum from current\n                                                     // element and previous minimum\n\n        /* Construct RMax[] such that RMax[j] stores the maximum value\n        from (arr[j], arr[j+1], ..arr[n-1]) */\n        RMax[n - 1] =\n            arr[n - 1]; // Initialize last element of RMax with last element of arr\n        for (j = n - 2; j >= 0; --j)\n            RMax[j] = Math.max(\n                arr[j],\n                RMax[j + 1]); // Calculate maximum from current element and next maximum\n\n        /* Traverse both arrays from left to right to find optimum j - i\n        This process is similar to merge() of MergeSort */\n        i = 0, j = 0,\n        maxDiff = -1; // Initialize variables for traversal and maximum difference\n        while (j < n && i < n) {\n            if (LMin[i] <= RMax[j]) {               // Compare LMin[i] and RMax[j]\n                maxDiff = Math.max(maxDiff, j - i); // Update maximum difference if\n                                                    // current difference is greater\n                j = j + 1;                          // Increment j\n            } else\n                i = i + 1; // Increment i\n        }\n        return maxDiff; // Return the maximum difference between the indexes\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}