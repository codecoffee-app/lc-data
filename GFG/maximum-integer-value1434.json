{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703555,
            "title": "Maximum Integer Value ",
            "titleSlug": "maximum-integer-value1434",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>S</strong> of digits(0-9).Find the <strong>maximum value</strong> that can be obtained from the string by putting either<strong> &#39;*&#39; or &#39;+&#39; </strong>operators in between the digits while traversing from left to right of the string and picking up a single digit at a time.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: \n</strong>S=&quot;01230&quot;\n<strong>Output: \n</strong>9\n<strong>Explanation: \n</strong>we have 01230.We traverse from \nleft and pick zero.Now we encounter &#39;1&#39;. \nWe see if 0*1 gives maximum or 0+1.Now we \nhave ans=1.Now we traverse further.We \nencounter &#39;2&#39;.Now we see whether 1*2 gives \nmax or 1+2.Now we have ans=3.Now we \ntraverse further. We encounter&#39;3&#39;.\nWe see if 3*3 gives max or 3+3.\nThe ans is now 9.Now we traverse further. \nWe encounter 0, we see if 9+0 gives max or \n9*0. The ans is now 9. We&#39;ve traversed the\nwhole string so we stop.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> \nS=&quot;891&quot;\n<strong>Output:</strong> \n73\n<strong>Explanation:\n</strong>We start at 8,then go to\n9 and see whether 8+9 is greater or\n8*9.Now we have 72,we traverse \nforward and check whether 72*1 is \ngreater or 72+1.In this way, we get \nthe answer as 73.\n</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>MaximumIntegerValue()&nbsp;</strong>which takes the string&nbsp;S&nbsp;as input parameter&nbsp;and returns the maximum integer value that can be&nbsp;created using given procedures</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|)<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= |S|&nbsp;&lt;&nbsp;20<br />\nS contains only digits from 0 to 9<br />\nLeading 0&#39;s maybe present.</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` of digits (0-9), find the maximum value that can be obtained by inserting either '*' or '+' operators between the digits while traversing from left to right, picking one digit at a time. The operations are performed sequentially from left to right.",
                "constraints": [
                    "1 <= |S| < 20",
                    "S contains only digits from 0 to 9",
                    "Leading 0's may be present."
                ],
                "testcases": [
                    {
                        "input": "01230",
                        "output": "9",
                        "explanation": "Start with 0. 0+1=1 > 0*1=0, so current value is 1. 1+2=3 > 1*2=2, so current value is 3. 3*3=9 > 3+3=6, so current value is 9. 9+0=9 > 9*0=0, so current value is 9. Final answer: 9."
                    },
                    {
                        "input": "891",
                        "output": "73",
                        "explanation": "Start with 8. 8*9=72 > 8+9=17, so current value is 72. 72+1=73 > 72*1=72, so current value is 73. Final answer: 73."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Take care of Integer Overflow.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find the maximum possible integer value\n    long long int MaximumIntegerValue(string S) {\n        // Initialize the answer as the first digit of the string\n        long long int ans = S[0] - '0';\n\n        // Iterate through the remaining digits of the string\n        for (int i = 1; i < S.length(); i++) {\n            // Update the answer by taking the maximum of two cases:\n            // - Multiplying the previous answer by the current digit\n            // - Adding the previous answer to the current digit\n            ans = max(ans * (S[i] - '0'), ans + (S[i] - '0'));\n        }\n        \n        // Return the maximum possible integer value\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find the maximum possible integer value\n    long MaximumIntegerValue(String S) {\n        // Initializing the answer variable with the first character as a number\n        long ans = S.charAt(0) - '0';\n        \n        // Looping through the rest of the string\n        for (int i = 1; i < S.length(); i++) {\n            // Checking if adding the next character or multiplying with it gives a larger value\n            ans = Math.max(ans + (S.charAt(i) - '0'), ans * (S.charAt(i) - '0'));\n        }\n        \n        // Returning the maximum possible integer value\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    # Function to find the maximum possible value\n    def MaximumIntegerValue(self,S):\n        # Initializing the answer with the first element of S\n        ans=(int)(S[0])\n\n        # Iterating through the rest of the elements in S\n        for i in range(1,len(S)):\n            # Calculating the max of the current element added to ans and the current element multiplied by ans\n            ans=max(ans+(int)(S[i]),ans*(int)(S[i]))\n\n        # Returning the maximum possible value\n        return ans",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the maximum integer value possible by inserting one '*' in the given string.\n    MaximumIntegerValue(S) {\n        // Initializing the answer with the first element of S\n        let ans = parseInt(S[0])\n\n        // Iterating through the rest of the elements in S\n        for (let i = 1; i < S.length; i++) {\n            // Calculating the max of the current element added to ans and the current element multiplied by ans\n            ans = Math.max(ans + parseInt(S[i]), ans * parseInt(S[i]))\n        }\n\n        // Returning the maximum possible value\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long MaximumIntegerValue(string S)\n    {\n        // Initialize the answer as the first digit of the string\n        long ans = S[0] - '0';\n\n        // Iterate through the remaining digits of the string\n        for (int i = 1; i < S.Length; i++)\n        {\n            // Update the answer by taking the maximum of two cases:\n            // - Multiplying the previous answer by the current digit\n            // - Adding the previous answer to the current digit\n            ans = Math.Max(ans * (S[i] - '0'), ans + (S[i] - '0'));\n        }\n\n        // Return the maximum possible integer value\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}