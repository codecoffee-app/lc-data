{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713996,
            "title": "Maximum Intersecting Lines",
            "titleSlug": "maximum-intersecting-lines--170647",
            "content": "<p><span style=\"font-size:18px\"><strong>N&nbsp;</strong>horizontal line segments are arranged on the X-axis of a 2D plane. The start and end point of each line segment is given in a <strong>Nx2</strong> matrix <strong>lines[ ][ ]</strong>. Your task is&nbsp;to find the maximum number of intersections possible of any&nbsp;vertical line with the given <strong>N </strong>line&nbsp;segments.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4</span><span style=\"font-size:18px\">\r\nlines[][] = {{1,3}, {2,3}, {1,2}, {4,4}}\r\n<strong>Output:</strong>\r\n3\r\n<strong>Explanation:</strong>\r\nA vertical line at X = 2 passes through \r\n{1,3}, {2,3}, {1,2}, ie three of the \r\ngiven horizontal lines.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 3\r\nlines[][] = {{1, 3}, {5, 6}, {3,4}}\r\n<strong>Output:</strong>\r\n2\r\n<strong>Explanation: \r\n</strong>A vertical line at X = 3 passes through \r\ntwo of the given horizontal lines which \r\nis the maximum possible.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou dont need to read input or print anything. Complete the function <strong>maxIntersections</strong><strong>() </strong>which takes&nbsp;the 2D Matrix&nbsp;<strong>lines[][]&nbsp;</strong>and the integer&nbsp;<strong>N</strong>&nbsp;as input parameters, and returns the maximum intersections possible.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*log(N))<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N&nbsp;&le; 10<sup>5&nbsp;</sup><br />\r\n-10<sup>9&nbsp;</sup>&le; lines[i][0]&nbsp;&le; 10<sup>9</sup><br />\r\nlines[i][0] &le; lines[i][1]&nbsp;&le; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given N horizontal line segments on the X-axis of a 2D plane, represented by a Nx2 matrix `lines[][]`, where each row `lines[i]` contains the start and end point of a line segment. Determine the maximum number of line segments that any single vertical line can intersect.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^9 <= lines[i][0] <= 10^9",
                    "lines[i][0] <= lines[i][1] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nlines[][] = {{1,3}, {2,3}, {1,2}, {4,4}}",
                        "output": "3",
                        "explanation": "A vertical line at X = 2 intersects the line segments {1,3}, {2,3}, and {1,2}, resulting in 3 intersections.  The line segment {4,4} (a point) can also be intersected by a vertical line at x=4 but this yields fewer intersections than a vertical line at x=2."
                    },
                    {
                        "input": "N = 3\nlines[][] = {{1, 3}, {5, 6}, {3,4}}",
                        "output": "2",
                        "explanation": "A vertical line at X = 3 intersects the line segments {1, 3} and {3,4}, resulting in 2 intersections. No other vertical line yields a higher number of intersections."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Only the start and end points of each line segment&nbsp;are required to be considered.</p>",
            "<p>Try to think of an approach by iterating through the line segments from left to right and counting the number of lines whose start point is discovered but end point is not found.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Geometric",
                "slug": "geometric"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "swiggy"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    \n    // Function to find the maximum number of intersections\n    int maxIntersections(vector<vector<int>> lines, int N) {\n    \n        // Create a map to store the start and end points of the lines\n        map<int,int> lineMap;\n        \n        // Traverse through each line\n        for(vector<int> line : lines){\n            int start = line[0], end = line[1] + 1;\n        \n            // Increment the count for the start point and decrement for the end point\n            lineMap[start]++;\n            lineMap[end]--;\n        }\n        \n        int res = 0, cnt = 0;\n        // Traverse through the map\n        for(auto entry : lineMap){\n            // Update the count\n            cnt += entry.second;\n            \n            // Update the maximum number of intersections\n            res = max(res, cnt);\n        }\n        \n        // Return the maximum number of intersections\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Initial Template for Java\r\nclass Solution {\r\n    public int maxIntersections(int[][] lines, int N) {\r\n    \r\n        TreeMap<Integer, Integer> lineMap = new TreeMap<>();\r\n        for(int[] line : lines){\r\n            int start = line[0], end = line[1] + 1;\r\n            lineMap.putIfAbsent(start, 0);\r\n            lineMap.putIfAbsent(end, 0);\r\n            lineMap.put(start, lineMap.get(start) + 1);\r\n            lineMap.put(end, lineMap.get(end) - 1);\r\n        }\r\n        int res = 0, cnt = 0;\r\n        for(Map.Entry<Integer, Integer> entry : lineMap.entrySet()){\r\n            cnt += entry.getValue();\r\n            res = Math.max(res, cnt);\r\n        }\r\n        return res;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def maxIntersections(self, lines, N):\r\n    \r\n        #Creating a dictionary to store the starting and ending points of lines\r\n        lineMap = dict()\r\n        \r\n        #Iterating over the lines\r\n        for line in lines:\r\n            start = line[0] #Starting point of line\r\n            end = line[1] + 1 #Ending point of line (+1 because end point is exclusive)\r\n        \r\n            #If starting point is already present in dictionary, increment the count\r\n            if start in lineMap:\r\n                lineMap[start]+=1\r\n            else: \r\n                #If starting point is not present, add it to dictionary with count 1\r\n                lineMap[start]=1\r\n            \r\n            #If ending point is already present in dictionary, decrement the count\r\n            if end in lineMap:\r\n                lineMap[end]-=1\r\n            else:\r\n                #If ending point is not present, add it to dictionary with count -1\r\n                lineMap[end]=-1\r\n        \r\n        res = 0\r\n        cnt = 0\r\n        \r\n        #Iterating over the dictionary entries in sorted order\r\n        for entry in sorted(lineMap.keys()):\r\n            cnt += lineMap[entry] #Updating the count\r\n            res = max(res, cnt) #Updating the maximum count\r\n        \r\n        return res",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}