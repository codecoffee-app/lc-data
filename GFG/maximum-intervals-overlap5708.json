{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702856,
            "title": "Maximum Intervals Overlap",
            "titleSlug": "maximum-intervals-overlap5708",
            "content": "<p><span style=\"font-size:18px\">Consider a big party where N guests came to it and a log register for guest&rsquo;s entry and exit times was&nbsp;maintained. Find the minimum time at which there were maximum guests at the party. Note that entries in the register are not in any order.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note:&nbsp;</strong>Guests&nbsp;are leaving&nbsp;after the exit times.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 5\nEntry= {1, 2,10, 5, 5}\nExit = {4, 5, 12, 9, 12}\n<strong>Output: </strong>3 5\n<strong>Explanation: </strong>At time 5 there were \n&nbsp;\\t\\tguest number 2, 4 and 5 present.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 7\nEntry= {13, 28, 29, 14, 40, 17, 3}\nExit = {107, 95, 111, 105, 70, 127, 74}\n<strong>Output: </strong>7 40\n<strong>Explanation: </strong>At time 40 there were \n&nbsp;\\t\\tall 7 guests present in the party.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything.&nbsp;</span><span style=\"font-size:18px\">Your task is to complete the function <strong>findMaxGuests() </strong>which takes 3 arguments(Entry array, Exit array, N) and returns the maximum number of guests present at a particular time and that time as a pair.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N*Log(N) ).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>5</sup><br />\n1 &lt;= Entry[i],Exit[i] &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the entry and exit times of N guests at a party, determine the time at which the maximum number of guests were present. The entry and exit times are not necessarily sorted. Guests are considered to have left *after* their exit time.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= Entry[i], Exit[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 5\nEntry= {1, 2, 10, 5, 5}\nExit = {4, 5, 12, 9, 12}",
                        "output": "3 5",
                        "explanation": "At time 5, guests 2, 4, and 5 are present (3 guests total)."
                    },
                    {
                        "input": "N = 7\nEntry= {13, 28, 29, 14, 40, 17, 3}\nExit = {107, 95, 111, 105, 70, 127, 74}",
                        "output": "7 40",
                        "explanation": "At time 40, all 7 guests are present."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Sort both arrays individually and check at what time max guests were in.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "accolite",
            "amazon",
            "visa",
            "directi"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\n\t\n\tpublic:\n\tvector<int> findMaxGuests(int Entry[], int Exit[], int N)\n\t{\n\t   // Sort arrival and exit arrays\n\t   sort(Entry, Entry+N);\n\t   sort(Exit, Exit+N);\n\t \n\t   // guests_in indicates number of guests at a time\n\t   int guests_in = 1, max_guests = 1, time1 = Entry[0];\n\t   int i = 1, j = 0;\n\t \n\t   // Similar to merge in merge sort to process\n\t   // all events in sorted order\n\t   while (i < N && j < N)\n\t   {\n\t      // If next event in sorted order is arrival,\n\t      // increment count of guests\n\t      if (Entry[i] <= Exit[j])\n\t      {\n\t          guests_in++;\n\t \n\t          // Update max_guests if needed\n\t          if (guests_in > max_guests)\n\t          {\n\t              max_guests = guests_in;\n\t              time1 = Entry[i];\n\t          }\n\t          i++;  //increment index of arrival array\n\t      }\n\t      else // If event is exit, decrement count\n\t      {    // of guests.\n\t          guests_in--;\n\t          j++;\n\t      }\n\t   }\n\t    vector<int> res;\n\t    res.push_back(max_guests);\n\t    res.push_back(time1);\n\t    \n\t    return res;\n\t}\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "'use strict';\n\nclass Solution{\n    findMaxGuests(arr, brr, n)\n    {\n\t   arr.sort((a, b) => a - b);\n\t   brr.sort((a, b) => a - b);\n\t \n\t   let guests_in = 1, max_guests = 1, time1 = arr[0];\n\t   let i = 1, j = 0;\n\t \n\t   while (i < n && j < n)\n\t   {\n\t      if (arr[i] <= brr[j])\n\t      {\n\t          guests_in++;\n\t \n\t          if (guests_in > max_guests)\n\t          {\n\t              max_guests = guests_in;\n\t              time1 = arr[i];\n\t          }\n\t          i++;  \n\t      }\n\t      else \n\t      {    \n\t          guests_in--;\n\t          j++;\n\t      }\n\t   }\n\t    let res = [];\n\t    res.push(max_guests);\n\t    res.push(time1);\n\t    \n\t    return res;\n\t}\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}