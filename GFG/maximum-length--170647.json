{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714166,
            "title": "Maximum Length",
            "titleSlug": "maximum-length--170647",
            "content": "<p><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">Given the maximum occurrences of a, b, and c in a string. Your task is to make the string containing only a, b, and c such that no three consecutive characters are the same. If the resultant string equals to a+b+c, return the length (a+b+c) otherwise -1.</span></span></p>\n<p><strong><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">Example 1:</span></span></strong></p>\n<pre><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>Input</strong></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">:</span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">\na = 3, b = 3, c = 3</span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>\nOutput:</strong></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"> </span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">\n9</span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>\nExplanation</strong></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">: </span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">\nNo three consecutive character of</span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">\nthe string \"abcabcabc\" is same.</span></span></pre>\n<p><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>Example 2:</strong></span></span></p>\n<pre><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>Input:</strong></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">\na = 11, b = 2, c = 2</span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>\nOutput: </strong></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">\n-1</span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>\nExplanation</strong></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">: </span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">\nIf we build a string of these character's,</span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">\nthe string will be\"aabaacaabaac<u><strong>aaa</strong></u>\", here\nwe can see that there will be three consecutive <strong>a</strong>. So\nthere </span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">is no solution exist.</span></span></pre>\n<p><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>Your Task:&nbsp;&nbsp;</strong></span></span><br /><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">You don't need to read input or print anything. Your task is to complete the function </span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>solve( )</strong></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"> which takes </span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>integers a, b, and c</strong></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"> as input parameters and <strong>returns </strong>the <strong>string length</strong>. If there is no possible answer return -1.</span></span></p>\n<p><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>Expected Time Complexity:</strong></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"> O(a+b+c)</span></span><br /><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>Expected Auxiliary Space:</strong></span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"> O(1)</span></span></p>\n<p><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><strong>Constraints:</strong></span></span><br /><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">0 &le; a, b, c &le; 10</span></span><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\"><sup>5</sup></span></span><br /><span style=\"font-size: 13.5pt;\"><span style=\"font-family: Arial;\">0 &lt; (a + b + c)&nbsp;</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the maximum occurrences of characters 'a', 'b', and 'c', construct a string using only these characters such that no three consecutive characters are the same. The goal is to use all available characters. If a valid string can be formed using all occurrences of 'a', 'b', and 'c', return the length of the resulting string. Otherwise, return -1.",
                "constraints": [
                    "0 <= a, b, c <= 100000",
                    "0 < (a + b + c)"
                ],
                "testcases": [
                    {
                        "input": "a = 3, b = 3, c = 3",
                        "output": "9",
                        "explanation": "The string \"abcabcabc\" is a valid string because it utilizes all 'a', 'b', and 'c' characters without having three consecutive identical characters."
                    },
                    {
                        "input": "a = 11, b = 2, c = 2",
                        "output": "-1",
                        "explanation": "It's impossible to construct a string using all 11 'a's, 2 'b's and 2 'c's without having three consecutive 'a's."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Greedly Use the most remaining character following given conditions.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\npublic:\n    int solve(int a, int b, int c) {\n        // code here\n        char prev = '0';\n        vector<int> v = {a, b, c};\n\n        string ans;\n\n        // loop until all values are 0\n        while (1) {\n            int ma = 0;\n            char cur;\n\n            // find the maximum value and corresponding character\n            for (int i = 0; i < 3; i++)\n                if (prev != char(i + 'a') && ma < v[i])\n                    ma = v[i], cur = i + 'a';\n\n            // break the loop if all values become 0\n            if (ma == 0)\n                break;\n\n            // append the current character to the answer string\n            ans += cur;\n            v[cur - 'a']--;\n\n            // check if the current character can be appended twice\n            if (ma >= 2 && (prev == '0' || ma > v[prev - 'a'])) {\n                ans += cur;\n                v[cur - 'a']--;\n            }\n            prev = cur;\n        }\n        \n        // check if the answer string has the correct length\n        int n=ans.length();\n        if(n!=a+b+c) return -1;\n        \n        // return the length of the answer string\n        return n;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n\r\n     int solve(int a, int b, int c) {\r\n        // code here\r\n        char prev = '0';\r\n        int v[] = {a, b, c};\r\n\r\n        StringBuilder ans = new StringBuilder(\"\");\r\n\r\n        while (true) {\r\n            int ma = 0;\r\n            char cur = ' ';\r\n\r\n            for (int i = 0; i < 3; i++)\r\n                if (prev != (char)(i + 'a') && ma < v[i]){\r\n                    ma = v[i];\r\n                    cur = (char)(i + 'a');\r\n                }\r\n\r\n            if (ma == 0)\r\n                break;\r\n\r\n            ans.append(String.valueOf(cur));\r\n            v[cur - 'a']--;\r\n            if (ma >= 2 && (prev == '0' || ma > v[prev - 'a'])) {\r\n                ans.append(String.valueOf(cur));\r\n                v[cur - 'a']--;\r\n            }\r\n            prev = cur;\r\n        }\r\n        int n=ans.length();\r\n        if(n!=a+b+c) return -1;\r\n        return n;\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import Counter\r\n\r\nclass Solution():\r\n    def solve(self, a, b, c):\r\n        prev = -1\r\n        v = [a, b, c]\r\n\r\n        ans = \"\"\r\n\r\n        while (1):\r\n            ma = 0\r\n            cur = 0\r\n\r\n            # find the maximum value in v and its corresponding character\r\n            for i in range(3):\r\n                if (prev != i + 97 and ma < v[i]):\r\n                    ma = v[i]\r\n                    cur = i + 97\r\n\r\n            # if the maximum value is 0, break out of the loop\r\n            if (ma == 0):\r\n                break\r\n\r\n            # add the character to the ans string\r\n            ans += chr(cur)\r\n            v[cur - 97]-=1\r\n\r\n            # check if the maximum value is greater than or equal to 2 and \r\n            # if the previous character is not the same and if the maximum value is greater than the next value\r\n            if (ma >= 2 and (prev == -1 or ma > v[prev - 97])):\r\n                ans += chr(cur)\r\n                v[cur - 97]-=1\r\n\r\n            # update prev variable\r\n            prev = cur\r\n            n=len(ans)\r\n            \r\n        # if the length of ans is not equal to the sum of a, b, and c, return -1\r\n        if n != a + b + c:\r\n            return -1\r\n\r\n        return n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    solve(a, b, c) {\n        let prev = -1;\n        let v = [a, b, c];\n\n        let ans = \"\";\n        let n = 0;\n\n        while (1) {\n            let ma = 0;\n            let cur = 0;\n\n            // find the maximum value in v and its corresponding character\n            for (let i = 0; i < 3; i++) {\n                if (prev != i + 97 && ma < v[i]) {\n                    ma = v[i];\n                    cur = i + 97;\n                }\n            }\n\n            // if the maximum value is 0, break out of the loop\n            if (ma == 0) {\n                break;\n            }\n\n            // add the character to the ans string\n            ans += String.fromCharCode(cur);\n            v[cur - 97]-=1;\n\n            // check if the maximum value is greater than or equal to 2 and \n            // if the previous character is not the same and if the maximum value is greater than the next value\n            if (ma >= 2 && (prev == -1 || ma > v[prev - 97])) {\n                ans += String.fromCharCode(cur);\n                v[cur - 97]-=1;\n            }\n\n            // update prev variable\n            prev = cur;\n            n = ans.length;\n        }\n\n        // if the length of ans is not equal to the sum of a, b, and c, return -1\n        if (n !== a + b + c) {\n            return -1;\n        }\n\n        return n;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}