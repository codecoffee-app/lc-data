{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703130,
            "title": "Maximum length Bitonic Subarray",
            "titleSlug": "maximum-length-bitonic-subarray5730",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> containing positive integers, a subarray <strong>arr[i &hellip; j]</strong> is bitonic if there is a <strong>k</strong> with <strong>i &lt;= k &lt;= j</strong> such that <strong>arr[i] &lt;= arr[i+1] &lt;= ... &lt;= arr[k] &gt;= arr[k+1] &gt;= ... arr[j &ndash; 1] &gt;= arr[j]</strong>. Return the maximum length of the bitonic subarray.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [12, 4, 78, 90, 45, 23]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> In the given array, bitonic subarray is 4 &lt;= 78 &lt;= 90 &gt;= 45 &gt;= 23.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 20, 30, 40]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> In the given array, bitonic subarray is 10 &lt;= 20 &lt;= 30 &lt;= 40.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` containing positive integers, find the maximum length of a bitonic subarray. A subarray `arr[i...j]` is considered bitonic if there exists an index `k` (where `i <= k <= j`) such that the subarray elements are first in increasing order up to index `k` and then in decreasing order from index `k` to `j`.  In other words: `arr[i] <= arr[i+1] <= ... <= arr[k] >= arr[k+1] >= ... >= arr[j-1] >= arr[j]`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[12, 4, 78, 90, 45, 23]",
                        "output": "5",
                        "explanation": "The bitonic subarray is [4, 78, 90, 45, 23], where 4 <= 78 <= 90 >= 45 >= 23.  The length of this subarray is 5."
                    },
                    {
                        "input": "[10, 20, 30, 40]",
                        "output": "4",
                        "explanation": "The bitonic subarray is [10, 20, 30, 40], where 10 <= 20 <= 30 <= 40.  Since the array is strictly increasing, the entire array is bitonic with a peak at the last element. The length is 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try using a sliding window, keep track of the subarray if it has two or more maxima/minima then decrease the size of the subarray.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find length of longest bitonic\n    // subarray\n    int bitonic(vector<int> &arr) {\n        int n = arr.size();\n        // if arr is empty\n        if (n == 0)\n            return 0;\n\n        // initializing max_len\n        int maxLen = 1;\n\n        int start = 0;\n        int nextStart = 0;\n\n        int j = 0;\n        while (j < n - 1) {\n            // look for end of ascent\n            while (j < n - 1 && arr[j] <= arr[j + 1])\n                j++;\n\n            // look for end of descent\n            while (j < n - 1 && arr[j] >= arr[j + 1]) {\n\n                // adjusting nextStart;\n                // this will be necessarily executed at least once,\n                // when we detect the start of the descent\n                if (j < n - 1 && arr[j] > arr[j + 1])\n                    nextStart = j + 1;\n\n                j++;\n            }\n\n            // updating maxLen, if required\n            maxLen = max(maxLen, j - (start - 1));\n\n            start = nextStart;\n        }\n\n        return maxLen;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int bitonic(List<Integer> arr) {\n        int n = arr.size();\n        // if arr is empty\n        if (n == 0) return 0;\n\n        // initializing max_len\n        int maxLen = 1;\n\n        int start = 0;\n        int nextStart = 0;\n\n        int j = 0;\n        while (j < n - 1) {\n            // look for end of ascent\n            while (j < n - 1 && arr.get(j) <= arr.get(j + 1)) j++;\n\n            // look for end of descent\n            while (j < n - 1 && arr.get(j) >= arr.get(j + 1)) {\n\n                // adjusting nextStart;\n                // this will be necessarily executed at least once,\n                // when we detect the start of the descent\n                if (j < n - 1 && arr.get(j) > arr.get(j + 1)) nextStart = j + 1;\n\n                j++;\n            }\n\n            // updating maxLen, if required\n            maxLen = Math.max(maxLen, j - (start - 1));\n\n            start = nextStart;\n        }\n\n        return maxLen;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def bitonic(self, arr):\n        n = len(arr)\n        # if arr is empty\n        if n == 0:\n            return 0\n\n        # initializing max_len\n        max_len = 1\n\n        start = 0\n        next_start = 0\n\n        j = 0\n        while j < n - 1:\n            # look for end of ascent\n            while j < n - 1 and arr[j] <= arr[j + 1]:\n                j += 1\n\n            # look for end of descent\n            while j < n - 1 and arr[j] >= arr[j + 1]:\n                # adjusting next_start;\n                # this will be necessarily executed at least once,\n                # when we detect the start of the descent\n                if j < n - 1 and arr[j] > arr[j + 1]:\n                    next_start = j + 1\n                j += 1\n\n            # updating max_len, if required\n            max_len = max(max_len, j - (start - 1))\n\n            start = next_start\n\n        return max_len\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    bitonic(arr) {\n        const n = arr.length;\n        if (n === 0) return 0;\n\n        let maxLen = 1;\n        let start = 0;\n        let nextStart = 0;\n\n        let j = 0;\n        while (j < n - 1) {\n            while (j < n - 1 && arr[j] <= arr[j + 1]) j++;\n\n            while (j < n - 1 && arr[j] >= arr[j + 1]) {\n                if (j < n - 1 && arr[j] > arr[j + 1]) nextStart = j + 1;\n                j++;\n            }\n\n            maxLen = Math.max(maxLen, j - (start - 1));\n            start = nextStart;\n        }\n\n        return maxLen;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}