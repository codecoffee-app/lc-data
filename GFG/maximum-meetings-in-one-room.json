{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709989,
            "title": "Maximum Meetings in One Room",
            "titleSlug": "maximum-meetings-in-one-room",
            "content": "<p><span style=\"font-size: 18px;\">There is one meeting room in a firm. There are&nbsp;<strong>N</strong>&nbsp;meetings in the form of&nbsp;<strong>(S[i], F[i])</strong>&nbsp;where&nbsp;<strong>S[i]</strong>&nbsp;is the start time of meeting&nbsp;<strong>i</strong>&nbsp;and&nbsp;<strong>F[i]</strong>&nbsp;is the finish time of meeting&nbsp;<strong>i</strong>. The task is to find the <strong>maximum</strong> number of meetings that can be accommodated in the meeting room. You can accommodate a meeting if the start time of the meeting is strictly greater than the finish&nbsp;time of the previous meeting. Print all meeting numbers.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>If two meetings can be chosen for the same slot then choose meeting that <strong>finishes earlier</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">N = 6\nS = {1,3,0,5,8,5}\nF = {2,4,6,7,9,9} </span><strong><span style=\"font-size: 18px;\">\nOutput:\n</span></strong><span style=\"font-size: 18px;\">{1,2,4,5}</span><strong><span style=\"font-size: 18px;\">\nExplanation:\n</span></strong><span style=\"font-size: 18px;\">We can attend the 1st meeting from (1 to 2), then the 2nd meeting from (3 to 4), then the 4th meeting from (5 to 7), and the last meeting we can attend is the 5th from (8 to 9). It can be shown that this is the maximum number of meetings we can attend.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">N = 1\nS = {3}\nF = {7}</span>\n<strong><span style=\"font-size: 18px;\">Output:</span></strong>\n<span style=\"font-size: 18px;\">{1}</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong>\n<span style=\"font-size: 18px;\">Since there is only one meeting, we can attend the meeting.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function <strong>maxMeetings()</strong>&nbsp;which takes the arrays <strong>S</strong>, <strong>F,</strong>&nbsp;and its size <strong>N&nbsp;</strong>as inputs and returns the meeting numbers we can attend in <strong>sorted order</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*log(N))<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N&nbsp;&lt;= 10<sup>5</sup><br />0 &lt;= S[i] &lt;= F[i] &lt;= 10<sup>9</sup><br />Sum of N over all test cases doesn't exceeds 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a meeting room and a list of N meetings, each with a start time S[i] and finish time F[i], determine the maximum number of meetings that can be scheduled in the room.  A meeting can be scheduled if its start time is strictly greater than the finish time of the previously scheduled meeting. If multiple meetings can be scheduled in the same slot, prioritize the meeting that finishes earlier. Return a sorted list of the meeting numbers that can be attended.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= S[i] <= F[i] <= 10^9",
                    "Sum of N over all test cases doesn't exceed 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 6\nS = {1,3,0,5,8,5}\nF = {2,4,6,7,9,9}",
                        "output": "{1,2,4,5}",
                        "explanation": "The optimal schedule includes meetings 1 (1 to 2), 2 (3 to 4), 4 (5 to 7), and 5 (8 to 9). This arrangement maximizes the number of meetings held while respecting the time constraints."
                    },
                    {
                        "input": "N = 1\nS = {3}\nF = {7}",
                        "output": "{1}",
                        "explanation": "Since there is only one meeting, it can be attended."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Can we just keep track of the last meeting and check if a new meeting can be accommodated after that meeting?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to find the maximum number of meetings that can be scheduled.\n    vector<int> maxMeetings(int N,vector<int> &S,vector<int> &F){\n\n        //creating a vector of pairs to store the finish time and index of meetings.\n        vector<pair<int,int>> a(N);\n\n        //filling the vector with finish times and corresponding index values.\n        for(int i=0;i<N;i++){\n            a[i].first=F[i];\n            a[i].second=i;\n        }\n\n        //sorting the vector in ascending order based on finish times.\n        sort(a.begin(),a.end());\n\n        //initializing the current time with the finish time of the first meeting.\n        int tym=a[0].first;\n\n        //creating a vector to store the indices of the meetings.\n        vector<int> ans;\n        ans.push_back(a[0].second+1);\n\n        //iterating through the remaining meetings.\n        for(int i=1;i<N;i++){\n            //checking if the start time of the current meeting is greater than the current time.\n            if(S[a[i].second]>tym){\n                //if yes, then the current meeting can be scheduled, so adding its index to the answer vector.\n                ans.push_back(a[i].second+1);\n                //updating the current time with the finish time of the current meeting.\n                tym=a[i].first;\n            }\n        }\n\n        //sorting the answer vector in ascending order.\n        sort(ans.begin(),ans.end());\n\n        //returning the answer vector containing the indices of the meetings.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static ArrayList<Integer> maxMeetings(int N, int[] S, int[] F) {\r\n        int[][] meetings = new int[N][2];\r\n        for (int i = 0; i < N; i++) {\r\n            meetings[i][0] = F[i];\r\n            meetings[i][1] = i;\r\n        }\r\n        Arrays.sort(meetings, Comparator.comparingInt(a -> a[0]));\r\n        int tym = meetings[0][0];\r\n        ArrayList<Integer> ans = new ArrayList<>();\r\n        ans.add(meetings[0][1] + 1);\r\n        for (int i = 1; i < N; i++) {\r\n            if (S[meetings[i][1]] > tym) {\r\n                ans.add(meetings[i][1] + 1);\r\n                tym = meetings[i][0];\r\n            }\r\n        }\r\n        Collections.sort(ans);\r\n        return ans;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import List\r\nclass Solution:\r\n    def maxMeetings(self, N : int, S : List[int], F : List[int]) -> List[int]:\r\n        # creating a list of tuples to store the finish time and index of meetings.\r\n        a = [(F[i], i) for i in range(N)]\r\n\r\n        # sorting the list in ascending order based on finish times.\r\n        a.sort()\r\n\r\n        # initializing the current time with the finish time of the first meeting.\r\n        tym = a[0][0]\r\n\r\n        # creating a list to store the indices of the meetings.\r\n        ans = [a[0][1] + 1]\r\n\r\n        # iterating through the remaining meetings.\r\n        for i in range(1, N):\r\n            # checking if the start time of the current meeting is greater than the current time.\r\n            if S[a[i][1]] > tym:\r\n                # if yes, then the current meeting can be scheduled,\r\n                # so adding its index to the answer list and updating the current time.\r\n                ans.append(a[i][1] + 1)\r\n                tym = a[i][0]\r\n\r\n        # returning the answer list containing the indices of the meetings.\r\n        return sorted(ans)\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}