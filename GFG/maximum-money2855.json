{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703863,
            "title": "House Robber",
            "titleSlug": "maximum-money2855",
            "content": "<p><span style=\"font-size: 18px;\">Given a street of<strong> N</strong> houses (a row of houses), each house having <strong>K </strong>amount of money kept inside; now there is a thief who is going to steal this money but he has a constraint/rule that he cannot steal/rob two adjacent houses. Find the maximum money he can rob.<strong> </strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>N = </strong>5 , <strong>K = </strong>10</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">30</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">The Robber can rob from the first, third\nand fifth houses which will result in 30.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>N = </strong>2 , <strong>K = </strong>12</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">12</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">The Robber can only rob from the first\nor second which will result in 12.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>maximizeMoney()</strong> which takes 2 Integers N and K as input and returns the answer.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(1)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N,K &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A thief is planning to rob houses on a street. There are `N` houses in a row, and each house contains `K` amount of money. The thief cannot rob two adjacent houses due to security constraints. Determine the maximum amount of money the thief can steal.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= K <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 5, K = 10",
                        "output": "30",
                        "explanation": "The thief can rob houses 1, 3, and 5, resulting in a total of 3 * 10 = 30."
                    },
                    {
                        "input": "N = 2, K = 12",
                        "output": "12",
                        "explanation": "The thief can only rob one of the two houses. Therefore, the maximum amount is 12."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Think of the different ways the Robber can rob the houses when N is Odd and when N is even.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "flipkart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    //Function to maximize the money earned.\n    int maximizeMoney(int N , int K) {\n        \n        int ans;\n        \n        //if N is odd, calculate ans according to the formula.\n        if(N%2==1)\n            ans = ((N/2)+1)*K;\n        //if N is even, calculate ans according to the formula.\n        else\n            ans = (N/2)*K;\n            \n        //return the maximum money earned.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static int maximizeMoney(int N , int K) {\r\n        \r\n        int ans;\r\n        \r\n        if(N%2==1)\r\n            ans = ((N/2)+1)*K;        // ans calculated when N is odd\r\n        else\r\n            ans = (N/2)*K;            // ans calculated when N is even\r\n            \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def maximizeMoney(self, N , K):\r\n        \r\n        if N%2==1:\r\n            ans = ((N//2)+1)*K        # ans calculated when N is odd\r\n        else:\r\n            ans = (N//2)*K            # ans calculated when N is even\r\n        \r\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n\n    maximizeMoney(N,K){\n        let ans; // Initialize a variable to store the result.\n        if(N%2==1){ // Check if N is odd or even.\n            ans = (Math.floor(N/2)+1)*K; // If N is odd, calculate the result using the formula (N/2 + 1) * K.\n        } else {\n            ans = Math.floor(N/2)*K; // If N is even, calculate the result using the formula (N/2) * K.\n        }\n        return ans; // Return the result.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}