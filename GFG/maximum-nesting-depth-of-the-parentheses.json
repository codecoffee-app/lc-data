{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712069,
            "title": "Maximum Nesting Depth of the Parentheses",
            "titleSlug": "maximum-nesting-depth-of-the-parentheses",
            "content": "<p><span style=\"font-size:18px\">A string is a <strong>valid parentheses string</strong> (denoted <strong>VPS</strong> ) if is meets any one of the following:</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">It is an empty string<strong> &quot;&quot;</strong>, or a single character not equals to <strong>&quot; ( &quot;&nbsp;</strong> or&nbsp;<strong> &quot; ) &quot; </strong>,</span></li>\r\n\t<li><span style=\"font-size:18px\">It can be written as<strong> AB</strong> (<strong>A </strong>concatenated with <strong>B</strong> ),<br />\r\n\twhere<strong> A</strong> and <strong>B</strong> are <strong>VPS&#39;s</strong> , or</span></li>\r\n\t<li><span style=\"font-size:18px\">It can be written as <strong>(A)</strong> , where <strong>A</strong> is a <strong>VPS</strong>.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\">We can similarly define the <strong>nesting depth</strong> depth (S) of any VPS <strong>S</strong> as follows:</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\"><strong>depth (&quot;&quot;) = 0</strong></span></li>\r\n\t<li><span style=\"font-size:18px\"><strong>depth (C) = 0</strong>, where <strong>C</strong> is a string with a single character excluding &quot;(&quot; and &quot;)&quot; ,</span></li>\r\n\t<li><span style=\"font-size:18px\"><strong>depth (A + B) = max (depth (A) , depth (B)) </strong>, where <strong>A</strong> and <strong>B</strong> are VPS&#39;s.</span></li>\r\n\t<li><span style=\"font-size:18px\"><strong>depth ( &quot;(&quot; + A + &quot;)&quot; ) = 1 + depth (A)</strong> , where <strong>A</strong> is a VPS.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\">For example ,<strong> &quot;&quot;</strong> , <strong>&quot; ( ) ( ) &quot;</strong> , and <strong>&quot; ( ) ( ( ) ( ) ) &quot;</strong> and <strong>VPS&#39;s</strong> (with nesting depths 0 , 1, and 2), and <strong>&quot; ) ( &quot;</strong> and <strong>&quot; ( ( )</strong> <strong>&quot;&nbsp;</strong> &nbsp;are not <strong>VPS&#39;s</strong>.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\">Given a <strong>VPS</strong> represented as string <strong>S</strong>&nbsp;, return the nesting depth of <strong>S.</strong></span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\"><span style=\"font-size:18px\"><strong>Input: </strong>s&nbsp;= &quot; ((5+2)(3+4)((6))) &quot;<br />\r\n<strong>Output:&nbsp;</strong>3<br />\r\n<strong>Explanation:</strong>&nbsp;Character &#39;6&#39; is inside three nested parentheses.</span></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\"><span style=\"font-size:18px\"><strong>Input:&nbsp;</strong>&quot; (43+4++3)((3)(9))+1 &quot;<br />\r\n<strong>Output:</strong>&nbsp;2<br />\r\n<strong>Explanation:</strong>&nbsp;Character &#39;3&#39; and &#39;9&#39; both are inside two nested parentheses.</span></div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read&nbsp;input or print anything. Your task is to&nbsp;complete the function <strong>maxDepth() </strong>which takes<strong>&nbsp;</strong>the string s&nbsp;as input parameters and returns nesting depth of the given string s&nbsp;.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|s|)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=|s|&lt;=100<br />\r\ns consists of digits <strong>0-9</strong> and characters <strong>&#39; + &#39;</strong> , <strong>&#39; - &#39;</strong> ,<strong> &#39; * &#39;</strong> , <strong>&#39; / &#39;</strong> , <strong>&#39; ( &#39;</strong> , and <strong>&#39; ) &#39;.</strong><br />\r\nIt is guaranteed that parentheses expression <strong>s</strong>&nbsp;is a&nbsp;<strong>VPS</strong>.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the maximum depth of parentheses in a string\n    int maxDepth(string s) {\n        int ans = 0, cur = 0;\n        \n        // Iterate through the characters of the string\n        for (char& c : s) {\n            // Increase current depth if a '(' is encountered\n            if (c == '(')\n                ans = max(ans, ++cur);\n            // Decrease current depth if a ')' is encountered\n            if (c == ')')\n                cur--;\n        }\n        \n        // Return the maximum depth\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int maxDepth(String s) {\n        // initialize variables to keep track of maximum depth and current depth\n        int ans = 0, cur = 0;\n        \n        // iterate through each character in the string\n        for (char c : s.toCharArray()) {\n            // if the character is an opening parenthesis, increase the current depth and update the maximum depth\n            if (c == '(') ans = Math.max(ans, ++cur);\n            // if the character is a closing parenthesis, decrease the current depth\n            if (c == ')') cur--;\n        }\n        \n        // return the maximum depth\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to find the maximum depth of parentheses in a given string.\n    def maxDepth(self, s):\n        opening = ans = 0\n        \n        #iterating over each character in the string.\n        for ch in s:\n\n            #Checking if the character is an opening parenthesis,\n            #increase the count of opening parentheses.\n            if ch == '(':\n                opening += 1\n\n            #Checking if the character is a closing parenthesis,\n            #decrease the count of opening parentheses.\n            elif ch == ')':\n                opening -= 1\n\n            #Updating the answer with the maximum count of opening parentheses.\n            ans = max(ans, opening)\n        \n        #Returning the maximum depth of parentheses.\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {string} s\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution\r\n{\r\n    //Function to find the maximum depth of parentheses.\r\n    maxDepth(s)\r\n    {\r\n        let opening = 0;\r\n        let ans = 0;\r\n        \r\n        //iterating over each character in the string.\r\n        for(let i=0; i<s.length; i++){\r\n            let ch = s.charAt(i);\r\n\r\n            //Checking if the character is an opening parenthesis,\r\n            //increase the count of opening parentheses.\r\n            if (ch === '('){\r\n                opening += 1;\r\n            }\r\n\r\n            //Checking if the character is a closing parenthesis,\r\n            //decrease the count of opening parentheses.\r\n            else if (ch === ')'){\r\n                opening -= 1;\r\n            }\r\n\r\n            //Updating the answer with the maximum count of opening parentheses.\r\n            ans = Math.max(ans, opening);\r\n        }\r\n        \r\n        //Returning the maximum depth of parentheses.\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int maxDepth(string s)\n    {\n        int ans = 0;\n        int cur = 0;\n\n        // Iterate through the characters of the string\n        foreach (char c in s)\n        {\n            // Increase current depth if a '(' is encountered\n            if (c == '(')\n                ans = Math.Max(ans, ++cur);\n            // Decrease current depth if a ')' is encountered\n            if (c == ')')\n                cur--;\n        }\n\n        // Return the maximum depth\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}