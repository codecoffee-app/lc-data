{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700616,
            "title": "Maximum Node Level",
            "titleSlug": "maximum-node-level",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary tree. Find the level in the binary tree which has the maximum number of nodes.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [2, 1, 3, 4, 6, N, 8, N, N, 5]\n\\t2\n    /    \\ \n   1\\t3\n /   \\     \\\n4    6\\t8\n     / \n    5<strong>\nOutput: </strong>2<strong>\nExplanation: </strong>The level 2 with nodes 4, 6 and 8 is the level with maximum number of nodes. <br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [2, 1, 3, 4, 7, N, 8, N, N, 5]\n\\t2\n    /    \\ \n   1\\t3\n /   \\     \\\n4    7\\t8\n     / \n    5<strong>\nOutput: </strong>2<strong>\nExplanation: </strong>The level 2 with nodes 4, 7 and 8 is the level with maximum number of nodes. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [2, 1, 3, 4, 7, N, 8, N, N, 6]\n\\t2\n    /    \\ \n   1\\t3\n /   \\     \\\n4    7\\t8\n     / \n    9<strong>\nOutput: </strong>2<strong>\nExplanation: </strong>The level 2 with nodes 4, 7 and 8 is the level with maximum number of nodes. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= number of nodes&lt;=10<sup>5<br /></sup>1&lt;= node-&gt;data &lt;=10<sup>5</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the level with the maximum number of nodes.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2, 1, 3, 4, 6, N, 8, N, N, 5]",
                        "output": "2",
                        "explanation": "Level 2 contains nodes 4, 6, and 8, which is the level with the most nodes."
                    },
                    {
                        "input": "[2, 1, 3, 4, 7, N, 8, N, N, 5]",
                        "output": "2",
                        "explanation": "Level 2 contains nodes 4, 7, and 8, which is the level with the most nodes."
                    },
                    {
                        "input": "[2, 1, 3, 4, 7, N, 8, N, N, 6]",
                        "output": "2",
                        "explanation": "Level 2 contains nodes 4, 7, and 8, which is the level with the most nodes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try modifying the standard level-order traversal of a Binary Tree using Queue.</span><br /><span >You just need something to differentiate between the two levels. Something through which you know that the current level is completed and the next level has started. How can you do that?</span><br /><span >Can you demarcate&nbsp;the levels via a NULL node in the queue.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "vmware",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxNodeLevel(Node *root) {\n\n        if (root == NULL)\n            return -1;\n\n        queue<Node *> q;\n        q.push(root);\n\n        // Current level\n        int level = 0;\n\n        // Maximum Nodes at same level\n        int max = INT_MIN;\n\n        // Level having maximum Nodes\n        int level_no = 0;\n\n        while (1) {\n            // Count Nodes in a level\n            int NodeCount = q.size();\n\n            if (NodeCount == 0)\n                break;\n\n            // If it is maximum till now\n            // Update level_no to current level\n            if (NodeCount > max) {\n                max = NodeCount;\n                level_no = level;\n            }\n\n            // Pop complete current level\n            while (NodeCount > 0) {\n                Node *Node = q.front();\n                q.pop();\n                if (Node->left != NULL)\n                    q.push(Node->left);\n                if (Node->right != NULL)\n                    q.push(Node->right);\n                NodeCount--;\n            }\n\n            // Increment for next level\n            level++;\n        }\n\n        return level_no;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // function to find the level\n    // having maximum number of Nodes\n    public static int maxNodeLevel(Node root) {\n        if (root == null) return -1;\n\n        Queue<Node> q = new LinkedList<Node>();\n        q.add(root);\n\n        // Current level\n        int level = 0;\n\n        // Maximum Nodes at same level\n        int max = Integer.MIN_VALUE;\n\n        // Level having maximum Nodes\n        int level_no = 0;\n\n        while (true) {\n            // Count Nodes in a level\n            int NodeCount = q.size();\n\n            if (NodeCount == 0) break;\n\n            // If it is maximum till now\n            // Update level_no to current level\n            if (NodeCount > max) {\n                max = NodeCount;\n                level_no = level;\n            }\n\n            // Pop complete current level\n            while (NodeCount > 0) {\n                Node Node = q.peek();\n                q.remove();\n                if (Node.left != null) q.add(Node.left);\n                if (Node.right != null) q.add(Node.right);\n                NodeCount--;\n            }\n\n            // Increment for next level\n            level++;\n        }\n\n        return level_no;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# function to find the level\n# having Maximum number of Nodes\nclass Solution:\n\n    def maxNodeLevel(self, root):\n        if (root == None):\n            return -1\n\n        q = Queue()\n        q.put(root)\n\n        # Current level\n        level = 0\n\n        # Maximum Nodes at same level\n        Max = -999999999999\n\n        # Level having Maximum Nodes\n        level_no = 0\n\n        while (1):\n\n            # Count Nodes in a level\n            NodeCount = q.qsize()\n\n            if (NodeCount == 0):\n                break\n\n            # If it is Maximum till now\n            # Update level_no to current level\n            if (NodeCount > Max):\n                Max = NodeCount\n                level_no = level\n\n            # Pop complete current level\n            while (NodeCount > 0):\n                Node = q.queue[0]\n                q.get()\n                if (Node.left != None):\n                    q.put(Node.left)\n                if (Node.right != None):\n                    q.put(Node.right)\n                NodeCount -= 1\n\n            # Increment for next level\n            level += 1\n\n        return level_no\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/*\nclass Node\n{\n    constructor(x){\n        this.data=x;\n        this.left=null;\n        this.right=null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n * @return {number} \n*/\nclass Solution {\n  \tmaxNodeLevel(root){\n  \t\t//code here\n        if (root === null)\n            return -1;\n\n        let q = [];\n        q.push(root);\n\n        // Current level\n        let level = 0;\n\n        // Maximum Nodes at same level\n        let max = Number.MIN_SAFE_INTEGER;\n\n        // Level having maximum Nodes\n        let level_no = 0;\n\n        while (true) {\n            // Count Nodes in a level\n            let NodeCount = q.length;\n\n            if (NodeCount === 0)\n                break;\n\n            // If it is maximum till now\n            // Update level_no to current level\n            if (NodeCount > max) {\n                max = NodeCount;\n                level_no = level;\n            }\n\n            // Pop complete current level\n            while (NodeCount > 0) {\n                let Node = q.shift();\n                if (Node.left !== null)\n                    q.push(Node.left);\n                if (Node.right !== null)\n                    q.push(Node.right);\n                NodeCount--;\n            }\n\n            // Increment for next level\n            level++;\n        }\n\n        return level_no;\n  \t}\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}