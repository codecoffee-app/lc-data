{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703983,
            "title": "Maximum Number of 1s",
            "titleSlug": "maximum-number-of-1s1304",
            "content": "<p><span style=\"font-size:18px\">Given binary string <strong>s</strong> consisting of 0s and 1s only. You are allowed to do exactly one move that is you have to choose two indices <strong>i</strong> and <strong>j</strong> (1 &le; i &le; j &le; |str| where |str| is string length) and toggle all the characters at position <strong>k</strong> where i &le; k &le; j. Toggling means changing 0 to 1 and 1 to 0. The task is to count the maximum possible number of 1&#39;s after exactly one move.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: s = &quot;</span><span style=\"font-size:20px\">1010&quot;</span><span style=\"font-size:18px\">\n<strong>Output:</strong> 3\n<strong>Explanation</strong>: You can make move on [2, 2]\nor [2, 4]</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>s = &quot;0000&quot;\n<strong>Output: </strong>4\n<strong>Explanation</strong>: Make move on [1, 4]</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Complete the function <strong><code>maxOnes</code>()&nbsp;</strong>which takes <strong>s</strong> as an input parameter and returns the maximum number of 1&#39;s count.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(<strong>N</strong>)<br />\n<strong>Expected Auxiliary Space:</strong> O(<strong>N</strong>)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string `s` consisting of 0s and 1s, you are allowed to perform exactly one move. In this move, you choose two indices `i` and `j` (1 \u2264 i \u2264 j \u2264 |s|, where |s| is the length of the string) and toggle all characters at positions `k` such that i \u2264 k \u2264 j. Toggling means changing 0 to 1 and 1 to 0. The task is to determine the maximum possible number of 1s in the string after performing this single move.",
                "constraints": [
                    "1 \u2264 N \u2264 10^5, where N is the length of the string `s`."
                ],
                "testcases": [
                    {
                        "input": "1010",
                        "output": "3",
                        "explanation": "Toggling the substring from index 1 to 1 (inclusive, assuming 1-based indexing) changes the string to \"0010\", resulting in two 1s. Toggling the substring from index 1 to 4 changes the string to \"0101\", resulting in two 1s.  Toggling substring from index 2 to 2 yields \"1110\" and 3 ones.  Toggling substring from index 2 to 4 yields \"1101\" and 3 ones. Thus the maximum number of 1s achievable is 3."
                    },
                    {
                        "input": "0000",
                        "output": "4",
                        "explanation": "Toggling the entire string from index 1 to 4 (inclusive, assuming 1-based indexing) changes the string to \"1111\", resulting in four 1s. This is the optimal move."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Treat 1 as -1 and 0 as 1. Then find subarray with maximum sum</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n\tpublic:\n\tint maxOnes(string str)\n\t{\n\t\t//getting the size of the string\n\t\tint n = str.size();\n\t\t//variable to count the number of ones\n\t\tint cnt = 0, maxi;\n\t\t\n\t\t//arrays to store the values and dynamic programming table\n\t\tint b[n], dp[n];\n\n\t\t//initializing the arrays with 0\n\t\tmemset(b, 0, sizeof(b));\n\t\tmemset(dp, 0, sizeof(b));\n\t\t\n\t\t//converting 0's to 1's and counting the number of ones\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tif(str[i]=='1')\n\t\t\t{\n\t\t\t\tb[i]=-1;\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\telse\n\t\t\t\tb[i] = 1;\n\t\t}\n\t\t\n\t\t//initializing the maximum value and the first element of dp\n\t\tmaxi = dp[0] = b[0];\n\t\t\n\t\t//iterating over the array to calculate the maximum number of ones\n\t\tfor(int i = 1; i < n; i++)\n\t\t{ \n    \t\t//calculating the maximum value including the current element\n    \t\tdp[i] = max(b[i], b[i] + dp[i-1]);\n    \t\t//updating the maximum value if necessary\n    \t\tmaxi = max(dp[i], maxi);\n\t\t}\n\t\t\n\t\t//returning the maximum number of ones\n\t\treturn maxi + cnt;\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int maxOnes(string s)\n    {\n        int n = s.Length;\n\t\tint cnt = 0, maxi;\n\t\t\n\t\tint[] b = new int[n];\n\t\tint[] dp = new int[n];\n\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tif (s[i] == '1')\n\t\t\t{\n\t\t\t\tb[i] = -1;\n\t\t\t\tcnt++;\n\t\t\t}\n\t\t\telse\n\t\t\t\tb[i] = 1;\n\t\t}\n\t\t\n\t\tmaxi = dp[0] = b[0];\n        \n\t\tfor (int i = 1; i < n; i++)\n\t\t{ \n    \t\tdp[i] = Math.Max(b[i], b[i] + dp[i-1]);\n    \t\tmaxi = Math.Max(dp[i], maxi);\n\t\t}\n\t\t\n\t\treturn maxi + cnt;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}