{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706369,
            "title": "Maximum number of 2X2 squares",
            "titleSlug": "maximum-number-of-22-squares",
            "content": "<p><span style=\"font-size:18px\">Given the base (in units) of a right-angled isoceles traingle, find the maximum number of 2X2 squares that can fit in the triangle with given base.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> 8</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 6</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">Please refer below diagram for explanation.\r\n<img alt=\"squares-in-triangle\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/squares-in-triangle1.png\" style=\"height:337px; width:390px\" /></span>\r\n\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input : </strong>7\r\n<strong>Output : </strong>3\r\n<strong>Explanation : </strong>In the base we can keep 2 squares\r\nand above the two squares we can only keep 1 square.  \r\nSo the total number of squares are equal to 3.</span>\r\n</pre>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><strong><span style=\"font-size:18px\">Your task :</span></strong></div>\r\n\r\n<div><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function <strong>numberOfSquares()</strong> which takes the base of the triangle as input and returns the maximum number of squares that can be fit into the triangle with given base.</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(1)</span></div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong> O(1)</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><strong><span style=\"font-size:18px\">Constraints :</span></strong></div>\r\n\r\n<div><span style=\"font-size:18px\">1 &lt;= N &lt;= 10^9</span></div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the base (in units) of a right-angled isosceles triangle, find the maximum number of 2x2 squares that can fit within the triangle.",
                "constraints": [
                    "1 <= N <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "8",
                        "output": "6",
                        "explanation": "With a base of 8, you can fit two squares along the base.  Above these two, you can fit one less, so another square. This pattern continues, leading to a total of 2 + 1 +2 +1 = 6 squares or (8/2 -1) * (8/2)/2 where base/2 is even and (8/2) * (8/2 -1)/2 where base/2 is odd."
                    },
                    {
                        "input": "7",
                        "output": "3",
                        "explanation": "With a base of 7, you can fit one squares along the base then one along the next base level and one again . So the total number of squares is 1 + 2 = 3 or ((7/2 )* (7/2 +1))/2 "
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the formula for sum of AP.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    long long int numberOfSquares(long long int base)\r\n    {\r\n        base = (base - 2);\r\n    \r\n    // Since each square has base of\r\n    // length of 2\r\n    \tbase = floor(base / 2);\r\n    \r\n    \treturn base * (base + 1) / 2;\r\n    }\r\n    \r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    public static long numberOfSquares(long base)\n    {\n        // subtract 2 from the base to account for the corner squares\n        base = base-2;\n    \t// divide the updated base by 2 to get the number of squares on each side\n    \tbase = base / 2;\n    \t// calculate the number of squares using the formula (base * (base + 1)) / 2\n    \treturn base * (base + 1) / 2;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to calculate the number of squares given the base length\n    def numberOfSquares(self, base):\n        # We subtract 2 from the base because the first and last squares are not fully enclosed\n        base -= 2\n        # We divide the adjusted base by 2 because each subsequent row has 1 less square than the row above it\n        base //= 2\n        # We use the formula for the sum of the first n natural numbers to calculate the total number of squares\n        return (base*(base+1)//2)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {BigInt} base\r\n * @returns {BigInt}\r\n*/\r\nclass Solution {\r\n    \r\n    numberOfSquares(base)\r\n    {\r\n        base = (base - 2n);\r\n    \r\n        // Since each square has base of\r\n        // length of 2\r\n    \tbase = base / 2n;\r\n    \r\n    \treturn (base * (base + 1n)) / 2n;        \r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public long numberOfSquares(long Base)\n    {\n        long baseMinusTwo = Base - 2;\n    \n        // Since each square has a base length of 2\n        long baseDividedByTwo = (long)Math.Floor((double)baseMinusTwo / 2);\n    \n        return baseDividedByTwo * (baseDividedByTwo + 1) / 2;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}