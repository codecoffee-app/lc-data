{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703259,
            "title": "Maximum number of characters between any two same character",
            "titleSlug": "maximum-number-of-characters-between-any-two-same-character4552",
            "content": "<p><span style=\"font-size: 18px;\">Given a string containing lower and uppercase alphabets, the task is to find the maximum number of characters between any two same (case sensitivity) character in the string. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS = \"socks\"\n<strong>Output:</strong> 3\n<strong>Explanation</strong>: There are 3 characters between\nthe two occurrences of 's'.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nS = \"FoR\"\n<strong>Output:</strong> -1\n<strong>Explanation</strong>: No repeating character present.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>maxChars()&nbsp;</strong>which takes the string S as input and returns the maximum number of characters between any two same characters in the string.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=|S|&lt;=10<sup>5</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` containing lowercase and uppercase English alphabets, find the maximum number of characters between any two identical characters (case-sensitive) within the string. If no repeating characters exist, return -1.",
                "constraints": [
                    "1 <= |S| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "socks",
                        "output": 3,
                        "explanation": "The character 's' appears twice. There are 3 characters between the two occurrences of 's'."
                    },
                    {
                        "input": "FoR",
                        "output": -1,
                        "explanation": "There are no repeating characters in the string 'FoR'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We basically need the first and the last occurrence of all the characters in the string.<br />\nThough, it&#39;s not necessary to calculate both. Calculating any (either first or the last occurrence) should be enough.</span></p>\n\n<p><span style=\"font-size:18px\">Can you do it in a single string traversal?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "int maxChars (string s)\n{\n    // computes the first occurrence of every character in the string\n    int firstOcc[256];\n    for (int i = 0; i < 256; ++i)\n        firstOcc[i] = -1;\n\n    int res = -1;\n    for (int i = 0; i < s.length (); ++i)\n    {\n        // if its the first occurrence of the current character\n        if (firstOcc[(int)s[i]] == -1)\n            firstOcc[(int)s[i]] = i;\n        // else we check if we got a better answer\n        else\n            res = max (res, i - firstOcc[(int)s[i]] - 1);\n    }\n\n    return res;\n}\n// Contributed By: Pranay Bansal\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the maximum character in the string.\n    public int maxChars(string S)\n    {\n        int[] firstOcc = new int[256];\n        for (int i = 0; i < 256; ++i)\n            firstOcc[i] = -1;\n\n        int res = -1;\n        for (int i = 0; i < S.Length; ++i)\n        {\n            // if its the first occurrence of the current character\n            if (firstOcc[(int)S[i]] == -1)\n                firstOcc[(int)S[i]] = i;\n            // else we check if we got a better answer\n            else\n                res = Math.Max(res, i - firstOcc[(int)S[i]] - 1);\n        }\n\n        return res;\n    }\n\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}