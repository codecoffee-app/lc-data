{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703450,
            "title": "Maximum number of partitions that can be sorted individually to make sorted",
            "titleSlug": "maximum-number-of-partitions-that-can-be-sorted-individually-to-make-sorted2926",
            "content": "<p><span style=\"font-size: 18px;\">Given an array<strong> arr</strong><strong>&nbsp;</strong>such that elements are in range<strong> </strong>[0, 1, ....n-1]. Our task is to divide the array into the maximum number of partitions that can be sorted individually and then concatenated to make the whole array sorted. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [2, 1, 0, 3]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>If divide arr[] into two partitions [2, 1, 0] and [3], sort then and concatenate then, we get the whole array sorted.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [2, 1, 0, 3, 4, 5] <strong>\nOutput:</strong> 4 <br /><strong>Explanation: </strong></span><span >If divide arr[] into two partitions [2, 1, 0], [3], [4], [5] sort then and concatenate then, we get the whole array sorted.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><sup><br /></sup>1 &le; arr[i] &le; 10<sup>5</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of non-negative integers where each element is in the range [0, n-1], determine the maximum number of partitions you can create such that sorting each partition individually and then concatenating them results in a sorted array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2, 1, 0, 3]",
                        "output": "2",
                        "explanation": "We can divide the array into partitions [2, 1, 0] and [3]. Sorting each partition yields [0, 1, 2] and [3]. Concatenating them gives [0, 1, 2, 3], which is the sorted array."
                    },
                    {
                        "input": "[2, 1, 0, 3, 4, 5]",
                        "output": "4",
                        "explanation": "We can divide the array into partitions [2, 1, 0], [3], [4], and [5]. Sorting each partition yields [0, 1, 2], [3], [4], and [5]. Concatenating them gives [0, 1, 2, 3, 4, 5], which is the sorted array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The idea is based on the fact that if an element arr[i] is maximum of prefix arr[0..i], then we can make a partition ending with arr[i].</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxPartitions(vector<int>& arr) {\n        int n = arr.size();\n        int ans = 0, max_so_far = 0;\n        for (int i = 0; i < n; ++i) {\n\n            // Find maximum in prefix arr[0..i]\n            max_so_far = max(max_so_far, arr[i]);\n\n            // If maximum so far is equal to index,\n            // we can make a new partition ending at\n            // index i.\n            if (max_so_far == i)\n                ans++;\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxPartitions(int[] arr) {\n        int n = arr.length;\n        int ans = 0, max_so_far = 0;\n        for (int i = 0; i < n; ++i) {\n            // Find maximum in prefix arr[0..i]\n            max_so_far = Math.max(max_so_far, arr[i]);\n\n            // If maximum so far is equal to index,\n            // we can make a new partition ending at\n            // index i.\n            if (max_so_far == i) ans++;\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxPartitions(self, arr):\n        n = len(arr)\n        ans = 0\n        max_so_far = 0\n        for i in range(n):\n            # Find maximum in prefix arr[0..i]\n            max_so_far = max(max_so_far, arr[i])\n\n            # If maximum so far is equal to index,\n            # we can make a new partition ending at\n            # index i.\n            if max_so_far == i:\n                ans += 1\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxPartitions(arr) {\n        let n = arr.length;\n        let ans = 0, max_so_far = 0;\n        for (let i = 0; i < n; ++i) {\n            // Find maximum in prefix arr[0..i]\n            max_so_far = Math.max(max_so_far, arr[i]);\n\n            // If maximum so far is equal to index,\n            // we can make a new partition ending at\n            // index i.\n            if (max_so_far == i) ans++;\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}