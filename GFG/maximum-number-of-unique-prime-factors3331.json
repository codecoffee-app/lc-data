{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704188,
            "title": "Maximum number of unique prime factors",
            "titleSlug": "maximum-number-of-unique-prime-factors3331",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>N</strong>, find the maximum number of unique prime factors any number can have in range [1, N].</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>3</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">1</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">No number in the range 1 to 3\ncan have more than 1 unique\nPrime factor. So, the Output is 1.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>500</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">4</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">No number in the range 1 to 500\ncan have more than 4 unique\nPrime factors. So, the Output is 4.\nAn example of a number with 4\nunique Prime Factors is 210.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>maxUniquePrimeFactors()</strong> which takes an Integer N as input and returns the answer.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(Largest Prime Factor of N)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>18</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N, determine the maximum number of distinct prime factors that any number within the range [1, N] can have.",
                "constraints": [
                    "1 <= N <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "1",
                        "explanation": "No number between 1 and 3 (inclusive) has more than one unique prime factor. For example, 2 has one prime factor (2) and 3 has one prime factor (3)."
                    },
                    {
                        "input": "500",
                        "output": "4",
                        "explanation": "No number between 1 and 500 (inclusive) has more than four unique prime factors. An example of a number with four unique prime factors is 210 (2 * 3 * 5 * 7)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The Poduct of the first 17 Primes is more than 10<sup>18</sup>. So, N can have a maximum of 16 unique Prime Factors</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    int maxUniquePrimeFactors(long long N) {\n        \n        bool prime[105]; \n        memset(prime, true, sizeof(prime)); \n        \n        long long prod = 1;\n        int res = 0;\n      \n        for (int p=2; p<=100; p++) \n        { \n            // If prime[p] is not changed, then it is a prime \n            if (prime[p] == true) \n            { \n                // Update all multiples of p greater than or  \n                // equal to the square of it \n                // numbers which are multiple of p and are \n                // less than p^2 are already been marked.  \n                for (int i=p*p; i<=100; i += p) \n                    prime[i] = false;\n                prod*=p;    // Multiply every prime to the product.\n                if(prod>N)\n                    return res;    // If the product becomes greater than N, then return res.\n                res++;         // Increment res if Product is still less than N.\n            } \n        } \n        \n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int maxUniquePrimeFactors(Long N) {\n        \n        boolean prime[] = new boolean[105]; \n        for(int i=0;i<=100;i++) \n            prime[i] = true; \n        \n        Long prod = 1L;\n        int res = 0;\n      \n        for (int p=2; p<=100; p++) \n        { \n            // If prime[p] is not changed, then it is a prime \n            if (prime[p] == true) \n            { \n                // Update all multiples of p greater than or  \n                // equal to the square of it \n                // numbers which are multiple of p and are \n                // less than p^2 are already been marked.  \n                for (int i=p*p; i<=100; i += p) \n                    prime[i] = false;\n                prod*=p;    // Multiply every prime to the product.\n                if(prod>N)\n                    return res;    // If the product becomes greater than N, then return res.\n                res++;         // Increment res if Product is still less than N.\n            } \n        } \n        \n        return res;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def maxUniquePrimeFactors(self, N):\n        \n        # Create a boolean array \"prime[0..n]\" and initialize \n        #  all entries it as true. A value in prime[i] will \n        # finally be false if i is Not a prime, else true. \n        prime = [True for i in range(105)] \n        p = 2\n        \n        prod=1\n        res=0\n        \n        while (p <= 100): \n              \n            # If prime[p] is not changed, then it is a prime \n            if (prime[p] == True): \n                  \n                # Update all multiples of p \n                for i in range(p * p, 105 , p): \n                    prime[i] = False\n                prod *= p       # Multiply every prime to the product.\n                if prod > N:\n                    return res    # If the product becomes greater than N, then return res.\n                res+=1         # Increment res if Product is still less than N.\n            p += 1\n            \n        return res",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Solution {\n    //Function to find the maximum number of unique prime factors\n    maxUniquePrimeFactors(N) {\n        let prime = new Array(105).fill(true);\n        let p = 2;\n        let prod = 1;\n        let res = 0;\n        \n        while (p <= 100) {\n            if (prime[p] == true) {\n                for (let i = p * p; i < 105; i += p) {\n                    prime[i] = false;\n                }\n                prod *= p;\n                if (prod > N) {\n                    return res;\n                }\n                res += 1;\n            }\n            p += 1;\n        }\n        \n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}