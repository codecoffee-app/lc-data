{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703293,
            "title": "Maximum number of zeroes",
            "titleSlug": "maximum-number-of-zeroes4048",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of integers, the task is to find the number that has the maximum number of zeroes. If there are no zeroes then print <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>If there are multiple numbers with the same (max) number of zeroes then print the Maximum number among them.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 20, 3000, 9999, 200]\n<strong>Output:</strong> 3000\n<strong>Explanation</strong>: 3000 contains 3 zero's in it.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4]\n<strong>Output: </strong>-1\n<strong>Explanation:</strong> No zero is present.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*log10(max(arr[i])).&nbsp;<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &lt; arr[i] &lt; 10<sup>100</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the number with the maximum number of zeroes. If multiple numbers have the same maximum number of zeroes, return the largest among them. If no zeroes are present in any of the numbers, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^100"
                ],
                "testcases": [
                    {
                        "input": "[10, 20, 3000, 9999, 200]",
                        "output": "3000",
                        "explanation": "The number 3000 contains the maximum number of zeroes (3) compared to other numbers in the array."
                    },
                    {
                        "input": "[1, 2, 3, 4]",
                        "output": "-1",
                        "explanation": "No zeroes are present in any of the numbers in the array."
                    },
                    {
                        "input": "[100, 10, 1000, 1]",
                        "output": "1000",
                        "explanation": "100, 10, and 1000 has 2, 1, 3 zeroes respectively. Since 1000 has maximum zeroes, the output is 1000"
                    },
                    {
                        "input": "[100, 200, 300]",
                        "output": "300",
                        "explanation": "100, 200, 300 have 2 zeroes. So, the maximum number is returned which is 300."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For every number run another while loop and find a number check for char '0' in the string number.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "oracle"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  private:\n    bool compareStrings(string &str1, string &str2) {\n        if (str1.length() != str2.length()) {\n            return str1.length() > str2.length();\n        }\n\n        for (size_t i = 0, j = 0; i < str1.length() && j < str2.length(); i++, j++) {\n            if (str1[i] > str2[j]) {\n                return true;\n            } else if (str1[i] != str2[j]) {\n                return false;\n            }\n        }\n\n        return false;\n    }\n\n  public:\n    string maxZero(vector<string> &arr) {\n        string result = \"\";\n        int maxZeroCount = -1;\n\n        for (string &numStr : arr) {\n            int zeroCount = count(numStr.begin(), numStr.end(), '0');\n            if (zeroCount > maxZeroCount && zeroCount != 0) {\n                maxZeroCount = zeroCount;\n                result = numStr;\n            } else if (zeroCount == maxZeroCount) {\n                if (compareStrings(numStr, result)) {\n                    result = numStr;\n                }\n            }\n        }\n\n        return result.empty() ? \"-1\" : result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    private int countZeros(String numStr) {\n        int zeroCount = 0;\n        for (char ch : numStr.toCharArray()) {\n            if (ch == '0') {\n                zeroCount++;\n            }\n        }\n        return zeroCount;\n    }\n\n    private boolean compareStrings(String str1, String str2) {\n        if (str1.length() != str2.length()) {\n            return str1.length() > str2.length();\n        }\n        return str1.compareTo(str2) > 0;\n    }\n\n    public String maxZero(ArrayList<String> arr) {\n        String result = \"\";\n        int maxZeroCount = -1;\n\n        for (String numStr : arr) {\n            int zeroCount = countZeros(numStr);\n            if (zeroCount > maxZeroCount && zeroCount != 0) {\n                maxZeroCount = zeroCount;\n                result = numStr;\n            } else if (zeroCount == maxZeroCount) {\n                if (compareStrings(numStr, result)) {\n                    result = numStr;\n                }\n            }\n        }\n\n        return result.isEmpty() ? \"-1\" : result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def compareStrings(self, str1, str2):\n        if len(str1) != len(str2):\n            return len(str1) > len(str2)\n\n        for ch1, ch2 in zip(str1, str2):\n            if ch1 > ch2:\n                return True\n            elif ch1 < ch2:\n                return False\n\n        return False\n\n    def maxZero(self, arr):\n        result = \"\"\n        maxZeroCount = -1\n\n        for numStr in arr:\n            zeroCount = numStr.count('0')\n            if zeroCount > maxZeroCount and zeroCount != 0:\n                maxZeroCount = zeroCount\n                result = numStr\n            elif zeroCount == maxZeroCount:\n                if self.compareStrings(numStr, result):\n                    result = numStr\n\n        return result if result else \"-1\"\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Method to compare two strings\n    compareStrings(str1, str2) {\n        if (str1.length !== str2.length) {\n            return str1.length > str2.length;\n        }\n\n        for (let i = 0; i < str1.length; i++) {\n            if (i >= str2.length) break;\n            if (str1[i] > str2[i]) {\n                return true;\n            } else if (str1[i] < str2[i]) {\n                return false;\n            }\n        }\n\n        return false;\n    }\n\n    // Method to find the string with the maximum number of zeros\n    maxZero(arr) {\n        let result = \"\";\n        let maxZeroCount = -1;\n\n        for (const numStr of arr) {\n            const zeroCount = (numStr.match(/0/g) || []).length;\n            if (zeroCount > maxZeroCount && zeroCount !== 0) {\n                maxZeroCount = zeroCount;\n                result = numStr;\n            } else if (zeroCount === maxZeroCount) {\n                if (this.compareStrings(numStr, result)) {\n                    result = numStr;\n                }\n            }\n        }\n\n        return result || \"-1\";\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}