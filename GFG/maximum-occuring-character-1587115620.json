{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701299,
            "title": "Most Frequent Character",
            "titleSlug": "maximum-occuring-character-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a string&nbsp;<strong>s </strong>of lowercase alphabets. The task is to find the maximum occurring character in the string <strong>s</strong>. If more than one character occurs the maximum number of times then print the lexicographically smaller character.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">s = \"testsample\"\n<strong>Output:</strong> 'e'<strong>\nExplanation: </strong>e is the character which is having the highest frequency.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">s = \"output\"\n<strong>Output: </strong>'t'<strong>\nExplanation: </strong> t and u are the characters with the same frequency, but t is lexicographically smaller.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |s| &le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` containing only lowercase alphabets, find the character that appears most frequently. If multiple characters have the same maximum frequency, return the lexicographically smallest character among them.",
                "constraints": [
                    "1 <= |s| <= 100"
                ],
                "testcases": [
                    {
                        "input": "testsample",
                        "output": "e",
                        "explanation": "The character 'e' has the highest frequency in the string."
                    },
                    {
                        "input": "output",
                        "output": "t",
                        "explanation": "Both 't' and 'u' have the same frequency, but 't' is lexicographically smaller than 'u'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to find the maximum occurring character in a string.\n    char getMaxOccuringChar(string str) {\n        vector<int> hash(26, 0);\n\n        // using hash table to store count of each character.\n        for (auto i : str)\n            hash[i - 'a']++;\n        int maxi = 0;\n        char ch;\n\n        // iterating over the hash table.\n        for (int i = 0; i < 26; i++) {\n            // we keep storing the maximum value in hash\n            // table and its corresponding character.\n            if (hash[i] > maxi) {\n                maxi = hash[i];\n                ch = i + 'a';\n            }\n        }\n        // returning the character with maximum occurrences.\n        return ch;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    // Function to find the maximum occurring character in a string.\n    public static char getMaxOccuringChar(String line) {\n        StringBuffer sb = new StringBuffer();\n        char[] s = line.toCharArray();\n        int[] arr = new int[26];\n        int max = -1;\n        char result = '\\u0000';\n\n        // using hash table to store count of each character.\n        for (int i = 0; i < s.length; i++) {\n            char c = s[i];\n            if (c != ' ') {\n                arr[c - 'a']++;\n            }\n        }\n\n        // iterating over the hash table.\n        for (int i = 0; i < arr.length; i++) {\n            // we keep storing the maximum value in hash\n            // table and its corresponding character.\n            if (arr[i] > max) {\n                max = arr[i];\n                result = (char)(i + 'a');\n            }\n        }\n        // returning the character with maximum occurrences.\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to find the maximum occurring character in a string.\n    def getMaxOccurringChar(self, s):\n\n        #using hash table to store count of each character.\n        occurences = [0 for i in range(256)]\n\n        for char in s:\n            occurences[ord(char)] += 1\n\n        max_occurence = 0\n        character = '~'\n\n        #iterating over the hash table.\n        for i in range(256):\n\n            #we keep storing the maximum value in hash\n            #table and its corresponding character.\n            if (occurences[i] > max_occurence):\n                character = chr(i)\n                max_occurence = occurences[i]\n\n        #returning the character with maximum occurrences.\n        return character\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {string} str\n * @returns {string}\n */\nclass Solution {\n    // Function to find the maximum occurring character in a string.\n    getMaxOccuringChar(str) {\n        let hash = new Array(256);\n        hash.fill(0);\n\n        // using hash table to store count of each character.\n        for (let i = 0; i < str.length; i++) {\n            hash[str.charCodeAt(i) - 97]++;\n        }\n        let max_index = 0;\n\n        // iterating over the hash table.\n        for (let i = 1; i < 26; i++) {\n            // we keep storing the maximum value in hash\n            // table and its corresponding character.\n            if (hash[i] > hash[max_index]) max_index = i;\n        }\n        // returning the character with maximum occurrences.\n        return String.fromCharCode(max_index + 97);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}