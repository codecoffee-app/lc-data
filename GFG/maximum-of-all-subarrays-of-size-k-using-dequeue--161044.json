{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 880227,
            "title": "Maximum Of All Subarrays Of Size K Using Dequeue",
            "titleSlug": "maximum-of-all-subarrays-of-size-k-using-dequeue--161044",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> and an integer <strong>k</strong>. Find the maximum for each and every contiguous subarray of size k.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:&nbsp;</strong>arr[] = [1, 2, 3, 1, 4, 5, 2, 3, 6], k = 3.<br /><strong>Output:&nbsp;</strong>3 3 4 5 5 5 6<br /><strong>Explanation:&nbsp;</strong>Starting from first subarray of size k = 3, we have 3 as maximum. Moving the window forward, maximum element are as 3, 4, 5, 5, 5 and 6.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:&nbsp;</strong>arr[] = [8, 5, 10, 7, 9, 4, 15, 12, 90, 13], k = 4.<br /><strong>Output:&nbsp;</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">10 10 10 15 15 90 90</span><br /><strong>Explanation:&nbsp;</strong></span><span >Starting from first subarray of size k =4, we have 10 as maximum. Moving the window forward maximum elements are as follows 10 10 10 15 15 90 90.</span></pre>\n<p><strong style=\"font-size: 18px;\">Constraints:</strong><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">1 &le; arr.size() &le; 10</span><sup>7</sup><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">1 &le; k &le; arr.size()</span><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">0 &le; arr[i] &lt;= 10</span><sup>7</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of integers and an integer `k`, find the maximum value within each contiguous subarray of size `k`.",
                "constraints": [
                    "1 <= arr.size() <= 10^7",
                    "1 <= k <= arr.size()",
                    "0 <= arr[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 3, 1, 4, 5, 2, 3, 6], k = 3",
                        "output": "3 3 4 5 5 5 6",
                        "explanation": "For the subarray [1, 2, 3], the maximum is 3. For [2, 3, 1], the maximum is 3. Continuing this process, we find the maximum for each subarray of size 3."
                    },
                    {
                        "input": "arr[] = [8, 5, 10, 7, 9, 4, 15, 12, 90, 13], k = 4",
                        "output": "10 10 10 15 15 90 90",
                        "explanation": "For the subarray [8, 5, 10, 7], the maximum is 10. For [5, 10, 7, 9], the maximum is 10.  Continuing in this manner yields the given output sequence."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to solve this using window sliding technique. But, be aware, simple window sliding doesn&#39;t work. You should think of some data structure to act as window of size k with some feature of getting max of k elements in O(1) time.</span></p>\n\n<p>&nbsp;</p>",
            "<p>We create a <a href=\"https://www.geeksforgeeks.org/deque-set-1-introduction-applications/\" target=\"_blank\">Deque</a>, <em>Qi </em>of capacity k, that stores only useful elements of current window of k elements. An element is useful if it is in current window and is greater than all other elements on left side of it in current window. We process all array elements one by one and maintain <em>Qi </em>to contain useful elements of current window and these useful elements are maintained in sorted order. The element at front of the <em>Qi </em>is the largest and element at rear of <em>Qi </em>is the smallest of current window.</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nvector<int> maxOfSubarrays(vector<int>& arr, int k) {\n    vector<int> res;\n    deque<int> q;\n\n    int i = 0;\n    for (i = 0; i < k; i++) {\n\n        while ((!q.empty()) && (arr[i] >= arr[q.back()]))\n            q.pop_back();\n\n        q.push_back(i);\n    }\n\n    for (; i < arr.size(); i++) {\n\n        res.push_back(arr[q.front()]);\n\n        while ((!q.empty()) && (q.front() <= i - k))\n            q.pop_front();\n\n        while ((!q.empty()) && (arr[i] >= arr[q.back()]))\n            q.pop_back();\n\n        q.push_back(i);\n    }\n\n    res.push_back(arr[q.front()]);\n    q.pop_front();\n\n    return res;\n}\n",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}