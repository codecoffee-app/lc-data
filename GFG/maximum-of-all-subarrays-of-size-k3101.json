{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701349,
            "title": "K Sized Subarray Maximum",
            "titleSlug": "maximum-of-all-subarrays-of-size-k3101",
            "content": "<p><span >Given an array <strong><code>arr[]</code></strong> of integers and an integer <strong><code>k</code></strong>, your task is to find the maximum value for each contiguous subarray of size <code>k</code>. The output should be an array of maximum values corresponding to each contiguous subarray.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 1, 4, 5, 2, 3, 6], k = 3\n<strong>Output: </strong>[3, 3, 4, 5, 5, 5, 6] \n<strong>Explanation: </strong>\n1st contiguous subarray = [1 2 3] max = 3\n2nd contiguous subarray = [2 3 1] max = 3\n3rd contiguous subarray = [3 1 4] max = 4\n4th contiguous subarray = [1 4 5] max = 5\n5th contiguous subarray = [4 5 2] max = 5\n6th contiguous subarray = [5 2 3] max = 5\n7th contiguous subarray = [2 3 6] max = 6<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [8, 5, 10, 7, 9, 4, 15, 12, 90, 13], k = 4\n<strong>Output: </strong>[10, 10, 10, 15, 15, 90, 90]\n<strong>Explanation: \n</strong>1st contiguous subarray = [8 5 10 7], max = 10\n2nd contiguous subarray = [5 10 7 9], max = 10\n3rd contiguous subarray = [10 7 9 4], max = 10\n4th contiguous subarray = [7 9 4 15], max = 15\n5th contiguous subarray = [9 4 15 12], max = 15\n6th contiguous subarray = [4 15 12 90], max = 90\n7th contiguous subarray = [15 12 90 13], max = 90</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [5, 1, 3, 4, 2, 6], k = 1\n<strong>Output: </strong>[5, 1, 3, 4, 2, 6]\n<strong>Explanation: \n</strong>When k = 1, each element in the array is its own subarray, so the output is simply the same array\n</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; k &le; arr.size()<br />0 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use a deque to maintain indices of array elements, ensuring the maximum of the current window is always at the front.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "directi",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> maxOfSubarrays(const vector<int>& arr, int k) {\n\n        // to store the results\n        vector<int> res;\n\n        // create deque to store max values\n        deque<int> dq(k);\n\n        // Process first k (or first window) elements of array\n        for (int i = 0; i < k; ++i) {\n\n            // For every element, the previous smaller elements\n            // are useless so remove them from dq\n            while (!dq.empty() && arr[i] >= arr[dq.back()]) {\n\n                // Remove from rear\n                dq.pop_back();\n            }\n\n            // Add new element at rear of queue\n            dq.push_back(i);\n        }\n\n        // Process rest of the elements, i.e., from arr[k] to arr[n-1]\n        for (int i = k; i < arr.size(); ++i) {\n\n            // The element at the front of the queue is the largest\n            // element of previous window, so store it\n            res.push_back(arr[dq.front()]);\n\n            // Remove the elements which are out of this window\n            while (!dq.empty() && dq.front() <= i - k) {\n\n                // Remove from front of queue\n                dq.pop_front();\n            }\n\n            // Remove all elements smaller than the currently being\n            // added element (remove useless elements)\n            while (!dq.empty() && arr[i] >= arr[dq.back()]) {\n                dq.pop_back();\n            }\n\n            // Add current element at the rear of dq\n            dq.push_back(i);\n        }\n\n        // store the maximum element of last window\n        res.push_back(arr[dq.front()]);\n\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static ArrayList<Integer> maxOfSubarrays(int[] arr, int k) {\n        int n = arr.length;\n\n        // to store the results\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\n        // create deque to store max values\n        Deque<Integer> dq = new ArrayDeque<Integer>();\n\n        // Process first k (or first window) elements of array\n        for (int i = 0; i < k; ++i) {\n\n            // For every element, the previous smaller elements\n            // are useless so remove them from dq\n            while (!dq.isEmpty() && arr[i] >= arr[dq.peekLast()]) {\n\n                // Remove from rear\n                dq.pollLast();\n            }\n\n            // Add new element at rear of queue\n            dq.addLast(i);\n        }\n\n        // Process rest of the elements, i.e., from arr[k] to arr[n-1]\n        for (int i = k; i < arr.length; ++i) {\n\n            // The element at the front of the queue is the largest\n            // element of previous window, so store it\n            res.add(arr[dq.peekFirst()]);\n\n            // Remove the elements which are out of this window\n            while (!dq.isEmpty() && dq.peekFirst() <= i - k) {\n\n                // Remove from front of queue\n                dq.pollFirst();\n            }\n\n            // Remove all elements smaller than the currently being\n            // added element (remove useless elements)\n            while (!dq.isEmpty() && arr[i] >= arr[dq.peekLast()]) {\n                dq.pollLast();\n            }\n\n            // Add current element at the rear of dq\n            dq.addLast(i);\n        }\n\n        // store the maximum element of last window\n        res.add(arr[dq.peekFirst()]);\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    #Function to find maximum of each subarray of size k.\n    def maxOfSubarrays(self, arr, k):\n\n        res = []\n        d = deque()\n        n = len(arr)\n\n        #iterating over first k elements or first window of array.\n        for i in range(k):\n\n            #for every element, the previously smaller elements\n            #are useless so removing them from deque.\n            while len(d) and arr[i] >= arr[d[-1]]:\n                d.pop()\n\n            #adding new element at back of deque.\n            d.append(i)\n\n        #iterating over the rest of the elements.\n        for i in range(k, n):\n\n            #the element at the front of the deque is the largest\n            #element of previous window, so adding it to the list.\n            res.append(arr[d[0]])\n\n            #removing the elements which are out of this window.\n            while len(d) and d[0] <= i - k:\n                d.popleft()\n\n            #removing all elements smaller than the element being\n            #added currently (removing useless elements).\n            while len(d) and arr[i] >= arr[d[-1]]:\n                d.pop()\n\n            #adding new element at back of deque.\n            d.append(i)\n\n        #the element at the front of the deque is the largest\n        #element of last window, so adding it to the list.\n        res.append(arr[d[0]])\n        d.popleft()\n\n        #returning the list.\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution {\n    // Function to find the maximum of each subarray of size k.\n    public List<int> maxOfSubarrays(int[] arr, int k) {\n        int n = arr.Length;\n\n        // to store the results\n        List<int> res = new List<int>();\n\n        // create deque to store max values\n        LinkedList<int> dq = new LinkedList<int>();\n\n        // Process first k (or first window) elements of array\n        for (int i = 0; i < k; ++i) {\n\n            // For every element, the previous smaller elements\n            // are useless so remove them from dq\n            while (dq.Count > 0 && arr[i] >= arr[dq.Last.Value]) {\n\n                // Remove from rear\n                dq.RemoveLast();\n            }\n\n            // Add new element at rear of queue\n            dq.AddLast(i);\n        }\n\n        // Process rest of the elements, i.e., from arr[k] to arr[n-1]\n        for (int i = k; i < arr.Length; ++i) {\n\n            // The element at the front of the queue is the largest\n            // element of previous window, so store it\n            res.Add(arr[dq.First.Value]);\n\n            // Remove the elements which are out of this window\n            while (dq.Count > 0 && dq.First.Value <= i - k) {\n\n                // Remove from front of queue\n                dq.RemoveFirst();\n            }\n\n            // Remove all elements smaller than the currently being\n            // added element (remove useless elements)\n            while (dq.Count > 0 && arr[i] >= arr[dq.Last.Value]) {\n                dq.RemoveLast();\n            }\n\n            // Add current element at the rear of dq\n            dq.AddLast(i);\n        }\n\n        // store the maximum element of last window\n        res.Add(arr[dq.First.Value]);\n\n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    // Function to find maximum of each subarray of size k.\n    maxOfSubarrays(arr, k) {\n        let n = arr.length;\n\n        // to store the results\n        let res = [];\n\n        // create deque to store max values\n        let dq = [];\n\n        // Process first k (or first window) elements of array\n        for (let i = 0; i < k; ++i) {\n\n            // For every element, the previous smaller elements\n            // are useless so remove them from dq\n            while (dq.length > 0 && arr[i] >= arr[dq[dq.length - 1]]) {\n\n                // Remove from rear\n                dq.pop();\n            }\n\n            // Add new element at rear of queue\n            dq.push(i);\n        }\n\n        // Process rest of the elements, i.e., from arr[k] to arr[n-1]\n        for (let i = k; i < arr.length; ++i) {\n\n            // The element at the front of the queue is the largest\n            // element of previous window, so store it\n            res.push(arr[dq[0]]);\n\n            // Remove the elements which are out of this window\n            while (dq.length > 0 && dq[0] <= i - k) {\n\n                // Remove from front of queue\n                dq.shift();\n            }\n\n            // Remove all elements smaller than the currently being\n            // added element (remove useless elements)\n            while (dq.length > 0 && arr[i] >= arr[dq[dq.length - 1]]) {\n                dq.pop();\n            }\n\n            // Add current element at the rear of dq\n            dq.push(i);\n        }\n\n        // store the maximum element of last window\n        res.push(arr[dq[0]]);\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}