{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701344,
            "title": "Max of min for every window size",
            "titleSlug": "maximum-of-minimum-for-every-window-size3453",
            "content": "<p><span >Given an array of integers <strong>arr[]</strong>, the task is to find the <strong>maximum of the minimum values</strong> for every possible window size in the array, where the window size ranges from <strong>1 to arr.size()</strong>.</span></p>\n<p><span >More formally, for each window size <strong>k</strong>, determine the smallest element in all windows of size <strong>k</strong>, and then find the largest value among these minimums where 1&lt;=k&lt;=arr.size().</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 20, 30, 50, 10, 70, 30]\n<strong>Output: </strong>[70, 30, 20, 10, 10, 10, 10] <strong>\nExplanation: \n</strong>1. First element in output indicates maximum of minimums of all </span><span style=\"font-size: 18px;\">windows of size 1.</span><span style=\"font-size: 18px;\"> Minimums of windows of size 1 are [10], [20], [30], [50], [10], [</span><span style=\"font-size: 18px;\">70] and [30]. Maximum of these minimums is 70. </span>\n<span style=\"font-size: 18px;\">2. Second element in output indicates maximum of minimums of all </span><span style=\"font-size: 18px;\">windows of size 2.</span><span style=\"font-size: 18px;\"> Minimums of windows of size 2 are [10], [20], [30], [10], [10], </span><span style=\"font-size: 18px;\">and [30]. Maximum of these minimums is 30. <br /></span><span style=\"font-size: 18px;\">3. Third element in output indicates maximum of minimums of all </span><span style=\"font-size: 18px;\">windows of size 3. </span><span style=\"font-size: 18px;\">Minimums of windows of size 3 are [10], [20], [10], [10] and [10].</span><span style=\"font-size: 18px;\"> Maximum of these minimums is 20. <br /></span><span style=\"font-size: 18px;\">Similarly other elements of output are computed.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 20, 30]\n<strong>Output: </strong>[30, 20, 10]<strong>\nExplanation: </strong>First element in output indicates maximum of minimums of all </span><span style=\"font-size: 18px;\">windows of size 1. Minimums of windows of size 1 are [10] , [20] , [30]. Maximum of these minimums are 30 and similarly other outputs can be computed</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    vector<int> maxOfMins(vector<int>& arr) {\n        int n = arr.size();\n        vector<int> res(n, 0);\n        stack<int> s;\n\n        // Array to store the length of the window\n        // where each element is the minimum\n        vector<int> len(n, 0);\n\n        // Traverse through array to determine\n        // window sizes using a stack\n        for (int i = 0; i < n; i++) {\n\n            // Process elements to find next smaller\n            // element on the left\n            while (!s.empty() && arr[s.top()] >= arr[i]) {\n                int top = s.top();\n                s.pop();\n                int windowSize = s.empty() ? i : i - s.top() - 1;\n                len[top] = windowSize;\n            }\n            s.push(i);\n        }\n\n        // Process remaining elements in the stack\n        // for right boundaries\n        while (!s.empty()) {\n            int top = s.top();\n            s.pop();\n            int windowSize = s.empty() ? n : n - s.top() - 1;\n            len[top] = windowSize;\n        }\n\n        // Fill res[] based on len[] and arr[]\n        for (int i = 0; i < n; i++) {\n            int windowSize = len[i] - 1; // 0-based indexing\n            res[windowSize] = max(res[windowSize], arr[i]);\n        }\n\n        // Fill remaining entries in res[] to ensure\n        // all are max of min\n        for (int i = n - 2; i >= 0; i--)\n            res[i] = max(res[i], res[i + 1]);\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static ArrayList<Integer> maxOfMins(int[] arr) {\n        int n = arr.length;\n        ArrayList<Integer> res = new ArrayList<>(Collections.nCopies(n, 0));\n        Stack<Integer> s = new Stack<>();\n\n        // Array to store the length of the window\n        // where each element is the minimum\n        ArrayList<Integer> lenArr = new ArrayList<>(Collections.nCopies(n, 0));\n\n        // Traverse through array to determine\n        // window sizes using a stack\n        for (int i = 0; i < n; i++) {\n            // Process elements to find next smaller\n            // element on the left\n            while (!s.isEmpty() && arr[s.peek()] >= arr[i]) {\n                int top = s.pop();\n                int windowSize = s.isEmpty() ? i : i - s.peek() - 1;\n                lenArr.set(top, windowSize);\n            }\n            s.push(i);\n        }\n\n        // Process remaining elements in the stack\n        // for right boundaries\n        while (!s.isEmpty()) {\n            int top = s.pop();\n            int windowSize = s.isEmpty() ? n : n - s.peek() - 1;\n            lenArr.set(top, windowSize);\n        }\n\n        // Fill ressult based on lenArr[] and arr[]\n        for (int i = 0; i < n; i++) {\n            int windowSize = lenArr.get(i) - 1; // 0-based indexing\n            res.set(windowSize, Math.max(res.get(windowSize), arr[i]));\n        }\n\n        // Fill remaining entries in res[] to ensure\n        // all are max of min\n        for (int i = n - 2; i >= 0; i--)\n            res.set(i, Math.max(res.get(i), res.get(i + 1)));\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxOfMins(self, arr):\n        n = len(arr)\n        res = [0] * n\n        s = []\n\n        # Array to store the length of the window\n        # where each element is the minimum\n        lenArr = [0] * n\n\n        # Traverse through array to determine\n        # window sizes using a stack\n        for i in range(n):\n\n            # Process elements to find next smaller\n            # element on the left\n            while s and arr[s[-1]] >= arr[i]:\n                top = s.pop()\n                windowSize = i if not s else i - s[-1] - 1\n                lenArr[top] = windowSize\n            s.append(i)\n\n        # Process remaining elements in the stack\n        # for right boundaries\n        while s:\n            top = s.pop()\n            windowSize = n if not s else n - s[-1] - 1\n            lenArr[top] = windowSize\n\n        # Fill res[] based on len_arr[] and arr[]\n        for i in range(n):\n            windowSize = lenArr[i] - 1  # 0-based indexing\n            res[windowSize] = max(res[windowSize], arr[i])\n\n        # Fill remaining entries in res[] to ensure\n        # all are max of min\n        for i in range(n - 2, -1, -1):\n            res[i] = max(res[i], res[i + 1])\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public List<int> maxOfMins(int[] arr) {\n        int n = arr.Length;\n        List<int> res = new List<int>(new int[n]);\n        Stack<int> s = new Stack<int>();\n\n        // Array to store the length of the window where each element is the minimum\n        List<int> lenArr = new List<int>(new int[n]);\n\n        // Traverse through array to determine\n        // window sizes using a stack\n        for (int i = 0; i < n; i++) {\n\n            // Process elements to find next smaller\n            // element on the left\n            while (s.Count > 0 && arr[s.Peek()] >= arr[i]) {\n                int top = s.Pop();\n                int windowSize = s.Count == 0 ? i : i - s.Peek() - 1;\n                lenArr[top] = windowSize;\n            }\n            s.Push(i);\n        }\n\n        // Process remaining elements in the stack\n        // for right boundaries\n        while (s.Count > 0) {\n            int top = s.Pop();\n            int windowSize = s.Count == 0 ? n : n - s.Peek() - 1;\n            lenArr[top] = windowSize;\n        }\n\n        // Fill res[] based on lenArr[] and arr[]\n        for (int i = 0; i < n; i++) {\n            int windowSize = lenArr[i] - 1;        // 0-based indexing\n            if (windowSize >= 0 && windowSize < n) // Prevent out-of-bounds access\n                res[windowSize] = Math.Max(res[windowSize], arr[i]);\n        }\n\n        // Fill remaining entries in res[] to ensure\n        // all are max of min\n        for (int i = n - 2; i >= 0; i--) {\n            res[i] = Math.Max(res[i], res[i + 1]);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {number[]}\n */\n\nclass Solution {\n    maxOfMins(arr) {\n        let n = arr.length;\n        let res = new Array(n).fill(0);\n        let s = [];\n\n        // Array to store the length of the window\n        // where each element is the minimum\n        let len = new Array(n).fill(0);\n\n        // Traverse through array to determine\n        // window sizes using a stack\n        for (let i = 0; i < n; i++) {\n\n            // Process elements to find next smaller\n            // element on the left\n            while (s.length > 0 && arr[s[s.length - 1]] >= arr[i]) {\n                let top = s.pop();\n                let windowSize = s.length === 0 ? i : i - s[s.length - 1] - 1;\n                len[top] = windowSize;\n            }\n            s.push(i);\n        }\n\n        // Process remaining elements in the stack\n        // for right boundaries\n        while (s.length > 0) {\n            let top = s.pop();\n            let windowSize = s.length === 0 ? n : n - s[s.length - 1] - 1;\n            len[top] = windowSize;\n        }\n\n        // Fill res[] based on len[] and arr[]\n        for (let i = 0; i < n; i++) {\n            let windowSize = len[i] - 1; // 0-based indexing\n            res[windowSize] = Math.max(res[windowSize], arr[i]);\n        }\n\n        // Fill remaining entries in res[] to ensure\n        // all are max of min\n        for (let i = n - 2; i >= 0; i--) {\n            res[i] = Math.max(res[i], res[i + 1]);\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}