{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700611,
            "title": "Maximum path sum from any node",
            "titleSlug": "maximum-path-sum-from-any-node",
            "content": "<p><span >Given a binary tree,&nbsp;the task is to find the maximum path sum. The path may start and end at any node in the tree.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>root[] = [10, 2, 10, 20, 1, N, -25, N, N, N, N, 3, 4]\n<strong>Output: </strong>42<strong>\nExplanation: </strong><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700611/Web/Other/blobid3_1736948585.png\" alt=\"\" width=\"481\" height=\"307\" /><br />Max path sum is represented using green colour nodes in the above binary tree.</span></pre>\n<pre><span ><strong>Input: </strong>root[] = [-17, 11, 4, 20, -2, 10]\n<strong>Output: </strong>31<strong>\nExplanation: <br /></strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700611/Web/Other/blobid1_1736947534.png\" alt=\"\" width=\"479\" height=\"418\" /><br />Max path sum is represented using green colour nodes in the above binary tree.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>3</sup><br />-10<sup>4</sup> &le; node-&gt;data &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the maximum path sum. The path may start and end at any node in the tree.",
                "constraints": [
                    "1 <= number of nodes <= 10^3",
                    "-10^4 <= node value <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[10, 2, 10, 20, 1, N, -25, N, N, N, N, 3, 4]",
                        "output": "42",
                        "explanation": "The maximum path sum in this tree is achieved by the path including nodes 20, 2, 10, 10. The sum of these nodes is 42."
                    },
                    {
                        "input": "[-17, 11, 4, 20, -2, 10]",
                        "output": "31",
                        "explanation": "The maximum path sum in this tree is achieved by the path including nodes 20, 11.  The sum of these nodes is 31."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "google",
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end Complete Function template for C++\nclass Solution {\n  public:\n    // Function to calculate maximum path sum.\n    int findMaxUtil(Node *root, int &res) {\n        // Base case for recursion.\n        if (root == NULL)\n            return 0;\n\n        // l and r store maximum path sum going recursively through left and\n        // right subtrees of root(current node) respectively.\n        int l = findMaxUtil(root->left, res);\n        int r = findMaxUtil(root->right, res);\n\n        // max path sum for parent call of root. This path must\n        // include at most one child of root.\n        int max_single = max(max(l, r) + root->data, root->data);\n\n        // max_top represents the sum when the node under consideration is the root\n        // of the max sum path and no ancestors of root are there in max sum path.\n        int max_top = max(max_single, l + r + root->data);\n\n        // Storing the maximum result.\n        res = max(res, max_top);\n\n        return max_single;\n    }\n\n    // Function to return maximum path sum from any node in a tree.\n    int findMaxSum(Node *root) {\n        int res = INT_MIN;\n        findMaxUtil(root, res);\n\n        // Returning the result.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    class Res {\n        public int val;\n    }\n\n    // Function to calculate maximum path sum.\n    int findMaxUtil(Node node, Res res) {\n        // base case for recursion.\n        if (node == null) return 0;\n\n        // l and r store maximum path sum going recursively through left and\n        // right subtrees of root(current node) respectively.\n        int l = findMaxUtil(node.left, res);\n        int r = findMaxUtil(node.right, res);\n\n        // max path sum for parent call of root. This path must\n        // include at-most one child of root.\n        int max_single = Math.max(Math.max(l, r) + node.data, node.data);\n\n        // max_top represents the sum when the node under consideration\n        // is the root of the max sum path and no ancestors of root\n        // are there in max sum path.\n        int max_top = Math.max(max_single, l + r + node.data);\n\n        // storing the maximum result.\n        res.val = Math.max(res.val, max_top);\n\n        return max_single;\n    }\n\n    // Function to return maximum path sum from any node in a tree.\n    int findMaxSum(Node node) {\n        Res res = new Res();\n        res.val = Integer.MIN_VALUE;\n\n        findMaxUtil(node, res);\n        // returning the result.\n        return res.val;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n \n    #Function to calculate maximum path sum.\n    def findMaxUtil(self, root): \n          \n        #base case for recursion.\n        if root is None: \n            return (0,float('-inf'))\n      \n        #l and r store maximum path sum going recursively through left and\n        #right subtrees of root(current node) respectively.\n        l, l1 = self.findMaxUtil(root.left) \n        r, r1 = self.findMaxUtil(root.right)\n          \n        #max path sum for parent call of root. This path must\n        #include at-most one child of root.\n        max_single = max(max(l, r) + root.data, root.data) \n          \n        #max_top represents the sum when the node under consideration is the root\n        #of the max sum path and no ancestors of root are there in max sum path.\n        max_top = max(max_single, l+r+ root.data) \n        \n        res = max(max_top, l1, r1)\n      \n        return (max_single,res)\n      \n    #Function to return maximum path sum from any node in a tree. \n    def findMaxSum(self, root): \n        \n        res = self.findMaxUtil(root) \n        #returning the result.\n        return max(res)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Helper function to calculate the maximum path sum\n    private int findMaxUtil(Node root, ref int res) {\n        // Base case for recursion\n        if (root == null) return 0;\n\n        // Calculate maximum path sum recursively for left and right subtrees\n        int l = findMaxUtil(root.left, ref res);\n        int r = findMaxUtil(root.right, ref res);\n\n        // Max path sum for the current node including at most one child\n        int maxSingle = Math.Max(Math.Max(l, r) + root.data, root.data);\n\n        // Max path sum when the current node is considered the root of the path\n        int maxTop = Math.Max(maxSingle, l + r + root.data);\n\n        // Update the overall maximum result\n        res = Math.Max(res, maxTop);\n\n        return maxSingle;\n    }\n\n    // Function to return the maximum path sum from any node in the tree\n    public int findMaxSum(Node root) {\n        int res = int.MinValue;\n        findMaxUtil(root, ref res);\n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} root\n * @returns {number}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n\n    constructor() { this.res = -999999999; }\n\n    // Function to calculate maximum path sum.\n    findMaxUtil(root) {\n        // base case for recursion.\n        if (root === null) return 0;\n\n        // l and r store maximum path sum going recursively through left and\n        // right subtrees of root(current node) respectively\n        let l = this.findMaxUtil(root.left);\n        let r = this.findMaxUtil(root.right);\n\n        // max path sum for parent call of root. This path must\n        // include at-most one child of root.\n        let max_single = Math.max(Math.max(l, r) + root.data, root.data);\n\n        // max_top represents the sum when the node under consideration\n        // is the root of the max sum path and no ancestors of root\n        // are there in max sum path.\n        let max_top = Math.max(max_single, l + r + root.data);\n\n        // storing the maximum result.\n        this.res = Math.max(this.res, max_top);\n\n        return max_single;\n    }\n\n    // Function to return maximum path sum from any node in a tree.\n    findMaxSum(root) {\n        this.findMaxUtil(root);\n        // returning the result.\n        return this.res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}