{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700554,
            "title": "Max Path Sum 2 Special Nodes",
            "titleSlug": "maximum-path-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>binary tree</strong> in which each node element contains a number. Find the <strong>maximum</strong> possible path sum from one <strong>special node</strong> to another special node.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>Here special node is a node that is connected to exactly one different node.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">root =</span><strong style=\"font-size: 18px;\"> </strong><span style=\"font-size: 18px;\">[3, 4, 5, -10, 4, N, N]<br />\n\\t     3\\t\\t\\t\\t\\t \n\\t   /   \\\\t\\t\\t\\t  \n\\t 4\\t5\\t\\t\\t   \n\\t/  \\\\t\n    -10   4\\t\\t\\t\\t  </span></span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 16</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Maximum Sum lies between special node 4 and 5. 4 + 4 + 3 + 5 = 16.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">root =</span><strong style=\"font-size: 18px;\"> </strong><span style=\"font-size: 18px;\">[-15, 5, 6, -8, 1, 3, 9, 2, -3, 0, 4, -1, 10]\n\n\\t\\t-15\\t\\t\\t\\t\\t \n\\t     /    \\\\t\\t\\t\\t  \n\\t    5\\t6\\t\\t\\t    \n\\t  /  \\    /  \\\n\\t-8    1  3    9\n     /  \\\\t\\t\\\n    2   -3\\t\\t0\n\\t\\t\\t   / \\\n\\t\\t\\t  4  -1\n\\t\\t\\t     /\n\\t\\t\\t   10  </span></span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>  27</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>The maximum possible sum from one special node to another is (3 + 6 + 9 + 0 + -1 + 10 = 27)<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">root =</span><strong style=\"font-size: 18px;\"> </strong><span style=\"font-size: 18px;\">[3, 4, 1, -10, 4]\n\\t     3\\t\\t\\t\\t\\t \n\\t    / \\\\t\\t\\t\\t  \n\\t  4    1\\t\\t\\t   \n\\t / \\\\t\n     -10  4\\t\\t\\t\\t  </span></span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 12</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Maximum Sum lies between special node 4 and 5. 4 + 4 + 3 + 1 = 12.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">2&nbsp; &le;&nbsp; number of nodes&nbsp; &le;&nbsp; 10<sup>4</sup></span><br /><span style=\"font-size: 18px;\">-10<sup>3&nbsp;&nbsp;</sup>&le; node-&gt;data &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 16px;\">One can find the maximum sum using single traversal of binary tree, the idea is to maintain two values in recursive calls<br />1) Maximum root to leaf path sum for the subtree rooted under current node.<br />2) The maximum path sum between leaves (desired output).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "accolite",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "factset",
            "directi",
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n    // Recursive function to calculate the maximum path sum\r\n    int maxPathSumUtil(Node *root, int &res) {\r\n        // Base case: if root is NULL, return 0\r\n        if (root == NULL)\r\n            return 0;\r\n        \r\n        // Base case: if root is a leaf node, return its value\r\n        if (!root->left && !root->right)\r\n            return root->data;\r\n\r\n        // Find the maximum path sum in the left and right subtrees\r\n        int ls = maxPathSumUtil(root->left, res);\r\n        int rs = maxPathSumUtil(root->right, res);\r\n\r\n        // Update the result with the maximum sum path passing through the current root node\r\n        if (root->left && root->right) {\r\n            res = max(res, ls + rs + root->data);\r\n            return max(ls, rs) + root->data;\r\n        }\r\n        \r\n        // Return the sum of the maximum sum path till the current root node\r\n        return (!root->left) ? rs + root->data : ls + root->data;\r\n    }\r\npublic:\r\n    // Function to find the maximum path sum\r\n    int maxPathSum(Node *root) {\r\n        int res = INT_MIN;\r\n        // Call the recursive utility function to calculate the maximum path sum\r\n        int h = maxPathSumUtil(root, res);\r\n        \r\n        // Update the result with the maximum sum path from root to leaf\r\n        if (root->left == NULL || root->right == NULL) {\r\n            res = max(res, h);\r\n        }\r\n        \r\n        // Return the result with the maximum path sum\r\n        return res;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    int res = Integer.MIN_VALUE;\r\n    \r\n    // Utility function to calculate the maximum path sum recursively\r\n    int maxPathSumUtil(Node root) {\r\n        if (root == null) \r\n            return 0;\r\n        if (root.left == null && root.right == null) \r\n            return root.data;\r\n\r\n        // Calculate the maximum path sum for the left and right subtrees\r\n        int ls = maxPathSumUtil(root.left);\r\n        int rs = maxPathSumUtil(root.right);\r\n\r\n        // If both left and right subtrees exist, calculate the maximum path sum\r\n        if (root.left != null && root.right != null) {\r\n            res = Math.max(res, (ls + rs + root.data));\r\n            return Math.max(ls, rs) + root.data;\r\n        }\r\n        // If only left subtree exists, return the maximum path sum of left subtree\r\n        if (root.left == null)\r\n            return rs + root.data;\r\n        // If only right subtree exists, return the maximum path sum of right subtree\r\n        else\r\n            return ls + root.data;\r\n    }\r\n\r\n    // Function to calculate the maximum path sum of a binary tree\r\n    int maxPathSum(Node root) {\r\n        // Calculate the maximum path sum of the tree using the utility function\r\n        int h = maxPathSumUtil(root);\r\n        // Update the maximum path sum if the root has only one child\r\n        if (root.left == null || root.right == null) {\r\n            res = Math.max(res,h);\r\n        }\r\n        return res; // Return the maximum path sum\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Initialize the result with a very small number, assuming no path has been found yet.\n    res = -999999999\n\n    def maxPathSumUtil(self, root):\n        global res  # Reference the global variable res to track the maximum path sum\n\n        # Base case: If the current node is None, return 0 as there is no contribution to the path sum.\n        if root is None:\n            return 0\n\n        # If the node is a leaf (no left and right children), return its value.\n        if root.left is None and root.right is None:\n            return root.data\n\n        # Recursive calls to calculate max path sum for left and right subtrees.\n        ls = self.maxPathSumUtil(root.left)\n        rs = self.maxPathSumUtil(root.right)\n\n        # If both left and right children are present:\n        if root.left and root.right:\n            # Update res if the path through root has a higher sum than the current max.\n            res = max(res, ls + rs + root.data)\n            # Return the maximum of the two child sums plus the current node's value for further calculation.\n            return max(ls, rs) + root.data\n\n        # If there is only a right child, return the sum from the right child plus the current node's value.\n        if root.left is None:\n            return rs + root.data\n        else:\n            # If there is only a left child, return the sum from the left child plus the current node's value.\n            return ls + root.data\n\n    def maxPathSum(self, root):\n        global res\n        # Reset res for each new computation\n        res = -999999999\n\n        # Calculate max path sum through utility function\n        h = self.maxPathSumUtil(root)\n\n        # If the root is a single-node path without children, update res to include root value if it's higher\n        if root.left is None:\n            res = max(res, h)\n        if root.right is None:\n            res = max(res, h)\n\n        return res  # Return the final maximum path sum.\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    maxPathSumUtil(root, res) {\n        if (root == null)\n            return 0;\n        if (!root.left && !root.right)\n            return root.key;\n\n        let ls = this.maxPathSumUtil(root.left, res);\n        let rs = this.maxPathSumUtil(root.right, res);\n\n        if (root.left && root.right) {\n            res[0] = Math.max(res[0], ls + rs + root.key);\n            return Math.max(ls, rs) + root.key;\n        }\n        return (!root.left) ? rs + root.key : ls + root.key;\n    }\n\n    maxPathSum(root) {\n        let res = [Number.MIN_SAFE_INTEGER];\n        let h = this.maxPathSumUtil(root, res);\n        if (!root.left || !root.right)\n        {\n            res[0] = Math.max(res[0], h);\n        }\n        return res[0];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}