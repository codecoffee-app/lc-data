{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703475,
            "title": "Maximum Perimeter of Triangle from array",
            "titleSlug": "maximum-perimeter-of-triangle-from-array4322",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of positive integers. Find out the maximum perimeter of the triangle from the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [6, 1, 6, 5, 8, 4]\n<strong>Output:</strong> 20\n<strong>Explanation: </strong>Triangle formed by &nbsp;8,6 &amp; 6. Thus perimeter 20.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [7, 55, 20, 1, 4, 33, 12]<strong>\nOutput:</strong>  -1\n<strong>Explanation</strong>:As the triangle is not possible because the condition: the sum of two sides should be greater than third is not fulfilled here.<br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*logn).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le;10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, find the maximum perimeter of a triangle that can be formed using three sides from the array. If no such triangle can be formed, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[6, 1, 6, 5, 8, 4]",
                        "output": "20",
                        "explanation": "The sides 8, 6, and 6 form a valid triangle with a perimeter of 20. Other combinations either don't form a valid triangle (sum of two sides must be greater than the third) or have a smaller perimeter."
                    },
                    {
                        "input": "[7, 55, 20, 1, 4, 33, 12]",
                        "output": "-1",
                        "explanation": "No combination of three sides from this array can form a valid triangle.  The condition that the sum of any two sides must be greater than the third side is not met for any possible triplet."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Take the largest 3 sizes but if it's invalid then remove the largest and take the largest from the remaining continue until you get a valid triangle or else return <strong>-1</strong>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxPerimeter(vector<int> &arr) {\n        int n = arr.size();\n        // sort the array elements\n        // in reversed order\n        sort(arr.rbegin(), arr.rend());\n\n        // initialize maximum\n        // perimeter to 0\n        int maxi = -1;\n\n        // loop through the sorted array\n        // and check whether it forms a\n        // triangle or not.\n        for (int i = 0; i < n - 2; i++) {\n\n            // Check whether arr[i], arr[i+1]\n            // and arr[i+2] forms a triangle\n            // or not.\n            if (arr[i] < arr[i + 1] + arr[i + 2]) {\n\n                // if it forms a triangle then\n                // it is the triangle with\n                // maximum perimeter.\n                maxi = max(maxi, arr[i] + arr[i + 1] + arr[i + 2]);\n                break;\n            }\n        }\n\n        // retunrn ans;\n        return maxi;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxPerimeter(int[] arr) {\n        int n = arr.length;\n        // Sort the array elements in reversed order\n        Arrays.sort(arr);\n        reverseArray(arr);\n\n        // Initialize maximum perimeter to 0\n        int maxi = -1;\n\n        // Loop through the sorted array and check whether it forms a triangle or not\n        for (int i = 0; i < n - 2; i++) {\n            // Check whether arr[i], arr[i + 1], and arr[i + 2] form a triangle\n            if (arr[i] < arr[i + 1] + arr[i + 2]) {\n                // If it forms a triangle, then it is the triangle with maximum\n                // perimeter\n                maxi = Math.max(maxi, arr[i] + arr[i + 1] + arr[i + 2]);\n                break;\n            }\n        }\n\n        // Return the answer\n        return maxi;\n    }\n\n    private void reverseArray(int[] arr) {\n        int left = 0, right = arr.length - 1;\n        while (left < right) {\n            int temp = arr[left];\n            arr[left] = arr[right];\n            arr[right] = temp;\n            left++;\n            right--;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxPerimeter(self, arr):\n        n = len(arr)\n        # Sort the array elements in reversed order\n        arr.sort(reverse=True)\n\n        # Initialize maximum perimeter to 0\n        maxi = -1\n\n        # Loop through the sorted array and check whether it forms a triangle or not\n        for i in range(n - 2):\n            # Check whether arr[i], arr[i + 1], and arr[i + 2] form a triangle\n            if arr[i] < arr[i + 1] + arr[i + 2]:\n                # If it forms a triangle, then it is the triangle with maximum perimeter\n                maxi = max(maxi, arr[i] + arr[i + 1] + arr[i + 2])\n                break\n\n        # Return the answer\n        return maxi\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    maxPerimeter(arr) {\n        const n = arr.length;\n        // Sort the array elements in reversed order\n        arr.sort((a, b) => b - a);\n\n        // Initialize maximum perimeter to 0\n        let maxi = -1;\n\n        // Loop through the sorted array and check whether it forms a triangle or not\n        for (let i = 0; i < n - 2; i++) {\n            // Check whether arr[i], arr[i + 1], and arr[i + 2] form a triangle\n            if (arr[i] < arr[i + 1] + arr[i + 2]) {\n                // If it forms a triangle, then it is the triangle with maximum\n                // perimeter\n                maxi = Math.max(maxi, arr[i] + arr[i + 1] + arr[i + 2]);\n                break;\n            }\n        }\n\n        // Return the answer\n        return maxi;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}