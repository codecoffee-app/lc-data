{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712194,
            "title": "Maximum point you can obtain from cards",
            "titleSlug": "maximum-point-you-can-obtain-from-cards",
            "content": "<p><span >You are given an integer array <strong>cardPoints[]</strong>, where each element represents the points associated with a card. The cards are arranged in a row. In one step, you can take one card either from the beginning or the end of the row. You must take exactly <strong>k</strong> cards. Your goal is to maximize the total score from the cards you take.</span></p>\n<p><span >Given the array <strong>cardPoints[]</strong>, and the integer <strong>k</strong>, return the maximum score you can obtain.</span></p>\n<p><span ><strong>Examples</strong>:</span></p>\n<pre><span ><strong>Input:</strong> cardPoints[] = [1, 2, 3, 4, 5, 6, 1], k = 3</span><br /><span ><strong>Output:</strong> 12</span><br /><span ><strong>Explanation:</strong> Taking the rightmost three cards yields a total score of 1 + 6 + 5 = 12.</span></pre>\n<pre><span ><strong>Input:</strong> cardPoints[] = [8, 6, 2, 4, 5], k = 5</span><br /><span ><strong>Output:</strong> 25</span><br /><span ><strong>Explanation:</strong> You need to take all the cards, so the score is 8 + 6 + 2 + 4 + 5 = 25.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)</span><br /><span ><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints</strong>:<br /></span><span >1 &le; cardPoints.size() &le; 10^6</span><br /><span >1 &le; k &le; cardPoints.size()</span><br /><span >1 &le; cardPoints[i] &le; 10^5</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an integer array `cardPoints`, where each element represents the points associated with a card. The cards are arranged in a row. In one step, you can take one card either from the beginning or the end of the row. You must take exactly `k` cards. Your goal is to maximize the total score from the cards you take.\n\nGiven the array `cardPoints` and the integer `k`, return the maximum score you can obtain.",
                "constraints": [
                    "1 <= cardPoints.size() <= 10^6",
                    "1 <= k <= cardPoints.size()",
                    "1 <= cardPoints[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "cardPoints[] = [1, 2, 3, 4, 5, 6, 1], k = 3",
                        "output": "12",
                        "explanation": "The maximum score can be achieved by taking the three rightmost cards: 1 + 6 + 5 = 12."
                    },
                    {
                        "input": "cardPoints[] = [8, 6, 2, 4, 5], k = 5",
                        "output": "25",
                        "explanation": "Since k is equal to the number of cards, you must take all the cards.  The score is the sum of all elements: 8 + 6 + 2 + 4 + 5 = 25."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >If you are going to take the k number of elements then there will be a window/subarray of size n - k, find the window with minimum sum so you can get maximum profit.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxScore(vector<int>& cardPoints, int k) {\n        int n = cardPoints.size();\n        int totalSum = accumulate(cardPoints.begin(), cardPoints.end(), 0);\n        int minWindowSum = INT_MAX;\n        int windowSum = 0;\n        int windowSize = n - k;\n\n        // Initial window sum\n        for (int i = 0; i < windowSize; ++i) {\n            windowSum += cardPoints[i];\n        }\n        minWindowSum = min(minWindowSum, windowSum);\n\n        // Sliding window to find the minimum sum of the window of size (n - k)\n        for (int i = windowSize; i < n; ++i) {\n            windowSum += cardPoints[i] - cardPoints[i - windowSize];\n            minWindowSum = min(minWindowSum, windowSum);\n        }\n\n        return totalSum - minWindowSum;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxScore(int[] cardPoints, int k) {\n        int n = cardPoints.length;\n        int totalSum = 0;\n        for (int point : cardPoints) {\n            totalSum += point;\n        }\n\n        int minWindowSum = Integer.MAX_VALUE;\n        int windowSum = 0;\n        int windowSize = n - k;\n\n        // Calculate the initial window sum\n        for (int i = 0; i < windowSize; i++) {\n            windowSum += cardPoints[i];\n        }\n        minWindowSum = Math.min(minWindowSum, windowSum);\n\n        // Slide the window to find the minimum sum\n        for (int i = windowSize; i < n; i++) {\n            windowSum += cardPoints[i] - cardPoints[i - windowSize];\n            minWindowSum = Math.min(minWindowSum, windowSum);\n        }\n\n        return totalSum - minWindowSum;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxScore(self, cardPoints, k):\n        n = len(cardPoints)\n        total_sum = sum(cardPoints)\n        min_window_sum = float('inf')\n        window_sum = 0\n        window_size = n - k\n\n        # Calculate the initial window sum\n        for i in range(window_size):\n            window_sum += cardPoints[i]\n        min_window_sum = min(min_window_sum, window_sum)\n\n        # Slide the window to find the minimum sum\n        for i in range(window_size, n):\n            window_sum += cardPoints[i] - cardPoints[i - window_size]\n            min_window_sum = min(min_window_sum, window_sum)\n\n        return total_sum - min_window_sum\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxScore(cardPoints, k) {\n        const n = cardPoints.length;\n        const totalSum = cardPoints.reduce((a, b) => a + b, 0);\n        let minWindowSum = Infinity;\n        let windowSum = 0;\n        const windowSize = n - k;\n\n        // Calculate the initial window sum\n        for (let i = 0; i < windowSize; i++) {\n            windowSum += cardPoints[i];\n        }\n        minWindowSum = Math.min(minWindowSum, windowSum);\n\n        // Slide the window to find the minimum sum\n        for (let i = windowSize; i < n; i++) {\n            windowSum += cardPoints[i] - cardPoints[i - windowSize];\n            minWindowSum = Math.min(minWindowSum, windowSum);\n        }\n\n        return totalSum - minWindowSum;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}