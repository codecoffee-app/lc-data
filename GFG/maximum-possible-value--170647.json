{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714131,
            "title": "Maximum Possible Value",
            "titleSlug": "maximum-possible-value--170647",
            "content": "<p><span style=\"font-size:18px\">Given two arrays <strong>A[]</strong> and <strong>B[]</strong> of same length <strong>N</strong>. There are N types of sticks of lengths specified. Each stick of length <strong>A[i]&nbsp;</strong>is present in <strong>B[i]</strong>&nbsp;units (i=1 to N). You have to construct the squares and rectangles using these sticks. Each unit of a stick can be used as length or breadth of a rectangle or as a side of square. A single unit of a stick can be used only once.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Let <strong>S</strong> be the sum of lengths of all sticks that are used in constructing squares and rectangles. The task is to calculate the maximum possible value of S.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note</strong>: The element in array <strong>A[] </strong>is always unique.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4\r\nA[] = {3,4,6,5}\r\nB[] = {2,3,1,6}\r\n<strong>Output:</strong> \r\n38\r\n<strong>Explanation: \r\n</strong>There are 2 sticks of length 3.\r\nThere are 3 sticks of length 4.\r\nThere is a 1 stick of length 6.\r\nThere are 6 sticks of length 5.\r\nOne square can be made using 4 sticks of\r\n4th kind (5*4=20)\r\nA rectangle can be made using 2 sticks of \r\n4th kind and 2 sticks of 2nd kind (5*2+4*2=18)\r\n<strong>S</strong> = 20 + 18 = 38\r\n</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 1\r\nA[] = {3}\r\nB[] = {2}\r\n<strong>Output: \r\n</strong>0\r\n<strong>Explanation: \r\n</strong>There are only 2 sticks of length 3 which are \r\nnot enough to make the square or rectangle.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function<strong>&nbsp;maxPossibleValue( )</strong>&nbsp;which takes the integer&nbsp;<strong>N</strong>, the array&nbsp;<strong>A[],</strong>&nbsp;and the array&nbsp;<strong>B[]</strong>&nbsp;as input parameters and returns the maximum possible value of S.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N&nbsp;&le;&nbsp;10<sup>6</sup><br />\r\n1 &le; A[]&nbsp;&le; 10<sup>6</sup></span><br />\r\n<span style=\"font-size:18px\">1 &le; B[]&nbsp;&le; 10<sup>2</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays A and B of the same length N, where A[i] represents the length of a type of stick and B[i] represents the number of sticks of that length. The task is to determine the maximum total length of sticks that can be used to construct squares and rectangles. Each stick can only be used once.",
                "constraints": [
                    "1 <= N <= 10^6",
                    "1 <= A[i] <= 10^6",
                    "1 <= B[i] <= 10^2"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nA = [3, 4, 6, 5]\nB = [2, 3, 1, 6]",
                        "output": "38",
                        "explanation": "Two sticks of length 3 are available. Three sticks of length 4 are available. One stick of length 6 is available. Six sticks of length 5 are available. One possible solution: create one square using four sticks of length 5 (4 * 5 = 20) and one rectangle using two sticks of length 5 and two sticks of length 4 (2 * 5 + 2 * 4 = 18). Total used length is 20 + 18 = 38."
                    },
                    {
                        "input": "N = 1\nA = [3]\nB = [2]",
                        "output": "0",
                        "explanation": "Only two sticks of length 3 are available. Not enough to form either a square or a rectangle, thus the total used length is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Only even number of sticks of the ith kind will be used in constructing&nbsp;the square or rectangle.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "sprinklr"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to calculate the maximum possible value\n    long long maxPossibleValue(int N,vector<int> A, vector<int> B) {\n        long long x,y,mn=1e10,ans=0,tot=0;\n        for(int i=0;i<N;i++){\n            // Getting the values of x and y from the given vectors\n            x=A[i];\n            y=B[i];\n            // If y is odd, decrement it by 1\n            if(y%2)\n                y--;\n            // If y is greater than or equal to 2, store the minimum value of x in mn\n            if(y>=2){\n                mn=min(mn,x);\n            }\n            // Calculate the product of x and y and add it to ans\n            ans+=y*x;\n            // Add y to tot\n            tot+=y;\n        }\n        // If tot is not divisible by 4, subtract 2 times the minimum value from ans\n        if(tot%4!=0){\n           ans-=2*mn;\n        }\n        // Return the final answer\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution { \r\n    long maxPossibleValue(int N, int A[] ,int B[]) { \r\n        long x , y, mn = (long)1e10, ans = 0, tot = 0;\r\n        for(int i = 0; i < N; i++){\r\n            x = A[i];\r\n            y = B[i];\r\n            if(y % 2 == 1)\r\n                y--;\r\n            if(y >= 2){\r\n                mn = Math.min(mn,x);\r\n            }\r\n            ans += y*x;\r\n            tot += y;\r\n        }\r\n        if(tot % 4 != 0){\r\n           ans -= 2l * mn;\r\n        }\r\n        return ans;\r\n    }\r\n} ",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    # Function to find the maximum possible value\n    def maxPossibleValue(self, N, A, B): \n\n        ans = 0\n        tot = 0\n        mn = 10**9\n\n        # iterating over the lists A and B\n        for i in range(N):\n\n            # assigning values from A and B lists\n            x = A[i]\n            y = B[i]\n\n            # if y is odd, make it even by subtracting 1 from it\n            if(y % 2):\n                y -= 1\n\n            # if y is greater than or equal to 2, update the minimum value\n            if(y >= 2):\n                mn = min(mn, x)\n\n            # calculate the product of x and y and add it to ans\n            ans += y * x\n\n            # update the sum of y values\n            tot += y\n\n        # if the sum is not divisible by 4, subtract 2*mn from ans\n        if(tot % 4 != 0):\n           ans -= 2 * mn\n\n        # return the maximum possible value\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} N\r\n * @param {number[]} A\r\n * @param {number[]} B\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution\r\n{\r\n    //Function to find maximum possible value K such that A % K = B % K\r\n    maxPossibleValue(N, A, B)\r\n    {\r\n        let ans = 0;\r\n        let tot = 0;\r\n        let mn = 10**9;\r\n\r\n        // iterating over the lists A and B\r\n        for (let i = 0; i < N; i++) {\r\n\r\n            // assigning values from A and B lists\r\n            let x = A[i];\r\n            let y = B[i];\r\n\r\n            // if y is odd, make it even by subtracting 1 from it\r\n            if (y % 2) {\r\n                y -= 1;\r\n            }\r\n\r\n            // if y is greater than or equal to 2, update the minimum value\r\n            if (y >= 2) {\r\n                mn = Math.min(mn, x);\r\n            }\r\n\r\n            // calculate the product of x and y and add it to ans\r\n            ans += y * x;\r\n\r\n            // update the sum of y values\r\n            tot += y;\r\n        }\r\n\r\n        // if the sum is not divisible by 4, subtract 2*mn from ans\r\n        if (tot % 4 !== 0) {\r\n           ans -= 2 * mn;\r\n        }\r\n\r\n        // return the maximum possible value\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}