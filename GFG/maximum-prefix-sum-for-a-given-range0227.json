{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703668,
            "title": "Maximum prefix sum for a given range",
            "titleSlug": "maximum-prefix-sum-for-a-given-range0227",
            "content": "<p class=\"whitespace-pre-wrap break-words\"><span >You are given an array <strong>arr</strong> of integers and a list of queries. Each query consists of two indices, <strong>leftIndex</strong> and <strong>rightIndex</strong>, defining a range in the array. For each query, calculate the maximum prefix sum within the given range.</span></p>\n<p class=\"whitespace-pre-wrap break-words\"><span >A prefix sum is the sum of all elements from the start of the range up to a certain point within the range.</span></p>\n<p class=\"whitespace-pre-wrap break-words\"><span ><strong>Examples:</strong></span></p>\n<pre class=\"whitespace-pre-wrap break-words\"><span ><strong>Input:</strong> arr = [-1, 2, 3, -5], leftIndex = [0, 1], rightIndex = [3, 3]<br /></span><span ><strong>Output:</strong>[4, 5]<br /></span><span ><strong>Explanation:</strong>For the range [0, 3], the prefix sums are [-1, 1, 4, -1]. The maximum is 4. For the range [1, 3], the prefix sums are [2, 5, 0]. The maximum is 5.</span></pre>\n<pre class=\"whitespace-pre-wrap break-words\"><span ><strong>Input:</strong> arr = [1, -2, 3, 4, -5], leftIndex = [0, 2, 1], rightIndex = [4, 3, 3]</span><br /><span ><strong>Output: </strong>[6, 7, 5]</span><br /><span ><strong>Explanation: </strong>For the range [0, 4], the prefix sums are [1, -1, 2, 6, 1]. The maximum is 6. For the range [2, 3], the prefix sums are [3, 7]. The maximum is 7. For the range [1, 3], the prefix sums are [-2, 1, 5]. The maximum is 5.</span></pre>\n<p class=\"whitespace-pre-wrap break-words\"><span ><strong>Expected Time Complexity: </strong>O(arr.size() * queries)<br /></span><span ><strong>Expected Auxiliary Space: </strong>O(1)</span></p>\n<p class=\"whitespace-pre-wrap break-words\"><span ><strong>Constraints:<br /></strong></span><span >1 &le; arr.size() &le; 10^6<br /></span><span >-10^4 &le; arr[i] &le; 10^4<br /></span><span >1 &le; queries &le; 10^4<br /></span><span >0 &le; leftIndex[i] &le; rightIndex[i] &lt; arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integers and a list of queries, where each query consists of a `leftIndex` and a `rightIndex` defining a range within `arr`. For each query, determine the maximum prefix sum within the specified range (inclusive). A prefix sum is calculated as the cumulative sum of elements starting from the `leftIndex` up to a particular index within the range.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-10^4 <= arr[i] <= 10^4",
                    "1 <= queries <= 10^4",
                    "0 <= leftIndex[i] <= rightIndex[i] < arr.size()"
                ],
                "testcases": [
                    {
                        "input": "arr = [-1, 2, 3, -5], leftIndex = [0, 1], rightIndex = [3, 3]",
                        "output": "[4, 5]",
                        "explanation": "For the range [0, 3], the prefix sums are [-1, 1, 4, -1]. The maximum is 4. For the range [1, 3], the prefix sums are [2, 5, 0]. The maximum is 5."
                    },
                    {
                        "input": "arr = [1, -2, 3, 4, -5], leftIndex = [0, 2, 1], rightIndex = [4, 3, 3]",
                        "output": "[6, 7, 5]",
                        "explanation": "For the range [0, 4], the prefix sums are [1, -1, 2, 6, 1]. The maximum is 6. For the range [2, 3], the prefix sums are [3, 7]. The maximum is 7. For the range [1, 3], the prefix sums are [-2, 1, 5]. The maximum is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use brute force approach to answer each query in linear time. Keep on adding elements until the end of query and whenever sum becomes greater than the answer, then update the answer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Segment-Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Solution code\nclass Solution {\n  public:\n    vector<int> maxPrefixes(vector<int>& arr, vector<int>& leftIndex,\n                            vector<int>& rightIndex) {\n        int q = leftIndex.size();\n        vector<int> result(q);\n\n        // Iterate through each query\n        for (int i = 0; i < q; i++) {\n            int maxSum = arr[leftIndex[i]];\n            int currentSum = arr[leftIndex[i]];\n\n            // Calculate prefix sums and track maximum\n            for (int j = leftIndex[i] + 1; j <= rightIndex[i]; j++) {\n                currentSum += arr[j];\n                maxSum = max(maxSum, currentSum);\n            }\n\n            result[i] = maxSum;\n        }\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<Integer> maxPrefixes(List<Integer> arr, List<Integer> leftIndex,\n                                     List<Integer> rightIndex) {\n        int q = leftIndex.size();\n        List<Integer> result = new ArrayList<>();\n\n        // Iterate through each query\n        for (int i = 0; i < q; i++) {\n            int maxSum = arr.get(leftIndex.get(i));\n            int currentSum = arr.get(leftIndex.get(i));\n\n            // Calculate prefix sums and track maximum\n            for (int j = leftIndex.get(i) + 1; j <= rightIndex.get(i); j++) {\n                currentSum += arr.get(j);\n                maxSum = Math.max(maxSum, currentSum);\n            }\n\n            result.add(maxSum);\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxPrefixes(self, arr, leftIndex, rightIndex):\n        # Initialize the result list to store maximum prefix sums for each query\n        result = []\n\n        # Iterate through each query using indices from leftIndex and rightIndex lists\n        for i in range(len(leftIndex)):\n            # Start with the first element of the subarray as initial values for maxSum and currentSum\n            maxSum = currentSum = arr[leftIndex[i]]\n\n            # Calculate prefix sums and track maximum within the range specified by the query\n            for j in range(leftIndex[i] + 1, rightIndex[i] + 1):\n                currentSum += arr[j]\n                maxSum = max(maxSum, currentSum)\n\n            # Append the maximum prefix sum found for this query to the result list\n            result.append(maxSum)\n\n        return result\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxPrefixes(arr, leftIndex, rightIndex) {\n        let q = leftIndex.length;\n        let result = new Array(q);\n\n        for (let i = 0; i < q; i++) {\n            let maxSum = arr[leftIndex[i]];\n            let currentSum = arr[leftIndex[i]];\n\n            for (let j = leftIndex[i] + 1; j <= rightIndex[i]; j++) {\n                currentSum += arr[j];\n                maxSum = Math.max(maxSum, currentSum);\n            }\n            result[i] = maxSum;\n        }\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}