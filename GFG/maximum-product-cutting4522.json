{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703990,
            "title": "Maximum Product Cutting",
            "titleSlug": "maximum-product-cutting4522",
            "content": "<p><span style=\"font-size: 18px;\">Given a rope of length <strong>N</strong> meters, cut the rope in different parts of integer lengths in a way that maximizes the product of lengths of all parts. You must make at least one cut. Assume that the length of the rope is more than one meter.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: N = 5\n<strong>Output:</strong> 6\n<strong>Explanation</strong>: Maximum obtainable product \nis 2*3</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 2\n<strong>Output: </strong>1\n<strong>Explanation</strong>: Maximum obtainable product\nis 1*1</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>maxProduct</code>()&nbsp;</strong>which takes <strong>N</strong> as input parameter and returns the maximum product.<br /><br /><strong>Expected Time Complexity:</strong> O(<strong>N<sup>2</sup></strong>)<br /><strong>Expected Auxiliary Space:</strong> O(<strong>N</strong>)<br /><br /><strong>Constraints:</strong><br />2 &le; N &le; 50</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a rope of length N meters, determine the optimal way to cut the rope into integer length parts to maximize the product of the lengths of these parts. You must make at least one cut. Assume the rope's length is greater than one meter.",
                "constraints": [
                    "2 \u2264 N \u2264 50"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "6",
                        "explanation": "The maximum product is achieved by cutting the rope into lengths of 2 and 3, resulting in a product of 2 * 3 = 6."
                    },
                    {
                        "input": "2",
                        "output": "1",
                        "explanation": "The maximum product is achieved by cutting the rope into two lengths of 1, resulting in a product of 1 * 1 = 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>This problem is similar to <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-13-cutting-a-rod/\" target=\"_blank\">Rod Cutting Problem.</a> We can get the maximum product by making a cut at different positions and comparing the values obtained after a cut. We can recursively call the same function for a piece obtained after a cut.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n\tpublic:\r\n\tint maxProduct(int n)\r\n\t{\r\n\r\n\r\n\t\tif (n <= 2)\r\n            return 1;\r\n\r\n        vector<long long> maxArr(n+1, 0);\r\n                    \r\n        /** For a number i: write i as a sum of integers, then take the product of those integers.\r\n        maxArr[i] = maximum of all the possible products */\r\n        \r\n        maxArr[1] = 0;\r\n        maxArr[2] = 1; // 2=1+1 so maxArr[2] = 1*1\r\n        \r\n        for (long long i=3; i<=n; i++) {\r\n            for (long long j=1; j<i; j++) {\r\n                /* Try to write i as: i = j + S where S=i-j corresponds to either one number or a sum of two or more numbers\r\n                \r\n                Assuming that j+S corresponds to the optimal solution for maxArr[i], we have two cases:\r\n                (1) i is the sum of two numbers, i.e. S=i-j is one number, and so maxArr[i]=j*(i-j)\r\n                (2) i is the sum of at least three numbers, i.e. S=i-j is a sum of at least 2 numbers,\r\n                and so the product of the numbers in this sum for S is maxArr[i-j]\r\n                (=maximum product after breaking up i-j into a sum of at least two integers):\r\n                maxArr[i] = j*maxArr[i-j] */\r\n                \r\n                maxArr[i] = max(maxArr[i], max(j*(i-j), j*maxArr[i-j]));\r\n\r\n            }\r\n        }\r\n        return (int)maxArr[n];\r\n\t}\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n\tpublic int maxProduct(int n)\r\n\t{\r\n\t\t// Your code goes here\r\n\t\t\r\n\t\tif(n <= 2){\r\n\t\t    return 1;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tlong [] maxArr = new long[n + 1];\r\n        Arrays.fill(maxArr, 0);\r\n        maxArr[1] = 0;\r\n        maxArr[2] = 1; // 2=1+1 so maxArr[2] = 1*1\r\n        \r\n        for (int i=3; i<=n; i++) {\r\n            for (int j=1; j<i; j++) {\r\n                /* Try to write i as: i = j + S where S=i-j corresponds to either one number or a sum of two or more numbers\r\n                \r\n                Assuming that j+S corresponds to the optimal solution for maxArr[i], we have two cases:\r\n                (1) i is the sum of two numbers, i.e. S=i-j is one number, and so maxArr[i]=j*(i-j)\r\n                (2) i is the sum of at least three numbers, i.e. S=i-j is a sum of at least 2 numbers,\r\n                and so the product of the numbers in this sum for S is maxArr[i-j]\r\n                (=maximum product after breaking up i-j into a sum of at least two integers):\r\n                maxArr[i] = j*maxArr[i-j] */\r\n                long x = maxArr[i];\r\n                long y = j*(i - j);\r\n                long z = j*maxArr[i - j];\r\n                long mx = Math.max(y, z);\r\n                maxArr[i] = Math.max(x, mx);\r\n\r\n            }\r\n        }\r\n        return (int)maxArr[n];\r\n\t}\r\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#User function Template for python3\nclass Solution:\n\n    def maxProduct(self, n):\n        # code here\n        if n <= 2:\n            return 1\n\n        maxArr = [0] * (n + 1)\n        maxArr[1] = 0\n        maxArr[2] = 1\n\n        for i in range(3, n + 1):\n            for j in range(1, i):\n                maxArr[i] = max(maxArr[i], max(j * (i - j), j * maxArr[i - j]))\n\n        return maxArr[n]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}