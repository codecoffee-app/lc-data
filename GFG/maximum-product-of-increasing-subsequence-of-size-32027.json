{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703495,
            "title": "Maximum Product of Increasing Subsequence of Size 3",
            "titleSlug": "maximum-product-of-increasing-subsequence-of-size-32027",
            "content": "<p><span style=\"font-size:20px\">Given a sequence of non-negative integers, find the subsequence of length 3 having maximum product, with the elements of the subsequence being in increasing&nbsp;order.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:20px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:20px\"><strong>\u00e2\u20ac\u2039Input:</strong>\nn = 8\narr[ ] = {6, 7, 8, 1, 2, 3, 9, 10</span><span style=\"font-size:20px\">}\n<strong>Output:\n</strong>8 9 10\n<strong>Explanation: </strong>3 increasing elements of \nthe given arrays are 8,9 and 10 which \nforms the subsequence of size 3 with \nmaximum product.</span><span style=\"font-size:20px\">\n</span></pre>\n\n<p><br />\n<span style=\"font-size:20px\"><strong>\u00e2\u20ac\u2039Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:20px\"><strong>Input:\n</strong>n = 4\narr[ ] = {3, 4, 2, 1} <strong>\nOutput:\n</strong>Not Present </span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:20px\"><strong>Your Task:</strong><br />\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>maxProductSubsequence()</strong> that takes an array <strong>arr</strong>, sizeOfArray <strong>n</strong>, and return the subsequence of size 3 having the maximum product, numbers of subsequence being in increasing order. If no such sequence exists, return&nbsp;<strong>&quot;-1&quot;</strong>. The driver code takes care of the printing.</span></p>\n\n<p><br />\n<span style=\"font-size:20px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*LOG(N)).<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N).</span></p>\n\n<p><br />\n<br />\n<span style=\"font-size:20px\"><strong>Constraints:</strong><br />\n1 &lt;= <strong>N</strong> &lt;= 10<sup>5</sup><br />\n1 &lt;= <strong>Arr[i]</strong> &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sequence of non-negative integers, find a subsequence of length 3 with the maximum product, such that the elements of the subsequence are in strictly increasing order.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= Arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 8\narr = {6, 7, 8, 1, 2, 3, 9, 10}",
                        "output": "8 9 10",
                        "explanation": "The increasing subsequence {8, 9, 10} has the maximum product among all increasing subsequences of length 3."
                    },
                    {
                        "input": "n = 4\narr = {3, 4, 2, 1}",
                        "output": "Not Present",
                        "explanation": "There is no increasing subsequence of length 3 in the given array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>As we need, increasing subsequence of size 3, we need one&nbsp;element <strong>smaller before</strong>, and one element <strong>larger after</strong> for every element presnt in the array.</p>\n\n<p>But how to do it...??</p>",
            "<p>As in previous Hint, we need to find a <strong>Largest Smaller</strong> element&nbsp;at left side and one <strong>Greatest</strong> element at right side for every element preset in the array.</p>\n\n<p>So make a Largest Smaller Array and a Greatest Element array.</p>\n\n<p>Greatest Element array can be made, but how to make Largest Smaller Element Array.</p>",
            "<p>Complete Approach:</p>\n\n<ul>\n\t<li>Make a <strong>Greatest element</strong> array, by storing the greatest element, available at right side for every element.</li>\n\t<li>Make the <strong>Largest Smaller Element</strong> Array. This can be done with the help of <strong>set</strong><strong>&acirc;&euro;&lsaquo;</strong>\n\t<ul>\n\t\t<li>Insert the element in set, and store the address returned.</li>\n\t\t<li>If the address points to begin(), store -1, else store the value at the previous address.</li>\n\t</ul>\n\t</li>\n\t<li>Traverse the original array, multiply the element at original array, LS array and Greatest element array, and store the maximum of all.</li>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "set",
                "slug": "set"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\n  public:\n    vector<int> maxProductSubsequence(int *arr , int n) \n    { \n        vector<int> res(n,-1);\n    \tint smaller[n];\n    \n    \tset<int>S ; \n    \tfor (int i = 0; i < n ; i++) \n    \t{ \n    \t\tauto j = S.insert(arr[i]); \n    \t\tauto itc = j.first;\n    \n    \t\t--itc;\n    \n    \t\tif (itc != S.end()) \n    \t\t\tsmaller[i] = *itc; \n    \t\telse\n    \t\t\tsmaller[i] = -1; \n    \t} \n    \n    \tlong long int result = INT_MIN; \n    \n    \tint max_right = arr[n-1]; \n    \n    \tfor (int i=n-2 ; i >= 1; i--) \n    \t{ \n    \t\tif (arr[i] >= max_right) \n    \t\t\tmax_right = arr[i]; \n            else if (smaller[i] != -1) {\n    \t\t\tif(result < (long long int)smaller[i] * arr[i] * max_right ){\n    \t\t\t    result = (long long int)smaller[i] * arr[i] * max_right;\n    \t\t\t    res[0] = smaller[i];\n    \t\t\t    res[1] = arr[i];\n    \t\t\t    res[2] = max_right;\n    \t\t\t}\n            }\n    \t} \n        \n    \treturn res; \n    } \n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}