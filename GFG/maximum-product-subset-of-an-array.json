{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709949,
            "title": "Maximum product subset of an array",
            "titleSlug": "maximum-product-subset-of-an-array",
            "content": "<p><span >Given an array <strong>arr</strong>. The task is to find and return the maximum product possible with the <strong>subset</strong> of elements present in the array. </span></p>\n<p><span >Note:</span></p>\n<ol>\n<li><span >The maximum product can be a single element also.</span></li>\n<li><span >Since the product can be large, return it modulo <strong>10<sup>9</sup> + 7</strong>.</span></li>\n</ol>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [-1, 0, -2, 4, 3]\n<strong>Output: </strong>24\n<strong>Explanation:</strong> Maximum product will be ( -1 * -2 * 4 * 3 ) = 24</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [-1, 0]\n<strong>Output: </strong>0<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> Maximum product will be ( -1 * 0) = 0</span><br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [5]\n<strong>Output: </strong>5</span><br /><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> Maximum product will be 5.</span></span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 2 * 10<sup>4</sup><br />-10 &lt;= arr[i] &lt;= 10</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum product possible using a subset of the elements. The maximum product can be a single element. Return the maximum product modulo 10^9 + 7.",
                "constraints": [
                    "1 <= arr.size() <= 2 * 10^4",
                    "-10 <= arr[i] <= 10"
                ],
                "testcases": [
                    {
                        "input": "[-1, 0, -2, 4, 3]",
                        "output": "24",
                        "explanation": "The maximum product is obtained by multiplying -1, -2, 4, and 3, resulting in 24."
                    },
                    {
                        "input": "[-1, 0]",
                        "output": "0",
                        "explanation": "The maximum product is obtained by multiplying -1 and 0, resulting in 0."
                    },
                    {
                        "input": "[5]",
                        "output": "5",
                        "explanation": "The maximum product is simply 5, as we can choose the single element as the subset."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Keep track of all positive, negative and zeroes in the array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    long long int findMaxProduct(vector<int>& arr) {\n        int n = arr.size();\n        if (n == 1) {\n            // Only 1 element in the array.\n            return arr[0];\n        }\n\n        long long int ans = 1;\n        int mod = 1e9 + 7;\n        int id = -1, minElement = 0;\n        int zeroCount = 0, negCount = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 0) {\n                // Counting number of zeros.\n                zeroCount++;\n            } else if (arr[i] < 0) {\n                // Counting number of negative numbers.\n                negCount++;\n                if (id == -1 || arr[i] > minElement) {\n                    // Storing the index of negative element having least magnitude.\n                    id = i;\n                    minElement = arr[i];\n                }\n            }\n        }\n        if (zeroCount == n) {\n            // If there are all zeros.\n            return 0;\n        }\n        if (negCount == 1 && zeroCount == n - 1) {\n            // If all elements are zero except one negative element, then return 0.\n            return 0;\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 0) {\n                continue;\n            }\n            if (negCount % 2 == 1 && i == id) {\n                // Removing the negative element having least magnitude.\n                continue;\n            }\n            ans = ((ans * arr[i]) % mod + mod) % mod;\n        }\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public long findMaxProduct(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 1) {\n            // Only 1 element in the array.\n            return arr.get(0);\n        }\n\n        long ans = 1;\n        int mod = 1000000007;\n        int id = -1;\n        int minElement = 0;\n        int zeroCount = 0;\n        int negCount = 0;\n\n        for (int i = 0; i < n; i++) {\n            int num = arr.get(i);\n            if (num == 0) {\n                // Counting number of zeros.\n                zeroCount++;\n            } else if (num < 0) {\n                // Counting number of negative numbers.\n                negCount++;\n                if (id == -1 || num > minElement) {\n                    // Storing the index of negative element having least magnitude.\n                    id = i;\n                    minElement = num;\n                }\n            }\n        }\n\n        if (zeroCount == n) {\n            // If there are all zeros.\n            return 0;\n        }\n\n        if (negCount == 1 && zeroCount == n - 1) {\n            // If all elements are zero except one negative element, then return 0.\n            return 0;\n        }\n\n        for (int i = 0; i < n; i++) {\n            int num = arr.get(i);\n            if (num == 0) {\n                continue;\n            }\n            if (negCount % 2 == 1 && i == id) {\n                // Removing the negative element having least magnitude.\n                continue;\n            }\n            ans = ((ans * num) % mod + mod) % mod;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def findMaxProduct(self, arr):\n        n = len(arr)\n        if n == 1:\n            # Only 1 element in the array.\n            return arr[0]\n\n        ans = 1\n        mod = int(1e9 + 7)\n        id = -1\n        minElement = 0\n        zeroCount = 0\n        negCount = 0\n\n        for i in range(n):\n            if arr[i] == 0:\n                # Counting number of zeros.\n                zeroCount += 1\n            elif arr[i] < 0:\n                # Counting number of negative numbers.\n                negCount += 1\n                if id == -1 or arr[i] > minElement:\n                    # Storing the index of negative element having least magnitude.\n                    id = i\n                    minElement = arr[i]\n\n        if zeroCount == n:\n            # If there are all zeros.\n            return 0\n\n        if negCount == 1 and zeroCount == n - 1:\n            # If all elements are zero except one negative element, then return 0.\n            return 0\n\n        for i in range(n):\n            if arr[i] == 0:\n                continue\n            if negCount % 2 == 1 and i == id:\n                # Removing the negative element having least magnitude.\n                continue\n            ans = ((ans * arr[i]) % mod + mod) % mod\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// Position this line where user code will be pasted.\nclass Solution {\n    findMaxProduct(arr) {\n        const n = arr.length;\n        if (n === 1) {\n            // Only 1 element in the array.\n            return arr[0];\n        }\n\n        let ans = 1;\n        const mod = 1e9 + 7;\n        let id = -1;\n        let minElement = 0;\n        let zeroCount = 0;\n        let negCount = 0;\n\n        for (let i = 0; i < n; i++) {\n            if (arr[i] === 0) {\n                // Counting number of zeros.\n                zeroCount++;\n            } else if (arr[i] < 0) {\n                // Counting number of negative numbers.\n                negCount++;\n                if (id === -1 || arr[i] > minElement) {\n                    // Storing the index of negative element having least magnitude.\n                    id = i;\n                    minElement = arr[i];\n                }\n            }\n        }\n\n        if (zeroCount === n) {\n            // If there are all zeros.\n            return 0;\n        }\n\n        if (negCount === 1 && zeroCount === n - 1) {\n            // If all elements are zero except one negative element, then return 0.\n            return 0;\n        }\n\n        for (let i = 0; i < n; i++) {\n            if (arr[i] === 0) {\n                continue;\n            }\n            if (negCount % 2 === 1 && i === id) {\n                // Removing the negative element having least magnitude.\n                continue;\n            }\n            ans = ((ans * arr[i]) % mod + mod) % mod;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}