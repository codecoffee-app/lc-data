{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703051,
            "title": "Maximum product",
            "titleSlug": "maximum-product4633",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of integers, the task is to find a subsequence of size <strong>k</strong> whose product is maximum among all possible&nbsp;<span style=\"box-sizing: border-box; margin: 0px; padding: 0px;\"><strong>k-</strong>sized</span>&nbsp;subsequences of a given array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 0, 3], k = 2\n<strong>Output:</strong> 6\n<strong>Explanation</strong>: Subsequence containing elements {2, 3} gives maximum product: 2*3 = 6</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, -1, -3, -6, 4], k = 4\n<strong>Output:</strong> 14\n<strong>Explanation</strong>: Subsequence containing {2, -3, -6, 4} gives maximum product: 2*(-3)*(-6)*4 = 144</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn).<br /><strong>Expected Space&nbsp;</strong></span><strong style=\"font-size: 18px;\">Complexity</strong><strong style=\"font-size: 18px;\">:</strong><span style=\"font-size: 18px;\">&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]`, find a subsequence of size `k` such that its product is the maximum among all possible `k`-sized subsequences of the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 0, 3], k = 2",
                        "output": "6",
                        "explanation": "The subsequence {2, 3} gives the maximum product: 2 * 3 = 6"
                    },
                    {
                        "input": "arr[] = [1, 2, -1, -3, -6, 4], k = 4",
                        "output": "144",
                        "explanation": "The subsequence {2, -3, -6, 4} gives the maximum product: 2 * (-3) * (-6) * 4 = 144"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the array in descending order. Take the first <code>k</code> elements and compute their product. This gives the maximum product for any <code>k</code>-sized subsequence.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    long long maxProductSubarrayOfSizeK(vector<int>& arr, int k) {\n        int n = arr.size(); // Initialize n to the size of the array\n\n        // Sort the given input array\n        sort(arr.begin(), arr.end());\n\n        // Variable to store final product of all elements\n        // of sub-sequence of size k\n        long long product = 1;\n\n        // CASE I\n        // If max element is 0 and k is odd, then max product will be 0\n        if (arr[n - 1] == 0 && (k & 1)) {\n            return 0;\n        }\n\n        // CASE II\n        // If all elements are negative and k is odd, then max product will be\n        // the product of the rightmost subarray of size k\n        if (arr[n - 1] <= 0 && (k & 1)) {\n            for (int i = n - 1; i >= n - k; i--) {\n                product *= arr[i];\n            }\n            return product;\n        }\n\n        // else\n        // i is the current left pointer index\n        int i = 0;\n\n        // j is the current right pointer index\n        int j = n - 1;\n\n        // CASE III\n        // If k is odd and the rightmost element in\n        // the sorted array is positive, then it\n        // must come in the subsequence\n        // Multiplying arr[j] with product and\n        // correspondingly changing j\n        if (k & 1) {\n            product *= arr[j];\n            j--;\n            k--;\n        }\n\n        // CASE IV\n        // Now k is even\n        // Now we deal with pairs\n        // Each time a pair is multiplied to product\n        // i.e., two elements are added to subsequence each time\n        // Effectively k becomes half\n        // Hence, k >>= 1 means k /= 2\n        k >>= 1;\n\n        // Now finding k corresponding pairs\n        // to get the maximum possible value of the product\n        for (int itr = 0; itr < k; itr++) {\n\n            // Product from left pointers\n            int left_product = arr[i] * arr[i + 1];\n\n            // Product from right pointers\n            int right_product = arr[j] * arr[j - 1];\n\n            // Taking the max product from two choices\n            // Correspondingly changing the pointer's position\n            if (left_product > right_product) {\n                product *= left_product;\n                i += 2;\n            } else {\n                product *= right_product;\n                j -= 2;\n            }\n        }\n\n        // Finally return product\n        return product;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    // Method to find the maximum product of a subarray of size k\n    public long maxProductSubarrayOfSizeK(int[] arr, int k) {\n        int n = arr.length;\n\n        // Handle edge cases\n        if (k > n) {\n            return 0; // If k is larger than the array size, return 0\n        }\n\n        // Use a max-heap to get the k largest elements\n        PriorityQueue<Integer> maxHeap =\n            new PriorityQueue<>(Collections.reverseOrder());\n        for (int num : arr) {\n            maxHeap.add(num);\n        }\n\n        long product = 1;\n        for (int i = 0; i < k; i++) {\n            product *= maxHeap.poll(); // Poll the largest element from the heap\n        }\n\n        return product;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxProductSubarrayOfSizeK(self, arr, k):\n        from heapq import nlargest\n\n        n = len(arr)\n        if k > n:\n            return 0\n\n        # Sort the array and get the k largest elements\n        largest_elements = nlargest(k, arr)\n        product = 1\n        for num in largest_elements:\n            product *= num\n\n        return product\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxProductSubarrayOfSizeK(arr, k) {\n        const n = arr.length;\n\n        // Sort the given input array\n        arr.sort((a, b) => a - b);\n\n        // Use BigInt to handle large numbers\n        let product = BigInt(1);\n\n        // CASE I: If max element is 0 and k is odd, then max product will be 0\n        if (arr[n - 1] === 0 && (k % 2 !== 0)) {\n            return BigInt(0);\n        }\n\n        // CASE II: If all elements are negative and k is odd\n        if (arr[n - 1] <= 0 && (k % 2 !== 0)) {\n            for (let i = n - 1; i >= n - k; i--) {\n                product *= BigInt(arr[i]);\n            }\n            return product;\n        }\n\n        // Left and right pointers\n        let i = 0;\n        let j = n - 1;\n\n        // CASE III: If k is odd and the rightmost element is positive\n        if (k % 2 !== 0) {\n            product *= BigInt(arr[j]);\n            j--;\n            k--;\n        }\n\n        // CASE IV: Now k is even, handle in pairs\n        k = Math.floor(k / 2);\n\n        // Now finding k corresponding pairs\n        for (let itr = 0; itr < k; itr++) {\n            const leftProduct = BigInt(arr[i]) * BigInt(arr[i + 1]);\n            const rightProduct = BigInt(arr[j]) * BigInt(arr[j - 1]);\n\n            if (leftProduct > rightProduct) {\n                product *= leftProduct;\n                i += 2;\n            } else {\n                product *= rightProduct;\n                j -= 2;\n            }\n        }\n\n        // Finally return product\n        return product;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}