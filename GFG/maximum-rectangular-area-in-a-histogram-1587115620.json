{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701340,
            "title": "Histogram Max Rectangular Area",
            "titleSlug": "maximum-rectangular-area-in-a-histogram-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">You are given a <strong>histogram</strong> represented by an array <strong>arr</strong>, where each element of the array denotes the <strong>height</strong> of the bars in the histogram. All bars have the same <strong>width of 1 unit</strong>. </span></p>\n<p><span style=\"font-size: 18px;\">Your task is to find the <strong>largest</strong> rectangular area possible in the given histogram, where the rectangle can be formed using a number of contiguous bars.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = <span style=\"font-family: 'andale mono', monospace;\">[</span></span><span style=\"color: #273239; font-family: 'andale mono', monospace; font-size: 18px; letter-spacing: 0.162px; text-wrap: wrap; background-color: #f9f9f9;\">60, 20, 50, 40, 10, 50, 60]<br /></span><span style=\"font-size: 18px;\"> <img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20240924161857/Largest-Rectangular-Area-in-a-Histogram.webp\" alt=\"Largest-Rectangular-Area-in-a-Histogram\" width=\"437\" height=\"210\" />\n<strong>Output: </strong>100<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">We get the maximum by picking bars highlighted above in green (50, and 60). The area is computed (smallest height) * (no. of the picked bars) = 50 * 2 = 100.</span><img src=\"http://d1hyf4ir1gqw6c.cloudfront.net/wp-content/uploads/histogram1.png\" alt=\"\" />\n</pre>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 5, 1, 7, 5, 9]<strong>\nOutput: </strong>15<strong>\nExplanation:  </strong>We get the maximum by picking bars 7, 5 and 9. The area is computed (smallest height) * (no. of the picked bars) = 5 * 3 = 15.</span></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3]</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>3<strong>\nExplanation: </strong>In this example the largest area would be 3 of height 3 and width 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />0 &le; arr[i] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the maximum rectangular area\n    int getMaxArea(vector<int>& arr) {\n        int n = arr.size();\n        stack<int> s;\n        int res = 0;\n        int tp, curr;\n        for (int i = 0; i < n; i++) {\n\n            while (!s.empty() && arr[s.top()] >= arr[i]) {\n\n                // The popped item is to be considered as the\n                // smallest element of the Histogram\n                tp = s.top();\n                s.pop();\n\n                // For the popped item previous smaller element is\n                // just below it in the stack (or current stack top)\n                // and next smaller element is i\n                int width = s.empty() ? i : i - s.top() - 1;\n\n                res = max(res, arr[tp] * width);\n            }\n            s.push(i);\n        }\n\n        // For the remaining items in the stack, next smaller does\n        // not exist. Previous smaller is the item just below in\n        // stack.\n        while (!s.empty()) {\n            tp = s.top();\n            s.pop();\n            curr = arr[tp] * (s.empty() ? n : n - s.top() - 1);\n            res = max(res, curr);\n        }\n\n        return res;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to calculate the maximum rectangular area\n    static int getMaxArea(int[] arr) {\n        int n = arr.length;\n        Stack<Integer> s = new Stack<>();\n        int res = 0, tp, curr;\n\n        for (int i = 0; i < n; i++) {\n\n            // Process the stack while the current element\n            // is smaller than the element corresponding to\n            // the top of the stack\n            while (!s.isEmpty() && arr[s.peek()] >= arr[i]) {\n\n                // The popped item is to be considered as the\n                // smallest element of the Histogram\n                tp = s.pop();\n\n                // For the popped item, previous smaller element\n                // is just below it in the stack (or current stack\n                // top) and next smaller element is i\n                int width = s.isEmpty() ? i : i - s.peek() - 1;\n\n                // Update the result if needed\n                res = Math.max(res, arr[tp] * width);\n            }\n            s.push(i);\n        }\n\n        // For the remaining items in the stack, next smaller does\n        // not exist. Previous smaller is the item just below in\n        // the stack.\n        while (!s.isEmpty()) {\n            tp = s.pop();\n            curr = arr[tp] * (s.isEmpty() ? n : n - s.peek() - 1);\n            res = Math.max(res, curr);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to calculate the maximum rectangular area\n    def getMaxArea(self, arr):\n        n = len(arr)\n        s = []\n        res = 0\n\n        for i in range(n):\n\n            # Process the stack while the current element\n            # is smaller than the element corresponding to\n            # the top of the stack\n            while s and arr[s[-1]] >= arr[i]:\n\n                # The popped item is to be considered as the\n                # smallest element of the Histogram\n                tp = s.pop()\n\n                # For the popped item, the previous smaller\n                # element is just below it in the stack (or\n                # the current stack top) and the next smaller\n                # element is i\n                width = i if not s else i - s[-1] - 1\n\n                # Update the result if needed\n                res = max(res, arr[tp] * width)\n\n            s.append(i)\n\n        # For the remaining items in the stack, next smaller does\n        # not exist. Previous smaller is the item just below in\n        # the stack.\n        while s:\n            tp = s.pop()\n            width = n if not s else n - s[-1] - 1\n            res = max(res, arr[tp] * width)\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int GetMaxArea(int[] arr) {\n        int n = arr.Length;\n        Stack<int> s = new Stack<int>();\n        int res = 0;\n\n        for (int i = 0; i < n; i++) {\n            while (s.Count > 0 && arr[s.Peek()] >= arr[i]) {\n                int tp = s.Pop();\n                int width = s.Count == 0 ? i : i - s.Peek() - 1;\n                res = Math.Max(res, arr[tp] * width);\n            }\n            s.Push(i);\n        }\n\n        while (s.Count > 0) {\n            int tp = s.Pop();\n            int width = s.Count == 0 ? n : n - s.Peek() - 1;\n            res = Math.Max(res, arr[tp] * width);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to calculate the maximum rectangular area\n    getMaxArea(arr) {\n        let n = arr.length;\n        let stack = [];\n        let res = 0;\n\n        // Traverse all bars of the arrogram\n        for (let i = 0; i < n; i++) {\n\n            // Process the stack while the current element\n            // is smaller than the element corresponding to\n            // the top of the stack\n            while (stack.length && arr[stack[stack.length - 1]] >= arr[i]) {\n                let tp = stack.pop();\n\n                // Calculate width and update result\n                let width = stack.length === 0 ? i : i - stack[stack.length - 1] - 1;\n                res = Math.max(res, arr[tp] * width);\n            }\n            stack.push(i);\n        }\n\n        // Process remaining elements in the stack\n        while (stack.length) {\n            let tp = stack.pop();\n            let curr =\n                arr[tp] * (stack.length === 0 ? n : n - stack[stack.length - 1] - 1);\n            res = Math.max(res, curr);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}