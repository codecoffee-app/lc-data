{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703135,
            "title": "Maximum repeating number",
            "titleSlug": "maximum-repeating-number4858",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>. The array contains numbers ranging from <strong>0 </strong>to<strong> k-1</strong> where k is a positive integer<em>.</em> Find the maximum repeating number in this array. If there are two or more maximum repeating numbers,<span style=\"box-sizing: border-box; margin: 0px; padding: 0px;\">&nbsp;return the element<strong> with</strong></span><strong>&nbsp;the least value</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k = 3, arr[] = [2, 2, 1, 2]<br /></span><span style=\"font-size: 18px;\"><strong>Output: </strong>2<br /><strong>Explanation: </strong>2 is the most frequent element.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k = 3, arr[] = [2, 2, 1, 0, 0, 1]<br /><strong>Output: </strong>0<br /><strong>Explanation:&nbsp;</strong>0, 1, and 2 all have the same frequency of 2. But since 0 is the smallest, you need to return 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &le; arr.size() &le; 10<sup>5</sup><br /></span><span style=\"font-size: 18px;\">1 &le; k &le; 10<sup>5</sup><br />0 &le; arr<sub>i</sub>&nbsp;&le; k-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of numbers ranging from 0 to `k-1`, where `k` is a positive integer, find the maximum repeating number in the array. If multiple numbers have the same highest frequency, return the smallest among them.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= k <= 10^5",
                    "0 <= arr[i] <= k-1"
                ],
                "testcases": [
                    {
                        "input": "k = 3, arr[] = [2, 2, 1, 2]",
                        "output": "2",
                        "explanation": "The number 2 appears most frequently (3 times) in the array."
                    },
                    {
                        "input": "k = 3, arr[] = [2, 2, 1, 0, 0, 1]",
                        "output": "0",
                        "explanation": "The numbers 0, 1, and 2 all appear twice. Since 0 is the smallest, it is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Create a hash of all elements in the given array. Find the&nbsp;least element where hash[i] is&nbsp;maximum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Returns maximum repeating element in arr[0..n-1].\n    // The array elements are in range from 0 to k-1\n    int maxRepeating(int k, vector<int>& arr) {\n        vector<int> hash(k, 0);\n        int n = arr.size();\n        // Iterate though input array, for every element\n        // arr[i], increment hash[arr[i]] by 1\n        for (int i = 0; i < n; i++)\n            hash[arr[i]]++;\n\n        // Find index of the maximum repeating element\n        int max = hash[0], result = 0;\n        for (int i = 1; i < k; i++) {\n            if (hash[i] > max) {\n                max = hash[i];\n                result = i;\n            }\n        }\n        // Return index of the maximum element\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Returns maximum repeating element in arr[0..n-1].\n    // The array elements are in range from 0 to k-1\n    public int maxRepeating(int k, int[] arr) {\n        int[] hash = new int[k];\n        int n = arr.length;\n\n        // Iterate through input array, for every element\n        // arr[i], increment hash[arr[i]] by 1\n        for (int i = 0; i < n; i++) {\n            hash[arr[i]]++;\n        }\n\n        // Find index of the maximum repeating element\n        int max = hash[0];\n        int result = 0;\n        for (int i = 1; i < k; i++) {\n            if (hash[i] > max) {\n                max = hash[i];\n                result = i;\n            }\n        }\n\n        // Return index of the maximum element\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Returns maximum repeating element in arr[0..n-1].\n    # The array elements are in range from 0 to k-1\n    def maxRepeating(self, k, arr):\n        hash = [0] * k\n        n = len(arr)\n\n        # Iterate through input array, for every element\n        # arr[i], increment hash[arr[i]] by 1\n        for i in range(n):\n            hash[arr[i]] += 1\n\n        # Find index of the maximum repeating element\n        max_value = hash[0]\n        result = 0\n        for i in range(1, k):\n            if hash[i] > max_value:\n                max_value = hash[i]\n                result = i\n\n        # Return index of the maximum element\n        return result",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxRepeating(k, arr) {\n        let n = arr.length;\n        let hash = new Array(k).fill(0); // initialize array of size k with 0's\n        for (let i = 0; i < n; i++) {    // iterate through input array\n            hash[arr[i]]++;              // increment count of the element in hash array\n        }\n\n        let max = hash[0]; // initialize max count\n        let result = 0;    // initialize result\n\n        for (let i = 1; i < k; i++) { // iterate through hash array\n            if (hash[i] > max) {      // if current count is greater than max count\n                max = hash[i];        // update max count\n                result = i;           // update result to current element\n            }\n        }\n\n        return result; // return the result\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}