{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875013,
            "title": "Maximum score from at most K jumps",
            "titleSlug": "maximum-score-from-at-most-k-jumps",
            "content": "<p><span >Given an array <strong>arr[]</strong> and an integer <strong>k</strong>, your task is to collect the <strong>maximum</strong> score possible by performing the following operations:</span><br /><span >1. Start from the 0th index of the array.</span><br /><span >2. Reach the last index of the array by jumping at most <strong>k</strong> indices in each move.</span><br /><span >3. Add the value stored at each index where you reach after the jump (consider the score of the starting index too).<br /></span></p>\n<p><span ><strong>Note:</strong> 0-based indexing is followed.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input</strong>: arr[] = [100, -30, -50, -15, -20, -30], k = 3<br /><strong>Output</strong>: 55<br /><strong>Explanation</strong>: From 0th index, jump 3 indices ahead to arr[3]. From 3rd, jump 2 steps ahead to arr[5]. Therefore, the maximum score possible = (100 + (-15) + (-30)) = 55</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [-44, -17, -54, 79],&nbsp; k = 2<br /><strong>Output</strong>: 18<br /><strong>Explanation</strong>: From 0th index, jump 1 index ahead to arr[1]. From index 1, jump 2 steps ahead to arr[3]. Therefore, the maximum score possible = -44 + (-17) + 79 = 18.<br /></span></pre>\n<p><span ><strong>Constraints:<br /></strong>1&lt;=arr.size()&lt;=10<sup>5</sup><br />-10<sup>5</sup>&lt;=arr[i]&lt;=10<sup>5</sup><br />1&lt;=k&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and an integer `k`, find the maximum possible score by traversing the array from index 0 to the last index. You can jump at most `k` indices in each move, adding the value at each visited index to your score.  Start at index 0 and aim to reach the last index of the array with the highest accumulated score.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "-10^5 <= arr[i] <= 10^5",
                    "1 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [100, -30, -50, -15, -20, -30], k = 3",
                        "output": "55",
                        "explanation": "One possible path is: index 0 -> index 3 -> index 5.  The score is 100 + (-15) + (-30) = 55. This is the maximum possible score."
                    },
                    {
                        "input": "arr[] = [-44, -17, -54, 79], k = 2",
                        "output": "18",
                        "explanation": "One possible path is: index 0 -> index 1 -> index 3. The score is -44 + (-17) + 79 = 18. This is the maximum possible score."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think about all the possiblities and returning the maximum. Optimise this approach to reach the optimal solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Map",
                "slug": "map"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate maximum score using\n    // Tabulation + Deque\n    int getScore(vector<int> &arr, int k) {\n        int n = arr.size();\n\n        // Tabulation array to store maximum scores\n        vector<int> dp(n, INT_MIN);\n\n        // Base case: score at the last index is the\n        // value at that index\n        dp[n - 1] = arr[n - 1];\n\n        // Deque to store indices of dp values in\n        // decreasing order\n        deque<int> dq;\n        dq.push_back(n - 1);\n\n        // Iterate from second last index to the first\n        for (int i = n - 2; i >= 0; i--) {\n\n            // Remove indices from the deque that are out of range\n            while (!dq.empty() && dq.front() > i + k) {\n                dq.pop_front();\n            }\n\n            // Set dp[i] as the maximum score from the deque\n            dp[i] = arr[i] + dp[dq.front()];\n\n            // Maintain the deque in decreasing order of dp values\n            while (!dq.empty() && dp[i] >= dp[dq.back()]) {\n                dq.pop_back();\n            }\n\n            // Add the current index to the deque\n            dq.push_back(i);\n        }\n\n        // Return the maximum score starting from the\n        // first index\n        return dp[0];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static int getScore(int[] arr, int k) {\n\n        int n = arr.length;\n\n        // Tabulation array to store scores\n        int[] dp = new int[n];\n\n        // Base case: score at the last index\n        dp[n - 1] = arr[n - 1];\n\n        // Deque to store indices of dp values\n        // in decreasing order\n        Deque<Integer> dq = new LinkedList<>();\n        dq.offer(n - 1);\n\n        // Iterate from second last index to the first\n        for (int i = n - 2; i >= 0; i--) {\n\n            // Remove indices from the deque that are out of range\n            while (!dq.isEmpty() && dq.peekFirst() > i + k) {\n                dq.pollFirst();\n            }\n\n            // Set dp[i] as the maximum score from the deque\n            dp[i] = arr[i] + dp[dq.peekFirst()];\n\n            // Maintain the deque in decreasing order of dp values\n            while (!dq.isEmpty() && dp[i] >= dp[dq.peekLast()]) {\n                dq.pollLast();\n            }\n\n            // Add the current index to the deque\n            dq.offerLast(i);\n        }\n\n        // Return the maximum score starting\n        // from the first index\n        return dp[0];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def getScore(self, arr, k):\n        n = len(arr)\n\n        # Tabulation array to store scores\n        dp = [float('-inf')] * n\n\n        # Base case: score at the last index\n        dp[n - 1] = arr[n - 1]\n\n        # Deque to store indices of dp values\n        # in decreasing order\n        dq = deque([n - 1])\n\n        # Iterate from second last index to first\n        for i in range(n - 2, -1, -1):\n\n            # Remove indices from deque that are out of range\n            while dq and dq[0] > i + k:\n                dq.popleft()\n\n            # Set dp[i] as the maximum score from the deque\n            dp[i] = arr[i] + dp[dq[0]]\n\n            # Maintain deque in decreasing order of dp values\n            while dq and dp[i] >= dp[dq[-1]]:\n                dq.pop()\n\n            # Add current index to the deque\n            dq.append(i)\n\n        # Return score from the first index\n        return dp[0]\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int GetScore(int[] arr, int k) {\n        int n = arr.Length;\n\n        // Tabulation array to store scores\n        int[] dp = new int[n];\n\n        // Base case: score at the last index\n        dp[n - 1] = arr[n - 1];\n\n        // Deque to store indices of dp values\n        // in decreasing order\n        LinkedList<int> dq = new LinkedList<int>();\n        dq.AddLast(n - 1);\n\n        // Iterate from second last index to the first\n        for (int i = n - 2; i >= 0; i--) {\n            // Remove indices from the deque that are out of range\n            while (dq.Count > 0 && dq.First.Value > i + k) {\n                dq.RemoveFirst();\n            }\n\n            // Set dp[i] as the maximum score from the deque\n            dp[i] = arr[i] + dp[dq.First.Value];\n\n            // Maintain the deque in decreasing order of dp values\n            while (dq.Count > 0 && dp[i] >= dp[dq.Last.Value]) {\n                dq.RemoveLast();\n            }\n\n            // Add the current index to the deque\n            dq.AddLast(i);\n        }\n\n        // Return the maximum score starting\n        // from the first index\n        return dp[0];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    getScore(arr, k) {\n        let n = arr.length;\n\n        // Tabulation array to store scores\n        let dp = new Array(n).fill(-Infinity);\n\n        // Base case: score at the last index\n        dp[n - 1] = arr[n - 1];\n\n        // Deque to store indices of dp values\n        // in decreasing order\n        let dq = [];\n\n        // Add the last index to the deque\n        dq.push(n - 1);\n\n        // Iterate from second last index to first\n        for (let i = n - 2; i >= 0; i--) {\n\n            // Remove indices from deque that are out of range\n            while (dq.length > 0 && dq[0] > i + k) {\n                dq.shift();\n            }\n\n            // Set dp[i] as the maximum score from the deque\n            dp[i] = arr[i] + dp[dq[0]];\n\n            // Maintain deque in decreasing order of dp values\n            while (dq.length > 0 && dp[i] >= dp[dq[dq.length - 1]]) {\n                dq.pop();\n            }\n\n            // Add current index to the deque\n            dq.push(i);\n        }\n\n        // Return score from the first index\n        return dp[0];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}