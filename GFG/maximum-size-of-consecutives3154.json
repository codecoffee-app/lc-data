{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703896,
            "title": "Maximum size of consecutives",
            "titleSlug": "maximum-size-of-consecutives3154",
            "content": "<p><span style=\"font-size: 12pt;\">Given a sorted array <strong>arr</strong> of <strong>n</strong> distinct elements and an integer <strong>k</strong>. The array elements denote the positions of points on the 1-D number line and find the maximum size of a subset of points that can have consecutive values of points formed by placing another <strong>k</strong> points on the number line.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4, 10, 11, 14, 15], k = 4\n<strong>Output:</strong> 8\n<strong>Explanation: </strong>For the maximum size subset, it is optimal to place the points on the number line at coordinates 12, 13, 16, and 17, so that the size of the consecutive valued subset will become 8 which will be maximum.</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [7, 8, 12, 13, 15, 18], k = 5\n<strong>Output:</strong> 10\n<strong>Explanation: </strong>For maximum size subset, it is optimal to place the points on number line at coordinates 9, 10, 11, 14 and 16, so that the size of the consecutive valued subset will become 10 which will be maximum .</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:</strong>&nbsp;O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= k &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr` of `n` distinct elements and an integer `k`. The array elements represent positions of points on a 1-D number line. Find the maximum size of a subset of points that can have consecutive values after placing `k` additional points on the number line.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= k <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 3, 4, 10, 11, 14, 15], k = 4",
                        "output": "8",
                        "explanation": "To maximize the consecutive subset, place points at coordinates 12, 13, 16, and 17. The resulting consecutive subset will have a size of 8."
                    },
                    {
                        "input": "arr[] = [7, 8, 12, 13, 15, 18], k = 5",
                        "output": "10",
                        "explanation": "To maximize the consecutive subset, place points at coordinates 9, 10, 11, 14, and 16. The resulting consecutive subset will have a size of 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Check if the difference between the values at `arr[r]` and `arr[l]` minus the distance between their indices `(r - l)` is less than or equal to `k`. If true, the pair `(l, r)` is valid.</span></p>",
            "<p><span >In order to optimize the brute force, notice that if r increases, then l also increases (or at least stays the same). We can maintain two indexes. Initialise l and r both as 0. Then we start incrementing r. As we do this, at each step we increment l until the condition used in brute force approach becomes true. When r reaches last index, we stop.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maximiseSubset(vector<long> arr, int k) {\n        int n = arr.size();\n        // Since we can always enforce the\n        // solution to contain all the K added\n        // points\n        int ans = k;\n\n        int l = 0, r = 0;\n        while (r < n) {\n\n            // increment l until the number of points\n            // that need to be placed between index l\n            // and index r is not greater than k\n            while ((arr[r] - arr[l]) - (r - l) > k)\n                l++;\n\n            // update the solution as below\n            ans = max(ans, r - l + k + 1);\n\n            r++;\n        }\n\n        return (ans);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\nclass Solution {\n    int maximiseSubset(int[] arr, int k) {\n        int n = arr.length;\n        int ans = k;\n        int l = 0, r = 0;\n\n        while (r < n) {\n            // increment l until the number of points that need to be placed between l\n            // and r is not greater than k\n            while ((arr[r] - arr[l]) - (r - l) > k) {\n                l++;\n            }\n\n            // update the solution as below\n            ans = Math.max(ans, r - l + k + 1);\n            r++;\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# User function Template for python3\nclass Solution:\n\n    def maximiseSubset(self, arr, k):\n        n = len(arr)\n        ans = k\n        l, r = 0, 0\n\n        while r < n:\n            # increment l until the number of points that need to be placed between l and r is not greater than k\n            while (arr[r] - arr[l]) - (r - l) > k:\n                l += 1\n\n            # update the solution as below\n            ans = max(ans, r - l + k + 1)\n            r += 1\n\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maximiseSubset(arr, k) {\n        let n = arr.length;\n        let ans = k;\n        let l = 0;\n        let r = 0;\n\n        while (r < n) {\n            while (arr[r] - arr[l] - (r - l) > k) {\n                l += 1;\n            }\n\n            ans = Math.max(ans, r - l + k + 1);\n            r += 1;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}