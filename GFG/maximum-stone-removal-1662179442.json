{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712029,
            "title": "Maximum Stone Removal",
            "titleSlug": "maximum-stone-removal-1662179442",
            "content": "<p><span style=\"font-size: 18px;\">Given an 2D array of non-negative integers <strong>stones[][] </strong>where&nbsp;<strong>stones[i] = [xi, yi]</strong>&nbsp;represents the location of the<strong>&nbsp;ith</strong> stone on a 2D plane, the task is to return the <strong>maximum</strong> possible number of stones that you can remove.</span></p>\n<p><span style=\"font-size: 18px;\">A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.</span></p>\n<p><span style=\"font-size: 18px;\">Note: Each coordinate point may have at most one stone.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">stones[][] = [[0, 0], [0, 1], [1, 0], [1, 2], [2, 1], [2, 2]]<br /></span><strong style=\"font-size: 18px;\">Output:</strong><span style=\"font-size: 18px;\">5<br /></span><strong style=\"font-size: 18px;\">Explanation:</strong><span style=\"font-size: 18px;\"><br />One way to remove 5 stones is as follows:\n1. Remove stone [2, 2] because it shares the same row as [2, 1].\n2. Remove stone [2, 1] because it shares the same column as [0, 1].\n3. Remove stone [1, 2] because it shares the same row as [1, 0].\n4. Remove stone [1, 0] because it shares the same column as [0, 0].\n5. Remove stone [0, 1] because it shares the same row as [0, 0].\nStone [0, 0] cannot be removed since it does not share any row/column with another stone still on the plane.<br /></span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: stones[][] = [[0, 0], [0, 2], [1, 1], [2, 0], [2, 2]]</span><br /><span style=\"font-size: 18px;\"><strong>Output</strong>: 3</span><br /><span style=\"font-size: 18px;\"><strong>Explanation</strong>: <br />One way to remove 3 stones is as follows:</span><br /><span style=\"font-size: 18px;\">1. Remove stone [2, 2] because it shares the same row as [2, 0].</span><br /><span style=\"font-size: 18px;\">2. Remove stone [2, 0] because it shares the same column as [0, 0].</span><br /><span style=\"font-size: 18px;\">3. Remove stone [0, 2] because it shares the same row as [0, 0].</span><br /><span style=\"font-size: 18px;\">Stones [0, 0] and [1, 1] cannot be removed since they do not share any row/column with another stone still on the plane.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<p><span style=\"font-size: 18px;\">1 &lt;= stones.size() &lt;=1000<br />0 &lt;= x[i], y[i]&lt;= 10<sup>4</sup><br />No two stones are at same position.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the parent of a node in the disjoint set.\n    int find(int x, vector<int>& parent) {\n        // If x is the parent of itself, return x.\n        if (x == parent[x]) return x;\n\n        // Recursively find the parent of x and update the parent value.\n        int temp = find(parent[x], parent);\n        parent[x] = temp;\n        return temp;\n    }\n\n    // Function to merge sets containing a and b in the disjoint set.\n    bool merge(int a, int b, vector<int>& parent, vector<int>& rank) {\n        // Find the parent of a and b.\n        int x = find(a, parent);\n        int y = find(b, parent);\n\n        // If a and b are already in the same set, return false.\n        if (x == y) return false;\n\n        // Merge the sets.\n        // If both sets have the same rank, increase the rank of x by 1.\n        if (rank[x] == rank[y]) {\n            rank[x]++;\n            parent[x] = y;\n        } \n        // If rank of x is greater than rank of y, make y parent of x.\n        else if (rank[x] > rank[y]) {\n            parent[y] = x;\n        } \n        // If rank of y is greater than rank of x, make x parent of y.\n        else {\n            parent[x] = y;\n        }\n\n        return true;\n    }\n\n    // Function to calculate the maximum number of stones that can be removed.\n    int maxRemove(vector<vector<int>>& stones, int n) {\n        vector<int> parent(n + 1); // Array to store the parent of each node.\n        vector<int> rank(n + 1, 0); // Array to store the rank of each node.\n        int count = 0; // Variable to store the count of removed stones.\n\n        // Initialize the parent array with initial values.\n        for (int i = 0; i < n + 1; ++i) parent[i] = i;\n\n        // Iterate through the stones and merge sets if they share a row or column.\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (stones[i][0] == stones[j][0] || stones[i][1] == stones[j][1]) {\n                    if (merge(i, j, parent, rank)) count++;\n                }\n            }\n        }\n\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    // Constant to map y-coordinates of stones\r\n    final int K = 10001;\r\n    void dfs(int[][] stones, List<Integer>[] adj, int[] visited, int src) {\r\n        // Mark the stone as visited\r\n        visited[src] = 1;\r\n\r\n        // Iterate over the adjacent, and iterate over it if not visited yet\r\n        for (int adjacent : adj[src]) {\r\n            if (visited[adjacent] == 0) {\r\n                dfs(stones, adj, visited, adjacent);\r\n            }\r\n        }\r\n    }\r\n\r\n    int maxRemove(int[][] stones, int n) {\r\n        // Adjacency list to store edges\r\n        List<Integer>[] adj = new ArrayList[2 * K + 1];\r\n        for (int i = 0; i < 2 * K + 1; i++) {\r\n            adj[i] = new ArrayList<>();\r\n        }\r\n\r\n        for (int i = 0; i < stones.length; i++) {\r\n            int x = stones[i][0];\r\n            int y = stones[i][1] + K;\r\n            adj[x].add(y);\r\n            adj[y].add(x);\r\n        }\r\n\r\n        // Array to mark visited stones\r\n        int[] visited = new int[2 * K + 1];\r\n        // Counter for connected components\r\n        int componentCount = 0;\r\n        for (int i = 0; i < 2 * K + 1; i++) {\r\n            if (visited[i] == 0 && adj[i].size() > 0) {\r\n                // If the stone is not visited yet,\r\n                // Start the DFS and increment the counter\r\n                componentCount++;\r\n                dfs(stones, adj, visited, i);\r\n            }\r\n        }\r\n\r\n        // Return the maximum stone that can be removed\r\n        return stones.length - componentCount;\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def maxRemove(self, stones, n):\r\n        def find(a):\r\n            if par[a] == a:\r\n                return a\r\n            \r\n            par[a] = find(par[a])\r\n            return par[a]\r\n    \r\n        def union(pa, pb):\r\n            if pa == pb:\r\n                return\r\n            if sz[pa] > sz[pb]:\r\n                par[pb] = pa\r\n                sz[pa] += sz[pb]\r\n            else:\r\n                par[pa] = pb\r\n                sz[pb] += sz[pa]\r\n        \r\n        par = [i for i in range(n)]\r\n        sz = [1] * n\r\n        \r\n        for i in range(n):\r\n            for j in range(i+1, n):\r\n                if (stones[i][0] == stones[j][0]) or (stones[i][1] == stones[j][1]):\r\n                    pi, pj = find(i), find(j)\r\n                    union(pi, pj)\r\n        \r\n        \r\n        ans = 0\r\n        nodes = set()\r\n        for i in range(n):\r\n            nodes.add(find(i))\r\n        \r\n        for node in nodes:\r\n            ans += sz[node] - 1\r\n        \r\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number[][]} adj\r\n * @param {number} n\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution\r\n{\r\n    //Function to find maximum number of edges to be removed to contain all nodes.\r\n    maxRemove(adj, n)\r\n    {\r\n        let find = (par, a) => {\r\n            if (par[a] == a) {\r\n                return a;\r\n            }\r\n            par[a] = find(par, par[a]);\r\n            return par[a];\r\n        }\r\n\r\n        let union = (par, sz, pa, pb) => {\r\n            if (pa == pb) {\r\n                return;\r\n            }\r\n            if (sz[pa] > sz[pb]) {\r\n                par[pb] = pa;\r\n                sz[pa] += sz[pb];\r\n            } else {\r\n                par[pa] = pb;\r\n                sz[pb] += sz[pa];\r\n            }\r\n        }\r\n\r\n        let par = [];\r\n        let sz = [];\r\n        for (let i = 0; i < n; i++) {\r\n            par.push(i);\r\n            sz.push(1);\r\n        }\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            for (let j = i+1; j < n; j++) {\r\n                if (adj[i][0] == adj[j][0] || adj[i][1] == adj[j][1]) {\r\n                    let pi = find(par, i);\r\n                    let pj = find(par, j);\r\n                    union(par, sz, pi, pj);\r\n                }\r\n            }\r\n        }\r\n\r\n        let ans = 0;\r\n        let nodes = new Set();\r\n        for (let i = 0; i < n; i++) {\r\n            nodes.add(find(par, i));\r\n        }\r\n\r\n        for (let node of nodes) {\r\n            ans += sz[node] - 1;\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}