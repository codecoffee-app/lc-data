{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705335,
            "title": "Maximum Sub-String after at most K changes",
            "titleSlug": "maximum-sub-string-after-at-most-k-changes3220",
            "content": "<p><span style=\"font-size: 18px;\">We have a string <strong>s</strong>&nbsp;of length <strong>n</strong>, which contains&nbsp;only <strong>UPPERCASE</strong> characters and we have a number <strong>k</strong> (always less than <strong>n</strong>). We can make at most <strong>k</strong> changes&nbsp;in our string.&nbsp;In one change, you can replace any <strong>s[i] </strong>(0&lt;= i &lt; n) with any uppercase character (from 'A' to 'Z').&nbsp;After <strong>k</strong> changes, find the maximum possible length of the&nbsp;sub-string&nbsp;which have all same characters.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"ABAB\", k = 2\n<strong>Output: </strong>4\n<strong>Explanation: </strong>Change 2 'B' into 'A'. \nNow s = \"AAAA\"</span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"ADBD\", k = 1\n<strong>Output: </strong>3\n<strong>Explanation: </strong>Change 'B' into 'D'.\nNow s = \"ADDD\"</span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>characterReplacement()&nbsp;</strong>which takes&nbsp;<strong>s</strong>&nbsp;and&nbsp;<strong>k</strong>&nbsp;as input parameters and returns the maximum length of sub-string after doing k changes.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(26)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup><br />0 &lt;=&nbsp;k &lt; n</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` of uppercase characters with length `n`, and an integer `k` (where `k < n`), determine the maximum possible length of a substring containing only one repeating character. You are allowed to make at most `k` changes to the string, where each change involves replacing a character at any index with any other uppercase character.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= k < n"
                ],
                "testcases": [
                    {
                        "input": "s = \"ABAB\", k = 2",
                        "output": "4",
                        "explanation": "By changing the two 'B' characters to 'A', the string becomes \"AAAA\", resulting in a substring of length 4 with all the same characters."
                    },
                    {
                        "input": "s = \"ADBD\", k = 1",
                        "output": "3",
                        "explanation": "By changing the 'B' character to 'D', the string becomes \"ADDD\", resulting in a substring of length 3 with all the same characters."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use 2 pointer approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution {\n\tpublic:\n\t\t// Function to find the maximum length of a substring with most characters replaced\n\t\tint characterReplacement(string s, int k){\n\t\t\tint n = s.size();\n\t\t\t// Create a frequency array to keep track of occurrences of each character\n\t\t\tvector<int>f(26, 0);\n\t\t\tint start = 0, maxCount = 0, maxLength = 0;\n\t\t\tfor(int end = 0; end < n; end++){\n\t\t\t\t// Increment the frequency of the current character and update the maximum count\n\t\t\t\tmaxCount = max(maxCount, ++f[s[end] - 'A']);\n\t\t\t\t// If the number of characters to be replaced exceeds k, move the start pointer and decrease the frequency\n\t\t\t\twhile(end - start + 1 - maxCount > k){\n\t\t\t\t\tf[s[start]  - 'A']--;\n\t\t\t\t\tstart++;\n\t\t\t\t}\n\t\t\t\t// Update the maximum length\n\t\t\t\tmaxLength = max(maxLength, end - start + 1);\n\t\t\t}\n\t\t\treturn maxLength; // Return the maximum length of the substring\n\t\t}\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int characterReplacement(String s, int k) {\n        char ch[] = s.toCharArray(); // Convert string to char array for easy access\n        int n = s.length(); // Get length of string\n        int f[] = new int[26]; // Array to store frequency of characters\n        int start = 0; // Start index of window\n        int maxCount = 0; // Maximum frequency of any character in current window\n        int maxLength = 0; // Maximum length of substring with at most k replacements\n        \n        for (int end = 0; end < n; end++) { // Iterate through each character in string\n            maxCount = Math.max(maxCount, ++f[ch[end] - 'A']); // Update maxCount with the highest frequency\n            \n            while (end - start + 1 - maxCount > k) { // If current window size minus maxCount is greater than k\n                f[ch[start] - 'A']--; // Decrease frequency of character at start index\n                start++; // Move start index to the right\n            }\n            \n            maxLength = Math.max(maxLength, end - start + 1); // Update maxLength with maximum window size\n        }\n        \n        return maxLength; // Return maximum length of substring with at most k replacements\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def characterReplacement(self, s, k):\n        n = len(s)\n        f = [0] * (26)  # initialize a frequency array for each character\n        start = 0  # initialize the start index for the window\n        maxCount = 0  # initialize the maximum count of any character in the window\n        maxLength = 0  # initialize the maximum length of the valid substring\n        for end in range(n):  # iterate through each end index of the window\n\n            f[ord(s[end]) - ord(\n                \"A\")] += 1  # increment the frequency of the current character\n            maxCount = max(\n                maxCount, f[ord(s[end]) - ord(\"A\")]\n            )  # update the maximum count of any character in the window\n\n            while (\n                    end - start + 1 - maxCount > k\n            ):  # if the difference between the window length and the maximum count exceeds k\n                f[ord(s[start]) - ord(\n                    \"A\"\n                )] -= 1  # decrement the frequency of the character at the start index\n                start += 1  # move the start index one step forward\n\n            maxLength = max(\n                maxLength, end - start +\n                1)  # update the maximum length of the valid substring\n        return maxLength  # return the maximum length of the valid substring\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @param {number} k\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to check whether the list is palindrome.\n    characterReplacement(s, k)\n    {\n        let n = s.length;\n        let f = new Array(26).fill(0); // initialize a frequency array for each character\n        let start = 0; // initialize the start index for the window\n        let maxCount = 0; // initialize the maximum count of any character in the window\n        let maxLength = 0; // initialize the maximum length of the valid substring\n        \n        for(let end = 0; end < n; end++){ // iterate through each end index of the window\n            f[s.charCodeAt(end) - 'A'.charCodeAt(0)]++; // increment the frequency of the current character\n            maxCount = Math.max(maxCount, f[s.charCodeAt(end) - 'A'.charCodeAt(0)]); // update the maximum count of any character in the window\n            \n            while (end - start + 1 - maxCount > k){ // if the difference between the window length and the maximum count exceeds k\n                f[s.charCodeAt(start) - 'A'.charCodeAt(0)]--; // decrement the frequency of the character at the start index\n                start++; // move the start index one step forward\n            }\n            \n            maxLength = Math.max(maxLength, end - start + 1); // update the maximum length of the valid substring\n        }\n        \n        return maxLength; // return the maximum length of the valid substring\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}