{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714322,
            "title": "Maximum subset sum",
            "titleSlug": "maximum-subset-sum--170648",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>A</strong> of size&nbsp;<strong>N.&nbsp;</strong>Find the maximum subset-sum of elements that you can make from the given array such that for every <strong>two consecutive</strong> elements in the array, at least one of the elements is present in our subset.<strong>&nbsp;</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong>N = 4\nA[] = {1, -1, 3, 4}\n<strong>Output: </strong>8\n<strong>Explanation: </strong>\nWe can choose 0th,2nd &amp; 3rd index(0 based <br />Index),so that it can satisfy the <br />condition &amp; can make maximum sum 8. \n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: \n</strong>N = 3\nA[] =  {0, 2, 0};\n<strong>Output: </strong>2\n<strong>Explanation: </strong>\nWe can choose 1st index. Here the <br />maximum possible sum is 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">You don't have to read input or print anything. Your task is to complete the function <strong>findMaxSubsetSum()</strong> which takes the array <strong>A</strong> and its size <strong>N</strong> as input and returns the Maximum possible subset-sum.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N)</span><br /><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:&nbsp;</strong>O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; N &le; 10<sup>5</sup><br />-10<sup>5&nbsp;</sup>&le; A[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array A of size N. Find the maximum subset sum of elements from the array such that for every two consecutive elements in the array, at least one of the elements is present in your subset.",
                "constraints": [
                    "2 <= N <= 10^5",
                    "-10^5 <= A[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nA[] = {1, -1, 3, 4}",
                        "output": "8",
                        "explanation": "The optimal subset includes elements at indices 0, 2, and 3 (0-based indexing), yielding a sum of 1 + 3 + 4 = 8. This subset satisfies the condition that for every two consecutive elements in the original array, at least one is included in the subset."
                    },
                    {
                        "input": "N = 3\nA[] = {0, 2, 0}",
                        "output": "2",
                        "explanation": "The optimal subset includes only the element at index 1 (0-based indexing), yielding a sum of 2.  Including any other element would violate the constraint or result in a smaller sum."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:16px\">Start with the largest element, add it to the subset, and then skip the next element.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\n    public:\n    //Function to find the maximum subset sum.\n    long long findMaxSubsetSum(int N, vector<int> &A)\n    {\n        //declaring and initializing dp array.\n        long long dp[N+1][2];\n        dp[0][0]=0,dp[0][1]=0;\n\n        //iterating from 1 to N.\n        for(int i=1; i<=N; i++)\n        {\n            //calculating the maximum of previous element's alternate subset sum\n            //and current element added to previous element's same subset sum.\n            dp[i][0]=dp[i-1][1];\n            dp[i][1]=max(dp[i-1][0]+A[i-1],dp[i-1][1]+A[i-1]);\n        }\n        //returning the maximum subset sum.\n        return max(dp[N][0],dp[N][1]);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n\r\n    public long findMaxSubsetSum(int N, int[] A)\r\n    {\r\n        long[][] dp = new long[N+1][2];\r\n        dp[0][0] = 0;\r\n        dp[0][1] = 0;\r\n        \r\n        for (int i = 1; i <= N; i++) \r\n        {\r\n            dp[i][0] = dp[i-1][1];\r\n            dp[i][1] = Math.max(dp[i-1][0] + A[i-1], dp[i-1][1] + A[i-1]);\r\n        }\r\n        \r\n        return Math.max(dp[N][0], dp[N][1]);\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\r\n\r\nclass Solution:\r\n    \r\n    # Function to find the maximum subset sum\r\n    def findMaxSubsetSum(self, N: int, A: List[int]) -> int:\r\n        \r\n        # Initializing the dp array with 0\r\n        dp = [[0]*2 for i in range(N+1)]\r\n        dp[0][0], dp[0][1] = 0, 0\r\n        \r\n        # Looping through the elements\r\n        for i in range(1, N+1):\r\n            \r\n            # Calculating the maximum subset sum with and without including the current element\r\n            dp[i][0] = dp[i-1][1]\r\n            dp[i][1] = max(dp[i-1][0]+A[i-1], dp[i-1][1]+A[i-1])\r\n            \r\n        # Returning the maximum subset sum\r\n        return max(dp[N][0], dp[N][1])",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} N\r\n * @param {number[]} A\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to find the maximum sum of a non-empty subarray.\r\n    findMaxSubsetSum(N, A) {\r\n        // Initializing the dp array with 0\r\n        let dp = new Array(N+1);\r\n        for(let i=0; i<=N; i++) {\r\n            dp[i] = [0, 0];\r\n        }\r\n\r\n        dp[0][0] = 0;\r\n        dp[0][1] = 0;\r\n        \r\n        // Looping through the elements\r\n        for(let i=1; i<=N; i++) {\r\n            \r\n            // Calculating the maximum subset sum with and without including the current element\r\n            dp[i][0] = dp[i-1][1];\r\n            dp[i][1] = Math.max(dp[i-1][0] + A[i-1], dp[i-1][1] + A[i-1]);\r\n        }\r\n        \r\n        // Returning the maximum subset sum\r\n        return Math.max(dp[N][0], dp[N][1]);\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the maximum subset sum such that no two elements in the subset are adjacent.\n    public long findMaxSubsetSum(int N, List<int> A)\n    {\n        //declaring and initializing dp array.\n        long[,] dp = new long[N + 1, 2];\n        dp[0, 0] = 0;\n        dp[0, 1] = 0;\n\n        //iterating from 1 to N.\n        for (int i = 1; i <= N; i++)\n        {\n            //calculating the maximum of previous element's alternate subset sum\n            //and current element added to previous element's same subset sum.\n            dp[i, 0] = dp[i - 1, 1];\n            dp[i, 1] = Math.Max(dp[i - 1, 0] + A[i - 1], dp[i - 1, 1] + A[i - 1]);\n        }\n        //returning the maximum subset sum.\n        return Math.Max(dp[N, 0], dp[N, 1]);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}