{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700421,
            "title": "Maximum subset XOR",
            "titleSlug": "maximum-subset-xor",
            "content": "<p><span style=\"font-size:18px\">Given an array arr[] of N positive integers. Find&nbsp;an integer denoting&nbsp;the<strong> maximum XOR subset</strong> value in the given array arr[]. </span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input : </strong></span>\r\n<span style=\"font-size:18px\">N = 3\r\narr[] = {2, 4, 5}</span>\r\n<span style=\"font-size:18px\"><strong>Output :</strong> 7</span>\r\n<span style=\"font-size:18px\"><strong>Explanation : </strong></span>\r\n<span style=\"font-size:18px\">The subset {2, 5} has maximum \r\nsubset XOR value.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2 :</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input : </strong></span>\r\n<span style=\"font-size:18px\">N= 3\r\narr[] = {9, 8, 5}</span>\r\n<span style=\"font-size:18px\"><strong>Output :</strong> 13</span>\r\n<span style=\"font-size:18px\"><strong>Explanation : </strong></span>\r\n<span style=\"font-size:18px\">The subset {8, 5} has maximum \r\nsubset XOR value.</span></pre>\r\n\r\n<div><strong><span style=\"font-size:18px\">Your Task :</span></strong></div>\r\n\r\n<div><span style=\"font-size:18px\">You don&#39;t need to&nbsp;read input or print anything. Your task is to complete the function <strong>maxSubsetXOR</strong></span><span style=\"font-size:18px\"><strong>()</strong> which takes the array and an integer as input and returns the maximum subset XOR value.</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Time Complexity :</strong> O(N*Log(max(arr[i])))<br />\r\n<strong>Expected Auxiliary Space : </strong>O(1)</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><strong><span style=\"font-size:18px\">Contraints :</span></strong><br />\r\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup></span></div>\r\n\r\n<div><span style=\"font-size:18px\">1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of `N` positive integers, find the maximum XOR value that can be obtained from a subset of the array.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr[] = {2, 4, 5}",
                        "output": "7",
                        "explanation": "The subset {2, 5} yields the maximum XOR value of 2 ^ 5 = 7."
                    },
                    {
                        "input": "N= 3\narr[] = {9, 8, 5}",
                        "output": "13",
                        "explanation": "The subset {8, 5} yields the maximum XOR value of 8 ^ 5 = 13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If maximum element has Most Significant Bit MSB at position i, then result is at least 2<sup>i</sup></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to return maximum XOR subset in set[]\r\n// Number of bits to represent int\r\n#define INT_BITS 32\r\nclass Solution\r\n{\r\n    public:\r\n    int maxSubsetXOR(int set[], int n)\r\n    {\r\n        // Initialize index of chosen elements\r\n        int index = 0;\r\n     \r\n        // Traverse through all bits of integer starting from\r\n        // the most significant bit (MSB)\r\n        for (int i=INT_BITS-1; i>=0; i--)\r\n        {\r\n            // Initialize index of maximum element and the maximum element\r\n            int maxInd = index, maxEle = INT_MIN;\r\n            for (int j=index; j<n; j++)\r\n            {\r\n                 // If i'th bit of set[j] is set and set[j] is greater\r\n                 // than max so far.\r\n                 if ( (set[j]&(1<<i))!= 0 && set[j]>maxEle )\r\n                    maxEle = set[j], maxInd = j;\r\n            }\r\n     \r\n            // If there was no element with i'th bit set, move to smaller i\r\n            if (maxEle == INT_MIN)\r\n               continue;\r\n     \r\n            // Put maximum element with i'th bit set at index 'index'\r\n            swap(set[index], set[maxInd]);\r\n     \r\n            // Update maxInd and increment index\r\n            maxInd = index;\r\n     \r\n            // Do XOR of set[maxIndex] with all numbers having i'th\r\n            // bit as set.\r\n            for (int j=0; j<n; j++)\r\n            {\r\n                // XOR set[maxInd] those numbers which have the i'th\r\n                // bit set\r\n                if ((j!=maxInd) && ((set[j] & (1<<i)) !=0))\r\n                    set[j] = set[j]^set[maxInd];\r\n            }\r\n     \r\n            // Increment index of chosen elements\r\n            index++;\r\n        }\r\n     \r\n        // Final result is XOR of all elements\r\n        int res = 0;\r\n        for (int i=0; i<n; i++)\r\n            res ^= set[i];\r\n        return res;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Contributor: Saksham Raj Seth\n\nclass Solution {\n    public static int maxSubsetXOR(int set[], int n) {\n        int index = 0;\n\n        // Loop over each bit from 31 to 0\n        for (int i = 31; i >= 0; i--) {\n            int maxInd = index;\n            int maxEle = -2147483648;\n\n            // Find the element with the highest value and the current bit set\n            for (int j = index; j < n; j++) {\n                if ((set[j] & (1 << i)) != 0 && set[j] > maxEle) {\n                    maxEle = set[j];\n                    maxInd = j;\n                }\n            }\n\n            // If no element has the current bit set, continue to the next iteration\n            if (maxEle == -2147483648)\n                continue;\n            \n            // Swap the element with the highest value and the current index\n            int t = set[index];\n            set[index] = set[maxInd];\n            set[maxInd] = t;\n            \n            maxInd = index;\n\n            // Perform XOR operation with the current element to eliminate the current bit\n            for (int j = 0; j < n; j++) {\n                if (j != maxInd && (set[j] & (1 << i)) != 0)\n                    set[j] = set[j] ^ set[maxInd];\n            }\n            \n            index++;\n        }\n        \n        int res = 0;\n        \n        // Perform XOR operation on all elements to get the final result\n        for (int i = 0; i < n; i++)\n            res ^= set[i];\n        \n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "INT_BITS=32\r\nclass Solution:\r\n    # Function to return \r\n    # maximum XOR subset \r\n    # in set[] \r\n    def maxSubsetXOR(self, set,n): \r\n      \r\n        # Initialize index of \r\n        # chosen elements \r\n        index = 0\r\n       \r\n        # Traverse through all \r\n        # bits of integer  \r\n        # starting from the most \r\n        # significant bit (MSB) \r\n        for i in range(INT_BITS-1,-1,-1): \r\n          \r\n            # Initialize index of \r\n            # maximum element and \r\n            # the maximum element \r\n            maxInd = index \r\n            maxEle = -2147483648\r\n            for j in range(index,n): \r\n              \r\n                # If i'th bit of set[j] \r\n                # is set and set[j] is  \r\n                # greater than max so far. \r\n                if ( (set[j] & (1 << i)) != 0 \r\n                         and set[j] > maxEle ): \r\n                      \r\n                    maxEle = set[j] \r\n                    maxInd = j \r\n              \r\n            # If there was no  \r\n            # element with i'th \r\n            # bit set, move to \r\n            # smaller i \r\n            if (maxEle ==-2147483648): \r\n                continue\r\n       \r\n            # Put maximum element \r\n            # with i'th bit set  \r\n            # at index 'index' \r\n            temp=set[index] \r\n            set[index]=set[maxInd] \r\n            set[maxInd]=temp \r\n       \r\n            # Update maxInd and  \r\n            # increment index \r\n            maxInd = index \r\n       \r\n            # Do XOR of set[maxIndex] \r\n            # with all numbers having \r\n            # i'th bit as set. \r\n            for j in range(n): \r\n              \r\n                # XOR set[maxInd] those \r\n                # numbers which have the \r\n                # i'th bit set \r\n                if (j != maxInd and\r\n                   (set[j] & (1 << i)) != 0): \r\n                    set[j] = set[j] ^ set[maxInd] \r\n              \r\n       \r\n            # Increment index of \r\n            # chosen elements \r\n            index=index + 1\r\n          \r\n       \r\n        # Final result is  \r\n        # XOR of all elements \r\n        res = 0\r\n        for i in range(n): \r\n            res =res ^ set[i] \r\n        return res \r\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {number[]} arr\r\n * @param {number} n\r\n * @returns {number}\r\n*/\r\nclass Solution {\r\n    \r\n    maxSubsetXOR(arr, n)\r\n    {\r\n        let INT_BITS=32;\r\n        // Initialize index of chosen elements\r\n        let index = 0;\r\n     \r\n        // Traverse through all bits of integer starting from\r\n        // the most significant bit (MSB)\r\n        for (let i=INT_BITS-1; i>=0; i--)\r\n        {   \r\n            // Initialize index of maximum element and the maximum element\r\n            let maxInd = index, maxEle = -1e9;\r\n            for (let j=index; j<n; j++)\r\n            {\r\n                 // If i'th bit of arr[j] is set and arr[j] is greater\r\n                 // than max so far.\r\n                 if ( (arr[j]&(1<<i))!= 0 && arr[j]>maxEle )\r\n                    maxEle = arr[j], maxInd = j;\r\n            }\r\n            \r\n            // If there was no element with i'th bit set, move to smaller i\r\n            if (maxEle == -1e9)\r\n               continue;\r\n            \r\n            // Put maximum element with i'th bit set at index 'index'\r\n            let temp=arr[index];\r\n            arr[index]=arr[maxInd];\r\n            arr[maxInd]=temp;\r\n            \r\n            // Update maxInd and increment index\r\n            maxInd = index;\r\n            \r\n            // Do XOR of arr[maxIndex] with all numbers having i'th\r\n            // bit as set.\r\n            for (let j=0; j<n; j++)\r\n            {\r\n                // XOR arr[maxInd] those numbers which have the i'th\r\n                // bit set\r\n                if ((j!=maxInd) && ((arr[j] & (1<<i)) !=0))\r\n                    arr[j] = arr[j]^arr[maxInd];\r\n            }\r\n     \r\n            // Increment index of chosen elements\r\n            index++;\r\n        }\r\n     \r\n        // Final result is XOR of all elements\r\n        let res = 0;\r\n        for (let i=0; i<n; i++)\r\n            res ^= arr[i];\r\n        return res;\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution\n{\n    public int maxSubsetXOR(int[] set, int n)\n    {\n        // Initialize index of chosen elements\n        int index = 0;\n\n        // Traverse through all bits of integer starting from\n        // the most significant bit (MSB)\n        for (int i = 31; i >= 0; i--)\n        {\n            // Initialize index of maximum element and the maximum element\n            int maxInd = index, maxEle = int.MinValue;\n            for (int j = index; j < n; j++)\n            {\n                // If i'th bit of set[j] is set and set[j] is greater\n                // than max so far.\n                if (((set[j] >> i) & 1) == 1 && set[j] > maxEle)\n                {\n                    maxEle = set[j];\n                    maxInd = j;\n                }\n            }\n\n            // If there was no element with i'th bit set, move to smaller i\n            if (maxEle == int.MinValue)\n                continue;\n\n            // Put maximum element with i'th bit set at index 'index'\n            int temp = set[index];\n            set[index] = set[maxInd];\n            set[maxInd] = temp;\n\n            // Update maxInd and increment index\n            maxInd = index;\n\n            // Do XOR of set[maxIndex] with all numbers having i'th\n            // bit as set.\n            for (int j = 0; j < n; j++)\n            {\n                // XOR set[maxInd] with those numbers which have the i'th\n                // bit set\n                if (j != maxInd && ((set[j] >> i) & 1) == 1)\n                    set[j] ^= set[maxInd];\n            }\n\n            // Increment index of chosen elements\n            index++;\n        }\n\n        // Final result is XOR of all elements\n        int res = 0;\n        for (int i = 0; i < n; i++)\n            res ^= set[i];\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}