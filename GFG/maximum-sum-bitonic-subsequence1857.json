{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702866,
            "title": "Maximum Sum Bitonic Subsequence",
            "titleSlug": "maximum-sum-bitonic-subsequence1857",
            "content": "<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\">Given an array arr[] of n integers. A <a href=\"http://en.wikipedia.org/wiki/Subsequence\">subsequence&nbsp;</a>of arr[] is called Bitonic if it first increases and then decreases. Find the max sum bitonic subsequence.</span></span></p>\n<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Examples:</strong></span></span></p>\n<pre><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input : </strong>arr[] = [1, 15, 51, 45, 33, 100, 12, 18, 9]\n<strong>Output : </strong>194\n<strong>Explanation : <br /></strong>Bi-tonic Sub-sequence are :\n{1, 51, 9} or {1, 51, 100, 18, 9} or {1, 15, 51, 100, 18, 9}  or {1, 15, 45, 100, 12, 9}  or {1, 15, 45, 100, 18, 9} .. so on\\t     \nMaximum sum Bi-tonic sub-sequence is 1 + 15 + 51 + 100 + 18 + 9 = 194</span></span></pre>\n<pre><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input : </strong>arr[] = [80, 60, 30, 40, 20, 10]\n<strong>Output : </strong>210\n<strong>Explanation : </strong>Here the sequence is strinctly decreasing.</span></span></pre>\n<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></span></p>\n<p><span ><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>3</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum sum of a bitonic subsequence. A bitonic subsequence is one that first increases and then decreases.",
                "constraints": [
                    "1 <= arr.size() <= 10^3",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 15, 51, 45, 33, 100, 12, 18, 9]",
                        "output": "194",
                        "explanation": "The maximum sum bitonic subsequence is formed by [1, 15, 51, 100, 18, 9] resulting in a sum of 194.  Other bitonic subsequences exist, but this one yields the highest sum."
                    },
                    {
                        "input": "[80, 60, 30, 40, 20, 10]",
                        "output": "210",
                        "explanation": "The optimal bitonic subsequence is the entire decreasing sequence, [80, 60, 30, 40, 20, 10].  This yields a sum of 240.  Note that the problem states *first* increases *then* decreases, implying that a decreasing sequence is also bitonic."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >First, find the maximum sum of increasing subsequences. Then, find the maximum sum of decreasing subsequences. Combine these results to find the maximum sum bitonic subsequence.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxSumBS(vector<int>& arr) {\n        int n = arr.size();\n        if (n == 0)\n            return 0;\n\n        // MSIBS[i] - Maximum sum Increasing Bi-tonic subsequence ending with arr[i]\n        // MSDBS[i] - Maximum sum Decreasing Bi-tonic subsequence starting with arr[i]\n        vector<int> MSIBS(n), MSDBS(n);\n\n        // Initialize MSIBS and MSDBS with the values of arr\n        for (int i = 0; i < n; ++i) {\n            MSIBS[i] = arr[i];\n            MSDBS[i] = arr[i];\n        }\n\n        // Compute MSIBS values from left to right\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                    MSIBS[i] = MSIBS[j] + arr[i];\n                }\n            }\n        }\n\n        // Compute MSDBS values from right to left\n        for (int i = n - 2; i >= 0; --i) {\n            for (int j = n - 1; j > i; --j) {\n                if (arr[i] > arr[j] && MSDBS[i] < MSDBS[j] + arr[i]) {\n                    MSDBS[i] = MSDBS[j] + arr[i];\n                }\n            }\n        }\n\n        // Find the maximum value of MSIBS[i] + MSDBS[i] - arr[i]\n        int max_sum = INT_MIN;\n        for (int i = 0; i < n; ++i) {\n            max_sum = max(max_sum, MSIBS[i] + MSDBS[i] - arr[i]);\n        }\n\n        return max_sum;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxSumBS(int[] arr) {\n        int n = arr.length;\n        if (n == 0) return 0;\n\n        int[] MSIBS = new int[n];\n        int[] MSDBS = new int[n];\n\n        // Initialize MSIBS and MSDBS with the values of arr\n        for (int i = 0; i < n; i++) {\n            MSIBS[i] = arr[i];\n            MSDBS[i] = arr[i];\n        }\n\n        // Compute MSIBS values from left to right\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                    MSIBS[i] = MSIBS[j] + arr[i];\n                }\n            }\n        }\n\n        // Compute MSDBS values from right to left\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = n - 1; j > i; j--) {\n                if (arr[i] > arr[j] && MSDBS[i] < MSDBS[j] + arr[i]) {\n                    MSDBS[i] = MSDBS[j] + arr[i];\n                }\n            }\n        }\n\n        // Find the maximum value of MSIBS[i] + MSDBS[i] - arr[i]\n        int maxSum = Integer.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n            maxSum = Math.max(maxSum, MSIBS[i] + MSDBS[i] - arr[i]);\n        }\n\n        return maxSum;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxSumBS(self, arr):\n        n = len(arr)\n        if n == 0:\n            return 0\n\n        MSIBS = arr[:]\n        MSDBS = arr[:]\n\n        # Compute MSIBS values from left to right\n        for i in range(1, n):\n            for j in range(i):\n                if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]:\n                    MSIBS[i] = MSIBS[j] + arr[i]\n\n        # Compute MSDBS values from right to left\n        for i in range(n - 2, -1, -1):\n            for j in range(n - 1, i, -1):\n                if arr[i] > arr[j] and MSDBS[i] < MSDBS[j] + arr[i]:\n                    MSDBS[i] = MSDBS[j] + arr[i]\n\n        # Find the maximum value of MSIBS[i] + MSDBS[i] - arr[i]\n        max_sum = float('-inf')\n        for i in range(n):\n            max_sum = max(max_sum, MSIBS[i] + MSDBS[i] - arr[i])\n\n        return max_sum\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxSumBS(arr) {\n        const n = arr.length;\n        if (n === 0) return 0;\n\n        const MSIBS = [...arr ];\n        const MSDBS = [...arr ];\n\n        // Compute MSIBS values from left to right\n        for (let i = 1; i < n; i++) {\n            for (let j = 0; j < i; j++) {\n                if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                    MSIBS[i] = MSIBS[j] + arr[i];\n                }\n            }\n        }\n\n        // Compute MSDBS values from right to left\n        for (let i = n - 2; i >= 0; i--) {\n            for (let j = n - 1; j > i; j--) {\n                if (arr[i] > arr[j] && MSDBS[i] < MSDBS[j] + arr[i]) {\n                    MSDBS[i] = MSDBS[j] + arr[i];\n                }\n            }\n        }\n\n        // Find the maximum value of MSIBS[i] + MSDBS[i] - arr[i]\n        let maxSum = -Infinity;\n        for (let i = 0; i < n; i++) {\n            maxSum = Math.max(maxSum, MSIBS[i] + MSDBS[i] - arr[i]);\n        }\n\n        return maxSum;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}