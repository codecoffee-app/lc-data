{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704945,
            "title": "Maximum sum difference",
            "titleSlug": "maximum-sum-difference2545",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>N</strong>. We have to find maximum sum of all permutations of numbers from 1 to N. The maximum sum will be sum of absolute difference of adjacent elements in array.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 2\n<strong>Output:</strong> 1\n<strong>Explaination:</strong> Permutations of 2 are: \n{1, 2} = 1, {2, 1} = 1.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 3\n<strong>Output:</strong> 3\n<strong>Explaintation:</strong> Permutations of size 3 are: \n{1, 2, 3} = 1 + 1, {1, 3, 2} = 2 + 1 \n{2, 1, 3} = 1 + 2, {2, 3, 1} = 1 + 2 \n{3, 1, 2} = 2 + 1, {3, 2, 1} = 1 + 1 </span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>maxSum()</strong> which takes N as input parameter and returns the maximum possible difference sum from all permutations of N numbers.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n2 &le; N &le; 1000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Check how can you increase the difference between two adjacent elements.</span></p>",
            "<p><span style=\"font-size:18px\">Keep the smallest at middle of the permutation and think of maximizing the difference between adjacent elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution{\npublic:\n    // Function to find the maximum sum of numbers from 1 to N\n    int maxSum(int N){\n        // If N is 1, return N\n        if(N == 1)\n            return N;\n\n        // Calculate the sum using the formula\n        int x = (N *(N-1))/2 - 1 + N/2;\n\n        // Return the maximum sum\n        return x;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution{\n    // Function to calculate the maximum sum\n    static int maxSum(int N){\n        // If N is equal to 1, return 1\n        if(N == 1)\n            return N;\n        \n        // Calculate the maximum sum using the given formula\n        int x = (N*(N-1))/2 - 1 + N/2;\n        \n        // Return the maximum sum\n        return x;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public int maxSum(int N)\n    {\n        // If N is 1, return N\n        if(N == 1)\n            return N;\n\n        // Calculate the sum using the formula\n        int x = (N *(N-1))/2 - 1 + N/2;\n\n        // Return the maximum sum\n        return x;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}