{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704037,
            "title": "Max Sum Increasing Subsequence",
            "titleSlug": "maximum-sum-increasing-subsequence4749",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of positive integers <strong>arr</strong>. Find the <strong>maximum sum subsequence</strong> of the given array such that the integers in the subsequence are sorted in strictly increasing order i.e. a <strong>strictly increasing subsequence</strong>.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [1, 101, 2, 3, 100]\n<strong>Output:</strong> 106\n<strong>Explanation</strong>: The maximum sum of a increasing sequence is obtained from [1, 2, 3, 100].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [4, 1, 2, 3]\n<strong>Output:</strong> 6\n<strong>Explanation</strong>: The maximum sum of a increasing sequence is obtained from {1, 2, 3}.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [4, 1, 2, 4]\n<strong>Output:</strong> 7\n<strong>Explanation</strong>: The maximum sum of a increasing sequence is obtained from {1, 2, 4}.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &nbsp;&le; &nbsp;arr.size() &nbsp;&le; &nbsp;10<sup>3</sup></span><br /><span style=\"font-size: 18px;\">1 &nbsp;&le; &nbsp;arr[i] &nbsp;&le; &nbsp;10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers `arr`, find the maximum sum of a subsequence where the integers are strictly increasing. This is known as the maximum sum increasing subsequence problem.",
                "constraints": [
                    "1 <= arr.size() <= 1000",
                    "1 <= arr[i] <= 100000"
                ],
                "testcases": [
                    {
                        "input": "[1, 101, 2, 3, 100]",
                        "output": "106",
                        "explanation": "The maximum sum increasing subsequence is [1, 2, 3, 100], and its sum is 1 + 2 + 3 + 100 = 106."
                    },
                    {
                        "input": "[4, 1, 2, 3]",
                        "output": "6",
                        "explanation": "The maximum sum increasing subsequence is [1, 2, 3], and its sum is 1 + 2 + 3 = 6."
                    },
                    {
                        "input": "[4, 1, 2, 4]",
                        "output": "7",
                        "explanation": "The maximum sum increasing subsequence is [1, 2, 4], and its sum is 1 + 2 + 4 = 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">1. The concept of Longest Increasing Subsequence(LIS) will be useful here.<br />\nLIS: length of the longest subsequence of a given sequence such that all elements of the subsequence are sorted in increasing order.</span><br />\n&nbsp;</p>",
            "<p><span style=\"font-size:18px\">2. Keeping LIS concept in mind, we can add one more catch here instead of maintaining length of subsequence as criteria we can have <strong>sum</strong> as criteria to keep dp[i] update.</span><br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Dynamic Programming solution to find the maximum sum increasing subsequence\nclass Solution {\n  public:\n    int maxSumIS(vector<int>& arr) {\n        int n = arr.size();\n        int i, j, max = 0;\n        int msis[n];\n\n        // Initialize msis values for all indexes\n        for (i = 0; i < n; i++)\n            msis[i] = arr[i];\n\n        // Compute maximum sum values in bottom up manner\n        for (i = 1; i < n; i++)\n            for (j = 0; j < i; j++)\n                if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i])\n                    msis[i] = msis[j] + arr[i];\n\n        // Pick maximum of all msis values\n        for (i = 0; i < n; i++)\n            if (max < msis[i])\n                max = msis[i];\n\n        return max;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // method to calculate the maximum sum increasing subsequence\n    public int maxSumIS(int arr[]) {\n        int n = arr.length;\n        int i, j, max = 0;\n        int msis[] = new int[n];\n\n        /* Initialize msis values\n        for all indexes */\n        // initializing the msis array with the same values as the input array\n        for (i = 0; i < n; i++) msis[i] = arr[i];\n\n        /* Compute maximum sum values\n        in bottom up manner */\n        // calculating the maximum sum increasing subsequence using dynamic programming\n        for (i = 1; i < n; i++)\n            for (j = 0; j < i; j++)\n                if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i])\n                    msis[i] = msis[j] + arr[i];\n\n        /* Pick maximum of\n        all msis values */\n        // finding the maximum value in the msis array\n        for (i = 0; i < n; i++)\n            if (max < msis[i]) max = msis[i];\n\n        return max;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function template for Python 3\n\n\nclass Solution:\n\n    def maxSumIS(self, arr):\n        n = len(arr)\n        dp = [-1] * (n + 1)\n\n        # Recursive function to find the maximum increasing subsequence sum\n        def solve(arr, i, n, dp):\n            if i == n:\n                return 0\n            if dp[i] != -1:\n                return dp[i]\n\n            ans = arr[i]\n            for j in range(i + 1, n):\n                # Check if the current element is greater than the previous element\n                if arr[i] < arr[j]:\n                    ans = max(ans, arr[i] + solve(arr, j, n, dp))\n            dp[i] = ans\n            return dp[i]\n\n        ans = 0\n        for i in range(n):\n            # Find the maximum increasing subsequence sum starting from each element\n            ans = max(ans, solve(arr, i, n, dp))\n\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    // Function to find sum of longest increasing subsequence.\n    public int maxSumIS(int[] arr) {\n        int i, j, max = 0;\n        int n = arr.Length;\n        int[] msis = new int[n];\n\n        // Initialize msis values for all indexes\n        for (i = 0; i < n; i++) msis[i] = arr[i];\n\n        // Compute maximum sum values in bottom up manner\n        for (i = 1; i < n; i++)\n            for (j = 0; j < i; j++)\n                if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i])\n                    msis[i] = msis[j] + arr[i];\n\n        // Pick maximum of all msis values\n        for (i = 0; i < n; i++)\n            if (max < msis[i]) max = msis[i];\n\n        return max;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @return {number}\n */\n\nclass Solution {\n    maxSumIS(arr) {\n        let n = arr.length;\n        let maxSum = 0;\n        let msis = new Array(n).fill(0);\n\n        for (let i = 0; i < n; i++) {\n            msis[i] = arr[i];\n        }\n\n        for (let i = 1; i < n; i++) {\n            for (let j = 0; j < i; j++) {\n                if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i]) {\n                    msis[i] = msis[j] + arr[i];\n                }\n            }\n        }\n\n        for (let i = 0; i < n; i++) {\n            if (maxSum < msis[i]) {\n                maxSum = msis[i];\n            }\n        }\n\n        return maxSum;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}