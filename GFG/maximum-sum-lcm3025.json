{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705610,
            "title": "Maximum Sum LCM",
            "titleSlug": "maximum-sum-lcm3025",
            "content": "<p>Given a positive number n. You need to write a program to find the maximum sum of distinct numbers such that the LCM of all these numbers is equal to n and those numbers are less than or equal to n.<br />\r\n<br />\r\n<strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input</strong>: n = 2\r\n<strong>Output:</strong>&nbsp;3&nbsp;\r\n<strong>Explanation</strong>: The distinct numbers you can have are \r\njust 1 and 2 and their sum is equal to 3.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>n = 5\r\n<strong>Output:&nbsp;</strong>6\r\n<strong>Explanation</strong>: The distinct numbers you can have \r\nare just 1 and 5 and their sum is equal to 6.\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou dont need to read input or print anything. Complete the function <strong>maxSumLCM()&nbsp;</strong>which takes n&nbsp;as input parameter and returns the maximum sum of distinct numbers such that the LCM of all these numbers is equal to n.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong> O(sqrt(n))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)<br />\r\n<br />\r\n<strong>Constraints:</strong><br />\r\n1&lt;= N&nbsp;&lt;=1000000000</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">find all proper divisors.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n    // Returns maximum sum of numbers with \r\n    // LCM as N \r\n    long long int maxSumLCM(int n) \r\n    { \r\n        long long int max_sum = 0;  // Initialize result \r\n      \r\n        // Finding a divisor of n and adding \r\n        // it to max_sum \r\n        for (int i=1; i*i<=n; i++) \r\n        { \r\n            if (n%i == 0) \r\n            { \r\n                max_sum += i; \r\n                if (n/i != i) \r\n                    max_sum += (n/i); \r\n            } \r\n        } \r\n      \r\n        return max_sum; \r\n    } \r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static long maxSumLCM(int n) {\n        long sum=0; // initialize the sum variable\n        for(int i=1;i*i<=n;i++){ // loop through the numbers up to the square root of n\n            if(n%i==0){ // check if i is a factor of n\n                sum+=i; // add i to the sum\n            }\n            if(i!=n/i) // check if i is not equal to the square root of n (to avoid duplication)\n            if(n%(n/i)==0){ // check if n/i is a factor of n\n                sum+=(n/i); // add n/i to the sum\n            }\n        }\n        return sum; // return the sum\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    # Function to find the maximum sum obtained from LCM of divisors of n.\r\n    def maxSumLCM (self, n):\r\n        max_sum=0\r\n        i=1\r\n        # iterating until the square of i is less than or equal to n.\r\n        while i**2<=n:\r\n            # if i is a divisor of n\r\n            if n%i==0:\r\n                # adding i to the sum\r\n                max_sum+=i\r\n                # if i and n/i are different divisors of n,\r\n                # then adding n/i to the sum\r\n                if n//i!=i:\r\n                    max_sum+=n//i\r\n            # incrementing i by 1\r\n            i+=1\r\n        # returning the maximum sum obtained from LCM of divisors of n.\r\n        return max_sum",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the maximum sum such that no three are consecutive.\n    maxSumLCM(n) {\n        let max_sum = 0;\n        let i = 1;\n        // iterating until the square of i is less than or equal to n.\n        while (i ** 2 <= n) {\n            // if i is a divisor of n\n            if (n % i === 0) {\n                // adding i to the sum\n                max_sum += i;\n                // if i and n/i are different divisors of n,\n                // then adding n/i to the sum\n                if (n / i !== i) {\n                    max_sum += n / i;\n                }\n            }\n            // incrementing i by 1\n            i++;\n        }\n        // returning the maximum sum obtained from LCM of divisors of n.\n        return max_sum;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public long maxSumLCM(int n)\n    {\n        long max_sum = 0;  // Initialize result \n\n        // Finding a divisor of n and adding \n        // it to max_sum \n        for (int i=1; i*i<=n; i++) \n        { \n            if (n%i == 0) \n            { \n                max_sum += i; \n                if (n/i != i) \n                    max_sum += (n/i); \n            } \n        } \n\n        return max_sum; \n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}