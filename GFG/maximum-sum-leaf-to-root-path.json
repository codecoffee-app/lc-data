{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706316,
            "title": "Maximum sum leaf to root path",
            "titleSlug": "maximum-sum-leaf-to-root-path",
            "content": "<p><span style=\"font-size:18px\">Given a Binary Tree, find the maximum sum path from a leaf to root.</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span></strong>\r\n<span style=\"font-size:18px\">\\t  1\r\n\\t / \\\r\n\\t2   3 </span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n4</span>\r\n<strong><span style=\"font-size:18px\">Explanation: </span></strong>\r\n<span style=\"font-size:18px\">Following the path 3 -&gt; 1, results in a\r\nsum of 4, which is the maximum path sum\r\nfrom leaf to root for the given tree.</span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span></strong>\r\n<span style=\"font-size:18px\">\\t 10\r\n\\t/  \\\r\n    -2    7\r\n    / \\   \r\n   8  -4    </span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n17</span>\r\n<strong><span style=\"font-size:18px\">Explanation : </span></strong>\r\n<span style=\"font-size:18px\">Following the path 7 -&gt; 10, results in a\r\nsum of 17, which is the maximum path sum\r\nfrom leaf to root for the given tree.</span></pre>\r\n\r\n<div><br />\r\n<strong><span style=\"font-size:18px\">Your task :</span></strong></div>\r\n\r\n<div><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function <strong>maxPathSum()</strong> which takes the root node of the tree as input and returns an integer denoting the maximum possible leaf to root path sum.</span></div>\r\n\r\n<div><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n) , where n = number of nodes</span></div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong> O(1)</span></div>\r\n\r\n<div><br />\r\n<strong><span style=\"font-size:18px\">Constraints :&nbsp;</span></strong></div>\r\n\r\n<div><span style=\"font-size:18px\">1 &lt;= Number of nodes &lt;= 10^5</span></div>\r\n\r\n<div><span style=\"font-size:18px\">-10<sup>6</sup>&nbsp;&lt;= max sum path &lt;= 10<sup>6</sup></span></div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, determine the maximum sum of any path from a leaf node to the root node.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5",
                    "-10^6 <= max sum path <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "     1\n    / \\\n   2   3",
                        "output": "4",
                        "explanation": "The path 3 -> 1 yields a sum of 4. This is the maximum possible sum from a leaf to the root."
                    },
                    {
                        "input": "    10\n   /  \\\n -2    7\n / \\\n8  -4",
                        "output": "17",
                        "explanation": "The path 7 -> 10 yields a sum of 17. This is the maximum possible sum from a leaf to the root."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse the tree two times and find the max path sum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n// This function Sets the target_leaf_ref to refer \r\n// the leaf node of the maximum path sum. Also, \r\n// returns the max_sum using max_sum_ref \r\nvoid getTargetLeaf(Node* node, int* max_sum_ref, \r\n                   int curr_sum, Node** target_leaf_ref) \r\n{ \r\n    if (node == NULL) \r\n        return; \r\n  \r\n    // Update current sum to hold sum of nodes on path \r\n    // from root to this node \r\n    curr_sum = curr_sum + node->data; \r\n  \r\n    // If this is a leaf node and path to this node has \r\n    // maximum sum so far, then make this node target_leaf \r\n    if (node->left == NULL && node->right == NULL) { \r\n        if (curr_sum > *max_sum_ref) { \r\n            *max_sum_ref = curr_sum; \r\n            *target_leaf_ref = node; \r\n        } \r\n    } \r\n  \r\n    // If this is not a leaf node, then recur down \r\n    // to find the target_leaf \r\n    getTargetLeaf(node->left, max_sum_ref, curr_sum, \r\n                  target_leaf_ref); \r\n    getTargetLeaf(node->right, max_sum_ref, curr_sum, \r\n                  target_leaf_ref); \r\n} \r\n\r\nclass Solution{\r\n    public:\r\nint maxPathSum(Node* root)\r\n{\r\n    // base case \r\n    if (root == NULL) \r\n        return 0; \r\n  \r\n    Node* target_leaf; \r\n    int max_sum = INT_MIN; \r\n  \r\n    // find the target leaf and maximum sum \r\n    getTargetLeaf(root, &max_sum, 0, &target_leaf); \r\n  \r\n    return max_sum; // return maximum sum \r\n}\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\r\n    static int max_sum;\r\n    static void getTargetLeaf(Node node, \r\n                   int curr_sum, Node target_leaf_ref) \r\n    { \r\n        if (node == null) \r\n            return; \r\n      \r\n        // Update current sum to hold sum of nodes on path \r\n        // from root to this node \r\n        curr_sum = curr_sum + node.data; \r\n      \r\n        // If this is a leaf node and path to this node has \r\n        // maximum sum so far, then make this node target_leaf \r\n        if (node.left == null && node.right == null) { \r\n            if (curr_sum > max_sum) { \r\n                max_sum = curr_sum; \r\n                target_leaf_ref = node; \r\n            } \r\n        } \r\n      \r\n        // If this is not a leaf node, then recur down \r\n        // to find the target_leaf \r\n        getTargetLeaf(node.left, curr_sum, \r\n                      target_leaf_ref); \r\n        getTargetLeaf(node.right, curr_sum, \r\n                      target_leaf_ref); \r\n    }\r\n    public static int maxPathSum(Node root)\r\n    {\r\n        \r\n        // base case \r\n        if (root == null) \r\n            return 0; \r\n      \r\n        Node target_leaf = null; \r\n        max_sum = Integer.MIN_VALUE; \r\n      \r\n        // find the target leaf and maximum sum \r\n        getTargetLeaf(root, 0, target_leaf); \r\n      \r\n        return max_sum; // return maximum sum \r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to find the maximum path sum in a binary tree.\n    def maxPathSum(self, root):\n        # Initialize the current sum and maximum sum.\n        cr, m = 0, float('-inf')\n        \n        # Recursive helper function to calculate the maximum path sum.\n        def maximal(r, cr):\n            nonlocal m\n            \n            # If the node is empty, return 0.\n            if not r:\n                return 0\n            \n            # Add the value of the current node to the current sum.\n            cr += r.data\n            \n            # If the current node is a leaf node, update the maximum sum if necessary.\n            if not r.left and not r.right:\n                m = max(m, cr)\n                \n            # Recursively calculate the maximum path sum from the left and right subtrees.\n            maximal(r.left, cr)\n            maximal(r.right, cr)\n            \n        # Call the helper function to find the maximum path sum starting from the root.\n        maximal(root, cr)\n        \n        # Return the maximum path sum.\n        return m",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nfunction getTargetLeaf(node, max_sum_ref, curr_sum, target_leaf_ref) { \n    if (node === null) \n        return; \n\n    curr_sum = curr_sum + node.data; \n\n    if (node.left === null && node.right === null) { \n        if (curr_sum > max_sum_ref[0]) { \n            max_sum_ref[0] = curr_sum; \n            target_leaf_ref[0] = node; \n        } \n    } \n\n    getTargetLeaf(node.left, max_sum_ref, curr_sum, target_leaf_ref); \n    getTargetLeaf(node.right, max_sum_ref, curr_sum, target_leaf_ref); \n}\n\nclass Solution {\n    maxPathSum(root){\n        if (root === null) \n            return 0; \n\n        let max_sum_ref = [Number.MIN_SAFE_INTEGER]; \n        let target_leaf_ref = [null]; \n\n        getTargetLeaf(root, max_sum_ref, 0, target_leaf_ref); \n\n        return max_sum_ref[0]; \n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}