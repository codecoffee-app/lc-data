{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706344,
            "title": "Maximum sum of elements not part of LIS",
            "titleSlug": "maximum-sum-of-elements-not-part-of-lis",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>Arr</strong><strong>[]</strong>, the task is to find the maximum sum of all the elements which are not a part of the longest increasing subsequence.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 6\nArr = {4, 6, 1, 2, 4, 6}\n<strong>Output:</strong> 10\n<strong>Explaination:</strong> Elements are 4 and 6.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 5\nArr = {5, 4, 3, 2, 1}\n<strong>Output:</strong> 14\n<strong>Explaination:</strong> Elements are 5,4,3 and 2.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>maxSumLis()</strong>&nbsp;which takes the array <strong>Arr[]</strong> and its size <strong>n&nbsp;</strong>as input parameters&nbsp;and returns maximum sum of elements not part of LIS.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 1000</span><br /><span style=\"font-size: 18px;\">1 &le; Arr[i]&nbsp;&le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum sum of all elements that are not part of the longest increasing subsequence (LIS).",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= Arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 6\nArr = {4, 6, 1, 2, 4, 6}",
                        "output": "10",
                        "explanation": "The longest increasing subsequence can be {1, 2, 4, 6} or {4, 6}.  Elements not in the LIS and contributing to the sum are 4 and 6. Therefore the sum is 4 + 6 = 10."
                    },
                    {
                        "input": "n = 5\nArr = {5, 4, 3, 2, 1}",
                        "output": "14",
                        "explanation": "The longest increasing subsequence has length 1.  We can pick any single element for the LIS, leaving the others. The elements not in a longest increasing subsequence are 5, 4, 3, and 2.  Their sum is 5 + 4 + 3 + 2 = 14. Alternatively the LIS can be 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to find out the&nbsp;LIS having minimum sum using Dynamic&nbsp;Programing.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    int maxSumLis(int Arr[], int n) {\n        int totalSum = 0;\n\n        // Find total sum of array\n        for (int i = 0; i < n; i++) {\n            totalSum += Arr[i];\n        }\n\n        // Maintain a 2D array\n        int dp[2][n];\n        for (int i = 0; i < n; i++) {\n            dp[0][i] = 1;\n            dp[1][i] = Arr[i];\n        }\n\n        // Update the dp array along\n        // with sum in the second row\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (Arr[i] > Arr[j]) {\n                    // In case of greater length\n                    // Update the length along\n                    // with sum\n                    if (dp[0][i] < dp[0][j] + 1) {\n                        dp[0][i] = dp[0][j] + 1;\n                        dp[1][i] = dp[1][j] + Arr[i];\n                    }\n\n                    // In case of equal length\n                    // find length update length\n                    // with minimum sum\n                    else if (dp[0][i] == dp[0][j] + 1) {\n                        dp[1][i] = min(dp[1][i], dp[1][j] + Arr[i]);\n                    }\n                }\n            }\n        }\n        int maxm = 0;\n        int subtractSum = 0;\n\n        // Find the sum that need to\n        // be subtracted from total sum\n        for (int i = 0; i < n; i++) {\n            if (dp[0][i] > maxm) {\n                maxm = dp[0][i];\n                subtractSum = dp[1][i];\n            } else if (dp[0][i] == maxm) {\n                subtractSum = min(subtractSum, dp[1][i]);\n            }\n        }\n\n        // Return the sum\n        return totalSum - subtractSum;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    def maxSumLis(self, Arr, n):\n        # Total sum of the array\n        total = sum(Arr)\n        \n        # Initialize dp array with length of array\n        dp = [[0]*(n) for ele in range(2)]\n        \n        # Initialize dp array with base cases\n        for i in range(n):\n            dp[0][i]=1\n            dp[1][i]=Arr[i]\n        \n        # Iterate over the array to fill dp array\n        for i in range(1,n):\n            for j in range(i):\n                # If current element is greater than previous element\n                if Arr[i]>Arr[j]:\n                    # Update the dp array based on condition\n                    if dp[0][i]<dp[0][j]+1:\n                        dp[0][i] = dp[0][j]+1\n                        dp[1][i]=dp[1][j]+Arr[i]\n                    # If two subsequence have same length, choose one with minimum sum\n                    elif dp[0][i]==dp[0][j]+1:\n                        dp[1][i]=min(dp[1][i],dp[1][j]+Arr[i])\n        \n        # Initialize variables for maximum sum and length of longest increasing subsequence\n        ans =0\n        length = 0\n        \n        # Iterate over dp array to find maximum sum and length\n        for i in range(n):\n            if dp[0][i]>length:\n                length = dp[0][i]\n                ans = dp[1][i]\n            elif dp[0][i]==length:\n                ans =min(ans,dp[1][i])\n        \n        # Return the difference between total sum and maximum sum of subsequence\n        return total-ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}