{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705187,
            "title": "Maximum sum of hour glass",
            "titleSlug": "maximum-sum-of-hour-glass3842",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers <strong>n</strong>, <strong>m</strong> and a 2D matrix <strong>mat</strong> of dimensions <strong>nxm</strong>, the task is to find the <strong>maximum sum</strong> of an <strong>hourglass</strong>.<br />An <strong>hourglass</strong> is defined as a part of the matrix with the following form:</span></p>\n<p><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/705187/Web/Other/blobid1_1710860182.png\" width=\"209\" height=\"213\" /></span></p>\n<p><span style=\"font-size: 18px;\">Return <strong>-1</strong> if any hourglass is <strong>not found</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 3, m = 3\nmat = [[1, 2, 3],<br />\\t [4, 5, 6],<br />\\t [7, 8, 9]]\n<strong>Output:</strong>\n35\n<strong>Explanation:</strong>\nThere is only one hour glass which is\n1 2 3\n  5\n7 8 9   and its sum is 35.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 2, m = 3\nmat = [[1, 2, 3],<br />\\t [4, 5, 6]]\n<strong>Output:</strong>\n-1\n<strong>Explanation:</strong>\nThere are no hour glasses in this matrix.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>findMaxSum()</strong> which takes the two integers <strong>n</strong>, <strong>m</strong>, and the 2D matrix <strong>mat</strong> as input parameters and returns the maximum sum of an hourglass in the matrix. If there are no hourglasses, it returns -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n*m)<br /><strong>Expected Auxillary Space: </strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>1 &lt;= n &lt;= 150<strong><br /></strong></span><span style=\"font-size: 18px;\">3 &lt;= m &lt;= 150<br />0 &lt;= mat[i][j] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">If n or m is less than 3, then there are no hourglasses &amp; for each cell (except the boundary cells), consider it as the top-left cell of an hourglass.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int findMaxSum(int N, int M, vector<vector<int>> Mat) {\r\n        if (N < 3 or M < 3) return -1;\r\n\r\n        // Here loop runs (R-2)*(C-2) times considering\r\n        // different top left cells of hour glasses.\r\n        int max_sum = INT_MIN;\r\n        for (int i = 0; i < N - 2; i++) {\r\n            for (int j = 0; j < M - 2; j++) {\r\n                // Considering mat[i][j] as top left cell of\r\n                // hour glass.\r\n                int sum =\r\n                    (Mat[i][j] + Mat[i][j + 1] + Mat[i][j + 2]) +\r\n                    (Mat[i + 1][j + 1]) +\r\n                    (Mat[i + 2][j] + Mat[i + 2][j + 1] + Mat[i + 2][j + 2]);\r\n\r\n                // If previous sum is less then current sum then\r\n                // update new sum in max_sum\r\n                max_sum = max(max_sum, sum);\r\n            }\r\n        }\r\n        return max_sum;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    int findMaxSum(int N, int M, int Mat[][]) {\r\n        if (N < 3 || M < 3) return -1;\r\n\r\n        // Here loop runs (R-2)*(C-2) times considering\r\n        // different top left cells of hour glasses.\r\n        int max_sum = -1;\r\n        for (int i = 0; i < N - 2; i++) {\r\n            for (int j = 0; j < M - 2; j++) {\r\n                // Considering mat[i][j] as top left cell of\r\n                // hour glass.\r\n                int sum =\r\n                    (Mat[i][j] + Mat[i][j + 1] + Mat[i][j + 2]) +\r\n                    (Mat[i + 1][j + 1]) +\r\n                    (Mat[i + 2][j] + Mat[i + 2][j + 1] + Mat[i + 2][j + 2]);\r\n\r\n                // If previous sum is less then current sum then\r\n                // update new sum in max_sum\r\n                max_sum = Math.max(max_sum, sum);\r\n            }\r\n        }\r\n        return max_sum;\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def findMaxSum(self,N,M,Mat):\r\n        if N<3 or M<3:\r\n            return -1\r\n        # Here loop runs (R-2)*(C-2) times considering\r\n        # different top left cells of hour glasses.\r\n        \r\n        max_sum=-1\r\n        for i in range(N-2):\r\n            for j in range(M-2):\r\n                # Considering mat[i][j] as top left cell of\r\n                # hour glass.\r\n                sum = (Mat[i][j]+Mat[i][j+1]+Mat[i][j+2])+(Mat[i+1][j+1])+(Mat[i+2][j]+Mat[i+2][j+1]+Mat[i+2][j+2])\r\n                # If previous sum is less then current sum then\r\n                # update new sum in max_sum\r\n                max_sum=max(max_sum,sum)\r\n        return max_sum  ",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution\n{\n    public int findMaxSum(int N, int M, int[][] Mat)\n    {\n        if (N < 3 || M < 3) return -1;\n\n        int max_sum = int.MinValue;\n        for (int i = 0; i < N - 2; i++)\n        {\n            for (int j = 0; j < M - 2; j++)\n            {\n                int sum =\n                    (Mat[i][j] + Mat[i][j + 1] + Mat[i][j + 2]) +\n                    (Mat[i + 1][j + 1]) +\n                    (Mat[i + 2][j] + Mat[i + 2][j + 1] + Mat[i + 2][j + 2]);\n\n                max_sum = Math.Max(max_sum, sum);\n            }\n        }\n        return max_sum;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n* @param {number} N\n* @param {number} M\n* @param {number[][]} Mat\n* @returns {number}\n*/\n\nclass Solution {\n    //Function to find maximum sum submatrix.\n    findMaxSum(N, M, Mat) {\n        if (N < 3 || M < 3) {\n            return -1;\n        }\n        \n        let max_sum = -1;\n        for (let i = 0; i < N - 2; i++) {\n            for (let j = 0; j < M - 2; j++) {\n                // Considering Mat[i][j] as the top left cell of the hour glass.\n                let sum = (Mat[i][j] + Mat[i][j + 1] + Mat[i][j + 2]) +\n                          (Mat[i + 1][j + 1]) +\n                          (Mat[i + 2][j] + Mat[i + 2][j + 1] + Mat[i + 2][j + 2]);\n\n                max_sum = Math.max(max_sum, sum);\n            }\n        }\n        return max_sum;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}