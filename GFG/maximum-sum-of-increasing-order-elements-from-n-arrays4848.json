{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703339,
            "title": "Maximum sum of increasing order elements from n arrays",
            "titleSlug": "maximum-sum-of-increasing-order-elements-from-n-arrays4848",
            "content": "<p><span style=\"font-size:18px\">Given <strong>n</strong> arrays of size <strong>m </strong>each. Find maximum sum obtained by selecting a number from each array such that the element&nbsp;selected from the <strong>i-th</strong> array is more than the element selected from <strong>(i-1)-th</strong> array. If maximum sum cannot be obtained then return <strong>0</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039Input :</strong> arr[ ] = {{1,7,4,3}, {4,2,5,1}, {9,5,1,8}}\r\n<strong>Output :</strong> 18\r\n<strong>Explanation:</strong>\r\nWe can select 4 from the first array,\r\n5 from second array and 9 from the third array.\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>\u00e2\u20ac\u2039Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong> arr[ ] = {{9,8,7}, {6,5,4}, {3,2,1}} <strong>\r\nOutput :</strong>  0\r\n\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>maximumSum()</strong> that takes number of row&nbsp;<strong>N</strong>, a number of Column<strong> M</strong>, 2-d array <strong>(arr)</strong>, and return the maximum sum if cannot be obtained then return <strong>0</strong>. The driver code takes care of the printing.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*M).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N, M &le; 500</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given `n` arrays, each of size `m`, find the maximum sum obtainable by selecting one number from each array. The selected number from the `i-th` array must be strictly greater than the number selected from the `(i-1)-th` array. If a valid selection leading to a maximum sum cannot be found, return 0.",
                "constraints": [
                    "1 <= N <= 500 (where N is the number of arrays)",
                    "1 <= M <= 500 (where M is the size of each array)"
                ],
                "testcases": [
                    {
                        "input": "arr = {{1,7,4,3}, {4,2,5,1}, {9,5,1,8}}",
                        "output": "18",
                        "explanation": "The optimal selection is: 4 from the first array, 5 from the second array, and 9 from the third array.  4 < 5 < 9, and 4 + 5 + 9 = 18."
                    },
                    {
                        "input": "arr = {{9,8,7}, {6,5,4}, {3,2,1}}",
                        "output": "0",
                        "explanation": "No valid selection is possible such that each element is strictly greater than the previous element. Therefore, the maximum sum is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The idea is to start picking from the last array. We pick the maximum element from the last array, then we move to the second last array. In the second last array, we find the largest element which is smaller than the maximum element picked from the last array. We repeat this process till we reach the first array.</span></p>\n\n<p><span style=\"font-size:18px\">To obtain maximum sum we can sort all arrays and start bottom to up traversing each array from right to left and choose a number such that it is greater than the previous element. If we are not able to select an element from the array then return 0.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "int maximumSum( int n,int m, vector<vector<int>> &a) {\r\n\r\n    // Store maximum element of last array\r\n    int prev = *max_element(&a[n-1][0],\r\n    \t\t\t\t&a[n-1][m-1] + 1);\r\n    \r\n    // Selecting maximum element from\r\n    // previously selected element\r\n    int sum = prev;\r\n    for (int i = n - 2; i >= 0; i--) {\r\n    \r\n    \tint max_smaller = INT_MIN;\r\n    \tfor (int j = m - 1; j >= 0; j--) {\r\n    \tif (a[i][j] < prev &&\r\n    \t\ta[i][j] > max_smaller)\r\n    \t\tmax_smaller = a[i][j];\r\n    \t}\r\n    \r\n    \t// max_smaller equals to INT_MIN means\r\n    \t// no element is found in a[i] so\r\n    \t// return 0\r\n    \tif (max_smaller == INT_MIN)\r\n    \treturn 0;\r\n    \r\n    \tprev = max_smaller;\r\n    \tsum += max_smaller;\r\n    }\r\n    \r\n    return sum;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}