{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 869869,
            "title": "Two Smallests in Every Subarray",
            "titleSlug": "maximum-sum-of-smallest-and-second-smallest-in-an-array",
            "content": "<p><span style=\"font-size: 12pt;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">Given an array of integers </span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">arr,</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"> the task is to find and return the maximum sum of the </span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">smallest&nbsp;</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">and&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">second smallest </strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">element</span> among all possible subarrays of size greater than one. </span>If it is not possible, then return <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr = [4, 3, 1, 5, 6]<strong><br />Output: </strong>11<br /><strong>Explanation:&nbsp;</strong>Subarrays with smallest and second smallest are,<br />Subarray: [4, 3], smallest = 3, second smallest = 4, sum = 7<br />Subarray: [4, 3, 1], smallest = 1, second smallest = 3, sum = 4<br />Subarray: [4, 3, 1, 5], smallest = 1, second smallest = 3, sum = 4<br />Subarray: [4, 3, 1, 5, 6], smallest = 1, second smallest = 3, sum = 4<br />Subarray: [3, 1], smallest = 1, second smallest = 3, sum = 4<br />Subarray: [3, 1, 5], smallest = 1, second smallest = 3, sum = 4<br />Subarray: [3, 1, 5, 6], smallest = 1, second smallest = 3, sum = 4<br />Subarray: [1, 5], smallest = 1, second smallest = 5, sum = 6<br />Subarray: [1, 5, 6] ,smallest = 1, second smallest = 5, sum = 6<br />Subarray: [5, 6], smallest = 5, second smallest = 6, sum = 11<br />Maximum sum among all above choices is, 5 + 6 = 11, hence the answer is 11.</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr = [1]<strong><br />Output: </strong>-1<strong><br /></strong><strong>Explanation: </strong>Here the size of array is 1, but we need minimum 2 elements. Hence, the answer is -1.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity: </strong>O(n)</span><br /><span style=\"font-size: 12pt;\"><strong>Expected Space Complexity: </strong>O(1)</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:<br /></strong>1&lt;=arr.size()&lt;=10<sup>5&nbsp;</sup><br />1&lt;=arr[i]&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr`, find the maximum sum of the smallest and second smallest element among all possible subarrays of size greater than one. If no such subarray exists, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[4, 3, 1, 5, 6]",
                        "output": "11",
                        "explanation": "The subarray [5, 6] has the smallest element 5 and the second smallest element 6. Their sum is 11, which is the maximum sum achievable from any valid subarray."
                    },
                    {
                        "input": "[1]",
                        "output": "-1",
                        "explanation": "The array has only one element, so no subarray of size greater than one can be formed. Therefore, the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Focus on finding two adjacent elements in the array whose sum is the largest, as they often form a valid subarray.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    int pairWithMaxSum(vector<int>& arr) {\n        if (arr.size() < 2)\n            return -1;\n\n        // Find two consecutive elements with maximum sum.\n        int res = arr[0] + arr[1];\n        for (size_t i = 1; i < arr.size() - 1; ++i)\n            res = max(res, arr[i] + arr[i + 1]);\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public int pairWithMaxSum(int arr[]) {\n        if (arr.length < 2) return -1;\n\n        // Find two consecutive elements with maximum\n        // sum.\n        int res = arr[0] + arr[1];\n        for (int i = 1; i < arr.length - 1; i++)\n            res = Math.max(res, arr[i] + arr[i + 1]);\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def pairWithMaxSum(self, arr):\n        if len(arr) < 2:\n            return -1\n\n        # Find two consecutive elements with maximum sum\n        res = arr[0] + arr[1]\n        for i in range(1, len(arr) - 1):\n            res = max(res, arr[i] + arr[i + 1])\n\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    pairWithMaxSum(arr) {\n        // If the array has less than 2 elements, return -1 since no pair exists\n        if (arr.length < 2) {\n            return -1;\n        }\n\n        // Initialize the result with the sum of the first two elements\n        let res = arr[0] + arr[1];\n\n        // Iterate through the array to check each pair of consecutive elements\n        for (let i = 1; i < arr.length - 1; i++) {\n            // Update the result with the maximum sum found so far\n            res = Math.max(res, arr[i] + arr[i + 1]);\n        }\n\n        // Return the maximum sum of two consecutive elements\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}