{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703423,
            "title": "Maximum sum of subarray less than or equal to x",
            "titleSlug": "maximum-sum-of-subarray-less-than-or-equal-to-x4033",
            "content": "<p><span >Given an array <strong>arr[]</strong> of integers and a number <strong>x</strong>, the task is to find the sum of subarray having a maximum sum less than or equal to the given value of <strong>x</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5], x = 11 \n<strong>Output:</strong> 10\n<strong>Explanation</strong>: Subarray having maximum sum is [1, 2, 3, 4].</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 4, 6, 8, 10], x = 7 </span><br /><span ><strong>Output:</strong> 6\n<strong>Explanation:</strong> Subarray having maximum sum is [2, 4] or [6].</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n).&nbsp;<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup></span><span style=\"font-size: 18.6667px;\">1 &le; arr[i] &le; 10</span><sup>6<br /></sup><span style=\"font-size: 18.6667px;\">1 &le; x &le; 10</span><sup>12</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of integers and a target value `x`, find the maximum sum of a contiguous subarray in `arr[]` such that the sum is less than or equal to `x`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6",
                    "1 <= x <= 10^12"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5], x = 11",
                        "output": "10",
                        "explanation": "The subarray [1, 2, 3, 4] has the maximum sum (10) that is less than or equal to 11."
                    },
                    {
                        "input": "[2, 4, 6, 8, 10], x = 7",
                        "output": "6",
                        "explanation": "The subarray [2, 4] sums to 6, and the subarray [6] sums to 6.  Both are the maximum possible subarray sum less than or equal to 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The subarray having the maximum sum can be found by using a <a href=\"https://www.geeksforgeeks.org/window-sliding-technique/\">sliding window</a>. If curr_sum is less than sum include array elements to it. If it becomes greater than sum remove elements from start in curr_sum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    long long findMaxSubarraySum(vector<int>& arr, long long x) {\n        long long curr_sum = arr[0], max_sum = 0;\n        int start = 0;\n\n        for (int i = 1; i < arr.size(); i++) {\n            if (curr_sum <= x)\n                max_sum = max(max_sum, curr_sum);\n\n            while (curr_sum + arr[i] > x && start < i) {\n                curr_sum -= arr[start];\n                start++;\n            }\n\n            curr_sum += arr[i];\n        }\n\n        if (curr_sum <= x)\n            max_sum = max(max_sum, curr_sum);\n\n        return max_sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public long findMaxSubarraySum(int[] arr, long x) {\n        long curr_sum = arr[0], max_sum = 0;\n        int start = 0;\n\n        // To find max_sum less than or equal to sum\n        for (int i = 1; i < arr.length; i++) {\n            // Update max_sum if it is less than or equal to curr_sum\n            if (curr_sum <= x) max_sum = Math.max(max_sum, curr_sum);\n\n            // If curr_sum becomes greater than sum, subtract starting elements of the\n            // array\n            while (curr_sum + arr[i] > x && start < i) {\n                curr_sum -= arr[start];\n                start++;\n            }\n\n            // Add elements to curr_sum\n            curr_sum += arr[i];\n        }\n\n        // Adding an extra check for the last subarray\n        if (curr_sum <= x) max_sum = Math.max(max_sum, curr_sum);\n\n        return max_sum;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findMaxSubarraySum(self, arr, x):\n        curr_sum = arr[0]\n        max_sum = 0\n        start = 0\n\n        # To find max_sum less than or equal to sum\n        for i in range(1, len(arr)):\n            # Update max_sum if it is less than or equal to curr_sum\n            if curr_sum <= x:\n                max_sum = max(max_sum, curr_sum)\n\n            # If curr_sum becomes greater than sum, subtract starting elements of the array\n            while curr_sum + arr[i] > x and start < i:\n                curr_sum -= arr[start]\n                start += 1\n\n            # Add elements to curr_sum\n            curr_sum += arr[i]\n\n        # Adding an extra check for the last subarray\n        if curr_sum <= x:\n            max_sum = max(max_sum, curr_sum)\n\n        return max_sum\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMaxSubarraySum(arr, x) {\n        let curr_sum = arr[0];\n        let max_sum = 0;\n        let start = 0;\n\n        for (let i = 1; i < arr.length; i++) {\n            if (curr_sum <= x) {\n                max_sum = Math.max(max_sum, curr_sum);\n            }\n\n            while (curr_sum + arr[i] > x && start < i) {\n                curr_sum -= arr[start];\n                start++;\n            }\n\n            curr_sum += arr[i];\n        }\n\n        if (curr_sum <= x) {\n            max_sum = Math.max(max_sum, curr_sum);\n        }\n\n        return max_sum;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}