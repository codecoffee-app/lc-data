{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703989,
            "title": "Maximum Sum Problem",
            "titleSlug": "maximum-sum-problem2211",
            "content": "<p><span style=\"font-size: 18px;\">A number <strong>n </strong>can be broken&nbsp;into&nbsp;three parts<strong> n/2</strong>,<strong> n/3</strong>,<strong> </strong>and<strong> n/4&nbsp;</strong>(consider only the&nbsp;<strong>integer </strong>part). Each number obtained in this process can be divided further recursively.&nbsp;Find the <strong>maximum sum </strong>that can be obtained by&nbsp;summing up the divided parts&nbsp;together.<br /><strong>Note: </strong>It is possible that we don't divide the number at all.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 12\n<strong>Output:</strong> <br />13\n<strong>Explanation</strong>:</span>&nbsp;<br /><span style=\"font-size: 18px;\">B</span><span style=\"font-size: 18px;\">reak n = 12 in three parts {12/2, 12/3, 12/4} = {6, 4, 3}, now current sum is = (6 + 4 + 3) = 13. Further breaking 6, 4 and 3 into parts will produce sum less than or equal to 6, 4 and 3 respectively.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nn = 24\n<strong>Output:</strong> <br />27\n<strong>Explanation</strong>: <br />Break n = 24 in three parts {24/2, 24/3, 24/4} = {12, 8, 6}, now current sum is = (12 + 8 + 6) = 26 . But recursively breaking 12 would produce value 13. So our maximum sum is 13 + 8 + 6 = 27.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>maxSum()&nbsp;</strong>which accepts an integer n and returns the maximum sum.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />0 &lt;= n &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number 'n', you can break it into three parts: n/2, n/3, and n/4 (considering only the integer part). Each of these parts can be further divided recursively. The goal is to find the maximum sum that can be obtained by summing up the divided parts together.  Note that you may choose not to divide the number at all.",
                "constraints": [
                    "0 <= n <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "12",
                        "output": "13",
                        "explanation": "Breaking n = 12 into parts {12/2, 12/3, 12/4} results in {6, 4, 3}. The sum of these parts is 6 + 4 + 3 = 13.  Further breaking down 6, 4, or 3 will not yield a larger sum."
                    },
                    {
                        "input": "24",
                        "output": "27",
                        "explanation": "Breaking n = 24 into parts {24/2, 24/3, 24/4} results in {12, 8, 6}.  The sum is 12 + 8 + 6 = 26. However, breaking down 12 into {12/2, 12/3, 12/4} gives {6, 4, 3}, summing to 13.  Therefore, the maximum sum is obtained by breaking 24 into {12, 8, 6} and then breaking 12 further, leading to 13 + 8 + 6 = 27."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Use this recursive formula.</span><br /><span style=\"font-size: 14pt;\"><code>dp[i] = Math.max(dp[i/2</code><code>] + dp[i/</code><code>3</code><code>] + dp[i/</code><code>4</code><code>], i); </code></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n    public:\r\n        int maxSum(int n)\r\n        {\r\n            if(n<2)\r\n                return n;\r\n                \r\n            int dp[n+1];\r\n            // base conditions\r\n            dp[0] = 0;\r\n            dp[1] = 1;\r\n         \r\n            // Fill in bottom-up manner using recursive\r\n            // formula.\r\n            for (int i=2; i<=n; i++)\r\n               dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4], i);\r\n         \r\n            return dp[n];\r\n        }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\nclass Solution\r\n{\r\n    public int maxSum(int n) \r\n    { \r\n            if(n<2)\r\n                return n;\r\n                \r\n            int dp[] = new int[n+1];\r\n            // base conditions\r\n            dp[0] = 0;\r\n            dp[1] = 1;\r\n         \r\n            // Fill in bottom-up manner using recursive\r\n            // formula.\r\n            for (int i=2; i<=n; i++)\r\n               dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4], i);\r\n         \r\n            return dp[n];\r\n    } \r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    def maxSum(self, n): \n        # Function to calculate the maximum sum\n        # Initializing a list to store the calculated values\n        dp=[-1]*(n+1)\n        # Returning the result from the helper function\n        return self.helper(n,dp)\n    \n    def helper(self,n,dp):\n        # Base case: if n is less than or equal to 1, return n\n        if n<=1:\n            dp[n]=n\n        # If the result for n is already calculated, return it\n        if dp[n]!=-1:\n            return dp[n]\n        # Applying the recursive formula to calculate the maximum sum\n        dp[n]=max(self.helper(n//2,dp)+self.helper(n//3,dp)+self.helper(n//4,dp),n)\n        # Returning the calculated value\n        return dp[n]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {number} n\r\n * @return {number}\r\n*/\r\n\r\nclass Solution {\r\n    maxSum(n){\r\n       //code here\r\n       if(n<2)\r\n        return n;\r\n        let dp = new Array(n+1).fill(0);\r\n        dp[0] = 0;\r\n        if(n>1)\r\n            dp[1] = 1;\r\n\r\n        for (let i=2; i<=n; i++){\r\n            dp[i] = Math.max(dp[Math.floor(i/2)] + dp[Math.floor(i/3)] + dp[Math.floor(i/4)], i);\r\n        }\r\n\r\n        return dp[n];\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}