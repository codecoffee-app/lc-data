{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703735,
            "title": "Maximum Sum Subsequence of length k",
            "titleSlug": "maximum-sum-subsequence-of-length-k3053",
            "content": "<p><span style=\"font-size: 18px;\">Given an array sequence [A1 , A2 ...An], the task is&nbsp;to find the maximum possible sum of increasing subsequence S of length K such that Si1&lt;=Si2&lt;=Si3.........&lt;=Sin.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 8 K = 3\nA[] = {8 5 9 10 5 6 19 8}\n<strong>Output: </strong>38\n<strong>Explanation:</strong>\nPossible increasing subsequence of\nlength 3 with maximum possible\nsum is 9 10 19.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 2,K = 2\nA[] = {10 5}\n<strong>Output: </strong>-1\n<strong>Explanation:\n</strong>Can't make any increasing subsequence \nof length 2.\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>max_sum()</strong>&nbsp;which takes sequence&nbsp;A as the first parameter&nbsp;and K as the second parameter and returns the maximum possible sum of K-length&nbsp;increasing subsequnece. If not possible return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(max(Ai) * n * log(max(Ai)))<br /><strong>Expected Space Complexity:&nbsp;</strong>O(max(Ai))</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Contraints:</strong><br />1 &lt;= n &lt;= 100<br />1 &lt;= A<sub>i</sub> &lt;= 100000</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array sequence A of length N, find the maximum possible sum of an increasing subsequence S of length K, where S[i] <= S[i+1] for all i from 1 to K-1. If no such subsequence exists, return -1.",
                "constraints": [
                    "1 <= n <= 100",
                    "1 <= A[i] <= 100000"
                ],
                "testcases": [
                    {
                        "input": "N = 8, K = 3\nA[] = {8, 5, 9, 10, 5, 6, 19, 8}",
                        "output": "38",
                        "explanation": "The increasing subsequence of length 3 with the maximum possible sum is 9, 10, 19. Therefore the sum is 9 + 10 + 19 = 38."
                    },
                    {
                        "input": "N = 2, K = 2\nA[] = {10, 5}",
                        "output": "-1",
                        "explanation": "It is not possible to form an increasing subsequence of length 2 from the given array. Hence, return -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use binary indexed tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "walmart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Backend complete function template in C++\n\nclass Solution\n{\n    int bit[100005];    //BIT array for storing maximum values\n\n    //Function to query the maximum value in the BIT array\n    int query(int a)\n    {\n        int maxi = 0;\n        //iterating backwards from a to 1, in steps of (i & (-i))\n        for(int i = a; i > 0; i-=(i & (-i)))\n        {\n            //updating the maximum value\n            if(maxi < bit[i])\n                maxi = bit[i];\n        }\n        return maxi;\n    }\n\n    //Function to update the BIT array with new values\n    void update(int a, int value, int maxi)\n    {\n        //iterating from a to maxi, in steps of (i & (-i))\n        for(int i = a; i <= maxi; i+=(i & (-i)))\n        {\n            //updating the BIT array with new value if it is greater\n            if(bit[i] < value)\n                bit[i] = value;\n        }\n    }\n\npublic:\n    //Function to find the maximum sum\n    int max_sum(vector<int> &a, int k)\n    {\n        int n = a.size();\n        int dp[n+1];\n        int maxi  = 0;\n\n        for(int i = 0; i < n; i++)\n            if(a[i] > maxi)\n                maxi = a[i];\n\n        for(int i = 0; i < n; i++)\n            dp[i] = a[i];\n\n        //iterating from 2 to k\n        for(int i = 2; i <= k; i++)\n        {\n            memset(bit, 0, sizeof(bit));   //resetting the BIT array\n\n            //iterating over all the elements in the array\n            for(int j = 0; j < n; j++)\n            {\n                int val = query(a[j]);   //getting the maximum value from the BIT array\n                update(a[j], dp[j], maxi);   //updating the BIT array with new values\n                if(val == 0)\n                    dp[j] = 0;   //if maximum value is 0, then current element becomes 0\n                else\n                    dp[j] = val + a[j];   //else, current element is added to the maximum value\n            }\n        }\n        int ans = 0;\n        //finding the maximum sum from the dp array\n        for(int i = 0; i < n; i++)\n            ans = max(ans, dp[i]);\n        if(ans == 0)\n            ans = -1;   //if maximum sum is 0, then return -1\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Dynamic programming function to solve the problem\ndef solve(dp, pos, k, arr, n):\n    # If k is negative, return 0\n    if k < 0:\n        return 0\n\n    # If solution for current position and k is already calculated, return it\n    if dp[pos][k] != -1:\n        return dp[pos][k]\n\n    dp[pos][k] = 0\n\n    # If k is 1, assign the value of the first element as the solution and return\n    if k == 1:\n        dp[pos][k] = arr[pos][0]\n        return dp[pos][k]\n\n    # Variable to check if the solution is updated or not\n    b = 0\n\n    # Iterate over the elements after the current position\n    for i in range(pos + 1, n):\n        # If the second element of the current element is smaller than the second element of the current position\n        if arr[i][1] < arr[pos][1]:\n            # Recursively solve for the next position and k-1\n            x = solve(dp, i, k - 1, arr, n)\n            # If the solution is greater than 0, update the solution\n            if x > 0:\n                dp[pos][k] = max(dp[pos][k], arr[pos][0] + x)\n                # Set b to 1 to indicate that the solution is updated\n                b = 1\n\n    # If no valid solution is found, assign negative infinity as the solution\n    if b == 0:\n        dp[pos][k] = -1 * float('inf')\n\n    return dp[pos][k]\n\n\nclass Solution:\n\n    def max_sum(self, a, k):\n        # Length of the array a\n        n = len(a)\n\n        # Initialize the dp array with -1\n        dp = [[-1 for i in range(k + 1)] for j in range(n + 1)]\n\n        # Create a new array with the values of a along with the indices\n        arr = []\n        for i in range(n):\n            arr.append([a[i], i])\n\n        # Sort the array in reverse order based on the values\n        arr.sort(reverse=True)\n\n        # Initialize the maximum sum as 0\n        mx = 0\n\n        # Iterate over the elements of the array\n        for i in range(n):\n            # Solve the problem for each position and update the maximum sum\n            x = solve(dp, i, k, arr, n)\n            mx = max(mx, x)\n\n        # If no valid solution is found, return -1\n        if mx == 0:\n            return -1\n\n        return mx\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int max_sum(List<int> a, int k)\n    {\n        int n = a.Count;\n        int[] dp = new int[n];\n        int maxi = 0;\n\n        for(int i = 0; i < n; i++)\n            if(a[i] > maxi)\n                maxi = a[i];\n\n        for(int i = 0; i < n; i++)\n            dp[i] = a[i];\n\n        for(int i = 2; i <= k; i++)\n        {\n            int[] bit = new int[100005];\n\t\t\t\n            for(int j = 0; j < n; j++)\n            {\n                int val = query(a[j], bit);   \n                update(a[j], dp[j], maxi, bit);  \n                if(val == 0)\n                    dp[j] = 0;  \n                else\n                    dp[j] = val + a[j];  \n            }\n        }\n        int ans = 0;\n        \n        for(int i = 0; i < n; i++)\n            ans = Math.Max(ans, dp[i]);\n        \n        if(ans == 0)\n            ans = -1;\n        \n        return ans;\n    }\n    \n    //Function to query the maximum value in the BIT array\n    private int query(int a, int[] bit)\n    {\n        int maxi = 0;\n        \n        for(int i = a; i > 0; i-=(i & (-i)))\n        {\n            if(maxi < bit[i])\n                maxi = bit[i];\n        }\n        \n        return maxi;\n    }\n\n    //Function to update the BIT array with new values\n    private void update(int a, int value, int maxi, int[] bit)\n    {\n        for(int i = a; i <= maxi; i+=(i & (-i)))\n        {\n            if(bit[i] < value)\n                bit[i] = value;\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}