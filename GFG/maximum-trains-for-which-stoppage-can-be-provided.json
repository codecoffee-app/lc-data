{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710136,
            "title": "Maximum trains for which stoppage can be provided",
            "titleSlug": "maximum-trains-for-which-stoppage-can-be-provided",
            "content": "<p><span style=\"font-size:18px\">You&nbsp;are given n-platform and two main running railway tracks for both directions. Trains that need to stop at your station must occupy one platform for their stoppage and the trains which need not stop at your station will run away through either of the main track without stopping. Now, each train has three values first arrival time, second departure time, and the third required platform number. We are given m such trains you have to tell the maximum number of trains for which you can provide stoppage at your station.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note: </strong>Trains&nbsp;are&nbsp;given in the&nbsp;form of {arrival time, departure time, platform Number} and the&nbsp;arrival time and departure time are represented by a 4-digit integer as 1030 will represent 10:30 and 912 will represent 09:12 (24 hour Clock).</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong> : n = 3, m = 6 \r\nTrain no.|  Arrival Time |Dept. Time | Platform No.\r\n    1    |   10:00\\t |  10:30    |    1\r\n    2    |   10:10\\t |  10:30    |    1\r\n    3    |   10:00\\t |  10:20    |    2\r\n    4    |   10:30\\t |  12:30    |    2\r\n    5    |   12:00\\t |  12:30    |    3\r\n    6    |   09:00\\t |  10:05    |    1\r\n<strong>Output</strong> : Maximum Stopped Trains = 5\r\n<strong>Explanation</strong> : If train no. 1 will left \r\nto go without stoppage then 2 and 6 can \r\neasily be accommodated on platform 1. \r\nAnd 3 and 4 on platform 2 and 5 on platform 3.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>maxStop</strong></span><span style=\"font-size:18px\"><strong>() which takes</strong>&nbsp;two integers <strong>n</strong> no of platforms, <strong>m </strong>number of trains, and array trains[]&nbsp;as input parameter and returns an integer.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(M*logM</span><span style=\"font-size:18px\">)</span><br />\r\n<span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong>&nbsp;O(M)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1 &lt;= N &lt;= 100<br />\r\n1 &lt;= M &lt;= 10<sup>4</sup></span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are managing a railway station with `n` platforms and two main tracks for trains that don't need to stop.  `m` trains are scheduled, each with an arrival time, a departure time, and a required platform number. Your goal is to maximize the number of trains that can be given a stoppage at your station without conflicting with each other on the platforms. Trains not stopping will use the main tracks. You are given the train schedules in the format {arrival time, departure time, platform Number}, where times are represented as 4-digit integers (e.g., 1030 represents 10:30). Determine the maximum number of trains you can accommodate.",
                "constraints": [
                    "1 <= N <= 100",
                    "1 <= M <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 6\nTrains = [[1000, 1030, 1], [1010, 1030, 1], [1000, 1020, 2], [1030, 1230, 2], [1200, 1230, 3], [900, 1005, 1]]",
                        "output": "5",
                        "explanation": "If train no. 1 (10:00 - 10:30 on platform 1) is skipped, then trains 2 (10:10 - 10:30 on platform 1) and 6 (09:00 - 10:05 on platform 1) can be accommodated on platform 1. Trains 3 and 4 can use platform 2, and train 5 can use platform 3, resulting in a total of 5 accommodated trains."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>If we start with a single platform only then we have 1 platform and some trains with their arrival time and departure time and we have to maximize the number of trains on that platform.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": null,
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution():\n    # Function to find maximum number of stops\n    def maxStop(self, n, m, trains):\n        # Creating a list of platforms\n        plateforms = [[] for i in range(n)]\n        # Sorting trains based on their platforms\n        for i in range(m):\n            plateforms[trains[i][2]-1].append(trains[i])\n        ans = 0\n        # Iterating over each platform\n        for plateform in plateforms:\n            # Sorting trains on each platform based on their departure time\n            plateform.sort(key=lambda x:x[1])\n            prevStart = -1\n            # Checking if the train can stop at the platform\n            for train in plateform:\n                if train[0] >= prevStart:\n                    ans += 1\n                    prevStart = train[1]\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number} m\n * @param {number[][]} trains\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the maximum number of trains that can stop at the station.\n    maxStop(n, m, trains) {\n        // Creating a list of platforms\n        let platforms = [[]];\n        for (let i = 0; i < n; i++) {\n            platforms.push([]);\n        }\n        // Sorting trains based on their platforms\n        for (let i = 0; i < m; i++) {\n            platforms[trains[i][2] - 1].push(trains[i]);\n        }\n        let ans = 0;\n        // Iterating over each platform\n        for (let i = 0; i < platforms.length; i++) {\n            let platform = platforms[i];\n            // Sorting trains on each platform based on their departure time\n            platform.sort((a, b) => a[1] - b[1]);\n            let prevStart = -1;\n            // Checking if the train can stop at the platform\n            for (let j = 0; j < platform.length; j++) {\n                let train = platform[j];\n                if (train[0] >= prevStart) {\n                    ans += 1;\n                    prevStart = train[1];\n                }\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}