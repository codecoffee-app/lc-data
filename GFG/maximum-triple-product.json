{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711466,
            "title": "Maximum Triple Product",
            "titleSlug": "maximum-triple-product",
            "content": "<p><span style=\"font-size:18px\">You are given an array <strong>arr</strong>&nbsp;of <strong>N</strong> integers. You need to find the <strong>maximum&nbsp;</strong>score of an array.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">The score of an array is calculated as follows.</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">Choose an integer<strong> i</strong>, <strong>1&lt;=i&lt;=size of current array</strong> and add <strong>a[i-1] * a[i] * a[i+1]</strong> to the score.</span></li>\r\n\t<li><span style=\"font-size:18px\">Delete <strong>a[i],</strong>&nbsp;on deleting a[i],&nbsp;<strong>i-1 and i+1</strong> become adjacent. i.e <strong>i+1</strong> becomes <strong>i</strong> and size of an array <strong>shrinks.</strong></span></li>\r\n\t<li><span style=\"font-size:18px\">Repeat the process till the size of an array becomes <strong>0</strong>.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong>&nbsp; Assume an extra <strong>1</strong> at each boundary.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\">\r\n<p><span style=\"font-size:18px\"><strong>Input:</strong></span><br />\r\n<span style=\"font-size:18px\">N =&nbsp;2<br />\r\narr = { 5, 10 }<br />\r\n<br />\r\n<strong>Output:&nbsp;</strong><br />\r\n60<br />\r\n<br />\r\n<strong>Explanation:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">F</span><span style=\"font-size:18px\">irst choose i=1</span><span style=\"font-size:18px\">, Score = 1*5*10<br />\r\nThen choose i=1, Score+= 1*10*1,<br />\r\nTotal = 60</span></p>\r\n</div>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<div style=\"background:#eeeeee; border:1px solid #cccccc; padding:5px 10px\">\r\n<p><span style=\"font-size:18px\"><strong>Input:</strong></span><br />\r\n<span style=\"font-size:18px\">N = 5<br />\r\narr = { 1, 2, 3, 4, 5&nbsp;}<br />\r\n<br />\r\n<strong>Output:&nbsp;</strong><br />\r\n110</span></p>\r\n</div>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span><br />\r\n<span style=\"font-size:18px\">You do not need to read input or print anything. Your task is to complete the function<strong> maxProductSum()</strong>&nbsp;which takes the value <strong>N</strong> and the array as input parameters and returns <strong>maximum score of an array.</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>3</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N<sup>2</sup></span><span style=\"font-size:18px\">)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 100<br />\r\n1 &le; arr[i] &le; 100000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of `N` integers, determine the maximum possible score achievable by repeatedly selecting an element and calculating a score based on its adjacent elements, then removing the selected element. The process continues until the array is empty.\n\nThe score is calculated as follows:\n\n1.  Choose an index `i` (1 <= i <= size of the current array).\n2.  Add `arr[i-1] * arr[i] * arr[i+1]` to the total score. Consider the array to be padded with `1` at both ends. That is, if `i-1` is out of bound the value is 1 and if `i+1` is out of bound its value is 1\n3.  Remove `arr[i]` from the array. After removing `arr[i]`, the elements at indices `i-1` and `i+1` become adjacent.  The size of the array shrinks by 1.\n4.  Repeat steps 1-3 until the array is empty.\n\nFind the maximum possible score.",
                "constraints": [
                    "1 <= N <= 100",
                    "1 <= arr[i] <= 100000"
                ],
                "testcases": [
                    {
                        "input": "N = 2\narr = [5, 10]",
                        "output": "60",
                        "explanation": "First, choose i=1 (element 5). Score = 1 * 5 * 10 = 50. The array becomes [10].\nThen, choose i=1 (element 10). Score += 1 * 10 * 1 = 10.\nTotal score = 50 + 10 = 60."
                    },
                    {
                        "input": "N = 5\narr = [1, 2, 3, 4, 5]",
                        "output": "110",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution{\r\npublic:\r\n    long long int maxProductSum(int N, int arr[])\r\n    {\r\n           // Add Bordering Balloons\r\n    long long int B[N+2];\r\n    B[0] = B[N + 1] = 1;\r\n         \r\n    for(int i = 1; i <= N; i++)\r\n        B[i] = arr[i - 1];\r\n     \r\n    // Declaring DP array\r\n    \r\n    long long dp[N+2][N+2];\r\n     for(int i=0;i<=N+1;i++)for(int j=0;j<=N+1;j++)dp[i][j]=0;\r\n     \r\n    for(int length = 1;length < N + 1; length++)\r\n    {\r\n        for(int left = 1;left < N - length + 2; left++)\r\n        {\r\n            int right = left + length -1;\r\n             \r\n            // For a sub-array from indices\r\n            // left, right. This innermost\r\n            // loop finds the last balloon burst\r\n            for(int last = left; last < right + 1; last++)\r\n            {\r\n                dp[left][right] = max(dp[left][right], dp[left][last - 1] + B[left - 1] * B[last] * B[right + 1] +dp[last + 1][right]);\r\n            }\r\n        }\r\n    }\r\n    return dp[1][N];\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    long maxProductSum(int N, int arr[])\r\n    {\r\n        // Add Bordering Balloons\r\n    long[] B = new long[N + 2];\r\n    B[0] = B[N + 1] = 1;\r\n         \r\n    for(int i = 1; i <= N; i++)\r\n        B[i] = arr[i - 1];\r\n     \r\n    // Declaring DP array\r\n    long[][] dp = new long[N + 2][N + 2];\r\n    \r\n    \r\n     \r\n    for(int length = 1;length < N + 1; length++)\r\n    {\r\n        for(int left = 1;left < N - length + 2; left++)\r\n        {\r\n            int right = left + length -1;\r\n             \r\n            // For a sub-array from indices\r\n            // left, right. This innermost\r\n            // loop finds the last balloon burst\r\n            for(int last = left; last < right + 1; last++)\r\n            {\r\n                dp[left][right] = Math.max(dp[left][right], dp[left][last - 1] + B[left - 1] * B[last] * B[right + 1] +dp[last + 1][right]);\r\n            }\r\n        }\r\n    }\r\n    return dp[1][N];\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def maxProductSum(self, n, arr):\n\n        #creating an array B with size n+2 and initializing first and last elements to 1\n        #and rest to the elements of arr\n        B=[0]*(n+2)\n        B[0]=1\n        B[n+1]=1\n        for i in range(1,n+1):\n            B[i]=arr[i-1]\n\n        #creating a 2D array dp with size (n+2)x(n+2) and initializing all elements to 0\n        dp=[[0]*(n+2) for i in range(n+2)]\n\n        #iterating over different lengths of subarrays\n        for length in range(1,n+1):\n            #iterating over possible starting indices of subarrays\n            for left in range(1,n-length+2):\n                right=left+length-1\n\n                #iterating over possible last elements of subarrays\n                for last in range(left,right+1):\n\n                    #calculating the maximum product sum for the current subarray\n                    dp[left][right]=max(dp[left][right],dp[left][last-1]+B[left-1]*B[last]*B[right+1]+dp[last+1][right])\n        \n        #returning the maximum product sum for the whole array\n        return dp[1][n]",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}