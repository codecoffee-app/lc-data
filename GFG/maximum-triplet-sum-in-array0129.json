{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703023,
            "title": "Maximum triplet sum in array",
            "titleSlug": "maximum-triplet-sum-in-array0129",
            "content": "<p><span >Given an array <strong>arr</strong>, the task is to find the maximum triplet sum in the array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input :</strong> arr[] = [4, 2, 7, 9]\n<strong>Output :</strong> 20\n<strong>Explanation: </strong>Here are total 4 combination: (0, 1, 2), (0, 1, 3), (0, 2, 3), (1, 2, 3).\nSo, the Sum of these combinations is 13, 15, 20, and 18. The maximum sum is 20.\n</span></pre>\n<pre><span ><strong>Input :</strong> arr[] = [1, 0, 8, 6, 4, 2] <strong>\nOutput :</strong> 18 <br /><strong>Explanation: </strong>(2, 3, 4), this triplet is going to give us a sum of 18.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />3 &le; arr.size() &le; 10<sup>6</sup><br />-10<sup>5</sup> &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum sum of any triplet (three numbers) within the array.",
                "constraints": [
                    "3 <= arr.size() <= 10^6",
                    "-10^5 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[4, 2, 7, 9]",
                        "output": "20",
                        "explanation": "The triplet (4, 7, 9) yields the maximum sum of 20."
                    },
                    {
                        "input": "[1, 0, 8, 6, 4, 2]",
                        "output": "18",
                        "explanation": "The triplet (8, 6, 4) yields the maximum sum of 18."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span ><strong>Efficient:</strong> Scan the array and compute the Maximum, second maximum, and third maximum element present in the array and return the sum of its and it would be the maximum sum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the maximum triplet sum in the array.\n    int maxTripletSum(vector<int> &arr) {\n        int n = arr.size();\n        int maxA = INT_MIN, maxB = INT_MIN, maxC = INT_MIN;\n\n        // Iterating over the array to find the maximum three numbers.\n        for (int i = 0; i < n; i++) {\n            // If current element is greater than maxA, update maxA, maxB, and maxC.\n            if (arr[i] > maxA) {\n                maxC = maxB;\n                maxB = maxA;\n                maxA = arr[i];\n            }\n            // If current element is greater than maxB, update maxB and maxC.\n            else if (arr[i] > maxB) {\n                maxC = maxB;\n                maxB = arr[i];\n            }\n            // If current element is greater than maxC, update maxC.\n            else if (arr[i] > maxC) {\n                maxC = arr[i];\n            }\n        }\n        // Returning the sum of the maximum three numbers.\n        return (maxA + maxB + maxC);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the maximum triplet sum in the array.\n    public int maxTripletSum(List<Integer> arr) {\n        int maxA = Integer.MIN_VALUE, maxB = Integer.MIN_VALUE,\n            maxC = Integer.MIN_VALUE;\n\n        // Iterating over the array to find the maximum three numbers.\n        for (int num : arr) {\n            // If current element is greater than maxA, update maxA, maxB, and maxC.\n            if (num > maxA) {\n                maxC = maxB;\n                maxB = maxA;\n                maxA = num;\n            }\n            // If current element is greater than maxB, update maxB and maxC.\n            else if (num > maxB) {\n                maxC = maxB;\n                maxB = num;\n            }\n            // If current element is greater than maxC, update maxC.\n            else if (num > maxC) {\n                maxC = num;\n            }\n        }\n        // Returning the sum of the maximum three numbers.\n        return (maxA + maxB + maxC);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find the maximum triplet sum in the array.\n    def maxTripletSum(self, arr):\n        max_a = float('-inf')\n        max_b = float('-inf')\n        max_c = float('-inf')\n\n        # Iterating over the array to find the maximum three numbers.\n        for num in arr:\n            # If current element is greater than max_a, update max_a, max_b, and max_c.\n            if num > max_a:\n                max_c = max_b\n                max_b = max_a\n                max_a = num\n            # If current element is greater than max_b, update max_b and max_c.\n            elif num > max_b:\n                max_c = max_b\n                max_b = num\n            # If current element is greater than max_c, update max_c.\n            elif num > max_c:\n                max_c = num\n\n        # Returning the sum of the maximum three numbers.\n        return max_a + max_b + max_c\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    maxTripletSum(arr) {\n        let max_a = Number.NEGATIVE_INFINITY; // Initialize first maximum value to\n                                              // negative infinity.\n        let max_b = Number.NEGATIVE_INFINITY; // Initialize second maximum value to\n                                              // negative infinity.\n        let max_c = Number.NEGATIVE_INFINITY; // Initialize third maximum value to\n                                              // negative infinity.\n\n        for (let num of arr) {\n            if (num > max_a) { // Check if current number is greater than first maximum.\n                max_c = max_b; // Update third maximum.\n                max_b = max_a; // Update second maximum.\n                max_a = num;   // Update first maximum.\n            } else if (num > max_b) { // Check if current number is greater than second\n                                      // maximum.\n                max_c = max_b;        // Update third maximum.\n                max_b = num;          // Update second maximum.\n            } else if (num > max_c) { // Check if current number is greater than third\n                                      // maximum.\n                max_c = num;          // Update third maximum.\n            }\n        }\n\n        return max_a + max_b + max_c; // Return the sum of the three maximum values.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}