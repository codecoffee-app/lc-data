{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713138,
            "title": "Maximum Value",
            "titleSlug": "maximum-value--170645",
            "content": "<p><span style=\"font-size:18px\">Given a binary tree, find the largest value in each level.</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">\\t  1\r\n\\t / \\\r\n\\t2   3 \r\n<strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">1 3</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">At 0 level, values of nodes are {1}\r\n\\t\\t     Maximum value is 1</span>\r\n<span style=\"font-size:18px\">At 1 level, values of nodes are {2,3}\r\n\\t\\t    Maximum value is 3</span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">\\t  4\r\n\\t / \\\r\n\\t9   2\r\n     / \\   \\\r\n    3   5   7 </span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">4 9 7</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">At 0 level, values of nodes are {4}\r\n\\t\\t     Maximum value is 4</span>\r\n<span style=\"font-size:18px\">At 1 level, values of nodes are {9,2}\r\n\\t\\t     Maximum value is 9</span>\r\n<span style=\"font-size:18px\">At 2 level, values of nodes are {3,5,7}\r\n\\t\\t     Maximum value is 7</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything.Your task is to complete the function&nbsp;<strong>maximumValue</strong>() that&nbsp;takes root node&nbsp;as input parameter and returns a list of integers containing the&nbsp;maximum value at each level. The size of the resultant list should be equal to the height of the binary tree and result[i] should store the maximum value at level i.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N), where N is the number of nodes.<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(H), where H is the height of binary tree.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; Number of nodes &le; 10^4<br />\r\n1 &le; Data of a node &le; 10^5</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Apply dfs on the binary tree and for each node maintain it&#39;s level and take the maximum value at each level.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "implementation",
                "slug": "implementation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    //Function to find the maximum value at each level of a binary tree.\n    void solve(Node* node,int level,vector<int> &answer)\n    {\n        //if there is no node, return.\n        if(node==NULL)\n            return ;\n        \n        //if the current level is equal to the size of the answer vector,\n        //push the node data into the answer vector.\n        else if(level==answer.size())\n            answer.push_back(node->data);\n        \n        //if the current level is already present in the answer vector,\n        //compare the node data with the current maximum value at that level\n        //and update the maximum value if necessary.\n        else\n            answer[level]=max(answer[level],node->data);\n        \n        //recursively call the solve function for the left and right subtrees\n        //of the current node with level+1 as the new level.\n        solve(node->left,level+1,answer);\n        solve(node->right,level+1,answer);\n    }\n    \n    //Function to find the maximum value at each level of a binary tree.\n    vector<int> maximumValue(Node* node) {\n       vector<int> answer;\n       //call the solve function starting from the root node of the binary tree,\n       //with level 0 and an empty answer vector.\n       solve(node,0,answer);\n       //return the answer vector containing the maximum values at each level of the binary tree.\n       return answer;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    // Recursive function to get the largest value at each level of Binary Tree\r\n    void solve(Node node, int level, ArrayList<Integer> answer) {\r\n        // Base case: if node is null, return\r\n        if (node == null)\r\n            return;\r\n\r\n        // If the level is equal to the size of the answer list, add the current node's data to the list\r\n        if (level == answer.size())\r\n            answer.add(node.data);\r\n        else {\r\n            // If the current node's data is larger than the value at the same level in the answer list, update the value\r\n            if (answer.get(level) < node.data){\r\n                answer.set(level, node.data);\r\n            }\r\n        }\r\n\r\n        // Recursively call the function on the left and right child of the current node with an increased level\r\n        solve(node.left, level + 1, answer);\r\n        solve(node.right, level + 1, answer);\r\n    }\r\n\r\n    // Function to get the maximum value at each level of the Binary Tree\r\n    ArrayList<Integer> maximumValue(Node node) {\r\n        // Create an empty answer list\r\n        ArrayList<Integer> answer = new ArrayList<Integer>();\r\n        \r\n        // Call the recursive function to populate the answer list\r\n        solve(node, 0, answer);\r\n        \r\n        // Return the answer list\r\n        return answer;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    # Recursive function to get the maximum value at each level of a binary tree.\r\n    def solve(self,node,level,answer):\r\n        # Base case: if the node is None, return.\r\n        if node is None:\r\n            return\r\n        \r\n        # If the level is equal to the length of the answer list,\r\n        # append the node's data to the answer list.\r\n        if level==len(answer):\r\n            answer.append(node.data)\r\n        # If the level is less than the length of the answer list,\r\n        # update the maximum value at that level if necessary.\r\n        else:\r\n            answer[level]=max(answer[level],node.data)\r\n        \r\n        # Recursively call the function on the left and right child of the node.\r\n        self.solve(node.left,level+1,answer)\r\n        self.solve(node.right,level+1,answer)\r\n        \r\n    # Function to get the largest value at each level of a binary tree. \r\n    def maximumValue(self,node):\r\n        # Initialize an empty list to store the maximum values at each level.\r\n        answer=[]\r\n        # Call the recursive function to populate the answer list.\r\n        self.solve(node,0,answer);\r\n        # Return the answer list.\r\n        return answer",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}