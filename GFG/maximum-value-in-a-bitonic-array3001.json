{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702883,
            "title": "Bitonic Point",
            "titleSlug": "maximum-value-in-a-bitonic-array3001",
            "content": "<p><span >Given an array of integers <strong>arr[] </strong>that is first <strong>strictly increasing </strong>and then maybe <strong>strictly decreasing</strong>, find the <strong>bitonic point</strong>, that is the maximum element in the array.<br />Bitonic Point is a point before which elements are strictly increasing and after which elements are strictly decreasing.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 4, 5, 7, 8, 3]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Elements before 8 are strictly increasing [1, 2, 4, 5, 7] and elements after 8 are strictly decreasing [3].</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [10, 20, 30, 40, 50]\n<strong>Output:</strong> 50\n<strong>Explanation:</strong> Elements before 50 are strictly increasing [10, 20, 30 40] and there are no elements after 50.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [120, 100, 80, 20, 0]\n<strong>Output:</strong> 120\n<strong>Explanation:</strong> There are no elements before 120 and elements after 120 are strictly decreasing [100, 80, 20, 0].</span></pre>\n<p><span ><strong>Constraints:</strong><br />3 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i]&le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]` that is first strictly increasing and then strictly decreasing (possibly only increasing or only decreasing), find the bitonic point. The bitonic point is the maximum element in the array.",
                "constraints": [
                    "3 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 4, 5, 7, 8, 3]",
                        "output": "8",
                        "explanation": "The element 8 is the maximum element in the array. Elements to its left (1, 2, 4, 5, 7) are strictly increasing, and elements to its right (3) are strictly decreasing."
                    },
                    {
                        "input": "[10, 20, 30, 40, 50]",
                        "output": "50",
                        "explanation": "The element 50 is the maximum element in the array. Elements to its left (10, 20, 30, 40) are strictly increasing, and there are no elements to its right."
                    },
                    {
                        "input": "[120, 100, 80, 20, 0]",
                        "output": "120",
                        "explanation": "The element 120 is the maximum element in the array.  There are no elements to its left, and elements to its right (100, 80, 20, 0) are strictly decreasing."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use binary search to find the maximum in a bitonic array by comparing mid with its neighbors.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findMaximum(vector<int> &arr) {\n        int n = arr.size();\n\n        // Check if the first element is maximum\n        if (n == 1 || arr[0] > arr[1])\n            return arr[0];\n\n        // Check if the last element is maximum\n        if (arr[n - 1] > arr[n - 2])\n            return arr[n - 1];\n\n        // Search Space for binary Search\n        int lo = 1, hi = n - 2;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n\n            // If the element at mid is maximum then return it\n            if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1])\n                return arr[mid];\n\n            // If next element is greater, then maximum\n            // element will exist in the right subarray\n            if (arr[mid] < arr[mid + 1])\n                lo = mid + 1;\n\n            // Otherwise, it will exist in left subarray\n            else\n                hi = mid - 1;\n        }\n\n        return arr[hi];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findMaximum(int[] arr) {\n        int n = arr.length;\n\n        // Check if the first element is maximum\n        if (n == 1 || arr[0] > arr[1]) return arr[0];\n\n        // Check if the last element is maximum\n        if (arr[n - 1] > arr[n - 2]) return arr[n - 1];\n\n        // Search Space for binary Search\n        int lo = 1, hi = n - 2;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n\n            // If the element at mid is maximum then return it\n            if (arr[mid] >= arr[mid - 1] && arr[mid] > arr[mid + 1]) return arr[mid];\n\n            // If next element is greater, then maximum\n            // element will exist in the right subarray\n            if (arr[mid] < arr[mid + 1]) lo = mid + 1;\n\n            // Otherwise, it will exist in left subarray\n            else\n                hi = mid - 1;\n        }\n\n        return arr[hi];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findMaximum(self, arr):\n        n = len(arr)\n        if (n == 1):\n            return arr[0]\n\n        # Check if the last element is maximum\n        if arr[n - 1] > arr[n - 2]:\n            return arr[n - 1]\n\n        # Search Space for binary Search\n        lo, hi = 1, n - 2\n\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n\n            # If the element at mid is maximum then return it\n            if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n                return arr[mid]\n\n            # If next element is greater, then maximum\n            # element will exist in the right subarray\n            if arr[mid] < arr[mid + 1]:\n                lo = mid + 1\n\n            # Otherwise, it will exist in left subarray\n            else:\n                hi = mid - 1\n\n        return arr[hi]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    findMaximum(arr) {\n        let n = arr.length;\n\n        // Check if the first element is maximum\n        if (n === 1 || arr[0] > arr[1]) return arr[0];\n\n        // Check if the last element is maximum\n        if (arr[n - 1] > arr[n - 2]) return arr[n - 1];\n\n        // Search Space for binary Search\n        let lo = 1, hi = n - 2;\n\n        while (lo <= hi) {\n            let mid = lo + Math.floor((hi - lo) / 2);\n\n            // If the element at mid is a\n            // maximum element then return mid\n            if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) return arr[mid];\n\n            // If next element is greater, then maximum\n            // element will exist in the right subarray\n            if (arr[mid] < arr[mid + 1]) lo = mid + 1;\n\n            // Otherwise, it will exist in left subarray\n            else\n                hi = mid - 1;\n        }\n\n        return arr[hi];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}