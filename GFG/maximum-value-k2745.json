{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703416,
            "title": "Maximum value K",
            "titleSlug": "maximum-value-k2745",
            "content": "<p><span style=\"font-size: 18px;\">Given an array<strong> arr[]</strong> of positive integers, find the maximum value of <strong>k </strong>such that there are at least k elements in the array that are greater than or equal to k.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 3, 4, 5, 6, 7]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 4 elements [4, 5, 6, 7]  are greater than equal to 4.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 3 elements [2, 3, 4] are greater than equal to 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)<br /><br /><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, find the largest integer 'k' such that there are at least 'k' elements in the array that are greater than or equal to 'k'.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[2, 3, 4, 5, 6, 7]",
                        "output": "4",
                        "explanation": "There are 4 elements (4, 5, 6, 7) in the array that are greater than or equal to 4."
                    },
                    {
                        "input": "[1, 2, 3, 4]",
                        "output": "2",
                        "explanation": "There are 3 elements (2, 3, 4) in the array that are greater than or equal to 2. The largest possible k is 2, as there are not 3 elements greater than or equal to 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a frequency array to count occurrences, then scan it backward to find the largest index where the sum of elements greater than or equal to the index is valid.</span></p>",
            "<p><span >Sort the array and find the highest index k such that there are at least k elements greater than or equal to k.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findMaximumNum(vector<int>& arr) {\n        int n = arr.size(); // Define n as the size of the input array\n\n        vector<int> freq(n + 1, 0); // Auxiliary frequency array\n\n        // Store the frequency of elements in the auxiliary array\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < n)\n                freq[arr[i]]++;\n            else\n                freq[n]++;\n        }\n\n        int sum = 0; // Sum stores the number of elements greater than or equal to the\n                     // current index\n\n        // Scan the auxiliary array backwards\n        for (int i = n; i > 0; i--) {\n            sum += freq[i];\n\n            // If sum is greater than or equal to the current index, return the index\n            if (sum >= i) {\n                return i;\n            }\n        }\n\n        return 0; // If no valid answer is found, return 0\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\nclass Solution {\n    int findMaximumNum(int[] arr) {\n        int n = arr.length; // Get the size of the input array\n\n        // Auxiliary array to store frequencies\n        int[] freq = new int[n + 1];\n\n        // Store the frequency of elements in the auxiliary array\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < n)\n                freq[arr[i]]++;\n            else\n                freq[n]++;\n        }\n\n        int sum = 0; // Sum stores the number of elements >= current index\n\n        // Scan the auxiliary array backwards\n        for (int i = n; i > 0; i--) {\n            sum += freq[i];\n\n            // If sum is greater than or equal to the current index, return the index\n            if (sum >= i) {\n                return i;\n            }\n        }\n\n        return 0; // If no valid answer is found, return 0\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# User function Template for python3\n\n\nclass Solution:\n\n    def findMaximumNum(self, arr):\n        n = len(arr)  # Get the size of the input array\n\n        # Auxiliary array to store frequencies\n        freq = [0] * (n + 1)\n\n        # Store the frequency of elements in the auxiliary array\n        for i in range(n):\n            if arr[i] < n:\n                freq[arr[i]] += 1\n            else:\n                freq[n] += 1\n\n        sum_ = 0  # Sum stores the number of elements >= current index\n\n        # Scan the auxiliary array backwards\n        for i in range(n, 0, -1):\n            sum_ += freq[i]\n\n            # If sum is greater than or equal to the current index, return the index\n            if sum_ >= i:\n                return i\n\n        return 0  # If no valid answer is found, return 0\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\nclass Solution {\n    /**\n     * @param {number[]} arr\n     * @returns {number}\n     */\n    findMaximumNum(arr) {\n        let n = arr.length; // Get the size of the input array\n\n        // Auxiliary array to store frequencies\n        let freq = new Array(n + 1).fill(0);\n\n        // Store the frequency of elements in the auxiliary array\n        for (let i = 0; i < n; i++) {\n            if (arr[i] < n)\n                freq[arr[i]]++;\n            else\n                freq[n]++;\n        }\n\n        let sum = 0; // Sum stores the number of elements >= current index\n\n        // Scan the auxiliary array backwards\n        for (let i = n; i > 0; i--) {\n            sum += freq[i];\n\n            // If sum is greater than or equal to the current index, return the index\n            if (sum >= i) {\n                return i;\n            }\n        }\n\n        return 0; // If no valid answer is found, return 0\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}