{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702661,
            "title": "Maximum value",
            "titleSlug": "maximum-value5946",
            "content": "<p><span >Given an array <strong>arr[]</strong> of integres. Find the maximum value of <strong>arr[j]</strong> &ndash; <strong>arr[i]</strong> + <strong>arr[l]</strong> &ndash; <strong>arr[k]</strong>, such that <strong>i</strong> &lt; <strong>j</strong> &lt; <strong>k</strong> &lt; <strong>l</strong>.<br /><br /><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3]\n<strong>Output: </strong>-1\n<strong>Explanation: </strong>arr.size() &lt; 4 so no such i,j,k,l is possible.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [4, 8, 9, 2, 20]\n<strong>Output: </strong>23\n<strong>Explanation: </strong>Here i = 0, j = 2, k = 3, l = 4 so arr[j] &ndash; arr[i] + arr[l] &ndash; arr[k] = 9 &ndash; 4 + 20 &ndash; 2 = 23\n</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]`, find the maximum value of `arr[j] - arr[i] + arr[l] - arr[k]` such that `i < j < k < l`. If no such combination of indices exists, the function should ideally return a value indicating that (e.g., -1).",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3]",
                        "output": "-1",
                        "explanation": "The array has fewer than 4 elements, so it is impossible to find indices i, j, k, and l satisfying the condition i < j < k < l."
                    },
                    {
                        "input": "[4, 8, 9, 2, 20]",
                        "output": "23",
                        "explanation": "With i = 0, j = 2, k = 3, and l = 4, the value arr[j] - arr[i] + arr[l] - arr[k] is 9 - 4 + 20 - 2 = 23. This is the maximum possible value."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Create 4 arrays first for maximum <strong>arr[l]</strong>, second for maximum <strong>arr[l]</strong> - <strong>arr[k]</strong>, third for maximum <strong>&nbsp;</strong><strong>arr[l]</strong>&nbsp;-&nbsp;<strong>arr[k] </strong>+<strong> arr[j]</strong>, and fourth for&nbsp;<strong>arr[l]</strong>&nbsp;-&nbsp;<strong>arr[k]&nbsp;</strong>+<strong> arr[j]&nbsp;</strong>-<strong> arr[i].</strong></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution {\n  public:\n    // Function to find the maximum value\n    int findMaxValue(vector<int> &arr) {\n        int n = arr.size();\n        int MIN = INT_MIN;\n        // If the array size is less than 4, return -1\n        if (n < 4) {\n            int MINI = -1;\n            return MINI;\n        }\n\n        // Initialize four arrays with minimum value\n        int table1[n + 1], table2[n + 1], table3[n + 1], table4[n + 1];\n\n        for (int i = 0; i <= n; i++)\n            table1[i] = table2[i] = table3[i] = table4[i] = MIN;\n\n        // Fill up the first table by finding the maximum value from the right\n        for (int i = n - 1; i >= 0; i--)\n            table1[i] = max(table1[i + 1], arr[i]);\n\n        // Fill up the second table by finding the maximum difference from the right\n        for (int i = n - 2; i >= 0; i--)\n            table2[i] = max(table2[i + 1], table1[i + 1] - arr[i]);\n\n        // Fill up the third table by finding the maximum value after adding the\n        // difference from the right\n        for (int i = n - 3; i >= 0; i--)\n            table3[i] = max(table3[i + 1], table2[i + 1] + arr[i]);\n\n        // Fill up the fourth table by finding the maximum difference after subtracting\n        // the value from the right\n        for (int i = n - 4; i >= 0; i--)\n            table4[i] = max(table4[i + 1], table3[i + 1] - arr[i]);\n\n        int res = MIN;\n        // Find the maximum value from the last table\n        for (int i = 0; i <= n - 1; i++)\n            res = max(res, table4[i]);\n\n        return (res);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findMaxValue(int[] arr) {\n        int n = arr.length;\n        int MIN = Integer.MIN_VALUE;\n\n        // If the array size is less than 4, return -1\n        if (n < 4) {\n            return -1;\n        }\n\n        // Initialize four arrays with minimum value\n        int[] table1 = new int[n + 1];\n        int[] table2 = new int[n + 1];\n        int[] table3 = new int[n + 1];\n        int[] table4 = new int[n + 1];\n        Arrays.fill(table1, MIN);\n        Arrays.fill(table2, MIN);\n        Arrays.fill(table3, MIN);\n        Arrays.fill(table4, MIN);\n\n        // Fill up the tables\n        for (int i = n - 1; i >= 0; i--) table1[i] = Math.max(table1[i + 1], arr[i]);\n\n        for (int i = n - 2; i >= 0; i--)\n            table2[i] = Math.max(table2[i + 1], table1[i + 1] - arr[i]);\n\n        for (int i = n - 3; i >= 0; i--)\n            table3[i] = Math.max(table3[i + 1], table2[i + 1] + arr[i]);\n\n        for (int i = n - 4; i >= 0; i--)\n            table4[i] = Math.max(table4[i + 1], table3[i + 1] - arr[i]);\n\n        int res = MIN;\n        for (int i = 0; i <= n - 1; i++) res = Math.max(res, table4[i]);\n\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findMaxValue(self, arr):\n        n = len(arr)\n        if n < 4:\n            return -1\n\n        # Initialize four lists with a large negative value\n        MIN = float('-inf')\n        table1 = [MIN] * (n + 1)\n        table2 = [MIN] * (n + 1)\n        table3 = [MIN] * (n + 1)\n        table4 = [MIN] * (n + 1)\n\n        # Fill up the first table by finding the maximum value from the right\n        for i in range(n - 1, -1, -1):\n            table1[i] = max(table1[i + 1], arr[i])\n\n        # Fill up the second table by finding the maximum difference from the right\n        for i in range(n - 2, -1, -1):\n            table2[i] = max(table2[i + 1], table1[i + 1] - arr[i])\n\n        # Fill up the third table by finding the maximum value after adding the difference from the right\n        for i in range(n - 3, -1, -1):\n            table3[i] = max(table3[i + 1], table2[i + 1] + arr[i])\n\n        # Fill up the fourth table by finding the maximum difference after subtracting the value from the right\n        for i in range(n - 4, -1, -1):\n            table4[i] = max(table4[i + 1], table3[i + 1] - arr[i])\n\n        # Find the maximum value from the last table\n        res = max(table4)\n\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMaxValue(arr) {\n        let n = arr.length;\n        if (n < 4) {\n            return -1;\n        }\n\n        let MIN = Number.MIN_SAFE_INTEGER;\n        let table1 = Array(n + 1).fill(MIN);\n        let table2 = Array(n + 1).fill(MIN);\n        let table3 = Array(n + 1).fill(MIN);\n        let table4 = Array(n + 1).fill(MIN);\n\n        // Fill up the first table by finding the maximum value from the right\n        for (let i = n - 1; i >= 0; i--) {\n            table1[i] = Math.max(table1[i + 1], arr[i]);\n        }\n\n        // Fill up the second table by finding the maximum difference from the right\n        for (let i = n - 2; i >= 0; i--) {\n            table2[i] = Math.max(table2[i + 1], table1[i + 1] - arr[i]);\n        }\n\n        // Fill up the third table by finding the maximum value after adding the\n        // difference from the right\n        for (let i = n - 3; i >= 0; i--) {\n            table3[i] = Math.max(table3[i + 1], table2[i + 1] + arr[i]);\n        }\n\n        // Fill up the fourth table by finding the maximum difference after subtracting\n        // the value from the right\n        for (let i = n - 4; i >= 0; i--) {\n            table4[i] = Math.max(table4[i + 1], table3[i + 1] - arr[i]);\n        }\n\n        // Find the maximum value from the last table\n        return Math.max(...table4);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}