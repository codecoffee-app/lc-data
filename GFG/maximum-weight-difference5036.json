{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703907,
            "title": "Maximum weight difference",
            "titleSlug": "maximum-weight-difference5036",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>.&nbsp;The task is to choose <strong>k</strong> numbers from the array such that the absolute difference between the sum of chosen numbers and the sum of remaining numbers is maximum. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [8, 4, 5, 2, 10] , k=2\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> If we select 2 and 4, then abs((2+4) - (8+5+10)) = 17.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 1, 1, 1, 1, 1, 1, 1] , k=3\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>We can select any 3 1's.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= k &lt;= arr.size() &lt;=10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, select `k` numbers from the array such that the absolute difference between the sum of the chosen numbers and the sum of the remaining numbers is maximized.",
                "constraints": [
                    "1 <= k <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [8, 4, 5, 2, 10], k = 2",
                        "output": "17",
                        "explanation": "Selecting 2 and 4 yields a maximum difference. |(2 + 4) - (8 + 5 + 10)| = |6 - 23| = 17."
                    },
                    {
                        "input": "arr[] = [1, 1, 1, 1, 1, 1, 1, 1], k = 3",
                        "output": "2",
                        "explanation": "Selecting any three 1's results in a sum of 3.  The remaining elements sum to 5. |3 - 5| = 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Calculate the difference between the sum of the smallest or largest k elements and the sum of the remaining elements to find the maximum difference.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    long long MaxWeightDiff(vector<int>& arr, int k) {\n        int n = arr.size();\n\n        // Sort the given vector\n        std::sort(arr.begin(), arr.end());\n\n        // Initialize the sums\n        long long sum = 0, sum1 = 0, sum2 = 0;\n\n        // Get the sum of the entire vector\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n        }\n\n        // Get the sum of the first k elements\n        for (int i = 0; i < k; i++) {\n            sum1 += arr[i];\n        }\n\n        // Get the sum of the last k elements\n        for (int i = n - k; i < n; i++) {\n            sum2 += arr[i];\n        }\n\n        // Return the maximum possible difference\n        return std::max(std::abs(sum1 - (sum - sum1)), std::abs(sum2 - (sum - sum2)));\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public long MaxWeightDiff(int[] arr, int k) {\n        int n = arr.length;\n\n        // Sort the given array\n        Arrays.sort(arr);\n\n        // Initialize the sums\n        long sum = 0, sum1 = 0, sum2 = 0;\n\n        // Get the sum of the entire array\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n        }\n\n        // Get the sum of the first k elements\n        for (int i = 0; i < k; i++) {\n            sum1 += arr[i];\n        }\n\n        // Get the sum of the last k elements\n        for (int i = n - k; i < n; i++) {\n            sum2 += arr[i];\n        }\n\n        // Return the maximum possible difference\n        return Math.max(Math.abs(sum1 - (sum - sum1)), Math.abs(sum2 - (sum - sum2)));\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# User function Template for python3\n\n\nclass Solution:\n\n    def MaxWeightDiff(self, arr, k):\n        n = len(arr)\n\n        # Sort the given array\n        arr.sort()\n\n        # Initialize the sums\n        sum_total = 0\n        sum1 = 0\n        sum2 = 0\n\n        # Get the sum of the entire array\n        for i in range(n):\n            sum_total += arr[i]\n\n        # Get the sum of the first k elements\n        for i in range(k):\n            sum1 += arr[i]\n\n        # Get the sum of the last k elements\n        for i in range(n - k, n):\n            sum2 += arr[i]\n\n        # Return the maximum possible difference\n        return max(abs(sum1 - (sum_total - sum1)),\n                   abs(sum2 - (sum_total - sum2)))\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n//  User function Template for JavaScript\n\nclass Solution {\n    MaxWeightDiff(arr, k) {\n        let n = arr.length;\n\n        // Sort the given array\n        arr.sort((a, b) => a - b);\n\n        // Initialize the sums\n        let sumTotal = 0;\n        let sum1 = 0;\n        let sum2 = 0;\n\n        // Get the sum of the entire array\n        for (let i = 0; i < n; i++) {\n            sumTotal += arr[i];\n        }\n\n        // Get the sum of the first k elements\n        for (let i = 0; i < k; i++) {\n            sum1 += arr[i];\n        }\n\n        // Get the sum of the last k elements\n        for (let i = n - k; i < n; i++) {\n            sum2 += arr[i];\n        }\n\n        // Return the maximum possible difference\n        return Math.max(Math.abs(sum1 - (sumTotal - sum1)),\n                        Math.abs(sum2 - (sumTotal - sum2)));\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}