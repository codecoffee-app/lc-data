{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713152,
            "title": "Maximum Weight Node",
            "titleSlug": "maximum-weight-node--170645",
            "content": "<p><span style=\"font-size: 18px;\">Given a maze with <strong>n</strong> cells. Each cell may have <strong>multiple entry points</strong> but <strong>not more than one exit point</strong> (i.e entry/exit points are unidirectional doors like valves).</span></p>\n<p><span style=\"font-size: 18px;\">You are given an array <strong>exits[]</strong>,&nbsp;where<strong> exits[i] </strong>contains the exit point of the ith cell.<br />If <strong>exits[i]</strong> is <strong>-1,</strong> then ith cell doesn't have an exit. </span></p>\n<p><span style=\"font-size: 18px;\">The task is to find the cell with&nbsp;<strong>maximum weight </strong>(The <strong>weight</strong> of a cell <strong>i</strong> is the <strong>sum of all the cell indexes</strong> that have <strong>exit point</strong> as <strong>i </strong>). If there are multiple cells with the maximum weight return the cell with highest index.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:&nbsp;</strong>The cells are indexed with an integer value from 0 to n-1.<br />A cell <strong>i</strong> has <strong>weight 0</strong> if <strong>no cell</strong> has <strong>exit point</strong> as <strong>i.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong><strong>Examples:</strong></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong><strong>Input: </strong></strong>exits[] = [2, 0, -1, 2}<strong>\n<strong>Output:</strong> </strong>2<strong>\n<strong>Explanation</strong>: \n</strong>1 -&gt; 0 -&gt; 2 &lt;- 3\nweight of 0th cell = 1\nweight of 1st cell = 0 (because there is no cell pointing to the 1st cell)\nweight of 2nd cell = 0+3 = 3\nweight of 3rd cell = 0\nThere is only one cell which has maximum weight (i.e 2)<br />So, cell 2 is the output.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong><strong>Input: </strong></strong>exits[] = [-1]<strong>\n<strong>Output:</strong> </strong>0<strong>\n<strong>Explanation</strong>:\n</strong>weight of 0<sup>th</sup> cell is 0.\nThere is only one cell so cell 0 has maximum weight.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong><strong>Constraints:</strong></strong><br />1 &nbsp;&le; &nbsp;n &nbsp;&le; &nbsp;10<sup>5</sup><br />-1 &nbsp;<u>&lt;</u>&nbsp; exits[i] &nbsp;&lt; &nbsp;N<br />exits[i] &nbsp;&ne; &nbsp;i</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">if there is an edge from a to b then weight of the node b will be increased by a.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "juspay"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to find the cell with maximum weight.\n    int maxWeightCell(vector<int> &exits) {\n        int n = exits.size();\n        vector<long long> weight(n);\n\n        // Calculating the total weight of each cell.\n        for (int i = 0; i < n; i++) {\n            if (exits[i] != -1) {\n                weight[exits[i]] += i;\n            }\n        }\n\n        array<long long, 2> ans = {-1, -1};\n\n        // Finding the cell with maximum weight.\n        for (int i = 0; i < n; i++) {\n            ans = max(ans, {weight[i], i});\n        }\n\n        // Returning the index of the cell with maximum weight.\n        return ans[1];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int maxWeightCell(int[] exits) {\n        int n = exits.length;\n        // initialize an array to store the weights\n        long weight[] = new long[n];\n\n        // calculate the weights of each cell based on the given edges\n        for (int i = 0; i < n; i++) {\n            if (exits[i] != -1) {\n                weight[exits[i]] += i;\n            }\n        }\n\n        // initialize an array to store the maximum weight and its corresponding cell\n        // index\n        long ans[] = {-1, -1};\n\n        // find the cell with the maximum weight\n        for (int i = 0; i < n; i++) {\n            if (weight[i] >= ans[0]) ans = new long[] {weight[i], i};\n        }\n\n        // return the index of the cell with the maximum weight\n        return (int)ans[1];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to find the index of the cell with maximum weight.\n    def maxWeightCell(self, exits):\n        n = len(exits)\n        #Creating a list to store weight of each cell.\n        weight = [0] * n\n\n        #Iterating over the cells.\n        for i in range(n):\n            #If the current cell has a connection with another cell.\n            if (exits[i] != -1):\n                #Adding the index of the current cell to the weight of the connected cell.\n                weight[exits[i]] += i\n\n        #Initializing the maximum weight and cell index.\n        ans = [-1, -1]\n\n        #Iterating over the weight list to find the cell index with maximum weight.\n        for i in range(n):\n            #Updating ans with the cell index and weight if the current weight is greater.\n            ans = max(ans, [weight[i], i])\n\n        #Returning the cell index with maximum weight.\n        return ans[1]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\nclass Solution {\n    // Complete this function\n    // Function to find the maximum weight of all cells\n    public int maxWeightCell(List<int> exits) {\n        int n = exits.Count;\n        List<long> weight = new List<long>(n);\n\n        // Initializing each element of the weight list with 0.\n        for (int i = 0; i < n; i++) {\n            weight.Add(0);\n        }\n\n        // Calculating the total weight of each cell.\n        for (int i = 0; i < n; i++) {\n            if (exits[i] != -1) {\n                weight[exits[i]] += i;\n            }\n        }\n\n        long[] ans = { -1, -1 };\n\n        // Finding the cell with maximum weight.\n        for (int i = 0; i < n; i++) {\n            if (weight[i] > ans[0] || (weight[i] == ans[0] && i > ans[1])) {\n                ans[0] = weight[i];\n                ans[1] = i;\n            }\n        }\n\n        // Returning the index of the cell with maximum weight.\n        return (int)ans[1];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the cell with maximum weight\n    maxWeightCell(exits) {\n        let n = exits.length;\n        let weight = new Array(n).fill(0);\n\n        // Calculating the total weight of each cell\n        for (let i = 0; i < n; i++) {\n            if (exits[i] !== -1) {\n                weight[exits[i]] += i;\n            }\n        }\n\n        let ans = [ -1, -1 ];\n\n        // Finding the cell with maximum weight\n        for (let i = 0; i < n; i++) {\n            if (weight[i] > ans[0]) {\n                ans = [ weight[i], i ];\n            } else if (weight[i] === ans[0] && i > ans[1]) {\n                ans = [ weight[i], i ];\n            }\n        }\n\n        // Returning the index of the cell with maximum weight\n        return ans[1];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}