{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704498,
            "title": "Maximum weight transformation of a given string",
            "titleSlug": "maximum-weight-transformation-of-a-given-string3551",
            "content": "<p><span style=\"font-size:18px\">Given string <strong>s</strong> consisting of only A&rsquo;s and B&rsquo;s. You can transform the given string to another string by toggling any character. Thus many transformations of the given string are possible. The task is to find the Weight of the maximum weight transformation.</span></p>\n\n<p><span style=\"font-size:18px\">The weight of a string is calculated using the below formula.</span></p>\n\n<div><span style=\"font-size:18px\">Weight of string = Weight of total pairs + weight of single characters - Total number of toggles.</span></div>\n\n<div>&nbsp;</div>\n\n<div><span style=\"font-size:18px\"><strong>Note: </strong></span></div>\n\n<div><span style=\"font-size:18px\">1. Two consecutive characters are considered a pair only if they are different.<br />\n2. Weight of a single pair (both characters are different) = 4<br />\n3. Weight of a single character = 1 </span></div>\n\n<div>&nbsp;</div>\n\n<div>\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> s = &quot;AA&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Transformations of given \nstring are &quot;AA&quot;, &quot;AB&quot;, &quot;BA&quot; and &quot;BB&quot;. \nMaximum weight transformation is &quot;AB&quot; \nor &quot;BA&quot;.  And weight is &quot;One Pair - \nOne Toggle&quot; = 4-1 = 3.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> s = &quot;ABB&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Transformations are &quot;ABB&quot;, \n&quot;ABA&quot;, &quot;AAB&quot;, &quot;AAA&quot;, &quot;BBB&quot;, &quot;BBA&quot;, &quot;BAB&quot; \nand &quot;BAA&quot; Maximum weight is of original \nstring 4 + 1 (One Pair + 1 character)</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Complete the function <strong><code>getMaxWeight</code>()&nbsp;</strong>which takes string<strong> s </strong>as input and return an integer<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(<strong>N</strong>)<br />\n<strong>Expected Auxiliary Space:</strong> O(<strong>N</strong>)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup></span></p>\n</div>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 's' consisting of only 'A's and 'B's, you can transform it by toggling any character.  The goal is to find the maximum possible weight of any such transformation. The weight of a string is calculated as: Weight of string = Weight of total pairs + weight of single characters - Total number of toggles.\n\nNote:\n1. Two consecutive characters form a pair only if they are different.\n2. The weight of a distinct pair is 4.\n3. The weight of a single character is 1.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "AA",
                        "output": "3",
                        "explanation": "The maximum weight is achieved with the transformation 'AB' or 'BA'. One pair (weight 4) is created with one toggle operation. Total weight: 4 - 1 = 3."
                    },
                    {
                        "input": "ABB",
                        "output": "5",
                        "explanation": "The original string 'ABB' has one pair 'AB' (weight 4) and one single character 'B' at the end (weight 1). Therefore, total weight: 4 + 1 = 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<pre>\n<strong>If</strong> (n == 1)\n   maxWeight(str[0..n-1]) = 1\n\n<strong>Else If</strong> str[0] != str[1]\n// Max of two cases: First character considered separately\n//                   First pair considered separately \nmaxWeight(str[0..n-1]) = Max (1 + maxWeight(str[1..n-1]),\n                              4 + getMaxRec(str[2..n-1])\n<strong>Else</strong>\n// Max of two cases: First character considered separately\n//                   First pair considered separately \n// Since first two characters are same and a toggle is \n// required to form a pair, 3 is added for pair instead \n// of 4         \nmaxWeight(str[0..n-1]) = Max (1 + maxWeight(str[1..n-1]),\n                              3 + getMaxRec(str[2..n-1])\n</pre>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "#include <bits/stdc++.h>\nusing namespace std;\n//Position this line where user code will be pasted.\n\n\nclass Solution{\n\n\tpublic:\n\t// Returns weight of the maximum  \n\t// weight transformation \n\tint getMaxRec(string &str, int i, int n,  \n\t                           int lookup[]) \n\t{ \n\t    // Base case \n\t    if (i >= n) return 0; \n\t  \n\t    //If this subproblem is already solved \n\t    if (lookup[i] != -1) return lookup[i]; \n\t  \n\t    // Don't make pair, so  \n\t    // weight gained is 1 \n\t    int ans = 1 + getMaxRec(str, i + 1, n,  \n\t                                  lookup); \n\t  \n\t    // If we can make pair \n\t    if (i + 1 < n) \n\t    { \n\t    // If elements are dissmilar, \n\t    // weight gained is 4 \n\t    if (str[i] != str[i+1]) \n\t        ans = max(4 + getMaxRec(str, i + 2,  \n\t                                n, lookup), ans); \n\t  \n\t    // if elements are similar so for  \n\t    // making a pair we toggle any of them. \n\t    // Since toggle cost is 1 so  \n\t    // overall weight gain becomes 3 \n\t    else ans = max(3 + getMaxRec(str, i + 2,  \n\t                                 n, lookup), ans); \n\t    } \n\t  \n\t    // save and return maximum \n\t    // of above cases \n\t    return lookup[i] = ans; \n\t} \n\t  \n\t// Initializes lookup table  \n\t// and calls getMaxRec() \n\tint getMaxWeight(string str) \n\t{ \n\t    int n = str.length(); \n\t  \n\t    // Create and initialize lookup table \n\t    int lookup[n]; \n\t    memset(lookup, -1, sizeof lookup); \n\t  \n\t    // Call recursive function \n\t    return getMaxRec(str, 0, str.length(),  \n\t                                 lookup); \n\t} \n  \n\n};\n\t",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution\n{\n    // Returns weight of the maximum  \n    // weight transformation \n    public int getMaxRec(string str, int i, int n, int[] lookup)\n    { \n        // Base case \n        if (i >= n) return 0; \n    \n        //If this subproblem is already solved \n        if (lookup[i] != -1) return lookup[i]; \n    \n        // Don't make pair, so  \n        // weight gained is 1 \n        int ans = 1 + getMaxRec(str, i + 1, n, lookup); \n    \n        // If we can make pair \n        if (i + 1 < n) \n        { \n            // If elements are dissimilar, \n            // weight gained is 4 \n            if (str[i] != str[i+1]) \n                ans = Math.Max(4 + getMaxRec(str, i + 2, n, lookup), ans); \n    \n            // if elements are similar so for  \n            // making a pair we toggle any of them. \n            // Since toggle cost is 1 so  \n            // overall weight gain becomes 3 \n            else ans = Math.Max(3 + getMaxRec(str, i + 2, n, lookup), ans); \n        } \n    \n        // save and return maximum \n        // of above cases \n        return lookup[i] = ans; \n    }\n\n    //Complete this function\n    public int getMaxWeight(string s)\n    {\n        int n = s.Length;\n        \n        // Create and initialize lookup table\n        int[] lookup = new int[n];\n        Array.Fill(lookup, -1);\n        \n        // Call recursive function\n        return getMaxRec(s, 0, n, lookup);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}