{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700159,
            "title": "Maximum Width of Tree",
            "titleSlug": "maximum-width-of-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree, find the maximum width of it.&nbsp;<strong>Maximum width </strong>is defined as the maximum number of nodes at any level.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [1, 2, 3]\n<strong>&nbsp;&nbsp;&nbsp;</strong>&nbsp;&nbsp;&nbsp;&nbsp;1\n &nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;\\\n &nbsp; &nbsp;2&nbsp; &nbsp; &nbsp;&nbsp;3\n<strong>Output: </strong>2\n<strong>Explanation: </strong>On the first level there is only one node 1. On the second level there are two nodes 2, 3 clearly it is the maximum number of nodes at any level</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> root = [10, 20, 30, 40, 60]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10\n &nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp; \\\n&nbsp;&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 30\n &nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;\\\n &nbsp;40&nbsp;&nbsp;&nbsp; 60\n<strong>Output: </strong>2<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>There is one node on level 1(10) There is two node on level 2(20, 30) There is two node on level 3(40, 60) Hence the answer is 2</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(width of the tree).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes&lt;= 10<sup>5</sup><br />0 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, determine the maximum width. The maximum width is the largest number of nodes present at any single level in the tree.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "0 <= node data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3]",
                        "output": "2",
                        "explanation": "The first level has 1 node (1). The second level has 2 nodes (2, 3). Therefore, the maximum width is 2."
                    },
                    {
                        "input": "[10, 20, 30, 40, 60]",
                        "output": "2",
                        "explanation": "Level 1 has 1 node (10). Level 2 has 2 nodes (20, 30). Level 3 has 2 nodes (40, 60). The maximum width is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to calculate maximum width of each level.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "vmware",
            "flipkart",
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to get height of a tree.\n    int height(Node* node) {\n        // if node is null, we return 0.\n        if (node == NULL)\n            return 0;\n\n        // else we call the function height recursively for left and right\n        // subtrees of the parent node and store their maximum.\n        else {\n            int lHeight = height(node->left);\n            int rHeight = height(node->right);\n            return (lHeight > rHeight) ? (lHeight + 1) : (rHeight + 1);\n        }\n    }\n\n  public:\n    // Function to get width of a given level.\n    int getWidth(Node* root, int level) {\n\n        if (root == NULL)\n            return 0;\n\n        // if level is 1, we return 1.\n        if (level == 1)\n            return 1;\n\n        // else if it is greater than one, we call the getWidth function\n        // recursively for left and right subtrees of parent node and add them.\n        else if (level > 1)\n            return getWidth(root->left, level - 1) + getWidth(root->right, level - 1);\n    }\n\n  public:\n    // Function to get the maximum width of a binary tree.\n    int getMaxWidth(Node* root) {\n        int maxWidth = 0;\n        int width;\n        int h = height(root);\n        int i;\n\n        // getting width of each level and comparing the width\n        // with maximum width so far.\n        for (i = 1; i <= h; i++) {\n            width = getWidth(root, i);\n            if (width > maxWidth)\n                maxWidth = width;\n        }\n\n        // returning the maximum width.\n        return maxWidth;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    // Function to get the maximum width of a binary tree.\r\n    int getMaxWidth(Node root) {\r\n        int width = 0;\r\n        int h = height(root);\r\n        int maxWidth = 0;\r\n\r\n        // getting width of each level and comparing the width\r\n        // with maximum width so far.\r\n        for (int i = 0; i <= h; i++) {\r\n            width = getWidth(root, i);\r\n            if (width > maxWidth) maxWidth = width;\r\n        }\r\n        // returning the maximum width.\r\n        return maxWidth;\r\n    }\r\n\r\n    // Function to get width of a given level.\r\n    int getWidth(Node root, int level) {\r\n\r\n        if (root == null) return 0;\r\n\r\n        // if level is 1, we return 1.\r\n        if (level == 1) return 1;\r\n\r\n        // else if it is greater than one, we call the getWidth function\r\n        // recursively for left and right subtrees of parent node and add them.\r\n        else if (level > 1)\r\n            return getWidth(root.left, level - 1) +\r\n                   getWidth(root.right, level - 1);\r\n\r\n        return 0;\r\n    }\r\n\r\n    // Function to get height of a tree.\r\n    int height(Node root) {\r\n        // if node is null, we return 0.\r\n        if (root == null) return 0;\r\n\r\n        // else we call the function height recursively for left and right\r\n        // subtrees of the parent node and store their maximum.\r\n        else {\r\n            int lHeight = height(root.left);\r\n            int rHeight = height(root.right);\r\n            return (lHeight > rHeight) ? (lHeight + 1) : (rHeight + 1);\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to get height of a tree. \r\n    def height(self,node):\r\n        \r\n        #if node is null, we return 0.\r\n        if node is None:\r\n            return 0\r\n            \r\n        #else we call the function height recursively for left and right\r\n        #subtrees of the parent node and store their maximum.\r\n        else:\r\n            lHeight = self.height(node.left)\r\n            rHeight = self.height(node.right)\r\n            return (lHeight+1) if (lHeight > rHeight) else (rHeight+1)\r\n    \r\n    \r\n    #Function to get width of a given level.\r\n    def getWidth(self,root, level):\r\n        if root is None:\r\n            return 0\r\n            \r\n        #if level is 1, we return 1.\r\n        if level == 1:\r\n            return 1\r\n            \r\n        #else if it is greater than one, we call the getWidth function \r\n        #recursively for left and right subtrees of parent node and add them.\r\n        elif level > 1:\r\n            return (self.getWidth(root.left, level-1) +\r\n                    self.getWidth(root.right, level-1))\r\n                    \r\n    #Function to get the maximum width of a binary tree.\r\n    def getMaxWidth(self,root):\r\n        maxWidth = 0\r\n        h = self.height(root)\r\n        \r\n        #getting width of each level and comparing the width \r\n        #with maximum width so far.\r\n        for i in range(1, h+1):\r\n            width = self.getWidth(root, i)\r\n            if (width > maxWidth):\r\n                maxWidth = width\r\n                \r\n        #returning the maximum width.\r\n        return maxWidth\r\n      \r\n    \r\n\r\n      \r\n    \r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} root\r\n * @returns {number}\r\n*/\r\n\r\n/*\r\nclass Node{\r\n    constructor(data){\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n*/\r\n\r\nclass Solution {\r\n    // Function to get height of a tree.\r\n    height(node) {\r\n        // if node is null, we return 0.\r\n        if (node === null) return 0;\r\n\r\n        // else we call the function height recursively for left and right\r\n        // subtrees of the parent node and store their maximum.\r\n        else {\r\n            let lHeight = this.height(node.left);\r\n            let rHeight = this.height(node.right);\r\n            if (lHeight > rHeight) return (lHeight + 1);\r\n            return (rHeight + 1);\r\n        }\r\n    }\r\n\r\n    // Function to get width of a given level.\r\n    getWidth(root, level) {\r\n\r\n        if (root === null) return 0;\r\n\r\n        // if level is 1, we return 1.\r\n        if (level === 1) return 1;\r\n\r\n        // else if it is greater than one, we call the getWidth function\r\n        // recursively for left and right subtrees of parent node and add them.\r\n        else if (level > 1)\r\n            return this.getWidth(root.left, level - 1) +\r\n                   this.getWidth(root.right, level - 1);\r\n    }\r\n\r\n    // Function to get the maximum width of a binary tree.\r\n    getMaxWidth(root) {\r\n        let maxWidth = 0;\r\n        let width;\r\n        let h = this.height(root);\r\n        let i;\r\n\r\n        // getting width of each level and comparing the width\r\n        // with maximum width so far.\r\n        for (i = 1; i <= h; i++) {\r\n            width = this.getWidth(root, i);\r\n            if (width > maxWidth) maxWidth = width;\r\n        }\r\n        // returning the maximum width.\r\n        return maxWidth;\r\n    }\r\n}\r\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}