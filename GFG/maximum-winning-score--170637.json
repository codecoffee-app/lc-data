{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710022,
            "title": "Maximum Winning score",
            "titleSlug": "maximum-winning-score--170637",
            "content": "<p><span style=\"font-size:18px\">In an online game, <strong>N</strong> blocks are arranged in a hierarchical manner. All the blocks are connected together by a total of N-1 connections.&nbsp;Each block is given an ID from 1 to N. A block may be further connected to other blocks. Each block is also assigned a specific<strong> point value</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">A player starts from Block 1. She must move forward from each block to a directly connected block until she reaches the final block, which has no further connection. When the player lands on a block, she <strong>collects the point value</strong> of that block. The players score is calculated as the <strong>product of point values</strong>&nbsp;that the player collects.<br />\r\nFind the maximum score a player can achieve.<br />\r\n<strong>Note:&nbsp;</strong>The answer can always be represented with 64 bits.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>     4\r\n&nbsp;   / \\\r\n&nbsp;  2   8\r\n&nbsp; / \\ / \\\r\n&nbsp;2  1 3  4\r\n<strong>Output: </strong>128<strong>\r\nExplanation: </strong>Path in the given tree \r\ngoes like 4, 8, 4 which gives the max\r\nscore of 4x8x4 = 128.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>     10\r\n&nbsp;  /    \\\r\n&nbsp; 7\\t5\r\n\\t    \\\r\n\\t     1\r\n<strong>Output: </strong>70<strong>\r\nExplanation: </strong>The path 10, 7 gives a \r\nscore of 70 which is the maximum possible.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your&nbsp;Task:</strong><br />\r\nYou don&#39;t need to take input or print anything. Your task is to <strong>complete </strong>the function&nbsp;<strong>findMaxScore()&nbsp;</strong>that takes <strong>root </strong>as input and returns max score possible.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(N).<br />\r\n<strong>Expected Auxiliary Space: </strong>O(Height of the Tree).</span></p>\r\n\r\n<div><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le;&nbsp;Number of nodes &le;&nbsp;10<sup>3</sup><br />\r\n1&nbsp;&le;&nbsp;Data on node&nbsp;&le;&nbsp;10 </span></div>\r\n\r\n<div><span style=\"font-size:18px\">It is guaranteed that the answer will always fit in the 64-bit Integer</span></div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a hierarchical arrangement of N blocks in an online game, connected by N-1 connections, forming a tree structure. Each block has a unique ID from 1 to N and a point value. A player starts at Block 1 and moves to directly connected blocks until reaching a final block (a block with no further connections). The player's score is the product of the point values of the blocks visited. Find the maximum score achievable by the player.",
                "constraints": [
                    "1 <= Number of nodes <= 10^3",
                    "1 <= Data on node <= 10"
                ],
                "testcases": [
                    {
                        "input": "A tree represented as:\n     4\n    / \\\n   2   8\n  / \\ / \\\n 2  1 3  4",
                        "output": "128",
                        "explanation": "The path 4 -> 8 -> 4 yields the maximum score: 4 * 8 * 4 = 128."
                    },
                    {
                        "input": "A tree represented as:\n     10\n    /  \\\n   7   5\n       \\\n        1",
                        "output": "70",
                        "explanation": "The path 10 -> 7 yields the maximum score: 10 * 7 = 70."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The idea here is that we will recursively get the possible maximum path product from root to leaf, and store it in a variable.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    //Function to calculate maximum path product.\r\n    long long getProduct(Node *root)\r\n    {\r\n        long long prod = 1;\r\n        \r\n        if (root == NULL)\r\n            return prod;\r\n    \r\n        prod = max(prod, getProduct(root->left));\r\n    \r\n        prod = max(prod, getProduct(root->right));\r\n            \r\n        return prod * root->data;\r\n    }\r\n    \r\n    //Function to return maximum path product from any node in a tree.\r\n    long long findMaxScore(Node *root) \r\n    {\r\n        long long res = getProduct(root);\r\n        return res;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //Function to calculate maximum path product.\r\n    Long getProduct(Node root)\r\n    {\r\n        Long prod = 1L;\r\n        \r\n        if (root == null)\r\n            return prod;\r\n    \r\n        prod = Math.max(prod, getProduct(root.left));\r\n    \r\n        prod = Math.max(prod, getProduct(root.right));\r\n            \r\n        return prod * root.data;\r\n    }\r\n    \r\n    //Function to return maximum path product from any node in a tree.\r\n    public Long findMaxScore(Node root)\r\n    {\r\n        Long res = getProduct(root);\r\n        return res;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to calculate maximum path product.\r\n    def getProduct(self, root):\r\n        prod = 1\r\n        \r\n        if root is None:\r\n            return prod\r\n            \r\n        prod = max(prod, self.getProduct(root.left))\r\n    \r\n        prod = max(prod, self.getProduct(root.right))\r\n            \r\n        return prod * root.data\r\n\r\n    def findMaxScore(self, root):\r\n        res = self.getProduct(root)\r\n        return res",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Solution {\n    //Function to calculate maximum path product from the root.\n    getProduct(root) {\n        if (root === null) {\n            return 1;\n        }\n        const leftProd = this.getProduct(root.left);\n        const rightProd = this.getProduct(root.right);\n        return Math.max(leftProd, rightProd) * root.data;\n    }\n\n    //Function to find maximum score among all nodes of binary tree.\n    findMaxScore(root) {\n        return this.getProduct(root);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}