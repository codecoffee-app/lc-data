{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706274,
            "title": "Maximum XOR subarray",
            "titleSlug": "maximum-xor-subarray--141631",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]&nbsp;</strong>of size,&nbsp;<strong>N.</strong>&nbsp;Find the subarray with maximum XOR</span>. <span style=\"font-size: 18px;\">A subarray is a contiguous part of the array.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong></span>:\n<span style=\"font-size: 18px;\">N = 4\narr[] = {1,2,3,4}\n<strong>Output:</strong>&nbsp;7\n<strong>Explanation</strong>: \nThe subarray {3,4} has maximum xor \nvalue equal to 7.<br /><br /></span></pre>\n<p style=\"font-family: sans-serif; font-size: medium; white-space: normal;\"><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input</strong>:\nN = 3\narr[] = {1,4,3}\n<strong>Output:</strong>&nbsp;7\n<strong>Explanation</strong>: \n There are 6 possible subarrays:\n subarray\\t\\tXOR value\n [1]\\t\\t\\t   1\n [4]\\t\\t\\t   4\n [3]\\t\\t\\t   3\n [1, 4]\\t\\t\\t5 (1^4)\n [4, 3]\\t\\t\\t7 (4^3)\n [1, 4, 3]\\t\\t   6 (1^4^3)\n\n [4, 3] subarray has maximum XOR value. So, return 7.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>maxSubarrayXOR()</strong>&nbsp;which takes the array arr[], its size N<strong> </strong>as input parameters&nbsp;and returns the maximum xor of any subarray.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span><br /><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">1<sup> </sup>&lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `N`, find the subarray with the maximum XOR value. A subarray is a contiguous part of the array.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 4\narr[] = {1,2,3,4}",
                        "output": "7",
                        "explanation": "The subarray {3, 4} has a maximum XOR value of 7 (3 ^ 4 = 7)."
                    },
                    {
                        "input": "N = 3\narr[] = {1,4,3}",
                        "output": "7",
                        "explanation": "The subarray {4, 3} has a maximum XOR value of 7 (4 ^ 3 = 7)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use trie.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{   \npublic:\n    #define INT_SIZE 32 \n  \n// A Trie Node \nstruct TrieNode \n{ \n    int value;  // Only used in leaf nodes \n    TrieNode *arr[2]; \n}; \n  \n// Utility function to create a Trie node \nTrieNode *newNode() \n{ \n    TrieNode *temp = new TrieNode; \n    temp->value = 0; \n    temp->arr[0] = temp->arr[1] = NULL; \n    return temp; \n} \n  \n// Inserts pre_xor to trie with given root \nvoid insert(TrieNode *root, int pre_xor) \n{ \n    TrieNode *temp = root; \n  \n    // Start from the msb, insert all bits of \n    // pre_xor into Trie \n    for (int i=INT_SIZE-1; i>=0; i--) \n    { \n        // Find current bit in given prefix \n        bool val = pre_xor & (1<<i); \n  \n        // Create a new node if needed \n        if (temp->arr[val] == NULL) \n            temp->arr[val] = newNode(); \n  \n        temp = temp->arr[val]; \n    } \n  \n    // Store value at leaf node \n    temp->value = pre_xor; \n} \n  \n// Finds the maximum XOR ending with last number in \n// prefix XOR 'pre_xor' and returns the XOR of this maximum \n// with pre_xor which is maximum XOR ending with last element \n// of pre_xor. \nint query(TrieNode *root, int pre_xor) \n{ \n    TrieNode *temp = root; \n    for (int i=INT_SIZE-1; i>=0; i--) \n    { \n        // Find current bit in given prefix \n        bool val = pre_xor & (1<<i); \n  \n        // Traverse Trie, first look for a \n        // prefix that has opposite bit \n        if (temp->arr[1-val]!=NULL) \n            temp = temp->arr[1-val]; \n  \n        // If there is no prefix with opposite \n        // bit, then look for same bit. \n        else if (temp->arr[val] != NULL) \n            temp = temp->arr[val]; \n    } \n    return pre_xor^(temp->value); \n} \n  \n// Returns maximum XOR value of a subarray in arr[0..n-1] \nint maxSubarrayXOR(int N, int arr[]) \n{ \n    // Create a Trie and insert 0 into it \n    TrieNode *root = newNode(); \n    insert(root, 0); \n  \n    // Initialize answer and xor of current prefix \n    int result = INT_MIN, pre_xor =0; \n  \n    // Traverse all input array element \n    for (int i=0; i<N; i++) \n    { \n        // update current prefix xor and insert it into Trie \n        pre_xor = pre_xor^arr[i]; \n        insert(root, pre_xor); \n  \n        // Query for current prefix xor in Trie and update \n        // result if required \n        result = max(result, query(root, pre_xor)); \n    } \n    return result; \n} \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution \n{\n    // Assumed int size\n    static final int INT_SIZE = 32;\n     \n    // A Trie Node\n    static class TrieNode\n    {\n        int value;  // Only used in leaf nodes\n        TrieNode[] arr =  new TrieNode[2];\n        public TrieNode() {\n            value = 0;\n            arr[0] = null;\n            arr[1] = null;\n        }\n    }\n    static TrieNode root;\n    \n    // Inserts pre_xor to trie with given root\n    static void insert(int pre_xor)\n    {\n        TrieNode temp = root;\n     \n        // Start from the msb, insert all bits of\n        // pre_xor into Trie\n        for (int i=INT_SIZE-1; i>=0; i--)\n        {\n            // Find current bit in given prefix\n            int val = (pre_xor & (1<<i)) >=1 ? 1 : 0;\n     \n            // Create a new node if needed\n            if (temp.arr[val] == null)\n                temp.arr[val] = new TrieNode();\n     \n            temp = temp.arr[val];\n        }\n     \n        // Store value at leaf node\n        temp.value = pre_xor;\n    }\n     \n    // Finds the maximum XOR ending with last number in\n    // prefix XOR 'pre_xor' and returns the XOR of this \n    // maximum with pre_xor which is maximum XOR ending \n    // with last element of pre_xor.\n    static int query(int pre_xor)\n    {\n        TrieNode temp = root;\n        for (int i=INT_SIZE-1; i>=0; i--)\n        {\n            // Find current bit in given prefix\n            int val = (pre_xor & (1<<i)) >= 1 ? 1 : 0;\n     \n            // Traverse Trie, first look for a\n            // prefix that has opposite bit\n            if (temp.arr[1-val] != null)\n                temp = temp.arr[1-val];\n     \n            // If there is no prefix with opposite\n            // bit, then look for same bit.\n            else if (temp.arr[val] != null)\n                temp = temp.arr[val];\n        }\n        return pre_xor^(temp.value);\n    }\n     \n    // Returns maximum XOR value of a subarray in \n        // arr[0..n-1]\n    static int maxSubarrayXOR(int n,int arr[])\n    {\n        // Create a Trie and insert 0 into it\n        root = new TrieNode();\n        insert(0);\n     \n        // Initialize answer and xor of current prefix\n        int result = Integer.MIN_VALUE;\n        int pre_xor = 0;\n     \n        // Traverse all input array element\n        for (int i=0; i<n; i++)\n        {\n            // update current prefix xor and insert it \n                // into Trie\n            pre_xor = pre_xor^arr[i];\n            insert(pre_xor);\n     \n            // Query for current prefix xor in Trie and \n            // update result if required\n            result = Math.max(result, query(pre_xor));\n\n        }\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\"\"\"structure of Trie Node\"\"\"\n\n\nclass Node:\n\n    def __init__(self):\n\n        self.data = 0\n        self.left = None  # left node for 0\n        self.right = None  # right node for 1\n\n\n\"\"\" class for implementing Trie \"\"\"\n\n\nclass Solution:\n\n    def __init__(self):\n\n        self.root = Node()\n\n    \"\"\"insert pre_xor to trie with given root\"\"\"\n\n    def insert(self, pre_xor):\n\n        self.temp = self.root\n        \"\"\"start from msb, insert all bits of pre_xor\n        into the Trie\"\"\"\n        for i in range(31, -1, -1):\n            \"\"\"Find current bit in prefix sum\"\"\"\n            val = pre_xor & (1 << i)\n\n            if val:\n                \"\"\"create new node if needed\"\"\"\n                if not self.temp.right:\n                    self.temp.right = Node()\n                self.temp = self.temp.right\n\n            if not val:\n                \"\"\"create new node if needed\"\"\"\n                if not self.temp.left:\n                    self.temp.left = Node()\n                self.temp = self.temp.left\n        \"\"\"store value at leaf node\"\"\"\n        self.temp.data = pre_xor\n\n    \"\"\"find the maximum xor ending with last number\n        in prefix XOR and return the XOR of this\"\"\"\n\n    def query(self, xor):\n\n        self.temp = self.root\n\n        for i in range(31, -1, -1):\n            \"\"\"find the current bit in prefix xor\"\"\"\n            val = xor & (1 << i)\n            \"\"\"Traverse the trie, first look for opposite bit\n                and then look for same bit\"\"\"\n            if val:\n                if self.temp.left:\n                    self.temp = self.temp.left\n                elif self.temp.right:\n                    self.temp = self.temp.right\n            else:\n                if self.temp.right:\n                    self.temp = self.temp.right\n                elif self.temp.left:\n                    self.temp = self.temp.left\n\n        return xor ^ self.temp.data\n\n    \"\"\"returns maximum XOR value of subarray\"\"\"\n\n    def maxSubarrayXOR(self, n, Arr):\n        \"\"\"insert 0 in the trie\"\"\"\n        self.insert(0)\n        \"\"\"initialize result and pre_xor\"\"\"\n        result = 0\n        pre_xor = 0\n        \"\"\"traverse all input array element\"\"\"\n        for i in range(n):\n            \"\"\"update current prefix xor and insert it into Trie\"\"\"\n            pre_xor = pre_xor ^ Arr[i]\n            self.insert(pre_xor)\n            \"\"\"Query for current prefix xor in Trie and update result\"\"\"\n            result = max(result, self.query(pre_xor))\n\n        return result\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution   \n{\n    // A Trie Node \n    class TrieNode \n    { \n        public int value;  // Only used in leaf nodes \n        public TrieNode[] arr; \n        \n        public TrieNode() \n        {\n            value = 0;\n            arr = new TrieNode[2];\n        }\n    }\n\n    // Inserts pre_xor to trie with given root \n    void insert(TrieNode root, int pre_xor) \n    { \n        TrieNode temp = root; \n\n        // Start from the msb, insert all bits of \n        // pre_xor into Trie \n        for (int i = 31; i >= 0; i--) \n        { \n            // Find current bit in given prefix \n            int val = (pre_xor & (1 << i)) != 0 ? 1 : 0; \n\n            // Create a new node if needed \n            if (temp.arr[val] == null) \n                temp.arr[val] = new TrieNode(); \n\n            temp = temp.arr[val]; \n        } \n\n        // Store value at leaf node \n        temp.value = pre_xor; \n    } \n\n    // Finds the maximum XOR ending with last number in \n    // prefix XOR 'pre_xor' and returns the XOR of this maximum \n    // with pre_xor which is maximum XOR ending with last element \n    // of pre_xor. \n    int query(TrieNode root, int pre_xor) \n    { \n        TrieNode temp = root; \n        for (int i = 31; i >= 0; i--) \n        { \n            // Find current bit in given prefix \n            int val = (pre_xor & (1 << i)) != 0 ? 1 : 0; \n\n            // Traverse Trie, first look for a \n            // prefix that has opposite bit \n            if (temp.arr[1 - val] != null) \n                temp = temp.arr[1 - val]; \n\n            // If there is no prefix with opposite \n            // bit, then look for same bit. \n            else if (temp.arr[val] != null) \n                temp = temp.arr[val]; \n        } \n        return pre_xor ^ temp.value; \n    } \n\n    // Returns maximum XOR value of a subarray in arr[0..n-1] \n    public int maxSubarrayXOR(int N, int[] arr) \n    { \n        // Create a Trie and insert 0 into it \n        TrieNode root = new TrieNode(); \n        insert(root, 0); \n\n        // Initialize answer and xor of current prefix \n        int result = int.MinValue, pre_xor = 0; \n\n        // Traverse all input array element \n        for (int i = 0; i < N; i++) \n        { \n            // update current prefix xor and insert it into Trie \n            pre_xor = pre_xor ^ arr[i]; \n            insert(root, pre_xor); \n\n            // Query for current prefix xor in Trie and update \n            // result if required \n            result = Math.Max(result, query(root, pre_xor)); \n        } \n        return result; \n    } \n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    maxSubarrayXOR(arr,n){\n        class TrieNode {\n            constructor() {\n                this.value = 0;\n                this.arr = [null, null];\n            }\n        }\n\n        const INT_SIZE = 32;\n\n        const newNode = () => {\n            return new TrieNode();\n        }\n\n        const insert = (root, pre_xor) => {\n            let temp = root;\n\n            for (let i = INT_SIZE - 1; i >= 0; i--) {\n                let val = ((pre_xor >>> i) & 1) === 1 ? 1 : 0;\n\n                if (temp.arr[val] === null) {\n                    temp.arr[val] = newNode();\n                }\n\n                temp = temp.arr[val];\n            }\n\n            temp.value = pre_xor;\n        }\n\n        const query = (root, pre_xor) => {\n            let temp = root;\n\n            for (let i = INT_SIZE - 1; i >= 0; i--) {\n                let val = ((pre_xor >>> i) & 1) === 1 ? 1 : 0;\n\n                if (temp.arr[1 - val] !== null) {\n                    temp = temp.arr[1 - val];\n                } else if (temp.arr[val] !== null) {\n                    temp = temp.arr[val];\n                }\n            }\n\n            return pre_xor ^ (temp.value);\n        }\n\n        let root = newNode();\n        insert(root, 0);\n\n        let result = Number.MIN_SAFE_INTEGER;\n        let pre_xor = 0;\n\n        for (let i = 0; i < n; i++) {\n            pre_xor ^= arr[i];\n            insert(root, pre_xor);\n            result = Math.max(result, query(root, pre_xor));\n        }\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}