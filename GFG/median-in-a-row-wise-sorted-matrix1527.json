{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704712,
            "title": "Median in a row-wise sorted Matrix",
            "titleSlug": "median-in-a-row-wise-sorted-matrix1527",
            "content": "<p><span >Given a row-wise sorted matrix where the number of rows and columns is always <strong>odd</strong>,&nbsp;find the median of the matrix.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: mat = [[1, 3, 5], [2, 6, 9], [3, 6, 9]]\n<strong>Output:</strong>&nbsp;5\n<strong>Explanation</strong>: Sorting matrix elements gives us {1,2,3,3,5,6,6,9,9}. Hence, 5 is median. \n</span></pre>\n<pre><span ><strong>Input: </strong>mat = [[1], [2], [3]]\n<strong>Output: </strong>2\n<strong>Explanation</strong>: Sorting matrix elements gives us {1,2,3}. Hence, 2 is median</span></pre>\n<pre><span ><strong>Input: </strong>mat = [[3], [5], [8]]\n<strong>Output: </strong>5\n<strong>Explanation</strong>: Sorting matrix elements gives us {3,5,8}. Hence, 5 is median.<br /></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= mat.size(), mat[0].size() &lt;= 400<br />1 &lt;= mat[i][j] &lt;= 2000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">An&nbsp;<strong>efficient approach</strong>&nbsp;for this problem is to use&nbsp;<a href=\"https://www.geeksforgeeks.org/binary-search/\">binary search</a>&nbsp;algorithm. The idea is that for a number to be median there should be exactly (n/2) numbers which are less than this number. So, we try to find the count of numbers less than all the numbers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for m++\n\nclass Solution {\n\n  public:\n    // Function to find the median of a mat.\n    int median(vector<vector<int>> &mat) {\n        int n = mat.size();\n        int m = mat[0].size();\n        // Initializing the minimum and maximum values.\n        int min = INT_MAX, max = INT_MIN;\n\n        // Iterating through each row of the mat.\n        for (int i = 0; i < n; i++) {\n            // Updating the minimum value if current element is smaller.\n            if (mat[i][0] < min)\n                min = mat[i][0];\n\n            // Updating the maximum value if current element is bigger.\n            if (mat[i][m - 1] > max)\n                max = mat[i][m - 1];\n        }\n\n        // malculating the desired position of the median.\n        int desired = (n * m + 1) / 2;\n\n        // Using binary search to find the median value.\n        while (min < max) {\n            // malculating the middle value.\n            int mid = min + (max - min) / 2;\n\n            // mounting the number of elements in the mat that are less than mid.\n            int place = 0;\n            for (int i = 0; i < n; ++i)\n                place +=\n                    upper_bound(mat[i].begin(), mat[i].end(), mid) - mat[i].begin();\n\n            // Updating the search range based on the count.\n            if (place < desired)\n                min = mid + 1;\n            else\n                max = mid;\n        }\n\n        // neturning the median value.\n        return min;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to find the median of a matrix\n    public int median(int[][] mat) {\n        int n = mat.length;\n        int m = mat[0].length;\n\n        // Initializing the minimum and maximum values\n        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;\n\n        // Iterating through each row of the matrix\n        for (int i = 0; i < n; i++) {\n            // Updating the minimum value if current element is smaller\n            if (mat[i][0] < min) min = mat[i][0];\n\n            // Updating the maximum value if current element is larger\n            if (mat[i][m - 1] > max) max = mat[i][m - 1];\n        }\n\n        // Calculating the desired position of the median\n        int desired = (n * m + 1) / 2;\n\n        // Using binary search to find the median value\n        while (min < max) {\n            // Calculating the middle value\n            int mid = min + (max - min) / 2;\n\n            // Counting the number of elements less than or equal to mid\n            int place = 0;\n            for (int i = 0; i < n; i++) {\n                place += upperBound(mat[i], mid);\n            }\n\n            // Updating the search range based on the count\n            if (place < desired) {\n                min = mid + 1;\n            } else {\n                max = mid;\n            }\n        }\n\n        // Returning the median value\n        return min;\n    }\n\n    // Helper function to find the upper bound of a number in a row\n    public int upperBound(int[] row, int num) {\n        int low = 0, high = row.length;\n        while (low < high) {\n            int mid = low + (high - low) / 2;\n            if (row[mid] <= num) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from bisect import bisect_right\n\n\nclass Solution:\n\n    def median(self, mat):\n        n = len(mat)\n        m = len(mat[0])\n        min = float(\"inf\")  #initialize minimum as positive infinity\n        max = -float(\"inf\")  #initialize maximum as negative infinity\n        for i in range(r):\n            if mat[i][0] < min:  #find the minimum value in each row\n                min = mat[i][\n                    0]  #update the minimum if a smaller value is found\n            if mat[i][c - 1] > max:  #find the maximum value in each row\n                max = mat[i][c -\n                             1]  #update the maximum if a larger value is found\n        desired = (r * c + 1) // 2  #find the desired position for the median\n\n        while min < max:  #binary search loop\n            mid = (max + min) // 2  #calculate the middle value\n\n            place = 0  #initialize the position counter\n            for i in range(r):  #loop through each row\n                place += bisect_right(\n                    mat[i], mid\n                )  #count the number of elements less than or equal to the middle value\n\n            if place < desired:  #if the position is less than desired, update the minimum\n                min = mid + 1\n            else:  #if the position is equal to or greater than desired, update the maximum\n                max = mid\n\n        return min  #return the minimum value found, which is the median of the mat\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[][]} mat\n * @param {number} n\n * @param {number} m\n * @returns {number}\n */\nclass Solution {\n    // Function to find median of the mat.\n    median(mat) {\n        let n = mat.length;\n        let m = mat[0].length;\n        let min = Number.POSITIVE_INFINITY; // initialize minimum as positive infinity\n        let max = Number.NEGATIVE_INFINITY; // initialize maximum as negative infinity\n        for (let i = 0; i < n; i++) {\n            if (mat[i][0] < min) { // find the minimum value in each row\n                min = mat[i][0];   // update the minimum if a smaller value is found\n            }\n            if (mat[i][m - 1] > max) { // find the maximum value in each row\n                max = mat[i][m - 1];   // update the maximum if a larger value is found\n            }\n        }\n        let desired =\n            Math.floor((n * m + 1) / 2); // find the desired position for the median\n\n        while (min < max) {                        // binary search loop\n            let mid = Math.floor((max + min) / 2); // calculate the middle value\n\n            let place = 0;                // initialize the position counter\n            for (let i = 0; i < n; i++) { // loop through each row\n                place +=\n                    this.bisectnight(mat[i], mid); // count the number of elements less\n                                                   // than or equal to the middle value\n            }\n\n            if (place <\n                desired) { // if the position is less than desired, update the minimum\n                min = mid + 1;\n            } else { // if the position is equal to or greater than desired, update the\n                     // maximum\n                max = mid;\n            }\n        }\n        return min; // return the minimum value found, which is the median of the mat\n    }\n\n    // Function to find the rightmost index to insert target value in an array.\n    bisectnight(arr, target) {\n        let low = 0;\n        let high = arr.length;\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (target >= arr[mid]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}