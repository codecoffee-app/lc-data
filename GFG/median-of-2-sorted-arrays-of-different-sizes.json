{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702044,
            "title": "Median of 2 Sorted Arrays of Different Sizes",
            "titleSlug": "median-of-2-sorted-arrays-of-different-sizes",
            "content": "<p><span >Given two sorted arrays <strong>a[]</strong> and <strong>b[]</strong>, find and return the <strong>median </strong>of the combined array after merging them into a single sorted array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>a[] = [-5, 3, 6, 12, 15], b[] = [-12, -10, -6, -3, 4, 10]\n<strong>Output: </strong>3<strong>\nExplanation: </strong>The merged array is [-12, -10, -6, -5, -3, 3, 4, 6, 10, 12, 15]. So the median of the merged array is 3.</span></pre>\n<pre><strong style=\"font-family: 'andale mono', monospace; font-size: 14pt;\">Input: </strong><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\">a[] = [2, 3, 5, 8], b[] = [10, 12, 14, 16, 18, 20]<br /></span><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Output: </strong>11<br /><strong>Explanation: </strong>The merged array is [2, 3, 5, 8, 10, 12, 14, 16, 18, 20]. So the median of the merged array is (10 + 12) / 2 = 11.</span></pre>\n<pre><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><span ><strong>Input: </strong>a[] = [], b[] = [2, 4, 5, 6]\n<strong>Output: </strong>4.5<br /><strong>Explanation: </strong>The merged array is [2, 4, 5, 6]. So the median of the merged array is (4 + 5) / 2 = 4.5.<br /></span></span></pre>\n<p><span ><strong>Constraints:&nbsp;</strong><br />0 &le; a.size(), b.size() &le; 10<sup>6<br /></sup>1 &le; a[i], b[i] &le; 10<sup>9<br /></sup></span><span style=\"font-size: 18.6667px;\">a.size() + b.size() &gt; 0</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted arrays `a[]` and `b[]`, find the median of the combined array after merging them into a single sorted array.",
                "constraints": [
                    "0 <= a.size(), b.size() <= 10^6",
                    "1 <= a[i], b[i] <= 10^9",
                    "a.size() + b.size() > 0"
                ],
                "testcases": [
                    {
                        "input": "a[] = [-5, 3, 6, 12, 15], b[] = [-12, -10, -6, -3, 4, 10]",
                        "output": "3",
                        "explanation": "The merged array is [-12, -10, -6, -5, -3, 3, 4, 6, 10, 12, 15]. The median of this array is 3."
                    },
                    {
                        "input": "a[] = [2, 3, 5, 8], b[] = [10, 12, 14, 16, 18, 20]",
                        "output": "11",
                        "explanation": "The merged array is [2, 3, 5, 8, 10, 12, 14, 16, 18, 20]. The median of this array is (10 + 12) / 2 = 11."
                    },
                    {
                        "input": "a[] = [], b[] = [2, 4, 5, 6]",
                        "output": "4.5",
                        "explanation": "The merged array is [2, 4, 5, 6]. The median of this array is (4 + 5) / 2 = 4.5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >We need to find the median of the two sorted arrays of different sizes so we keep two variables to point to the arrays and one used to count the no of elements read. Use Merge based approach to keep track of last element read till you reach the median.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "samsung",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    double medianOf2(vector<int>& a, vector<int>& b) {\n        int n = a.size(), m = b.size();\n\n        // If a[] has more elements, then call medianOf2\n        // with reversed parameters\n        if (n > m)\n            return medianOf2(b, a);\n\n        int lo = 0, hi = n;\n        while (lo <= hi) {\n            int mid1 = (lo + hi) / 2;\n            int mid2 = (n + m + 1) / 2 - mid1;\n\n            // Find elements to the left and right of partition in a[]\n            int l1 = (mid1 == 0 ? INT_MIN : a[mid1 - 1]);\n            int r1 = (mid1 == n ? INT_MAX : a[mid1]);\n\n            // Find elements to the left and right of partition in b[]\n            int l2 = (mid2 == 0 ? INT_MIN : b[mid2 - 1]);\n            int r2 = (mid2 == m ? INT_MAX : b[mid2]);\n\n            // If it is a valid partition\n            if (l1 <= r2 && l2 <= r1) {\n\n                // If the total elements are even, then median is\n                // the average of two middle elements\n                if ((n + m) % 2 == 0)\n                    return (max(l1, l2) + min(r1, r2)) / 2.0;\n\n                // If the total elements are odd, then median is\n                // the middle element\n                else\n                    return max(l1, l2);\n            }\n\n            // Check if we need to take lesser elements from a[]\n            if (l1 > r2)\n                hi = mid1 - 1;\n\n            // Check if we need to take more elements from a[]\n            else\n                lo = mid1 + 1;\n        }\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public double medianOf2(int a[], int b[]) {\n        int n = a.length, m = b.length;\n\n        // If a[] has more elements, then call medianOf2 with reversed parameters\n        if (n > m) return medianOf2(b, a);\n\n        int lo = 0, hi = n;\n        while (lo <= hi) {\n            int mid1 = (lo + hi) / 2;\n            int mid2 = (n + m + 1) / 2 - mid1;\n\n            // Find elements to the left and right of partition in a[]\n            int l1 = (mid1 == 0) ? Integer.MIN_VALUE : a[mid1 - 1];\n            int r1 = (mid1 == n) ? Integer.MAX_VALUE : a[mid1];\n\n            // Find elements to the left and right of partition in b[]\n            int l2 = (mid2 == 0) ? Integer.MIN_VALUE : b[mid2 - 1];\n            int r2 = (mid2 == m) ? Integer.MAX_VALUE : b[mid2];\n\n            // If it is a valid partition\n            if (l1 <= r2 && l2 <= r1) {\n\n                // If the total elements are even, then median is\n                // the average of two middle elements\n                if ((n + m) % 2 == 0)\n                    return (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;\n\n                // If the total elements are odd, then median is\n                // the middle element\n                else\n                    return Math.max(l1, l2);\n            }\n\n            // Check if we need to take fewer elements from a[]\n            if (l1 > r2) hi = mid1 - 1;\n\n            // Check if we need to take more elements from a[]\n            else\n                lo = mid1 + 1;\n        }\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def medianOf2(self, a, b):\n        n = len(a)\n        m = len(b)\n\n        # If a[] has more elements, then call medianOf2\n        # with reversed parameters\n        if n > m:\n            return self.medianOf2(b, a)\n\n        lo = 0\n        hi = n\n        while lo <= hi:\n            mid1 = (lo + hi) // 2\n            mid2 = (n + m + 1) // 2 - mid1\n\n            # Find elements to the left and right of partition in a[]\n            l1 = (mid1 == 0) and float('-inf') or a[mid1 - 1]\n            r1 = (mid1 == n) and float('inf') or a[mid1]\n\n            # Find elements to the left and right of partition in b[]\n            l2 = (mid2 == 0) and float('-inf') or b[mid2 - 1]\n            r2 = (mid2 == m) and float('inf') or b[mid2]\n\n            # If it is a valid partition\n            if l1 <= r2 and l2 <= r1:\n\n                # If the total elements are even, then median is\n                # the average of two middle elements\n                if (n + m) % 2 == 0:\n                    return (max(l1, l2) + min(r1, r2)) / 2.0\n\n                # If the total elements are odd, then median is\n                # the middle element\n                else:\n                    return max(l1, l2)\n\n            # Check if we need to take lesser elements from a[]\n            if l1 > r2:\n                hi = mid1 - 1\n\n            # Check if we need to take more elements from a[]\n            else:\n                lo = mid1 + 1\n        return 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    medianOf2(a, b) {\n        let n = a.length, m = b.length;\n\n        // If a[] has more elements, then call medianOf2\n        // with reversed parameters\n        if (n > m) return this.medianOf2(b, a);\n\n        let lo = 0, hi = n;\n        while (lo <= hi) {\n            let mid1 = Math.floor((lo + hi) / 2);\n            let mid2 = Math.floor((n + m + 1) / 2) - mid1;\n\n            // Find elements to the left and right of partition in a[]\n            let l1 = (mid1 === 0) ? -Infinity : a[mid1 - 1];\n            let r1 = (mid1 === n) ? Infinity : a[mid1];\n\n            // Find elements to the left and right of partition in b[]\n            let l2 = (mid2 === 0) ? -Infinity : b[mid2 - 1];\n            let r2 = (mid2 === m) ? Infinity : b[mid2];\n\n            // If it is a valid partition\n            if (l1 <= r2 && l2 <= r1) {\n                // If the total elements are even, then median is\n                // the average of two middle elements\n                if ((n + m) % 2 === 0)\n                    return (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;\n\n                // If the total elements are odd, then median is\n                // the middle element\n                else\n                    return Math.max(l1, l2);\n            }\n\n            // Check if we need to take lesser elements from a[]\n            if (l1 > r2) hi = mid1 - 1;\n\n            // Check if we need to take more elements from a[]\n            else\n                lo = mid1 + 1;\n        }\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}