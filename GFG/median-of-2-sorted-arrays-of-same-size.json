{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 884308,
            "title": "Median of 2 Sorted Arrays of Same Size",
            "titleSlug": "median-of-2-sorted-arrays-of-same-size",
            "content": "<p><span >Given two sorted arrays <strong>a[]</strong>&nbsp;and&nbsp;<strong>b[]&nbsp;</strong></span><span style=\"font-size: 18.6667px;\">of equal size</span><span >, find and return the&nbsp;</span><strong >median&nbsp;</strong><span >of the combined array after merging them into a single sorted array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>a[] = [-5, 3, 6, 12, 15], b[] = [-12, -10, -6, -3, 4]\n<strong>Output: </strong>0<strong>\nExplanation: </strong>The merged array is [-12, -10, -6, -5, -3, 3, 4, 6, 12, 15]. So the median of the merged array is (-3 + 3) / 2 = 0.</span></pre>\n<pre><strong style=\"font-family: 'andale mono', monospace; font-size: 14pt;\">Input: </strong><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\">a[] = [2, 3, 5, 7], b[] = [10, 12, 14, 16]<br /></span><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Output: </strong>8.5<br /><strong>Explanation: </strong>The merged array is [2, 3, 5, 7, 10, 12, 14, 16]. So the median of the merged array is (7 + 10) / 2 = 8.5.</span></pre>\n<pre><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Input: </strong>a[] = [-5], b[] = [-6]\n<strong>Output: </strong>-5.5<br /><strong>Explanation: </strong>The merged array is [-6, -5]. So the median of the merged array is (-6 + -5) / 2 = -5.5.<br /></span></pre>\n<p><span ><strong>Constraints:&nbsp;</strong><br />1 &le; a.size(), b.size() &le; 10<sup>6<br /></sup><span style=\"font-size: 18.6667px;\">-10</span><sup>6</sup>&nbsp;&le; a[i], b[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "samsung",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    double medianOf2(vector<int>& a, vector<int>& b) {\n        int n = a.size();\n\n        // We can take [0...n] number of elements from a[]\n        int low = 0, high = n;\n\n        while (low <= high) {\n\n            // Take mid1 elements from a[]\n            int mid1 = (low + high) / 2;\n\n            // Take mid2 elements from b[]\n            int mid2 = n - mid1;\n\n            // Find elements to the left and right of partition in a[]\n            int l1 = (mid1 == 0 ? INT_MIN : a[mid1 - 1]);\n            int r1 = (mid1 == n ? INT_MAX : a[mid1]);\n\n            // Find elements to the left and right of partition in b[]\n            int l2 = (mid2 == 0 ? INT_MIN : b[mid2 - 1]);\n            int r2 = (mid2 == n ? INT_MAX : b[mid2]);\n\n            // If it is a valid partition\n            if (l1 <= r2 && l2 <= r1)\n                return (max(l1, l2) + min(r1, r2)) / 2.0;\n\n            // If we need to take lesser elements from a[]\n            if (l1 > r2)\n                high = mid1 - 1;\n            // If we need to take more elements from a[]\n            else\n                low = mid1 + 1;\n        }\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public double medianOf2(int a[], int b[]) {\n        int n = a.length;\n\n        // We can take [0...n] number of elements from a[]\n        int low = 0, high = n;\n\n        while (low <= high) {\n            // Take mid1 elements from a[]\n            int mid1 = (low + high) / 2;\n\n            // Take mid2 elements from b[]\n            int mid2 = n - mid1;\n\n            // Find elements to the left and right of partition in a[]\n            int l1 = (mid1 == 0 ? Integer.MIN_VALUE : a[mid1 - 1]);\n            int r1 = (mid1 == n ? Integer.MAX_VALUE : a[mid1]);\n\n            // Find elements to the left and right of partition in b[]\n            int l2 = (mid2 == 0 ? Integer.MIN_VALUE : b[mid2 - 1]);\n            int r2 = (mid2 == n ? Integer.MAX_VALUE : b[mid2]);\n\n            // If it is a valid partition\n            if (l1 <= r2 && l2 <= r1)\n                return (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;\n\n            // If we need to take fewer elements from a[]\n            if (l1 > r2) high = mid1 - 1;\n\n            // If we need to take more elements from a[]\n            else\n                low = mid1 + 1;\n        }\n\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def medianOf2(self, a, b):\n        n = len(a)\n\n        # We can take [0...n] number of elements from a[]\n        low, high = 0, n\n\n        while low <= high:\n            # Take mid1 elements from a[]\n            mid1 = (low + high) // 2\n\n            # Take mid2 elements from b[]\n            mid2 = n - mid1\n\n            # Find elements to the left and right of partition in a[]\n            l1 = float('-inf') if mid1 == 0 else a[mid1 - 1]\n            r1 = float('inf') if mid1 == n else a[mid1]\n\n            # Find elements to the left and right of partition in b[]\n            l2 = float('-inf') if mid2 == 0 else b[mid2 - 1]\n            r2 = float('inf') if mid2 == n else b[mid2]\n\n            # If it is a valid partition\n            if l1 <= r2 and l2 <= r1:\n                return (max(l1, l2) + min(r1, r2)) / 2.0\n\n            # If we need to take fewer elements from a[]\n            if l1 > r2:\n                high = mid1 - 1\n            # If we need to take more elements from a[]\n            else:\n                low = mid1 + 1\n\n        return 0\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    medianOf2(a, b) {\n        const n = a.length;\n        let low = 0, high = n;\n\n        while (low <= high) {\n            // Take mid1 elements from a[]\n            const mid1 = Math.floor((low + high) / 2);\n\n            // Take mid2 elements from b[]\n            const mid2 = n - mid1;\n\n            // Find elements to the left and right of partition in a[]\n            const l1 = (mid1 === 0) ? -Infinity : a[mid1 - 1];\n            const r1 = (mid1 === n) ? Infinity : a[mid1];\n\n            // Find elements to the left and right of partition in b[]\n            const l2 = (mid2 === 0) ? -Infinity : b[mid2 - 1];\n            const r2 = (mid2 === n) ? Infinity : b[mid2];\n\n            // If it is a valid partition\n            if (l1 <= r2 && l2 <= r1) {\n                return (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;\n            }\n\n            // If we need to take fewer elements from a[]\n            if (l1 > r2) {\n                high = mid1 - 1;\n            }\n            // If we need to take more elements from a[]\n            else {\n                low = mid1 + 1;\n            }\n        }\n\n        // Return 0 if no median found (this should not happen with valid input)\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}