{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700628,
            "title": "Median of BST",
            "titleSlug": "median-of-bst",
            "content": "<p><span >Given a Binary Search Tree, find the Median of its Node values.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>root = [6, 3, 8, 1, 4, 7, 9]\n&nbsp; &nbsp; &nbsp; &nbsp;6\n&nbsp; &nbsp; &nbsp;/&nbsp; &nbsp;\\\n&nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; 8&nbsp; &nbsp;\n&nbsp;/&nbsp; \\&nbsp; &nbsp; /&nbsp; \\\n1&nbsp; &nbsp; 4&nbsp; 7&nbsp;   9<strong>\nOutput: </strong>6\n<strong>Explanation: </strong>Inorder of Given BST will be: 1, 3, 4, 6, 7, 8, 9. So, here median will 6.\n</span></pre>\n<pre><span ><strong>Input: </strong>root = [6, 3, 8, 1, 4, 7, N]\n&nbsp; &nbsp; &nbsp; &nbsp;6\n&nbsp; &nbsp; &nbsp;/&nbsp; &nbsp;\\\n&nbsp; &nbsp;3&nbsp; &nbsp; &nbsp; 8&nbsp; &nbsp;\n&nbsp;/&nbsp; &nbsp;\\&nbsp; &nbsp; /&nbsp; &nbsp;\n1&nbsp; &nbsp; 4&nbsp;  7&nbsp; &nbsp;<strong>\nOutput: </strong>5<strong>\nExplanation:</strong>Inorder of Given BST will be: 1, 3, 4, 6, 7, 8. So, here median will (4 + 6)/2 = 10/2 = 5.<br /></span></pre>\n<pre><span ><strong>Input: </strong>root = [18, 16, 20, 7]<strong>\nOutput: </strong>17</span></pre>\n<p><span ><strong>Constraints:</strong><br />1&lt;=n&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST), find the median of its node values.",
                "constraints": [
                    "1 <= n <= 10^5, where n is the number of nodes in the BST."
                ],
                "testcases": [
                    {
                        "input": "[6, 3, 8, 1, 4, 7, 9]",
                        "output": "6",
                        "explanation": "The inorder traversal of the BST is 1, 3, 4, 6, 7, 8, 9. Since there are 7 nodes (an odd number), the median is the middle element, which is 6."
                    },
                    {
                        "input": "[6, 3, 8, 1, 4, 7, null]",
                        "output": "5",
                        "explanation": "The inorder traversal of the BST is 1, 3, 4, 6, 7, 8. Since there are 6 nodes (an even number), the median is the average of the two middle elements (4 and 6), which is (4 + 6) / 2 = 5."
                    },
                    {
                        "input": "[18, 16, 20, 7]",
                        "output": "17",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Inorder traverse the tree while maintaining the serial number, then return the middle value(s) based on whether the total number of nodes is odd or even.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// c++\n\nint countNodes(Node* n)\n{\n    // this function returns number of nodes in tree\n    if(!n) return 0;\n    return 1 + countNodes(n->left) + countNodes(n->right);\n}\n\nint find(Node* n, int serialNo, int target, int& value)\n{\n    // this function keeps track of serial number while doing\n    // inorder traveresal and finds the target node\n    \n    if(!n) return serialNo;\n    serialNo = find(n->left, serialNo, target, value);\n    \n    serialNo++;\n    // current value of serialNo variable is the rank of\n    // current Node\n    if(serialNo==target) value = n->data;\n    \n    serialNo = find(n->right, serialNo, target, value);\n    return serialNo;\n}\n\nfloat findMedian(struct Node* root)\n{\n    int n = countNodes(root);\n    \n    if(n%2)\n    {\n        // odd number of nodes in tree:\n        // 1+n/2 is the rank of mid node\n        \n        int mid = 0;\n        find( root, 0, 1+n/2, mid );\n        return mid;\n    }\n    else\n    {\n        // even number of nodes in tree:\n        // n/2 and 1+n/2 are the ranks of mid nodes\n        \n        int mid1 = 0, mid2 = 0;\n        find( root, 0, n/2, mid1 );\n        find( root, 0, 1+n/2, mid2 );\n        return ((float)(mid1+mid2))/2.0;\n    }\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Tree\n{\n    \n\npublic static int countNodes(Node n)\n{\n    // this function returns number of nodes in tree\n    if(n==null) return 0;\n    return 1 + countNodes(n.left) + countNodes(n.right);\n}\n\npublic static int find(Node n, int serialNo, int target, int value[])\n{\n    // this function keeps track of serial number while doing\n    // inorder traveresal and finds the target node\n    \n    if(n==null) return serialNo;\n    serialNo = find(n.left, serialNo, target, value);\n    \n    serialNo++;\n    // current value of serialNo variable is the rank of\n    // current Node\n    if(serialNo==target) value[0] = n.data;\n    \n    serialNo = find(n.right, serialNo, target, value);\n    return serialNo;\n}\n\npublic static float findMedian(Node root)\n{\n    int n = countNodes(root);\n    \n    if(n%2!=0)\n    {\n        // odd number of nodes in tree:\n        // 1+n/2 is the rank of mid node\n        \n        int mid[] = new int[1];\n        mid[0] = 0;\n        find( root, 0, 1+n/2, mid );\n        return (float)(mid[0]);\n    }\n    else\n    {\n        // even number of nodes in tree:\n        // n/2 and 1+n/2 are the ranks of mid nodes\n        \n        int mid1[] = new int[1];\n        int mid2[] = new int[1];\n        mid1[0] = 0;\n        mid2[0] = 0;\n        find( root, 0, n/2, mid1 );\n        find( root, 0, 1+n/2, mid2 );\n        if( (mid1[0]+mid2[0])%2 == 0)\n            return (float)(mid1[0]+mid2[0])/2;\n        else    \n            return ((float)(mid1[0]+mid2[0])/2);\n    }\n}\n\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to count the number of nodes in the binary tree\n    def countNodes(self, n):\n        # Base case: if node is None, return 0\n        if n is None:\n            return 0\n        # Counting the current node and recursively counting the nodes in the left and right subtrees\n        return 1 + self.countNodes(n.left) + self.countNodes(n.right)\n\n    # Function to find the target node and its value in the binary tree\n    def find(self, n, serialNo, target):\n        # Base case: if node is None, return the current serial number and 0 as value\n        if n is None:\n            return (serialNo, 0)\n\n        # Recursively finding the target node in the left subtree\n        serialNo, val = self.find(n.left, serialNo, target)\n\n        # Incrementing the serial number\n        serialNo += 1\n\n        # If the serial number exceeds the target, return the current serial number and value\n        if serialNo > target:\n            return (serialNo, val)\n\n        # If the serial number is equal to the target, return the current serial number and the node's value\n        if serialNo == target:\n            return (serialNo, n.data)\n\n        # Recursively finding the target node in the right subtree\n        return self.find(n.right, serialNo, target)\n\n    # Function to find the median of the binary tree\n    def findMedian(self, root):\n        # Counting the total number of nodes in the tree\n        n = self.countNodes(root)\n\n        # If the total number of nodes is odd, finding the value of the middle node\n        if n % 2 == 1:\n            return self.find(root, 0, 1 + n // 2)[1]\n\n        # If the total number of nodes is even, finding the values of the middle two nodes\n        else:\n            # Finding the values of the two middle nodes\n            median = self.find(root, 0, n // 2)[1] + self.find(\n                root, 0, 1 + n // 2)[1]\n            # Returning the median by dividing the sum by 2\n            if median % 2:\n                return median / 2\n            else:\n                return median // 2\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\n//User function Template for \n\nclass Solution {\n    countNodes(root) {\n        if (!root) {\n            return 0;\n        }\n        return 1 + this.countNodes(root.left) + this.countNodes(root.right);\n    }\n\n    find(root, serialNo, target, value) {\n        if (!root) {\n            return serialNo;\n        }\n        serialNo = this.find(root.left, serialNo, target, value);\n\n        serialNo++;\n        if (serialNo === target) {\n            value[0] = root.data;\n        }\n\n        serialNo = this.find(root.right, serialNo, target, value);\n        return serialNo;\n    }\n\n    findMedian(root) {\n        let values = [];\n\n        let n = this.countNodes(root);\n        if (n % 2) {\n            // odd number of nodes in tree\n            this.find(root, 0, Math.floor(1 + n / 2), values);\n            return values[0];\n        } else {\n            // even number of nodes in tree\n            let mid1 = [], mid2 = [];\n            this.find(root, 0, Math.floor(n / 2), mid1);\n            this.find(root, 0, Math.floor(1 + n / 2), mid2);\n            return (mid1[0] + mid2[0]) / 2.0;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}