{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714133,
            "title": "Median of the Subarrays",
            "titleSlug": "median-of-the-subarrays--170647",
            "content": "<p><span style=\"font-size:18px\">Given an array&nbsp;<strong>A[]</strong>&nbsp;of&nbsp;<strong>N</strong>&nbsp;integers and an integer <strong>M</strong>.<strong>&nbsp;</strong>The task is to count the number of subarrays which have median <strong>M</strong>.<br />\r\nMedian of an array is defined as below:</span></p>\r\n\r\n<p><span style=\"font-size:18px\">1. If N is odd, the median value is the number that is in the middle after sorting the array.<br />\r\n2. if N is even,&nbsp;the median value is the left of the two middle numbers after sorting the array.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 5, M = 2\r\nA[] = {2, 1, 3, 5, 4}\r\n<strong>Output:</strong> \r\n3\r\n<strong>Explanation: \r\n</strong>The subarrays which has median equal to M\r\nare [2], [2,1,3] and [2,1,3,5]\r\n</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 1, M = 1\r\nA[] = {1}\r\n<strong>Output: \r\n</strong>1\r\n<strong>Explanation: \r\n</strong>The subarrays which has median equal to M\r\nis [1].\r\n</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function<strong>&nbsp;countSubarray( )</strong>&nbsp;which takes the integer&nbsp;<strong>N</strong>&nbsp;, the array&nbsp;<strong>A[],</strong>&nbsp;and the integer&nbsp;<strong>M</strong>&nbsp;as input parameters and returns the number of subarays.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N&nbsp;&le;&nbsp;10<sup>5</sup><br />\r\n1 &le; A[]&nbsp;&le; 10<sup>5</sup><br />\r\n1 &le; M&nbsp;&le; N</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array A of N integers and an integer M, count the number of subarrays which have median M. The median of an array is defined as follows:\n\n1.  If N is odd, the median value is the number that is in the middle after sorting the array.\n2.  If N is even, the median value is the left of the two middle numbers after sorting the array.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= A[i] <= 10^5 for all i in A",
                    "1 <= M <= N"
                ],
                "testcases": [
                    {
                        "input": "N = 5, M = 2\nA[] = {2, 1, 3, 5, 4}",
                        "output": "3",
                        "explanation": "The subarrays with median equal to 2 are: [2], [2,1,3], and [2,1,3,5]."
                    },
                    {
                        "input": "N = 1, M = 1\nA[] = {1}",
                        "output": "1",
                        "explanation": "The subarray with median equal to 1 is: [1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">First Try to count the number of subarrays which have median greater than or equal to X.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "sprinklr"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to calculate the number of subarrays with sum less than M or M+1.\n    long long solve(int &n,vector<int> &a, int m){\n    int mp[2*n+1];\n    memset(mp,0,sizeof(mp));\n    long long cur=n,tot=0,ans=0;\n    mp[cur]++; // Initializing the current sum as n.\n    for(int i=0;i<n;i++){\n      int x=-1;\n      // Checking if current element is greater than or equal to m,\n      // if yes, then assigning 1 to x.\n      if(a[i]>=m)\n        x=1;\n      if(x==-1){\n        // If x is -1, then subtracting the count of subarrays with current sum (cur + x).\n        tot-=mp[cur+x];\n      }\n      else{\n        // If x is 1, then adding the count of subarrays with current sum (cur).\n        tot+=mp[cur];\n      }\n      // Updating the current sum by adding the value of x.\n      cur+=x;\n      // Adding the count of subarrays with sum less than m or m+1 to the answer.\n      ans+=tot;\n      // Incrementing the count of subarrays with current sum in the map.\n      mp[cur]++;\n    }\n    return ans;\n  }\n \n    // Function to calculate the count of subarrays with sum less than M.\n    long long countSubarray(int N,vector<int> A,int M) {\n        // Returning the difference between the count of subarrays with sum less than M and M+1.\n        return solve(N,A,M)-solve(N,A,M+1);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution \r\n{ \r\n    public long solve(int n, int []A, int m) {\r\n        int[] mp = new int[2*n+1];\r\n        Arrays.fill(mp, 0);\r\n        long cur = n, tot = 0, ans = 0;\r\n        mp[(int)cur]++;\r\n        for (int i = 0; i < n; i++) {\r\n            int x = -1;\r\n            if (A[i] >= m) {\r\n                x = 1;\r\n            }\r\n            if (x == -1) {\r\n                tot -= mp[(int)(cur+x)];\r\n            } else {\r\n                tot += mp[(int)cur];\r\n            }\r\n            cur += x;\r\n            ans += tot;\r\n            mp[(int)cur]++;\r\n        }\r\n        return ans;\r\n    }\r\n    long countSubarray(int N, int[] A, int M) \r\n    { \r\n        // code here\r\n        return solve(N, A, M) - solve(N, A, M+1);\r\n    }\r\n} ",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def countSubarray(self, N, A, M): \r\n        # Function to count the number of subarrays with a greater median than m\r\n        def greaterMedian(m):\r\n            tot = 0\r\n            ans = 0\r\n            pref = [0]*(2*N+1)\r\n            cur = N\r\n            pref[cur] += 1\r\n            for i in A:\r\n                x = -1\r\n                if i >= m:\r\n                    x = 1\r\n                if x == 1:\r\n                    tot += pref[cur]\r\n                else:\r\n                    tot -= pref[cur+x]\r\n                ans += tot\r\n                cur += x\r\n                pref[cur] += 1\r\n            return ans\r\n        # Return the difference between the number of subarrays with median greater than M and M+1\r\n        return greaterMedian(M) - greaterMedian(M+1)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} N\r\n * @param {number[]} A\r\n * @param {number} M\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to count the number of subarrays whose sum is divisible by the given number.\r\n    countSubarray(N, A, M) {\r\n         // Function to count the number of subarrays with a greater median than m\r\n        function greaterMedian(m){\r\n            let tot = 0;\r\n            let ans = 0;\r\n            let pref = new Array(2*N+1).fill(0);\r\n            let cur = N;\r\n            pref[cur] += 1;\r\n            for (let i of A){\r\n                let x = -1;\r\n                if (i >= m){\r\n                    x = 1;\r\n                }\r\n                if (x == 1){\r\n                    tot += pref[cur];\r\n                }\r\n                else {\r\n                    tot -= pref[cur+x];\r\n                }\r\n                ans += tot;\r\n                cur += x;\r\n                pref[cur] += 1;\r\n            }\r\n            return ans;\r\n        }\r\n        // Return the difference between the number of subarrays with median greater than M and M+1\r\n        return greaterMedian(M) - greaterMedian(M+1);\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    private long Solve(int N, List<int> A, int M)\n    {\n        int[] mp = new int[2 * N + 1];\n        Array.Fill(mp, 0);\n        long cur = N, tot = 0, ans = 0;\n        mp[cur]++;\n        for (int i = 0; i < N; i++)\n        {\n            int x = -1;\n            if (A[i] >= M)\n                x = 1;\n            if (x == -1)\n            {\n                tot -= mp[cur + x];\n            }\n            else\n            {\n                tot += mp[cur];\n            }\n            cur += x;\n            ans += tot;\n            mp[cur]++;\n        }\n        return ans;\n    }\n\n    public long countSubarray(int N, List<int> A, int M)\n    {\n        return Solve(N, A, M) - Solve(N, A, M + 1);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}