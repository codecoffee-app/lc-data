{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702704,
            "title": "Mega Sale",
            "titleSlug": "mega-sale1431",
            "content": "<p><span style=\"font-size: 18px;\">Mr. Geek is a greedy seller. He has a stock of some laptops comprising both useful and useless laptops. Now, he wants to organize a sale to clear his stock of useless laptops. The prices of laptops are <strong>arr</strong><sub><strong>i</strong> </sub>each consisting of positive and negative integers (-ve denoting useless laptops). In a day, he can sell almost <strong>m</strong> laptops. Mr. Geek, a greedy seller, wants to earn maximum profit from this sale and sell useless laptops. So, help him maximize his profit by selling useless laptops.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Input:</span> </strong></span><span style=\"font-size: 18px;\">m = 3</span><span style=\"font-size: 18px;\">, </span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">arr[] = [-6, 0, 35, 4]\n</span><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">6\n</span><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">Geek sells the laptops with price -6 and earns Rs. 6 as profit.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>m = 2, arr[] = [1, -2, -3, -4, 5]\n<strong>Output: </strong></span><span style=\"font-size: 18px;\">7\n<strong>Explanation: </strong></span><span style=\"font-size: 18px;\">Geek sells the laptops with price -3 and -4 and earns Rs. 7 as profit as he can sell max 2 laptops.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; m &le; 10<sup>5</sup><br />-10<sup>6 </sup>&le; arr<sub>i</sub> &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Find the most profitable laptops that are useless and sum the profit.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to calculate the maximum profit\n// by sorting the array in ascending order\n\nclass Solution {\n  public:\n\n    int maxProfit(int m, vector<int> &arr) {\n        // Sorting the array in ascending order\n        sort(arr.begin(), arr.end());\n        int n = arr.size();\n        // Initializing the sum of negative values to zero\n        int sum = 0;\n\n        // Iterating through the array up to the minimum of n and m\n        for (int i = 0; i < min(n, m); i++) {\n            // Adding the absolute value of negative numbers to the sum\n            if (arr[i] < 0)\n                sum += abs(arr[i]);\n        }\n\n        // Returning the maximum profit\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int maxProfit(int m, int[] arr) {\n        // Sorting the array in ascending order\n        Arrays.sort(arr);\n        int n = arr.length;\n        // Initializing the sum of negative values to zero\n        int sum = 0;\n\n        // Iterating through the array up to the minimum of n and m\n        for (int i = 0; i < Math.min(n, m); i++) {\n            // Adding the absolute value of negative numbers to the sum\n            if (arr[i] < 0) {\n                sum += Math.abs(arr[i]);\n            }\n        }\n\n        // Returning the maximum profit\n        return sum;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxProfit(self, m, arr):\n        # Sorting the array in ascending order\n        arr.sort()\n        n = len(arr)\n        # Initializing the sum of negative values to zero\n        sum_profit = 0\n\n        # Iterating through the array up to the minimum of n and m\n        for i in range(min(n, m)):\n            # Adding the absolute value of negative numbers to the sum\n            if arr[i] < 0:\n                sum_profit += abs(arr[i])\n\n        # Returning the maximum profit\n        return sum_profit\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxProfit(m, arr) {\n        // Sorting the array in ascending order\n        arr.sort((a, b) => a - b);\n        let n = arr.length;\n        // Initializing the sum of negative values to zero\n        let sum = 0;\n\n        // Iterating through the array up to the minimum of n and m\n        for (let i = 0; i < Math.min(n, m); i++) {\n            // Adding the absolute value of negative numbers to the sum\n            if (arr[i] < 0) {\n                sum += Math.abs(arr[i]);\n            }\n        }\n\n        // Returning the maximum profit\n        return sum;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}