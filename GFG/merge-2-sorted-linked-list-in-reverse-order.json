{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700073,
            "title": "Merge 2 sorted linked list in reverse order",
            "titleSlug": "merge-2-sorted-linked-list-in-reverse-order",
            "content": "<p><span >Given two linked lists, which are sorted in <strong>non-decreasing</strong> order. The task is to merge them in such a way that the resulting list is in <strong>non-increasing</strong> order.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList1 = 1-&gt;3, LinkedL<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">ist</span>2 = 2-&gt;4<br /><strong>Output: </strong>4-&gt;3-&gt;2-&gt;1<br /><strong>Explanation: </strong>After merging the two lists in non-increasing order, we have new lists as 4-&gt;3-&gt;2-&gt;1.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700073/Web/Other/blobid0_1724395612.png\" width=\"456\" height=\"215\" /><br /></span></pre>\n<pre><span ><strong>Input: </strong>LinkedL<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">ist1</span> = 5<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">-&gt;</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">10</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">-&gt;15</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">-&gt;40,</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> </span>LinkedL<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">ist</span>2 = 2-&gt;3-&gt;20<br /><strong>Output: </strong>40-&gt;20-&gt;15-&gt;10-&gt;5-&gt;3-&gt;2<br /><strong>Explanation: </strong>After merging the two lists in non-increasing order, we have new lists as 40-&gt;20-&gt;15-&gt;10-&gt;5-&gt;3-&gt;2.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700073/Web/Other/blobid1_1724395627.png\" width=\"505\" height=\"238\" /><br /></span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n+m)<br /><strong>Expected Space&nbsp;</strong><strong>Complexity</strong><strong>:</strong> O(1)</span></p>\n<p><span ><strong >Constraints:</strong><br /><span >1 &lt;= size of the LinkedLists &lt;= 10</span><sup >5</sup><br /><span style=\"font-size: 18.6667px;\">0 &lt;= node-&gt;data &lt;= 10<sup>6</sup></span><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted linked lists (in non-decreasing order), merge them into a single linked list sorted in non-increasing order.",
                "constraints": [
                    "1 <= size of the LinkedLists <= 10^5",
                    "0 <= node->data <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "LinkedList1 = 1->3, LinkedList2 = 2->4",
                        "output": "4->3->2->1",
                        "explanation": "Merging the lists 1->3 and 2->4 and arranging them in non-increasing order results in 4->3->2->1."
                    },
                    {
                        "input": "LinkedList1 = 5->10->15->40, LinkedList2 = 2->3->20",
                        "output": "40->20->15->10->5->3->2",
                        "explanation": "Merging the lists 5->10->15->40 and 2->3->20 and arranging them in non-increasing order results in 40->20->15->10->5->3->2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Merge two sorted linked lists by comparing the current nodes, attaching the larger node to the merged list, and reversing the links as you go to maintain the correct order.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to merge two linked lists in sorted order.\n    struct Node *mergeResult(struct Node *node1, struct Node *node2) {\n        Node *result = NULL;\n        while (node1 != NULL && node2 != NULL) {\n            // comparing values of nodes to determine order of merging\n            if (node1->data <= node2->data) {\n                // merging node1 with the result list\n                Node *temp = node1->next;\n                node1->next = result;\n                result = node1;\n\n                // moving to the next node in node1 list\n                node1 = temp;\n            } else {\n                // merging node2 with the result list\n                Node *temp = node2->next;\n                node2->next = result;\n                result = node2;\n\n                // moving to the next node in node2 list\n                node2 = temp;\n            }\n        }\n\n        // Check if any list finished first and merge remaining nodes\n\n        while (node1 != NULL) {\n            // merging remaining nodes in node1 list with the result list\n            Node *temp = node1->next;\n            node1->next = result;\n            result = node1;\n            node1 = temp;\n        }\n\n        while (node2 != NULL) {\n            // merging remaining nodes in node2 list with the result list\n            Node *temp = node2->next;\n            node2->next = result;\n            result = node2;\n            node2 = temp;\n        }\n        // returning the final merged list\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to reverse a linked list\n    Node reverse(Node head) {\n        Node curr = head;\n        Node prev = null;\n        while (curr != null) {\n            Node temp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = temp;\n        }\n        return prev;\n    }\n\n    // Function to merge two sorted linked lists\n    Node mergeResult(Node head1, Node head2) {\n        Node dummyNode = new Node(0);\n        Node tail = dummyNode;\n        while (true) {\n            if (head1 == null) {\n                tail.next = head2;\n                break;\n            }\n            if (head2 == null) {\n                tail.next = head1;\n                break;\n            }\n            if (head1.data <= head2.data) {\n                tail.next = head1;\n                head1 = head1.next;\n            } else {\n                tail.next = head2;\n                head2 = head2.next;\n            }\n            tail = tail.next;\n        }\n        return reverse(dummyNode.next);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def mergeResult(self, node1, node2):\n        # Initialize the result list as None\n        result = None\n\n        # Traverse both linked lists while both have nodes\n        while node1 is not None and node2 is not None:\n            # If node1's data is smaller or equal to node2's data\n            if node1.data <= node2.data:\n                # Store the next node of node1\n                temp = node1.next\n                # Link the current node1 to the result list (reversing the link)\n                node1.next = result\n                # Move result to point to the current node1\n                result = node1\n                # Move to the next node in node1 list\n                node1 = temp\n            else:\n                # Store the next node of node2\n                temp = node2.next\n                # Link the current node2 to the result list (reversing the link)\n                node2.next = result\n                # Move result to point to the current node2\n                result = node2\n                # Move to the next node in node2 list\n                node2 = temp\n\n        # If there are remaining nodes in node1, add them to the result list\n        while node1 is not None:\n            # Store the next node of node1\n            temp = node1.next\n            # Link the current node1 to the result list (reversing the link)\n            node1.next = result\n            # Move result to point to the current node1\n            result = node1\n            # Move to the next node in node1 list\n            node1 = temp\n\n        # If there are remaining nodes in node2, add them to the result list\n        while node2 is not None:\n            # Store the next node of node2\n            temp = node2.next\n            # Link the current node2 to the result list (reversing the link)\n            node2.next = result\n            # Move result to point to the current node2\n            result = node2\n            # Move to the next node in node2 list\n            node2 = temp\n\n        # Return the final merged and reversed list\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    mergeResult(node1, node2) {\n        let result = null; // Initialize the result linked list\n        while (node1 !== null && node2 !== null) {\n            if (node1.data <= node2.data) { // Compare the data of node1 and node2\n                let temp = node1.next;      // Store the next node of node1\n                node1.next = result;        // Update the next pointer of node1\n                result = node1;             // Update the result linked list\n                node1 = temp;               // Move to the next node in node1\n            } else {\n                let temp = node2.next; // Store the next node of node2\n                node2.next = result;   // Update the next pointer of node2\n                result = node2;        // Update the result linked list\n                node2 = temp;          // Move to the next node in node2\n            }\n        }\n\n        while (node1 !== null) {\n            let temp = node1.next; // Store the next node of node1\n            node1.next = result;   // Update the next pointer of node1\n            result = node1;        // Update the result linked list\n            node1 = temp;          // Move to the next node in node1\n        }\n\n        while (node2 !== null) {\n            let temp = node2.next; // Store the next node of node2\n            node2.next = result;   // Update the next pointer of node2\n            result = node2;        // Update the result linked list\n            node2 = temp;          // Move to the next node in node2\n        }\n\n        return result; // Return the merged linked list\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}