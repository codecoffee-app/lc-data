{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702674,
            "title": "Merge and Sort",
            "titleSlug": "merge-and-sort5821",
            "content": "<p><span style=\"font-size: 18px;\">Given two arrays <strong>arr1 </strong>and <strong>arr2</strong>, return the merged array in ascending order containing unique elements.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1[] = [11, 1, 8], arr2[] = [10, 11]\n<strong>Output: </strong>[1, 8, 10, 11]\n<strong>Explanation: </strong>The ouput array after merging both the arrays and removing duplicates is [1 8, 10, 11]<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1[] = [7, 1, 5, 3, 9], arr2[]  = [8, 4, 3, 5, 2, 6]\n<strong>Output: </strong>[1, 2, 3, 4, 5, 6, 7, 8, 9] </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn + mlogm)<br /><strong>Expected Auxiliary Space:</strong> O(n + m)<br />(n and m are sizes of both arrays)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr1.size(), arr2.size() &le; 10<sup>4</sup><br />1 &le; arr1[i], arr2[i] &le; 10<sup>9</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `arr1` and `arr2`, return a new array containing all unique elements from both arrays, sorted in ascending order.",
                "constraints": [
                    "1 <= arr1.size(), arr2.size() <= 10^4",
                    "1 <= arr1[i], arr2[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr1[] = [11, 1, 8], arr2[] = [10, 11]",
                        "output": "[1, 8, 10, 11]",
                        "explanation": "The merged array, after removing duplicates and sorting, is [1, 8, 10, 11]."
                    },
                    {
                        "input": "arr1[] = [7, 1, 5, 3, 9], arr2[] = [8, 4, 3, 5, 2, 6]",
                        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
                        "explanation": "The merged array, after removing duplicates and sorting, is [1, 2, 3, 4, 5, 6, 7, 8, 9]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a set to merge the two arrays, which automatically handles duplicates, and then convert the set back to a sorted list.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to merge and sort two vectors\n    vector<int> mergeNsort(vector<int>& a, vector<int>& b) {\n        unordered_set<int> hash; // Using unordered_set to store unique elements\n        vector<int> answer; // Initializing vector to store merged and sorted elements\n\n        // Inserting elements from vector a into hash set\n        for (int num : a)\n            hash.insert(num);\n\n        // Inserting elements from vector b into hash set\n        for (int num : b)\n            hash.insert(num);\n\n        // Adding unique elements from hash set to answer vector\n        for (int num : hash)\n            answer.push_back(num);\n\n        // Sorting the answer vector in ascending order\n        sort(answer.begin(), answer.end());\n        return answer; // Returning the merged and sorted vector\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Solution class containing the mergeNsort method\nclass Solution {\n    public int[] mergeNsort(int[] arr, int[] brr) {\n        // Using a TreeMap to merge and sort the arrays, automatically handling\n        // duplicates\n        Map<Integer, Integer> mergedMap = new TreeMap<>();\n\n        // Insert elements from arr into the map\n        for (int num : arr) {\n            mergedMap.put(num, mergedMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Insert elements from brr into the map\n        for (int num : brr) {\n            mergedMap.put(num, mergedMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Extract the keys from the map as the result array\n        int[] result = new int[mergedMap.size()];\n        int index = 0;\n        for (int num : mergedMap.keySet()) {\n            result[index++] = num;\n        }\n\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def mergeNsort(self, arr, brr):\n        # Use a set to merge the two lists and remove duplicates\n        merged_set = set(arr + brr)\n        # Convert the set back to a sorted list\n        sorted_list = sorted(merged_set)\n        return sorted_list\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n//  Solution class containing the mergeNsort method\nclass Solution {\n    mergeNsort(arr1, arr2) {\n        // Use a Set to merge the arrays and remove duplicates\n        const mergedSet = new Set([...arr1, ...arr2 ]);\n        // Convert the Set to an array and sort it\n        const sortedArray = Array.from(mergedSet).sort((a, b) => a - b);\n        return sortedArray;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}