{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881429,
            "title": "Merge k Sorted Arrays",
            "titleSlug": "merge-k-sorted-arrays--151335",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>k</strong> sorted arrays arranged in the form of a matrix <strong>arr[] </strong>of size <strong>k</strong> * <strong>k</strong>. The task is to merge them into one sorted array. Return the merged sorted array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong> </span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k = 3, arr[][] = [[1, 2, 3}, [4, 5, 6], [7, 8, 9]]\n<strong>Output: </strong>[1, 2, 3, 4, 5, 6, 7, 8, 9]<strong>\nExplanation: </strong>arr[][] has 3 sorted arrays of size 3, arr[][] = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]. The merged list will be [1, 2, 3, 4, 5, 6, 7, 8, 9].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k = 4, arr[][]= [[1, 2, 3, 4], [2, 2, 3, 4], [5, 5, 6, 6], [7, 8, 9, 9]]\n<strong>Output: </strong>[1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9] <strong>\nExplanation: </strong>arr[][] has 4 sorted arrays of size 4, arr[][] = [[1, 2, 2, 2], [3, 3, 4, 4], [5, 5, 6, 6], [7, 8, 9, 9 ]]. The merged list will be [1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9].</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong>:<br />1 &lt;= k &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a k x k matrix `arr` where each row represents a sorted array. Your task is to merge all these sorted arrays into a single sorted array and return it.",
                "constraints": [
                    "1 <= k <= 100"
                ],
                "testcases": [
                    {
                        "input": "k = 3, arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
                        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9]",
                        "explanation": "The input consists of 3 sorted arrays: [1, 2, 3], [4, 5, 6], and [7, 8, 9]. Merging these results in the sorted array [1, 2, 3, 4, 5, 6, 7, 8, 9]."
                    },
                    {
                        "input": "k = 4, arr = [[1, 2, 3, 4], [2, 2, 3, 4], [5, 5, 6, 6], [7, 8, 9, 9]]",
                        "output": "[1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9]",
                        "explanation": "The input has 4 sorted arrays: [1, 2, 3, 4], [2, 2, 3, 4], [5, 5, 6, 6], and [7, 8, 9, 9]. Merging them creates the sorted array [1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "vmware",
            "flipkart",
            "amazon",
            "microsoft",
            "citrix"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nint n;\n\n// declaring min heap node.\nstruct MinHeapNode {\n    // the element to be stored.\n    int element;\n    // index of the array from which the element is taken.\n    int i;\n    // index of the next element to be picked from array.\n    int j;\n};\n\nvoid swap(MinHeapNode *x, MinHeapNode *y);\n\nclass MinHeap {\n    MinHeapNode *harr;\n    int heap_size;\n\n  public:\n    // Constructor: creates a min heap of given size.\n    MinHeap(MinHeapNode a[], int size);\n\n    // to heapify a subtree with root at given index.\n    void MinHeapify(int);\n\n    // to get index of left child of node at index i.\n    int left(int i) { return (2 * i + 1); }\n\n    // to get index of right child of node at index i.\n    int right(int i) { return (2 * i + 2); }\n\n    // to get the root.\n    MinHeapNode getMin() { return harr[0]; }\n\n    // to replace root with new node x and heapify() new root.\n    void replaceMin(MinHeapNode x) {\n        harr[0] = x;\n        MinHeapify(0);\n    }\n};\n\nclass Solution {\n  public:\n    // Function to merge k sorted arrays.\n    vector<int> mergeKArrays(vector<vector<int>> &arr, int k) {\n        n = k;\n        vector<int> output(n * k);\n\n        // creating a min heap with k heap nodes. Every heap node\n        // has first element of an array.\n        MinHeapNode *harr = new MinHeapNode[k];\n        for (int i = 0; i < k; i++) {\n            // storing the first element.\n            harr[i].element = arr[i][0];\n            // index of array\n            harr[i].i = i;\n            // Index of next element to be stored from array\n            harr[i].j = 1;\n        }\n        MinHeap hp(harr, k);\n\n        // Now one by one we get the minimum element from min\n        // heap and replace it with next element of its array.\n        for (int count = 0; count < n * k; count++) {\n            // getting the minimum element and storing it in output.\n            MinHeapNode root = hp.getMin();\n            output[count] = root.element;\n\n            // finding the next element that will replace current root of heap.\n            // The next element belongs to same array as the current root.\n            if (root.j < n) {\n                root.element = arr[root.i][root.j];\n                root.j += 1;\n            }\n            // if root was the last element of its array, we store INT_MAX.\n            else\n                root.element = INT_MAX;\n\n            // replacing root with next element of array.\n            hp.replaceMin(root);\n        }\n\n        return output;\n    }\n};\n\n// Constructor: Builds a heap from a given array a[] of given size.\nMinHeap::MinHeap(MinHeapNode a[], int size) {\n    heap_size = size;\n    harr = a;\n    int i = (heap_size - 1) / 2;\n    while (i >= 0) {\n        MinHeapify(i);\n        i--;\n    }\n}\n\n// a recursive method to heapify a subtree with root at given index.\nvoid MinHeap::MinHeapify(int i) {\n    int l = left(i);\n    int r = right(i);\n    int smallest = i;\n    if (l < heap_size && harr[l].element < harr[i].element)\n        smallest = l;\n    if (r < heap_size && harr[r].element < harr[smallest].element)\n        smallest = r;\n    if (smallest != i) {\n        swap(&harr[i], &harr[smallest]);\n        MinHeapify(smallest);\n    }\n}\n\n// Function to swap two nodes.\nvoid swap(MinHeapNode *x, MinHeapNode *y) {\n    MinHeapNode temp = *x;\n    *x = *y;\n    *y = temp;\n}\n",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}