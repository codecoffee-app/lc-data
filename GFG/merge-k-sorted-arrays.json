{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700450,
            "title": "Merge k Sorted Arrays",
            "titleSlug": "merge-k-sorted-arrays",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>k</strong> sorted arrays arranged in the form of a matrix of size <strong>k</strong> * <strong>k</strong>. The task is to merge them into one sorted array. Return the merged sorted array ( as a pointer to the merged sorted arrays in <strong>cpp,&nbsp;</strong>as an ArrayList in&nbsp;<strong>java,&nbsp;</strong>and list in&nbsp;<strong>python</strong>).</span></p>\n<p><span style=\"font-size: 18px;\"><br /><strong>Examples :</strong> </span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k = 3, arr[][] = {{1,2,3},{4,5,6},{7,8,9}}\n<strong>Output: </strong>1&nbsp;2&nbsp;3&nbsp;4&nbsp;5 6 7 8 9<strong>\nExplanation: </strong>Above test case has 3 sorted arrays of size 3, 3, 3 arr[][] = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]. The merged list will be [1, 2, 3, 4, 5, 6, 7, 8, 9].</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k = 4, arr[][]={{1,2,3,4},{2,2,3,4},{5,5,6,6},{7,8,9,9}}\n<strong>Output: </strong>1 2 2 2 3 3 4 4 5 5 6 6 7 8 9 9&nbsp;<strong>\nExplanation: </strong>Above test case has 4 sorted arrays of size 4, 4, 4, 4 arr[][] = [[1, 2, 2, 2], [3, 3, 4, 4], [5, 5, 6, 6], [7, 8, 9, 9 ]]. The merged list will be [1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9].</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(k<sup>2</sup></span>*<span style=\"font-size: 18px;\">Log(k))<br /><strong>Expected Auxiliary Space:</strong> O(k<sup>2</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong>:<br />1 &lt;= k &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a k x k matrix where each row represents a sorted array, merge all k sorted arrays into a single sorted array.",
                "constraints": [
                    "1 <= k <= 100"
                ],
                "testcases": [
                    {
                        "input": "k = 3, arr[][] = {{1,2,3},{4,5,6},{7,8,9}}",
                        "output": "1 2 3 4 5 6 7 8 9",
                        "explanation": "Merging the three sorted arrays [1, 2, 3], [4, 5, 6], and [7, 8, 9] results in the sorted array [1, 2, 3, 4, 5, 6, 7, 8, 9]."
                    },
                    {
                        "input": "k = 4, arr[][]={{1,2,3,4},{2,2,3,4},{5,5,6,6},{7,8,9,9}}",
                        "output": "1 2 2 2 3 3 4 4 5 5 6 6 7 8 9 9",
                        "explanation": "Merging the four sorted arrays [1, 2, 3, 4], [2, 2, 3, 4], [5, 5, 6, 6], and [7, 8, 9, 9] results in the sorted array [1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "vmware",
            "flipkart",
            "amazon",
            "microsoft",
            "citrix"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nint n;\r\n//declaring min heap node.\r\nstruct MinHeapNode\r\n{\r\n    //the element to be stored.\r\n\tint element; \r\n\t//index of the array from which the element is taken.\r\n\tint i;\r\n\t//index of the next element to be picked from array.\r\n\tint j; \r\n};\r\n\r\n\r\nvoid swap(MinHeapNode *x, MinHeapNode *y);\r\n\r\n\r\nclass MinHeap\r\n{\r\n\tMinHeapNode *harr;\r\n\tint heap_size; \r\n\t\r\n    public:\r\n\t// Constructor: creates a min heap of given size.\r\n\tMinHeap(MinHeapNode a[], int size);\r\n\r\n\t//to heapify a subtree with root at given index.\r\n\tvoid MinHeapify(int );\r\n\r\n\t//to get index of left child of node at index i.\r\n\tint left(int i) { return (2*i + 1); }\r\n\r\n\t//to get index of right child of node at index i.\r\n\tint right(int i) { return (2*i + 2); }\r\n\r\n\t//to get the root.\r\n\tMinHeapNode getMin() { return harr[0]; }\r\n\r\n\t//to replace root with new node x and heapify() new root.\r\n\tvoid replaceMin(MinHeapNode x) { harr[0] = x; MinHeapify(0); }\r\n};\r\n\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to merge k sorted arrays.\r\n    vector<int> mergeKArrays(vector<vector<int>> arr, int k)\r\n    {\r\n        n = k;\r\n    \tvector<int> output(n*k);\r\n    \t\r\n    \t//creating a min heap with k heap nodes. Every heap node\r\n    \t//has first element of an array.\r\n    \tMinHeapNode *harr = new MinHeapNode[k];\r\n    \tfor (int i = 0; i < k; i++)\r\n    \t{\r\n    \t    //storing the first element.\r\n    \t\tharr[i].element = arr[i][0]; \r\n    \t\t// index of array\r\n    \t\tharr[i].i = i;\r\n    \t\t// Index of next element to be stored from array\r\n    \t\tharr[i].j = 1; \r\n    \t}\r\n    \tMinHeap hp(harr, k); \r\n    \r\n    \t//Now one by one we get the minimum element from min\r\n    \t//heap and replace it with next element of its array.\r\n    \tfor (int count = 0; count < n*k; count++)\r\n    \t{\r\n    \t\t//getting the minimum element and storing it in output.\r\n    \t\tMinHeapNode root = hp.getMin();\r\n    \t\toutput[count] = root.element;\r\n    \r\n    \t\t//finding the next element that will replace current root of heap.\r\n    \t\t//The next element belongs to same array as the current root.\r\n    \t\tif (root.j < n)\r\n    \t\t{\r\n    \t\t\troot.element = arr[root.i][root.j];\r\n    \t\t\troot.j += 1;\r\n    \t\t}\r\n    \t\t//if root was the last element of its array, we store INT_MAX.\r\n    \t\telse root.element = INT_MAX; \r\n    \r\n    \t\t//replacing root with next element of array.\r\n    \t\thp.replaceMin(root);\r\n    \t}\r\n    \r\n    \treturn output;\r\n    }\r\n};\r\n\r\n\r\n// Constructor: Builds a heap from a given array a[] of given size.\r\nMinHeap::MinHeap(MinHeapNode a[], int size)\r\n{\r\n\theap_size = size;\r\n\tharr = a; \r\n\tint i = (heap_size - 1)/2;\r\n\twhile (i >= 0)\r\n\t{\r\n\t\tMinHeapify(i);\r\n\t\ti--;\r\n\t}\r\n}\r\n\r\n//a recursive method to heapify a subtree with root at given index.\r\nvoid MinHeap::MinHeapify(int i)\r\n{\r\n\tint l = left(i);\r\n\tint r = right(i);\r\n\tint smallest = i;\r\n\tif (l < heap_size && harr[l].element < harr[i].element)\r\n\t\tsmallest = l;\r\n\tif (r < heap_size && harr[r].element < harr[smallest].element)\r\n\t\tsmallest = r;\r\n\tif (smallest != i)\r\n\t{\r\n\t\tswap(&harr[i], &harr[smallest]);\r\n\t\tMinHeapify(smallest);\r\n\t}\r\n}\r\n\r\n//Function to swap two nodes.\r\nvoid swap(MinHeapNode *x, MinHeapNode *y)\r\n{\r\n\tMinHeapNode temp = *x; *x = *y; *y = temp;\r\n}\r\n\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    public static class HeapItem implements Comparable<HeapItem>\r\n    {\r\n        int[] array;                \r\n        int index;        \r\n      \r\n        //declaring HeapItem.\r\n        public HeapItem(int[] arr, int index) \r\n        {\r\n           array = arr;\r\n           this.index=index;\r\n        }   \r\n        @Override\r\n        public int compareTo(HeapItem h)\r\n        {\r\n          if(array[index] > h.array[h.index])\r\n              return 1;\r\n          else if(array[index] < h.array[h.index])\r\n              return -1;\r\n          else\r\n              return 0;\r\n        }\r\n        \r\n    }\r\n    //Function to merge k sorted arrays.\r\n    public static ArrayList<Integer> mergeKArrays(int[][] arrays,int k) \r\n    {\r\n      \r\n        //implementing heap using priority queue.\r\n        PriorityQueue<HeapItem> pq = new PriorityQueue<HeapItem>();             \r\n        \r\n        //adding arrays to the heap.\r\n        for (int i = 0; i < arrays.length; i++) \r\n        {\r\n            pq.add(new HeapItem(arrays[i], 0));\r\n        }\r\n        \r\n        //using a list to store the resultant array after merging.\r\n        ArrayList<Integer> result = new ArrayList<Integer>(); \r\n        \r\n        //using a loop while priority queue is not empty.\r\n        while (!pq.isEmpty())\r\n        {\r\n            HeapItem current = pq.remove();\r\n            //adding the element at current in list.\r\n            result.add(current.array[current.index]);                       \r\n            if (current.index < current.array.length-1) \r\n            {  \r\n        \t    current.index++;\r\n        \t    pq.add(current); \r\n            }\r\n        }\r\n        //returning the result.\r\n        return result;\r\n    } \r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass lst_entry:\r\n    def __init__(self,x,y,z):\r\n        self.val=x\r\n        self.lst=y\r\n        self.inx=z\r\n\r\nclass min_heap:\r\n    def __init__(self):\r\n        self.heap_lst=[]\r\n    \r\n    def add(self,x,y,z):\r\n        self.heap_lst.append(lst_entry(x,y,z))\r\n        index=len(self.heap_lst)-1\r\n        while(index>0 and self.heap_lst[index].val < self.heap_lst[(index-1)//2].val):\r\n            parent = (index-1)//2\r\n            self.heap_lst[index] , self.heap_lst[parent] = self.heap_lst[parent] , self.heap_lst[index]\r\n            index = parent\r\n    \r\n    def pop(self):\r\n        ret=(self.heap_lst[0].val, self.heap_lst[0].lst, self.heap_lst[0].inx)\r\n        l=len(self.heap_lst)\r\n        self.heap_lst[0]=self.heap_lst[l-1]\r\n        self.heap_lst.pop()\r\n        l=l-1\r\n        i=0\r\n        while(1):\r\n            if(2*i+1>=l):\r\n                break\r\n            child=2*i+1\r\n            if(2*i+2<l and self.heap_lst[2*i+2].val < self.heap_lst[2*i+1].val):\r\n                child=2*i+2\r\n            if(self.heap_lst[child].val >= self.heap_lst[i].val):\r\n                break\r\n            self.heap_lst[i] , self.heap_lst[child] = self.heap_lst[child] , self.heap_lst[i]\r\n            i=child\r\n        return ret\r\n    \r\n    def available(self):\r\n        if(len(self.heap_lst)>0):\r\n            return True\r\n        return False\r\n\r\nclass Solution:\r\n    #Function to merge k sorted arrays.\r\n    def mergeKArrays(self, numbers, n):\r\n        n=len(numbers)\r\n        h=min_heap()\r\n        \r\n        #adding arrays to the heap.\r\n        for i in range(n):\r\n            h.add(numbers[i][0],i,0)\r\n        arr=[]\r\n        \r\n        #using a loop while heap is not empty.\r\n        while(h.available()):\r\n            \r\n            val,i,j = h.pop()\r\n            #adding the element at current in list.\r\n            arr.append(val)\r\n            if(j+1 < len(numbers[i]) ):\r\n                h.add(numbers[i][j+1],i,j+1)\r\n                \r\n        #returning the list.\r\n        return arr\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    mergeKArrays(arr,K){\n        // Declare an empty array to store the merged arrays.\n        let ans=[];\n\n        // Iterate through each array in the given 2D array\n        for(let i=0;i<arr.length;i++)\n        {\n            // Iterate through each element in the current array\n            for(let j=0;j<arr[i].length;j++)\n            {\n                // Add the element to the ans array\n                ans.push(arr[i][j]);\n            }\n        }\n\n        // Sort the ans array in ascending order\n        ans.sort((a,b)=>{return (a-b)});\n\n        // Return the merged and sorted array\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}