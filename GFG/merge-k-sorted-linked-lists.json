{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700265,
            "title": "Merge K sorted linked lists",
            "titleSlug": "merge-k-sorted-linked-lists",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[] </strong>of <strong>n</strong> <strong>sorted linked lists</strong> of different sizes. The task is to <strong>merge</strong> them in such a way that after merging they will be a <strong>single sorted</strong> linked list, then <strong>return </strong>the<strong> head</strong> of the merged linked list.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1 -&gt; 2 -&gt; 3, 4 -&gt; 5, 5 -&gt; 6, 7 -&gt; 8]\n<strong>Output: </strong>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8<strong>\nExplanation:<br /></strong>The arr[] has 4 sorted linked list of size 3, 2, 2, 2.\n1st list: 1 -&gt; 2-&gt; 3\n2nd list: 4 -&gt; 5\n3rd list: 5 -&gt; 6\n4th list: 7 -&gt; 8\nThe merged list will be:\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700265/Web/Other/blobid0_1737094930.png\" width=\"388\" height=\"68\" /> </pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1 -&gt; 3, 8, 4 -&gt; 5 -&gt; 6]\n<strong>Output: </strong>1 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 8<strong>\nExplanation:<br /></strong>The arr[] has 3 sorted linked list of size 2, 3, 1.\n1st list: 1 -&gt; 3\n2nd list: 8\n3rd list: 4 -&gt; 5 -&gt; 6\nThe merged list will be:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700265/Web/Other/blobid1_1722513386.png\" width=\"400\" height=\"70\" /></span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong><br />1 &lt;= total no. of nodes &lt;= 10<sup>5</sup><sup><br /></sup>1 &lt;= node-&gt;data &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of n sorted linked lists, merge them into a single sorted linked list and return the head of the merged list.",
                "constraints": [
                    "1 <= total no. of nodes <= 10^5",
                    "1 <= node->data <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "[1 -> 2 -> 3, 4 -> 5, 5 -> 6, 7 -> 8]",
                        "output": "1 -> 2 -> 3 -> 4 -> 5 -> 5 -> 6 -> 7 -> 8",
                        "explanation": "The input consists of four sorted linked lists: [1 -> 2 -> 3], [4 -> 5], [5 -> 6], and [7 -> 8].  Merging them results in a single sorted list: 1 -> 2 -> 3 -> 4 -> 5 -> 5 -> 6 -> 7 -> 8."
                    },
                    {
                        "input": "[1 -> 3, 8, 4 -> 5 -> 6]",
                        "output": "1 -> 3 -> 4 -> 5 -> 6 -> 8",
                        "explanation": "The input consists of three sorted linked lists: [1 -> 3], [8], and [4 -> 5 -> 6]. Merging them results in a single sorted list: 1 -> 3 -> 4 -> 5 -> 6 -> 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a priority queue to efficiently merge the sorted linked lists. Extract the smallest element, add it to the result list, and push the next element from the same list.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "vmware",
            "amazon",
            "microsoft",
            "oracle"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Custom class for min heap\nclass Compare {\n  public:\n    bool operator()(Node* a, Node* b) { return a->data > b->data; }\n};\n\nclass Solution {\n  public:\n    Node* mergeKLists(vector<Node*>& arr) {\n\n        priority_queue<Node*, vector<Node*>, Compare> pq;\n\n        // Insert the head nodes of k lists\n        for (Node* head : arr) {\n            if (head != nullptr)\n                pq.push(head);\n        }\n\n        // Initialize a dummy head\n        Node* dummy = new Node(-1);\n        Node* tail = dummy;\n\n        while (!pq.empty()) {\n\n            // Pop the min node\n            Node* top = pq.top();\n            pq.pop();\n\n            // Append the node into list\n            tail->next = top;\n            tail = top;\n\n            // If top node has next node,\n            // add it to the heap.\n            if (top->next != nullptr) {\n                pq.push(top->next);\n            }\n        }\n\n        return dummy->next;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    Node mergeKLists(List<Node> arr) {\n        PriorityQueue<Node> pq = new PriorityQueue<>((a, b) -> a.data - b.data);\n\n        // Insert the head nodes of k lists\n        for (Node head : arr) {\n            if (head != null) pq.add(head);\n        }\n\n        // Initialize a dummy head\n        Node dummy = new Node(-1);\n        Node tail = dummy;\n\n        while (!pq.isEmpty()) {\n\n            // Pop the min node\n            Node top = pq.poll();\n\n            // Append the node into list\n            tail.next = top;\n            tail = top;\n\n            // If top node has next node,\n            // add it to the heap.\n            if (top.next != null) {\n                pq.add(top.next);\n            }\n        }\n\n        return dummy.next;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def mergeKLists(self, arr):\n        pq = []\n\n        # Insert the head nodes of k lists\n        for i in range(0, len(arr)):\n            head = arr[i]\n            if head is not None:\n                heapq.heappush(pq, (head.data, i, head))\n\n        # Initialize a dummy head\n        dummy = Node(-1)\n        tail = dummy\n\n        while pq:\n\n            # Pop the min node\n            _, index, top = heapq.heappop(pq)\n\n            # Append the node into list\n            tail.next = top\n            tail = top\n\n            # If top node has next node,\n            # add it to the heap.\n            if top.next is not None:\n                heapq.heappush(pq, (top.next.data, index, top.next))\n\n        return dummy.next\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Comparator function to compare Node data\nfunction nodeComparator(k1, k2) {\n    if (k1.data > k2.data) return -1;\n    if (k1.data < k2.data) return 1;\n    return 0;\n}\n\nclass PriorityQueue {\n    constructor(compare) {\n        this.heap = [];\n        this.compare = compare;\n    }\n\n    enqueue(value) {\n        this.heap.push(value);\n        this.bubbleUp();\n    }\n\n    bubbleUp() {\n        let index = this.heap.length - 1;\n        while (index > 0) {\n            let element = this.heap[index], parentIndex = Math.floor((index - 1) / 2),\n                parent = this.heap[parentIndex];\n            if (this.compare(element, parent) < 0) break;\n            this.heap[index] = parent;\n            this.heap[parentIndex] = element;\n            index = parentIndex;\n        }\n    }\n\n    dequeue() {\n        let max = this.heap[0];\n        let end = this.heap.pop();\n        if (this.heap.length > 0) {\n            this.heap[0] = end;\n            this.sinkDown(0);\n        }\n        return max;\n    }\n\n    sinkDown(index) {\n        let left = 2 * index + 1, right = 2 * index + 2, largest = index;\n\n        if (left < this.heap.length &&\n            this.compare(this.heap[left], this.heap[largest]) > 0) {\n            largest = left;\n        }\n\n        if (right < this.heap.length &&\n            this.compare(this.heap[right], this.heap[largest]) > 0) {\n            largest = right;\n        }\n\n        if (largest !== index) {\n            [this.heap[largest], this.heap[index]] = [\n                this.heap[index],\n                this.heap[largest],\n            ];\n            this.sinkDown(largest);\n        }\n    }\n\n    isEmpty() { return this.heap.length === 0; }\n}\n\nclass Solution {\n    // Function to merge K sorted linked list.\n\n    mergeKLists(arr) {\n        // your code here\n        const pq = new PriorityQueue(nodeComparator);\n\n        // Insert the head nodes of k lists\n        for (let head of arr) {\n            if (head !== null) pq.enqueue(head);\n        }\n\n        let dummy = new Node(-1);\n        let tail = dummy;\n\n        while (!pq.isEmpty()) {\n\n            // Pop the min node\n            let top = pq.dequeue();\n\n            // Append the node into list\n            tail.next = top;\n            tail = top;\n\n            // If top node has next node,\n            // add it to the heap.\n            if (top.next !== null) {\n                pq.enqueue(top.next);\n            }\n        }\n\n        return dummy.next;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}