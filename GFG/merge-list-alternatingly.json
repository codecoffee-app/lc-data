{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700588,
            "title": "Merge Lists Alternatingly",
            "titleSlug": "merge-list-alternatingly",
            "content": "<p><span >Given two linked lists <strong>head1</strong> and <strong>head2</strong>, your task is to complete the function <strong>mergeList()</strong> which inserts nodes of the second list into the first list at alternate positions of the first list and leaves the remaining nodes as it is if they cannot be inserted.</span></p>\n<p><span >The function should return an array containing the two modified linked list heads in their original order.</span></p>\n<pre><span ><strong>Examples:<br />Input:&nbsp;</strong>LinkedList1 <strong>= </strong>10-&gt;9 , LinkedList2 <strong>= </strong>6-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5<strong><br /></strong><strong>Output: </strong>LinkedList1 = 10-&gt;6-&gt;9-&gt;1 , LinkedList2 <strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">= </strong>2-&gt;3-&gt;4-&gt;5<br /></span><span ><strong>Explanation: </strong>The two linked list are 10-&gt;9 and 6-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5. </span><span >After merging the two lists as required, the new list is like: 10-&gt;6-&gt;9-&gt;1 and  2-&gt;3-&gt;4-&gt;5.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700588/Web/Other/blobid1_1722065037.png\" width=\"400\" height=\"78\" /><br /></span></pre>\n<pre><span ><strong>Input: </strong>LinkedList1 <strong>= </strong>55-&gt;66-&gt;77-&gt;88-&gt;99 , LinkedList2 = 11-&gt;22-&gt;33-&gt;44-&gt;55<br /><strong>Output: </strong>LinkedList1 = 55-&gt;11-&gt;66-&gt;22-&gt;77-&gt;33-&gt;88-&gt;44-&gt;99-&gt;55 , LinkedList2 = &lt;empty&gt;<br /></span></pre>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium; white-space: normal;\"><span ><strong>Expected Time Complexity:&nbsp;</strong>O(n+m)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium; white-space: normal;\"><span ><strong>Constraints:</strong><br />0 &lt;= number of nodes &lt;= 100<br />1 &lt;= node -&gt; data &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two linked lists, head1 and head2, merge head2 into head1 by inserting nodes of head2 at alternate positions in head1. If head2 has more nodes than can be inserted into head1, leave the remaining nodes of head2 as they are. Return an array containing the modified head1 and head2 in their original order.",
                "constraints": [
                    "0 <= number of nodes <= 100",
                    "1 <= node -> data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "LinkedList1 = 10->9, LinkedList2 = 6->1->2->3->4->5",
                        "output": "LinkedList1 = 10->6->9->1, LinkedList2 = 2->3->4->5",
                        "explanation": "The nodes from LinkedList2 (6 and 1) are inserted at alternate positions in LinkedList1. The remaining nodes of LinkedList2 (2, 3, 4, and 5) remain in LinkedList2."
                    },
                    {
                        "input": "LinkedList1 = 55->66->77->88->99, LinkedList2 = 11->22->33->44->55",
                        "output": "LinkedList1 = 55->11->66->22->77->33->88->44->99->55, LinkedList2 = <empty>",
                        "explanation": "All nodes from LinkedList2 are inserted into LinkedList1 at alternate positions, resulting in an empty LinkedList2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate through both lists simultaneously, inserting nodes from the second list into alternate positions of the first list, and updating the next pointers accordingly.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    vector<Node *> mergeList(struct Node **head1, struct Node **head2) {\n        // Pointers for current nodes in both lists\n        struct Node *p_curr = *head1, *q_curr = *head2;\n        // Pointers for next nodes in both lists\n        struct Node *p_next, *q_next;\n\n        // Loop until both lists are traversed completely\n        while (p_curr != NULL && q_curr != NULL) {\n            // Store next nodes of both lists\n            p_next = p_curr->next;\n            q_next = q_curr->next;\n\n            // Update the next pointers to merge the nodes\n            q_curr->next = p_next;\n            p_curr->next = q_curr;\n\n            // Move to next nodes in both lists\n            p_curr = p_next;\n            q_curr = q_next;\n        }\n        // If list q is traversed completely, update the pointer\n        *head2 = q_curr;\n        return {*head1, *head2};\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public Node[] mergeList(Node head1, Node head2) {\n        Node pCurr = head1, qCurr = head2;\n        Node pNext, qNext;\n\n        while (pCurr != null && qCurr != null) {\n            pNext = pCurr.next;\n            qNext = qCurr.next;\n\n            qCurr.next = pNext;\n            pCurr.next = qCurr;\n\n            pCurr = pNext;\n            qCurr = qNext;\n        }\n\n        return new Node[] {head1, qCurr};\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def merge_list(self, head1, head2):\n        p_curr = head1\n        q_curr = head2\n\n        while p_curr and q_curr:\n            p_next = p_curr.next\n            q_next = q_curr.next\n\n            q_curr.next = p_next\n            p_curr.next = q_curr\n\n            p_curr = p_next\n            q_curr = q_next\n\n        return [head1, q_curr]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/*\nclass Node {\n   constructor(data) {\n       this.data = data;\n       this.next = null;\n   }\n}\n*/\n/**\n * @param {Node} head1\n * @param {Node} head2\n * @return {Node[]} Array containing the modified head1 and head2\n */\nclass Solution {\n    mergeList(head1, head2) {\n        let p_curr = head1, q_curr = head2;\n        let p_next, q_next;\n\n        while (p_curr !== null && q_curr !== null) {\n            p_next = p_curr.next;\n            q_next = q_curr.next;\n\n            q_curr.next = p_next;\n            p_curr.next = q_curr;\n\n            p_curr = p_next;\n            q_curr = q_next;\n        }\n\n        head2 = q_curr;\n        return [ head1, head2 ];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}