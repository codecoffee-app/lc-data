{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700538,
            "title": "Merge Sort on Doubly Linked List",
            "titleSlug": "merge-sort-on-doubly-linked-list",
            "content": "<p><span >Given Pointer/Reference to the <strong>head</strong> of a<strong> </strong>doubly linked list, the task is to Sort<strong> </strong>the<strong> </strong>given doubly linked list<strong> </strong>using<strong> Merge Sort&nbsp;</strong>in both <strong>non-decreasing</strong> and <strong>non-increasing</strong> order.</span></p>\n<p><span ><strong>Note:</strong> Return the head of the sorted&nbsp;non-decreasing&nbsp;doubly linked list. The driver code will print it forward and backward in both directions.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList:<strong> </strong>7 &harr; 3 &harr; 5 &harr; 2 &harr; 6 &harr; 4 &harr; 1 &harr; 8\n<strong>Output:\n</strong>LinkedList: 1 &harr; 2 &harr; 3 &harr; 4 &harr; 5 &harr; 6 &harr; 7 &harr; 8\nLinkedList: 8 &harr; 7 &harr; 6 &harr; 5 &harr; 4 &harr; 3 &harr; 2 &harr; 1<strong>\nExplanation: </strong>After sorting the given linked list in both ways, the resultant matrix will be as shown in the first two lines of the output. The first line shows the output for non-decreasing order, and the next line shows the output for non-increasing order.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700538/Web/Other/blobid0_1725342004.png\" width=\"371\" height=\"139\" /><br /></span></pre>\n<pre><span ><strong>Input: </strong>LinkedList: 9 &harr; 15 &harr; 0 &harr; -1 &harr; 0<br /><strong>Output:</strong>\nLinkedList: -1 &harr; 0 &harr; 0 &harr; 9 &harr; 15\nLinkedList: 15 &harr; 9 &harr; 0 &harr; 0 &harr; -1<strong>\nExplanation: </strong>After sorting the given linked list in both ways, the resultant list will be -1 &rarr; 0 &rarr; 0 &rarr; 9 &rarr; 15 in non-decreasing order and 15 &rarr; 9 &rarr; 0 &rarr; 0 &rarr; -1 in non-increasing order.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700538/Web/Other/blobid1_1725342021.png\" width=\"363\" height=\"136\" /></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;=&nbsp;<span style=\"font-family: Arial; white-space-collapse: preserve; background-color: #ffffff;\">number of nodes</span> &lt;= 10<sup>5<br /></sup>-10<sup>5</sup> &lt;= node-&gt;data &lt;= 10<sup>5<br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a doubly linked list, sort the list using Merge Sort in both non-decreasing and non-increasing order. Return the head of the sorted non-decreasing doubly linked list.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "-10^5 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 7 <-> 3 <-> 5 <-> 2 <-> 6 <-> 4 <-> 1 <-> 8",
                        "output": "LinkedList: 1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 6 <-> 7 <-> 8\nLinkedList: 8 <-> 7 <-> 6 <-> 5 <-> 4 <-> 3 <-> 2 <-> 1",
                        "explanation": "The non-decreasing sorted linked list is 1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 6 <-> 7 <-> 8, and the non-increasing sorted linked list is 8 <-> 7 <-> 6 <-> 5 <-> 4 <-> 3 <-> 2 <-> 1."
                    },
                    {
                        "input": "LinkedList: 9 <-> 15 <-> 0 <-> -1 <-> 0",
                        "output": "LinkedList: -1 <-> 0 <-> 0 <-> 9 <-> 15\nLinkedList: 15 <-> 9 <-> 0 <-> 0 <-> -1",
                        "explanation": "The non-decreasing sorted linked list is -1 <-> 0 <-> 0 <-> 9 <-> 15, and the non-increasing sorted linked list is 15 <-> 9 <-> 0 <-> 0 <-> -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 12pt; white-space-collapse: preserve; background-color: #ffffff;\">Use recursion to divide the list into halves, then merge them in sorted order.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "doubly-linked-list",
                "slug": "doubly-linked-list"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to merge two halves of the list\nclass Solution {\n  public:\n    DLLNode *merge(DLLNode *first, DLLNode *second) {\n        // Base cases when either of two halves is null\n        if (!first)\n            return second;\n        if (!second)\n            return first;\n\n        // Comparing data in both halves and storing the smaller in result\n        if (first->data < second->data) {\n            first->next = merge(first->next, second);\n            first->next->prev = first;\n            first->prev = NULL;\n            return first;\n        } else {\n            second->next = merge(first, second->next);\n            second->next->prev = second;\n            second->prev = NULL;\n            return second;\n        }\n    }\n\n    // Function to split the list into two halves\n    DLLNode *splitList(DLLNode *head) {\n        if (!head || !head->next)\n            return NULL;\n\n        DLLNode *fast = head, *slow = head;\n\n        while (fast->next && fast->next->next) {\n            fast = fast->next->next;\n            slow = slow->next;\n        }\n\n        DLLNode *temp = slow->next;\n        slow->next = NULL;\n        return temp;\n    }\n\n    // Function to sort the given doubly linked list using Merge Sort\n    DLLNode *sortDoubly(DLLNode *head) {\n        if (!head || !head->next)\n            return head;\n\n        DLLNode *second = splitList(head);\n        head = sortDoubly(head);\n        second = sortDoubly(second);\n\n        return merge(head, second);\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to sort the given doubly linked list using Merge Sort\n    public DLLNode sortDoubly(DLLNode node) {\n        if (node == null || node.next == null) {\n            return node;\n        }\n\n        // Splitting the list into two halves\n        DLLNode second = splitList(node);\n\n        // Calling the sortDoubly function recursively for both parts separately\n        node = sortDoubly(node);\n        second = sortDoubly(second);\n\n        // Calling the function to merge both halves\n        return merge(node, second);\n    }\n\n    // Function to split the list into two halves\n    public DLLNode splitList(DLLNode node) {\n        if (node == null || node.next == null) {\n            return null;\n        }\n\n        DLLNode fast = node, slow = node;\n\n        // First pointer, slow moves 1 node and second pointer, fast moves 2 nodes in\n        // one iteration\n        while (fast.next != null && fast.next.next != null) {\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n\n        DLLNode temp = slow.next;\n        slow.next = null;\n        return temp;\n    }\n\n    // Function to merge two halves of the list\n    public DLLNode merge(DLLNode first, DLLNode second) {\n        // Base cases when either of the two halves is null\n        if (first == null) {\n            return second;\n        }\n        if (second == null) {\n            return first;\n        }\n\n        // Comparing data in both halves and storing the smaller in result\n        if (first.data < second.data) {\n            first.next = merge(first.next, second);\n            if (first.next != null) {\n                first.next.prev = first;\n            }\n            first.prev = null;\n            return first;\n        } else {\n            second.next = merge(first, second.next);\n            if (second.next != null) {\n                second.next.prev = second;\n            }\n            second.prev = null;\n            return second;\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def merge(self, first, second):\n        if first is None:\n            return second\n        if second is None:\n            return first\n\n        if first.data < second.data:\n            first.next = self.merge(first.next, second)\n            if first.next:  # Ensure first.next is not None before accessing its prev\n                first.next.prev = first\n            first.prev = None\n            return first\n        else:\n            second.next = self.merge(first, second.next)\n            if second.next:  # Ensure second.next is not None before accessing its prev\n                second.next.prev = second\n            second.prev = None\n            return second\n\n    def split_list(self, head):\n        if head is None or head.next is None:\n            return None\n\n        slow, fast = head, head\n\n        while fast.next and fast.next.next:\n            fast = fast.next.next\n            slow = slow.next\n\n        temp = slow.next\n        slow.next = None\n        if temp:\n            temp.prev = None\n        return temp\n\n    def sort_doubly(self, head):\n        if head is None or head.next is None:\n            return head\n\n        second = self.split_list(head)\n        head = self.sort_doubly(head)\n        second = self.sort_doubly(second)\n\n        return self.merge(head, second)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to merge two halves of the list.\n    merge(first, second) {\n        if (first === null) {\n            return second;\n        }\n        if (second === null) {\n            return first;\n        }\n\n        if (first.data < second.data) {\n            first.next = this.merge(first.next, second);\n            if (first.next) {\n                first.next.prev = first;\n            }\n            first.prev = null;\n            return first;\n        } else {\n            second.next = this.merge(first, second.next);\n            if (second.next) {\n                second.next.prev = second;\n            }\n            second.prev = null;\n            return second;\n        }\n    }\n\n    // Function to sort the given doubly linked list using Merge Sort.\n    sortDoubly(head) {\n        if (head === null || head.next === null) {\n            return head;\n        }\n\n        // Splitting the list into two halves.\n        let second = this.split(head);\n\n        // Recursively sort both halves.\n        head = this.sortDoubly(head);\n        second = this.sortDoubly(second);\n\n        // Merge the sorted halves.\n        return this.merge(head, second);\n    }\n\n    // Function to split the list into two halves.\n    split(head) {\n        if (head === null || head.next === null) {\n            return null;\n        }\n\n        let slow = head;\n        let fast = head;\n\n        while (fast.next !== null && fast.next.next !== null) {\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n\n        let temp = slow.next;\n        slow.next = null;\n        if (temp) {\n            temp.prev = null;\n        }\n        return temp;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}