{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700150,
            "title": "Merge Sort",
            "titleSlug": "merge-sort",
            "content": "<p><span style=\"font-size: 18px;\">Given an array arr[], its starting position l and its ending position r. Sort the array using the merge sort algorithm.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 1, 3, 9, 7]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>[1, 3, 4, 7, 9]</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n<strong>Output: </strong>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 3 , 2]\n<strong>Output: </strong>[1, 2, 3]</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10</span><sup><span style=\"font-size: 15px;\">5</span></sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >How about using some additional storage space for merging the two halves?&nbsp;<br />Try looping through both the given halves till at least one of them gets exhausted.<br />For each intermediate step, you just need to keep the smaller element and increment the iterator of the array half which had that smaller element.</span></p>\n<p><span ><strong>Note:</strong> Take care of the case when one of the halves gets exhausted and the other does not. What will you do in that case?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "amazon",
            "microsoft",
            "snapdeal",
            "oracle",
            "goldman-sachs",
            "wipro",
            "qualcomm",
            "boomerang-commerce",
            "grofers",
            "target-corporation",
            "medlife"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    void merge(vector<int>& arr, int l, int m, int r) {\n        int i, j, k;\n        int n1 = m - l + 1;\n        int n2 = r - m;\n\n        /* create temp arrays */\n        int L[n1], R[n2];\n\n        /* Copy data to temp arrays L[] and R[] */\n        for (i = 0; i < n1; i++)\n            L[i] = arr[l + i];\n        for (j = 0; j < n2; j++)\n            R[j] = arr[m + 1 + j];\n\n        /* Merge the temp arrays back into arr[l..r]*/\n        i = 0; // Initial index of first subarray\n        j = 0; // Initial index of second subarray\n        k = l; // Initial index of merged subarray\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                arr[k] = L[i];\n                i++;\n            } else {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n\n        /* Copy the remaining elements of L[], if there\n           are any */\n        while (i < n1) {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n\n        /* Copy the remaining elements of R[], if there\n           are any */\n        while (j < n2) {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n\n  public:\n    void mergeSort(vector<int>& arr, int l, int r) {\n        if (l < r) {\n            // Same as (l+r)/2, but avoids overflow for\n            // large l and h\n            int m = l + (r - l) / 2;\n\n            // Sort first and second halves\n            mergeSort(arr, l, m);\n            mergeSort(arr, m + 1, r);\n\n            merge(arr, l, m, r);\n        }\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "/* The task is to complete merge() which is used\nin below mergeSort() */\n// Merges two subarrays of arr[].  First subarray is arr[l..m]\n// Second subarray is arr[m+1..r]\nclass Solution {\n\n    // Merges two subarrays of arr[].\n    // First subarray is arr[l..m]\n    // Second subarray is arr[m+1..r]\n    void merge(int arr[], int l, int m, int r) {\n        // Find sizes of two subarrays to be merged\n        int n1 = m - l + 1;\n        int n2 = r - m;\n\n        /* Create temp arrays */\n        int L[] = new int[n1];\n        int R[] = new int[n2];\n\n        /*Copy data to temp arrays*/\n        for (int i = 0; i < n1; ++i) L[i] = arr[l + i];\n        for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j];\n\n        /* Merge the temp arrays */\n\n        // Initial indexes of first and second subarrays\n        int i = 0, j = 0;\n\n        // Initial index of merged subarry array\n        int k = l;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                arr[k] = L[i];\n                i++;\n            } else {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n\n        /* Copy remaining elements of L[] if any */\n        while (i < n1) {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n\n        /* Copy remaining elements of L[] if any */\n        while (j < n2) {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n\n    // method for dividing the array into halves\n    public void mergeSort(int arr[], int l, int r) {\n\n        if (l < r) {\n            int m = (l + r) / 2;\n            mergeSort(arr, l, m);\n            mergeSort(arr, m + 1, r);\n            merge(arr, l, m, r);\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def merge(self, arr, l, m, r):\n        n1 = m - l + 1\n        n2 = r - m\n\n        L = [0] * (n1)\n        R = [0] * (n2)\n\n        for i in range(0, n1):\n            L[i] = arr[l + i]\n\n        for j in range(0, n2):\n            R[j] = arr[m + 1 + j]\n\n        i = 0  # Initial index of first subarray\n        j = 0  # Initial index of second subarray\n        k = l  # Initial index of merged subarray\n\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < n1:\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n    def mergeSort(self, arr, l, r):\n        if l < r:\n            m = l + (r - l) // 2\n\n            self.mergeSort(arr, l, m)\n            self.mergeSort(arr, m + 1, r)\n            self.merge(arr, l, m, r)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/* in below mergeSort() */\n// Merges two subarrays of arr[].  First subarray is arr[l..m]\n// Second subarray is arr[m+1..r]\nclass Solution {\n\n    // Merges two subarrays of arr[].\n    // First subarray is arr[l..m]\n    // Second subarray is arr[m+1..r]\n    merge(arr, l, m, r) {\n        // Find sizes of two subarrays to be merged\n        let n1 = m - l + 1;\n        let n2 = r - m;\n\n        /* Create temp arrays */\n        let L = new Array(n1);\n        let R = new Array(n2);\n\n        /*Copy data to temp arrays*/\n        for (let i = 0; i < n1; ++i) L[i] = arr[l + i];\n        for (let j = 0; j < n2; ++j) R[j] = arr[m + 1 + j];\n\n        /* Merge the temp arrays */\n\n        // Initial indexes of first and second subarrays\n        let i = 0, j = 0;\n\n        // Initial index of merged subarry array\n        let k = l;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                arr[k] = L[i];\n                i++;\n            } else {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n\n        /* Copy remaining elements of L[] if any */\n        while (i < n1) {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n\n        /* Copy remaining elements of L[] if any */\n        while (j < n2) {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n\n    // method for dividing the array into halves\n    mergeSort(arr, l, r) {\n\n        if (l < r) {\n            let m = Math.floor((l + r) / 2);\n            this.mergeSort(arr, l, m);\n            this.mergeSort(arr, m + 1, r);\n            this.merge(arr, l, m, r);\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}