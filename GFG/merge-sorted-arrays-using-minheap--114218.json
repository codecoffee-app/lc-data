{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881738,
            "title": "Merge Sorted Arrays Using Minheap",
            "titleSlug": "merge-sorted-arrays-using-minheap--114218",
            "content": "<p><span style=\"font-size: 18px;\">Given two sorted integer arrays <strong>a</strong>[] and <strong>b</strong>[], modify both arrays such that after merging their elements, the resultant array formed by combining <strong>a</strong>[] and <strong>b</strong>[] is sorted. The merging should be done in <strong>constant space</strong>.</span></p>\n<p><span style=\"font-size: 18px;\">Note: Use a <strong>min-heap</strong> to facilitate the required operations. Driver code will print array <strong>a</strong>[] and then array <strong>b</strong>[] in the output.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Input: </strong>a[] = [1, 5, 9, 10, 15, 20], b[] = [2, 3, 8, 13]<br /><strong>Output: </strong></span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">1 2 3 5 8 9 10 13 15 20&nbsp;&nbsp;</span></span></p>\n<p><strong style=\"font-size: 18px;\">Constraints:</strong><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">1 &lt;= a.size(), b.size() &lt;= 10</span><sup>5</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>The idea is to convert the second array into a min-heap first.</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n// Function to merge two sorted arrays in\n// constant space\nvoid mergeArrays(vector<int> &a, vector<int> &b) {\n\n    // Convert second array into a min_heap\n    // using make_heap() STL function [takes O(m)]\n    int n = a.size(), m = b.size();\n    make_heap(b.begin(), b.end(), greater<int>());\n\n    // Start traversing the first array\n    for (int i = 0; i < n; i++) {\n\n        // If current element is greater than root\n        // of min_heap\n        if (a[i] > b[0]) {\n\n            // Pop minimum element from min_heap using\n            // pop_heap() STL function\n            // The pop_heap() function removes the minimum element from\n            // heap and moves it to the end of the container\n            // converted to heap and reduces heap size by 1\n            pop_heap(b.begin(), b.end(), greater<int>());\n\n            // Swapping the elements\n            int tmp = a[i];\n            a[i] = b[m - 1];\n            b[m - 1] = tmp;\n\n            // Apply push_heap() function on the container\n            // or array to again reorder it in the\n            // form of min_heap\n            push_heap(b.begin(), b.end(), greater<int>());\n        }\n    }\n\n    // Convert the second array again into max_heap\n    // because sort_heap() on min heap sorts the array\n    // in decreasing order\n    // This step is [O(m)]\n    make_heap(b.begin(), b.end()); // It's a max_heap\n\n    // Sort the second array using sort_heap() function\n    sort_heap(b.begin(), b.end());\n}\n",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}