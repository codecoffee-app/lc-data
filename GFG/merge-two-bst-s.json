{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700440,
            "title": "Merge two BST 's",
            "titleSlug": "merge-two-bst-s",
            "content": "<p><span style=\"font-size: 18px;\">Given two BSTs, return elements of merged BSTs in <strong>sorted </strong>form.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root1 = [</span>5, 3, 6, 2, 4]<br /><span style=\"font-size: 18px;\">\\t 5\n&nbsp;    /   \\\n&nbsp;   3     6\n&nbsp;  / \\\n&nbsp; 2   4 <br /></span><span style=\"font-size: 18px;\">root2 = [</span>2, 1, 3, N, N, N, 7, 6, N<span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">]</span><br /><span style=\"font-size: 18px;\"><strong>&nbsp;\\t </strong>2\n&nbsp;     /   \\\n&nbsp;    1     3\n&nbsp;\\t     \\\n&nbsp;\\t\\t7\n&nbsp;\\t     /\n&nbsp;\\t    6\n<strong>Output: </strong>[1, 2, 2, 3, 3, 4, 5, 6, 6, 7]<strong>\nExplanation: </strong>After merging and sorting the two BST we get [1, 2, 2, 3, 3, 4, 5, 6, 6, 7]</span>.</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root1 = [12, 9, N, 6, 11]<strong>\n&nbsp;\\t</strong>12\n&nbsp;    /   \n&nbsp;   9\n&nbsp;  / \\ &nbsp;  \n&nbsp; 6   11\nroot2 = [8, 5, 10, 2]<strong>\n&nbsp;     </strong>8\n&nbsp;   /  \\\n&nbsp;  5    10\n&nbsp; /\n&nbsp;2\n<strong>Output: </strong>[2, 5, 6, 8, 9, 10, 11, 12]<strong>\nExplanation: </strong>After merging and sorting the two BST we get [2, 5, 6, 8, 9, 10, 11, 12]</span>.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; number of nodes, root-&gt;data &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two Binary Search Trees (BSTs), merge them into a single sorted array containing all elements from both trees.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= root->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root1 = [5, 3, 6, 2, 4]\nroot2 = [2, 1, 3, null, null, null, 7, 6, null]",
                        "output": "[1, 2, 2, 3, 3, 4, 5, 6, 6, 7]",
                        "explanation": "Merging the two BSTs and sorting the resulting elements gives [1, 2, 2, 3, 3, 4, 5, 6, 6, 7]."
                    },
                    {
                        "input": "root1 = [12, 9, null, 6, 11]\nroot2 = [8, 5, 10, 2]",
                        "output": "[2, 5, 6, 8, 9, 10, 11, 12]",
                        "explanation": "Merging the two BSTs and sorting the resulting elements gives [2, 5, 6, 8, 9, 10, 11, 12]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use two stacks to perform in-order traversal on both BSTs simultaneously, and always take the smaller element to maintain sorted order.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> merge(Node *root1, Node *root2) {\n        vector<int> res;\n        stack<Node *> s1, s2;\n        while (root1 || root2 || !s1.empty() || !s2.empty()) {\n            while (root1) {\n                s1.push(root1);\n                root1 = root1->left;\n            }\n            while (root2) {\n                s2.push(root2);\n                root2 = root2->left;\n            }\n            // Step 3 Case 1:-\n            if (s2.empty() || (!s1.empty() && s1.top()->data <= s2.top()->data)) {\n                root1 = s1.top();\n                s1.pop();\n                res.push_back(root1->data);\n                root1 = root1->right;\n            }\n            // Step 3 case 2 :-\n            else {\n                root2 = s2.top();\n                s2.pop();\n                res.push_back(root2->data);\n                root2 = root2->right;\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    public ArrayList<Integer> merge(Node root1, Node root2) {\n        ArrayList<Integer> res = new ArrayList<>();\n        Stack<Node> s1 = new Stack<>();\n        Stack<Node> s2 = new Stack<>();\n\n        while (root1 != null || root2 != null || !s1.isEmpty() || !s2.isEmpty()) {\n            // Traverse the left subtree of root1\n            while (root1 != null) {\n                s1.push(root1);\n                root1 = root1.left;\n            }\n            // Traverse the left subtree of root2\n            while (root2 != null) {\n                s2.push(root2);\n                root2 = root2.left;\n            }\n\n            // Compare the top elements of both stacks\n            if (s2.isEmpty() || (!s1.isEmpty() && s1.peek().data <= s2.peek().data)) {\n                root1 = s1.pop();\n                res.add(root1.data);\n                root1 = root1.right; // Move to the right subtree\n            } else {\n                root2 = s2.pop();\n                res.add(root2.data);\n                root2 = root2.right; // Move to the right subtree\n            }\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def merge(self, root1, root2):\n        res = []\n        s1, s2 = [], []\n\n        while root1 or root2 or s1 or s2:\n            while root1:\n                s1.append(root1)\n                root1 = root1.left\n            while root2:\n                s2.append(root2)\n                root2 = root2.left\n\n            if not s2 or (s1 and s1[-1].data <= s2[-1].data):\n                root1 = s1.pop()\n                res.append(root1.data)\n                root1 = root1.right\n            else:\n                root2 = s2.pop()\n                res.append(root2.data)\n                root2 = root2.right\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    merge(root1, root2) {\n        const res = [];\n        const s1 = [];\n        const s2 = [];\n\n        while (root1 || root2 || s1.length || s2.length) {\n            while (root1) {\n                s1.push(root1);\n                root1 = root1.left;\n            }\n            while (root2) {\n                s2.push(root2);\n                root2 = root2.left;\n            }\n\n            if (!s2.length ||\n                (s1.length && s1[s1.length - 1].data <= s2[s2.length - 1].data)) {\n                root1 = s1.pop();\n                res.push(root1.data);\n                root1 = root1.right;\n            } else {\n                root2 = s2.pop();\n                res.push(root2.data);\n                root2 = root2.right;\n            }\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}