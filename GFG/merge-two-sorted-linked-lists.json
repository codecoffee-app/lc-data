{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700176,
            "title": "Merge two sorted linked lists",
            "titleSlug": "merge-two-sorted-linked-lists",
            "content": "<p><span style=\"font-size: 18px;\">Given the <strong>head</strong> of two&nbsp;<strong>sorted linked lists&nbsp;</strong>consisting of nodes respectively. The task is to&nbsp;<strong>merge</strong>&nbsp;both lists and return the&nbsp;<strong>head&nbsp;</strong>of the&nbsp;<strong>sorted merged list</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>head1 = 5 -&gt; 10 -&gt; 15 -&gt; 40, head2 = 2 -&gt; 3 -&gt; 20\n<strong>Output: </strong>2 -&gt; 3 -&gt; 5 -&gt; 10 -&gt; 15 -&gt; 20 -&gt; 40<strong>\nExplanation:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700176/Web/Other/blobid1_1722768650.png\" width=\"395\" height=\"158\" /></strong></span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: head1 = 1 -&gt; 1, head2 = 2 -&gt; 4\n<strong>Output: </strong>1 -&gt; 1 -&gt; 2 -&gt; 4<strong>\nExplanation:<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700176/Web/Other/blobid3_1722768742.png\" width=\"393\" height=\"157\" /></strong></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= no. of nodes&lt;= 10<sup>3</sup><br />0 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>To merge two sorted linked lists, iteratively compare the head nodes, attach the smaller one to the merged list, and continue until all nodes are merged.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho",
            "flipkart",
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "factset",
            "makemytrip",
            "oracle",
            "brocade",
            "synopsys",
            "oats-systems",
            "belzabar"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n//    Function to merge two sorted linked lists\nstruct Node* sortedMerge(struct Node* head1, struct Node* head2) {\n    // creating a dummy node to attach the merged list\n    struct Node* dummy = newNode(0);\n    struct Node* tail = dummy;\n\n    // merging the two lists while maintaining the sorted order\n    while (head1 && head2) {\n        if (head1->data <= head2->data) {\n            tail->next = head1;\n            head1 = head1->next;\n        } else {\n            tail->next = head2;\n            head2 = head2->next;\n        }\n        tail = tail->next;\n    }\n\n    // Attach remaining nodes from either list\n    tail->next = head1 ? head1 : head2;\n    return dummy->next;\n}\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to merge two sorted linked lists\n    Node* sortedMerge(Node* head1, Node* head2) {\n        // creating a dummy node to attach the merged list\n        Node* dummy = new Node(0);\n        Node* tail = dummy;\n\n        // merging the two lists while maintaining the sorted order\n        while (head1 && head2) {\n            if (head1->data <= head2->data) {\n                tail->next = head1;\n                head1 = head1->next;\n            } else {\n                tail->next = head2;\n                head2 = head2->next;\n            }\n            tail = tail->next;\n        }\n\n        // Attach remaining nodes from either list\n        tail->next = head1 ? head1 : head2;\n        return dummy->next;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to merge two sorted linked list.\n    Node sortedMerge(Node head1, Node head2) {\n        // Creating a dummy node to serve as the starting point for the result list\n        Node dummyNode = new Node(0);\n\n        // Tail node to keep track of the end of the merged list\n        Node tail = dummyNode;\n\n        // Merge the lists\n        while (head1 != null && head2 != null) {\n            if (head1.data <= head2.data) {\n                tail.next = head1;\n                head1 = head1.next;\n            } else {\n                tail.next = head2;\n                head2 = head2.next;\n            }\n            tail = tail.next;\n        }\n\n        // Append the remaining nodes of whichever list is not yet exhausted\n        if (head1 != null) {\n            tail.next = head1;\n        } else {\n            tail.next = head2;\n        }\n\n        // Return the merged list starting from the first actual node (dummyNode.next)\n        return dummyNode.next;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Class to merge two sorted linked lists\nclass Solution:\n    # Function to merge two sorted linked lists.\n    def sortedMerge(self, head1, head2):\n        # Creating a dummy node to hang the result on.\n        dummy = Node(0)\n        tail = dummy\n\n        # Merge both lists until one becomes empty\n        while head1 is not None and head2 is not None:\n            if head1.data <= head2.data:\n                tail.next = head1\n                head1 = head1.next\n            else:\n                tail.next = head2\n                head2 = head2.next\n            tail = tail.next\n\n        # Attach the remaining nodes of whichever list is not empty\n        if head1 is not None:\n            tail.next = head1\n        else:\n            tail.next = head2\n\n        return dummy.next\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to merge two sorted linked lists.\n    sortedMerge(head1, head2) {\n        let dummy = new Node(0); // Create a dummy node to start the merged list.\n        let tail =\n            dummy; // Initialize a tail pointer to keep track of the current node.\n\n        while (head1 !== null && head2 !== null) {\n            if (head1.data <=\n                head2.data) {       // Compare the data of the nodes in both lists.\n                tail.next = head1;  // Connect the smaller node to the merged list.\n                head1 = head1.next; // Move the pointer of the smaller list.\n            } else {\n                tail.next = head2;  // Connect the smaller node to the merged list.\n                head2 = head2.next; // Move the pointer of the other list.\n            }\n            tail =\n                tail.next; // Move the tail pointer to the last node of the merged list.\n        }\n\n        tail.next = (head1 !== null)\n                        ? head1\n                        : head2; // Connect the remaining nodes to the merged list.\n\n        return dummy.next; // Return the merged list starting from the next node of the\n                           // dummy node.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}