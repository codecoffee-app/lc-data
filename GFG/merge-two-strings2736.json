{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703250,
            "title": "Merge two strings",
            "titleSlug": "merge-two-strings2736",
            "content": "<p><span style=\"font-size:18px\">Given two&nbsp;strings <strong>S1</strong> and <strong>S2</strong> as input, the task is to merge them alternatively i.e. the first character of S1&nbsp;then the first character of S2 and so on till the strings end.</span><br />\n<span style=\"font-size:18px\"><strong>NOTE:</strong>&nbsp;Add the whole string if other string is empty.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS1 = &quot;Hello&quot; S2 = &quot;Bye&quot;\n<strong>Output:</strong> HBeylelo\n<strong>Explanation</strong>: The characters of both the \ngiven strings are arranged alternatlively.</span>\n</pre>\n\n<p><span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nS1 = &quot;abc&quot;, S2 = &quot;def&quot;\n<strong>Output:</strong> adbecf\n<strong>Explanation</strong>: The characters of both the\ngiven strings are arranged alternatlively.\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>merge()&nbsp;</strong>which takes the strings S1 and S2 as input and returns the resultant string by merging both S1 and S2 alternatively starting from S1.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S1| + |S2|).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=|S1|, |S2| &lt;=10<sup>3</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, S1 and S2, merge them alternatively, taking characters first from S1, then from S2, and so on, until both strings are exhausted. If one string is longer than the other, append the remaining characters of the longer string to the end of the merged string.",
                "constraints": [
                    "1 <= |S1|, |S2| <= 1000"
                ],
                "testcases": [
                    {
                        "input": "S1 = \"Hello\", S2 = \"Bye\"",
                        "output": "HBeylelo",
                        "explanation": "The characters of both strings are arranged alternatively: 'H' from S1, 'B' from S2, 'e' from S1, 'y' from S2, and then the remaining characters of S1 ('llo')."
                    },
                    {
                        "input": "S1 = \"abc\", S2 = \"def\"",
                        "output": "adbecf",
                        "explanation": "The characters of both strings are arranged alternatively: 'a' from S1, 'd' from S2, 'b' from S1, 'e' from S2, 'c' from S1, 'f' from S2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse both the string till the length of the smaller string and then traverse the remaining characters of the larger string.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "goldman-sachs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "string merge (string s1, string s2)\n{\n    string res = \"\";\n    int i = 0, j = 0;\n    \n    // merging both till one exhausts\n    while (i < s1.length () and j < s2.length ())\n    {\n        res += s1[i++];\n        res += s2[j++];\n    }\n\n    // merging the left over part of the larger string\n    while (i < s1.length ()) res += s1[i++];\n    while (j < s2.length ()) res += s2[j++];\n\n    return res;\n}\n\n// Contributed By: Pranay Bansal\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution \n{ \n    String merge(String S1, String S2)\n    { \n        StringBuilder res = new StringBuilder();\n        int i = 0, j = 0;\n        // merging both till one exhausts\n        while (i < S1.length() && j < S2.length())\n        {\n            res.append(S1.charAt(i++));\n            res.append(S2.charAt(j++));\n        }\n        // merging the left over part of the larger string\n        while (i < S1.length ()) res.append(S1.charAt(i++));\n        while (j < S2.length ()) res.append(S2.charAt(j++));\n        return res.toString();\n    }\n} ",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    def merge(self, S1, S2):\n        res = ''\n        i = 0\n        j = 0\n        # merging both till one exhausts\n        while i < len(S1) and j < len(S2):\n            res += S1[i]\n            res += S2[j]\n            i+=1\n            j+=1\n        # merging the left over part of the larger string\n        while i < len(S1):\n            res += S1[i]\n            i+=1\n        while j < len(S2):\n            res += S2[j]\n            j+=1\n        return res",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S1\n * @param {string} S2\n * @returns {string}\n*/\n\nclass Solution {\n    //Function to merge two strings.\n    merge(S1, S2)\n    {\n        let res = '';\n        let i = 0;\n        let j = 0;\n        // merging both till one exhausts\n        while (i < S1.length && j < S2.length) {\n            res += S1[i];\n            res += S2[j];\n            i++;\n            j++;\n        }\n        // merging the left over part of the larger string\n        while (i < S1.length) {\n            res += S1[i];\n            i++;\n        }\n        while (j < S2.length) {\n            res += S2[j];\n            j++;\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}