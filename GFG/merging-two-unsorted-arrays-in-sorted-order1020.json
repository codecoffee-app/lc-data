{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703364,
            "title": "Merging two unsorted arrays in sorted order",
            "titleSlug": "merging-two-unsorted-arrays-in-sorted-order1020",
            "content": "<p><span style=\"font-size: 18px;\">Given two different arrays <strong>arr1[]</strong> and <strong>arr2[]</strong>, the task is to merge the two unsorted arrays and return a sorted array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1[] = [10, 5, 15] , arr2[] = [20, 3, 2]\n<strong>Output:</strong> [2, 3, 5, 10, 15, 20]\n<strong>Explanation</strong>: After merging both the array's and sorting it with get the desired output.  \n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1[] = [1, 10, 5, 15] , arr2[] = [20, 0, 2]\n<strong>Output:</strong> [0, 1, 2, 5, 10, 15, 20]\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O (nlogn + mlogm + (n + m))<br /><strong>Expected Auxiliary Space:</strong> O(n+m).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr1.size(), arr2.size()&le; 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">-</span><span style=\"font-size: 18px;\">10</span><sup>5</sup><span style=\"font-size: 18px;\"> &le; arr1[i], arr2[i]&le; 10</span><sup>5</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two distinct unsorted arrays, `arr1` and `arr2`, merge them into a single sorted array. Return the resulting sorted array.",
                "constraints": [
                    "1 <= arr1.size(), arr2.size() <= 10^5",
                    "-10^5 <= arr1[i], arr2[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [10, 5, 15], arr2 = [20, 3, 2]",
                        "output": "[2, 3, 5, 10, 15, 20]",
                        "explanation": "The merged array [10, 5, 15, 20, 3, 2] when sorted yields [2, 3, 5, 10, 15, 20]."
                    },
                    {
                        "input": "arr1 = [1, 10, 5, 15], arr2 = [20, 0, 2]",
                        "output": "[0, 1, 2, 5, 10, 15, 20]",
                        "explanation": "The merged array [1, 10, 5, 15, 20, 0, 2] when sorted yields [0, 1, 2, 5, 10, 15, 20]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the array elements and apply merge sort.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "amdocs"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n\n  public:\n    void sortedMerge(vector<int>& arr1, vector<int>& arr2, vector<int>& res) {\n        // Sorting arr1[] and arr2[]\n        sort(arr1.begin(), arr1.end());\n        sort(arr2.begin(), arr2.end());\n        int n = arr1.size();\n        int m = arr2.size();\n        // Merge two sorted arrays into res[]\n        int i = 0, j = 0, k = 0;\n        while (i < n && j < m) {\n            if (arr1[i] <= arr2[j]) {\n                res[k] = arr1[i];\n                i += 1;\n                k += 1;\n            } else {\n                res[k] = arr2[j];\n                j += 1;\n                k += 1;\n            }\n        }\n        // Merging remaining\n        // elements of arr1[] (if any)\n        while (i < n) {\n            res[k] = arr1[i];\n            i += 1;\n            k += 1;\n        }\n        // Merging remaining\n        // elements of arr2[] (if any)\n        while (j < m) {\n            res[k] = arr2[j];\n            j += 1;\n            k += 1;\n        }\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public void sortedMerge(int[] arr1, int[] arr2, int[] res) {\n        int i = 0, j = 0, k = 0;\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1[i] < arr2[j]) {\n                res[k++] = arr1[i++];\n            } else {\n                res[k++] = arr2[j++];\n            }\n        }\n        while (i < arr1.length) {\n            res[k++] = arr1[i++];\n        }\n        while (j < arr2.length) {\n            res[k++] = arr2[j++];\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def sortedMerge(self, arr1, arr2, res):\n        i = 0  # Pointer for arr1\n        j = 0  # Pointer for arr2\n        k = 0  # Pointer for res\n        arr1.sort()\n        arr2.sort()\n\n        # Traverse both arrays and place the smaller element into res\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                res[k] = arr1[i]\n                i += 1\n            else:\n                res[k] = arr2[j]\n                j += 1\n            k += 1\n\n        # If any elements are left in arr1, add them to res\n        while i < len(arr1):\n            res[k] = arr1[i]\n            i += 1\n            k += 1\n\n        # If any elements are left in arr2, add them to res\n        while j < len(arr2):\n            res[k] = arr2[j]\n            j += 1\n            k += 1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    sortedMerge(arr1, arr2, res) {\n        let i = 0, j = 0, k = 0;\n        arr1.sort((a, b) => a - b);\n        arr2.sort((a, b) => a - b);\n        while (i < arr1.length && j < arr2.length) {\n            if (arr1[i] < arr2[j]) {\n                res[k++] = arr1[i++];\n            } else {\n                res[k++] = arr2[j++];\n            }\n        }\n        while (i < arr1.length) {\n            res[k++] = arr1[i++];\n        }\n        while (j < arr2.length) {\n            res[k++] = arr2[j++];\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}