{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704608,
            "title": "Mersenne Prime",
            "titleSlug": "mersenne-prime1438",
            "content": "<p><span style=\"font-size:18px\">Mersenne Prime is a prime number that is one less than a power of two. In other words, any prime is Mersenne Prime if it is of the form 2<sup>k</sup>-1 where k is an integer greater than or equal to 2. First few Mersenne Primes are 3, 7, 31 and 127.<br />\nThe task is to find&nbsp;all Mersenne Primes smaller than equal to&nbsp;an input positive integer n.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 10\n<strong>Output: </strong>3 7\n<strong>Explanation:</strong>3 and 7 are only prime numbers\nwhich are less than equal to 10 and in the\nform of 2<sup>k</sup>&nbsp;- 1. </span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 100\n<strong>Output: </strong>3 7 31\n<strong>Explanation: </strong>3, 7 and 31 are only prime\nnumbers which are less than equal to 100\nand in the form of 2<sup>k</sup>&nbsp;- 1.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything. Your task is to complete the function <strong>AllMersennePrimeNo()</strong>&nbsp;which takes n as input parameter and returns a list of all Mersenne Primes less than or equal to n in sorted order.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n * log(log(n))<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(n)<br />\n<br />\n<strong>Constraints:&nbsp;</strong><br />\n1 &lt;= n &lt;= 100000&nbsp;</span><br />\n&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Calculate Sieve of&nbsp;Eratosthenes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n\tpublic:\n\t\n\t//Function to generate all prime numbers using Sieve of Eratosthenes.\n\tvector<int> sieve(int n) {    \n\t    bool prim[n+1];\n\t    memset(prim, true, sizeof(prim));\n\t    \n\t    //Iterating from 2 to sqrt(n) to mark all non-prime numbers as false.\n\t    for (int p=2; p*p<=n; p++) {\n\t        if (prim[p] == true) {\n\t            for (int i=p*p; i<=n; i += p)\n\t                prim[i] = false;\n\t        }\n\t    }\n\t    \n\t    //Creating a vector to store all the prime numbers.\n\t    vector<int>v;\n\t    \n\t    //Iterating from 2 to n and adding all the prime numbers to the vector.\n\t    for(int i=2;i<=n;i++)if(prim[i])v.push_back(i);\n\t    \n\t    //Returning the vector of prime numbers.\n\t    return v;\n\t}\n\t\n\t//Function to find all Mersenne Prime numbers up to a given number N.\n\tvector<int> AllMersennePrimeNo(int N)\n\t{\n\t\t//Generating a vector of prime numbers up to N using the sieve function.\n\t\tvector<int>prime = sieve(N);\n\t\t\n\t\t//Creating a frequency vector to store the frequency of each prime number.\n\t\tvector<int>freq(N+1,0);\n\t\t\n\t\t//Counting the frequency of each prime number in the prime vector.\n\t\tfor(auto i: prime)\n\t\t\tfreq[i]++;\n\t\t\n\t\t//Creating a vector to store all the Mersenne Prime numbers.\n\t\tvector<int>v;\n\t\t\n\t\t//Looping from i = 1 till the condition is met.\n\t\tfor(int i = 1; ; i++){\n\t\t\tint x = (1 << i) - 1; //Calculating the value of (2^i) - 1.\n\t\t\t\n\t\t\t//If the value of x is less than or equal to N and its frequency is non-zero,\n\t\t\t//then it is a Mersenne Prime number. So, add it to the vector.\n\t\t\tif(x <= N){\n\t\t\t\tif(freq[x])\n\t\t\t\tv.push_back(x);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\t//Returning the vector of Mersenne Prime numbers.\n\t\treturn v;\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public List<int> AllMersennePrimeNo(int N)\n    {\n        bool[] prim = new bool[N+1];\n        for (int i = 0; i <= N; i++)\n        {\n            prim[i] = true;\n        }\n\n        for (int p = 2; p * p <= N; p++)\n        {\n            if (prim[p] == true)\n            {\n                for (int i = p * p; i <= N; i += p)\n                {\n                    prim[i] = false;\n                }\n            }\n        }\n\n        List<int> v = new List<int>();\n\n        for (int i = 2; i <= N; i++)\n        {\n            if (prim[i])\n            {\n                v.Add(i);\n            }\n        }\n\n        List<int> freq = new List<int>(new int[N+1]);\n\n        foreach (int i in v)\n        {\n            freq[i]++;\n        }\n        \n        List<int> res = new List<int>();\n\n        for (int i = 1; ; i++)\n        {\n            int x = (1 << i) - 1;\n            if (x <= N)\n            {\n                if (freq[x] != 0)\n                {\n                    res.Add(x);\n                }\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}