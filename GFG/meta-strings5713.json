{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703252,
            "title": "Meta Strings",
            "titleSlug": "meta-strings5713",
            "content": "<p><span style=\"font-size:18px\">Given two strings consisting of lowercase english alphabets, the task is to check whether these strings are meta strings or not. Meta strings are the strings which can be made equal by exactly one swap in any of the strings. Equal string are not considered here as Meta strings.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS1 = &quot;geeks&quot;, S2 = &quot;keegs&quot;\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: We can swap the 0th and 3rd\ncharacter of S2 to make it equal to S1.</span>\n</pre>\n\n<p><span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nS1 = &quot;geeks&quot;, S2 = &quot;geeks&quot;\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: Equal strings are not considered\nMeta strings.</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>metaStrings()&nbsp;</strong>which takes the strings S1 and S2&nbsp;as input and returns true if both the strings are meta strings, else it returns false.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=|S|&lt;=10<sup>5</sup></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `S1` and `S2`, consisting of lowercase English alphabets, determine if they are meta-strings. Meta-strings are defined as strings that can be made equal by performing exactly one swap of characters within either of the strings. Note that identical strings are not considered meta-strings.",
                "constraints": [
                    "1 <= |S| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "S1 = \"geeks\", S2 = \"keegs\"",
                        "output": "1",
                        "explanation": "Swapping the 0th and 3rd characters of `S2` results in \"geeks\", which is equal to `S1`."
                    },
                    {
                        "input": "S1 = \"geeks\", S2 = \"geeks\"",
                        "output": "0",
                        "explanation": "The strings are identical, and equal strings are not considered meta-strings."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">First check if the length of both the strings is same or not.<br />\nSecond check whether the frequency of each character in the 2 words is same or not.<br />\nIf any of the above 2 conditions fail, return false. Else we need to check whether the conversion is possible just in a single swap.</span></p>\n\n<p><span style=\"font-size:18px\">Note, that in a single swap, the position of exactly 2 characters can be changed.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nbool metaStrings (string s1, string s2)\n{\n    int freq[26] = {0};\n    // if the lengths are different, we cannot make them equal\n    if (s1.length () != s2.length ()) return 0;\n    \n    for (int i = 0; i < s1.length (); ++i)\n    {\n        // increasing the frequency by 1 if the character is present in s1\n        // and decreasing the frequency by 1 if the character is present in s2\n        freq[s1[i] - 'a']++;\n        freq[s2[i] - 'a']--;\n    }\n    \n    // if any character has non-zero frequency, it means there's an unbalance\n    // of that character in both the strings\n    // hence, we return false in that case\n    for (int i = 0; i < 26; ++i)\n    {\n        if (freq[i] != 0) return 0;\n    }\n\n    int cnt = 0;\n    for (int i = 0; i < s1.length (); ++i)\n    {\n        if (s1[i] != s2[i]) cnt++;\n    }\n    \n    // if different positions are equal to 2, we can swap them\n    return (cnt == 2);\n}\n// Contributed By: Pranay Bansal\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution \n{ \n    boolean metaStrings(String S1, String S2) \n    { \n        int freq[] = new int[26];\n        Arrays.fill(freq,0);\n        // if the lengths are different, we cannot make them equal\n        if (S1.length () != S2.length ()) return false;\n    \n        for (int i = 0; i < S1.length (); ++i)\n        {\n            // increasing the frequency by 1 if the character is present in s1\n            // and decreasing the frequency by 1 if the character is present in s2\n            freq[S1.charAt(i) - 'a']++;\n            freq[S2.charAt(i) - 'a']--;\n        }\n    \n        // if any character has non-zero frequency, it means there's an unbalance\n        // of that character in both the strings\n        // hence, we return false in that case\n        for (int i = 0; i < 26; ++i)\n        {\n            if (freq[i] != 0) return false;\n        }\n        int cnt = 0;\n        for (int i = 0; i < S1.length (); ++i)\n        {\n            if (S1.charAt(i) != S2.charAt(i)) cnt++;\n        }\n    \n        // if different positions are equal to 2, we can swap them\n        return (cnt == 2);\n    }\n} ",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    def metaStrings(self, S1, S2): \n        freq = [0]*26\n        if len(S1) != len(S2):\n            return 0\n        for i in range(len(S1)):\n            # increasing the frequency by 1 if the character is present in s1\n            # and decreasing the frequency by 1 if the character is present in s2\n            freq[ord(S1[i]) - ord('a')]+=1\n            freq[ord(S2[i]) - ord('a')]-=1\n        # if any character has non-zero frequency, it means there's an unbalance\n        # of that character in both the strings\n        # hence, we return false in that case\n        for i in range(26):\n            if freq[i] != 0:\n                return 0\n        cnt = 0\n        for i in range(len(S1)):\n            if S1[i] != S2[i]: \n                cnt+=1\n        #  if different positions are equal to 2, we can swap them\n        return (cnt == 2)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S1\n * @param {string} S2\n * @returns {boolean}\n*/\n\nclass Solution {\n    //Function to check if the given strings are meta strings or not.\n    metaStrings(S1, S2)\n    {\n        let freq = new Array(26).fill(0);\n        if (S1.length !== S2.length) {\n            return false;\n        }\n        for (let i = 0; i < S1.length; i++) {\n            // increasing the frequency by 1 if the character is present in S1\n            // and decreasing the frequency by 1 if the character is present in S2\n            freq[S1.charCodeAt(i) - 'a'.charCodeAt(0)] += 1;\n            freq[S2.charCodeAt(i) - 'a'.charCodeAt(0)] -= 1;\n        }\n        // if any character has non-zero frequency, it means there's an unbalance\n        // of that character in both the strings\n        // hence, we return false in that case\n        for (let i = 0; i < 26; i++) {\n            if (freq[i] !== 0) {\n                return false;\n            }\n        }\n        let cnt = 0;\n        for (let i = 0; i < S1.length; i++) {\n            if (S1.charAt(i) !== S2.charAt(i)) {\n                cnt += 1;\n            }\n        }\n        //  if different positions are equal to 2, we can swap them\n        return (cnt === 2);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}