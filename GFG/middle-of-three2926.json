{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704382,
            "title": "Middle of Three",
            "titleSlug": "middle-of-three2926",
            "content": "<p><span >Given three distinct numbers a, b and c. Find the number with a value in the middle (Try to do it with minimum comparisons).</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>a = 978, b = 518, c = 300\n<strong>Output: </strong>518\n<strong>Explanation: </strong>Since 518&gt;300 and 518&lt;978, so 518 is the middle element.</span></pre>\n<pre><span ><strong>Input: </strong>a = 162, b = 934, c = 200\n<strong>Output: </strong>200\n<strong>Exaplanation: </strong>Since 200&gt;162 &amp;&amp; 200&lt;934, So, 200 is the middle element.<br /></span></pre>\n<pre><span ><strong>Input: </strong>a = 246, b = 214, c = 450\n<strong>Output: </strong>246</span></pre>\n<p><span ><strong>Constraints:</strong><br />1&lt;=a, b, c&lt;=10<sup>9</sup><br />a, b, c are distinct.&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three distinct numbers `a`, `b`, and `c`, determine the number that lies in between the other two in value. Aim for a solution with minimal comparisons.",
                "constraints": [
                    "1 <= a, b, c <= 10^9",
                    "a, b, and c are distinct."
                ],
                "testcases": [
                    {
                        "input": "a = 978, b = 518, c = 300",
                        "output": "518",
                        "explanation": "518 is greater than 300 and less than 978, therefore it is the middle element."
                    },
                    {
                        "input": "a = 162, b = 934, c = 200",
                        "output": "200",
                        "explanation": "200 is greater than 162 and less than 934, therefore it is the middle element."
                    },
                    {
                        "input": "a = 246, b = 214, c = 450",
                        "output": "246",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use comparisons to find the second-largest value among the three numbers by leveraging nested ternary operators.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    int middle(int a, int b, int c) {\n        if (a < b)\n            return (b < c) ? b : max(a, c);\n        return (a < c) ? a : max(b, c);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find the middle number among three integers\n    int middle(int a, int b, int c) {\n        // if a is less than b\n        if (a < b)\n            // return b if b is less than c, else return the maximum of a and c\n            return (b < c) ? b : Math.max(a, c);\n        // if a is greater than or equal to b\n        return (a < c) ? a : Math.max(b, c); // return a if a is less than c, else\n                                             // return the maximum of b and c\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to find the middle element among three given numbers.\n    def middle(self, a, b, c):\n        # Checking if a is less than b.\n        if a < b:\n            # If b is smaller than c, return b.\n            return b if b < c else max(a, c)\n        # If a is not less than b.\n        else:\n            # If a is smaller than c, return a.\n            if a < c:\n                return a\n            # If a is not smaller than c, return maximum of b and c.\n            else:\n                return max(b, c)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    middle(a, b, c) {\n        if (a < b) // Check if a is less than b\n            return (b < c)\n                       ? b\n                       : Math.max(a, c); // If b is less than c, return b. Otherwise,\n                                         // return the maximum of a and c.\n        return (a < c) ? a\n                       : Math.max(b, c); // If a is less than c, return a. Otherwise,\n                                         // return the maximum of b and c.\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}