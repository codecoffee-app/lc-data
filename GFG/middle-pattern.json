{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700347,
            "title": "Middle Pattern",
            "titleSlug": "middle-pattern",
            "content": "<p><span style=\"font-size:20px\">Given an <strong>odd</strong> length word your task is to complete the function <strong>printPattern</strong> that takes a string s as its argument and prints it from the middle of the word such that it follows&nbsp;the following&nbsp;pattern.</span><br />\n&nbsp;</p>\n\n<pre>\n<span style=\"font-size:20px\"><strong>Input:</strong> PROGRAM \n<strong>Output:</strong>\nG$ GR$ GRA$ GRAM$ \nGRAMP$ GRAMPR$ GRAMPRO$\n\n<strong>Input:</strong> RAT\n<strong>Output:</strong>\nA$ AT$ ATR$\n\n<strong>NOTE: </strong>\nCorresponding to each test case in a new \nline print the pattern in a&nbsp;&nbsp;single \nline where each row of the pattern&nbsp;\nis separated by a <strong>&quot;$&quot;</strong> instead \nof a new line.\n</span></pre>\n\n<p><span style=\"font-size:20px\"><strong>Constraints:</strong><br />\n1 &le; T &le; 20<br />\n1&lt;=size of string(s)&lt;=20</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an odd-length word, complete the function `printPattern` that takes a string `s` as input and prints a pattern starting from the middle character of the word. The pattern should extend outwards, one character at a time, from the middle towards both ends of the word.",
                "constraints": [
                    "1 <= T <= 20 (where T is the number of test cases)",
                    "1 <= size of string(s) <= 20",
                    "The input string will always have an odd length."
                ],
                "testcases": [
                    {
                        "input": "PROGRAM",
                        "output": "G$ GR$ GRA$ GRAM$ GRAMP$ GRAMPR$ GRAMPRO$",
                        "explanation": "The middle character is 'G'. The pattern expands outwards: 'G', 'GR', 'GRA', 'GRAM', 'GRAMP', 'GRAMPR', 'GRAMPRO'."
                    },
                    {
                        "input": "RAT",
                        "output": "A$ AT$ ATR$",
                        "explanation": "The middle character is 'A'. The pattern expands outwards: 'A', 'AT', 'ATR'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Start from the middle, i.e. <strong>length of S / 2</strong>&nbsp;and start adding all individual characters.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "pattern-printing",
                "slug": "pattern-printing"
            }
        ],
        "companies": [
            "zoho"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Function to print the pattern formed using the given string.\n\nvoid printPattern(string s)\n{\n    int k=s.size()/2; //Calculating the mid point of the string length\n\n    //Splitting the string into two parts, r and t\n    string r = s.substr(0,k);\n    string t = s.substr(k);\n\n    t+=r; //Concatenating r and t to get the pattern\n\n    //Iterating through the pattern and printing each substring followed by a \"$\"\n    for(int i=0;i<s.length();i++)\n    {\n        string r = t.substr(0,i+1);\n        cout<<r<<\"$ \";\n    }\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class GfG\n{\n    //Method to print a pattern using a given string\n    void printPattern(String s)\n    {\n        //Calculating the mid point of the string\n        int k=s.length()/2;\n        //Extracting the first half of the string\n        String r=s.substring(0,k);\n        //Extracting the second half of the string\n        String t=s.substring(k);\n        //Concatenating the second half of the string with the first half\n        t+=r;\n        \n        //Loop to iterate over the string\n        for(int i=0;i<s.length();i++)\n        {\n            //Extracting a substring of increasing length\n            r=t.substring(0,i+1);\n            //Printing the substring followed by a $\n            System.out.print(r+\"$ \");\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "import sys\n\n# Function to get the substring from index i to j\ndef substr(a, i, j):\n    sub = ''\n    for t in range(i, j):\n        sub+=a[t]\n    return sub\n\n# Function to print the pattern\ndef printPattern(str):\n    k = len(str)//2\n    low = substr(str, 0, k)\n    high = substr(str, k, len(str))\n    # Concatenate the high substring with the low substring\n    high+=low\n    # Loop to print the pattern\n    for i in range(0, len(str)):\n        # Get the substring from the high string\n        r = substr(high, 0, i+1)\n        # Print the substring followed by a space\n        sys.stdout.write(r+'$ ')\n    # Print a new line\n    print('')",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Solution{\n    printPattern(str){\n        let k = Math.floor(str.length/2);\n\n        let r = str.substr(0,k);\n        let t = str.substr(k);\n        t += r;\n\n        let result = '';\n        for(let i=0;i<str.length;i++){\n            let r = t.substr(0,i+1);\n            result += r+\"$ \";\n        }\n\n        console.log(result);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}