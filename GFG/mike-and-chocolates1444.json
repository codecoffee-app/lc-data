{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705017,
            "title": "Mike and Chocolates",
            "titleSlug": "mike-and-chocolates1444",
            "content": "<p><span style=\"font-size: 18px;\">Mike is a seventh-grade student and today is his birthday. He wishes to distribute a chocolate each among his friends. He already knows all of his friends have some chocolates with them.<br />All his friends stand in a straight line. Mike can take all the chocolates of any one of his friends. Find the minimum number of chocolate he should have from the starting so that he can end up in giving minimum of a chocolate each to all his friends.&nbsp;<br />He will visit all his friends only once in the order 1,2, ... N.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>nums = {2, 3, 1, 2, 5, 2}\n<strong>Output: </strong>3\n<strong>Explanation: </strong>If he takes the chocolates of \nhis 2nd friend. Then before coming to the \n2nd friend he needs 1 chocolate. Now \nincluding his 2nd friend he needs minimum \nof 2 chocolates after taking the chocolates \nof his 2nd friend. </span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>nums = {1, 2, 3}\n<strong>Output: </strong>1\n<strong>Explanation: </strong>If he takes the chocolates of his \n2nd friend then he only needs 1 chocolate.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>MinimumChocolate()</strong> which takes a list that contains the number of chocolates his friends have initially and returns the minimum number of chocolates needed to distribute minimum of a chocolate to every friend.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>&nbsp;O(N)<br /><strong>Expected Space Complexity: </strong>O(1)</span><br />&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= N &lt;= 100000</span><br /><span style=\"font-size: 18px;\">0 &lt;= Every friend has chocolates &lt;= 10000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Mike wants to distribute one chocolate each to his N friends, who are standing in a line. He can take all the chocolates from any single friend to help with this. Given the number of chocolates each friend currently possesses, determine the minimum number of chocolates Mike needs to start with to ensure he can give at least one chocolate to each friend.",
                "constraints": [
                    "1 <= N <= 100000",
                    "0 <= Every friend has chocolates <= 10000"
                ],
                "testcases": [
                    {
                        "input": "{2, 3, 1, 2, 5, 2}",
                        "output": "3",
                        "explanation": "If Mike takes all the chocolates from the 2nd friend (index 1), he needs to start with 1 chocolate. After taking chocolates from his 2nd friend, he would need a minimum of 2 chocolates. Therefore, the initial count before the 2nd friend would be 3."
                    },
                    {
                        "input": "{1, 2, 3}",
                        "output": "1",
                        "explanation": "If Mike takes the chocolates from the 2nd friend (index 1), he only needs to start with 1 chocolate to be able to distribute chocolates to everyone."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Optimize Your Solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\n\tpublic:\n\tint MinimumChocolate(vector<int>nums)\n\t{\n\t\tint ans = INT_MAX;\n\t\tint n = nums.size();\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint cur = i;\n\t\t\tcur += max(0, n-i-nums[i]);\n\t\t\tans = min(ans, cur);\n\t\t}\n\t\treturn ans;\n\t}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}