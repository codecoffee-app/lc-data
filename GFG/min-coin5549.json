{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704596,
            "title": "Min Coin",
            "titleSlug": "min-coin5549",
            "content": "<p><span style=\"font-size: 18px;\">Given a list of coins of <strong>distinct denominations arr</strong> and the <strong>total amount of money</strong>. Find the<strong> minimum number of coins</strong> required to make up that amount. Output<strong> -1</strong> if that money cannot be made up using given coins.<br />You may assume that there are<strong> infinite </strong>numbers of coins of each type.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [1, 2, 5], amount = 11\n<strong>Output: </strong>3\n<strong>Explanation: </strong>2*5 + 1 = 11. So taking 2 \ndenominations of 5 and 1 denomination of  \n1, </span><span style=\"font-size: 18px;\">one can make 11.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr = [2, 6], amount = 7\n<strong>Output: </strong>-1\n<strong>Explanation: </strong>Not possible to make 7 using \ndenominations 2 and 6.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>MinCoin()</strong> which takes a list of denominations and amounts as input parameters and returns a minimum number of coins to make up the amount. If not possible returns -1.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n*amount)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(amount)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of distinct denominations&nbsp;&lt;= 100</span><br /><span style=\"font-size: 18px;\">1 &lt;= amount,<strong>arri</strong> &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of distinct coin denominations `arr` and a target amount `amount`, determine the minimum number of coins needed to reach the target amount. You have an unlimited supply of each coin denomination. If it's impossible to make the target amount using the given denominations, return -1.",
                "constraints": [
                    "1 <= number of distinct denominations <= 100",
                    "1 <= amount, arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "arr = [1, 2, 5], amount = 11",
                        "output": "3",
                        "explanation": "The target amount of 11 can be achieved with two coins of denomination 5 and one coin of denomination 1 (2 * 5 + 1 = 11), requiring a total of 3 coins."
                    },
                    {
                        "input": "arr = [2, 6], amount = 7",
                        "output": "-1",
                        "explanation": "It is not possible to form the target amount of 7 using only coins of denominations 2 and 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Compute the minimum coins required for all values from 1 to the amount and store it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n\tpublic:\r\n\tint MinCoin(vector<int>nums, int amount)\r\n\t{\r\n\t\tint n = nums.size();\r\n\t\tsort(nums.begin(), nums.end());\r\n\t\tvector<long long int > dp(amount + 1, INT_MAX);\r\n\t\t// Base Case\r\n\t\tdp[0] = 0;\r\n\t\t// Compute minimum coins required for all \r\n    \t// values from 1 to amount \r\n\t\tfor(int  i = 1; i <= amount; i++)\r\n\t\t\t// Go through all coins smaller than i\r\n\t\t\tfor(int j = 0; j < n and nums[j] <= i; j++)\r\n\t\t\t\tdp[i] = min(dp[i], 1LL + dp[i - nums[j]]);\r\n\r\n\t\tif(dp[amount] >= INT_MAX)\r\n\t\t\treturn -1;\r\n\t\treturn int(dp[amount]);\r\n\t}\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\npublic class Solution {\n    public int MinCoin(int[] nums, int amount) {\n        int n = nums.length;\n        Arrays.sort(nums);\n        long[] dp = new long[amount + 1];\n        // Base Case\n        dp[0] = 0;\n        // Compute minimum coins required for all values from 1 to amount\n        for (int i = 1; i <= amount; i++) {\n            dp[i] = Integer.MAX_VALUE;\n            // Go through all coins smaller than i\n            for (int j = 0; j < n && nums[j] <= i; j++) {\n                dp[i] = Math.min(dp[i], 1L + dp[i - nums[j]]);\n            }\n        }\n        if (dp[amount] >= Integer.MAX_VALUE) {\n            return -1;\n        }\n        return (int)dp[amount];\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Backend complete function template for Python 3\n\n\nclass Solution:\n\n    def MinCoin(self, nums, amount):\n        n = len(nums)\n        nums.sort()  #Sorting the coins in ascending order\n\n        dp = [1e12] * (\n            amount + 1\n        )  #Creating a dynamic programming array with initial values set to a large number\n        dp[0] = 0  #Setting the base case for 0 amount to 0\n\n        #Iterating through all possible amounts from 1 to the target amount\n        for i in range(1, amount + 1):\n            for j in range(n):  #Iterating through the coins\n                if nums[j] > i:  #If the coin value is greater than the current amount, break the loop\n                    break\n                dp[i] = min(\n                    dp[i], 1 + dp[i - nums[j]]\n                )  #Taking the minimum of the current value and 1 + the value at the (current amount - coin value) index\n\n        if dp[amount] == 1e12:  #If the value at the target amount index is still the initial large number, return -1 (no solution)\n            return -1\n        return dp[amount]  #Return the value at the target amount index\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n  MinCoin(nums, amount) {\n    let n = nums.length;\n    nums.sort((a, b) => a - b);\n    let dp = new Array(amount + 1).fill(Infinity);\n    dp[0] = 0;\n    for (let i = 1; i <= amount; i++) {\n      for (let j = 0; j < n && nums[j] <= i; j++) {\n        dp[i] = Math.min(dp[i], 1 + dp[i - nums[j]]);\n      }\n    }\n    if (dp[amount] === Infinity) {\n      return -1;\n    }\n    return dp[amount];\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}