{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 708151,
            "title": "Min Cost Climbing Stairs",
            "titleSlug": "min-cost-climbing-stairs",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of integers <strong>cost[]</strong>&nbsp;where&nbsp;<strong>cost[i]</strong>&nbsp;is the cost of the i<sup>th</sup> step on a staircase. Once the cost is paid, you can either climb one or two steps. Return the <strong>minimum </strong>cost to reach the top of the floor.<br />Assume 0-based Indexing.&nbsp;</span><span style=\"font-size: 18px;\">You can either start from the step with index 0, or the step with index 1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>cost[] = [10, 15, 20]\n<strong>Output: </strong>15<strong>\nExplanation: </strong>Cheapest option is to start at cost[1], pay that cost, and go to the top.<br /><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/708151/Web/Other/blobid1_1741612335.png\" width=\"463\" height=\"281\" /><br /><br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>cost[] = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\n<strong>Output: </strong>6<strong>\nExplanation: </strong>Cheapest option is to start on cost[0], and only step on 1s, skipping cost[3].<br /><br /></span><img style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/708151/Web/Other/blobid0_1741612208.png\" width=\"654\" height=\"330\" /></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &le; cost.size() &le; 10<sup>5</sup><br />0&nbsp;&le; cost[i] &le; 999</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array of integers `cost[]`, where `cost[i]` represents the cost of the i-th step on a staircase. You can either climb one or two steps at a time. Your goal is to find the minimum cost to reach the top of the floor. You can start from either step 0 or step 1 (0-based indexing). Return the minimum cost.",
                "constraints": [
                    "2 <= cost.size() <= 10^5",
                    "0 <= cost[i] <= 999"
                ],
                "testcases": [
                    {
                        "input": "[10, 15, 20]",
                        "output": "15",
                        "explanation": "The cheapest option is to start at cost[1] (15), pay that cost, and go directly to the top, skipping cost[2] (20). This results in a total cost of 15."
                    },
                    {
                        "input": "[1, 100, 1, 1, 1, 100, 1, 1, 100, 1]",
                        "output": "6",
                        "explanation": "The cheapest option is to start on cost[0] (1), and only step on the steps with a cost of 1, skipping the steps with a cost of 100. This results in a total cost of 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">What will be the minimum cost to reach the i<sup>th</sup>&nbsp;step?</span></p>\n<p><span style=\"font-size: 18px;\">Try to build the recurrence relation.</span></p>",
            "<p><span style=\"font-size:18px\">The recurrence relation is-</span></p>\n\n<p><span style=\"font-size:18px\">MinCost[i] =min(MinCost[i - 1] + cost[i - 1],MinCost[i - 2] + cost[i - 2]).</span></p>\n\n<p><span style=\"font-size:18px\">Apply dynamic programming.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Bonus:&nbsp;</span></strong><span style=\"font-size:18px\">Can you solve the problem in O(1) space?</span></p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to find the minimum cost to reach to the top of the floor.\n\n    /*\n    The idea behind this solution is to use dynamic programming to find\n    the minimum cost at each step.\n\n    We start by initializing two variables, climb_one and climb_two,\n    as the costs of reaching the first and second steps respectively.\n\n    We then iterate through the remaining steps starting from the third step.\n\n    At each step, we calculate the minimum cost of reaching the current step by\n    taking the minimum of the cost of reaching the previous step (climb_one) plus\n    the cost of the current step, and the cost of reaching two steps back (climb_two)\n    plus the cost of the current step.\n\n    Finally, we return the value of climb_one, which represents the minimum cost\n    to reach the top of the floor.\n    */\n\n    int minCostClimbingStairs(vector<int>& cost) {\n        int climb_one = 0;\n        int climb_two = 0;\n        int N = cost.size();\n        // iterating through each step to find the minimum cost.\n        for (int i = 2; i < N + 1; i++) {\n            int res = climb_one;\n\n            // calculating the minimum cost at the current step.\n            climb_one = min(climb_one + cost[i - 1], climb_two + cost[i - 2]);\n\n            // updating the value of climb_two for the next iteration.\n            climb_two = res;\n        }\n        // returning the minimum cost to reach the top of the floor.\n        return climb_one;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to calculate the minimum cost to climb the stairs\n    static int minCostClimbingStairs(int[] cost) {\n        int N = cost.length;\n        // Variables to keep track of the cost of climbing one and two steps\n        int climb_one = 0;\n        int climb_two = 0;\n        // Loop through the stairs starting from the third step\n        for (int i = 2; i < N + 1; i++) {\n            // Store the previous cost of climbing one step\n            int res = climb_one;\n            // Calculate the minimum cost of climbing one step and two steps\n            climb_one = Math.min(climb_one + cost[i - 1], climb_two + cost[i - 2]);\n            // Update the cost of climbing two steps\n            climb_two = res;\n        }\n        // Return the minimum cost to climb the stairs\n        return climb_one;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to find the minimum cost to climb the stairs.\n    def minCostClimbingStairs(self, cost):\n        N = len(cost)\n        climb_one = climb_two = 0\n\n        #iterating from 2 to N+1\n        for i in range(2, N + 1):\n\n            #storing the current value of climb_one in res.\n            res = climb_one\n\n            #updating climb_one as the minimum cost to reach the current step.\n            climb_one = min(climb_one + cost[i - 1], climb_two + cost[i - 2])\n\n            #updating climb_two as previous value of climb_one.\n            climb_two = res\n\n        #returning the minimum cost to climb the stairs.\n        return climb_one\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    minCostClimbingStairs(cost) {\n        let N = cost.length;\n        let climb_one = 0;\n        let climb_two = 0;\n\n        for (let i = 2; i <= N; i++) {\n            let res = climb_one;\n\n            if (i <= cost.length) {\n                climb_one = Math.min(climb_one + cost[i - 1], climb_two + cost[i - 2]);\n            } else {\n                climb_one = Math.min(climb_one, climb_two);\n            }\n\n            climb_two = res;\n        }\n\n        return climb_one;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}