{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 878829,
            "title": "Min Cost to Make Size 1",
            "titleSlug": "min-cost-to-make-size-1",
            "content": "<p><span >Given an array, <strong>arr[]</strong>. You need to reduce size of array to one. You are allowed to select a pair of integers and remove the larger one of these two. This decreases the array size by 1. Cost of this operation is equal to value of smaller one. Find out minimum sum of costs of operations needed to convert the array into a single element.</span></p>\n<p><span ><strong>Examples</strong>:&nbsp;</span></p>\n<pre><span ><strong>Input</strong>: arr[] = [4, 3, 2]<br /><strong>Output</strong>: 4<br /><strong>Explanation</strong>: Choose (4, 2) so 4 is removed, new array = {2, 3}. Now choose (2, 3) so 3 is removed. So total cost = 2 + 2 = 4</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [3, 4]<br /><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><strong>Output</strong>: 3<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><strong>Explanation</strong>: Choose 3, 4, so cost is 3. </span></span></pre>\n<pre><span ><strong>Input</strong>: <code>arr[] = [1]</code></span><br /><span ><strong>Output</strong>: <code>0</code></span><br /><span ><strong>Explanation</strong>: The array is already of size one, so no operations are needed.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5<br /></sup></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18.6667px;\">1 &lt;= arr[i] &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, `arr[]`, reduce its size to a single element. In each operation, select a pair of integers, remove the larger one, and add the smaller one's value to the total cost. Determine the minimum total cost required to reduce the array to a single element.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[4, 3, 2]",
                        "output": "4",
                        "explanation": "First, choose (4, 2), removing 4 (cost: 2), resulting in [2, 3]. Next, choose (2, 3), removing 3 (cost: 2). Total cost: 2 + 2 = 4."
                    },
                    {
                        "input": "[3, 4]",
                        "output": "3",
                        "explanation": "Choose (3, 4), removing 4 (cost: 3). Total cost: 3."
                    },
                    {
                        "input": "[1]",
                        "output": "0",
                        "explanation": "The array already contains only one element, so no operations are needed. Cost is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Think about which element contributes the least when repeatedly choosing pairs to remove the larger one.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // function to calculate the minimum cost\n    int cost(vector<int>& a) {\n        // Minimum cost is (size - 1) multiplied with minimum element.\n        int n = a.size();\n        return (n - 1) * (*min_element(a.begin(), a.end()));\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public int cost(int[] a) {\n        int n = a.length;\n        int min = a[0];\n\n        // find the minimum using\n        // for loop\n        for (int i = 1; i < a.length; i++) {\n            if (a[i] < min) min = a[i];\n        }\n\n        // Minimum cost is n-1 multiplied\n        // with minimum element.\n        return (n - 1) * min;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    # Function to check if two arrays are disjoint\n    def cost(self, a):\n        n = len(a)\n        # Minimum cost is n-1 multiplied\n        # with minimum element.\n        return ((n - 1) * min(a))\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    cost(arr) {\n        let n = arr.length;\n        // Minimum cost is (size - 1) multiplied with minimum element.\n        return (n - 1) * Math.min(...arr);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}