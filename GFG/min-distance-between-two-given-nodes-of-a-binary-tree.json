{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700224,
            "title": "Min distance between two given nodes of a Binary Tree",
            "titleSlug": "min-distance-between-two-given-nodes-of-a-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree with <strong>n</strong> nodes and two node values, <strong>a</strong> and <strong>b</strong>, your task is to find the minimum distance between them. The given two nodes are guaranteed to be in the binary tree and all node values are <strong>unique</strong>.<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Tree = [1, 2, 3]<strong>\n&nbsp;\\t </strong>1\n&nbsp;     /  \\\n&nbsp;    2    3\na = 2, b = 3\n<strong>Output: </strong>2<strong>\nExplanation: </strong>We need the distance between 2 and 3. Being at node 2, we need to take two steps ahead in order to reach node 3. The path followed will be: 2 -&gt; 1 -&gt; 3. Hence, the result is 2. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Tree = [11, 22, 33, 44, 55, 66, 77]<strong>\n&nbsp;\\t </strong>11\n&nbsp;     /   \\\n&nbsp;    22  33<br />    /  \\  /  \\<br />  44 55 66 77\na = 77, b = 22\n<strong>Output: </strong>3<strong>\nExplanation: </strong>We need the distance between 77 and 22. Being at node 77, we need to take three steps ahead in order to reach node 22. The path followed will be: 77 -&gt; 33 -&gt; 11 -&gt; 22. Hence, the result is 3.<br /></span></pre>\n<pre><strong>Input: </strong>Tree = [1, 2, 3]<strong>\n&nbsp;\\t </strong>1\n&nbsp;     /  \\\n&nbsp;    2    3\na = 1, b = 3\n<strong>Output: </strong>1</pre>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= number of nodes &lt;= 10<sup>5</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span ><span style=\"font-family: arial, helvetica, sans-serif;\"><span style=\"background-color: #ffffff; color: #1e2229;\">Try to find the Lowest Common Ancestor (LCA) of two given nodes in a binary tree</span><span style=\"background-color: #ffffff; color: #1e2229;\"> first.</span></span></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "samsung",
            "makemytrip",
            "ola-cabs",
            "linkedin",
            "qualcomm"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to find the level of a node in a binary tree\nint findLevel(Node *root, int k, int level) {\n    if (root == NULL) return -1;\n    if (root->data == k) return level;\n    // Recursively call the function on the left child with increased level\n    int l = findLevel(root->left, k, level + 1);\n    // If the node is found on the left side, return its level\n    // Otherwise, continue searching on the right child\n    return (l != -1) ? l : findLevel(root->right, k, level + 1);\n}\n\n// Function to find the lowest common ancestor of two nodes and the distance between the two nodes\nNode *findDistU(Node *root, int a, int b, int &d1, int &d2, int &dist, int lvl) {\n    if (root == NULL) return NULL;\n    if (root->data == a) {\n        // If the first node is found, store its level and return the node\n        d1 = lvl;\n        return root;\n    }\n    if (root->data == b) {\n        // If the second node is found, store its level and return the node\n        d2 = lvl;\n        return root;\n    }\n\n    // Recursively call the function on the left and right children\n    Node *l = findDistU(root->left, a, b, d1, d2, dist, lvl + 1);\n    Node *r = findDistU(root->right, a, b, d1, d2, dist, lvl + 1);\n\n    if (l and r) {\n        // If both nodes are found on different subtrees, calculate the distance\n        dist = d1 + d2 - 2 * lvl;\n    }\n    // Return the node found or NULL if not found\n    return (l != NULL) ? l : r;\n}\n\nclass Solution{\n    public:\nint findDist(Node *root, int a, int b) {\n    int d1 = -1, d2 = -1, dist;\n    // Find the lowest common ancestor of the two nodes and calculate the distance\n    Node *lca = findDistU(root, a, b, d1, d2, dist, 1);\n    if (d1 != -1 and d2 != -1) {\n        // If both nodes are found, return the distance between them\n        return dist;\n    }\n\n    if (d1 != -1) {\n        // If only the first node is found, find its distance to the second node\n        dist = findLevel(lca, b, 0);\n        return dist;\n    }\n    if (d2 != -1) {\n        // If only the second node is found, find its distance to the first node\n        dist = findLevel(lca, a, 0);\n        return dist;\n    }\n    // Return -1 if both nodes are not found\n    return -1;\n}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class GfG {\n    // Function to find the lowest common ancestor (LCA) of two nodes in a binary tree\n    Node LCA(Node root, int n1, int n2) {\n        // If the root is null, return null\n        if (root == null) return null;\n\n        // If either of the nodes is the root, return the root\n        if (root.data == n1 || root.data == n2) return root;\n\n        // Recursively find the LCA in the left and right subtrees\n        Node l = LCA(root.left, n1, n2);\n        Node r = LCA(root.right, n1, n2);\n\n        // If both left and right LCA are not null, it means both nodes are in different\n        // subtrees, so return the root\n        if (l != null && r != null) return root;\n\n        // If both left and right LCA are null, it means both nodes are not present in\n        // the tree, so return null\n        if (l == null && r == null) return null;\n\n        // If only one of the left and right LCA is null, it means both nodes are\n        // present in the same subtree, so return the non-null LCA\n        return (l != null) ? l : r;\n    }\n\n    // Function to find the distance between two nodes in a binary tree\n    int findDist(Node root, int a, int b) {\n        // Find the path length from the root to node a\n        int x = pathLength(root, a) - 1;\n\n        // Find the path length from the root to node b\n        int y = pathLength(root, b) - 1;\n\n        // Find the lowest common ancestor (LCA) of a and b\n        int lcadata = LCA(root, a, b).data;\n\n        // Find the path length from the root to the LCA\n        int lcaDistance = pathLength(root, lcadata) - 1;\n\n        // Return the distance between a and b by subtracting twice the path length to\n        // the LCA from the sum of the path lengths to a and b\n        return (x + y) - 2 * lcaDistance;\n    }\n\n    // Function to find the path length from the root to a given node in a binary tree\n    int pathLength(Node root, int n1) {\n        // If the root is null, return 0\n        if (root == null)\n            return 0;\n        else {\n            // Initialize a variable to store the path length\n            int x = 0;\n\n            // If the current node is the target node or if the target node is present\n            // in the left or right subtree, update the path length and return it\n            if ((root.data == n1) || (x = pathLength(root.left, n1)) > 0 ||\n                (x = pathLength(root.right, n1)) > 0)\n                return x + 1;\n        }\n\n        // If the target node is not found, return 0\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\ndef pathToNode(root, path, k):\n\n    # base case handling\n    if root is None:\n        return False\n\n    # append the node value in path\n    path.append(root.data)\n\n    # See if the k is same as root's data\n    if root.data == k:\n        return True\n\n    # Check if k is found in left or right\n    # sub-tree\n    if ((root.left != None and pathToNode(root.left, path, k))\n            or (root.right != None and pathToNode(root.right, path, k))):\n        return True\n\n    # If not present in subtree rooted with root,\n    # remove root from path and return False\n    path.pop()\n    return False\n\n\nclass Solution:\n\n    def findDist(self, root, a, b):\n        if root:\n            # store path corresponding to node: a\n            path1 = []\n            pathToNode(root, path1, a)\n\n            # store path corresponding to node: b\n            path2 = []\n            pathToNode(root, path2, b)\n\n            # iterate through the paths to find the\n            # common path length\n            i = 0\n            while i < len(path1) and i < len(path2):\n                # get out as soon as the path differs\n                # or any path's length get exhausted\n                if path1[i] != path2[i]:\n                    break\n                i = i + 1\n\n            # get the path length by deducting the\n            # intersecting path length (or till LCA)\n            return (len(path1) + len(path2) - 2 * i)\n        else:\n            return 0\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    LCA(root, n1, n2) { // Function to find the lowest common ancestor of two nodes\n        if (root === null) return null; // If the root is null, return null\n\n        if (root.data === n1 || root.data === n2)\n            return root; // If the root data matches either of the two nodes, return the\n                         // root\n\n        let l = this.LCA(\n            root.left, n1,\n            n2); // Recursively find the lowest common ancestor in the left subtree\n        let r = this.LCA(\n            root.right, n1,\n            n2); // Recursively find the lowest common ancestor in the right subtree\n\n        if (l !== null && r !== null)\n            return root; // If both left and right subtrees have non-null lowest common\n                         // ancestors, return the root\n\n        if (l === null && r === null)\n            return null; // If both left and right subtrees have null lowest common\n                         // ancestors, return null\n\n        return (l !== null) ? l : r; // Return non-null subtree if one of the subtrees\n                                     // has the lowest common ancestor\n    }\n\n    pathLength(root,\n               n1) { // Function to find the length of the path from root to a node\n        if (root === null) // If the root is null, return 0\n            return 0;\n        else {\n            let x = 0; // Initialize a variable to store the path length\n            if ((root.data === n1) || (x = this.pathLength(root.left, n1)) > 0 ||\n                (x = this.pathLength(root.right, n1)) >\n                    0) // If the current node data matches the target node or the path\n                       // length from the left or right subtree is greater than 0\n                return x + 1; // Return the path length plus 1\n        }\n\n        return 0; // Return 0 if the current node is not the target node and the path\n                  // length from both subtrees is 0\n    }\n\n    findDist(root, a,\n             b) { // Function to find the distance between two nodes in a binary tree\n        let x =\n            this.pathLength(root, a) - 1; // Find the path length from root to node a\n        let y =\n            this.pathLength(root, b) - 1; // Find the path length from root to node b\n\n        let lcadata = this.LCA(root, a, b)\n                          .data; // Find the lowest common ancestor of node a and node b\n        let lcaDistance =\n            this.pathLength(root, lcadata) -\n            1; // Find the path length from root to the lowest common ancestor\n        return (x + y) -\n               2 * lcaDistance; // Return the distance between node a and node b\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}