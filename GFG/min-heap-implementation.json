{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700905,
            "title": "Min Heap implementation",
            "titleSlug": "min-heap-implementation",
            "content": "<p><span style=\"font-size: 18px;\">Given a<strong> priority queue (max heap)</strong> and <strong>Q</strong> queries to be performed on priority queue. The task is to perform operations based on queries.<br />1. <strong>p :</strong> query to <strong>push</strong> element (x, given with query) to priority_queue <strong>and print size</strong>.<br />2. <strong>pp :</strong> query to <strong>pop</strong> element from priority_queue<strong> and print size</strong>.<br />3. <strong>t :</strong> query to <strong>return top</strong> element of priority_queue, <strong>if empty return -1.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Q = 5\np 5\np 3\np 1\nt\npp\n<strong>Output:</strong> \n1\n2\n3\n1\n2</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Pushing 5, 3, 1 to queue. Now, fetching top which is 1 (according to min heap property smallest element at top). Popping back \nelement from queue, size reduced to 2.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= Q &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a priority queue (max heap) to handle a series of queries.  The queries are:\n\n1.  `p x`: Push element `x` onto the priority queue and print the current size of the queue.\n2.  `pp`: Pop the top element from the priority queue and print the current size of the queue.\n3.  `t`: Return the top element of the priority queue. If the queue is empty, return -1.",
                "constraints": [
                    "1 <= Q <= 100"
                ],
                "testcases": [
                    {
                        "input": "Q = 5\np 5\np 3\np 1\nt\npp",
                        "output": "1\n2\n3\n5\n2",
                        "explanation": "Pushing 5, 3, and 1 onto the queue. The size becomes 1, 2, and then 3. Fetching the top element which is 5 (according to max heap property largest element at top). Popping an element from the queue reduces the size to 2."
                    },
                    {
                        "input": "Q = 3\nt\np 10\nt",
                        "output": "-1\n1\n10",
                        "explanation": "Initially, the queue is empty so 't' returns -1. Then, 10 is pushed, and the size is 1. Finally 't' returns 10 as it is the only and largest element."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">1. push_pq function insert element in priority queue and return the size of priority queue.</span></p>\n\n<p><span style=\"font-size:14px\">pp_pq function return if priority queue is empty else pop(delete) the elemnt and return the size of priority queue.</span></p>\n\n<p><span style=\"font-size:14px\">pp_top return if priority queue is empty otherwise return the top element of priority queue.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n/* Function to implement push operation in priority_queue\n * pq : priority_queue\n * x : element to be pushed\n */\nvoid push(priority_queue<int, vector<int>, greater<int>> &pq, int x) {\n\n    pq.push(x);\n}\n\n/* Function to implement pop operation in priority_queue\n * pq : priority_queue\n */\nvoid pop(priority_queue<int, vector<int>, greater<int>> &pq) {\n\n    if (!pq.empty())\n        pq.pop();\n    else\n        return;\n}\n\n/* Function to implement top operation in priority_queue\n * pq : priority_queue\n */\nint top(priority_queue<int, vector<int>, greater<int>> &pq) {\n\n    if (!pq.empty())\n        return pq.top();\n    else\n        return -1;\n}",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}