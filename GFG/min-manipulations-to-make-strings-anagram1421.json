{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703254,
            "title": "Min Manipulations to make Strings Anagram",
            "titleSlug": "min-manipulations-to-make-strings-anagram1421",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings in lowercase, your task is to find minimum number of manipulations required to make two strings anagram<strong> without deleting any character</strong>.&nbsp;If two strings contains same data set in any order then strings are called&nbsp;<strong>Anagrams</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nS1 = \"aba\", S2 = \"baa\", N = 3\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: Both the strings are already\nanagrams.</span>\n</pre>\n<p><span style=\"font-size: 18px;\">&acirc;&euro;&lsaquo;<strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: \nS1 = \"ddcf\", S2 = \"cedk\", N = 4\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: We can change 'e' and 'k' in\nS2 to 'd' and 'f' to make both the strings\nanagram. </span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>minManipulation()&nbsp;</strong>which takes the strings&nbsp;S1 and S2 and their length N as inputs and returns the minimum number of manipulations required to make both the strings anagram.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=N&lt;=10<sup>5</sup></span></p>\n<p><span style=\"font-size: 18px;\">|S1| = |S2| = N</span></p>\n<p><span style=\"font-size: 18px;\">|S| represents the length of the string S.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Note that any pair of difference of characters in both the strings can be resolved in one manipulation.<br />\nFor example, if S1 = &quot;abc&quot;, S2 = &quot;cbb&quot;. Here, only 1 pair of characters is different and this can be resolved in one manipulation (by either converting &#39;a&#39; in S1 to &#39;b&#39; or converting &#39;b&#39; in S2 to &#39;a&#39;).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "anagram",
                "slug": "anagram"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "yatra.com"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "int minManipulation (int n, string s1, string s2)\n{\n    int freq[26] = {0};\n    for (int i = 0; i < n; ++i)\n    {\n        freq[s1[i] - 'a']++;\n        freq[s2[i] - 'a']--;\n    }\n\n    int res = 0;\n    for (int i = 0; i < 26; ++i)\n        res += abs (freq[i]);\n    \n    // every pair of difference in the two strings can be resolved\n    // with a single manipulation\n    return res / 2;\n}\n// Contributed By: Pranay Bansal\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution \n{ \n    int minManipulation(int N, String S1, String S2) \n    {\n        int freq[] = new int[26];\n        Arrays.fill(freq,0);\n        for (int i = 0; i < N; ++i)\n        {\n            freq[S1.charAt(i) - 'a']+=1;\n            freq[S2.charAt(i) - 'a']-=1;\n        }\n    \n        int res = 0;\n        for (int i = 0; i < 26; ++i)\n            res += Math.abs (freq[i]);\n        \n        // every pair of difference in the two strings can be resolved\n        // with a single manipulation\n        return res / 2;\n    }\n} ",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    def minManipulation(self, N, S1, S2): \n        freq = [0]*26\n        for i in range(N):\n            freq[ord(S1[i]) - ord('a')]+=1\n            freq[ord(S2[i]) - ord('a')]-=1\n        res = 0\n        for i in range(26):\n            res += abs (freq[i])\n        # every pair of difference in the two strings can be resolved\n        # with a single manipulation\n        return res // 2",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}