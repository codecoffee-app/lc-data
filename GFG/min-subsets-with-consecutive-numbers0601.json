{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702813,
            "title": "Min Subsets with Consecutive Numbers",
            "titleSlug": "min-subsets-with-consecutive-numbers0601",
            "content": "<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\">Given an array of distinct positive numbers, the task is to calculate the minimum number of subsets (or subsequences) from the array such that each subset contains consecutive numbers.</span></span></p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></span></p>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [100, 56, 5, 6, 102, 58, 101, 57, 7, 103]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>3\n<strong>Explanation: </strong>{5, 6, 7}, {56, 57, 58}, {100, 101, 102, 103} are 3 subset in which numbers are consecutive.</span></span></pre>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 100, 105]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>{10}, {100} and {105} are 3 subset in which numbers are consecutive.</span></span> </pre>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*log(n))<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></span></p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />0 &le; arr[i] &le; 10<sup>6</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of distinct positive numbers, determine the minimum number of subsets (or subsequences) required such that each subset contains only consecutive numbers.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[100, 56, 5, 6, 102, 58, 101, 57, 7, 103]",
                        "output": "3",
                        "explanation": "The array can be divided into three subsets: {5, 6, 7}, {56, 57, 58}, and {100, 101, 102, 103}. Each subset consists of consecutive numbers."
                    },
                    {
                        "input": "[10, 100, 105]",
                        "output": "3",
                        "explanation": "The array can be divided into three subsets: {10}, {100}, and {105}. Since there are no consecutive numbers, each number forms its own subset."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The idea is to sort the array and traverse the sorted array to count the number of such subsets. To count the number of such subsets, we need to count the consecutive numbers such that the difference between them is not equal to one.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to count the number of subsets in a sorted array\nclass Solution {\n  public:\n    int numOfSubset(vector<int> &arr) {\n        // Sorting the array\n        sort(arr.begin(), arr.end());\n        int count = 1;\n        int n = arr.size();\n        // Iterating through the array to count subsets\n        for (int i = 0; i < n - 1; i++) {\n            // If the next element is not consecutive, increment count\n            if (arr[i] + 1 != arr[i + 1])\n                count++;\n        }\n        // Returning the count of subsets\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to find the number of subsets\n    public int numOfSubset(int[] arr) {\n        // Sorting the array\n        Arrays.sort(arr);\n        // Initializing count to 1\n        int count = 1;\n        // Looping through the array\n        for (int i = 0; i < arr.length - 1; i++) {\n            // Checking if the next element is not consecutive\n            if (arr[i] + 1 != arr[i + 1]) {\n                // Incrementing count if not consecutive\n                count++;\n            }\n        }\n        // Returning the count of subsets\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    # Function to find the number of subsets with consecutive numbers.\n    def numOfSubset(self, arr):\n        # Sorting the array.\n        arr.sort()\n        count = 1\n\n        # Iterating over the array to check consecutive numbers.\n        for i in range(len(arr) - 1):\n            # If the current element + 1 is not equal to the next element,\n            # increment count as it forms a new subset.\n            if arr[i] + 1 != arr[i + 1]:\n                count += 1\n\n        return count\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    numOfSubset(arr) {\n        arr.sort((a, b) => a - b); // Sort the input array in ascending order.\n        let count = 1;             // Initialize count to 1 for the first subset.\n        for (let i = 0; i < arr.length - 1; i++) {\n            if (arr[i] + 1 !== arr[i + 1]) {\n                count++; // Increment count if the next element is not consecutive.\n            }\n        }\n        return count; // Return the total number of subsets.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}