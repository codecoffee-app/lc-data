{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702812,
            "title": "Min sum formed by digits",
            "titleSlug": "min-sum-formed-by-digits3551",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\">Given an array of digits (values are from 0 to 9), find the minimum possible sum of two numbers formed from digits of the array. All digits of the given array must be used to form the two numbers.</span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\">Any combination of digits may be used to form the two numbers to be summed. &nbsp;Leading zeroes are permitted.</span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\">If forming two numbers is impossible (i.e. when n==0) then the \"sum\" is the value of the only number that can be formed.</span></span></p>\n<p><br />&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Example 1:</strong></span></span></p>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input:</strong></span>\n<span style=\"font-family: arial,helvetica,sans-serif;\">N = 6</span>\n<span style=\"font-family: arial,helvetica,sans-serif;\">arr[] = {6, 8, 4, 5, 2, 3}\n</span><strong><span style=\"font-family: arial,helvetica,sans-serif;\">Output:</span></strong>\n<span style=\"font-family: arial,helvetica,sans-serif;\">604\n</span><strong><span style=\"font-family: arial,helvetica,sans-serif;\">Explanation:</span></strong>\n<span style=\"font-family: arial,helvetica,sans-serif;\">The minimum sum is formed by numbers </span>\n<span style=\"font-family: arial,helvetica,sans-serif;\">358 and 246</span></span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Example 2:</strong></span></span></p>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input:</strong></span>\n<span style=\"font-family: arial,helvetica,sans-serif;\">N = 5</span>\n<span style=\"font-family: arial,helvetica,sans-serif;\">arr[] = {5, 3, 0, 7, 4}</span>\n<strong><span style=\"font-family: arial,helvetica,sans-serif;\">Output:</span></strong>\n<span style=\"font-family: arial,helvetica,sans-serif;\">82</span>\n<strong><span style=\"font-family: arial,helvetica,sans-serif;\">Explanation:</span></strong>\n<span style=\"font-family: arial,helvetica,sans-serif;\">The minimum sum is formed by numbers </span>\n<span style=\"font-family: arial,helvetica,sans-serif;\">35 and 047</span></span>\n</pre>\n<p><br /><br /><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Your Task:</strong><br />You <strong>don't</strong> have to print anything, printing is done by the driver code itself. Your task is to complete the function&nbsp;<strong>minSum()</strong>&nbsp;which takes the array <strong>A[]</strong> and its size <strong>N</strong><strong> </strong>as inputs and returns the required sum.</span></span><br /><br /><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Expected Time Complexity: </strong>O(N. log(N))<br /><strong>Expected Auxiliary Space: </strong>O(N)</span></span></p>\n<p><br /><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Constraints:</strong></span><br /><span style=\"font-family: arial,helvetica,sans-serif;\">1 &le; N &le; 35<br />0 &le; A[] &le; 9</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of digits (0-9), find the minimum possible sum of two numbers formed using all the digits in the array.  Any combination of digits is allowed, and leading zeroes are permitted. If the array is empty (n==0), the sum is the value of the only number that can be formed (which would be 0).",
                "constraints": [
                    "1 <= N <= 35",
                    "0 <= A[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "N = 6\narr[] = {6, 8, 4, 5, 2, 3}",
                        "output": "604",
                        "explanation": "The minimum sum is achieved by forming the numbers 358 and 246.  358 + 246 = 604"
                    },
                    {
                        "input": "N = 5\narr[] = {5, 3, 0, 7, 4}",
                        "output": "82",
                        "explanation": "The minimum sum is achieved by forming the numbers 35 and 047. 35 + 47 = 82"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Since we want to minimize the sum of two numbers to be formed, we must divide all digits in two halves and assign half-half digits to them. We also need to make sure that the leading digits are smaller.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    // Returns sum of two numbers formed\r\n    // from all digits in a[]\r\n    long long int minSum(int arr[], int n)\r\n    {\r\n        // min Heap\r\n        priority_queue <int, vector<int>, greater<int> > pq;\r\n    \r\n        // to store the 2 numbers formed by array elements to\r\n        // minimize the required sum\r\n        long long int a=0, b=0;\r\n    \r\n        // Adding elements in Priority Queue\r\n        for(int i=0; i<n; i++)\r\n            pq.push(arr[i]);\r\n    \r\n        // checking if the priority queue is non empty\r\n        while(!pq.empty())\r\n        {\r\n            a*=10;\r\n            a+=pq.top();\r\n            pq.pop();\r\n            if(!pq.empty())\r\n            {\r\n                b*=10;\r\n                b+=pq.top();\r\n                pq.pop();\r\n            }\r\n        }\r\n        return a+b;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static long minSum(int arr[], int n)\r\n    {\r\n        // Your code goes here\r\n        PriorityQueue <Integer> pq = new PriorityQueue<>();\r\n    \r\n        // to store the 2 numbers formed by array elements to\r\n        // minimize the required sum\r\n        long a=0, b=0;\r\n    \r\n        // Adding elements in Priority Queue\r\n        for(int i=0; i<n; i++)\r\n            pq.add(arr[i]);\r\n    \r\n        // checking if the priority queue is non empty\r\n        while(!pq.isEmpty())\r\n        {\r\n            a*=10;\r\n            a+=pq.element();\r\n            pq.remove();\r\n            if(!pq.isEmpty())\r\n            {\r\n                b*=10;\r\n                b+=pq.element();\r\n                pq.remove();\r\n            }\r\n        }\r\n        return a+b;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def minSum(self, arr, n):\n        \n        import heapq as hq\n        hq.heapify(arr) #converting the array into a min heap\n    \n        n1 = 0\n        n2 = 0\n    \n        i=1\n        while arr: #while there are still elements in the array\n    \n            if i%2==0: #if the current index is even\n                n1= n1*10 + hq.heappop(arr) #pop the smallest element from the heap and add it to n1\n            else: #if the current index is odd\n                n2 = n2*10 +hq.heappop(arr) #pop the smallest element from the heap and add it to n2\n    \n            i+=1 #increment the index\n    \n        return n1+n2 #return the sum of n1 and n2",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class MinHeap<T> where T : IComparable<T>\n{\n    private List<T> list;\n\n    public MinHeap()\n    {\n        list = new List<T>();\n    }\n\n    public int Count\n    {\n        get { return list.Count; }\n    }\n\n    public void Add(T item)\n    {\n        list.Add(item);\n        HeapifyUp(list.Count - 1);\n    }\n\n    public T Remove()\n    {\n        if (list.Count == 0)\n            throw new InvalidOperationException(\"Heap is empty.\");\n\n        T item = list[0];\n        list[0] = list[list.Count - 1];\n        list.RemoveAt(list.Count - 1);\n        HeapifyDown(0);\n\n        return item;\n    }\n\n    private void HeapifyUp(int index)\n    {\n        int parentIndex = (index - 1) / 2;\n\n        while (index > 0 && list[index].CompareTo(list[parentIndex]) < 0)\n        {\n            Swap(index, parentIndex);\n            index = parentIndex;\n            parentIndex = (index - 1) / 2;\n        }\n    }\n\n    private void HeapifyDown(int index)\n    {\n        int leftChildIndex = 2 * index + 1;\n        int rightChildIndex = 2 * index + 2;\n        int smallestIndex = index;\n\n        if (leftChildIndex < list.Count && list[leftChildIndex].CompareTo(list[smallestIndex]) < 0)\n            smallestIndex = leftChildIndex;\n\n        if (rightChildIndex < list.Count && list[rightChildIndex].CompareTo(list[smallestIndex]) < 0)\n            smallestIndex = rightChildIndex;\n\n        if (smallestIndex != index)\n        {\n            Swap(index, smallestIndex);\n            HeapifyDown(smallestIndex);\n        }\n    }\n\n    private void Swap(int index1, int index2)\n    {\n        T temp = list[index1];\n        list[index1] = list[index2];\n        list[index2] = temp;\n    }\n}\n\nclass Solution\n{\n    public long minSum(int[] arr, int n)\n    {\n        // min Heap\n        var pq = new MinHeap<int>();\n\n        // to store the 2 numbers formed by array elements to minimize the required sum\n        long a = 0, b = 0;\n\n        // Adding elements in Min Heap\n        for (int i = 0; i < n; i++)\n        {\n            pq.Add(arr[i]);\n        }\n\n        // checking if the Min Heap is non-empty\n        while (pq.Count > 0)\n        {\n            a *= 10;\n            a += pq.Remove();\n            if (pq.Count > 0)\n            {\n                b *= 10;\n                b += pq.Remove();\n            }\n        }\n\n        return a + b;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}