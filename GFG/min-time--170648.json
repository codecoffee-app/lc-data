{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714334,
            "title": "Min Time",
            "titleSlug": "min-time--170648",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>locations[]</strong>&nbsp;of size <strong>n</strong>&nbsp;where<strong> locations[i]</strong> represents the location of the <strong>i<sup>th</sup></strong> fruit on the <strong>x-axis</strong>&nbsp;and also&nbsp;given an array <strong>types[]</strong> &nbsp;where <strong>types[i]</strong> is an <strong>integer</strong> which represents the type of the <strong>i<sup>th</sup></strong> fruit. You are initially at coordinate<strong> 0</strong> and you have&nbsp;to collect <strong>all</strong> the fruits and then return back to coordinate <strong>0</strong> again. To move <strong>1</strong> unit on the x-axis requires <strong>1</strong> second of time. The only condition is that you have to collect the fruits in a <strong>non-decreasing&nbsp;order</strong> of their <strong>types[i]&nbsp;</strong>(for example if <strong>i<sup>th</sup></strong> fruit has type[i]=1 and<strong> j<sup>th</sup> </strong>fruit has type[j]=2 then <strong>i<sup>th</sup></strong> fruit has to be picked before <strong>j<sup>th</sup></strong> fruit). Find&nbsp;</span><strong style=\"font-size: 18px;\">minimum time</strong><span style=\"font-size: 18px;\">&nbsp;to collect all fruits in the non-decreasing</span><strong style=\"font-size: 18px;\">&nbsp;order</strong><span style=\"font-size: 18px;\">&nbsp;of their types and return back to coordinate&nbsp;</span><strong style=\"font-size: 18px;\">0</strong><span style=\"font-size: 18px;\">.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: You can assume it takes no time to pick up fruit and the location of a fruit can be <strong>negative</strong> also.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn=4\nlocations={1,3,5,7}\ntypes={1,2,3,1}</span>\n<span style=\"font-size: 18px;\"><strong>Output:<br /></strong></span><span style=\"font-size: 18px;\">18</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nYou start at x=0 and move to x=7 and \nin the way pick fruits of type 1 at x=1 \nand x=7 and it took total 7 seconds to \nmove from 0-&gt;7 now you move to x=3 \nin 4 seconds and than to x=5 in 2 seconds \nand than return back to x=0 in 5 seconds.\nSo overall it took 18 seconds(7+4+2+5).</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn=4\nlocations={-4,-3,1,-8}\ntypes={4,2,4,5}</span>\n<span style=\"font-size: 18px;\"><strong>Output:<br /></strong>24</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nThe optimal way is to way go to x=-3 \nin starting than 1 and follow path \nlike this  (1)-&gt;(-4)-&gt;(-8)-&gt;(0) and \ntotal time it takes is 24 .</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task</strong>:<br />You don't need to read input or print anything. Your task is to complete the function <strong>minTime() </strong>which takes an integer <strong>n</strong>, integer array<strong> locations</strong> and <strong>types</strong> and you have to return <strong>minimum time</strong> to collect all fruits.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Space Complexity:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=<strong>n</strong>&lt;=10<sup>5</sup><br />-10<sup>9</sup>&lt;=<strong>locations[i]</strong>&lt;=10<sup>9</sup><br />1&lt;=<strong>types[i]</strong>&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `locations` of size `n`, where `locations[i]` represents the location of the i-th fruit on the x-axis, and an array `types` where `types[i]` is an integer representing the type of the i-th fruit. You start at coordinate 0. You must collect all fruits and return to coordinate 0. The fruits must be collected in non-decreasing order of their types. Moving 1 unit on the x-axis takes 1 second.  Find the minimum time to collect all fruits in the non-decreasing order of their types and return to coordinate 0.\n\nNote: Picking up a fruit takes no time. The location of a fruit can be negative.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "-10^9 <= locations[i] <= 10^9",
                    "1 <= types[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n=4\nlocations=[1,3,5,7]\ntypes=[1,2,3,1]",
                        "output": "18",
                        "explanation": "An optimal path is: Start at 0 -> 7 (collect type 1 at location 1 and 7) -> 3 (collect type 2) -> 5 (collect type 3) -> 0.  This takes 7 + 4 + 2 + 5 = 18 seconds."
                    },
                    {
                        "input": "n=4\nlocations=[-4,-3,1,-8]\ntypes=[4,2,4,5]",
                        "output": "24",
                        "explanation": "An optimal path is: Start at 0 -> -3 (collect type 2) -> 1 (collect type 4) -> -4 (collect type 4) -> -8 (collect type 5) -> 0.  This takes 3 + 4 + 5 + 4 + 8 = 24 seconds."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to focus on the left most and right most location of a particular type of fruits.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "/* \n   Back-end complete function template: \n   - Takes n (number of locations), locations (vector of location values), and types (vector of type values) as input\n   - Returns minimum time required\n*/\n\nclass Solution {\npublic:\n    vector<int> v; // Vector to store unique types\n    unordered_map<int,int> mn,mx; // Hash maps to store minimum and maximum locations for each type\n\n    /* \n       Function to calculate minimum time using dynamic programming.\n       - Takes idx (current index), d (direction), m (number of types), and memo (memoization table) as input\n       - Returns minimum time required\n    */\n    long long dp(int idx, int d, int m, vector<vector<long long>> &memo){\n        if(idx >= m) return 0; // Base case: if all types have been covered, return 0\n        if(memo[idx][d] != -1) return memo[idx][d]; // If memoization value exists, return it\n\n        int left = 0, right = 0; // Variables to store left and right locations\n\n        // If current index is not 0, update left and right using previous type's minimum and maximum locations\n        if(idx != 0){\n            left = mn[v[idx-1]];\n            right = mx[v[idx-1]];\n        }\n\n        if(d == 1) swap(left, right); // If direction is 1, swap left and right\n\n        long long ans = 1e18; // Initialize ans as a very large value\n        int ret1=0, ret2=0; // Variables to store extra time for last type\n\n        // If current index is the last index, update ret1 and ret2 using minimum and maximum locations for that type\n        if(idx == v.size()-1){\n            ret1 = abs(mn[v[idx]]);\n            ret2 = abs(mx[v[idx]]);\n        }\n\n        // Recursively calculate minimum time for next index, considering both directions and update ans\n        ans = min(ans, dp(idx+1, 0, m, memo) + abs(mx[v[idx]]-left) + (mx[v[idx]]-mn[v[idx]])+ret1);\n        ans = min(ans, dp(idx+1, 1, m, memo) + abs(mn[v[idx]]-left) + (mx[v[idx]]-mn[v[idx]])+ret2);\n        return memo[idx][d] = ans; // Memoize and return ans\n    }  \n\n    /* \n       Function to calculate minimum time required\n       - Takes n (number of locations), locations (vector of location values), and types (vector of type values) as input\n       - Returns minimum time required\n    */\n    long long minTime(int n, vector<int> &locations, vector<int> &types) {\n        // Loop over locations and types to update minimum and maximum locations for each type\n        for(int i=0; i<n; i++){\n            if(mn.count(types[i]) == 0){\n                mn[types[i]] = mx[types[i]] = locations[i];\n                v.push_back(types[i]); // Add unique type to vector\n            }\n            else{\n                mn[types[i]] = min(mn[types[i]], locations[i]); // Update minimum location for type\n                mx[types[i]] = max(mx[types[i]], locations[i]); // Update maximum location for type\n            }\n        }\n\n        int m = v.size(); // Number of types after removing duplicates\n        sort(v.begin(), v.end()); // Sort the vector of types\n\n        vector<vector<long long>> memo(m+5, vector<long long>(2, -1)); // Memoization table\n\n        return dp(0, 0, m, memo); // Call the dp function with initial values\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    static long dp[][];\r\n    public static long minTime(int n, int[] locations, int[] types) {\r\n        // code here\r\n        int mx=Integer.MIN_VALUE;\r\n        for(int i=0;i<n;i++){\r\n            mx=Math.max(mx,types[i]);\r\n        }\r\n        int tmp[][]=new int[mx+1][2];\r\n        for(int i=0;i<mx+1;i++){\r\n            tmp[i][0]=Integer.MAX_VALUE;\r\n            tmp[i][1]=Integer.MIN_VALUE;\r\n        }\r\n        for(int i=0;i<n;i++){\r\n            int in=types[i];\r\n            tmp[in][0]=Math.min(tmp[in][0],locations[i]);\r\n            tmp[in][1]=Math.max(tmp[in][1],locations[i]);\r\n        }\r\n        ArrayList<ArrayList<Integer>> arr=new ArrayList<>();\r\n        for(int i=0;i<mx+1;i++){\r\n            if(tmp[i][0]!=Integer.MAX_VALUE){\r\n                ArrayList<Integer> A=new ArrayList<>();\r\n                A.add(tmp[i][0]);\r\n                A.add(tmp[i][1]);\r\n                arr.add(A);\r\n            }\r\n        }\r\n        dp=new long[arr.size()+1][3];\r\n        for(int i=0;i<arr.size()+1;i++){\r\n            Arrays.fill(dp[i],-1);\r\n        }\r\n        return fun(0,arr,2);\r\n    }\r\n    public static long fun(int i,ArrayList<ArrayList<Integer>> arr,int pos)\r\n    {\r\n        if(i==arr.size()){\r\n            return dp[i][pos]=Math.abs(arr.get(i-1).get(pos));\r\n        }\r\n        if(dp[i][pos]!=-1){\r\n            return dp[i][pos];\r\n        }\r\n        int x=0;\r\n        if(pos==0){\r\n            x=arr.get(i-1).get(0);\r\n        }else if(pos==1){\r\n            x=arr.get(i-1).get(1);\r\n        }\r\n        if(arr.get(i).get(1)<=x){\r\n            return dp[i][pos]=x-arr.get(i).get(0)+fun(i+1,arr,0);\r\n        }else if(arr.get(i).get(0)>=x){\r\n            return dp[i][pos]=(arr.get(i).get(1)-x)+fun(i+1,arr,1);\r\n        }else{\r\n            int mn=arr.get(i).get(0),mx=arr.get(i).get(1);\r\n            return dp[i][pos]=Math.min(2*(x-mn)+(mx-x)+fun(i+1,arr,1),2*(mx-x)+(x-mn)+fun(i+1,arr,0));\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom collections import defaultdict\r\nclass Solution:\r\n    def minTime(self,n,locations,types):\r\n        dict=defaultdict(list)\r\n        var=set()\r\n        for a,b in zip(locations,types):\r\n            dict[b].append(a)\r\n            var.add(b)\r\n        var.add(10**10)\r\n        dict[10**10]=[0]\r\n        var=list(sorted(var))\r\n        dp=[[0]*2 for _ in range(len(var)+1)]\r\n        for el in dict.keys():\r\n            dict[el].sort()\r\n        p_left,p_right=0,0\r\n        for i,c in enumerate(var):\r\n\r\n            left,right=dict[c][0],dict[c][-1]\r\n            dp[i+1][0]=abs(right-left)+min(dp[i][0]+abs(right-p_left),dp[i][1]+abs(p_right-right))\r\n            dp[i+1][1]=abs(right-left)+min(dp[i][0]+abs(left-p_left),dp[i][1]+abs(left-p_right))\r\n            p_left,p_right=left,right\r\n        return(min(dp[-1])) \r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number[]} locations\n * @param {number[]} types\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to check whether the list is palindrome.\n    minTime(n, locations, types) {\n        let dict = {}; // using object as dictionary\n        let varSet = new Set();\n        \n        // iterating over the locations and types\n        for (let i = 0; i < n; i++) {\n            let a = locations[i];\n            let b = types[i];\n            \n            // appending values to dict object with key as type and\n            // value as list of locations\n            if (dict[b]) {\n                dict[b].push(a);\n            } else {\n                dict[b] = [a];\n            }\n            \n            // adding unique types to varSet\n            varSet.add(b);\n        }\n        \n        varSet.add(Number.MAX_SAFE_INTEGER);\n        \n        // adding key-value pair in dict with key as maximum integer\n        // and value as [0]\n        dict[Number.MAX_SAFE_INTEGER] = [0];\n        \n        let varList = Array.from(varSet);\n        varList.sort((a, b) => a - b);\n        \n        let dp = new Array(varList.length + 1);\n        \n        for (let i = 0; i < dp.length; i++) {\n            dp[i] = new Array(2).fill(0);\n        }\n        \n        for (let key in dict) {\n            dict[key].sort((a, b) => a - b);\n        }\n        \n        let p_left = 0, p_right = 0;\n        \n        for (let i = 0; i < varList.length; i++) {\n            let c = varList[i];\n            \n            let left = dict[c][0];\n            let right = dict[c][dict[c].length - 1];\n            \n            dp[i + 1][0] = Math.abs(right - left) + Math.min(dp[i][0] + Math.abs(right - p_left), dp[i][1] + Math.abs(p_right - right));\n            dp[i + 1][1] = Math.abs(right - left) + Math.min(dp[i][0] + Math.abs(left - p_left), dp[i][1] + Math.abs(left - p_right));\n            \n            p_left = left;\n            p_right = right;\n        }\n        \n        return Math.min(dp[dp.length - 1][0], dp[dp.length - 1][1]);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}