{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712181,
            "title": "Minimal Cost",
            "titleSlug": "minimal-cost",
            "content": "<p><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">Given an array&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">arr[]&nbsp;</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">of size&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">n</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">, where arr[i] denotes the height of <strong>i<sup>th</sup></strong> stone. Geek starts from stone</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;0&nbsp;</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">and from</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">stone <strong>i</strong>, he can jump to stones</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;i + 1</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">,</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;i + 2, &hellip; i + k.</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;The cost for jumping from stone&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">i</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;to stone&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">j&nbsp;</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">is&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">abs(arr[i] &ndash; arr[j])</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">. Find the&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">minimum cost</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">&nbsp;for Geek to reach the last stone.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong> </span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> k = 3, arr[]= [10, 30, 40, 50, 20]<br /></span><span style=\"font-size: 18px;\"><strong>Output: </strong>30<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>Geek will follow the path 1-&gt;2-&gt;5, the total cost would be |10-30| + |30-20| = 30, which is minimum.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k = 1, arr[]= [10, 20, 10]\n<strong>Output: </strong>20\n<strong>Explanation: </strong></span><span >Geek will follow the path 1-&gt;2-&gt;3, the total cost would be |10 - 20| + |20 - 10| = 20.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1 &lt;= arr.size() &lt;=10<sup>4</sup><br /></span></li>\n<li><span style=\"font-size: 18px;\">1 &lt;= k &lt;= 100<br /></span></li>\n<li><span style=\"font-size: 18px;\">1 &lt;= arr[i] &lt;= 10<sup>4</sup></span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A frog is positioned at the first stone (index 0) of a sequence of stones. Each stone has a height represented by the array `arr`. The frog can jump from stone `i` to any stone within the range `i+1` to `i+k`. The cost of a jump from stone `i` to stone `j` is the absolute difference in their heights, `abs(arr[i] - arr[j])`. Determine the minimum total cost for the frog to reach the last stone (index n-1).",
                "constraints": [
                    "1 <= arr.size() <= 10^4",
                    "1 <= k <= 100",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "k = 3, arr[]= [10, 30, 40, 50, 20]",
                        "output": "30",
                        "explanation": "The optimal path is 0 -> 1 -> 4. Cost = |10-30| + |30-20| = 20 + 10 = 30."
                    },
                    {
                        "input": "k = 1, arr[]= [10, 20, 10]",
                        "output": "20",
                        "explanation": "The only possible path is 0 -> 1 -> 2. Cost = |10 - 20| + |20 - 10| = 10 + 10 = 20."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: ui-sans-serif, -apple-system, system-ui, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, Helvetica, 'Apple Color Emoji', Arial, 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">Try to calculate each position's minimum cost by considering all possible jumps within k and updating based on previous positions' costs.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to minimize the cost of painting the buildings with\n    // given heights.\n    int minimizeCost(int k, vector<int>& arr) {\n        // Initializing a dynamic programming array of size n with -1.\n        int n = arr.size();\n        vector<int> dp(n, -1);\n        // Setting the first element of the dp array to 0.\n        dp[0] = 0;\n\n        // Iterate through each element of the dp array.\n        for (int i = 1; i < n; i++) {\n            // Initializing the minimum value to INT_MAX.\n            int min_v = INT_MAX;\n\n            // Iterate through each possible k values.\n            for (int j = 1; j <= k; j++) {\n                // Checking if the element at i-j is within the bounds of the array.\n                if (i - j >= 0) {\n                    // Calculating the current cost.\n                    int curr = dp[i - j] + abs(arr[i] - arr[i - j]);\n\n                    // Updating the minimum value.\n                    min_v = min(curr, min_v);\n                }\n            }\n\n            // Updating the dp array with the minimum value.\n            dp[i] = min_v;\n        }\n\n        // Returning the last element of the dp array as the minimized cost.\n        return dp[n - 1];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int minimizeCost(int k, int arr[]) {\n        int n = arr.length;\n        int[] dp = new int[n]; // Create an array to store the minimum cost\n        Arrays.fill(dp, -1);   // Initialize all elements of dp array to -1\n        dp[0] = 0;             // Set the cost for the first element as 0\n        for (int i = 1; i < n;\n             i++) { // Iterate through the array starting from the second element\n            int min_v =\n                Integer.MAX_VALUE; // Initialize a variable to store the minimum cost\n            for (int j = 1; j <= k; j++) { // Iterate through the previous k elements to\n                                           // find the minimum cost\n                if (i - j >= 0) {          // Check if the index is valid\n                    int curr =\n                        dp[i - j] +\n                        Math.abs(\n                            arr[i] -\n                            arr[i - j]); // Calculate the cost for the current element\n                    min_v =\n                        Math.min(curr, min_v); // Update the minimum cost if necessary\n                }\n            }\n            dp[i] =\n                min_v; // Store the minimum cost for the current element in the dp array\n        }\n        return dp[n - 1]; // Return the minimum cost for the last element of the array\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minimizeCost(self, k, arr):\n        # Initializing a dynamic programming list of size n with -1.\n        n = len(arr)\n        dp = [-1] * n\n\n        # Setting the first element of the dp list to 0.\n        dp[0] = 0\n\n        # Iterate through each element of the dp list.\n        for i in range(1, n):\n            # Initializing the minimum value to a large number.\n            min_v = float('inf')\n\n            # Iterate through each possible k values.\n            for j in range(1, k + 1):\n                # Checking if the element at i-j is within the bounds of the list.\n                if i - j >= 0:\n                    # Calculating the current cost.\n                    curr = dp[i - j] + abs(arr[i] - arr[i - j])\n\n                    # Updating the minimum value.\n                    min_v = min(curr, min_v)\n\n            # Updating the dp list with the minimum value.\n            dp[i] = min_v\n\n        # Returning the last element of the dp list as the minimized cost.\n        return dp[n - 1]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    // Function to minimize the cost of reducing the heights.\n    minimizeCost(k, arr) {\n        let n = arr.length;\n        let inf = Number.POSITIVE_INFINITY;\n        let dp = new Array(n).fill(inf);\n        dp[0] = 0;\n\n        // Iterate over the array\n        for (let i = 1; i < n; i++) {\n            let pos = i - 1;\n            // Find the minimum cost\n            while (pos >= 0 && pos >= (i - k)) {\n                dp[i] = Math.min(dp[i], dp[pos] + Math.abs(arr[i] - arr[pos]));\n                pos -= 1;\n            }\n        }\n\n        // Return the minimum cost\n        return dp[n - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}