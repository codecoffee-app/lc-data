{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703552,
            "title": "Minimal moves to form a string",
            "titleSlug": "minimal-moves-to-form-a-string4331",
            "content": "<p><span style=\"font-size: 18px;\">Given a string S, check if it is possible to construct the given string S by performing any of the below operations any number of times. In each step, we can:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">Add any character at the end of the string.</span></li>\n<li><span style=\"font-size: 18px;\">or, append the string to the string itself.</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\">The above steps can be applied any number of times. The task is to find the minimum steps required to form the string.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>S = \"aaaaaaaa\"\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: \nmove 1: add 'a' to form \"a\"\nmove 2: add 'a' to form \"aa\"\nmove 3: append \"aa\" to form \"aaaa\"\nmove 4: append \"aaaa\" to form \"aaaaaaaa\"</span>\n</pre>\n<p><span style=\"font-size: 18px;\">&acirc;&euro;&lsaquo;<strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: S = \"abcabca\"\n<strong>Output:</strong> 5\n<strong>Explanation</strong>: \nmove 1: add&nbsp;'a' to form \"a\"\nmove 2: add 'b' to form \"ab\"\nmove 3: add 'c' to form \"abc\"\nmove 4: append \"abc\" to form \"abcabc\"\nmove 5: add 'a' to form \"abcabca\"</span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>minSteps()</strong>&nbsp;which takes the string&nbsp;<strong>s&nbsp;</strong>as inputs and returns the answer.<br /><br /><strong>Expected Time Complexity:</strong>&nbsp;O(|S|<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(|S|)<br /><br /><strong>Constraints:</strong><br />1 &le; |S| &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S, determine the minimum number of steps required to construct S. In each step, you can either:\n\n1.  Add any single character to the end of the string.\n2.  Append the string to itself (duplicate the existing string).",
                "constraints": [
                    "1 <= |S| <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "aaaaaaaa",
                        "output": "4",
                        "explanation": "Start with \"a\" (1 step). Add 'a' to get \"aa\" (2 steps). Append \"aa\" to get \"aaaa\" (3 steps). Append \"aaaa\" to get \"aaaaaaaa\" (4 steps)."
                    },
                    {
                        "input": "abcabca",
                        "output": "5",
                        "explanation": "Start with \"a\" (1 step). Add 'b' to get \"ab\" (2 steps). Add 'c' to get \"abc\" (3 steps). Append \"abc\" to get \"abcabc\" (4 steps). Add 'a' to get \"abcabca\" (5 steps)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The idea to solve this problem is to use<strong> Dynamic Programming</strong> to count the minimum number of moves. Create an array named <em>dp</em> of size n, where n is the length of the input string. dp[i] stores the minimum number of moves that are required to make substring (0&hellip;i).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\tint minSteps(string S)\n\t{\n\t\tint n = S.size();\n\n\t\tint dp[n];\n\n\t\t// initializing dp[i] to INT_MAX\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tdp[i] = INT_MAX;\n\n\t\t// initialize both strings to null\n\t\tstring s1 = \"\", s2 = \"\";\n\n\t\t// base case\n\t\tdp[0] = 1;\n\n\t\ts1 += S[0];\n\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\ts1 += S[i];\n\n\t\t\t// check if it can be appended\n\t\t\ts2 = S.substr(i + 1, i + 1);\n\n\t\t\t// addition of character takes one step\n\t\t\tdp[i] = min(dp[i], dp[i - 1] + 1);\n\n\t\t\t// appending takes 1 step, and we directly\n\t\t\t// reach index i*2+1 after appending\n\t\t\t// so the number of steps is stord in i*2+1\n\t\t\tif (s1 == s2)\n\t\t\t\tdp[i * 2 + 1] = min(dp[i] + 1, dp[i * 2 + 1]);\n\t\t}\n\n\t\treturn dp[n - 1];\n\t}\n   \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minSteps(self, S):\n        # code here\n\n        # setting the length of string S\n        n = len(S)\n\n        # initializing two empty strings s1 and s2\n        s1 = \"\"\n        s2 = \"\"\n\n        # creating a list to store the minimum steps required for each position\n        td = [10000 for _ in range(n)]\n\n        # adding the first character of S to s1\n        s1 += S[0]\n\n        # setting the minimum steps required for position 0 to 1\n        td[0] = 1\n\n        # iterating over the remaining characters in S\n        for i in range(1, n):\n\n            # adding the current character to s1\n            s1 += S[i]\n\n            # updating the minimum steps required for current position (i)\n            td[i] = min(td[i], td[i - 1] + 1)\n\n            # setting s2 as a substring of S starting from i+1 and ending at i*2+1+1\n            s2 = S[i + 1:i * 2 + 1 + 1]\n\n            # if s1 is equal to s2\n            if s1 == s2:\n\n                # updating the minimum steps required for position (i*2+1)\n                td[i * 2 + 1] = min(td[i] + 1, td[i * 2 + 1])\n\n        return td[n - 1]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    minSteps(S) {\n        const n = S.length;\n        let s1 = \"\";\n        let s2 = \"\";\n        let td = new Array(n).fill(10000);\n\n        s1 += S[0];\n        td[0] = 1;\n\n        for (let i = 1; i < n; i++) {\n            s1 += S[i];\n            td[i] = Math.min(td[i], td[i-1] + 1);\n            s2 = S.substring(i+1, i*2+1+1);\n\n            if (s1 === s2) {\n                td[i*2 + 1] = Math.min(td[i] + 1, td[i*2+1]);\n            }\n        }\n        \n        return td[n-1];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}