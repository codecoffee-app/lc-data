{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705575,
            "title": "Minimal Summing Up",
            "titleSlug": "minimal-summing-up4253",
            "content": "<p><span style=\"font-size: 18px;\">For a positive, non-zero integer <strong>N</strong>, find the minimum count of numbers of the form <strong>X<sup>(i-1)</sup></strong>, where <strong>X</strong> is a given non-zero, non-negative integer raised to the power <strong>i-1</strong>&nbsp;where <strong>(1 &le; i &le; 12)</strong>, so that they sum up to form the number N exactly.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 10, X = 2\n<strong>Output:</strong> 2\n<strong>Explaination:</strong> The minimal summing is 8 + 2. \nHere both 8 and 2 are obtained from 2 raising \nit to the power 3 and 1 respectively.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> N = 38, X = 3\n<strong>Output:</strong> 4\n<strong>Explaination:</strong> The minimal summing is \n27 + 9 + 1 + 1. Where all the numbers are \npowers of 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>minimalSum()</strong> which takes N and X as input parameters and returns the minimum number of values of some exponent of X required to make the number N.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(logN)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>8</sup><br />2 &le; X &le; 5&nbsp;&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive non-zero integer N and a non-zero, non-negative integer X, find the minimum number of terms of the form X<sup>(i-1)</sup> (where 1 \u2264 i \u2264 12) that sum up to exactly N.",
                "constraints": [
                    "1 \u2264 N \u2264 10<sup>8</sup>",
                    "2 \u2264 X \u2264 5"
                ],
                "testcases": [
                    {
                        "input": "N = 10, X = 2",
                        "output": "2",
                        "explanation": "The optimal sum is 8 + 2.  8 is 2<sup>3</sup> and 2 is 2<sup>1</sup>."
                    },
                    {
                        "input": "N = 38, X = 3",
                        "output": "4",
                        "explanation": "The optimal sum is 27 + 9 + 1 + 1.  These are powers of 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Start from the highest possible it X can be raised to and the count of that exponent. And gradually decrease the power.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Operators",
                "slug": "operators"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the minimal sum of numbers\n    int minimalSum(int N, int X){\n        int res = 0;\n        while(N >= 1){\n            // Calculate the power of X that is less than or equal to N\n            int power = (int)((double)(log(N))/(double)(log(X)));\n\t        // If power is 0, add N to the result and break the loop\n\t        if(power == 0){\n\t            res += N;\n\t            break;\n\t        }\n\t        // Calculate the count of numbers to be added to the result\n\t        int count = N/(int)pow(X, min(11, power));\n\t        // Add the count to the result\n\t        res += count;\n\t        // Subtract the count of numbers from N\n\t        N -= count*(int)pow(X, min(11, power));\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}