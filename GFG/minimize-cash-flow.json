{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710295,
            "title": "Minimize Cash Flow",
            "titleSlug": "minimize-cash-flow",
            "content": "<p><span style=\"font-size: 18px;\">Given a number of friends who have to give or take some amount of money from one another. Design an algorithm by which the total cash flow among all the friends is minimized.&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=3<code>\n</code>transaction <code>[][]={{0,100,0}, {0,0,100}, {100,0,0}}\n<strong>Output:</strong>\n</code>transaction <code>[][]={{0,0,0},{0,0,0},{0,0,0}}\n<strong>Explanation:</strong>\n</code>Since friend one has to give friend two which has to give friend three and which in turn has to give one. So it is better than no one will do anything to anyone.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=3\ntransaction [][]={{0,100,0},{0,0,200},{0,0,0}}\n<strong>Output:</strong>\ntransaction [][]={0,0,100},{0,0,100},{0,0,0}\n<strong>Explanation:</strong>\nThe net flow is minimized.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>minCashFlow</strong><strong>()</strong> which takes the transaction array and number of friends as input parameters and returns the new transaction array as output;. Please note there can be multiple solutions possible, and the solution will be judged according to its net flow, and if it correctly follows the cash flow. If, you're solution returns -1, this means the cash flow is not following the actual flow of cash.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N*N)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 1000<br />0<sup>&nbsp;</sup>&lt;= transaction[i][j] &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a group of friends where some owe money to others, design an algorithm to minimize the total amount of money exchanged to settle all debts.",
                "constraints": [
                    "1 <= N <= 1000 (where N is the number of friends)",
                    "0 <= transaction[i][j] <= 1000 (where transaction is the amount friend i owes to friend j)"
                ],
                "testcases": [
                    {
                        "input": "N=3, transaction[][]={{0,100,0}, {0,0,100}, {100,0,0}}",
                        "output": "transaction[][]={{0,0,0},{0,0,0},{0,0,0}}",
                        "explanation": "Since friend one owes friend two, friend two owes friend three, and friend three owes friend one, the net flow can be minimized to zero by cancelling out the debts. No one needs to pay anyone."
                    },
                    {
                        "input": "N=3, transaction[][]={{0,100,0},{0,0,200},{0,0,0}}",
                        "output": "transaction[][]={{0,0,100},{0,0,100},{0,0,0}}",
                        "explanation": "Friend 2 owes friend 3 200, and friend 1 owes friend 2 100. The minimized cash flow results in friend 1 owing friend 3 100, and friend 2 owing friend 3 100."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Think Greedy.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int minimum(int arr[], int n) {\n        int idx = 0;\n        int m = 1000000002;\n\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < m) {\n                m = arr[i];\n                idx = i;\n            }\n        }\n        return idx;\n    }\n\n    int maximum(int arr[], int n) {\n        int idx = 0;\n        int m = -1000000002;\n\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > m) {\n                m = arr[i];\n                idx = i;\n            }\n        }\n        return idx;\n    }\n\n    vector<vector<int>> minCashFlow(vector<vector<int>> &transaction, int n) {\n        // Net amount of Every friend\n        int netAmount[n] = {0};\n\n        // Fill the amount vector\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                netAmount[i] += (transaction[j][i] - transaction[i][j]);\n            }\n        }\n\n        // To store total '0' in 'netAmount' vector\n        int numberOfZero = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (netAmount[i] == 0) {\n                numberOfZero += 1;\n            }\n        }\n\n        // 2-D vector to store answer\n        vector<vector<int>> answer(n, vector<int>(n, 0));\n\n        // Iterate the step until all the element of vector is not '0'\n        while (numberOfZero != n) {\n            int minAmountIdx = minimum(netAmount, n);\n            int maxAmountIdx = maximum(netAmount, n);\n\n            // Reciever has more amount than sender\n            if (netAmount[maxAmountIdx] > abs(netAmount[minAmountIdx])) {\n                answer[minAmountIdx][maxAmountIdx] = abs(netAmount[minAmountIdx]);\n                netAmount[maxAmountIdx] =\n                    netAmount[maxAmountIdx] - abs(netAmount[minAmountIdx]);\n                netAmount[minAmountIdx] = 0;\n            }\n            // Reciever has less amount than sender\n            else if (netAmount[maxAmountIdx] < abs(netAmount[minAmountIdx])) {\n                answer[minAmountIdx][maxAmountIdx] = netAmount[maxAmountIdx];\n                netAmount[minAmountIdx] =\n                    netAmount[minAmountIdx] + netAmount[maxAmountIdx];\n                netAmount[maxAmountIdx] = 0;\n            }\n            // Reciever has equal amount compare to sender\n            else {\n                answer[minAmountIdx][maxAmountIdx] = abs(netAmount[minAmountIdx]);\n                netAmount[maxAmountIdx] = 0;\n                netAmount[minAmountIdx] = 0;\n                numberOfZero += 1;\n            }\n\n            numberOfZero += 1;\n        }\n\n        return answer;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int minimum(int[] arr, int n) {\n        int idx = 0;\n        int m = 1000000002;\n\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < m) {\n                m = arr[i];\n                idx = i;\n            }\n        }\n        return idx;\n    }\n\n    public int maximum(int[] arr, int n) {\n        int idx = 0;\n        int m = -1000000002;\n\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > m) {\n                m = arr[i];\n                idx = i;\n            }\n        }\n        return idx;\n    }\n\n    public int[][] minCashFlow(int[][] transaction, int n) {\n        int[] netAmount = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                netAmount[i] += transaction[j][i] - transaction[i][j];\n            }\n        }\n\n        int numberOfZero = 0;\n\n        for (int val : netAmount) {\n            if (val == 0) {\n                numberOfZero += 1;\n            }\n        }\n\n        int[][] answer = new int[n][n];\n\n        while (numberOfZero != n) {\n            int minAmountIdx = minimum(netAmount, n);\n            int maxAmountIdx = maximum(netAmount, n);\n\n            if (netAmount[maxAmountIdx] > Math.abs(netAmount[minAmountIdx])) {\n                answer[minAmountIdx][maxAmountIdx] = Math.abs(netAmount[minAmountIdx]);\n                netAmount[maxAmountIdx] -= Math.abs(netAmount[minAmountIdx]);\n                netAmount[minAmountIdx] = 0;\n            } else if (netAmount[maxAmountIdx] < Math.abs(netAmount[minAmountIdx])) {\n                answer[minAmountIdx][maxAmountIdx] = netAmount[maxAmountIdx];\n                netAmount[minAmountIdx] += netAmount[maxAmountIdx];\n                netAmount[maxAmountIdx] = 0;\n            } else {\n                answer[minAmountIdx][maxAmountIdx] = Math.abs(netAmount[minAmountIdx]);\n                netAmount[maxAmountIdx] = 0;\n                netAmount[minAmountIdx] = 0;\n                numberOfZero += 1;\n            }\n\n            numberOfZero += 1;\n        }\n\n        return answer;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def minimum(self, arr):\n        idx = 0\n        m = float('inf')\n\n        for i in range(len(arr)):\n            if arr[i] < m:\n                m = arr[i]\n                idx = i\n        return idx\n\n    def maximum(self, arr):\n        idx = 0\n        m = float('-inf')\n\n        for i in range(len(arr)):\n            if arr[i] > m:\n                m = arr[i]\n                idx = i\n        return idx\n\n    def minCashFlow(self, transaction, n):\n        netAmount = [0] * n\n\n        for i in range(n):\n            for j in range(n):\n                netAmount[i] += (transaction[j][i] - transaction[i][j])\n\n        numberOfZero = 0\n\n        for i in range(n):\n            if netAmount[i] == 0:\n                numberOfZero += 1\n\n        answer = [[0] * n for _ in range(n)]\n\n        while numberOfZero != n:\n            minAmountIdx = self.minimum(netAmount)\n            maxAmountIdx = self.maximum(netAmount)\n\n            if netAmount[maxAmountIdx] > abs(netAmount[minAmountIdx]):\n                answer[minAmountIdx][maxAmountIdx] = abs(\n                    netAmount[minAmountIdx])\n                netAmount[maxAmountIdx] -= abs(netAmount[minAmountIdx])\n                netAmount[minAmountIdx] = 0\n            elif netAmount[maxAmountIdx] < abs(netAmount[minAmountIdx]):\n                answer[minAmountIdx][maxAmountIdx] = netAmount[maxAmountIdx]\n                netAmount[minAmountIdx] += netAmount[maxAmountIdx]\n                netAmount[maxAmountIdx] = 0\n            else:\n                answer[minAmountIdx][maxAmountIdx] = abs(\n                    netAmount[minAmountIdx])\n                netAmount[maxAmountIdx] = 0\n                netAmount[minAmountIdx] = 0\n                numberOfZero += 1\n\n            numberOfZero += 1\n\n        return answer\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    minimum(arr) {\n        let idx = 0;\n        let m = 1000000002;\n\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] < m) {\n                m = arr[i];\n                idx = i;\n            }\n        }\n        return idx;\n    }\n\n    maximum(arr) {\n        let idx = 0;\n        let m = -1000000002;\n\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i] > m) {\n                m = arr[i];\n                idx = i;\n            }\n        }\n        return idx;\n    }\n\n    minCashFlow(transactions, n) {\n\n        // Net amount of Every friend\n        const netAmount = new Array(n).fill(0);\n\n        // Fill the amount vector\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < n; j++) {\n                netAmount[i] += (transactions[j][i] - transactions[i][j]);\n            }\n        }\n\n        // To store total '0' in 'netAmount' vector\n        let numberOfZero = 0;\n\n        for (let i = 0; i < n; i++) {\n            if (netAmount[i] === 0) {\n                numberOfZero += 1;\n            }\n        }\n\n        // 2-D array to store answer\n        const answer = Array.from({length : n}, () => new Array(n).fill(0));\n\n        // Iterate the step until all the element of vector is not '0'\n        while (numberOfZero !== n) {\n            const minAmountIdx = this.minimum(netAmount);\n            const maxAmountIdx = this.maximum(netAmount);\n\n            // Receiver has more amount than sender\n            if (netAmount[maxAmountIdx] > Math.abs(netAmount[minAmountIdx])) {\n                answer[minAmountIdx][maxAmountIdx] = Math.abs(netAmount[minAmountIdx]);\n                netAmount[maxAmountIdx] -= Math.abs(netAmount[minAmountIdx]);\n                netAmount[minAmountIdx] = 0;\n            }\n            // Receiver has less amount than sender\n            else if (netAmount[maxAmountIdx] < Math.abs(netAmount[minAmountIdx])) {\n                answer[minAmountIdx][maxAmountIdx] = netAmount[maxAmountIdx];\n                netAmount[minAmountIdx] += netAmount[maxAmountIdx];\n                netAmount[maxAmountIdx] = 0;\n            }\n            // Receiver has equal amount compare to sender\n            else {\n                answer[minAmountIdx][maxAmountIdx] = Math.abs(netAmount[minAmountIdx]);\n                netAmount[maxAmountIdx] = 0;\n                netAmount[minAmountIdx] = 0;\n                numberOfZero += 1;\n            }\n\n            numberOfZero += 1;\n        }\n\n        return answer;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}