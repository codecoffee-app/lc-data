{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712303,
            "title": "Minimize Max Distance to Gas Station",
            "titleSlug": "minimize-max-distance-to-gas-station",
            "content": "<p><span style=\"font-size: 18px;\">We have a horizontal number line. On that number line, we have gas <strong>stations </strong>at positions stations[0], stations[1], ..., stations[n-1], where <strong>n </strong>is the&nbsp;size of the stations array. Now, we add <strong>k</strong> more gas stations so that <strong>d</strong>, the maximum distance between adjacent gas stations, is minimized. We have to find the smallest possible value of d. Find the answer <strong>exactly</strong> to 2 decimal places.<br /><strong>Note</strong>:&nbsp;</span><strong style=\"font-size: 18px;\"><code>stations</code></strong><span style=\"font-size: 18px;\"> is in a </span><strong style=\"font-size: 18px;\">strictly increasing</strong><span style=\"font-size: 18px;\"> order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 10</span>\n<span style=\"font-size: 18px;\">stations[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>\n<span style=\"font-size: 18px;\">k = 9</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 0.50</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Each of the 9 stations can be added mid way between all the existing adjacent stations.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 10</span>\n<span style=\"font-size: 18px;\">stations[] = <code>[3, 6, 12, 19, 33, 44, 67, 72, 89, 95]</code></span> <br /><span style=\"font-size: 18px;\">k = 2</span> <br /><span style=\"font-size: 18px;\"><strong>Output:</strong> 14.00</span> <br /><span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><span style=\"font-size: 12pt;\">Construction of gas stations at 8th(between 72 and 89) and 6th(between 44 and 67) locations.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>findSmallestMaxDist()&nbsp;</strong>which takes a list of stations and integer k as inputs and returns the smallest possible value of d. Find the answer <strong>exactly</strong> to 2 decimal places.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraint:</strong><br />10 &lt;= n &lt;= 10000<sup>&nbsp;</sup><br />0 &lt;= stations[i] &lt;= 10<sup>9&nbsp;</sup><br />0 &lt;= k &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use binary search on the answer to find the smallest possible value of d.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int ok(double x, vector<int> &v) {\n        int ret = 0;\n        for (int i = 0; i < v.size() - 1; i++) {\n            ret += ceil((v[i + 1] - v[i]) / x) - 1;\n        }\n        return ret;\n    }\n\n    double findSmallestMaxDist(vector<int> &stations, int K) {\n        double low = 0;\n        int n = stations.size();\n        double high = stations[n - 1] - stations[0];\n        while (high - low >= 1e-6) {\n            double mid = (low + high) / 2.0;\n            int x = ok(mid, stations);\n            if (x > K) {\n                low = mid;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public static double findSmallestMaxDist(int st[], int K) {\n        // initialize variables\n        int count, N = st.length;\n        double left = 0, right = st[N - 1] - st[0], mid;\n\n        // binary search to find the smallest maximum distance\n        while (left + 1e-6 < right) {\n            mid = (left + right) / 2;\n            count = 0;\n\n            // calculate the count by dividing the distance by the mid and\n            // subtracting 1 from the result\n            for (int i = 0; i < N - 1; ++i)\n                count += Math.ceil((st[i + 1] - st[i]) / mid) - 1;\n\n            // update left or right based on the count\n            if (count > K)\n                left = mid;\n            else\n                right = mid;\n        }\n\n        // return the smallest maximum distance\n        return right;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    # Function to find the smallest maximum distance\n    def findSmallestMaxDist(self, stations, K):\n        left, right = 1e-6, stations[-1] - stations[0]\n        while left + 1e-6 < right:\n            mid = (left + right) / 2\n            count = 0\n\n            # Counting the number of stations that can be added with the current maximum distance\n            for a, b in zip(stations, stations[1:]):\n                count += math.ceil((b - a) / mid) - 1\n\n            # Updating the left or right values based on the count\n            if count > K:\n                left = mid\n            else:\n                right = mid\n        return right\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    ok(x, v) {\n        let ret = 0;\n        for (let i = 0; i < v.length - 1; i++) {\n            ret += Math.ceil((v[i + 1] - v[i]) / x) - 1;\n        }\n        return ret;\n    }\n\n    findSmallestMaxDist(stations, K) {\n        let low = 0;\n        let n = stations.length;\n        let high = stations[n - 1] - stations[0];\n        while (high - low >= 1e-6) {\n            let mid = (low + high) / 2.0;\n            let x = this.ok(mid, stations);\n            if (x > K) {\n                low = mid;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}