{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713137,
            "title": "Minimize number of Students to be removed",
            "titleSlug": "minimize-number-of-students-to-be-removed--170645",
            "content": "<p><span style=\"font-size:18px\"><strong>N</strong> Students of different heights are attending an assembly. The heights of the students are represented by an array<strong> </strong><strong>H[]. </strong>The problem is that if a student has less or equal height than the student standing in front of him, then he/she cannot see the assembly. Find the minimum number of students to be removed such that all the remaining students can see the assembly.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 6\r\nH[] = {9, 1, 2, 3, 1, 5}\r\n<strong>Output:\r\n</strong>2\r\n<strong>Explanation:</strong>\r\nWe can remove the students at 0 and 4th index.</span>\r\n<span style=\"font-size:18px\">which will leave the students with heights\r\n1,2,3, and 5.</span>\r\n</pre>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Example 2:</strong></span></div>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 3\r\nH[] = {1, 2, 3} \r\n<strong>Output :</strong>\r\n0</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nAll of the students are able to see the\r\nassembly without removing anyone.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>removeStudents()</strong>&nbsp;which takes an integer N and an array H[ ] of size N as input parameters and returns the minimum number of students required to be removed to enable all the remaining students to see&nbsp;the assembly.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N logN)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup><br />\r\n1 &le; H[i] &le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Longest Increasing Subsequence to solve the problem.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    // Helper function to find LIS\r\n    int LongestIncreasingSubsequenceLength(vector<int>& v)  \r\n    {  \r\n        if (v.size() == 0)  \r\n            return 0;  \r\n      \r\n        vector<int> tail(v.size(), 0);  \r\n        int length = 1; // always points empty slot in tail  \r\n      \r\n        tail[0] = v[0];  \r\n          \r\n        for (int i = 1; i < v.size(); i++) {  \r\n      \r\n                // Do binary search for the element in  \r\n                // the range from begin to begin + length \r\n            auto b = tail.begin(), e = tail.begin() + length; \r\n            auto it = lower_bound(b, e, v[i]);  \r\n                  \r\n            // If not present change the tail element to v[i]  \r\n            if (it == tail.begin() + length) \r\n                tail[length++] = v[i];  \r\n            else   \r\n                *it = v[i];  \r\n        }  \r\n      \r\n        return length;  \r\n    }  \r\n\r\n    int removeStudents(int H[], int N) {\r\n        \r\n        vector<int> arr;\r\n        for(int i=0; i<N; i++)\r\n            arr.push_back(H[i]);\r\n            \r\n        int ans = N - LongestIncreasingSubsequenceLength(arr);\r\n        \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end function Template for Java\n\nclass Solution {\n\n    // Function to find the length of the Longest Increasing Subsequence\n    public int lengthOfLIS(int[] nums) {\n        int[] dp = new int[nums.length]; // Array to store the lengths of LIS\n        int len = 0; // Variable to store the length of the LIS\n        for (int num : nums) {\n            int i = Arrays.binarySearch(dp, 0, len, num); // Binary search to find the position to insert the current number in the dp array\n            if (i < 0) { // If the number is not found in the dp array\n                i = -(i + 1); // Get the index to insert the number\n            }\n            dp[i] = num; // Insert the number at the correct position in the dp array\n            if (i == len) { // If the number was inserted at the end of the dp array\n                len++; // Increment the length of the LIS\n            }\n        }\n        return len; // Return the length of the LIS\n    }\n\n    // Function to remove students from the class\n    public int removeStudents(int[] H, int N) {\n        int ans = N - lengthOfLIS(H); // Calculate the number of students to be removed by subtracting the length of the LIS from the total number of students\n        return ans; // Return the answer\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end function Template for python3\r\n\r\nclass Solution:\r\n    \r\n    def lengthOfLIS(self, nums):\r\n        tails = [0] * len(nums)\r\n        size = 0\r\n        for x in nums:\r\n            i, j = 0, size\r\n            while i != j:\r\n                m = (i + j) // 2\r\n                if tails[m] < x:\r\n                    i = m + 1\r\n                else:\r\n                    j = m\r\n            tails[i] = x\r\n            size = max(i + 1, size)\r\n        return size\r\n    \r\n    def removeStudents(self, H, N):\r\n        \r\n        ans = N - self.lengthOfLIS(H)\r\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} H\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to remove students from the class.\n    removeStudents(H, N)\n    {\n        //Calculating the length of the longest increasing subsequence.\n        let tails = new Array(N).fill(0);\n        let size = 0;\n        for (let x of H) {\n            let i = 0, j = size;\n            while (i !== j) {\n                let m = Math.floor((i + j) / 2);\n                if (tails[m] < x) {\n                    i = m + 1;\n                } else {\n                    j = m;\n                }\n            }\n            tails[i] = x;\n            size = Math.max(i + 1, size);\n        }\n        let ans = N - size;\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Helper function to find LIS\n    private int LongestIncreasingSubsequenceLength(int[] v)\n    {\n        if (v.Length == 0)\n            return 0;\n\n        int[] tail = new int[v.Length];\n        int length = 0;\n\n        foreach (var item in v)\n        {\n            int start = 0, end = length, mid;\n            while (start < end)\n            {\n                mid = start + (end - start) / 2;\n                if (tail[mid] < item)\n                    start = mid + 1;\n                else\n                    end = mid;\n            }\n\n            tail[start] = item;\n            if (start == length)\n                length++;\n        }\n\n        return length;\n    }\n\n    //Complete this function\n    public int removeStudents(int[] H, int N)\n    {\n        if (N == 0)\n            return 0;\n\n        int ans = N - LongestIncreasingSubsequenceLength(H);\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}