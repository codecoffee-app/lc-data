{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703444,
            "title": "Minimize the Heights II",
            "titleSlug": "minimize-the-heights3351",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>&nbsp;denoting heights of <strong>N</strong> towers and a positive integer <strong>K. </strong></span></p>\n<p><span style=\"font-size: 18px;\">For <strong>each </strong>tower, you must perform <strong>exactly one</strong> of the following operations <strong>exactly once</strong>.</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\"><strong>Increase </strong>the height of the tower by <strong>K</strong></span></li>\n<li><span style=\"font-size: 18px;\"><strong>Decrease </strong>the height of the tower by <strong>K</strong></span></li>\n</ul>\n<p><span style=\"font-size: 18px;\">Find out the <strong>minimum </strong>possible difference between the height&nbsp;of the shortest and tallest towers after you have modified each tower.</span></p>\n<p><span style=\"font-size: 18px;\">You can find a slight modification of the problem&nbsp;<a href=\"https://practice.geeksforgeeks.org/problems/minimize-the-heights-i/1/\">here</a>.<br /><strong>Note:</strong> It is <strong>compulsory </strong>to increase or decrease the height by K for each tower. <strong>After</strong> the operation, the resultant array should <strong>not</strong> contain any <strong>negative integers</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k = 2, arr[] = {1, 5, 8, 10}\n<strong>Output: </strong>5\n<strong>Explanation: </strong>The array can be modified as {1+k, 5-k, 8-k, 10-k} = {3, 3, 6, 8}.The difference between the largest and the smallest is 8-3 = 5.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>k = 3, arr[] = {3, 9, 12, 16, 20}\n<strong>Output: </strong>11\n<strong>Explanation: </strong>The array can be modified as </span><span style=\"font-size: 18px;\">{3+k, 9+k, 12-k, 16-k, 20-k} -&gt; {6, 12, 9, 13, 17}.The difference between the largest and the smallest is 17-6 = 11.&nbsp;\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong><br />1 &le; k &le; 10<sup>7</sup><br />1 &le; n &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>7</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array `arr[]` of size `N` representing the heights of `N` towers and a positive integer `K`. For each tower, you must perform exactly one of the following operations once:\n\n*   Increase the height of the tower by `K`.\n*   Decrease the height of the tower by `K`.\n\nFind the minimum possible difference between the height of the shortest and tallest towers after you have modified each tower. Note that after the operation, the resultant array should not contain any negative integers.",
                "constraints": [
                    "1 <= k <= 10^7",
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "k = 2, arr[] = {1, 5, 8, 10}",
                        "output": "5",
                        "explanation": "The array can be modified as {1+k, 5-k, 8-k, 10-k} = {3, 3, 6, 8}. The difference between the largest and the smallest is 8-3 = 5."
                    },
                    {
                        "input": "k = 3, arr[] = {3, 9, 12, 16, 20}",
                        "output": "11",
                        "explanation": "The array can be modified as {3+k, 9+k, 12-k, 16-k, 20-k} -> {6, 12, 9, 13, 17}. The difference between the largest and the smallest is 17-6 = 11."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">The idea is to sort all the possible heights&nbsp;of every tower in&nbsp;increasing order and use two pointer method to&nbsp;get a range in which all towers are included.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int getMinDiff(vector<int> &arr, int k) {\n        // Step 1: Sort the array to simplify the comparison of heights\n        sort(arr.begin(), arr.end());\n\n        int n = arr.size();\n\n        // Initialize the answer with the current difference between the tallest and\n        // shortest towers\n        int ans = arr[n - 1] - arr[0];\n\n        // Traverse through each tower to consider possible modifications\n        for (int i = 1; i < n; i++) {\n            // If decreasing the current tower by k makes it negative, skip this\n            // iteration\n            if (arr[i] - k < 0)\n                continue;\n\n            //  Calculate the new minimum height:\n            //  It's the smaller value between:\n            //  - The first tower increased by k\n            //  - The current tower decreased by k\n            int mn = min(arr[0] + k, arr[i] - k);\n\n            //  Calculate the new maximum height:\n            //  It's the larger value between:\n            //  - The previous tower increased by k\n            //  - The last tower decreased by k\n            int mx = max(arr[i - 1] + k, arr[n - 1] - k);\n\n            // Update the answer with the smallest difference found so far\n            ans = min(ans, mx - mn);\n        }\n\n        // Return the minimum possible difference after modifications\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    int getMinDiff(int[] arr, int k) {\n        // Step 1: Sort the array to simplify the comparison of heights\n        Arrays.sort(arr);\n\n        int n = arr.length;\n\n        // Initialize the answer with the current difference between the tallest and\n        // shortest towers\n        int ans = arr[n - 1] - arr[0];\n\n        // Traverse through each tower to consider possible modifications\n        for (int i = 1; i < n; i++) {\n            // If decreasing the current tower by k makes it negative, skip this\n            // iteration\n            if (arr[i] - k < 0) {\n                continue;\n            }\n\n            //  Calculate the new minimum height:\n            //  It's the smaller value between:\n            //  - The first tower increased by k\n            //  - The current tower decreased by k\n            int mn = Math.min(arr[0] + k, arr[i] - k);\n\n            //  Calculate the new maximum height:\n            //  It's the larger value between:\n            //  - The previous tower increased by k\n            //  - The last tower decreased by k\n            int mx = Math.max(arr[i - 1] + k, arr[n - 1] - k);\n\n            //  Update the answer with the smallest difference found so far\n            ans = Math.min(ans, mx - mn);\n        }\n\n        // Return the minimum possible difference after modifications\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def getMinDiff(self, arr, k):\n        # Step 1: Sort the array to simplify the comparison of heights\n        arr.sort()\n\n        n = len(arr)\n\n        # Initialize the answer with the current difference between the tallest and shortest towers\n        ans = arr[-1] - arr[0]\n\n        # Traverse through each tower to consider possible modifications\n        for i in range(1, n):\n            # If decreasing the current tower by k makes it negative, skip this iteration\n            if arr[i] - k < 0:\n                continue\n\n            # Calculate the new minimum height:\n            # It's the smaller value between:\n            # - The first tower increased by k\n            # - The current tower decreased by k\n            mn = min(arr[0] + k, arr[i] - k)\n\n            # Calculate the new maximum height:\n            # It's the larger value between:\n            # - The previous tower increased by k\n            # - The last tower decreased by k\n            mx = max(arr[i - 1] + k, arr[-1] - k)\n\n            # Update the answer with the smallest difference found so far\n            ans = min(ans, mx - mn)\n\n        # Return the minimum possible difference after modifications\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int GetMinDiff(int[] arr, int k) {\n        // Step 1: Sort the array to simplify the comparison of heights\n        Array.Sort(arr);\n\n        int n = arr.Length;\n\n        // Initialize the answer with the current difference between the tallest and\n        // shortest towers\n        int ans = arr[n - 1] - arr[0];\n\n        // Traverse through each tower to consider possible modifications\n        for (int i = 1; i < n; i++) {\n            // If decreasing the current tower by k makes it negative, skip this\n            // iteration\n            if (arr[i] - k < 0) continue;\n\n            //  Calculate the new minimum height:\n            //  It's the smaller value between:\n            //  - The first tower increased by k\n            //  - The current tower decreased by k\n            int mn = Math.Min(arr[0] + k, arr[i] - k);\n\n            //  Calculate the new maximum height:\n            //  It's the larger value between:\n            //  - The previous tower increased by k\n            //  - The last tower decreased by k\n            int mx = Math.Max(arr[i - 1] + k, arr[n - 1] - k);\n\n            // Update the answer with the smallest difference found so far\n            ans = Math.Min(ans, mx - mn);\n        }\n\n        // Return the minimum possible difference after modifications\n        return ans;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr\n * @param {number} k\n * @returns {number}\n */\n\nclass Solution {\n    // Function to get the minimum difference between the heights.\n    getMinDiff(arr, k) {\n        // Step 1: Sort the array to simplify the comparison of heights\n        arr.sort((a, b) => a - b);\n\n        const n = arr.length;\n\n        // Initialize the answer with the current difference between the tallest and\n        // shortest towers\n        let ans = arr[n - 1] - arr[0];\n\n        // Traverse through each tower to consider possible modifications\n        for (let i = 1; i < n; i++) {\n            // If decreasing the current tower by k makes it negative, skip this\n            // iteration\n            if (arr[i] - k < 0) {\n                continue;\n            }\n\n            //  Calculate the new minimum height:\n            //  It's the smaller value between:\n            //  - The first tower increased by k\n            //  - The current tower decreased by k\n            const mn = Math.min(arr[0] + k, arr[i] - k);\n\n            //  Calculate the new maximum height:\n            //  It's the larger value between:\n            //  - The previous tower increased by k\n            //  - The last tower decreased by k\n            const mx = Math.max(arr[i - 1] + k, arr[n - 1] - k);\n\n            //  Update the answer with the smallest difference found so far\n            ans = Math.min(ans, mx - mn);\n        }\n\n        // Return the minimum possible difference after modifications\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}