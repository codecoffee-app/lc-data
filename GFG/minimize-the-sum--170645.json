{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713135,
            "title": "Minimize the sum",
            "titleSlug": "minimize-the-sum--170645",
            "content": "<p><span style=\"font-size:18px\">You are given&nbsp;<strong>N</strong>&nbsp;elements, you can remove any two elements from the list, note their sum, and add the sum to the list. Repeat these steps while there is more than a single element in the list. The task is to <strong>minimize</strong> the sum of these chosen sums.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 4\r\narr[] = {1, 4, 7, 10}\r\n\r\n<strong>Output:\r\n</strong>39\r\n\r\n<strong>Explanation:</strong>\r\nChoose 1 and 4, Sum = 1 + 4 = 5.\r\narr[] = {5, 7, 10}&nbsp;\r\nChoose 5 and 7, Sum = 5 + (5 + 7) = 17.\r\narr[] = {12, 10}&nbsp;\r\nChoose 12 and 10,&nbsp;<strong>Sum = 17 + (12 + 10) = 39.</strong>\r\narr[] = {22}</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 5\r\narr[] = {1, 3, 7, 5, 6}\r\n\r\n<strong>Output:\r\n</strong>48\r\n</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. The task is to complete the function <strong>minimizeSum()</strong>&nbsp;which takes&nbsp;N as size of arr array&nbsp;and a arr&nbsp;array. Your&nbsp;task is to <strong>minimize</strong> the sum of these chosen sums and return it.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N * log(N))<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1 &lt;= N, arr[i]&nbsp;&lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N elements, you can repeatedly remove two elements, calculate their sum, and add the sum back into the array. Continue this process until only one element remains. The goal is to minimize the total sum of the calculated sums during this process.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 4\narr[] = {1, 4, 7, 10}",
                        "output": "39",
                        "explanation": "1. Choose 1 and 4, Sum = 1 + 4 = 5.\narr[] = {5, 7, 10}\n2. Choose 5 and 7, Sum = 5 + (5 + 7) = 17.\narr[] = {12, 10}\n3. Choose 12 and 10, Sum = 17 + (12 + 10) = 39.\narr[] = {22}"
                    },
                    {
                        "input": "N = 5\narr[] = {1, 3, 7, 5, 6}",
                        "output": "48",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use priority queue and try to get the two minimum numbers in the data structure.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "priority-queue",
                "slug": "priority-queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "swiggy"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\npublic:\n    // Function to minimize the sum of elements in the array.\n    int minimizeSum(int n, vector<int> arr) {\n        priority_queue<int> pq; // Creating a priority queue to store the elements in descending order.\n        for(int i = 0; i < n; i++)\n            pq.push(-arr[i]); // Pushing the negation of each element into the priority queue to make it a max heap.\n        long long ans = 0; // Initializing a variable to store the final sum of elements.\n        while(pq.size() > 1) { // Running the loop until there is only one element left in the priority queue.\n            long long a = -pq.top(); // Getting the maximum element from the priority queue and storing it in variable a.\n            pq.pop(); // Removing the maximum element from the priority queue.\n            long long b = -pq.top(); // Getting the second maximum element from the priority queue and storing it in variable b.\n            pq.pop(); // Removing the second maximum element from the priority queue.\n            long long sum = a+b; // Calculating the sum of the two elements.\n            pq.push(-sum); // Pushing the negation of the sum back into the priority queue.\n            ans += sum; // Adding the sum to the final sum.\n        }\n        return ans; // Returning the minimum sum of elements.\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    long minimizeSum(int N, int arr[]) {\n        PriorityQueue<Long> pq = new PriorityQueue<>(); // creating a priority queue to store elements\n        long ans = 0;\n        for(int x : arr) pq.add(x * 1l); // converting int elements to long and adding them to the queue\n        while(pq.size() > 1){ // loop until there are more than 1 element in the queue\n            long a = pq.poll(), b = pq.poll(); // get the smallest two elements from the queue\n            long sum = a + b; // calculate the sum of the two elements\n            pq.add(sum); // add the sum back to the queue\n            ans += sum; // add the sum to the answer\n        }\n        return ans; // return the final answer\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import heapq\n\nclass Solution:\n    def minimizeSum(self, N, arr):\n        #Converting the list into a min-heap\n        heapq.heapify(arr)\n        #Initializing the sum as zero\n        ans = 0\n        \n        #Repeating the process until there is only one element left in the heap\n        while len(arr) != 1:\n            #Extracting the two smallest elements from the heap\n            x = heapq.heappop(arr)\n            y = heapq.heappop(arr)\n            #Calculating the sum of the two elements\n            z = x + y\n            #Pushing the sum back into the heap\n            heapq.heappush(arr, z)\n            #Adding the sum to the total sum\n            ans += z\n        \n        #Returning the total sum\n        return ans",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}