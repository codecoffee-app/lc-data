{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702815,
            "title": "Minimize the sum of product",
            "titleSlug": "minimize-the-sum-of-product1525",
            "content": "<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\">You are given two arrays<strong> arr1</strong>&nbsp;and <strong>arr2</strong>. The task is to find the minimum value of arr1[0] * arr2[0] + arr1[1] * arr2[1] + .... + arr1[N-1] * arr2[N-1], where the shuffling of elements of arrays arr1 and arr2&nbsp;is allowed.<br /><br /><strong>Examples:</strong></span></span></p>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1 = [3, 1, 1] , arr2 = [6, 5, 4]\n<strong>Output: </strong>23 </span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">1*6+1*5+3*4 = 6+5+12 = 23 is the minimum sum.</span></span></pre>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Input: </strong>arr1 = [6, 1, 9, 5, 4] , arr2 = [3, 4, 8, 2, 4]\n<strong>Output: </strong>80\n<strong>Explanation: </strong></span><span style=\"font-size: 18px;\">2*9+3*6+4*5+4*4+8*1 = 18+18+20+16+8 = 80 is the minimum sum.</span></span></pre>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlog(n))<br /><strong>Expected Auxiliary Space:</strong> O(1)<br /></span></span><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() == brr.size() &le; 10<sup>5</sup><br />1 &le; arr<sub>i</sub> , brr<sub>i</sub> &le; 10<sup>6</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `arr1` and `arr2`, of equal length, find the minimum possible value of the sum: `arr1[0] * arr2[0] + arr1[1] * arr2[1] + ... + arr1[N-1] * arr2[N-1]`. You are allowed to shuffle the elements of both `arr1` and `arr2` to achieve the minimum sum.",
                "constraints": [
                    "1 <= arr1.size() == arr2.size() <= 10^5",
                    "1 <= arr1[i], arr2[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [3, 1, 1] , arr2 = [6, 5, 4]",
                        "output": "23",
                        "explanation": "The minimum sum is achieved by multiplying the smallest elements of `arr1` with the largest elements of `arr2`, and vice-versa.  In this case: 1 * 6 + 1 * 5 + 3 * 4 = 6 + 5 + 12 = 23"
                    },
                    {
                        "input": "arr1 = [6, 1, 9, 5, 4] , arr2 = [3, 4, 8, 2, 4]",
                        "output": "80",
                        "explanation": "The minimum sum is obtained by pairing the smallest element of `arr1` with the largest element of `arr2`, and so on. The optimal pairing yields: 1 * 8 + 4 * 4 + 5 * 4 + 6 * 3 + 9 * 2 = 8 + 16 + 20 + 18 + 18 = 80"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use sorting to pair minimum and maximum values.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    typedef long long int ll;\n\n    long long int minValue(vector<int> &arr1, vector<int> &arr2) {\n        int n = arr1.size();\n        ll sum = 0;\n\n        // Sort A and B so that minimum and maximum\n        // value can easily be fetched.\n        sort(arr1.begin(), arr1.end());\n        sort(arr2.begin(), arr2.end(), greater<ll>());\n\n        // Multiplying minimum value of A and maximum\n        // value of B\n        for (int i = 0; i < n; i++)\n            sum += arr1[i] * arr2[i];\n\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public long minValue(List<Integer> arr1, List<Integer> arr2) {\n        int n = arr1.size();\n        long sum = 0;\n\n        // Sort arr in ascending order\n        Collections.sort(arr1);\n\n        // Sort brr in descending order\n        Collections.sort(arr2, Collections.reverseOrder());\n\n        // Multiply corresponding elements from arr and brr\n        for (int i = 0; i < n; i++) {\n            sum += (long)arr1.get(i) * arr2.get(i);\n        }\n\n        return sum;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minValue(self, arr1, arr2):\n        n = len(arr1)\n        arr1.sort()\n        arr2.sort(reverse=True)\n        sum = 0\n        for i in range(n):\n            sum += arr1[i] * arr2[i]\n        return sum\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    minValue(arr1, arr2) {\n        let n = arr1.length;\n        let sum = 0;\n\n        // Sort arr in ascending order and brr in descending order\n        arr1.sort((a, b) => a - b);\n        arr2.sort((a, b) => b - a);\n\n        // Multiplying minimum value of arr and maximum value of brr\n        for (let i = 0; i < n; i++) {\n            sum += arr1[i] * arr2[i];\n        }\n\n        return sum;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}