{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712351,
            "title": "Minimum Absolute Difference In BST",
            "titleSlug": "minimum-absolute-difference-in-bst-1665139652",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary search tree having <strong>n (n&gt;1)</strong> nodes, the task is to find the minimum absolute difference between any two nodes.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><br /><span style=\"font-size: 18px;\">Input tree</span><br /><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/712351/Web/Other/blobid0_1709057446.png\" alt=\"\" width=\"422\" height=\"236\" /></span><br /><strong><span style=\"font-size: 18px;\">Output:</span></strong><br /><span style=\"font-size: 18px;\">10</span><br /><strong><span style=\"font-size: 18px;\">Explanation:</span></strong><br /><span style=\"font-size: 18px;\">There are no two nodes whose absolute difference is smaller than 10.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><br /><span style=\"font-size: 18px;\">Input tree</span><br /><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/712351/Web/Other/blobid2_1709058082.png\" alt=\"\" width=\"384\" height=\"256\" /></span><br /><strong><span style=\"font-size: 18px;\">Output:</span></strong><br /><span style=\"font-size: 18px;\">20</span><br /><strong><span style=\"font-size: 18px;\">Explanation:</span></strong><br /><span style=\"font-size: 18px;\">There are no two nodes whose absolute difference is smaller than 20.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't have to take any input. Just complete the function <strong>absolute_diff</strong><strong>() ,&nbsp;</strong>that takes root as input and&nbsp;return&nbsp;minimum absolute difference between any two nodes.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(Height of tree)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">2 &lt;= n &lt;= 10<sup>5<br /></sup>0 &lt;= Node-&gt;data &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary search tree with *n* nodes (where *n* > 1), find the minimum absolute difference between the values of any two nodes in the tree.",
                "constraints": [
                    "2 <= n <= 10^5",
                    "0 <= Node->data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "A BST with the following structure:  {20,8,22,4,12,null,25,null,null,10,14}",
                        "output": "10",
                        "explanation": "The minimum absolute difference is between nodes 10 and 20, which is |20 - 10| = 10.  There are no two nodes with a smaller absolute difference."
                    },
                    {
                        "input": "A BST with the following structure: {30,5,40,1,20,35,50,null,null,10,25}",
                        "output": "20",
                        "explanation": "The minimum absolute difference is between nodes 5 and 25, which is |25 - 5| = 20. There are no two nodes with a smaller absolute difference."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Perform an in-order traversal of the binary search tree while keeping track of the differences between adjacent nodes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to perform an inorder traversal of a binary tree\r\n// and find the minimum absolute difference between adjacent nodes\r\n\r\nclass Solution\r\n{\r\npublic:\r\n  int inorderTraverse(Node *root, int &val, int &min_dif)\r\n  {\r\n    // Traverse the left subtree if it exists\r\n    if (root->left != NULL)\r\n      inorderTraverse(root->left, val, min_dif);\r\n\r\n    // Update the minimum difference if the current node is greater than\r\n    // or equal to the previously visited node\r\n    if (val >= 0)\r\n      min_dif = min(min_dif, root->data - val);\r\n\r\n    // Update the previous value with the current node's value\r\n    val = root->data;\r\n\r\n    // Traverse the right subtree if it exists\r\n    if (root->right != NULL)\r\n      inorderTraverse(root->right, val, min_dif);\r\n\r\n    // Return the minimum difference\r\n    return min_dif;\r\n  }\r\n\r\n  // Function to find the minimum absolute difference between adjacent nodes in a binary tree\r\n  int absolute_diff(Node *root)\r\n  {\r\n    // Initialize minimum difference and previous value variables\r\n    auto min_dif = INT_MAX, val = -1;\r\n\r\n    // Call the inorder traversal function to find the minimum difference\r\n    return inorderTraverse(root, val, min_dif);\r\n  }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n/*The Node structure is defined as\nstruct Node {\n    int data;\n    Node *left;\n    Node *right;\n\n};\n*/\nclass Solution\n{\n    int min = Integer.MAX_VALUE; // initialize the minimum difference to maximum possible value\n    Integer prev = null; // initialize a variable to store the previous node's value\n    int absolute_diff(Node root)\n    {\n        //Your code here\n         if (root == null) return min; // base case: if root is null, return the minimum difference\n        \n        absolute_diff(root.left); // recursively calculate the minimum difference for the left subtree\n        \n        if (prev != null) {\n            min = Math.min(min, root.data - prev); // calculate the difference between current node and previous node and update the minimum difference if necessary\n        }\n        prev = root.data; // update the previous node's value to the current node's value\n        \n        absolute_diff(root.right); // recursively calculate the minimum difference for the right subtree\n        \n        return min; // return the minimum difference\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def inorderTraverse(self, root, val, min_diff):\n        # Inorder traversal of the binary tree\n        if root.left != None:  # If left child exists\n            val, min_diff = self.inorderTraverse(root.left, val, min_diff)\n\n        if val >= 0:  # If val is not the initial value\n            min_diff = min(min_diff, root.data -\n                           val)  # Calculate the difference and update min_diff\n\n        val = root.data  # Update val to current node's data\n        if root.right != None:  # If right child exists\n            val, min_diff = self.inorderTraverse(root.right, val, min_diff)\n\n        return val, min_diff\n\n    def absolute_diff(self, root):\n        min_diff = float('inf')  # Initialize min_diff to infinity\n        val = -1  # Initialize val to -1\n        return self.inorderTraverse(root, val, min_diff)[\n            1]  # Return the min_diff after completing the inorder traversal\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}