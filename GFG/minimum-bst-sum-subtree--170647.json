{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714214,
            "title": "Minimum BST Sum Subtree",
            "titleSlug": "minimum-bst-sum-subtree--170647",
            "content": "<p><span style=\"font-size:18px\">Given a <strong>binary tree </strong>and a <strong>target</strong>, find the number of node in the minimum sub-tree with the given sum equal to the target which is also a binary search tree.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n\\t     13\r\n\\t   /    \\\r\n\\t 5\\t 23\r\n\\t/ \\\\t/ \\\r\n     N   17   N   N\r\n&nbsp;\\t  /\r\n&nbsp;\\t 16\r\n<strong>Target</strong>: 38\r\n<strong>Output:</strong> 3\r\n<strong>Explanation</strong>: 5,17,16 is the smallest subtree\r\nwith length 3.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n\\t\\t 7\r\n\\t     /   \\\r\n\\t    N    23\r\n\\t\\t /   \\\r\n\\t\\t10    23\r\n&nbsp;\\t    /  \\   / \\\r\n&nbsp;\\t   N   17 N   N\r\n<strong>Target</strong>: 73\r\n<strong>Output:</strong> -1\r\n<strong>Explanation</strong>: No subtree is bst for the given target.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong> &nbsp;<br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>minSubtreeSumBST</strong>() which takes the tree <strong>root</strong> and <strong>target</strong> as input parameters which is a <strong>binary Tree </strong>and returns the length of the minimum subtree having a sum equal to the target but which is a&nbsp;<strong>binary search tree</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>: O(N), where N is no. of nodes</span><br />\r\n<span style=\"font-size:18px\"><strong>Expected Space Complexity:&nbsp;</strong>O(h), where h is the height of the tree</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10^5</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and a target sum, find the size (number of nodes) of the smallest subtree that satisfies the following conditions:\n\n1.  The subtree's node values sum up to the target sum.\n2.  The subtree is a valid Binary Search Tree (BST).\n\nIf no such subtree exists, return -1.",
                "constraints": [
                    "1 <= N <= 10^5, where N is the number of nodes in the binary tree."
                ],
                "testcases": [
                    {
                        "input": "     13\n   /    \\\n  5      23\n / \\    / \\\nN   17  N   N\n   / \n  16\nTarget: 38",
                        "output": "3",
                        "explanation": "The subtree rooted at node 5, containing the nodes 5, 17, and 16, sums to 38 and is a BST. It has 3 nodes.  This is the smallest such subtree that meets both criteria."
                    },
                    {
                        "input": "    7\n   /   \\\n  N    23\n     /   \\\n    10    23\n   /  \\   / \\\n  N   17 N   N\nTarget: 73",
                        "output": "-1",
                        "explanation": "There is no subtree within the given binary tree that both sums to 73 and forms a valid Binary Search Tree.  Therefore, the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Recursively Traverse the tree and keep the track of leftMin, leftMax, leftSum, leftSumNode, rightMin, rightMax, rightSum, rightSumNode</span></p>",
            "<p><span style=\"font-size:18px\">Use the BST property to find if the subtree is bst or not then update the res value as max(res, leftSumNode +&nbsp;rightSumNode + 1)</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n//Class to store the information about a node in the tree\r\nclass Pair{\r\npublic:\r\n    int nodeMin; //minimum value in the subtree\r\n    int nodeMax; //maximum value in the subtree\r\n    int nodeSum; //sum of all node values in the subtree\r\n    int countNode; //number of nodes in the subtree\r\n    bool isBST; //flag to check if the subtree is a BST or not\r\n};\r\n\r\nclass Solution {\r\npublic:\r\n    int mn; //minimum number of nodes in a subtree that satisfies the conditions\r\n    Pair *minSubtree(Node *root, int target) {\r\n        if (root == NULL) {\r\n            //initialize the variables for an empty subtree\r\n            Pair *p = new Pair();\r\n            p->nodeMin = INT_MAX;\r\n            p->nodeMax = INT_MIN;\r\n            p->nodeSum = 0;\r\n            p->countNode = 0;\r\n            p->isBST = true;\r\n            return p;\r\n        }\r\n        //calculate the information for the left and right subtrees recursively\r\n        Pair *left = minSubtree(root->left, target);\r\n        Pair *right = minSubtree(root->right, target);\r\n        \r\n        //calculate the information for the current node\r\n        int nodeSum = left->nodeSum + right->nodeSum + root->data;\r\n        int countNode = left->countNode + right->countNode + 1;\r\n        int nodeMin1 = min(root->data, min(left->nodeMin, right->nodeMin));\r\n        int nodeMax1 = max(root->data, max(left->nodeMax, right->nodeMax));\r\n        bool isBST = root->data > left->nodeMax && root->data < right->nodeMin &&\r\n                        left->isBST && right->isBST;\r\n        \r\n        //check if the current subtree is a valid BST and has the target sum\r\n        if (isBST && nodeSum == target) {\r\n            mn = min(mn, countNode);\r\n        }\r\n        \r\n        //create a new Pair object to store the information for the current node\r\n        Pair *p = new Pair();\r\n        p->nodeMin = nodeMin1;\r\n        p->nodeMax = nodeMax1;\r\n        p->nodeSum = nodeSum;\r\n        p->countNode = countNode;\r\n        p->isBST = isBST;\r\n        return p;\r\n    }\r\n    \r\n    //function to find the minimum number of nodes in a subtree that satisfies the conditions\r\n    int minSubtreeSumBST(int target, Node *root) {\r\n        mn = INT_MAX;\r\n        //call the auxiliary recursive function\r\n        minSubtree(root, target);\r\n        //if no valid subtree was found, return -1\r\n        if (mn == INT_MAX) mn = -1;\r\n        return mn;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Pair {\r\n    int nodeMin;\r\n    int nodeMax;\r\n    int nodeSum;\r\n    int countNode;\r\n    boolean isBST;\r\n} class Solution {\r\n    static int min;\r\n    public static int minSubtreeSumBST(int target, Node root) {\r\n        // code here\r\n        min = Integer.MAX_VALUE;\r\n        minSubtree(root, target);\r\n        if (min == Integer.MAX_VALUE) min = -1;\r\n        return min;\r\n    }\r\n    public static Pair minSubtree(Node root, int target) {\r\n        if (root == null) {\r\n            Pair p = new Pair();\r\n            p.nodeMin = Integer.MAX_VALUE;\r\n            p.nodeMax = Integer.MIN_VALUE;\r\n            p.nodeSum = 0;\r\n            p.countNode = 0;\r\n            p.isBST = true;\r\n            return p;\r\n        }\r\n        Pair left = minSubtree(root.left, target);\r\n        Pair right = minSubtree(root.right, target);\r\n        int nodeSum = left.nodeSum + right.nodeSum + root.data;\r\n        int countNode = left.countNode + right.countNode + 1;\r\n        int nodeMin =\r\n            Math.min(root.data, Math.min(left.nodeMin, right.nodeMin));\r\n        int nodeMax =\r\n            Math.max(root.data, Math.max(left.nodeMax, right.nodeMax));\r\n        boolean isBST = root.data > left.nodeMax && root.data < right.nodeMin &&\r\n                        left.isBST && right.isBST;\r\n        if (isBST && nodeSum == target) {\r\n            min = Math.min(min, countNode);\r\n        }\r\n        Pair p = new Pair();\r\n        p.nodeMin = nodeMin;\r\n        p.nodeMax = nodeMax;\r\n        p.nodeSum = nodeSum;\r\n        p.countNode = countNode;\r\n        p.isBST = isBST;\r\n        return p;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def minSubtreeSumBST(self, target, root):\n        res = float(inf)   # Initialize result with infinity\n        def traverse(node):\n            nonlocal res   # Access res variable from outer scope\n            if not node:\n                return float(inf), float(-inf), 0, 0  # Return infinity, negative infinity, 0, 0 if node is None\n            left = traverse(node.left)   # Recursively traverse left subtree\n            right = traverse(node.right)   # Recursively traverse right subtree\n            if not left or not right:   # If either left or right subtree is None, return\n                return\n            leftMin, leftMax, leftSum, leftSumNode = left[0], left[1], left[2], left[3]   # Get values from left subtree traversal\n            rightMin, rightMax, rightSum, rightSumNode = right[0], right[1], right[2], right[3]   # Get values from right subtree traversal\n            if node.data > leftMax and node.data < rightMin:   # Check if node value is between the maximum value of left subtree and minimum value of right subtree\n                nodeMax = max(rightMax,node.data)   # Set nodeMax as the maximum value between the right subtree maximum and node value\n                nodeMin = min(leftMin, node.data)   # Set nodeMin as the minimum value between the left subtree minimum and node value\n                nodeSum = leftSum + rightSum + node.data   # Set nodeSum as the sum of left subtree sum, right subtree sum, and node value\n                if nodeSum == target:   # If node sum is equal to target, update result with the minimum subtree size\n                    res = min(res, leftSumNode + rightSumNode + 1)\n                return nodeMin, nodeMax, nodeSum, leftSumNode + rightSumNode + 1   # Return the minimum value, maximum value, sum, and subtree size of the current subtree\n        traverse(root)   # Call traverse function on root node\n        return res if res != float(inf) else -1   # Return result if it is not infinity, else return -1",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}