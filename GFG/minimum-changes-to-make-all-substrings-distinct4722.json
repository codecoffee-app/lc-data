{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703547,
            "title": "Minimum changes to make all substrings distinct",
            "titleSlug": "minimum-changes-to-make-all-substrings-distinct4722",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>s&nbsp;</strong>consisting only lower case alphabets, find the <strong>minimum number of changes</strong> required to it so that all substrings of the string become distinct.</span><br />\r\n<span style=\"font-size:18px\"><strong>Note:</strong> length of the string is at most 26.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>S = &quot;aab&quot;\r\n<strong>Output:</strong> 1\r\n<strong>Explanation</strong>: If we change one instance \r\nof &#39;a&#39; to any character from &#39;c&#39; to &#39;z&#39;, \r\nwe get all distinct substrings.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: S = &quot;ab&quot;\r\n<strong>Output:</strong> 0\r\n<strong>Explanation</strong>: As no change is required\r\nhence 0.</span><span style=\"font-size:18px\">\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>minChange()</strong>&nbsp;which takes the string <strong>S </strong>as inputs and returns the answer.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong>&nbsp;O(|S|)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(26)<br />\r\n<br />\r\n<strong>Constraints:</strong><br />\r\n1 &le; |S| &le; 26</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting only of lowercase alphabets, determine the minimum number of character changes needed to ensure that all substrings of `s` are distinct. The length of the string `s` will not exceed 26.",
                "constraints": [
                    "1 <= |S| <= 26"
                ],
                "testcases": [
                    {
                        "input": "aab",
                        "output": "1",
                        "explanation": "Changing one of the 'a' characters to any character from 'c' to 'z' will result in all substrings being distinct. For example, changing 'aab' to 'cab' yields distinct substrings: 'c', 'ca', 'cab', 'a', 'ab', 'b'."
                    },
                    {
                        "input": "ab",
                        "output": "0",
                        "explanation": "No changes are required because all substrings of 'ab' ('a', 'ab', 'b') are already distinct."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If any character occurs more than once in our string we have a repeated substring of size 1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "int minChange(string S) { \n     int f[26] = {0}; // array to store frequency of each character\n     for(auto i : S){\n        f[i - 'a']++; // increment frequency of character i\n     }\n     int c = 0; // variable to store count of unique characters\n     for(int i = 0; i < 26; i++)\n        if(f[i] > 0) c++; // if frequency of character i is greater than 0, increment count\n    return S.length() - c; // return the difference between the length of string S and the count of unique characters\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int minChange(string S)\n    {\n        int[] f = new int[26]; // array to store frequency of each character\n        foreach(char i in S)\n        {\n            f[i - 'a']++; // increment frequency of character i\n        }\n        int c = 0; // variable to store count of unique characters\n        for(int i = 0; i < 26; i++)\n        {\n            if(f[i] > 0) c++; // if frequency of character i is greater than 0, increment count\n        }\n        return S.Length - c; // return the difference between the length of string S and the count of unique characters\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}