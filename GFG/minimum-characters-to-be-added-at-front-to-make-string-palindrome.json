{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709865,
            "title": "Min Chars to Add for Palindrome",
            "titleSlug": "minimum-characters-to-be-added-at-front-to-make-string-palindrome",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>,<strong> </strong>the task is to find the minimum characters to be added at the front to make the string palindrome.</span></p>\n<p><span style=\"font-size: 18px;\">Note: A palindrome string is a sequence of characters that reads the same forward and backward.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"abc\"\n<strong>Output: </strong>2\n<strong>Explanation: </strong>Add 'b' and 'c' at front of above string to make it palindrome : \"<strong>cb</strong>abc\"</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"aacecaaaa\"\n<strong>Output: </strong>2\n<strong>Explanation:</strong> Add 2 a's at front of above string to make it palindrome : \"<strong>aa</strong>aacecaaaa\"</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= s.size() &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, determine the minimum number of characters that need to be added to the beginning of the string to transform it into a palindrome. A palindrome is a string that reads the same forwards and backward.",
                "constraints": [
                    "1 <= s.size() <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "abc",
                        "output": "2",
                        "explanation": "Adding 'b' and 'c' to the front of 'abc' results in the palindrome 'cbabc'."
                    },
                    {
                        "input": "aacecaaaa",
                        "output": "2",
                        "explanation": "Adding 'a' and 'a' to the front of 'aacecaaaa' results in the palindrome 'aaaacecaaaa'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>To efficiently solve the problem, concatenate the string, a special character <code>$</code>, and its reverse. Then compute the LPS array for this concatenated string. The result is the original string length minus the last LPS value.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n//  Function to compute the LPS array\nvoid computeLPSArray(const char* str, int* lps, int M) {\n    int len = 0; // Length of the previous longest prefix suffix\n    lps[0] = 0;  // lps[0] is always 0\n\n    int i = 1;\n    while (i < M) {\n        if (str[i] == str[len]) {\n            len++;\n            lps[i] = len;\n            i++;\n        } else {\n            if (len != 0) {\n                len = lps[len - 1];\n                // No increment of i here\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n}\n\n// Function to find the minimum characters to add\nint minChar(char str[]) {\n    int n = strlen(str);\n\n    // Reverse the input string\n    char* revStr = (char*)malloc((n + 1) * sizeof(char));\n    strcpy(revStr, str);\n    for (int i = 0; i < n / 2; i++) {\n        char temp = revStr[i];\n        revStr[i] = revStr[n - i - 1];\n        revStr[n - i - 1] = temp;\n    }\n\n    // Concatenate the string, special character, and reversed string\n    char* concat = (char*)malloc((2 * n + 2) * sizeof(char));\n    sprintf(concat, \"%s$%s\", str, revStr);\n\n    // Create LPS array for the concatenated string\n    int concatLen = strlen(concat);\n    int* lps = (int*)malloc(concatLen * sizeof(int));\n    computeLPSArray(concat, lps, concatLen);\n\n    // Result is the difference between original length and the last value of LPS\n    int result = n - lps[concatLen - 1];\n\n    // Free allocated memory\n    free(revStr);\n    free(concat);\n    free(lps);\n\n    return result;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> computeLPSArray(string str) {\n        int M = str.length();\n        vector<int> lps(M);\n\n        int len = 0;\n        lps[0] = 0; // lps[0] is always 0\n\n        // the loop calculates lps[i] for i = 1 to M-1\n        int i = 1;\n        while (i < M) {\n            if (str[i] == str[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else // (str[i] != str[len])\n            {\n                // This is tricky. Consider the example.\n                // AAACAAAA and i = 7. The idea is similar\n                // to search step.\n                if (len != 0) {\n                    len = lps[len - 1];\n\n                    // Also, note that we do not increment\n                    // i here\n                } else // if (len == 0)\n                {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n        return lps;\n    }\n\n    int minChar(string& str) {\n        // Write your code here\n        string revStr = str;\n        reverse(revStr.begin(), revStr.end());\n\n        // Get concatenation of string, special character\n        // and reverse string\n        string concat = str + \"$\" + revStr;\n\n        //  Get LPS array of this concatenated string\n        vector<int> lps = computeLPSArray(concat);\n\n        // By subtracting last entry of lps vector from\n        // string length, we will get our result\n        return (str.length() - lps.back());\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    public static int[] computeLPSArray(String str) {\n        int n = str.length();\n        int lps[] = new int[n];\n        int i = 1, len = 0;\n        lps[0] = 0; // lps[0] is always 0\n\n        while (i < n) {\n            if (str.charAt(i) == str.charAt(len)) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                // This is tricky. Consider the example.\n                // AAACAAAA and i = 7. The idea is similar\n                // to search step.\n                if (len != 0) {\n                    len = lps[len - 1];\n\n                    // Also, note that we do not increment\n                    // i here\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n        return lps;\n    }\n\n    public static int minChar(String str) {\n        // Write your code here\n        StringBuilder s = new StringBuilder();\n        s.append(str);\n\n        // Get concatenation of string, special character\n        // and reverse string\n        String rev = s.reverse().toString();\n        s.reverse().append(\"$\").append(rev);\n\n        // Get LPS array of this concatenated string\n        int lps[] = computeLPSArray(s.toString());\n        return str.length() - lps[s.length() - 1];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\ndef computeLPSArray(string):\n\n    M = len(string)\n    lps = [None] * M\n\n    length = 0\n    lps[0] = 0  # lps[0] is always 0\n\n    # the loop calculates lps[i]\n    # for i = 1 to M-1\n    i = 1\n    while i < M:\n\n        if string[i] == string[length]:\n\n            length += 1\n            lps[i] = length\n            i += 1\n\n        else:  # (str[i] != str[len])\n\n            # This is tricky. Consider the example.\n            # AAACAAAA and i = 7. The idea is\n            # similar to search step.\n            if length != 0:\n\n                length = lps[length - 1]\n\n                # Also, note that we do not\n                # increment i here\n\n            else:  # if (len == 0)\n\n                lps[i] = 0\n                i += 1\n\n    return lps\n\n\nclass Solution:\n\n    def minChar(self, string):\n        #Write your code here\n        revStr = string[::-1]\n\n        # Get concatenation of string,\n        # special character and reverse string\n        concat = string + \"$\" + revStr\n\n        # Get LPS array of this\n        # concatenated string\n        lps = computeLPSArray(concat)\n\n        # By subtracting last entry of lps\n        # vector from string length, we\n        # will get our result\n        return len(string) - lps[-1]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {string} str\n * @returns {number}\n */\nfunction computeLPSArray(string) {\n    let M = string.length;\n    let lps = new Array(M);\n    let length = 0;\n    lps[0] = 0;\n\n    let i = 1;\n    while (i < M) {\n        if (string[i] === string[length]) {\n            length++;\n            lps[i] = length;\n            i++;\n        } else {\n            if (length > 0) {\n                length = lps[length - 1];\n            } else {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n\n    return lps;\n}\n\nclass Solution {\n    minChar(str) {\n        let revStr = str.split('').reverse().join('');\n        let concat = str + \"$\" + revStr;\n        let lps = computeLPSArray(concat);\n        return str.length - lps[lps.length - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}