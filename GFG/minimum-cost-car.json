{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710260,
            "title": "Minimum Cost Car",
            "titleSlug": "minimum-cost-car",
            "content": "<p><span style=\"font-size: 18px;\">There are n cities connected by some number of cars. You are given an array of cars&nbsp;where cars[i]&nbsp;=[from<sub>i</sub>,to<sub>i</sub>,cost<sub>i</sub>]&nbsp;indicates that there is a car from the city from<sub>i</sub> to city to<sub>i</sub> with cost&nbsp;<code>price<sub>i</sub></code>.</span></p>\n<p><span style=\"font-size: 18px;\">You are also given three integers src,dst, and k, return&nbsp;<em><strong>the cheapest price</strong>&nbsp;from&nbsp;</em><code>src</code><em>&nbsp;to&nbsp;</em><code>dst</code><em>&nbsp;with at most&nbsp;</em><code>k</code><em>&nbsp;stops.&nbsp;</em>If there is no such route, return<em>&nbsp;</em><code>-1</code>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=4\ncars =  {{ 0,1,100},{1,2,100},{2,0,100},{1,3,600},{2,3,200}}\nsrc = 0\ndst = 3\nk = 1.\n<strong>Output:</strong>\n700\n<strong>Explanation:</strong>\nThe graph is shown above. The optimal path with at most 1 stops from cities 0 to 3 is marked in red and has cost 100 + 600 = 700. Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.</span></pre>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 3\ncars = {{0,1,100},{1,2,100},{0,2,500}}\nsrc = 0\ndst = 2\nk = 1\n<strong>Output:</strong>\n200\n<strong>Explanation:</strong>\nThe graph is shown above. The optimal path with at most 1 stops from city 0 to 2 is marked in red and has cost 100 + 100 = 200.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>minimumCost()</strong>&nbsp;which takes a number of cities N, the cars array&nbsp;cars[], the integer src, the integer dst, and the number of stops k<strong>&nbsp;</strong>as input parameters&nbsp;and returns the minimum cost else -1.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span><br /><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>2</sup><br />0&lt;= edges[i][0],edges[i][1] 1&lt;=edges[i][2]&lt;=10<sup>4</sup><br />0&lt;=src,dst,k src!=dst</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given `n` cities connected by flights. You are given an array `cars` where `cars[i] = [from_i, to_i, cost_i]` indicates a flight from city `from_i` to city `to_i` with cost `cost_i`. Find the cheapest price from city `src` to city `dst` with at most `k` stops. If there is no such route, return -1.",
                "constraints": [
                    "1 <= N <= 100",
                    "0 <= cars[i][0], cars[i][1] < N",
                    "1 <= cars[i][2] <= 10000",
                    "0 <= src, dst, k",
                    "src != dst"
                ],
                "testcases": [
                    {
                        "input": "N = 4\ncars =  {{ 0,1,100},{1,2,100},{2,0,100},{1,3,600},{2,3,200}}\nsrc = 0\ndst = 3\nk = 1",
                        "output": "700",
                        "explanation": "The optimal path with at most 1 stop from city 0 to 3 is 0 -> 1 -> 3, with a cost of 100 + 600 = 700.  The path 0 -> 1 -> 2 -> 3 is cheaper (100+100+200 = 400), but uses 2 stops, which is invalid."
                    },
                    {
                        "input": "N = 3\ncars = {{0,1,100},{1,2,100},{0,2,500}}\nsrc = 0\ndst = 2\nk = 1",
                        "output": "200",
                        "explanation": "The optimal path with at most 1 stop from city 0 to 2 is 0 -> 1 -> 2, with a cost of 100 + 100 = 200. The direct flight 0 -> 2 has a cost of 500, which is more expensive."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Bellmen Ford</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\n    public:\n        //Function to find the minimum cost to reach from source to sink \n        //with at most k stops.\n        int minimumCost(int n, vector<vector<int>>& a, int src, int sink, int k) {\n        \n        //Initializing a vector c with large values initially.\n        //The size of c is n, which represents the number of nodes.\n        vector<int> c(n, 1e8);\n        c[src] = 0;\n        \n        //Looping from 0 to k to find the minimum cost path.\n        for(int z=0; z<=k; z++){\n            //Creating a temporary vector C to store the updated minimum costs.\n            vector<int> C(c);\n            //Looping over the edges in a to update the minimum costs.\n            for(auto e: a)\n                C[e[1]] = min(C[e[1]], c[e[0]] + e[2]);\n            //Updating the vector c with the updated minimum costs.\n            c = C;\n        }\n        //Returning -1 if the minimum cost to reach the sink is still a large value\n        //(indicating that the sink is unreachable), otherwise returning the minimum cost.\n        return c[sink] == 1e8 ? -1 : c[sink];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}