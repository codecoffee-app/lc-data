{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701357,
            "title": "Minimum Cost of ropes",
            "titleSlug": "minimum-cost-of-ropes-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given an array, <strong>arr[]</strong> of rope lengths, connect all ropes into a single rope with the <strong>minimum total cost</strong>. The <strong>cost</strong> to connect two ropes is the <strong>sum of their lengths</strong>.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 3, 2, 6]\n<strong>Output: </strong>29<strong>\nExplanation: </strong>We can connect the ropes in following ways.\n1) First connect ropes of lengths 2 and 3. Which makes the array [4, 5, 6]. Cost of this operation 2 + 3 = 5. \n2) Now connect ropes of lengths 4 and 5. Which makes the array [9, 6]. Cost of this operation 4 + 5 = 9.\n3) Finally connect the two ropes and all ropes have connected. Cost of this operation 9 + 6 =15. Total cost is 5 + 9 + 15 = 29. This is the optimized cost for connecting ropes. <br />Other ways of connecting ropes would always have same or more cost. For example, if we connect 4 and 6 first (we get three rope of 3, 2 and 10), then connect 10 and 3 (we get two rope of 13 and 2). Finally we connect 13 and 2. Total cost in this way is 10 + 13 + 15 = 38.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 2, 7, 6, 9]\n<strong>Output: </strong>62 \n<strong>Explanation: </strong>First, connect ropes 4 and 2, which makes the array [6, 7, 6, 9]. Cost of this operation 4 + 2 = 6. <br />Next, add ropes 6 and 6, which results in [12, 7, 9]. Cost of this operation 6 + 6 = 12.\nThen, add 7 and 9, which makes the array [12,16]. Cost of this operation 7 + 9 = 16. And\nfinally, add these two which gives [28]. Hence, the total cost is 6 + 12 + 16 + 28 = 62.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10]\n<strong>Output: </strong>0<br /><strong>Explanation</strong>: Since there is only one rope, no connections are needed, so the cost is 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of rope lengths, find the minimum total cost to connect all ropes into a single rope. The cost of connecting two ropes is the sum of their lengths.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[4, 3, 2, 6]",
                        "output": "29",
                        "explanation": "Connect ropes of lengths 2 and 3 (cost 5, array becomes [4, 5, 6]). Then connect 4 and 5 (cost 9, array becomes [9, 6]). Finally, connect 9 and 6 (cost 15). Total cost: 5 + 9 + 15 = 29."
                    },
                    {
                        "input": "[4, 2, 7, 6, 9]",
                        "output": "62",
                        "explanation": "Connect ropes 4 and 2 (cost 6, array becomes [6, 7, 6, 9]). Next, connect 6 and 6 (cost 12, array becomes [12, 7, 9]). Then, connect 7 and 9 (cost 16, array becomes [12, 16]). Finally, connect 12 and 16 (cost 28). Total cost: 6 + 12 + 16 + 28 = 62."
                    },
                    {
                        "input": "[10]",
                        "output": "0",
                        "explanation": "Since there is only one rope, no connections are needed, and the cost is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think how joining smaller ones first will help.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "oyo-rooms",
            "goldman-sachs"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minCost(vector<int>& arr) {\n        // implementing MinHeap using priority queue.\n        int n = arr.size();\n        priority_queue<int, vector<int>, greater<int> > pq(arr.begin(), arr.end());\n\n        int res = 0;\n\n        // using a loop while there is more than one element in priority queue.\n        while (pq.size() > 1) {\n            // storing the first and second numbers from priority queue.\n            int first = pq.top();\n            pq.pop();\n            int second = pq.top();\n            pq.pop();\n\n            // adding their sum in result.\n            res += first + second;\n\n            // pushing the sum of first and second numbers in priority queue.\n            pq.push(first + second);\n        }\n        // returning the result.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int minCost(int[] arr) {\n        // implementing MinHeap using priority queue.\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n\n        // adding elements to the priority queue\n        for (int num : arr) {\n            pq.add(num);\n        }\n\n        int res = 0;\n\n        // using a loop while there is more than one element in priority queue.\n        while (pq.size() > 1) {\n            // storing the first and second numbers from priority queue.\n            int first = pq.poll();\n            int second = pq.poll();\n\n            // adding their sum in result.\n            res += first + second;\n\n            // pushing the sum of first and second numbers in priority queue.\n            pq.add(first + second);\n        }\n\n        // returning the result.\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def minCost(self, arr):\n\n        #list containing our min heap.\n        min_heap = []\n\n        #inserting all elements in heap.\n        for num in arr:\n            heapq.heappush(min_heap, num)\n\n        total_cost = 0\n\n        #using a loop while there is more than one element in min heap.\n        while (len(min_heap) > 1):\n\n            #storing the first and second numbers from min heap.\n            val_1 = heapq.heappop(min_heap)\n            val_2 = heapq.heappop(min_heap)\n\n            val = val_1 + val_2\n\n            #adding their sum in result.\n            total_cost += val\n            #pushing the sum first and second numbers in min heap.\n            heapq.heappush(min_heap, val)\n\n        #returning the result.\n        return total_cost\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    minCost(arr) {\n        if (arr.length <= 1) return 0;\n\n        // Initialize the heap with the elements in arr\n        this.heap = [];\n        for (const num of arr) {\n            this.insert(num);\n        }\n\n        let totalCost = 0;\n\n        // Continue combining ropes until only one remains\n        while (this.size() > 1) {\n            const val1 = this.extractMin();\n            const val2 = this.extractMin();\n            const combinedCost = val1 + val2;\n            totalCost += combinedCost;\n            this.insert(combinedCost);\n        }\n\n        return totalCost;\n    }\n\n    // Insert a value into the heap\n    insert(value) {\n        this.heap.push(value);\n        this._heapifyUp(this.heap.length - 1);\n    }\n\n    // Extract the minimum value from the heap\n    extractMin() {\n        if (this.heap.length === 1) return this.heap.pop();\n\n        const min = this.heap[0];\n        this.heap[0] = this.heap.pop();\n        this._heapifyDown(0);\n        return min;\n    }\n\n    // Get the size of the heap\n    size() { return this.heap.length; }\n\n    // Helper method to maintain the heap property on insertion\n    _heapifyUp(index) {\n        let parent = Math.floor((index - 1) / 2);\n        while (index > 0 && this.heap[index] < this.heap[parent]) {\n            [this.heap[index], this.heap[parent]] =\n                [ this.heap[parent], this.heap[index] ];\n            index = parent;\n            parent = Math.floor((index - 1) / 2);\n        }\n    }\n\n    // Helper method to maintain the heap property on extraction\n    _heapifyDown(index) {\n        let smallest = index;\n        const left = 2 * index + 1;\n        const right = 2 * index + 2;\n\n        if (left < this.heap.length && this.heap[left] < this.heap[smallest]) {\n            smallest = left;\n        }\n\n        if (right < this.heap.length && this.heap[right] < this.heap[smallest]) {\n            smallest = right;\n        }\n\n        if (smallest !== index) {\n            [this.heap[index], this.heap[smallest]] =\n                [ this.heap[smallest], this.heap[index] ];\n            this._heapifyDown(smallest);\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}