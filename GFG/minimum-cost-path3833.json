{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701746,
            "title": "Minimum Cost Path",
            "titleSlug": "minimum-cost-path3833",
            "content": "<p><span style=\"font-size: 18px;\">Given a square <strong>grid </strong>of size <strong>N</strong>, each cell of which contains an integer cost that represents a cost to traverse through that cell, we need to find a <strong>path</strong> from the <strong>top</strong> <strong>left</strong> cell to the <strong>bottom</strong> <strong>right</strong> cell by which the total cost incurred is <strong>minimum</strong>.<br />From the cell (i,j) we can go (i,j-1), (i, j+1), (i-1, j), (i+1, j). </span>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>grid = {{9,4,9,9},{6,7,6,4},{8,3,3,7},{7,4,9,10}}\n<strong>Output: </strong>43\n<strong>Explanation: </strong>The grid is-\n<span style=\"color: #ff0000;\">9 4 </span>9 9\n6 <span style=\"color: #ff0000;\">7 </span>6 4\n8 <span style=\"color: #ff0000;\">3 3 7</span>\n7 4 9 <span style=\"color: #ff0000;\">10</span>\nThe minimum cost is-\n9 + 4 + 7 + 3 + 3 + 7 + 10 = 43.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>grid = {{4,4},{3,7}}\n<strong>Output: </strong>14\n<strong>Explanation: </strong>The grid is-\n<span style=\"color: #ff0000;\">4 </span>4\n<span style=\"color: #ff0000;\">3 7\n</span>The minimum cost is- 4 + 3 + 7 = 14.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n<sup>2</sup>*log(n))<br /><strong>Expected Auxiliary Space: </strong>O(n<sup>2</sup>)&nbsp;</span><br />&nbsp;<strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1 &le; n &le; 500<br />1 &le; cost of cells &le; 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square grid of size N, where each cell contains an integer representing the cost to traverse it, find the path from the top-left cell (0, 0) to the bottom-right cell (N-1, N-1) with the minimum total cost. You can move from a cell (i, j) to any of its four adjacent cells: (i, j-1), (i, j+1), (i-1, j), or (i+1, j).",
                "constraints": [
                    "1 <= N <= 500",
                    "1 <= Cost of each cell <= 500"
                ],
                "testcases": [
                    {
                        "input": "grid = [[9,4,9,9],[6,7,6,4],[8,3,3,7],[7,4,9,10]]",
                        "output": "43",
                        "explanation": "The minimum cost path is 9 -> 4 -> 7 -> 3 -> 3 -> 7 -> 10, with a total cost of 43."
                    },
                    {
                        "input": "grid = [[4,4],[3,7]]",
                        "output": "14",
                        "explanation": "The minimum cost path is 4 -> 3 -> 7, with a total cost of 14."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a modified Dijkstra's algorithm to find the minimum cost path in the grid, treating each cell as a node in a graph.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "samsung",
            "makemytrip",
            "goldman-sachs"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution \n{\n    public:\n\tstruct cell\n\t{\n\t\tint x;\n\t\tint y;\n\t\tint distance;\n\t\tbool operator<(cell other)const{\n\t\t\tif(distance == other.distance){\n\t\t\t\tif(x != other.x)\n\t\t\t\t\treturn x < other.x;\n\t\t\t\treturn y < other.y;\n\t\t\t}\n\t\t\treturn distance < other.distance;\n\t\t}\n\t};\n\t\n    //these list store 4 possible moves from current cell.\n\tvector<int>dx = {-1,1,0,0};\n\tvector<int>dy = {0,0,1,-1};\n\t\n\t//Function to check if cell indexes are within bounds.\n\tbool isValid(int x, int y, int n, int m){\n\t\treturn (x >=0 and x < n and y >=0 and y < m);\n\t}\n\t\n\t//Function to return the minimum cost to react at bottom\n\t//right cell from top left cell.\n    int minimumCostPath(vector<vector<int>>& grid) \n    {\n    \tint n = grid.size();\n    \tint m = grid[0].size();\n    \t\n    \t//dp list to store minimum cost to reach each cell.\n    \tvector<vector<int>>dp(n, vector<int>(m, INT_MAX));\n    \t\n    \t//using a set to store cell indexes and minimum cost to reach that cell.\n    \tset<cell>st;\n    \tst.insert({0,0,0});\n    \tdp[0][0] = grid[0][0];\n    \t\n    \twhile(!st.empty())\n    \t{\n    \t    //storing first element of set and erasing it from set.\n    \t\tauto cur = *st.begin();\n    \t\tst.erase(st.begin());\n    \t\t\n    \t\t//iterating over 4 possible neighbours of current cell.\n    \t\tfor(int i = 0; i < 4; i++)\n    \t\t{\n    \t\t\tint x = cur.x + dx[i];\n    \t\t\tint y = cur.y + dy[i];\n    \t\t\t\n    \t\t\t//if cell indexes are within bounds and dp value at \n    \t\t\t//neighbouring cell+current cell value is less than at \n    \t\t\t//current cell, we update dp value at current cell and\n    \t\t\t//insert cell index with dp value in set.\n    \t\t\tif(isValid(x,y,n,m) and dp[x][y]>dp[cur.x][cur.y]+grid[x][y])\n    \t\t\t{\n    \t\t\t\tif(dp[x][y] != INT_MAX)\n    \t\t\t\t\tst.erase(st.find({x, y, dp[x][y]}));\n    \t\t\t\tdp[x][y] = dp[cur.x][cur.y] + grid[x][y];\n    \t\t\t\tst.insert({x, y, dp[x][y]});\n    \t\t\t}\n    \t\t}\n    \t}\n    \t//returning dp value at bottom right corner cell.\n    \treturn dp[n-1][m-1];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end Complete function Template for JAVA\n\nclass Solution\n{\n    //these list store 4 possible moves from current cell.\n    static int[] dx = { -1, 0, 1, 0 };\n    static int[] dy = { 0, 1, 0, -1 };\n    \n    static class Cell\n    {\n        int x;\n        int y;\n        int distance;\n        \n        Cell(int x, int y, int distance) \n        {\n            this.x = x;\n            this.y = y;\n            this.distance = distance;\n        }\n    }\n    \n    //custom comparator for inserting cells into Priority Queue.\n    static class distanceComparator \n      implements Comparator<Cell>\n    {\n        public int compare(Cell a, Cell b)\n        {\n            if (a.distance < b.distance)\n            {\n                return -1;\n            }\n            else if (a.distance > b.distance)\n            {\n                return 1;\n            }\n            else {return 0;}\n        }\n    }\n    \n    //Function to check if cell indexes are within bounds.\n    static boolean isInsideGrid(int i, int j, int ROW, int COL)\n    {\n        return (i >= 0 && i < ROW &&j >= 0 && j < COL);\n    }\n    \n    //Function to return the minimum cost to react at bottom\n\t//right cell from top left cell.\n    public int minimumCostPath(int[][] grid)\n    {\n        int row = grid.length;\n        int col = grid[0].length;\n        \n        //dp list to store minimum cost to reach each cell.\n        int[][] dp = new int[row][col];\n    \n        //initializing dp array by INT_MAX \n        for(int i = 0; i < row; i++)\n            for(int j = 0; j < col; j++)\n                dp[i][j] = Integer.MAX_VALUE;\n        \n        dp[0][0] = grid[0][0];\n        \n        //using priority queue to store cell indexes and \n        //minimum cost to reach that cell.\n        PriorityQueue<Cell> pq = new PriorityQueue<Cell>(row * col, new distanceComparator());\n                      \n        pq.add(new Cell(0, 0, dp[0][0]));\n        while (!pq.isEmpty())\n        {\n            //storing first element of priority queue and popping it.\n            Cell curr = pq.poll();\n            \n            //iterating over 4 possible neighbours of current cell.\n            for(int i = 0; i < 4; i++)\n            {\n                int rows = curr.x + dx[i];\n                int cols = curr.y + dy[i];\n                \n                //if cell indexes are within bounds.\n                if (isInsideGrid(rows, cols, grid.length, grid[0].length))\n                {\n                    //ifdp value at neighbouring cell+current cell value is less\n                    //than at current cell, we update dp value at current cell \n                    //and insert cell index with dp value in priority queue.\n                    if (dp[rows][cols] >dp[curr.x][curr.y]+grid[rows][cols])\n                    {\n                        //if cell is already been reached once, we\n                        //remove it from priority queue.\n                        if (dp[rows][cols] != Integer.MAX_VALUE)\n                        {\n                            Cell adj = new Cell(rows, cols, dp[rows][cols]);\n                            pq.remove(adj);\n                        }\n                        \n                        dp[rows][cols]=dp[curr.x][curr.y]+grid[rows][cols];\n                        pq.add(new Cell(rows, cols, dp[rows][cols]));\n                    }\n                }\n            }\n        }\n        //returning dp value at bottom right corner cell.\n        return dp[row - 1][col - 1];\n\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "import math\nimport heapq as hq\nclass Solution:\n    \n    #Function to check if cell indexes are within bounds.\n    def isValid(self, x, y, n):\n        return (x >= 0 and x < n and y >= 0 and y < n)\n        \n    #Function to return the minimum cost to react at bottom\n\t#right cell from top left cell.\n    def minimumCostPath(self, grid):\n        n = len(grid)\n        \n        #these list store 4 possible moves from current cell.\n        dx = [-1,1,0,0]\n        dy = [0,0,-1,1]\n        s = [0,0]\n        q = []\n        \n        #dp list to store minimum cost to reach each cell.\n        dp = [[math.inf for i in range(n)] for j in range(n)]\n        dp[0][0] = grid[0][0]\n        \n        #using a heap queue to store cell indexes and minimum \n        #cost to reach that cell.\n        hq.heappush(q, (dp[0][0],s))\n        \n        while(len(q)):\n            \n            #storing first element of heap queue and erasing it from heap queue.\n            d_v, v = hq.heappop(q)\n            \n            if(dp[v[0]][v[1]] != d_v):\n                continue\n            \n            #iterating over 4 possible neighbours of current cell.\n            for i in range(4):\n                x = v[0] + dx[i]\n                y = v[1] + dy[i]\n                \n                #if cell indexes are within bounds and dp value at \n    \t\t\t#neighbouring cell+current cell value is less than at \n    \t\t\t#current cell, we update dp value at current cell and\n    \t\t\t#insert cell index with dp value in heap queue.\n                if(self.isValid(x,y,n) and dp[x][y]>dp[v[0]][v[1]]+grid[x][y]):\n                    dp[x][y] = dp[v[0]][v[1]] + grid[x][y]\n                    hq.heappush(q, (dp[x][y], [x,y]))\n                    \n        #returning dp value at bottom right corner cell.\n        return dp[n-1][n-1]\n        \n        \n        \n        \n        ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() {\n        // These arrays store the 4 possible moves (up, down, left, right)\n        this.dx = [ -1, 1, 0, 0 ];\n        this.dy = [ 0, 0, 1, -1 ];\n    }\n\n    // Function to check if cell indexes are within bounds\n    isValid(x, y, n, m) { return x >= 0 && x < n && y >= 0 && y < m; }\n\n    // Function to return the minimum cost to reach the bottom-right cell from the\n    // top-left cell\n    minimumCostPath(grid) {\n        const n = grid.length;\n        const m = grid[0].length;\n\n        // dp array to store minimum cost to reach each cell\n        const dp = Array.from({length : n}, () => Array(m).fill(Infinity));\n\n        // Min-Heap (Priority Queue) to store cells with their current minimum distance\n        const minHeap = new MinHeap();\n        minHeap.insert([ 0, 0, 0 ]); // [distance, x, y]\n        dp[0][0] = grid[0][0];\n\n        while (!minHeap.isEmpty()) {\n            const [currentDist, x, y] = minHeap.extractMin();\n\n            // Iterate over the 4 possible neighbors of the current cell\n            for (let i = 0; i < 4; i++) {\n                const newX = x + this.dx[i];\n                const newY = y + this.dy[i];\n\n                // If cell indexes are within bounds and we find a smaller cost to reach\n                // (newX, newY)\n                if (this.isValid(newX, newY, n, m) &&\n                    dp[newX][newY] > dp[x][y] + grid[newX][newY]) {\n                    dp[newX][newY] = dp[x][y] + grid[newX][newY];\n                    minHeap.insert([ dp[newX][newY], newX, newY ]);\n                }\n            }\n        }\n\n        // Returning the dp value at the bottom-right corner cell\n        return dp[n - 1][m - 1];\n    }\n}\n\n// Min-Heap implementation in JavaScript (Priority Queue)\nclass MinHeap {\n    constructor() { this.heap = []; }\n\n    insert([ distance, x, y ]) {\n        this.heap.push([ distance, x, y ]);\n        this._bubbleUp(this.heap.length - 1);\n    }\n\n    extractMin() {\n        if (this.heap.length === 1) return this.heap.pop();\n\n        const min = this.heap[0];\n        this.heap[0] = this.heap.pop();\n        this._sinkDown(0);\n        return min;\n    }\n\n    isEmpty() { return this.heap.length === 0; }\n\n    _bubbleUp(index) {\n        while (index > 0) {\n            const parentIndex = Math.floor((index - 1) / 2);\n            if (this.heap[parentIndex][0] <= this.heap[index][0]) break;\n\n            [this.heap[parentIndex], this.heap[index]] =\n                [ this.heap[index], this.heap[parentIndex] ];\n            index = parentIndex;\n        }\n    }\n\n    _sinkDown(index) {\n        const length = this.heap.length;\n        const element = this.heap[index];\n\n        while (true) {\n            let leftChildIndex = 2 * index + 1;\n            let rightChildIndex = 2 * index + 2;\n            let swapIndex = null;\n\n            if (leftChildIndex < length) {\n                if (this.heap[leftChildIndex][0] < element[0]) {\n                    swapIndex = leftChildIndex;\n                }\n            }\n\n            if (rightChildIndex < length) {\n                if ((swapIndex === null &&\n                     this.heap[rightChildIndex][0] < element[0]) ||\n                    (swapIndex !== null &&\n                     this.heap[rightChildIndex][0] < this.heap[swapIndex][0])) {\n                    swapIndex = rightChildIndex;\n                }\n            }\n\n            if (swapIndex === null) break;\n\n            this.heap[index] = this.heap[swapIndex];\n            this.heap[swapIndex] = element;\n            index = swapIndex;\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}