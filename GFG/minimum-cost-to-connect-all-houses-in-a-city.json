{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 874906,
            "title": "Minimum cost to connect all houses in a city",
            "titleSlug": "minimum-cost-to-connect-all-houses-in-a-city",
            "content": "<p><span style=\"font-size: 18px;\">Given a 2D array of houses[][] consisting of n 2D coordinates {x, y} where each coordinate represents the <strong>location of each house</strong>, the task is to find the<strong> minimum cost to connect</strong> all the houses of the city.</span></p>\n<p><span style=\"font-size: 18px;\">The <strong>cost of connecting</strong> two houses is the <strong>Manhattan Distance</strong> between the two points (xi, yi) and (xj, yj) i.e., |xi &ndash; xj| + |yi &ndash; yj|, where |p| denotes the absolute value of p.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5 houses[][] = [[0, 0], [2, 2], [3, 10], [5, 2], [7, 0]]\n<strong>Output: </strong>20<br /></span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong>Explanation: </strong><br />Connect house 1 (0, 0) with house 2 (2, 2) with cost = 4\nConnect house 2 (2, 2) with house 3 (3, 10) with cost =9 \nConnect house 2 (2, 2) with house 4 (5, 2) with cost =3 \nAt last, connect house 4 (5, 2) with house 5 (7, 0) with cost 4.\nAll the houses are connected now.\nThe overall minimum cost is 4 + 9 + 3 + 4 = 20.<br /></span></span><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/problem_desc/Web/Other/blobid0_1727719998.jpg\" width=\"449\" height=\"276\" /> </pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4 houses[][] = [[0, 0], [1, 1], [1, 3], [3, 0]]\n<strong>Output: </strong>7<br /></span><strong>Explanation:</strong> \nConnect house 1 (0, 0) with house 2 (1, 1) with cost = 2\nConnect house 2 (1, 1) with house 3 (1, 3) with cost =2 \nConnect house 1 (0, 0) with house 4 (3, 0) with cost =3 \nThe overall minimum cost is 3 + 2 + 2 = 7.\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraint:</strong><br />1&lt;=n&lt;=10<sup>3</sup><br />0&lt;=</span><span style=\"font-size: 18px;\">houses</span><span style=\"font-size: 18px;\">[i][j]&lt;=</span><span style=\"font-size: 18px;\">10</span><sup>3</sup></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup>),</span><br /><span style=\"font-size: 18px;\"><strong>Expected Space Complexity:&nbsp;</strong>O(n<sup>2</sup>)</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">The idea is to create a weighted graph </span><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">from the given information with weights between any pair of edges equal to the cost of connecting them</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  private:\n    vector<int> parent, size;\n\n    // Utility function to find the set of an element v using path compression technique\n    int find_set(int v) {\n        if (v == parent[v])\n            return v;\n        return parent[v] = find_set(parent[v]); // Path compression\n    }\n\n    // Function to perform the union of the sets a and b\n    int union_sets(int a, int b) {\n        a = find_set(a);\n        b = find_set(b);\n\n        if (a != b) {\n            if (size[a] < size[b])\n                swap(a, b);\n\n            parent[b] = a;\n            size[a] += size[b];\n            return 1;\n        }\n        return 0;\n    }\n\n  public:\n    // Function to create a Minimum Cost Spanning Tree for given houses\n    int minCostCity(vector<vector<int>>& houses, int n) {\n        vector<pair<int, pair<int, int>>> edges;\n\n        // Traverse each coordinate and calculate the Manhattan distance\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int distance =\n                    abs(houses[i][0] - houses[j][0]) + abs(houses[i][1] - houses[j][1]);\n                edges.push_back({distance, {i, j}});\n            }\n        }\n\n        parent.resize(n);\n        size.resize(n);\n\n        // Sort all the edges based on Manhattan distance\n        sort(edges.begin(), edges.end());\n\n        // Initialize parent and size arrays\n        for (int i = 0; i < n; i++) {\n            parent[i] = i;\n            size[i] = 1;\n        }\n\n        int total_cost = 0;\n\n        // Perform union and calculate the minimum spanning tree cost\n        for (auto& edge : edges) {\n            if (union_sets(edge.second.first, edge.second.second)) {\n                total_cost += edge.first;\n            }\n        }\n\n        return total_cost;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    private int[] parent, size;\n\n    // Utility function to find the set of an element v using path compression technique\n    private int find_set(int v) {\n        if (v == parent[v]) {\n            return v;\n        }\n        return parent[v] = find_set(parent[v]); // Path compression\n    }\n\n    // Function to perform the union of the sets a and b\n    private boolean union_sets(int a, int b) {\n        a = find_set(a);\n        b = find_set(b);\n\n        if (a != b) {\n            if (size[a] < size[b]) {\n                int temp = a;\n                a = b;\n                b = temp;\n            }\n\n            parent[b] = a;\n            size[a] += size[b];\n            return true;\n        }\n        return false;\n    }\n\n    // Function to create a Minimum Cost Spanning Tree for given houses\n    public int minCostCity(int[][] houses, int n) {\n        List<int[]> edges = new ArrayList<>();\n\n        // Traverse each coordinate and calculate the Manhattan distance\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int distance = Math.abs(houses[i][0] - houses[j][0]) +\n                               Math.abs(houses[i][1] - houses[j][1]);\n                edges.add(new int[] {distance, i, j});\n            }\n        }\n\n        parent = new int[n];\n        size = new int[n];\n\n        // Sort all the edges based on Manhattan distance\n        edges.sort(Comparator.comparingInt(a -> a[0]));\n\n        // Initialize parent and size arrays\n        for (int i = 0; i < n; i++) {\n            parent[i] = i;\n            size[i] = 1;\n        }\n\n        int total_cost = 0;\n\n        // Perform union and calculate the minimum spanning tree cost\n        for (int[] edge : edges) {\n            if (union_sets(edge[1], edge[2])) {\n                total_cost += edge[0];\n            }\n        }\n\n        return total_cost;\n    }\n}\n",
                "lang_text": "java"
            }
        ],
        "platform": "GFG"
    }
}