{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710038,
            "title": "Minimum Cost to cut a board into squares",
            "titleSlug": "minimum-cost-to-cut-a-board-into-squares",
            "content": "<p><span style=\"font-size: 18px;\">A board of length <em>m</em>&nbsp;and width <em>n</em>&nbsp;is given.&nbsp;The task is&nbsp;to break this board into <em>m*n</em> squares such that cost of breaking is minimum. The cutting cost for each edge will be given for the board in two arrays x[]&nbsp;and y[]. In short, you&nbsp;need to choose such a sequence of cutting such that cost is minimized. Return the minimized cost.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples <br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>m = 6, n= 4, x[] = {2, 1, 3, 1, 4}, y[] = {4, 1, 2}\n<strong>Output: </strong>42\n<strong>Explanation:</strong> \n<img style=\"height: 200px; width: 300px;\" src=\"https://media.geeksforgeeks.org/img-practice/board-1646284249.png\" alt=\"\" />\nFor above board optimal way to cut into square is:\nTotal minimum cost in above case is 42. It is \nevaluated using following steps.\nInitial Value : Total_cost = 0\nTotal_cost = Total_cost + edge_cost * total_pieces\nCost 4 Horizontal cut:\\tCost = 0 + 4*1 = 4\nCost 4 Vertical cut:\\t  Cost = 4 + 4*2 = 12\nCost 3 Vertical cut:\\t  Cost = 12 + 3*2 = 18\nCost 2 Horizontal cut:\\tCost = 18 + 2*3 = 24\nCost 2 Vertical cut:\\t  Cost = 24 + 2*3 = 30\nCost 1 Horizontal cut:\\tCost = 30 + 1*4 = 34\nCost 1 Vertical cut:\\t  Cost = 34 + 1*4 = 38\nCost 1 Vertical cut:\\t  Cost = 38 + 1*4 = 42\n</span></pre>\n<pre>&nbsp;</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>m = 4, n = 4 x[] = {1, 1, 1} y[] = {1, 1, 1}\n<strong>Output: 15\nExplanation:</strong> \n<img style=\"height: 209px; width: 300px;\" src=\"https://media.geeksforgeeks.org/img-practice/board-1646284249-1661926688.png\" alt=\"\" />\nFor above board optimal way to cut into square is:\nTotal minimum cost in above case is 15.\nIt is evaluated using following steps.\nInitial Value : \nTotal_cost = 0 Total_cost = Total_cost + edge_cost * total_pieces\nCost 1 Horizontal cut: Cost = 0 + 1*1 = 1\nCost 1 Horizontal cut: Cost = 1 + 1*1 = 2\nCost 1 Horizontal cut: Cost = 2 + 1*1 = 3\nCost 1 Vertical cut:   Cost = 3 + 1*4 = 7\nCost 1 Vertical cut:   Cost = 7 + 1*4 = 11\nCost 1 Vertical cut:   Cost = 11 + 1*4 = 15</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <em>minimumCostOfBreaking()</em> which takes a&nbsp;string s and returns an integer as output.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(NlogN + MlogM)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /></span><span style=\"font-size: 18px;\">m &lt;= 10<sup>5, </sup></span><span style=\"font-size: 18px;\">2 &lt;= n<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a board of length *m* and width *n*, determine the minimum cost to break the board into *m* * *n* squares. You are provided with two arrays, `x[]` and `y[]`, representing the cutting costs for each vertical and horizontal edge, respectively. Find the sequence of cuts that minimizes the total cost.",
                "constraints": [
                    "m <= 10^5",
                    "2 <= n"
                ],
                "testcases": [
                    {
                        "input": "m = 6, n = 4, x = [2, 1, 3, 1, 4], y = [4, 1, 2]",
                        "output": "42",
                        "explanation": "Sort x in descending order to get [4, 3, 2, 1, 1] and y in descending order to get [4, 2, 1]. Apply a greedy approach, cutting along the edge with the highest cost that results in the most new pieces.  Prioritize cutting along the more valuable edges while considering the number of pieces created with each cut.  The optimal sequence of cuts, as described in the original problem, results in a total minimum cost of 42."
                    },
                    {
                        "input": "m = 4, n = 4, x = [1, 1, 1], y = [1, 1, 1]",
                        "output": "15",
                        "explanation": "Since all costs are the same, the order of cuts does not matter. Each horizontal cut costs 1 and adds 1 new row. Each vertical cut costs 1 and adds (m) new columns.  The total cost using the approach demonstrated in the problem description results in a minimum cost of 15."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to solve the problem greedily</span></p>",
            "<p><span style=\"font-size:18px\">Try to perform cuts on highest cost edge as early as possible</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\npublic:\r\n    // method returns minimum cost to break board into\r\n// m*n squares\r\nint minimumCostOfBreaking(vector<int>&X, vector<int>&Y, int m, int n)\r\n{\r\n    int res = 0;\r\n\r\n    //  sort the horizontal cost in reverse order\r\n    sort(X.rbegin(), X.rend());\r\n\r\n    //  sort the vertical cost in reverse order\r\n    sort(Y.rbegin(), Y.rend());\r\n\r\n    //  initialize current width as 1\r\n    int hzntl = 1, vert = 1;\r\n\r\n    //  loop until one or both cost array are processed\r\n    int i = 0, j = 0;\r\n    while (i < m-1 && j < n-1)\r\n    {\r\n        if (X[i] > Y[j])\r\n        {\r\n            res += X[i] * vert;\r\n\r\n            //  increase current horizontal part count by 1\r\n            hzntl++;\r\n            i++;\r\n        }\r\n        else\r\n        {\r\n            res += Y[j] * hzntl;\r\n\r\n            //  increase current vertical part count by 1\r\n            vert++;\r\n            j++;\r\n        }\r\n    }\r\n\r\n    // loop for horizontal array, if remains\r\n    int total = 0;\r\n    while (i < m-1)\r\n        total += X[i++];\r\n    res += total * vert;\r\n\r\n    // loop for vertical array, if remains\r\n    total = 0;\r\n    while (j < n-1)\r\n        total += Y[j++];\r\n    res += total * hzntl;\r\n\r\n    return res;\r\n}\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int minimumCostOfBreaking(int[] X, int[] Y, int M, int N) {\r\n        // Sorting the arrays X and Y\r\n        Arrays.sort(X);\r\n        Arrays.sort(Y);\r\n        \r\n        // Initializing variables for counting and storing the cost\r\n        int temp1 = 1; // count for vertical cuts\r\n        int temp2 = 1; // count for horizontal cuts\r\n        int i = X.length - 1; // pointer for array X\r\n        int j = Y.length - 1; // pointer for array Y\r\n        int ans = 0; // variable for storing the total cost\r\n        \r\n        // Performing the cutting\r\n        while (i >= 0 && j >= 0) {\r\n            if (X[i] >= Y[j]) {\r\n                // Adding the cost of vertical cut\r\n                ans += temp1 * X[i];\r\n                temp2++; // incrementing count for horizontal cuts\r\n                i--; // moving the pointer for array X\r\n            } else {\r\n                // Adding the cost of horizontal cut\r\n                ans += temp2 * Y[j];\r\n                temp1++; // incrementing count for vertical cuts\r\n                j--; // moving the pointer for array Y\r\n            }\r\n        }\r\n        \r\n        // Adding the remaining elements in array X\r\n        while (i >= 0) {\r\n            ans += temp1 * X[i];\r\n            i--; // moving the pointer for array X\r\n        }\r\n        \r\n        // Adding the remaining elements in array Y\r\n        while (j >= 0) {\r\n            ans += temp2 * Y[j];\r\n            j--; // moving the pointer for array Y\r\n        }\r\n        \r\n        return ans; // returning the total cost\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import List\nclass Solution:\n    def minimumCostOfBreaking(self,X : List[int], Y : List[int],M : int, N : int) -> int:\n        # code here\n        res = 0\n        \n        #sort the X and Y arrays in reverse order\n        X.sort(reverse = True)\n        Y.sort(reverse = True)\n        \n        #initialize variables for horizontal and vertical cuts\n        horizontal, vertical = 1, 1\n        i, j = 0, 0\n        \n        #loop until either i reaches M-1 or j reaches N-1\n        while (i < M-1 and j < N-1):\n            #check if X[i] is greater than Y[j]\n            if (X[i] > Y[j]):\n                #add X[i] multiplied by vertical cuts to the result\n                res += X[i] * vertical\n                #increment the number of horizontal cuts\n                horizontal += 1\n                #move to the next element in X\n                i += 1\n            else:\n                #add Y[j] multiplied by horizontal cuts to the result\n                res += Y[j] * horizontal\n                #increment the number of vertical cuts\n                vertical += 1\n                #move to the next element in Y\n                j += 1\n        \n        #calculate the total sum of remaining elements in X and add it to the result\n        total = 0\n        while (i < M-1):\n            total += X[i]\n            i += 1\n        res += total * vertical\n        \n        #calculate the total sum of remaining elements in Y and add it to the result\n        total = 0\n        while (j < N-1):\n            total += Y[j]\n            j += 1\n        res += total * horizontal\n        \n        #return the final result\n        return res",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}