{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704500,
            "title": "Minimum Cost To Make Two Strings Identical",
            "titleSlug": "minimum-cost-to-make-two-strings-identical1107",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings <strong>x</strong> and <strong>y</strong>, and two values <strong>costX</strong> and <strong>costY</strong>, the task is to find the minimum cost required to make the given two strings identical. You can delete characters from both the strings. The cost of deleting a character from string X is costX and from Y is costY. The cost of removing all characters from a string is the same.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>x = \"abcd\", y = \"acdb\", costX = 10 \n\\t costY = 20.\n<strong>Output:</strong> 30\n<strong>Explanation: </strong>For Making both strings \nidentical we have to delete character \n'b' from both the string, hence cost \nwill be = 10 + 20 = 30.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input : </strong>x = \"ef\", y = \"gh\", costX = 10\n\\t  costY = 20.\n<strong>Output: </strong>60\n<strong>Explanation: </strong>For making both strings \nidentical, we have to delete 2-2 \ncharacters from both the strings, hence \ncost will be = 10 + 10 + 20 + 20 = 60.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or&nbsp;print anything. Your task is to complete the function <strong><code>findMinCost</code>()&nbsp;</strong>which takes both strings and the costs as input parameters and returns the minimum cost.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|x|*|y|)<br /><strong>Expected Space Complexity: </strong>O(|x|*|y|</span><span style=\"font-size: 18px;\">)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |x|, |y| &le; 1000<br />1&lt;= costX, costY &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Try to implement Longest Common Subsequence.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n\n  public:\n    int lcs(string X, string Y, int m, int n) {\n        int L[m + 1][n + 1];\n\n        /* Following steps build L[m+1][n+1] in bottom\n           up fashion. Note that L[i][j] contains length\n           of LCS of X[0..i-1] and Y[0..j-1] */\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                if (i == 0 || j == 0)\n                    L[i][j] = 0;\n\n                else if (X[i - 1] == Y[j - 1])\n                    L[i][j] = L[i - 1][j - 1] + 1;\n\n                else\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1]);\n            }\n        }\n\n        /* L[m][n] contains length of LCS for X[0..n-1] and\n           Y[0..m-1] */\n        return L[m][n];\n    }\n\n    // Returns cost of making X[] and Y[] identical.  costX is\n    // cost of removing a character from X[] and costY is cost\n    // of removing a character from Y[]/\n    int findMinCost(string X, string Y, int costX, int costY) {\n        // Find LCS of X[] and Y[]\n        int m = X.length(), n = Y.length();\n        int len_LCS = lcs(X, Y, m, n);\n\n        // Cost of making two strings identical is SUM of\n        // following two\n        //   1) Cost of removing extra characters\n        //      from first string\n        //   2) Cost of removing extra characters from\n        //      second string\n        return costX * (m - len_LCS) + costY * (n - len_LCS);\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int lcs(String X, String Y, int m, int n) {\n        int[][] L = new int[m + 1][n + 1];\n\n        /* Following steps build L[m+1][n+1] in bottom\n           up fashion. Note that L[i][j] contains length\n           of LCS of X[0..i-1] and Y[0..j-1] */\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                if (i == 0 || j == 0)\n                    L[i][j] = 0;\n\n                else if (X.charAt(i - 1) == Y.charAt(j - 1))\n                    L[i][j] = L[i - 1][j - 1] + 1;\n\n                else\n                    L[i][j] = Math.max(L[i - 1][j], L[i][j - 1]);\n            }\n        }\n\n        /* L[m][n] contains length of LCS for X[0..n-1] and\n           Y[0..m-1] */\n        return L[m][n];\n    }\n\n    public int findMinCost(String x, String y, int costX, int costY) {\n        // Find LCS of X[] and Y[]\n        int m = x.length(), n = y.length();\n        int len_LCS = lcs(x, y, m, n);\n\n        // Cost of making two strings identical is SUM of\n        // following two\n        //   1) Cost of removing extra characters\n        //      from first string\n        //   2) Cost of removing extra characters from\n        //      second string\n        return costX * (m - len_LCS) + costY * (n - len_LCS);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findMinCost(self, X, Y, costX, costY):\n        # creating a matrix to store the lengths of the common subsequence\n        dp = [[0] * (len(X) + 1) for i in range(len(Y) + 1)]\n\n        for i in range(1, len(Y) + 1):\n            for j in range(1, len(X) + 1):\n                # if the characters at the current positions are equal,\n                # then increase the length of the common subsequence by 1\n                if X[j - 1] == Y[i - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    # else, take the maximum length of the common subsequence\n                    # from either the top cell or the left cell\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        # calculate the cost by multiplying the number of characters\n        # not present in the common subsequence with their respective costs\n        x = (len(X) - dp[-1][-1]) * costX\n        y = (len(Y) - dp[-1][-1]) * costY\n\n        # return the total cost\n        return x + y\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findMinCost(X, Y, costX, costY) {\n        let m = X.length;\n        let n = Y.length;\n\n        let L = new Array(m + 1).fill().map(() => new Array(n + 1).fill(0));\n\n        for (let i = 0; i <= m; i++) {\n            for (let j = 0; j <= n; j++) {\n                if (i == 0 || j == 0) {\n                    L[i][j] = 0;\n                } else if (X[i - 1] == Y[j - 1]) {\n                    L[i][j] = L[i - 1][j - 1] + 1;\n                } else {\n                    L[i][j] = Math.max(L[i - 1][j], L[i][j - 1]);\n                }\n            }\n        }\n\n        let len_LCS = L[m][n];\n        return costX * (m - len_LCS) + costY * (n - len_LCS);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}