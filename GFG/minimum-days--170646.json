{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713590,
            "title": "Minimum Days",
            "titleSlug": "minimum-days--170646",
            "content": "<p><span style=\"font-size:18px\">Given a string S of length N containing only lowercase alphabets. You are also given a permutation P of length N containing integers from 0 to N-1. In (i+1)&#39;th day you can take the P[i] value of the permutation array and replace S[P[i]] with a &#39;?&#39;.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">For example in day 1, we can choose index of permutation array is i=0 and replace S[P[0]] with &#39;?&#39;.<br />\r\nSimilarly in day 2, we can choose index of permutation array is i=1. You can replace S[P[1]] with &#39;?&#39;.<br />\r\nSimilarly in day 3,we can choose index of permutation array is i=2. You can replace S[P[2]] with &#39;?&#39;.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">You have to tell the minimum number of days required, such that after it for all index&nbsp;i (0&lt;=i&lt;N-1), if S[i]!=&#39;?&#39;, then S[i]!=S[i+1].</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4\r\nS = &quot;aabb&quot;\r\nP[] = {2, 1, 3, 0}\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> In day 1, we replace S[P[0]] with &#39;?&#39;. \r\nAfter that String S = &quot;aa?b&quot;. As we can see S \r\nstill has character &#39;a&#39; at index 0 and 1.\r\nIn day 2, we replace S[P[1]] with &#39;?&#39;. After \r\nthat String S = &quot;a??b&quot;. As we can see the String \r\nhas for all index i (0&lt;=i&lt;N-1), if S[i]!=&#39;?&#39;, then S[i]!=S[i+1].</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4\r\nS = &quot;abca&quot;\r\nP[] = {3, 0, 2, 1}\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> We can see that the initial string \r\nS = &quot;abca&quot; has for all index i (0&lt;=i&lt;N-1), if S[i]!=&#39;?&#39;, then S[i]!=S[i+1].</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Your Task:&nbsp;</span></strong><br />\r\n<span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function getMinimumDays() which takes the string S, array P[] and its size N as input parameters and returns the minimum number of days required such that string satisfies with the condition given earlier.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(n).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Constraints:</span></strong></p>\r\n\r\n<p><span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup><br />\r\n0 &lt;= P[i] &lt;= N-1<br />\r\nS contains only lowercase alphabets.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` of length `N` containing only lowercase alphabets and a permutation `P` of length `N` containing integers from 0 to N-1. On each day `i+1`, you can replace `S[P[i]]` with a '?'. Determine the minimum number of days required such that for all indices `i` (0 <= i < N-1), if `S[i]` is not equal to '?', then `S[i]` is not equal to `S[i+1]`.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= P[i] <= N-1",
                    "S contains only lowercase alphabets"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nS = \"aabb\"\nP[] = {2, 1, 3, 0}",
                        "output": "2",
                        "explanation": "Initially, S = \"aabb\".\nDay 1: Replace S[P[0]] = S[2] with '?'. S becomes \"aa?b\".  'a' at index 0 and 1 are still the same.\nDay 2: Replace S[P[1]] = S[1] with '?'. S becomes \"a??b\". Now, no adjacent characters are the same (excluding '?')."
                    },
                    {
                        "input": "N = 4\nS = \"abca\"\nP[] = {3, 0, 2, 1}",
                        "output": "0",
                        "explanation": "The initial string S = \"abca\" already satisfies the condition. No adjacent characters are the same."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a greedy approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    //Function to get the minimum number of days to change characters in a string.\n    int getMinimumDays(int N,string S, vector<int> &P) {\n        // code here\n        int t=0,i,j;\n        //calculating the initial number of consecutive same characters.\n        for(i=0;i<N-1;i++){\n            if(S[i]==S[i+1]) t++;\n        }\n        //if there are no consecutive same characters, return 0.\n        if(t==0) return 0;\n        else{\n            //iterating through the positions provided.\n            for(i=0;i<N;i++){\n                int in=P[i];\n                //checking if changing the character at position - 1\n                //or position + 1 can reduce the consecutive same characters count.\n                if(in-1>=0 && S[in-1]==S[in]) t--;\n                if(in+1<N && S[in]==S[in+1]) t--;\n                //replacing the character at the given position with a special character '?'\n                //to mark it as already changed.\n                S[in]='?';\n                //checking if the consecutive same characters count reaches 0.\n                if(t==0){\n                    //if yes, returning the number of positions iterated + 1\n                    //as the minimum number of days required to change all characters.\n                    return i+1;\n                }\n            }\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int getMinimumDays(int N, String S, int[] P) {\n        // convert string into char array\n        char c[]=S.toCharArray();\n        // initialize a counter variable\n        int t=0,i,j;\n        // loop through the char array and count consecutive pairs of characters that are the same\n        for(i=0;i<N-1;i++){\n           if(c[i]==c[i+1]) t++;\n        }\n        // if there are no consecutive pairs, return 0\n        if(t==0) return 0;\n        // if there are consecutive pairs, find the minimum number of days required to break all pairs\n        else{\n            // initialize a variable to store the minimum number of days\n            int ans=0;\n            // loop through the positions array\n            for(i=0;i<N;i++){\n                // get the current position\n                int in=P[i];\n                // check if there is a pair to the left of the current position\n                if(in-1>=0 && c[in-1]==c[in]) t--;\n                // check if there is a pair to the right of the current position\n                if(in+1<N && c[in]==c[in+1]) t--;\n                // replace the current character with '?'\n                c[in]='?';\n                // check if all pairs have been broken\n                if(t==0){\n                    // store the current index as the minimum number of days required\n                    ans=i+1;\n                    // exit the loop\n                    break;\n                }\n            }\n            // return the minimum number of days\n            return ans;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\r\n\r\nclass Solution:\r\n\r\n    # Function to find minimum number of days\r\n    def getMinimumDays(self, N: int, S: str, P: List[int]) -> int:\r\n        t = 0\r\n        S = list(S)\r\n\r\n        # Counting number of adjacent characters in string\r\n        for i in range(N - 1):\r\n            if(S[i] == S[i + 1]):\r\n                t += 1\r\n\r\n        # If there are no adjacent characters, return 0\r\n        if t == 0:\r\n            return 0\r\n\r\n        for i in range(N):\r\n\r\n            inn = P[i]\r\n\r\n            # Checking if adjacent characters exist at indices inn-1 and inn\r\n            if inn - 1 >= 0 and S[inn - 1] == S[inn]:\r\n                t -= 1\r\n\r\n            if inn + 1 < N and S[inn] == S[inn + 1]:\r\n                t -= 1\r\n\r\n            # Replacing the character at index inn with '?' to mark it as visited\r\n            S[inn] = '?'\r\n\r\n            # If there are no more adjacent characters, return the current day\r\n            if(t == 0):\r\n                return i + 1",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {string} S\n * @param {number[]} P\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to get the minimum number of days to complete all the projects.\n    getMinimumDays(N, S, P) {\n        let t = 0;\n        S = S.split('');\n\n        // Counting number of adjacent characters in string\n        for (let i = 0; i < N - 1; i++) {\n            if (S[i] == S[i + 1]) {\n                t += 1;\n            }\n        }\n\n        // If there are no adjacent characters, return 0\n        if (t == 0) {\n            return 0;\n        }\n\n        for (let i = 0; i < N; i++) {\n            let inn = P[i];\n\n            // Checking if adjacent characters exist at indices inn-1 and inn\n            if (inn - 1 >= 0 && S[inn - 1] == S[inn]) {\n                t -= 1;\n            }\n\n            if (inn + 1 < N && S[inn] == S[inn + 1]) {\n                t -= 1;\n            }\n\n            // Replacing the character at index inn with '?' to mark it as visited\n            S[inn] = '?';\n\n            // If there are no more adjacent characters, return the current day\n            if(t == 0) {\n                return i + 1;\n            }\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}