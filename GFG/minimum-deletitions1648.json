{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703487,
            "title": "Minimum Deletions",
            "titleSlug": "minimum-deletitions1648",
            "content": "<p><span style=\"font-size: 18px;\">Given a string of <strong>S</strong> as input. Your task is to write a program to <strong>delete </strong>the minimum number of characters from the string so that the resultant string is a palindrome.<br /><strong>Note:</strong> The order of characters in the string should be maintained.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>S<strong> </strong>=<strong> \"</strong>aebcbda\"\n<strong>Output:</strong> <br />2\n<strong>Explanation</strong>: <br />Remove characters 'e' and 'd'.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: <br />S = \"geeksforgeeks\"\n<strong>Output:</strong> <br />8\n<strong>Explanation</strong>: <br />One of the possible result string can be \"eefee\", so answer is 13 - 5 = 8.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>minimumNumberOfDeletions()</strong>&nbsp;which takes the string <strong>S </strong>as inputs and returns the minimum number of deletions required to convert <strong>S</strong> into a pallindrome.<br /><br /><strong>Expected Time Complexity:</strong>&nbsp;O(|S|<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(|S|<sup>2</sup>)<br /><br /><strong>Constraints:</strong><br />1 &le; |S| &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S, determine the minimum number of characters that need to be deleted to make the string a palindrome. The order of the remaining characters must be maintained.",
                "constraints": [
                    "1 <= |S| <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "aebcbda",
                        "output": "2",
                        "explanation": "Deleting 'e' and 'd' results in the palindrome 'abcba', requiring 2 deletions."
                    },
                    {
                        "input": "geeksforgeeks",
                        "output": "8",
                        "explanation": "A possible palindromic subsequence is 'eefee' (length 5). Therefore, 13 - 5 = 8 deletions are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find length of longest pallindromic subsequence.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution{\n  public:\n    // Function to find the length of the longest palindromic subsequence\n    int lps(string S) { \n        int n = S.size(); \n        int L[n][n]; \n        \n        // Initializing the diagonal elements of the matrix to 1\n        for (int i = 0; i < n; i++) \n            L[i][i] = 1; \n        \n        // Filling the remaining elements of the matrix\n        for (int cl = 2; cl <= n; cl++) { \n            for (int i = 0; i < n - cl + 1; i++) { \n                int j = i + cl - 1; \n                // If the characters at both positions are same and the length is 2\n                if (S[i] == S[j] && cl == 2) \n                    L[i][j] = 2; \n                // If the characters at both positions are same\n                else if (S[i] == S[j]) \n                    L[i][j] = L[i + 1][j - 1] + 2; \n                // If the characters at both positions are different\n                else\n                    L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n            } \n        } \n        // Returning the length of the longest palindromic subsequence\n        return L[0][n - 1]; \n    } \n    \n    // Function to find the minimum number of deletions required to make a string palindrome\n    int minimumNumberOfDeletions(string S) { \n        int n = S.size(); \n        \n        // Finding the length of the longest palindromic subsequence\n        int len = lps(S); \n        \n        // Returning the minimum number of deletions required\n        return (n - len); \n    } \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Backend complete function Template for Java\r\n\r\nclass Solution{\r\n    // Returns the length of\r\n    // the longest palindromic\r\n    // subsequence in 'str'\r\n    static int lps(String str)\r\n    {\r\n        int n = str.length();\r\n\r\n        // Create a table to store\r\n        // results of subproblems\r\n        int L[][] = new int[n][n];\r\n\r\n        // Strings of length 1\r\n        // are palindrome of length 1\r\n        for (int i = 0; i < n; i++)\r\n            L[i][i] = 1;\r\n\r\n        // Build the table. Note \r\n        // that the lower diagonal \r\n        // values of table are useless \r\n        // and not filled in the process.\r\n        // c1 is length of substring\r\n        for (int cl = 2; cl <= n; cl++)\r\n        {\r\n            for (int i = 0; i < n - cl + 1; i++)\r\n            {\r\n                int j = i + cl - 1;\r\n                if (str.charAt(i) == \r\n                        str.charAt(j) && cl == 2)\r\n                    L[i][j] = 2;\r\n                else if (str.charAt(i) == \r\n                              str.charAt(j))\r\n                    L[i][j] = L[i + 1][j - 1] + 2;\r\n                else\r\n                    L[i][j] = Integer.max(L[i][j - 1],\r\n                                         L[i + 1][j]);\r\n            }\r\n        }\r\n\r\n        // length of longest \r\n        // palindromic subsequence\r\n        return L[0][n - 1];\r\n    }\r\n    \r\n    static int minimumNumberOfDeletions(String S) {\r\n        int n = S.length();\r\n\r\n        // Find longest palindromic\r\n        // subsequence\r\n        int len = lps(S);\r\n\r\n        // After removing characters\r\n        // other than the lps, we get\r\n        // palindrome.\r\n        return (n - len);\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Backend complete function Template for Python\r\n\r\nclass Solution:\r\n    # Returns the length of \r\n    # the longest palindromic \r\n    # subsequence in 'str'\r\n    def lps(self, str):\r\n        n = len(str)\r\n     \r\n        # Create a table to store\r\n        # results of subproblems\r\n        L = [[0 for x in range(n)]for y in range(n)]\r\n     \r\n        # Strings of length 1\r\n        # are palindrome of length 1\r\n        for i in range(n):\r\n            L[i][i] = 1\r\n     \r\n        # Build the table. Note that \r\n        # the lower diagonal values \r\n        # of table are useless and \r\n        # not filled in the process. \r\n        # c1 is length of substring\r\n        for cl in range( 2, n+1):\r\n            for i in range(n - cl + 1):\r\n                j = i + cl - 1\r\n                if (str[i] == str[j] and cl == 2):\r\n                    L[i][j] = 2\r\n                elif (str[i] == str[j]):\r\n                    L[i][j] = L[i + 1][j - 1] + 2\r\n                else:\r\n                    L[i][j] = max(L[i][j - 1],L[i + 1][j])\r\n     \r\n        # length of longest\r\n        # palindromic subseq\r\n        return L[0][n - 1]\r\n        \r\n    def minimumNumberOfDeletions(self, S):\r\n        n = len(S)\r\n \r\n        # Find longest palindromic \r\n        # subsequence\r\n        l = self.lps(S)\r\n     \r\n        # After removing characters \r\n        # other than the lps, we \r\n        # get palindrome.\r\n        return (n - l)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the minimum number of deletions to make a string palindrome.\n    minimumNumberOfDeletions(S) {\n        const n = S.length;\n \n        //Helper function to find the length of the longest palindromic subsequence\n        const lps = (str) => {\n            const m = str.length;\n            // Create a table to store results of subproblems\n            const L = Array.from({ length: m }, () =>\n                Array.from({ length: m }, () => 0)\n            );\n     \n            // Strings of length 1 are palindrome of length 1\n            for (let i = 0; i < m; i++) {\n                L[i][i] = 1;\n            }\n     \n            // Build the table\n            for (let cl = 2; cl <= m; cl++) {\n                for (let i = 0; i < m - cl + 1; i++) {\n                    const j = i + cl - 1;\n                    if (str[i] == str[j] && cl == 2) {\n                        L[i][j] = 2;\n                    } else if (str[i] == str[j]) {\n                        L[i][j] = L[i + 1][j - 1] + 2;\n                    } else {\n                        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n                    }\n                }\n            }\n            // length of longest palindromic subsequence\n            return L[0][m - 1];\n        };\n     \n        // Find longest palindromic subsequence\n        const length = lps(S);\n     \n        // After removing characters other than the lps, we get a palindrome.\n        return n - length;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}