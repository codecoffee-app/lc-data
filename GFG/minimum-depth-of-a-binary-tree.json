{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700257,
            "title": "Minimum Depth of a Binary Tree",
            "titleSlug": "minimum-depth-of-a-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree, find its minimum depth.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [1, 3, 2, 4]\n\\t\\t1\n\\t    /   \\\n\\t   3     2\n\\t  /\n\\t 4\\t     </span>\n\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 2</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><span style=\"font-size: 18px;\">Minimum depth is between nodes 1 and 2 since minimum depth is defined as  the number of nodes along the shortest path from the root node down to the nearest leaf node.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [10, 20, 30, N, 40, N, 60, N, N, 2]\n\\t\\t 10\n\\t    /     \\\n\\t  20\\t 30\n\\t    \\\\t  \\   \n\\t    40\\t  60 \n\\t\\t\\t /\n\\t\\t\\t2 </span>\n\n<span style=\"font-size: 18px;\"><strong>Output: </strong>3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Minimum depth is between nodes 10,20 and 40.</span>&nbsp;</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space: </strong>O(height of the tree)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.",
                "constraints": [
                    "1 <= number of nodes <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 3, 2, 4]",
                        "output": "2",
                        "explanation": "The minimum depth is 2, corresponding to the path from node 1 to node 2, which is the shortest path to a leaf node."
                    },
                    {
                        "input": "[10, 20, 30, null, 40, null, 60, null, null, 2]",
                        "output": "3",
                        "explanation": "The minimum depth is 3, corresponding to the path from node 10 to node 20 to node 40, which is the shortest path to a leaf node."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >This can be calculated by traversing the binary tree.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "facebook"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution{\n  public:\n    int minDepth(Node *root) {\n        if (root == NULL) return 0;\n    \n        if (root->left == NULL and root->right == NULL) return 1;\n        // no child nodes indicate base case\n    \n        int left, right;\n        if (root->left != NULL) left = minDepth(root->left);\n        // finding depth of left sub tree\n        else\n            left = INT_MAX;\n    \n        if (root->right != NULL) right = minDepth(root->right);\n        // finding depth of right sub tree\n        else\n            right = INT_MAX;\n    \n        return 1 + min(left, right);\n    }\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    //function to calculate the minimum depth of a binary tree\n\tint minDepth(Node root)\n\t{\n\t    //if the root is null, return 0\n\t\tif(root == null)\n\t\t\treturn 0;\n\t\t\t\n\t\t//if the root does not have any children, return 1\n\t\tif(root.left == null && root.right == null)\n\t\t\treturn 1;\n\t\t\n\t\t//if the left child is null, recursively calculate the minimum depth of the right subtree\n\t\tif(root.left == null)\n\t\t\treturn minDepth(root.right)+1;\n\t\t\t\n\t\t//if the right child is null, recursively calculate the minimum depth of the left subtree\n\t\tif(root.right == null)\n\t\t\treturn minDepth(root.left)+1;\n\t\t\t\n\t\t//if the root has both left and right children, recursively calculate the minimum depth \n        //of both subtrees and return the minimum value plus 1\n\t\treturn Math.min(minDepth(root.left), minDepth(root.right))+1;\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def minDepth(self, root):\n        # Code here\n        if root is None:\n            return 0\n            # Base Case : Leaf node.This acoounts for height = 1\n        if root.left is None and root.right is None:\n            return 1\n            # If left subtree is Null, recur for right subtree\n        if root.left is None:\n            return self.minDepth(root.right) + 1\n            # If right subtree is Null , recur for left subtree\n        if root.right is None:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1\n\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/*\nclass Node\n{\n    constructor(x){\n        this.key=x;\n        this.left=null;\n        this.right=null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n * @return {number}\n*/\nclass Solution {\n  \tminDepth(root){\n  \t\tif (root == null) return 0;\n\n        if (root.left == null && root.right == null) return 1;\n\n        let left, right;\n        if (root.left !== null) left = this.minDepth(root.left);\n        else left = Infinity;\n\n        if (root.right !== null) right = this.minDepth(root.right);\n        else right = Infinity;\n\n        return 1 + Math.min(left, right);\n  \t}\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}