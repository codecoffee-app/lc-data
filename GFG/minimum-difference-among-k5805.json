{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702882,
            "title": "Minimize Difference in Task Priorities",
            "titleSlug": "minimum-difference-among-k5805",
            "content": "<p><span >You are given an array <strong>arr[]</strong> where each element represents the priority level of a task. There are <strong>k</strong> workers, and you need to assign exactly one task to each worker such that:</span></p>\n<ol>\n<li><span >The difference between the highest and lowest priority levels among the assigned tasks is minimized.</span></li>\n<li><span >At least <strong>m</strong> out of the <strong>k </strong>assigned tasks must have a priority level greater than or equal to a given threshold <strong>t</strong>.</span></li>\n</ol>\n<p><span >Note:<strong> </strong>Return -1, if no valid assignment exists.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [4, 1, 7, 5, 3, 8, 6], k = 3, m = 1, t = 5 \n<strong>Output: </strong>2\n<strong>Explanation</strong>: Selecting tasks with priorities <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">[6, 7, 8]</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> minimizes the difference to </span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">2</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> while ensuring at least one task meets the priority threshold of </span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&ge; 5</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">.</span></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [10, 20, 30, 40, 50], k = 2, m = 1, t = 25\n<strong>Output:</strong> 10\n<strong>Explanation</strong>: Selecting tasks with priorities [20, 30] minimizes the difference to 10 while ensuring at least one task meets the priority threshold of &ge; 25.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 4], k = 1, m = 1, t = 1\n<strong>Output: </strong>0\n<strong>Explanation</strong>: Selecting tasks with priorities [2] or [4] minimizes the difference to 0 while ensuring at least one task meets the priority threshold of &ge; 1.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6<br /></sup>1 &le; arr[i] &le; 10<sup>6<br /></sup>0 &lt; k &le; arr.size()<br />0 &le; m &le; k<br />1 &lt;= t &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` representing the priority levels of tasks, you need to assign exactly one task to each of `k` workers. The goal is to minimize the difference between the highest and lowest priority levels among the assigned tasks, while ensuring that at least `m` out of the `k` assigned tasks have a priority level greater than or equal to a given threshold `t`. Return -1 if no valid assignment exists.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6",
                    "0 < k <= arr.size()",
                    "0 <= m <= k",
                    "1 <= t <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [4, 1, 7, 5, 3, 8, 6], k = 3, m = 1, t = 5",
                        "output": "2",
                        "explanation": "Selecting tasks with priorities [6, 7, 8] minimizes the difference (8-6 = 2) while ensuring at least one task (all three in this case) meets the priority threshold of >= 5."
                    },
                    {
                        "input": "arr[] = [10, 20, 30, 40, 50], k = 2, m = 1, t = 25",
                        "output": "10",
                        "explanation": "Selecting tasks with priorities [20, 30] minimizes the difference (30 - 20 = 10) while ensuring at least one task (30) meets the priority threshold of >= 25."
                    },
                    {
                        "input": "arr[] = [2, 4], k = 1, m = 1, t = 1",
                        "output": "0",
                        "explanation": "Selecting tasks with priority [2] or [4] minimizes the difference (2-2 = 0 or 4-4 = 0) while ensuring at least one task meets the priority threshold of >= 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a sliding window to find the minimum difference between the highest and lowest values in any subset of size <span class=\"katex\"><span class=\"katex-mathml\">k</span></span> that contains at least <span class=\"katex\"><span class=\"katex-mathml\"><br /></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord mathnormal\">m</span></span></span></span> tasks with priority <span class=\"katex\"><span class=\"katex-mathml\">&ge; t.</span></span></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minDiff(vector<int>& arr, int k, int m, int t) {\n        // Edge Case 1: If the number of required high-priority tasks exceeds k, it's\n        // impossible to satisfy the constraint\n        if (m > k)\n            return -1;\n\n        // Edge Case 2: If the number of tasks is less than k, it's impossible to assign\n        // k tasks\n        if (arr.size() < k)\n            return -1;\n\n        // Step 1: Sort the array to facilitate the sliding window approach\n        sort(arr.begin(), arr.end());\n\n        int n = arr.size();\n        int min_diff = INT32_MAX; // Initialize minimum difference to a large value\n        bool found = false;       // Flag to indicate if a valid window is found\n\n        // Step 2: Initialize the count of tasks >= T in the first window of size k\n        int count = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i] >= t) {\n                count++;\n            }\n        }\n\n        // If the first window satisfies the constraint, update min_diff\n        if (count >= m) {\n            min_diff = arr[k - 1] - arr[0];\n            found = true;\n        }\n\n        // Step 3: Slide the window from left to right, updating the count and min_diff\n        for (int i = k; i < n; i++) {\n            // Remove the element going out of the window\n            if (arr[i - k] >= t) {\n                count--;\n            }\n\n            // Add the new element entering the window\n            if (arr[i] >= t) {\n                count++;\n            }\n\n            // Check if the current window satisfies the constraint\n            if (count >= m) {\n                int current_diff = arr[i] - arr[i - k + 1];\n                if (current_diff < min_diff) {\n                    min_diff = current_diff;\n                    found = true;\n                }\n            }\n        }\n\n        // Step 4: Return the result\n        // If a valid window was found, return the minimum difference\n        // Otherwise, return -1 to indicate that no valid assignment exists\n        return found ? min_diff : -1;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    /**\n     * Function to find the minimum difference between the highest and lowest priority\n     * levels among the assigned tasks while ensuring that at least 'm' tasks have a\n     * priority level greater than or equal to the threshold 'T'.\n     *\n     * @param arr An array of integers representing the priority levels of tasks.\n     * @param k   The number of workers (each worker must be assigned exactly one task).\n     * @param m   The minimum number of tasks that must have a priority level >= T.\n     * @param th   The priority threshold.\n     * @return    The minimum difference if a valid assignment exists, otherwise -1.\n     */\n    int minDiff(int[] arr, int k, int m, int th) {\n        // Edge Case 1: If the number of required high-priority tasks exceeds k, it's\n        // impossible to satisfy the constraint\n        if (m > k) return -1;\n\n        // Edge Case 2: If the number of tasks is less than k, it's impossible to assign\n        // k tasks\n        if (arr.length < k) return -1;\n\n        // Step 1: Sort the array to facilitate the sliding window approach\n        Arrays.sort(arr);\n\n        int n = arr.length;\n        int min_diff =\n            Integer.MAX_VALUE; // Initialize minimum difference to a large value\n        boolean found = false; // Flag to indicate if a valid window is found\n\n        // Step 2: Initialize the count of tasks >= T in the first window of size k\n        int count = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i] >= th) count++;\n        }\n\n        // If the first window satisfies the constraint, update min_diff\n        if (count >= m) {\n            min_diff = arr[k - 1] - arr[0];\n            found = true;\n        }\n\n        // Step 3: Slide the window from left to right, updating the count and min_diff\n        for (int i = k; i < n; i++) {\n            // Remove the element going out of the window\n            if (arr[i - k] >= th) count--;\n\n            // Add the new element entering the window\n            if (arr[i] >= th) count++;\n\n            // Check if the current window satisfies the constraint\n            if (count >= m) {\n                int current_diff = arr[i] - arr[i - k + 1];\n                if (current_diff < min_diff) {\n                    min_diff = current_diff;\n                    found = true;\n                }\n            }\n        }\n\n        // Step 4: Return the result\n        // If a valid window was found, return the minimum difference\n        // Otherwise, return -1 to indicate that no valid assignment exists\n        return found ? min_diff : -1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# User function Template for Python3\n\n\nclass Solution:\n\n    def minDiff(self, arr, k, m, t):\n        # Edge cases\n        if m > k or len(arr) < k:\n            return -1\n\n        # Sort the array to use a sliding window\n        arr.sort()\n\n        min_diff = float('inf')\n        found = False\n\n        # Initialize count for tasks >= threshold in the first window\n        count = sum(1 for i in range(k) if arr[i] >= t)\n\n        # Check if the first window satisfies the condition\n        if count >= m:\n            min_diff = arr[k - 1] - arr[0]\n            found = True\n\n        # Slide the window through the array\n        for i in range(k, len(arr)):\n            # Update count for the window by adding arr[i] and removing arr[i - k]\n            if arr[i - k] >= t:\n                count -= 1\n            if arr[i] >= t:\n                count += 1\n\n            # Update min_diff if the current window is valid\n            if count >= m:\n                min_diff = min(min_diff, arr[i] - arr[i - k + 1])\n                found = True\n\n        return min_diff if found else -1\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\nclass Solution {\n    minDiff(arr, k, m, t) {\n        // Edge cases\n        if (m > k || arr.length < k) {\n            return -1;\n        }\n\n        // Sort the array to use a sliding window approach\n        arr.sort((a, b) => a - b);\n\n        let minDiff = Infinity;\n        let found = false;\n\n        // Initialize count for tasks >= threshold in the first window\n        let count = 0;\n        for (let i = 0; i < k; i++) {\n            if (arr[i] >= t) count++;\n        }\n\n        // Check if the first window satisfies the condition\n        if (count >= m) {\n            minDiff = arr[k - 1] - arr[0];\n            found = true;\n        }\n\n        // Slide the window through the array\n        for (let i = k; i < arr.length; i++) {\n            // Update count for the window by adding arr[i] and removing arr[i - k]\n            if (arr[i - k] >= t) count--;\n            if (arr[i] >= t) count++;\n\n            // Update minDiff if the current window is valid\n            if (count >= m) {\n                minDiff = Math.min(minDiff, arr[i] - arr[i - k + 1]);\n                found = true;\n            }\n        }\n\n        // Return the result\n        return found ? minDiff : -1;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}