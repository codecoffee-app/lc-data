{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704976,
            "title": "Minimum difference pair",
            "titleSlug": "minimum-difference-pair5444",
            "content": "<p><span style=\"font-size: 18px;\">Given an array<strong> arr[]</strong>. find the minimum difference between any pair in the given array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 4, 5, 9, 7]\n<strong>Output: </strong>1\n<strong>Explanation: </strong>Difference between 5 and 4 is 1.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 10, 8, 6]\n<strong>Output: </strong>2\n<strong>Explanation:</strong></span>&nbsp;<span style=\"font-size: 18px;\">D</span><span style=\"font-size: 18px;\">ifference between 8 and 6 is 2.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= arr.size() &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr`, find the minimum absolute difference between any two distinct elements in the array.",
                "constraints": [
                    "2 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[2, 4, 5, 9, 7]",
                        "output": "1",
                        "explanation": "The minimum difference is between 4 and 5, which is |4 - 5| = 1."
                    },
                    {
                        "input": "[3, 10, 8, 6]",
                        "output": "2",
                        "explanation": "The minimum difference is between 6 and 8, which is |6 - 8| = 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Optimize your solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nvoid merge(int arr[], int l, int m, int r) {\n    int i, j, k;\n    int n1 = m - l + 1;\n    int n2 = r - m;\n\n    /* create temp arrays */\n    int L[n1], R[n2];\n\n    /* Copy data to temp arrays L[] and R[] */\n    for (i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (j = 0; j < n2; j++)\n        R[j] = arr[m + 1 + j];\n\n    /* Merge the temp arrays back into arr[l..r]*/\n    i = 0; // Initial index of first subarray\n    j = 0; // Initial index of second subarray\n    k = l; // Initial index of merged subarray\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    /* Copy the remaining elements of L[], if there\n    are any */\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    /* Copy the remaining elements of R[], if there\n    are any */\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\n/* l is for left index and r is right index of the\nsub-array of arr to be sorted */\nvoid mergeSort(int arr[], int l, int r) {\n    if (l < r) {\n        // Same as (l+r)/2, but avoids overflow for\n        // large l and h\n        int m = l + (r - l) / 2;\n\n        // Sort first and second halves\n        mergeSort(arr, l, m);\n        mergeSort(arr, m + 1, r);\n\n        merge(arr, l, m, r);\n    }\n}\n\nint minimumDifference(int nums[], int n) {\n    mergeSort(nums, 0, n - 1);\n    int res = 99999;\n    for (int i = 1; i < n; i++)\n        if (nums[i] - nums[i - 1] < res) {\n            res = nums[i] - nums[i - 1];\n        }\n    return res;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the minimum difference between adjacent elements in a vector\n    int minimumDifference(vector<int> nums) {\n        // Sorting the vector in ascending order\n        sort(nums.begin(), nums.end());\n\n        // Initializing the result to a large value\n        int res = INT_MAX;\n\n        // Iterating through the vector\n        for (int i = 1; i < nums.size(); i++)\n            // Updating the result with the minimum difference between adjacent elements\n            res = min(res, nums[i] - nums[i - 1]);\n\n        // Returning the minimum difference\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\nclass Solution {\n    // Complete this function\n    public int minimumDifference(List<int> nums) {\n        // Sorting the list in ascending order\n        nums.Sort();\n\n        // Initializing the result to a large value\n        int res = Int32.MaxValue;\n\n        // Iterating through the list\n        for (int i = 1; i < nums.Count; i++) {\n            // Updating the result with the minimum difference between adjacent elements\n            res = Math.Min(res, nums[i] - nums[i - 1]);\n        }\n\n        // Returning the minimum difference\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}