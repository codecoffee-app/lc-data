{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700431,
            "title": "Minimum distance in an Array",
            "titleSlug": "minimum-distance-between-two-numbers",
            "content": "<p><span >You are given an array, <strong>arr[]</strong>. Find the <strong>minimum </strong>index based distance between two distinct elements of the array, <strong>x</strong> and <strong>y</strong>. Return -1, if either <strong>x </strong>or <strong>y </strong>does not exist in the array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 2], x = 1, y = 2\n<strong>Output: </strong>1<strong>\nExplanation: </strong>x = 1 and y = 2. There are two distances between x and y, which are 1 and 3 out of which the least is 1.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [86, 39, 90, 67, 84, 66, 62], x = 42, y = 12\n<strong>Output: </strong>-1<strong>\nExplanation: </strong>x = 42 and y = 12. We return -1 as x and y don't exist in the array.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [10, 20, 30, 40, 50], x = 10, y = 50\n<strong>Output: </strong>4<strong>\nExplanation: </strong>The distance between x = 10 (index 0) and y = 50 (index 4) is 4, which is the only distance between them.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />0 &lt;= arr[i], x, y &lt;= 10<sup>5<br /></sup>x != y</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, find the minimum index-based distance between two distinct elements `x` and `y`. If either `x` or `y` does not exist in the array, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i], x, y <= 10^5",
                    "x != y"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 3, 2], x = 1, y = 2",
                        "output": "1",
                        "explanation": "The element 'x' (1) is at index 0, and the element 'y' (2) is at indices 1 and 3.  The distances are |0-1| = 1 and |0-3| = 3. The minimum distance is 1."
                    },
                    {
                        "input": "arr[] = [86, 39, 90, 67, 84, 66, 62], x = 42, y = 12",
                        "output": "-1",
                        "explanation": "Neither 'x' (42) nor 'y' (12) exist in the array. Thus, return -1."
                    },
                    {
                        "input": "arr[] = [10, 20, 30, 40, 50], x = 10, y = 50",
                        "output": "4",
                        "explanation": "The element 'x' (10) is at index 0, and the element 'y' (50) is at index 4. The distance between them is |0-4| = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about two pointer approach for O(n) solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minDist(vector<int>& a, int x, int y) {\n        int n = a.size();\n        int recent_x = -1, recent_y = -1;\n        int ans = INT_MAX;\n\n        // Storing the recent x or y and calculating the minimum distance\n        for (int i = 0; i < n; i++) {\n            if (a[i] == x) {\n                recent_x = i;\n\n                // Checking both recent X and Y is found in the array or not\n                if (recent_y != -1)\n                    ans = min(abs(recent_x - recent_y), ans);\n            } else if (a[i] == y) {\n                recent_y = i;\n\n                // Checking both recent X and Y is found in the array or not\n                if (recent_x != -1)\n                    ans = min(abs(recent_x - recent_y), ans);\n            }\n        }\n\n        // If ans is not updated then either x or y, or both are not present in the\n        // array\n        if (ans == INT_MAX)\n            return -1;\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    int minDist(int a[], int x, int y) {\n        int n = a.length;\n        int recent_x = -1;\n        int recent_y = -1;\n        int ans = Integer.MAX_VALUE;\n\n        for (int i = 0; i < n; i++) {\n            if (a[i] == x) {\n                recent_x = i;\n\n                // Checking both recent X and Y is found in the array or not\n                if (recent_y != -1) ans = Math.min(Math.abs(recent_x - recent_y), ans);\n            } else if (a[i] == y) {\n                recent_y = i;\n\n                // Checking both recent X and Y is found in the array or not\n                if (recent_x != -1) ans = Math.min(Math.abs(recent_x - recent_y), ans);\n            }\n        }\n\n        // If ans is not updated then either x or y, or both are not present in\n        // the array\n        if (ans == Integer.MAX_VALUE) return -1;\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    # Function to find the minimum distance between x and y in the given array\n    def minDist(self, arr, x, y):\n        n = len(arr)\n        recent_x, recent_y = -1, -1\n        ans = 9999999\n\n        for i in range(n):\n            # Check if current element is x\n            if arr[i] == x:\n                recent_x = i\n                # If y has been encountered before, calculate and update the minimum distance\n                if recent_y != -1:\n                    ans = min(ans, abs(recent_x - recent_y))\n\n            # Check if current element is y\n            elif arr[i] == y:\n                recent_y = i\n                # If x has been encountered before, calculate and update the minimum distance\n                if recent_x != -1:\n                    ans = min(ans, abs(recent_x - recent_y))\n\n        # If no minimum distance found, return -1\n        if ans == 9999999:\n            return -1\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    minDist(a, x, y) {\n        let n = a.length;\n        let recent_x = -1, recent_y = -1;\n        let ans = Infinity;\n\n        // Storing the recent x or y and calculating the minimum distance\n        for (let i = 0; i < n; i++) {\n            if (a[i] == x) {\n                recent_x = i;\n\n                // Checking both recent X and Y is found in the array or not\n                if (recent_y != -1) ans = Math.min(Math.abs(recent_x - recent_y), ans);\n            } else if (a[i] == y) {\n                recent_y = i;\n\n                // Checking both recent X and Y is found in the array or not\n                if (recent_x != -1) ans = Math.min(Math.abs(recent_x - recent_y), ans);\n            }\n        }\n        // If ans is not updated then either x or y, or both are not present in the\n        // array\n        if (ans == Infinity) return -1;\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}