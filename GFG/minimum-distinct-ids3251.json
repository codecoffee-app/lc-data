{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702833,
            "title": "Minimum Distinct Ids",
            "titleSlug": "minimum-distinct-ids3251",
            "content": "<p><span style=\"font-size:18px\">Given an array of items, the i&#39;th index element denotes the item id&rsquo;s and given a number m, the task is to remove m elements such that there should be minimum distinct id&rsquo;s left. Print the number of distinct id&rsquo;s.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1 -</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:\nn = 6\narr[] = {2, 2, 1, 3, 3, 3}\nm = 3\n<strong>Output</strong>:\n1\n<strong>Explanation :</strong> \nRemove 2,2,1</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2 -</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:\nn = 8\narr[] = {2, 4, 1, 5, 3, 5, 1, 3}\nm = 2\n<strong>Output</strong>:\n3\n<strong>Explanation</strong>:\nRemove 2,4</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nThis is a function problem. You don&#39;t have to take any input. Your task is to complete the <strong>distinctIds</strong>() which takes sorted array, its size n, and m as its parameter. You only need to find the minimum number of distinct IDs&nbsp;and return it. The driver code will print the returned value.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>: O(n log(n))<br />\n<strong>Expected Auxillary Space</strong>: O(n)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints</strong>:<br />\n1 &le; n &le; 10<sup>5</sup><br />\n1 &le; arr[i] &le; 10<sup>6</sup><br />\n1 &le; m &le; 10<sup>3</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of item IDs and a number 'm', remove 'm' elements from the array such that the number of distinct item IDs remaining is minimized. Return the minimum number of distinct IDs after removing 'm' elements.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 10^6",
                    "1 <= m <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "n = 6\narr[] = {2, 2, 1, 3, 3, 3}\nm = 3",
                        "output": "1",
                        "explanation": "Removing the elements 2, 2, and 1 leaves the array with only the distinct ID 3."
                    },
                    {
                        "input": "n = 8\narr[] = {2, 4, 1, 5, 3, 5, 1, 3}\nm = 2",
                        "output": "3",
                        "explanation": "Removing the elements 2 and 4 leaves the array with distinct IDs 1, 3, and 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try counting the distinct IDs and sort them in increasing order.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution{\n    public:\n    // Function to find distintc id's\n    int distinctIds(int arr[], int n, int m)\n    {\n        unordered_map<int, int> mp;\n        vector<pair<int, int> > v;\n        int count = 0;\n    \n        // Store the occurrence of ids\n        for (int i = 0; i < n; i++)\n            mp[arr[i]]++;\n    \n        // Store into the vector second as first and vice-versa\n        for (auto it = mp.begin(); it != mp.end(); it++)\n            v.push_back(make_pair(it->second, it->first));\n    \n        // Sort the vector\n        sort(v.begin(), v.end());\n    \n        int size = v.size();\n    \n        // Start removing elements from the beginning\n        for (int i = 0; i < size; i++) {\n    \n            // Remove if current value is less than \n            // or equal to mi\n            if (v[i].first <= m) {\n                m -= v[i].first;\n                count++;\n            }\n    \n            // Return the remaining size\n            else\n                return size - count;\n        }\n        return size - count;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    int distinctIds(int arr[], int n, int m)\n    {\n        HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();\n        ArrayList<Integer> a = new ArrayList<Integer>();\n    \tint count = 0;\n    \n    \t// Store the occurrence of ids\n    \tfor (int i = 0; i < n; i++)\n        {\n    \t\tif (mp.containsKey(arr[i]))\n    \t\t{\n    \t\t    int val = mp.get(arr[i]);\n    \t\t    mp.put(arr[i], val + 1);\n    \t\t}\n    \t\telse \n    \t\t{\n    \t\t    mp.put(arr[i], 1);\n    \t\t}\n        }\n    \n    \t// Store into the ArrayList frequencies of unique IDs\n    \tIterator it = mp.entrySet().iterator();\n    \twhile (it.hasNext())\n    \t{\n    \t    Map.Entry me = (Map.Entry)it.next();\n    \t    a.add((Integer)me.getValue());\n    \t}\n    \t\n    \t// Sort the ArrayList\n    \tCollections.sort(a);\n    \tint size = a.size();\n    \n    \t// Start removing elements from the beginning\n    \tfor (int i = 0; i < size; i++) {\n    \n    \t\t// Remove if current value is less than \n    \t\t// or equal to \n    \t\tif (a.get(i) <= m) {\n    \t\t\tm -= a.get(i);\n    \t\t\tcount++;\n    \t\t}\n    \t\t// Return the remaining size\n    \t\telse\n    \t\t\tbreak;\n    \t}\n    \treturn size - count;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import defaultdict\nclass Solution:\n    def distinctIds(self, arr : list, n : int, m : int):\n        mp = defaultdict(int)\n        count = 0\n        \n        # Store the occurence of IDs.\n        for i in arr:\n            mp[i] += 1\n        \n        # Store the frequencies in the list\n        a = list()\n        for key, value in mp.items():\n            a.append(value)\n        \n        # Sort the list\n        a.sort()\n        sz = len(a)\n        # Start removing elements from the beginning\n        for i in a:\n        \t# Remove if current value is less than \n        \t# or equal to \n        \tif i <= m:\n        \t    m -= i\n        \t    count += 1\n        \telse:\n        \t    break\n        return sz - count",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @param {number} m\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find distinct numbers in the array.\n    distinctIds(arr, n, m)\n    {\n        let mp = new Map();\n        let count = 0;\n        \n        // Store the occurence of IDs.\n        for(let i=0; i<n; i++){\n            if(mp.has(arr[i])){\n                mp.set(arr[i], mp.get(arr[i])+1);\n            } else{\n                mp.set(arr[i], 1);\n            }\n        }\n        \n        // Store the frequencies in the list\n        let a = [];\n        for(let [key, value] of mp){\n            a.push(value);\n        }\n        \n        // Sort the list\n        a.sort((a,b) => a-b);\n        let sz = a.length;\n        // Start removing elements from the beginning\n        for(let i=0; i<sz; i++){\n        \t// Remove if current value is less than \n        \t// or equal to \n        \tif (a[i] <= m){\n        \t    m -= a[i];\n        \t    count += 1;\n        \t} else{\n        \t    break;\n        \t}\n        }\n        return sz - count;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    //Complete this function\n    //Function to return count of distinct elements in a given array.\n    public int distinctIds(int[] arr, int n, int m)\n    {\n        Dictionary<int, int> mp = new Dictionary<int, int>();\n        List<KeyValuePair<int, int>> v = new List<KeyValuePair<int, int>>();\n        int count = 0;\n\n        // Store the occurrence of ids\n        for (int i = 0; i < n; i++)\n        {\n            if (mp.ContainsKey(arr[i]))\n                mp[arr[i]]++;\n            else\n                mp[arr[i]] = 1;\n        }\n\n        // Store into the List second as first and vice-versa\n        foreach (KeyValuePair<int, int> pair in mp)\n        {\n            v.Add(new KeyValuePair<int, int>(pair.Value, pair.Key));\n        }\n\n        // Sort the List\n        v.Sort((pair1, pair2) => pair1.Key.CompareTo(pair2.Key));\n\n        int size = v.Count;\n\n        // Start removing elements from the beginning\n        for (int i = 0; i < size; i++)\n        {\n            // Remove if current value is less than or equal to m\n            if (v[i].Key <= m)\n            {\n                m -= v[i].Key;\n                count++;\n            }\n            // Return the remaining size\n            else\n                return size - count;\n        }\n\n        return size - count;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}