{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710297,
            "title": "Minimum edges",
            "titleSlug": "minimum-edges",
            "content": "<p><span style=\"font-size:18px\">Given a <strong>directed</strong> graph with <strong>N</strong> nodes and <strong>M</strong> edges.&nbsp;A&nbsp;<strong>source</strong> node and a&nbsp;<strong>destination</strong> node are also given, we need to find how many edges we need to reverse in order to make at least 1 path from the source node to the destination node.<br />\r\n<strong>Note:&nbsp;</strong>In case there is no way then return <strong>-1</strong>.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=3\r\nM=2\r\nedges[][]={{1,2},{3,2}}\r\nsrc=1\r\ndst=3\r\n<strong>Output:</strong>\r\n1\r\n<strong>Explanation:</strong>\r\nReverse the edge 3-&gt;2.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=4\r\nM=3\r\nedges[][]={{1,2},{2,3},{3,4}}\r\nsrc=1\r\ndst=4\r\n<strong>Output:</strong>\r\n0\r\n<strong>Explanation;</strong>\r\nOne path already exists between 1 to 4 it is 1-&gt;2-&gt;3-&gt;4.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>minimumEdgeReversal()</strong>&nbsp;which takes the edge list <strong>edges</strong>, <strong>N</strong> the number of nodes of the graph. <strong>src</strong> (source), and <strong>dst</strong> (destination) vertex<strong>&nbsp;</strong>as input parameters&nbsp;and returns the minimum number of edges to be reversed</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(M*log(M))<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N+M)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N ,M&lt;= 10<sup>5</sup><br />\r\n1&lt;=edges[i][0],edges[i][1]&lt;=N</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with N nodes and M edges, and a source and destination node, determine the minimum number of edges that need to be reversed to ensure at least one path exists from the source to the destination. If no such path is possible, return -1.",
                "constraints": [
                    "1 <= N, M <= 10^5",
                    "1 <= edges[i][0], edges[i][1] <= N"
                ],
                "testcases": [
                    {
                        "input": "N = 3, M = 2, edges = {{1, 2}, {3, 2}}, src = 1, dst = 3",
                        "output": "1",
                        "explanation": "Reversing the edge 3 -> 2 allows a path from 1 to 3 (1 -> 2 <- 3)."
                    },
                    {
                        "input": "N = 4, M = 3, edges = {{1, 2}, {2, 3}, {3, 4}}, src = 1, dst = 4",
                        "output": "0",
                        "explanation": "A path from 1 to 4 (1 -> 2 -> 3 -> 4) already exists, requiring no edge reversals."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use dijkstra algorithm</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n\n    public:\n        // Function to find the minimum number of edge reversals\n        int minimumEdgeReversal(vector<vector<int>>&edges,int n,int src,int dst){\n\n            // Creating adjacency list for the given graph\n            vector<vector<pair<int,int>>> g(n+2);\n\n            // Adding edges to the adjacency list\n            for(auto it:edges){\n                g[it[0]].push_back({it[1],0});\n                g[it[1]].push_back({it[0],1});\n            }\n\n            // Using Dijkstra's algorithm to find the shortest path\n            // from src to dst with minimum edge reversals\n\n            // Creating a priority queue to store the vertices with their distances\n            priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;\n            // Creating a vector to store the distances of all vertices from src\n            vector<int> dis(n+1,INT_MAX);\n\n            // Setting the distance of the source vertex to 0\n            dis[src] = 0;\n            // Inserting the source vertex into the priority queue\n            pq.push({0,src});\n\n            // Performing Dijkstra's algorithm\n            while(!pq.empty()){\n\n                // Getting the vertex with the minimum distance\n                pair<int,int> p = pq.top();\n                pq.pop();\n\n                int u = p.second;\n                int w1 = p.first;\n\n                // Iterating over the neighbors of the current vertex\n                for(pair<int,int> nxt:g[u]){\n\n                    int v = nxt.first;\n                    int w2 = nxt.second;\n\n                    // Updating the distance of the neighbor if a shorter path is found\n                    if(w1+w2 < dis[v]){\n                        dis[v] = w1+w2;\n                        // Inserting the neighbor into the priority queue\n                        pq.push({dis[v],v});\n                    }\n                }\n            }\n\n            // If the distance to the destination vertex is still INT_MAX,\n            // this means that there is no path from src to dst\n            if(dis[dst]==INT_MAX) return -1;\n\n            // Returning the distance of the destination vertex from src\n            return dis[dst];\n        }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}