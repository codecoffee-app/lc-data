{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702788,
            "title": "Sorted and Rotated Minimum",
            "titleSlug": "minimum-element-in-a-sorted-and-rotated-array3611",
            "content": "<p><span style=\"font-size: 18.6667px;\">A sorted array<strong>&nbsp;</strong></span><span style=\"font-size: 18.6667px;\">of distinct elements </span><strong style=\"font-size: 18.6667px;\">arr[]</strong><span style=\"font-size: 18.6667px;\">&nbsp;is rotated at some unknown point, the task is to find the minimum element in it.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [5, 6, 1, 2, 3, 4]\n<strong>Output: </strong>1\n<strong>Explanation:</strong> 1 is the minimum element in the array.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [3, 1, 2]\n<strong>Output: </strong>1\n<strong>Explanation:</strong> Here 1 is the minimum element.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [4, 2, 3]\n<strong>Output: </strong>2\n<strong>Explanation:</strong> Here 2 is the minimum element.</span></pre>\n<p><span ><strong>Constraints</strong>:<br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array of distinct elements that has been rotated at an unknown pivot point, find the minimum element in the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[5, 6, 1, 2, 3, 4]",
                        "output": "1",
                        "explanation": "The minimum element in the rotated array is 1."
                    },
                    {
                        "input": "[3, 1, 2]",
                        "output": "1",
                        "explanation": "The minimum element in the rotated array is 1."
                    },
                    {
                        "input": "[4, 2, 3]",
                        "output": "2",
                        "explanation": "The minimum element in the rotated array is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use binary search.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft",
            "samsung",
            "snapdeal",
            "adobe",
            "times-internet"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to find the minimum element in a rotated sorted array\nclass Solution {\n  public:\n    int findMin(vector<int>& arr) {\n        int lo = 0, hi = arr.size() - 1;\n\n        while (lo < hi) {\n\n            // The current subarray is already sorted,\n            // the minimum is at the low index\n            if (arr[lo] < arr[hi])\n                return arr[lo];\n\n            // We reach here when we have at least\n            // two elements and the current subarray\n            // is rotated\n\n            int mid = (lo + hi) / 2;\n\n            // The right half is not sorted. So\n            // the minimum element must be in the\n            // right half.\n            if (arr[mid] > arr[hi])\n                lo = mid + 1;\n\n            // The right half is sorted. Note that in\n            // this case, we do not change high to mid - 1\n            // but keep it to mid. As the mid element\n            // itself can be the smallest\n            else\n                hi = mid;\n        }\n\n        return arr[lo];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    public int findMin(int[] arr) {\n        int lo = 0, hi = arr.length - 1;\n\n        while (lo < hi) {\n\n            // The current subarray is already sorted,\n            // the minimum is at the low index\n            if (arr[lo] < arr[hi]) return arr[lo];\n\n            // We reach here when we have at least\n            // two elements and the current subarray\n            // is rotated\n\n            int mid = (lo + hi) / 2;\n\n            // The right half is not sorted. So\n            // the minimum element must be in the\n            // right half.\n            if (arr[mid] > arr[hi]) lo = mid + 1;\n\n            // The right half is sorted. Note that in\n            // this case, we do not change high to mid - 1\n            // but keep it to mid. As the mid element\n            // itself can be the smallest\n            else\n                hi = mid;\n        }\n\n        return arr[lo];\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def findMin(self, arr):\n        lo, hi = 0, len(arr) - 1\n\n        while lo < hi:\n\n            # The current subarray is already sorted,\n            # the minimum is at the low index\n            if arr[lo] < arr[hi]:\n                return arr[lo]\n\n            # We reach here when we have at least\n            # two elements and the current subarray\n            # is rotated\n\n            mid = (lo + hi) // 2\n\n            # The right half is not sorted. So\n            # the minimum element must be in the\n            # right half.\n            if arr[mid] > arr[hi]:\n                lo = mid + 1\n\n            # The right half is sorted. Note that in\n            # this case, we do not change high to mid - 1\n            # but keep it to mid. As the mid element\n            # itself can be the smallest\n            else:\n                hi = mid\n\n        return arr[lo]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {number}\n */\nclass Solution {\n    // Function to find the minimum element in a sorted and rotated array.\n    findMin(arr) {\n        let lo = 0, hi = arr.length - 1;\n\n        while (lo < hi) {\n\n            // The current subarray is already sorted,\n            // the minimum is at the low index\n            if (arr[lo] < arr[hi]) return arr[lo];\n\n            // We reach here when we have at least\n            // two elements and the current subarray\n            // is rotated\n\n            const mid = Math.floor((lo + hi) / 2);\n\n            // The right half is not sorted. So\n            // the minimum element must be in the\n            // right half.\n            if (arr[mid] > arr[hi]) lo = mid + 1;\n\n            // The right half is sorted. Note that in\n            // this case, we do not change high to mid - 1\n            // but keep it to mid. As the mid element\n            // itself can be the smallest\n            else\n                hi = mid;\n        }\n\n        return arr[lo];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}