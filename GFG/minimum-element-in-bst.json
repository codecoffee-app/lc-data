{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700545,
            "title": "Minimum element in BST",
            "titleSlug": "minimum-element-in-bst",
            "content": "<p><span >Given the root of a <strong>Binary Search Tree</strong>. The task is to find the minimum valued element in this given BST. </span></p>\n<p><span ><strong>Examples</strong></span></p>\n<pre><span >Input: root = [5, 4, 6, 3, N, N, 7, 1]\n<img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20240924170437/ex-1.webp\" alt=\"ex-1\" width=\"302\" height=\"268\" />\n<strong>Output: </strong>1\n</span></pre>\n<pre><span ><strong>Input: </strong>root =<strong> </strong>[10, 5, 20, 2]\n<img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20240924170436/ex-2.webp\" alt=\"ex-2\" width=\"300\" height=\"266\" />\n<strong>Output: </strong>2</span></pre>\n<pre><span >Input: root = [10, N, 10, N, 11]\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;10\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 10\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  \\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;11\n<strong>Output: </strong>10</span></pre>\n<p><span ><strong>Constraints:</strong><br />0 &lt;= number of nodes &lt;= 10<sup>5<br /></sup>0 &lt;= node-&gt;data &lt;= 10<sup>5</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a Binary Search Tree (BST), find the minimum valued element within the tree.",
                "constraints": [
                    "The number of nodes in the BST is between 0 and 10^5, inclusive.",
                    "The value of each node in the BST is between 0 and 10^5, inclusive."
                ],
                "testcases": [
                    {
                        "input": "[5, 4, 6, 3, N, N, 7, 1]",
                        "output": "1",
                        "explanation": "The BST contains the values [1, 3, 4, 5, 6, 7]. The minimum value is 1."
                    },
                    {
                        "input": "[10, 5, 20, 2]",
                        "output": "2",
                        "explanation": "The BST contains the values [2, 5, 10, 20]. The minimum value is 2."
                    },
                    {
                        "input": "[10, N, 10, N, 11]",
                        "output": "10",
                        "explanation": "The BST contains the values [10, 10, 11]. The minimum value is 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">Traverse left recursively until you reach a leaf node.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n// Function to find the minimum element in the given BST.\n\nclass Solution {\n  public:\n    int minValue(Node* root) {\n        // base case\n        if (root == NULL)\n            return -1;\n\n        struct Node* current = root;\n\n        // leftmost node is minimum so we move in BST till left node is not NULL.\n        while (current->left != NULL) {\n            current = current->left;\n        }\n        // returning the data at leftmost node.\n        return (current->data);\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the minimum element in the given BST.\n    int minValue(Node root) {\n        // base case\n        if (root == null) return -1;\n\n        Node current = root;\n\n        // leftmost node is minimum so we move in BST till left node is not\n        // NULL.\n        while (current.left != null) {\n            current = current.left;\n        }\n        // returning the data at leftmost node.\n        return (current.data);\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to find the minimum element in the given BST.\r\n    def minValue(self, root):\r\n        \r\n        #base case\r\n        if root is None:\r\n            return -1\r\n        temp=root\r\n        \r\n        #leftmost node is minimum so we move in BST till left node is not NULL.\r\n        while(temp.left is not None):\r\n            temp=temp.left\r\n            \r\n        #returning the data at leftmost node.\r\n        return temp.data\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} root\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    // Function to find the minimum element in the given BST.\r\n    minValue(root) {\r\n        // base case\r\n        if (root === null) return -1;\r\n\r\n        let current = root;\r\n\r\n        // leftmost node is minimum so we move in BST till left node is not\r\n        // NULL.\r\n        while (current.left !== null) {\r\n            current = current.left;\r\n        }\r\n        // returning the data at leftmost node.\r\n        return (current.data);\r\n    }\r\n}\r\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}