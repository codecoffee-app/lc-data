{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702685,
            "title": "Minimum element whose N-th power is greater than product of an array",
            "titleSlug": "minimum-element-whose-n-th-power-is-greater-than-product-of-an-array4640",
            "content": "<p><span >Given an array <strong>arr</strong> of integers, your task is to determine the minimum positive integer <strong><code>x</code></strong> such that when each element in the array is replaced by <code>x</code>, the product of the new array is strictly greater than the product of the original array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [4, 2, 1, 10, 6]\n<strong>Output:</strong> 4<br /><strong>Explanation:</strong>\nThe product of the initial array is: 4 * 2 * 1 * 10 * 6 = 480.\nTo find the smallest x, we check:\nIf x = 4: Product of new array = 4 * 4 * 4 * 4 * 4 = 1024 (greater than 480).\nIf x = 3: Product of new array = 3 * 3 * 3 * 3 * 3 = 243 (less than 480).\nThus, the minimum required x is 4.<br /></span></pre>\n<pre><span ><strong>Input :</strong> arr[] = [3, 2, 1, 4]\n<strong>Output :</strong> 3<br /><strong>Explanation:</strong>\nThe product of the initial array is: 3 * 2 * 1 * 4 = 24.\nTo find the smallest x, we check:\nIf x = 3: Product of new array = 3 * 3 * 3 * 3 = 81 (greater than 24).\nIf x = 2: Product of new array = 2 * 2 * 2 * 2 = 16 (less than 24).\nThus, the minimum required x is 3.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />2 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integers, find the smallest positive integer `x` such that when every element in `arr` is replaced by `x`, the product of the new array is strictly larger than the product of the original array.",
                "constraints": [
                    "2 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[4, 2, 1, 10, 6]",
                        "output": "4",
                        "explanation": "The product of the original array [4, 2, 1, 10, 6] is 480. Replacing each element with 4 results in the array [4, 4, 4, 4, 4] with a product of 1024, which is greater than 480. Replacing each element with 3 gives [3, 3, 3, 3, 3], with a product of 243 which is less than 480. Therefore, the minimum `x` is 4."
                    },
                    {
                        "input": "[3, 2, 1, 4]",
                        "output": "3",
                        "explanation": "The product of the original array [3, 2, 1, 4] is 24. Replacing each element with 3 results in the array [3, 3, 3, 3] with a product of 81, which is greater than 24. Replacing each element with 2 gives [2, 2, 2, 2], with a product of 16 which is less than 24. Therefore, the minimum `x` is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >To solve this, calculate the product of the original array, then find the smallest positive integer x such that x^n (where n is the array length) exceeds this product.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the minimum value in the array\n    int findMin(vector<int>& arr) {\n        int n = arr.size(); // Get the size of the array\n\n        // Initializing the sum value\n        double sum = 0;\n\n        // Calculating the logarithm of each element and adding it to the sum\n        for (int i = 0; i < n; i++) {\n            // Fixed array access (arr instead of a)\n            sum += log(arr[i]);\n        }\n\n        // Calculating the exponential of the average logarithm\n        int x = exp(sum / n);\n\n        // Returning the final result, adding 1 to avoid rounding errors\n        return x + 1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Solution class with method to find the minimum value in the array\nclass Solution {\n    // Method to find the minimum value using logarithms\n    public int findMin(int[] a, int n) {\n        // Initialize the sum of logarithms\n        double sum = 0;\n\n        // Loop to calculate the sum of logarithms of array elements\n        for (int i = 0; i < n; i++) {\n            sum += Math.log(a[i]);\n        }\n\n        // Calculate the exponential of the average logarithm\n        int x = (int)Math.exp(sum / n);\n\n        // Return the result, adding 1 to avoid rounding errors\n        return x + 1;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "import math\n\n\nclass Solution:\n\n    #Function to find minimum positive number that can be represented as geometric mean of given array.\n    def find_min(self, arr):\n\n        # Ensure all numbers are positive (or handle zeros in a specific way)\n        if any(num <= 0 for num in arr):\n            # If zero is present, return a specific value (e.g., 1) or handle accordingly\n            return 1\n\n        n = len(arr)\n        sum_log = 0\n\n        #Calculating sum of logarithms of all elements in array.\n        for num in arr:\n            sum_log += math.log(num)\n\n        #Calculating geometric mean and adding 1 to get minimum positive number.\n        return int(math.exp(sum_log / n)) + 1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    find_min(arr) {\n        // Ensure all numbers are positive (or handle zeros in a specific way)\n        if (arr.some(num => num <= 0)) {\n            // If zero or negative is present, return a specific value (e.g., 1) or\n            // handle accordingly\n            return 1;\n        }\n\n        let n = arr.length;\n        let sumLog = 0;\n\n        // Calculating sum of logarithms of all elements in the array\n        for (let num of arr) {\n            sumLog += Math.log(num);\n        }\n\n        // Calculating geometric mean and adding 1 to get minimum positive number\n        return Math.floor(Math.exp(sumLog / n)) + 1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}