{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702719,
            "title": "Minimum Energy",
            "titleSlug": "minimum-energy1107",
            "content": "<p><span style=\"font-size: 18px;\">Given an array containing positive and negative numbers. The array represents checkpoints from one end to the other end of the street. Positive and negative values represent the amount of energy at that checkpoint. Positive numbers increase the energy and negative numbers decrease. Find the minimum initial energy required to cross the street so that the energy level never becomes 0 or less than 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp; The value of the minimum initial energy required will be 1 even if we cross the street successfully without losing energy to less than and equal to 0 at any checkpoint. The 1 is needed for the initial checkpoint.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, -10, 4, 4, 4]\n<strong>Output: </strong>7\n<strong>Explanation: </strong>By having an initial energy of 7 we can make sure that all the checkpoints are visited and the fuel never reaches 0 or less value.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 5, 2, 6, 1]\n<strong>Output: </strong>1\n<strong>Explanation: </strong>We need at least 1 initial energy to reach first checkpoint</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Space&nbsp;</strong></span><strong style=\"font-size: 18px;\">Complexity</strong><strong style=\"font-size: 18px;\">: </strong><span style=\"font-size: 18px;\">O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />-10<sup>3</sup> &le; arr[i] &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers representing energy checkpoints along a street. Positive numbers increase energy, and negative numbers decrease it. Determine the minimum initial energy required to traverse the street such that the energy level never falls to 0 or below at any checkpoint.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "-10^3 <= arr[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "[4, -10, 4, 4, 4]",
                        "output": "7",
                        "explanation": "An initial energy of 7 ensures that the energy level remains above 0 throughout the journey. At each checkpoint, the energy levels would be: 11, 1, 5, 9, 13."
                    },
                    {
                        "input": "[3, 5, 2, 6, 1]",
                        "output": "1",
                        "explanation": "Even though the energy level never drops below 1 without extra initial energy, an initial energy of 1 is required to start at the first checkpoint."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Track current energy at each checkpoint and adjust the minimum initial energy whenever it drops to zero or below.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the minimum energy required.\n    int minEnergy(vector<int>& a) {\n        int initMin = 0; // Variable to keep track of minimum energy needed\n        int curr = 0;    // Variable to keep track of current energy\n\n        // Iterating over the array of energy values\n        for (int i = 0; i < a.size(); i++) {\n            curr += a[i]; // Adding the current energy value to the current sum\n\n            // Checking if the current energy sum is less than or equal to 0\n            if (curr <= 0) {\n                // Incrementing the minimum energy needed by the absolute value of the\n                // current sum plus 1\n                initMin += abs(curr) + 1;\n\n                curr = 1; // Resetting the current energy to 1\n            }\n        }\n        // Returning 1 if no extra energy was needed, or returning the calculated\n        // minimum energy\n        return (initMin == 0) ? 1 : initMin;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int minEnergy(int a[]) {\n        int initMin = 0;\n        int curr = 0;\n\n        // Iterate through the array\n        for (int i = 0; i < a.length; i++) {\n            curr += a[i];\n\n            // If current energy is less than or equal to 0\n            if (curr <= 0) {\n                // Increase initial minimum energy by the absolute value of current\n                // energy + 1\n                initMin += Math.abs(curr) + 1;\n                // Reset current energy to 1\n                curr = 1;\n            }\n        }\n        // If no adjustment was made, at least 1 unit of energy is required\n        return initMin == 0 ? 1 : initMin;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to calculate minimum energy needed.\n    def minEnergy(self, arr):\n        initMin, curr = 0, 0\n\n        # Iterating over the array.\n        for i in range(len(arr)):\n            curr += arr[i]\n\n            # If current energy becomes negative or zero, adjust the initial minimum energy.\n            if curr <= 0:\n                initMin += abs(curr) + 1\n                curr = 1  # Reset current energy to 1\n\n        # If no adjustment was made, at least 1 unit of energy is required.\n        return initMin if initMin > 0 else 1\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n/**\n * @param {number[]} a\n * @returns {number}\n */\nclass Solution {\n    // Function to find minimum initial energy to reach the end of the array.\n    minEnergy(a) {\n        let initMin = 0, curr = 0;\n\n        // Iterating over the array.\n        for (let i = 0; i < a.length; i++) {\n            curr += a[i];\n\n            // If current energy becomes negative or zero, adjust the initial minimum\n            // energy.\n            if (curr <= 0) {\n                initMin += Math.abs(curr) + 1;\n                curr = 1; // Reset current energy to 1\n            }\n        }\n\n        // If no adjustment was made, at least 1 unit of energy is required.\n        return initMin === 0 ? 1 : initMin;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}