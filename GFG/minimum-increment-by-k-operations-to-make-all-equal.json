{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875887,
            "title": "Minimum increment by k operations to make all equal",
            "titleSlug": "minimum-increment-by-k-operations-to-make-all-equal",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> and an integer <strong>k</strong>. You can perform an operation in which you can increment any of the number in the array by <strong>k. </strong>Find the <strong>minimum</strong> number of operations needed to make all the elements of array equal.</span></p>\n<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">Note: If it is not possible to make all elements of array equal return -1.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 4, 4, 2],</span><span style=\"font-size: 18px;\"> k = 2</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>1<strong>\nExplanation: </strong>We can increment the element at last index of the array by 2 to make all the elements equal to 4.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [4, 2, 6, 8], k = 3\n<strong>Output: </strong>-1<strong>\nExplanation: </strong>It can be proven that these elements can't be made equal by applying any number of operations.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [4, 7, 19, 16],</span><span style=\"font-size: 18px;\"> k = 3</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>10</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>1 &lt;= arr.size() &lt;= 10<sup>5</sup><strong><br /></strong></span><span style=\"font-size: 18px;\">0 &lt;= arr[i]&nbsp;</span><span style=\"font-size: 18px;\">&lt;= 10<sup>5</sup></span><span style=\"font-size: 18px;\"><br /></span><span style=\"font-size: 18px;\">1 &lt;= k &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Check if the difference between each element and the maximum element is divisible by `k`; if not, return -1, otherwise count the steps needed to equalize all elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "int minOps(int arr[], int n, int k) {\n    int maxVal = INT_MIN;\n    int res = 0;\n\n    // Find the maximum value in the array\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > maxVal)\n            maxVal = arr[i];\n    }\n\n    // Loop through the array to calculate the minimum operations\n    for (int i = 0; i < n; i++) {\n        // Check if the element can be made equal to maxVal\n        if ((maxVal - arr[i]) % k != 0)\n            return -1;\n\n        // Calculate the required operations\n        res += (maxVal - arr[i]) / k;\n    }\n\n    return res;\n}\n",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find minimum operations to make all elements equal.\n    int minOps(vector<int> arr, int k) {\n        int maxVal = *max_element(arr.begin(), arr.end());\n        int res = 0;\n\n        for (int x : arr) {\n\n            // check if element can be made equal to max\n            // if not, return -1\n            if ((maxVal - x) % k != 0)\n                return -1;\n\n            // else, update res for required operations\n            res += (maxVal - x) / k;\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    static int minOps(int arr[], int k) {\n        int maxVal = Integer.MIN_VALUE;\n        int res = 0;\n\n        // Find the maximum value in the array\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > maxVal) {\n                maxVal = arr[i];\n            }\n        }\n\n        // Loop through the array to calculate the minimum operations\n        for (int i = 0; i < arr.length; i++) {\n            // Check if the element can be made equal to maxVal\n            if ((maxVal - arr[i]) % k != 0) {\n                return -1; // If not possible, return -1\n            }\n\n            // Calculate the required operations\n            res += (maxVal - arr[i]) / k;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Complete the below function\n    def minOps(self, arr, k):\n        maxVal = max(arr)  # Find the maximum value in the array\n        res = 0\n\n        # Loop through the array to calculate the minimum operations\n        for x in arr:\n            # Check if the element can be made equal to maxVal\n            if (maxVal - x) % k != 0:\n                return -1  # If not possible, return -1\n\n            # Calculate the required operations\n            res += (maxVal - x) // k\n\n        return res",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\nclass Solution {\n    minOps(arr, k) {\n        let maxVal = Math.max(...arr); // Find the maximum value in the array\n        let res = 0;\n\n        // Loop through the array to calculate the minimum operations\n        for (let x of arr) {\n            // Check if the element can be made equal to maxVal\n            if ((maxVal - x) % k !== 0) {\n                return -1; // If not possible, return -1\n            }\n\n            // Calculate the required operations\n            res += Math.floor((maxVal - x) / k);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}