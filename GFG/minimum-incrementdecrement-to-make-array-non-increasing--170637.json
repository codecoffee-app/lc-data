{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710281,
            "title": "Minimum increment/decrement to make array non-Increasing",
            "titleSlug": "minimum-incrementdecrement-to-make-array-non-increasing--170637",
            "content": "<p><span style=\"font-size:18px\"><strong>Note: This&nbsp;<a href=\"http://practice.geeksforgeeks.org/problem-of-the-day\">POTD</a>&nbsp;is a part of&nbsp;<a href=\"https://practice.geeksforgeeks.org/summer-carnival-2022?utm_source=potd&amp;utm_medium=problempage&amp;utm_campaign=gsc22\">Geek Summer Carnival</a>. Solve all POTD consecutively from 5th to 10th April and get a chance to win exclusive discount vouchers on our GfG courses.</strong></span></p>\r\n\r\n<hr />\r\n<p><span style=\"font-size:18px\">Given an array <strong>a</strong> of length <strong>n</strong>, find the <strong>minimum</strong> number of operations required to make it <strong>non-increasing</strong>.&nbsp;You can select any one of the following operations and preform it any number of times on an array element.</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">increment the array element by 1.</span></li>\r\n\t<li><span style=\"font-size:18px\">decrement the array element by 1.&nbsp;</span></li>\r\n</ul>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span></strong>\r\n<span style=\"font-size:18px\">N = 4 \r\narray = {3, 1, 2, 1}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 1</span>\r\n<span style=\"font-size:18px\"><strong>Explanation: </strong>\r\nDecrement array[2] by 1. \r\nNew array becomes {3,1,1,1} which is non-increasing. \r\nTherefore, only 1 step is required. </span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span></strong>\r\n<span style=\"font-size:18px\">N = 4 \r\narray = {3, 1, 5, 1}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 4</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>minOperations()</strong> that takes <strong>n</strong>&nbsp;and array <strong>a</strong> as input parameters and returns the <strong>minimum </strong>number of operations required.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected time complexity:</strong> O(nlogn)<br />\r\n<strong>Expected space complexity:</strong> O(n)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= n&nbsp;&lt;= 10^4<br />\r\n1 &lt;= a[i] &lt;= 10^4</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Calculate the sum of absolute differences between the final array elements and the current array elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "priority-queue",
                "slug": "priority-queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\npublic:\n    //Function to calculate minimum number of operations.\n    int minOperations(int *a, int n)\n    { \n        int sum = 0, dif = 0; \n\n        //Creating a min heap using priority queue.\n        priority_queue<int, vector<int>, greater<int> > pq;\n\n        //Iterating over the array.\n        for (int i = 0; i < n; i++) { \n            //If the top element of the priority queue is smaller than current element,\n            //calculate the difference and add it to the sum.\n            if (!pq.empty() && pq.top() < a[i]) { \n                dif = a[i] - pq.top(); \n                sum += dif; \n                pq.pop(); \n                pq.push(a[i]); \n            } \n            \n            //Push the current element into the priority queue.\n            pq.push(a[i]); \n        } \n\n        //Returning the sum of differences.\n        return sum; \n    } \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution \n{ \n    // Function to calculate the minimum number of operations\n    public static int minOperations(int a[], int n) \n    { \n        int sum = 0, dif = 0; \n\n        // Create a priority queue to store the elements in sorted order\n        PriorityQueue<Integer> pq = new PriorityQueue<>(); \n\n        // Iterate through each element in the array\n        for (int i = 0; i < n; i++) \n        { \n            // If the priority queue is not empty and the smallest element is less than the current element\n            if (!pq.isEmpty() && pq.element() < a[i]) \n            { \n                // Calculate the difference between the current element and the smallest element in the priority queue\n                dif = a[i] - pq.element(); \n                \n                // Update the sum by adding the difference\n                sum += dif; \n\n                // Remove the smallest element from the priority queue\n                pq.remove(); \n\n                // Add the current element to the priority queue\n                pq.add(a[i]); \n            } \n            // Add the current element to the priority queue\n            pq.add(a[i]); \n        } \n        // Return the sum of differences\n        return sum; \n    } \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom heapq import heapify, heappush, heappop\r\n\r\nclass Solution:\r\n    def minOperations(self,a,n):\r\n        Sum=0\r\n        heap = [] \r\n        heapify(heap)\r\n        \r\n        for i in range(n):\r\n            if len(heap) and heap[0]<a[i]:\r\n                diff = a[i]-heappop(heap)\r\n                Sum += diff\r\n                heappush(heap, a[i])\r\n            heappush(heap, a[i])\r\n        \r\n        return Sum\r\n\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass MinHeap {\n    constructor() {\n        this.heap = [];\n    }\n\n    parent(i) {\n        return Math.floor((i - 1) / 2);\n    }\n\n    leftChild(i) {\n        return (2 * i) + 1;\n    }\n\n    rightChild(i) {\n        return (2 * i) + 2;\n    }\n\n    insertKey(k) {\n        this.heap.push(k);\n        let i = this.heap.length - 1;\n        \n        while (i !== 0 && this.heap[this.parent(i)] > this.heap[i]) {\n            this.swap(this.parent(i), i);\n            i = this.parent(i);\n        }\n    }\n    \n    decreaseKey(i, newVal) {\n        this.heap[i] = newVal;\n        while (i !== 0 && this.heap[this.parent(i)] > this.heap[i]) {\n            this.swap(this.parent(i), i);\n            i = this.parent(i);\n        }\n    }\n    \n    extractMin() {\n        if (this.heap.length === 0) { return Number.MAX_VALUE; }\n        if (this.heap.length === 1) { return this.heap.pop(); }\n        \n        let root = this.heap[0];\n        this.heap[0] = this.heap.pop();\n        this.minHeapify(0);\n        \n        return root;\n    }\n    \n    getMin() {\n        return this.heap[0];\n    }\n    \n    deleteKey(i) {\n        this.decreaseKey(i, Number.MIN_VALUE);\n        this.extractMin();\n    }\n    \n    minHeapify(i) {\n        let l = this.leftChild(i);\n        let r = this.rightChild(i);\n        let smallest = i;\n        \n        if (l < this.heap.length && this.heap[l] < this.heap[i]) {\n            smallest = l;\n        }\n        if (r < this.heap.length && this.heap[r] < this.heap[smallest]) {\n            smallest = r;\n        }\n        \n        if (smallest !== i) {\n            this.swap(i, smallest);\n            this.minHeapify(smallest);\n        }\n    }\n    \n    swap(x, y) {\n        let temp = this.heap[x];\n        this.heap[x] = this.heap[y];\n        this.heap[y] = temp;\n    }\n}\n\nclass Solution {\n    //Function to find minimum number of operations to make all elements equal.\n    minOperations(a, n) {\n        let sum = 0;\n        let heap = new MinHeap();\n        \n        for (let i = 0; i < n; i++) {\n            if (heap.heap.length !== 0 && heap.getMin() < a[i]) {\n                let diff = a[i] - heap.extractMin();\n                sum += diff;\n                heap.insertKey(a[i]);\n            }\n            heap.insertKey(a[i]);\n        }\n        \n        return sum;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}