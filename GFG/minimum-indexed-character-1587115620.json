{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701313,
            "title": "Minimum indexed character",
            "titleSlug": "minimum-indexed-character-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a string&nbsp;<strong>s1</strong>&nbsp;and another string&nbsp;<strong>s2</strong>. Find the minimum index of the character in <strong>s1 </strong>that is also present in&nbsp;<strong>s2</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s1 = \"geeksforgeeks\", s2 = \"set\"\n<strong>Output: </strong>1<strong>\nExplanation: </strong>e is the character which is present in given s1 \"geeksforgeeks\" and is also present in s2 \"set\". Minimum index of e is 1. </span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s1 = \"adcffaet\", s2 = \"onkl\"\n<strong>Output: </strong>-1<strong>\nExplanation: </strong>There are none of the characters which is common in s1 and s2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; s1.size(), s2.size() &le; 10<sup>5&nbsp;</sup><br />'a' &lt;= s1<sub>i</sub>, s2<sub>i</sub>&nbsp;&lt;= 'z'</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, find the minimum index of a character in `s1` that is also present in `s2`. If no such character exists, return -1.",
                "constraints": [
                    "1 <= s1.size(), s2.size() <= 10^5",
                    "s1 and s2 consist of lowercase English letters (a to z)"
                ],
                "testcases": [
                    {
                        "input": "s1 = \"geeksforgeeks\", s2 = \"set\"",
                        "output": "1",
                        "explanation": "The character 'e' is present in both 'geeksforgeeks' and 'set'. The first occurrence of 'e' in 'geeksforgeeks' is at index 1."
                    },
                    {
                        "input": "s1 = \"adcffaet\", s2 = \"onkl\"",
                        "output": "-1",
                        "explanation": "There are no characters common to both 'adcffaet' and 'onkl'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a hash table to store the first index of characters in s1 and then iterate through s2 to find the minimum index.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "ola-cabs"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    // Function to find the minimum indexed character.\n    int minIndexChar(string &s1, string &s2) {\n        // using a map as hash table to store first index of all characters.\n        unordered_map<char, int> um;\n        int minIndex = INT_MAX;\n\n        int m = s1.size();\n        int n = s2.size();\n\n        // storing first index of each character of string \"s1\" in hash table.\n        for (int i = 0; i < m; i++)\n            if (um.find(s1[i]) == um.end())\n                um[s1[i]] = i;\n\n        // iterating over the second string \"s2\".\n        for (int i = 0; i < n; i++) {\n            // if current character of string \"s2\" is found in hash table,\n            // we check if it has the minimum index or not.\n            if (um.find(s2[i]) != um.end() && um[s2[i]] < minIndex) {\n                // updating minimum index.\n                minIndex = um[s2[i]];\n            }\n        }\n\n        // returning the minimum indexed character or -1 if no\n        // character of \"s2\" is present in \"s1\".\n        if (minIndex != INT_MAX)\n            return minIndex;\n        else\n            return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Backend complete function template for JAVA\n\nclass Solution {\n    // Function to find the minimum indexed character.\n    public static int minIndexChar(String s1, String s2) {\n        // using a map as hash table to store first index of all characters.\n        HashMap<Character, Integer> hm = new HashMap<>();\n        int minIndex = Integer.MAX_VALUE;\n\n        int m = s1.length();\n        int n = s2.length();\n\n        // storing first index of each character of string \"s1\" in hash table.\n        for (int i = 0; i < m; i++)\n            if (!hm.containsKey(s1.charAt(i))) hm.put(s1.charAt(i), i);\n\n        // iterating over the second string \"s2\".\n        for (int i = 0; i < n; i++) {\n            // if current character of string \"s2\" is found in hash table,\n            // we check if it has the minimum index or not.\n            if (hm.containsKey(s2.charAt(i)) && hm.get(s2.charAt(i)) < minIndex) {\n                // updating minimum index.\n                minIndex = hm.get(s2.charAt(i));\n            }\n        }\n\n        // returning the minimum indexed character or -1 if no\n        // character of \"s2\" is present in \"s1\".\n        if (minIndex != Integer.MAX_VALUE)\n            return minIndex;\n        else\n            return -1;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to find the minimum indexed character.\n    def minIndexChar(self, s1, s2):\n\n        #using a map as hash table to store first index of all characters.\n        um = {}\n        minIndex = sys.maxsize\n\n        m = len(s1)\n        n = len(s2)\n\n        #storing first index of each character of string \"s1\" in hash table.\n        for i in range(m):\n            if (s1[i] not in um):\n                um[s1[i]] = i\n\n        #iterating over the second string \"s2\".\n        for i in range(n):\n\n            #if current character of string \"s2\" is found in hash table,\n            #we check if it has the minimum index or not.\n            if (s2[i] in um and um[s2[i]] < minIndex):\n                #updating minimum index.\n                minIndex = um[s2[i]]\n\n        #returning the minimum indexed character or -1 if no\n\n    #character of \"s2\" is present in \"s1\".\n        if (minIndex != sys.maxsize):\n            return minIndex\n        else:\n            return -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {string} s1\n * @param {string} s2\n * @returns {number}\n */\nclass Solution {\n    // Function to find the minimum indexed character.\n    minIndexChar(s1, s2) {\n        // using a map as hash table to store first index of all characters.\n        let um = {};\n        let INT_MAX = 1e9;\n        let minIndex = 1e9;\n\n        let m = s1.length;\n        let n = s2.length;\n\n        // storing first index of each character of string \"s1\" in hash table.\n        for (let i = 0; i < m; i++)\n            if (!(s1[i] in um)) um[s1[i]] = i;\n\n        // iterating over the second string \"s2\".\n        for (let i = 0; i < n; i++) {\n            // if current character of string \"s2\" is found in hash table,\n            // we check if it has the minimum index or not.\n            if (s2[i] in um && um[s2[i]] < minIndex) {\n                // updating minimum index.\n                minIndex = um[s2[i]];\n            }\n        }\n\n        // returning the minimum indexed character or -1 if no\n        // character of \"s2\" is present in \"s1\".\n        if (minIndex != INT_MAX)\n            return minIndex;\n        else\n            return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}