{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701337,
            "title": "Minimum indexed character",
            "titleSlug": "minimum-indexed-character0221",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>S</strong>&nbsp;and another string&nbsp;<strong>patt</strong>. Find the character in&nbsp;<strong>patt</strong>&nbsp;that is present at the minimum index in <strong>S</strong>.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>S = \"zsyle\", patt = \"bjz\"\n<strong>Output: </strong>\"z\"</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>S = \"anskg\", patt = \"me\"\n<strong>Output: </strong>\"$\"</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>printMinIndexChar()&nbsp;</strong>which takes <strong>S</strong>&nbsp;and <strong>patt&nbsp;</strong>as input parameter and returns the character in<strong> patt&nbsp;</strong>that is present at the minimum index in <strong>S</strong>. If not possible returns \"$\".</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(max(|str|, |patt|))<br /><strong>Expected Auxilary Space:&nbsp;</strong>O(K) where K &lt;= 26</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |S|, |patt| &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` and another string `patt`, find the character in `patt` that appears at the minimum index within `S`. If no character from `patt` is found in `S`, return \"$\".",
                "constraints": [
                    "1 <= |S|, |patt| <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "S = \"zsyle\", patt = \"bjz\"",
                        "output": "\"z\"",
                        "explanation": "The character 'z' from 'patt' appears earliest in 'S'."
                    },
                    {
                        "input": "S = \"anskg\", patt = \"me\"",
                        "output": "\"$\"",
                        "explanation": "No characters from 'patt' are present in 'S'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">1. Try to use the concept of Hashing to solve the problem.</span></p>",
            "<p><span style=\"font-size:14px\">2. Create a hash table with&nbsp;tuple represented as&nbsp;(character, index)&nbsp;tuple.<br />\nStore the first index of each character of&nbsp;str&nbsp;in the hash table.<br />\nNow, for each character of&nbsp;patt&nbsp;check if it is present in the hash table or not.<br />\nIf present then get its index from the hash table and update&nbsp;minIndex&nbsp;(minimum index encountered so far).<br />\nFor no matching character print &ldquo;$&rdquo;.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "ola-cabs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n      public:\n\t//Function to print the minimum index character in a string.\n\tstring printMinIndexChar(string str, string patt)\n\t{\n\t    //creating a vector of size 26 to maintain frequency of characters in patt.\n\t    vector<int>hash(26,0);\n\t    \n\t    //iterating over each character in patt and updating its frequency.\n\t    for(auto i: patt) \n\t        hash[i-'a']++;\n\t    \n\t    //creating an empty string to store the answer.\n\t    string ans = \"\";\n\t    \n\t    //iterating over each character in str.\n\t    for(auto i: str){\n\t        //if frequency of current character in str is non-zero,\n\t        //we have found the minimum index character.\n\t        if(hash[i-'a']){\n\t            ans += i;\n\t            return ans; //returning the minimum index character.\n\t        }\n\t    }\n\t    \n\t    //if no minimum index character found, return \"$\".\n\t    return \"$\";\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "/*package whatever //do not write package name here */\n\nclass Solution{\n    \n    public static String printMinIndexChar(String str, String patt){\n        \n        // string buffer to store answer\n        String sb = \"\";\n        \n        int i=0,l1=str.length(),l2=patt.length();\n\t    \n\t    // hash to store the character in patt with their first indexes\n\t    HashSet<Character> hs=new HashSet<Character>();\n\t    for(i=0;i<l2;i++)\n\t        hs.add(patt.charAt(i));\n\t    \n\t    // check if character in str is present in hash,\n\t    // if found print the min index character, else print \"$\"\n\t    for(i=0;i<l1;i++)\n\t        if(hs.contains(str.charAt(i)))\n\t            break;\n\t    if(i<l1)\n\t        sb = sb + str.charAt(i);\n\t    else\n\t        sb = \"$\";\n\t        \n\t   return sb;\n    \n    }\n    \n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    #Function to find and return the minimum index character of a string.\n    def printMinIndexChar(self, S, patt):\n\n        #Creating a hash table of size 26 to store the frequency of characters in the pattern.\n        hash = [0 for i in range(26)]\n\n        #Iterating over the characters in the pattern and updating the hash table.\n        for i in patt:\n            hash[ord(i) -\n                 97] = +1  #Incrementing the count of the character by 1.\n\n        #Iterating over the characters in the main string.\n        for i in S:\n\n            #If the character is present in the hash table, it means it is the minimum index character, so return it.\n            if (hash[ord(i) - 97]):\n                return (\"\" + i)\n\n        #If no minimum index character is found, return \"$\".\n        return \"$\"\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the character in patt that is present at the minimum index in str.\n    public string printMinIndexChar(string str, string patt)\n    {\n        //creating an array of size 26 to maintain frequency of characters in patt.\n        int[] hash = new int[26];\n        \n        //iterating over each character in patt and updating its frequency.\n        foreach(char c in patt) \n            hash[c - 'a']++;\n        \n        //creating an empty string to store the answer.\n        string ans = \"\";\n        \n        //iterating over each character in str.\n        foreach(char c in str){\n            //if frequency of current character in str is non-zero,\n            //we have found the minimum index character.\n            if(hash[c - 'a'] > 0){\n                ans += c;\n                return ans; //returning the minimum index character.\n            }\n        }\n        \n        //if no minimum index character found, return \"$\".\n        return \"$\";\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\n\nclass Solution {\n\n    printMinIndexChar(str,patt){\n        let hash = {} // Initialize a hash map to store characters from the pattern and their frequency\n\n\n        for(let ch of patt){ // Iterate through each character in the pattern\n            if(hash[ch]){ // If the character already exists in the hash map\n                hash[ch]++; // Increment the frequency of the character\n            } else { // If the character doesn't exist in the hash map\n                hash[ch] = 1; // Add the character to the hash map with a frequency of 1\n            }\n        }\n        for(let ch of str){ // Iterate through each character in the given string\n            if(hash[ch] > 0){ // If the character exists in the hash map and its frequency is greater than 0\n                return ch; // Return the first character from the string that exists in the pattern\n            }\n        }\n        return '$'; // If no character from the string exists in the pattern, return \"$\"\n        \n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}