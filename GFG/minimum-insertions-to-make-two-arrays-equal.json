{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706334,
            "title": "Minimum operations to convert array A to B",
            "titleSlug": "minimum-insertions-to-make-two-arrays-equal",
            "content": "<p><span style=\"font-size: 18px;\">Given two Arrays <strong>A[]</strong> and <strong>B[]</strong> of length <strong>N</strong> and <strong>M</strong> respectively. Find the minimum number of <strong>insertions</strong> and <strong>deletions</strong> on the array A[], required to make both the arrays identical.<br /><strong>Note: </strong>Array B[] is sorted and all its elements are distinct, operations can be performed at any index not necessarily at end.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 5, M = 3\nA[] = {1, 2, 5, 3, 1}\nB[] = {1, 3, 5}\n<strong>Output:\n</strong>4\n<strong>Explanation:</strong>\nWe need to delete 2 and replace it with 3.\nThis costs 2 steps. Further, we will have to\ndelete the last two elements from A to\nobtain an identical array to B. Overall, it\nresults in 4 steps.</span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 2, M = 2\nA[] = {1, 4}\nB[] = {1, 4}\n<strong>Output :</strong>\n0</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nBoth the Arrays are already identical.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>minInsAndDel()</strong>&nbsp;which takes two integers N and M, and two arrays A of size N and B of size M respectively as input and returns the minimum insertions and deletions required.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(NlogN)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N,M &le; 10<sup>5</sup><br />1 &le; A[i], B[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `A` of length `N` and `B` of length `M`, determine the minimum number of insertions and deletions required to transform array `A` into array `B`. Array `B` is sorted and contains distinct elements. Operations (insertion and deletion) can be performed at any index of array `A`.",
                "constraints": [
                    "1 <= N, M <= 10^5",
                    "1 <= A[i], B[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 5, M = 3\nA[] = {1, 2, 5, 3, 1}\nB[] = {1, 3, 5}",
                        "output": "4",
                        "explanation": "To make array A identical to B, we need to remove 2 from A. Also, we have to delete the last element 1 from A. This is equal to 4 operations in total."
                    },
                    {
                        "input": "N = 2, M = 2\nA[] = {1, 4}\nB[] = {1, 4}",
                        "output": "0",
                        "explanation": "Both arrays are already identical, so no operations are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">All the elements that do not belong to the Longest Common Subsequence of the two arrays needs to be deleted.</span></p>",
            "<p><span style=\"font-size:18px\">Use the concept of Longest Increasing Subsequence to find the Longest Common Subsequence of&nbsp;the two arrays.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google",
            "codenation"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n\n    // Function to get length of the Longest Increasing Subsequence\n    // in NlogN time.\n    int LISLength(vector<int>& v)  \n    {  \n        if (v.size() == 0)  \n            return 0;  \n      \n        vector<int> tail(v.size(), 0);  \n        int length = 1; // always points empty slot in tail  \n      \n        tail[0] = v[0];  \n          \n        for (int i = 1; i < v.size(); i++)\n        {  \n      \n            // Do binary search for the element in  \n            // the range from begin to begin + length \n            auto b = tail.begin(), e = tail.begin() + length; \n            auto it = lower_bound(b, e, v[i]);  \n                  \n            // If not present change the tail element to v[i]  \n            if (it == tail.begin() + length) \n                tail[length++] = v[i];  \n            else   \n                *it = v[i];  \n        }  \n      \n        return length;  \n    }  \n\n    int minInsAndDel(int A[], int B[], int N, int M) {\n        \n        map<int,int> mp;\n        for(int i=0; i<M; i++)\n            mp.insert({B[i],i});\n\n        vector<int> res;\n\n        for(int i=0; i<N; i++)\n        {\n            if(mp.find(A[i])!=mp.end())\n                res.push_back(mp[A[i]]);\n        }\n\n        int ans = (N-LISLength(res)) + (M-LISLength(res));\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Backend complete function Template for Java\n\nclass Solution {\n    static int LISLength(int[] v) {\n        if (v.length == 0) // boundary case\n            return 0;\n \n        int[] tail = new int[v.length];\n        int length = 1; // always points empty slot in tail\n        tail[0] = v[0];\n \n        for (int i = 1; i < v.length; i++) {\n \n            if (v[i] > tail[length - 1]) {\n                // v[i] extends the largest subsequence\n                tail[length++] = v[i];\n            }\n            else {\n                int idx = Arrays.binarySearch(\n                    tail, 0, length - 1, v[i]);\n \n                // binarySearch in java returns negative\n                // value if searched element is not found in\n                // array\n \n                // this negative value stores the\n                // appropriate place where the element is\n                // supposed to be stored\n                if (idx < 0)\n                    idx = -1 * idx - 1;\n \n                // replacing the existing subsequene with\n                // new end value\n                tail[idx] = v[i];\n            }\n        }\n        return length;\n    }\n    \n    static int minInsAndDel(int[] A, int[] B, int N, int M) {\n        HashMap<Integer, Integer> mp = new HashMap<>();\n        for(int i=0; i<M; i++) {\n            mp.put(B[i],i);\n        }\n        \n        ArrayList<Integer> arr = new ArrayList<>();\n        \n        for(int i=0; i<N; i++) {\n            if(mp.containsKey(A[i]))\n                arr.add(mp.get(A[i]));\n        }\n        \n        int[] res = new int[arr.size()];\n        for(int i=0; i<arr.size(); i++)\n            res[i] = arr.get(i);\n        \n        int ans = (N-LISLength(res)) + (M-LISLength(res));\n\n        return ans;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\nimport bisect\n\nclass Solution:\n    \n    # Function to get length of the Longest Increasing Subsequence\n    # in NlogN time.\n    def LISLength(self, v):\n        if len(v) == 0:  # boundary case\n            return 0\n     \n        tail = [0 for i in range(len(v) + 1)]\n        length = 1  # always points empty slot in tail\n     \n        tail[0] = v[0]\n     \n        for i in range(1, len(v)):\n            if v[i] > tail[length-1]:\n                # v[i] extends the largest subsequence\n                tail[length] = v[i]\n                length += 1\n            else:\n                tail[bisect.bisect_left(tail, v[i], 0, length-1)] = v[i]\n     \n        return length\n        \n    def minInsAndDel(self, A, B, N, M):\n        mp = dict()\n        for i in range(M):\n            mp[B[i]] = i \n        \n        res = []\n        \n        for i in range(N):\n            if A[i] in mp:\n                res.append(mp[A[i]])\n        \n        ans = (N-self.LISLength(res)) + (M-self.LISLength(res))\n        \n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n\n  /* LIS FUNCTION */\n\n  LISLength(v) {\n        \n    if (v.length === 0)\n      return 0;\n            \n    let tail = Array(v.length).fill(0);\n    let length = 1; \n            \n    tail[0] = v[0];\n            \n    for (let i = 1; i < v.length; i++) {\n        \n      let low = 0, high = length;\n      while(low !== high) {\n        let mid = Math.floor((low + high) / 2);\n        if(tail[mid] < v[i]) \n          low = mid + 1;\n        else \n          high = mid;\n      } \n\n      tail[low] = v[i];\n      \n      if(low === length)\n        ++length;\n    }\n\n    return length;\n  }\n\n  /* MAIN FUNCTION */\n\n  minInsAndDel(A,B,N,M){\n\n    /* Construct a map with item indexes from array B */\n        \n    let map = new Map();\n    B.forEach((b, i) => {\n      map.set(b, i)\n    });\n    \n    /* Construct a new array with items from array A that exists in the map */\n        \n    let res = [];\n    A.forEach(a => {\n      if(map.has(a))\n        res.push(map.get(a));\n    });\n        \n    /* Calculate min insertions and deletions */\n        \n    let ans = (N-this.LISLength(res)) + (M-this.LISLength(res));\n\n    return ans;\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}