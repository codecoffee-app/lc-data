{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704020,
            "title": "Minimum insertions to sort an array",
            "titleSlug": "minimum-insertions-to-sort-an-array0535",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong> of size <strong>N</strong>, the task is to sort this array in a minimum number of steps where in one step you can remove any array element from its position and insert it in any other position.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 7\narr[] = {2, 3, 5, 1, 4, 7, 6}\n<strong>Output:</strong> 3\n<strong>Explanation</strong>: </span>\n<span style=\"font-size: 18px;\">We can sort above array in 3 insertion \nsteps as shown below,\n1 before array value 2\n4 before array value 5\n6 before array value 7</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 4\narr[] = {4, 6, 5, 1}\n<strong>Output: </strong>2\n<strong>Explanation</strong>: \nWe can sort above array in 2 insertion \nsteps as shown below, \n1 before array value 4\n6 after array value 5 </span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>minInsertions</code>()&nbsp;</strong>which takes <strong>N</strong> and array <strong>arr </strong>as input parameters and returns the integer value</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(<strong>N<sup>2</sup></strong>)<br /><strong>Expected Auxiliary Space:</strong> O(<strong>N</strong>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `N`, determine the minimum number of steps required to sort the array. In one step, you can remove any element from its current position and insert it at any other position within the array.",
                "constraints": [
                    "1 \u2264 N \u2264 10^3"
                ],
                "testcases": [
                    {
                        "input": "N = 7\narr[] = {2, 3, 5, 1, 4, 7, 6}",
                        "output": "3",
                        "explanation": "The array can be sorted in 3 insertion steps:\n1. Insert 1 before 2.\n2. Insert 4 before 5.\n3. Insert 6 before 7."
                    },
                    {
                        "input": "N = 4\narr[] = {4, 6, 5, 1}",
                        "output": "2",
                        "explanation": "The array can be sorted in 2 insertion steps:\n1. Insert 1 before 4.\n2. Insert 6 after 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can solve this problem using dynamic programming. The main thing to observe is that moving an element doesn&rsquo;t change the relative order of elements other than the element which is being moved. Now consider <a href=\"https://www.geeksforgeeks.org/dynamic-programming-set-3-longest-increasing-subsequence/\">longest increasing subsequence (LIS)</a> in which equal element are also taken as part of the increasing sequence, now if keep the element of this increasing sequence as it is and move all other elements then it will take the least number of steps because we have taken longest subsequence which does not need to be moved. Finally, the answer will be the size of the array minus the size of the longest increasing subsequence.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\n\t\t\n\n\tpublic:\n\tint minInsertions(int arr[], int N) \n\t{ \n\t    // lis[i] is going to store length of lis \n\t    // that ends with i. \n\t    int lis[N]; \n\t  \n\t    /* Initialize lis values for all indexes */\n\t    for (int i = 0; i < N; i++) \n\t        lis[i] = 1; \n\t  \n\t    /* Compute optimized lis values in bottom up manner */\n\t    for (int i = 1; i < N; i++) \n\t        for (int j = 0; j < i; j++) \n\t            if (arr[i] >= arr[j] && lis[i] < lis[j] + 1) \n\t                lis[i] = lis[j] + 1; \n\t  \n\t     // The overall LIS must end with of the array \n\t     //   elements. Pick maximum of all lis values \n\t    int max = 0; \n\t    for (int i = 0; i < N; i++) \n\t        if (max < lis[i]) \n\t            max = lis[i]; \n\t  \n\t    // return size of array minus length of LIS \n\t    // as final result \n\t    return (N - max); \n\t} \n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    public int minInsertions(int arr[], int N) \n\t{ \n\t    // lis[i] is going to store length of lis \n\t    // that ends with i. \n\t    int lis[] = new int[N]; \n\t  \n\t    /* Initialize lis values for all indexes */\n\t    for (int i = 0; i < N; i++) \n\t        lis[i] = 1; \n\t  \n\t    /* Compute optimized lis values in bottom up manner */\n\t    for (int i = 1; i < N; i++) \n\t        for (int j = 0; j < i; j++) \n\t            if (arr[i] >= arr[j] && lis[i] < lis[j] + 1) \n\t                lis[i] = lis[j] + 1; \n\t  \n\t     // The overall LIS must end with of the array \n\t     //   elements. Pick maximum of all lis values \n\t    int max = 0; \n\t    for (int i = 0; i < N; i++) \n\t        if (max < lis[i]) \n\t            max = lis[i]; \n\t  \n\t    // return size of array minus length of LIS \n\t    // as final result \n\t    return (N - max); \n\t} \n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minInsertions(self, arr, N):\n\n        # lis[i] is going to store length\n        # of lis that ends with i.\n        lis = [0] * N\n\n        # Initialize lis values for all indexes\n        for i in range(N):\n            lis[i] = 1\n\n        # Compute optimized lis values in\n        # bottom up manner\n        for i in range(1, N):\n            for j in range(i):\n                if (arr[i] >= arr[j] and lis[i] < lis[j] + 1):\n                    lis[i] = lis[j] + 1\n\n        # The overall LIS must end with of the array\n        # elements. Pick maximum of all lis values\n        max = 0\n        for i in range(N):\n            if (max < lis[i]):\n                max = lis[i]\n\n        # return size of array minus length\n        # of LIS as final result\n        return (N - max)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to calculate the minimum number of insertions required to make the array palindromic.\n    minInsertions(arr, N)\n    {\n        //Initialize lis values for all indexes\n        let lis = new Array(N).fill(1);\n     \n        //Compute optimized lis values in bottom up manner\n        for (let i = 1; i < N; i++) {\n            for (let j = 0; j < i; j++) {\n                if (arr[i] >= arr[j] && lis[i] < lis[j] + 1) {\n                    lis[i] = lis[j] + 1;\n                }\n            }\n        }\n     \n        //The overall LIS must end with one of the array elements. Pick the maximum of all lis values\n        let max = 0;\n        for (let i = 0; i < N; i++) {\n            if (max < lis[i]) {\n                max = lis[i];\n            }\n        }\n     \n        //return size of array minus length of LIS as final result\n        return (N - max);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}