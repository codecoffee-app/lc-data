{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702723,
            "title": "Minimum move to front operations",
            "titleSlug": "minimum-move-to-front-operations2232",
            "content": "<p class=\"whitespace-pre-wrap break-words\"><span >Given an array&nbsp;<strong>arr[]</strong>&nbsp;of distinct integers from 1 to arr.size(), count the minimum number of&nbsp;<strong>moveToFront</strong>&nbsp;operations needed to arrange the elements in ascending order (1, 2, 3, ..., arr.size()). A&nbsp;<strong>moveToFront</strong>&nbsp;operation picks any element arr[i] and places it at the first position.</span></p>\n<p class=\"whitespace-pre-wrap break-words\"><span ><strong>Examples:</strong></span></p>\n<pre class=\"whitespace-pre-wrap break-words\"><span ><strong>Input: </strong>arr = [3, 2, 1, 4]<br /><strong>Output: </strong>2<br /><strong>Explanation: </strong>We need to perform moveToFront on 1 and 2 to make the array sorted.</span></pre>\n<pre class=\"whitespace-pre-wrap break-words\"><span ><strong>Input: </strong>arr = [5, 7, 4, 3, 2, 6, 1]<br /><strong>Output:</strong> 6<br /><strong>Explanation:</strong> We need to perform moveToFront on 1, 2, 3, 4, 5, and 6 to make the array sorted.</span></pre>\n<p class=\"whitespace-pre-wrap break-words\"><span ><strong>Expected Time Complexity:</strong>&nbsp;O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p class=\"whitespace-pre-wrap break-words\"><span ><strong>Constraints:<br /></strong>1 &le; arr.size() &le; 10<sup>6</sup><br />Elements in arr are distinct and range from 1 to arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of distinct integers from 1 to `arr.size()`, determine the minimum number of `moveToFront` operations required to sort the array in ascending order (1, 2, 3, ..., `arr.size()`). A `moveToFront` operation involves selecting an element `arr[i]` and moving it to the beginning of the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "Elements in arr are distinct and range from 1 to arr.size()"
                ],
                "testcases": [
                    {
                        "input": "[3, 2, 1, 4]",
                        "output": "2",
                        "explanation": "To sort the array, we need to move '1' and '2' to the front. Therefore, the minimum number of moveToFront operations is 2."
                    },
                    {
                        "input": "[5, 7, 4, 3, 2, 6, 1]",
                        "output": "6",
                        "explanation": "To sort the array, we need to move '1', '2', '3', '4', '5', and '6' to the front. Therefore, the minimum number of moveToFront operations is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Start from the end. Count elements between current and expected positions. Update expected after each find.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the minimum number of moves required.\n    int minMoves(vector<int> &arr) {\n        int n = arr.size();\n        int expectedItem = n;\n        // iterating the array in reverse order.\n        for (int i = n - 1; i >= 0; i--) {\n            // if the current element matches the expected item,\n            // reduce the expected item.\n            if (arr[i] == expectedItem)\n                expectedItem--;\n        }\n        // return the expected item as the minimum number of moves required.\n        return expectedItem;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the minimum number of moves required.\n    public int minMoves(ArrayList<Integer> arr) {\n        int n = arr.size();\n        int expectedItem = n;\n        // iterating the array in reverse order.\n        for (int i = n - 1; i >= 0; i--) {\n            // if the current element matches the expected item,\n            // reduce the expected item.\n            if (arr.get(i) == expectedItem) expectedItem--;\n        }\n        // return the expected item as the minimum number of moves required.\n        return expectedItem;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Solution code\nclass Solution:\n    # Function to find the minimum number of moves required.\n    def minMoves(self, arr):\n        n = len(arr)\n        expected_item = n\n        # iterating the array in reverse order.\n        for i in range(n - 1, -1, -1):\n            # if the current element matches the expected item,\n            # reduce the expected item.\n            if arr[i] == expected_item:\n                expected_item -= 1\n        # return the expected item as the minimum number of moves required.\n        return expected_item",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the minimum number of moves required.\n    minMoves(arr) {\n        let n = arr.length;\n        let expectedItem = n;\n        // iterating the array in reverse order.\n        for (let i = n - 1; i >= 0; i--) {\n            // if the current element matches the expected item,\n            // reduce the expected item.\n            if (arr[i] === expectedItem) expectedItem--;\n        }\n        // return the expected item as the minimum number of moves required.\n        return expectedItem;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}