{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711092,
            "title": "Minimum Multiplications to reach End",
            "titleSlug": "minimum-multiplications-to-reach-end",
            "content": "<p><span style=\"font-size: 18px;\">Given <strong>start</strong>, <strong>end</strong> and an array <strong>arr</strong> of <strong>n</strong>&nbsp;numbers. At each step, <strong>start</strong> is multiplied with any number in the array and then mod operation with <strong>100000</strong> is done to get the new start. </span></p>\n<p><span style=\"font-size: 18px;\">Your task is to find the minimum steps in which <strong>end</strong> can be achieved starting from <strong>start</strong>. If it is not possible to reach <strong>end</strong>, then return <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\narr[] = {2, 5, 7}\nstart = 3, end = 30\n<strong>Output:</strong>\n2\n<strong>Explanation:</strong>\nStep 1: 3*2 = 6 % 100000 = 6 \nStep 2: 6*5 = 30 % 100000 = 30\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\narr[] = {3, 4, 65}\nstart = 7, end = 66175\n<strong>Output:</strong>\n4\n<strong>Explanation:</strong>\nStep 1: 7*3 = 21 % 100000 = 21&nbsp;\nStep 2: 21*3 = 63 % 100000 = 63&nbsp;\nStep 3: 63*65 = 4095 % 100000 = 4095&nbsp;\nStep 4: 4095*65 = 266175 % 100000 = 66175\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:<br /></strong></span><span style=\"font-size: 18px;\">You don't need to print or input anything. Complete the function <strong>minimumMultiplications()</strong> which takes an integer array <strong>arr</strong>, an integer <strong>start</strong> and an integer<strong> end</strong> as the input parameters and returns an integer, denoting the minumum steps to reach in which <strong>end</strong> can be achieved starting from <strong>start</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(10<sup>5</sup>)<br /></span><span style=\"font-size: 18px;\"><strong>Expected Space Complexity:</strong> O(10<sup>5</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 10<sup>4</sup></span></li>\n<li><span style=\"font-size: 18px;\">1 &lt;= arr[i] &lt;= 10<sup>4</sup></span></li>\n<li><span style=\"font-size: 18px;\">1 &lt;= start, end &lt;&nbsp;10<sup>5</sup></span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">Since in the above problem the modulus given is 100000, therefore the maximum number of states will be 10<sup>5</sup>. All the states can be checked using simple BFS.</span></p>",
            "<p><span style=\"font-size:14px\">Initialize an ans[] array with -1 which marks that the state has not been visited. ans[i] stores the number of steps taken to reach i from start. Initially push the start to the queue, then apply BFS. Pop the top element and check if it is equal to the end, if it is then print the ans[end]. If the element is not equal to the topmost element, then multiply top element with every element in the array and perform a mod operation. If the multiplied element state has not been visited previously, then push it into the queue. Initialize ans[pushed_element] by ans[top_element] + 1. Once all the states are visited, and the state cannot be reached by performing every possible multiplication, then print -1.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    int minimumMultiplications(vector<int>& arr, int start, int end) {\r\n        // array which stores the minimum steps\r\n        // to reach i from start\r\n        int ans[100001];\r\n\r\n        // -1 indicated the state has not been visited\r\n        memset(ans, -1, sizeof(ans));\r\n        const int mod = 100000;\r\n\r\n        // queue to store all possible states\r\n        queue<int> q;\r\n\r\n        // initially push the start\r\n        q.push(start % mod);\r\n\r\n        // to reach start we require 0 steps\r\n        ans[start] = 0;\r\n\r\n        // till all states are visited\r\n        while (!q.empty()) {\r\n\r\n            // get the topmost element in the queue\r\n            int top = q.front();\r\n\r\n            // pop the topmost element\r\n            q.pop();\r\n\r\n            // if the topmost element is end\r\n            if (top == end) return ans[end];\r\n\r\n            // perform multiplication with all array elements\r\n            for (int i = 0; i < arr.size(); i++) {\r\n                int pushed = top * arr[i];\r\n                pushed = pushed % mod;\r\n\r\n                // if not visited, then push it to queue\r\n                if (ans[pushed] == -1) {\r\n                    ans[pushed] = ans[top] + 1;\r\n                    q.push(pushed);\r\n                }\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    int minimumMultiplications(int[] arr, int start, int end) {\r\n        // array which stores the minimum steps\r\n        // to reach i from start\r\n        int[] ans = new int[100001];\r\n\r\n        // -1 indicated the state has not been visited\r\n        Arrays.fill(ans, -1);\r\n        int mod = 100000;\r\n\r\n        // queue to store all possible states\r\n        Queue<Integer> q = new LinkedList<>();\r\n\r\n        // initially push the start\r\n        q.add(start % mod);\r\n\r\n        // to reach start we require 0 steps\r\n        ans[start] = 0;\r\n\r\n        // till all states are visited\r\n        while (!q.isEmpty()) {\r\n\r\n            // pop and get the topmost element in the queue\r\n            int top = q.poll();\r\n\r\n            // if the topmost element is end\r\n            if (top == end) return ans[end];\r\n\r\n            // perform multiplication with all array elements\r\n            for (int i = 0; i < arr.length; i++) {\r\n                int pushed = top * arr[i];\r\n                pushed = pushed % mod;\r\n\r\n                // if not visited, then push it to queue\r\n                if (ans[pushed] == -1) {\r\n                    ans[pushed] = ans[top] + 1;\r\n                    q.add(pushed);\r\n                }\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom typing import List\r\nfrom collections import deque\r\n \r\nclass Solution:\r\n    \r\n    def minimumMultiplications(self, arr : List[int], start : int, end : int) -> int:\r\n        \r\n        # array which stores the minimum\r\n        # steps to reach i from start\r\n        ans = [-1 for i in range(100001)]\r\n    \r\n        # -1 indicated the state has\r\n        # not been visited\r\n        mod = 100000\r\n    \r\n        q = deque()\r\n        \r\n        # queue to store all possible states\r\n        # initially push the start\r\n        q.append(start % mod)\r\n    \r\n        # to reach start we require 0 steps\r\n        ans[start] = 0\r\n    \r\n        # till all states are visited\r\n        while (len(q) > 0):\r\n    \r\n            # get the topmost element in the\r\n            # queue, pop the topmost element\r\n            top = q.popleft()\r\n    \r\n            # if the topmost element is end\r\n            if (top == end):\r\n                return ans[end]\r\n    \r\n            # perform multiplication with\r\n            # all array elements\r\n            for i in range(len(arr)):\r\n                pushed = top * arr[i]\r\n                pushed = pushed % mod\r\n    \r\n                # if not visited, then push it to queue\r\n                if (ans[pushed] == -1):\r\n                    ans[pushed] = ans[top] + 1\r\n                    q.append(pushed)\r\n                \r\n        return -1     \r\n\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    public int minimumMultiplications(List<int> arr, int start, int end)\n    {\n        // array which stores the minimum steps\n        // to reach i from start\n        int[] ans = new int[100001];\n\n        // -1 indicated the state has not been visited\n        Array.Fill(ans, -1);\n        const int mod = 100000;\n\n        // queue to store all possible states\n        Queue<int> q = new Queue<int>();\n\n        // initially push the start\n        q.Enqueue(start % mod);\n\n        // to reach start we require 0 steps\n        ans[start] = 0;\n\n        // till all states are visited\n        while (q.Count != 0)\n        {\n            // get the topmost element in the queue\n            int top = q.Peek();\n\n            // pop the topmost element\n            q.Dequeue();\n\n            // if the topmost element is end\n            if (top == end) return ans[end];\n\n            // perform multiplication with all array elements\n            for (int i = 0; i < arr.Count; i++)\n            {\n                int pushed = top * arr[i];\n                pushed = pushed % mod;\n\n                // if not visited, then push it to queue\n                if (ans[pushed] == -1)\n                {\n                    ans[pushed] = ans[top] + 1;\n                    q.Enqueue(pushed);\n                }\n            }\n        }\n\n        return -1;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    minimumMultiplications(arr, start, end) {\n        let ans = new Array(100001).fill(-1);\n        let mod = 100000;\n        let q = [];\n\n        q.push(start % mod);\n        ans[start] = 0;\n\n        while (q.length > 0) {\n            let top = q.shift();\n\n            if (top == end) {\n                return ans[end];\n            }\n\n            for (let i = 0; i < arr.length; i++) {\n                let pushed = top * arr[i];\n                pushed = pushed % mod;\n\n                if (ans[pushed] == -1) {\n                    ans[pushed] = ans[top] + 1;\n                    q.push(pushed);\n                }\n            }\n        }\n\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}