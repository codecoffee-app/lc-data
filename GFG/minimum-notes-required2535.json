{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704612,
            "title": "Minimum Notes Required",
            "titleSlug": "minimum-notes-required2535",
            "content": "<p><span style=\"font-size: 18px;\">An employee's wallet can contain no more than <strong>M </strong>notes or coins. A boss pays his salary by the minimum notes possible. However the employee may have to leave out some money. Find how much money he has to lose if his original salary is <strong>N</strong>.<br /><strong>Note</strong>: The values of notes or coins available are 1000, 500, 100, 50, 20, 10, 5, 2 and 1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>N = </strong>1712, <strong>M </strong>= 4</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">12</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">The boss will give him one 1000, one 500\nand two 100 notes, one note of 10 and\none of 2. But because the employee can't\nhave more notes than 4, he can have a\nmaximum amount of 1700.\nSo, he will lose 12.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>N = </strong>1023, <strong>M </strong>= 2</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">The boss will give him one 1000, one 20\none 2 and one note of 1. But because the\nemployee can't have more notes than 2,\nhe can have a maximum amount of 1020.\nSo, he will lose 3.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>getLoss()</strong> which takes 2 Integers N and M as input and returns the answer.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(1)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= N,M &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "An employee's wallet can hold a maximum of M notes or coins. A boss aims to pay an employee's salary, N, using the fewest possible notes. However, the employee might have to leave out some money to comply with the wallet's capacity. Determine the amount of money the employee has to leave out. Available denominations are: 1000, 500, 100, 50, 20, 10, 5, 2, and 1.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= M <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 1712, M = 4",
                        "output": "12",
                        "explanation": "The boss ideally pays with one 1000, one 500, two 100s, one 10, and one 2, totaling 6 notes. Since the wallet can only hold 4, the employee must prioritize the largest denominations (1000, 500, and two 100's), summing to 1700. Therefore, the employee loses 1712 - 1700 = 12."
                    },
                    {
                        "input": "N = 1023, M = 2",
                        "output": "3",
                        "explanation": "The boss's ideal payment is one 1000, one 20, one 2, and one 1, totaling 4 notes. With a wallet capacity of 2, the employee keeps 1000 and 20 totaling 1020. Hence, the loss is 1023 - 1020 = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">As, the boss pays the salary in minimum notes possible, so minimize the amount of notes by taking notes of larger values first.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    int getLoss(int N, int M) {\n        \n        int c = 0, n, d;\n        \n        // taking all 1000 notes possible\n        n = N/1000;\n        d = min(n,M);\n        c += d;\n        N -= d*1000;\n        M -= d;\n        \n        // taking all 500 notes possible\n        n = N/500;\n        d = min(n,M);\n        c += d;\n        N -= d*500;\n        M -= d;\n        \n        // taking all 100 notes possible\n        n = N/100;\n        d = min(n,M);\n        c += d;\n        N -= d*100;\n        M -= d;\n        \n        // taking all 50 notes possible\n        n = N/50;\n        d = min(n,M);\n        c += d;\n        N -= d*50;\n        M -= d;\n        \n        // taking all 20 notes possible\n        n = N/20;\n        d = min(n,M);\n        c += d;\n        N -= d*20;\n        M -= d;\n        \n        // taking all 10 notes possible\n        n = N/10;\n        d = min(n,M);\n        c += d;\n        N -= d*10;\n        M -= d;\n        \n        // taking all 5 notes possible\n        n = N/5;\n        d = min(n,M);\n        c += d;\n        N -= d*5;\n        M -= d;\n        \n        // taking all 2 notes possible\n        n = N/2;\n        d = min(n,M);\n        c += d;\n        N -= d*2;\n        M -= d;\n        \n        // taking all 1 notes possible\n        n = N;\n        d = min(n,M);\n        c += d;\n        N -= d;\n        M -= d;\n\n        return N;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    static int getLoss(int N, int M) {\n        \n        int c = 0, n, d;\n        \n        // taking all 1000 notes possible\n        n = N/1000;\n        d = Math.min(n,M);\n        c += d;\n        N -= d*1000;\n        M -= d;\n        \n        // taking all 500 notes possible\n        n = N/500;\n        d = Math.min(n,M);\n        c += d;\n        N -= d*500;\n        M -= d;\n        \n        // taking all 100 notes possible\n        n = N/100;\n        d = Math.min(n,M);\n        c += d;\n        N -= d*100;\n        M -= d;\n        \n        // taking all 50 notes possible\n        n = N/50;\n        d = Math.min(n,M);\n        c += d;\n        N -= d*50;\n        M -= d;\n        \n        // taking all 20 notes possible\n        n = N/20;\n        d = Math.min(n,M);\n        c += d;\n        N -= d*20;\n        M -= d;\n        \n        // taking all 10 notes possible\n        n = N/10;\n        d = Math.min(n,M);\n        c += d;\n        N -= d*10;\n        M -= d;\n        \n        // taking all 5 notes possible\n        n = N/5;\n        d = Math.min(n,M);\n        c += d;\n        N -= d*5;\n        M -= d;\n        \n        // taking all 2 notes possible\n        n = N/2;\n        d = Math.min(n,M);\n        c += d;\n        N -= d*2;\n        M -= d;\n        \n        // taking all 1 notes possible\n        n = N;\n        d = Math.min(n,M);\n        c += d;\n        N -= d;\n        M -= d;\n\n        return N;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#User function Template for Python\n\n\nclass Solution:\n\n    def getLoss(self, N, M):\n\n        c = 0\n\n        # taking all 1000 notes possible\n        n = N // 1000\n        d = min(n, M)\n        c += d\n        N -= d * 1000\n        M -= d\n\n        # taking all 500 notes possible\n        n = N // 500\n        d = min(n, M)\n        c += d\n        N -= d * 500\n        M -= d\n\n        # taking all 100 notes possible\n        n = N // 100\n        d = min(n, M)\n        c += d\n        N -= d * 100\n        M -= d\n\n        # taking all 50 notes possible\n        n = N // 50\n        d = min(n, M)\n        c += d\n        N -= d * 50\n        M -= d\n\n        # taking all 20 notes possible\n        n = N // 20\n        d = min(n, M)\n        c += d\n        N -= d * 20\n        M -= d\n\n        # taking all 10 notes possible\n        n = N // 10\n        d = min(n, M)\n        c += d\n        N -= d * 10\n        M -= d\n\n        # taking all 5 notes possible\n        n = N // 5\n        d = min(n, M)\n        c += d\n        N -= d * 5\n        M -= d\n\n        # taking all 2 notes possible\n        n = N // 2\n        d = min(n, M)\n        c += d\n        N -= d * 2\n        M -= d\n\n        # taking all 1 notes possible\n        n = N\n        d = min(n, M)\n        c += d\n        N -= d\n        M -= d\n\n        return N\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number} M\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to get the loss.\n    getLoss(N, M) {\n        let c = 0;\n        \n        // taking all 1000 notes possible\n        let n = Math.floor(N/1000);\n        let d = Math.min(n, M);\n        c += d;\n        N -= d*1000;\n        M -= d;\n        \n        // taking all 500 notes possible\n        n = Math.floor(N/500);\n        d = Math.min(n, M);\n        c += d;\n        N -= d*500;\n        M -= d;\n        \n        // taking all 100 notes possible\n        n = Math.floor(N/100);\n        d = Math.min(n, M);\n        c += d;\n        N -= d*100;\n        M -= d;\n        \n        // taking all 50 notes possible\n        n = Math.floor(N/50);\n        d = Math.min(n, M);\n        c += d;\n        N -= d*50;\n        M -= d;\n        \n        // taking all 20 notes possible\n        n = Math.floor(N/20);\n        d = Math.min(n, M);\n        c += d;\n        N -= d*20;\n        M -= d;\n        \n        // taking all 10 notes possible\n        n = Math.floor(N/10);\n        d = Math.min(n, M);\n        c += d;\n        N -= d*10;\n        M -= d;\n        \n        // taking all 5 notes possible\n        n = Math.floor(N/5);\n        d = Math.min(n, M);\n        c += d;\n        N -= d*5;\n        M -= d;\n        \n        // taking all 2 notes possible\n        n = Math.floor(N/2);\n        d = Math.min(n, M);\n        c += d;\n        N -= d*2;\n        M -= d;\n        \n        // taking all 1 notes possible\n        n = N;\n        d = Math.min(n, M);\n        c += d;\n        N -= d;\n        M -= d;\n\n        return N;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}