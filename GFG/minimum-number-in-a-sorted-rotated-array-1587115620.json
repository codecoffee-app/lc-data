{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701224,
            "title": "Minimum Number in a sorted rotated array",
            "titleSlug": "minimum-number-in-a-sorted-rotated-array-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of distinct elements which was initially sorted.&nbsp;This array may be rotated at some unknown point. The task is to find the minimum element in the given sorted and rotated array.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 10\narr[] = {2,3,4,5,6,7,8,9,10,1}\n<strong>Output: </strong>1<strong>\nExplanation: </strong>The array is rotated \nonce anti-clockwise. So minimum \nelement is at last index (n-1) \nwhich is 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 5\narr[] = {3,4,5,1,2}\n<strong>Output: </strong>1<strong>\nExplanation: </strong>The array is rotated \nand the minimum element present is\nat index (n-2) which is 1.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />The task is to complete the function <strong>minNumber</strong>() which takes the array arr[] and its starting and ending indices (low and high) as inputs and returns the minimum element in the given sorted and rotated array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>7</sup><br />1 &lt;= arr[i] &lt;= 10<sup>7</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array of distinct elements that has been rotated at an unknown pivot point, find the minimum element in the rotated array.",
                "constraints": [
                    "1 <= N <= 10^7",
                    "1 <= arr[i] <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "N = 10\narr[] = {2,3,4,5,6,7,8,9,10,1}",
                        "output": "1",
                        "explanation": "The array was rotated once anti-clockwise. The minimum element is at the last index."
                    },
                    {
                        "input": "N = 5\narr[] = {3,4,5,1,2}",
                        "output": "1",
                        "explanation": "The array was rotated, and the minimum element is present at the second to last index."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Binary Search</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\r\n\r\n\r\n//Function to find the minimum element in sorted and rotated array.\r\nint minNumber(int arr[], int low, int high)\r\n{\r\n    //when array is not rotated at all, we return first element.\r\n    if (high < low)  \r\n    return arr[0];\r\n    \r\n    //when both pointers become same, we return element at that pointer.\r\n    if (high == low) return arr[low];\r\n    \r\n\r\n    int mid = low + (high - low)/2; \r\n    \r\n    //if element at mid+1 is less than element at mid, we return \r\n    //element at mid+1 as it is minimum in the array.\r\n    if (mid < high && arr[mid+1] < arr[mid])\r\n       return arr[mid+1];\r\n       \r\n    //if element at mid is less than element at mid-1, we return \r\n    //element at mid as it is minimum in the array.\r\n    if (mid > low && arr[mid] < arr[mid - 1])\r\n       return arr[mid];\r\n       \r\n    //if element at high is greater than element at mid, the minimum element is\r\n    //present in left half so calling function recursively for the left half.\r\n    if (arr[high] > arr[mid])\r\n       return minNumber(arr, low, mid-1);\r\n       \r\n    //else the minimum element is present in right half so calling\r\n    //function recursively for right half.\r\n    return minNumber(arr, mid+1, high);\r\n}  ",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n    public:\r\n    //Function to find the minimum element in sorted and rotated array.\r\n    int minNumber(int arr[], int low, int high)\r\n    {\r\n        //when array is not rotated at all, we return first element.\r\n        if (high < low)  \r\n            return arr[0];\r\n        \r\n        //when both pointers become same, we return element at that pointer.\r\n        if (high == low) \r\n            return arr[low];\r\n        \r\n        \r\n        int mid = low + (high - low)/2; \r\n        \r\n        //if element at mid+1 is less than element at mid, we return \r\n        //element at mid+1 as it is minimum in the array.\r\n        if (mid < high && arr[mid+1] < arr[mid])\r\n           return arr[mid+1];\r\n          \r\n        //if element at mid is less than element at mid-1, we return \r\n        //element at mid as it is minimum in the array.\r\n        if (mid > low && arr[mid] < arr[mid - 1])\r\n           return arr[mid];\r\n           \r\n        //if element at high is greater than element at mid, minimum element is\r\n        //present in left half so calling function recursively for left half.\r\n        if (arr[high] > arr[mid])\r\n           return minNumber(arr, low, mid-1);\r\n           \r\n        //else the minimum element is present in right half so calling\r\n        //function recursively for right half.\r\n        return minNumber(arr, mid+1, high);\r\n    }  \r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    //Function to find the minimum element in sorted and rotated array.\r\n    static int minNumber(int arr[], int low, int high)\r\n    {\r\n        //when array is not rotated at all, we return first element.\r\n        if (high < low)  \r\n           return arr[0];\r\n           \r\n        //when both pointers become same, we return element at that pointer.\r\n        if (high == low) \r\n           return arr[(int)low];\r\n           \r\n        int mid = low + (high - low)/2; \r\n        \r\n        //if element at mid+1 is less than element at mid, we return \r\n        //element at mid+1 as it is minimum in the array.\r\n        if (mid < high && arr[mid+1] < arr[mid])\r\n         return arr[mid+1];\r\n         \r\n        //if element at mid is less than element at mid-1, we return \r\n        //element at mid as it is minimum in the array.\r\n        if (mid > low && arr[mid] < arr[mid - 1])\r\n            return arr[mid];\r\n        \r\n        //if element at high is greater than element at mid, minimum element is\r\n        //present in left half so calling function recursively for left half.\r\n        if (arr[high] > arr[mid])\r\n            return minNumber(arr, low, mid-1);\r\n        \r\n        //else the minimum element is present in right half so calling\r\n        //function recursively for right half.\r\n        return minNumber(arr, mid+1, high);\r\n    }\r\n    \r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    def findMin(self, arr, low, high):\r\n        \r\n        #when array is not rotated at all, we return first element.\r\n        if high < low: \r\n            return arr[0] \r\n      \r\n        #when both pointers become same, we return element at that pointer.\r\n        if high == low: \r\n            return arr[low] \r\n      \r\n        mid = int((low + high)/2) \r\n      \r\n        #if element at mid+1 is less than element at mid, we return \r\n    \t#element at mid+1 as it is minimum in the array.\r\n        if mid < high and arr[mid+1] < arr[mid]: \r\n            return arr[mid+1] \r\n      \r\n        #if element at mid is less than element at mid-1, we return \r\n    \t#element at mid as it is minimum in the array.\r\n        if mid > low and arr[mid] < arr[mid - 1]: \r\n            return arr[mid] \r\n      \r\n        #if element at high is greater than element at mid, the minimum element is\r\n    \t#present in left half so calling function recursively for the left half.\r\n        if arr[high] > arr[mid]: \r\n            return self.findMin(arr, low, mid-1) \r\n            \r\n        #else the minimum element is present in right half so calling\r\n    \t#function recursively for right half.\r\n        return self.findMin(arr, mid+1, high) \r\n    \r\n    \r\n    #Function to find the minimum element in sorted and rotated array.    \r\n    def minNumber(self, arr,low,high):\r\n        \r\n        return self.findMin(arr,low,high)\r\n        \r\n        \r\n        ",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the minimum element in sorted and rotated array.\n    public int minNumber(int[] arr, int low, int high)\n    {\n        //when array is not rotated at all, we return first element.\n        if (high < low)  \n            return arr[0];\n        \n        //when both pointers become same, we return element at that pointer.\n        if (high == low) \n            return arr[low];\n        \n        \n        int mid = low + (high - low)/2; \n        \n        //if element at mid+1 is less than element at mid, we return \n        //element at mid+1 as it is minimum in the array.\n        if (mid < high && arr[mid+1] < arr[mid])\n            return arr[mid+1];\n          \n        //if element at mid is less than element at mid-1, we return \n        //element at mid as it is minimum in the array.\n        if (mid > low && arr[mid] < arr[mid - 1])\n            return arr[mid];\n           \n        //if element at high is greater than element at mid, minimum element is\n        //present in left half so calling function recursively for left half.\n        if (arr[high] > arr[mid])\n            return minNumber(arr, low, mid-1);\n           \n        //else the minimum element is present in right half so calling\n        //function recursively for right half.\n        return minNumber(arr, mid+1, high);\n    }  \n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {number[]} arr\r\n * @param {number} low\r\n * @param {number} high\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution\r\n{\r\n    //Function to find the minimum element in sorted and rotated array.\r\n    minNumber(arr, low, high)\r\n    {\r\n        //when array is not rotated at all, we return first element.\r\n        if (high < low)  \r\n            return arr[0];\r\n        \r\n        //when both pointers become same, we return element at that pointer.\r\n        if (high == low) \r\n            return arr[low];\r\n            \r\n        let mid = low + Math.floor((high - low)/2); \r\n        \r\n        //if element at mid+1 is less than element at mid, we return \r\n        //element at mid+1 as it is minimum in the array.\r\n        if (mid < high && arr[mid+1] < arr[mid])\r\n           return arr[mid+1];\r\n          \r\n        //if element at mid is less than element at mid-1, we return \r\n        //element at mid as it is minimum in the array.\r\n        if (mid > low && arr[mid] < arr[mid - 1])\r\n           return arr[mid];\r\n           \r\n        //if element at high is greater than element at mid, minimum element is\r\n    \t//present in left half so calling function recursively for left half.\r\n        if (arr[high] > arr[mid])\r\n           return this.minNumber(arr, low, mid-1);\r\n           \r\n        //else the minimum element is present in right half so calling\r\n    \t//function recursively for right half.\r\n        return this.minNumber(arr, mid+1, high);\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}