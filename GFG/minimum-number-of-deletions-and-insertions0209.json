{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704022,
            "title": "Minimum number of deletions and insertions",
            "titleSlug": "minimum-number-of-deletions-and-insertions0209",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings <strong>s1</strong> and <strong>s2</strong>. The task is to <strong>remove or insert</strong> the <strong>minimum</strong> <strong>number</strong> of characters from/in <strong>s1</strong> to transform it into <strong>s2</strong>. It could be possible that the same character needs to be removed from one point of <strong>s1</strong> and inserted into another point.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s1 = \"heap\", s2 = \"pea\"\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>'</span><span style=\"font-size: 18px;\">p'</span><span style=\"font-size: 18px;\"> and 'h' deleted from <strong>h</strong>ea<strong>p</strong>. Then, 'p' is inserted at the beginning.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input : </strong>s1 = \"geeksforgeeks\", s2 = \"geeks\"\n<strong>Output: </strong>8\n<strong>Explanation: </strong>8 deletions, i.e. remove all characters of the string \"forgeeks\".</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; s1.size(), s2.size() &le; 1000</span><br /><span style=\"font-size: 18px;\">All the characters are lowercase English alphabets.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, determine the minimum number of insertions and deletions required to transform `s1` into `s2`. This may involve removing characters from `s1` and inserting characters into `s1` to match `s2`.",
                "constraints": [
                    "1 <= s1.size(), s2.size() <= 1000",
                    "All characters are lowercase English alphabets."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"heap\", s2 = \"pea\"",
                        "output": "3",
                        "explanation": "To transform \"heap\" into \"pea\", we can delete 'h' and 'p' from \"heap\" and insert 'p' at the beginning of \"ea\", requiring 3 operations in total (2 deletions, 1 insertion)."
                    },
                    {
                        "input": "s1 = \"geeksforgeeks\", s2 = \"geeks\"",
                        "output": "8",
                        "explanation": "To transform \"geeksforgeeks\" into \"geeks\", we must delete the substring \"forgeeks\", requiring 8 deletions."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think to use the longest common subsequence of both strings.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minOperations(string &s1, string &s2) {\n        int m = s1.size();\n        int n = s2.size();\n\n        int L[m + 1][n + 1];\n        int i, j;\n\n        // Following steps build L[m+1][n+1] in bottom\n        // up fashion. Note that L[i][j] contains\n        // length of LCS of s1[0..i-1] and s2[0..j-1]\n        for (i = 0; i <= m; i++) {\n            for (j = 0; j <= n; j++) {\n                if (i == 0 || j == 0)\n                    L[i][j] = 0;\n\n                else if (s1.at(i - 1) == s2.at(j - 1))\n                    L[i][j] = L[i - 1][j - 1] + 1;\n\n                else\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1]);\n            }\n        }\n\n        // L[m][n] contains length of LCS\n        // for X[0..n-1] and Y[0..m-1]\n        return m + n - 2 * L[m][n];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    public int minOperations(String s1, String s2) {\n        // Your code goes here\n        int m = s1.length();\n        int n = s2.length();\n        int L[][] = new int[m + 1][n + 1];\n        int i, j;\n\n        // Following steps build L[m+1][n+1] in\n        // bottom up fashion. Note that L[i][j]\n        // contains length of LCS of str1[0..i-1]\n        // and str2[0..j-1]\n        for (i = 0; i <= m; i++) {\n            for (j = 0; j <= n; j++) {\n                if (i == 0 || j == 0)\n                    L[i][j] = 0;\n\n                else if (s1.charAt(i - 1) == s2.charAt(j - 1))\n                    L[i][j] = L[i - 1][j - 1] + 1;\n\n                else\n                    L[i][j] = Math.max(L[i - 1][j], L[i][j - 1]);\n            }\n        }\n\n        // L[m][n] contains length of LCS\n        // for X[0..n-1] and Y[0..m-1]\n        return m + n - 2 * L[m][n];\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minOperations(self, s1, s2):\n        m = len(s1)  #length of string str1\n        n = len(s2)  #length of string str2\n\n        #creating a 2D array dp of size (m+1) x (n+1)\n        #dp[i][j] represents the length of the longest common subsequence\n        #of the substrings str1[0:i] and str2[0:j]\n        dp = [[0 for i in range(n + 1)] for i in range(m + 1)]\n\n        #iterating through all the substrings of s1 and s2\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if (s1[i - 1] == s2[j -\n                                    1]):  #if the current characters are equal\n                    dp[i][j] = 1 + dp[i -\n                                      1][j -\n                                         1]  #incrementing the length of LCS\n                else:\n                    dp[i][j] = max(\n                        dp[i - 1][j], dp[i][j - 1]\n                    )  #taking the maximum of the lengths of LCSs of substrings without the current characters\n\n        lcslen = dp[m][\n            n]  #length of the longest common subsequence of s1 and s2\n\n        delete = m - lcslen  #number of deletions required to make s1 equal to s2\n        insert = n - lcslen  #number of insertions required to make s1 equal to s2\n\n        return delete + insert  #returning the total number of operations (deletions + insertions) required to make s1 equal to s2\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {string} s1\n * @param {string} s2\n * @return {number}\n */\nclass Solution {\n    minOperations(s1, s2) {\n        let m = s1.length;\n        let n = s2.length;\n\n        let L = [];\n        for (let i = 0; i <= m; i++) {\n            L[i] = [];\n            for (let j = 0; j <= n; j++) {\n                L[i][j] = 0;\n            }\n        }\n\n        for (let i = 0; i <= m; i++) {\n            for (let j = 0; j <= n; j++) {\n                if (i == 0 || j == 0) {\n                    L[i][j] = 0;\n                } else if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                    L[i][j] = L[i - 1][j - 1] + 1;\n                } else {\n                    L[i][j] = Math.max(L[i - 1][j], L[i][j - 1]);\n                }\n            }\n        }\n\n        return m + n - 2 * L[m][n];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}