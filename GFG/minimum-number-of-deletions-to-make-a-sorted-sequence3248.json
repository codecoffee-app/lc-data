{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704021,
            "title": "Minimum number of deletions to make a sorted sequence",
            "titleSlug": "minimum-number-of-deletions-to-make-a-sorted-sequence3248",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong> of size <strong>N</strong>, the task is to remove or delete the minimum number of elements from the array so that when the remaining elements are placed in the same sequence order form an <strong>increasing sorted sequence</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: N = 5, arr[] = {5, 6, 1, 7, 4}\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: Removing <strong>1</strong> and <strong>4</strong>\nleaves the remaining sequence order as\n<strong>5 6 7</strong> which is a sorted sequence.</span></pre>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 3, arr[] = {1, 1, 1}\n<strong>Output: </strong>2\n<strong>Explanation</strong>: Remove 2 1's\n</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>minDeletions</code>()&nbsp;</strong>which takes <strong>N</strong> and array <strong>arr </strong>as input parameters and returns the integer value<br /><br /><strong>Expected Time Complexity:</strong> O(<strong>N<sup>2</sup></strong>)<br /><strong>Expected Auxiliary Space:</strong> O(<strong>N</strong>)<br /><br /><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `N`, determine the minimum number of elements that must be removed from the array so that the remaining elements form an increasing sorted sequence, maintaining their original order.",
                "constraints": [
                    "1 \u2264 N \u2264 10^3"
                ],
                "testcases": [
                    {
                        "input": "N = 5, arr[] = {5, 6, 1, 7, 4}",
                        "output": "2",
                        "explanation": "Removing the elements 1 and 4 leaves the sequence 5, 6, 7, which is an increasing sorted sequence. This requires removing only 2 elements."
                    },
                    {
                        "input": "N = 3, arr[] = {1, 1, 1}",
                        "output": "2",
                        "explanation": "Removing two of the 1's leaves a sequence of length 1 which is inherently sorted. Thus the minimum number of deletions required is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Algorithm:</strong></p>\n\n<pre>\n--&gt;<strong>arr</strong> be the given array.\n--&gt;<strong>n</strong> number of elements in <strong>arr</strong>.\n--&gt;<strong>len</strong> be the length of longest\n   increasing subsequence in <strong>arr</strong>.\n--&gt;// minimum number of deletions\n   <strong>min</strong> = n - len\n</pre>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n\t\t\n\n\tpublic:\n\tint minDeletions(int arr[], int n) \n\t{ \n\t    int result = 0; \n\t    int lis[n]; \n\t  \n\t    /* Initialize LIS values \n\t    for all indexes */\n\t    for (int i = 0; i < n; i++ ) \n\t        lis[i] = 1; \n\t  \n\t    /* Compute optimized LIS  \n\t       values in bottom up manner */\n\t    for (int i = 1; i < n; i++ ) \n\t        for (int j = 0; j < i; j++ ) \n\t            if ( arr[i] > arr[j] && \n\t                 lis[i] < lis[j] + 1) \n\t            lis[i] = lis[j] + 1; \n\t  \n\t    //  Pick resultimum  \n\t    // of all LIS values \n\t    for (int i = 0; i < n; i++ ) \n\t        if (result < lis[i]) \n\t            result = lis[i]; \n\t  \t\n\t  \t// After removing elements  \n\t    // other than the lis, we  \n\t    // get sorted sequence. \n\t    return n - result; \n\t} \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n\tpublic int minDeletions(int arr[], int n) \n\t{ \n\t    int result = 0; \n\t    int lis[] = new int[n] ; \n\t  \n\t    /* Initialize LIS values \n\t    for all indexes */\n\t    for (int i = 0; i < n; i++ ) \n\t        lis[i] = 1; \n\t  \n\t    /* Compute optimized LIS  \n\t       values in bottom up manner */\n\t    for (int i = 1; i < n; i++ ) \n\t        for (int j = 0; j < i; j++ ) \n\t            if ( arr[i] > arr[j] && \n\t                 lis[i] < lis[j] + 1) \n\t            lis[i] = lis[j] + 1; \n\t  \n\t    //  Pick resultimum  \n\t    // of all LIS values \n\t    for (int i = 0; i < n; i++ ) \n\t        if (result < lis[i]) \n\t            result = lis[i]; \n\t  \t\n\t  \t// After removing elements  \n\t    // other than the lis, we  \n\t    // get sorted sequence. \n\t    return n - result; \n\t} \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minDeletions(self, arr, n):\n        lst = [1] * n\n        for i in range(len(arr) - 1, -1, -1):\n            for j in range(i + 1, len(arr)):\n                if arr[i] < arr[j]:\n                    lst[i] = max(lst[i], 1 + lst[j])\n        return n - max(lst)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    public int minDeletions(int[] arr, int n)\n    {\n        int result = 0;\n        int[] lis = new int[n];\n      \n        /* Initialize LIS values \n        for all indexes */\n        for (int i = 0; i < n; i++ )\n            lis[i] = 1;\n      \n        /* Compute optimized LIS  \n           values in bottom up manner */\n        for (int i = 1; i < n; i++ )\n            for (int j = 0; j < i; j++ )\n                if ( arr[i] > arr[j] && \n                     lis[i] < lis[j] + 1)\n                lis[i] = lis[j] + 1;\n      \n        //  Pick resultimum  \n        // of all LIS values \n        for (int i = 0; i < n; i++ )\n            if (result < lis[i])\n                result = lis[i];\n      \n        // After removing elements  \n        // other than the lis, we  \n        // get sorted sequence. \n        return n - result;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution{\n    minDeletions(arr,n){\n        let result = 0;\n        let lis = new Array(n).fill(1);\n        \n        for(let i=1; i<n; i++) {\n            for(let j=0; j<i; j++) {\n                if(arr[i] > arr[j] && lis[i] < lis[j] + 1) {\n                    lis[i] = lis[j] + 1;\n                }\n            }\n        }\n        \n        for(let i=0; i<n; i++) {\n            if(result < lis[i]) {\n                result = lis[i];\n            }\n        }\n        \n        return n - result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}