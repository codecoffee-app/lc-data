{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704113,
            "title": "Minimum number of elements",
            "titleSlug": "minimum-number-of-elements-which-are-not-part-of-increasing-or-decreasing-subsequence2617",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr </strong>of size<strong> N</strong>, the task is to make strictly increasing and strictly decreasing subsequences from the array such that each array element belongs to increasing subsequence or decreasing subsequence, but not both, or can be part of none of the subsequence. Minimize the number of elements that are not part of any of the subsequences and find the count of such elements.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: N = 12, arr[] = {7, 8, 1, 2, 4,\n\\t\\t     6, 3, 5, 2, 1, 8, 7}\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: </span>\n<span style=\"font-size:18px\">Increasing sequence can be :\n\\t     {1, 2, 4, 5, 8}.\nDecreasing sequence can be :\n\\t     {7, 6, 3, 2, 1}.\nSo, only 2 (8, 7) elements are left \nwhich are not part of either of \nthe subsequences<strong>.</strong></span></pre>\n\n<div><span style=\"font-size:18px\"><strong>Example 2:</strong></span></div>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 7, arr[] = {1, 4, 2, 3, \n\\t\\t\\t     3, 2, 4}\n<strong>Output: </strong>0\n<strong>Explanation</strong>: \nIncreasing sequence can be :\n\\t\\t{1, 2, 3, 4}. \nDecreasing sequence can be :\n\\t\\t {4, 3, 2}.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Complete the function <strong><code>minCount</code>()&nbsp;</strong>which takes <strong>N</strong> and array <strong>arr </strong>as input parameters and returns the integer value<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(<strong>N<sup>3</sup></strong>)<br />\n<strong>Expected Auxiliary Space:</strong> O(<strong>N<sup>3</sup></strong>)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>2</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>The idea is to make a decision on each index, starting from index 0, one by one. For each index there can be three possibilities, first, it can belong to increasing sequence, second, it can belong to decreasing sequence, third, it does not belong to any of these sequences.<br />\nSo, for each index, check for the optimal answer (the minimum element which is not part of any of the subsequences) by considering it once as a part of increasing subsequence or as a part of decreasing subsequence. If the optimal answer cannot be achieved by them then leave it as the element which is not part of any of the sequence.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n\t\t\n\tprivate:\n\tint countMinUtil(int arr[], vector<vector<vector<int>>> &dp, int n, int dec, \n                                            int inc, int i) \n\t{ \n\t  \n\t    // If whole array is traversed. \n\t    if (i == n) \n\t        return 0; \n\n\t    // If already calculated, return value. \n\t    if (dp[dec][inc][i] != -1) \n\t        return dp[dec][inc][i]; \n\t  \n\t    // calculating by considering element as part of \n\t    // decreasing sequence. \n\t    if (arr[i] < arr[dec]) \n\t        dp[dec][inc][i] = countMinUtil(arr, dp, n, i, inc, i + 1); \n\t  \n\t    // calculating by considering element as part of \n\t    // increasing sequence. \n\t    if (arr[i] > arr[inc]) \n\t    { \n\t        // If cannot be calculated for decreasing sequence. \n\t        if (dp[dec][inc][i] == -1) \n\t            dp[dec][inc][i] = countMinUtil(arr, dp, n, dec, i, i + 1); \n\t  \n\t        // After considering once by decreasing sequence, now try \n\t        // for increasing sequence. \n\t        else\n\t            dp[dec][inc][i] = min(countMinUtil(arr, dp, n, dec, i, i + 1), \n\t                                                  dp[dec][inc][i]); \n\t    } \n\t  \n\t    // If element cannot be part of any of the sequence. \n\t    if (dp[dec][inc][i] == -1) \n\t        dp[dec][inc][i] = 1 + countMinUtil(arr, dp, n, dec, inc, i + 1); \n\t  \n\t    // After considering element as part of increasing and \n\t    // decreasing sequence trying as not part of any of the \n\t    // sequence. \n\t    else\n\t        dp[dec][inc][i] = min(1 + countMinUtil(arr, dp, n, dec, inc, i + 1), \n\t                                                    dp[dec][inc][i]); \n\t  \n\t    return dp[dec][inc][i]; \n\t} \n\n\tpublic:\n\tint minCount(int arr[], int N) \n\t{ \n\n\t\t// Adding two number at the end of array, so that \n\t    // increasing and decreasing sequence can be made. \n\t    // MAX - 2 index is assigned INT_MAX for decreasing sequence \n\t    // because/ next number of sequence must be less than it. \n\t    // Similarly, for Increasing sequence INT_MIN is assigned to \n\t    // MAX - 1 index. \n\n\t    int a[N+2];\n\t    for(int i = 0; i < N; i++)\n\t    \ta[i] = arr[i];\n\n\t    a[N] = INT_MAX; \n\t    a[N+1] = INT_MIN; \n\n\t    N += 2;\n\t  \n\t    vector<vector<vector<int>>> dp(N, vector<vector<int>>(N, vector<int>(N, -1)));\n\t  \n\t    return countMinUtil(a, dp, N, N - 2, N - 1, 0); \n\t} \n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find the minimum number of elements to be removed.\n    public int minCount(int[] arr, int N)\n    {\n        int[] a = new int[N+2];\n        for(int i = 0; i < N; i++)\n            a[i] = arr[i];\n        \n        a[N] = int.MaxValue; \n        a[N+1] = int.MinValue; \n\n        N += 2;\n\n        int[][][] dp = new int[N][][];\n        for(int dec = 0; dec < N; dec++){\n            dp[dec] = new int[N][];\n            for(int inc = 0; inc < N; inc++){\n                dp[dec][inc] = new int[N];\n                for(int i = 0; i < N; i++){\n                    dp[dec][inc][i] = -1;\n                }\n            }\n        }\n        \n        return countMinUtil(a, dp, N, N - 2, N - 1, 0); \n    }\n\n    private int countMinUtil(int[] arr, int[][][] dp, int n, int dec, \n                              int inc, int i) \n    { \n\n        // If whole array is traversed. \n        if (i == n) \n            return 0; \n\n        // If already calculated, return value. \n        if (dp[dec][inc][i] != -1) \n            return dp[dec][inc][i]; \n\n        // calculating by considering element as part of \n        // decreasing sequence. \n        if (arr[i] < arr[dec]) \n            dp[dec][inc][i] = countMinUtil(arr, dp, n, i, inc, i + 1); \n\n        // calculating by considering element as part of \n        // increasing sequence. \n        if (arr[i] > arr[inc]) \n        { \n            // If cannot be calculated for decreasing sequence. \n            if (dp[dec][inc][i] == -1) \n                dp[dec][inc][i] = countMinUtil(arr, dp, n, dec, i, i + 1); \n\n            // After considering once by decreasing sequence, now try \n            // for increasing sequence. \n            else\n                dp[dec][inc][i] = Math.Min(countMinUtil(arr, dp, n, dec, i, i + 1), \n                                                  dp[dec][inc][i]); \n        } \n\n        // If element cannot be part of any of the sequence. \n        if (dp[dec][inc][i] == -1) \n            dp[dec][inc][i] = 1 + countMinUtil(arr, dp, n, dec, inc, i + 1); \n\n        // After considering element as part of increasing and \n        // decreasing sequence trying as not part of any of the \n        // sequence. \n        else\n            dp[dec][inc][i] = Math.Min(1 + countMinUtil(arr, dp, n, dec, inc, i + 1), \n                                                    dp[dec][inc][i]); \n\n        return dp[dec][inc][i]; \n    } \n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}