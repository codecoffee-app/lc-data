{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 889108,
            "title": "Minimum K Consecutive Bit Flips",
            "titleSlug": "minimum-number-of-k-consecutive-bit-flips--171650",
            "content": "<p><span >Given a binary array <strong>arr[]</strong> and an integer <strong>k</strong>.</span></p>\n<p><span >A <strong>k-bit flip</strong> involves selecting a contiguous subarray of length <strong>k </strong>from <strong>arr[] </strong>and flipping all its bits - changing every 0 to 1 and every 1 to 0 simultaneously.</span></p>\n<p><span >Your task is to return the minimum number of k-bit flips needed to eliminate all 0s from the array. If it is impossible to achieve, return -1.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>arr[] = [0, 1, 0], k = 1<strong>\nOutput: </strong>2<strong>\nExplanation: </strong>Flip arr[0], then flip arr[2].</span></pre>\n<pre><span ><strong>Input:</strong> arr = [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], k = 2</span><br /><span ><strong>Output:</strong> 4 </span><br /><span ><strong >Explanation:</strong><span > It requires 4 operations to change the whole array with 1.<br />Select subarray [2, 3] and flip all bits resulting array will be [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1]<br /></span>Select subarray [4, 5] and flip all bits resulting array will be [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1]<br />Select subarray [5, 6] and flip all bits resulting array will be [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1]<br />Select subarray [6, 7] and flip all bits resulting array will be [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span></pre>\n<pre><span ><strong>Input:</strong> arr = [0, 0, 1, 1, 1, 0, 0], k = 3</span><br /><span ><strong>Output:</strong> -1</span><br /><span ><strong>Explanation:</strong> It is not possible to make above array all 1's by performing any number of the steps.</span></pre>\n<p><span ><strong>Constraints:</strong></span></p>\n<p><span >1 &lt;= arr.size() &lt;=&nbsp;</span><span style=\"font-size: 20px;\">10</span><sup>5</sup><br /><span >1 &lt;= k &lt;= arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary array `arr[]` and an integer `k`. A k-bit flip involves selecting a contiguous subarray of length `k` from `arr[]` and flipping all its bits (changing every 0 to 1 and every 1 to 0 simultaneously).  Return the minimum number of k-bit flips needed to eliminate all 0s from the array. If it is impossible to achieve, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 100000",
                    "1 <= k <= arr.size()"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [0, 1, 0], k = 1",
                        "output": "2",
                        "explanation": "Flipping arr[0] and then arr[2] results in all 1s."
                    },
                    {
                        "input": "arr = [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], k = 2",
                        "output": "4",
                        "explanation": "Four operations are required. Select subarray [2, 3], [4, 5], [5, 6], and [6, 7] to flip, resulting in all 1s."
                    },
                    {
                        "input": "arr = [0, 0, 1, 1, 1, 0, 0], k = 3",
                        "output": "-1",
                        "explanation": "It is not possible to make the array all 1s."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Queue",
                "slug": "queue"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int kBitFlips(vector<int>& arr, int k) {\n        int n = arr.size();\n        int res = 0, flag = 0;\n        queue<int> q;\n\n        for (int i = 0; i < n; i++) {\n\n            if (i >= k) {\n                flag ^= q.front();\n                q.pop();\n            }\n\n            // If flag = 1, then flip the current index\n            if (flag == 1)\n                arr[i] ^= 1;\n\n            // Finally, if arr[i] = 0, then we need to flip\n            if (arr[i] == 0) {\n\n                // Check if k elements are left\n                if (i + k > n)\n                    return -1;\n\n                res += 1;\n\n                // Flip flag so that upcoming elements are also flipped\n                flag ^= 1;\n\n                // If we flip, push 1 to the queue\n                q.push(1);\n            } else {\n\n                // If we don't flip, push 0 to queue\n                q.push(0);\n            }\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    static int kBitFlips(int[] arr, int k) {\n        int n = arr.length;\n        int res = 0, flag = 0;\n        Queue<Integer> q = new LinkedList<>();\n\n        for (int i = 0; i < n; i++) {\n\n            if (i >= k) flag ^= q.poll();\n\n            // If flag = 1, then flip the current index\n            if (flag == 1) arr[i] ^= 1;\n\n            // Finally, if arr[i] = 0, then we need to flip\n            if (arr[i] == 0) {\n\n                // Check if k elements are left\n                if (i + k > n) return -1;\n\n                res += 1;\n\n                // Flip flag so that upcoming elements are also flipped\n                flag ^= 1;\n\n                // If we flip, push 1 to the queue\n                q.offer(1);\n            } else {\n\n                // If we don't flip, push 0 to queue\n                q.offer(0);\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nfrom collections import deque\n\n\nclass Solution:\n\n    def kBitFlips(self, arr, k):\n        n = len(arr)\n        res = 0\n        flag = 0\n        q = deque()\n\n        for i in range(n):\n            if i >= k:\n                flag ^= q.popleft()\n\n            # If flag = 1, then flip the current index\n            if flag == 1:\n                arr[i] ^= 1\n\n            # Finally, if arr[i] = 0, then we need to flip\n            if arr[i] == 0:\n\n                # Check if k elements are left\n                if i + k > n:\n                    return -1\n\n                res += 1\n\n                # Flip flag so that upcoming elements are also flipped\n                flag ^= 1\n\n                # If we flip, push 1 to the queue\n                q.append(1)\n            else:\n\n                # If we don't flip, push 0 to queue\n                q.append(0)\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    kBitFlips(arr, k) {\n        let n = arr.length;\n        let res = 0, flag = 0;\n        let q = [];\n\n        for (let i = 0; i < n; i++) {\n            if (i >= k) {\n                flag ^= q.shift();\n            }\n\n            // If flag = 1, then flip the current index\n            if (flag === 1) arr[i] ^= 1;\n\n            // Finally, if arr[i] = 0, then we need to flip\n            if (arr[i] === 0) {\n                // Check if k elements are left\n                if (i + k > n) return -1;\n\n                res += 1;\n\n                // Flip flag so that upcoming elements are also flipped\n                flag ^= 1;\n\n                // If we flip, push 1 to the queue\n                q.push(1);\n            } else {\n                // If we don't flip, push 0 to queue\n                q.push(0);\n            }\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}