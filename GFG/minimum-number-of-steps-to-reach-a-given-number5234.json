{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704560,
            "title": "Minimum steps to destination",
            "titleSlug": "minimum-number-of-steps-to-reach-a-given-number5234",
            "content": "<p><span style=\"font-size: 18px;\">Given an infinite number&nbsp;line. You start at 0 and can go either to the left or to the right. The condition is that in the&nbsp;<strong>i<sup>th</sup></strong> move, you must take <strong>i</strong> steps. Given a destination<strong> d</strong>, find&nbsp;the <strong>minimum</strong> number of steps required to reach that destination.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> d = 2\n<strong>Output:</strong> 3\n<strong>Explaination:</strong> The steps taken are +1, -2 and +3.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> d = 10\n<strong>Output:</strong> 4\n<strong>Explaination:</strong> The steps taken are +1, +2, +3 and +4.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>minSteps()</strong> which takes the value d as input parameter and returns the minimum number of steps required to reach the destination d from 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(sqrt(d))<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; d &le; 10000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are positioned at 0 on an infinite number line.  Your goal is to reach a destination *d*.  In each move *i*, you must take exactly *i* steps, moving either left or right.  Determine the minimum number of moves needed to arrive at destination *d*.",
                "constraints": [
                    "1 <= d <= 10000"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "3",
                        "explanation": "One possible sequence of moves is +1, -2, and +3, resulting in 1 - 2 + 3 = 2. Therefore, the minimum number of steps to reach 2 from 0 is 3."
                    },
                    {
                        "input": "10",
                        "output": "4",
                        "explanation": "One possible sequence of moves is +1, +2, +3, and +4, resulting in 1 + 2 + 3 + 4 = 10. Therefore, the minimum number of steps to reach 10 from 0 is 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Notice if sum of steps reaches target or the difference between sum of steps and target is divisible by 2 then only that much steps are enough to reach target.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "inmobi"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the minimum number of steps required\n    int minSteps(int d) {\n        int target = abs(d), sum = 0, step = 0;\n\n        // Execute the loop until the sum is less than the target or the difference\n        // between the sum and target is not even\n        while (sum < target || (sum - target) % 2 != 0) {\n            // Increment the step count and add it to the sum\n            step++;\n            sum += step;\n        }\n        // Return the final step count\n        return step;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static int minSteps(int d) {\n        int target = Math.abs(d);\n        int sum = 0;\n        int step = 0;\n\n        // Execute the loop until the sum is less than the target or the difference\n        // between the sum and target is not even\n        while (sum < target || (sum - target) % 2 != 0) {\n            // Increment the step count and add it to the sum\n            step++;\n            sum += step;\n        }\n        // Return the final step count\n        return step;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def minSteps(self, d):\n\n        # Finding the absolute value of target distance\n        target = abs(d)\n        sum = 0\n        step = 0\n\n        # Loop until the sum reaches the target distance or the difference between sum and target is not even\n        while (sum < target or (sum - target) % 2 != 0):\n            step += 1\n            sum += step\n\n        # Return the number of steps taken\n        return step\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number} d\n * @returns {number}\n */\n\nclass Solution {\n    minSteps(d) {\n        let target = Math.abs(d);\n        let sum = 0;\n        let step = 0;\n\n        while (sum < target || (sum - target) % 2 != 0) {\n            step++;\n            sum += step;\n        }\n        return step;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}