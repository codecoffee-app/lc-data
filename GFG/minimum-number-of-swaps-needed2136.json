{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702861,
            "title": "Minimum number of swaps needed ",
            "titleSlug": "minimum-number-of-swaps-needed2136",
            "content": "<div><span style=\"font-size:18px\">Given an array <strong>arr[]</strong> of size <strong>N</strong> of non negative integers. We can perform a swap operation on any two adjacent elements in the array. The task is to find the minimum number of swaps needed to sort the array in non - decreasing order. </span></div>\n\n<div>&nbsp;</div>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong> </span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 4<span style=\"font-size:18px\">\narr[] = {4, 1, 2, 3}\n</span><span style=\"font-size:18px\"><strong>Output:</strong> 3\n<strong>Explanation</strong>: </span></span><span style=\"font-size:20px\">(4,1,2,3) -&gt; (1,4,2,3) -&gt; \n(1,2,4,3) -&gt; (1,2,3,4). Hence we need \na total of 3 swaps to sort it in \nnon - decreasing order.</span></pre>\n\n<p><span style=\"font-size:18px\"><span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong> </span></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><span style=\"font-size:18px\"><strong>Input</strong>: <span style=\"font-size:18px\">\nN = 4\narr[] = {4, 4, 2, 3}\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: </span></span></span><span style=\"font-size:20px\">(4,4,2,3) -&gt; (4,2,4,3) -&gt;\n(4,2,3,4) -&gt; (2,4,3,4) -&gt; (2,3,4,4,).\nHence we need a total of 4 swap to \nsort it in increasing order.</span></pre>\n\n<p><span style=\"font-size:18px\"><span style=\"font-size:18px\"><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function </span></span><strong><code>countSwaps</code></strong><span style=\"font-size:18px\"><span style=\"font-size:18px\"><strong>()</strong>&nbsp;which takes the array <strong>arr[]</strong> and <strong>N</strong><strong> </strong>as inputs and returns the </span></span>minimum number of swaps needed to sort the array in non - decreasing order.<br />\n<br />\n<span style=\"font-size:18px\"><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(NlogN)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>4</sup><br />\n1 &le; arr[i] &le; 10<sup>9</sup></span></span></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of size `N` containing non-negative integers, determine the minimum number of adjacent swaps required to sort the array into non-decreasing order.",
                "constraints": [
                    "1 <= N <= 10^4",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 4, arr[] = {4, 1, 2, 3}",
                        "output": "3",
                        "explanation": "The array can be sorted with the following swaps: (4,1,2,3) -> (1,4,2,3) -> (1,2,4,3) -> (1,2,3,4).  This requires 3 swaps."
                    },
                    {
                        "input": "N = 4, arr[] = {4, 4, 2, 3}",
                        "output": "4",
                        "explanation": "The array can be sorted with the following swaps: (4,4,2,3) -> (4,2,4,3) -> (4,2,3,4) -> (2,4,3,4) -> (2,3,4,4). This requires 4 swaps."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>It can be solved using the fact that number of swaps needed is equal to number of inversions. So we basically need to count inversions in array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\t/* This function merges two sorted arrays and returns inversion \n   count in the arrays.*/\n\tint merge(int arr[], int temp[], int left, int mid, int right) \n\t{ \n\t    int inv_count = 0; \n\t  \n\t    int i = left; /* i is index for left subarray*/\n\t    int j = mid;  /* i is index for right subarray*/\n\t    int k = left; /* i is index for resultant merged subarray*/\n\t    while ((i <= mid - 1) && (j <= right)) \n\t    { \n\t        if (arr[i] <= arr[j]) \n\t            temp[k++] = arr[i++]; \n\t        else\n\t        { \n\t            temp[k++] = arr[j++]; \n\t  \n\t            /* this is tricky -- see above explanation/ \n\t              diagram for merge()*/\n\t            inv_count = inv_count + (mid - i); \n\t        } \n\t    } \n\t  \n\t    /* Copy the remaining elements of left subarray \n\t     (if there are any) to temp*/\n\t    while (i <= mid - 1) \n\t        temp[k++] = arr[i++]; \n\t  \n\t    /* Copy the remaining elements of right subarray \n\t     (if there are any) to temp*/\n\t    while (j <= right) \n\t        temp[k++] = arr[j++]; \n\t  \n\t    /*Copy back the merged elements to original array*/\n\t    for (i=left; i <= right; i++) \n\t        arr[i] = temp[i]; \n\t  \n\t    return inv_count; \n\t} \n\t  \n\t/* An auxiliary recursive function that sorts the input \n\t   array and returns the number of inversions in the \n\t   array. */\n\tint _mergeSort(int arr[], int temp[], int left, int right) \n\t{ \n\t    int mid, inv_count = 0; \n\t    if (right > left) \n\t    { \n\t        /* Divide the array into two parts and call \n\t          _mergeSortAndCountInv() for each of the parts */\n\t        mid = (right + left)/2; \n\t  \n\t        /* Inversion count will be sum of inversions in \n\t           left-part, right-part and number of inversions \n\t           in merging */\n\t        inv_count  = _mergeSort(arr, temp, left, mid); \n\t        inv_count += _mergeSort(arr, temp, mid+1, right); \n\t  \n\t        /*Merge the two parts*/\n\t        inv_count += merge(arr, temp, left, mid+1, right); \n\t    } \n\t  \n\t    return inv_count; \n\t} \n\t  \n\t/* This function sorts the input array and returns the \n\t   number of inversions in the array */\n\tint countSwaps(int arr[], int n) \n\t{ \n\t    int temp[n]; \n\t    return _mergeSort(arr, temp, 0, n - 1); \n\t} \n\n\t \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}