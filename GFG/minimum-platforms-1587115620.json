{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 701368,
      "title": "Minimum Platforms",
      "titleSlug": "minimum-platforms-1587115620",
      "content": "<p><span >You are given the arrival times <strong>arr[]</strong> and departure times <strong>dep[]</strong> of all trains that arrive at a railway station on the same day. Your task is to determine the minimum number of platforms required at the station to ensure that no train is kept waiting.</span></p>\n<p><span >At any given time, the same platform cannot be used for both the arrival of one train and the departure of another. Therefore, when two trains arrive at the same time, or when one arrives before another departs, additional platforms are required to accommodate both trains.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: arr[] = [900, 940, 950, 1100, 1500, 1800], dep[] = [910, 1200, 1120, 1130, 1900, 2000]\n<strong>Output</strong>: 3\n<strong>Explanation</strong>: There are three trains during the time 9:40 to 12:00. So we need a minimum of 3 platforms.</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [900, 1235, 1100], dep[] = [1000, 1240, 1200]\n<strong>Output</strong>: 1\n<strong>Explanation</strong>: All train times are mutually exclusive. So we need only one platform\n</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [1000, 935, 1100], dep[] = [1200, 1240, 1130]\n<strong>Output</strong>: 3\n<strong>Explanation</strong>: All 3 trains have to be there from 11:00 to 11:30</span></pre>\n<p><span ><strong>Constraints:<br /></strong>1&le; number of trains &le; 50000<br />0000 &le; arr[i] &le; dep[i] &le; 2359<br /><strong>Note:</strong>&nbsp;Time intervals are in the 24-hour format(<strong>HHMM) ,</strong> where the first two characters represent hour (between 00 to 23 ) and the last two characters represent minutes (this will be &lt;= 59 and &gt;= 0).</span></p>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given the arrival times `arr[]` and departure times `dep[]` of trains at a railway station on a single day, determine the minimum number of platforms required to avoid delays. A platform cannot be simultaneously used for the arrival of one train and the departure of another. If trains arrive at the same time or an arrival occurs before a departure, additional platforms are needed.",
        "constraints": [
          "1 <= number of trains <= 50000",
          "0000 <= arr[i] <= dep[i] <= 2359",
          "Time intervals are in 24-hour format (HHMM), where the first two characters represent the hour (00 to 23) and the last two represent minutes (00 to 59)."
        ],
        "testcases": [
          {
            "input": "arr[] = [900, 940, 950, 1100, 1500, 1800], dep[] = [910, 1200, 1120, 1130, 1900, 2000]",
            "output": "3",
            "explanation": "From 9:40 to 12:00, there are three trains requiring platforms simultaneously. Therefore, a minimum of 3 platforms is necessary."
          },
          {
            "input": "arr[] = [900, 1235, 1100], dep[] = [1000, 1240, 1200]",
            "output": "1",
            "explanation": "The arrival and departure times of all trains are mutually exclusive, indicating that only one platform is sufficient."
          },
          {
            "input": "arr[] = [1000, 935, 1100], dep[] = [1200, 1240, 1130]",
            "output": "3",
            "explanation": "All three trains require platforms between 11:00 and 11:30, thus needing 3 platforms."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p><span >Sort arrival and departure times, then track platform usage to find the maximum overlap during the day.</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Arrays",
        "slug": "arrays"
      },
      {
        "name": "Greedy",
        "slug": "greedy"
      },
      {
        "name": "Sorting",
        "slug": "sorting"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      },
      {
        "name": "Algorithms",
        "slug": "algorithms"
      }
    ],
    "companies": [
      "paytm",
      "amazon",
      "microsoft",
      "de-shaw",
      "hike",
      "walmart",
      "adobe",
      "google",
      "boomerang-commerce",
      "zillious",
      "atlassian"
    ],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "class Solution {\n  public:\n    // Function to sort vector elements first according to time and if time is\n    // same for two events, then arrival comes first followed by departure.\n    static bool customsort(const pair<int, char> &a, const pair<int, char> &b) {\n        if (a.first == b.first)\n            return a.second < b.second;\n        return a.first < b.first;\n    }\n\n    // Function to find the minimum number of platforms required at the\n    // railway station such that no train waits.\n    int findPlatform(vector<int> &arr, vector<int> &dep) {\n        vector<pair<int, char> > order;\n        int n = arr.size();\n        // inserting all the values of time(arrival and departure)\n        // in the vector of pairs.\n        for (int i = 0; i < n; i++) {\n\n            // if the time is of arrival then we keep second value\n            // of pair as 'a' else 'd'.\n            order.push_back(make_pair(arr[i], 'a'));\n            order.push_back(make_pair(dep[i], 'd'));\n        }\n\n        // using custom sort vector, first according to time and if time is\n        // same for two events, then arrival comes first followed by departure.\n        sort(order.begin(), order.end(), customsort);\n\n        int result = 1;\n        int plat_needed = 0;\n\n        // using an iterator on vector of pairs.\n        vector<pair<int, char> >::iterator it = order.begin();\n\n        for (; it != order.end(); it++) {\n            // if the second value of vector element is 'a' which stands\n            // for arrival then we add 1 to platform needed else we\n            // subtract 1 from platform needed.\n            if ((*it).second == 'a')\n                plat_needed++;\n            else\n                plat_needed--;\n\n            // we keep updating the value of result.\n            if (plat_needed > result)\n                result = plat_needed;\n        }\n        // returning the minimum number of platforms required.\n        return result;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "//Back-end complete function Template for Java\n\nclass pair {\n    int first;\n    char second;\n\n    pair(int key1, char key2) {\n        this.first = key1;\n        this.second = key2;\n    }\n}\n\nclass Solution {\n    // Function to find the minimum number of platforms required at the\n    // railway station such that no train waits.\n    public static int findPlatform(int arr[], int dep[]) {\n        int n = arr.length;\n\n        ArrayList<pair> order = new ArrayList<>();\n        // inserting all the values of time(arrival and departure)\n        // in the ArrayList of pairs.\n        for (int i = 0; i < n; i++) {\n            // if the time is of arrival then we keep second value\n            // of pair as 'a' else 'd'.\n            order.add(new pair(arr[i], 'a'));\n            order.add(new pair(dep[i], 'd'));\n        }\n\n        // using custom sort on ArrayList, first according to time and if time is\n        // same for two events, then arrival comes first followed by departure.\n        Collections.sort(order,\n                         new Comparator<pair>() {\n                             @Override\n                             public int compare(pair p1, pair p2) {\n                                 if (p1.first == p2.first)\n                                     return new Character(p1.second).compareTo(\n                                         new Character(p2.second));\n                                 return p1.first - p2.first;\n                             }\n                         }\n\n        );\n        int result = 1;\n        int plat_needed = 0;\n        for (int i = 0; i < order.size(); i++) {\n            pair p = order.get(i);\n\n            // if the second value of list element is 'a' which stands\n            // for arrival then we add 1 to platform needed else we\n            // subtract 1 from platform needed.\n            if (p.second == 'a')\n                plat_needed++;\n            else\n                plat_needed--;\n            // we keep updating the value of result.\n            if (plat_needed > result) result = plat_needed;\n        }\n        // returning the minimum number of platforms required.\n        return result;\n    }\n}\n",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "class Solution:\n    #Function to find the minimum number of platforms required at the\n    #railway station such that no train waits.\n    def minimumPlatform(self, arr, dep):\n        n = len(arr)\n        order = []\n        #inserting all the values of time(arrival and departure)\n        for i in range(n):\n            #if the time is of arrival then we keep second value\n            #of pair as 'a' else 'd'.\n            order.append([arr[i], 'a'])\n            order.append([dep[i], 'd'])\n\n        #sorting order, first according to time and if time is\n        #same for two events, then arrival comes first followed by departure.\n        order.sort(key=lambda x: x[1])\n        order.sort()\n        result = 1\n        plat_needed = 0\n\n        for i in order:\n            #if the second value of vector element is 'a' which stands\n            #for arrival then we add 1 to platform needed else we\n            #subtract 1 from platform needed.\n            if (i[1] == 'a'):\n                plat_needed += 1\n            else:\n                plat_needed -= 1\n            #we keep updating the value of result.\n            result = max(result, plat_needed)\n        #returning the minimum number of platforms required.\n        return result\n",
        "lang_text": "python3"
      },
      {
        "lang": "C#",
        "full_func": "// User function Template for C#\nclass Solution {\n    // Function to find the minimum number of platforms required at the railway station\n    // such that no train waits.\n    public int findPlatform(int[] arr, int[] dep) {\n        int n = arr.Length;\n        List<Tuple<int, char>> order = new List<Tuple<int, char>>();\n\n        // inserting all the values of time (arrival and departure) in the list of\n        // tuples.\n        for (int i = 0; i < n; i++) {\n            // if the time is of arrival, then we keep second value of tuple as 'a',\n            // else 'd'.\n            order.Add(Tuple.Create(arr[i], 'a'));\n            order.Add(Tuple.Create(dep[i], 'd'));\n        }\n\n        // Sort the list of tuples. First by time, and if time is the same, 'a' comes\n        // before 'd'.\n        order.Sort(customsort);\n\n        int result = 1;\n        int plat_needed = 0;\n\n        // Iterate through the sorted list of tuples.\n        foreach (var it in order) {\n            // If the second value is 'a' (arrival), we add 1 to platform needed; else\n            // subtract 1.\n            if (it.Item2 == 'a') {\n                plat_needed++;\n            } else {\n                plat_needed--;\n            }\n\n            // Update the result with the maximum number of platforms needed.\n            if (plat_needed > result) {\n                result = plat_needed;\n            }\n        }\n        // Returning the minimum number of platforms required.\n        return result;\n    }\n\n    // Custom sort function to sort the list of tuples.\n    private static int customsort(Tuple<int, char> a, Tuple<int, char> b) {\n        if (a.Item1 == b.Item1) {\n            return a.Item2.CompareTo(b.Item2);\n        }\n        return a.Item1.CompareTo(b.Item1);\n    }\n}\n",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number[]} dep\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the minimum number of platforms required at the\n    // railway station such that no train waits.\n    findPlatform(arr, dep) {\n        let order = [];\n        let n = arr.length;\n        // inserting all the values of time(arrival and departure)\n        // in the list of pairs.\n        for (let i = 0; i < n; i++) {\n\n            // if the time is of arrival then we keep second value\n            // of pair as 0 else 1.\n            order.push([ arr[i], 0 ]);\n            order.push([ dep[i], 1 ]);\n        }\n\n        // using custom sort on ArrayList, first according to time and if time is\n        // same for two events, then arrival comes first followed by departure.\n        order.sort(function(a, b) {\n            if (a[0] == b[0]) return a[1] - b[1];\n            return a[0] - b[0];\n        });\n\n        let result = 1;\n        let plat_needed = 0;\n\n        let it = 0;\n\n        for (; it < order.length; it++) {\n\n            // if the second value is 0 which stands for arrival then we add 1 to\n            // platform needed else we subtract 1 from platform needed.\n            if (order[it][1] == 0)\n                plat_needed++;\n            else\n                plat_needed--;\n\n            // we keep updating the value of result.\n            if (plat_needed > result) result = plat_needed;\n        }\n        // returning the minimum number of platforms required.\n        return result;\n    }\n}\n",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
