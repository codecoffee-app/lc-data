{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714069,
            "title": "Minimum Platforms 2",
            "titleSlug": "minimum-platforms-2--170647",
            "content": "<p><span style=\"font-size: 18px;\">You are in geekworld railway station. You are given train schedule as follows</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">arrival_time array contains arrival time of each train</span></li>\n<li><span style=\"font-size: 18px;\">departure_time array contains departure time of each train</span></li>\n<li><span style=\"font-size: 18px;\">days array contains the particular day when the trains runs. Also each train arrive and departs on the same day</span></li>\n<li><span style=\"font-size: 18px;\">You are also given number_of_platforms you&nbsp;have.</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\">You have to tell&nbsp; if it is possible to run all the trains with the given number of platforms such that no train has&nbsp;to wait.<br /><strong>Note:</strong> If 2 trains arrive and depart on the same time on the same day on the same platform&nbsp;then depart the train first then second train arrives. Also time in geekland <strong>does not</strong>&nbsp;follow <strong>24 hr(HHMM)</strong>&nbsp;format. So time can be 2368 or 2398, here 2398 &gt; 2368.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 6&nbsp;\narr[] = {900, 940, 950, 1100, 1500, 1800}\ndep[] = {910, 1200, 1120, 1130, 1900, 2000}\ndays[] = {1, 2, 2, 1, 3, 4}\nplatforms = 2\n<strong>Output</strong>: True\n<strong>Explanation</strong>:\nMinimum 2 platforms are required to \nsafely arrive and depart all trains.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>minimumPlatform2()</strong>&nbsp;which takes the arr, dep, days, platforms as inputs and returns a boolean value wheather it is possible to run all trains&nbsp;such that no train waits.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 10^5<br />0&nbsp;&le; arr[i] &le; dep[i] &le; 2399<br />1&nbsp;&le; number_of_platforms &lt; 100<br />1&nbsp;&le; days[i] &lt; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are managing train schedules at Geekworld Railway Station. You are given the arrival times (`arrival_time`), departure times (`departure_time`), and the day of operation (`days`) for each train. You also know the total number of platforms available. Determine if it's possible to schedule all trains without any delays, given the limited number of platforms.\n\nImportant Considerations:\n\n*   Each train arrives and departs on the same day.\n*   If two trains arrive and depart at the exact same time on the same day using the same platform, prioritize departure before arrival.\n*   The time format in Geekland does not adhere to the standard 24-hour (HHMM) format. For example, 2398 > 2368.",
                "constraints": [
                    "1 <= n <= 10^5 (n is the number of trains)",
                    "0 <= arr[i] <= dep[i] <= 2399 (arrival and departure times)",
                    "1 <= number_of_platforms < 100",
                    "1 <= days[i] < 100"
                ],
                "testcases": [
                    {
                        "input": "n = 6\narr[] = {900, 940, 950, 1100, 1500, 1800}\ndep[] = {910, 1200, 1120, 1130, 1900, 2000}\ndays[] = {1, 2, 2, 1, 3, 4}\nplatforms = 2",
                        "output": "True",
                        "explanation": "A minimum of 2 platforms are required to accommodate all train arrivals and departures without conflicts."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">First sort by <strong>days</strong> then by arrival, departure <strong>time</strong> and at last by arrival or departure i.e. <strong>status</strong>.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution{\npublic:\n    // Function to check if minimum platforms are sufficient for given train schedule\n    bool minimumPlatform2(vector<int> &arr,vector<int> &dep,vector<int> &days,int platforms){\n        int n=arr.size();\n        map<int,vector<int>> mpp;\n        \n        // Grouping the train arrival and departure times based on days\n        for(int i=0;i<n;i++){\n            mpp[days[i]].push_back(i);\n        }\n        \n        int ans=0;\n        \n        // Iterating over each day in the schedule\n        for(auto x:mpp){\n            vector<pair<int,int>> vec;\n            \n            // Sorting the train arrival times for each day\n            for(auto y:x.second){\n                vec.push_back({arr[y],y});\n            }\n            sort(vec.begin(),vec.end());\n            \n            // Using a priority queue to track the departing trains and their departure times\n            priority_queue<int,vector<int>,greater<int>> pq;\n            \n            // Iterating over the trains for each day\n            for(auto el:vec){\n                int y=el.second;\n                // If no trains in the priority queue, add the departing time of the current train\n                if(pq.size()==0){\n                    pq.push(dep[y]);\n                }\n                else{\n                    // If the next departing train can leave before the current train arrives,\n                    // remove the earliest departing train and add the departing time of the current train\n                    if(pq.top()<=arr[y]){\n                        pq.pop();\n                        pq.push(dep[y]);\n                    }\n                    // If the next departing train cannot leave before the current train arrives,\n                    // add the departing time of the current train\n                    else{\n                        pq.push(dep[y]);\n                    }\n                }\n            }\n            \n            // Updating the maximum number of platforms needed\n            ans=max(ans,(int)pq.size());\n        }\n        \n        // Checking if the available platforms are sufficient\n        return (ans<=platforms);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    // Method to calculate the minimum number of platforms required to accommodate all trains\n    public boolean minimumPlatform2(ArrayList<Integer> arr, ArrayList<Integer> dep, ArrayList<Integer> days, int platforms){\n        // Declare an ArrayList to store the arrival and departure times of trains along with the respective days\n        ArrayList<int[]> list = new ArrayList<>();\n\n        // Get the number of trains\n        int n = arr.size();\n\n        // Populate the list with arrival and departure times of trains\n        for(int i = 0; i < n; i++){\n            list.add(new int[]{arr.get(i), 1, days.get(i)}); // 1 indicates arrival\n            list.add(new int[]{dep.get(i), 0, days.get(i)}); // 0 indicates departure\n        }\n\n        // Sort the list based on the arrival and departure times\n        Collections.sort(list,\n            new Comparator<int[]>(){ // Use a custom comparator to compare the elements\n                public int compare(int x[], int y[]){\n                    if(x[2] == y[2]){ // If the days are equal\n                        if(x[0] == y[0]) // Check the times\n                            return x[1] - y[1]; // Compare the arrival and departure\n                        return x[0] - y[0]; // Compare the times\n                    }\n                    return x[2] - y[2]; // Compare the days\n                }\n            }\n        );\n\n        // Initialize variables for tracking the minimum number of platforms and the current count of platforms\n        int ans = 1;\n        int count = 0;\n        \n        // Iterate through the sorted list\n        for(int i = 0; i < list.size(); i++){\n            if(list.get(i)[1] == 1) // If the train is arriving\n                count++; // Increment the platform count\n            else\n                count--; // If the train is departing, decrement the platform count\n            \n            // Update the minimum number of platforms required\n            ans = Math.max(ans, count);\n        }\n        \n        // Check if the minimum number of platforms required is less than or equal to the given number of platforms\n        return ans <= platforms;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to find minimum number of platforms required.\n    def minimumPlatform2(self, arr, dep, days, platforms):\n\n        #Creating a list of arrival and departure times along with days.\n        order = []\n        n = len(arr)\n        for i in range(n):\n            order.append([arr[i], 1, days[i]])\n            order.append([dep[i], 0, days[i]])\n\n        #Sorting the list based on days, arrival time, and departure type.\n        order.sort(key=lambda x: (x[2], x[0], x[1]))\n\n        result = 1  #Initializing result as 1 platform.\n        plat_needed = 0  #Initializing platforms needed as 0.\n\n        #Iterating over the order list.\n        for i in order:\n            if (i[1] == 1):  #If it is an arrival, increment platform needed.\n                plat_needed += 1\n            else:  #If it is a departure, decrement platform needed.\n                plat_needed -= 1\n\n            #Updating the maximum number of platforms needed.\n            result = max(result, plat_needed)\n\n        #Checking if the maximum number of platforms needed is less than or equal to the given platforms.\n        return True if result <= platforms else False\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}