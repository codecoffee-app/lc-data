{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704114,
            "title": "Minimum Points To Reach Destination",
            "titleSlug": "minimum-points-to-reach-destination0540",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>m*n</strong> grid with each cell consisting of a <strong>positive</strong>, <strong>negative</strong>, or <strong>zero</strong> integer. We can move across a cell only if we have positive points. Whenever we pass through a cell, points in that cell are added to our overall points, the task is to find <strong>minimum initial points</strong> to reach cell <strong>(m-1, n-1)</strong> from <strong>(0, 0)</strong> by following these certain set of rules :<br />1. From a cell (i, j) we can move to (i + 1, j) or (i, j + 1).<br />2. We cannot move from (i, j) if your overall points at (i, j) are &lt;= 0.<br />3. We have to reach at (n-1, m-1) with minimum positive points i.e., &gt; 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: <br />m = 3, n = 3 <br />points = {{-2,-3,3}, \n\\t    {-5,-10,1},<br />\\t    {10,30,-5}}</span> <br /><span style=\"font-size: 18px;\"><strong>Output:</strong> <br />7 <br /><strong>Explanation</strong>: 7 is the minimum value to reach the destination with positive throughout the path. Below is the path. (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1, 2) -&gt; (2, 2) We start from (0, 0) with 7, we reach (0, 1) with 5, (0, 2) with 2, (1, 2) with 5, (2, 2) with and finally we have 1 point (we needed greater than 0 points at the end).</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input:<br /></strong>m = 3, n = 2\npoints = {{2,3},  <br />\\t    {5,10},  <br />\\t    {10,30}} <br /><strong>Output: <br /></strong>1 <br /><strong>Explanation</strong>: Take any path, all of them are positive. So, required one point at the start</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>minPoints</code>()&nbsp;</strong>which takes 2 integers <strong>m </strong>and<strong> n</strong> and 2-d<strong> </strong>vector&nbsp;<strong>points</strong><strong> </strong>as input parameters and returns an integer denoting the <strong>minimum initial points</strong>&nbsp;to reach cell&nbsp;<strong>(m-1, n-1)</strong>&nbsp;from&nbsp;<strong>(0, 0).</strong><br /><br /><strong>Expected Time Complexity:</strong> O(n*m)<br /><strong>Expected Auxiliary Space:</strong> O(n*m)<br /><br /><strong>Constraints:</strong><br />1 &le; m &le; 10<sup>3&nbsp;</sup>&nbsp;<br />1 &le; n &le; 10<sup>3<br /></sup></span><span style=\"font-size: 18px;\">-10</span><sup>3</sup><span style=\"font-size: 18px;\"> &le; points[i][j] &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an m*n grid where each cell contains a positive, negative, or zero integer. You can only move to adjacent cells (down or right) if your current points are positive. Upon entering a cell, its value is added to your total points. Determine the minimum initial points needed to reach the bottom-right cell (m-1, n-1) from the top-left cell (0, 0).",
                "constraints": [
                    "1 <= m <= 10^3",
                    "1 <= n <= 10^3",
                    "-10^3 <= points[i][j] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "m = 3, n = 3\npoints = {{-2,-3,3},\n\t    {-5,-10,1},\n\t    {10,30,-5}}",
                        "output": "7",
                        "explanation": "The minimum initial points required is 7. One possible path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2).  Starting with 7 points, the points at each cell along the path are: 7 (initial), 5, 2, 5, 1 (final). We needed greater than 0 points at the end."
                    },
                    {
                        "input": "m = 3, n = 2\npoints = {{2,3},\n\t    {5,10},\n\t    {10,30}}",
                        "output": "1",
                        "explanation": "Any path through the grid results in positive points throughout.  Therefore, the minimum initial points needed is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Create a 2D space that will give the minimum points needed to reach the end from each point.</span><span style=\"font-size: 18px;\"> To fill any particular cell, check the cells on the right and the down and pick the lesser value.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n\n\tpublic:\n\t\tint minPoints(int m, int n, vector<vector<int>> points) \n\t{ \n\t    // dp[i][j] represents the minimum initial points player \n\t    // should have so that when starts with cell(i, j) successfully \n\t    // reaches the destination cell(m-1, n-1) \n\n\t    int dp[m][n];\n\t  \n\t    // Base case \n\t    dp[m-1][n-1] = points[m-1][n-1] > 0? 1: \n\t                   abs(points[m-1][n-1]) + 1; \n\t  \n\t    // Fill last row and last column as base to fill \n\t    // entire table \n\t    for (int i = m-2; i >= 0; i--) \n\t         dp[i][n-1] = max(dp[i+1][n-1] - points[i][n-1], 1); \n\t    for (int j = n-2; j >= 0; j--) \n\t         dp[m-1][j] = max(dp[m-1][j+1] - points[m-1][j], 1); \n\t  \n\t    // fill the table in bottom-up fashion \n\t    for (int i=m-2; i>=0; i--) \n\t    { \n\t        for (int j=n-2; j>=0; j--) \n\t        { \n\t            int min_points_on_exit = min(dp[i+1][j], dp[i][j+1]); \n\t            dp[i][j] = max(min_points_on_exit - points[i][j], 1); \n\t        } \n\t     } \n\t  \n\t     return dp[0][0]; \n\t} \n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int minPoints(int points[][], int m, int n) {\n        // Create a 2D array to store minimum points needed at each cell\n        int dp[][] = new int[m][n];\n\n        // Initialize the bottom-right cell with minimum points needed\n        dp[m - 1][n - 1] =\n            points[m - 1][n - 1] > 0 ? 1 : Math.abs(points[m - 1][n - 1]) + 1;\n\n        // Calculate minimum points needed for cells in the last row\n        for (int i = m - 2; i >= 0; i--)\n            dp[i][n - 1] = Math.max(dp[i + 1][n - 1] - points[i][n - 1], 1);\n\n        // Calculate minimum points needed for cells in the last column\n        for (int j = n - 2; j >= 0; j--)\n            dp[m - 1][j] = Math.max(dp[m - 1][j + 1] - points[m - 1][j], 1);\n\n        // Calculate minimum points needed for remaining cells\n        for (int i = m - 2; i >= 0; i--) {\n            for (int j = n - 2; j >= 0; j--) {\n                int minPointsOnExit = Math.min(dp[i + 1][j], dp[i][j + 1]);\n                dp[i][j] = Math.max(minPointsOnExit - points[i][j], 1);\n            }\n        }\n\n        // Return minimum points needed at the starting cell\n        return dp[0][0];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minPoints(self, M, N, points):\n        k = max(M, N)\n        dp = [[-1] * (k + 1) for i in range(k + 1)]\n        return self.helperFunction(points, M, N, 0, 0, dp)\n        # code here\n    def helperFunction(self, points, M, N, x, y, dp):\n        # // Base cases\n        if (x == M - 1 and y == N - 1):\n            if points[x][y] <= 0:\n                return 1 + abs(points[x][y])\n            else:\n                return 1\n\n        if (x == M or y == N):\n            return float('inf')\n        if (dp[x][y] != -1):\n            return dp[x][y]\n\n    # // Choices;\n\n        down = self.helperFunction(points, M, N, x + 1, y, dp)\n        left = self.helperFunction(points, M, N, x, y + 1, dp)\n        res = min(down, left) - points[x][y]\n        if res <= 0:\n            dp[x][y] = 1\n        else:\n            dp[x][y] = res\n\n        return dp[x][y]\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int minPoints(List<List<int>> points, int M, int N) \n    { \n        // dp[i][j] represents the minimum initial points player \n        // should have so that when starts with cell(i, j) successfully \n        // reaches the destination cell(m-1, n-1) \n\n        int[,] dp = new int[M,N];\n  \n        // Base case \n        dp[M-1,N-1] = points[M-1][N-1] > 0 ? 1 : \n                       Math.Abs(points[M-1][N-1]) + 1; \n  \n        // Fill last row and last column as base to fill \n        // entire table \n        for (int i = M-2; i >= 0; i--) \n             dp[i,N-1] = Math.Max(dp[i+1,N-1] - points[i][N-1], 1); \n        for (int j = N-2; j >= 0; j--) \n             dp[M-1,j] = Math.Max(dp[M-1,j+1] - points[M-1][j], 1); \n  \n        // fill the table in bottom-up fashion \n        for (int i=M-2; i>=0; i--) \n        { \n            for (int j=N-2; j>=0; j--) \n            { \n                int min_points_on_exit = Math.Min(dp[i+1,j], dp[i,j+1]); \n                dp[i,j] = Math.Max(min_points_on_exit - points[i][j], 1); \n            } \n         } \n  \n         return dp[0,0]; \n    } \n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    minPoints(m,n,points) {\n        let dp = new Array(n).fill(0).map(() => new Array(m).fill(Number.MAX_SAFE_INTEGER));\n\n        dp[n - 1][m - 1] = points[n - 1][m - 1] > 0 ? 1 : Math.abs(points[n - 1][m - 1]) + 1;\n\n        for (let i = n - 2; i >= 0; i--) {\n            dp[i][m - 1] = Math.max(dp[i + 1][m - 1] - points[i][m - 1], 1);\n        }\n\n        for (let j = m - 2; j >= 0; j--) {\n            dp[n - 1][j] = Math.max(dp[n - 1][j + 1] - points[n - 1][j], 1);\n        }\n\n        for (let i = n - 2; i >= 0; i--) {\n            for (let j = m - 2; j >= 0; j--) {\n                let min_points_on_exit = Math.min(dp[i + 1][j], dp[i][j + 1]);\n                dp[i][j] = Math.max(min_points_on_exit - points[i][j], 1);\n            }\n        }\n\n        return dp[0][0];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}