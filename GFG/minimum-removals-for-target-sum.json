{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 883232,
            "title": "Minimum Removals for Target Sum",
            "titleSlug": "minimum-removals-for-target-sum",
            "content": "<p><span >You are given an array of positive integers <strong>arr[]</strong>&nbsp;and an integer <strong>k</strong>. In one operation, you can remove either the leftmost or the rightmost element from the array. After each operation, the size of <strong>arr[]</strong> will be <strong>reduced</strong> by <strong>one</strong>.</span></p>\n<p><span >Your task is to determine the minimum number of operations required to make the <strong>total sum </strong>of<strong> removed elements</strong> exactly equal to <strong>k</strong>. If it is not possible to achieve this, return <strong>-1.</strong></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [3, 4, 1, 3, 2], k = 5<br /><strong>Output:</strong> 2<br /><strong>Explanation: </strong>Removing 3 from left and 2 from right gives a sum of 5 in 2 operations.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [5, 3, 4, 6, 2], k = 6<br /><strong>Output:</strong> -1<br /><strong>Explanation: </strong>It is impossible to <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">achieve</span> the sum of removed elements as 6.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [1, 1, 3, 1, 2], k = 4<br /><strong>Output:</strong> 3<br /><strong>Explanation: </strong>Removing 1, 1 from left and 2 from right gives a sum of 4 in 3 operation.</span></pre>\n<p><span ><strong>Constraints:<br /></strong></span><span >1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>4</sup><br />1 &le; k &le; arr.size()</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers `arr` and an integer `k`, determine the minimum number of operations required to make the sum of removed elements exactly equal to `k`. In each operation, you can remove either the leftmost or the rightmost element from the array. If it's not possible to achieve the sum `k`, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^4",
                    "1 <= k <= arr.size()"
                ],
                "testcases": [
                    {
                        "input": "arr = [3, 4, 1, 3, 2], k = 5",
                        "output": "2",
                        "explanation": "Removing the element 3 from the left and the element 2 from the right results in a sum of 5, requiring 2 operations."
                    },
                    {
                        "input": "arr = [5, 3, 4, 6, 2], k = 6",
                        "output": "-1",
                        "explanation": "It is not possible to obtain a sum of 6 by removing elements from either end of the array."
                    },
                    {
                        "input": "arr = [1, 1, 3, 1, 2], k = 4",
                        "output": "3",
                        "explanation": "Removing the elements 1 and 1 from the left and the element 2 from the right yields a sum of 4, requiring 3 operations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minRemovals(vector<int> &arr, int k) {\n        int totalSum = 0, n = arr.size();\n        for (auto it : arr)\n            totalSum += it;\n        int reqSum = totalSum - k;\n        if (reqSum == 0)\n            return n;\n\n        int left = 0, currSum = 0, ans = 1e9;\n        for (int right = 0; right < n; right++) {\n            currSum += arr[right];\n            while (left < right && currSum > reqSum) {\n                currSum -= arr[left];\n                left++;\n            }\n            if (currSum == reqSum) {\n                ans = min(ans, left + n - 1 - right);\n            }\n        }\n        return (ans == 1e9) ? -1 : ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int minRemovals(int[] arr, int k) {\n        int totalSum = 0, n = arr.length;\n\n        // Calculate the total sum of the array\n        for (int num : arr) {\n            totalSum += num;\n        }\n\n        int reqSum = totalSum - k;\n\n        // If the required sum is 0, return the size of the array\n        if (reqSum == 0) {\n            return n;\n        }\n\n        int left = 0, currSum = 0, ans = Integer.MAX_VALUE;\n\n        // Sliding window to find the subarray with the required sum\n        for (int right = 0; right < n; right++) {\n            currSum += arr[right];\n\n            while (left < right && currSum > reqSum) {\n                currSum -= arr[left];\n                left++;\n            }\n\n            if (currSum == reqSum) {\n                ans = Math.min(ans, left + n - 1 - right);\n            }\n        }\n\n        return (ans == Integer.MAX_VALUE) ? -1 : ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minRemovals(self, arr, k):\n        total_sum = sum(arr)\n        n = len(arr)\n        req_sum = total_sum - k\n\n        if req_sum == 0:\n            return n\n\n        left = 0\n        curr_sum = 0\n        ans = float('inf')\n\n        for right in range(n):\n            curr_sum += arr[right]\n            while left < right and curr_sum > req_sum:\n                curr_sum -= arr[left]\n                left += 1\n\n            if curr_sum == req_sum:\n                ans = min(ans, left + n - 1 - right)\n\n        return -1 if ans == float('inf') else ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param{number[]} arr\n     * @param {number} k\n     * @return {number}\n     */\n    minRemovals(arr, k) {\n        let totalSum = 0, n = arr.length;\n\n        for (const num of arr) {\n            totalSum += num;\n        }\n\n        let reqSum = totalSum - k;\n        if (reqSum === 0) {\n            return n;\n        }\n\n        let left = 0, currSum = 0, ans = Infinity;\n        for (let right = 0; right < n; right++) {\n            currSum += arr[right];\n            while (left < right && currSum > reqSum) {\n                currSum -= arr[left];\n                left++;\n            }\n            if (currSum === reqSum) {\n                ans = Math.min(ans, left + n - 1 - right);\n            }\n        }\n\n        return ans === Infinity ? -1 : ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}