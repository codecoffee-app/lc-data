{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704955,
            "title": "Minimum rotations to unlock a circular lock",
            "titleSlug": "minimum-rotations-to-unlock-a-circular-lock1001",
            "content": "<p><span style=\"font-size:18px\">Given a lock made up of N different circular rings. Each ring has 0-9 digit printed&nbsp;on it. There is only one particular code which can open the lock.&nbsp;You can rotate each ring any number of times in either direction. Given the random sequence R and the&nbsp;desired sequence D, find the minimum number of rotations required to open the lock.&nbsp;</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> R = 222, D = 333\r\n<strong>Output:</strong> 3\r\n<strong>Explaination:</strong> Optimal number of rotations for \r\ngetting 3 from 2 is 1. There are three 2 to 3 \r\ntransformations. So answer is 1+1+1 = 3.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> R = 2345, D = 5432\r\n<strong>Output:</strong> 8\r\n<strong>Explaination:</strong> The optimal shifts for pairs are: \r\n(2, 5) = 3, (3, 4) = 1, (4,3) = 1, (5,2) = 3. \r\nSo total shifts = 3+1+1+3 = 8.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>rotationCount()</strong> which takes R and D&nbsp;as input parameters and return the minimum number of rotations required to make R = D.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(logR)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; R, D &lt; 10<sup>18</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each digit get the minimum shift.</span></p>",
            "<p><span style=\"font-size:18px\">You can change each digit within 5 rotations.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the rotation count\n    int rotationCount(long long R, long long D)\n    {\n        int rotation = 0;\n        \n        // Loop until both numbers are greater than 0\n        while(D > 0 && R > 0){\n            int x = D % 10; // Extract last digit of D\n            int y = R % 10; // Extract last digit of R\n            x = abs(x - y); // Calculate absolute difference\n            if(x > 5)\n                x = 10 - x; // Choose the smaller rotation, 1 or 9\n            rotation += x; // Add the rotation to the total count\n            D /= 10; // Remove the last digit of D\n            R /= 10; // Remove the last digit of R\n        }\n        return rotation; // Return the total rotation count\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int rotationCount(long R, long D)\n    {\n        int rotation = 0;\n        \n        // Loop until both numbers are greater than 0\n        while(D > 0 && R > 0){\n            int x = (int)(D % 10); // Extract last digit of D\n            int y = (int)(R % 10); // Extract last digit of R\n            x = Math.Abs(x - y); // Calculate absolute difference\n            if(x > 5)\n                x = 10 - x; // Choose the smaller rotation, 1 or 9\n            rotation += x; // Add the rotation to the total count\n            D /= 10; // Remove the last digit of D\n            R /= 10; // Remove the last digit of R\n        }\n        return rotation; // Return the total rotation count\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}