{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703174,
            "title": "Longest common prefix",
            "titleSlug": "minimum-shift-for-longest-common-prefix0759",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings&nbsp;<strong>str1</strong> and <strong>str2</strong>&nbsp;of the same length. Find the longest prefix of str1 which is common in str2. </span><span style=\"font-size: 18px;\"><strong> </strong></span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \nstr1 = \"geeks\"\nstr2 = \"dgeek\"<strong>\nOutput:</strong> 3\n<strong>Explanation: \n</strong>Longest prefix from str1\npresent in str2 is \"geek\" \nstarting at index 0 in str1\nand ending at index 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>str1 = \"practicegeeks\"\nstr2 = \"coderpractice\"\n<strong>Output: </strong>7\n<strong>Explanation: \n</strong>Longest prefix from str1\npresent in str2 is \"practice\"\nstarting at index 0 and ending \nat index 7 in str1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your&nbsp;Task:</strong><br />You don't need to read input or print anything. Complete the function <strong>longestCommonPrefix()&nbsp;</strong>which takes&nbsp;strings str1 and&nbsp;str2 as input parameters&nbsp;and returns a list of integers whose first two elements&nbsp;denote&nbsp;the start and end index of str1&nbsp;at which the longest common prefix of str1 is found&nbsp;in str2.&nbsp;<br />If there is no common prefix then the returning list should contain [-1,-1].</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(|str1|*|str2|)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(|str1|)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;=&nbsp;|str1|,&nbsp;|str2|&nbsp;&lt;= 1000<br />str1 and str2 contain only lowercase alphabets.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For every prefix of str1 check if it is present in str2.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the longest common prefix between two strings\n    int longestCommonPrefix(string str1, string str2) {\n        int n = str1.length();\n        int k = n;\n        int flag = 0;\n\n        // Iterating from the length of the string1 to 0\n        while (k >= 0) {\n            // Taking the substring of string1 from 0 to k\n            string s = str1.substr(0, k);\n\n            // Finding the position of the substring in string2\n            int pos = str2.find(s);\n\n            // If substring is found in string2\n            if (str2.find(s) > 0 && str2.find(s) < n) {\n                flag = 1;\n                int i = 0;\n\n                // Finding the starting position of the substring in string1\n                while (str1[i] != s[0]) {\n                    i++;\n                }\n\n                // Creating a vector to hold the starting and ending position of the\n                // substring in string1\n\n                return i + s.size() - 1;\n\n                // Breaking the loop as we found the longest common prefix\n                break;\n            } else {\n                // Decreasing the length of the substring by 1\n                k--;\n            }\n        }\n\n        // If no common prefix is found, returning -1\n        if (flag == 0) {\n            return -1;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}