{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700343,
            "title": "Minimum Spanning Tree",
            "titleSlug": "minimum-spanning-tree",
            "content": "<p><span style=\"font-family: arial, helvetica, sans-serif;\"><span style=\"font-size: 18.6667px;\">Given a weighted, undirected, and connected graph with V vertices and E edges, your task is to find the sum of the weights of the edges in the Minimum Spanning Tree (MST) of the graph. The graph is represented by an adjacency list, where each element adj[i] is a vector containing vector of integers. Each vector represents an edge, with the first integer denoting the endpoint of the edge and the second integer denoting the weight of the edge.</span></span></p>\n<pre><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Input:\n</strong>3 3\n0 1 5\n1 2 3\n0 2 1\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700343/Web/Other/064ccfb5-e351-4908-a660-b228a091eb47_1685086606.png\" alt=\"\" />\n<strong>Output: </strong>4\n<strong>Explanation</strong>:\n<img style=\"height: 207px; width: 288px;\" src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700343/Web/Other/64f692e2-1acf-4515-8f46-516521cf0bab_1685086607.png\" alt=\"\" />\nThe Spanning Tree resulting in a weight\nof 4 is shown above.</span></pre>\n<pre><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong style=\"white-space: normal;\">Input:&nbsp;<br /></strong><span style=\"white-space: normal;\">2 1 <br />0 1 5</span></span><br /><br /><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\">&nbsp;<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700343/Web/Other/944e4620-f860-4e62-aa2a-086f31e142cb_1685086607.png\" alt=\"\" /> </span><br /><br /><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Output: </strong>5 </span><br /><br /><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Explanation</strong>: Only one Spanning Tree is possible which has a weight of 5.<br /></span></pre>\n<p><strong style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\">Constraints:<br /></strong><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\">2 &le; V &le; 1000<br />V-1 &le; E &le; (V*(V-1))/2<br />1 &le; w &le; 1000<br />The graph is connected and doesn't contain self-loops &amp; multiple edges.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "samsung",
            "cisco"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find sum of weights of edges of the Minimum Spanning Tree.\n    int spanningTree(int V, vector<vector<int>> adj[]) {\n        // code here\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>\n            pq;\n\n        // Create a visited array to keep track of visited vertices\n        vector<bool> visited(V, false);\n\n        // Variable to store the result (sum of edge weights)\n        int res = 0;\n\n        // Start with vertex 0\n        pq.push({0, 0});\n\n        // Perform Prim's algorithm to find the Minimum Spanning Tree\n        while (!pq.empty()) {\n            auto p = pq.top();\n            pq.pop();\n\n            int wt = p.first; // Weight of the edge\n            int u = p.second; // Vertex connected to the edge\n\n            if (visited[u] == true) {\n                continue; // Skip if the vertex is already visited\n            }\n\n            res += wt;         // Add the edge weight to the result\n            visited[u] = true; // Mark the vertex as visited\n\n            // Explore the adjacent vertices\n            for (auto v : adj[u]) {\n                // v[0] represents the vertex and v[1] represents the edge weight\n                if (visited[v[0]] == false) {\n                    pq.push(\n                        {v[1], v[0]}); // Add the adjacent edge to the priority queue\n                }\n            }\n        }\n\n        return res; // Return the sum of edge weights of the Minimum Spanning Tree\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    static int spanningTree(int V, int E, List<List<int[]>> adj) {\n        // Priority queue to store the edges with their weights.\n        // Each element is an array where:\n        // index 0 -> weight of the edge\n        // index 1 -> vertex number\n        PriorityQueue<int[]> pq =\n            new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));\n\n        // Visited array to keep track of included vertices in MST\n        boolean[] visited = new boolean[V];\n\n        // Variable to store the total weight of the MST\n        int res = 0;\n\n        // Start with vertex 0, push (weight=0, vertex=0) to the priority queue\n        pq.offer(new int[] {0, 0});\n\n        // Perform Prim's algorithm\n        while (!pq.isEmpty()) {\n            int[] current = pq.poll();\n            int wt = current[0]; // Weight of the edge\n            int u = current[1];  // Vertex connected by the edge\n\n            // If the vertex is already visited, skip it\n            if (visited[u]) {\n                continue;\n            }\n\n            // Add the weight to the result and mark the vertex as visited\n            res += wt;\n            visited[u] = true;\n\n            // Iterate through all adjacent vertices of the current vertex\n            for (int[] edge : adj.get(u)) {\n                int v = edge[0];      // Adjacent vertex\n                int weight = edge[1]; // Weight of the edge\n\n                // If the adjacent vertex is not visited, add it to the priority queue\n                if (!visited[v]) {\n                    pq.offer(new int[] {weight, v});\n                }\n            }\n        }\n\n        // Return the total weight of the Minimum Spanning Tree\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\nimport heapq\n\n\nclass Solution:\n\n    # Function to find sum of weights of edges of the Minimum Spanning Tree.\n    def spanningTree(self, V: int, adj: List[List[List[int]]]) -> int:\n\n        # Priority queue (min-heap) to select the edge with the minimum weight\n        # Each element in the heap is a tuple (weight, vertex)\n        min_heap = []\n        heapq.heappush(min_heap, (0, 0))  # Start with vertex 0 and weight 0\n\n        # Visited array to keep track of vertices included in the MST\n        visited = [False] * V\n\n        # Variable to store the total weight of the MST\n        total_weight = 0\n\n        while min_heap:\n            # Extract the edge with the minimum weight\n            wt, u = heapq.heappop(min_heap)\n\n            # If the vertex is already included in the MST, skip it\n            if visited[u]:\n                continue\n\n            # Include the vertex in the MST and add the edge weight to the total\n            visited[u] = True\n            total_weight += wt\n\n            # Iterate through all adjacent vertices of the current vertex\n            for edge in adj[u]:\n                v, weight = edge  # edge[0] is the adjacent vertex, edge[1] is the weight\n\n                # If the adjacent vertex is not yet included in the MST, add it to the heap\n                if not visited[v]:\n                    heapq.heappush(min_heap, (weight, v))\n\n        return total_weight\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to find sum of weights of edges of the Minimum Spanning Tree.\n    public int spanningTree(int V, ref List<List<List<int>>> adj) {\n        // Array to store the minimum weight edge that connects to the MST\n        int[] key = new int[V];\n\n        // Array to track vertices included in MST\n        bool[] inMST = new bool[V];\n\n        // Initialize all keys as infinite and inMST as false\n        for (int i = 0; i < V; i++) {\n            key[i] = int.MaxValue;\n            inMST[i] = false;\n        }\n\n        // Start with the first vertex\n        key[0] = 0;\n\n        int totalWeight = 0;\n\n        for (int count = 0; count < V; count++) {\n            // Pick the minimum key vertex from the set of vertices not yet included in\n            // MST\n            int u = minKey(V, key, inMST);\n\n            // Add the picked vertex to the MST set\n            inMST[u] = true;\n\n            // Add the key value to the total weight\n            totalWeight += key[u];\n\n            // Update the key values of adjacent vertices of the picked vertex\n            foreach (var edge in adj[u]) {\n                int v = edge[0];\n                int weight = edge[1];\n\n                // If v is not in MST and weight is smaller than current key[v], update\n                // key[v]\n                if (!inMST[v] && weight < key[v]) {\n                    key[v] = weight;\n                }\n            }\n        }\n\n        return totalWeight;\n    }\n\n    // Helper function to find the vertex with the minimum key value not yet included in\n    // MST\n    private int minKey(int V, int[] key, bool[] inMST) {\n        int min = int.MaxValue;\n        int minIndex = -1;\n\n        for (int v = 0; v < V; v++) {\n            if (!inMST[v] && key[v] < min) {\n                min = key[v];\n                minIndex = v;\n            }\n        }\n\n        return minIndex;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    spanningTree(V, adj) {\n        // Array to store the minimum weight to include each vertex in the MST\n        const key = new Array(V).fill(Infinity);\n\n        // Array to keep track of vertices included in the MST\n        const inMST = new Array(V).fill(false);\n\n        // Initialize the first vertex's key to 0 so that it is picked first\n        key[0] = 0;\n\n        // Variable to store the total weight of the MST\n        let totalWeight = 0;\n\n        // Iterate V times to include all vertices in the MST\n        for (let count = 0; count < V; count++) {\n            // Pick the minimum key vertex from the set of vertices not yet included in\n            // MST\n            let u = this.minKey(V, key, inMST);\n\n            // Include the picked vertex in the MST\n            inMST[u] = true;\n\n            // Add its key value to the total weight\n            totalWeight += key[u];\n\n            // Update the key values of adjacent vertices of the picked vertex\n            for (let edge of adj[u]) {\n                const [v, weight] = edge;\n\n                // If v is not in MST and weight of (u,v) is smaller than current key of\n                // v\n                if (!inMST[v] && weight < key[v]) {\n                    key[v] = weight;\n                }\n            }\n        }\n\n        return totalWeight;\n    }\n\n    /**\n     * Utility function to find the vertex with the minimum key value from the set of\n     * vertices not yet included in MST.\n     *\n     * @param {number} V - Number of vertices\n     * @param {number[]} key - Array storing the minimum weight to include each vertex\n     * @param {boolean[]} inMST - Array indicating whether a vertex is included in MST\n     * @returns {number} - The index of the vertex with the minimum key value\n     */\n    minKey(V, key, inMST) {\n        let min = Infinity;\n        let minIndex = -1;\n\n        for (let v = 0; v < V; v++) {\n            if (!inMST[v] && key[v] < min) {\n                min = key[v];\n                minIndex = v;\n            }\n        }\n\n        return minIndex;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}