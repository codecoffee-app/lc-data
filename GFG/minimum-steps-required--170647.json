{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714007,
            "title": "Minimum Steps Required",
            "titleSlug": "minimum-steps-required--170647",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>str</strong> consisting of only two characters <strong>&#39;a&#39;</strong>&nbsp;and <strong>&#39;b&#39;</strong>. You need to find the minimum steps required to make the string empty by removing&nbsp;consecutive <strong>a&#39;s</strong> and <strong>b&#39;s</strong>.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">str = &quot;bbaaabb&quot;</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">2</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">Operation 1: Removal of all <strong>a&#39;s</strong> modifies str to &quot;bbbb&quot;.\r\nOperation 2: Removal of all remaining <strong>b&#39;s</strong> makes str\r\nempty.\r\nTherefore, the minimum number of operations required\r\nis 2.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nstr = &quot;aababaa&quot;\r\n<strong>Output:</strong>\r\n3\r\n<strong>Explanation:</strong>\r\nOperation 1: Removal of b&#39;s modifies str to &quot;aaabaa&quot;.\r\nOperation 2: Removal of b&#39;s modifies str = &quot;aaaaa&quot;.\r\nOperation 3: Removal of all remaining a&#39;s makes str \r\nempty.\r\nTherefore, the minimum number of operations required \r\nis 3.</span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\r\n\r\n<p><span style=\"font-size:18px\">You need to complete the function <strong>minSteps()&nbsp;</strong>which takes a string <strong>str&nbsp;</strong>as the only input parameter and returns an integer, denoting the minimum steps required to make the string empty.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Expected Time Complexity:&nbsp;</span></strong><span style=\"font-size:18px\">O(N), where N = length of string <strong>str<br />\r\nExpected Space Complexity:&nbsp;</strong>O(1)</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Constraints:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">1 &lt;= str.length() &lt;= 10<sup>5</sup></span></li>\r\n\t<li><span style=\"font-size:18px\">&#39;a&#39; &lt;= str[i] &lt;= &#39;b&#39;&nbsp;</span></li>\r\n</ul>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` consisting of only the characters 'a' and 'b', determine the minimum number of operations required to empty the string. In each operation, you can remove a consecutive sequence of either 'a's or 'b's.",
                "constraints": [
                    "1 <= str.length() <= 10^5",
                    "'a' <= str[i] <= 'b'"
                ],
                "testcases": [
                    {
                        "input": "bbaaabb",
                        "output": "2",
                        "explanation": "First, remove all consecutive 'a's, resulting in \"bbbb\". Then, remove all the remaining 'b's, emptying the string. This takes 2 operations."
                    },
                    {
                        "input": "aababaa",
                        "output": "3",
                        "explanation": "First, remove all consecutive 'b's, resulting in \"aaabaa\". Then, remove the 'b' in the middle, resulting in \"aaaaa\". Finally, remove all the 'a's, emptying the string. This takes 3 operations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">Use Greedy approach. The idea is use the count of consecutive occurrences of the character.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to find the minimum number of steps required\nint minSteps(string str) {\n    int cnt=1; // Initialize the count of steps as 1\n\n    // Iterate through the string starting from the second character\n    for(int i=1;i<str.size();i++){\n        // If the current character is different from the previous character\n        if(str[i]!=str[i-1]){\n            cnt++; // Increment the count of steps\n        }\n    }\n    \n    // Return the minimum number of steps required\n    return cnt/2 + 1;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n\tint minSteps(String str) {\r\n\t\tint cnt=1;\r\n        for(int i=1;i<str.length();i++){\r\n            if(str.charAt(i)!=str.charAt(i-1)){\r\n                cnt++;\r\n            }\r\n        }\r\n        return cnt/2 + 1;\r\n\t}\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# We import the math module to use the floor function\nimport math\n\nclass Solution:\n\n    # Function to calculate minimum steps\n    def minSteps(self, str : str) -> int:\n\n        # Counter to keep track of steps taken\n        cnt=1;\n\n        # Length of the input string\n        n = len(str)\n\n        # Loop through the string characters\n        for i in range(n-1):\n            # If the current character is different from the previous character\n            if str[i]!=str[i-1]:\n                # Increment the counter by 1\n                cnt+=1\n\n        # Calculate the minimum steps needed by dividing the counter by 2 and rounding down, then adding 1\n        return math.floor(cnt/2) + 1;",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {string} str\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to find the minimum number of operations to make the string empty.\r\n    minSteps(str)\r\n    {\r\n        let cnt = 1;\r\n        let n = str.length;\r\n\r\n        for(let i = 1; i < n; i++) {\r\n            if(str[i] !== str[i - 1]) {\r\n                cnt++;\r\n            }\r\n        }\r\n\r\n        return Math.floor(cnt / 2) + 1;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}