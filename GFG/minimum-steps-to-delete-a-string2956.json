{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704136,
            "title": "Minimum steps to delete a string",
            "titleSlug": "minimum-steps-to-delete-a-string2956",
            "content": "<p><span style=\"font-size: 18px;\">Given string <strong>s </strong>containing characters as integers only, the task is to delete all characters of this string in a minimum number of steps wherein one step you can delete the substring which is a palindrome. After deleting a substring remaining parts are concatenated.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = \"2553432\"\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: In first step remove \"55\", \nthen string becomes \"23432\" which is a \npalindrome<strong>.</strong></span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"1234\"\n<strong>Output: </strong>4\n<strong>Explanation</strong>: Remove each character in \neach step</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>minStepToDeleteString</code>()&nbsp;</strong>which string <strong>s </strong>as input parameters and returns the integer value<br /><br /><strong>Expected Time Complexity:</strong> O(<strong>|s|<sup>3</sup></strong>)<br /><strong>Expected Auxiliary Space:</strong> O(<strong>|s|<sup>2</sup></strong>)<br /><br /><strong>Constraints:</strong><br />1 &le; |s| &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` containing only integer characters, determine the minimum number of steps required to delete the entire string. In each step, you can delete a palindromic substring. After deleting a substring, the remaining parts of the string are concatenated.",
                "constraints": [
                    "1 \u2264 |s| \u2264 1000"
                ],
                "testcases": [
                    {
                        "input": "2553432",
                        "output": "2",
                        "explanation": "In the first step, remove \"55\". The remaining string becomes \"23432\", which is a palindrome. Therefore, it takes two steps."
                    },
                    {
                        "input": "1234",
                        "output": "4",
                        "explanation": "Each character must be removed individually since there are no palindromic substrings longer than length 1. Therefore it takes 4 steps."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can solve this problem using Dynamic programming. Let dp[i][j] denotes the number of steps it takes to delete the substring s[i, j]. Each character will be deleted alone or as part of some substring so in the first case we will delete the character itself and call subproblem (i+1, j). In the second case we will iterate over all occurrence of the current character in right side, if K is the index of one such occurrence then the problem will reduce to two subproblems (i+1, K &ndash; 1) and (K+1, j). We can reach to this subproblem (i+1, K-1) because we can just delete the same character and call for mid substring. We need to take care of a case when first two characters are same in that case we can directly reduce to the subproblem (i+2, j)</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\r\n\r\n\tpublic:\r\n\tint minStepToDeleteString(string str) \r\n\t{ \r\n\t    int N = str.length(); \r\n\t  \r\n\t    //  declare dp array and initialize it with 0s \r\n\t    int dp[N + 1][N + 1]; \r\n\t    for (int i = 0; i <= N; i++) \r\n\t        for (int j = 0; j <= N; j++) \r\n\t            dp[i][j] = 0; \r\n\t  \r\n\t    // loop for substring length we are considering \r\n\t    for (int len = 1; len <= N; len++) \r\n\t    { \r\n\t        // loop with two variables i and j, denoting \r\n\t        // starting and ending of substrings \r\n\t        for (int i = 0, j = len - 1; j < N; i++, j++) \r\n\t        { \r\n\t            // If substring length is 1, then 1 step \r\n\t            // will be needed \r\n\t            if (len == 1) \r\n\t                dp[i][j] = 1; \r\n\t            else\r\n\t            { \r\n\t                // delete the ith char individually \r\n\t                // and assign result for subproblem (i+1,j) \r\n\t                dp[i][j] = 1 + dp[i + 1][j]; \r\n\t  \r\n\t                // if current and next char are same, \r\n\t                // choose min from current and subproblem \r\n\t                // (i+2,j) \r\n\t                if (str[i] == str[i + 1]) \r\n\t                    dp[i][j] = min(1 + dp[i + 2][j], dp[i][j]); \r\n\t  \r\n\t                /*  loop over all right characters and suppose \r\n\t                    Kth char is same as ith character then \r\n\t                    choose minimum from current and two \r\n\t                    substring after ignoring ith and Kth char */\r\n\t                for (int K = i + 2; K <= j; K++) \r\n\t                    if (str[i] == str[K]) \r\n\t                        dp[i][j] = min(dp[i+1][K-1] + dp[K+1][j], \r\n\t                                                       dp[i][j]); \r\n\t            } \r\n\t        } \r\n\t    } \r\n\t  \r\n\t    /* Uncomment below snippet to print actual dp tablex \r\n\t    for (int i = 0; i < N; i++, cout << endl) \r\n\t        for (int j = 0; j < N; j++) \r\n\t            cout << dp[i][j] << \" \";    */\r\n\t  \r\n\t    return dp[0][N - 1]; \r\n\t} \r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\r\n\r\n\tpublic int minStepToDeleteString(String str) \r\n\t{ \r\n\t    int N = str.length();\r\n \r\n        // declare dp array and initialize it with 0s\r\n        int[][] dp = new int[N + 1][N + 1];\r\n        for (int i = 0; i <= N; i++)\r\n            for (int j = 0; j <= N; j++)\r\n                dp[i][j] = 0;\r\n \r\n        // loop for substring length we are considering\r\n        for (int len = 1; len <= N; len++) {\r\n             \r\n            // loop with two variables i and j, denoting\r\n            // starting and ending of substrings\r\n            for (int i = 0, j = len - 1; j < N; i++, j++) {\r\n     \r\n                // If substring length is 1, then 1 step\r\n                // will be needed\r\n                if (len == 1)\r\n                    dp[i][j] = 1;\r\n                     \r\n                else {\r\n                    // delete the ith char individually\r\n                    // and assign result for\r\n                    // subproblem (i+1,j)\r\n                    dp[i][j] = 1 + dp[i + 1][j];\r\n \r\n                    // if current and next char are same,\r\n                    // choose min from current and\r\n                    // subproblem (i+2, j)\r\n                    if (str.charAt(i) == str.charAt(i + 1))\r\n                        dp[i][j] = Math.min(1 + dp[i + 2][j],\r\n                                               dp[i][j]);\r\n \r\n                    /* loop over all right characters and\r\n                      suppose Kth char is same as ith\r\n                      character then choose minimum from\r\n                      current and two substring after\r\n                      ignoring ith and Kth char\r\n                     */\r\n                    for (int K = i + 2; K <= j; K++)\r\n                        if (str.charAt(i) == str.charAt(K))\r\n                            dp[i][j] = Math.min(\r\n                                         dp[i + 1][K - 1] +\r\n                                        dp[K + 1][j], dp[i][j]);\r\n                }\r\n            }\r\n        }\r\n \r\n        /* Uncomment below snippet to print actual dp tablex\r\n          \r\n           for (int i = 0; i < N; i++){\r\n           System.out.println();\r\n           for (int j = 0; j < N; j++)\r\n           System.out.print(dp[i][j] + \" \");\r\n           }\r\n            */\r\n             \r\n        return dp[0][N - 1];\r\n\t} \r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#User function Template for Python\nclass Solution:\n\n    def minStepToDeleteString(self, str):\n        N = len(str)\n\n        # declare dp array and initialize\n        # it with 0s\n        dp = [[0 for x in range(N + 1)] for y in range(N + 1)]\n\n        # loop for substring length\n        # we are considering\n        for l in range(1, N + 1):\n\n            # loop with two variables i and j, denoting\n            # starting and ending of substrings\n            i = 0\n            j = l - 1\n            while j < N:\n\n                # If substring length is 1,\n                # then 1 step will be needed\n                if (l == 1):\n                    dp[i][j] = 1\n                else:\n\n                    # delete the ith char individually\n                    # and assign result for subproblem (i+1,j)\n                    dp[i][j] = 1 + dp[i + 1][j]\n\n                    # if current and next char are\n                    # same, choose min from current\n                    # and subproblem (i+2,j)\n                    if (str[i] == str[i + 1]):\n                        dp[i][j] = min(1 + dp[i + 2][j], dp[i][j])\n                    ''' loop over all right characters and suppose\n                        Kth char is same as ith character then\n                        choose minimum from current and two\n                        substring after ignoring ith and Kth char '''\n                    for K in range(i + 2, j + 1):\n                        if (str[i] == str[K]):\n                            dp[i][j] = min(dp[i + 1][K - 1] + dp[K + 1][j],\n                                           dp[i][j])\n\n                i += 1\n                j += 1\n\n        # Uncomment below snippet to print\n        # actual dp tablex\n        # for (int i = 0; i < N; i++, cout << endl)\n        # for (int j = 0; j < N; j++)\n        #     cout << dp[i][j] << \" \";\n\n        return dp[0][N - 1]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {number}\n*/\n\nclass Solution {\n    minStepToDeleteString(s) {\n        const N = s.length;\n        const dp = Array(N + 1).fill(\"\").map(() => Array(N + 1).fill(0));\n\n        for (let l = 1; l <= N; l++) {\n            let i = 0;\n            let j = l - 1;\n            while (j < N) {\n                if (l === 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 1 + dp[i + 1][j];\n                    if (s[i] === s[i + 1]) {\n                        dp[i][j] = Math.min(1 + dp[i + 2][j], dp[i][j]);\n                    }\n                    for (let K = i + 2; K <= j; K++) {\n                        if (s[i] === s[K]) {\n                            dp[i][j] = Math.min(dp[i + 1][K - 1] + dp[K + 1][j], dp[i][j]);\n                        }\n                    }\n                }\n                i++;\n                j++;\n            }\n        }\n\n        return dp[0][N - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}