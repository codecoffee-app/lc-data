{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703228,
            "title": "Minimum steps to get desired array",
            "titleSlug": "minimum-steps-to-get-desired-array5519",
            "content": "<p><span >Consider an array with all values zero. We can perform the following operations on the array :<br />&nbsp;<strong> 1. Incremental operations:</strong> Choose 1 element from the array and increment its value by 1.<br />&nbsp;<strong> 2. Doubling operation:</strong> Double the values of all the elements of an array.<br />Given an integer array <strong>arr[]</strong>. Return the least possible number of operations needed to change the original array containing only <strong>zeroes</strong> to arr[].</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [16, 16, 16]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> First apply an incremental operation to each element. Then apply the doubling operation four times. Total number of operations is 3+4 = 7.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 3]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> To get the target array from [0, 0], we first increment both elements by 1 (2 operations), then double the array (1 operation). Finally increment second element (1 more operation). Total number of operations is 2+1+1 = 4.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n*log(max(arr[i])))<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />0 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array initialized with all zeros, determine the minimum number of operations to transform it into a target array `arr[]`. You can perform two types of operations:\n\n1.  **Incremental Operation:** Increment the value of a single element in the array by 1.\n2.  **Doubling Operation:** Double the value of every element in the array.\n\nReturn the fewest operations needed to achieve the target array.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[16, 16, 16]",
                        "output": "7",
                        "explanation": "Start with [0, 0, 0]. Increment each element once (3 operations).  Then double the array four times (4 operations). Total operations: 3 + 4 = 7."
                    },
                    {
                        "input": "[2, 3]",
                        "output": "4",
                        "explanation": "Start with [0, 0]. Increment both elements by 1 (2 operations). Double the array (1 operation). Increment the second element by 1 (1 operation). Total operations: 2 + 1 + 1 = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Think about the reverse process, how to change the given target array to an array containing only zeroes.</span></p>",
            "<p><span >If all the elements are even, divide all elements by 2 and increment the result by 1. </span><span >If not, find all odd elements, and make them even by reducing them by 1. and for every reduction, increment the result by 1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count the minimum operations required\n    int countMinOperations(vector<int>& arr) {\n        // Sort the array to process elements in descending order\n        sort(arr.begin(), arr.end());\n        int ans = 0;\n\n        while (true) {\n            bool allZero = true; // Flag to check if all elements are zero\n\n            // Iterate from the largest to the smallest element\n            for (int i = arr.size() - 1; i >= 0; --i) {\n                if (arr[i] % 2 == 1) {\n                    arr[i]--; // Decrement odd elements\n                    ans++;    // Count the decrement operation\n                }\n                if (arr[i] != 0)\n                    allZero = false; // Check if the element is non-zero\n                arr[i] /= 2;         // Halve the element\n            }\n\n            if (allZero)\n                break; // Break if all elements are zero\n            ans++;     // Count the halving operation\n        }\n        return ans; // Return the total number of operations\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to count the minimum operations required\n    int countMinOperations(int[] arr) {\n        Arrays.sort(arr); // Sort the array to process elements\n        int ans = 0;\n\n        while (true) {\n            boolean allZero = true; // Flag to check if all elements are zero\n\n            // Iterate from the largest to the smallest element\n            for (int i = arr.length - 1; i >= 0; i--) {\n                if (arr[i] % 2 == 1) {\n                    arr[i]--; // Decrement odd elements\n                    ans++;    // Count the decrement operation\n                }\n                if (arr[i] != 0) allZero = false; // Check if the element is non-zero\n                arr[i] /= 2;                      // Halve the element\n            }\n\n            if (allZero) break; // Break if all elements are zero\n            ans++;              // Count the halving operation\n        }\n        return ans; // Return the total number of operations\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def countMinOperations(self, arr):\n        arr.sort()  # Sort the array to process elements\n        ans = 0\n        while True:\n            all_zero = True  # Flag to check if all elements are zero\n            for i in range(len(arr) - 1, -1, -1):\n                if arr[i] % 2 == 1:\n                    arr[i] -= 1  # Decrement odd elements\n                    ans += 1  # Count the decrement operation\n                if arr[i] != 0:\n                    all_zero = False  # Check if the element is non-zero\n                arr[i] //= 2  # Halve the element\n            if all_zero:\n                break  # Break if all elements are zero\n            ans += 1  # Count the halving operation\n        return ans  # Return the total number of operations\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Solution class with the method to count minimum operations\nclass Solution {\n    // Method to count the minimum number of operations required\n    countMinOperations(arr) {\n        // Sort the array in ascending order\n        arr.sort((a, b) => a - b);\n        let ans = 0; // Initialize operation count\n\n        // Loop until all elements become zero\n        while (true) {\n            // Process each element from the end of the array\n            for (let i = arr.length - 1; i >= 0; i--) {\n                // Decrement odd elements and count the operation\n                if (arr[i] % 2 === 1) {\n                    arr[i]--;\n                    ans++;\n                }\n                // Halve the element\n                arr[i] = Math.floor(arr[i] / 2);\n            }\n            // Check if the largest element is zero; if so, exit the loop\n            if (arr[arr.length - 1] === 0) break;\n            // Count an additional operation for the halving step\n            ans++;\n        }\n        return ans; // Return the total number of operations\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}