{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706233,
            "title": "Minimum steps to make product equal to one",
            "titleSlug": "minimum-steps-to-make-product-equal-to-one",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr[]</strong> containing <strong>N</strong> integers. In one step, any element of the array can either be increased or decreased by one. Find minimum steps required such that the product of the array elements becomes <strong>1</strong>. </span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 3\narr[] = {-2, 4, 0}\n<strong>Output:\n</strong>5\n<strong>Explanation:</strong>\nWe can change -2 to -1, 0 to -1 and 4 to 1.\nSo, a total of 5 steps are required\nto update the elements such that\nthe product of the final array is 1.</span> \n</pre>\n\n<div><span style=\"font-size:18px\"><strong>Example 2:</strong></span></div>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 3\narr[] = {-1, 1, -1} \n<strong>Output :</strong>\n0</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\nProduct of the array is already 1.\nSo, we don&#39;t need to change anything.</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>makeProductOne()</strong>&nbsp;which takes an integer N and an array arr of size N as input and returns the minimum steps required.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup><br />\n-10<sup>3</sup> &le; arr[i] &le; 10<sup>3</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` containing `N` integers, find the minimum number of steps required to make the product of all elements in the array equal to 1. In one step, any element of the array can be increased or decreased by one.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^3 <= arr[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr[] = {-2, 4, 0}",
                        "output": "5",
                        "explanation": "Change -2 to -1 (1 step), 4 to 1 (3 steps), and 0 to -1 (1 step). Total steps = 1 + 3 + 1 = 5."
                    },
                    {
                        "input": "N = 3\narr[] = {-1, 1, -1}",
                        "output": "0",
                        "explanation": "The product of the array elements is already 1 (-1 * 1 * -1 = 1). Therefore, no steps are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The product of the array elements can only be equal to <strong>1</strong> when there are only 1s and -1s in the array and the count of -1s is even. </span></p>",
            "<p><span style=\"font-size:18px\">Now, all the positive numbers can be reduced to <strong>1</strong> because they are more closer to <strong>1</strong> than they are closer to <strong>-1</strong>.<br />\nSimilarly, all the negative numbers can be updated to <strong>-1</strong>. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int makeProductOne(int arr[], int N) {\n        // To store the count of 0s, positive \n        // and negative numbers \n        int positive = 0, \n            negative = 0, \n            zero = 0; \n      \n        // To store the ans \n        int step = 0; \n      \n        for (int i = 0; i < N; i++) { \n      \n            // If array element is \n            // equal to 0 \n            if (arr[i] == 0) { \n                zero++; \n            } \n      \n            // If array element is \n            // a negative number \n            else if (arr[i] < 0) { \n                negative++; \n      \n                // Extra cost needed \n                // to make it -1 \n                step = step + (-1 - arr[i]); \n            } \n      \n            // If array element is \n            // a positive number \n            else { \n                positive++; \n      \n                // Extra cost needed \n                // to make it 1 \n                step = step + (arr[i] - 1); \n            } \n        } \n      \n        // Now the array will \n        // have -1, 0 and 1 only \n        if (negative % 2 == 0) { \n      \n            // As count of negative is even \n            // so we will change all 0 to 1 \n            // total cost here will be \n            // count of 0s \n            step = step + zero; \n        } \n        else { \n      \n            // If there are zeroes present \n            // in the array \n            if (zero > 0) { \n      \n                // Change one zero to -1 \n                // and rest of them to 1 \n                // Total cost here will \n                // be count of '0' \n                step = step + zero; \n            } \n      \n            // If there are no zeros in the array \n            else { \n      \n                // As no 0s are availabe so we \n                // have to change one -1 to 1 \n                // which will cost 2 to \n                // change -1 to 1 \n                step = step + 2; \n            } \n        } \n      \n        return step; \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int makeProductOne(int[] arr, int N) {\n        \n        // To store the count of 0s, positive  \n        // and negative numbers  \n        int positive = 0,  \n            negative = 0,  \n            zero = 0;  \n      \n        // To store the ans  \n        int step = 0;  \n      \n        for (int i = 0; i < N; i++)  \n        {  \n      \n            // If array element is  \n            // equal to 0  \n            if (arr[i] == 0)  \n            {  \n                zero++;  \n            }  \n      \n            // If array element is  \n            // a negative number  \n            else if (arr[i] < 0)  \n            {  \n                negative++;  \n      \n                // Extra cost needed  \n                // to make it -1  \n                step = step + (-1 - arr[i]);  \n            }  \n      \n            // If array element is  \n            // a positive number  \n            else \n            {  \n                positive++;  \n      \n                // Extra cost needed  \n                // to make it 1  \n                step = step + (arr[i] - 1);  \n            }  \n        }  \n      \n        // Now the array will  \n        // have -1, 0 and 1 only  \n        if (negative % 2 == 0)  \n        {  \n      \n            // As count of negative is even  \n            // so we will change all 0 to 1  \n            // total cost here will be  \n            // count of 0s  \n            step = step + zero;  \n        }  \n        else \n        {  \n      \n            // If there are zeroes present  \n            // in the array  \n            if (zero > 0) \n            {  \n      \n                // Change one zero to -1  \n                // and rest of them to 1  \n                // Total cost here will  \n                // be count of '0'  \n                step = step + zero;  \n            }  \n      \n            // If there are no zeros in the array  \n            else \n            {  \n      \n                // As no 0s are availabe so we  \n                // have to change one -1 to 1  \n                // which will cost 2 to  \n                // change -1 to 1  \n                step = step + 2;  \n            }  \n        }  \n      \n        return step;  \n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def makeProductOne(self, arr, N):\n        # To store the count of 0s, positive \n        # and negative numbers \n        positive = 0 \n        negative = 0 \n        zero = 0\n      \n        # To store the ans \n        step = 0\n      \n        for i in range(N): \n              \n            # If array element is \n            # equal to 0 \n            if (arr[i] == 0): \n                zero += 1\n                  \n            # If array element is \n            # a negative number \n            elif (arr[i] < 0): \n      \n                negative += 1\n      \n                # Extra cost needed \n                # to make it -1 \n                step = step + (-1 - arr[i]) \n      \n            # If array element is \n            # a positive number \n            else: \n                positive += 1; \n      \n                # Extra cost needed \n                # to make it 1 \n                step = step + (arr[i] - 1)\n      \n        # Now the array will \n        # have -1, 0 and 1 only \n        if (negative % 2 == 0): \n      \n            # As count of negative is even \n            # so we will change all 0 to 1 \n            # total cost here will be \n            # count of 0s \n            step = step + zero\n      \n        else: \n      \n            # If there are zeroes present \n            # in the array \n            if (zero > 0): \n      \n                # Change one zero to -1 \n                # and rest of them to 1 \n                # Total cost here will \n                # be count of '0' \n                step += zero\n      \n            # If there are no zeros in the array \n            else: \n      \n                # As no 0s are availabe so we \n                # have to change one -1 to 1 \n                # which will cost 2 to \n                # change -1 to 1 \n                step += 2\n        return step\n        ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\n//Back-end complete function Template for Java\n\nclass Solution {\n    makeProductOne(arr, N) {\n        \n        // To store the count of 0s, positive  \n        // and negative numbers  \n        let positive = 0,  \n            negative = 0,  \n            zero = 0;  \n      \n        // To store the ans  \n        let step = 0;  \n      \n        for (let i = 0; i < N; i++)  \n        {  \n      \n            // If array element is  \n            // equal to 0  \n            if (arr[i] == 0)  \n            {  \n                zero++;  \n            }  \n      \n            // If array element is  \n            // a negative number  \n            else if (arr[i] < 0)  \n            {  \n                negative++;  \n      \n                // Extra cost needed  \n                // to make it -1  \n                step = step + (-1 - arr[i]);  \n            }  \n      \n            // If array element is  \n            // a positive number  \n            else \n            {  \n                positive++;  \n      \n                // Extra cost needed  \n                // to make it 1  \n                step = step + (arr[i] - 1);  \n            }  \n        }  \n      \n        // Now the array will  \n        // have -1, 0 and 1 only  \n        if (negative % 2 == 0)  \n        {  \n      \n            // As count of negative is even  \n            // so we will change all 0 to 1  \n            // total cost here will be  \n            // count of 0s  \n            step = step + zero;  \n        }  \n        else \n        {  \n      \n            // If there are zeroes present  \n            // in the array  \n            if (zero > 0) \n            {  \n      \n                // Change one zero to -1  \n                // and rest of them to 1  \n                // Total cost here will  \n                // be count of '0'  \n                step = step + zero;  \n            }  \n      \n            // If there are no zeros in the array  \n            else \n            {  \n      \n                // As no 0s are availabe so we  \n                // have to change one -1 to 1  \n                // which will cost 2 to  \n                // change -1 to 1  \n                step = step + 2;  \n            }  \n        }  \n      \n        return step;  \n    }\n};\n",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int makeProductOne(int[] arr, int N)\n    {\n        // To store the count of 0s, positive \n        // and negative numbers \n        int positive = 0, \n            negative = 0, \n            zero = 0; \n      \n        // To store the ans \n        int step = 0; \n      \n        for (int i = 0; i < N; i++) { \n      \n            // If array element is \n            // equal to 0 \n            if (arr[i] == 0) { \n                zero++; \n            } \n      \n            // If array element is \n            // a negative number \n            else if (arr[i] < 0) { \n                negative++; \n      \n                // Extra cost needed \n                // to make it -1 \n                step = step + (-1 - arr[i]); \n            } \n      \n            // If array element is \n            // a positive number \n            else { \n                positive++; \n      \n                // Extra cost needed \n                // to make it 1 \n                step = step + (arr[i] - 1); \n            } \n        } \n      \n        // Now the array will \n        // have -1, 0 and 1 only \n        if (negative % 2 == 0) { \n      \n            // As count of negative is even \n            // so we will change all 0 to 1 \n            // total cost here will be \n            // count of 0s \n            step = step + zero; \n        } \n        else { \n      \n            // If there are zeroes present \n            // in the array \n            if (zero > 0) { \n      \n                // Change one zero to -1 \n                // and rest of them to 1 \n                // Total cost here will \n                // be count of '0' \n                step = step + zero; \n            } \n      \n            // If there are no zeros in the array \n            else { \n      \n                // As no 0s are availabe so we \n                // have to change one -1 to 1 \n                // which will cost 2 to \n                // change -1 to 1 \n                step = step + 2; \n            } \n        } \n      \n        return step; \n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}