{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704139,
            "title": "Minimum steps to minimize n as per given condition",
            "titleSlug": "minimum-steps-to-minimize-n-as-per-given-condition0618",
            "content": "<p><span style=\"font-size: 18px;\">Given a number <strong>N</strong>, the task is to count minimum steps to minimize it to 1 according to the following criteria:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">If N is divisible by 2 then you may reduce N to N/2.</span></li>\n<li><span style=\"font-size: 18px;\">If N is divisible by 3 then you may reduce N to N/3.</span></li>\n<li><span style=\"font-size: 18px;\">Otherwise, Decrement N by 1.</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: N = 10\n<strong>Output:</strong> 3\n<strong>Explanation</strong>: 10 - 1 = 9 / 3 = 3 / 3 = 1</span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 1\n<strong>Output: </strong>0\n<strong>Explanation</strong>: N is 1</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>minSteps</code>()&nbsp;</strong>which takes <strong>N</strong> as input parameters and returns the integer value<br /><br /><strong>Expected Time Complexity:</strong> O(<strong>N</strong>)<br /><strong>Expected Auxiliary Space:</strong> O(<strong>N</strong>)<br /><br /><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<pre>\nf(n) = 1 + f(n-1)\nf(n) = min(1 + f(n-1), 1 + f(n/2)) // if n is divisible by 2\nf(n) = min(1 + f(n-1), 1 + f(n/3)) // if n is divisible by 3</pre>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n\n  public:\n  //Function to find minimum number of steps required to reach N.\n  int minSteps(int N) {\n\n    //creating a table to store minimum steps required to reach each number.\n    int table[N + 1];\n\n    //initializing the table with default values.\n    for (int i = 0; i <= N; i++)\n      table[i] = N - i;\n\n    //iterating backwards from N-1 to 1.\n    for (int i = N - 1; i >= 1; i--) {\n\n      //taking minimum of current value and next value + 1.\n      table[i] = min(table[i], table[i + 1] + 1);\n\n      //taking minimum of current value and double value + 1 if it is less than or equal to N.\n      if (i * 2 <= N)\n        table[i] = min(table[i], table[i * 2] + 1);\n\n      //taking minimum of current value and triple value + 1 if it is less than or equal to N.\n      if (i * 3 <= N)\n        table[i] = min(table[i], table[i * 3] + 1);\n    }\n\n    //returning the minimum steps required to reach 1.\n    return table[1];\n  }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\n\nclass Solution:\n    # Function to find the minimum number of steps required to reach N.\n    def minSteps(self, N):\n        table = []\n        # Initializing the list with the maximum possible steps for each number.\n        for i in range(N + 1):\n            table.append(N - i)\n\n        # Updating the table starting from N-1 down to 1.\n        for i in range(N - 1, 0, -1):\n            # Updating the minimum steps required if i+1 is chosen as the next step.\n            table[i] = min(table[i], table[i + 1] + 1)\n            # Checking if multiplying i by 2 is a valid step and updating the minimum steps if so.\n            if i * 2 <= N:\n                table[i] = min(table[i], table[i * 2] + 1)\n            # Checking if multiplying i by 3 is a valid step and updating the minimum steps if so.\n            if i * 3 <= N:\n                table[i] = min(table[i], table[i * 3] + 1)\n\n        # Returning the minimum steps required to reach 1.\n        return table[1]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    //Function to find minimum steps to reach N from 1.\n    public int minSteps(int N)\n    {\n        //creating a table to store minimum steps required to reach each number.\n        int[] table = new int[N + 1];\n\n        //initializing the table with default values.\n        for (int i = 0; i <= N; i++)\n            table[i] = N - i;\n\n        //iterating backwards from N-1 to 1.\n        for (int i = N - 1; i >= 1; i--)\n        {\n            //taking minimum of current value and next value + 1.\n            table[i] = Math.Min(table[i], table[i + 1] + 1);\n\n            //taking minimum of current value and double value + 1 if it is less than or equal to N.\n            if (i * 2 <= N)\n                table[i] = Math.Min(table[i], table[i * 2] + 1);\n\n            //taking minimum of current value and triple value + 1 if it is less than or equal to N.\n            if (i * 3 <= N)\n                table[i] = Math.Min(table[i], table[i * 3] + 1);\n        }\n\n        //returning the minimum steps required to reach 1.\n        return table[1];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for Javascript\n\n/**\n * @param {number} N\n * @return {number}\n */\nclass Solution {\n  minSteps(N) {\n    //code here\n    let table = new Array(N+1);\n    for (let i = 0; i <= N; i++) \n        table[i] = N - i; \n           \n    for (let i = N - 1; i >= 1; i--) { \n        table[i] = Math.min(table[i], table[i+1] + 1);\n        if (i*2 <= N) \n            table[i] = Math.min(table[i], table[i*2] + 1); \n        if (i*3 <= N) \n            table[i] = Math.min(table[i], table[i*3] + 1); \n    } \n\n    return table[1]; \n  }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}