{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702831,
            "title": "Minimum Steps",
            "titleSlug": "minimum-steps1159",
            "content": "<p><span >You are standing at the bottom of a staircase with exactly <strong>n</strong> stairs. You can take steps of size <strong>p</strong> or <strong>q</strong> at a time. Your task is to calculate the minimum number of steps required to reach exactly the <strong>n-th</strong> stair using only these step sizes. You can take any combination of steps of size <strong>p</strong> and <strong>q</strong> to achieve this.</span></p>\n<p><span >If it is <strong>not possible</strong> to reach exactly <strong>n</strong> stairs using any combination of steps of size <strong>p</strong> and <strong>q</strong>, return <strong>-1</strong>.</span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Examples:</strong></span></p>\n<pre><span ><span style=\"font-family: arial, helvetica, sans-serif;\"><strong>Input: </strong>n = 15, p = 2, q = 3\n<strong>Output: </strong>3\n<strong>Explanation: </strong></span>One way to reach 15 stairs is by taking three steps of size 8, 4, and 3 (i.e., <code>2 + 2 + 2 + 3 + 3 + 3</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">). Another way is </span><code>9, 3, 3</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">. Both take exactly 3 steps.</span></span></pre>\n<pre><span ><span style=\"font-family: arial, helvetica, sans-serif;\"><strong>Input: </strong>n = 19, p = 4, q = 3\n<strong>Output: </strong>2\n<strong>Explanation: </strong></span>To reach 19 stairs, you can take two steps: one of size 16 and one of size 3 (<code>4 + 4 + 4 + 4 + 3</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">). This totals to 19 stairs in 2 steps.</span></span></pre>\n<p dir=\"ltr\"><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p dir=\"ltr\"><span style=\"font-family: arial, helvetica, sans-serif; font-size: 14pt;\"><strong>Constraints:</strong><br />1 &le; n, p, q &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are at the bottom of a staircase with 'n' stairs. You can climb 'p' or 'q' stairs at a time. Determine the minimum number of steps to reach the 'n-th' stair using any combination of step sizes 'p' and 'q'. If reaching 'n' stairs is impossible, return -1.",
                "constraints": [
                    "1 <= n, p, q <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 15, p = 2, q = 3",
                        "output": "3",
                        "explanation": "One optimal way to reach 15 stairs is by taking steps of sizes 2 and 3. For example, six steps of size 2 and three steps of size 3, requiring a total of 3 steps."
                    },
                    {
                        "input": "n = 19, p = 4, q = 3",
                        "output": "5",
                        "explanation": "To reach 19 stairs, we can take 4 steps of size 4 and 1 step of size 3 totaling 5 steps."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use Breadth-First Search (BFS) to explore all possible ways to reach exactly <code>n</code> stairs by repeatedly adding powers of <code>p</code> and <code>q</code>. Track the minimum steps needed to reach each stair level. If you reach exactly <code>n</code>, return the steps; otherwise, return <code>-1</code>.</span></p>",
            "<p>For a dynamic programming approach, create a <code>dp</code> array where <code>dp[i]</code> represents the minimum number of steps required to reach exactly <code>i</code> stairs. Initialize <code>dp[0]</code> to <code>0</code> and other values to infinity. Update <code>dp[i]</code> by checking if you can reach <code>i</code> from <code>i - p</code> or <code>i - q</code>, and find the minimum steps needed. If <code>dp[n]</code> remains infinity, return <code>-1</code>.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int moves(int n, int p, int q) {\n        // Edge case when n is 0\n        if (n == 0)\n            return 0;\n\n        // BFS to find the minimum number of steps\n        vector<int> visited(n + 1,\n                            -1); // Array to store minimum steps to reach each stair\n        queue<pair<int, int>> qSteps; // Queue to perform BFS (stair, steps)\n\n        qSteps.push({0, 0}); // Start from stair 0 with 0 steps\n        visited[0] = 0;\n\n        while (!qSteps.empty()) {\n            int curr_stair = qSteps.front().first;\n            int curr_steps = qSteps.front().second;\n            qSteps.pop();\n\n            // Try to reach next stair by using power p\n            if (curr_stair + p <= n && visited[curr_stair + p] == -1) {\n                visited[curr_stair + p] = curr_steps + 1;\n                qSteps.push({curr_stair + p, curr_steps + 1});\n            }\n\n            // Try to reach next stair by using power q\n            if (curr_stair + q <= n && visited[curr_stair + q] == -1) {\n                visited[curr_stair + q] = curr_steps + 1;\n                qSteps.push({curr_stair + q, curr_steps + 1});\n            }\n\n            // If we reach exactly n stairs, return the steps taken\n            if (visited[n] != -1) {\n                return visited[n];\n            }\n        }\n\n        // If it's not possible to reach exactly n stairs\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to calculate the minimum moves to reach the nth stair\n    public int moves(int n, int p, int q) {\n        // If there are no stairs, return 0 moves\n        if (n == 0) return 0;\n\n        // Array to store visited stairs\n        int[] visited = new int[n + 1];\n        Arrays.fill(visited, -1); // Mark all as unvisited\n        Queue<int[]> qSteps = new LinkedList<>();\n        qSteps.offer(new int[] {0, 0}); // Start from stair 0 with 0 moves\n        visited[0] = 0;\n\n        // BFS traversal to find the minimum moves\n        while (!qSteps.isEmpty()) {\n            int[] curr = qSteps.poll();\n            int currStair = curr[0];\n            int currSteps = curr[1];\n\n            // Move p steps\n            if (currStair + p <= n && visited[currStair + p] == -1) {\n                visited[currStair + p] = currSteps + 1;\n                qSteps.offer(new int[] {currStair + p, currSteps + 1});\n            }\n\n            // Move q steps\n            if (currStair + q <= n && visited[currStair + q] == -1) {\n                visited[currStair + q] = currSteps + 1;\n                qSteps.offer(new int[] {currStair + q, currSteps + 1});\n            }\n\n            // If we reached exactly the nth stair, return the minimum moves\n            if (visited[n] != -1) {\n                return visited[n];\n            }\n        }\n\n        // If it's not possible to reach exactly the nth stair\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import deque\n\n\nclass Solution:\n\n    def moves(self, n, p, q):\n        # Edge case when there are no stairs\n        if n == 0:\n            return 0\n\n        # List to track the minimum steps required to reach each stair\n        visited = [-1] * (n + 1)  # Initialize all stairs as unvisited\n\n        # Queue for BFS (stores stair number and steps taken to reach it)\n        q_steps = deque([(0, 0)])  # Start at stair 0 with 0 steps\n        visited[0] = 0  # Mark the starting point as visited\n\n        # Perform BFS\n        while q_steps:\n            curr_stair, curr_steps = q_steps.popleft()\n\n            # Try moving to the next stair using power p\n            if curr_stair + p <= n and visited[curr_stair + p] == -1:\n                visited[curr_stair + p] = curr_steps + 1\n                q_steps.append((curr_stair + p, curr_steps + 1))\n\n            # Try moving to the next stair using power q\n            if curr_stair + q <= n and visited[curr_stair + q] == -1:\n                visited[curr_stair + q] = curr_steps + 1\n                q_steps.append((curr_stair + q, curr_steps + 1))\n\n            # If we've reached exactly n stairs, return the steps taken\n            if visited[n] != -1:\n                return visited[n]\n\n        # Return -1 if it is not possible to reach exactly n stairs\n        return -1\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    moves(n, p, q) {\n        if (n === 0) {\n            return 0; // Return 0 if there are no stairs to move on.\n        }\n\n        const visited = new Array(n + 1).fill(\n            -1); // Initialize an array to keep track of visited stairs.\n        const q_steps =\n            [ [ 0, 0 ] ]; // Initialize a queue with starting point and steps taken.\n        visited[0] = 0;   // Mark the starting point as visited.\n\n        while (q_steps.length > 0) {\n            const [curr_stair, curr_steps] =\n                q_steps.shift(); // Dequeue the current stair and steps taken.\n\n            if (curr_stair + p <= n && visited[curr_stair + p] === -1) {\n                visited[curr_stair + p] =\n                    curr_steps + 1; // Mark the next stair as visited and update steps.\n                q_steps.push([\n                    curr_stair + p, curr_steps + 1\n                ]); // Enqueue the next stair and steps taken.\n            }\n\n            if (curr_stair + q <= n && visited[curr_stair + q] === -1) {\n                visited[curr_stair + q] =\n                    curr_steps + 1; // Mark the next stair as visited and update steps.\n                q_steps.push([\n                    curr_stair + q, curr_steps + 1\n                ]); // Enqueue the next stair and steps taken.\n            }\n\n            if (visited[n] !== -1) {\n                return visited[n]; // Return the minimum steps if the destination is\n                                   // reached.\n            }\n        }\n\n        return -1; // Return -1 if destination cannot be reached.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}