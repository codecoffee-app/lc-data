{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705214,
            "title": "Minimum sum of factors",
            "titleSlug": "minimum-sum-of-factors5829",
            "content": "<p><span style=\"font-size: 18px;\">Given a number N.Find the minimum sum of its factors.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=10\n<strong>Output:</strong>\n7\n<strong>Explanation:</strong>\nThere are two ways to factories N, which are\n10=1*10(sum=10+1=11)\n10=2*5(sum=2+5=7)\nThus, the answer is 7.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=12\n<strong>Output:</strong>\n7\n<strong>Explanation:</strong>\nThere are  ways to factorise N, which are\n12=12*1(sum=12+1=13)\n12=3*4(sum=3+4=7)\n12=6*2(sum=6+2=8)\n12=2*3*2(sum=2+3+2=7).</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>sumOfFactors()</strong> which takes a number N as an input parameter and returns the minimum sum of its factors.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>O(N<sup>1/2</sup>)<br /><strong>Expected Auxillary Space:</strong>O(1)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=N&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Prime Factorization leads to the smallest answer.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to check if a number is prime or not.\n    int isPrime(int N) {\n        // iterating from 2 to square root of N to check if any number divides N.\n        for (int i = 2; i * i <= N; i++) {\n            // if any number divides N, then N is not prime, so return 0.\n            if (N % i == 0)\n                return 0;\n        }\n        // N is prime, so return 1.\n        return 1;\n    }\n\n    // Function to calculate the sum of factors of a number.\n    int sumOfFactors(int N) {\n        if (N == 1)\n            return 2;\n        if (N == 2)\n            return 3;\n\n        int ans = 0;\n        // if N is prime, add 1 to the sum of factors.\n        if (isPrime(N))\n            ans++;\n        // iterating from 2 to square root of N to find all factors of N.\n        for (int i = 2; i * i <= N; i++) {\n            // checking if i is a factor of N.\n            while (N % i == 0) {\n                // adding i to the sum of factors and dividing N by i.\n                ans += i;\n                N /= i;\n            }\n        }\n        // if N is greater than 2 (remaining prime factor), add it to the sum of\n        // factors.\n        if (N > 2)\n            ans += N;\n        // returning the sum of factors.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to check if a number is prime or not\n    int isPrime(int N) {\n        // Loop through all numbers from 2 to square root of N\n        for (int i = 2; i * i <= N; i++) {\n            // Check if N is divisible by i, if yes return 0 (not prime)\n            if (N % i == 0) return 0;\n        }\n        // N is prime, return 1\n        return 1;\n    }\n\n    // Function to calculate the sum of factors of a number\n    int sumOfFactors(int N) {\n        if (N == 1) return 2;\n        if (N == 2) return 3;\n\n        int ans = 0;\n        // Check if N is prime, if yes increment ans by 1\n        if (isPrime(N) == 1) ans++;\n        // Loop through all numbers from 2 to square root of N\n        for (int i = 2; i * i <= N; i++) {\n            // Check if N is divisible by i, if yes update N and increment ans by i\n            while (N % i == 0) {\n                ans += i;\n                N /= i;\n            }\n        }\n        // If N is greater than 2, add N to ans\n        if (N > 2) ans += N;\n        // Return the final sum of factors\n        return ans;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    # Function to check if a number is prime\n    def isPrime(self, N):\n        for i in range(2, (int)(math.sqrt(N)) + 1):\n            if N % i == 0:\n                return 0\n        return 1\n\n    # Function to calculate the sum of factors of a number\n    def sumOfFactors(self, N):\n        if (N == 1):\n            return 2\n        if (N == 2):\n            return 3\n        ans = 0\n\n        # If the number is prime, the sum of factors is 1\n        if self.isPrime(N) == 1:\n            ans += 1\n\n        # Finding all the prime factors of the number\n        for i in range(2, (int)(math.sqrt(N)) + 1):\n            while N % i == 0:\n                ans += i\n                N //= i\n\n        # If there is any remaining factor greater than 2\n        if N > 2:\n            ans += N\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution\n{\n    // Function to check if a number is prime or not.\n    public bool isPrime(int N)\n    {\n        // iterating from 2 to square root of N to check if any number divides N.\n        for (int i = 2; i * i <= N; i++)\n        {\n            // if any number divides N, then N is not prime, so return false.\n            if (N % i == 0) return false;\n        }\n        \n        // N is prime, so return true.\n        return true;\n    }\n\n    // Function to calculate the sum of factors of a number.\n    public int sumOfFactors(int N)\n    {\n        int ans = 0;\n        \n        // if N is prime, add 1 to the sum of factors.\n        if (isPrime(N)) ans++;\n        \n        // iterating from 2 to square root of N to find all factors of N.\n        for (int i = 2; i * i <= N; i++)\n        {\n            // checking if i is a factor of N.\n            while (N % i == 0)\n            {\n                // adding i to the sum of factors and dividing N by i.\n                ans += i;\n                N /= i;\n            }\n        }\n        \n        // if N is greater than 2 (remaining prime factor), add it to the sum of factors.\n        if (N > 2) ans += N;\n        \n        // returning the sum of factors.\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {number} N\r\n * @returns {number}\r\n*/\r\nclass Solution {\r\n    //Function to check if a number is prime\r\n    isPrime(N) {\r\n        for (let i = 2; i <= Math.sqrt(N); i++) {\r\n            if (N % i === 0) {\r\n                return 0;\r\n            }\r\n        }\r\n        return 1;\r\n    }\r\n    \r\n    //Function to find the sum of all the factors of a given number.\r\n    sumOfFactors(N) {\r\n        let ans=0;\r\n        \r\n        //if the number is prime, the sum of factors is 1.\r\n        if (this.isPrime(N) === 1) {\r\n            ans += 1;\r\n        }\r\n        \r\n        //finding all the prime factors of the number.\r\n        for (let i = 2; i <= Math.sqrt(N); i++) {\r\n            while (N % i === 0) {\r\n                ans += i;\r\n                N /= i;\r\n            }\r\n        }\r\n        \r\n        //If there is any remaining factor greater than 2.\r\n        if (N > 2) {\r\n            ans += N;\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}