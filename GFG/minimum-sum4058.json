{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703419,
            "title": "Minimum sum",
            "titleSlug": "minimum-sum4058",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> such that each element is in the range [0, 9] find the minimum possible <strong>sum </strong>of two numbers formed using the elements of the array. All <strong>digits</strong> in the given array must be used to form the two numbers. Return a string without leading zeroes.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [6, 8, 4, 5, 2, 3]\n<strong>Output:</strong> \"604\"\n<strong>Explanation:</strong> The minimum sum is formed by numbers 358 and 246.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 3, 0, 7, 4]\n<strong>Output:</strong> \"82\"\n<strong>Explanation:</strong> The minimum sum is formed by numbers 35 and 047.<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [9, 4]\n<strong>Output:</strong> \"13\"\n<strong>Explanation:</strong> The minimum sum is formed by numbers 9 and 4.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 9</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` containing digits from 0 to 9, find the minimum possible sum of two numbers formed using all the digits in the array. Each digit in `arr[]` must be used exactly once. Return the minimum sum as a string without any leading zeroes.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "[6, 8, 4, 5, 2, 3]",
                        "output": "604",
                        "explanation": "The minimum sum is achieved by forming the numbers 358 and 246. Their sum is 604."
                    },
                    {
                        "input": "[5, 3, 0, 7, 4]",
                        "output": "82",
                        "explanation": "The minimum sum is achieved by forming the numbers 35 and 047 (which is treated as 47). Their sum is 82."
                    },
                    {
                        "input": "[9, 4]",
                        "output": "13",
                        "explanation": "The minimum sum is achieved by forming the numbers 9 and 4. Their sum is 13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >A minimum number will be formed from set of digits when smallest digit appears at most significant position and next smallest digit appears at next most significant position ans so on.</span></p>",
            "<p><span >The idea is to sort the array in increasing order and build two numbers by alternating picking digits from the array. So first number is formed by digits present in odd positions in the array and second number is formed by digits from even positions in the array. Finally, we return the sum of first and second number.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function for finding sum of larger numbers\n    string findSum(string &s1, string &s2) {\n        // Before proceeding further, make sure length\n        // of str2 is larger.\n        if (s1.length() > s2.length())\n            swap(s1, s2);\n\n        // Take an empty string for storing result\n        string s = \"\";\n\n        // Calculate length of both string\n        int n1 = s1.length(), n2 = s2.length();\n        int diff = n2 - n1;\n\n        // Initially take carry zero\n        int carry = 0;\n\n        // Traverse from end of both strings\n        for (int i = n1 - 1; i >= 0; i--) {\n            // Do school mathematics, compute sum of\n            // current digits and carry\n            int sum = ((s1[i] - '0') + (s2[i + diff] - '0') + carry);\n            s.push_back(sum % 10 + '0');\n            carry = sum / 10;\n        }\n\n        // Add remaining digits of s2[]\n        for (int i = n2 - n1 - 1; i >= 0; i--) {\n            int sum = ((s2[i] - '0') + carry);\n            s.push_back(sum % 10 + '0');\n            carry = sum / 10;\n        }\n\n        // Add remaining carry\n        if (carry)\n            s.push_back(carry + '0');\n\n        // reverse resultant string\n        reverse(s.begin(), s.end());\n\n        return s;\n    }\n\n    string minSum(vector<int> &arr) {\n        int n = arr.size();\n        // sort the array\n        sort(arr.begin(), arr.end());\n\n        // let two numbers be a and b\n        string a, b;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 0 && i != n - 1)\n                continue;\n            // fill a and b with every alternate digit\n            // of input array\n            if (i & 1)\n                a += (char)(arr[i] + '0');\n            else\n                b += (char)(arr[i] + '0');\n        }\n\n        // return the sum\n        return findSum(a, b);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function template for Java\n\nclass Solution {\n    // Function for finding sum of larger numbers\n    public String findSum(String s1, String s2) {\n        // Before proceeding further, make sure length\n        // of str2 is larger.\n        char[] str1, str2;\n        if (s1.length() > s2.length()) {\n            str1 = s2.toCharArray();\n            str2 = s1.toCharArray();\n        } else {\n            str1 = s1.toCharArray();\n            str2 = s2.toCharArray();\n        }\n\n        // Take an empty string for storing result\n        StringBuilder str = new StringBuilder(\"\");\n\n        // Calculate length of both string\n        int n1 = str1.length, n2 = str2.length;\n        int diff = n2 - n1;\n\n        // Initially take carry zero\n        int carry = 0;\n\n        // Traverse from end of both strings\n        for (int i = n1 - 1; i >= 0; i--) {\n            // Do school mathematics, compute sum of\n            // current digits and carry\n            int sum = ((str1[i] - '0') + (str2[i + diff] - '0') + carry);\n            str.append(sum % 10 + \"\");\n            carry = sum / 10;\n        }\n\n        // Add remaining digits of str2[]\n        for (int i = n2 - n1 - 1; i >= 0; i--) {\n            int sum = ((str2[i] - '0') + carry);\n            str.append(sum % 10 + \"\");\n            carry = sum / 10;\n        }\n\n        // Add remaining carry\n        if (carry > 0) str.append(carry + \"\");\n\n        // reverse resultant string\n\n        return str.reverse().toString();\n    }\n\n    public String minSum(int arr[]) {\n        // sort the array\n        int n = arr.length;\n        Arrays.sort(arr);\n\n        // let two numbers be a and b\n        StringBuilder a = new StringBuilder(\"\"), b = new StringBuilder(\"\");\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 0 && i != n - 1) continue;\n            // fill a and b with every alternate digit\n            // of input array\n            if ((i & 1) == 1)\n                a.append(\"\" + arr[i]);\n            else\n                b.append(\"\" + arr[i]);\n        }\n\n        // return the sum\n        return findSum(a.toString(), b.toString());\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def addStrings(self, num1: str, num2: str) -> str:\n        i, j = len(num1) - 1, len(num2) - 1\n        carry = 0\n        result = []\n\n        while i >= 0 or j >= 0 or carry:\n            n1 = int(num1[i]) if i >= 0 else 0\n            n2 = int(num2[j]) if j >= 0 else 0\n\n            total = n1 + n2 + carry\n            carry = total // 10\n            result.append(str(total % 10))\n\n            i -= 1\n            j -= 1\n\n        # Join and strip leading zeros from the result\n        return ''.join(result[::-1]).lstrip('0') or '0'\n\n    def minSum(self, arr):\n        n = len(arr)\n        arr.sort()\n\n        ans1 = ans2 = ''\n\n        for i in range(0, n - 1, 2):\n            ans1 += str(arr[i])\n            ans2 += str(arr[i + 1])\n\n        if n % 2:\n            ans1 += str(arr[-1])\n\n        # Use the custom addStrings function to return the sum as a string\n        return self.addStrings(ans1, ans2)\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function for finding sum of larger numbers\n    swap(a, b) {}\n\n    reverse(str) {\n        let newString = \"\";\n        for (let i = str.length - 1; i >= 0; i--) {\n            newString += str[i];\n        }\n        return newString;\n    }\n\n    findSum(str1, str2) {\n        // Before proceeding further, make sure length\n        // of str2 is larger.\n        // console.log(str1);\n        // console.log(str2);\n        if (str1.length > str2.length) {\n            let temp;\n            // swap variables\n            temp = str1;\n            str1 = str2;\n            str2 = temp;\n        }\n        // console.log(str1);\n        // console.log(str2);\n        // Take an empty string for storing result\n        let str = \"\";\n\n        // Calculate length of both string\n        let n1 = str1.length, n2 = str2.length;\n        let diff = n2 - n1;\n\n        // Initially take carry zero\n        let carry = 0;\n\n        // Traverse from end of both strings\n        for (let i = n1 - 1; i >= 0; i--) {\n            // Do school mathematics, compute sum of\n            // current digits and carry\n            let sum = (parseInt(str1[i]) + parseInt(str2[i + diff]) + parseInt(carry));\n            // console.log(`${str2[i + diff]} ${str1[i]} ${carry}`);\n            str += (sum % 10);\n            carry = Math.floor(sum / 10);\n        }\n\n        // Add remaining digits of str2[]\n        for (let i = n2 - n1 - 1; i >= 0; i--) {\n            let sum = (parseInt(str2[i]) + parseInt(carry));\n            str += (sum % 10);\n            carry = Math.floor(sum / 10);\n        }\n\n        // Add remaining carry\n        if (carry) {\n            str += (carry);\n        }\n\n        // reverse resultant string\n        let s = this.reverse(str);\n\n        return s;\n    }\n\n    minSum(arr) {\n        // sort the array\n        let n = arr.length\n        arr.sort((a, b) => a - b);\n\n        // let two numbers be a and b\n        let a = \"\", b = \"\";\n        for (let i = 0; i < n; i++) {\n            if (arr[i] === 0 && i !== n - 1) continue;\n            // fill a and b with every alternate digit\n            // of input array\n            if (i & 1)\n                a += (arr[i]);\n            else\n                b += (arr[i]);\n        }\n\n        // return the sum\n        return this.findSum(a, b);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}