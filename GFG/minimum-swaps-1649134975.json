{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710309,
            "title": "Minimum Swaps",
            "titleSlug": "minimum-swaps-1649134975",
            "content": "<p dir=\"ltr\"><span style=\"font-size:18px\">A flock of sheep is running east along a straight, narrow road. Each one is running at its own constant speed. Whenever a sheep catches up to the one in front of it, it has to slow down and follow at the speed of the other sheep. You are in a mobile crane behind the flock, chasing the sheep towards the barn at the end of the road. The arm of the crane allows you to pick up any sheep momentarily, let the sheep behind it pass underneath, and place the picked-up sheep back down. This operation takes no time and can only be performed on a pair of sheep that are immediately next to each other, even if 3 or more sheep are in a row, one after the other.</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">Given the initial locations (Xi) at time 0 and natural speeds (Vi) of the sheep, as well as the location of the barn (B), what is the minimum number of swaps you need to perform with your crane in order to have at least K of the N sheep arrive at the barn no later than time T?</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">You may think of the sheep as points moving along a line. Even if 3 or more sheep are at the same location, next to each other, picking up one of them will only let one of the other two pass through. Any swap is instantaneous, which means that you may perform multiple swaps at the same time, but each one will count as a separate swap.</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=5\r\nk=3\r\nB=10\r\nT=5\r\nX[]={0,2,5 ,6, 7}\r\nV[]={1,1,1,1,4}\r\n<strong>Output:</strong>\r\n0\r\n<strong>Explanation:</strong>\r\nSheep 5,4 and 3 will reach the barn before or at 5 secs.</span></pre>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=5\r\nK=3\r\nB=10\r\nT=5\r\nX[]={0,2,3,4,7}\r\nV[]={2,1,1,1,4}\r\n<strong>Output:</strong>\r\n-1\r\n<strong>Explanation:</strong>\r\nAt max 2 sheep can reach the barn within or at 5 secs so the\r\nanswer is -1.</span></pre>\r\n\r\n<p dir=\"ltr\">&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>minimumSwaps()</strong>&nbsp;which takes the array pos[],v[], N, K, B, and T as input parameters&nbsp;and returns the minimum number of swaps required. If it is not possible to make k sheep reach the barn before or on T seconds then return&nbsp;<strong>-1</strong>.</span><br />\r\n<br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span><br />\r\n<br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=<strong>N</strong>&lt;=10<sup>5</sup><br />\r\n1&lt;=<strong>k</strong>&lt;=N.<br />\r\n1 &le;&nbsp;<strong>B</strong>&nbsp;&le; 1,000,000,000<br />\r\n1 &le;&nbsp;<strong>T</strong>&nbsp;&le; 1,000<br />\r\n0 &le; <strong>POS<sub>i</sub></strong>&nbsp;&lt;&nbsp;<strong>B</strong><br />\r\n1 &le;&nbsp;<strong>V<sub>i</sub></strong>&nbsp;&le; 100<br />\r\nAll the <strong>POS<sub>i</sub></strong>&#39;s will be&nbsp;in increasing order.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A flock of N sheep is moving east along a straight road. Each sheep has a constant speed. When a sheep catches up to the one in front, it slows down to match that sheep's speed. You have a crane that can pick up a sheep, let the sheep behind pass, and place the picked-up sheep back down. This swap is instantaneous and can only be done between adjacent sheep. Given the initial positions (X_i) and speeds (V_i) of the sheep, and the barn location (B), find the minimum swaps needed to have at least K sheep reach the barn no later than time T.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= K <= N",
                    "1 <= B <= 1,000,000,000",
                    "1 <= T <= 1,000",
                    "0 <= POS_i < B",
                    "1 <= V_i <= 100",
                    "All POS_i's are in increasing order."
                ],
                "testcases": [
                    {
                        "input": "N=5\nk=3\nB=10\nT=5\nX[]={0,2,5 ,6, 7}\nV[]={1,1,1,1,4}",
                        "output": "0",
                        "explanation": "Sheep at positions 5, 6, and 7 will reach the barn within or at time T=5."
                    },
                    {
                        "input": "N=5\nK=3\nB=10\nT=5\nX[]={0,2,3,4,7}\nV[]={2,1,1,1,4}",
                        "output": "-1",
                        "explanation": "At most 2 sheep can reach the barn within T=5, so it's impossible to have at least K=3 sheep reach the barn."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">distance=speed * time.<br />\nthink greedy.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\npublic:\n    //Function to find the minimum number of swaps needed.\n    int minimumSwaps(int c[],int v[],int n,int k,int b,int T)\n    {\n        int ans=0; //initialize variable to store the answer\n        int ts=0; //initialize variable to count the number of times student waits\n        int r=0; //initialize variable to count the number of students reached the bus\n        for(int i=n-1;i>=0;i--) //looping through the students in reverse order\n        {\n            if(r>=k) //if the required number of students have reached the bus, break the loop\n                break;\n            int d=v[i]*T; //calculating the distance the student can travel in time T\n            if(d>=b-c[i]) //if the distance is greater than or equal to the remaining distance to the bus stop\n            {\n                ans+=ts; //add the number of times student waits to the answer\n                r++; //increment the count of students reached\n            }\n            else\n            {\n                ts++; //increment the count of times student waits\n            }\n        }\n        if(r>=k) //if the required number of students have reached the bus, return the answer\n            return ans;\n        return -1; //otherwise, return -1 indicating it's not possible to have k students reach the bus\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int minimumSwaps(int[] c, int[] v, int n, int k, int b, int t) {\n        // Initializing variables\n        int swap = 0; // Count of swaps\n        int temp = 0; // Count of attempts to swap\n        int cnt = 0; // Count of successful swaps\n\n        // Looping through the array from right to left\n        for (int i = n - 1; i >= 0; i--) {\n            if (cnt < k) {\n                int d = v[i] * t; // Distance to cover\n                if (d >= b - c[i]) {\n                    swap += temp; // Increment swap count\n                    cnt++; // Increment successful swap count\n                } else {\n                    temp++; // Increment attempt count\n                }\n            }\n        }\n\n        // Checking if desired number of swaps were made\n        if (cnt < k) {\n            // Returning -1 if not enough swaps were made\n            return -1;\n        }\n        \n        // Returning total swap count\n        return swap;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\nclass Solution:\n    def minimumSwaps(self, c: List[int], v: List[int], n: int, k: int, b: int, t: int) -> int:\n        ans = 0  # Initialize answer count\n        ts = 0  # Initialize swap count\n        r = 0  # Initialize successful ride count\n\n        # Iterate from right to left\n        for i in range(n-1, -1, -1):\n            if (r >= k):\n                break\n\n            # Calculate distance required to reach the destination\n            d = v[i] * t\n\n            # Check if distance is sufficient to reach destination before time\n            if (d >= b-c[i]):\n                ans += ts  # Increment answer count by swap count\n                r += 1  # Increment successful ride count\n            else:\n                ts += 1  # Increment swap count\n\n        if (r >= k):\n            return ans  # Return answer if enough successful rides were made\n        return -1  # Return -1 if not enough successful rides were made",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int minimumSwaps(int[] c, int[] v, int n, int k, int b, int T)\n    {\n        int ans=0; //initialize variable to store the answer\n        int ts=0; //initialize variable to count the number of times student waits\n        int r=0; //initialize variable to count the number of students reached the bus\n        for(int i=n-1;i>=0;i--) //looping through the students in reverse order\n        {\n            if(r>=k) //if the required number of students have reached the bus, break the loop\n                break;\n            int d=v[i]*T; //calculating the distance the student can travel in time T\n            if(d>=b-c[i]) //if the distance is greater than or equal to the remaining distance to the bus stop\n            {\n                ans+=ts; //add the number of times student waits to the answer\n                r++; //increment the count of students reached\n            }\n            else\n            {\n                ts++; //increment the count of times student waits\n            }\n        }\n        if(r>=k) //if the required number of students have reached the bus, return the answer\n            return ans;\n        return -1; //otherwise, return -1 indicating it's not possible to have k students reach the bus\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}