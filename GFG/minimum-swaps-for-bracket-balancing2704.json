{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703567,
            "title": "Minimum Swaps for Bracket Balancing",
            "titleSlug": "minimum-swaps-for-bracket-balancing2704",
            "content": "<p><span >You are given a string <strong>s</strong> of <strong>2*n</strong> characters consisting of <strong>n</strong> &lsquo;<strong>[</strong>&lsquo; brackets and <strong>n</strong> &lsquo;<strong>]</strong>&rsquo; brackets. A string is considered <strong>balanced</strong> if it can be represented in the form <strong>a[b]</strong> where <strong>a</strong> and <strong>b</strong>&nbsp;are balanced strings. We can make an unbalanced string balanced by swapping <strong>adjacent</strong> characters. Calculate the <strong>minimum number of swaps</strong> necessary to make a string balanced.<br />Note - Strings <strong>a </strong>and <strong>b</strong> can be <strong>empty</strong>.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input</strong>: s = \"[]][][\"\n<strong>Output</strong>: 2\n<strong>Explanation</strong>: First swap: Position 3 and 4 [][]][, Second swap: Position 5 and 6 [][][]\n</span></pre>\n<pre><span ><strong>Input</strong>: s = \"[][]\"\n<strong>Output</strong> : 0 \n<strong>Explanation</strong>: String is already balanced.<br /></span></pre>\n<pre><span ><strong>Input</strong>: s = \"[[[][][]]]\"\n<strong>Output</strong>: 0 </span></pre>\n<p><span ><strong>Constraints:<br /></strong>1&lt;= s.size() &lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a string `s` of `2*n` characters consisting of `n` '[' brackets and `n` ']' brackets. A string is considered balanced if it can be represented in the form `a[b]` where `a` and `b` are balanced strings (and can be empty). Determine the minimum number of swaps of adjacent characters needed to make the given string balanced.",
                "constraints": [
                    "1 <= s.size() <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[]][][",
                        "output": "2",
                        "explanation": "The string can be balanced with two swaps: \"[]][[\" -> \"[][][\" (swap indices 2 and 3), then \"[][][\" -> \"[][[]]\" (swap indices 4 and 5).  The final balanced string is \"[][][]\". Note there might be different sequences of swaps to get the answer."
                    },
                    {
                        "input": "[][]",
                        "output": "0",
                        "explanation": "The string is already balanced."
                    },
                    {
                        "input": "[[[][][]]]",
                        "output": "0",
                        "explanation": "The string is already balanced."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try thinking is it efficient to bring the next opening bracket character when we count the number of closing bracket sequences more than opening brackets.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minimumNumberOfSwaps(string& s) {\n        int swap = 0, imbalance = 0;\n        int countLeft = 0, countRight = 0;\n        int sizeOfArray = s.size();\n\n        for (int i = 0; i < sizeOfArray; ++i) {\n\n            if (s[i] == '[') {\n                // increment count of Left bracket\n                countLeft++;\n                if (imbalance > 0) {\n                    // swaps count is last swap count + total\n                    // number imbalanced brackets\n                    swap += imbalance;\n                    // imbalance decremented by 1 as it solved\n                    // only one imbalance of Left and Right\n                    imbalance--;\n                }\n            } else if (s[i] == ']') {\n                // increment count of Right bracket\n                countRight++;\n                // imbalance is reset to current difference\n                // between Left and Right brackets\n                imbalance = (countRight - countLeft);\n            }\n        }\n\n        return swap;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static int minimumNumberOfSwaps(String s) {\n        int swap = 0, imbalance = 0;\n        int countLeft = 0, countRight = 0;\n        int sizeOfArray = s.length();\n\n        for (int i = 0; i < sizeOfArray; ++i) {\n            if (s.charAt(i) == '[') {\n                countLeft++;\n                if (imbalance > 0) {\n                    swap += imbalance;\n                    imbalance--;\n                }\n            } else if (s.charAt(i) == ']') {\n                countRight++;\n                imbalance = countRight - countLeft;\n            }\n        }\n\n        return swap;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def minimumNumberOfSwaps(self, s):\n        swap = 0\n        imbalance = 0\n        countLeft = 0\n        countRight = 0\n        sizeOfArray = len(s)\n\n        for i in range(sizeOfArray):\n\n            if s[i] == '[':\n\n                # increment count of Left bracket\n                countLeft += 1\n                if imbalance > 0:\n\n                    # swaps count is last swap count + total\n                    # number imbalanced brackets\n                    swap += imbalance\n                    # imbalance decremented by 1 as it solved\n                    # only one imbalance of Left and Right\n                    imbalance -= 1\n\n            elif s[i] == ']':\n\n                # increment count of Right bracket\n                countRight += 1\n                # imbalance is reset to current difference\n                # between Left and Right brackets\n                imbalance = (countRight - countLeft)\n\n        return swap\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {string} S\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the minimum number of swaps required to sort the string.\n    minimumNumberOfSwaps(s) {\n        let swap = 0;\n        let imbalance = 0;\n        let countLeft = 0;\n        let countRight = 0;\n        let sizeOfArray = s.length;\n\n        for (let i = 0; i < sizeOfArray; i++) {\n            if (s[i] === '[') {\n                countLeft += 1;\n                if (imbalance > 0) {\n                    swap += imbalance;\n                    imbalance -= 1;\n                }\n            } else if (s[i] === ']') {\n                countRight += 1;\n                imbalance = countRight - countLeft;\n            }\n        }\n\n        return swap;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}