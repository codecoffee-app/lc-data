{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703336,
            "title": "Minimum swaps and K together",
            "titleSlug": "minimum-swaps-required-to-bring-all-elements-less-than-or-equal-to-k-together4847",
            "content": "<p><span >Given an array <strong>arr</strong>&nbsp;and a number <strong>k</strong>. One can apply a swap operation on the array any number of times, i.e choose any two index i and j&nbsp;(i &lt; j) and swap arr[i] , arr[j] . Find the&nbsp;<strong>minimum</strong>&nbsp;number of swaps required to bring all the numbers less than or equal to&nbsp;<strong>k</strong>&nbsp;together, i.e. make them a contiguous&nbsp;subarray.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [2, 1, 5, 6, 3], k = 3\n<strong>Output:</strong> 1\n<strong>Explanation: </strong>To bring elements 2, 1, 3 together, swap index 2 with 4 (0-based indexing), i.e. element arr[2] = 5 with arr[4] = 3 such that final array will be- arr[] = [2, 1, 3, 6, 5]\n</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [2, 7, 9, 5, 8, 7, 4], k = 6 <strong>\nOutput:</strong> 2 \n<strong>Explanation:</strong> To bring elements 2, 5, 4 together, swap index 0 with 2 (0-based indexing) and index 4 with 6 (0-based indexing) such that final array will be- arr[] = [9, 7, 2, 5, 4, 7, 8]<br /></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [2, 4, 5, 3, 6, 1, 8], k = 6 <strong>\nOutput:</strong> 0</span></pre>\n<p><span ><strong>Constraints:</strong></span><br style=\"font-size: 18.6667px;\" /><span >1 &le; arr.size() &le; 10<sup>6</sup></span><br style=\"font-size: 18.6667px;\" /><span >1 &le; arr[i] &le; 10<sup>6</sup></span><br style=\"font-size: 18.6667px;\" /><span >1 &le; k &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` and a number `k`, determine the minimum number of swaps required to group all elements less than or equal to `k` into a contiguous subarray. You can swap any two elements in the array any number of times.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6",
                    "1 <= k <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr = [2, 1, 5, 6, 3], k = 3",
                        "output": "1",
                        "explanation": "To group the elements 2, 1, and 3 together, swap 5 (at index 2) with 3 (at index 4). The resulting array would be [2, 1, 3, 6, 5]."
                    },
                    {
                        "input": "arr = [2, 7, 9, 5, 8, 7, 4], k = 6",
                        "output": "2",
                        "explanation": "To group the elements 2, 5, and 4 together, one possible solution involves swapping 2 (at index 0) with 9 (at index 2), and 4 (at index 6) with 8 (at index 4). The resulting array would be [9, 7, 2, 5, 4, 7, 8]."
                    },
                    {
                        "input": "arr = [2, 4, 5, 3, 6, 1, 8], k = 6",
                        "output": "0",
                        "explanation": "The elements less than or equal to 6 (2, 4, 5, 3, 6, 1) are already in contiguous subarray. No swaps are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a sliding window approach to minimize the number of \"bad\" elements greater than <span class=\"katex\">kk</span> in a window of size equal to the count of elements <span class=\"katex\">&le;k\\leq k</span>.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minSwap(vector<int>& arr, int k) {\n        int n = arr.size();\n\n        // Find count of elements which are less than or equal to k\n        int count = 0;\n        for (int i = 0; i < n; ++i)\n            if (arr[i] <= k)\n                ++count;\n\n        // Find unwanted elements in the current window of size 'count'\n        int bad = 0;\n        for (int i = 0; i < count; ++i)\n            if (arr[i] > k)\n                ++bad;\n\n        // Initialize answer with 'bad' value of the current window\n        int ans = bad;\n        for (int i = 0, j = count; j < n; ++i, ++j) {\n\n            // Decrement count of previous window\n            if (arr[i] > k)\n                --bad;\n\n            // Increment count of current window\n            if (arr[j] > k)\n                ++bad;\n\n            // Update answer if 'bad' is less in the current window\n            ans = min(ans, bad);\n        }\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function for finding minimum swaps required\n    int minSwap(int[] arr, int k) {\n        int n = arr.length;\n\n        // Count elements which are less than or equal to k\n        int count = 0;\n        for (int i = 0; i < n; ++i) {\n            if (arr[i] <= k) {\n                ++count;\n            }\n        }\n\n        // Find the number of \"bad\" elements in the first window of size 'count'\n        int bad = 0;\n        for (int i = 0; i < count; ++i) {\n            if (arr[i] > k) {\n                ++bad;\n            }\n        }\n\n        // Initialize result with the count of \"bad\" elements in the first window\n        int minSwaps = bad;\n\n        // Slide the window over the array\n        for (int i = 0, j = count; j < n; ++i, ++j) {\n            // Decrement \"bad\" count if the element leaving the window is bad\n            if (arr[i] > k) {\n                --bad;\n            }\n\n            // Increment \"bad\" count if the element entering the window is bad\n            if (arr[j] > k) {\n                ++bad;\n            }\n\n            // Update the result to minimum swaps so far\n            minSwaps = Math.min(minSwaps, bad);\n        }\n\n        return minSwaps;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def minSwap(self, arr, k):\n        n = len(arr)\n\n        # Count elements which are less than or equal to k\n        count = 0\n        for i in range(n):\n            if arr[i] <= k:\n                count += 1\n\n        # Find the number of \"bad\" elements in the first window of size 'count'\n        bad = 0\n        for i in range(count):\n            if arr[i] > k:\n                bad += 1\n\n        # Initialize result with the count of \"bad\" elements in the first window\n        min_swaps = bad\n\n        # Slide the window over the array\n        for i in range(n - count):\n            j = i + count\n\n            # Decrement \"bad\" count if the element leaving the window is bad\n            if arr[i] > k:\n                bad -= 1\n\n            # Increment \"bad\" count if the element entering the window is bad\n            if arr[j] > k:\n                bad += 1\n\n            # Update the result to minimum swaps so far\n            min_swaps = min(min_swaps, bad)\n\n        return min_swaps\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\n\nclass Solution {\n\n    minSwap(arr, k) {\n        // Find count of elements which are\n        // less than equals to k\n        let n = arr.length;\n        let count = 0;\n        for (let i = 0; i < n; ++i) {\n            if (arr[i] <= k) {\n                ++count;\n            }\n        }\n\n        // Find unwanted elements in current\n        // window of size 'count'\n        let bad = 0;\n        for (let i = 0; i < count; ++i) {\n            if (arr[i] > k) {\n                ++bad;\n            }\n        }\n\n        // Initialize answer with 'bad' value of\n        // current window\n        let ans = bad;\n        for (let i = 0, j = count; j < n; ++i, ++j) {\n\n            // Decrement count of previous window\n            if (arr[i] > k) {\n                --bad;\n            }\n\n            // Increment count of current window\n            if (arr[j] > k) {\n                ++bad;\n            }\n\n            // Update ans if count of 'bad'\n            // is less in current window\n            ans = Math.min(ans, bad);\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}