{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700384,
            "title": "Minimum Swaps to Sort",
            "titleSlug": "minimum-swaps",
            "content": "<p><span >Given an array <strong>arr[]</strong> of distinct elements. Find the minimum number of swaps required to sort the array in strictly increasing order.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 8, 5, 4]\n<strong>Output: </strong>1\n<strong>Explanation: </strong>Swap 8 with 4 to get the sorted array.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [10, 19, 6, 3, 5]\n<strong>Output: </strong>2\n<strong>Explanation: </strong>Swap 10 with 3 and 19 with 5 to get the sorted array.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 3, 4, 5, 6]\n<strong>Output:</strong> 0\n<strong>Explanation: </strong>Input array is already sorted.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of distinct elements, determine the minimum number of swaps required to sort the array in ascending order.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[2, 8, 5, 4]",
                        "output": "1",
                        "explanation": "By swapping 8 and 4, the array becomes sorted."
                    },
                    {
                        "input": "[10, 19, 6, 3, 5]",
                        "output": "2",
                        "explanation": "Swapping 10 with 3 and then 19 with 5 sorts the array."
                    },
                    {
                        "input": "[1, 3, 4, 5, 6]",
                        "output": "0",
                        "explanation": "The input array is already sorted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Count cycles in the sorted array, as each cycle requires cycle size - 1 swaps to arrange elements in their correct positions.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\n  public:\n    // Function to find the minimum number of swaps required to sort the array.\n    int minSwaps(vector<int>& arr) {\n        int n = arr.size();\n\n        // creating a list of pairs where first element of pair is array\n        // element and second element is its position.\n        vector<pair<int, int>> cur(n);\n\n        // iterating over the array elements.\n        for (int i = 0; i < n; i++) {\n            // storing the elements and their position as pair in the list.\n            cur[i].first = arr[i];\n            cur[i].second = i;\n        }\n        // sorting the list.\n        sort(cur.begin(), cur.end());\n\n        // using boolean list to mark visited elements and currently\n        // marking all the nodes as false.\n        vector<bool> vis(n, false);\n        int ans = 0;\n\n        for (int i = 0; i < n; i++) {\n            // if element is already visited or it is already at\n            // correct position, we continue the loop.\n            if (vis[i] or cur[i].second == i)\n                continue;\n            int cycle_size = 0;\n            int j = i;\n\n            // while element is not visited, we find out the number of nodes in\n            // this cycle and keep incrementing cycle size.\n            while (!vis[j]) {\n                vis[j] = true;\n                j = cur[j].second;\n                cycle_size++;\n            }\n            // updating number of swaps required.\n            ans += (cycle_size > 1) ? cycle_size - 1 : 0;\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end Complete function Template for JAVA\n\nclass Solution {\n    // Function to find the minimum number of swaps required to sort the array.\n    public int minSwaps(int arr[]) {\n        int n = arr.length;\n\n        // creating a list of pairs where first element of pair is array\n        // element and second element is its position.\n        ArrayList<ArrayList<Integer>> cur = new ArrayList<>();\n\n        // iterating over the array elements.\n        for (int i = 0; i < n; i++) {\n            // storing the elements and their position as pair in the list.\n            ArrayList<Integer> temp = new ArrayList<>();\n            temp.add(arr[i]);\n            temp.add(i);\n            cur.add(temp);\n        }\n\n        // sorting the list.\n        cur.sort(new Comparator<ArrayList<Integer>>() {\n            public int compare(ArrayList<Integer> o1, ArrayList<Integer> o2) {\n                return o1.get(0).compareTo(o2.get(0));\n            }\n        });\n\n        // using boolean list to mark visited elements and currently\n        // marking all the nodes as false.\n        boolean[] vis = new boolean[n];\n        Arrays.fill(vis, false);\n\n        int ans = 0;\n\n        for (int i = 0; i < n; i++) {\n            // if element is already visited or it is already at\n            // correct position, we continue the loop.\n            if (vis[i] || cur.get(i).get(1) == i)\n                continue;\n            else {\n                int cycle_size = 0;\n                int j = i;\n\n                // while element is not visited, we find out the number of nodes\n                // in this cycle and keep incrementing cycle size.\n                while (!vis[j]) {\n                    vis[j] = true;\n                    j = cur.get(j).get(1);\n                    cycle_size++;\n                }\n                // updating number of swaps required.\n                ans += Math.max(0, cycle_size - 1);\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    #Function to find the minimum number of swaps required to sort the array.\n    def minSwaps(self, arr):\n\n        n = len(arr)\n        cur = []\n\n        #iterating over the array elements.\n        for i in range(n):\n\n            #storing the elements and their position as pair in the list.\n            cur.append([arr[i], i])\n\n        #sorting the list.\n        cur.sort()\n\n        #using boolean list to mark visited elements and currently\n        #marking all the nodes as false.\n        vis = [False for i in range(n)]\n        ans = 0\n        for i in range(n):\n\n            #if element is already visited or it is already at\n            #correct position, we continue the loop.\n            if (vis[i] or cur[i][1] == i):\n                continue\n            else:\n                cycle_size = 0\n                j = i\n\n                #while element is not visited, we find out the number of nodes\n                #in this cycle and keep incrementing cycle size.\n                while (vis[j] == False):\n                    vis[j] = True\n                    j = cur[j][1]\n                    cycle_size = cycle_size + 1\n\n                #updating number of swaps required.\n                ans = ans + max(0, cycle_size - 1)\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @returns {number}\n */\nclass Solution {\n    // Function to find the minimum number of swaps required to sort the array.\n    minSwaps(arr) {\n        let n = arr.length;\n\n        // creating a list of pairs where first element of pair is array\n        // element and second element is its position.\n        let cur = new Array(n);\n\n        // iterating over the array elements.\n        for (let i = 0; i < n; i++) {\n            // storing the elements and their position as pair in the list.\n            cur[i] = new Array(arr[i], i);\n        }\n\n        // sorting the list.\n        cur.sort(function(p, q) {\n            if (p[0] == q[0]) return p[1] - q[1];\n            return p[0] - q[0];\n        });\n\n        // using boolean list to mark visited elements and currently\n        // marking all the nodes as false.\n        let vis = new Array(n);\n        vis.fill(false);\n\n        let ans = 0;\n        for (let i = 0; i < n; i++) {\n            // if element is already visited or it is already at\n            // correct position, we continue the loop.\n            if (vis[i] == true || cur[i][1] == i) continue;\n            let cycle_size = 0;\n            let j = i;\n\n            // while element is not visited, we find out the number of nodes in\n            // this cycle and keep incrementing cycle size.\n            while (!vis[j]) {\n                vis[j] = true;\n                j = cur[j][1];\n                cycle_size++;\n            }\n            // updating number of swaps required.\n            ans += (cycle_size > 1) ? cycle_size - 1 : 0;\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}