{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710142,
            "title": "Minimum time to fulfil all orders",
            "titleSlug": "minimum-time-to-fulfil-all-orders",
            "content": "<p><span style=\"font-size:18px\"><strong>Geek</strong>&nbsp;is organizing a party at his house. For the party, he needs exactly&nbsp;<strong>N&nbsp;</strong>donuts for the guests.&nbsp;<strong>Geek</strong>&nbsp;decides to order the donuts from a nearby restaurant, which has&nbsp;<strong>L&nbsp;</strong>chefs and each chef has a rank <strong>R</strong>.&nbsp;<br />\r\nA chef with rank&nbsp;<strong>R&nbsp;</strong>can make 1 donut in the first&nbsp;<strong>R</strong>&nbsp;minutes, 1 more donut in the next&nbsp;<strong>2R</strong>&nbsp;minutes, 1 more donut in&nbsp;<strong>3R</strong>&nbsp;minutes, and so on.<br />\r\nFor example. a chef with rank 2, can make one&nbsp;donut in 2 minutes, one more donut in the next 4 minutes, and one more in the next 6 minutes. So, it take 2 + 4 + 6 = 12 minutes to make 3 donuts. A chef can move on to making the next donut only after completing the previous one. All the chefs can work simultaneously.<br />\r\nSince,&nbsp;it&#39;s time for the party,&nbsp;<strong>Geek&nbsp;</strong>wants to know the <strong>minimum</strong> time required in completing&nbsp;<strong>N</strong>&nbsp;donuts. Return an integer denoting the minimum time</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 10\r\nL = 4\r\nrank[] = {1, 2, 3, 4}\r\n<strong>Output: </strong>12\r\n<strong>Explanation:</strong> \r\nChef with rank 1, can make 4 donuts in time 1 + 2 + 3 + 4 = 10 mins\r\nChef with rank 2, can make 3 donuts in time 2 + 4 + 6 = 12 mins\r\nChef with rank 3, can make 2 donuts in time 3 + 6 = 9 mins\r\nChef with rank 4, can make 1 donuts in time = 4 minutes\r\nTotal donuts = 4 + 3 + 2 + 1 = 10 and total time = 12 minutes.\r\n\r\n\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 8\r\nL = 8\r\nrank[] = {1, 1, 1, 1, 1, 1, 1, 1}\r\n<strong>Output: </strong>1\r\n<strong>Explanation:</strong> \r\nAs all chefs are ranked 1, so each chef can make 1 donuts 1 min.\r\nTotal donuts = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 8 and total time = 1 minute. \r\n</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>findMinTime</strong><strong>()</strong>&nbsp;which takes an integer&nbsp;<strong>N</strong>&nbsp;as input and an array A[] of length&nbsp;<strong>L</strong>&nbsp;denoting the ranks and return an integer denoting the minimum time.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*logN)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N&nbsp;&lt;= 10<sup>3</sup><br />\r\n1 &lt;= L&nbsp;&lt;= 50<br />\r\n1 &lt;= L[i]&nbsp;&lt;= 8</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek wants to host a party and needs to order exactly N donuts. A nearby restaurant has L chefs, each with a rank R. A chef with rank R can make one donut in R minutes, another in 2R minutes, another in 3R minutes, and so on. All chefs can work simultaneously. Determine the minimum time required to complete N donuts.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= L <= 50",
                    "1 <= L[i] <= 8"
                ],
                "testcases": [
                    {
                        "input": "N = 10\nL = 4\nrank = [1, 2, 3, 4]",
                        "output": "12",
                        "explanation": "Chef with rank 1 makes 4 donuts in 10 mins (1+2+3+4). Chef with rank 2 makes 3 donuts in 12 mins (2+4+6). Chef with rank 3 makes 2 donuts in 9 mins (3+6). Chef with rank 4 makes 1 donut in 4 minutes. Total donuts = 10, and the minimum time is 12 minutes."
                    },
                    {
                        "input": "N = 8\nL = 8\nrank = [1, 1, 1, 1, 1, 1, 1, 1]",
                        "output": "1",
                        "explanation": "All chefs are ranked 1, so each chef can make 1 donut in 1 minute. Total donuts = 8, and the minimum time is 1 minute."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Apply binary search on time.</span></p>",
            "<p><span style=\"font-size:18px\">Take a lower bound and upper bound and for each time, check if the donuts can be made in the given time.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    bool isPossible(int p, vector<int>&cook,int n,int mid){\r\n\r\n        int cnt = 0;\r\n        for(int i=0;i<n;i++){\r\n            //for each cook count the pratas\r\n            int c = 0;\r\n            int time = mid;\r\n            int perpratas = cook[i]; // time taken to cook each pratas by ith cook\r\n            while(time > 0){\r\n                time = time - perpratas;\r\n                if( time >= 0){\r\n                    c += 1;\r\n                    perpratas  += cook[i];\r\n                }\r\n            }\r\n            cnt += c;\r\n            if(cnt >= p)\r\n                return true;\r\n        }\r\n    \r\n        return false;\r\n    }\r\n\r\n    int findMinTime(int n, vector<int>&arr,int l){\r\n        int s = 0, e = 10000007;\r\n        int mid,ans=-1;\r\n    \r\n        while(s<=e){\r\n            mid = (s+e)/2;\r\n            if(isPossible(n,arr,l,mid)){\r\n                ans = mid;\r\n                e = mid - 1;\r\n            }else{\r\n                s = mid + 1;\r\n            }\r\n        }\r\n    \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int findMinTime(int n, int l, int[] arr) {\r\n        // code here\r\n        int s = 0, e = 10000007;\r\n        int mid,ans=-1;\r\n    \r\n        while(s<=e){\r\n            mid = (s+e)/2;\r\n            if(isPossible(n,arr,l,mid)){\r\n                ans = mid;\r\n                e = mid - 1;\r\n            }else{\r\n                s = mid + 1;\r\n            }\r\n        }\r\n    \r\n        return ans;\r\n    }\r\n    public static boolean isPossible(int p, int[] cook,int n,int mid){\r\n\r\n        int cnt = 0;\r\n        for(int i=0;i<n;i++){\r\n            //for each cook count the donut\r\n            int c = 0;\r\n            int time = mid;\r\n            int perpratas = cook[i]; // time taken to cook each donut by ith cook\r\n            while(time > 0){\r\n                time = time - perpratas;\r\n                if( time >= 0){\r\n                    c += 1;\r\n                    perpratas  += cook[i];\r\n                }\r\n            }\r\n            cnt += c;\r\n            if(cnt >= p)\r\n                return true;\r\n        }\r\n    \r\n        return false;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\r\nclass Solution:\r\n    def findMinTime(self, n : int, l : int, arr : List[int]) -> int:\r\n        # Function to check if it is possible to cook 'p' pratas\r\n        # using 'mid' as the maximum time limit\r\n\r\n        def isPossible(p, cook, n, mid):\r\n            cnt = 0\r\n            for i in range(n):\r\n                c = 0\r\n                time = mid\r\n                perpratas = cook[i]\r\n                # Calculating the number of pratas cooked by\r\n                # each cook within the given time limit 'mid'\r\n                while (time > 0):\r\n                    time -= perpratas\r\n                    if (time >= 0):\r\n                        c += 1\r\n                        perpratas += cook[i]\r\n                cnt += c\r\n                # Returning True if the total number of pratas cooked \r\n                # is greater than or equal to the required number 'p'\r\n                if (cnt >= p):\r\n                    return True\r\n            # Returning False if it is not possible to cook 'p' pratas\r\n            return False\r\n        \r\n        # Initializing the start and end values for binary search\r\n        s,e = 0,10000007\r\n        mid, ans = -1, -1\r\n        # Binary search to find the minimum time limit required to cook\r\n        # all the pratas\r\n        while (s <= e):\r\n            mid = (s+e) // 2\r\n            if isPossible(n,arr,l,mid):\r\n                ans = mid\r\n                # If the current time limit 'mid' is feasible, updating \r\n                # the answer and reducing the search space by changing the \r\n                # end value to mid - 1\r\n                e = mid - 1\r\n            else:\r\n                # If the current time limit 'mid' is not feasible, increasing\r\n                # the start value to mid + 1 to search for a higher possible value\r\n                s = mid + 1\r\n        \r\n        # Returning the minimum time limit 'ans' required to cook all pratas\r\n        return ans",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number} l\n * @param {number[]} arr\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the minimum time required to cook all the pratas.\n    findMinTime(n, l, arr) {\n        // Function to check if it is possible to cook 'p' pratas\n        // using 'mid' as the maximum time limit\n        const isPossible = (p, cook, n, mid) => {\n            let cnt = 0;\n            for (let i = 0; i < n; i++) {\n                let c = 0;\n                let time = mid;\n                let perpratas = cook[i];\n                // Calculating the number of pratas cooked by\n                // each cook within the given time limit 'mid'\n                while (time > 0) {\n                    time -= perpratas;\n                    if (time >= 0) {\n                        c += 1;\n                        perpratas += cook[i];\n                    }\n                }\n                cnt += c;\n                // Returning True if the total number of pratas cooked \n                // is greater than or equal to the required number 'p'\n                if (cnt >= p) {\n                    return true;\n                }\n            }\n            // Returning False if it is not possible to cook 'p' pratas\n            return false;\n        }\n        \n        // Initializing the start and end values for binary search\n        let s = 0, e = 10000007;\n        let mid = -1, ans = -1;\n        // Binary search to find the minimum time limit required to cook\n        // all the pratas\n        while (s <= e) {\n            mid = Math.floor((s + e) / 2);\n            if (isPossible(n, arr, l, mid)) {\n                ans = mid;\n                // If the current time limit 'mid' is feasible, updating \n                // the answer and reducing the search space by changing the \n                // end value to mid - 1\n                e = mid - 1;\n            } else {\n                // If the current time limit 'mid' is not feasible, increasing\n                // the start value to mid + 1 to search for a higher possible value\n                s = mid + 1;\n            }\n        }\n        // Returning the minimum time limit 'ans' required to cook all pratas\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}