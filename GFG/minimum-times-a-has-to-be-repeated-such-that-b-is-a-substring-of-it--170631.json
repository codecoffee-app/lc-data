{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 708479,
            "title": "Minimum times A has to be repeated such that B is a substring of it",
            "titleSlug": "minimum-times-a-has-to-be-repeated-such-that-b-is-a-substring-of-it--170631",
            "content": "<p><span style=\"font-size:18px\">Given two strings <strong>A </strong>and<strong> B. </strong>Find minimum number of times A has to be repeated such that B is a Substring of it. If <strong>B</strong> can never be a substring then return <strong>-1</strong>.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>A = &quot;abcd&quot;\r\nB = &quot;cdabcdab&quot;\r\n<strong>Output:\r\n</strong>3\r\n<strong>Explanation:</strong>\r\n</span><span style=\"font-size:18px\">Repeating A three times (&ldquo;abcdabcdabcd&rdquo;),\r\nB is a substring of it. B is not a substring\r\nof A when it is repeated less than 3 times.</span>\r\n</pre>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Example 2:</strong></span></div>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>A = &quot;ab&quot;\r\nB = &quot;cab&quot;\r\n<strong>Output :</strong>\r\n-1</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\r\nNo matter how many times we repeat A, we can&#39;t\r\nget a string such that B is a substring of it.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>minRepeats()</strong>&nbsp;which takes 2 strings A, and B respectively and returns the minimum number of times A has to be repeated such that B is a substring of it. Return -1 if it&#39;s not possible.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|A| * |B|)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(|B|)</span></p>\r\n\r\n<div><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; |A|, |B| &le; 10<sup>3</sup></span></div>\r\n\r\n<div><span style=\"font-size:18px\">String A and B consists of lower case alphabets</span></div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">What can be the least length of a String for it to have a Substring of length m?</span></p>",
            "<p><span style=\"font-size:18px\">Imagine we wrote <strong>S = A+A+A+&hellip;</strong> If <strong>B</strong> is a substring of <strong>S</strong>, we only need to check whether some index 0 or 1 or &hellip;. length(A) -1 starts with <strong>B</strong>, as <strong>S</strong> is long enough to contain <strong>B</strong>, and <strong>S</strong> has a period of <strong>length(A)</strong>. </span></p>",
            "<p><span style=\"font-size:18px\">Now, suppose <strong>ans</strong> is the least number for which <strong>length(B) &lt;= length(A * ans)</strong>. We only need to check whether<strong> B</strong> is a substring of <strong>A * ans</strong> or <strong>A * (ans+1)</strong>. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Pattern Searching",
                "slug": "pattern-searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    // Function to check if a number  \r\n    // is a substring of other or not \r\n    bool issubstring(string str2, string rep1) \r\n    { \r\n        int M = str2.length(); \r\n        int N = rep1.length(); \r\n      \r\n        // Check for substring from starting  \r\n        // from i'th index of main string \r\n        for (int i = 0; i <= N - M; i++) { \r\n            int j; \r\n      \r\n            // For current index i,  \r\n            // check for pattern match \r\n            for (j = 0; j < M; j++) \r\n                if (rep1[i + j] != str2[j]) \r\n                    break; \r\n      \r\n            if (j == M) // pattern matched \r\n                return true; \r\n        } \r\n      \r\n        return false; // not a substring \r\n    }\r\n    \r\n    int minRepeats(string A, string B) {\r\n        // To store minimum number of repetations \r\n        int ans = 1; \r\n          \r\n        // To store repeated string \r\n        string S = A; \r\n          \r\n        // Untill size of S is less than B \r\n        while(S.size() < B.size()) \r\n        { \r\n            S += A; \r\n            ans++; \r\n        } \r\n          \r\n        // ans times repetation makes required answer \r\n        if (issubstring(B, S)) return ans; \r\n          \r\n        // Add one more string of A    \r\n        if (issubstring(B, S+A))  \r\n            return ans + 1; \r\n              \r\n        // If no such solution exits     \r\n        return -1; \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    // Function to check if a number  \r\n    // is a substring of other or not \r\n    static boolean issubstring(String str2,  \r\n                               String rep1) \r\n    { \r\n        int M = str2.length(); \r\n        int N = rep1.length(); \r\n      \r\n        // Check for substring from starting  \r\n        // from i'th index of main string \r\n        for (int i = 0; i <= N - M; i++)  \r\n        { \r\n            int j; \r\n      \r\n            // For current index i,  \r\n            // check for pattern match \r\n            for (j = 0; j < M; j++) \r\n                if (rep1.charAt(i + j) != str2.charAt(j)) \r\n                    break; \r\n      \r\n            if (j == M) // pattern matched \r\n                return true; \r\n        } \r\n      \r\n        return false; // not a substring \r\n    } \r\n    \r\n    static int minRepeats(String A, String B) {\r\n        // To store minimum number of repetations \r\n        int ans = 1; \r\n          \r\n        // To store repeated string \r\n        String S = A; \r\n          \r\n        // Untill size of S is less than B \r\n        while(S.length() < B.length()) \r\n        { \r\n            S += A; \r\n            ans++; \r\n        } \r\n          \r\n        // ans times repetation makes required answer \r\n        if (issubstring(B, S)) return ans; \r\n          \r\n        // Add one more string of A  \r\n        if (issubstring(B, S + A))  \r\n            return ans + 1; \r\n              \r\n        // If no such solution exits  \r\n        return -1; \r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    # Function to check if a number  \r\n    # is a substring of other or not \r\n    def issubstring(self, str2, rep):\r\n        if str2 in rep:\r\n            return True  # str2 is a Substring of rep\r\n        return False     # not a substring\r\n    \r\n    def minRepeats(self, A, B):\r\n        ans = 1\r\n        S = A\r\n        \r\n        while len(S)<len(B):\r\n            S += A \r\n            ans += 1 \r\n            \r\n        if self.issubstring(B,S):\r\n            return ans \r\n        elif self.issubstring(B,S+A):\r\n            return ans+1 \r\n        else:\r\n            return -1",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} A\n * @param {number} B\n * @returns {number}\n*/\n\nclass Solution {\n    // Function to check if a number  \n    // is a substring of other or not \n    issubstring(str2, rep) {\n        if (rep.includes(str2)) {\n            return true;  // str2 is a Substring of rep\n        }\n        return false;     // not a substring\n    }\n\n    //Function to find minimum number of characters which I should have in \n    //my inventory to produce string B.\n    minRepeats(A, B) {\n        let ans = 1;\n        let S = A;\n\n        while (S.length < B.length) {\n            S += A;\n            ans += 1;\n        }\n        \n        if (this.issubstring(B, S)) {\n            return ans;\n        } else if (this.issubstring(B, S + A)) {\n            return ans + 1;\n        } else {\n            return -1;\n        }\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution {\n    // Function to check if a number  \n    // is a substring of other or not \n    bool issubstring(string str2, string rep1) {\n        int M = str2.Length;\n        int N = rep1.Length;\n\n        // Check for substring from starting  \n        // from i'th index of main string \n        for (int i = 0; i <= N - M; i++) {\n            int j;\n\n            // For current index i,  \n            // check for pattern match \n            for (j = 0; j < M; j++)\n                if (rep1[i + j] != str2[j])\n                    break;\n\n            if (j == M) // pattern matched \n                return true;\n        }\n        return false; // not a substring \n    }\n\n    //Complete this function\n    public int minRepeats(string A, string B) {\n        // To store minimum number of repetations \n        int ans = 1;\n\n        // To store repeated string \n        string S = A;\n\n        // Untill size of S is less than B \n        while (S.Length < B.Length) {\n            S += A;\n            ans++;\n        }\n\n        // ans times repetation makes required answer \n        if (issubstring(B, S))\n            return ans;\n\n        // Add one more string of A    \n        if (issubstring(B, S + A))\n            return ans + 1;\n\n        // If no such solution exits     \n        return -1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}