{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713539,
            "title": "Minimum repeat to make substring",
            "titleSlug": "minimum-times-a-has-to-be-repeated-such-that-b-is-a-substring-of-it--170645",
            "content": "<p><span >Given two strings <strong>s1 </strong>and<strong> s2. </strong>Return a minimum number of times s1 has to be repeated such that s2 is a substring of it. If <strong>s2</strong> can never be a substring then return <strong>-1</strong>.</span></p>\n<p><span >Note: Both the strings contain only lowercase letters.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s1 = \"ww\", s2 = \"www\"\n<strong>Output: </strong>2\n<strong>Explanation: </strong>Repeating s1 two times \"<strong>www</strong>w\", s2 is a substring of it.</span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"abcd\", s2 = \"cdabcdab\" <br /><strong>Output: </strong>3 <br /><strong>Explanation: </strong>Repeating s1 three times \"ab<strong>cdabcdab</strong>cd\", s2 is a substring of it. s2 is not a substring of s1 when it is repeated less than 3 times.</span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"ab\", s2 = \"cab\"\n<strong>Output: </strong>-1\n<strong>Explanation: </strong>No matter how many times we repeat s1, we can't get a string such that s2 is a substring of it.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; s1.size(), s2.size() &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">What can be the least length of a String for it to have a Substring of length m?</span></p>",
            "<p><span style=\"font-size:18px\">Imagine we wrote <strong>S = A+A+A+&hellip;</strong> If <strong>B</strong> is a substring of <strong>S</strong>, we only need to check whether some index 0 or 1 or &hellip;. length(A) -1 starts with <strong>B</strong>, as <strong>S</strong> is long enough to contain <strong>B</strong>, and <strong>S</strong> has a period of <strong>length(A)</strong>. </span></p>",
            "<p><span style=\"font-size:18px\">Now, suppose <strong>ans</strong> is the least number for which <strong>length(B) &lt;= length(A * ans)</strong>. We only need to check whether<strong> B</strong> is a substring of <strong>A * ans</strong> or <strong>A * (ans+1)</strong>. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Pattern Searching",
                "slug": "pattern-searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to check if a number\n    // is a substring of other or not\n    void computeLPSArray(string& s, vector<int>& lps) {\n        int len = 0, idx = 1;\n\n        // lps[0] is always 0\n        lps[0] = 0;\n\n        // the loop calculates lps[i] for\n        // i = 1 to str.length() - 1\n        while (idx < s.length()) {\n            if (s[idx] == s[len]) {\n                len++;\n                lps[idx] = len;\n                idx++;\n            } else {\n\n                // If len is 0, then we have no common prefix\n                // which is also a suffix\n                if (len == 0) {\n                    lps[idx] = 0;\n                    idx++;\n                } else {\n\n                    // Note that we do not move to the next\n                    // index\n                    len = lps[len - 1];\n                }\n            }\n        }\n    }\n\n    // function to find the occurrence of pat in txt\n    bool KMPSearch(string& txt, string& pat, vector<int>& lps, int rep) {\n        int n = txt.length(), m = pat.length();\n        int i = 0, j = 0;\n\n        // Iterate till s1 is repeated rep times\n        while (i < n * rep) {\n\n            // If characters match, move both pointers forward\n            if (txt[i % n] == pat[j]) {\n                i++;\n                j++;\n\n                // If the entire pattern is matched\n                // store the start index in result\n                if (j == m) {\n                    return true;\n                }\n            }\n\n            // If there is a mismatch\n            else {\n\n                // Use lps value of previous index\n                // to avoid redundant comparisons\n                if (j != 0)\n                    j = lps[j - 1];\n                else\n                    i++;\n            }\n        }\n        return false;\n    }\n\n    // function to find Minimum number of times s1 has to be\n    // repeated such that s2 is a substring of it\n    int minRepeats(string& s1, string& s2) {\n\n        // Find lengths of strings\n        int n = s1.length();\n        int m = s2.length();\n\n        // Declare and Compute the LPS Table\n        vector<int> lps(m);\n        computeLPSArray(s2, lps);\n\n        // Find the minimum nnumber of times s1 needs to be\n        // repeated to become as long as s2\n        int x = (m + n - 1) / n;\n\n        // Check when string s1 is repeated x times\n        if (KMPSearch(s1, s2, lps, x))\n            return x;\n\n        // Check when string s1 is repeated (x + 1) times\n        if (KMPSearch(s1, s2, lps, x + 1))\n            return x + 1;\n\n        // If string s2 was not found, return -1\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to check if a number\n    // is a substring of other or not\n    static void computeLPSArray(String s, int[] lps) {\n        int len = 0, idx = 1;\n\n        // lps[0] is always 0\n        lps[0] = 0;\n\n        // the loop calculates lps[i] for\n        // i = 1 to str.length() - 1\n        while (idx < s.length()) {\n            if (s.charAt(idx) == s.charAt(len)) {\n                len++;\n                lps[idx] = len;\n                idx++;\n            } else {\n\n                // If len is 0, then we have no common prefix\n                // which is also a suffix\n                if (len == 0) {\n                    lps[idx] = 0;\n                    idx++;\n                } else {\n\n                    // Note that we do not move to the next index\n                    len = lps[len - 1];\n                }\n            }\n        }\n    }\n\n    // function to find the occurrence of pat in txt\n    static boolean KMPSearch(String txt, String pat, int[] lps, int rep) {\n        int n = txt.length(), m = pat.length();\n        int i = 0, j = 0;\n\n        // Iterate till s1 is repeated rep times\n        while (i < n * rep) {\n\n            // If characters match, move both pointers forward\n            if (txt.charAt(i % n) == pat.charAt(j)) {\n                i++;\n                j++;\n\n                // If the entire pattern is matched\n                if (j == m) {\n                    return true;\n                }\n            } else {\n\n                // If there is a mismatch\n                // Use lps value of previous index to avoid redundant comparisons\n                if (j != 0)\n                    j = lps[j - 1];\n                else\n                    i++;\n            }\n        }\n        return false;\n    }\n\n    // function to find Minimum number of times s1 has to be\n    // repeated such that s2 is a substring of it\n    static int minRepeats(String s1, String s2) {\n\n        // Find lengths of strings\n        int n = s1.length();\n        int m = s2.length();\n\n        // Declare and Compute the LPS Table\n        int[] lps = new int[m];\n        computeLPSArray(s2, lps);\n\n        // Find the minimum number of times s1 needs to be\n        // repeated to become as long as s2\n        int x = (m + n - 1) / n;\n\n        // Check when string s1 is repeated x times\n        if (KMPSearch(s1, s2, lps, x)) return x;\n\n        // Check when string s1 is repeated (x + 1) times\n        if (KMPSearch(s1, s2, lps, x + 1)) return x + 1;\n\n        // If string s2 was not found, return -1\n        return -1;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Python program to find Minimum number of times s1\n# has to be repeated such that s2 is a substring of it\n# using KMP algorithm\nclass Solution:\n\n    def computeLPSArray(self, s):\n        lps = [0] * len(s)\n        len_ = 0\n        idx = 1\n\n        # the loop calculates lps[i] for\n        # i = 1 to str.length() - 1\n        while idx < len(s):\n            if s[idx] == s[len_]:\n                len_ += 1\n                lps[idx] = len_\n                idx += 1\n            else:\n\n                # If len is 0, then we have no common prefix\n                # which is also a suffix\n                if len_ == 0:\n                    lps[idx] = 0\n                    idx += 1\n                else:\n\n                    # Note that we do not move to the next index\n                    len_ = lps[len_ - 1]\n        return lps\n\n    # function to find the occurrence of pat in txt\n\n    def KMPSearch(self, txt, pat, lps, rep):\n        n, m = len(txt), len(pat)\n        i = j = 0\n\n        # Iterate till s1 is repeated rep times\n        while i < n * rep:\n\n            # If characters match, move both pointers forward\n            if txt[i % n] == pat[j]:\n                i += 1\n                j += 1\n\n                # If the entire pattern is matched\n                if j == m:\n                    return True\n\n                    # Use lps of previous index to skip\n                    # unnecessary comparisons\n                    j = lps[j - 1]\n            else:\n\n                # If there is a mismatch, use lps value of\n                # previous index to avoid redundant comparisons\n                if j != 0:\n                    j = lps[j - 1]\n                else:\n                    i += 1\n        return False\n\n    # function to find Minimum number of times s1 has to be\n    # repeated such that s2 is a substring of it\n\n    def minRepeats(self, s1, s2):\n\n        # Find lengths of strings\n        n, m = len(s1), len(s2)\n\n        # Declare and Compute the LPS Table\n        lps = self.computeLPSArray(s2)\n\n        # Find the minimum number of times s1 needs to be\n        # repeated to become as long as s2\n        x = (m + n - 1) // n\n\n        # Check when string s1 is repeated x times\n        if self.KMPSearch(s1, s2, lps, x):\n            return x\n\n        # Check when string s1 is repeated (x + 1) times\n        if self.KMPSearch(s1, s2, lps, x + 1):\n            return x + 1\n\n        # If string s2 was not found, return -1\n        return -1\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Function to check if a number\n    // is a substring of other or not\n    bool issubstring(string str2, string rep1) {\n        int M = str2.Length;\n        int N = rep1.Length;\n\n        // Check for substring from starting\n        // from i'th index of main string\n        for (int i = 0; i <= N - M; i++) {\n            int j;\n\n            // For current index i,\n            // check for pattern match\n            for (j = 0; j < M; j++)\n                if (rep1[i + j] != str2[j]) break;\n\n            if (j == M) // pattern matched\n                return true;\n        }\n\n        return false; // not a substring\n    }\n\n    public int minRepeats(string A, string B) {\n        // To store minimum number of repetations\n        int ans = 1;\n\n        // To store repeated string\n        string S = A;\n\n        // Untill size of S is less than B\n        while (S.Length < B.Length) {\n            S += A;\n            ans++;\n        }\n\n        // ans times repetation makes required answer\n        if (issubstring(B, S)) return ans;\n\n        // Add one more string of A\n        if (issubstring(B, S + A)) return ans + 1;\n\n        // If no such solution exits\n        return -1;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/*\n * @param {number[]} A\n * @param {number[]} B\n * @returns {number}\n */\n\nclass Solution {\n    // Function to check if a number\n    // is a substring of other or not.\n    computeLPSArray(s) {\n        let len = 0;\n        const lps = new Array(s.length).fill(0);\n        let idx = 1;\n\n        // lps[0] is always 0\n        while (idx < s.length) {\n            if (s[idx] === s[len]) {\n                len++;\n                lps[idx] = len;\n                idx++;\n            } else {\n\n                // If len is 0, then we have no common prefix\n                // which is also a suffix\n                if (len === 0) {\n                    lps[idx] = 0;\n                    idx++;\n                } else {\n\n                    // Note that we do not move to the next\n                    // index\n                    len = lps[len - 1];\n                }\n            }\n        }\n        return lps;\n    }\n\n    // function to find the occurrence of pat in txt\n    KMPSearch(txt, pat, lps, rep) {\n        const n = txt.length;\n        const m = pat.length;\n        let i = 0, j = 0;\n\n        // Iterate till s1 is repeated rep times\n        while (i < n * rep) {\n\n            // If characters match, move both pointers forward\n            if (txt[i % n] === pat[j]) {\n                i++;\n                j++;\n\n                // If the entire pattern is matched\n                // store the start index in result\n                if (j === m) {\n                    return true;\n                }\n            } else {\n\n                // If there is a mismatch use lps value of\n                // previous index to avoid redundant comparisons\n                if (j !== 0)\n                    j = lps[j - 1];\n                else\n                    i++;\n            }\n        }\n        return false;\n    }\n\n    // function to find Minimum number of times s1 has to be\n    // repeated such that s2 is a substring of it\n    minRepeats(s1, s2) {\n\n        // Find lengths of strings\n        const n = s1.length;\n        const m = s2.length;\n\n        // Declare and Compute the LPS Table\n        const lps = this.computeLPSArray(s2);\n\n        // Find the minimum number of times s1 needs to be\n        // repeated to become as long as s2\n        const x = Math.ceil(m / n);\n\n        // Check when string s1 is repeated x times\n        if (this.KMPSearch(s1, s2, lps, x)) return x;\n\n        // Check when string s1 is repeated (x + 1) times\n        if (this.KMPSearch(s1, s2, lps, x + 1)) return x + 1;\n\n        // If string s2 was not found, return -1\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}