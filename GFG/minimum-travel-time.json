{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711975,
            "title": "Minimum travel time",
            "titleSlug": "minimum-travel-time",
            "content": "<p><span style=\"font-size: 18px;\">You are given an&nbsp;<code>n x n</code>&nbsp;integer matrix&nbsp;<code>grid</code>&nbsp;where each value&nbsp;<code>grid[i][j]</code> represents the height of the&nbsp;cell&nbsp;<code>(i, j).</code></span></p>\n<p><span style=\"font-size: 18px;\">You can travel from a cell to another 4-directionally adjacent cell if and only the height of both the cells are at most T. </span><span style=\"font-size: 18px;\">You can travel infinite distances in zero time but&nbsp;you must stay within the boundaries of the grid during your travel.</span></p>\n<p><span style=\"font-size: 18px;\">You are currently at cell (0, 0) and the value of T is 0 and you wish to go to cell (n-1,n-1).</span></p>\n<p><span style=\"font-size: 18px;\">Find the minimum time it will take to reach the cell (n, n) if the value of T increase by 1 every second.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<div style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />2<br />0 2<br />1 3<br /><br /><strong>Output:</strong><br />3<br /><br /><strong>Explanation:</strong><br /><span style=\"font-family: arial,helvetica,sans-serif;\">At time 0, you are in grid location (0, 0).<br />You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.<br />You cannot reach point (1, 1) until time 3.<br />When time T&nbsp;is 3, we can swim anywhere inside the grid.</span></span></div>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<div style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />4<br />0 1 2 4<br />12 13 14 9<br />15 5&nbsp;11 10<br />3 6 7 8&nbsp;<br /><br /><strong>Output:</strong><br />10</span></div>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function <strong>Solve()</strong> which takes an integer n denoting no. of rows and columns&nbsp;of the grid and a matrix grid[][] denoting the grid and return the maximum group of connected group of 1s.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1 &lt;= n&lt;= 50</span></li>\n<li><span style=\"font-size: 18px;\">0 &lt;= grid[i][j] </span></li>\n<li><span style=\"font-size: 18px;\">Each value in grid is unique</span></li>\n</ul>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an `n x n` integer matrix `grid` where each value `grid[i][j]` represents the height of the cell `(i, j)`. You can travel from a cell to another 4-directionally adjacent cell if and only if the height of both cells is at most `T`. You can travel infinite distances in zero time, but you must stay within the boundaries of the grid. Starting at cell (0, 0) with `T = 0`, your goal is to reach cell (n-1, n-1).  Find the minimum time it takes to reach cell (n-1, n-1) if `T` increases by 1 every second.",
                "constraints": [
                    "1 <= n <= 50",
                    "0 <= grid[i][j]",
                    "Each value in grid is unique"
                ],
                "testcases": [
                    {
                        "input": "2\n0 2\n1 3",
                        "output": "3",
                        "explanation": "At time 0, you are in grid location (0, 0). You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than T = 0. You cannot reach point (1, 1) until time 3. When time T is 3, you can move to all adjacent cells, allowing you to reach (1,1)."
                    },
                    {
                        "input": "4\n0 1 2 4\n12 13 14 9\n15 5 11 10\n3 6 7 8",
                        "output": "10",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n  \n    // Function to check if it is possible to reach the target cell\n    // within 't' time using DFS.\n    bool canGo(int i, int j, vector<vector<int>>& grid, int& t,\n               vector<vector<bool>>& vis, int& n) {\n        // Check if out of bounds or cell value exceeds 't' or already visited.\n        if (i < 0 || j < 0 || i >= n || j >= n || grid[i][j] > t || vis[i][j]) {\n            return false;\n        }\n        \n        // Mark cell as visited.\n        vis[i][j] = true;\n        \n        // Check if reached the target cell.\n        if (i == n - 1 && j == n - 1) {\n            return true;\n        }\n        \n        // Recursive calls to explore neighboring cells.\n        return canGo(i + 1, j, grid, t, vis, n) ||\n               canGo(i, j + 1, grid, t, vis, n) ||\n               canGo(i - 1, j, grid, t, vis, n) ||\n               canGo(i, j - 1, grid, t, vis, n);\n    }\n\n    // Function to find the minimum time required to reach the target cell.\n    int Solve(int n, vector<vector<int>>& grid) {\n        int ans = INT_MAX;\n        int left = 0;\n        int right = n * n;\n        \n        // Binary search to find the minimum time.\n        while (left <= right) {\n            vector<vector<bool>> vis(n, vector<bool>(n, false));\n            int mid = left + (right - left) / 2;\n            \n            // Check if it is possible to reach the target cell within 'mid' time.\n            if (canGo(0, 0, grid, mid, vis, n)) {\n                ans = mid;\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int Solve(int n, int[][] grid) {\n        // Priority queue to store cells with their time values\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b)->a[2] - b[2]);\n        \n        // Arrays to represent the x and y direction movement\n        int dirX[] = {-1, 0, 1, 0};\n        int dirY[] = {0, 1, 0, -1};\n        \n        // Add the starting cell to the priority queue\n        pq.add(new int[]{0, 0, grid[0][0]});\n        \n        // Boolean array to track visited cells\n        boolean vis[][] = new boolean[grid.length][grid[0].length];\n        \n        // Mark the starting cell as visited\n        vis[0][0] = true;\n        \n        // Variable to store the maximum time taken\n        int maxTime = Integer.MIN_VALUE;\n        \n        // Process cells from the priority queue until it is empty\n        while (!pq.isEmpty()) {\n            // Get the size of the current level in the priority queue\n            int size = pq.size();\n            \n            // Process all cells in the current level\n            for (int i = 0; i < size; i++) {\n                int temp[] = pq.remove();\n                int x = temp[0];\n                int y = temp[1];\n                int t = temp[2];\n                \n                // Update the maximum time\n                maxTime = Math.max(maxTime, t);\n                \n                // Check if it is the destination cell\n                if (x == n - 1 && y == n - 1) return maxTime;\n                \n                // Explore the neighboring cells\n                for (int j = 0; j < 4; j++) {\n                    int a = x + dirX[j];\n                    int b = y + dirY[j];\n                    if (a < 0 || a >= grid.length || b < 0 || b >= grid[0].length || vis[a][b])\n                        continue;\n                    \n                    // Add the neighboring cell to the priority queue\n                    pq.add(new int[]{a, b, grid[a][b]});\n                    \n                    // Mark the neighboring cell as visited\n                    vis[a][b] = true;\n                }\n            }\n        }\n        \n        // If the destination cell is not reached, return -1\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nimport heapq\n\nclass Solution:\n    def Solve(self, n, adj):\n        N ,smallest= len(adj),[[adj[0][0],0,0]]    # initialize smallest heap with starting position\n        while smallest:                           # run the loop until smallest heap is not empty\n            time,r,c = heapq.heappop(smallest)    # extract the smallest element from the heap\n            if r == N-1 and c == N-1:              # if reached at the destination, return the time taken\n                return time\n            for dr,dc in [[0,1],[0,-1],[1,0],[-1,0]]:    # explore all four possible directions\n                x ,y= r+dr ,c+dc                        # calculate the new row and column values\n                if y < 0 or x < 0 or x >=N or y>=N or adj[x][y]==-1:    # check if new position is out of bounds or blocked\n                    continue\n                heapq.heappush(smallest, [ max(time,adj[x][y]), x,y])   # push the new position and time to the heap\n                adj[x][y]=-1    # mark the visited position as blocked\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution\n{\n    // Function to check if it is possible to reach the target cell\n    // within 't' time\n    public bool CanGo(int i, int j, int[][] grid, int t, bool[][] vis, int n)\n    {\n        // Check if out of bounds or cell value exceeds 't' or already visited.\n        if (i < 0 || j < 0 || i >= n || j >= n || grid[i][j] > t || vis[i][j])\n        {\n            return false;\n        }\n\n        // Mark cell as visited.\n        vis[i][j] = true;\n\n        // Check if reached the target cell.\n        if (i == n - 1 && j == n - 1)\n        {\n            return true;\n        }\n\n        // Recursive calls to explore neighboring cells.\n        return CanGo(i + 1, j, grid, t, vis, n) ||\n               CanGo(i, j + 1, grid, t, vis, n) ||\n               CanGo(i - 1, j, grid, t, vis, n) ||\n               CanGo(i, j - 1, grid, t, vis, n);\n    }\n\n    // Function to find the minimum time required to reach the target cell.\n    public int Solve(int n, int[][] grid)\n    {\n        int ans = int.MaxValue;\n        int left = 0;\n        int right = n * n;\n\n        // Binary search to find the minimum time.\n        while (left <= right)\n        {\n            bool[][] vis = new bool[n][];\n            for (int i = 0; i < n; i++)\n            {\n                vis[i] = new bool[n];\n            }\n\n            int mid = left + (right - left) / 2;\n\n            // Check if it is possible to reach the target cell within 'mid' time.\n            if (CanGo(0, 0, grid, mid, vis, n))\n            {\n                ans = mid;\n                right = mid - 1;\n            }\n            else\n            {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}