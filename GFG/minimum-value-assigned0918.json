{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705139,
            "title": "Minimum Value Assigned",
            "titleSlug": "minimum-value-assigned0918",
            "content": "<p><span style=\"font-size: 12pt;\">Given an array, <strong>arr</strong>[], Geek wants to assign a value to each array element. The minimum value that can be assigned to an element is 1. For every pair of adjacent elements, the one with the higher integral value should be assigned a higher value. Help Geek assign the smallest possible value to each element and return the sum of the values which is the minimum possible.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [1, 2, 3, 4]\n<strong>Output:</strong> 10\n<strong>Explanation: </strong>The first element is assigned value 1. The second element is assigned value 2 because arr[1]&gt;arr[0]. The third element is assigned value 3 because arr[2]&gt;arr[1]. Fourth element is assigned value 4 because arr[3]&gt;arr[2]. 1+2+3+4 =10.</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [2, 4, 4]\n<strong>Output:</strong> 4\n<strong>Explaination: </strong>First element is assigned value 1. Second element is assigned value 2 because arr[1]&gt;arr[0]. Third element is assigned value 1 because arr[2] is equal to arr[1]. 1+2+1 = 4.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &le; arr.size &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>5</sup> &nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, assign a value to each element. The minimum value assignable is 1. For adjacent elements, the element with a higher value in `arr[]` should be assigned a higher value. Determine the minimum possible sum of assigned values for the array.",
                "constraints": [
                    "1 <= arr.size <= 10^6",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4]",
                        "output": "10",
                        "explanation": "Assigning values based on the given rule, we get [1, 2, 3, 4]. The sum of these assigned values is 1 + 2 + 3 + 4 = 10."
                    },
                    {
                        "input": "[2, 4, 4]",
                        "output": "4",
                        "explanation": "Applying the rules, the assigned values are [1, 2, 1].  Therefore, the minimum possible sum is 1 + 2 + 1 = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Find out what the max value of integer at i'th position can be for every 'i'.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the minimum value in the given array\n    int minValue(vector<int> arr) {\n        int N = arr.size();\n        // Create arrays to store the length of increasing sequence from left and right\n        // side\n        int left[N], right[N];\n\n        // Initialize the first element of left array as 1\n        left[0] = 1;\n\n        // Calculate the length of increasing sequence from left side\n        for (int i = 1; i < N; i++) {\n            if (arr[i] > arr[i - 1])\n                left[i] = left[i - 1] + 1;\n            else\n                left[i] = 1;\n        }\n\n        // Initialize the last element of right array as 1\n        right[N - 1] = 1;\n\n        // Calculate the length of increasing sequence from right side\n        for (int i = N - 2; i >= 0; i--) {\n            if (arr[i] > arr[i + 1])\n                right[i] = right[i + 1] + 1;\n            else\n                right[i] = 1;\n        }\n\n        // Calculate the maximum length from left and right arrays and sum them\n        int ans = 0;\n        for (int i = 0; i < N; i++)\n            ans += max(left[i], right[i]);\n\n        // Return the minimum value\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    // Static method to find the minimum value in the given array\n    static int minValue(int arr[]) {\n        int N = arr.length; // Get the size of the array\n\n        // Create arrays to store the length of increasing sequences from left and right\n        // sides\n        int[] left = new int[N];\n        int[] right = new int[N];\n\n        // Initialize the first element of the left array as 1\n        left[0] = 1;\n\n        // Calculate the length of increasing sequence from the left side\n        for (int i = 1; i < N; i++) {\n            if (arr[i] > arr[i - 1]) {\n                left[i] = left[i - 1] + 1;\n            } else {\n                left[i] = 1;\n            }\n        }\n\n        // Initialize the last element of the right array as 1\n        right[N - 1] = 1;\n\n        // Calculate the length of increasing sequence from the right side\n        for (int i = N - 2; i >= 0; i--) {\n            if (arr[i] > arr[i + 1]) {\n                right[i] = right[i + 1] + 1;\n            } else {\n                right[i] = 1;\n            }\n        }\n\n        // Calculate the sum of the maximum lengths from the left and right arrays\n        int ans = 0;\n        for (int i = 0; i < N; i++) {\n            ans += Math.max(left[i], right[i]); // Use Math.max to get the maximum value\n        }\n\n        // Return the total minimum value\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minValue(self, arr):\n        N = len(arr)  # Get the size of the array\n\n        # Create lists to store the length of increasing sequences from left and right sides\n        left = [0] * N\n        right = [0] * N\n\n        # Initialize the first element of the left list as 1\n        left[0] = 1\n\n        # Calculate the length of increasing sequence from the left side\n        for i in range(1, N):\n            if arr[i] > arr[i - 1]:\n                left[i] = left[i - 1] + 1\n            else:\n                left[i] = 1\n\n        # Initialize the last element of the right list as 1\n        right[N - 1] = 1\n\n        # Calculate the length of increasing sequence from the right side\n        for i in range(N - 2, -1, -1):\n            if arr[i] > arr[i + 1]:\n                right[i] = right[i + 1] + 1\n            else:\n                right[i] = 1\n\n        # Calculate the sum of the maximum lengths from the left and right lists\n        ans = 0\n        for i in range(N):\n            ans += max(left[i], right[i])  # Use max() to get the maximum value\n\n        # Return the total minimum value\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    minValue(arr) {\n        const N = arr.length;\n\n        // Arrays to store the count of minimum values needed for each element\n        const left = Array(N).fill(0);\n        const right = Array(N).fill(0);\n\n        // Initialize the left array:\n        // Start by assigning 1 to the first element, as it needs at least 1 minimum\n        // value\n        left[0] = 1;\n\n        // Traverse the array from left to right\n        for (let i = 1; i < N; i++) {\n            // If current element is greater than the previous one, increment the value\n            if (arr[i] > arr[i - 1]) {\n                left[i] = left[i - 1] + 1;\n            } else {\n                // Otherwise, reset it to 1 as the current element doesn't need more\n                // than 1 value\n                left[i] = 1;\n            }\n        }\n\n        // Initialize the right array:\n        // Assign 1 to the last element as it needs at least 1 minimum value\n        right[N - 1] = 1;\n\n        // Traverse the array from right to left\n        for (let i = N - 2; i >= 0; i--) {\n            // If the current element is greater than the next one, increment the value\n            if (arr[i] > arr[i + 1]) {\n                right[i] = right[i + 1] + 1;\n            } else {\n                // Otherwise, reset it to 1 as the current element doesn't need more\n                // than 1 value\n                right[i] = 1;\n            }\n        }\n\n        // Initialize answer variable to store the sum of the maximum values\n        let ans = 0;\n\n        // Traverse the array and sum up the maximum of left[i] and right[i] for each\n        // element\n        for (let i = 0; i < N; i++) {\n            ans += Math.max(left[i], right[i]);\n        }\n\n        // Return the final answer\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}