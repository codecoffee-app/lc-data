{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702724,
            "title": "Minimum value product",
            "titleSlug": "minimum-value-product1814",
            "content": "<p><span style=\"font-size: 12pt;\">Given an array, update all elements of the given array to some minimum value x, such that the product of all elements of this new array is strictly greater than the product of all elements of the initial array.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [4, 2, 1, 10, 6]\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: <strong>4</strong> is the smallest value such that 4 * 4 * 4 * 4 * 4 &gt; 4 * 2 * 1 * 10 * 6.  </span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>arr[] = [100, 150, 10000, 123458, 90980454] \n<strong>Output:</strong> 17592\n</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &le; arr.size &le; 10<sup>6</sup><sup><br /></sup>1 &lt;= arr[i] &lt;= 10<sup>10</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the smallest integer `x` such that if all elements of the array are replaced with `x`, the product of the new array will be strictly greater than the product of the original array.",
                "constraints": [
                    "1 <= arr.size <= 10^6",
                    "1 <= arr[i] <= 10^10"
                ],
                "testcases": [
                    {
                        "input": "[4, 2, 1, 10, 6]",
                        "output": "4",
                        "explanation": "The product of the original array [4, 2, 1, 10, 6] is 480. Replacing all elements with 4 yields [4, 4, 4, 4, 4] which has a product of 1024, which is strictly greater than 480. No smaller value for x will satisfy the condition."
                    },
                    {
                        "input": "[100, 150, 10000, 123458, 90980454]",
                        "output": "17592",
                        "explanation": "After replacing the initial array with [17592, 17592, 17592, 17592, 17592] the product of the new array is strictly greater than the initial array.  This is the smallest integer to satisfy the given condition."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-family: arial, helvetica, sans-serif; font-size: 12pt;\">To find the n-th root of a product P, sum the logs of the elements, divide by <span style=\"font-family: math;\">n, </span>&nbsp;and take the ceiling of the antilog.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "#define EPS 1e-15\n#define ll long long int\n\nclass Solution {\n  public:\n    ll findMinValue(vector<long> arr) {\n        // add logarithmic value of all elements to sum\n\n        long double sum = 0;\n        for (int i = 0; i < arr.size(); i++)\n            sum += (long double)log10(arr[i]) + EPS;\n\n        // to find the nth root of sum\n        long double xl = (long double)(sum / arr.size() + EPS);\n\n        // to find the antilog of xl\n        long double res = pow((long double)10.0, (long double)xl) + EPS;\n        return (ll)ceil(res + EPS);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nimport java.lang.Math;\n\nclass Solution {\n    static double EPS = 1E-15;\n\n    static long findMinValue(long arr[]) {\n        int n = arr.length;\n        // add logarithmic value of all elements to sum\n        double sum = 0;\n        for (int i = 0; i < n; i++) sum += (double)Math.log10(arr[i]) + EPS;\n\n        // to find the nth root of sum\n        double xl = (double)(sum / n + EPS);\n\n        // to find the antilog of xl\n        double res = Math.pow((double)10.0, (double)xl) + EPS;\n        return (long)Math.ceil(res + EPS);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nimport math\n\n\nclass Solution:\n\n    def findMinValue(self, arr):\n\n        n = len(arr)\n\n        # add logarithmic value of all\n        # elements to sum\n        EPS = 1E-15\n        sum = 0\n        for i in range(n):\n            sum += math.log10(arr[i]) + EPS\n\n        # to find the nth root of sum\n        xl = (sum / n + EPS)\n\n        # to find the antilog of xl\n        res = math.pow(10.0, xl) + EPS\n        return math.ceil(res + EPS)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} a\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the minimum value in an array.\n    findMinValue(a) {\n        let n = a.length;\n        // add logarithmic value of all elements to sum\n        let EPS = 1E-15;\n        let sum = 0;\n\n        for (let i = 0; i < n; i++) {\n            sum += Math.log10(a[i]) + EPS;\n        }\n\n        // to find the nth root of sum\n        let xl = (sum / n + EPS);\n\n        // to find the antilog of xl\n        let res = Math.pow(10.0, xl) + EPS;\n\n        return Math.ceil(res + EPS);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}