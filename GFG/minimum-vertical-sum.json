{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701680,
            "title": "Minimum Vertical Sum",
            "titleSlug": "minimum-vertical-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given a vector of vector <strong>arr[][]</strong>. Find the minimum<strong>&nbsp;vertical sum.</strong> Vector inside the vector <strong>arr&nbsp;</strong>may not be of the same size.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [[2, 3, 5], [1, 2], [1, 4, 5, 1]]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>1</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong><span style=\"font-size: 18px;\">\n2 3 5\n1 2\n1 4 5 1\nSo, the vertical sums are [2+1+1], [3+2+4], [5+5], [1]. 1 is the minimum vertical sum.</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr = [[1, 2, 3, 4], [3, 3], [1, 2, 5, 9]]<br /><strong>Output:</strong> 5<br /><strong>Explanation:</strong><br />1 2 3 4<br />3 3<br />1 2 5 9<br />So, the vertical sums are [1+3+1], [2+3+2], [3+5], [4+9]. 5 is the minimum vertical sum.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &nbsp;&lt;= &nbsp;arr.size() &nbsp;&lt;= &nbsp;10<sup>3</sup><br />1 &nbsp;&lt;= &nbsp;arr[i].size() &nbsp;&lt;= &nbsp;10<sup>3</sup><br />1 &nbsp;&lt;= &nbsp;arr[i][j] &lt;= &nbsp;10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Simple Implementation&nbsp;<br />For each column find the sum of each vector element and then find the minimum among them.<br />for j&nbsp;0 to maximum column:<br />&nbsp; &nbsp; &nbsp;sum=0<br />&nbsp; &nbsp; &nbsp;for i 0 to n:<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;sum=sum+v[i][j]<br />&nbsp; &nbsp; ans update<br />return sum</p>\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minimum_vertical_sum(vector<vector<int>>& arr, int n) {\n        // Find the maximum number of columns\n        int maxColumns = 0;\n        for (const auto& row : arr) {\n            maxColumns = max(maxColumns, (int)row.size());\n        }\n\n        // Initialize a vector to store vertical sums\n        vector<int> verticalSums(maxColumns, 0);\n\n        // Calculate vertical sums column by column\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < arr[i].size(); j++) {\n                verticalSums[j] += arr[i][j];\n            }\n        }\n\n        // Find the minimum vertical sum\n        return *min_element(verticalSums.begin(), verticalSums.end());\n    }\n};",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}