{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706237,
            "title": "Minimum XOR value pair",
            "titleSlug": "minimum-xor-value-pair",
            "content": "<p><span style=\"font-size:18px\">Given an array of&nbsp;integers of size N find minimum xor of any 2 elements.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong></span>:\n<span style=\"font-size:18px\">N = 3\narr[] = {9,5,3}\n<strong>Output:</strong>&nbsp;6\n<strong>Explanation</strong>: \nThere are 3 pairs -\n9^5 = 12\n5^3 = 6\n9^3 = 10\nTherefore output is 6.\n</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>minxorpair()</strong>&nbsp;which takes the array arr[], its size N<strong> </strong>as input parameters&nbsp;and returns the minimum value of xor of any 2 elements.</span><br />\n<br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span><br />\n<br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>5</sup></span><br />\n<span style=\"font-size:18px\">1<sup> </sup>&lt;= arr[i] &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Create a trie where every node has two children 0 and 1.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{   \npublic:\n    #define INT_SIZE 32 \n\n// A Trie Node \nstruct TrieNode { \n\tint value; // used in leaf node \n\tTrieNode* Child[2]; \n}; \n\n// Utility function to create a new Trie node \nTrieNode* getNode() \n{ \n\tTrieNode* newNode = new TrieNode; \n\tnewNode->value = 0; \n\tnewNode->Child[0] = newNode->Child[1] = NULL; \n\treturn newNode; \n} \n\n// utility function insert new key in trie \nvoid insert(TrieNode* root, int key) \n{ \n\tTrieNode* temp = root; \n\n\t// start from the most significant bit, insert all \n\t// bit of key one-by-one into trie \n\tfor (int i = INT_SIZE - 1; i >= 0; i--) { \n\t\t// Find current bit in given prefix \n\t\tbool current_bit = (key & (1 << i)); \n\n\t\t// Add a new Node into trie \n\t\tif (temp->Child[current_bit] == NULL) \n\t\t\ttemp->Child[current_bit] = getNode(); \n\n\t\ttemp = temp->Child[current_bit]; \n\t} \n\n\t// store value at leafNode \n\ttemp->value = key; \n} \n\n// Returns minimum XOR value of an integer inserted \n// in Trie and given key. \nint minXORUtil(TrieNode* root, int key) \n{ \n\tTrieNode* temp = root; \n\n\tfor (int i = INT_SIZE - 1; i >= 0; i--) { \n\t\t// Find current bit in given prefix \n\t\tbool current_bit = (key & (1 << i)); \n\n\t\t// Traversal Trie, look for prefix that has \n\t\t// same bit \n\t\tif (temp->Child[current_bit] != NULL) \n\t\t\ttemp = temp->Child[current_bit]; \n\n\t\t// if there is no same bit.then looking for \n\t\t// opposite bit \n\t\telse if (temp->Child[1 - current_bit] != NULL) \n\t\t\ttemp = temp->Child[1 - current_bit]; \n\t} \n\n\t// return xor value of minimum bit difference value \n\t// so we get minimum xor value \n\treturn key ^ temp->value; \n} \n\n// Returns minimum xor value of pair in arr[0..n-1] \nint minxorpair(int N, int arr[]) \n{ \n\tint min_xor = INT_MAX; // Initialize result \n\n\t// create a True and insert first element in it \n\tTrieNode* root = getNode(); \n\tinsert(root, arr[0]); \n\n\t// Traverse all array element and find minimum xor \n\t// for every element \n\tfor (int i = 1; i < N; i++) { \n\t\t// Find minimum XOR value of current element with \n\t\t// previous elements inserted in Trie \n\t\tmin_xor = min(min_xor, minXORUtil(root, arr[i])); \n\n\t\t// insert current array value into Trie \n\t\tinsert(root, arr[i]); \n\t} \n\treturn min_xor; \n} \n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\n{\n    static int INT_SIZE = 32;\n\n    // A Trie Node\n    class TrieNode\n    {\n        int value; // used in leaf node\n        TrieNode Child[]= new TrieNode[2];\n    };\n\n    // Utility function to create a new Trie node\n    TrieNode getNode()\n    {\n        TrieNode newNode = new TrieNode();\n        newNode.value = 0;\n        newNode.Child[0] = newNode.Child[1] = null;\n        return newNode;\n    }\n\n    // utility function insert new key in trie\n    void insert(TrieNode root, int key)\n    {\n        TrieNode temp = root;\n\n        // start from the most significant bit, insert all\n        // bit of key one-by-one into trie\n        for (int i = INT_SIZE - 1; i >= 0; i--)\n        {\n            // Find current bit in given prefix\n            int current_bit = ((key & (1 << i))>0?1:0);\n        \n            // Add a new Node into trie\n            if (temp.Child[current_bit] == null)\n                temp.Child[current_bit] = getNode();\n\n            temp = temp.Child[current_bit];\n        }\n\n        // store value at leafNode\n        temp.value = key;\n    }\n\n    // Returns minimum XOR value of an integer inserted\n    // in Trie and given key.\n    int minXORUtil(TrieNode root, int key)\n    {\n        TrieNode temp = root;\n\n        for (int i = INT_SIZE - 1; i >= 0; i--)\n        {\n            // Find current bit in given prefix\n            int current_bit = ((key & (1 << i))>0?1:0);\n\n            // Traversal Trie, look for prefix that has\n            // same bit\n            if (temp.Child[current_bit] != null)\n                temp = temp.Child[current_bit];\n\n            // if there is no same bit.then looking for\n            // opposite bit\n            else if (temp.Child[1 - current_bit] != null)\n                temp = temp.Child[1 - current_bit];\n        }\n\n        // return xor value of minimum bit difference value\n        // so we get minimum xor value\n        return key ^ temp.value;\n    }\n\n    // Returns minimum xor value of pair in arr[0..n-1]\n    int minxorpair(int N, int arr[])\n    {\n        int min_xor = Integer.MAX_VALUE; // Initialize result\n\n        // create a True and insert first element in it\n        TrieNode root = getNode();\n        insert(root, arr[0]);\n\n        // Traverse all array element and find minimum xor\n        // for every element\n        for (int i = 1; i < N; i++)\n        {\n            // Find minimum XOR value of current element with\n            // previous elements inserted in Trie\n            min_xor = Math.min(min_xor, minXORUtil(root, arr[i]));\n\n            // insert current array value into Trie\n            insert(root, arr[i]);\n        }\n        return min_xor;\n    }\n\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "INT_SIZE = 32   #defining the size of an integer (32 bits)\n\nclass TrieNode:\n    def __init__(self):\n        self.value = 0;   #initializing the value of the trie node to 0\n        self.Child = [None , None]   #creating an array to store the child nodes\n\ndef getNode():\n    newNode = TrieNode()   #creating a new trie node\n    return newNode\n\ndef insert(root,key):   #function to insert a key into the trie\n    temp = root\n    \n    for i in range(INT_SIZE-1,-1,-1):   #iterating through each bit of the key\n        \n        current_bit = 1 if (key&(1<<i)) else 0   #getting the current bit value of the key\n        \n        if temp.Child[current_bit] == None :   #if child node doesn't exist for the current bit\n            temp.Child[current_bit] = getNode()   #create a new node\n        \n        temp = temp.Child[current_bit]   #move to the next node\n    \n    temp.value = key   #store the key value in the last node\n\ndef minXORUtil(root,key):   #function to find the minimum XOR value\n    temp = root\n    \n    for i in range(INT_SIZE-1,-1,-1):   #iterating through each bit of the key\n        \n        current_bit = 1 if (key&(1<<i)) else 0   #getting the current bit value of the key\n\n        if temp.Child[current_bit] != None :   #if child node exist for the current bit\n            temp = temp.Child[current_bit]   #move to the next node\n        elif temp.Child[1-current_bit]!=None :   #if child node exist for the opposite bit\n            temp = temp.Child[1-current_bit]   #move to the next node\n\n    return temp.value ^ key   #return the XOR of the value stored in the last node with the key\n    \n\nclass Solution:\n    def minxorpair (self, N, arr):   #main function to find the minimum XOR pair\n        min_xor = 2**33   #initialize the minimum XOR value with a large number\n\n        root = getNode()   #creating the root node of the trie\n\n        insert(root,arr[0])   #inserting the first element of the array into the trie\n\n        for i in range(1,N):   #iterating through the rest of the array\n            min_xor = min(min_xor,minXORUtil(root,arr[i]))   #finding the minimum XOR value\n            insert(root,arr[i])   #inserting the current element into the trie\n\n        return min_xor   #return the minimum XOR value between any pair of elements in the array",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    minxorpair(arr, n){\n        arr.sort((a, b) => a - b);\n\n        let minXor = Infinity;\n\n        for(let i = 0; i < n - 1; i++){\n            minXor = Math.min(minXor, arr[i] ^ arr[i+1]);\n        }\n\n        return minXor;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    const int INT_SIZE = 32;\n\n    // A Trie Node \n    class TrieNode\n    {\n        public int value; // used in leaf node \n        public TrieNode[] Child;\n\n        public TrieNode()\n        {\n            value = 0;\n            Child = new TrieNode[2];\n            Child[0] = null;\n            Child[1] = null;\n        }\n    }\n\n    // utility function insert new key in trie \n    void insert(TrieNode root, int key)\n    {\n        TrieNode temp = root;\n\n        // start from the most significant bit, insert all \n        // bit of key one-by-one into trie \n        for (int i = INT_SIZE - 1; i >= 0; i--)\n        {\n            // Find current bit in given prefix \n            bool current_bit = (key & (1 << i)) != 0;\n\n            // Add a new Node into trie \n            if (temp.Child[Convert.ToInt32(current_bit)] == null)\n                temp.Child[Convert.ToInt32(current_bit)] = new TrieNode();\n\n            temp = temp.Child[Convert.ToInt32(current_bit)];\n        }\n\n        // store value at leafNode \n        temp.value = key;\n    }\n\n    // Returns minimum XOR value of an integer inserted \n    // in Trie and given key. \n    int minXORUtil(TrieNode root, int key)\n    {\n        TrieNode temp = root;\n\n        for (int i = INT_SIZE - 1; i >= 0; i--)\n        {\n            // Find current bit in given prefix \n            bool current_bit = (key & (1 << i)) != 0;\n\n            // Traversal Trie, look for prefix that has \n            // same bit \n            if (temp.Child[Convert.ToInt32(current_bit)] != null)\n                temp = temp.Child[Convert.ToInt32(current_bit)];\n\n            // if there is no same bit.then looking for \n            // opposite bit \n            else if (temp.Child[1 - Convert.ToInt32(current_bit)] != null)\n                temp = temp.Child[1 - Convert.ToInt32(current_bit)];\n        }\n\n        // return xor value of minimum bit difference value \n        // so we get minimum xor value \n        return key ^ temp.value;\n    }\n\n    //Complete this function\n    public int minxorpair(int N, int[] arr)\n    {\n        int min_xor = int.MaxValue; // Initialize result \n\n        // create a True and insert first element in it \n        TrieNode root = new TrieNode();\n        insert(root, arr[0]);\n\n        // Traverse all array element and find minimum xor \n        // for every element \n        for (int i = 1; i < N; i++)\n        {\n            // Find minimum XOR value of current element with \n            // previous elements inserted in Trie \n            min_xor = Math.Min(min_xor, minXORUtil(root, arr[i]));\n\n            // insert current array value into Trie \n            insert(root, arr[i]);\n        }\n        return min_xor;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}