{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700155,
      "title": "Mirror Tree",
      "titleSlug": "mirror-tree",
      "content": "<p><span style=\"font-size: 18px;\">Given a binary tree, convert the binary tree to its Mirror tree. </span></p>\n<p><span style=\"font-size: 18px;\">Mirror of a Binary Tree T is another Binary Tree M(T) with left and right children of all non-leaf nodes interchanged.&nbsp; &nbsp; &nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">root[] = [1, 2, 3, N, N, 4]\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">[1, 3, 2, N, 4]</span><strong style=\"font-size: 18px;\">\nExplanation: </strong><span style=\"font-size: 18px;\"><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700155/Web/Other/blobid0_1736926809.png\" alt=\"\" width=\"523\" height=\"262\" /><br />In the inverted tree, every non-leaf node has its left and right child interchanged.</span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">root[] = [1, 2, 3, 4, 5]\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">[1, 3, 2, N, N, 5, 4]</span><strong style=\"font-size: 18px;\">\nExplanation:<br /></strong><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700155/Web/Other/blobid1_1736926809.png\" alt=\"\" width=\"525\" height=\"263\" /><br />In the inverted tree, every non-leaf node has its left and right child interchanged.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>5</sup><br />1 &le; node-&gt;data &le; 10<sup>5</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given a binary tree, transform it into its mirror image.  A mirror tree of a binary tree T, denoted as M(T), is created by swapping the left and right children of every non-leaf node.",
        "constraints": [
          "1 <= number of nodes <= 10^5",
          "1 <= node data <= 10^5"
        ],
        "testcases": [
          {
            "input": "[1, 2, 3, N, N, 4]",
            "output": "[1, 3, 2, N, 4]",
            "explanation": "The left and right children of node 1 are swapped. The right child 3 now has 4 as its right child."
          },
          {
            "input": "[1, 2, 3, 4, 5]",
            "output": "[1, 3, 2, N, N, 5, 4]",
            "explanation": "The left and right children of node 1 are swapped. The left children of 2 and 3 are swapped."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p><span style=\"font-size:18px\">Algorithm:</span></p>\n\n<ul>\n\t<li><span style=\"font-size:18px\">Call&nbsp;function recursively for left-subtrees.&nbsp;</span></li>\n\t<li><span style=\"font-size:18px\">Call&nbsp;function recursively for right-subtrees.</span></li>\n\t<li><span style=\"font-size:18px\">Swap left and right subtrees.&nbsp; &nbsp;</span></li>\n</ul>"
    ],
    "relatedTopics": [
      {
        "name": "Tree",
        "slug": "tree"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": [
      "paytm",
      "vmware",
      "morgan-stanley",
      "accolite",
      "amazon",
      "microsoft",
      "samsung",
      "snapdeal",
      "ola-cabs",
      "walmart",
      "goldman-sachs",
      "adobe",
      "google",
      "sap",
      "myntra",
      "belzabar",
      "ebay",
      "proptiger"
    ],
    "solutions": [
      {
        "lang": "C",
        "full_func": "// Function to mirror the binary tree\n/*\ntypedef struct Node {\n    int data;\n    struct Node *left;\n    struct Node *right;\n} Node;\n\nNode *newNode(int x) {\n    Node *node = (Node *)malloc(sizeof(Node));\n    node->data = x;\n    node->left = NULL;\n    node->right = NULL;\n    return node;\n}\n*/\nvoid mirror(Node *node) {\n    if (node == NULL)\n        return;\n\n    // Recursively mirror left and right subtrees\n    mirror(node->left);\n    mirror(node->right);\n\n    // Swap left and right subtrees\n    Node *temp = node->left;\n    node->left = node->right;\n    node->right = temp;\n}\n",
        "lang_text": "c"
      },
      {
        "lang": "C++",
        "full_func": "// Full function Template for C++\n/*\nclass Node {\npublic:\n    int data;\n    Node *left;\n    Node *right;\n\n    Node(int x) {\n        data = x;\n        left = right = NULL;\n    }\n};\n*/\nclass Solution {\n  public:\n    // Function to convert a binary tree into its mirror tree.\n    void mirror(Node* node) {\n        if (node == NULL)\n            return;\n\n        // calling mirror function recursively for left and right subtrees.\n        mirror(node->left);\n        mirror(node->right);\n\n        // swapping the left and right subtree.\n        swap(node->left, node->right);\n    }\n};\n",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "//Back-end complete function Template for Java\n/* A Binary Tree node\nclass Node\n{\n    int data;\n    Node left, right;\n   Node(int item)\n   {\n        data = item;\n        left = right = null;\n    }\n} */\nclass Solution {\n    // Function to convert a binary tree into its mirror tree.\n    void mirror(Node node) {\n        if (node == null) return;\n        Node temp;\n\n        // calling mirror function recursively for left and right subtrees.\n        mirror(node.left);\n        mirror(node.right);\n\n        // swapping the left and right subtree.\n        temp = node.left;\n        node.left = node.right;\n        node.right = temp;\n    }\n}\n",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to convert a binary tree into its mirror tree.\n    def mirror(self, node):\n        if node is None:\n            return\n\n        #calling mirror function recursively for left and right subtrees.\n        self.mirror(node.left)\n        self.mirror(node.right)\n\n        #swapping the left and right subtree.\n        temp = node.left\n        node.left = node.right\n        node.right = temp\n",
        "lang_text": "py"
      },
      {
        "lang": "C#",
        "full_func": "//Back-end complete function Template for csharp\n\nclass Solution {\n    // Function to convert a binary tree into its mirror tree.\n    public void mirror(Node node) {\n        if (node == null) return;\n\n        // calling mirror function recursively for left and right subtrees.\n        mirror(node.left);\n        mirror(node.right);\n\n        // swapping the left and right subtree.\n        Node temp = node.left;\n        node.left = node.right;\n        node.right = temp;\n    }\n}\n}",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "//Back-end complete function Template for javascript\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\nclass Solution {\n    /**\n     * @param {Node} node\n     * @return {void}\n     */\n    // Function to convert a binary tree into its mirror tree.\n    mirror(node) {\n        if (node === null) return;\n\n        // calling mirror function recursively for left and right subtrees.\n        this.mirror(node.left);\n        this.mirror(node.right);\n\n        // swapping the left and right subtree.\n        let temp = node.left;\n        node.left = node.right;\n        node.right = temp;\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
