{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703570,
            "title": "Missing Intervals",
            "titleSlug": "missing-intervals3058",
            "content": "<p><span style=\"font-size: 18px;\">Given a sorted array <strong>arr</strong><strong>[]</strong> of integers varying from range <strong>l</strong> to <strong>r</strong>. Find all the missing intervals range in array <strong>arr[]</strong> from the given range and return in sorted order.</span><br /><span style=\"font-size: 18px;\"><strong>Note:&nbsp;</strong>If no Integer is missing return <strong>{-1,-1}</strong>.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 5, 6, 7, 9], l = 1, r = 9\n<strong>Output: </strong>[{2, 4}, {8, 8}]\n<strong>Explanation: </strong>all the missing intervals which are not present in array are returned.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2: </strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 4, 5, 5], l = 3, r = 5 \n<strong>Output: </strong>[{-1,-1}]<br /><strong>Explanation:</strong> There are no missing number from the interval.</span>&nbsp;</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i]&nbsp;</span><span style=\"font-size: 18px;\">&le;</span><span style=\"font-size: 18px;\"> 10</span><sup>6<br /></sup><span style=\"font-size: 18px;\">0 &le; l </span><span style=\"font-size: 18px;\">&le;</span><span style=\"font-size: 18px;\"> r </span><span style=\"font-size: 18px;\">&le;</span><span style=\"font-size: 18px;\"> 10</span><sup>6</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr` of integers within the range `l` to `r`, identify and return all missing intervals within that range. The intervals should be returned in sorted order.  If no integers are missing, return `[[-1,-1]]`.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "0 <= arr[i] <= 10^6",
                    "0 <= l <= r <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr = [1, 5, 6, 7, 9], l = 1, r = 9",
                        "output": "[[2, 4], [8, 8]]",
                        "explanation": "The missing intervals within the range 1 to 9 are [2, 4] and [8, 8]."
                    },
                    {
                        "input": "arr = [3, 4, 5, 5], l = 3, r = 5",
                        "output": "[[-1,-1]]",
                        "explanation": "There are no missing integers within the range 3 to 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>traverse in arrays and check the if there is any interval missing between adjacent elements?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<pair<int, int>> missingIntervals(vector<int> &arr, int l, int r) {\n        int n = arr.size();\n        vector<pair<int, int>> ans;\n        if (arr.front() != l) {\n            ans.push_back({l, arr.front() - 1});\n        }\n\n        for (int i = 0; i < n - 1; i++) {\n            int diff = arr[i + 1] - arr[i];\n            if (diff >= 2) {\n                ans.push_back({arr[i] + 1, arr[i + 1] - 1});\n            }\n        }\n\n        if (arr.back() != r) {\n            ans.push_back({arr.back() + 1, r});\n        }\n\n        if (ans.empty()) {\n            ans.push_back({-1, -1});\n        }\n\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<int[]> missingIntervals(int[] arr, int l, int r) {\n        int n = arr.length;\n        List<int[]> ans = new ArrayList<>();\n        if (arr[0] != l) {\n            ans.add(new int[] {l, arr[0] - 1});\n        }\n\n        for (int i = 0; i < n - 1; i++) {\n            int diff = arr[i + 1] - arr[i];\n            if (diff >= 2) {\n                ans.add(new int[] {arr[i] + 1, arr[i + 1] - 1});\n            }\n        }\n\n        if (arr[n - 1] != r) {\n            ans.add(new int[] {arr[n - 1] + 1, r});\n        }\n\n        if (ans.isEmpty()) {\n            ans.add(new int[] {-1, -1});\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def missingIntervals(self, arr, l, r):\n        n = len(arr)\n        ans = []\n        if arr[0] != l:\n            ans.append((l, arr[0] - 1))\n\n        for i in range(n - 1):\n            diff = arr[i + 1] - arr[i]\n            if diff >= 2:\n                ans.append((arr[i] + 1, arr[i + 1] - 1))\n\n        if arr[-1] != r:\n            ans.append((arr[-1] + 1, r))\n\n        if not ans:\n            ans.append((-1, -1))\n\n        return ans\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}