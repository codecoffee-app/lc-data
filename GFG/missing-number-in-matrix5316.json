{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705158,
            "title": "Missing number in matrix",
            "titleSlug": "missing-number-in-matrix5316",
            "content": "<p>Given a matrix of size <strong>n x n</strong>&nbsp;such that it has only <strong>one</strong> <strong>0</strong>, Find the <strong>positive&nbsp;number</strong>&nbsp;(greater than zero) to be placed in place of the 0&nbsp;such that sum of the numbers in every row, column and two diagonals become equal. If no such number exists, return -1.</p>\n<p><strong>Note:</strong>&nbsp;Diagonals should be only of the form matrix[i][i]&nbsp;and matrix[i][n-i-1]. <strong>n</strong> is always greater than 1. The <strong>answer</strong> can be greater than&nbsp;<strong>10<sup>9</sup></strong>.<span style=\"font-size: 10.8333px;\">&nbsp;</span><br />&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input: </strong>matrix = {{5, 5}, {5, 0}}\n<strong>Output: </strong>5\n<strong>Explanation: </strong>The matrix is\n5 5\n5 0\nTherefore If we place 5 instead of 0, all\nthe element of matrix will become 5. \nTherefore row 5+5=10, column 5+5=10 and \ndiagonal 5+5=10, all are equal.</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong>matrix = {{1, 2, 0}, {3, 1, 2}, \n{2, 3, 1}}\n<strong>Output: </strong>-1\n<strong>Explanation: </strong>It is not possible to insert \nan element in place of 0 so that the \ncondition is satisfied.thus result is -1.&nbsp;\n\n</pre>\n<p><strong>Your Task:</strong><br />You don't need to read or print anyhting. Your task is to complete the function&nbsp;<strong>MissingNo()&nbsp;</strong>which takes the matrix as input parameter and returns the number which should be placed in place of 0 such that the condition gets satisfied. If not possible return -1.<br />&nbsp;</p>\n<p><strong>Expected Time Complexity:&nbsp;</strong>O(n * n)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(2 * n)<br />&nbsp;</p>\n<p><strong>Constraints:</strong><br />2 &lt;= n &lt;= 1000<br />1 &lt;= elements in the matrix &lt;= 10^9</p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square matrix of size **n x n** containing exactly one zero, find a **positive integer** to replace the zero such that the sum of each row, column, and the two main diagonals are equal. If no such integer exists, return -1.\n\n**Note:**\n*   Diagonals are defined as matrix[i][i] and matrix[i][n-i-1].\n*   **n** is always greater than 1.\n*   The answer can exceed 10<sup>9</sup>.",
                "constraints": [
                    "2 <= n <= 1000",
                    "1 <= elements in the matrix <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "{{5, 5}, {5, 0}}",
                        "output": "5",
                        "explanation": "Replacing 0 with 5 results in the matrix {{5, 5}, {5, 5}}. The sum of each row, column, and diagonal is 10, satisfying the condition."
                    },
                    {
                        "input": "{{1, 2, 0}, {3, 1, 2}, {2, 3, 1}}",
                        "output": "-1",
                        "explanation": "No positive integer can replace 0 to satisfy the condition that all rows, columns, and diagonals have the same sum."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find sum of every row, col and diagonal and then check the condition.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\npublic:\r\n    long long int MissingNo(vector<vector<int> >& matrix) {\r\n    \tset<long long int>nonzero, zero;\r\n    \t\r\n    \t// Interating through rows\r\n    \tfor(int i = 0; i < matrix.size(); i++){\r\n    \t\tbool f = true;\r\n    \t\tlong long int sum = 0;\r\n    \t\tfor(int j = 0; j < matrix[0].size(); j++){\r\n    \t\t\tsum += matrix[i][j];\r\n    \t\t\tif(!matrix[i][j])\r\n    \t\t\t\tf = false;\r\n    \t\t}\r\n    \t\tif(f)nonzero.insert(sum);\r\n    \t\tif(!f)zero.insert(sum);\r\n    \t}\r\n    \t// Interating through coloumns\r\n    \tfor(int  j = 0; j < matrix[0].size(); j++){\r\n    \t\tbool f = true;\r\n    \t\tlong long int sum = 0;\r\n    \t\tfor(int i = 0; i < matrix.size(); i++){\r\n    \t\t\tsum += matrix[i][j];\r\n    \t\t\tif(!matrix[i][j])\r\n    \t\t\t\tf = false;\r\n    \t\t}\r\n    \t\tif(f)nonzero.insert(sum);\r\n    \t\tif(!f)zero.insert(sum);\r\n    \t}\r\n    \t// Interating through diagonals\r\n    \tbool f = true;\r\n    \tlong long int sum = 0;\r\n    \tfor(int i = 0; i < matrix.size(); i++){\r\n    \t\tsum += matrix[i][i];\r\n    \t\tif(!matrix[i][i])\r\n    \t\t\tf = false;\r\n    \t}\r\n    \tif(f)nonzero.insert(sum);\r\n\t\tif(!f)zero.insert(sum);\r\n    \t// Interating through diagonals\r\n    \tf = true;\r\n    \tsum = 0;\r\n    \tfor(int i = 0, j = matrix.size() - 1; j >= 0; i++,j--){\r\n    \t\tsum += matrix[i][j];\r\n    \t\tif(!matrix[i][j])\r\n    \t\t\tf = false;\r\n    \t}\r\n\t\tif(f)nonzero.insert(sum);\r\n\t\tif(!f)zero.insert(sum);\r\n    \tif(nonzero.size() == 1 and zero.size() == 1){\r\n    \t\tlong long int x = *nonzero.begin();\r\n    \t\tlong long int y = *zero.begin();\r\n    \t\tif(x <= y)\r\n    \t\t\treturn -1;\r\n    \t\treturn x - y;\r\n    \t}\r\n    \treturn -1;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    public long  MissingNo(int[][] matrix)\r\n    {\r\n        // code here\r\n        TreeSet<Long>nonzero=new TreeSet<>(), zero=new TreeSet<>();\r\n    \t\r\n    \t// Interating through rows\r\n    \tfor(int i = 0; i < matrix.length; i++){\r\n    \t\tboolean f = true;\r\n    \t\tlong sum = 0;\r\n    \t\tfor(int j = 0; j < matrix[0].length; j++){\r\n    \t\t\tsum += matrix[i][j];\r\n    \t\t\tif(matrix[i][j]==0)\r\n    \t\t\t\tf = false;\r\n    \t\t}\r\n    \t\tif(f)nonzero.add(sum);\r\n    \t\tif(!f)zero.add(sum);\r\n    \t}\r\n    \t// Interating through coloumns\r\n    \tfor(int  j = 0; j < matrix[0].length; j++){\r\n    \t\tboolean f = true;\r\n    \t\tlong sum = 0;\r\n    \t\tfor(int i = 0; i < matrix.length; i++){\r\n    \t\t\tsum += matrix[i][j];\r\n    \t\t\tif(matrix[i][j]==0)\r\n    \t\t\t\tf = false;\r\n    \t\t}\r\n    \t\tif(f)nonzero.add(sum);\r\n    \t\tif(!f)zero.add(sum);\r\n    \t}\r\n    \t// Interating through diagonals\r\n    \tboolean f = true;\r\n    \tlong sum = 0;\r\n    \tfor(int i = 0; i < matrix.length; i++){\r\n    \t\tsum += matrix[i][i];\r\n    \t\tif(matrix[i][i]==0)\r\n    \t\t\tf = false;\r\n    \t}\r\n    \tif(f)nonzero.add(sum);\r\n\t\tif(!f)zero.add(sum);\r\n    \t// Interating through diagonals\r\n    \tf = true;\r\n    \tsum = 0;\r\n    \tfor(int i = 0, j = matrix.length - 1; j >= 0; i++,j--){\r\n    \t\tsum += matrix[i][j];\r\n    \t\tif(matrix[i][j]==0)\r\n    \t\t\tf = false;\r\n    \t}\r\n\t\tif(f)nonzero.add(sum);\r\n\t\tif(!f)zero.add(sum);\r\n    \tif(nonzero.size() == 1 && zero.size() == 1){\r\n    \t\tlong x = nonzero.first();\r\n    \t\tlong y = zero.first();\r\n    \t\tif(x <= y)\r\n    \t\t\treturn -1;\r\n    \t\treturn x - y;\r\n    \t}\r\n    \treturn -1;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def MissingNo(self, matrix):\n        nonzero = [\n        ]  #list to store sum of rows/columns/diagonals without zeroes\n        zero = []  #list to store sum of rows/columns/diagonals with zeroes\n\n        #iterating over each row in the matrix\n        for i in range(len(matrix)):\n            f = True  #flag to check if there are zero elements in the row\n            sum = 0  #variable to store the sum of row elements\n\n            #iterating over each element in the row\n            for j in range(len(matrix[i])):\n                sum += matrix[i][j]  #calculating the sum\n                if not matrix[i][j]:  #if element is zero, update the flag\n                    f = False\n\n            #checking if the row does not contain any zeroes\n            if f:\n                nonzero.append(sum)  #add the sum to the nonzero list\n            else:\n                zero.append(sum)  #add the sum to the zero list\n\n        #iterating over each column in the matrix\n        for j in range(len(matrix[0])):\n            f = True  #flag to check if there are zero elements in the column\n            sum = 0  #variable to store the sum of column elements\n\n            #iterating over each element in the column\n            for i in range(len(matrix)):\n                sum += matrix[i][j]  #calculating the sum\n                if not matrix[i][j]:  #if element is zero, update the flag\n                    f = False\n\n            #checking if the column does not contain any zeroes\n            if f:\n                nonzero.append(sum)  #add the sum to the nonzero list\n            else:\n                zero.append(sum)  #add the sum to the zero list\n\n        f = True  #flag to check if there are zero elements in the diagonal\n        sum = 0  #variable to store the sum of diagonal elements\n\n        #iterating over the diagonal elements\n        for i in range(len(matrix)):\n            sum += matrix[i][i]  #calculating the sum\n            if not matrix[i][i]:  #if element is zero, update the flag\n                f = False\n\n        #checking if the diagonal does not contain any zeroes\n        if f:\n            nonzero.append(sum)  #add the sum to the nonzero list\n        else:\n            zero.append(sum)  #add the sum to the zero list\n\n        f = True  #flag to check if there are zero elements in the diagonal\n        sum = 0  #variable to store the sum of diagonal elements\n        i = 0  #variable to iterate over rows\n        j = len(matrix[0]) - 1  #variable to iterate over columns in reverse\n\n        #iterating over the reverse diagonal elements\n        while i < len(matrix) and j >= 0:\n            sum += matrix[i][j]  #calculating the sum\n            if not matrix[i][j]:  #if element is zero, update the flag\n                f = False\n            i += 1\n            j -= 1\n\n        #checking if the reverse diagonal does not contain any zeroes\n        if f:\n            nonzero.append(sum)  #add the sum to the nonzero list\n        else:\n            zero.append(sum)  #add the sum to the zero list\n\n        #if there is only one unique value in both zero and nonzero lists\n        if len(set(zero)) == 1 and len(set(nonzero)) == 1:\n            x = zero[0]  #value of sum with zeroes\n            y = nonzero[0]  #value of sum without zeroes\n\n            #if sum with zeroes is greater than or equal to sum without zeroes, return -1\n            if x >= y:\n                return -1\n            return y - x  #return the difference between sum without zeroes and sum with zeroes\n\n        return -1  #return -1 if the conditions above are not satisfied\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    public long MissingNo(List<List<int>> matrix)\n    {\n        HashSet<long> nonzero = new HashSet<long>();\n        HashSet<long> zero = new HashSet<long>();\n\n        // Iterating through rows\n        for (int i = 0; i < matrix.Count; i++)\n        {\n            bool flag1 = true;\n            long sum = 0;\n            for (int j = 0; j < matrix[0].Count; j++)\n            {\n                sum += matrix[i][j];\n                if (matrix[i][j] == 0)\n                    flag1 = false;\n            }\n            if (flag1) nonzero.Add(sum);\n            if (!flag1) zero.Add(sum);\n        }\n\n        // Iterating through columns\n        for (int j = 0; j < matrix[0].Count; j++)\n        {\n            bool flag2 = true;\n            long sum = 0;\n            for (int i = 0; i < matrix.Count; i++)\n            {\n                sum += matrix[i][j];\n                if (matrix[i][j] == 0)\n                    flag2 = false;\n            }\n            if (flag2) nonzero.Add(sum);\n            if (!flag2) zero.Add(sum);\n        }\n\n        // Iterating through diagonals\n        bool flag3 = true;\n        long diagSum = 0;\n        for (int i = 0; i < matrix.Count; i++)\n        {\n            diagSum += matrix[i][i];\n            if (matrix[i][i] == 0)\n                flag3 = false;\n        }\n        if (flag3) nonzero.Add(diagSum);\n        if (!flag3) zero.Add(diagSum);\n\n        // Iterating through diagonals\n        flag3 = true;\n        diagSum = 0;\n        for (int i = 0, j = matrix.Count - 1; j >= 0; i++, j--)\n        {\n            diagSum += matrix[i][j];\n            if (matrix[i][j] == 0)\n                flag3 = false;\n        }\n        if (flag3) nonzero.Add(diagSum);\n        if (!flag3) zero.Add(diagSum);\n\n        if (nonzero.Count == 1 && zero.Count == 1)\n        {\n            long x = nonzero.First();\n            long y = zero.First();\n            if (x <= y)\n                return -1;\n            return x - y;\n        }\n        return -1;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to find the missing element of an array.\n    MissingNo(matrix) {\n        let nonzero = []; //list to store sum of rows/columns/diagonals without zeroes\n        let zero = []; //list to store sum of rows/columns/diagonals with zeroes\n        \n        //iterating over each row in the matrix\n        for (let i = 0; i < matrix.length; i++) {\n            let f = true; //flag to check if there are zero elements in the row\n            let sum = 0; //variable to store the sum of row elements\n            \n            //iterating over each element in the row\n            for (let j = 0; j < matrix[i].length; j++) {\n                sum += matrix[i][j]; //calculating the sum\n                if (!matrix[i][j]) { //if element is zero, update the flag\n                    f = false;\n                }\n            }\n            \n            //checking if the row does not contain any zeroes\n            if (f) {\n                nonzero.push(sum); //add the sum to the nonzero list\n            } else {\n                zero.push(sum); //add the sum to the zero list\n            }\n        }\n        \n        //iterating over each column in the matrix\n        for (let j = 0; j < matrix[0].length; j++) {\n            let f = true; //flag to check if there are zero elements in the column\n            let sum = 0; //variable to store the sum of column elements\n            \n            //iterating over each element in the column\n            for (let i = 0; i < matrix.length; i++) {\n                sum += matrix[i][j]; //calculating the sum\n                if (!matrix[i][j]) { //if element is zero, update the flag\n                    f = false;\n                }\n            }\n            \n            //checking if the column does not contain any zeroes\n            if (f) {\n                nonzero.push(sum); //add the sum to the nonzero list\n            } else {\n                zero.push(sum); //add the sum to the zero list\n            }\n        }\n        \n        let f = true; //flag to check if there are zero elements in the diagonal\n        let sum = 0; //variable to store the sum of diagonal elements\n        \n        //iterating over the diagonal elements\n        for (let i = 0; i < matrix.length; i++) {\n            sum += matrix[i][i]; //calculating the sum\n            if (!matrix[i][i]) { //if element is zero, update the flag\n                f = false;\n            }\n        }\n        \n        //checking if the diagonal does not contain any zeroes\n        if (f) {\n            nonzero.push(sum); //add the sum to the nonzero list\n        } else {\n            zero.push(sum); //add the sum to the zero list\n        }\n        \n        f = true; //flag to check if there are zero elements in the diagonal\n        sum = 0; //variable to store the sum of diagonal elements\n        let i = 0; //variable to iterate over rows\n        let j = matrix[0].length - 1; //variable to iterate over columns in reverse\n        \n        //iterating over the reverse diagonal elements\n        while (i < matrix.length && j >= 0) {\n            sum += matrix[i][j]; //calculating the sum\n            if (!matrix[i][j]) { //if element is zero, update the flag\n                f = false;\n            }\n            i++;\n            j--;\n        }\n        \n        //checking if the reverse diagonal does not contain any zeroes\n        if (f) {\n            nonzero.push(sum); //add the sum to the nonzero list\n        } else {\n            zero.push(sum); //add the sum to the zero list\n        }\n        \n        //if there is only one unique value in both zero and nonzero lists\n        if (new Set(zero).size === 1 && new Set(nonzero).size === 1) {\n            let x = zero[0]; //value of sum with zeroes\n            let y = nonzero[0]; //value of sum without zeroes\n            \n            //if sum with zeroes is greater than or equal to sum without zeroes, return -1\n            if (x >= y) {\n                return -1;\n            }\n            return y - x; //return the difference between sum without zeroes and sum with zeroes\n        }\n        \n        return -1; //return -1 if the conditions above are not satisfied\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}