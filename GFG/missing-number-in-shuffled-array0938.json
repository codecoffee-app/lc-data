{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703175,
            "title": "Missing number in shuffled array",
            "titleSlug": "missing-number-in-shuffled-array0938",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr1</strong>. The contents of arr are copied into another array <strong>arr2</strong> and numbers are shuffled. Also, one element is removed from arr2. The task is to find the missing element.</span></p>\n<div><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr1[] = [4, 8, 1, 3, 7] and arr2[] = [7, 4, 3, 1]\n<strong>Output:</strong> 8\n</span><strong><span style=\"font-size: 18px;\">Explanation: </span></strong><span style=\"font-size: 18px;\">8 is the only element missing from arr2.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr1[] = [12, 10, 15, 23, 11, 30] and arr2[] = [15, 12, 23, 11, 30]\n<strong>Output:</strong> 10<br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">10</span><span style=\"font-size: 18px;\"> is the only element missing from arr2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= arr1.size() &lt;= 10<sup>6<br /></sup>arr2.size() = arr1.size() - 1<br />1 &lt;= arr[i] &lt;= 10<sup>6</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given two arrays, `arr1` and `arr2`. `arr2` is a shuffled version of `arr1` with one element removed. Your task is to find the missing element from `arr2` that was present in `arr1`.",
                "constraints": [
                    "2 <= arr1.size() <= 10^6",
                    "arr2.size() = arr1.size() - 1",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [4, 8, 1, 3, 7], arr2 = [7, 4, 3, 1]",
                        "output": "8",
                        "explanation": "The element 8 is present in `arr1` but missing from `arr2`."
                    },
                    {
                        "input": "arr1 = [12, 10, 15, 23, 11, 30], arr2 = [15, 12, 23, 11, 30]",
                        "output": "10",
                        "explanation": "The element 10 is present in `arr1` but missing from `arr2`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >An <strong>efficient solution</strong> is based on XOR. The combined occurrence of each element is twice, one in &lsquo;arr1&rsquo; and the other in &lsquo;arr2&rsquo;, except one element which only has a single occurrence in &lsquo;arr1&rsquo;. We know that (a Xor a) = 0. So, simply XOR the elements of both arrays. The result will be the missing number.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the missing element in array b\n    int findMissing(vector<int>& arr1, vector<int>& arr2) {\n        int n = arr1.size();\n        int suma = 0;\n\n        // XOR operation to calculate the sum of elements in array a\n        for (int i = 0; i < n; i++) {\n            suma ^= arr1[i];\n        }\n\n        // XOR operation to calculate the sum of elements in array b\n        for (int i = 0; i < n - 1; i++) {\n            suma ^= arr2[i];\n        }\n\n        // Return the missing element\n        return suma;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the missing element in array arr2\n    public int findMissing(int[] arr1, int[] arr2) {\n        int n = arr1.length;\n        int sumXor = 0;\n\n        // XOR operation to calculate the XOR of all elements in array arr1\n        for (int i = 0; i < n; i++) {\n            sumXor ^= arr1[i];\n        }\n\n        // XOR operation to calculate the XOR of all elements in array arr2\n        for (int i = 0; i < n - 1; i++) {\n            sumXor ^= arr2[i];\n        }\n\n        // Return the missing element\n        return sumXor;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find the missing element in array arr2\n    def findMissing(self, arr1, arr2):\n        n = len(arr1)\n        sum_xor = 0\n\n        # XOR operation to calculate the XOR of all elements in array arr1\n        for i in range(n):\n            sum_xor ^= arr1[i]\n\n        # XOR operation to calculate the XOR of all elements in array arr2\n        for i in range(n - 1):\n            sum_xor ^= arr2[i]\n\n        # Return the missing element\n        return sum_xor\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find the missing element in array arr2\n    findMissing(arr1, arr2) {\n        let n = arr1.length;\n        let sumXor = 0;\n\n        // XOR operation to calculate the XOR of all elements in array arr1\n        for (let i = 0; i < n; i++) {\n            sumXor ^= arr1[i];\n        }\n\n        // XOR operation to calculate the XOR of all elements in array arr2\n        for (let i = 0; i < n - 1; i++) {\n            sumXor ^= arr2[i];\n        }\n\n        // Return the missing element\n        return sumXor;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}