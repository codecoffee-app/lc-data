{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 891700,
            "title": "Missing Number in Sorted Array of Natural Numbers",
            "titleSlug": "missing-number-in-sorted-array-of-natural-numbers",
            "content": "<p><span >Given a sorted array <strong>arr[]</strong> of n-1 integers, these integers are in the range of 1 to n. There are no duplicates in the array. One of the integers is missing in the array. Find the missing integer.</span></p>\n<p><strong style=\"font-size: 18.6667px;\">Examples:</strong></p>\n<pre><span ><strong>Input</strong>: arr[] = [1, 2, 3, 4, 6, 7, 8]\n<strong>Output</strong>: 5<br /><strong>Explanation: </strong>The missing integer in array is 5</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [1, 2, 3, 4, 5, 6, 8, 9]\n<strong>Output</strong>: 7<br /><strong>Explanation: </strong>The missing integer in array is 7</span></pre>\n<p><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">Constraints:</strong><br style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\" /><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">1 &le; arr.size() &le; 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">5</sup><br style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\" /><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">1 &le; arr[i] &le; arr.size()+1</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array of integers `arr` of size `n-1`, where the elements are in the range [1, n] and there are no duplicates, find the missing integer in the array.",
                "constraints": [
                    "1 <= arr.length <= 100000",
                    "1 <= arr[i] <= arr.length + 1"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 6, 7, 8]",
                        "output": "5",
                        "explanation": "The integer 5 is missing from the sequence 1 to 8."
                    },
                    {
                        "input": "[1, 2, 3, 4, 5, 6, 8, 9]",
                        "output": "7",
                        "explanation": "The integer 7 is missing from the sequence 1 to 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int missingNumber(vector<int>& arr) {\n        int n = arr.size();\n\n        // Extreme cases\n        if (arr[0] != 1)\n            return 1;\n        if (arr[n - 1] != (n + 1))\n            return n + 1;\n\n        // implementing binary search\n        int lo = 0, hi = n - 1;\n        int mid;\n        while (lo <= hi) {\n            mid = (lo + hi) / 2;\n            if (arr[mid] == mid + 1)\n                lo = mid + 1;\n            else\n                hi = mid - 1;\n        }\n        return (arr[lo] - 1);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    int missingNumber(int arr[]) {\n        int n = arr.length;\n\n        // Extreme cases\n        if (arr[0] != 1) {\n            return 1;\n        }\n        if (arr[n - 1] != (n + 1)) {\n            return n + 1;\n        }\n\n        // implementing binary search\n        int lo = 0, hi = n - 1;\n        while ((hi - lo) > 1) {\n            int mid = (lo + hi) / 2;\n            if ((arr[lo] - lo) != (arr[mid] - mid)) {\n                hi = mid;\n            } else if ((arr[hi] - hi) != (arr[mid] - mid)) {\n                lo = mid;\n            }\n        }\n        return (arr[lo] + 1);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "def missingNumber(arr):\n    n = len(arr)\n\n    # Extreme cases\n    if arr[0] != 1:\n        return 1\n    if arr[n - 1] != (n + 1):\n        return n + 1\n\n    # implementing binary search\n    lo, hi = 0, n - 1\n    while (hi - lo) > 1:\n        mid = (lo + hi) // 2\n        if (arr[lo] - lo) != (arr[mid] - mid):\n            hi = mid\n        elif (arr[hi] - hi) != (arr[mid] - mid):\n            lo = mid\n    return (arr[lo] + 1)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    missingNumber(arr) {\n        const n = arr.length;\n\n        // Extreme cases\n        if (arr[0] !== 1) return 1;\n        if (arr[n - 1] !== (n + 1)) return n + 1;\n\n        // implementing binary search\n        let lo = 0, hi = n - 1;\n        let mid;\n        while ((hi - lo) > 1) {\n            mid = Math.floor((lo + hi) / 2);\n            if ((arr[lo] - lo) !== (arr[mid] - mid))\n                hi = mid;\n            else if ((arr[hi] - hi) !== (arr[mid] - mid))\n                lo = mid;\n        }\n        return (arr[lo] + 1);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}