{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703442,
            "title": "Missing ranges of numbers",
            "titleSlug": "missing-ranges-of-numbers1019",
            "content": "<p><span style=\"font-size: 18px;\">You have an inclusive interval&nbsp;<strong>[lower, upper]</strong>&nbsp;and a sorted array of unique integers&nbsp;<strong>arr[]</strong>, all of which lie within this interval. A number&nbsp;<strong>x</strong> is considered missing if x is in the range [lower, upper] but not present in arr[]. Your task is to return the smallest set of sorted ranges that includes all missing numbers, ensuring no element from arr is within any range, and every missing number is covered exactly once.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [14, 15, 20, 30, 31, 45], lower = 10, upper = 50\n<strong>Output:</strong> [[10, 13], [16, 19], [21, 29], [32, 44], [46, 50]]\n<strong>Explanation:</strong> These ranges represent all missing numbers between 10 and 50 not present in the array.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-48, -10, -6, -4, 0, 4, 17], lower = -54, upper = 17\n<strong>Output:</strong> [[-54, -49], [-47, -11], [-9, -7], [-5, -5], [-3, -1], [1, 3], [5,16]]\n<strong>Explanation:</strong> These ranges cover all missing numbers between -54 and 17 not included in the array.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [15, 16, 17, 18], lower = 15, upper = 18\n<strong>Output:</strong> []\n<strong>Explanation:</strong> Since all numbers from 15 to 18 are present in the array, there are no missing intervals.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">-10<sup>9</sup>&nbsp;&lt;= lower, upper &lt;= 10<sup>9<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= arr.size() &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">lower &lt;= arr[i] &lt;= upper</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array of unique integers `arr[]` and an inclusive interval `[lower, upper]`, where all elements of `arr` lie within this interval, identify the missing numbers within the range. A number `x` is considered missing if it falls within `[lower, upper]` but is not present in `arr`.  The goal is to return the smallest sorted set of ranges that encompasses all missing numbers, ensuring no element from `arr` is included and that each missing number is covered exactly once.",
                "constraints": [
                    "-10^9 <= lower, upper <= 10^9",
                    "1 <= arr.size() <= 10^5",
                    "lower <= arr[i] <= upper"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [14, 15, 20, 30, 31, 45], lower = 10, upper = 50",
                        "output": "[[10, 13], [16, 19], [21, 29], [32, 44], [46, 50]]",
                        "explanation": "The output represents the missing ranges of numbers within the interval [10, 50] that are not present in the input array [14, 15, 20, 30, 31, 45]."
                    },
                    {
                        "input": "arr[] = [-48, -10, -6, -4, 0, 4, 17], lower = -54, upper = 17",
                        "output": "[[-54, -49], [-47, -11], [-9, -7], [-5, -5], [-3, -1], [1, 3], [5,16]]",
                        "explanation": "The output contains the missing ranges in the interval [-54, 17] that do not exist in the input array [-48, -10, -6, -4, 0, 4, 17]."
                    },
                    {
                        "input": "arr[] = [15, 16, 17, 18], lower = 15, upper = 18",
                        "output": "[]",
                        "explanation": "Since all numbers from 15 to 18 are present in the array, there are no missing intervals."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the sorted array to find gaps between consecutive elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<vector<int>> missingRanges(vector<int> &arr, int lower, int upper) {\n        int n = arr.size();\n        vector<vector<int>> res;\n\n        // Check for missing range before the first element\n        if (lower < arr[0])\n            res.push_back({lower, arr[0] - 1});\n\n        // Check for missing ranges between consecutive elements\n        for (int i = 0; i < n - 1; ++i)\n            if (arr[i + 1] - arr[i] > 1)\n                res.push_back({arr[i] + 1, arr[i + 1] - 1});\n\n        // Check for missing range after the last element\n        if (n > 0 && upper > arr[n - 1])\n            res.push_back({arr[n - 1] + 1, upper});\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public List<List<Integer>> missingRanges(int[] arr, int lower, int upper) {\n        List<List<Integer>> res = new ArrayList<>();\n        int n = arr.length;\n\n        // Check for missing range before the first element\n        if (lower < arr[0]) {\n            res.add(Arrays.asList(lower, arr[0] - 1));\n        }\n\n        // Check for missing ranges between consecutive elements\n        for (int i = 0; i < n - 1; i++) {\n            if (arr[i + 1] - arr[i] > 1) {\n                res.add(Arrays.asList(arr[i] + 1, arr[i + 1] - 1));\n            }\n        }\n\n        // Check for missing range after the last element\n        if (upper > arr[n - 1]) {\n            res.add(Arrays.asList(arr[n - 1] + 1, upper));\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def missingRanges(self, arr, lower, upper):\n        res = []\n        n = len(arr)\n\n        # Check for missing range before the first element\n        if lower < arr[0]:\n            res.append([lower, arr[0] - 1])\n\n        # Check for missing ranges between elements\n        for i in range(n - 1):\n            if arr[i + 1] - arr[i] > 1:\n                res.append([arr[i] + 1, arr[i + 1] - 1])\n\n        # Check for missing range after the last element\n        if upper > arr[-1]:\n            res.append([arr[-1] + 1, upper])\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    missingRanges(arr, lower, upper) {\n        const n = arr.length;\n        const res = [];\n\n        // Check for missing range before the first element\n        if (lower < arr[0]) {\n            res.push([ lower, arr[0] - 1 ]);\n        }\n\n        // Check for missing ranges between consecutive elements\n        for (let i = 0; i < n - 1; i++) {\n            if (arr[i + 1] - arr[i] > 1) {\n                res.push([ arr[i] + 1, arr[i + 1] - 1 ]);\n            }\n        }\n\n        // Check for missing range after the last element\n        if (upper > arr[n - 1]) {\n            res.push([ arr[n - 1] + 1, upper ]);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}