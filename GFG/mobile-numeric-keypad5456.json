{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704157,
            "title": "Mobile numeric keypad",
            "titleSlug": "mobile-numeric-keypad5456",
            "content": "<p><span style=\"font-size: 18px;\">There is a standard numeric keypad on a mobile phone. You can only press the current button or buttons that are directly up, left, right, or down from it (for ex if you press 5, then pressing 2, 4, 6 &amp; 8 are allowed). Diagonal movements and pressing the bottom row corner buttons (* and #) are prohibited.</span></p>\n<p><span style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/704157/Web/Other/blobid0_1718345574.png\" width=\"190\" height=\"214\" /></span></p>\n<p><span style=\"font-size: 18px;\">Given a number <strong>n</strong>, find the number of possible unique sequences of length n that you can create by pressing buttons. </span><span style=\"font-size: 18px;\">You can start from any digit.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 1\n<strong>Output: </strong>10\n<strong>Explanation</strong>: Number of possible numbers are 10 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)  </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 2\n<strong>Output: </strong>36\n<strong>Explanation</strong>: Possible numbers: 00, 08, 11, 12, 14, 22, 21, 23, 25 and so on. If we start with 0, valid numbers will be 00, 08 (count: 2). If we start with 1, valid numbers will be 11, 12, 14 (count: 3). If we start with 2, valid numbers  will be 22, 21, 23,25 (count: 4). If we start with 3, valid numbers will be 33, 32, 36 (count: 3). If we start with 4, valid numbers will be 44,41,45,47 (count: 4). If we start with 5, valid numbers will be 55,54,52,56,58 (count: 5) and so on.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 25</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a standard numeric keypad on a mobile phone where you can only press the current button or buttons directly up, left, right, or down from it (no diagonals or corner buttons * and #), find the number of possible unique sequences of length 'n' that can be created by pressing buttons. You can start from any digit.",
                "constraints": [
                    "1 <= n <= 25"
                ],
                "testcases": [
                    {
                        "input": "n = 1",
                        "output": "10",
                        "explanation": "There are 10 possible numbers (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) when the sequence length is 1."
                    },
                    {
                        "input": "n = 2",
                        "output": "36",
                        "explanation": "When the sequence length is 2, if we start with 0, valid numbers are 00, 08 (count: 2). If we start with 1, valid numbers are 11, 12, 14 (count: 3). If we start with 2, valid numbers are 22, 21, 23, 25 (count: 4).  And so on. Summing the possibilities from each starting digit yields 36."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; text-wrap: wrap; background-color: #ffffff;\">Implement dynamic programming to count the possible combinations of length n on a keypad, efficiently exploring all valid moves in four directions.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            }
        ],
        "companies": [
            "flipkart",
            "microsoft",
            "maq-software",
            "sprinklr"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n\n  private:\n    long long getCountUtil(char keypad[][3], int n) {\n        if (keypad == NULL || n <= 0)\n            return 0;\n        if (n == 1)\n            return 10;\n\n        // left, up, right, down move from current location\n        int row[] = {0, 0, -1, 0, 1};\n        int col[] = {0, -1, 0, 1, 0};\n\n        // taking n+1 for simplicity - count[i][j] will store\n        // number count starting with digit i and length j\n        long long count[10][n + 1];\n        int i = 0, j = 0, k = 0, move = 0, ro = 0, co = 0, num = 0;\n        long long nextNum = 0, totalCount = 0;\n\n        // count numbers starting with digit i and of lengths 0 and 1\n        for (i = 0; i <= 9; i++) {\n            count[i][0] = 0;\n            count[i][1] = 1;\n        }\n\n        // Bottom up - Get number count of length 2, 3, 4, ... , n\n        for (k = 2; k <= n; k++) {\n            for (i = 0; i < 4; i++) // Loop on keypad row\n            {\n                for (j = 0; j < 3; j++) // Loop on keypad column\n                {\n                    // Process for 0 to 9 digits\n                    if (keypad[i][j] != '*' && keypad[i][j] != '#') {\n                        // Here we are counting the numbers starting with\n                        // digit keypad[i][j] and of length k keypad[i][j]\n                        // will become 1st digit, and we need to look for\n                        // (k-1) more digits\n                        num = keypad[i][j] - '0';\n                        count[num][k] = 0;\n\n                        // move left, up, right, down from current location\n                        // and if new location is valid, then get number\n                        // count of length (k-1) from that new digit and\n                        // add in count we found so far\n                        for (move = 0; move < 5; move++) {\n                            ro = i + row[move];\n                            co = j + col[move];\n                            if (ro >= 0 && ro <= 3 && co >= 0 && co <= 2 &&\n                                keypad[ro][co] != '*' && keypad[ro][co] != '#') {\n                                nextNum = keypad[ro][co] - '0';\n                                count[num][k] += count[nextNum][k - 1];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Get count of all possible numbers of length \"n\" starting\n        // with digit 0, 1, 2, ..., 9\n        totalCount = 0;\n        for (i = 0; i <= 9; i++)\n            totalCount += count[i][n];\n        return totalCount;\n    }\n\n  public:\n    long long getCount(int n) {\n        char keypad[4][3] = {\n            {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'}, {'*', '0', '#'}};\n\n        return getCountUtil(keypad, n);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    private long getCountUtil(char[][] keypad, int n) {\n        if (keypad == null || n <= 0) return 0;\n        if (n == 1) return 10;\n\n        // left, up, right, down move from current location\n        int[] row = {0, 0, -1, 0, 1};\n        int[] col = {0, -1, 0, 1, 0};\n\n        // taking n+1 for simplicity - count[i][j] will store\n        // number count starting with digit i and length j\n        long[][] count = new long[10][n + 1];\n        int i = 0, j = 0, k = 0, move = 0, ro = 0, co = 0, num = 0;\n        long nextNum = 0, totalCount = 0;\n\n        // count numbers starting with digit i and of lengths 0 and 1\n        for (i = 0; i <= 9; i++) {\n            count[i][0] = 0;\n            count[i][1] = 1;\n        }\n\n        // Bottom up - Get number count of length 2, 3, 4, ... , n\n        for (k = 2; k <= n; k++) {\n            for (i = 0; i < 4; i++) {     // Loop on keypad row\n                for (j = 0; j < 3; j++) { // Loop on keypad column\n                    // Process for 0 to 9 digits\n                    if (keypad[i][j] != '*' && keypad[i][j] != '#') {\n                        // Here we are counting the numbers starting with\n                        // digit keypad[i][j] and of length k keypad[i][j]\n                        // will become 1st digit, and we need to look for\n                        // (k-1) more digits\n                        num = keypad[i][j] - '0';\n                        count[num][k] = 0;\n\n                        // move left, up, right, down from current location\n                        // and if new location is valid, then get number\n                        // count of length (k-1) from that new digit and\n                        // add in count we found so far\n                        for (move = 0; move < 5; move++) {\n                            ro = i + row[move];\n                            co = j + col[move];\n                            if (ro >= 0 && ro <= 3 && co >= 0 && co <= 2 &&\n                                keypad[ro][co] != '*' && keypad[ro][co] != '#') {\n                                nextNum = keypad[ro][co] - '0';\n                                count[num][k] += count[(int)nextNum][k - 1];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Get count of all possible numbers of length \"n\" starting\n        // with digit 0, 1, 2, ..., 9\n        totalCount = 0;\n        for (i = 0; i <= 9; i++) totalCount += count[i][n];\n        return totalCount;\n    }\n\n    public long getCount(int n) {\n        char[][] keypad = {\n            {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'}, {'*', '0', '#'}};\n\n        return getCountUtil(keypad, n);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def solve(self, i, j, n):\n        # base case: if n is 1, return 1\n        if n == 1:\n            return 1\n\n        # if the count for current keypad digit and length n has already been calculated, return it\n        if self.dp[self.keypad[i][j]][n] != -1:\n            return self.dp[self.keypad[i][j]][n]\n\n        # initialize a with the count of combinations from the previous length\n        a = self.solve(i, j, n - 1)\n\n        # check if there are adjacent keypads and calculate the count of combinations accordingly\n\n        if j - 1 >= 0 and self.keypad[i][j - 1] != -1:\n            a += self.solve(i, j - 1, n - 1)\n\n        if j + 1 < 3 and self.keypad[i][j + 1] != -1:\n            a += self.solve(i, j + 1, n - 1)\n\n        if i - 1 >= 0 and self.keypad[i - 1][j] != -1:\n            a += self.solve(i - 1, j, n - 1)\n\n        if i + 1 < 4 and self.keypad[i + 1][j] != -1:\n            a += self.solve(i + 1, j, n - 1)\n\n        # store the count of combinations for current keypad digit and length n\n        self.dp[self.keypad[i][j]][n] = a\n        return a\n\n    def getCount(self, n):\n        # defines the keypad layout\n        self.keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [-1, 0, -1]]\n\n        # dp[i][j] => count for ith keypad with j length\n        self.dp = [[-1 for _ in range(n + 1)] for _ in range(10)]\n\n        ans = 0\n        # calculate the count of combinations for each keypad digit\n        for i in range(4):\n            for j in range(3):\n                if self.keypad[i][j] != -1:\n                    ans += self.solve(i, j, n)\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution{\n    getCount(n){\n        let keypad = [['1','2','3'], ['4','5','6'], ['7','8','9'], ['*','0','#']];\n        return this.getCountUtil(keypad, n);\n    }\n\n    getCountUtil(keypad, n) {\n        if(keypad == null || n <= 0) \n            return 0;\n        if(n == 1 ) \n            return 10;\n\n        let row = [0, 0, -1, 0, 1], col = [0, -1, 0, 1, 0];\n        \n        let count = Array.from(Array(10), () => new Array(n+1).fill(0));\n\n        for (let i=0; i<=9; i++) {\n            count[i][0] = 0;\n            count[i][1] = 1;\n        }\n\n        for(let k=2; k<=n; k++) {\n            for(let i=0; i<4; i++) {\n                for(let j=0; j<3; j++) {\n                    if(keypad[i][j] != '*' && keypad[i][j] != '#') {\n                        let num = parseInt(keypad[i][j]);\n                        count[num][k] = 0;\n                        for(let move=0; move<5; move++) {\n                            let ro = i+row[move];\n                            let co = j+col[move];\n                            if(ro >= 0 && ro <= 3 && co >= 0 && co <= 2 &&\n                            keypad[ro][co] != '*' && keypad[ro][co] != '#') {\n                                let nextNum = parseInt(keypad[ro][co]);\n                                count[num][k] += count[nextNum][k-1];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        let totalCount = 0;\n        for (let i=0; i<=9; i++) {\n            totalCount += count[i][n];\n        }\n        return totalCount;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}