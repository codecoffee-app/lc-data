{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703909,
            "title": "Modular Exponentiation for large numbers",
            "titleSlug": "modular-exponentiation-for-large-numbers5537",
            "content": "<p><span style=\"font-size: 18px;\">Implement pow(x, n) % M.<br />In other words, for a given value of x, n, and M, find&nbsp; (x<sup>n</sup></span><span style=\"font-size: 18px;\">) % M.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nx = 3, n = 2, m = 4</span>\n<span style=\"font-size: 18px;\"><strong>Output:\n</strong>1\n<strong>Explanation:\n</strong>3<sup>2</sup> = 9. 9 % 4 = 1.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>x = 2, n = 6, m = 10\n<strong>Output:\n</strong>4</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\n2<sup>6</sup> = 64. 64 % 10 = 4.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>PowMod()&nbsp;</strong>which takes integers x, n, and M as input parameters and returns x<sup>n</sup>&nbsp;% M.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(log(n))<br /><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; x, n, M &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">x<sup>2n</sup> can also be written as (x<sup>n</sup>)<sup>2</sup>. Think about how this can help you in finding the power effeciently.</span></p>",
            "<p><span style=\"font-size:18px\">Try to divide problem into subproblems.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    // Function to calculate power modulo.\n\tlong long int PowMod(long long int x, long long int n, long long int M)\n\t{\n\t\tlong long int result = 1;\n\t\t\n\t\t// Loop until n is greater than 0.\n\t\twhile(n > 0)\n\t\t{\n\t\t    // If n is odd, multiply result with x.\n\t\t    if(n % 2 == 1)\n\t\t        result = ((result % M) * (x % M)) % M;\n\t\t    \n\t\t    // Square x and divide n by 2.\n\t\t    x = (x * x) % M;\n\t\t    n = n / 2;\n\t\t}\n\t\treturn result;\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Backend complete function Template for Java\n\nclass Solution\n{\n    // Function to calculate (x^n) % m using modular exponentiation\n    public long PowMod(long x, long n, long m)\n    {\n        long result=1;\n  \t\twhile(n>0)\n  \t\t{\n  \t\t    // If n is odd, multiply result with x and take modulo m\n  \t\t    if(n % 2 == 1)\n  \t\t        result=((result % m) * (x % m))%m;\n  \t\t    // Square x and take modulo m\n  \t\t    x = (x*x) % m;\n  \t\t    // Divide n by 2\n  \t\t    n = n/2;\n  \t\t}\n  \t\t// Returning the result\n  \t\treturn result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\n\nclass Solution:\n    #Function to calculate power of x raised to the power of n modulo m.\n    def PowMod(self, x, n, m):\n        res = 1\n        while n > 0:\n            if n % 2 == 1:\n                res = (res * x) % m\n            x = (x * x) % m\n            n //= 2\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long PowMod(long x, long n, long M)\n    {\n        long result = 1;\n\t\t\n\t\t// Loop until n is greater than 0.\n\t\twhile(n > 0)\n\t\t{\n\t\t    // If n is odd, multiply result with x.\n\t\t    if(n % 2 == 1)\n\t\t        result = ((result % M) * (x % M)) % M;\n\t\t    \n\t\t    // Square x and divide n by 2.\n\t\t    x = (x * x) % M;\n\t\t    n = n / 2;\n\t\t}\n\t\treturn result;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}