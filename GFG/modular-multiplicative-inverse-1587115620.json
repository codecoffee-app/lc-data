{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701168,
            "title": "Modular Inverse",
            "titleSlug": "modular-multiplicative-inverse-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers<strong> &lsquo;a&rsquo; </strong>and<strong> &lsquo;m</strong>&rsquo;. The task is to find the smallest modular multiplicative inverse of <strong>&lsquo;a&rsquo;</strong> under modulo<strong> &lsquo;m&rsquo;</strong>. if it does not exist then return -1.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>a = 3\nm = 11\n<strong>Output: </strong>4\n<strong>Explanation: </strong>Since (4*3) mod 11 = 1, 4 \nis modulo inverse of 3. One might think,\n15 also as a valid output as \"(15*3)\nmod 11\"  is also 1, but 15 is not in \nring {0, 1, 2, ... 10}, so not valid.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>a = 10\nm = 17\n<strong>Output: </strong>12\n<strong>Explanation: </strong>Since (12*10) mod 17 = 1,\n12 is the modulo inverse of 10.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function</span><strong> </strong><span style=\"font-size: 18px;\"> <strong>function modInverse()&nbsp;</strong>that takes <strong>a and m as input parameters </strong>and <strong>returns </strong>modular multiplicative inverse of <strong>&lsquo;a&rsquo;</strong> under modulo<strong> &lsquo;m&rsquo;</strong>. If the modular multiplicative inverse doesn't exist&nbsp;<strong>return -1.</strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong> : O(m)<br /><strong>Expected Auxilliary Space</strong> : O(1)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= a&nbsp;&lt;= 10<sup>4</sup><br />1 &lt;= m &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers 'a' and 'm', find the smallest modular multiplicative inverse of 'a' under modulo 'm'. If the inverse does not exist, return -1. The modular multiplicative inverse of 'a' modulo 'm' is an integer 'x' such that (a * x) % m = 1.",
                "constraints": [
                    "1 <= a <= 10^4",
                    "1 <= m <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "a = 3\nm = 11",
                        "output": "4",
                        "explanation": "Since (4 * 3) % 11 = 1, 4 is the modular inverse of 3. Although (15 * 3) % 11 is also 1, 15 is not within the range {0, 1, 2, ..., 10}, so it is not a valid modular inverse."
                    },
                    {
                        "input": "a = 10\nm = 17",
                        "output": "12",
                        "explanation": "Since (12 * 10) % 17 = 1, 12 is the modular inverse of 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    int modInverse(int a, int m)\n    {\n        // taking modulo of a with m\n        a = a%m;\n        \n        // For every number x, check if (a*x)%m is 1\n        for (int x=1; x<m; x++)\n           if ((a*x) % m == 1)\n              return x;\n    \treturn -1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Solution\n{\n    \n  public int modInverse(int a, int m)\n    {\n        // taking mod of a with m\n        a = a%m;\n        \n        // For every number x, check if (a*x)%m is 1\n        for (int x=1; x<m; x++)\n           if ((a*x) % m == 1)\n              return x;\n    \treturn -1;\n    }\n\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def modInverse(self,a,m):\n        \n        # taking mod of a with m\n        a=a%m\n        \n        # For every number x, check if (a*x)%m is 1\n        for x in range(1,m):\n            if((a*x)%m==1):\n                return x\n        \n        return -1",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {number} a\n * @param {number} m\n * @returns {number}\n*/\nclass Solution {\n    modInverse(a, m)\n    {\n         // taking modulo of a with m\n         a = a%m;\n         // For every number x, check if (a*x)%m is 1\n         for (let x=1; x<m; x++)\n            if ((a*x) % m == 1)\n                return x;\n        return -1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}