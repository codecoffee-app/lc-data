{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700634,
            "title": "Modular Node",
            "titleSlug": "modular-node",
            "content": "<p><span >Given the head of a Singly Linked List and a number k, the task is to find the modular node of the linked list. </span><span style=\"font-size: 18.6667px;\">If no such index is present return -1.</span></p>\n<blockquote>\n<p><span >A modular node is defined as the last node in the linked list whose index is divisible by k (i%k==0).&nbsp;</span></p>\n</blockquote>\n<p><span style=\"font-size: 20px;\">Note: 1-based indexing is followed</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong><strong> </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7 , k = 3<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700634/Web/Other/blobid0_1720679969.png\" width=\"502\" height=\"69\" /> <br /><strong>Output: </strong>6\n<strong>Explanation:</strong> Indexing of the linked list is same as the values of the Node. The maximum index which is divisble by 3 is 6 and the<br />node value of the 6th index is 6.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong><strong> </strong>LinkedList: 19-&gt;28-&gt;37-&gt;46-&gt;55 , k = 13<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700634/Web/Other/blobid1_1720679992.png\" width=\"502\" height=\"69\" /><strong>\nOutput: </strong>-1<strong>\nExplanation:</strong> Index start from 1 and end at 5. There is no index which can divisible by 13, so output is -1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /><span ><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">1 &lt;= number of nodes &lt;= 10</span><span style=\"box-sizing: border-box; line-height: 1.7em; position: relative; vertical-align: baseline; top: -0.5em; font-family: Nunito; color: #1e2229; background-color: #ffffff;\">5<br style=\"box-sizing: border-box; line-height: 1.7em; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important; background-color: var(--background) !important;\" /></span><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">1 &lt;= node-&gt;data , k &lt;= 10<sup>5</sup></span></span><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a singly linked list and an integer k, find the modular node. A modular node is defined as the last node in the linked list where its index (1-based) is divisible by k. If no such index exists, return -1.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5",
                    "1 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1->2->3->4->5->6->7 , k = 3",
                        "output": "6",
                        "explanation": "The indices of the linked list nodes are 1, 2, 3, 4, 5, 6, and 7 respectively. The largest index divisible by 3 is 6, and the value of the node at index 6 is 6."
                    },
                    {
                        "input": "LinkedList: 19->28->37->46->55 , k = 13",
                        "output": "-1",
                        "explanation": "The indices of the linked list nodes are 1, 2, 3, 4, and 5 respectively. None of these indices are divisible by 13, so the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Think about iterating through the linked list and updating a variable each time you encounter a node whose position is a multiple of <span class=\"katex\"><span class=\"katex-mathml\"><br />k</span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord mathnormal\">k</span></span></span></span></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to find the modularNode in the given linked list.\n\nclass Solution {\n  public:\n    int modularNode(Node *head, int k) {\n        // Return -1 if k is less than or equal to 0 or if the linked list is empty.\n        if (k <= 0 || head == NULL)\n            return -1;\n        int i = 1;\n        Node *modularNode = NULL;\n\n        // Iterate through the linked list.\n        for (Node *temp = head; temp != NULL; temp = temp->next) {\n            // Update modularNode if the current index is divisible by k.\n            if (i % k == 0)\n                modularNode = temp;\n\n            i++;\n        }\n        // Return -1 if modularNode is NULL, else return the value of modularNode.\n        if (modularNode == NULL)\n            return -1;\n        return modularNode->data;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    public int modularNode(Node head, int k) {\n        if (k <= 0 || head == null) return -1;\n        int i = 1;\n        Node modularNode = null;\n\n        for (Node temp = head; temp != null; temp = temp.next) {\n            if (i % k == 0) modularNode = temp;\n            i++;\n        }\n        if (modularNode == null) return -1;\n        return modularNode.data;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def modularNode(self, head, k):\n        if k <= 0 or head is None:\n            return -1\n        i = 1\n        modular_node = None\n\n        temp = head\n        while temp:\n            if i % k == 0:\n                modular_node = temp\n            i += 1\n            temp = temp.next\n\n        if modular_node is None:\n            return -1\n        return modular_node.data\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {Node} node\n * @param {number} k\n * @return {number} node data\n */\n\nclass Solution {\n    modularNode(head, k) {\n        if (k <= 0 || head === null) return -1;\n        let i = 1;\n        let modularNode = null;\n\n        for (let temp = head; temp !== null; temp = temp.next) {\n            if (i % k === 0) modularNode = temp;\n            i++;\n        }\n\n        if (modularNode === null) return -1;\n        return modularNode.data;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}