{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704705,
            "title": "Money Distributions",
            "titleSlug": "money-distributions5924",
            "content": "<p><span style=\"font-size: 18px;\">Find the number of ways in which <strong>n</strong> coins can be distributed among <strong>k</strong> pupils such that each pupil receives at least one coin each.&nbsp;Two distributions are said to be different only if they have at least one pupil who got a different number of coins.<br /></span><strong>Note:</strong> returns the number of possible distributions modulo 10^9+7.<br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: n</strong> = 7, k = 3\n<strong>Output: </strong>15\n<strong>Explanation: \n</strong>Coin distribution can be any of the following 15 ways. \n{1,1,5}, {1,5,1}, {5,1,1}, {2,1,4}, {1,2,4}, {1,4,2}\n{2,4,1}, {4,1,2}, {4,2,1}, {3,1,3}, {1,3,3}, {3,3,1}\n{2,2,3}, {2,3,2}, {3,2,2}\n</span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: n</strong> = 5, k = 5\n<strong>Output: </strong>1\n<strong>Explanation: </strong>{1, 1, 1, 1, 1} is the only way.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span><br /><span style=\"font-size: 18px;\">You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>totalWays()</strong> which takes n and k as input parameters and returns the number of possible distributions modulo 10^9+7<strong>.</strong></span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(n)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n, k &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Think about the concept of \"stars and bars\" from combinatorics.</p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    long long int mod = 1000000007;\n\n    long long int powerMod(long long int base, long long int pow) {\n        long long int ans = 1;\n        while (pow > 0) {\n            if (pow % 2 != 0)\n                ans = (ans * base) % mod;\n            pow /= 2;\n            base = (base * base) % mod;\n        }\n        return ans;\n    }\n\n    long long int inverse_mod(long long int a, long long int b) {\n        return (a * powerMod(b, mod - 2)) % mod;\n    }\n\n    int totalWays(int n, int k) {\n        n--, k--;\n        if (k > n)\n            return 0;\n        long long int fact[n + 1];\n        // Calculating factorial\n        fact[0] = 1;\n        fact[1] = 1;\n        for (long long int i = 2; i <= n; i++) {\n            fact[i] = ((fact[i - 1] % mod) * (i % mod)) % mod;\n        }\n        // calulating nCr\n        long long int ans = 1;\n        ans = fact[n];\n        long long int r = (fact[k] % mod * fact[n - k] % mod) % mod;\n        ans = inverse_mod(ans, r);\n        return int(ans);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() { this.mod = BigInt(1000000007); }\n\n    powerMod(base, pow) {\n        let ans = BigInt(1);\n        while (pow > 0n) {\n            if (pow % 2n !== 0n) ans = (ans * base) % this.mod;\n            pow /= 2n;\n            base = (base * base) % this.mod;\n        }\n        return ans;\n    }\n\n    inverse_mod(a, b) { return (a * this.powerMod(b, this.mod - 2n)) % this.mod; }\n\n    totalWays(n, k) {\n        n--, k--;\n        if (k > n) return 0;\n        let fact = [ BigInt(1) ]; // Initializing the array with 1 as the first element\n        // Calculating factorial\n        for (let i = BigInt(1); i <= BigInt(n); i++) {\n            fact[i] = ((fact[i - 1n] % this.mod) * (i % this.mod)) % this.mod;\n        }\n        // calculating nCr\n        let ans = BigInt(1);\n        ans = fact[BigInt(n)];\n        let r = (fact[BigInt(k)] * fact[BigInt(n - k)]) % this.mod;\n        ans = this.inverse_mod(ans, r);\n        return parseInt(ans);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}