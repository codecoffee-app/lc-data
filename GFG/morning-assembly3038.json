{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704688,
            "title": "Tricky Sorting Cost",
            "titleSlug": "morning-assembly3038",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr[]</strong> of <strong>N</strong> elements containing first N positive integers. You have to sort the integers&nbsp;in ascending order by the following operation. Operation is to pick an integer&nbsp;and place it at end or at start. Every such operation increases cost by one. The task is to sort the array in the minimum cost</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 3\r\narr = {2, 1, 3}\r\n<strong>Output:</strong> 1\r\n<strong>Explaination: </strong>Place 1 at start.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 4\r\narr = {4, 3, 1, 2}\r\n<strong>Output:</strong> 2\r\n<strong>Explaination:</strong> First place 3 at end then \r\n4 at end.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>sortingCost()</strong> which takes the value <strong>N</strong> and <strong>arr</strong> as input parameters and returns the minimum cost of sorting.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup><br />\r\n1 &le; arr[i] &le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of `N` elements containing the first N positive integers, determine the minimum cost to sort the array in ascending order.  The allowed operation is to pick an element and move it to either the beginning or the end of the array. Each move incurs a cost of 1.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr = {2, 1, 3}",
                        "output": "1",
                        "explanation": "Moving '1' to the start of the array results in the sorted array {1, 2, 3}, incurring a cost of 1."
                    },
                    {
                        "input": "N = 4\narr = {4, 3, 1, 2}",
                        "output": "2",
                        "explanation": "Move '3' to the end of the array {4, 1, 2, 3}. Then move '4' to the end of the array{1, 2, 3, 4}. This sorts the array with a cost of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Length of segment already in increasing order can prove helpful.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to calculate the minimum cost of sorting.\n    int sortingCost(int N, int arr[]){\n        //declaring and initializing a hash array of size N+1.\n        int hash[N+1] = {0};\n\n        //iterating over the array elements.\n        for(int i = 0;i < N;i++){\n            int k = arr[i];\n\n            //updating the hash array to store the maximum length\n            //of subsequence ending at k.\n            hash[k] = hash[k-1] + 1;\n        }\n\n        //variable to store the maximum length of subsequence.\n        int maxi = 0;\n\n        //iterating over the hash array to find the maximum length.\n        for(int i = 0;i <= N;i++)\n            maxi = max(maxi, hash[i]);\n\n        //returning the minimum cost of sorting.\n        return (N - maxi);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n\r\n    // Function to calculate the sorting cost\r\n    static int sortingCost(int N, int arr[]){\r\n        // Creating an array to store the count of each element in the original array\r\n        int hash[] = new int[N+1];\r\n        \r\n        // Initializing the hash array with 0 for each element\r\n        Arrays.fill(hash, 0);\r\n        \r\n        // Iterating through the original array to count the occurrences of each element\r\n        for(int i = 0;i < N;i++){\r\n            int k = arr[i];\r\n            hash[k] = hash[k-1] + 1;\r\n        }\r\n        \r\n        // Finding the maximum count in the hash array\r\n        int maxi = 0;\r\n        for(int i = 0;i <= N;i++)\r\n            maxi = Math.max(maxi, hash[i]);\r\n        \r\n        // Calculating the sorting cost by subtracting the maximum count from the size of the array\r\n        return (N - maxi);\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    public int sortingCost(int N, int[] arr)\n    {\n        //declaring and initializing a hash array of size N+1.\n        int[] hash = new int[N+1];\n\n        //iterating over the array elements.\n        for(int i = 0;i < N;i++){\n            int k = arr[i];\n\n            //updating the hash array to store the maximum length\n            //of subsequence ending at k.\n            hash[k] = hash[k-1] + 1;\n        }\n\n        //variable to store the maximum length of subsequence.\n        int maxi = 0;\n\n        //iterating over the hash array to find the maximum length.\n        for(int i = 0;i <= N;i++)\n            maxi = Math.Max(maxi, hash[i]);\n\n        //returning the minimum cost of sorting.\n        return (N - maxi);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}