{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701758,
            "title": "Most frequent word in an array of strings",
            "titleSlug": "most-frequent-word-in-an-array-of-strings3528",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr </strong>containing <strong>N</strong> words consisting <strong>of lowercase characters</strong>. Your task is to find the <strong>most frequent</strong> word in the array. If <strong>multiple </strong>words have same frequency, then print the<strong> word whose first occurence occurs last</strong> in the array as compared to the other strings with same frequency.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">N = 3\narr[] = {geeks,for,geeks}\n<strong>Output: </strong>geeks<strong>\nExplanation: </strong>\"geeks\" comes 2 times.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">N = 2\narr[] = {hello,world}\n<strong>Output: </strong>world<strong>\nExplanation: </strong>\"hello\" and \"world\" both\nhave 1 frequency. We print world as\nits first occurence comes last in the\ninput array.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Complete<strong>&nbsp;mostFrequentWord&nbsp;</strong>function which takes array of strings and its length as arguments and returns the most frequent word. The printing is done by the driver code.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N * WORD_LEN).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N * WORD_LEN).</span></p>\n<div><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 50000<br />1 &lt;= |each string| &lt;= 50</span></div>\n<div><span style=\"font-size: 18px;\">Sum of length of every string does not exceed&nbsp;5*10<sup>5</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of strings `arr` of size `N`, find the most frequent word in the array. If multiple words have the same highest frequency, return the word whose first occurrence appears latest in the array.",
                "constraints": [
                    "1 <= N <= 50000",
                    "1 <= length of each string <= 50",
                    "Sum of length of every string does not exceed 5*10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 3\narr[] = {geeks,for,geeks}",
                        "output": "geeks",
                        "explanation": "The word \"geeks\" appears twice, which is the highest frequency. Therefore, the output is \"geeks\"."
                    },
                    {
                        "input": "N = 2\narr[] = {hello,world}",
                        "output": "world",
                        "explanation": "Both \"hello\" and \"world\" appear once. Since \"world\" appears later in the array, it is the most frequent word according to the problem's rules."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [
            "microsoft",
            "citrix",
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template for C++\n\nclass trie_element \n{\n  public:\n    trie_element* nxt[26];\n    int count;\n    int first_appearance;\n\n    trie_element() {\n        this->count = 0;\n        for (int i = 0; i < 26; i++) this->nxt[i] = NULL;\n    }\n};\n\nclass Solution\n{\n    public:\n    //Function to find most frequent word in an array of strings.\n    string mostFrequentWord(string arr[], int n)\n    {\n        string ret = \"\";\n        int max_count = 0;\n        int ret_first_appearance;\n    \n        trie_element* trie = new trie_element();\n    \n        for (int i = 0; i < n; i++) \n        {\n            trie_element* temp = trie;\n            \n            for (int j = 0; j < arr[i].size(); j++) \n            {\n                int index = arr[i][j] - 'a';\n                if (temp->nxt[index] == NULL) \n                temp->nxt[index] = new trie_element();\n                temp = temp->nxt[index];\n            }\n            \n            //storing the count and first appearance of current word.\n            temp->count++;\n            if (temp->count == 1)\n            temp->first_appearance = i;\n    \n            //updating the maximum count if required and if they have\n            //same frequency, then storing the word whose first \n            //occurrence occurs last in the array.\n            if (temp->count > max_count || (temp->count == max_count &&\n                            temp->first_appearance > ret_first_appearance))\n            {\n                ret = arr[i];\n                max_count = temp->count;\n                ret_first_appearance = temp->first_appearance;\n            }\n        }\n        //returning the most frequent word.\n        return ret;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass trie_element {\n  \n    public trie_element nxt[];\n    public int count;\n    public int first_appearance;\n\n    public trie_element() {\n        count = 0;\n        nxt=new trie_element[26];\n        for (int i = 0; i < 26; i++)\n            nxt[i] = null;\n    }\n}\n\nclass Solution\n{\n    //Function to find most frequent word in an array of strings.\n    public String mostFrequentWord(String arr[],int n)\n    {\n        String ret=\"\";\n        int max_count=0;\n        int ret_first_appearance=0;\n        trie_element trie=new trie_element();\n        \n        for(int i=0;i<n;i++)\n        {\n            trie_element temp=trie;\n            for(int j=0;j<arr[i].length();j++)\n            {\n                int index=arr[i].charAt(j)-'a';\n                if(temp.nxt[index]==null)\n                temp.nxt[index]=new trie_element();\n                temp=temp.nxt[index];\n            }\n            \n            //storing the count and first appearance of current word.\n            temp.count++;\n            \n            if(temp.count==1)\n            temp.first_appearance=i;\n            \n            //updating the maximum count if required and if they have\n            //same frequency, then storing the word whose first \n            //occurrence occurs last in the array.\n            if(temp.count>max_count||(temp.count==max_count&&\n            temp.first_appearance>ret_first_appearance))\n            {\n                ret=arr[i];\n                max_count=temp.count;\n                ret_first_appearance=temp.first_appearance;\n            }\n        }\n        //returning the most frequent word.\n        return ret;\n    }\n\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass trie_element:\n    def __init__(self):\n        self.nxt=[None for _ in range(26)]\n        self.count=0\n        self.first_appearance=0\n\nclass Solution:\n    \n    #Function to find most frequent word in an array of strings.\n    def mostFrequentWord(self, arr,n):\n        trie = trie_element()\n        max_count = 0\n        the_word = ''\n        the_word_first_app = 0\n        \n        for i in range(n):\n            word=arr[i]\n            \n            temp = trie\n            for c in word:\n                index = ord(c)-ord('a')\n                if temp.nxt[index] is None:\n                    temp.nxt[index] = trie_element()\n                temp = temp.nxt[index]\n            \n            #storing the count and first appearance of current word.\n            temp.count+=1\n            if temp.count==1:\n                temp.first_appearance=i\n            \n            #updating the maximum count if required and if they have\n            #same frequency, then storing the word whose first \n            #occurrence occurs last in the array.\n            if temp.count>max_count or ( temp.count==max_count and \n            temp.first_appearance>the_word_first_app ) :\n                max_count=temp.count\n                the_word=word\n                the_word_first_app=temp.first_appearance\n        \n        #returning the most frequent word.\n        return the_word\n        \n        \n        \n        \n        ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n\nclass trie_element\n{\n    constructor()\n    { \n        this.count = 0; // Only used in leaf nodes \n        this.first_appearance = -1;\n        this.nxt = new Array(26);\n        this.nxt.fill(null);\n    }\n}\n\n/**\n * @param {string[]} arr\n * @param {number} n\n*/\nclass Solution\n{\n    //Function to find most frequent word in an array of strings.\n    mostFrequentWord(arr, n)\n    {\n        let ret = \"\";\n        let max_count = 0;\n        let ret_first_appearance;\n    \n        let trie = new trie_element();\n    \n        for (let i = 0; i < n; i++) {\n            let temp = trie;\n            for (let j = 0; j < arr[i].length; j++) {\n                let index = arr[i].charCodeAt(j) - 97;\n                if (temp.nxt[index] == null) temp.nxt[index] = new trie_element();\n                temp = temp.nxt[index];\n            }\n    \n            //storing the count and first appearance of current word.\n            temp.count++;\n            if (temp.count == 1)\n                temp.first_appearance = i;\n            \n            //updating the maximum count if required and if they have\n            //same frequency, then storing the word whose first \n            //occurrence occurs last in the array.\n            if (temp.count > max_count || (temp.count == max_count &&\n                 temp.first_appearance > ret_first_appearance))\n            {\n                ret = arr[i];\n                max_count = temp.count;\n                ret_first_appearance = temp.first_appearance;\n            }\n        }\n        //returning the most frequent word.\n        return ret;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}