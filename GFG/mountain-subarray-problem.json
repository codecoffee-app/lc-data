{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700549,
            "title": "Mountain Subarray Problem",
            "titleSlug": "mountain-subarray-problem",
            "content": "<p><span style=\"font-size: 18px;\">We are given an array of integers and a range, we need to find whether the subarray which falls in this range has values in the form of a mountain or not. All values of the subarray are said to be in the form of a mountain if either all values are increasing or decreasing or first increasing and then decreasing. More formally a subarray [a1, a2, a3 &hellip; aN] is said to be in form of a mountain if there exists an integer K, 1 &lt;= K &lt;= N such that,<br />a1 &lt;= a2 &lt;= a3 .. &lt;= aK &gt;= a(K+1) &gt;= a(K+2) &hellip;. &gt;= aN<br />You have to process <strong>Q</strong>&nbsp;queries. In each query you are given two integer <strong>L</strong> and <strong>R,&nbsp;</strong>denoting starting and last index of the subarrays respectively.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 8\na[] = {2,3,2,4,4,6,3,2}\nQ = 2\nQueries = (0,2), (1,3)\n<strong>Output:\n</strong>Yes\nNo<strong>\nExplanation: </strong>For L = 0 and R = 2, a0 = 2,\na1 = 3 and a2 = 2, since they are in the\nvalid order,answer is Yes.\nFor L = 1 and R = 3, a1 = 3, a2 = 2 and\na3 = 4, since a1 &gt; a2 and a2 &lt; a4 the\norder isn't valid, hence the answer is\nNo.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">Complete the function&nbsp;<strong>processQueries()&nbsp;</strong>which takes the array, size of array queries and number of queries as parameter. It should return a vector/ArrayList/array (depending upon language cpp/Java/Python) of boolean values, true if the subarray is in mountain form, false otherwise. The driver code will print \"Yes\" if the returned value is true, otherwise \"No\".</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N + Q).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N, Q &lt;= 10<sup>5</sup><br />1 &lt;= a[i] &lt;= 10<sup>6</sup>, for each valid i<br />0 &lt;= L &lt;= R &lt;= N-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers and a set of range queries, determine if the subarray within each specified range represents a mountain array. A mountain array is defined as either strictly increasing, strictly decreasing, or first increasing and then decreasing.  Formally, a subarray `[a1, a2, ..., aN]` is a mountain if there exists an index `K` (1 <= K <= N) such that `a1 <= a2 <= ... <= aK >= a(K+1) >= a(K+2) >= ... >= aN`.  Process `Q` queries, each providing a left (L) and right (R) index, defining a subarray. For each query, determine if the corresponding subarray is a mountain array.",
                "constraints": [
                    "1 <= N, Q <= 10^5",
                    "1 <= a[i] <= 10^6, for each valid i",
                    "0 <= L <= R <= N-1"
                ],
                "testcases": [
                    {
                        "input": "N = 8\na[] = {2,3,2,4,4,6,3,2}\nQ = 2\nQueries = (0,2), (1,3)",
                        "output": "Yes\nNo",
                        "explanation": "For L = 0 and R = 2, the subarray is [2, 3, 2].  This subarray increases from 2 to 3 and then decreases to 2, fitting the mountain pattern.  For L = 1 and R = 3, the subarray is [3, 2, 4]. This subarray decreases from 3 to 2 and then increases to 4, violating the mountain pattern. Thus, the first query is 'Yes' and the second is 'No'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can solve this problem by first some preprocessing then we can answer for each subarray in a constant amount of time. We maintain two arrays left and right where left[i] stores the last index on the left side which is increasing i.e. greater than its previous element and right[i] will store the first index on the right side which is decreasing i.e. greater than its next element. Once we maintained these arrays we can answer each subarray in constant time. Suppose range [l, r] is given then only if right[l] &gt;= left[r], the subarray will be in form of a mountain otherwise not because the first index in decreasing form (i.e. right[l]) should come later than the last index in increasing form (i.e. left[r]).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\n  public:\n// Utility method to construct left and right array\n    void preprocess(int arr[], int N, int left[], int right[]) {\n        // initialize first left index as that index only\n        left[0] = 0;\n        int lastIncr = 0;\n    \n        for (int i = 1; i < N; i++) {\n            // if current value is greater than previous,\n            // update last increasing\n            if (arr[i] > arr[i - 1]) lastIncr = i;\n            left[i] = lastIncr;\n        }\n    \n        // initialize last right index as that index only\n        right[N - 1] = N - 1;\n        int firstDecr = N - 1;\n    \n        for (int i = N - 2; i >= 0; i--) {\n            // if current value is greater than next,\n            // update first decreasing\n            if (arr[i] > arr[i + 1]) firstDecr = i;\n            right[i] = firstDecr;\n        }\n    }\n    \n    // method returns true if arr[L..R] is in mountain form\n    bool isSubarrayMountainForm(int left[], int right[], int L, int R) {\n        // return true only if right at starting range is\n        // greater than left at ending range\n        return (right[L] >= left[R]);\n    }\n    \n    vector<bool> processQueries(int a[], int n, vector<pair<int, int>> &queries,\n                                int q) {\n        int *left = new int[n];\n        int *right = new int[n];\n        preprocess(a, n, left, right);\n        vector<bool> v;\n        for (int i = 0; i < q; i++) {\n            v.push_back(isSubarrayMountainForm(left, right, queries[i].first,\n                                               queries[i].second));\n        }\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    public ArrayList<Boolean> processQueries(int[] a, int n, ArrayList<Pair> queries,\n                                      int q) {\n        int[] left = new int[n];\n        int[] right = new int[n];\n        preProcess(a, n, left, right);\n        ArrayList<Boolean> v = new ArrayList<Boolean>();\n        for (int i = 0; i < q; i++) {\n            v.add(isSubarrayMountainForm(left, right, queries.get(i).l,\n                                         queries.get(i).r));\n        }\n        return v;\n    }\n    public void preProcess(int[] arr, int n, int[] left, int[] right) {\n        //  initialize first left index as that index only\n        left[0] = 0;\n        int lastIncr = 0;\n\n        for (int i = 1; i < n; i++) {\n            // if current value is greater than previous,\n            // update last increasing\n            if (arr[i] > arr[i - 1]) lastIncr = i;\n            left[i] = lastIncr;\n        }\n\n        //  initialize last right index as that index only\n        right[n - 1] = n - 1;\n        int firstDecr = n - 1;\n\n        for (int i = n - 2; i >= 0; i--) {\n            // if current value is greater than next,\n            // update first decreasing\n            if (arr[i] > arr[i + 1]) firstDecr = i;\n            right[i] = firstDecr;\n        }\n    }\n    //  method returns true if arr[L..R] is in mountain form\n    boolean isSubarrayMountainForm(int[] left, int[] right, int l, int r) {\n        // return true only if right at starting range is\n        // greater than left at ending range\n        if (right[l] >= left[r]) return true;\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n# Python 3 program to check whether a subarray is in \n# mountain form or not \n  \nclass Solution:\n    # Utility method to construct left and right array \n    def preprocess(self,arr, N, left, right): \n        # initialize first left index as that index only \n        left[0] = 0\n        lastIncr = 0\n      \n        for i in range(1,N): \n            # if current value is greater than previous, \n            # update last increasing \n            if (arr[i] > arr[i - 1]): \n                lastIncr = i \n            left[i] = lastIncr \n      \n        # initialize last right index as that index only \n        right[N - 1] = N - 1\n        firstDecr = N - 1\n      \n        i = N - 2\n        while(i >= 0): \n            # if current value is greater than next, \n            # update first decreasing \n            if (arr[i] > arr[i + 1]): \n                firstDecr = i \n            right[i] = firstDecr \n            i -= 1\n      \n    # method returns true if arr[L..R] is in mountain form \n    def isSubarrayMountainForm(self,arr, left, right, L, R): \n          \n        # return true only if right at starting range is \n        # greater than left at ending range \n        return (right[L] >= left[R]) \n    \n    def processqueries(self,arr,n,m,q):\n        result=[]\n        left = [0 for i in range(n)] \n        right = [0 for i in range(n)] \n        self.preprocess(arr, n, left, right)\n        for i in q:\n            L,R=i\n            if (self.isSubarrayMountainForm(arr, left, right, L, R)): \n                result.append(\"Yes\")\n            else:\n                result.append(\"No\")\n        return result\n    \n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Utility method to construct left and right array\n    public void preprocess(int[] arr, int N, int[] left, int[] right)\n    {\n        // initialize first left index as that index only\n        left[0] = 0;\n        int lastIncr = 0;\n\n        for (int i = 1; i < N; i++)\n        {\n            // if current value is greater than previous,\n            // update last increasing\n            if (arr[i] > arr[i - 1]) lastIncr = i;\n            left[i] = lastIncr;\n        }\n\n        // initialize last right index as that index only\n        right[N - 1] = N - 1;\n        int firstDecr = N - 1;\n\n        for (int i = N - 2; i >= 0; i--)\n        {\n            // if current value is greater than next,\n            // update first decreasing\n            if (arr[i] > arr[i + 1]) firstDecr = i;\n            right[i] = firstDecr;\n        }\n    }\n\n    // method returns true if arr[L..R] is in mountain form\n    public bool isSubarrayMountainForm(int[] left, int[] right, int L, int R)\n    {\n        // return true only if right at starting range is\n        // greater than left at ending range\n        return (right[L] >= left[R]);\n    }\n\n    public List<bool> processQueries(int[] a, int n, List<Tuple<int, int>> queries, int q)\n    {\n        int[] left = new int[n];\n        int[] right = new int[n];\n        preprocess(a, n, left, right);\n        List<bool> v = new List<bool>();\n        for (int i = 0; i < q; i++)\n        {\n            v.Add(isSubarrayMountainForm(left, right, queries[i].Item1,\n                                           queries[i].Item2));\n        }\n        return v;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    preprocess(arr, N, left, right) {\n        // initialize first left index as that index only\n        left[0] = 0;\n        let lastIncr = 0;\n\n        for (let i = 1; i < N; i++) {\n            // if current value is greater than previous,\n            // update last increasing\n            if (arr[i] > arr[i - 1]) lastIncr = i;\n            left[i] = lastIncr;\n        }\n\n        // initialize last right index as that index only\n        right[N - 1] = N - 1;\n        let firstDecr = N - 1;\n\n        for (let i = N - 2; i >= 0; i--) {\n            // if current value is greater than next,\n            // update first decreasing\n            if (arr[i] > arr[i + 1]) firstDecr = i;\n            right[i] = firstDecr;\n        }\n    }\n\n    isSubarrayMountainForm(left, right, L, R) {\n        // return true only if right at starting range is\n        // greater than left at ending range\n        if (right[L] >= left[R]) return \"Yes\";\n        return \"No\";\n    }\n\n    processQueries(a, n, queries, q) {\n        let left = new Array(n);\n        let right = new Array(n);\n        this.preprocess(a, n, left, right);\n        let v = [];\n        for (let i = 0; i < q; i++) {\n            v.push(\n                this.isSubarrayMountainForm(left, right, queries[i][0], queries[i][1]));\n        }\n        return v;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}