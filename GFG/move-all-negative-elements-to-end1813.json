{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702817,
            "title": "Move all negative elements to end",
            "titleSlug": "move-all-negative-elements-to-end1813",
            "content": "<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\">Given an unsorted array <strong>arr[ ]</strong> having both negative and positive integers. The task is to place all negative elements at the end of the array without changing the order of positive elements and negative elements.</span></span></p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Note</strong>: <strong>Don't return any array, just in-place on the array.</strong></span></span></p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></span></p>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Input : </strong>arr[] = [1, -1, 3, 2, -7, -5, 11, 6 ]\n<strong>Output : </strong>[1, 3, 2, 11, 6, -1, -7, -5]<br /><strong>Explanation: </strong>By doing operations we separated the integers without changing the order.</span></span></pre>\n<pre><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Input : </strong>arr[] = [-5, 7, -3, -4, 9, 10, -1, 11]\n<strong>Output : </strong>[7, 9, 10, 11, -5, -3, -4, -1]\n</span></span></pre>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space: </strong>O(n)</span></span></p>\n<p><span style=\"font-family: arial,helvetica,sans-serif;\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size &le; 10<sup>6</sup></span><span style=\"font-size: 18px;\"><br /><span style=\"font-size: 18px;\">-10<sup>9</sup></span><sup style=\"font-size: 18px;\">&nbsp;</sup><span style=\"font-size: 18px;\">&le; arr[i] &le; 10</span><sup>9</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array `arr[]` containing both negative and positive integers, rearrange the array in-place such that all negative elements are moved to the end, while maintaining the original order of both positive and negative elements. Do not return a new array; modify the input array directly.",
                "constraints": [
                    "1 <= arr.size <= 10^6",
                    "-10^9 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1, -1, 3, 2, -7, -5, 11, 6]",
                        "output": "[1, 3, 2, 11, 6, -1, -7, -5]",
                        "explanation": "The positive elements (1, 3, 2, 11, 6) retain their original order, and the negative elements (-1, -7, -5) are placed at the end, also retaining their original order."
                    },
                    {
                        "input": "[-5, 7, -3, -4, 9, 10, -1, 11]",
                        "output": "[7, 9, 10, 11, -5, -3, -4, -1]",
                        "explanation": "The positive elements (7, 9, 10, 11) are placed at the beginning while preserving their order, and the negative elements (-5, -3, -4, -1) are moved to the end, again maintaining their order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">The problem becomes easier if we use extra space, and store positive and negative numbers separately.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void segregateElements(vector<int>& arr) {\n        int n = arr.size();\n\n        // Create an empty vector to store result\n        vector<int> temp(n);\n\n        // Traverse array and store positive elements in temp array\n        int j = 0; // index of temp\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                temp[j++] = arr[i];\n            }\n        }\n\n        // Store negative elements in temp array\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp[j++] = arr[i];\n            }\n        }\n\n        // Copy contents of temp[] to arr[]\n        for (int i = 0; i < n; i++) {\n            arr[i] = temp[i];\n        }\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public void segregateElements(int[] arr) {\n        int n = arr.length;\n        int[] temp = new int[n];\n        int j = 0; // index for temp array\n\n        // Store positive elements in temp array\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                temp[j++] = arr[i];\n            }\n        }\n\n        // Store negative elements in temp array\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp[j++] = arr[i];\n            }\n        }\n\n        // Copy contents of temp array back to arr\n        for (int i = 0; i < n; i++) {\n            arr[i] = temp[i];\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    #Function to segregate positive and negative elements in the array.\n    def segregateElements(self, arr):\n        n = len(arr)\n        tmp1 = []  #Initializing an empty list to store positive elements.\n        tmp2 = []  #Initializing an empty list to store negative elements.\n\n        #Iterating over each element in the array.\n        for i in arr:\n            if i >= 0:  #If the element is positive, add it to the temporary positive list.\n                tmp1.append(i)\n            else:  #If the element is negative, add it to the temporary negative list.\n                tmp2.append(i)\n\n        c = 0  #Initializing a counter variable to keep track of the index in the original array.\n\n        #Iterating over the elements in the combined positive and negative lists.\n        for i in tmp1 + tmp2:\n            arr[c] = i  #Replacing the value in the original array with the value from the temporary lists.\n            c += 1  #Incrementing the counter variable to move to the next index in the original array.\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    segregateElements(arr) {\n        let n = arr.length;\n        let temp = new Array(n);\n        let j = 0; // index for temp array\n\n        // Store positive elements in temp array\n        for (let i = 0; i < n; i++) {\n            if (arr[i] >= 0) {\n                temp[j++] = arr[i];\n            }\n        }\n\n        // Store negative elements in temp array\n        for (let i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp[j++] = arr[i];\n            }\n        }\n\n        // Copy contents of temp array back to arr\n        for (let i = 0; i < n; i++) {\n            arr[i] = temp[i];\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}