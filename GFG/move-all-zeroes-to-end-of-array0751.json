{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702806,
            "title": "Move All Zeroes to End",
            "titleSlug": "move-all-zeroes-to-end-of-array0751",
            "content": "<p><span >You are given an array <strong>arr[]</strong> of non-negative integers. Your task is to move all the zeros in the array to the right end while maintaining the relative order of the non-zero elements. The operation must be performed <strong>in place</strong>, meaning you should not use extra space for another array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 0, 4, 3, 0, 5, 0]\n<strong>Output:</strong> [1, 2, 4, 3, 5, 0, 0, 0]\n<strong>Explanation:</strong> There are three 0s that are moved to the end.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [10, 20, 30]\n<strong>Output:</strong> [10, 20, 30]\n<strong>Explanation:</strong> No change in array as there are no 0s.\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [0, 0]\n<strong>Output:</strong> [0, 0]\n<strong>Explanation:</strong> No change in array as there are all 0s.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />0 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of non-negative integers, rearrange the elements such that all zeros are moved to the end of the array. The relative order of the non-zero elements must be preserved. This operation must be performed in-place, without using extra space.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 0, 4, 3, 0, 5, 0]",
                        "output": "[1, 2, 4, 3, 5, 0, 0, 0]",
                        "explanation": "The zeros are moved to the end while preserving the order of the non-zero elements."
                    },
                    {
                        "input": "[10, 20, 30]",
                        "output": "[10, 20, 30]",
                        "explanation": "The array contains no zeros, so it remains unchanged."
                    },
                    {
                        "input": "[0, 0]",
                        "output": "[0, 0]",
                        "explanation": "The array contains only zeros, so it remains unchanged."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">You can solve this problem via two methods. </span></p>\n\n<ol>\n\t<li><span style=\"font-size:18px\">&nbsp;Count the total zeroes and append them after the non-zero elements</span></li>\n\t<li><span style=\"font-size:18px\">Use two pointers to swap the elements</span></li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "amazon",
            "microsoft",
            "samsung",
            "sap-labs",
            "linkedin",
            "bloomberg"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    void pushZerosToEnd(vector<int>& arr) {\n        // Pointer to track the position for next non-zero element\n        int count = 0;\n\n        for (int i = 0; i < arr.size(); i++) {\n            // If the current element is non-zero\n            if (arr[i] != 0) {\n                // Swap the current element with the 0 at index 'count'\n                swap(arr[i], arr[count]);\n                // Move 'count' pointer to the next position\n                count++;\n            }\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nclass Solution {\n    void pushZerosToEnd(int[] arr) {\n        int count = 0;\n\n        for (int i = 0; i < arr.length; i++) {\n\n            // If the current element is non-zero\n            if (arr[i] != 0) {\n\n                // Swap the current element with the 0 at index 'count'\n                int temp = arr[i];\n                arr[i] = arr[count];\n                arr[count] = temp;\n\n                // Move 'count' pointer to the next position\n                count++;\n            }\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\n\n\nclass Solution:\n\n    def pushZerosToEnd(self, arr):\n        # Pointer to track the position for next non-zero element\n        count = 0\n        for i in range(len(arr)):\n            # If the current element is non-zero\n            if arr[i] != 0:\n                # Swap the current element with the 0 at index 'count'\n                arr[i], arr[count] = arr[count], arr[i]\n                # Move 'count' pointer to the next position\n                count += 1\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {Number[]} arr\n */\n\nclass Solution {\n    pushZerosToEnd(arr) {\n        let count = 0;\n\n        for (let i = 0; i < arr.length; i++) {\n            // If the current element is non-zero\n            if (arr[i] !== 0) {\n                // Swap the current element with the 0 at index 'count'\n                [arr[i], arr[count]] = [ arr[count], arr[i] ];\n                // Move 'count' pointer to the next position\n                count++;\n            }\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}