{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709988,
            "title": "Move Last Element to Front of a Linked List",
            "titleSlug": "move-last-element-to-front-of-a-linked-list",
            "content": "<p><span style=\"font-size: 12pt;\">You are given the head of a Linked List. You have to move the last element to the front of the Linked List and return the head the modified linked list.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>Linked List: 2-&gt;5-&gt;6-&gt;2-&gt;1<strong>\nOutput: </strong>1-&gt;2-&gt;5-&gt;6-&gt;2<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/709988/Web/Other/blobid0_1722872196.png\" width=\"320\" height=\"112\" /><strong>\nExplanation: </strong>In the given linked list, the last element is 1, after moving the last element to the front the linked list will be 1-&gt;2-&gt;5-&gt;6-&gt;2</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>Linked<strong> </strong>List: 2<strong>\nOutput:</strong> 2<strong>\nExplanation: </strong>Here 2 is the only element so, the linked list will remain the same.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Space&nbsp;</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Complexity</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">&nbsp;O(1)</span></span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &lt;= size of linked list &lt;= 10<sup>6</sup><br />0 &lt;= elements of list &lt;= 10<sup>9</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Can I just traverse the whole list and make the next of the last node to the head?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to move the last node to the front of the linked list.\n    Node *moveToFront(Node *head) {\n        // if there is only one node in the linked list, return the head.\n        if (head->next == NULL)\n            return head;\n\n        // Initializing two pointers, tmp1 and tmp2.\n        Node *tmp1 = head, *tmp2 = head->next;\n\n        // iterating until tmp2 reaches the last node.\n        while (tmp2->next != NULL) {\n            tmp1 = tmp1->next;\n            tmp2 = tmp2->next;\n        }\n\n        // Making the last node as the new head node.\n        tmp2->next = head;\n        tmp1->next = NULL;\n\n        // returning the updated head.\n        return tmp2;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static Node moveToFront(Node head) {\n        // If the list only has one node, return the head\n        if (head.next == null) return head;\n\n        // Use two pointers to traverse the list\n        Node tmp1 = head, tmp2 = head.next;\n\n        // Traverse the list until the second pointer reaches the last node\n        while (tmp2.next != null) {\n            tmp1 = tmp1.next;\n            tmp2 = tmp2.next;\n        }\n\n        // Connect the last node to the head\n        tmp2.next = head;\n\n        // Cut off the connection between the last node and the previous node\n        tmp1.next = null;\n\n        // Return the new head\n        return tmp2;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import Optional\n\"\"\"\n\nDefinition for singly Link List Node\nclass Node:\n    def __init__(self,x):\n        self.data=x\n        self.next=None\n\nYou can also use the following for printing the link list.\nprintList(node)\n\"\"\"\n\n\nclass Solution:\n\n    def moveToFront(self, head: Optional['Node']) -> Optional['Node']:\n        if head.next == None:\n            return head\n        temp1 = head\n        temp2 = head.next\n        while temp2.next != None:\n            temp1 = temp1.next\n            temp2 = temp2.next\n        temp2.next = head\n        temp1.next = None\n        return temp2\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * Definition for singly Link List Node\n * class Node{\n *     constructor(x){\n *         this.data = x\n *         this.next = null\n *     }\n * }\n * @param {Node} head\n * @returns {Node}\n */\n\nclass Solution {\n    // Function to move last element to front in a linked list.\n    moveToFront(head) {\n        if (head.next === null) {\n            return head;\n        }\n\n        let temp1 = head;\n        let temp2 = head.next;\n\n        while (temp2.next !== null) {\n            temp1 = temp1.next;\n            temp2 = temp2.next;\n        }\n\n        temp2.next = head;\n        temp1.next = null;\n\n        return temp2;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}