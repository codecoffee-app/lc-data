{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703579,
            "title": "Mr. Binary",
            "titleSlug": "mr-binary1141",
            "content": "<p><span style=\"font-size:18px\">Given a string S containing lowercase English alphabets. Initially, you are at index 1. You&nbsp;can only jump to some other location j (j&gt;i) only if s[j] = s[i] + 1. Find the maximum index you can reach.<br />\n<br />\n<strong>Note:&nbsp;</strong>First character of the string is always &#39;a&#39;. He can only go &#39;a&#39;-&gt;&#39;b&#39;,&#39;b&#39;-&gt;&#39;c&#39;,&#39;c&#39;-&gt;&#39;d&#39; and so on. &#39;a&#39;-&gt;&#39;c&#39;,&#39;b&#39;-&gt;&#39;d&#39;,&#39;b&#39;-&gt;&#39;a&#39; is not a valid move. He can start from any of index of &#39;a&#39;. Indexing is zero based.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>s<strong> </strong>=<strong> </strong>&quot;aaabbcdbdt&quot;</span>\n<span style=\"font-size:18px\"><strong>Output:\n</strong>8</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">One can start from &#39;a&#39; at index 0 or 1 \nor 2 and then move to &#39;b&#39; at index 3 or \n4, then jump to &#39;c&#39; at index 5 and then \ngo to  &#39;d&#39; at greater index than 6 which \nis 8. Thus the answer is 8.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>s =<strong> </strong>&quot;aabcb&quot;</span>\n<span style=\"font-size:18px\"><strong>Output:\n</strong>4</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">Again one can&nbsp;starts from &#39;a&#39; and proceed \nto &#39;b&#39; and then &#39;c&#39;. But we&nbsp;have &#39;b&#39; at \nthe highest index also, so he&nbsp;will not go \nto &#39;c&#39; and from &#39;a&#39;, we will directly jump \nto &#39;b&#39;.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything. Your task is to complete the function <strong>maximum_index()&nbsp;</strong>which takes the string S as an input parameter and returns the maximum index where one can reach.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|)</span><br />\n<span style=\"font-size:18px\"><strong>Expected Space&nbsp;Complexity:&nbsp;</strong>O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= size of string &lt;= 100000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` containing lowercase English alphabets, find the maximum index you can reach starting from index 0. You can only jump to location `j` (where `j > i`) if `S[j]` is the next alphabet in sequence after `S[i]` (i.e., `S[j] = S[i] + 1`).  The first character of the string is always 'a', and you can start from any index containing 'a'. Indexing is zero-based. Valid jumps are 'a' -> 'b', 'b' -> 'c', etc.",
                "constraints": [
                    "1 <= size of string <= 100000"
                ],
                "testcases": [
                    {
                        "input": "aaabbcdbdt",
                        "output": "8",
                        "explanation": "We can start from 'a' at index 0, 1 or 2, move to 'b' at index 3 or 4, then jump to 'c' at index 5, and finally go to 'd' at index 8. Therefore, the maximum reachable index is 8."
                    },
                    {
                        "input": "aabcb",
                        "output": "4",
                        "explanation": "Starting from 'a', we can move to 'b' at index 3. Alternatively, starting from the second 'a' at index 1, we can also move to 'b' at index 3. The highest index containing 'b' is 4; therefore, if we started from index 'a' at index 0 then we can traverse to the last 'b' at index 4. So the answer is 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Proceed only if s[j] &lt;= s[i] or if s[j] == s[i]+1</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution\n{\n\tpublic:\n\t\tint maximum_index(string s)\n\t\t{\n\t\t\tint res = 0;\n\t\t\t// storing previous char\n\t\t\tchar prev_char = 'a';\n\t\t\tfor(int i = 1; i < s.size(); i++)\n\t\t\t{\n\t\t\t\tchar cur_char = s[i];\n\t\t\t\t// calulating the maximum distance\n\t\t\t\tif(cur_char <= prev_char ){\n\t\t\t\t\tres = i;\n\t\t\t\t}\n\t\t\t\t// if s[j] == s[i]+1 then change prev_char to cur_char and also update the ans\n\t\t\t\telse if(cur_char-prev_char == 1){\n\t\t\t\t    res = i;\n\t\t\t\t    prev_char = cur_char;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    public int maximum_index(string s)\n    {\n        int res = 0;\n        char prev_char = 'a';\n        for (int i = 1; i < s.Length; i++)\n        {\n            char cur_char = s[i];\n            if (cur_char <= prev_char)\n            {\n                res = i;\n            }\n            else if (cur_char - prev_char == 1)\n            {\n                res = i;\n                prev_char = cur_char;\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}