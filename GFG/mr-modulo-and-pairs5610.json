{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702811,
            "title": "Mr Modulo and Pairs",
            "titleSlug": "mr-modulo-and-pairs5610",
            "content": "<p><span >Mr. Modulo comes up with another problem related to modulo and this time he has an array of integers <strong>arr[]</strong> and an integer <strong>k</strong>, he is interested in finding all the possible pairs <strong>arr[i]</strong> and <strong>arr[j]</strong> in the array <strong>arr[]</strong> such that <strong>arr[i]</strong> % <strong>arr[j]</strong> = <strong>k</strong>. The array given will have distinct elements.<br />You are required to return the number of such pairs.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 3, 5, 4, 7], k = 3\n<strong>Output:</strong> 4\n<strong>Explanation</strong>: The pairs which give remainder 3 : {7, 4}, {3, 4}, {3, 5}, {3, 7}.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2], k = 3\n<strong>Output:</strong> 0<br /><strong>Explanation:</strong> No pairs give remainder 3.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> &nbsp;O(n*sqrt(max(arr[i])))&nbsp;<br /><strong>Expected Auxiliary Space: </strong>O(n).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5<br /></sup>1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >The solution focuses on two key aspects. First, if <strong>k</strong> is present in the array, pair it with elements larger than <strong>k</strong>. Second, for any number <strong>num1</strong> that leaves a remainder of <strong>k</strong> when divided by <strong>num2</strong>, subtracting <strong>k</strong> from <strong>num1</strong> means <strong>num2 </strong>must be a divisor of the result. Count these divisors to form valid pairs.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find all the divisors of a number\n    vector<int> findDivisors(int n) {\n        vector<int> v;\n        // iterating from 1 to sqrt(n) to find divisors\n        for (int i = 1; i <= sqrt(n); i++) {\n            // if i is a divisor, add it to the vector\n            if (n % i == 0) {\n                // if n/i is equal to i, add only i\n                if (n / i == i)\n                    v.push_back(i);\n                // if n/i is not equal to i, add both i and n/i\n                else {\n                    v.push_back(i);\n                    v.push_back(n / i);\n                }\n            }\n        }\n        return v;\n    }\n\n    // Function to find the number of pairs with a given difference\n    int printPairs(vector<int> &arr, int k) {\n        int n = arr.size();\n        int ans = 0;\n        unordered_map<int, bool> occ;\n\n        // creating a hashmap to store occurrence of array elements\n        for (int i = 0; i < n; i++)\n            occ[arr[i]] = true;\n\n        bool isPairFound = false;\n        // iterating through the array elements\n        for (int i = 0; i < n; i++) {\n            // if k is in the array and k is smaller than arr[i],\n            // increment ans and set isPairFound to true\n            if (occ[k] && k < arr[i]) {\n                ans++;\n                isPairFound = true;\n            }\n\n            // if arr[i] is greater than or equal to k,\n            // find divisors of (arr[i]-k) and check if any divisor exists in the\n            // hashmap\n            if (arr[i] >= k) {\n                vector<int> v = findDivisors(arr[i] - k);\n                for (int j = 0; j < v.size(); j++) {\n                    // if arr[i] modulo divisor is equal to k and arr[i] is not equal to\n                    // divisor and divisor exists in the hashmap, increment ans and set\n                    // isPairFound to true\n                    if (arr[i] % v[j] == k && arr[i] != v[j] && occ[v[j]]) {\n                        ans++;\n                        isPairFound = true;\n                    }\n                }\n                v.clear();\n            }\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n\n    // Function to find all the divisors of a number\n    public List<Integer> findDivisors(int n) {\n        List<Integer> divisors = new ArrayList<>();\n        // iterating from 1 to sqrt(n) to find divisors\n        for (int i = 1; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                // if n/i is equal to i, add only i\n                if (n / i == i) {\n                    divisors.add(i);\n                } else {\n                    divisors.add(i);\n                    divisors.add(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n\n    // Function to find the number of pairs with a given difference\n    public int printPairs(List<Integer> arr, int k) {\n        int ans = 0;\n        HashMap<Integer, Boolean> occ = new HashMap<>();\n\n        // creating a hashmap to store occurrence of array elements\n        for (int num : arr) {\n            occ.put(num, true);\n        }\n\n        boolean isPairFound = false;\n\n        // iterating through the array elements\n        for (int num : arr) {\n            // if k is in the array and k is smaller than num\n            if (occ.containsKey(k) && k < num) {\n                ans++;\n                isPairFound = true;\n            }\n\n            // if num is greater than or equal to k\n            if (num >= k) {\n                List<Integer> divisors = findDivisors(num - k);\n                for (int divisor : divisors) {\n                    // if num modulo divisor is equal to k, num is not equal to divisor\n                    // and divisor exists in the hashmap\n                    if (num % divisor == k && num != divisor &&\n                        occ.containsKey(divisor)) {\n                        ans++;\n                        isPairFound = true;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findDivisors(self, n):\n        # Function to find all the divisors of a number\n        divisors = []\n        # iterating from 1 to sqrt(n) to find divisors\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                # if n/i is equal to i, add only i\n                if n // i == i:\n                    divisors.append(i)\n                else:\n                    divisors.append(i)\n                    divisors.append(n // i)\n        return divisors\n\n    def printPairs(self, arr, k):\n        n = len(arr)\n        ans = 0\n        occ = {}\n\n        # creating a hashmap to store occurrence of array elements\n        for num in arr:\n            occ[num] = True\n\n        isPairFound = False\n\n        # iterating through the array elements\n        for num in arr:\n            # if k is in the array and k is smaller than num\n            if k in occ and k < num:\n                ans += 1\n                isPairFound = True\n\n            # if num is greater than or equal to k\n            if num >= k:\n                divisors = self.findDivisors(num - k)\n                for divisor in divisors:\n                    # if num modulo divisor is equal to k, num is not equal to divisor\n                    # and divisor exists in the hashmap\n                    if num % divisor == k and num != divisor and divisor in occ:\n                        ans += 1\n                        isPairFound = True\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find all the divisors of a number\n    findDivisors(n) {\n        let divisors = [];\n        // Iterating from 1 to sqrt(n) to find divisors\n        for (let i = 1; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) {\n                // If n/i is equal to i, add only i\n                if (n / i === i) {\n                    divisors.push(i);\n                } else {\n                    divisors.push(i);\n                    divisors.push(n / i);\n                }\n            }\n        }\n        return divisors;\n    }\n\n    // Function to find the number of pairs with a given difference\n    printPairs(arr, k) {\n        let ans = 0;\n        let occ = new Map();\n\n        // Creating a map to store occurrence of array elements\n        for (let num of arr) {\n            occ.set(num, true);\n        }\n\n        let isPairFound = false;\n\n        // Iterating through the array elements\n        for (let num of arr) {\n            // If k is in the array and k is smaller than num\n            if (occ.has(k) && k < num) {\n                ans++;\n                isPairFound = true;\n            }\n\n            // If num is greater than or equal to k\n            if (num >= k) {\n                let divisors = this.findDivisors(num - k);\n                for (let divisor of divisors) {\n                    // If num modulo divisor is equal to k, num is not equal to divisor\n                    // and divisor exists in the map\n                    if (num % divisor === k && num !== divisor && occ.has(divisor)) {\n                        ans++;\n                        isPairFound = true;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}