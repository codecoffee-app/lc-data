{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700918,
            "title": "Multimap Operations",
            "titleSlug": "multimap-operations",
            "content": "<p><span ><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">You are given an array</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: #1e2229; background-color: #ffffff; font-family: var(--gfg-font-secondary) !important;\">&nbsp;arr</span><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">. You need to&nbsp;</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: #1e2229; background-color: #ffffff; font-family: var(--gfg-font-secondary) !important;\">insert&nbsp;</span><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">the elements of&nbsp;</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: #1e2229; background-color: #ffffff; font-family: var(--gfg-font-secondary) !important;\">arr</span><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">&nbsp;into a multimap</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: #1e2229; background-color: #ffffff; font-family: var(--gfg-font-secondary) !important;\">(element as key and index as value</span><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">).&nbsp;</span><span style=\"box-sizing: border-box; line-height: 1.7em; font-family: Nunito; color: #1e2229; background-color: #ffffff;\"><span style=\"box-sizing: border-box; line-height: 1.7em;\">Also, you need to</span><span style=\"box-sizing: border-box; line-height: 1.7em; font-weight: bolder; font-family: var(--gfg-font-secondary) !important;\">&nbsp;erase a given element x</span><span style=\"box-sizing: border-box; line-height: 1.7em;\"> from the multimap and print \"</span><span style=\"box-sizing: border-box; line-height: 1.7em; font-weight: bolder; font-family: var(--gfg-font-secondary) !important;\">erased x</span><span style=\"box-sizing: border-box; line-height: 1.7em;\">\" if&nbsp;</span><span style=\"box-sizing: border-box; line-height: 1.7em; font-weight: bolder; font-family: var(--gfg-font-secondary) !important;\">successfully&nbsp;</span><span style=\"box-sizing: border-box; line-height: 1.7em;\">erased, else print \"</span><span style=\"box-sizing: border-box; line-height: 1.7em; font-weight: bolder; font-family: var(--gfg-font-secondary) !important;\">not found</span><span style=\"box-sizing: border-box; line-height: 1.7em;\">\".</span></span></span><br style=\"box-sizing: border-box; line-height: 1.7em; font-family: Nunito; font-size: 17px; color: #1e2229; background-color: #ffffff;\" /><span ><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">Complete&nbsp;</span><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; color: #1e2229; background-color: #ffffff; font-family: var(--gfg-font-secondary) !important;\">print()</span><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">&nbsp;function to print the multimap.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [9, 8, 7, 4, 4, 2, 1, 1, 9, 8], x = 1\n<strong>Output:</strong> \n1 6\n1 7\n2 5\n4 3\n4 4\n7 2\n8 1\n8 9\n9 0\n9 8\nerased 1\n2 5\n4 3\n4 4\n7 2\n8 1\n8 9\n9 0\n9 8</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 1000<br />1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr`, insert its elements into a multimap where the element is the key and its index in `arr` is the value. After creating the multimap, erase a given element `x` from it. Print \"erased x\" if the element is successfully erased, otherwise print \"not found\". Finally, print the contents of the multimap after the erasure operation.",
                "constraints": [
                    "1 <= arr.size() <= 1000",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [9, 8, 7, 4, 4, 2, 1, 1, 9, 8], x = 1",
                        "output": "1 6\n1 7\n2 5\n4 3\n4 4\n7 2\n8 1\n8 9\n9 0\n9 8\nerased x\n2 5\n4 3\n4 4\n7 2\n8 1\n8 9\n9 0\n9 8",
                        "explanation": "The initial multimap contains the element-index pairs. After erasing '1', the multimap is updated, and 'erased x' is printed to indicate a successful removal."
                    },
                    {
                        "input": "arr[] = [1, 2, 3, 4, 5], x = 6",
                        "output": "1 0\n2 1\n3 2\n4 3\n5 4\nnot found\n1 0\n2 1\n3 2\n4 3\n5 4",
                        "explanation": "The initial multimap contains the element-index pairs. Since '6' is not present, 'not found' is printed. The multimap remains unchanged."
                    },
                    {
                        "input": "arr[] = [5, 5, 5], x = 5",
                        "output": "5 0\n5 1\n5 2\nerased x\n",
                        "explanation": "The initial multimap contains multiple entries for the element '5'. All entries of '5' are erased. Only the 'erased x' is printed since multimap is empty."
                    },
                    {
                        "input": "arr[] = [], x = 1",
                        "output": "not found\n",
                        "explanation": "The array is empty. The multimap will also be empty. Hence the element 'x' cannot be found for deletion. Because the multimap is empty nothing else will be printed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">1. Concept of iteration and library method will be useful.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nmultimap<int, int> multimapInsert(vector<int>& arr) {\n    int n = arr.size();\n    multimap<int, int> mp;\n    for (int i = 0; i < n; i++)\n        mp.insert({arr[i], i}); // inserting elements in multimap\n\n    return mp;\n}\n\nvoid multimapDisplay(multimap<int, int> mp) {\n    for (auto itr = mp.begin(); itr != mp.end(); itr++) {\n        cout << itr->first << \" \" << itr->second\n             << endl; // printing elements of multimap\n    }\n    //   cout<<endl;\n}\n\nvoid multimapErase(multimap<int, int>& mp, int x) {\n    // deleteing x if present\n    if (mp.count(x) != 0) {\n        mp.erase(x);\n        cout << \"erased \" << x;\n    } else\n        cout << \"not found\";\n\n    cout << endl;\n}",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}