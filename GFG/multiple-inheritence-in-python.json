{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 879264,
            "title": "Multiple inheritence in Python",
            "titleSlug": "multiple-inheritence-in-python",
            "content": "<p><span >Implement the following classes to understand multiple inheritance in Python:</span></p>\n<ul>\n<li><span ><strong>Class Name</strong>: <code>Student</code></span>\n<ul>\n<li><span ><strong>Attributes</strong>:</span>\n<ul>\n<li><span ><code>sid</code> (int) &mdash; Student ID.</span></li>\n<li><span ><code>deptid</code> (int) &mdash; Department ID.</span></li>\n</ul>\n</li>\n<li><span ><strong>Constructor</strong>: <code>__init__(self, sid, deptid)</code> &mdash; Initializes the <code>sid</code> and <code>deptid</code> attributes.</span></li>\n<li><span ><strong>Method</strong>: <code>get_info(self)</code> &mdash; Returns a formatted string with the student ID and department ID, eg., \"StudentID:101 DepartmentID:42\"</span></li>\n</ul>\n</li>\n<li><span ><strong>Class Name</strong>: <code>Faculty</code></span>\n<ul>\n<li><span ><strong>Attributes</strong>:</span>\n<ul>\n<li><span ><code>eid</code> (int) &mdash; Employee ID.</span></li>\n<li><span ><code>deptid</code> (int) &mdash; Department ID.</span></li>\n</ul>\n</li>\n<li><span ><strong>Constructor</strong>: <code>__init__(self, eid, deptid)</code> &mdash; Initializes the <code>eid</code> and <code>deptid</code> attributes.</span></li>\n<li><span ><strong>Method</strong>: <code>get_info(self)</code> &mdash; Returns a formatted string with the employee ID and department ID, eg., \"EmployeeID:555 DepartmentID:42\"</span></li>\n</ul>\n</li>\n<li><span ><strong>Class Name</strong>: <code>PhDStudent</code> (Inherits from both <code>Student</code> and <code>Faculty</code>)</span>\n<ul>\n<li><span ><strong>Constructor</strong>: <code>__init__(self, sid, eid, deptid)</code> &mdash; Calls the constructors of <code>Student</code> and <code>Faculty</code> to initialize <code>sid</code>, <code>eid</code>, and <code>deptid</code>.</span></li>\n<li><span ><strong>Method</strong>: <code>get_info(self)</code> &mdash; Returns a formatted string with the student ID, employee ID and department ID, eg., \"Student ID:101 EmployeeID:555 DepartmentID:42\".</span></li>\n</ul>\n</li>\n</ul>\n<p><span ><strong>Example</strong>:</span></p>\n<pre><span ><strong >Input</strong><span >: </span><code >sid = 101, eid = 555, deptid = 42<br /></code><strong >Output: <br /></strong><span style=\"font-size: 18.6667px;\">StudentID:101 DepartmentID:42<br /></span><span style=\"font-size: 18.6667px;\">EmployeeID:555 DepartmentID:42<br /></span><span style=\"font-size: 18.6667px;\">Student ID:101 EmployeeID:555 DepartmentID:42</span></span></pre>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the `Student`, `Faculty`, and `PhDStudent` classes to demonstrate multiple inheritance in Python.\n\n**Class: `Student`**\n*   **Attributes:**\n    *   `sid` (int): Student ID.\n    *   `deptid` (int): Department ID.\n*   **Constructor:** `__init__(self, sid, deptid)`: Initializes `sid` and `deptid`.\n*   **Method:** `get_info(self)`: Returns a formatted string like \"StudentID:101 DepartmentID:42\".\n\n**Class: `Faculty`**\n*   **Attributes:**\n    *   `eid` (int): Employee ID.\n    *   `deptid` (int): Department ID.\n*   **Constructor:** `__init__(self, eid, deptid)`: Initializes `eid` and `deptid`.\n*   **Method:** `get_info(self)`: Returns a formatted string like \"EmployeeID:555 DepartmentID:42\".\n\n**Class: `PhDStudent`** (Inherits from `Student` and `Faculty`)\n*   **Constructor:** `__init__(self, sid, eid, deptid)`: Calls the constructors of `Student` and `Faculty` to initialize `sid`, `eid`, and `deptid`.\n*   **Method:** `get_info(self)`: Returns a formatted string like \"Student ID:101 EmployeeID:555 DepartmentID:42\".",
                "constraints": [],
                "testcases": [
                    {
                        "input": "sid = 101, eid = 555, deptid = 42\n",
                        "output": "StudentID:101 DepartmentID:42\nEmployeeID:555 DepartmentID:42\nStudent ID:101 EmployeeID:555 DepartmentID:42",
                        "explanation": "Create instances of Student, Faculty and PhDStudent with the given IDs. Calling get_info() methods should return the expected strings."
                    },
                    {
                        "input": "sid = 200, eid = 600, deptid = 10\n",
                        "output": "StudentID:200 DepartmentID:10\nEmployeeID:600 DepartmentID:10\nStudent ID:200 EmployeeID:600 DepartmentID:10",
                        "explanation": "Similar to the first testcase, create new instances with different IDs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n# Base class Student\nclass Student:\n\n    def __init__(self, sid, deptid):\n        self.sid = sid\n        self.deptid = deptid\n\n    def get_info(self):\n        return f\"StudentID:{self.sid} DepartmentID:{self.deptid}\"\n\n\n# Base class Faculty\nclass Faculty:\n\n    def __init__(self, eid, deptid):\n        self.eid = eid\n        self.deptid = deptid\n\n    def get_info(self):\n        return f\"EmployeeID:{self.eid} DepartmentID:{self.deptid}\"\n\n\n# Derived class PhDStudent that inherits from both Student and Faculty\nclass PhDStudent(Student, Faculty):\n\n    def __init__(self, sid, eid, deptid):\n        Student.__init__(self, sid, deptid)  # Initialize Student attributes\n        Faculty.__init__(self, eid, deptid)  # Initialize Faculty attributes\n\n    def get_info(self):\n        return (\n            f\"StudentID:{self.sid} EmployeeID:{self.eid} DepartmentID:{self.deptid}\"\n        )\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}