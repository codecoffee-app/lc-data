{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703382,
            "title": "Multiply by 11",
            "titleSlug": "multiply-by-111820",
            "content": "<p><span style=\"font-size:20px\">Given a number in the form of a string of length N . You have to multiply the given number by 11.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nnumber = &quot;8&quot;\n<strong>Output:</strong> 88\n<strong>Explanation</strong>: 8*11 = 88\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\">\u00e2\u20ac\u2039<strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: \nnumber = &quot;12&quot;\n<strong>Output:</strong> 132\n<strong>Explanation</strong>: 12*11 = 132\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>multiplyby11</strong><strong>()&nbsp;</strong>which accepts a string as input parameter and returns a string which should be the multiplication of &nbsp;number by 11.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;= N &lt;=10<sup>6</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number represented as a string of length N, calculate the result of multiplying this number by 11.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "8",
                        "output": "88",
                        "explanation": "8 multiplied by 11 equals 88."
                    },
                    {
                        "input": "12",
                        "output": "132",
                        "explanation": "12 multiplied by 11 equals 132."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>abc * 11 =&nbsp; &nbsp; a&nbsp; b&nbsp; c&nbsp;<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a b&nbsp; c&nbsp; 0<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;a (a + b) (b + c) (c + 0)&nbsp;<br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nstring findSum(string str1, string str2)\n{\n    // Before proceeding further, make sure length\n    // of str2 is larger.\n    if (str1.length() > str2.length())\n        swap(str1, str2);\n \n    // Take an empty string for storing result\n    string str = \"\";\n \n    // Calculate lenght of both string\n    int n1 = str1.length(), n2 = str2.length();\n \n    // Reverse both of strings\n    reverse(str1.begin(), str1.end());\n    reverse(str2.begin(), str2.end());\n \n    int carry = 0;\n    for (int i=0; i<n1; i++)\n    {\n        // Do school mathematics, compute sum of\n        // current digits and carry\n        int sum = ((str1[i]-'0')+(str2[i]-'0')+carry);\n        str.push_back(sum%10 + '0');\n \n        // Calculate carry for next step\n        carry = sum/10;\n    }\n \n    // Add remaining digits of larger number\n    for (int i=n1; i<n2; i++)\n    {\n        int sum = ((str2[i]-'0')+carry);\n        str.push_back(sum%10 + '0');\n        carry = sum/10;\n    }\n \n    // Add remaining carry\n    if (carry)\n        str.push_back(carry+'0');\n \n    // reverse resultant string\n    reverse(str.begin(), str.end());\n \n    return str;\n}\n\nstring multiplyby11(string b)\n{\n    string a = b.substr (0,b.length()-1);\n    string ans = findSum(b,a);\n    ans+=b[b.length()-1];\n    return ans;\n}\n\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n#Function to find the sum of two strings representing numbers.\nclass Solution:\n    def findSum(self, a, b):\n        a=a[-1::-1]   #Reverse the string a\n        b=b[-1::-1]   #Reverse the string b\n        carry=0   #Initialize carry as 0\n        ans=''   #Initialize an empty string to store the result\n        for i in range(max(len(a),len(b))):  #Iterate through the indices of the longer string\n            y=carry   #Set y as carry\n            if i<len(a):   \n                y+=int(a[i])   #Add the digit of a at index i to y\n            if i<len(b):    \n                y+=int(b[i])   #Add the digit of b at index i to y\n            carry=y//10   #Divide y by 10 to get carry\n            y%=10   #Get the remainder after dividing y by 10\n            ans+=str(y)   #Add y to the result string\n        if carry>0:\n            ans+=str(carry)   #If there is a remaining carry, add it to the result string\n        return ans[-1::-1]   #Reverse the result string and return it as the sum\n        \n    #Function to multiply a number by 11.\n    def multiplyby11(self, number):   \n        num10 = number+\"0\"   #Multiply the number by 10 by appending a 0 to it\n        return self.findSum(number,num10)   #Return the sum of the number and the number*10",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}