{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703468,
            "title": "Multiply left and right array sum",
            "titleSlug": "multiply-left-and-right-array-sum1555",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array of integers, your task is to divide the array into two sub-arrays (left and right) containing half of the array elements. Find the sum of the subarrays and then return the multiply of both the subarrays.</span></p>\n<p><span style=\"font-size: 18px;\"><strong><em>Note:</em> </strong>If the length of the array is odd then the right&nbsp;half will contain one element more than the left half.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr = [1, 2, 3, 4]\n<strong>Output :</strong> 21\n<strong>Explanation: </strong>Sum up an array from index 0 to 1 = 3, Sum up an array from index 2 to 3 = 7. Their multiplication is <strong>21</strong>.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr = [1, 2] <strong>\nOutput :</strong>  2 </span><br /><span style=\"font-size: 18px;\"><strong>Explanation: </strong>Their multiplication is 1*2 is equal to <strong>2</strong>.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).<br /></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 1000<br />1 &le; arr[i] &le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, divide it into two sub-arrays, a left and a right sub-array. The left sub-array should contain half of the original array's elements. The right sub-array will contain the remaining elements. If the original array has an odd number of elements, the right sub-array should contain one more element than the left sub-array. Calculate the sum of each sub-array and return the product of these two sums.",
                "constraints": [
                    "1 <= arr.size() <= 1000",
                    "1 <= arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4]",
                        "output": "21",
                        "explanation": "The left sub-array is [1, 2] with a sum of 3. The right sub-array is [3, 4] with a sum of 7. The product of the sums is 3 * 7 = 21."
                    },
                    {
                        "input": "[1, 2]",
                        "output": "2",
                        "explanation": "The left sub-array is [1] with a sum of 1. The right sub-array is [2] with a sum of 2. The product of the sums is 1 * 2 = 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Just sum the first n/2 element and then sum up the remaining n/2 elements and then multiply both the sum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//  Function to multiply the sum of first half of the array with the sum of second half\n//  of the array\nclass Solution {\n  public:\n    int multiply(vector<int> &arr) {\n        int sum1 = 0, sum2 = 0;\n        int n = arr.size();\n        // calculating the sum of first half of the array\n        for (int i = 0; i < n / 2; i++)\n            sum1 = sum1 + arr[i];\n\n        // calculating the sum of second half of the array\n        for (int i = n / 2; i < n; i++)\n            sum2 = sum2 + arr[i];\n\n        // multiplying the two sums together\n        int ans = sum1 * sum2;\n\n        // returning the result\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public int multiply(int[] arr) {\n        int sum1 = 0, sum2 = 0;\n        int n = arr.length;\n        // Calculating sum of first half of the array\n        for (int i = 0; i < n / 2; i++) {\n            sum1 += arr[i];\n        }\n        // Calculating sum of second half of the array\n        for (int i = n / 2; i < n; i++) {\n            sum2 += arr[i];\n        }\n        // Returning the product of the sum of first and second half of array\n        return sum1 * sum2;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def multiply(self, arr):\n        sum1, sum2 = 0, 0\n        n = len(arr)\n\n        for i in range(n // 2):\n            sum1 += arr[i]\n\n        for i in range(n // 2, n):\n            sum2 += arr[i]\n\n        return sum1 * sum2\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    multiply(arr) {\n        let sum1 = 0, sum2 = 0;\n        const n = arr.length;\n\n        for (let i = 0; i < Math.floor(n / 2); i++) {\n            sum1 += arr[i];\n        }\n\n        for (let i = Math.floor(n / 2); i < n; i++) {\n            sum2 += arr[i];\n        }\n\n        return sum1 * sum2;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}