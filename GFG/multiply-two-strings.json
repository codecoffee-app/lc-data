{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700383,
            "title": "Multiply two strings",
            "titleSlug": "multiply-two-strings",
            "content": "<p><span >Given two numbers as strings <strong>s1</strong> and <strong>s2</strong>. Calculate their Product.<br /><strong>Note:</strong> The numbers can be negative and<strong>&nbsp;</strong>You are not allowed to use any built-in function or convert the strings to integers. There can be zeros in the begining of the numbers. You don't need to specify '+' sign in the begining of positive numbers.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s1 = \"0033\", s2 = \"2\"\n<strong>Output: </strong>\"66\"<br /><strong>Explanation</strong>: 33 * 2 = 66</span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"11\", s2 = \"23\"\n<strong>Output: </strong>\"253\"<br /><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: 11 * 23  = 253</span></span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"123\", s2 = \"0\"\n<strong>Output: </strong>\"0\"<br /></span><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: Anything multiplied by 0 is equal to 0.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; s1.size(), s2.size() &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two numbers represented as strings, `s1` and `s2`, calculate their product.  You are not allowed to use any built-in multiplication functions or convert the strings directly to integers. Leading zeros are permitted. Do not explicitly include '+' signs for positive numbers. The numbers can be negative.",
                "constraints": [
                    "1 <= s1.size() <= 10^3",
                    "1 <= s2.size() <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "s1 = \"0033\", s2 = \"2\"",
                        "output": "\"66\"",
                        "explanation": "The product of 33 and 2 is 66."
                    },
                    {
                        "input": "s1 = \"11\", s2 = \"23\"",
                        "output": "\"253\"",
                        "explanation": "The product of 11 and 23 is 253."
                    },
                    {
                        "input": "s1 = \"123\", s2 = \"0\"",
                        "output": "\"0\"",
                        "explanation": "Any number multiplied by 0 equals 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The idea is based on school mathematics.<br />\n<a href=\"https://media.geeksforgeeks.org/wp-content/uploads/schoolMultiply.jpg\"><img alt=\"multiplication\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/schoolMultiply.jpg\" style=\"height:261px; width:656px\" /></a></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "samsung",
            "adobe",
            "google",
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string multiplyStrings(string num1, string num2) {\n        int nn = 1, mm = 1;\n        if (num1[0] == '-') {\n            nn = -1;\n        }\n        if (num2[0] == '-') {\n            mm = -1;\n        }\n\n        int mul = nn * mm;\n        int n1 = num1.size();\n        int n2 = num2.size();\n        if (n1 == 0 || n2 == 0)\n            return \"0\";\n\n        // will keep the result number in vector in reverse order\n        vector<int> result(n1 + n2, 0);\n\n        int i_n1 = 0; // index by num1\n        int i_n2 = 0; // index by num2\n\n        // go from right to left by num1\n        for (int i = n1 - 1; i >= 0; i--) {\n            if (num1[i] == '-')\n                continue;\n            int carrier = 0;\n            int n1 = num1[i] - '0';\n            i_n2 = 0;\n\n            // go from right to left by num2\n            for (int j = n2 - 1; j >= 0; j--) {\n                if (num2[j] == '-')\n                    continue;\n                int n2 = num2[j] - '0';\n\n                int sum = n1 * n2 + result[i_n1 + i_n2] + carrier;\n                carrier = sum / 10;\n                result[i_n1 + i_n2] = sum % 10;\n\n                i_n2++;\n            }\n\n            // store carrier in next cell\n            if (carrier > 0)\n                result[i_n1 + i_n2] += carrier;\n\n            i_n1++;\n        }\n\n        // ignore '0's from the right\n        int i = result.size() - 1;\n        while (i >= 0 && result[i] == 0)\n            i--;\n\n        // if all were '0's - means either both or one of num1 or num2 were '0'\n        if (i == -1)\n            return \"0\";\n\n        // generate the result string\n        string s = \"\";\n        string p;\n\n        while (i >= 0)\n            s += std::to_string(result[i--]);\n        if (mul == -1) {\n            p = \"-\";\n            p.append(s);\n        } else\n            p.append(s);\n        return p;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\nclass Solution \r\n{\r\n    public String multiplyStrings(String num1,String num2)\r\n    {\r\n          int nn=1,mm=1;  \r\n          if(num1.charAt(0)=='-')\r\n               nn=-1; \r\n          if(num2.charAt(0)=='-')\r\n               mm=-1; \r\n          \r\n            int mul= nn*mm;\r\n            int n1 = num1.length();\r\n            int n2 = num2.length();\r\n            if (n1 == 0 || n2 == 0)     return \"0\";\r\n \r\n            // will keep the result number in ArrayList in reverse order\r\n           \r\n            int result[] = new int[n1 + n2];\r\n            for(int ii = 0 ;ii<n1 + n2;ii++)\r\n                result[ii] = 0;\r\n \r\n            int i_n1 = 0; // index by num1\r\n            int i_n2 = 0; // index by num2\r\n \r\n            // go from right to left by num1\r\n            for (int i = n1 - 1; i >= 0; i--)\r\n            {\r\n                if(num1.charAt(i)=='-')\r\n                  continue;\r\n                int carrier = 0;\r\n                int no1 = Integer.parseInt(String.valueOf(num1.charAt(i)));\r\n                i_n2 = 0;\r\n                \r\n                // go from right to left by num2\r\n               \r\n                for (int j = n2 - 1; j >= 0; j--)\r\n                {\r\n                    //System.out.println(j);\r\n                    if(num2.charAt(j)=='-')\r\n                       continue;\r\n                   int no2 = Integer.parseInt(String.valueOf(num2.charAt(j))); \r\n                    \r\n \r\n                    int sum = no1 * no2 + result[i_n1 + i_n2] + carrier;\r\n                    \r\n                    carrier = sum / 10;\r\n                    result[i_n1 + i_n2] = sum % 10;\r\n                    \r\n                    i_n2++;\r\n                }\r\n \r\n                // store carrier in next cell\r\n                if (carrier > 0)\r\n                {\r\n                     result[i_n1 + i_n2] += carrier;\r\n                }\r\n \r\n                i_n1++;\r\n            }\r\n        \r\n        \r\n            \r\n            int i = n1 + n2 - 1;\r\n            while (i>=0 && result[i] == 0) i--;\r\n \r\n            // if all were '0's - means either both or one of num1 or num2 were '0'\r\n            if(i == -1) return \"0\";\r\n \r\n            // generate the result string\r\n            StringBuffer s = new StringBuffer(\"\");\r\n            StringBuffer p = new StringBuffer(\"\");\r\n            \r\n            while (i >= 0)\r\n                {\r\n                    s.append( Integer.toString(result[i] ) );\r\n                    i--;\r\n                }\r\n            if(mul==-1)\r\n            { \r\n                p.append(\"-\"); \r\n                p.append(s); \r\n                \r\n            }\r\n            else\r\n              p.append(s);\r\n            \r\n            return p.toString();\r\n\r\n \r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to multiply two strings\n    def multiplyStrings(self, a, b):\n        # Checking if either of the strings is zero\n        if a == '0' or b == '0':\n            return '0'\n\n        # Setting a variable to keep track of the sign of the product\n        negative = False\n        # Checking if the first string is negative\n        if a[0] == '-':\n            negative = not negative\n            a = a[1:]\n\n        # Checking if the second string is negative\n        if b[0] == '-':\n            negative = not negative\n            b = b[1:]\n\n        # Initializing a list to store the product\n        product = [0 for _ in range(len(a) + len(b))]\n\n        # Multiplying each digit of the second string with each digit of the first string\n        for i in range(len(b) - 1, -1, -1):\n            digit1 = int(b[i])\n            carry = 0\n\n            # Iterating over each digit of the first string\n            for j in range(len(a) - 1, -1, -1):\n                digit2 = int(a[j])\n\n                # Adding the product of the digits with the carry\n                product[i + j + 1] += digit1 * digit2 + carry\n                carry = product[i + j + 1] // 10\n                product[i + j + 1] = product[i + j + 1] % 10\n\n            # Handling any remaining carry\n            nextIndex = i\n            while carry:\n                product[nextIndex] += carry\n                carry = product[nextIndex] // 10\n                product[nextIndex] = product[nextIndex] % 10\n                nextIndex -= 1\n\n        # Converting the product list to a string\n        res = ''.join(str(x) for x in product)\n\n        # Removing leading zeroes from the product\n        zeroes = 0\n        while zeroes < len(res) - 1 and res[zeroes] == '0':\n            zeroes += 1\n        res = res[zeroes:]\n\n        # Adding the negative sign if necessary\n        if negative and res != \"0\":\n            res = '-' + res\n\n        # Returning the final product\n        return res\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    public string multiplyStrings(string num1, string num2) {\n        int nn = 1, mm = 1;\n        if (num1[0] == '-') nn = -1;\n        if (num2[0] == '-') mm = -1;\n\n        int mul = nn * mm;\n        int n1 = num1.Length;\n        int n2 = num2.Length;\n        if (n1 == 0 || n2 == 0) return \"0\";\n\n        List<int> result = new List<int>(new int[n1 + n2]);\n\n        int i_n1 = 0; // index by num1\n        int i_n2 = 0; // index by num2\n\n        // go from right to left by num1\n        for (int i = n1 - 1; i >= 0; i--) {\n            if (num1[i] == '-') continue;\n            int carrier = 0;\n            int n1Digit = num1[i] - '0';\n\n            // go from right to left by num2\n            i_n2 = 0;\n            for (int j = n2 - 1; j >= 0; j--) {\n                if (num2[j] == '-') continue;\n                int n2Digit = num2[j] - '0';\n\n                int sum = n1Digit * n2Digit + result[i_n1 + i_n2] + carrier;\n                carrier = sum / 10;\n                result[i_n1 + i_n2] = sum % 10;\n\n                i_n2++;\n            }\n\n            // store carrier in next cell\n            if (carrier > 0) result[i_n1 + i_n2] += carrier;\n\n            i_n1++;\n        }\n\n        // ignore '0's from the right\n        int idx = result.Count - 1;\n        while (idx >= 0 && result[idx] == 0) idx--;\n\n        // if all were '0's - means either both or one of num1 or num2 were '0'\n        if (idx == -1) return \"0\";\n\n        // generate the result string\n        StringBuilder sb = new StringBuilder();\n        if (mul == -1) sb.Append(\"-\");\n\n        while (idx >= 0) sb.Append(result[idx--]);\n\n        return sb.ToString();\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    multiplyStrings(num1, num2) {\n        let nn = 1, mm = 1;\n        if (num1[0] == '-') nn = -1;\n        if (num2[0] == '-') mm = -1;\n\n        let mul = nn * mm;\n        let n1 = num1.length;\n        let n2 = num2.length;\n        if (n1 === 0 || n2 === 0) return \"0\";\n\n        // will keep the result number in ArrayList in reverse order\n\n        let result = new Array(n1 + n2);\n        for (let ii = 0; ii < n1 + n2; ii++) result[ii] = 0;\n\n        let i_n1 = 0; // index by num1\n        let i_n2 = 0; // index by num2\n\n        // go from right to left by num1\n        for (let i = n1 - 1; i >= 0; i--) {\n            if (num1[i] == '-') continue;\n            let carrier = 0;\n            let no1 = parseInt(num1[i]);\n            i_n2 = 0;\n\n            // go from right to left by num2\n\n            for (let j = n2 - 1; j >= 0; j--) {\n                // System.out.println(j);\n                if (num2[j] == '-') continue;\n                let no2 = parseInt(num2[j]);\n\n                let sum = no1 * no2 + result[i_n1 + i_n2] + carrier;\n\n                carrier = Math.floor(sum / 10);\n                result[i_n1 + i_n2] = sum % 10;\n\n                i_n2++;\n            }\n\n            // store carrier in next cell\n            if (carrier > 0) {\n                result[i_n1 + i_n2] += carrier;\n            }\n\n            i_n1++;\n        }\n\n        let i = n1 + n2 - 1;\n        while (i >= 0 && result[i] === 0) i--;\n\n        // if all were '0's - means either both or one of num1 or num2 were '0'\n        if (i == -1) return \"0\";\n\n        // generate the result string\n        let s = \"\";\n        let p = \"\";\n\n        while (i >= 0) {\n            s += result[i].toString();\n            i--;\n        }\n        if (mul == -1) {\n            p += (\"-\");\n            p += (s);\n\n        } else\n            p += (s);\n\n        return p.toString();\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}