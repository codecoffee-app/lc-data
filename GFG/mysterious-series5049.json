{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705262,
            "title": "Mysterious Series",
            "titleSlug": "mysterious-series5049",
            "content": "<p><span style=\"font-size:18px\">Find the Nth term of the Mysterious series.<br />\nN&nbsp;&nbsp; &nbsp;Nth term<br />\n1&nbsp;&nbsp; &nbsp;5<br />\n2&nbsp;&nbsp; &nbsp;10<br />\n3&nbsp;&nbsp; &nbsp;26<br />\n4&nbsp;&nbsp; &nbsp;50<br />\n5&nbsp;&nbsp; &nbsp;122<br />\n.<br />\n.<br />\n.<br />\n10&nbsp;&nbsp; &nbsp;842</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: N = 1\n<strong>Output:</strong>&nbsp;5&nbsp;\n<strong>Explanation</strong>: First term of the series is 5.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 2\n<strong>Output:&nbsp;</strong>10\n<strong>Explanation</strong>: Second term of the series is 10. \n\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>nthMysterious()&nbsp;</strong>which takes N&nbsp;as input parameter and returns the Nth term of the Mysterious series.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(nlogn)<br />\n<strong>Expected Auxiliary Space:</strong> O(n)<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;= N&nbsp;&lt;=10<sup>3</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Find the Nth term of the Mysterious series. The series follows a specific pattern as shown in the examples.",
                "constraints": [
                    "1 <= N <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "5",
                        "explanation": "The first term of the series is 5."
                    },
                    {
                        "input": "2",
                        "output": "10",
                        "explanation": "The second term of the series is 10."
                    },
                    {
                        "input": "3",
                        "output": "26",
                        "explanation": "null"
                    },
                    {
                        "input": "4",
                        "output": "50",
                        "explanation": "null"
                    },
                    {
                        "input": "5",
                        "output": "122",
                        "explanation": "null"
                    },
                    {
                        "input": "10",
                        "output": "842",
                        "explanation": "null"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use seive.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "series",
                "slug": "series"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n//Array to store prime numbers and a counter variable for indexing\nlong long  ans[100001],k=1;\n//Boolean array to mark non-prime numbers\nbool prime[100001];\n\n//Function to generate prime numbers up to n using the sieve of Eratosthenes algorithm\nvoid sieve(long long  n){\n    //Setting all elements in the prime array to true initially\n    memset(prime, true, sizeof(prime));\n    \n    //Iterating through each prime number starting from 2\n    for(long long  p=2;p*p<=n;p++)\n        //If the current number is prime\n        if(prime[p]==true)\n            //Marking all multiples of the current number as non-prime\n            for(long long  i=p*p;i<=n;i+=p)\n                prime[i] = false;\n    \n    //Storing all the prime numbers in the ans array\n    for(long long  p=2;p<=n;p++)\n        //If the current number is prime\n        if(prime[p])\n            //Storing it in the ans array and incrementing the counter\n            ans[k++]=p;\n}\n\n//Function to find the Nth mysterious number\nlong long nthMysterious(long long N){\n    //Generating prime numbers up to 100000\n    sieve(100000);\n    \n    //Returning the square of the Nth prime number + 1\n    return ans[N]*ans[N]+1;\n}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution\n{\n    //Array to store prime numbers and a counter variable for indexing\n    long[] ans = new long[100001];\n    long k = 1;\n    //Boolean array to mark non-prime numbers\n    bool[] prime = new bool[100001];\n\n    //Function to generate prime numbers up to n using the sieve of Eratosthenes algorithm\n    void Sieve(long n)\n    {\n        //Setting all elements in the prime array to true initially\n        Array.Fill(prime, true);\n\n        //Iterating through each prime number starting from 2\n        for (long p = 2; p * p <= n; p++)\n        {\n            //If the current number is prime\n            if (prime[p] == true)\n            {\n                //Marking all multiples of the current number as non-prime\n                for (long i = p * p; i <= n; i += p)\n                    prime[i] = false;\n            }\n        }\n\n        //Storing all the prime numbers in the ans array\n        for (long p = 2; p <= n; p++)\n        {\n            //If the current number is prime\n            if (prime[p])\n            {\n                //Storing it in the ans array and incrementing the counter\n                ans[k++] = p;\n            }\n        }\n    }\n\n    //Function to find the Nth mysterious number\n    public long nthMysterious(long N)\n    {\n        //Generating prime numbers up to 100000\n        Sieve(100000);\n\n        //Returning the square of the Nth prime number + 1\n        return ans[N] * ans[N] + 1;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}