{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704744,
            "title": "N Digit numbers with digits in increasing order",
            "titleSlug": "n-digit-numbers-with-digits-in-increasing-order5903",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer <strong>n</strong>, print all the <strong>n</strong> digit numbers in increasing order, such that their digits are in strictly increasing order(from left to right).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 1</span>\n<span style=\"font-size: 18px;\"><strong>Output:\n</strong>0 1 2 3 4 5 6 7 8 9</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:\n</strong>Single digit numbers are considered to be \nstrictly increasing order.\n</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:\n</span></strong><span style=\"font-size: 18px;\">n = 2</span>\n<strong><span style=\"font-size: 18px;\">Output:\n</span></strong><span style=\"font-size: 18px;\">12 13 14 15 16 17 18 19 23....79 89</span>\n<strong><span style=\"font-size: 18px;\">Explanation:\n</span></strong><span style=\"font-size: 18px;\">For n = 2, the correct sequence is\n12 13 14 15 16 17 18 19 23 and so on \nup to 89.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>increasingNumbers</strong>() which takes an integer n as an input parameter and returns the list of numbers such that their digits are in strictly increasing order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(9<sup>n</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 9</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n`, find all `n`-digit numbers in increasing order, where the digits are strictly increasing from left to right. For example, a number like 1234 satisfies this condition, while 1223 or 321 do not.",
                "constraints": [
                    "1 <= n <= 9"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "0 1 2 3 4 5 6 7 8 9",
                        "explanation": "Single-digit numbers are considered to be in strictly increasing order."
                    },
                    {
                        "input": "2",
                        "output": "12 13 14 15 16 17 18 19 23 24 25 26 27 28 29 34 35 36 37 38 39 45 46 47 48 49 56 57 58 59 67 68 69 78 79 89",
                        "explanation": "For n = 2, the sequence includes numbers like 12, 13, ..., 19, then 23, and so on, up to 89. Each digit is strictly greater than the digit to its left."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Try to generate only the increasing order number by digits of a number.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "abco"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// User function Template for C++\nclass Solution {\n  public:\n    // Function to print all n-digit numbers whose digits\n    // are strictly increasing from left to right.\n    // out --> Stores current output number as string\n    // start --> Current starting digit to be considered\n    void findStrictlyIncreasingNum(int start, string out, int n, vector<int>& ans) {\n        // If number becomes N-digit, print it\n        if (n == 0) {\n            ans.push_back(stoi(out));\n            return;\n        }\n\n        // start from (prev digit + 1) till 9\n        for (int i = start; i <= 9; i++) {\n            // append current digit to number\n            string str = out + to_string(i);\n\n            // recurse for next digit\n            findStrictlyIncreasingNum(i + 1, str, n - 1, ans);\n        }\n    }\n\n    vector<int> increasingNumbers(int N) {\n        vector<int> ans;\n        findStrictlyIncreasingNum(0, \"\", N, ans);\n        vector<int> ret;\n\n        for (auto num : ans) {\n            if (to_string(num).size() == N) {\n                ret.push_back(num);\n            }\n        }\n        return ret;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// import java.util.ArrayList;\n\nclass Solution {\n    public static ArrayList<Integer> increasingNumbers(int n) {\n        ArrayList<Integer> ans = new ArrayList<>();\n        findStrictlyIncreasingNum(0, \"\", n, ans);\n        ArrayList<Integer> ret = new ArrayList<>();\n\n        for (int num : ans) {\n            if (String.valueOf(num).length() == n) {\n                ret.add(num);\n            }\n        }\n        return ret;\n    }\n\n    private static void findStrictlyIncreasingNum(int start, String out, int n,\n                                                  ArrayList<Integer> ans) {\n        if (n == 0) {\n            ans.add(Integer.parseInt(out));\n            return;\n        }\n\n        for (int i = start; i <= 9; i++) {\n            findStrictlyIncreasingNum(i + 1, out + i, n - 1, ans);\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def findStrictlyIncreasingNum(self, start, out, n, ans):\n        if n == 0:\n            ans.append(int(out))\n            return\n\n        for i in range(start, 10):\n            self.findStrictlyIncreasingNum(i + 1, out + str(i), n - 1, ans)\n\n    def increasingNumbers(self, N):\n        ans = []\n        self.findStrictlyIncreasingNum(0, \"\", N, ans)\n\n        ret = []\n        for num in ans:\n            if len(str(num)) == N:\n                ret.append(num)\n        return ret\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findStrictlyIncreasingNum(start, out, n, ans) {\n        if (n === 0) {\n            ans.push(parseInt(out));\n            return;\n        }\n\n        for (let i = start; i <= 9; i++) {\n            this.findStrictlyIncreasingNum(i + 1, out + i, n - 1, ans);\n        }\n    }\n\n    increasingNumbers(N) {\n        let ans = [];\n        this.findStrictlyIncreasingNum(0, \"\", N, ans);\n        let ret = [];\n\n        for (let num of ans) {\n            if (String(num).length === N) {\n                ret.push(num);\n            }\n        }\n        return ret;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}