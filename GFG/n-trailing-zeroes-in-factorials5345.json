{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704713,
            "title": "N trailing zeroes in factorials",
            "titleSlug": "n-trailing-zeroes-in-factorials5345",
            "content": "<p><span style=\"font-size:18px\">Given an integer n, find the number of positive integers whose factorial ends with n zeros. </span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:\nN = 1\n<strong>Output:</strong>&nbsp;5\n<strong>Explanation</strong>:\n5! = 120, 6! = 720, 7! = 5040, \n8! = 40320 and 9! = 362880.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\n<strong>Output: </strong>0\n</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>countZeroes()</strong>&nbsp;which takes the integer N as input parameters and returns the count of positive numbers whose factorial ends with N zeros.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(log(n))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=N&lt;=1000</span><br />\n&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, determine the number of positive integers whose factorial ends with exactly N zeros.",
                "constraints": [
                    "1 <= N <= 1000"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "5",
                        "explanation": "The factorials of 5, 6, 7, 8, and 9 all end with exactly one zero.  5! = 120, 6! = 720, 7! = 5040, 8! = 40320, 9! = 362880."
                    },
                    {
                        "input": "5",
                        "output": "0",
                        "explanation": "There is no integer whose factorial ends with exactly 5 zeros."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use binary search for all the numbers in the range and get the first number with n trailing zeros. Find all the numbers with n&nbsp;trailing zeros after that number.</p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "factorial",
                "slug": "factorial"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Function to count the trailing zeroes in a number\nint trailingZeroes(int n)\n{\n    int cnt = 0;\n    while (n > 0) {\n        n /= 5;\n        cnt += n;\n    }\n    return cnt;\n}\n\n// Function to perform binary search on the range of numbers to find the\n// first number that has 'n' trailing zeroes\nint binarySearch(int n)\n{\n    int low = 0;\n    int high = 1e9;\n\n    // Binary search loop\n    while (low < high) {\n        int mid = (low + high) / 2;\n        int count = trailingZeroes(mid);\n\n        // If the trailing zeroes of mid is less than 'n', update the lower bound\n        // Else, update the upper bound\n        if (count < n)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n\n    int ans = 0;\n    \n    // Count the numbers with 'n' trailing zeroes from the lower bound\n    while (trailingZeroes(low) == n) {\n        ans ++;\n        low++;\n    }\n    return ans;\n}\n\n// Function to count the number of zeroes in a given range\nint countZeroes(int n)\n{\n    return binarySearch(n);\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution {\npublic:\n    // Function to count trailing zeroes in a number\n    int trailingZeroes(int n)\n    {\n    \tint cnt = 0;\n    \twhile (n > 0) {\n    \t\tn /= 5;\n    \t\tcnt += n;\n    \t}\n    \treturn cnt;\n    }\n    \n    // Function to perform binary search\n    int binarySearch(int n)\n    {\n    \tint low = 0;\n    \tint high = 1e9; \n    \n    \twhile (low < high) {\n    \t\tint mid = (low + high) / 2;\n    \t\tint count = trailingZeroes(mid);\n    \t\t\n    \t\t// Updating low and high based on the count of trailing zeroes\n    \t\tif (count < n)\n    \t\t\tlow = mid + 1;\n    \t\telse\n    \t\t\thigh = mid;\n    \t}\n    \n    \tint ans = 0;\n    \t\n    \t// Counting the number of integers with n trailing zeroes\n    \twhile (trailingZeroes(low) == n) {\n    \t\tans ++;\n    \t\tlow++;\n    \t}\n    \treturn ans;\n    }\n    \n    // Function to count zeroes\n    int countZeroes(int n){\n        return binarySearch(n);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Function to count trailing zeroes in a number\n    int trailingZeroes(int n)\n    {\n        int cnt = 0;\n        while (n > 0) {\n            n /= 5;\n            cnt += n;\n        }\n        return cnt;\n    }\n\n    // Function to perform binary search\n    int binarySearch(int n)\n    {\n        int low = 0;\n        int high = (int)1e9; // Explicitly cast to int to avoid type conversion error\n\n        while (low < high) {\n            int mid = (low + high) / 2;\n            int count = trailingZeroes(mid);\n            \n            // Updating low and high based on the count of trailing zeroes\n            if (count < n)\n                low = mid + 1;\n            else\n                high = mid;\n        }\n\n        int ans = 0;\n        \n        // Counting the number of integers with n trailing zeroes\n        while (trailingZeroes(low) == n) {\n            ans++;\n            low++;\n        }\n        return ans;\n    }\n    \n    // Function to count zeroes\n    public int countZeroes(int n){\n        return binarySearch(n);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}