{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701278,
            "title": "Naive Pattern Search",
            "titleSlug": "naive-pattern-search-1587115620",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>S</strong> and a pattern <strong>P</strong> both of lowercase characters. The task is to check if the given pattern exists in the given string or not. </span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>S = aabaacaadaabaaabaa\nP = aaba\n<strong>Output: </strong>Yes<strong>\nExplanation: </strong>Given pattern aaba is found\nin the string at index 0.</span>\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></pre>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>S = aabaacaadaabaaabaa\nP = ccda\n<strong>Output: </strong>No<strong>\nExplanation: </strong>Given pattern ccda doesn&#39;t\nexists in the string at all.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nThe task is to complete the function <strong>search</strong>() which finds the pattern in the given string. The function takes pattern and string as parameters and returns either<strong> true or false</strong>. Return true if pattern exists else return false.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N*M).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).<br />\nNote: N = |S|, M = |P|.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= |S|, |P| &lt;= 10<sup>3</sup></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\n\nclass Solution\n{\n    public:\n    //Function to check if the given pattern exists in the given string or not.\n    bool search(string pat, string txt) \n    { \n    \tint M = pat.length(); \n    \tint N = txt.length(); \n    \n    \t//iterating over given text to search for pattern.\n    \tfor (int i = 0; i <= N - M; i++) \n    \t{ \n    \t\tint j; \n    \n    \t\t//checking for pattern from current index i in the text. \n    \t\t//if any character, differs we break the loop.\n    \t\tfor (j = 0; j < M; j++) \n    \t\t\tif (txt[i + j] != pat[j]) \n    \t\t\t\tbreak; \n            //if loop is not broken it means that we found the\n            //pattern so we return true.\n    \t\tif (j == M)\n    \t\t\treturn true; \n    \t}\n    \t//returning false if pattern is not found.\n    \treturn false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution\n{\n    //Function to check if the given pattern exists in the given string or not.\n    static boolean search(String pat, String txt)\n    {\n        int M = pat.length(); \n        int N = txt.length(); \n\n        //iterating over given text to search for pattern.\n        for (int i = 0; i <= N - M; i++) \n        { \n\t        int j; \n\n\t        //checking for pattern from current index i in the text. \n    \t\t//if any character, differs we break the loop.\n\t        for (j = 0; j < M; j++) \n\t\t        if (txt.charAt(i + j) != pat.charAt(j)) \n\t\t\t        break; \n\t\t\t        \n            //if loop is not broken it means that we found the\n            //pattern so we return true.\n\t        if (j == M) \n\t\t        return true; \n            }\n\t    //returning false if pattern is not found.\n\t    return false;\n    }\n    \n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\n#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    \n    #Function to check if the given pattern exists in the given string or not.\n    def search(self,p,s):\n        m=len(p)\n        n=len(s)\n        \n        #iterating over given text to search for pattern.\n        for i in range(n-m+1):\n            j=0\n            \n            #checking for pattern from current index i in the text. \n    \t\t#if any character, differs we break the loop.\n            while(j<m):\n                if(s[i+j]!=p[j]):\n                    break\n                j+=1\n                \n            #if loop is not broken it means that we found the\n            #pattern so we return true.\n            if(j==m):\n                return True\n                \n        #returning false if pattern is not found.\n        return False",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {string} pat\n * @param {string} txt\n * @returns {Boolean}\n*/\n\nclass Solution\n{\n    //Function to check if the given pattern exists in the given string or not.\n    search(pat, txt)\n    {\n        let M = pat.length; \n    \tlet N = txt.length\n    \t\n    \t//iterating over given text to search for pattern.\n    \tfor (let i = 0; i <= N - M; i++)\n    \t{ \n    \t\tlet j; \n        \n    \t\t//checking for pattern from current index i in the text. \n    \t\t//if any character, differs we break the loop.\n    \t\tfor (j = 0; j < M; j++) \n    \t\t\tif (txt[i + j] != pat[j]) \n    \t\t\t{\n    \t\t\t\tbreak; \n    \t\t\t}\n    \t\t\n    \t\t//if loop is not broken it means that we found the\n            //pattern so we return true.\n    \t\tif (j == M) \n    \t\t\treturn true; \n    \t}\n    \t//returning false if pattern is not found.\n    \treturn false;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n    {\n        //Complete this function\n        //Function to check if the given pattern exists in the given string or not.\n        public bool search(string pat, string txt)\n        {\n            int M = pat.Length; \n            int N = txt.Length; \n    \n            //iterating over given text to search for pattern.\n            for (int i = 0; i <= N - M; i++) \n            { \n                int j; \n    \n                //checking for pattern from current index i in the text. \n                //if any character, differs we break the loop.\n                for (j = 0; j < M; j++) \n                    if (txt[i + j] != pat[j]) \n                        break; \n                //if loop is not broken it means that we found the\n                //pattern so we return true.\n                if (j == M)\n                    return true; \n            }\n            //returning false if pattern is not found.\n            return false;\n        }\n    }",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}