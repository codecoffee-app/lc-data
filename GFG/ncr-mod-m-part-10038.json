{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705581,
            "title": "nCr mod M | Part 1",
            "titleSlug": "ncr-mod-m-part-10038",
            "content": "<p><span style=\"font-size:18px\">Given 2&nbsp;integers n and r. You task is to calculate <sup>n</sup>C</span><span style=\"font-size:15px\">r</span><span style=\"font-size:18px\">%1000003.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<strong><span style=\"font-size:18px\">Input: </span></strong><span style=\"font-size:18px\">n = 5, r = 2\n<strong>Output: </strong>10\n<strong>Explanation: </strong><sup>5</sup>C2 = 5! / (2! * 3!) = 10</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 3, r = 2\n<strong>Output: </strong>3\n<strong>Explanation: </strong><sup>3</sup>C2 = 3! / (2! * 1!) = 3</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>nCr()&nbsp;</strong>which takes n and r as input parameter and returns nCr modulo 1000003.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(m&nbsp;* log<sub>m</sub>n) where m = 1000003<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(m)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= n &lt;= r &lt;= 10<sup>16</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, `n` and `r`, calculate <sup>n</sup>C<sub>r</sub> % 1000003, which represents the binomial coefficient 'n choose r' modulo 1000003.",
                "constraints": [
                    "1 <= n <= r <= 10<sup>16</sup>"
                ],
                "testcases": [
                    {
                        "input": "n = 5, r = 2",
                        "output": "10",
                        "explanation": "<sup>5</sup>C<sub>2</sub> = 5! / (2! * 3!) = (5 * 4) / (2 * 1) = 10. Therefore, 10 % 1000003 = 10"
                    },
                    {
                        "input": "n = 3, r = 2",
                        "output": "3",
                        "explanation": "<sup>3</sup>C<sub>2</sub> = 3! / (2! * 1!) = (3 * 2 * 1) / ((2 * 1) * 1) = 3. Therefore, 3 % 1000003 = 3"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Lucas Theorem</p>"
        ],
        "relatedTopics": [
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nstatic constexpr int kMod = 1000003;\n\nstatic int maxFact;\nstatic long long fact[kMod+1];\nclass Solution {\npublic:\nlong long power(long long x, int p) {\n    if (p == 0) {\n        return 1;\n    }\n    if (p == 1) {\n        return x;\n    }\n    \n    auto t = power(x, p >> 1);\n    auto res = t*t % kMod;\n    if ((p&1) != 0) {\n        res = res*x % kMod;\n    }\n    return res;\n}\n\ninline long long mod_inverse(long long x) {\n    // Euler formula:\n    //  a^(-1) = x^(phi(m)-1)\n    //    m = prime -> phi(m) = m-1\n    //  a^(-1) = x^(m-2)\n    return power(x, kMod-2);\n}\n\nlong long f(int n) {\n    if (n <= maxFact) {\n        return fact[n];\n    }\n    for (int i = maxFact+1; i <= n; i++) {\n        fact[i] = fact[i-1]*i % kMod;\n    }\n    maxFact = n;\n    return fact[n];\n}\n\nint rCnModP(int n, int r) {\n    if (r > n) {\n        return 0;\n    }\n    if (r == 0 || r == n) {\n        return 1;\n    }\n    \n    auto f_n = f(n);\n    auto f_r = f(r);\n    auto f_nr = f(n-r);\n    long long t = f_n * (mod_inverse(f_r)*mod_inverse(f_nr) % kMod);\n    return (int) (t % kMod);\n}\n\nint rCnModPrimeLucas(long long n, long long r) {\n    if (r == 0) {\n        return 1;\n    }\n    int ni = (int) (n % kMod);\n    int ri = (int) (r % kMod);\n    long long t = (long long) rCnModPrimeLucas(n/kMod, r/kMod) * rCnModP(ni, ri) % kMod;\n    return (int) t;\n}\n\nint findByCrt(int rem) {\n    int min_x = 0;\n    while (true) {\n        if (min_x % kMod == rem) {\n            return min_x;\n        }\n        min_x++;\n    }\n}\n\nint nCr(long long n, long long r) {\n\tmemset(fact, 0, sizeof fact);\n    fact[0] = fact[1] = 1;\n    maxFact = 1;\n    int rem = rCnModPrimeLucas(n, r);\n    return findByCrt(rem);\n}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}