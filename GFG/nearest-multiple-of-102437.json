{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703037,
            "title": "Nearest multiple of 10",
            "titleSlug": "nearest-multiple-of-102437",
            "content": "<p><span >A string&nbsp;<strong>s </strong>is given to represent a positive number. The task is to round str to the nearest multiple of 10.&nbsp; </span><span >If you have two multiples equally apart from s, choose the smallest element among them.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Examples:<br /></strong></span></p>\n<pre><span ><strong>Input:</strong> s = \"29\" <br /><strong>Output:</strong> 30<br /><strong>Explanation:</strong></span><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><span > </span></strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><span >Close</span></span><span > multiples are 20 and 30, and</span><span > 30 is the nearest to 29.</span><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> </strong></pre>\n<pre><span style=\"font-size: 20px;\"><span ><strong>Input:</strong> s = \"15\"<br /><strong>Output:</strong> 10<br /></span><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong></span><span > 10 and 20 are equally distant multiples from 20. The smallest of the two is 10.</span></pre>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br /><span >1 &lt;= s.size()&lt;= 10<sup>5</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` representing a positive number, round `s` to the nearest multiple of 10. If two multiples are equally distant from `s`, choose the smaller multiple.",
                "constraints": [
                    "1 <= s.size() <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "29",
                        "output": "30",
                        "explanation": "The closest multiples of 10 to 29 are 20 and 30. Since 30 is closer to 29, the output is 30."
                    },
                    {
                        "input": "15",
                        "output": "10",
                        "explanation": "The multiples 10 and 20 are equally distant from 15. We choose the smaller one, which is 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span ><strong>Approach:</strong>&nbsp;A solution to the same problem has been discussed in&nbsp;<a href=\"https://www.geeksforgeeks.org/round-the-given-number-to-nearest-multiple-of-10/\">this</a>&nbsp;article which will not work for large numbers. When the number is large and represented as strings we can process the number digit by digit. The main observation is that if the last digit of the number is&nbsp;<strong>&le; 5</strong> then, only the last digit will get affected i.e. it will be replaced with a&nbsp;<strong>0</strong>. If it is something greater than <strong>5</strong>&nbsp;then the number has to be rounded to some next higher multiple of&nbsp;<strong>10</strong>&nbsp;i.e. the last digit will be replaced with a&nbsp;<strong>0</strong>&nbsp;and&nbsp;<strong>1</strong>&nbsp;will have to be added to the rest of the number i.e. the number represented by the sub-string&nbsp;<strong>str[0&hellip;n-1]</strong>&nbsp;which can be done by storing carry generated at every step (digit).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    string roundToNearest(string str) {\n        int n = str.size();\n\n        // If the last digit is less then or equal to 5\n        // then it can be rounded to the nearest\n        // (previous) multiple of 10 by just replacing\n        // the last digit with 0\n        if (str[n - 1] - '0' <= 5) {\n\n            // Set the last digit to 0\n            str[n - 1] = '0';\n\n            // Print the updated number\n            return str.substr(0, n);\n        }\n\n        // The number hast to be rounded to\n        // the next multiple of 10\n        else {\n\n            // To store the carry\n            int carry = 0;\n\n            // Replace the last digit with 0\n            str[n - 1] = '0';\n\n            // Starting from the second last digit, add 1\n            // to digits while there is carry\n            int i = n - 2;\n            carry = 1;\n\n            // While there are digits to consider\n            // and there is carry to add\n            while (i >= 0 && carry == 1) {\n\n                // Get the current digit\n                int currentDigit = str[i] - '0';\n\n                // Add the carry\n                currentDigit += carry;\n\n                // If the digit exceeds 9 then\n                // the carry will be generated\n                if (currentDigit > 9) {\n                    carry = 1;\n                    currentDigit = 0;\n                }\n\n                // Else there will be no carry\n                else\n                    carry = 0;\n\n                // Update the current digit\n                str[i] = (char)(currentDigit + '0');\n\n                // Get to the previous digit\n                i--;\n            }\n\n            // If the carry is still 1 then it must be\n            // inserted at the beginning of the string\n            if (carry == 1)\n                cout << carry;\n\n            // Prin the rest of the number\n            return str.substr(0, n);\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public String roundToNearest(String str) {\n        int n = str.length();\n\n        // If the last digit is less than or equal to 5\n        // then it can be rounded to the nearest\n        // (previous) multiple of 10 by just replacing\n        // the last digit with 0\n        if (str.charAt(n - 1) - '0' <= 5) {\n\n            // Set the last digit to 0\n            str = str.substring(0, n - 1) + '0';\n\n            // Return the updated number\n            return str;\n        }\n        // The number has to be rounded to the next multiple of 10\n        else {\n            // Replace the last digit with 0\n            str = str.substring(0, n - 1) + '0';\n\n            // Starting from the second last digit, add 1 to digits while there is carry\n            int carry = 1;\n            char[] chars = str.toCharArray();\n            for (int i = n - 2; i >= 0 && carry == 1; i--) {\n                int currentDigit = chars[i] - '0';\n                currentDigit += carry;\n\n                // If the digit exceeds 9 then the carry will be generated\n                if (currentDigit > 9) {\n                    carry = 1;\n                    currentDigit = 0;\n                }\n                // Else there will be no carry\n                else {\n                    carry = 0;\n                }\n\n                // Update the current digit\n                chars[i] = (char)(currentDigit + '0');\n            }\n\n            // If the carry is still 1 then it must be inserted at the beginning of the\n            // string\n            if (carry == 1) {\n                return '1' + new String(chars);\n            }\n\n            // Return the updated number\n            return new String(chars);\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Initial Template for Python 3\n\n\nclass Solution:\n\n    def roundToNearest(self, num_str: str) -> str:\n        n = len(num_str)\n\n        # If the last digit is less than or equal to 5\n        # then it can be rounded to the nearest (previous) multiple of 10\n        # by just replacing the last digit with 0\n        if int(num_str[-1]) <= 5:\n            # Set the last digit to 0\n            num_str = num_str[:-1] + '0'\n            return num_str\n\n        # The number has to be rounded to the next multiple of 10\n        else:\n            # Replace the last digit with 0\n            num_str = num_str[:-1] + '0'\n            carry = 1\n\n            # Starting from the second last digit, add 1 to digits while there is carry\n            num_str_list = list(num_str)\n            i = n - 2\n            while i >= 0 and carry == 1:\n                current_digit = int(num_str_list[i]) + carry\n\n                # If the digit exceeds 9 then the carry will be generated\n                if current_digit > 9:\n                    carry = 1\n                    current_digit = 0\n                else:\n                    carry = 0\n\n                # Update the current digit\n                num_str_list[i] = str(current_digit)\n                i -= 1\n\n            # If the carry is still 1 then it must be inserted at the beginning of the string\n            if carry == 1:\n                num_str_list.insert(0, '1')\n\n            return ''.join(num_str_list)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    roundToNearest(str) {\n        let n = str.length;\n\n        if (str[n - 1] <= 5) {\n            str = str.slice(0, n - 1) + '0';\n            return str;\n        } else {\n            let carry = 0;\n            str = str.slice(0, n - 1) + '0';\n\n            let i = n - 2;\n            carry = 1;\n\n            while (i >= 0 && carry === 1) {\n                let currentDigit = Number(str[i]);\n                currentDigit += carry;\n\n                if (currentDigit > 9) {\n                    carry = 1;\n                    currentDigit = 0;\n                } else\n                    carry = 0;\n\n                str = str.slice(0, i) + String(currentDigit) + str.slice(i + 1);\n\n                i--;\n            }\n\n            if (carry === 1) str = String(carry) + str;\n\n            return str;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}