{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701358,
            "title": "Nearly sorted",
            "titleSlug": "nearly-sorted-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>, where each element is at most <strong>k</strong> away from its target position, you need to sort the array optimally.<br /></span><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;</span><span style=\"font-size: 18px;\">You need to change the given array <strong>arr[]</strong> in place.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [6, 5, 3, 2, 8, 10, 9], k = 3\n<strong>Output: </strong>[2, 3, 5, 6, 8, 9, 10]<strong>\nExplanation: </strong>The sorted array will be 2 3 5 6 8 9 10</span>\n</pre>\n<pre><span style=\"font-size: 14pt; font-family: 'andale mono', monospace;\"><strong>Input:</strong><span style=\"color: #1d1c1d; font-variant-ligatures: common-ligatures; white-space: normal; background-color: #f8f8f8;\"> arr[]= [1, 4, 5, 2, 3, 6, 7, 8, 9, 10], k = 2</span>\n<strong>Output: </strong>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br /><strong>Explanation: </strong>The sorted array will be 1 2 3 4 5 6 7 8 9 10</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Don't </strong>use the inbuilt sort() function for this question.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; k &lt; arr.size()<br />1 &le;&nbsp;arr<sub>i </sub>&le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` where each element is at most `k` positions away from its sorted position, sort the array in place optimally without using the built-in sort function.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= k < arr.size()",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [6, 5, 3, 2, 8, 10, 9], k = 3",
                        "output": "[2, 3, 5, 6, 8, 9, 10]",
                        "explanation": "Each element in the input array is at most 3 positions away from its sorted position. The sorted array is [2, 3, 5, 6, 8, 9, 10]."
                    },
                    {
                        "input": "arr[]= [1, 4, 5, 2, 3, 6, 7, 8, 9, 10], k = 2",
                        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
                        "explanation": "Each element in the input array is at most 2 positions away from its sorted position. The sorted array is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use heap to store first k+1 elements then iterate on rest of the elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "priority-queue",
                "slug": "priority-queue"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    //  function to sorts a nearly sorted array\n    // where every element is at most\n    // k positions away from its target position.\n    void nearlySorted(vector<int> &arr, int k) {\n\n        // length of array\n        int n = arr.size();\n\n        // creating a min heap\n        priority_queue<int, vector<int>, greater<int>> pq;\n\n        // pushing first k elements in pq\n        for (int i = 0; i < k; i++)\n            pq.push(arr[i]);\n\n        int i;\n\n        for (i = k; i < n; i++) {\n\n            pq.push(arr[i]);\n\n            // size becomes k+1 so pop it\n            // and add minimum element in (i-k) index\n            arr[i - k] = pq.top();\n            pq.pop();\n        }\n\n        // puting remaining elements in array\n        while (!pq.empty()) {\n            arr[i - k] = pq.top();\n            pq.pop();\n            i++;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to sort a nearly sorted array\n    // where every element is at most\n    // k positions away from its target position.\n    static void nearlySorted(int[] arr, int k) {\n\n        // Length of array\n        int n = arr.length;\n\n        // Creating a min heap\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n\n        // Pushing first k elements in pq\n        for (int i = 0; i < k; i++) pq.add(arr[i]);\n\n        int i;\n        for (i = k; i < n; i++) {\n            pq.add(arr[i]);\n\n            // Size becomes k+1 so pop it\n            // and add minimum element in (i-k) index\n            arr[i - k] = pq.poll();\n        }\n\n        // Putting remaining elements in array\n        while (!pq.isEmpty()) {\n            arr[i - k] = pq.poll();\n            i++;\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nimport heapq\n\n\nclass Solution:\n    # Function to sort a nearly sorted array\n    # where every element is at most\n    # k positions away from its target position.\n    def nearlySorted(self, arr, k):\n        # Length of array\n        n = len(arr)\n\n        # Creating a min heap\n        pq = []\n\n        # Pushing first k elements in pq\n        for i in range(k):\n            heapq.heappush(pq, arr[i])\n\n        i = k\n        index = 0\n\n        while i < n:\n            heapq.heappush(pq, arr[i])\n\n            # Size becomes k+1 so pop it\n            # and add minimum element in (index) position\n            arr[index] = heapq.heappop(pq)\n            i += 1\n            index += 1\n\n        # Putting remaining elements in array\n        while pq:\n            arr[index] = heapq.heappop(pq)\n            index += 1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass MinHeap {\n    constructor() { this.heap = []; }\n\n    push(val) {\n        this.heap.push(val);\n        this.heapifyUp();\n    }\n\n    pop() {\n        if (this.heap.length === 1) return this.heap.pop();\n        const min = this.heap[0];\n        this.heap[0] = this.heap.pop();\n        this.heapifyDown();\n        return min;\n    }\n\n    heapifyUp() {\n        let index = this.heap.length - 1;\n        while (index > 0) {\n            let parentIndex = Math.floor((index - 1) / 2);\n            if (this.heap[parentIndex] <= this.heap[index]) break;\n            [this.heap[parentIndex], this.heap[index]] =\n                [ this.heap[index], this.heap[parentIndex] ];\n            index = parentIndex;\n        }\n    }\n\n    heapifyDown() {\n        let index = 0;\n        while (true) {\n            let left = 2 * index + 1;\n            let right = 2 * index + 2;\n            let smallest = index;\n\n            if (left < this.heap.length && this.heap[left] < this.heap[smallest]) {\n                smallest = left;\n            }\n            if (right < this.heap.length && this.heap[right] < this.heap[smallest]) {\n                smallest = right;\n            }\n            if (smallest === index) break;\n\n            [this.heap[index], this.heap[smallest]] =\n                [ this.heap[smallest], this.heap[index] ];\n            index = smallest;\n        }\n    }\n\n    isEmpty() { return this.heap.length === 0; }\n}\n\nclass Solution {\n    // Function to sort a nearly sorted array\n    // where every element is at most k positions away from its target position.\n    nearlySorted(arr, k) {\n        let n = arr.length;\n        let pq = new MinHeap();\n\n        // Pushing first k elements in pq\n        for (let i = 0; i < k; i++) {\n            pq.push(arr[i]);\n        }\n\n        let index = 0;\n\n        for (let i = k; i < n; i++) {\n            pq.push(arr[i]);\n\n            // Size becomes k+1 so pop it\n            // and add minimum element in (index) position\n            arr[index] = pq.pop();\n            index++;\n        }\n\n        // Putting remaining elements in array\n        while (!pq.isEmpty()) {\n            arr[index] = pq.pop();\n            index++;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}