{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 707129,
            "title": "Neeman's Shoes",
            "titleSlug": "neemans-shoes",
            "content": "<p><span style=\"font-size:18px\">Due to the second wave of&nbsp;Gorona virus,&nbsp;Geekland imposed another&nbsp;lockdown and&nbsp;Geek has gained some wieght. Now Geek has decided to exercise.<br />\nThere are <strong>N</strong> intersections in the city numbered from <strong>0</strong> to <strong>N-1</strong> and <strong>M</strong> bidirectional roads each road connecting two intersections. All the intersections are connected to each-other through some set of roads,<strong> i<sup>th</sup></strong> road connect intersections&nbsp;<strong>A[i][0] </strong>and<strong> A[i][1]</strong> and is of length<strong> A[i][2]</strong>.<br />\nEvery morning Geek will start at intersection <strong>src</strong> and will run/walk upto intersection <strong>dest</strong>. Geek only has one hour in the morning so he will choose to cover the shortest path from <strong>src</strong> to <strong>dest</strong>.<br />\nAfter planning his exercising schedule, Geek wants to buy the perfect shoes to walk/run in the morning. He goes to&nbsp;Neeman&#39;s Shoe factory which is the National Shoe factory of Geekland.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\">Geek sees that there are two types of shoes &quot;Neeman&#39;s Wool Joggers&quot; and &quot;Neeman&#39;s Cotton Classics&quot;, &quot;Neeman&#39;s Wool Joggers&quot; are good for running and &quot;Neeman&#39;s Cotton Classics&quot; are good for walking.<br />\nGeek is confused which shoes to buy, so he comes up with a strategy. If the distance he has to cover in the morning is less than or equal to X, then he will walk the distance, therefore he will buy &quot;Neeman&#39;s Cotton Classics&quot;. If the distance is greater than X, he will buy &quot;Neeman&#39;s Wool Joggers&quot;. Geek is too lazy to calculate the shortest distance between two intersections src and dest. Help him decide which shoes to buy.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:&nbsp;</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 3, M = 2, src = 0, dest = 2, X = 5\nA[][] = {{0, 1, 3},\n&nbsp;\\t  {1, 2, 3}}\n<strong>Output:</strong>\nNeeman&#39;s Wool Joggers\n<strong>Explanation</strong>: \nShortest path from src to dest is 6 \nwhich is greater than X, hence Geek will\nbuy &quot;Neeman&#39;s Wool Joggers&quot;.\n</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:&nbsp;</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> \nN = 3, M = 2, src = 0, dest = 2, X = 6 \nA[][] = {{0, 1, 3},\n&nbsp;\\t&nbsp; {1, 2, 3}} \n<strong>Output:</strong> \nNeeman&#39;s Cotton Classics \n<strong>Explanation</strong>: \nShortest path from src to dest is 6\nwhich is not greater than X, hence Geek \nwill \u00e2\u20ac\u2039buy &quot;Neeman&#39;s Cotton Classics&quot;.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>exercise( )</strong>&nbsp;which takes&nbsp;<strong>N</strong>, <strong>M</strong>, <strong>A[ ][ ]</strong>, <strong>src</strong>,<strong> dest</strong>&nbsp;and <strong>X</strong>&nbsp;as input parameters and returns string representing the shoes he selects. Either&nbsp;<strong>&quot;Neeman&#39;s Wool Joggers&quot;</strong>&nbsp;or <strong>&quot;Neeman&#39;s Cotton Classics&quot;.</strong></span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O((N + M) * Log(M))<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N + M)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n2 &le; N&nbsp;&le; 10<sup>4</sup><br />\n1 &le; M&nbsp;&le; min((N*(N-1))/2, 2*10<sup>5</sup>)<br />\n0 &le; A[i][0], A[i][1]&nbsp;&lt; N<br />\n0 &le; src, dest &lt; N<br />\n1 &le; A[i][2], X &le; 10<sup>9</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Due to a lockdown, Geek has gained weight and decides to exercise. The city has N intersections (numbered 0 to N-1) connected by M bidirectional roads. Each road connects intersections A[i][0] and A[i][1] with length A[i][2]. Geek starts at intersection 'src' and goes to 'dest' every morning, choosing the shortest path.  Geek wants to buy shoes from Neeman's: \"Wool Joggers\" (for running) or \"Cotton Classics\" (for walking). If the shortest distance from 'src' to 'dest' is less than or equal to X, he'll walk and buy \"Cotton Classics\". Otherwise, he'll run and buy \"Wool Joggers\". Help Geek decide which shoes to buy.",
                "constraints": [
                    "2 <= N <= 10^4",
                    "1 <= M <= min((N*(N-1))/2, 2*10^5)",
                    "0 <= A[i][0], A[i][1] < N",
                    "0 <= src, dest < N",
                    "1 <= A[i][2], X <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 3, M = 2, src = 0, dest = 2, X = 5\nA[][] = {{0, 1, 3},\n          {1, 2, 3}}",
                        "output": "Neeman's Wool Joggers",
                        "explanation": "The shortest path from intersection 0 to 2 is 6 (0 -> 1 -> 2, with lengths 3 + 3). Since 6 > 5, Geek will buy Neeman's Wool Joggers."
                    },
                    {
                        "input": "N = 3, M = 2, src = 0, dest = 2, X = 6\nA[][] = {{0, 1, 3},\n          {1, 2, 3}}",
                        "output": "Neeman's Cotton Classics",
                        "explanation": "The shortest path from intersection 0 to 2 is 6 (0 -> 1 -> 2, with lengths 3 + 3). Since 6 <= 6, Geek will buy Neeman's Cotton Classics."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find shortest path using dijkstra algorithm.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n    public:\n    //Function to find the type of exercise based on the given parameters.\n    string exercise(int N, int M, vector<vector<int>> A, int src, int dest, int X){\n        //Creating adjacency list to represent the graph.\n        vector<vector<pair<long long, long long>>> adj(N);\n        //Adding edges to the adjacency list.\n        for(int i = 0; i < M; i++){\n            adj[A[i][0]].push_back({A[i][1], A[i][2]});\n            adj[A[i][1]].push_back({A[i][0], A[i][2]});\n        }\n        //Creating a distance array and initializing all distances to a large value.\n        vector<long long> dist(N, 1e18);\n        //Setting the distance of source node to 0.\n        dist[src]=0;\n        //Creating a set to store the minimum distance nodes.\n        set<pair<long long, long long>> st;\n        //Inserting the source node into the set.\n        st.insert({0, src});\n        //Implementing Dijkstra's algorithm to find the shortest path.\n        while(1){\n            //If the set is empty, break the loop.\n            if(st.empty())\n                break;\n            //Get the node with minimum distance from the set.\n            long long f=(*st.begin()).second;\n            st.erase(st.begin());\n            //Iterating through the adjacent nodes of the current node.\n            for(int i = 0; i < adj[f].size(); i++){\n                //Updating the distance if a shorter path is found.\n                if(dist[adj[f][i].first] > dist[f] + adj[f][i].second){\n                    //Removing the old distance from the set.\n                    st.erase({dist[adj[f][i].first], adj[f][i].first});\n                    //Updating the distance.\n                    dist[adj[f][i].first] = dist[f] + adj[f][i].second;\n                    //Inserting the updated distance into the set.\n                    st.insert({dist[adj[f][i].first], adj[f][i].first});\n                }\n            }\n        }\n        //Checking if the distance to the destination node is greater than X.\n        //Returning the appropriate exercise type based on the condition.\n        if(dist[dest] > (long long )X){\n            return \"Neeman's Wool Joggers\";\n        }\n        else{\n            return \"Neeman's Cotton Classics\";\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Pair\n{\n    long first, second;\n\n    // Defining a Pair class to store pairs of values\n    Pair(long x, long y)\n    {\n        first = x;\n        second = y;\n    }\n\n    @Override\n    public boolean equals(Object obj)\n    {\n        Pair that = (Pair)obj;\n\n        // Overriding equals() method to compare pairs\n        return first == that.first && second == that.second;\n    }\n}\n\nclass Solution\n{\n    public String exercise(int N, int M, ArrayList<ArrayList<Integer>> A, int src, int dest, int X)\n    {\n        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();\n\n        // Creating an adjacency list to store the graph representation\n        for(int i = 0; i < N; i++)\n            adj.add(new ArrayList<>());\n\n        // Building the graph from the given input\n        for(ArrayList<Integer> e : A)\n        {\n            adj.get(e.get(0)).add(new Pair(e.get(1), e.get(2)));\n            adj.get(e.get(1)).add(new Pair(e.get(0), e.get(2)));\n        }\n\n        ArrayList<Long> dist = new ArrayList<>();\n        for(int i = 0; i < N; i++)\n            dist.add((long)1e18);\n\n        // Initializing distances to infinity except for the source vertex\n        dist.set(src, 0L);\n\n        TreeSet<Pair> st = new TreeSet<>(new Comparator<Pair>(){\n\n            @Override\n            public int compare(Pair a, Pair b)\n            {\n                // Defining a custom comparator for TreeSet based on pairs\n                return (a.first == b.first) ? (a.second > b.second) ? 1 : (a.second == b.second) ? 0 : -1 : (a.first > b.first) ? 1 : -1;\n            }\n        });\n\n        // Adding the source vertex to the TreeSet\n        st.add(new Pair(0L, src));\n\n        // Implementing Dijkstra's algorithm\n        while(true){\n            if(st.isEmpty())\n                break;\n\n            // Extracting the vertex with minimum distance\n            int f= (int) st.first().second;\n            st.remove(st.first());\n\n            // Relaxing all the adjacent vertices\n            for(int i = 0; i < adj.get(f).size(); i++){\n                if(dist.get((int)adj.get(f).get(i).first) > dist.get(f) + adj.get(f).get(i).second){\n                    st.remove(new Pair(dist.get((int)adj.get(f).get(i).first), adj.get(f).get(i).first));\n                    dist.set((int)adj.get(f).get(i).first, dist.get(f) + adj.get(f).get(i).second);\n                    st.add(new Pair(dist.get((int)adj.get(f).get(i).first), adj.get(f).get(i).first));\n                }\n            }\n        }\n        \n        // Checking if the shortest distance to the destination is greater than X\n        if(dist.get(dest) > X){\n            return \"Neeman's Wool Joggers\";\n        }\n        else{\n            return \"Neeman's Cotton Classics\";\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\nimport heapq\nclass Solution:\n    def exercise(self, N, M, A,src, dest,X):\n        q=[]\n        heapq.heapify(q)\n        heapq.heappush(q,[0,src])\n        vis=[0]*N\n        adj=[[] for i in range(N)]\n        for i in range(M):\n            a1=A[i][0];a2=A[i][1];a3=A[i][2];\n            # print(a1,a2,a3)\n            adj[a1].append([a2,a3])\n            adj[a2].append([a1,a3])\n        # print(adj)\n        while(len(q)>0):\n            p = heapq.heappop(q)\n            # print(p)\n            x=(p[0]);y=p[1];\n            if(y==dest):\n                if(x<=X):\n                    return \"Neeman's Cotton Classics\"\n                else:\n                    return \"Neeman's Wool Joggers\"\n    \n            if(vis[y]==1):\n                continue\n            vis[y]=1\n            # print(adj[y])\n            for i in adj[y]:\n                heapq.heappush(q,[(i[1]+x),i[0]])\n           \n        return \"\"",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Function to find the type of exercise based on the given parameters.\n    public string exercise(int N, int M, List<List<int>> A, int src, int dest, int X)\n    {\n        //Creating adjacency list to represent the graph.\n        List<List<Tuple<int, int>>> adj = new List<List<Tuple<int, int>>>();\n        for(int i = 0; i < N; i++)\n        {\n            adj.Add(new List<Tuple<int, int>>());\n        }\n        \n        //Adding edges to the adjacency list.\n        for(int i = 0; i < M; i++)\n        {\n            adj[A[i][0]].Add(new Tuple<int, int>(A[i][1], A[i][2]));\n            adj[A[i][1]].Add(new Tuple<int, int>(A[i][0], A[i][2]));\n        }\n        \n        //Creating a distance array and initializing all distances to a large value.\n        int[] dist = new int[N];\n        for(int i = 0; i < N; i++)\n        {\n            dist[i] = int.MaxValue;\n        }\n        \n        //Setting the distance of source node to 0.\n        dist[src] = 0;\n        \n        //Creating a set to store the minimum distance nodes.\n        SortedSet<Tuple<int, int>> st = new SortedSet<Tuple<int, int>>();\n        \n        //Inserting the source node into the set.\n        st.Add(new Tuple<int, int>(0, src));\n        \n        //Implementing Dijkstra's algorithm to find the shortest path.\n        while(st.Count > 0)\n        {\n            //Get the node with minimum distance from the set.\n            Tuple<int, int> node = st.Min;\n            st.Remove(node);\n            \n            int nodeIndex = node.Item2;\n            \n            //Iterating through the adjacent nodes of the current node.\n            foreach(var adjacent in adj[nodeIndex])\n            {\n                int v = adjacent.Item1;\n                int weight = adjacent.Item2;\n                \n                //Updating the distance if a shorter path is found.\n                if(dist[nodeIndex] != int.MaxValue && dist[v] > dist[nodeIndex] + weight)\n                {\n                    //Removing the old distance from the set if it's there.\n                    st.Remove(new Tuple<int, int>(dist[v], v));\n                    \n                    //Updating the distance.\n                    dist[v] = dist[nodeIndex] + weight;\n                    \n                    //Inserting the updated distance into the set.\n                    st.Add(new Tuple<int, int>(dist[v], v));\n                }\n            }\n        }\n        \n        //Checking if the distance to the destination node is greater than X\n        //Returning the appropriate exercise type based on the condition.\n        if(dist[dest] > X)\n        {\n            return \"Neeman's Wool Joggers\";\n        }\n        else\n        {\n            return \"Neeman's Cotton Classics\";\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}