{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705719,
            "title": "Negative weight cycle",
            "titleSlug": "negative-weight-cycle3504",
            "content": "<p><span style=\"font-size: 18px;\">Given a weighted directed graph with n nodes and m edges. Nodes are labeled from 0 to n-1, the task is to check if it contains a negative weight cycle or not.<br /><strong>Note:&nbsp;</strong>edges[i] is&nbsp;defined as u, v and weight.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3, edges = {{0,1,-1},{1,2,-2},\n{2,0,-3}}\n<strong>Output: </strong>1\n<strong>Explanation: </strong>The graph contains negative weight\ncycle as 0-&gt;1-&gt;2-&gt;0 with weight -1,-2,-3.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3, edges = {{0,1,-1},{1,2,-2},\n{2,0,3}}\n<strong>Output: </strong>0\n<strong>Explanation: </strong>The graph does not contain any\nnegative weight cycle.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anyhting. Your task is to complete the function&nbsp;<strong>isNegativeWeightCycle()&nbsp;</strong>which takes n and edges as input paramater and returns 1 if graph contains negative weight cycle otherwise returns 0.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n*m)<br /><strong>Expected Space Compelxity:&nbsp;</strong>O(n)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 100<br />0 &lt;= m &lt;= n*(n-1)</span><span style=\"font-size: 18px;\">, where m is the total number of Edges in the directed graph.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a weighted directed graph with 'n' nodes and 'm' edges, where nodes are labeled from 0 to n-1, determine if the graph contains a negative weight cycle.  Each edge is defined by a source node (u), a destination node (v), and a weight.",
                "constraints": [
                    "1 <= n <= 100",
                    "0 <= m <= n*(n-1), where m is the total number of Edges in the directed graph."
                ],
                "testcases": [
                    {
                        "input": "n = 3, edges = {{0,1,-1},{1,2,-2},{2,0,-3}}",
                        "output": "1",
                        "explanation": "The graph contains a negative weight cycle: 0 -> 1 -> 2 -> 0, with a total weight of -1 + (-2) + (-3) = -6."
                    },
                    {
                        "input": "n = 3, edges = {{0,1,-1},{1,2,-2},{2,0,3}}",
                        "output": "0",
                        "explanation": "The graph does not contain any negative weight cycle. The sum of weights along any cycle is non-negative."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Bellman Ford algorithm.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "cisco"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n    struct edge {\n        int a, b, cost;\n    };\npublic:\n    // Function to check if there is a negative weight cycle\n    int isNegativeWeightCycle(int n, vector<vector<int>> edges) {\n        vector<edge> Edges;\n        \n        // Converting the input vector into edge structure vector\n        for(auto i: edges){\n            edge p;\n            p.a = i[0];\n            p.b = i[1];\n            p.cost = i[2];\n            Edges.push_back(p);\n        }\n        \n        int INF = INT_MAX;\n        vector<int> d(n);\n        vector<int> p(n, -1);\n        int x;\n        \n        // Applying Bellman-Ford algorithm to detect negative weight cycle\n        for (int i = 0; i < n; ++i) {\n            x = -1;\n            for (edge e : Edges) {\n                if (d[e.a] + e.cost < d[e.b]) {\n                    d[e.b] = d[e.a] + e.cost;\n                    p[e.b] = e.a;\n                    x = e.b;\n                }\n            }\n        }\n        \n        // If x is still -1, it means no negative weight cycle is present\n        if(x == -1) return 0;\n        return 1; // If x is not -1, it means a negative weight cycle is present\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end function Template for Java\n\nclass Solution {\n    public int isNegativeWeightCycle(int n, int[][] edges) {\n        int inf = 1000000000; // Initialize the value of infinity\n        int[] d = new int[n]; // Create an array to store the distances from the starting node\n        int[] p = new int[n]; // Create an array to store the parent nodes\n        \n        Arrays.fill(d, 0); // Initialize all distances to 0\n        Arrays.fill(p, -1); // Initialize all parent nodes to -1\n        \n        int x = -1; // Initialize x as -1\n        \n        for (int i = 0; i < n; i++) { // Iterate through all nodes\n            x = -1; // Reset x to -1\n            for (int j = 0; j < edges.length; j++) { // Iterate through all edges\n                if (d[edges[j][0]] + edges[j][2] < d[edges[j][1]]) { // Check if there is a negative weight cycle\n                    d[edges[j][1]] = d[edges[j][0]] + edges[j][2]; // Update the distance\n                    p[edges[j][1]] = edges[j][0]; // Update the parent node\n                    x = edges[j][1]; // Set x as the node with updated distance\n                }\n            }\n        }\n        \n        if (x == -1) // If x is still -1, there is no negative weight cycle\n            return 0;\n        else\n            return 1; // If x is not -1, there is a negative weight cycle\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def isNegativeWeightCycle(self, n, edges):\n        inf = 1000000000000000000  # initializing the value of infinity\n        d = [0 for i in range(n)\n             ]  # creating an array to store the minimum distances\n        p = [-1\n             for i in range(n)]  # creating an array to store the parent nodes\n        for i in range(n):  # iterating over all the nodes\n            x = -1  # initializing x to -1\n            for e in edges:  # iterating over all the edges\n                if (\n                        d[e[0]] + e[2] < d[e[1]]\n                ):  # if the distance to the destination node is less than the current minimum distance\n                    d[e[1]] = d[e[0]] + e[2]  # update the minimum distance\n                    p[e[1]] = e[0]  # update the parent node\n                    x = e[1]  # update x to the destination node\n        if (x == -1):  # if x is still -1, there is no negative weight cycle\n            return 0\n        return 1  # else, there is a negative weight cycle\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {number} n\r\n * @param {number[][]} edges\r\n * @return {number} \r\n*/\r\n\r\nclass Solution {\r\n    isNegativeWeightCycle(n,edges){\r\n       let Edges = [];\r\n\t   for(let i=0; i<edges.length; i++) {\r\n\t\t   let p = {\r\n\t\t\t   a: edges[i][0],\r\n\t\t\t   b: edges[i][1],\r\n\t\t\t   cost: edges[i][2]\r\n\t\t   };\r\n\t\t   Edges.push(p);\r\n\t   }\r\n\t   let INF = Number.MAX_SAFE_INTEGER;\r\n\t   let d = new Array(n).fill(0);\r\n\t   let p = new Array(n).fill(-1);\r\n\t   let x;\r\n\t   for(let i=0; i<n; i++) {\r\n\t\t   x = -1;\r\n\t\t   for(let e of Edges) {\r\n\t\t\t   if(d[e.a] + e.cost < d[e.b]) {\r\n\t\t\t\t   d[e.b] = d[e.a] + e.cost;\r\n\t\t\t\t   p[e.b] = e.a;\r\n\t\t\t\t   x = e.b;\r\n\t\t\t   }\r\n\t\t   }\r\n\t   }\r\n\t   if(x == -1) return 0;\r\n\t   return 1;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}