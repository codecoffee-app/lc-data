{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881608,
            "title": "New Registration System",
            "titleSlug": "new-registration-system--150419",
            "content": "<p><span style=\"font-size: 18px;\">You are given string array <strong>arr</strong>[] denoting usernames. Now whenever you encounter a new string, you don't need to modify that string. If you encounter a string that exists already then you append a number as a suffix to it (starting from 1). </span></p>\n<p><span style=\"font-size: 18px;\">So, if you encounter a string, say \"ab\", then you don't have to modify it. Now, again if you encounter \"ab\", you will modify it to \"ab1\" and so on. You need to return the modified string array.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:<br />Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [\"</span><span style=\"font-size: 18px;\">aba\", \"</span><span style=\"font-size: 18px;\">ab\", \"</span><span style=\"font-size: 18px;\">aba\", \"</span><span style=\"font-size: 18px;\">aba\", \"</span><span style=\"font-size: 18px;\">ab\"</span><span style=\"font-size: 18px;\">]</span><br /><strong><span style=\"font-size: 18px;\">Output:&nbsp;</span></strong><span style=\"font-size: 18px;\">[\"</span><span style=\"font-size: 18px;\">aba\", \"</span><span style=\"font-size: 18px;\">ab\", \"</span><span style=\"font-size: 18px;\">aba1\", \"</span><span style=\"font-size: 18px;\">aba2\", \"</span><span style=\"font-size: 18px;\">ab1\"</span><span style=\"font-size: 18px;\">]</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Explanation:&nbsp;</strong></span><span style=\"font-size: 18px;\">Each username is added without modification if it&rsquo;s new. If a username repeats, append the smallest integer suffix (starting from 1) to make it unique based on its previous occurrences.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Constraints:<br /></span></strong><span style=\"font-size: 18px;\">1 &lt;= arr.size() &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>1. use unordered map to store the frequency of each user name<br />\nAlgorithm:<br />\nfor each username:<br />\n&nbsp; &nbsp; &nbsp;if username does not exits:<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;add to result the username<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mark the frequency as 1<br />\n&nbsp; &nbsp; &nbsp;else:<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; add username the frequency of username.<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; now add username to three result<br />\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; increase the frequency</p>\n\n<p>return result<br />\n&nbsp; &nbsp;&nbsp;<br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nvector<string> login_system(vector<string> &v) {\n    vector<string> ans;\n\n    int n;\n    n = v.size();\n    unordered_map<string, int> m1;\n\n    int i;\n    for (i = 0; i < n; i++) {\n        string s;\n        s = v[i];\n        if (m1.find(s) == m1.end()) {\n            m1[s] = 1;\n            ans.push_back(s);\n        } else {\n            string w = s;\n            w += to_string(m1[s]);\n            ans.push_back(w);\n            m1[s]++;\n        }\n    }\n\n    return ans;\n}",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}