{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710279,
            "title": "Next element with greater frequency",
            "titleSlug": "next-element-with-greater-frequency--170637",
            "content": "<p><span style=\"font-size:18px\">Given an array&nbsp;<strong>arr[ ]</strong>&nbsp;of&nbsp;<strong>n</strong>&nbsp;integers, for every element, find the closest element on it&#39;s right that has a greater frequency than its own frequency.</span></p>\n\n<blockquote>\n<p><span style=\"font-size:18px\">Frequency is the number of times the&nbsp;element appears in the array.</span></p>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nn = 6\narr[] = {2 1 1 3 2 1}<strong>\nOutput:</strong>\n1 -1 -1 2 1 -1 \n<strong>Explanation:\n</strong>1 appears 3 times.\n2 appears 2 times.\n3 appears 1 time. \n\nFor arr[0] ie, 2\narr[1] ie 1 is the closest element on its \nright which has greater frequency than the \nfrequency of 2. For the arr[1] and arr[2] no element \non the right has greater frequency than 1, \nso -1 will be printed. and so on. </span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>n = 10\narr[] = {5 1 2 3 2 5 5 4 5 2}\n<strong>Output:</strong>\n-1 2 5 2 5 -1 -1 5 -1 -1</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your task:</strong><br />\nYour task is to complete the function&nbsp;<strong>print_next_greater_freq() </strong>which take two parameters <strong>arr</strong> and <strong>n</strong>.This function returns&nbsp;answer(as a list of integers)&nbsp;as explained above.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected time complexity:</strong> O(n)<br />\n<strong>Expected space complexity: </strong>O(n)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= n &lt;= 10<sup>4</sup><br />\n1 &lt;= arr[i] &lt;=&nbsp;10<sup>4</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of `n` integers, for each element, find the closest element to its right that has a higher frequency than its own. Frequency refers to the number of times an element appears in the array.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 6\narr[] = {2 1 1 3 2 1}",
                        "output": "1 -1 -1 2 1 -1",
                        "explanation": "The frequencies are: 1 (3 times), 2 (2 times), 3 (1 time).\n\n- For arr[0] (2), the closest element on its right with a higher frequency is 1.\n- For arr[1] (1) and arr[2] (1), there are no elements on their right with a higher frequency, so -1 is the answer.\n- For arr[3] (3), the closest element on its right with a higher frequency is 2.\n- For arr[4] (2), the closest element on its right with a higher frequency is 1.\n- For arr[5] (1), there are no elements on its right, so -1 is the answer."
                    },
                    {
                        "input": "n = 10\narr[] = {5 1 2 3 2 5 5 4 5 2}",
                        "output": "-1 2 5 2 5 -1 -1 5 -1 -1",
                        "explanation": "The frequencies are: 5 (4 times), 2 (3 times), 1 (1 time), 3 (1 time), 4 (1 time).\n\n- For arr[0] (5), there is no element on the right with a higher frequency so -1.\n- For arr[1] (1), the closest element on its right with a higher frequency is 2.\n- For arr[2] (2), the closest element on its right with a higher frequency is 5.\n- For arr[3] (3), the closest element on its right with a higher frequency is 2.\n- For arr[4] (2), the closest element on its right with a higher frequency is 5.\n- For arr[5] (5), there is no element on the right with a higher frequency so -1.\n- For arr[6] (5), there is no element on the right with a higher frequency so -1.\n- For arr[7] (4), the closest element on its right with a higher frequency is 5.\n- For arr[8] (5), there is no element on the right with a higher frequency so -1.\n- For arr[9] (2), there is no element on the right with a higher frequency so -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Store frequencies of all elements in a hashmap.</span></p>\n\n<p><span style=\"font-size:18px\">Use a stack to find next greater value for all elements.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    // Function to find the next greater frequency element for each element in the array\n    vector<int> print_next_greater_freq(int arr[],int n)\n    {\n        // Create a frequency map to store the frequency of each element\n        unordered_map <int,int> freq;\n        \n        // Traverse the input array\n        for(int i=0; i<n; i++)\n        {\n            // If the element is not present in the frequency map, add it with frequency 1\n            if(freq.find(arr[i])==freq.end())\n                freq[arr[i]]=1;\n            \n            // If the element is already present in the frequency map, increment its frequency\n            else\n                freq[arr[i]]++;\n        }\n        \n        // Create a stack to track the indices of elements\n        stack <int> stak;\n        \n        // Create a vector to store the next greater frequency element for each element\n        vector<int> ngf(n);\n        \n        // Traverse the input array again\n        for(int i=0; i<n; i++)\n        {\n            // Get the frequency of the current element\n            int temp=freq[arr[i]];\n            \n            // Check if the stack is empty or not\n            while(!stak.empty())\n            {\n                // If the frequency of the current element is greater than the frequency of the element at the top of the stack,\n                // update the next greater frequency element for the element at the top of the stack and pop the stack\n                if( temp > freq[ arr[stak.top()] ] )\n                {\n                    ngf[stak.top()] = arr[i];\n                    stak.pop();\n                }\n                // If the frequency of the current element is not greater than the frequency of the element at the top of the stack,\n                // break the loop\n                else\n                    break;\n            }\n            \n            // Push the index of the current element into the stack\n            stak.push(i);\n        }\n        \n        // Set the next greater frequency element as -1 for the remaining elements in the stack\n        while(!stak.empty())\n        {\n            ngf[stak.top()] = -1;\n            stak.pop();\n        }\n        \n        // Return the vector containing the next greater frequency elements\n        return ngf;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class solver\n{\n    static int[] print_next_greater_freq(int arr[], int n)\n    {\n        HashMap <Integer,Integer> freq = new HashMap<>();\n        for(int i=0 ; i<n ; i++ )\n            if( freq.containsKey(arr[i]) )\n                freq.put(arr[i], freq.get(arr[i])+1 );\n            else\n                freq.put(arr[i],1);\n        \n        Stack<Integer> stak = new Stack<Integer>();\n        int ngf[] = new int[n];\n        \n        for(int i=0; i<n; i++)\n        {\n            int temp = freq.get(arr[i]);\n            while(stak.empty()==false)\n                if( temp > freq.get( arr[stak.peek()] ) )\n                    ngf[stak.pop()] = arr[i];\n                else\n                    break;\n            stak.push(i);\n        }\n        while(stak.empty()==false)\n            ngf[stak.pop()] = -1;\n        \n        return ngf;\n    }\n}\n\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    def print_next_greater_freq(self,arr,n):\n        #creating a dictionary to store the frequency of each element\n        freq = {}\n        for i in range(n):\n            if arr[i] in freq:\n                freq[arr[i]]+=1\n            else:\n                freq[arr[i]]=1\n        \n        #creating an empty stack to track elements with next greater frequency\n        stack = []\n        #initializing an array with -1 values to store the next greater frequency element for each element\n        ngf = [-1 for _ in range(n)]\n        \n        #iterating through the array to find the next greater frequency element for each element\n        for i in range(n):\n            temp = freq[arr[i]]\n            while len(stack):\n                #if the current element has a greater frequency than the element at the top of the stack,\n                #assign the next greater frequency element as the current element and remove the element from the stack\n                if temp > freq[arr[stack[-1]]]:\n                    ngf[stack[-1]] = arr[i]\n                    stack.pop()\n                else:\n                    break\n            #adding the current index to the stack\n            stack.append(i)\n        \n        #returning the array with the next greater frequency elements\n        return ngf",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {number[]}\n*/\n\nclass Solution {\n    //Function to print next greater frequency element for each element.\n    print_next_greater_freq(arr, n)\n    {\n        //creating a dictionary to store the frequency of each element\n        let freq = {};\n        for (let i = 0; i < n; i++) {\n            if (arr[i] in freq){\n                freq[arr[i]] += 1;\n            }\n            else {\n                freq[arr[i]] = 1;\n            }\n        }\n        \n        //creating an empty stack to track elements with next greater frequency\n        let stack = [];\n        \n        //initializing an array with -1 values to store the next greater frequency element for each element\n        let ngf = new Array(n).fill(-1);\n        \n        //iterating through the array to find the next greater frequency element for each element\n        for (let i = 0; i < n; i++) {\n            let temp = freq[arr[i]];\n            while (stack.length > 0) {\n                //if the current element has a greater frequency than the element at the top of the stack,\n                //assign the next greater frequency element as the current element and remove the element from the stack\n                if (temp > freq[arr[stack[stack.length-1]]]) {\n                    ngf[stack[stack.length-1]] = arr[i];\n                    stack.pop();\n                }\n                else {\n                    break;\n                }\n            }\n            //adding the current index to the stack\n            stack.push(i);\n        }\n        \n        //returning the array with the next greater frequency elements\n        return ngf;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}