{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713148,
            "title": "Next Greater Element in Circular Array",
            "titleSlug": "next-greater-element",
            "content": "<p><span style=\"font-size: 18px;\">Given a circular integer array <strong>arr[]</strong>, the task is to determine the next greater element <strong>(NGE)</strong> for each element in the array.</span></p>\n<p><span style=\"font-size: 18px;\">The next greater element of an element <strong>arr[i]</strong> is the first element that is greater than <strong>arr[i]</strong> when traversing circularly. If no such element exists, return <strong>-1</strong> for that position.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Circular Property:</span></strong></p>\n<p><span style=\"font-size: 18px;\">Since the array is circular, after reaching the last element, the search continues from the beginning until we have looked at all elements once</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:&nbsp;</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [1 3 2 4]\n<strong>Output</strong>: [3 4 4 -1]\n<strong>Explanation</strong>:<br /></span><span style=\"font-size: 18px;\">The next greater element for 1 is 3.\nThe next greater element for 3 is 4.\nThe next greater element for 2 is 4.\nThe next greater element for 4 does not exist, so return -1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input</strong><span style=\"font-size: 18px;\">: arr[] = [0 2 3 1 1]\n</span><strong style=\"font-size: 18px;\">Output</strong><span style=\"font-size: 18px;\">: [2 3 -1 2 2]\n<strong>Explanation:\n</strong>The next greater element for 0 is 2.\nThe next greater element for 2 is 3.\nThe next greater element for 3 does not exist, so return -1.\nThe next greater element for 1 is 2 (from circular traversal).\nThe next greater element for 1 is 2 (from circular traversal). </span></span></pre>\n<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><sup><br /></sup></span></span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">0 &lt;= arr[i] &lt;= 10<sup>9</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a circular integer array `arr[]`, find the Next Greater Element (NGE) for each element. The NGE of `arr[i]` is the first element greater than it when traversing the array circularly. If no such element exists, return -1.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[1, 3, 2, 4]",
                        "output": "[3, 4, 4, -1]",
                        "explanation": "For 1, the NGE is 3. For 3, it's 4. For 2, it's 4. 4 has no NGE in the circular array."
                    },
                    {
                        "input": "[0, 2, 3, 1, 1]",
                        "output": "[2, 3, -1, 2, 2]",
                        "explanation": "For 0, the NGE is 2. For 2, it's 3.  3 has no NGE. For the first 1, the NGE (found circularly) is 2. For the second 1, the NGE (found circularly) is also 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to solve using stack.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> nextLargerElement(vector<int> &arr) {\n        int n = arr.size();\n        vector<int> res(n, -1);\n        stack<int> stk;\n\n        // Traverse the array from right to left\n        for (int i = 2 * n - 1; i >= 0; i--) {\n\n            // Pop elements from the stack that are less\n            // than or equal to the current element\n            while (!stk.empty() && stk.top() <= arr[i % n]) {\n                stk.pop();\n            }\n\n            // If the stack is not empty, the top element\n            // is the next greater element\n            if (i < n && !stk.empty()) {\n                res[i] = stk.top();\n            }\n\n            // Push the current element onto the stack\n            stk.push(arr[i % n]);\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public ArrayList<Integer> nextLargerElement(int[] arr) {\n        int n = arr.length;\n        ArrayList<Integer> res = new ArrayList<>(Collections.nCopies(n, -1));\n        Stack<Integer> stk = new Stack<>();\n\n        // Traverse the array from right to left (twice for circular behavior)\n        for (int i = 2 * n - 1; i >= 0; i--) {\n\n            // Pop elements from stack that are less than or equal to current element\n            while (!stk.isEmpty() && stk.peek() <= arr[i % n]) {\n                stk.pop();\n            }\n\n            // If i is within the first n elements, store the next greater element\n            if (i < n && !stk.isEmpty()) {\n                res.set(i, stk.peek());\n            }\n\n            // Push the current element onto the stack\n            stk.push(arr[i % n]);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def nextLargerElement(self, arr):\n        n = len(arr)\n        res = [-1] * n  # Initialize result array with -1\n        stack = []\n\n        # Traverse the array twice to handle circular property\n        for i in range(2 * n - 1, -1, -1):\n            while stack and stack[-1] <= arr[i % n]:\n                stack.pop()\n\n            # If within the first pass, update result\n            if i < n and stack:\n                res[i] = stack[-1]\n\n            # Push the current element onto the stack\n            stack.append(arr[i % n])\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    nextLargerElement(arr) {\n        let n = arr.length;\n        let res = new Array(n).fill(-1); // Initialize result array with -1\n        let stack = [];\n\n        // Traverse the array twice to handle the circular property\n        for (let i = 2 * n - 1; i >= 0; i--) {\n            while (stack.length > 0 && stack[stack.length - 1] <= arr[i % n]) {\n                stack.pop();\n            }\n\n            // If within the first pass, update result\n            if (i < n && stack.length > 0) {\n                res[i] = stack[stack.length - 1];\n            }\n\n            // Push the current element onto the stack\n            stack.push(arr[i % n]);\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}