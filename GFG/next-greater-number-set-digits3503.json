{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702794,
            "title": "Next greater number set digits",
            "titleSlug": "next-greater-number-set-digits3503",
            "content": "<p><span style=\"font-size: 18px;\">Given a number n, find the smallest number that has the same set of digits as n and is greater than n.&nbsp;If n&nbsp;is the greatest possible number with its set of digits, report it.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 143\n<strong>Output:</strong> 314\n<strong>Explanation</strong>: Numbers possible with digits\n1, 3 and 4 are: 134, <strong>143</strong>, <strong>314</strong>, 341, 413, 431.\nThe first greater number after 143 is 314.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 431\n<strong>Output:</strong> not possible\n<strong>Explanation</strong>: Numbers possible with digits\n1, 3 and 4 are: 134, 143, 314, 341, 413, 431.\nClearly, there's no number greater than 431.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>findNext ()&nbsp;</strong>which takes an integer N&nbsp;as input and returns the smallest number greater than N&nbsp;with the same set of digits as N. If such a number is not possible, return -1.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(LogN).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(LogN).</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N&nbsp;&le; 100000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Following are few observations about the next greater number.<br />\n1) If all digits sorted in descending order, then output is always &ldquo;Not Possible&rdquo;. For example, 4321.<br />\n2) If all digits are sorted in ascending order, then we need to swap last two digits. For example, 1234.<br />\n3) For other cases, we need to process the number from rightmost side (why? because we need to find the smallest of all greater numbers)</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "microsoft",
            "samsung",
            "snapdeal",
            "hike",
            "adobe",
            "zillious",
            "oxigen-wallet",
            "vizury-interactive-solutions"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\nclass Solution\r\n{\r\n    public:\r\n    int findNext (int N) \r\n    {\r\n        string number = to_string (N);\r\n        int n = number.length ();\r\n        int i, j; \r\n      \r\n        // I) Start from the right most digit and find the first digit that is \r\n        // smaller than the digit next to it. \r\n        for (i = n-1; i > 0; i--) \r\n            if (number[i] > number[i-1]) \r\n               break; \r\n      \r\n        // If no such digit is found, then all digits are in descending order \r\n        // means there cannot be a greater number with same set of digits \r\n        if (i==0) \r\n        { \r\n            return -1;\r\n        } \r\n      \r\n        // II) Find the smallest digit on right side of (i-1)'th digit that is \r\n        // greater than number[i-1] \r\n        int x = number[i-1], smallest = i; \r\n        for (j = i+1; j < n; j++) \r\n            if (number[j] > x && number[j] < number[smallest]) \r\n                smallest = j; \r\n      \r\n        // III) Swap the above found smallest digit with number[i-1] \r\n        swap(number[smallest], number[i-1]); \r\n      \r\n        // IV) Sort the digits after (i-1) in ascending order \r\n        sort(number.begin () + i, number.begin () + n); \r\n      \r\n        return stoi (number);\r\n    }  \r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def findNext (self,N):\r\n        number = [int(x) for x in str(N)]\r\n        n = len (number)\r\n        \r\n        # Start from the right most digit and find the first \r\n        # digit that is smaller than the digit next to it \r\n        for i in range(n-1,0,-1): \r\n            if number[i] > number[i-1]: \r\n                break\r\n                   \r\n        # If no such digit found,then all numbers are in  \r\n        # descending order, no greater number is possible \r\n        if i == 1 and number[i] <= number[i-1]: \r\n            return -1\r\n               \r\n        # Find the smallest digit on the right side of  \r\n        # (i-1)'th digit that is greater than number[i-1] \r\n        x = number[i-1] \r\n        smallest = i \r\n        for j in range(i+1,n): \r\n            if number[j] > x and number[j] < number[smallest]: \r\n                smallest = j \r\n               \r\n        # Swapping the above found smallest digit with (i-1)'th \r\n        number[smallest],number[i-1] = number[i-1], number[smallest] \r\n           \r\n        # X is the final number, in integer datatype  \r\n        x = 0\r\n        # Converting list upto i-1 into number \r\n        for j in range(i): \r\n            x = x * 10 + number[j] \r\n           \r\n        # Sort the digits after i-1 in ascending order \r\n        number = sorted(number[i:]) \r\n        # converting the remaining sorted digits into number \r\n        for j in range(n-i): \r\n            x = x * 10 + number[j] \r\n           \r\n        return x",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    public int findNext(int N) {\n        char[] number = N.ToString().ToCharArray();\n        int n = number.Length;\n        int i, j;\n\n        // I) Start from the right most digit and find the first digit that is\n        // smaller than the digit next to it.\n        for (i = n - 1; i > 0; i--)\n            if (number[i] > number[i - 1]) break;\n\n        // If no such digit is found, then all digits are in descending order\n        // means there cannot be a greater number with same set of digits\n        if (i == 0) {\n            return -1;\n        }\n\n        // II) Find the smallest digit on right side of (i-1)'th digit that is\n        // greater than number[i-1]\n        int smallest = i;\n        for (j = i + 1; j < n; j++)\n            if (number[j] > number[i - 1] && number[j] < number[smallest]) smallest = j;\n\n        // III) Swap the above found smallest digit with number[i-1]\n        char temp = number[smallest];\n        number[smallest] = number[i - 1];\n        number[i - 1] = temp;\n\n        // IV) Sort the digits after (i-1) in ascending order\n        Array.Sort(number, i, n - i);\n\n        long result = long.Parse(new string(number));\n\n        // Check if the result can fit in an int\n        if (result > int.MaxValue || result <= N) {\n            return -1;\n        }\n\n        return (int)result;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}