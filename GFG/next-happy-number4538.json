{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704464,
            "title": "Next Happy Number",
            "titleSlug": "next-happy-number4538",
            "content": "<p><span style=\"font-size: 18px;\">For a given non-negative integer <strong>N</strong>, find the next smallest Happy Number. A number is called <strong>Happy</strong> if it leads to 1 after a <strong>sequence of steps</strong>. Wherein at each step the number is replaced by the sum of squares of its digits that is, if we start with Happy Number and keep replacing it with sum of squares of its digits, we reach 1 at some point. </span><br />&nbsp;<br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 8<strong>\nOutput:\n</strong>10<strong>\nExplanation:</strong>\nNext happy number after 8 is 10 since\n1*1 + 0*0 = 1</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 10<strong>\nOutput\n</strong>13<strong>\nExplanation:\n</strong>After 10, 13 is the smallest happy number because\n1*1 + 3*3 = 10, so we replace 13 by 10 and 1*1 + 0*0 = 1</span><span style=\"font-size: 18px;\">.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>nextHappy()</strong>&nbsp;which takes&nbsp;an integer&nbsp;<strong>N</strong>&nbsp;as input parameters&nbsp;and returns an integer, next Happy number after N.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(Nlog<sub>10</sub>N)<br /><strong>Expected Space Complexity:</strong> O(1)</span><br />&nbsp;<br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=N&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If the same number occurs again we flag result as not happy.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    int isHappy(int N){\n        if (N == 1 || N == 7) \n            return 1; \n        int sum = N, x = N; \n  \n        // this loop executes till the sum of square of \n        // digits obtained is not a single digit number \n        while(sum > 9) { \n            sum = 0; \n  \n            // this loop finds the sum of square of digits \n            while (x > 0) { \n                int d = x%10; \n                sum += d*d; \n                x/=10; \n            } \n            if (sum == 1) \n                return 1; \n            x = sum; \n        } \n        if(sum == 7) \n            return 1; \n        return 0;\n    }\n    // function to find next happy number \n    int nextHappy(int N)\n    {   \n        int x=N+1;\n        int res=x;\n        // check for every name\n        while(1)\n        {\n            if(isHappy(x))\n                return x;\n            x++;\n            res=x;\n        }\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution { \n  \n     static int isHappy(int N) { \n        if (N == 1 || N == 7) \n            return 1; \n        int sum = N, x = N; \n  \n        // this loop executes till the sum of square of \n        // digits obtained is not a single digit number \n        while(sum > 9) { \n            sum = 0; \n  \n            // this loop finds the sum of square of digits \n            while (x > 0) { \n                int d = x%10; \n                sum += d*d; \n                x/=10; \n            } \n            if (sum == 1) \n                return 1; \n            x = sum; \n        } \n        if(sum == 7) \n            return 1; \n        return 0; \n    } \n    \n    // function to find next happy number \n    static int nextHappy(int N)\n    {   \n        int x=N+1;\n        int res=x;\n        // check for every name\n        while(true)\n        {\n            if(isHappy(x)==1)\n                return x;\n            x++;\n            res=x;\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    def isHappy (self, N):\n        if (N == 1 or N == 7): \n            return 1 \n        sum = N\n        x = N \n        # this loop executes till the sum of square of \n        # digits obtained is not a single digit number \n        while(sum > 9): \n            sum = 0 \n            # this loop finds the sum of square of digits \n            while (x > 0): \n                d = x%10 \n                sum += d*d;\n                x//=10 \n            if (sum == 1) :\n                return 1\n            x = sum\n        if(sum == 7): \n            return 1 \n        return 0\n    \n    # function to find next happy number \n    def nextHappy(self, N):\n        x=N+1;\n        res=x;\n        # check for every name\n        while(True):\n            if self.isHappy(x):\n                return x\n            x+=1\n            res=x\n        \n    ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n  nextHappy(N) {\n    function isHappy(num) {\n      if (num === 1 || num === 7) {\n        return true;\n      }\n\n      let sum = num;\n      let x = num;\n\n      while (sum > 9) {\n        sum = 0;\n\n        while (x > 0) {\n          let digit = x % 10;\n          sum += digit * digit;\n          x = Math.floor(x / 10);\n        }\n\n        if (sum === 1) {\n          return true;\n        }\n\n        x = sum;\n      }\n\n      if (sum === 7) {\n        return true;\n      }\n\n      return false;\n    }\n\n    let x = N + 1;\n\n    while (true) {\n      if (isHappy(x)) {\n        return x;\n      }\n\n      x++;\n    }\n  }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    // function to check if a number is happy or not\n    public bool isHappy(int N)\n    {\n        if (N == 1 || N == 7)\n            return true;\n        int sum = N, x = N;\n\n        // this loop executes till the sum of square of \n        // digits obtained is not a single digit number \n        while (sum > 9)\n        {\n            sum = 0;\n\n            // this loop finds the sum of square of digits \n            while (x > 0)\n            {\n                int d = x % 10;\n                sum += d * d;\n                x /= 10;\n            }\n            if (sum == 1)\n                return true;\n            x = sum;\n        }\n        if (sum == 7)\n            return true;\n        return false;\n    }\n  \n    // function to find next happy number \n    public int nextHappy(int N)\n    {   \n        int x=N+1;\n        \n        // check for every number\n        while(true)\n        {\n            if(isHappy(x))\n                return x;\n            x++;\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}