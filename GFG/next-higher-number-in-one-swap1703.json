{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703473,
            "title": "Next higher number in one swap",
            "titleSlug": "next-higher-number-in-one-swap1703",
            "content": "<p><span style=\"font-size:18px\">Given a non-negative number <strong>num&nbsp;</strong>in the form of string. The task is to apply at most one swap operation on the number <strong>num&nbsp;</strong>so that the result is the next higher number.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>num = &quot;768&quot;\n<strong>Output:</strong> &quot;786&quot;\n<strong>Explanation</strong>: This is next higher\nnumber that we can get.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>num = &quot;333&quot;\n<strong>Output:</strong> &quot;-1&quot;\n<strong>Explanation</strong>: There is no higher\nnumber than 333. \n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>nxtHighUsingAtMostOneSwap()</strong>&nbsp;which takes the string <strong>num&nbsp;</strong>as inputs and returns the answer.<br />\n<br />\n<strong>Expected Time Complexity:</strong>&nbsp;O(|num|)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &le; |num| &le; 10<sup>5</sup></span></p>\n\n<p><span style=\"font-size:18px\">|num| denotes the length of the string num.</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative number represented as a string, find the next higher number that can be obtained by performing at most one swap operation. If no such number exists, return '-1'.",
                "constraints": [
                    "1 <= |num| <= 10^5, where |num| is the length of the input string num."
                ],
                "testcases": [
                    {
                        "input": "768",
                        "output": "786",
                        "explanation": "Swapping '6' and '8' results in the next higher number."
                    },
                    {
                        "input": "333",
                        "output": "-1",
                        "explanation": "No possible swap operation can produce a higher number."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>First find the index of the rightmost digit which has a digit larger than it and is on the right side to it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to find the next higher number by using at most one swap\nstring nxtHighUsingAtMostOneSwap(string num) {\n    int l = num.size(); // calculate the length of the number\n    \n    int posRMax = l-1; // initialize the position of the rightmost maximum number\n\n    int index = -1; // initialize the index to -1\n    // loop from right to left to find the first number that is smaller than its right neighbor\n    for (int i=l-2; i>=0; i--) { \n        if (num[i] >= num[posRMax]) \n            posRMax = i;  \n        else { \n            index = i; // store the index of the smaller number\n            break; \n        }     \n    } \n\n    if (index == -1) // if no such number found, return -1\n        return \"-1\"; \n\n    int greatSmallDgt = -1; // initialize the index of the next greater smaller digit\n    \n    // loop from right to left to find the smallest number that is greater than the smaller number found in the previous loop\n    for (int i=l-1; i>index; i--) { \n        if (num[i] > num[index]) { \n            if (greatSmallDgt == -1) \n                greatSmallDgt = i; // store the index of the first greater smaller digit found\n            else if (num[i] <= num[greatSmallDgt])     \n                greatSmallDgt = i; // update the index if a smaller greater smaller digit is found\n        } \n    } \n\n    char temp = num[index]; // swap the smaller number with the smallest greater smaller digit found\n    num[index] = num[greatSmallDgt]; \n    num[greatSmallDgt] = temp; \n\n    return num; // return the next higher number\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution{\n    public string nxtHighUsingAtMostOneSwap(string num) { \n        int l = num.Length; // calculate the length of the number\n\n        int posRMax = l-1; // initialize the position of the rightmost maximum number\n\n        int index = -1; // initialize the index to -1\n        // loop from right to left to find the first number that is smaller than its right neighbor\n        for (int i=l-2; i>=0; i--) { \n            if (num[i] >= num[posRMax]) \n                posRMax = i;  \n            else { \n                index = i; // store the index of the smaller number\n                break; \n            }     \n        } \n\n        if (index == -1) // if no such number found, return -1\n            return \"-1\"; \n\n        int greatSmallDgt = -1; // initialize the index of the next greater smaller digit\n\n        // loop from right to left to find the smallest number that is greater than the smaller number found in the previous loop\n        for (int i=l-1; i>index; i--) { \n            if (num[i] > num[index]) { \n                if (greatSmallDgt == -1) \n                    greatSmallDgt = i; // store the index of the first greater smaller digit found\n                else if (num[i] <= num[greatSmallDgt])     \n                    greatSmallDgt = i; // update the index if a smaller greater smaller digit is found\n            } \n        } \n\n        char temp = num[index]; // swap the smaller number with the smallest greater smaller digit found\n        char[] charArray = num.ToCharArray();\n        charArray[index] = num[greatSmallDgt];\n        charArray[greatSmallDgt] = temp;\n        num = new string(charArray);\n\n        return num; // return the next higher number\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}