{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703481,
            "title": "Next higher palindromic number using the same set of digits",
            "titleSlug": "next-higher-palindromic-number-using-the-same-set-of-digits5859",
            "content": "<p><span style=\"font-size:18px\">Given a palindromic number <strong>N</strong><strong> </strong>in<strong> </strong>the form of string. The task is to find the smallest palindromic number greater than <strong>N</strong> using the same set of digits as in <strong>N</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nN =<strong> &quot;</strong>35453&quot;\r\n<strong>Output:</strong> \r\n53435\r\n<strong>Explanation</strong>: Next higher palindromic \r\nnumber is 53435.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input: </span></strong><span style=\"font-size:18px\">N = &quot;33&quot;\r\n<strong>Output: </strong>-1\r\n<strong>Explanation: </strong>Next higher palindromic number \r\ndoes not exist.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>nextPalin()</strong>&nbsp;which takes the string <strong>N&nbsp;</strong>as input parameters&nbsp;and returns the answer, else if no such number exists returns &quot;-1&quot;.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(|N|log|N|)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; |N| &le; 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a palindromic number N represented as a string, find the smallest palindromic number greater than N using the same set of digits as in N.",
                "constraints": [
                    "1 <= |N| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "35453",
                        "output": "53435",
                        "explanation": "The next largest palindromic number formed using the same digits as 35453 is 53435."
                    },
                    {
                        "input": "33",
                        "output": "-1",
                        "explanation": "No larger palindromic number can be formed using the same digits as 33."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Given Number =&nbsp;N[0&nbsp;to L - 1], L is the length of the string N.</span></p>\n\n<p><span style=\"font-size:18px\">Try to find the next higher number of&nbsp;the substring N[0&nbsp;to mid - 1], where mid = floor(L/2)</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "palindrome",
                "slug": "palindrome"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft",
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template for C++\n\nclass Solution{\n  public:\n    // Function to find the next palindrome number.\n    string nextPalin(string N) { \n        int n=N.length();\n        int mid=(n/2)-1;\n        int pos=-1;\n        \n        // Finding the rightmost digit that is smaller than the adjacent digit.\n        for(int i=mid;i>=1;i--){\n            if(N[i-1]<N[i]){\n                pos=i-1;\n                break;\n            }\n        }\n        \n        // If no such digit is found, then it is not possible to find the next palindrome number.\n        if(pos==-1){\n            return \"-1\";\n        }\n        \n        int numPos=-1;\n        // Finding the smallest digit greater than the digit at the rightmost smaller digit.\n        for(int i=pos+1;i<=mid;i++){\n            if(N[i]>N[pos]){\n               \n               // If there is no previous smallest digit, assign it to numPos.\n               if(numPos==-1){\n                   numPos=i;\n               }\n               else{\n                   // If there is a previous smallest digit, compare it with the current digit to find the smallest.\n                   if(N[i]<N[numPos]){\n                       numPos=i;\n                   }\n               }\n               \n            }\n        }\n    \n        // Swapping the small digit with the digit at rightmost smaller digit.\n        swap(N[pos],N[numPos]);\n        // Sorting the digits from digit next to rightmost smaller digit to mid.\n        sort(N.begin()+pos+1,N.begin()+mid+1);\n        int i=0;\n        int j=n-1;\n        // Create a palindrome number by mirroring the digits from 0 to mid.\n        while(i<=mid){\n            N[j]=N[i];\n            i++;\n            j--;\n        }\n        return N;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Backend complete function template for JAVA\n\nclass Solution {\n    public String nextPalin(String S) {\n        int n = S.length();\n        char[] N = new char[n]; // Create a character array to store the characters of string S\n        \n        for (int i = 0; i < n; i++) {\n            N[i] = S.charAt(i); // Store each character of string S into the character array N\n        }\n\n        int mid = (n / 2) - 1; // Calculate the index of the middle character\n        int pos = -1; // Variable to store the index of the first character to be changed\n        \n        // Find the largest index pos such that N[pos] < N[pos + 1]\n        for (int i = mid; i >= 1; i--) {\n            if (N[i - 1] < N[i]) {\n                pos = i - 1;\n                break;\n            }\n        }\n        \n        // If pos == -1, it means no such index pos exists, return \"-1\"\n        if (pos == -1) {\n            return \"-1\";\n        }\n\n        int numPos = -1; // Variable to store the index of the number to replace N[pos]\n        \n        // Find the smallest index numPos such that N[numPos] > N[pos]\n        for (int i = pos + 1; i <= mid; i++) {\n            if (N[i] > N[pos]) {\n               \n                if (numPos == -1) {\n                    numPos = i;\n                } else {\n                    // If N[i] < N[numPos], update numPos to i\n                    if (N[i] < N[numPos]) {\n                        numPos = i;\n                    }\n                }\n            }\n        }\n    \n        // Swap N[pos] with N[numPos]\n        char temp = N[pos];\n        N[pos] = N[numPos];\n        N[numPos] = temp;\n        \n        // Sort the characters from index pos+1 to mid in ascending order\n        Arrays.sort(N, pos + 1, mid + 1);\n\n        int i = 0;\n        int j = n - 1;\n        \n        // Create the palindrome string by assigning characters from N[i] to N[j]\n        while (i <= mid) {\n            N[j] = N[i];\n            i++;\n            j--;\n        }\n\n        return new String(N); // Return the palindrome string\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# Backend complete function template for Python\n\nclass Solution:\n    # Function to find the next palindrome number\n    def nextPalin(self, S):\n        n = len(S)\n        N = list(S)\n        \n        # Finding the middle index\n        mid=(n//2)-1\n        \n        # Initializing position variable\n        pos=-1\n        \n        # Finding the rightmost digit which is smaller than its next digit\n        for i in range(mid,0,-1):\n            \n            if N[i-1]<N[i] : \n                pos=i-1\n                break\n        \n        # If no such digit found, return -1\n        if pos==-1 : \n            return \"-1\"\n        \n        # Initializing number position variable\n        numPos=-1\n        \n        # Finding the smallest digit greater than the digit at position pos\n        for i in range(pos+1,mid+1):\n            \n            if N[i]>N[pos]:\n                # If number position not found, assign the first number position found\n                if numPos==-1 :\n                    numPos=i\n                else :\n                    # Update number position if found digit is smaller than current number position digit\n                    if N[i]<N[numPos] :\n                        numPos=i\n    \n        # Swapping the digits at positions pos and numPos\n        temp = N[pos]\n        N[pos]=N[numPos]\n        N[numPos]=temp\n\n        # Sorting the digits from pos+1 to mid+1\n        N[pos+1:mid+1] = sorted(N[pos+1:mid+1])\n        \n        # Repeating the first half of the number in the second half to make it a palindrome\n        i=0\n        j=n-1\n        while i<=mid :\n            N[j]=N[i]\n            i+=1\n            j-=1\n        \n        # Returning the next palindrome number as a string\n        return ''.join(N)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}