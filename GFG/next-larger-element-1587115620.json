{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701343,
            "title": "Next Greater Element",
            "titleSlug": "next-larger-element-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[ ]</strong> of integers, the task is to find the next greater element for each element of the array in order of their appearance in the array. Next greater element of an element in the array is the nearest element on the right which is greater than the current element.<br />If there does not exist next greater of current element, then next greater element for current element is -1. For example, next greater of the last element is always -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples<br /></strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [1, 3, 2, 4]\n<strong>Output</strong>: [3, 4, 4, -1]\n<strong>Explanation</strong>: The next larger element to 1 is 3, 3 is 4, 2 is 4 and for 4, since it doesn't exist, it is -1.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [6, 8, 0, 1, 3]\n<strong>Output</strong>: [8, -1, 1, 3, -1]\n<strong>Explanation</strong>: The next larger element to 6 is 8, for 8 there is no larger elements hence it is -1, for 0 it is 1 , for 1 it is 3 and then for 3 there is no larger element on right and hence -1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [10, 20, 30, 50]\n<strong>Output</strong>: [20, 30, 50, -1]\n<strong>Explanation</strong>: For a sorted array, the next element is next greater element also exxept for the last element.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input</strong><span style=\"font-size: 18px;\">: arr[] = [50, 40, 30, 10]\n</span><strong style=\"font-size: 18px;\">Output</strong><span style=\"font-size: 18px;\">: [-1, -1, -1, -1]\n</span><strong style=\"font-size: 18px;\">Explanation</strong><span style=\"font-size: 18px;\">: There is no greater element for any of the elements in the array, so all are -1.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try to use the stack data structure to track the next greater elements.&nbsp;</span></p>",
            "<p><span >Traverse the array from right to left, updating the stack and storing results as you go.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "makemytrip",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to return Next larger elements\nclass Solution {\n  public:\n    // Function to find the next greater element for each element of the array.\n    vector<int> nextLargerElement(vector<int>& arr) {\n        int n = arr.size();\n        stack<int> s;\n        vector<int> res(n);\n\n        // Traversing the array from the last element in a backward direction.\n        for (int i = n - 1; i >= 0; i--) {\n            // While element at the top of the stack is less than or equal to\n            // the current array element, pop elements from the stack.\n            while (!s.empty() && s.top() <= arr[i]) {\n                s.pop();\n            }\n\n            // If stack becomes empty, store -1 in the result list\n            // else store the top element of the stack.\n            res[i] = s.empty() ? -1 : s.top();\n\n            // Push the current array element into the stack.\n            s.push(arr[i]);\n        }\n        // Returning the result.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the next greater element for each element of the array.\n    public ArrayList<Integer> nextLargerElement(int[] arr) {\n        int n = arr.length; // Defining the length of the array\n        Stack<Integer> s = new Stack<>();\n        ArrayList<Integer> nge =\n            new ArrayList<>(n); // Initialize ArrayList with initial capacity\n\n        // Add a default value to the ArrayList to maintain the index consistency\n        for (int i = 0; i < n; i++) {\n            nge.add(-1); // Fill with default value (-1)\n        }\n\n        // Traversing the array from the last element in a backward direction.\n        for (int i = n - 1; i >= 0; i--) {\n            // While element at top of stack is less than or equal to\n            // the current array element, pop elements from the stack.\n            while (!s.empty() && s.peek() <= arr[i]) {\n                s.pop();\n            }\n            // If stack becomes empty, the default value (-1) remains in the list,\n            // else store the top element of the stack.\n            if (!s.empty()) {\n                nge.set(i, s.peek()); // Update the specific index\n            }\n\n            // Push the current array element into the stack.\n            s.push(arr[i]);\n        }\n        // Returning the result.\n        return nge;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\nfrom collections import deque\n\n\nclass Solution:\n    # Function to find the next greater element for each element of the array.\n    def nextLargerElement(self, arr):\n        n = len(arr)  # Define the length of the array\n        s = deque()\n        res = [0] * n  # Initialize the result list with size n\n\n        # Traversing the array from the last element in backward direction.\n        for i in range(n - 1, -1, -1):\n            # While element at the top of the stack is less than or equal to\n            # current array element, pop elements from the stack.\n            while len(s) and s[-1] <= arr[i]:\n                s.pop()\n\n            # If stack becomes empty, store -1 in the result list\n            # else store the top element of the stack.\n            res[i] = -1 if not len(s) else s[-1]\n\n            # Push the current array element into the stack.\n            s.append(arr[i])\n\n        # Returning the result list.\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    // Function to find the next greater element for each element of the array.\n    public int[] nextLargerElement(int[] arr) {\n        int n = arr.Length; // Define the length of the array\n        Stack<int> s = new Stack<int>();\n        int[] nge = new int[n]; // Initialize the result array with size n\n\n        // Traversing the array from the last element in backward direction.\n        for (int i = n - 1; i >= 0; i--) {\n            // While element at the top of the stack is less than or equal to\n            // the current array element, pop elements from the stack.\n            while (s.Count > 0 && s.Peek() <= arr[i]) {\n                s.Pop();\n            }\n\n            // If the stack is empty, store -1 in the result list,\n            // else store the top element of the stack.\n            nge[i] = s.Count == 0 ? -1 : s.Peek();\n\n            // Pushing the current array element into the stack.\n            s.Push(arr[i]);\n        }\n\n        // Returning the result array.\n        return nge;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function template for JavaScript\n\n/**\n * @param {int[]} arr\n * @returns {int[]}\n */\nclass Solution {\n    // Function to find the next greater element for each element of the array.\n    nextLargerElement(arr) {\n        let n = arr.length;     // Define length of the array\n        let s = [];             // Stack to store elements\n        let res = new Array(n); // Result array of the same length as arr\n\n        // Traversing the array from last element in backward direction.\n        for (let i = n - 1; i >= 0; i--) {\n            // While element at top of stack is less than or equal to\n            // current array element, pop elements from the stack.\n            while (s.length !== 0 && s[s.length - 1] <= arr[i]) {\n                s.pop();\n            }\n\n            // If the stack becomes empty, we store -1 in the result list,\n            // else we store the top element of the stack.\n            res[i] = s.length === 0 ? -1 : s[s.length - 1];\n\n            // Push the current array element into the stack.\n            s.push(arr[i]);\n        }\n\n        // Returning the result array.\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}