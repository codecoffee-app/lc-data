{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705603,
            "title": "Next Optimal Move in Tic Tac Toe",
            "titleSlug": "next-optimal-move-in-tic-tac-toe2842",
            "content": "<p><span style=\"font-size:18px\">You are given a middle game situation of the game <a href=\"https://en.wikipedia.org/wiki/Tic-tac-toe\">Tic Tac Toe</a>. It is given that it is player &quot;X&#39;s&quot; turn and you need to give to most optimal position for the turn. The situation is given as a 3 x 3 character matrix <strong>board</strong>. &#39;_&#39; refers to the place is empty. &#39;o&#39; refers that player O marked it in his turn at some time and &#39;x&#39; refers that player X marked it in his turn at some time. It is player X&#39;s turn. Tell him the most optimal solution.(Assume player O played first).&nbsp;</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> board = {{o, _, _}, \n&nbsp;\\t\\t   {_, _, _}, \n&nbsp;\\t\\t   {_, _, _}}\n<strong>Output:</strong> 1 1\n<strong>Explaination:</strong> Placing a &#39;x&#39; in the (1, 1) \nthat is the center of the board is the most \noptimal approach for x.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>findBestMove()</strong> which takes board as input parameter and returns the best optimal move in a list where the first one is the row index and the second one is the column index.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(2<sup>9</sup>)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\nboard[i][j] = &#39;o&#39; / &#39;x&#39; / &#39;_&#39;&nbsp;&nbsp;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Tic Tac Toe board representing a middle game situation where it is player 'X's turn, determine the optimal move for 'X'. The board is a 3x3 character matrix where '_' denotes an empty cell, 'o' denotes a cell marked by player O, and 'x' denotes a cell marked by player X. Assume player O played first.",
                "constraints": [
                    "board[i][j] = 'o' / 'x' / '_'"
                ],
                "testcases": [
                    {
                        "input": "{{\"o\", \"_\", \"_\"}, {\"_\", \"_\", \"_\"}, {\"_\", \"_\", \"_\"}}",
                        "output": "1 1",
                        "explanation": "Placing 'x' in the center of the board (1, 1) is generally considered the most optimal strategic move in this situation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use concept of backtracking and chances of win and draw and lose to find the best move.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Misc",
                "slug": "misc"
            }
        ],
        "companies": [
            "accolite"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    char player = 'x', opponent = 'o';\n \n    bool isMovesLeft(char board[3][3]){\n        for (int i = 0; i<3; i++)\n            for (int j = 0; j<3; j++)\n                if (board[i][j]=='_')\n                    return true;\n        return false;\n    }\n    \n    int evaluate(char b[3][3]){\n        for (int row = 0; row < 3; row++){\n            if (b[row][0] == b[row][1] && b[row][1] == b[row][2]){\n                if (b[row][0]==player)\n                    return +10;\n                else if (b[row][0]==opponent)\n                    return -10;\n            }\n        }\n     \n        for (int col = 0; col < 3; col++){\n            if (b[0][col] == b[1][col] && b[1][col] == b[2][col]){\n                if (b[0][col]==player)\n                    return +10;\n                else if (b[0][col]==opponent)\n                    return -10;\n            }\n        }\n        if (b[0][0] == b[1][1] && b[1][1] == b[2][2]){\n            if (b[0][0]==player)\n                return +10;\n            else if (b[0][0]==opponent)\n                return -10;\n        }\n     \n        if (b[0][2] == b[1][1] && b[1][1] == b[2][0]){\n            if (b[0][2] == player)\n                return +10;\n            else if (b[0][2] == opponent)\n                return -10;\n        }\n        return 0;\n    }\n    \n    int minimax(char board[3][3], int depth, bool isMax){\n        int score = evaluate(board);\n        if (score == 10)\n            return score;\n        if (score == -10)\n            return score;\n        if (isMovesLeft(board) == false)\n            return 0;\n        if (isMax){\n            int best = -1000;\n            for (int i = 0; i < 3; i++){\n                for (int j = 0; j < 3; j++){\n                    if (board[i][j] == '_'){\n                        board[i][j] = player;\n                        best = max( best, minimax(board, depth+1, !isMax) );\n                        board[i][j] = '_';\n                    }\n                }\n            }\n            return best;\n        }\n        else{\n            int best = 1000;\n            for (int i = 0; i < 3; i++){\n                for (int j = 0; j < 3; j++){\n                    if (board[i][j] == '_'){\n                        board[i][j] = opponent;\n                        best = min(best, minimax(board, depth+1, !isMax));\n                        board[i][j] = '_';\n                    }\n                }\n            }\n            return best;\n        }\n    }\n    \n    vector<int> findBestMove(char board[3][3]){\n        int bestVal = -1000;\n        int row = -1, col = -1;\n        vector<int> res;\n        for (int i = 0; i < 3; i++){\n            for (int j = 0; j < 3; j++){\n                if (board[i][j] == '_'){\n                    // Make the move\n                    board[i][j] = player;\n                    int moveVal = minimax(board, 0, false);\n                    // Undo the move\n                    board[i][j] = '_';\n                    if (moveVal > bestVal){\n                        row = i;\n                        col = j;\n                        bestVal = moveVal;\n                    }\n                }\n            }\n        }\n        res.push_back(row);\n        res.push_back(col);\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}