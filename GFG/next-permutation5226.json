{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705146,
            "title": "Next Permutation",
            "titleSlug": "next-permutation5226",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of integers <strong>arr[]</strong> representing a permutation, implement the&nbsp;<strong>next permutation</strong>&nbsp;that rearranges the numbers into the lexicographically next greater permutation. If no such permutation exists, rearrange the numbers into the lowest possible order (i.e., sorted in ascending order).&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">Note - A permutation of an array of integers refers to a specific arrangement of its elements in a sequence or linear order.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr = [2, 4, 1, 7, 5, 0]\n<strong>Output:</strong> [2, 4, 5, 0, 1, 7]\n<strong>Explanation:</strong> The next permutation of the given array is {2, 4, 5, 0, 1, 7}.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr = [3, 2, 1]\n<strong>Output:</strong> [1, 2, 3]\n<strong>Explanation:</strong> As arr[] is the last permutation, the next permutation is the lowest one.<br /></span></pre>\n<pre><strong>Input:</strong> arr = [3, 4, 2, 5, 1]\n<strong>Output:</strong> [3, 4, 5, 1, 2]\n<strong>Explanation:</strong> The next permutation of the given array is {3, 4, 5, 1, 2}.</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">0 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]` representing a permutation, find the lexicographically next greater permutation. If no such permutation exists, rearrange the array into the smallest possible order (ascending order).",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[2, 4, 1, 7, 5, 0]",
                        "output": "[2, 4, 5, 0, 1, 7]",
                        "explanation": "The next lexicographically greater permutation of [2, 4, 1, 7, 5, 0] is [2, 4, 5, 0, 1, 7]."
                    },
                    {
                        "input": "[3, 2, 1]",
                        "output": "[1, 2, 3]",
                        "explanation": "Since [3, 2, 1] is the largest possible permutation, the next permutation is the smallest possible one: [1, 2, 3]."
                    },
                    {
                        "input": "[3, 4, 2, 5, 1]",
                        "output": "[3, 4, 5, 1, 2]",
                        "explanation": "The next lexicographically greater permutation of [3, 4, 2, 5, 1] is [3, 4, 5, 1, 2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to find the largest index <em>k</em>&nbsp;such that&nbsp;<em>a</em>[<em>k</em>] &lt;&nbsp;<em>a</em>[<em>k</em> + 1]. If no such index exists, the permutation is the last permutation.<br /></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "constructive algo",
                "slug": "constructive-algo"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "infosys",
            "flipkart",
            "amazon",
            "microsoft",
            "factset",
            "hike",
            "makemytrip",
            "google",
            "qualcomm",
            "salesforce"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\n// Function to swap two integers\n// Function to swap two integers\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\n// Function to find the next permutation\nvoid nextPermutation(int arr[], int n) {\n    int ind = -1;\n\n    // Finding the first decreasing element from right to left\n    for (int i = n - 2; i >= 0; i--) {\n        if (arr[i] < arr[i + 1]) {\n            ind = i;\n            break;\n        }\n    }\n\n    if (ind != -1) {\n        // Finding the smallest element greater than the element at ind\n        for (int i = n - 1; i > ind; i--) {\n            if (arr[i] > arr[ind]) {\n                swap(&arr[i], &arr[ind]);\n                break;\n            }\n        }\n    }\n\n    // Reversing the elements from ind + 1 to end\n    int start = ind + 1;\n    int end = n - 1;\n    while (start < end) {\n        swap(&arr[start], &arr[end]);\n        start++;\n        end--;\n    }\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the next permutation\n    // vector<int> nextPermutation(vector<int> arr) {\n    void nextPermutation(vector<int>& arr) {\n        int N = arr.size();\n        int ind = 0;\n\n        // Finding the first decreasing element from right to left\n        for (int i = N - 2; i >= 0; i--) {\n            if (arr[i] < arr[i + 1]) {\n                ind = i;\n                break;\n            }\n        }\n\n        // Finding the smallest element greater than the element at ind\n        for (int i = N - 1; i > ind; i--) {\n            if (arr[i] > arr[ind]) {\n                swap(arr[i], arr[ind]);\n                ind++;\n                break;\n            }\n        }\n\n        // Reversing the elements from ind to end\n        for (int i = 0; i < (N - ind) / 2; i++)\n            swap(arr[i + ind], arr[N - i - 1]);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Function to swap elements in the array\n    void swap(int i, int j, int[] arr) {\n        int tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n    }\n\n    // Function to find the next lexicographically greater permutation of the given\n    // array\n    void nextPermutation(int[] arr) {\n        int N = arr.length;\n        // Initializing variables\n        int ind = 0;\n\n        // Finding the largest index i such that arr[i] < arr[i+1]\n        for (int i = N - 2; i >= 0; i--) {\n            if (arr[i] < arr[i + 1]) {\n                ind = i;\n                break;\n            }\n        }\n\n        // Swapping the element at ind with the smallest element greater than it to its\n        // right side\n        for (int i = N - 1; i > ind; i--) {\n            if (arr[i] > arr[ind]) {\n                swap(i, ind, arr);\n                ind++;\n                break;\n            }\n        }\n\n        // Reversing the elements from ind+1 to N-1 to get the next permutation\n        for (int i = 0; i < (N - ind) / 2; i++) {\n            swap(i + ind, N - i - 1, arr);\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend Complete function Template for python3\n\n\nclass Solution:\n\n    #Function to find the next permutation of the array.\n    def nextPermutation(self, arr):\n\n        ind = 0\n        N = len(arr)\n        #iterating from second last element to the first element.\n        #to find the element where the next permutation needs to be done.\n        for i in range(N - 2, -1, -1):\n            #if the current element is smaller than the next element,\n            #then we have found the position to perform the next permutation.\n            if arr[i] < arr[i + 1]:\n                ind = i\n                break\n\n        #iterating from last element to the indth element of the array.\n        #to find the smallest element greater than the element at ind.\n        for i in range(N - 1, ind, -1):\n            #if we find the smallest element, we swap it with the element at ind.\n            if arr[i] > arr[ind]:\n                arr[i], arr[ind] = arr[ind], arr[i]\n                ind += 1\n                break\n\n        #reversing the elements from ind+1 to the end of the array.\n        for i in range((N - ind) // 2):\n            arr[i + ind], arr[N - i - 1] = arr[N - i - 1], arr[i + ind]\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\n\nclass Solution {\n    // Function to find the next permutation\n    public void NextPermutation(int[] arr) {\n        int n = arr.Length;\n        int ind = -1;\n\n        // Finding the first decreasing element from right to left\n        for (int i = n - 2; i >= 0; i--) {\n            if (arr[i] < arr[i + 1]) {\n                ind = i;\n                break;\n            }\n        }\n\n        if (ind != -1) {\n            // Finding the smallest element greater than the element at ind\n            for (int i = n - 1; i > ind; i--) {\n                if (arr[i] > arr[ind]) {\n                    Swap(arr, i, ind);\n                    break;\n                }\n            }\n        }\n\n        // Reversing the elements from ind + 1 to end\n        Reverse(arr, ind + 1, n - 1);\n    }\n\n    // Helper function to swap two elements in the array\n    private void Swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    // Helper function to reverse a portion of the array\n    private void Reverse(int[] arr, int start, int end) {\n        while (start < end) {\n            Swap(arr, start, end);\n            start++;\n            end--;\n        }\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\n// User function Template for javascript\n\n/**\n * @param {Number[]} arr\n */\n\nclass Solution {\n    nextPermutation(arr) {\n        let ind = 0, n = arr.length;\n        for (let i = n - 2; i >= 0; i--) {\n            if (arr[i] < arr[i + 1]) {\n                ind = i;\n                break;\n            }\n        }\n        for (let i = n - 1; i > ind; i--) {\n            if (arr[i] > arr[ind]) {\n                [arr[i], arr[ind]] = [ arr[ind], arr[i] ];\n                ind++;\n                break;\n            }\n        }\n        for (let i = 0; i < (n - ind) / 2; i++)\n            [arr[i + ind], arr[n - i - 1]] = [ arr[n - i - 1], arr[i + ind] ];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}