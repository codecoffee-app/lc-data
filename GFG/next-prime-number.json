{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704414,
            "title": "Next Prime Number",
            "titleSlug": "next-prime-number",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer<strong>&nbsp;n</strong><strong>.&nbsp;</strong>Write a program to find the first prime number greater than <strong>n.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong> <strong> </strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 15\n<strong>Output: </strong>17\n<strong>Explanation: </strong>17 is next prime number.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 7\n<strong>Output: </strong>11\n<strong>Explanation: </strong>11 is the prime number next to 7.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n&nbsp;&lt;= 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer 'n', find the smallest prime number that is strictly greater than 'n'.",
                "constraints": [
                    "1 <= n <= 500"
                ],
                "testcases": [
                    {
                        "input": "15",
                        "output": "17",
                        "explanation": "17 is the first prime number greater than 15."
                    },
                    {
                        "input": "7",
                        "output": "11",
                        "explanation": "11 is the first prime number greater than 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>suppose given number is <strong>n</strong></p>\n\n<p>we have&nbsp;to increase <strong>n</strong>&nbsp;, until we find a prime number.</p>\n\n<p>&nbsp;</p>",
            "<p>we need to find next prime number,</p>\n\n<p>#######################################################</p>\n\n<p>next number = n = n+1</p>\n\n<p>run loop until prime number found:</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;run loop to check whether <strong>n</strong> is prime or not:</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if not prime:</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;break inner loop</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if inner loop is exhausted without break:</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<strong>n</strong> is prime number</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return <strong>n</strong></p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; otherwise check for next <strong>n = n+1</strong></p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\n\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "python-loops",
                "slug": "python-loops"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Java",
                "slug": "java"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nint nextPrime(int n){\n    n++;\n    while(1){\n        int i;\n        for(i = 2; i < n; i++){\n            if(n % i == 0)\n                break;\n        }\n        if(i == n)return n;\n        n++;\n    }\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nint nextPrime(int n){\n    n++;\n    while(true){\n        int i;\n        for(i = 2; i < n; i++){\n            if(n % i == 0)\n                break;\n        }\n        if(i == n)return n;\n        n++;\n    }\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\npublic static int nextPrime(int n){\n    n++;\n    while(true){\n        int i;\n        for(i = 2; i < n; i++){\n            if(n % i == 0)\n                break;\n        }\n        if(i == n)return n;\n        n++;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\ndef nextPrime(n):\n    n= n+1\n    \n    while True:\n        \n        for i in range(2,n):\n            \n            if n%i==0:\n                break\n        else:  #else will execute if loop is exausted without break\n            return n\n        \n        n+=1\n    ",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int nextPrime(int n)\n    {\n        n++;\n        while(true)\n        {\n            bool isPrime = true;\n            for(int i = 2; i < n; i++)\n            {\n                if(n % i == 0)\n                {\n                    isPrime = false;\n                    break;\n                }\n            }\n            if(isPrime) return n;\n            n++;\n        }\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to find the next prime number.\n    nextPrime(n){\n        n= n+1;\n        \n        while (true) {\n        \n            let isPrime = true;\n        \n            for (let i = 2; i < n; i++) {\n            \n                if (n%i === 0) {\n                    isPrime = false;\n                    break;\n                }\n            }\n            \n            if (isPrime) {\n                return n;\n            }\n        \n            n+=1;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}