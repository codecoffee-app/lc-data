{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700606,
            "title": "Next Right Node",
            "titleSlug": "next-right-node",
            "content": "<p><span style=\"font-size:18px\">Given a Binary tree and a key in the binary tree, find the node right to the given key. If there is no node on right side, then return a node with value -1.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:\r\n\r\n</span></strong>\\t <span style=\"font-size:18px\">10\r\n&nbsp;    /    \\\r\n&nbsp;   2\\t6\r\n&nbsp;  / \\\\t\\\r\n&nbsp; 8   4\\t5\r\nand key = 2</span>\r\n<strong><span style=\"font-size:18px\">Output: 6</span></strong>\r\n<strong><span style=\"font-size:18px\">Explanation: </span></strong><span style=\"font-size:18px\">We can see in the above tree</span>\r\n<span style=\"font-size:18px\">that the next right node of 2 is 6.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:</span></strong>\r\n\\t<span style=\"font-size:18px\">10\r\n&nbsp;   /     \\\r\n&nbsp;  2\\t 6\r\n&nbsp; / \\\\t \\\r\n&nbsp;8   4\\t 5\r\nand key = 5</span>\r\n<strong><span style=\"font-size:18px\">Output: </span></strong><span style=\"font-size:18px\">-1\r\n</span><strong><span style=\"font-size:18px\">Explanation: </span></strong><span style=\"font-size:18px\">We can see in the above tree</span> \r\n<span style=\"font-size:18px\">that there&#39;s No next right node of 5.\r\nSo, the output is -1.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>nextRight()&nbsp;</strong>which takes root node of the tree and an integer <strong>key </strong>as input parameters and returns the next right node of the node with value<strong> key.</strong>&nbsp;</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=N&lt;=10<sup>3</sup><br />\r\n1&lt;=data of node&lt;=10<sup>3</sup><br />\r\n1&lt;=key&lt;=10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and a key, find the node immediately to the right of the node containing the key. If no such right node exists, return -1.",
                "constraints": [
                    "1 <= N <= 10^3 (N is the number of nodes in the tree)",
                    "1 <= Node data <= 10^3",
                    "1 <= key <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "Binary tree: \n       10\n     /    \\\n    2      6\n   / \\     \\\n  8   4     5\nkey = 2",
                        "output": "6",
                        "explanation": "The node to the right of the node with value 2 is the node with value 6."
                    },
                    {
                        "input": "Binary tree: \n       10\n     /    \\\n    2      6\n   / \\     \\\n  8   4     5\nkey = 5",
                        "output": "-1",
                        "explanation": "The node with value 5 does not have a right sibling. Therefore, the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use recursion and tree traversal.</p>",
            "<p>Use level order traversal and keep track of the nodes visited.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\npublic:\r\n    Node *nextRight(Node *root, int key)\r\n    {\r\n        // Base Case\r\n        if (root == NULL)\r\n            return 0;\r\n\r\n        // Create an empty queue for level order tarversal\r\n        queue<Node *> qn; // A queue to store node addresses\r\n        queue<int> ql;    // Another queue to store node levels\r\n\r\n        int level = 0; // Initialize level as 0\r\n\r\n        // Enqueue Root and its level\r\n        qn.push(root);\r\n        ql.push(level);\r\n\r\n        // A standard BFS loop\r\n        while (qn.size())\r\n        {\r\n            // dequeue an node from qn and its level from ql\r\n            Node *node = qn.front();\r\n            level = ql.front();\r\n            qn.pop();\r\n            ql.pop();\r\n\r\n            // If the dequeued node has the given key k\r\n            if (node->data == key)\r\n            {\r\n                // If there are no more items in queue or given node is\r\n                // the rightmost node of its level, then return NULL\r\n                if (ql.size() == 0 || ql.front() != level)\r\n                {\r\n                    Node *ret = new Node(-1);\r\n                    return ret;\r\n                }\r\n\r\n                // Otherwise return next node from queue of nodes\r\n                return qn.front();\r\n            }\r\n\r\n            // Standard BFS steps: enqueue children of this node\r\n            if (node->left != NULL)\r\n            {\r\n                qn.push(node->left);\r\n                ql.push(level + 1);\r\n            }\r\n            if (node->right != NULL)\r\n            {\r\n                qn.push(node->right);\r\n                ql.push(level + 1);\r\n            }\r\n        }\r\n\r\n        // We reach here if given key x doesn't exist in tree\r\n        Node *ret = new Node(-1);\r\n        return ret;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    \r\n\tNode nextRight(Node root, int key)\r\n    {\r\n\t\tif (root == null)\r\n            return new Node(0);\r\n\t\tQueue<Node> qn = new LinkedList<>();\r\n\t\tQueue<Integer> ql = new LinkedList<>();\r\n\r\n        int level = 0; // Initialize level as 0\r\n\r\n        // Enqueue Root and its level\r\n        qn.add(root);\r\n        ql.add(level);\r\n\r\n        // A standard BFS loop\r\n        while (!qn.isEmpty())\r\n        {\r\n            // dequeue an node from qn and its level from ql\r\n            Node node = qn.peek();\r\n            level = ql.peek();\r\n            qn.poll();\r\n            ql.poll();\r\n\r\n            // If the dequeued node has the given key k\r\n            if (node.data == key)\r\n            {\r\n                // If there are no more items in queue or given node is\r\n                // the rightmost node of its level, then return NULL\r\n                if (ql.size() == 0 || ql.peek() != level)\r\n                {\r\n                    Node ret = new Node(-1);\r\n                    return ret;\r\n                }\r\n\r\n                // Otherwise return next node from queue of nodes\r\n                return qn.peek();\r\n            }\r\n\r\n            // Standard BFS steps: enqueue children of this node\r\n            if (node.left != null)\r\n            {\r\n                qn.add(node.left);\r\n                ql.add(level + 1);\r\n            }\r\n            if (node.right != null)\r\n            {\r\n                qn.add(node.right);\r\n                ql.add(level + 1);\r\n            }\r\n        }\r\n\r\n        // We reach here if given key x doesn't exist in tree\r\n        Node ret = new Node(-1);\r\n        return ret;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n'''\r\nclass Node:\r\n    def __init__(self,val):\r\n        self.data=val\r\n        self.left=None\r\n        self.right=None\r\n'''\r\nfrom collections import deque\r\nclass Solution:\r\n    def nextRight(self, root, key):\r\n        #code here\r\n        if root == None:\r\n            return 0\r\n        \r\n        qn = deque()  #queue to store nodes\r\n        ql = deque()  #queue to store levels\r\n        \r\n        level = 0  #initialize level\r\n        \r\n        qn.append(root)  #enqueue root node\r\n        ql.append(level)  #enqueue root level\r\n        \r\n        while (len(qn) > 0):  #iterate until queue is not empty\r\n            node = qn.popleft()  #dequeue node\r\n            level = ql.popleft()  #dequeue level\r\n            \r\n            if (node.data == key):  #if node is found with given key\r\n                if (len(ql) == 0 or ql[0] != level):  #if there are no more nodes at the same level\r\n                    ret = Node(-1)  #return an empty node\r\n                    return ret\r\n                return qn[0]  #return the next right node\r\n            \r\n            if (node.left != None):  #if left child exists\r\n                qn.append(node.left)  #enqueue left child\r\n                ql.append(level+1)  #enqueue level+1\r\n            \r\n            if (node.right != None):  #if right child exists\r\n                qn.append(node.right)  #enqueue right child\r\n                ql.append(level+1)  #enqueue level+1\r\n        \r\n        ret = Node(-1)  #if node is not found\r\n        return ret  #return an empty node",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {Node} root\n * @param {number} key\n * @returns {Node}\n*/\n\nclass Solution {\n    //Function to find the next right of given key node.\n    nextRight(root, key) {\n        //code here\n        if (root === null) {\n            return null;\n        }\n        \n        let qn = [];  //queue to store nodes\n        let ql = [];  //queue to store levels\n        \n        let level = 0;  //initialize level\n        \n        qn.push(root);  //enqueue root node\n        ql.push(level);  //enqueue root level\n        \n        while (qn.length > 0) {  //iterate until queue is not empty\n            let node = qn.shift();  //dequeue node\n            level = ql.shift();  //dequeue level\n            \n            if (node.data === key) {  //if node is found with given key\n                if (ql.length === 0 || ql[0] !== level) {  //if there are no more nodes at the same level\n                    return null;\n                }\n                return qn[0];  //return the next right node\n            }\n            \n            if (node.left !== null) {  //if left child exists\n                qn.push(node.left);  //enqueue left child\n                ql.push(level + 1);  //enqueue level+1\n            }\n            \n            if (node.right !== null) {  //if right child exists\n                qn.push(node.right);  //enqueue right child\n                ql.push(level + 1);  //enqueue level+1\n            }\n        }\n        \n        return null;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}