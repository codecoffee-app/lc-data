{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702778,
            "title": "Next Smallest Palindrome",
            "titleSlug": "next-smallest-palindrome4740",
            "content": "<p><span style=\"font-size: 18px;\">Given a number, in the form of an array <strong>Num[]</strong>&nbsp;of size <strong>N</strong> containing digits from <strong>1 to 9</strong>(inclusive). The task is to find the <strong>next smallest palindrome strictly larger than the given&nbsp;number.</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 11\nNum[] = {9, 4, 1, 8, 7, 9, 7, 8, 3, 2, 2}\n<strong>Output:</strong> 9 4 1 8 8 0 8 8 1 4 9\n<strong>Explanation:</strong> Next smallest palindrome is\n9 4 1 8 8 0 8 8 1 4 9\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 5\nNum[] = {2, 3, 5, 4, 5}\n<strong>Output:</strong> 2 3 6 3 2\n<strong>Explanation:</strong> Next smallest palindrome is\n2 3 6 3 2\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Complete the function <strong>generateNextPalindrome()</strong>&nbsp;which takes an array <strong>num, </strong>and a single integer&nbsp;<strong>n</strong>, as input parameters and returns an array of integers denoting the answer. You don't have to print answers or take inputs.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>5</sup><br />1 &lt;= Num[i] &lt;= 9</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number represented as an array `Num[]` of size `N` containing digits from 1 to 9 (inclusive), find the next smallest palindrome strictly larger than the given number.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= Num[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "N = 11\nNum[] = {9, 4, 1, 8, 7, 9, 7, 8, 3, 2, 2}",
                        "output": "9 4 1 8 8 0 8 8 1 4 9",
                        "explanation": "The next smallest palindrome greater than 94187978322 is 94188088149."
                    },
                    {
                        "input": "N = 5\nNum[] = {2, 3, 5, 4, 5}",
                        "output": "2 3 6 3 2",
                        "explanation": "The next smallest palindrome greater than 23545 is 23632."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">There can be three different types of inputs that need to be handled separately.<br /><strong>1)</strong>&nbsp;The input number is palindrome and has all 9s. For example &ldquo;9 9 9&rdquo;. Output should be &ldquo;1 0 0 1&rdquo;<br /><strong>2)</strong>&nbsp;The input number is not palindrome. For example &ldquo;1 2 3 4&rdquo;. Output should be &ldquo;1 3 3 1&rdquo;<br /><strong>3)&nbsp;</strong>The input number is palindrome and doesn&rsquo;t have all 9s. For example &ldquo;1 2 2 1&rdquo;. Output should be &ldquo;1 3 3 1&rdquo;.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "adobe",
            "media.net"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution{\n\npublic:\n\t// A utility function to check if num has all 9s\n\tint AreAll9s(int *num, int n) {\n\t    int i;\n\t    for (i = 0; i < n; ++i)\n\t        if (num[i] != 9) return 0;\n\t    return 1;\n\t}\npublic:\n\t// Returns next palindrome of a given number num[].\n\t// This function is for input type 2 and 3\n\tvoid generateNextPalindromeUtil(int num[], int n) {\n\t    // find the index of mid digit\n\t    int mid = n / 2;\n\n\t    // A bool variable to check if copy of left side to right is sufficient or\n\t    // not\n\t    bool leftSmaller = false;\n\n\t    // end of left side is always 'mid -1'\n\t    int i = mid - 1;\n\n\t    // Beginning of right side depends if n is odd or even\n\t    int j = (n % 2) ? mid + 1 : mid;\n\n\t    // Initially, ignore the middle same digits\n\t    while (i >= 0 && num[i] == num[j]) i--, j++;\n\n\t    // Find if the middle digit(s) need to be incremented or not (or copying\n\t    // left\n\t    // side is not sufficient)\n\t    if (i < 0 || num[i] < num[j]) leftSmaller = true;\n\n\t    // Copy the mirror of left to tight\n\t    while (i >= 0) {\n\t        num[j] = num[i];\n\t        j++;\n\t        i--;\n\t    }\n\n\t    // Handle the case where middle digit(s) must be incremented.\n\t    // This part of code is for CASE 1 and CASE 2.2\n\t    if (leftSmaller == true) {\n\t        int carry = 1;\n\t        i = mid - 1;\n\n\t        // If there are odd digits, then increment\n\t        // the middle digit and store the carry\n\t        if (n % 2 == 1) {\n\t            num[mid] += carry;\n\t            carry = num[mid] / 10;\n\t            num[mid] %= 10;\n\t            j = mid + 1;\n\t        } else\n\t            j = mid;\n\n\t        // Add 1 to the rightmost digit of the left side, propagate the carry\n\t        // towards MSB digit and simultaneously copying mirror of the left side\n\t        // to the right side.\n\t        while (i >= 0) {\n\t            num[i] += carry;\n\t            carry = num[i] / 10;\n\t            num[i] %= 10;\n\t            num[j++] = num[i--]; // copy mirror to right\n\t        }\n\t    }\n\t}\n\npublic:\n\t// The function that prints next palindrome of a given number num[]\n\t// with n digits.\n\tvector<int> generateNextPalindrome(int num[], int n) {\n\t    int i;\n\t    vector<int> ans;\n\t    // Input type 1: All the digits are 9, simply o/p 1\n\t    // followed by n-1 0's followed by 1.\n\t    if (AreAll9s(num, n)) {\n\t        ans.push_back(1);\n\t        for (i = 1; i < n; i++) ans.push_back(0);\n\t        ans.push_back(1);\n\t    }\n\t    // Input type 2 and 3\n\t    else {\n\t        generateNextPalindromeUtil(num, n);\n\n\t        // print the result\n\t        for (i = 0; i < n; i++) {\n\t            ans.push_back(num[i]);\n\t        }\n\t    }\n\t    return ans;\n\t}\n\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    // Returns next palindrome of a given\n    // number num[]. This function is for\n    // input type 2 and 3\n    void generateNextPalindromeUtil(int num[], int n) {\n        int mid = n / 2;\n\n        // end of left side is always 'mid -1'\n        int i = mid - 1;\n\n        // Beginning of right side depends\n        // if n is odd or even\n        int j = (n % 2 == 0) ? mid : mid + 1;\n\n        // A bool variable to check if copy of left\n        // side to right\n        // is sufficient or not\n        boolean leftsmaller = false;\n\n        // Initially, ignore the middle same digits\n        while (i >= 0 && num[i] == num[j]) {\n            i--;\n            j++;\n        }\n\n        // Find if the middle digit(s) need to\n        // be incremented or not (or copying left\n        // side is not sufficient)\n        if (i < 0 || num[i] < num[j]) {\n            leftsmaller = true;\n        }\n\n        // Copy the mirror of left to tight\n        while (i >= 0) {\n            num[j++] = num[i--];\n        }\n\n        // Handle the case where middle digit(s)\n        // must be incremented. This part of code\n        // is for CASE 1 and CASE 2.2\n        if (leftsmaller) {\n            int carry = 1;\n\n            // If there are odd digits, then increment\n            // the middle digit and store the carry\n            if (n % 2 == 1) {\n                num[mid] += 1;\n                carry = num[mid] / 10;\n                num[mid] %= 10;\n            }\n            i = mid - 1;\n            j = (n % 2 == 0 ? mid : mid + 1);\n\n            // Add 1 to the rightmost digit of the left\n            // side, propagate the carry towards MSB digit\n            // and simultaneously copying mirror of the\n            // left side to the right side.\n            // when carry is zero no need to loop through till i>=0\n            while (i >= 0 && carry > 0) {\n                num[i] = num[i] + carry;\n                carry = num[i] / 10;\n                num[i] %= 10;\n                num[j] = num[i]; // copy mirror to right\n                i--;\n                j++;\n            }\n        }\n    }\n\n    // The function that prints next palindrome\n    // of a given number num[] with n digits.\n    Vector<Integer> generateNextPalindrome(int num[], int n) {\n        Vector<Integer> ans = new Vector<>();\n        // Input type 1: All the digits are 9,\n        // simply o/p 1 followed by n-1 0's\n        // followed by 1.\n        if (isAll9(num, n)) {\n            ans.add(1);\n            for (int i = 0; i < n - 1; i++) ans.add(0);\n            ans.add(1);\n\n        }\n\n        // Input type 2 and 3\n        else {\n            generateNextPalindromeUtil(num, n);\n            for (int i = 0; i < n; i++) {\n                ans.add(num[i]);\n            }\n        }\n        return ans;\n    }\n\n    // A utility function to check if num has all 9s\n    boolean isAll9(int num[], int n) {\n        for (int i = 0; i < n; i++)\n            if (num[i] != 9) return false;\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n\t# Returns next palindrome of a given number num[]. \n\t# This function is for input type 2 and 3 \n\tdef generateNextPalindromeUtil (self,num, n) : \n\n\t\t# find the index of mid digit \n\t\tmid = int(n//2 ) \n\n\t\t# A bool variable to check if copy of left \n\t\t# side to right is sufficient or not \n\t\tleftsmaller = False\n\n\t\t# end of left side is always 'mid -1' \n\t\ti = mid - 1\n\n\t\t# Beginning of right side depends \n\t\t# if n is odd or even \n\t\tj = mid + 1 if (n % 2) else mid \n\n\t\t# Initially, ignore the middle same digits \n\t\twhile (i >= 0 and num[i] == num[j]) : \n\t\t\ti-=1\n\t\t\tj+=1\n\n\t\t# Find if the middle digit(s) need to be \n\t\t# incremented or not (or copying left \n\t\t# side is not sufficient) \n\t\tif ( i < 0 or num[i] < num[j]): \n\t\t\tleftsmaller = True\n\n\t\t# Copy the mirror of left to tight \n\t\twhile (i >= 0) : \n\t\t\n\t\t\tnum[j] = num[i] \n\t\t\tj+=1\n\t\t\ti-=1\n\t\t\n\n\t\t# Handle the case where middle \n\t\t# digit(s) must be incremented. \n\t\t# This part of code is for CASE 1 and CASE 2.2 \n\t\tif (leftsmaller == True) : \n\t\t\n\t\t\tcarry = 1\n\t\t\ti = mid - 1\n\n\t\t\t# If there are odd digits, then increment \n\t\t\t# the middle digit and store the carry \n\t\t\tif (n%2 == 1) : \n\t\t\t\n\t\t\t\tnum[mid] += carry \n\t\t\t\tcarry = int(num[mid] // 10 ) \n\t\t\t\tnum[mid] %= 10\n\t\t\t\tj = mid + 1\n\t\t\t\n\t\t\telse: \n\t\t\t\tj = mid \n\n\t\t\t# Add 1 to the rightmost digit of the \n\t\t\t# left side, propagate the carry \n\t\t\t# towards MSB digit and simultaneously \n\t\t\t# copying mirror of the left side \n\t\t\t# to the right side. \n\t\t\twhile (i >= 0) : \n\t\t\t\n\t\t\t\tnum[i] += carry \n\t\t\t\tcarry = num[i] // 10\n\t\t\t\tnum[i] %= 10\n\t\t\t\tnum[j] = num[i] # copy mirror to right \n\t\t\t\tj+=1\n\t\t\t\ti-=1\n\t\t\t\n\t# The function that prints next \n\t# palindrome of a given number num[] \n\t# with n digits. \n\tdef generateNextPalindrome(self,num, n ) : \n\t\tans = []\n\t\t# Input type 1: All the digits are 9, simply o/p 1 \n\t\t# followed by n-1 0's followed by 1. \n\t\tif( self.AreAll9s( num, n ) == True) : \n\t\t\n\t\t\tans.append(1)\n\t\t\tfor i in range(1, n): \n\t\t\t\tans.append(0)\n\t\t\tans.append(1)\n\t\t\n\n\t\t# Input type 2 and 3 \n\t\telse: \n\t\t\n\t\t\tself.generateNextPalindromeUtil ( num, n ) \n\n\t\t\t# print the result \n\t\t\tans=num\n\t\treturn ans\n\t\t\n\t# A utility function to check if num has all 9s \n\tdef AreAll9s(self,num, n ): \n\t\tfor i in range(0, n): \n\t\t\tif( num[i] != 9 ) : \n\t\t\t\treturn 0\n\t\treturn 1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}