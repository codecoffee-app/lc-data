{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705283,
            "title": "Next sparse binary number",
            "titleSlug": "next-sparse-binary-number0029",
            "content": "<p><span style=\"font-size:18px\">Given an integer <strong>n</strong>&nbsp;in the input, find its next sparse binary number.A sparse binary number is a number whose binary representation does not contain any consecutive 1s.</span><br />\n<br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: n = 3\n<strong>Output:</strong>&nbsp;4\n<strong>Explanation</strong>: Binary representation of 4\nis 0100.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 5\n<strong>Output:&nbsp;</strong>5\n<strong>Explanation</strong>: Binary representation of 5\nis 0101.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function <strong>nextSparse()&nbsp;</strong>which takes n&nbsp;as input parameter and returns the next sparse binary number.<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(logn)<br />\n<strong>Expected Auxiliary Space:</strong> O(logn)<br />\n<br />\n<strong>Constraints:</strong><br />\n1&lt;= n&nbsp;&lt;=10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer `n`, find the smallest integer greater than or equal to `n` that is a sparse binary number. A sparse binary number is a number whose binary representation does not contain any consecutive 1s.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "4",
                        "explanation": "The binary representation of 4 is 100, which is sparse."
                    },
                    {
                        "input": "5",
                        "output": "5",
                        "explanation": "The binary representation of 5 is 101, which is sparse."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<pre>\nFind binary of the given number and store it in a boolean array. Start traversing the binary from least significant bit.</pre>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\nint nextSparse(int x)\n{\n    // Find binary representation of x and store it in bin[].\n    // bin[0] contains least significant bit (LSB), next\n    // bit is in bin[1], and so on.\n    vector<bool> bin;\n    while (x != 0)\n    {\n        bin.push_back(x&1);\n        x >>= 1;\n    }\n\n    // There my be extra bit in result, so add one extra bit\n    bin.push_back(0);\n    int n = bin.size(); // Size of binary representation\n\n    // The position till which all bits are finalized\n    int last_final = 0;\n\n    // Start from second bit (next to LSB)\n    for (int i=1; i<n-1; i++)\n    {\n    // If current bit and its previous bit are 1, but next\n    // bit is not 1.\n    if (bin[i] == 1 && bin[i-1] == 1 && bin[i+1] != 1)\n    {\n            // Make the next bit 1\n            bin[i+1] = 1;\n\n            // Make all bits before current bit as 0 to make\n            // sure that we get the smallest next number\n            for (int j=i; j>=last_final; j--)\n                bin[j] = 0;\n\n            // Store position of the bit set so that this bit\n            // and bits before it are not changed next time.\n            last_final = i+1;\n        }\n    }\n\n    // Find decimal equivalent of modified bin[]\n    int ans = 0;\n    for (int i =0; i<n; i++)\n        ans += bin[i]*(1<<i);\n    return ans;\n}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\npublic class Solution {\n    public int nextSparse(int n){\n        // Find binary representation of n and store it in bin[].\n        // bin[0] contains least significant bit (LSB), next\n        // bit is in bin[1], and so on.\n        List<bool> bin = new List<bool>();\n        while (n != 0)\n        {\n            bin.Add(n%2 == 1);\n            n >>= 1;\n        }\n\n        // There may be extra bit in result, so add one extra bit\n        bin.Add(false);\n        int len = bin.Count; // Size of binary representation\n\n        // The position till which all bits are finalized\n        int last_final = 0;\n\n        // Start from second bit (next to LSB)\n        for (int i=1; i<len-1; i++)\n        {\n            // If current bit and its previous bit are 1, but next\n            // bit is not 1.\n            if (bin[i] == true && bin[i-1] == true && bin[i+1] != true)\n            {\n                // Make the next bit 1\n                bin[i+1] = true;\n\n                // Make all bits before current bit as 0 to make\n                // sure that we get the smallest next number\n                for (int j=i; j>=last_final; j--)\n                    bin[j] = false;\n\n                // Store position of the bit set so that this bit\n                // and bits before it are not changed next time.\n                last_final = i+1;\n            }\n        }\n\n        // Find decimal equivalent of modified bin[]\n        int ans = 0;\n        for (int i =0; i<len; i++)\n        {\n            if (bin[i] == true)\n                ans += (1<<i);\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}