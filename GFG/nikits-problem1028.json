{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704695,
            "title": "Nikit's Problem",
            "titleSlug": "nikits-problem1028",
            "content": "<p><span style=\"font-size:18px\">Nikit has to give a short contest of duration &quot;n&quot; minutes. The contest is divided into 2&nbsp;sections-Easy&nbsp;and Hard. x&nbsp;and y&nbsp;marks will be awarded per problem for Easy&nbsp;and Hard respectively. Assume that he will take p&nbsp;minutes to solve an Easy problem and q&nbsp;minutes to solve a Hard problem successfully.<br />\r\nThere are a&nbsp;and b&nbsp;number of Easy and&nbsp; Hard problems respectively.&nbsp;Calculate how many problems of a particular section&nbsp;should he perform to get the maximum score in time.<br />\r\nNote: Assume he will always try to solve the easiest problem.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 180, x = 2, y = 5, a = 4\r\nb = 6,p = 20, q = 40\r\n<strong>Output: </strong>1 4\r\n<strong>Explanation: </strong>Maximum marks get scored \r\nwhen he solves 1 easy and 4 hard problems.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 50, x = 5, y = 10, a = 5 \r\nb = 3, p = 10, q = 20\r\n<strong>Output: </strong>5 0\r\n<strong>Explanation : </strong>Maximum marks gets scored \r\nwhen he solves 5 easy problems or 1 easy \r\nand 2 hard problems or 3 easy and 1 hard \r\nproblem. But he always try to solve the \r\neasiest problem therefore solves 5 easy \r\nproblems.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>maximumScore()</strong>&nbsp;which takes n, x, y, a, b, p, and q as input parameter and returns a list which contains the total number of easy problems and hard problems required to solve to get the maximum score.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(a * b)<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= n &lt;= 1000</span><br />\r\n<span style=\"font-size:18px\">1 &lt;= x &lt; y &lt;= 100</span><br />\r\n<span style=\"font-size:18px\">1 &lt;= a, b &lt;= 100<br />\r\n1 &lt;= p &lt; q &lt;= 100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Nikit has 'n' minutes for a contest divided into Easy and Hard sections. Solving an Easy problem earns 'x' marks and takes 'p' minutes; a Hard problem earns 'y' marks and takes 'q' minutes. There are 'a' Easy and 'b' Hard problems available. Determine the optimal number of Easy and Hard problems Nikit should solve to maximize their score within the given time limit. Nikit will always prioritize solving Easy problems first.",
                "constraints": [
                    "1 <= n <= 1000",
                    "1 <= x < y <= 100",
                    "1 <= a, b <= 100",
                    "1 <= p < q <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 180, x = 2, y = 5, a = 4, b = 6, p = 20, q = 40",
                        "output": "1 4",
                        "explanation": "Solving 1 Easy problem and 4 Hard problems yields the maximum score within the 180-minute time limit."
                    },
                    {
                        "input": "n = 50, x = 5, y = 10, a = 5, b = 3, p = 10, q = 20",
                        "output": "5 0",
                        "explanation": "Several combinations could maximize the score (5 Easy, or 1 Easy and 2 Hard, or 3 Easy and 1 Hard).  Since Nikit prioritizes Easy problems, they solve all 5 available Easy problems, resulting in no Hard problems solved."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use naive approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Misc",
                "slug": "misc"
            },
            {
                "name": "logical-thinking",
                "slug": "logical-thinking"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    //Function to find the maximum score.\n    vector<int>maximumScore(int n, int x, int y, int a, int b, int p, int q){\n        int max = 0; //variable to store the maximum score\n        int easy,hard; //variables to store the number of easy and hard questions\n        \n        //iterating over possible number of easy questions\n        for(int i=a;i>=0;i--){\n            //iterating over possible number of hard questions\n            for(int j=0;j<=b;j++){\n                //checking if the total number of questions is less than or equal to n\n                if((p*i+q*j)<=n){\n                    //checking if the current score is greater than the maximum score\n                    if((x*i+y*j)>max){\n                        //updating the maximum score and the number of easy and hard questions\n                        max = x*i + y*j;\n                        easy = i;\n                        hard = j;\n                    }\n                }\n            }\n        }\n        //creating a vector to store the number of easy and hard questions and returning it\n        vector<int>ans;\n        ans.push_back(easy);\n        ans.push_back(hard);\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}