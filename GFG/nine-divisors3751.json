{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703523,
            "title": "Nine Divisors",
            "titleSlug": "nine-divisors3751",
            "content": "<p><span style=\"font-size:18px\">Find the count of numbers less than equal to N having exactly 9 divisors.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:\r\n</span></strong><span style=\"font-size:18px\">N = 100</span><strong><span style=\"font-size:18px\">\r\nOutput:</span><span style=\"font-size:18px\">\r\n</span></strong><span style=\"font-size:18px\">2</span><strong><span style=\"font-size:18px\">\r\nExplanation:\r\n</span></strong><span style=\"font-size:18px\">The two numbers which have \r\nexactly 9 divisors are 36 and 100.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<strong><span style=\"font-size:18px\">Input:\r\n</span></strong><span style=\"font-size:18px\">N = 1000</span><strong><span style=\"font-size:18px\">\r\nOutput:\r\n</span></strong><span style=\"font-size:18px\">8 </span><strong><span style=\"font-size:18px\">\r\nExplanation:\r\n</span></strong><span style=\"font-size:18px\">The numbers are:\r\n36 100 196 225 256 441 484 676</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>nineDivisors()</strong>&nbsp;which takes an integer N&nbsp;as an&nbsp;input&nbsp;parameter and returns the total&nbsp;number of elements from 1 to N inclusive, that have exactly 9 divisors.<br />\r\n<br />\r\n<strong>Expected Time Complexity</strong>:&nbsp;O(sqrt(Nlog(logN)))</span><br />\r\n<span style=\"font-size:18px\"><strong>Expected Auxiliary Space</strong>:&nbsp;</span>&nbsp;<span style=\"font-size:18px\">O(sqrt(N))</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=N&lt;=10<sup>10</sup></span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer N, find the number of integers less than or equal to N that have exactly 9 divisors.",
                "constraints": [
                    "1 <= N <= 10^10"
                ],
                "testcases": [
                    {
                        "input": "100",
                        "output": "2",
                        "explanation": "The numbers less than or equal to 100 with exactly 9 divisors are 36 and 100."
                    },
                    {
                        "input": "1000",
                        "output": "8",
                        "explanation": "The numbers less than or equal to 1000 with exactly 9 divisors are 36, 100, 196, 225, 256, 441, 484, and 676."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For a number to have 9 divisors either it should be the product of squares of two prime numbers&nbsp;or 8th power of a prime.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{   \r\npublic:\r\n    long long int nineDivisors(long long int N){\r\n        long long int c = 0; \r\n  \r\n        long long int limit = sqrt(N); \r\n        \r\n        // Sieve array \r\n        long long int prime[(int)limit + 1]; \r\n        \r\n        // initially prime[i] = i \r\n        for (int i = 1; i <= limit; i++) \r\n            prime[i] = i; \r\n        \r\n        // use sieve concept to store the \r\n        // first prime factor of every number \r\n        for (int i = 2; i * i <= limit; i++) { \r\n            if (prime[i] == i) { \r\n                // mark all factors of i \r\n                for (int j = i * i; j <= limit; j += i) \r\n                    if (prime[j] == j) \r\n                        prime[j] = i; \r\n            } \r\n        } \r\n        \r\n        // check for all numbers if they can be \r\n        // expressed in form p*q \r\n        for (int i = 2; i <= limit; i++) { \r\n            // p prime factor \r\n            long long int p = prime[i]; \r\n        \r\n            // q prime factor \r\n            long long int q = prime[(int)i / prime[i]]; \r\n        \r\n            // if both prime factors are different \r\n            // if p*q<=N and q!=1 && p!=q \r\n            if (p * q == i && q != 1 && p != q) { \r\n                c += 1; \r\n            } \r\n            else if (prime[i] == i) { \r\n        \r\n                // Check if it can be expressed as p^8 \r\n                if (pow(i, 8) <= N) { \r\n        \r\n                    c += 1; \r\n                } \r\n            } \r\n        } \r\n        \r\n        return c; \r\n        }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\nclass Solution{\r\n    static long nineDivisors(long N){\r\n        \r\n        long c = 0; \r\n        int limit = (int) Math.sqrt(N); \r\n        // Sieve array \r\n        int prime[] = new int[limit + 1]; \r\n        // initially prime[i] = i \r\n        for (int i = 1; i <= limit; i++) { \r\n            prime[i] = i; \r\n        } \r\n        // use sieve concept to store the \r\n        // first prime factor of every number \r\n        for (int i = 2; i * i <= limit; i++) { \r\n            if (prime[i] == i) { \r\n                // mark all factors of i \r\n                for (int j = i * i; j <= limit; j += i) { \r\n                    if (prime[j] == j) { \r\n                        prime[j] = i; \r\n                    } \r\n                } \r\n            } \r\n        } \r\n        // check for all numbers if they can be \r\n        // expressed in form p*q \r\n        for (int i = 2; i <= limit; i++) { \r\n            // p prime factor \r\n            int p = prime[i]; \r\n  \r\n            // q prime factor \r\n            int q = prime[i / prime[i]]; \r\n  \r\n            // if both prime factors are different \r\n            // if p*q<=n and q!= \r\n            if (p * q == i && q != 1 && p != q) { \r\n                c += 1; \r\n            } else if (prime[i] == i) { \r\n  \r\n                // Check if it can be expressed as p^8 \r\n                if (Math.pow(i, 8) <= N) { \r\n  \r\n                    c += 1; \r\n                } \r\n            } \r\n        } \r\n        return c; \r\n     \r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\nclass Solution:\r\n    def nineDivisors(self, N):\r\n        c = 0\r\n        limit = int(N ** (0.5)) \r\n        # Sieve array, initially prime[i] = i  \r\n        prime = [i for i in range(limit + 1)]  \r\n        # use sieve concept to store the  \r\n        # first prime factor of every number  \r\n        i = 2\r\n        while i * i <= limit:  \r\n            if prime[i] == i:  \r\n                  \r\n                # mark all factors of i  \r\n                for j in range(i * i, limit + 1, i):  \r\n                    if prime[j] == j:  \r\n                        prime[j] = i  \r\n            i += 1\r\n        # check for all numbers if they  \r\n        # can be expressed in form p*q  \r\n        for i in range(2, limit + 1):  \r\n              \r\n            # p prime factor  \r\n            p = prime[i]  \r\n      \r\n            # q prime factor  \r\n            q = prime[i // prime[i]]  \r\n      \r\n            # if both prime factors are different  \r\n            # if p*q<=n and q!=  \r\n            if p * q == i and q != 1 and p != q:  \r\n                c += 1\r\n            elif prime[i] == i:  \r\n      \r\n                # Check if it can be  \r\n                # expressed as p^8  \r\n                if i ** 8 <= N:  \r\n                    c += 1\r\n        return c ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    nineDivisors(N) {\n        let c = 0;\n        const limit = Math.floor(N ** 0.5);\n        const prime = Array.from({length: limit + 1}, (_, i) => i);\n        let i = 2;\n        \n        while (i * i <= limit) {\n            if (prime[i] === i) {\n                for (let j = i * i; j <= limit; j += i) {\n                    if (prime[j] === j) {\n                        prime[j] = i;\n                    }\n                }\n            }\n            i += 1;\n        }\n\n        for (let i = 2; i <= limit; i++) {\n            const p = prime[i];\n            const q = prime[i / prime[i]];\n\n            if (p * q === i && q !== 1 && p !== q) {\n                c += 1;\n            } else if (prime[i] === i) {\n                if (Math.pow(i, 8) <= N) {\n                    c += 1;\n                }\n            }\n        }\n\n        return c;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}