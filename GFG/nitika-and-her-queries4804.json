{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705204,
            "title": "Nitika and her queries",
            "titleSlug": "nitika-and-her-queries4804",
            "content": "<p><span style=\"font-size:18px\">Nitika recently read about XOR operation and she got </span><span style=\"font-size:18px\">obssessed</span><span style=\"font-size:18px\"> with it. She has an array <strong>a</strong> containing <strong>N</strong> Positive integers.She wants to perform <strong>Q</strong> queries on the array.In a&nbsp;</span><span style=\"font-size:18px\">query</span><span style=\"font-size:18px\"> She gives two integers <strong>L</strong> and <strong>R</strong>.(1 based indexing).Now, she asks what is the xor of all the elements of the array after not including the subarray ranging from L to R (both inclusive).Nitika guarantees that in each query, The resulting array is&nbsp;</span><span style=\"font-size:18px\">non empty</span><span style=\"font-size:18px\">. The queries are given in a 2D matrix <strong>query</strong> having L and R for each entry.&nbsp;</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 10, Q = 3\r\na = {4, 7, 8, 5, 9, 6, 1, 0, 20, 10}\r\nquery = {{3, 8},{1, 6},{2, 3}}\r\n<strong>Output:</strong> \r\n29\r\n31\r\n17\r\n<strong>Explaination:</strong> For the first query: \r\nThe resulting array is: (4 ,7 ,20, 10).\r\nTheir Xor will be: 29. \r\nFor the Second query: The resulting \r\narray is: (1, 0, 20, 10). Their Xor \r\nwill be: 31. \r\nFor the Third query:  The resulting \r\narray is: (4, 5, 9, 6, 1,</span><span style=\"font-size:18px\">0 ,</span><span style=\"font-size:18px\">20, 10). \r\nTheir Xor will be: 17.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nyou do not need to read input or print anything. Your task is to complete the function <strong>specialXor()</strong> which takes N, Q, a[] and query as input parameters and returns a list containing answer for each query.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N+Q*logN)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N+Q)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N, Q &le; 10<sup>5</sup><br />\r\n1 &le; A[i] &le; 10<sup>9</sup><br />\r\n1 &le; L, R &le; N&nbsp;&nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Nitika is fascinated by the XOR operation. Given an array `a` of `N` positive integers and `Q` queries, each query provides a range `[L, R]` (1-based indexing). For each query, calculate the XOR of all elements in the array `a` *excluding* the subarray from index `L` to `R` (inclusive). The resulting array after exclusion is guaranteed to be non-empty for each query.\n\nThe queries are provided in a 2D matrix `query`, where each row represents a query with `L` and `R` values.",
                "constraints": [
                    "1 <= N, Q <= 10^5",
                    "1 <= A[i] <= 10^9",
                    "1 <= L, R <= N"
                ],
                "testcases": [
                    {
                        "input": "N = 10, Q = 3\na = {4, 7, 8, 5, 9, 6, 1, 0, 20, 10}\nquery = {{3, 8},{1, 6},{2, 3}}",
                        "output": "29\n31\n17",
                        "explanation": "Query 1: Excluding a[3...8] (8, 5, 9, 6, 1, 0) leaves (4, 7, 20, 10). XOR is 4 ^ 7 ^ 20 ^ 10 = 29.\nQuery 2: Excluding a[1...6] (4, 7, 8, 5, 9, 6) leaves (1, 0, 20, 10). XOR is 1 ^ 0 ^ 20 ^ 10 = 31.\nQuery 3: Excluding a[2...3] (7, 8) leaves (4, 5, 9, 6, 1, 0, 20, 10). XOR is 4 ^ 5 ^ 9 ^ 6 ^ 1 ^ 0 ^ 20 ^ 10 = 17."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Get the array excluding the given subarray from the actual array and calculate the xor of that array.</span></p>",
            "<p><span style=\"font-size:18px\">Try to use a precalculation to reduce time complexity. Find out such datastructure which can get the xor of the required part in logarithmic time.</span></p>",
            "<p><span style=\"font-size:18px\">Segment tree or Fenwick tree are such data structures.</span></p>",
            "<p><span style=\"font-size:18px\">You can reduce the time complexity to O(Q) by using only a single preXor array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "prefix-sum",
                "slug": "prefix-sum"
            },
            {
                "name": "Segment-Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to build the segment tree\n    void build(int v, int l, int r, int a[], int t[])\n    {\n        if(l == r)\n            t[v] = a[l];\n        else{\n            int mid = (l + r)/2;\n            build(2*v, l, mid, a, t);\n            build(2*v+1, mid+1, r, a, t);\n            t[v] = t[2*v] ^ t[2*v+1];\n        }\n    }\n    \n    // Function to get the XOR of the range in the segment tree\n    int get(int v, int tl, int tr, int l, int r, int t[]){\n        if(l > r)\n            return 0;\n        if(tl == l && tr == r)\n            return t[v];\n        int mid = (tl + tr)/2;\n        return get(2*v, tl, mid, l, min(mid, r), t) ^\n               get(2*v+1, mid+1, tr, max(mid+1, l), r, t);\n    }\n    \n    // Function to find the special XOR values for given queries\n    vector<int> specialXor(int N, int Q, int a[], vector<int> query[])\n    {\n        int val = 0;\n        int t[4*N+2];\n        \n        // Calculating the XOR of all elements in the array\n        for(int i = 0;i < N;i++)\n            val = val ^ a[i];\n        \n        // Building the segment tree\n        build(1, 0, N-1, a, t);\n        \n        int l, r, v;\n        vector<int> sol;\n        \n        // Performing the queries\n        for(int i = 0;i < Q;i++){\n            l = query[i][0];\n            r = query[i][1];\n            \n            // Getting the XOR of the range and XORing it with the val\n            v = get(1, 0, N-1, l-1, r-1, t) ^ val;\n            \n            // Adding the result to the solution vector\n            sol.push_back(v);\n        }\n        \n        // Returning the solution vector\n        return sol;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end function Template for python3\n\nclass Solution:\n    \n    # Function to build the segment tree\n    def build(self, v, l, r, a, t):\n        if l == r:\n            t[v] = a[l]\n        else:\n            mid = (l + r)//2\n            self.build(2*v, l, mid, a, t)\n            self.build(2*v+1, mid+1, r, a, t)\n            t[v] = t[2*v] ^ t[2*v+1]\n    \n    # Function to get the xor value in the given range\n    def get(self, v, tl, tr, l, r, t):\n        if l > r:\n            return 0\n        if tl == l and tr == r:\n            return t[v]\n        mid = (tl + tr)//2\n        return self.get(2*v, tl, mid, l, min(mid, r), t) ^ self.get(2*v+1, mid+1, tr, max(mid+1, l), r, t)\n        \n    # Main function to solve the problem\n    def specialXor(self, N, Q, a, query):\n        val = 0\n        t = [0]*(4*N+2)\n        \n        # Calculating the initial xor value\n        for i in range(N):\n            val = val ^ a[i]\n        \n        # Building the segment tree\n        self.build(1, 0, N-1, a, t)\n        \n        sol=[]\n        # Processing the queries\n        for i in range(Q):\n            l = query[i][0]\n            r = query[i][1]\n            \n            # Getting the xor value in the given range\n            v = self.get(1, 0, N-1, l-1, r-1, t) ^ val\n            sol.append(v)\n        \n        # Returning the solutions\n        return sol",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}