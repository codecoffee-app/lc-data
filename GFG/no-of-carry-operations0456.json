{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703606,
            "title": "No of Carry Operations ",
            "titleSlug": "no-of-carry-operations0456",
            "content": "<p><span style=\"font-size:18px\">Given two numbers A and B, the task is to find the number of carry operations required when two numbers are added</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note: </strong>Both numbers are always of the same length.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n</span><strong><span style=\"font-size:18px\">A = </span></strong><span style=\"font-size:18px\">1234</span>\r\n<span style=\"font-size:18px\"><strong>B = </strong>5678</span>\r\n<span style=\"font-size:18px\"><strong>Output: </strong>\r\n2</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">1234\r\n+\r\n5678\r\n--------\r\n6912\r\n--------\r\n4+8 = 2 and carry 1\r\ncarry+3+7 = carry 1\r\ncarry+2+6 = 9, carry 0\r\ncarry+1+5 = 6</span>\r\n\r\n<span style=\"font-size:18px\">So, there are 2 Carry Operations.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n</span><strong><span style=\"font-size:18px\">A = </span></strong><span style=\"font-size:18px\">555</span>\r\n<span style=\"font-size:18px\"><strong>B = </strong>555</span>\r\n<span style=\"font-size:18px\"><strong>Output: </strong>\r\n3</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">555\r\n+\r\n555\r\n--------\r\n1110\r\n--------\r\n5+5 = 0 and carry 1\r\ncarry+5+5 = 0 carry 1\r\ncarry+5+5 = 0, carry 1</span>\r\n\r\n<span style=\"font-size:18px\">So, there are 3 Carry Operations.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>countCarry()</strong> which takes two Integers A and B and returns the answer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= A, B &lt;= 10<sup>18</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two numbers A and B of the same length, determine the number of carry operations required when adding them together.",
                "constraints": [
                    "1 <= A, B <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "A = 1234\nB = 5678",
                        "output": "2",
                        "explanation": "When adding 1234 and 5678:\n- 4 + 8 = 12 (carry 1)\n- 1 (carry) + 3 + 7 = 11 (carry 1)\n- 1 (carry) + 2 + 6 = 9 (no carry)\n- 0 (carry) + 1 + 5 = 6 (no carry)\nThere are two carry operations."
                    },
                    {
                        "input": "A = 555\nB = 555",
                        "output": "3",
                        "explanation": "When adding 555 and 555:\n- 5 + 5 = 10 (carry 1)\n- 1 (carry) + 5 + 5 = 11 (carry 1)\n- 1 (carry) + 5 + 5 = 11 (carry 1)\nThere are three carry operations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Be Careful with Overflow of Integers.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    long long countCarry(long long A , long long B) {\r\n        \r\n        long long ans = 0;\r\n        \r\n        long long carry = 0;\r\n        \r\n        while(A && B)\r\n        {\r\n            long long A_digit=A%10;     // We extract the digits of A and B one by one\r\n            long long B_digit=B%10;\r\n            \r\n            // then we check whether the sum of gthe digits and the carry is more\r\n            // than 10. If yes, then a Carry is added.\r\n            \r\n            if(A_digit+B_digit+carry>=10)   \r\n            {\r\n                carry=1;\r\n                ans+=1;\r\n            }\r\n            else\r\n                carry=0; \r\n            A/=10;\r\n            B/=10;\r\n        }\r\n            \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static int countCarry(Long A , Long B){\r\n        int ans = 0;\r\n        \r\n        int carry = 0;\r\n        \r\n        while(A>0)\r\n        {\r\n            Long A_digit=A%10;    // We extract the digits of A and B one by one\r\n            Long B_digit=B%10;\r\n            \r\n            // then we check whether the sum of gthe digits and the carry is more\r\n            // than 10. If yes, then a Carry is added.\r\n            \r\n            if(A_digit+B_digit+carry>=10)\r\n            {\r\n                carry=1;\r\n                ans+=1;\r\n            }\r\n            else\r\n                carry=0; \r\n            A/=10;\r\n            B/=10;\r\n        }\r\n            \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def countCarry(self, A , B):\r\n        \r\n        ans = 0\r\n        \r\n        carry = 0;\r\n        \r\n        while(A and B):\r\n            A_digit=A%10;      # We extract the digits of A and B one by one\r\n            B_digit=B%10;\r\n            \r\n            # then we check whether the sum of gthe digits and the carry is more\r\n            # than 10. If yes, then a Carry is added.\r\n            \r\n            if(A_digit+B_digit+carry>=10):\r\n                carry=1\r\n                ans+=1\r\n            else:\r\n                carry=0;\r\n            A//=10\r\n            B//=10\r\n            \r\n        return ans;",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public long countCarry(long A, long B)\n    {\n        long ans = 0;\n        long carry = 0;\n\n        while (A != 0 && B != 0)\n        {\n            long A_digit = A % 10;\n            long B_digit = B % 10;\n\n            if (A_digit + B_digit + carry >= 10)\n            {\n                carry = 1;\n                ans += 1;\n            }\n            else\n                carry = 0;\n\n            A /= 10;\n            B /= 10;\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}