{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700040,
            "title": "Node at a given index in linked list",
            "titleSlug": "node-at-a-given-index-in-linked-list",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18.6667px;\">Given the head of a Singly Linked List and an <strong>index</strong>,</span> The task is to find the node at the given <strong>index</strong>(1-based index) of the linked list. If no such&nbsp;<strong>index </strong>exists then return <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong><strong> </strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7 , index = 3<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700040/Web/Other/blobid0_1720680517.png\" width=\"502\" height=\"69\" /><br /><strong>Output: </strong>3\n<strong>Explanation:</strong> The Node value at index 3 is 3.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong><strong> </strong>LinkedList: 19-&gt;28-&gt;37-&gt;46-&gt;55 , index = 6<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700040/Web/Other/blobid1_1720680549.png\" width=\"502\" height=\"69\" /><strong><br /></strong></span><span style=\"font-size: 18px;\"><strong>Output: </strong>-1<strong><br />Explanation:</strong> As number of nodes are less than k so there is no node at index 6 , therefore our answer is -1.</span></pre>\n<p><strong style=\"font-size: 18px;\"><span style=\"box-sizing: border-box; line-height: 1.7em; font-family: Nunito; color: #1e2229; background-color: #ffffff; font-weight: 400;\"><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; font-family: var(--gfg-font-secondary) !important; font-size: 17px !important; color: var(--text-color) !important; background-color: var(--background) !important;\">Expected Time Complexity</span>: O(n)<br style=\"box-sizing: border-box; line-height: 1.7em; font-family: var(--gfg-font-primary) !important; font-size: 17px !important; color: var(--text-color) !important; background-color: var(--background) !important;\" /><span style=\"box-sizing: border-box; font-weight: bolder; line-height: 1.7em; font-family: var(--gfg-font-secondary) !important; font-size: 17px !important; color: var(--text-color) !important; background-color: var(--background) !important;\">Expected Auxiliary Space</span>: O(1)</span></strong></p>\n<p><strong style=\"font-size: 18px;\">Constraints:</strong><br style=\"font-size: 18px;\" /><span ><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">1 &lt;= number of nodes &lt;= 10</span><span style=\"box-sizing: border-box; line-height: 1.7em; position: relative; vertical-align: baseline; top: -0.5em; font-family: Nunito; color: #1e2229; background-color: #ffffff;\">5<br style=\"box-sizing: border-box; line-height: 1.7em; font-family: var(--gfg-font-primary) !important; color: var(--text-color) !important; background-color: var(--background) !important;\" /></span><span style=\"color: #1e2229; font-family: Nunito; background-color: #ffffff;\">1 &lt;= node-&gt;data , k &lt;= 10<sup>5</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a singly linked list and an index (1-based), find the node at the given index. If the index is out of bounds, return -1.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5",
                    "1 <= index <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1->2->3->4->5->6->7, index = 3",
                        "output": "3",
                        "explanation": "The node at index 3 (1-based) has the value 3."
                    },
                    {
                        "input": "LinkedList: 19->28->37->46->55, index = 6",
                        "output": "-1",
                        "explanation": "The linked list only contains 5 nodes. Since the index 6 is out of range, the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse the linked list node by node, counting each step until the desired index is reached.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to get the data of the node at the given index\n\nclass Solution {\n  public:\n    int GetNth(Node *head, int index) {\n        Node *current = head; // initialize a pointer to the head of the linked list\n        int count = 1;        // initialize the index of the current node as 1\n\n        // traverse the linked list until the current node becomes NULL\n        while (current != NULL) {\n            // check if the current node is the one at the given index\n            if (count == index)\n                return (current->data); // return the data of the current node\n\n            count++;                 // increment the count\n            current = current->next; // move to the next node\n        }\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public int GetNth(Node head, int index) {\n        Node current = head;\n        int count = 1;\n\n        while (current != null) {\n            if (count == index) return current.data;\n\n            count++;\n            current = current.next;\n        }\n        return -1; // Added return statement to handle case when index is not found\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def GetNth(self, head, index):\n        current = head\n        count = 1\n\n        while current:\n            if count == index:\n                return current.data\n            count += 1\n            current = current.next\n        return -1  # Added return statement to handle case when index is not found\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    GetNth(head, index) {\n        let current = head;\n        let count = 1;\n\n        while (current !== null) {\n            if (count === index) return current.data;\n            count++;\n            current = current.next;\n        }\n        return -1; // Added return statement to handle case when index is not found\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}