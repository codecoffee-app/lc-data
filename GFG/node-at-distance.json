{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700593,
            "title": "Count the nodes at distance K from leaf",
            "titleSlug": "node-at-distance",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree with <strong>n </strong>nodes and a non-negative integer <strong>k</strong>, the task is to count the number of <strong>special nodes</strong>. <br />A node is considered <strong>special</strong> if there exists at least one leaf in its subtree such that the distance between the node and leaf is exactly <strong>k</strong>.<br /></span><span style=\"font-size: 18px;\"><strong>Note:</strong> Any such node should be counted only once. For example, if a node is at a distance <strong>k</strong> from 2 or more leaf nodes, then it would add only 1 to our count.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n\\t  1\n&nbsp;     /   \\\n&nbsp;    2     3\n&nbsp;  /  \\   /  \\\n&nbsp; 4   5  6    7\n&nbsp;\\t   \\ \n&nbsp;\\t    8\nk = 2\n<strong>Output: </strong>2<strong>\nExplanation: </strong>There are only two unique nodes that are at a distance of 2 units from the leaf node. (node 3 for leaf with value 8 and node 1 for leaves with values 4, 5 and 7) Note that node 2 isn't considered for leaf with value 8 because it isn't a direct ancestor of node 8.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong><strong><br /></strong></span><span style=\"font-size: 18px;\"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1\n&nbsp;\\t  /\n&nbsp;\\t 3\n&nbsp;\\t/\n&nbsp;     5\n&nbsp;   /  \\\n&nbsp;  7    8\n\\t   \\\n&nbsp;\\t   9\nk = 4\n<strong>Output: </strong>1<strong>\nExplanation: </strong>Only one node is there which is at a distance of 4 units from the leaf node.(node 1 for leaf with value 9) </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    \r\n    void kDistantFromLeafUtil(Node* node,int &counter,bool visited[],int pathLen,int k)\r\n    {\r\n    \t//base case\r\n    \tif (node==NULL) return;\r\n    \r\n    \tvisited[pathLen] = false;\r\n    \tpathLen++;\r\n    \r\n    \t//if it's a leaf node, we increment the count but only if the \r\n    \t//same ancestor at distance k is not already counted.\r\n    \tif (node->left == NULL && node->right == NULL &&\r\n    \t\tpathLen-k-1 >= 0 && visited[pathLen-k-1] == false)\r\n    \t{\r\n    \t\tcounter++;\r\n    \t\t//setting the ancestor as visited so that we won't count it again.\r\n    \t\tvisited[pathLen-k-1] = true;\r\n    \t\treturn;\r\n    \t}\r\n    \r\n    \t//if the current node is not a leaf node then we call the function \r\n    \t//recursively for left and right subtrees.\r\n    \tkDistantFromLeafUtil(node->left, counter, visited, pathLen, k);\r\n    \tkDistantFromLeafUtil(node->right, counter, visited, pathLen, k);\r\n    \t\r\n    }\r\n    \r\n    //Function to return count of nodes at a given distance from leaf nodes.\r\n    int printKDistantfromLeaf(Node* node, int k)\r\n    {\r\n    \tint counter = 0;\r\n    \tbool visited[MAX_HEIGHT] = {false};\r\n    \tkDistantFromLeafUtil(node, counter, visited, 0, k);\r\n    \t\r\n    \t//returning the count.\r\n    \treturn counter;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\nclass Solution\r\n{\r\n    int ctr;\r\n    boolean visited[] = new boolean[100001];\r\n\r\n    public void kDistantFromLeafUtil(Node root, int len, int k)\r\n    {\r\n        //base case\r\n        if (root == null) return;\r\n\r\n        visited[len] = false;\r\n        len++;\r\n\r\n        //if it\u00e2\u20ac\u2122s a leaf node, we increment the count but only if the \r\n\t    //same ancestor at distance k is not already counted.\r\n        if (root.left == null && root.right == null &&\r\n            len-k-1 >= 0 && visited[len-k-1] == false)\r\n        {\r\n            ctr++;\r\n            //setting the ancestor as visited so that we won't count it again.\r\n            visited[len-k-1] = true;\r\n            return;\r\n        }\r\n\r\n        //if the current node is not a leaf node then we call the function \r\n\t    //recursively for left and right subtrees.\r\n        kDistantFromLeafUtil(root.left, len, k);\r\n        kDistantFromLeafUtil(root.right, len, k);\r\n        \r\n    }\r\n    //Function to return count of nodes at a given distance from leaf nodes.\r\n    public int printKDistantfromLeaf(Node root, int k)\r\n    {\r\n        ctr = 0;\r\n        Arrays.fill(visited, false);\r\n\r\n        kDistantFromLeafUtil(root, 0, k);\r\n        //returning the count.\r\n        return ctr;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def printKDistantfromLeafUtil(self, node, visited, pathLen, k):\r\n        global c\r\n        \r\n        #base case\r\n        if node == None:\r\n            return\r\n    \r\n        visited[pathLen]=0\r\n        pathLen+=1\r\n        \r\n        #if it\u00e2\u20ac\u2122s a leaf node, we increment the count but only if the \r\n    \t#same ancestor at distance k is not already counted.\r\n        if(node.left==None and node.right==None and pathLen-k-1>=0 and visited[pathLen-k-1]==0):\r\n            c+=1\r\n            #setting the ancestor as visited so that we won't count it again.\r\n            visited[pathLen-k-1]=1\r\n            return\r\n    \r\n        #if the current node is not a leaf node then we call the function \r\n    \t#recursively for left and right subtrees\r\n        self.printKDistantfromLeafUtil(node.left, visited, pathLen, k)\r\n        self.printKDistantfromLeafUtil(node.right, visited, pathLen, k)\r\n    \r\n    #Function to return count of nodes at a given distance from leaf nodes.\r\n    def printKDistantfromLeaf(self, node, k):\r\n        global c\r\n        c=0\r\n        visited = [0]*MAX_HEIGHT\r\n        self.printKDistantfromLeafUtil(node, visited, 0, k)\r\n        #returning the count.\r\n        return c\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for csharp\r\n\r\n\r\nclass Solution\r\n{\r\n    void kDistantFromLeafUtil(Node node,ref int counter,bool[] visited,int pathLen,int k)\r\n    {\r\n    \t//base case\r\n    \tif (node==null) return;\r\n    \r\n    \tvisited[pathLen] = false;\r\n    \tpathLen++;\r\n    \r\n    \t//if it's a leaf node, we increment the count but only if the \r\n    \t//same ancestor at distance k is not already counted.\r\n    \tif (node.left == null && node.right == null &&\r\n    \t\tpathLen-k-1 >= 0 && visited[pathLen-k-1] == false)\r\n    \t{\r\n    \t\tcounter++;\r\n    \t\t//setting the ancestor as visited so that we won't count it again.\r\n    \t\tvisited[pathLen-k-1] = true;\r\n    \t\treturn;\r\n    \t}\r\n    \r\n    \t//if the current node is not a leaf node then we call the function \r\n    \t//recursively for left and right subtrees.\r\n    \tkDistantFromLeafUtil(node.left,ref counter, visited, pathLen, k);\r\n    \tkDistantFromLeafUtil(node.right,ref counter, visited, pathLen, k);\r\n    \t\r\n    }\r\n    //Function to return count of nodes at a given distance from leaf nodes.\r\n    public int printKDistantfromLeaf(Node root, int k)\r\n    {\r\n    \tint counter = 0;\r\n    \tbool[] visited = new bool[100000];\r\n    \tfor(int i = 0;i<100000;i++) visited[i] = false;\r\n    \tkDistantFromLeafUtil(root,ref counter, visited, 0, k);\r\n    \t\r\n    \t//returning the count.\r\n    \treturn counter;\r\n    }\r\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} node\r\n * @param {number} k\r\n * @returns {number}\r\n*/\r\n\r\n/*\r\nclass Node{\r\n    constructor(data){\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n*/\r\n\r\nclass Solution {\r\n    \r\n    constructor(){\r\n        this.counter = 0;\r\n    }\r\n    \r\n    kDistantFromLeafUtil(node, visited, pathLen, k)\r\n    {\r\n    \t//base case\r\n    \tif (node === null) return;\r\n    \r\n    \tvisited[pathLen] = false;\r\n    \tpathLen++;\r\n    \r\n    \t//if it\u00e2\u20ac\u2122s a leaf node, we increment the count but only if the \r\n\t    //same ancestor at distance k is not already counted.\r\n    \tif (node.left === null && node.right === null &&\r\n    \t\tpathLen-k-1 >= 0 && visited[pathLen-k-1] === false)\r\n    \t{\r\n    \t\tthis.counter++;\r\n    \t\t//setting the ancestor as visited so that we won't count it again.\r\n    \t\tvisited[pathLen-k-1] = true;\r\n    \t\treturn;\r\n    \t}\r\n    \r\n    \t//if the current node is not a leaf node then we call the function \r\n\t    //recursively for left and right subtrees.\r\n    \tthis.kDistantFromLeafUtil(node.left, visited, pathLen, k);\r\n    \tthis.kDistantFromLeafUtil(node.right, visited, pathLen, k);\r\n    \t\r\n    }\r\n    \r\n    //Function to return count of nodes at a given distance from leaf nodes.\r\n    printKDistantfromLeaf(node, k)\r\n    {\r\n    \tlet visited = [];\r\n    \tfor(let i=0; i<100000; i++){\r\n    \t    visited.push(false);\r\n    \t}\r\n    \tthis.kDistantFromLeafUtil(node, visited, 0, k);\r\n    \t//returning the count.\r\n    \treturn this.counter;\r\n    }\r\n}\r\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}