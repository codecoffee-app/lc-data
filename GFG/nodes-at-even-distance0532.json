{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705660,
            "title": "Nodes at even distance",
            "titleSlug": "nodes-at-even-distance0532",
            "content": "<p><span style=\"font-size:18px\">Given a connected acyclic graph with n&nbsp;nodes and n-1 edges, count the pair&nbsp;of nodes that are at even distance(number of edges) from each other.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 3\r\ngraph = {{}, {2}, {1, 3}, {2}}\r\n<strong>Output:</strong> 1\r\n<strong>Explaination:</strong> Here there are three pairs {1,2},{1,3}\r\nand {2,3} and only {1,3} has even distance between them.\r\n</span><span style=\"font-size:18px\">i.e</span> <span style=\"font-size:18px\">\\t    1\r\n\\t\\t /\r\n\\t\\t2\r\n\\t     /\r\n\\t    3</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 5\r\ngraph = {{}, {2,4}, {1,3}, {2}, {1,5}, {4}}\r\n<strong>Output:</strong> 4\r\n<strong>Explaination:</strong> There are four pairs {1,3},{1,5},{2,4}\r\nand {3,5} which has even distance.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>countOfNodes()</strong>&nbsp;which takes the array <strong>graph[]</strong>&nbsp;(given as <a href=\"https://en.wikipedia.org/wiki/Adjacency_list#:~:text=In%20graph%20theory%20and%20computer,particular%20vertex%20in%20the%20graph.\">Adjacency list</a>)&nbsp;</span><span style=\"font-size:18px\">and its size <strong>n&nbsp;</strong>as input parameters&nbsp;and returns the count&nbsp;of&nbsp;pair of nodes that are at even distance from each other</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(V+E)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(V)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n&nbsp;&le; 10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a connected acyclic graph with n nodes and n-1 edges, determine the number of node pairs that have an even distance (number of edges) between them.",
                "constraints": [
                    "1 <= n <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 3\ngraph = {{}, {2}, {1, 3}, {2}}",
                        "output": "1",
                        "explanation": "In the given graph with edges 1-2 and 2-3, the pairs are {1,2}, {1,3}, and {2,3}. The distances are 1, 2, and 1 respectively. Only the pair {1,3} has an even distance of 2."
                    },
                    {
                        "input": "n = 5\ngraph = {{}, {2,4}, {1,3}, {2}, {1,5}, {4}}",
                        "output": "4",
                        "explanation": "In the given graph with edges 1-2, 1-4, 2-3, 1-5, 4-5, the pairs with even distance are {1,3}, {1,5}, {2,4}, and {3,5}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Dfs.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n// Dfs function to find count of nodes at \r\n// even distance \r\nvoid dfs(vector<int> graph[], int node, int dist[],  \r\n                                    bool vis[], int c) \r\n{ \r\n    if (vis[node]) { \r\n        return; \r\n    } \r\n    // Set flag as true for current \r\n    // node in visited array \r\n    vis[node] = true; \r\n  \r\n    // Insert the distance in \r\n    // dist array for current \r\n    // visited node u \r\n    dist[node] = c; \r\n  \r\n    for (int i = 0; i < graph[node].size(); i++) { \r\n        // If its neighbours are not vis, \r\n        // run dfs for them \r\n        if (!vis[graph[node][i]]) { \r\n            dfs(graph, graph[node][i], dist, vis, c + 1); \r\n        } \r\n    } \r\n} \r\n  \r\nint countOfNodes(vector<int> graph[], int n) \r\n{ \r\n    // bool array to \r\n    // mark visited nodes \r\n    bool vis[n + 1] = { false }; \r\n  \r\n    // Integer array to \r\n    // compute distance \r\n    int dist[n + 1] = { 0 }; \r\n  \r\n    dfs(graph, 1, dist, vis, 0); \r\n  \r\n    int even = 0, odd = 0; \r\n  \r\n    // Traverse the distance array \r\n    // and count the even and odd levels \r\n    for (int i = 1; i <= n; i++) { \r\n        if (dist[i] % 2 == 0) { \r\n            even++; \r\n        } \r\n        else { \r\n            odd++; \r\n        } \r\n    } \r\n  \r\n    int ans = ((even * (even - 1)) + (odd * (odd - 1))) / 2; \r\n  \r\n    return ans; \r\n} \r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\r\nclass Solution{\r\n\tvoid dfs(ArrayList<ArrayList<Integer>> graph, int node, int dist[], boolean vis[], int c) \r\n\t{\r\n\t\tif (vis[node]) { \r\n\t\t\treturn; \r\n\t\t} \r\n\t\t// Set flag as true for current \r\n\t\t// node in visited array \r\n\t\tvis[node] = true; \r\n\t\t\r\n\t\t// Insert the distance in \r\n\t\t// dist array for current \r\n\t\t// visited node u \r\n\t\tdist[node] = c; \r\n\t\t\r\n\t\tfor (int i = 0; i < graph.get(node).size(); i++) { \r\n\t\t\t// If its neighbours are not vis, \r\n\t\t\t// run dfs for them \r\n\t\t\tif (!vis[graph.get(node).get(i)]) { \r\n\t\t\t\tdfs(graph, graph.get(node).get(i), dist, vis, c + 1); \r\n\t\t\t} \r\n\t\t} \r\n\t}\r\n\tint countOfNodes(ArrayList<ArrayList<Integer>> graph, int n) \r\n    {\r\n\t\tboolean vis[] = new boolean[n+1];\r\n\t\tArrays.fill(vis, false);\r\n\t\t  \r\n\t    // Integer array to \r\n\t    // compute distance \r\n\t    int [] dist = new int[n+1]; \r\n\t    Arrays.fill(dist, 0);\r\n\t    \r\n\t    dfs(graph, 1, dist, vis, 0); \r\n\t  \r\n\t    int even = 0, odd = 0; \r\n\t  \r\n\t    // Traverse the distance array \r\n\t    // and count the even and odd levels \r\n\t    for (int i = 1; i <= n; i++) { \r\n\t        if (dist[i] % 2 == 0) { \r\n\t            even++; \r\n\t        } \r\n\t        else { \r\n\t            odd++; \r\n\t        } \r\n\t    }\r\n\t    int ans = ((even * (even - 1)) + (odd * (odd - 1))) / 2; \r\n\t    return ans; \r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def countOfNodes(self, graph,n):\n        # Initialize distance array with 0\n        dis=[0]*(n+1)\n        # Initialize visited array with True\n        vis=[True]*(n+1)\n        \n        # Define dfs function\n        def dfs(node,c):\n            # Mark the node as visited\n            vis[node]=False\n            # Update the distance of the node\n            dis[node]=c\n            # Iterate over the neighbors of the node\n            for i in graph[node]:\n                # If the neighbor is not visited, recursively call dfs\n                if vis[i]:\n                    dfs(i,c+1)\n        \n        # Start dfs from node 1 with distance 0\n        dfs(1,0)\n        \n        # Initialize even and odd variables\n        even=odd=0\n        \n        # Count the number of nodes with even and odd distances\n        for i in range(1,n+1):\n            # If distance is odd, increment odd count\n            if dis[i]%2:\n                odd+=1\n            # If distance is even, increment even count\n            else:\n                even+=1\n        \n        # Calculate the total number of pairs that can be formed using nodes with even and odd distances\n        return (even*(even-1)//2+(odd)*(odd-1)//2)",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}