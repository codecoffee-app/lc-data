{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700676,
            "title": "Nodes at Odd Levels",
            "titleSlug": "nodes-at-odd-levels",
            "content": "<p><span >Given a binary tree, find all the nodes at odd levels. Return in sorted order. The root is considered at level 1.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> root = [1, 2, 3, 4, 5, N, 6, N, N, 7, 8, 9]\n\\t    1\n\\t /     \\\n\\t2\\t 3\n    /   \\\\t \\\n   4     5\\t 6\n\\t  /  \\     /\n\\t 7    8   9\n<strong>Output:</strong>  [1, 4, 5, 6]<br /><strong>Explanation: </strong>The odd levels are 1 and 3 and thier node are 1 and 4 5 6 respectively. </span></pre>\n<pre><span ><strong>Input: </strong>root = [1, 2, 3, 4, 5, N, 6, N, N, 7, 8, 9]\n\\t    1\n&nbsp;\\t/     \\\n&nbsp;    2\\t  3\n&nbsp;  /   \\    /   \\\n&nbsp; 4     5  6     7 \n<strong>Output: </strong>[1, 4, 5, 6, 7]<br /><strong>Explanation:<span > </span></strong>The odd levels are 1 and 3 and thier node are 1 and 4 5 6 7 respectively. </span></pre>\n<pre><span ><strong>Input: </strong>root = [1, 2, 3, 4, 5, 8, 7]\n\\t    1\n&nbsp;\\t/     \\\n&nbsp;    2\\t  3\n&nbsp;  /   \\    /   \\\n&nbsp; 4     5  8     7\n<strong>Output: </strong>[1, 4, 5, 7, 8]<br /><strong>Explanation:<span > </span></strong>The odd levels are 1 and 3 and thier node are 1 and 4 5 8 7 respectively. </span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>3</sup></span><br /><span >1 &lt;= node-&gt;data &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find all the nodes at odd levels. Return the node values in sorted order. The root is considered to be at level 1.",
                "constraints": [
                    "1 <= number of nodes <= 1000",
                    "1 <= node value <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5, null, 6, null, null, 7, 8, 9]",
                        "output": "[1, 4, 5, 6, 7, 8, 9]",
                        "explanation": "The odd levels are 1 and 3. The nodes at these levels are 1, 4, 5, 6, 7, 8, and 9. Sorted, these values are [1, 4, 5, 6, 7, 8, 9]."
                    },
                    {
                        "input": "[1, 2, 3, 4, 5, 6, 7]",
                        "output": "[1, 4, 5, 6, 7]",
                        "explanation": "The odd levels are 1 and 3. The nodes at these levels are 1, 4, 5, 6, and 7. Sorted, these values are [1, 4, 5, 6, 7]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use recursion and tree traversal.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "accolite"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Recursive function to find nodes at odd levels\n    void nodesAtOddLevelsUtil(Node *root, int l, vector<int> &oddNodes) {\n        // Base case: if root is null, return\n        if (root == nullptr) {\n            return;\n        }\n\n        // If current level is odd, add root to oddNodes vector\n        if (l & 1) {\n            oddNodes.push_back(root->data);\n        }\n\n        // Recursive call on left and right child nodes with increment in level by 1\n        nodesAtOddLevelsUtil(root->left, l + 1, oddNodes);\n        nodesAtOddLevelsUtil(root->right, l + 1, oddNodes);\n    }\n\n    // Function to find nodes at odd levels\n    vector<int> nodesAtOddLevels(Node *root) {\n        // Create an empty vector to store odd level nodes\n        vector<int> oddNodes;\n\n        // Call the recursive function with initial level as 1\n        nodesAtOddLevelsUtil(root, 1, oddNodes);\n\n        // Return the vector containing odd level nodes\n        return oddNodes;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to return the nodes at odd levels in a binary tree\n    public ArrayList<Integer> nodesAtOddLevels(Node root) {\n        // Create an empty arraylist to store the odd level nodes\n        ArrayList<Integer> oddNodes = new ArrayList<Integer>();\n        // Call the utility function to find the odd level nodes\n        nodesAtOddLevelsUtil(root, 1, oddNodes);\n        // Return the arraylist of odd level nodes\n        return oddNodes;\n    }\n\n    // Utility function to find the nodes at odd levels in a binary tree\n    public void nodesAtOddLevelsUtil(Node root, int level,\n                                     ArrayList<Integer> oddNodes) {\n        // Base case: if the root is null, return\n        if (root == null) {\n            return;\n        }\n        // If the current level is odd, add the root node to the arraylist\n        if (level % 2 == 1) {\n            oddNodes.add(root.data);\n        }\n        // Recursively call the utility function for the left and right children,\n        // incrementing the level\n        nodesAtOddLevelsUtil(root.left, level + 1, oddNodes);\n        nodesAtOddLevelsUtil(root.right, level + 1, oddNodes);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to return nodes at odd levels in a binary tree.\n    def nodesAtOddLevels(self, root):\n\n        oddNodes = []  #list to store nodes at odd levels\n\n        #Recursive function to traverse the tree and find nodes at odd levels.\n        self.nodesAtOddLevelsUtil(root, 1, oddNodes)\n\n        return oddNodes  #returning the list of nodes at odd levels\n\n    #Helper function to recursively traverse the tree and find nodes at odd levels.\n    def nodesAtOddLevelsUtil(self, root, l, oddNodes):\n\n        #Base case: If root is None, return.\n        if (root == None):\n            return\n\n        #Checking if the level is odd and adding the node to the list.\n        if l % 2 == 1:\n            oddNodes.append(root.data)\n\n        #Recursive calls to traverse the left and right subtrees.\n        self.nodesAtOddLevelsUtil(root.left, l + 1, oddNodes)\n        self.nodesAtOddLevelsUtil(root.right, l + 1, oddNodes)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    nodesAtOddLevels(root) {\n        let oddNodes = [];\n        this.nodesAtOddLevelsUtil(root, 1, oddNodes);\n        return oddNodes;\n    }\n\n    nodesAtOddLevelsUtil(root, level, oddNodes) {\n        if (root == null) {\n            return;\n        }\n        if (level % 2 !== 0) {\n            oddNodes.push(root.data);\n        }\n\n        this.nodesAtOddLevelsUtil(root.left, level + 1, oddNodes);\n        this.nodesAtOddLevelsUtil(root.right, level + 1, oddNodes);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}