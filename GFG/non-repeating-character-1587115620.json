{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 701322,
      "title": "Non Repeating Character",
      "titleSlug": "non-repeating-character-1587115620",
      "content": "<p><span >Given a string <strong>s</strong> consisting of <strong>lowercase </strong>English<strong> </strong>Letters. Return the first non-repeating character in <strong>s</strong>. <br /></span><span >If there is no non-repeating character, return <strong>'$'.</strong><br />Note:<strong> </strong>When you return '$' driver code will output <strong>-1</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>s = \"geeksforgeeks\"\n<strong>Output: </strong>'f'<strong>\nExplanation: </strong>In the given string, 'f' is the first character in the string which does not repeat.</span></pre>\n<pre><span ><strong style=\"font-family: monospace; white-space: pre;\">Input: </strong>s = \"racecar\"<br /><strong>Output: </strong>'e'<br /><strong>Explanation: </strong>In the given string, 'e' is the only character in the string which does not repeat.</span></pre>\n<pre><span ><strong style=\"font-family: monospace; white-space: pre;\">Input: </strong>s = \"aabbccc\"<br /><strong>Output: </strong>-1<br /><strong>Explanation: </strong>All the characters in the given string are repeating.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; s.size() &le; 10<sup>5</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given a string `s` consisting of lowercase English letters, find the first non-repeating character in `s`. If no non-repeating character exists, return '$'.",
        "constraints": ["1 <= s.size() <= 10^5"],
        "testcases": [
          {
            "input": "geeksforgeeks",
            "output": "f",
            "explanation": "The character 'f' is the first character in the string that appears only once."
          },
          {
            "input": "racecar",
            "output": "e",
            "explanation": "The character 'e' is the only character in the string that appears only once."
          },
          {
            "input": "aabbccc",
            "output": -1,
            "explanation": "All characters in the string appear more than once."
          }
        ]
      }
    },
    "similar": [],
    "hints": ["<p>Create a hash of characters to track those.</p>"],
    "relatedTopics": [
      {
        "name": "Hash",
        "slug": "hash"
      },
      {
        "name": "Strings",
        "slug": "strings"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": [
      "flipkart",
      "amazon",
      "microsoft",
      "de-shaw",
      "makemytrip",
      "ola-cabs",
      "payu",
      "teradata",
      "goldman-sachs",
      "maq-software",
      "infoedge",
      "oats-systems",
      "tejas-network"
    ],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "\n\nclass Solution {\n  public:\n    // Function to find the first non-repeating character in a string.\n    char nonRepeatingChar(string &s) {\n        int h[26] = {0};\n\n        // using hash table to store count of each character.\n        for (int i = 0; i < s.length(); i++) {\n            h[s[i] - 'a']++;\n        }\n        bool flag = false;\n\n        // iterating over the string.\n        for (int i = 0; i < s.length(); i++) {\n            // if count of current character is 1, we return it.\n            if (h[s[i] - 'a'] == 1) {\n                flag = true;\n                return s[i];\n            }\n        }\n        // if there is no non-repeating character then we return '$'.\n        if (!flag) {\n            return '$';\n        }\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find the first non-repeating character in a string.\n    static char nonRepeatingChar(String s) {\n        int h[] = new int[26];\n        Arrays.fill(h, 0);\n\n        // using hash table to store count of each character.\n        for (int i = 0; i < s.length(); i++) {\n            h[s.charAt(i) - 'a']++;\n        }\n\n        StringBuilder st = new StringBuilder(\"\");\n\n        // iterating over the string.\n        for (int i = 0; i < s.length(); i++) {\n            // if count of current character is 1, we return it.\n            if (h[s.charAt(i) - 'a'] == 1) {\n                return (s.charAt(i));\n            }\n        }\n        // if there is no non-repeating character then we return '$'.\n        return '$';\n    }\n}",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to find the first non-repeating character in a string.\n    def nonRepeatingChar(self, s):\n\n        #using hash table to store count of each character.\n        occurences = [0 for i in range(256)]\n\n        #iterating over the string.\n        for char in s:\n            occurences[ord(char)] += 1\n\n        for i in range(len(s)):\n            #if count of current character is 1, we return it.\n            if (occurences[ord(s[i])] == 1):\n                return s[i]\n\n        #if there is no non-repeating character then we return '$'.\n        return '$'\n",
        "lang_text": "py"
      },
      {
        "lang": "Javascript",
        "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {string} s\n * @returns {string}\n */\nclass Solution {\n    // Function to find the first non-repeating character in a string.\n    nonRepeatingChar(s) {\n        let h = new Array(256);\n        h.fill(0);\n\n        // using hash table to store count of each character.\n        for (let i = 0; i < s.length; i++) {\n            h[s.charCodeAt(i) - 97]++;\n        }\n        let flag = false;\n\n        // iterating over the string.\n        for (let i = 0; i < s.length; i++) {\n            // if count of current character is 1, we return it.\n            if (h[s.charCodeAt(i) - 97] == 1) {\n                flag = true;\n                return s[i];\n            }\n        }\n        // if there is no non-repeating character then we return '$'.\n        if (!flag) {\n            return '$';\n        }\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
