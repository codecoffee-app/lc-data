{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702696,
            "title": "Non-Repeating Element",
            "titleSlug": "non-repeating-element3958",
            "content": "<p><span style=\"font-size: 20px;\">Find the first non-repeating element in a given array<strong> arr</strong> of integers and if there is not present any non-repeating element then return <strong>0</strong></span></p>\n<p><span style=\"font-size: 20px;\"><strong>Note:</strong> The array consists of only positive and negative integers and <strong>not zero</strong>.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input: </strong>arr[] = [-1, 2, -1, 3, 2]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>-1 and 2 are repeating whereas 3 is the only number occuring once. Hence, the output is 3. </span></pre>\n<pre><span style=\"font-size: 20px;\"><strong>Input:</strong> arr[] = [1, 1, 1]\n<strong>Output:</strong> 0<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">T</span></span><span style=\"font-size: 20px;\">here is not present any non-repeating element so answer should be 0.</span></pre>\n<p><span style=\"font-size: 20px;\"><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size &lt;= 10<sup>6</sup><br />-10<sup>9</sup> &lt;= arr[i]<sup>&nbsp;</sup>&lt;= 10<sup>9</sup><br />arr[i] != 0&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integers (positive or negative, but not zero), find the first non-repeating element. If no non-repeating element exists, return 0.",
                "constraints": [
                    "1 <= arr.size <= 10^6",
                    "-10^9 <= arr[i] <= 10^9",
                    "arr[i] != 0"
                ],
                "testcases": [
                    {
                        "input": "[-1, 2, -1, 3, 2]",
                        "output": "3",
                        "explanation": "The numbers -1 and 2 appear more than once. The number 3 appears only once and is the first non-repeating element."
                    },
                    {
                        "input": "[1, 1, 1]",
                        "output": "0",
                        "explanation": "All elements in the array are repeating, so there is no non-repeating element, and the output is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a hash map to count occurrences of each element.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "snapdeal",
            "goldman-sachs",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int firstNonRepeating(vector<int>& arr) {\n        // Insert all array elements in hash\n        // table\n        int n = arr.size();\n        unordered_map<int, int> mp;\n        for (int i = 0; i < n; i++)\n            mp[arr[i]]++;\n\n        // Traverse array again and return\n        // first element with count 1.\n        for (int i = 0; i < n; i++)\n            if (mp[arr[i]] == 1)\n                return arr[i];\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int firstNonRepeating(int[] arr) {\n        // Insert all array elements in hash\n        // table\n        int n = arr.length;\n        Map<Integer, Integer> m = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            if (m.containsKey(arr[i])) {\n                m.put(arr[i], m.get(arr[i]) + 1);\n            } else {\n                m.put(arr[i], 1);\n            }\n        }\n        // Traverse array again and return\n        // first element with count 1.\n        for (int i = 0; i < n; i++)\n            if (m.get(arr[i]) == 1) return arr[i];\n        return 0;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def firstNonRepeating(self, arr):\n        mp = defaultdict(lambda: 0)\n        n = len(arr)\n        # Insert all array elements in hash table\n        for i in range(n):\n            mp[arr[i]] += 1\n\n        # Traverse array again and return\n        # first element with count 1.\n        for i in range(n):\n            if mp[arr[i]] == 1:\n                return arr[i]\n        return 0\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    firstNonRepeating(arr) {\n        const n = arr.length;\n        // Insert all array elements into a hash table\n        const mp = {};\n        for (let i = 0; i < n; i++) {\n            mp[arr[i]] = (mp[arr[i]] || 0) + 1;\n        }\n\n        // Traverse array again and return the first element with count 1\n        for (let i = 0; i < n; i++) {\n            if (mp[arr[i]] === 1) {\n                return arr[i];\n            }\n        }\n\n        return 0; // Return 0 if no non-repeating element is found\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}