{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700630,
            "title": "Normal BST to Balanced BST",
            "titleSlug": "normal-bst-to-balanced-bst",
            "content": "<p><span >Given a <strong>root</strong> of a Binary Search Tree, modify and return the given BST such that it is balanced and has <strong>minimum </strong>possible height. If there is more than one answer, return <strong>any</strong> of them.</span></p>\n<p><span ><strong>Note:</strong> The height of balanced BST returned by you will be compared with the expected height of the balanced tree.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>root[] = [30, 20, N, 10, N]\n     <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700630/Web/Other/blobid0_1739346405.png\" alt=\"\" width=\"270\" height=\"242\" /><br /></span><span ><strong >Output: </strong><span >2\n     <img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700630/Web/Other/blobid1_1739346405.png\" alt=\"\" width=\"270\" height=\"204\" /><br /></span><span style=\"font-size: 18.6667px;\"><strong>Explanation:</strong> The above unbalanced BST is converted to balanced with the minimum possible height i.e. 2.</span>\n</span></pre>\n<pre><span ><strong>Input: </strong>root[] = [4, 3, 5, 2, N, N, 6, 1, N, N, 7]\n     <img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/888005/Web/Other/blobid0_1739474366.png\" alt=\"\" width=\"277\" height=\"249\" />\n<strong>Output: </strong>3\n     </span><img style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\" src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/888005/Web/Other/blobid1_1739474366.png\" alt=\"\" width=\"274\" height=\"242\" /><br /><span ><strong>Explanation:</strong> The above unbalanced BST is converted to balanced with the minimum possible height i.e. 3.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= Number of Nodes &lt;= 10<sup>5</sup><br />1 &lt;= Node -&gt; data &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a Binary Search Tree (BST), modify the tree to be balanced with the minimum possible height. Return the root of the balanced BST.  If multiple balanced BSTs with minimum height are possible, return any one of them.\n\nNote: The height of the balanced BST you return will be compared to the expected minimum height.",
                "constraints": [
                    "1 <= Number of Nodes <= 10^5",
                    "1 <= Node.data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root[] = [30, 20, N, 10, N]",
                        "output": "2",
                        "explanation": "The provided unbalanced BST is transformed into a balanced BST with a minimum height of 2."
                    },
                    {
                        "input": "root[] = [4, 3, 5, 2, N, N, 6, 1, N, N, 7]",
                        "output": "3",
                        "explanation": "The provided unbalanced BST is transformed into a balanced BST with a minimum height of 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Store the inorder traversal and try to build a balanced BST using a recursive approach.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Inorder traversal to store elements of the\n    // tree in sorted order\n    void storeInorder(Node* root, vector<int>& nodes) {\n        if (root == nullptr)\n            return;\n\n        // Traverse the left subtree\n        storeInorder(root->left, nodes);\n\n        // Store the node data\n        nodes.push_back(root->data);\n\n        // Traverse the right subtree\n        storeInorder(root->right, nodes);\n    }\n\n    // Function to build a balanced BST from a sorted array\n    Node* buildBalancedTree(vector<int>& nodes, int start, int end) {\n\n        // Base case\n        if (start > end)\n            return nullptr;\n\n        // Get the middle element and make it the root\n        int mid = (start + end) / 2;\n        Node* root = new Node(nodes[mid]);\n\n        // Recursively build the left and right subtrees\n        root->left = buildBalancedTree(nodes, start, mid - 1);\n        root->right = buildBalancedTree(nodes, mid + 1, end);\n\n        return root;\n    }\n\n    // Function to balance a BST\n    Node* balanceBST(Node* root) {\n        vector<int> nodes;\n\n        // Store the nodes in sorted order\n        storeInorder(root, nodes);\n\n        // Build the balanced tree from the sorted nodes\n        return buildBalancedTree(nodes, 0, nodes.size() - 1);\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Inorder traversal to store elements of the\n    // tree in sorted order\n    static void storeInorder(Node root, ArrayList<Integer> nodes) {\n        if (root == null) return;\n\n        // Traverse the left subtree\n        storeInorder(root.left, nodes);\n\n        // Store the node data\n        nodes.add(root.data);\n\n        // Traverse the right subtree\n        storeInorder(root.right, nodes);\n    }\n\n    // Function to build a balanced BST from a sorted array\n    static Node buildBalancedTree(ArrayList<Integer> nodes, int start, int end) {\n\n        // Base case\n        if (start > end) return null;\n\n        // Get the middle element and make it the root\n        int mid = (start + end) / 2;\n        Node root = new Node(nodes.get(mid));\n\n        // Recursively build the left and right subtrees\n        root.left = buildBalancedTree(nodes, start, mid - 1);\n        root.right = buildBalancedTree(nodes, mid + 1, end);\n\n        return root;\n    }\n\n    // Function to balance a BST\n    static Node balanceBST(Node root) {\n        ArrayList<Integer> nodes = new ArrayList<>();\n\n        // Store the nodes in sorted order\n        storeInorder(root, nodes);\n\n        // Build the balanced tree from the sorted nodes\n        return buildBalancedTree(nodes, 0, nodes.size() - 1);\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    # Inorder traversal to store elements of the\n    # tree in sorted order\n    def storeInorder(self, root, nodes):\n        if root is None:\n            return\n\n        # Traverse the left subtree\n        self.storeInorder(root.left, nodes)\n\n        # Store the node data\n        nodes.append(root.data)\n\n        # Traverse the right subtree\n        self.storeInorder(root.right, nodes)\n\n    # Function to build a balanced BST from a sorted array\n    def buildBalancedTree(self, nodes, start, end):\n        # Base case\n        if start > end:\n            return None\n\n        # Get the middle element and make it the root\n        mid = (start + end) // 2\n        root = Node(nodes[mid])\n\n        # Recursively build the left and right subtrees\n        root.left = self.buildBalancedTree(nodes, start, mid - 1)\n        root.right = self.buildBalancedTree(nodes, mid + 1, end)\n\n        return root\n\n    # Function to balance a BST\n    def balanceBST(self, root):\n        nodes = []\n\n        # Store the nodes in sorted order\n        self.storeInorder(root, nodes)\n\n        # Build the balanced tree from the sorted nodes\n        return self.buildBalancedTree(nodes, 0, len(nodes) - 1)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n * @return {Node}\n */\n\nclass Solution {\n    // Inorder traversal to store elements of the\n    // tree in sorted order\n    storeInorder(root, nodes) {\n        if (root === null) return;\n\n        // Traverse the left subtree\n        this.storeInorder(root.left, nodes);\n\n        // Store the node data\n        nodes.push(root.data);\n\n        // Traverse the right subtree\n        this.storeInorder(root.right, nodes);\n    }\n\n    // Function to build a balanced BST from a sorted array\n    buildBalancedTree(nodes, start, end) {\n        // Base case\n        if (start > end) return null;\n\n        // Get the middle element and make it the root\n        let mid = Math.floor((start + end) / 2);\n        let root = new Node(nodes[mid]);\n\n        // Recursively build the left and right subtrees\n        root.left = this.buildBalancedTree(nodes, start, mid - 1);\n        root.right = this.buildBalancedTree(nodes, mid + 1, end);\n\n        return root;\n    }\n\n    // Function to balance a BST\n    balanceBST(root) {\n        let nodes = [];\n\n        // Store the nodes in sorted order\n        this.storeInorder(root, nodes);\n\n        // Build the balanced tree from the sorted nodes\n        return this.buildBalancedTree(nodes, 0, nodes.length - 1);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}