{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701751,
            "title": "Nth Catalan Number",
            "titleSlug": "nth-catalan-number0817",
            "content": "<p><span style=\"font-size: 18px;\">Given a number <strong>n</strong>. The task is to find the <strong>n<sup>th</sup> catalan number</strong>.<br />The first few Catalan numbers for <strong>n = 0, 1, 2, 3, </strong>&hellip; are <strong>1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, &hellip;<br /></strong></span><span ><strong>Catalan Number&nbsp;</strong>for <strong>n</strong> is equal to the number of expressions containing <strong>n</strong> pairs of parenthesis that are correctly matched, i.e., for each of the n(' there exist n ')' on there right and vice versa.</span><span ><br /></span><span style=\"font-size: 18px;\"><strong>Note:</strong> Positions start from 0 as shown above.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">n = 3\n</span><strong style=\"font-size: 18px;\">Output: </strong><span style=\"font-size: 18px;\">5</span><strong style=\"font-size: 18px;\"><br />Explanation: </strong>Possible expressions are, <span style=\"font-size: 18px;\">((())), (()()), ()(()), (())(), ()()()</span><strong style=\"font-size: 18px;\"><br /></strong></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4\n<strong>Output: </strong>14<br /><strong>Explantions: </strong>There are total 14 valid combinations which can be formed using 4 </span><span >parenthesis.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 19</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try storing value of previous states and optimizing it.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the nth catalan number.\n    int findCatalan(int n) {\n        // base case\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n\n        int dp[n + 1];\n        // Initializing dp[0] and dp[1] as 1\n        dp[0] = dp[1] = 1;\n\n        for (int i = 2; i <= n; i++) {\n            dp[i] = 0;\n            for (int j = 0; j < i; j++) {\n                dp[i] = (dp[i] + (dp[j] * dp[i - j - 1]));\n            }\n        }\n\n        // returning the nth catalan number.\n        return dp[n];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int findCatalan(int n) {\n        // code here\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n\n        int dp[] = new int[n + 1];\n        // Initializing dp[0] and dp[1] as 1\n        dp[0] = dp[1] = 1;\n\n        for (int i = 2; i <= n; i++) {\n            dp[i] = 0;\n            for (int j = 0; j < i; j++) {\n                dp[i] = (dp[i] + (dp[j] * dp[i - j - 1]));\n            }\n        }\n\n        // returning the nth catalan number.\n        return dp[n];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def findCatalan(self, n):\n        # base case\n        if n == 0 or n == 1:\n            return 1\n        # Initializing dp[0] and dp[1] as 1\n        dp = [0] * (n + 1)\n        dp[0] = dp[1] = 1\n\n        for i in range(2, n + 1):\n            dp[i] = 0\n            for j in range(i):\n                dp[i] = (dp[i] + (dp[j] * dp[i - j - 1]))\n\n        # returning the nth catalan number.\n        return dp[n]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Complete this function\n    // Function to find the nth catalan number.\n    public int findCatalan(int n) {\n        // base case\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n\n        int[] dp = new int[n + 1];\n        // Initializing dp[0] and dp[1] as 1\n        dp[0] = dp[1] = 1;\n\n        for (int i = 2; i <= n; i++) {\n            dp[i] = 0;\n            for (int j = 0; j < i; j++) {\n                dp[i] = (dp[i] + (dp[j] * dp[i - j - 1]));\n            }\n        }\n\n        // returning the nth catalan number.\n        return dp[n];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    findCatalan(n) {\n        if (n === 0 || n === 1) {\n            return 1;\n        }\n        let dp = new Array(n + 1).fill(0);\n        // Initializing dp[0] and dp[1] as 1\n        dp[0] = dp[1] = 1;\n\n        for (let i = 2; i <= n; i++) {\n            for (let j = 0; j < i; j++) {\n                dp[i] = (dp[i] + (dp[j] * dp[i - j - 1]));\n            }\n        }\n\n        // returning the nth catalan number.\n        return Number(dp[n]);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}