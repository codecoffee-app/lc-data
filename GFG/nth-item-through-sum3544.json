{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704506,
            "title": "Nth item through sum",
            "titleSlug": "nth-item-through-sum3544",
            "content": "<p><span style=\"font-size: 18px;\">Given two arrays <strong>A</strong> and <strong>B</strong> of length <strong>L1</strong>&nbsp;and <strong>L2</strong>, we can get a set of sums(add one element from the first and one from second). Find the <strong>N</strong>th element in the set considered in sorted order.<br /><strong>Note:&nbsp;</strong>Set of sums should have unique elements.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> L1 = 2, L2 = 2\nA = {1, 2}\nB = {3, 4}\nN = 3\n<strong>Output:</strong> 6\n<strong>Explaination:</strong> The set of sums are in \nthe order 4, 5, 6.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> L1 = 5, L2 = 4\nA = {1, 3, 4, 8, 10}\nB = {20, 22, 30, 40}\nN = 4\n<strong>Output:</strong> 25\n<strong>Explaination:</strong> The numbers before it \nare 21, 23 and 24.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to read input or print anything. Your task is to complete the function <strong>nthItem() </strong>which takes L1, L2, A, B, and the value N as input parameters and returns the Nth value of the set. If N is greater than the size of the set then it returns <strong>-1</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O((L1*L2)*log(L1*L2))<br /><strong>Expected Auxiliary Space:</strong> O(L1*L2)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; L1, L2 &le; 500<br />1 &le; A[i], B[i] &le; 10000<br />1 &le; N &le; L1*L2</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, A of length L1 and B of length L2, create a set of unique sums by adding one element from A and one element from B. Find the Nth smallest element in this sorted set of sums.\n\nNote: The set of sums should only contain unique elements.",
                "constraints": [
                    "1 <= L1, L2 <= 500",
                    "1 <= A[i], B[i] <= 10000",
                    "1 <= N <= L1*L2"
                ],
                "testcases": [
                    {
                        "input": "L1 = 2, L2 = 2\nA = {1, 2}\nB = {3, 4}\nN = 3",
                        "output": "6",
                        "explanation": "The set of unique sums, when sorted, is {4, 5, 6}.  The 3rd smallest element is 6."
                    },
                    {
                        "input": "L1 = 5, L2 = 4\nA = {1, 3, 4, 8, 10}\nB = {20, 22, 30, 40}\nN = 4",
                        "output": "25",
                        "explanation": "The 4th smallest unique sum formed by adding elements from A and B is 25. The sums before it are 21, 23 and 24."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Get all the possible sums and find the nth value from there.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution{\r\npublic:\r\n    int nthItem(int L1, int L2, int A[], int B[], int N)\r\n    {\r\n        // Insert each pair sum into set. Note that a set\r\n    \t// stores elements in sorted order and unique elements\r\n    \tset<int> s;\r\n    \tfor (int i = 0 ; i < L1; i++)\r\n    \t\tfor (int j = 0; j < L2; j++)\r\n    \t\t\ts.insert(A[i] + B[j]);\r\n    \r\n    \t// If set has less than N elements\r\n    \tif (s.size() < N)\r\n    \treturn -1;\r\n    \r\n    \t// Find N'tb item in set and return it\r\n    \tset<int>::iterator it = s.begin();\r\n    \tfor (int count = 1;count < N; count++)\r\n    \t\tit++;\r\n    \treturn *it;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\r\nclass Solution{\r\n    static int nthItem(int L1, int L2, int A[], int B[], int N)\r\n    {\r\n        // Insert each pair sum into set. Note that a set\r\n    \t// stores elements in sorted order and unique elements\r\n    \tHashSet<Integer> s = new HashSet<>();\r\n    \tfor (int i = 0 ; i < L1; i++)\r\n    \t\tfor (int j = 0; j < L2; j++)\r\n    \t\t\ts.add(A[i] + B[j]);\r\n    \r\n    \t// If set has less than N elements\r\n    \tif (s.size() < N)\r\n    \t    return -1;\r\n    \r\n    \tArrayList<Integer> arr = new ArrayList<>();\r\n    \t\r\n        for(int element: s){\r\n            arr.add(element);\r\n        }\r\n        Collections.sort(arr);\r\n        return arr.get(N-1);\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    def nthItem(self, L1, L2, A, B, N):\n        # create an empty set to store the sums of pairs\n        seen = set()\n        # create an empty list to store the unique sums\n        new =[]\n        # iterate through each element in list A\n        for i in range(len(A)):\n            # iterate through each element in list B\n            for j in range(len(B)):\n                # calculate the sum of the current pair\n                s = A[i]+B[j]\n                # if the sum is not already in the set, add it to the list and set\n                if s not in seen:\n                    new.append(s)\n                    seen.add(s)\n        # sort the list of unique sums in ascending order\n        new.sort()\n        \n        # if the desired position N is greater than the length of the unique sums list, return -1\n        if N>len(new):\n            return -1\n        # otherwise, return the Nth element in the unique sums list\n        else:\n            return new[N-1]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} L1\n * @param {number[]} L2\n * @param {number} A\n * @param {number} B\n * @param {number} N\n * @returns {number}\n */\n\nclass Solution {\n    //Function to calculate the element of nth row of a triangle.\n    nthItem(L1, L2, A, B, N) {\n        // create an empty set to store the sums of pairs\n        let seen = new Set();\n        // create an empty list to store the unique sums\n        let newSet = [];\n        // iterate through each element in list A\n        for (let i = 0; i < A.length; i++) {\n            // iterate through each element in list B\n            for (let j = 0; j < B.length; j++) {\n                // calculate the sum of the current pair\n                let s = A[i] + B[j];\n                // if the sum is not already in the set, add it to the list and set\n                if (!seen.has(s)) {\n                    newSet.push(s);\n                    seen.add(s);\n                }\n            }\n        }\n        // sort the list of unique sums in ascending order\n        newSet.sort((a, b) => a - b);\n\n        // if the desired position N is greater than the length of the unique sums list, return -1\n        if (N > newSet.length) {\n            return -1;\n        }\n        // otherwise, return the Nth element in the unique sums list\n        else {\n            return newSet[N - 1];\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}