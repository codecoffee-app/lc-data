{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700170,
            "title": "Kth from End of Linked List",
            "titleSlug": "nth-node-from-end-of-linked-list",
            "content": "<p class=\"ajy\" tabindex=\"0\" role=\"button\" aria-haspopup=\"true\" data-tooltip=\"Show details\" aria-label=\"Show details\"><span >Given the head of a linked list and the number <strong>k</strong>, Your task is to find the k<sup>th</sup> node from the end. If k is more than the number of nodes, then the output should be <strong>-1.</strong></span></p>\n<div dir=\"ltr\">\n<p><span ><strong>Examples<br /></strong></span></p>\n<pre><span ><strong>Input: </strong>LinkedList:<strong> </strong>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9, k = 2<br /><strong>Output: </strong>8<strong>\nExplanation: </strong>The given linked list is 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9. The 2nd node from end is 8.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700170/Web/Other/blobid0_1723031071.png\" width=\"518\" height=\"55\" /><br /></span></pre>\n<pre><span ><strong>Input: </strong>LinkedList:<strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> </strong>10-&gt;5-&gt;100-&gt;5, k = 5<br /><strong>Output: </strong>-1<strong>\nExplanation: </strong>The given linked list is 10-&gt;5-&gt;100-&gt;5. Since 'k' is more than the number of nodes, the output is -1.<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700170/Web/Other/blobid1_1723031085.png\" width=\"335\" height=\"68\" /><br /></span></pre>\n<p><span ><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>6<br /></sup>1 &lt;= node-&gt;data , x &lt;= 10<sup>6</sup><br />1 &lt;= k &lt;= 10<sup>6</sup></span></p>\n</div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a singly linked list and an integer k, find the kth node from the end of the list. If k is greater than the number of nodes in the list, return -1.",
                "constraints": [
                    "1 <= number of nodes <= 10^6",
                    "1 <= node data <= 10^6",
                    "1 <= k <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1->2->3->4->5->6->7->8->9, k = 2",
                        "output": "8",
                        "explanation": "The linked list has 9 nodes. The 2nd node from the end is 8."
                    },
                    {
                        "input": "LinkedList: 10->5->100->5, k = 5",
                        "output": "-1",
                        "explanation": "The linked list has 4 nodes. Since k (5) is greater than the number of nodes, the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use the two-pointer technique: move the first pointer k steps ahead, then move both pointers until the first reaches the end. The second pointer will be at the kth node from the end.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "morgan-stanley",
            "accolite",
            "amazon",
            "oyo-rooms",
            "samsung",
            "snapdeal",
            "factset",
            "hike",
            "maq-software",
            "adobe",
            "qualcomm",
            "epic-systems",
            "citicorp",
            "monotype-solutions"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to find the data of kth node from the end of a linked list.\nclass Solution {\n  public:\n    int getKthFromLast(Node *head, int k) {\n\n        // using two pointers, similar to finding middle element.\n        Node *currNode = head, *kthNode = head;\n\n        // traversing first k elements with first pointer.\n        while (k != 0) {\n            if (currNode == NULL)\n                return -1;\n            currNode = currNode->next;\n            k--;\n        }\n\n        // now traversing with both pointers and when first pointer gives null\n        // we have got the kth node from end in second pointer since the first\n        // pointer had already traversed n nodes and thus had difference of n\n        // nodes with second pointer.\n        while (currNode != NULL) {\n            kthNode = kthNode->next;\n            currNode = currNode->next;\n        }\n\n        // returning the data of nth node from end.\n        if (kthNode != NULL)\n            return kthNode->data;\n        else\n            return -1;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to find the data of nth node from the end of a linked list.\n    int getKthFromLast(Node head, int k) {\n\n        // using two pointers, similar to finding middle element.\n        Node currNode = head, kthNode = head;\n\n        // traversing first n elements with first pointer.\n        while (k != 0) {\n            if (currNode == null) return -1;\n            currNode = currNode.next;\n            k--;\n        }\n\n        // now traversing with both pointers and when first pointer gives null\n        // we have got the nth node from end in second pointer since the first\n        // pointer had already traversed n nodes and thus had difference of n\n        // nodes with second pointer.\n        while (currNode != null) {\n            kthNode = kthNode.next;\n            currNode = currNode.next;\n        }\n\n        // returning the data of nth node from end.\n        if (kthNode != null)\n            return kthNode.data;\n        else\n            return -1;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n'''\n\tFunction to return the data stored in\n\tthe nth node from end of linked list.\n\t\n\tFunction Arguments: head (reference to head of the list), n (pos of node from end)\n\tReturn Type: Integer or -1 if no such node exits.\n\n\t{\n\t\t# Node Class\n\t\tclass Node:\n\t\t    def __init__(self, data):   # data -> value stored in node\n\t\t        self.data = data\n\t\t        self.next = None\n\t}\n\n\tContributed By: Nagendra Jha\n'''\n\n\n#Function to find the data of kth node from the end of a linked list\nclass Solution:\n\n    def getKthFromLast(self, head, k):\n\n        #using two pointers, similar to finding middle element.\n        curr_node = head\n        kth_node = head\n\n        #traversing first n elements with first pointer.\n        while k:\n            if k and curr_node == None:\n                return -1\n            curr_node = curr_node.next\n            k -= 1\n\n        #now traversing with both pointers and when first pointer gives null\n        #we have got the kth node from end in second pointer since the first\n        #pointer had already traversed k nodes and thus had difference of k\n        #nodes with second pointer.\n        while curr_node:\n            curr_node = curr_node.next\n            kth_node = kth_node.next\n\n        #returning the data of nth node from end.\n        return kth_node.data\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param Node head\n     * @param number k\n     * @returns number\n     */\n    getKthFromLast(head, k) {\n        if (head === null) return -1;\n\n        let currNode = head;\n        let kthNode = head;\n\n        // Traversing first k elements with the first pointer\n        while (k !== 0) {\n            if (currNode === null) {\n                return -1;\n            }\n            currNode = currNode.next;\n            k--;\n        }\n\n        // Now traversing with both pointers until the first pointer reaches null\n        while (currNode !== null) {\n            kthNode = kthNode.next;\n            currNode = currNode.next;\n        }\n\n        // Returning the data of the kth node from the end\n        if (kthNode !== null) {\n            return kthNode.data;\n        } else {\n            return -1;\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}