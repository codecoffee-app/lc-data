{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701749,
            "title": "Nth number made of prime digits",
            "titleSlug": "nth-number-made-of-prime-digits4319",
            "content": "<p><span style=\"font-size: 18px;\">Given a number '<strong>n</strong>'. The task is to find the <strong>n</strong><sup>th</sup> number whose each digit is a prime number i.e. 2, 3, 5, 7. In other words, you have to find <strong>n</strong>th number of this sequence: 2, 3, 5, 7, 22, 23 ,... and so on.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 10\n<strong>Output: </strong>33<strong>\nExplanation: </strong>10<sup>th</sup> number in the sequence of numbers whose each digit is prime is 33.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 21\n<strong>Output: </strong>222<strong>\nExplanation: </strong>The<strong> </strong>21<sup>st</sup> number in the sequence of numbers whose each digit is prime is 222.</span></pre>\n<p><span ><strong>Expected Time Complexity: </strong>O<span style=\"background-color: #ffffff; color: rgba(0, 0, 0, 0.87); font-family: sofia-pro, sans-serif, system-ui, -apple-system, BlinkMacSystemFont, '.SFNSText-Regular';\">(10^(log(n) base 4))<br /></span><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= n &lt;= 100&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, find the `n`th number in a sequence where each digit of the number is a prime number (2, 3, 5, or 7).  The sequence starts as: 2, 3, 5, 7, 22, 23, 25, 27, 32, 33,... and so on.",
                "constraints": [
                    "1 <= n <= 100"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "33",
                        "explanation": "The 10th number in the sequence is 33."
                    },
                    {
                        "input": "21",
                        "output": "222",
                        "explanation": "The 21st number in the sequence is 222."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >iterate through numbers, check if each digit is a prime digit (2, 3, 5, 7), and count until you reach the nth such number.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution {\n  public:\n    bool isTrue(int n, const std::string& str) {\n        int rem = 0;\n        while (n > 0) {\n            rem = n % 10;\n            if (str.find(std::to_string(rem)) == std::string::npos) {\n                return false;\n            }\n            n = n / 10;\n        }\n        return true;\n    }\n\n    int primeDigits(int n) {\n        // Your code here\n        std::string primes = \"2357\";\n        int count = 0;\n        int term = 2;\n        while (count < n) {\n            if (isTrue(term, primes)) {\n                count++;\n            }\n            if (count == n) {\n                return term;\n            }\n            term++;\n        }\n        return 0;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to find nth number made of only prime digits.\n    public static boolean isTrue(int n, String str) {\n        int rem = 0;\n        while (n > 0) {\n            rem = n % 10;\n            if (!str.contains(String.valueOf(rem))) {\n                return false;\n            }\n            n = n / 10;\n        }\n        return true;\n    }\n\n    public static int primeDigits(int n) {\n        // Your code here\n        String primes = \"2357\";\n        int count = 0;\n        int term = 2;\n        while (count < n) {\n            if (isTrue(term, primes)) {\n                count++;\n            }\n            if (count == n) {\n                return term;\n            }\n            term++;\n        }\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def isTrue(self, n, prime_digits):\n        while n > 0:\n            rem = n % 10\n            if str(rem) not in prime_digits:\n                return False\n            n //= 10\n        return True\n\n    def primeDigits(self, n):\n        prime_digits = \"2357\"\n        count = 0\n        term = 2\n        while count < n:\n            if self.isTrue(term, prime_digits):\n                count += 1\n            if count == n:\n                return term\n            term += 1\n        return 0\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number} n\n * @returns {number}\n */\nclass Solution {\n    isTrue(n, primeDigits) {\n        while (n > 0) {\n            let rem = n % 10;\n            if (!primeDigits.includes(rem.toString())) {\n                return false;\n            }\n            n = Math.floor(n / 10);\n        }\n        return true;\n    }\n\n    primeDigits(n) {\n        const primeDigits = \"2357\";\n        let count = 0;\n        let term = 2;\n        while (count < n) {\n            if (this.isTrue(term, primeDigits)) {\n                count++;\n            }\n            if (count === n) {\n                return term;\n            }\n            term++;\n        }\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}