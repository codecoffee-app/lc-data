{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703607,
            "title": "Number following a pattern",
            "titleSlug": "number-following-a-pattern3126",
            "content": "<p><span style=\"font-size: 18px;\">Given a pattern containing only <strong>I</strong>'s and <strong>D</strong>'s. I for <strong>increasing</strong> and D for <strong>decreasing</strong>. Devise an algorithm to print the <strong>minimum number</strong> following that pattern. Digits from <strong>1-9</strong> and digits <strong>can't repeat</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">D</span>\n<strong><span style=\"font-size: 18px;\">Output:</span></strong>\n<span style=\"font-size: 18px;\">21</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong>\n<span style=\"font-size: 18px;\">D is meant for decreasing,</span> <span style=\"font-size: 18px;\">so we choose the minimum number</span> <span style=\"font-size: 18px;\">among all possible numbers like 21,31,54,87,etc.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong>\n<span style=\"font-size: 18px;\">IIDDD</span>\n<strong><span style=\"font-size: 18px;\">Output:</span></strong>\n<span style=\"font-size: 18px;\">126543</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong>\n<span style=\"font-size: 18px;\">Above example is self- explanatory,</span>\n<span style=\"font-size: 18px;\">1 &lt; 2 &lt; 6 &gt; 5 &gt; 4 &gt; 3</span>\n<span style=\"font-size: 18px;\">  I - I - D - D - D</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong></p>\n<p><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the function <strong>printMinNumberForPattern()</strong> which takes the string <strong>S</strong> and returns a string containing the minimum number following the valid number.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; Length of String &le; 8</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a pattern containing only 'I's and 'D's, where 'I' represents increasing and 'D' represents decreasing, devise an algorithm to generate the minimum number that follows this pattern. The number should be formed using digits from 1 to 9, and each digit should be used only once.",
                "constraints": [
                    "1 <= Length of String <= 8"
                ],
                "testcases": [
                    {
                        "input": "D",
                        "output": "21",
                        "explanation": "The pattern 'D' indicates a decreasing sequence. The minimum number that satisfies this is 21, where 2 > 1."
                    },
                    {
                        "input": "IIDDD",
                        "output": "126543",
                        "explanation": "The pattern 'IIDDD' requires an increasing sequence followed by a decreasing sequence. The smallest number satisfying this is 126543, which follows the pattern 1 < 2 < 6 > 5 > 4 > 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">&nbsp;</span><span style=\"font-size: 18px;\">Idea is to iterate over input array and keep track of last printed digit and maximum digit printed so far.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "goldman-sachs",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution{   \r\npublic:\r\n    string printMinNumberForPattern(string S){\r\n        \r\n        // Initialize current_max (to make sure that \r\n        // we don't use repeated character \r\n        int curr_max = 0; \r\n      \r\n        // Initialize last_entry (Keeps track for \r\n        // last printed digit) \r\n        int last_entry = 0; \r\n      \r\n        int j; \r\n        string ans=\"\";\r\n        // Iterate over input array \r\n        for (int i=0; i<S.length(); i++) \r\n        { \r\n            // Initialize 'noOfNextD' to get count of \r\n            // next D's available \r\n            int noOfNextD = 0; \r\n      \r\n            switch(S[i]) \r\n            { \r\n            case 'I': \r\n                // If letter is 'I' \r\n      \r\n                // Calculate number of next consecutive D's \r\n                // available \r\n                j = i+1; \r\n                while (S[j] == 'D' && j < S.length()) \r\n                { \r\n                    noOfNextD++; \r\n                    j++; \r\n                } \r\n                    \r\n                if (i==0) \r\n                { \r\n                    curr_max = noOfNextD + 2; \r\n      \r\n                    // If 'I' is first letter, print incremented \r\n                    // sequence from 1 \r\n                    ++last_entry;\r\n                    ans+=('0'+last_entry);\r\n                    ans+=('0'+curr_max);\r\n\r\n                    // Set max digit reached \r\n                    last_entry = curr_max; \r\n                } \r\n                else\r\n                { \r\n                    // If not first letter \r\n      \r\n                    // Get next digit to print \r\n                    curr_max = curr_max + noOfNextD + 1; \r\n      \r\n                    // Print digit for I \r\n                    last_entry = curr_max; \r\n                    ans+=('0'+last_entry);\r\n                } \r\n      \r\n                // For all next consecutive 'D' print  \r\n                // decremented sequence \r\n                for (int k=0; k<noOfNextD; k++) \r\n                {   \r\n                    --last_entry;\r\n                    ans+=('0'+last_entry);\r\n                    i++; \r\n                } \r\n                break; \r\n      \r\n            // If letter is 'D' \r\n            case 'D': \r\n                if (i == 0) \r\n                { \r\n                    // If 'D' is first letter in sequence \r\n                    // Find number of Next D's available \r\n                    j = i+1; \r\n                    while (S[j] == 'D' && j < S.length()) \r\n                    { \r\n                        noOfNextD++; \r\n                        j++; \r\n                    } \r\n      \r\n                    // Calculate first digit to print based on  \r\n                    // number of consecutive D's \r\n                    curr_max = noOfNextD + 2; \r\n      \r\n                    // Print twice for the first time \r\n                    ans+=('0'+curr_max);\r\n                    ans+=('0'+(curr_max - 1));\r\n\r\n      \r\n                    // Store last entry \r\n                    last_entry = curr_max - 1; \r\n                } \r\n                else\r\n                { \r\n                    // If current 'D' is not first letter \r\n      \r\n                    // Decrement last_entry \r\n                    ans+=('0'+(last_entry - 1));\r\n                    //cout << \" \" << last_entry - 1; \r\n                    last_entry--; \r\n                } \r\n                break; \r\n            } \r\n        } \r\n        return ans;\r\n        \r\n        \r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\r\n   static String printMinNumberForPattern(String s) {\r\n        int n = s.length();\r\n        int[] ans = new int[n + 1];\r\n        HashMap<Integer, ArrayList<Integer>> adj = new HashMap<>();\r\n        HashMap<Integer, Integer> in = new HashMap<>();\r\n        \r\n        for (int i = 0; i < n; i++) {\r\n            if (s.charAt(i) == 'I') {\r\n                if (!adj.containsKey(i)) {\r\n                    adj.put(i, new ArrayList<>());\r\n                }\r\n                adj.get(i).add(i + 1);\r\n                \r\n                in.put(i + 1, in.getOrDefault(i + 1, 0) + 1);\r\n            } else {\r\n                if (!adj.containsKey(i + 1)) {\r\n                    adj.put(i + 1, new ArrayList<>());\r\n                }\r\n                adj.get(i + 1).add(i);\r\n                \r\n                in.put(i, in.getOrDefault(i, 0) + 1);\r\n            }\r\n        }\r\n        \r\n        PriorityQueue<Integer> q = new PriorityQueue<>();\r\n        for (int i = 0; i <= n; i++) {\r\n            if (!in.containsKey(i) || in.get(i) == 0) {\r\n                q.offer(i);\r\n            }\r\n        }\r\n        \r\n        int val = 1;\r\n        while (!q.isEmpty()) {\r\n            int curr = q.poll();\r\n            ans[curr] = val++;\r\n            \r\n            if (adj.containsKey(curr)) {\r\n                for (int child : adj.get(curr)) {\r\n                    in.put(child, in.get(child) - 1);\r\n                    if (in.get(child) == 0) {\r\n                        q.offer(child);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        StringBuilder answer = new StringBuilder();\r\n        for (int t : ans) {\r\n            answer.append((char) (t + '0'));\r\n        }\r\n        \r\n        return answer.toString();\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\r\n    def printMinNumberForPattern(ob,S):\r\n        # Initialize current_max (to make sure that \r\n        # we don't use repeated character \r\n        curr_max = 0\r\n      \r\n        # Initialize last_entry (Keeps track for \r\n        # last printed digit) \r\n        last_entry = 0\r\n        i = 0\r\n        ans=''\r\n        # Iterate over input array \r\n        while i < len(S): \r\n      \r\n            # Initialize 'noOfNextD' to get count of \r\n            # next D's available \r\n            noOfNextD = 0\r\n            if S[i] == \"I\": \r\n      \r\n                # If letter is 'I' \r\n      \r\n                # Calculate number of next consecutive D's \r\n                # available \r\n                j = i + 1\r\n                while j < len(S) and S[j] == \"D\": \r\n                    noOfNextD += 1\r\n                    j += 1\r\n                if i == 0: \r\n                    curr_max = noOfNextD + 2\r\n                    last_entry += 1\r\n      \r\n                    # If 'I' is first letter, print incremented \r\n                    # sequence from 1 \r\n                    ans+=str(last_entry)\r\n                    ans+=str(curr_max)\r\n\r\n                    # Set max digit reached \r\n                    last_entry = curr_max \r\n                else: \r\n      \r\n                    # If not first letter \r\n      \r\n                    # Get next digit to print \r\n                    curr_max += noOfNextD + 1\r\n      \r\n                    # Print digit for I \r\n                    last_entry = curr_max\r\n                    ans+=str(last_entry)\r\n\r\n                # For all next consecutive 'D' print \r\n                # decremented sequence \r\n                for k in range(noOfNextD): \r\n                    last_entry -= 1\r\n                    ans+=str(last_entry)\r\n                    i += 1\r\n      \r\n            # If letter is 'D' \r\n            elif S[i] == \"D\": \r\n                if i == 0: \r\n      \r\n                    # If 'D' is first letter in sequence \r\n                    # Find number of Next D's available \r\n                    j = i + 1\r\n                    while j < len(S) and S[j] == \"D\": \r\n                        noOfNextD += 1\r\n                        j += 1\r\n      \r\n                    # Calculate first digit to print based on \r\n                    # number of consecutive D's \r\n                    curr_max = noOfNextD + 2\r\n      \r\n                    # Print twice for the first time \r\n                    ans+=str(curr_max)\r\n                    ans+=str(curr_max - 1)\r\n\r\n\r\n                    # Store last entry \r\n                    last_entry = curr_max - 1\r\n                else: \r\n      \r\n                    # If current 'D' is not first letter \r\n      \r\n                    # Decrement last_entry \r\n                    ans+=str(last_entry-1)\r\n                    last_entry -= 1\r\n            i += 1\r\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\nclass Solution {\n  printMinNumberForPattern(s){\n    let curr_max = 0;\n    let last_entry = 0;\n    let ans = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n      let noOfNextD = 0;\n\n      switch(s[i]) {\n        case 'I':\n          let j = i + 1;\n          while (s[j] == 'D' && j < s.length) {\n            noOfNextD++;\n            j++;\n          }\n\n          if (i == 0) {\n            curr_max = noOfNextD + 2;\n            ++last_entry;\n            ans += (last_entry);\n            ans += (curr_max);\n            last_entry = curr_max;\n          } else {\n            curr_max = curr_max + noOfNextD + 1;\n            last_entry = curr_max;\n            ans += (last_entry);\n          }\n\n          for (let k = 0; k < noOfNextD; k++) {\n            --last_entry;\n            ans += (last_entry);\n            i++;\n          }\n          break;\n\n        case 'D':\n          if (i == 0) {\n            let j = i + 1;\n            while (s[j] == 'D' && j < s.length) {\n              noOfNextD++;\n              j++;\n            }\n\n            curr_max = noOfNextD + 2;\n            ans += (curr_max);\n            ans += (curr_max - 1);\n            last_entry = curr_max - 1;\n          } else {\n            ans += (last_entry - 1);\n            last_entry--;\n          }\n          break;\n      }\n    }\n    return ans;\n  }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}