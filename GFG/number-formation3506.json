{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704178,
            "title": "Number Formation",
            "titleSlug": "number-formation3506",
            "content": "<p><span style=\"font-size: 18px;\">Given three integers <strong>x, y,</strong> and <strong>z,</strong> the task is to find the sum of all the numbers formed by&nbsp;<br />having 4 at most x times, having 5 at most y times, and having 6 at most z times as a digit.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Note: </strong></span><span style=\"font-size: 18px;\">Output&nbsp;the sum modulo 10<sup>9</sup>+7.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: X = 1, Y = 1, Z = 1 \n<strong>Output:</strong> 3675</span>\n<span style=\"font-size: 18px;\"><strong>Explanation</strong>: 4 + 5 + 6 + 45 + 54 + 56 \n+ 65 + 46 + 64 + 456 + 465 \n+ 546 + 564 + 645 + 654 = 3675</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>X = 0, Y = 0, Z = 0\n<strong>Output: </strong>0\n<strong>Explanation</strong>: No number can be formed</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>getSum</code>()&nbsp;</strong>which takes <strong>X, Y</strong> and <strong>Z </strong>as input parameters and returns the integer value<br /><br /><strong>Expected Time Complexity:</strong> O(<strong>X*Y*Z</strong>)<br /><strong>Expected Auxiliary Space:</strong> O(<strong>X*Y*Z</strong>)<br /><br /><strong>Constraints:</strong><br />0 &le; <strong>X, Y, Z</strong> &le; 60</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three non-negative integers x, y, and z, find the sum of all distinct numbers that can be formed using the digits 4, 5, and 6, where the digit 4 appears at most x times, the digit 5 appears at most y times, and the digit 6 appears at most z times.  Return the sum modulo 10^9 + 7.",
                "constraints": [
                    "0 <= X, Y, Z <= 60"
                ],
                "testcases": [
                    {
                        "input": "X = 1, Y = 1, Z = 1",
                        "output": "3675",
                        "explanation": "The valid numbers are 4, 5, 6, 45, 54, 46, 64, 56, 65, 456, 465, 546, 564, 645, and 654. Their sum is 4 + 5 + 6 + 45 + 54 + 46 + 64 + 56 + 65 + 456 + 465 + 546 + 564 + 645 + 654 = 3675."
                    },
                    {
                        "input": "X = 0, Y = 0, Z = 0",
                        "output": "0",
                        "explanation": "Since none of the digits are allowed to appear, no number can be formed, and the sum is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<ul>\n\t<li><span style=\"font-size:18px\">If <strong>exactnum[i &ndash; 1][j][k]</strong>, <strong>exactnum[i][j &ndash; 1][k]</strong> and <strong>exactnum[i][j][k &ndash; 1]</strong> are already known, then it can be observed that the sum of these is the required answer, except in the case when <strong>exactnum[i &ndash; 1][j][k]</strong>, <strong>exactnum[i][j &ndash; 1][k]</strong> or <strong>exactnum[i][j][k &ndash; 1]</strong> doesn&rsquo;t exist. In that case, just skip it.</span></li>\n\t<li><span style=\"font-size:18px\"><strong>exactsum[i][j][k]</strong> stores the sum of exact number having <strong>i</strong> 4&#39;s, <strong>j</strong> 5&#39;s and <strong>k</strong> 6&#39;s in the same way as</span>\n\t<pre>\n<span style=\"font-size:18px\">exactsum[i][j][k] = 10 * (exactsum[i - 1][j][k] \n                        + exactsum[i][j - 1][k] \n                        + exactsum[i][j][k - 1]) \n                  + 4 * exactnum[i - 1][j][k] \n                  + 5 * exactnum[i][j - 1][k] \n                  + 6 * exactnum[i][j][k - 1] \n</span></pre>\n\t</li>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "goldman-sachs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end template function for C++\r\n\r\nclass Solution {\r\n\r\n  public:\r\n    int getSum(int x, int y, int z) {\r\n\r\n        int mod = (int)(1e9 + 7);\r\n\r\n        // exactsum[i][j][k] stores the sum of\r\n        // all the numbers having exact\r\n        // i 4's, j 5's and k 6's\r\n        long long exactsum[x + 1][y + 1][z + 1];\r\n\r\n        // exactnum[i][j][k] stores numbers\r\n        // of numbers having exact\r\n\r\n        // i 4's, j 5's and k 6's\r\n        long long exactnum[x + 1][y + 1][z + 1];\r\n\r\n        memset(exactnum, 0, sizeof exactnum);\r\n        memset(exactsum, 0, sizeof exactsum);\r\n\r\n        long long ans = 0;\r\n        exactnum[0][0][0] = 1;\r\n\r\n        for (int i = 0; i <= x; ++i) {\r\n            for (int j = 0; j <= y; ++j) {\r\n                for (int k = 0; k <= z; ++k) {\r\n\r\n                    // Computing exactsum[i][j][k]\r\n                    // as explained above\r\n                    if (i > 0) {\r\n                        exactsum[i][j][k] += (exactsum[i - 1][j][k] * 10 +\r\n                                              4 * exactnum[i - 1][j][k]) %\r\n                                             mod;\r\n                        exactnum[i][j][k] += exactnum[i - 1][j][k] % mod;\r\n                    }\r\n                    if (j > 0) {\r\n                        exactsum[i][j][k] += (exactsum[i][j - 1][k] * 10 +\r\n                                              5 * exactnum[i][j - 1][k]) %\r\n                                             mod;\r\n                        exactnum[i][j][k] += exactnum[i][j - 1][k] % mod;\r\n                    }\r\n                    if (k > 0) {\r\n                        exactsum[i][j][k] += (exactsum[i][j][k - 1] * 10 +\r\n                                              6 * exactnum[i][j][k - 1]) %\r\n                                             mod;\r\n                        exactnum[i][j][k] += exactnum[i][j][k - 1] % mod;\r\n                    }\r\n\r\n                    ans += exactsum[i][j][k] % mod;\r\n                    ans %= mod;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (int)ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end template function for JAVA\r\n\r\nclass Solution {\r\n\r\n    public int getSum(int x, int y, int z) {\r\n        int mod = 1000000007;\r\n\r\n        // exactsum[i][j][k] stores the sum of\r\n        // all the numbers having exact\r\n        // i 4's, j 5's and k 6's\r\n        long exactsum[][][] = new long[x + 1][y + 1][z + 1];\r\n\r\n        // exactnum[i][j][k] stores numbers\r\n        // of numbers having exact\r\n\r\n        // i 4's, j 5's and k 6's\r\n        long exactnum[][][] = new long[x + 1][y + 1][z + 1];\r\n\r\n        for (int i = 0; i <= x; i++) {\r\n            for (int j = 0; j <= y; j++) {\r\n                for (int k = 0; k <= z; k++) {\r\n                    exactsum[i][j][k] = 0;\r\n                    exactnum[i][j][k] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        long ans = 0L;\r\n        exactnum[0][0][0] = 1L;\r\n\r\n        for (int i = 0; i <= x; ++i) {\r\n            for (int j = 0; j <= y; ++j) {\r\n                for (int k = 0; k <= z; ++k) {\r\n\r\n                    // Computing exactsum[i][j][k]\r\n                    // as explained above\r\n                    if (i > 0) {\r\n                        exactsum[i][j][k] += (exactsum[i - 1][j][k] * 10 +\r\n                                              4 * exactnum[i - 1][j][k]) %\r\n                                             mod;\r\n                        exactnum[i][j][k] += exactnum[i - 1][j][k] % mod;\r\n                    }\r\n                    if (j > 0) {\r\n                        exactsum[i][j][k] += (exactsum[i][j - 1][k] * 10 +\r\n                                              5 * exactnum[i][j - 1][k]) %\r\n                                             mod;\r\n                        exactnum[i][j][k] += exactnum[i][j - 1][k] % mod;\r\n                    }\r\n                    if (k > 0) {\r\n                        exactsum[i][j][k] += (exactsum[i][j][k - 1] * 10 +\r\n                                              6 * exactnum[i][j][k - 1]) %\r\n                                             mod;\r\n                        exactnum[i][j][k] += exactnum[i][j][k - 1] % mod;\r\n                    }\r\n\r\n                    ans += exactsum[i][j][k] % mod;\r\n                    ans %= mod;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (int)ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end function Template for python3\n\n\nclass Solution:\n\n    def getSum(self, x, y, z):\n        mod = (10**9) + 7\n\n        # exactsum[i][j][k] stores the sum of\n        # all the numbers having exact\n        # i 4's, j 5's and k 6's\n        exactsum = []\n\n        # exactnum[i][j][k] stores numbers\n        # of numbers having exact\n        # i 4's, j 5's and k 6's\n        exactnum = []\n\n        for i in range(x + 1):\n            two = []\n            two1 = []\n            for j in range(y + 1):\n                temp = [0] * (z + 1)\n                temp1 = [0] * (z + 1)\n                two.append(temp)\n                two1.append(temp1)\n            exactnum.append(two)\n            exactsum.append(two1)\n\n        ans = 0\n        exactnum[0][0][0] = 1\n\n        for i in range(x + 1):\n            for j in range(y + 1):\n                for k in range(z + 1):\n\n                    # Computing exactsum[i][j][k]\n                    # as explained above\n                    if (i > 0):\n                        exactsum[i][j][k] += (exactsum[i - 1][j][k] * 10 +\n                                              4 * exactnum[i - 1][j][k]) % mod\n                        exactnum[i][j][k] += exactnum[i - 1][j][k] % mod\n                    if (j > 0):\n                        exactsum[i][j][k] += (exactsum[i][j - 1][k] * 10 +\n                                              5 * exactnum[i][j - 1][k]) % mod\n                        exactnum[i][j][k] += exactnum[i][j - 1][k] % mod\n                    if (k > 0):\n                        exactsum[i][j][k] += (exactsum[i][j][k - 1] * 10 +\n                                              6 * exactnum[i][j][k - 1]) % mod\n                        exactnum[i][j][k] += exactnum[i][j][k - 1] % mod\n\n                    ans += exactsum[i][j][k] % mod\n                    ans %= mod\n\n        return int(ans)\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} X\r\n * @param {number} Y\r\n * @param {number} Z\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n    //code here\r\n    getSum(X, Y, Z)\r\n    {\r\n        const mod = (10**9)+7;\r\n      \r\n        // exactsum[i][j][k] stores the sum of \r\n        // all the numbers having exact \r\n        // i 4's, j 5's and k 6's \r\n        const exactsum = [];\r\n        \r\n        // exactnum[i][j][k] stores numbers \r\n        // of numbers having exact \r\n        // i 4's, j 5's and k 6's \r\n        const exactnum = [];\r\n        \r\n        for (let i = 0; i <= X; i++) {\r\n            let two = [];\r\n            let two1 = [];\r\n            for (let j = 0; j <= Y; j++) {\r\n                let temp = new Array(Z+1).fill(0);\r\n                let temp1 = new Array(Z+1).fill(0);\r\n                two.push(temp);\r\n                two1.push(temp1);\r\n            }\r\n            exactnum.push(two);\r\n            exactsum.push(two1);\r\n        }\r\n        \r\n        let ans = 0;\r\n        exactnum[0][0][0] = 1;\r\n        \r\n        for (let i = 0; i <= X; i++) {\r\n            for (let j = 0; j <= Y; j++) {\r\n                for (let k = 0; k <= Z; k++) {\r\n                \r\n                    // Computing exactsum[i][j][k] \r\n                    // as explained above \r\n                    if (i > 0) {\r\n                        exactsum[i][j][k] += (exactsum[i - 1][j][k] * 10 + 4 * exactnum[i - 1][j][k]) % mod;\r\n                        exactnum[i][j][k] += exactnum[i - 1][j][k] % mod;\r\n                    }\r\n                    if (j > 0) {\r\n                        exactsum[i][j][k] += (exactsum[i][j - 1][k] * 10 + 5 * exactnum[i][j - 1][k]) % mod;\r\n                        exactnum[i][j][k] += exactnum[i][j - 1][k] % mod;\r\n                    }\r\n                    if (k > 0) {\r\n                        exactsum[i][j][k] += (exactsum[i][j][k - 1] * 10 + 6 * exactnum[i][j][k - 1]) % mod;\r\n                        exactnum[i][j][k] += exactnum[i][j][k - 1] % mod;\r\n                    }\r\n                    \r\n                    ans += exactsum[i][j][k] % mod;\r\n                    ans %= mod;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}