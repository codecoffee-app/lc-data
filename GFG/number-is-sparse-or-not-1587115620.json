{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701161,
            "title": "Number is sparse or not",
            "titleSlug": "number-is-sparse-or-not-1587115620",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>N</strong>.&nbsp;The task is to check whether it is<strong> </strong>sparse or not. A number is said to be a sparse number if no<strong> </strong>two or more consecutive bits are set&nbsp;in the binary representation</span>.<br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: N = 2\r\n<strong>Output</strong>: 1\r\n<strong>Explanation</strong>: Binary Representation of 2 is 10, \r\nwhich is not having consecutive set bits. \r\nSo, it is sparse number.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: N = 3\r\n<strong>Output</strong>: 0\r\n<strong>Explanation</strong>: Binary Representation of 3 is 11, \r\nwhich is having consecutive set bits in it. \r\nSo, it is not a sparse number.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;</strong>The task is to complete the function <strong>checkSparse</strong>() that takes <strong>n </strong>as a parameter and returns 1<strong> </strong>if the number is sparse else returns 0.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(1).<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span><br />\r\n<br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer N, determine if it is a sparse number. A sparse number is defined as a number whose binary representation does not contain two or more consecutive set bits (1s). Return 1 if N is sparse, otherwise return 0.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "1",
                        "explanation": "The binary representation of 2 is 10, which does not have consecutive set bits. Therefore, it is a sparse number."
                    },
                    {
                        "input": "3",
                        "output": "0",
                        "explanation": "The binary representation of 3 is 11, which has consecutive set bits. Therefore, it is not a sparse number."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to check if the number is sparse or not.\r\n    bool isSparse(int n)\r\n    {\r\n        //we perform Right shift on n by 1 bit.\r\n        //then perform AND operation on n and n/2\r\n        //(obtained by right shifting n by 1 bit). \r\n        //returning true if we get 0 as result otherwise false.\r\n        return (n & (n >> 1)) == 0;\r\n        \r\n    }\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\nclass Solution\r\n{\r\n    //Function to check if the number is sparse or not.\r\n    public static boolean isSparse(int n)\r\n    {\r\n        //we perform Right shift on n by 1 bit.\r\n        //then perform AND operation on n and n/2\r\n        //(obtained by right shifting n by 1 bit). \r\n        //returning true if we get 0 as result otherwise false.\r\n        return (n & (n >> 1)) == 0;\r\n        \r\n    }\r\n    \r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to check if the number is sparse or not.\r\n    def isSparse(self,n):\r\n        \r\n        #we perform Right shift on n by 1 bit.\r\n        #then perform AND operation on n and n/2\r\n        #(obtained by right shifting n by 1 bit). \r\n        #returning true if we get 0 as result otherwise false.\r\n        return (n & (n >> 1)) == 0\r\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Number} n\r\n * @returns {boolean}\r\n*/\r\n\r\n\r\nclass Solution \r\n{\r\n    //Function to check if the number is sparse or not.\r\n    isSparse(n)\r\n    {\r\n        //we perform Right shift on n by 1 bit.\r\n        //then perform AND operation on n and n/2\r\n        //(obtained by right shifting n by 1 bit). \r\n        //returning true if we get 0 as result otherwise false.\r\n        return ((n & (n >> (1))) == 0);\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to check if the number is sparse or not.\n    public bool isSparse(int n)\n    {\n        //we perform Right shift on n by 1 bit.\n        //then perform AND operation on n and n/2\n        //(obtained by right shifting n by 1 bit). \n        //returning true if we get 0 as result otherwise false.\n        return (n & (n >> 1)) == 0;\n    }\n}\n",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}