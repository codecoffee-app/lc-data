{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704179,
            "title": "Coin Change (Minimum Coins)",
            "titleSlug": "number-of-coins1824",
            "content": "<p><span style=\"font-size: 18.6667px;\">You are given an array <strong>coins[]</strong>, where each element represents a coin of a <strong>different</strong> denomination, and a target value <strong>sum</strong>. </span><span style=\"font-size: 18.6667px;\">You have an <strong>unlimited</strong> supply of each coin type {coins1, coins2, ..., coinsm}. </span></p>\n<p><span style=\"font-size: 18.6667px;\">Your task is to determine the <strong>minimum</strong> number of coins needed to obtain the target <strong>sum</strong>. If it is not possible to form the sum using the given coins, return <strong>-1</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre dir=\"ltr\" style=\"color: #222222; font-family: Arial, Helvetica, sans-serif; font-size: small; white-space: normal; background-color: #ffffff;\"><span ><strong>Input:</strong>&nbsp;coins[] = [25, 10, 5], sum = 30</span><br /><span ><strong>Output:</strong>&nbsp;2</span><br /><span ><strong>Explanation:</strong>&nbsp;Minimum 2 coins needed, 25 and 5 &nbsp;</span></pre>\n<pre dir=\"ltr\" style=\"color: #222222; font-family: Arial, Helvetica, sans-serif; font-size: small; white-space: normal; background-color: #ffffff;\"><span ><strong>Input:</strong>&nbsp;coins[] = [9, 6, 5, 1], sum = 19</span><br /><span ><strong>Output:&nbsp;</strong>3</span><br /><span ><strong>Explanation:</strong>&nbsp;19 = 9 + 9 + 1</span></pre>\n<pre dir=\"ltr\" style=\"color: #222222; font-family: Arial, Helvetica, sans-serif; font-size: small; white-space: normal; background-color: #ffffff;\"><span ><strong>Input:</strong>&nbsp;coins[] = [5, 1], sum = 0</span><br /><span ><strong>Output:&nbsp;</strong>0</span><br /><span ><strong>Explanation:</strong>&nbsp;For 0 sum, we do not need a coin</span></pre>\n<pre dir=\"ltr\" style=\"color: #222222; font-family: Arial, Helvetica, sans-serif; font-size: small; white-space: normal; background-color: #ffffff;\"><span ><strong>Input:</strong>&nbsp;coins[] = [4, 6, 2], sum = 5</span><br /><span ><strong>Output:&nbsp;</strong>-1</span><br /><span ><strong>Explanation:</strong>&nbsp;Not possible to make the given sum.</span></pre>\n<div>&nbsp;</div>\n<div><span ><strong>Constraints:</strong><br />1 &le; sum * coins.size() &le; 10<sup>6</sup></span></div>\n<div><span >0 &lt;= sum &lt;= 10<sup>4</sup></span></div>\n<div><span >1 &lt;= coins[i] &lt;= 10<sup>4</sup></span></div>\n<div><span >1 &lt;= coins.size() &lt;= 10<sup>3</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `coins` representing different coin denominations and a target value `sum`, determine the minimum number of coins needed to obtain the target `sum`. You have an unlimited supply of each coin type. If it's not possible to form the sum, return -1.",
                "constraints": [
                    "1 <= sum * coins.size() <= 10^6",
                    "0 <= sum <= 10^4",
                    "1 <= coins[i] <= 10^4",
                    "1 <= coins.size() <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "coins = [25, 10, 5], sum = 30",
                        "output": "2",
                        "explanation": "The minimum number of coins needed is 2, using one coin of denomination 25 and one coin of denomination 5."
                    },
                    {
                        "input": "coins = [9, 6, 5, 1], sum = 19",
                        "output": "3",
                        "explanation": "The minimum number of coins needed is 3, for example: 9 + 9 + 1"
                    },
                    {
                        "input": "coins = [5, 1], sum = 0",
                        "output": "0",
                        "explanation": "For a sum of 0, no coins are needed."
                    },
                    {
                        "input": "coins = [4, 6, 2], sum = 5",
                        "output": "-1",
                        "explanation": "It is not possible to form the sum of 5 using the given coin denominations."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >&nbsp;Let us define the state&nbsp;<strong><code>dp(i)</code></strong>&nbsp;as the answer to the question: what is the minimum number of coins we need to get value&nbsp;<code>i</code>. Then:</span></p>\n<ol>\n<li><span >If&nbsp;<code>i == 0</code>, then there is&nbsp;need no coins at all, so we return&nbsp;<code>0</code>.</span></li>\n<li><span >if&nbsp;<code>i &lt; 0</code>, so we are trying to make a negative-sum, which is not possible, so we return minus infinity as an indicator that it is not possible.</span></li>\n<li><span >In other case, we check all<strong>&nbsp;<code>dp(i - coin)</code></strong>&nbsp;for every coin and add&nbsp;<code>1</code>&nbsp;to the result.</span></li>\n</ol>",
            "<pre>\n<span style=\"font-size:18px\">The recursive formula is a follows:\nIf V == 0, then 0 coins required.\nIf V &gt; 0:\nminCoins(coins[0..m-1], V) = \nmin {1 + minCoins(V-coin[i])},\n    where i varies from 0 to m-1\n    and coin[i] &lt;= V </span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "paytm",
            "morgan-stanley",
            "accolite",
            "amazon",
            "microsoft",
            "samsung",
            "snapdeal",
            "oracle",
            "visa",
            "google",
            "synopsys"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // Function to find the minimum number of coins needed to make the given sum\n    int minCoins(vector<int> &coins, int sum) {\n\n        // Create a DP array to store the minimum coins for each value up to sum\n        vector<int> dp(sum + 1, INT_MAX);\n\n        // Base case: 0 coins are needed to make sum 0\n        dp[0] = 0;\n\n        // Iterate over each coin in the coins array\n        for (int i = coins.size() - 1; i >= 0; i--) {\n            // Iterate through all sums from 1 to the given sum\n            for (int j = 1; j <= sum; j++) {\n                // Initialize take and noTake variables\n                int take = INT_MAX, noTake = INT_MAX;\n\n                // Check if we can take the current coin\n                if (j - coins[i] >= 0 && coins[i] > 0) {\n\n                    // Get the minimum coins needed for the remaining sum\n                    take = dp[j - coins[i]];\n                    // Increment take if it's a valid option\n                    if (take != INT_MAX)\n                        take++;\n                }\n\n                // If we have more coins available, consider not taking the current coin\n                if (i + 1 < coins.size())\n                    // Get the minimum coins needed without taking the current coi\n                    noTake = dp[j];\n\n                // Update the DP array with the minimum of taking or not taking the coin\n                dp[j] = min(take, noTake);\n            }\n        }\n        // found a solution, return the minimum coins needed, otherwise return -1\n        if (dp[sum] != INT_MAX)\n            return dp[sum];\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to find the minimum number of coins required to make a given sum\n    public int minCoins(int[] coins, int sum) {\n        // Array to store the minimum coins needed for each value up to sum\n        int[] dp = new int[sum + 1];\n        // Initialize the dp array with a large value (infinity)\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        // Base case: 0 coins are needed to make the sum of 0\n        dp[0] = 0;\n\n        // Iterate through each coin in reverse order\n        for (int i = coins.length - 1; i >= 0; i--) {\n            // Iterate through all sums from 1 to the target sum\n            for (int j = 1; j <= sum; j++) {\n                // Initialize variables to track taking or not taking the coin\n                int take = Integer.MAX_VALUE, noTake = Integer.MAX_VALUE;\n\n                // If we can take the current coin\n                if (j - coins[i] >= 0 && coins[i] > 0) {\n                    take = dp[j - coins[i]];\n                    // If taking the coin is possible, increment the count\n                    if (take != Integer.MAX_VALUE) take++;\n                }\n\n                // If there are more coins available, consider not taking the current\n                // coin\n                if (i + 1 < coins.length) noTake = dp[j];\n\n                // Store the minimum of taking or not taking the coin\n                dp[j] = Math.min(take, noTake);\n            }\n        }\n\n        // Return the minimum coins needed for the target sum, or -1 if not possible\n        return dp[sum] != Integer.MAX_VALUE ? dp[sum] : -1;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minCoins(self, coins, sum):\n        dp = [[0] * (sum + 1) for _ in range(len(coins))]\n\n        for i in range(len(coins) - 1, -1, -1):\n            for j in range(1, sum + 1):\n                dp[i][j] = float('inf')\n                take = float('inf')\n                noTake = float('inf')\n\n                # If we take coins[i] coin\n                if j - coins[i] >= 0:\n                    take = dp[i][j - coins[i]]\n                    if take != float('inf'):\n                        take += 1\n\n                if i + 1 < len(coins):\n                    #not take the coins\n                    noTake = dp[i + 1][j]\n\n                dp[i][j] = min(take, noTake)\n\n        if dp[0][sum] != float('inf'):\n            return dp[0][sum]\n        return -1\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} coins\n * @param {number} V\n * @param {number} M\n * @returns {number}\n */\n\nclass Solution {\n\n    minCoins(coins, sum) {\n        // Initialize an array to store the minimum coins needed for each amount\n        let dp = new Array(sum + 1).fill(Infinity);\n        dp[0] = 0; // Base case: 0 coins are needed to make sum 0\n\n        // Iterate through each coin in the coins array\n        for (let i = coins.length - 1; i >= 0; i--) {\n            // Iterate through all sums from 1 to the target sum\n            for (let j = 1; j <= sum; j++) {\n                // Initialize take and noTake variables\n                let take = Infinity, noTake = Infinity;\n\n                // If we can take the current coin\n                if (j - coins[i] >= 0 && coins[i] > 0) {\n                    // Get the minimum coins for the remaining sum\n                    take = dp[j - coins[i]];\n                    // Increment the coins count if valid\n                    if (take !== Infinity) take++;\n                }\n                // If not taking the current coin, just take the previous value\n                if (i + 1 < coins.length) noTake = dp[j];\n                // Store the minimum of taking or not taking the coin\n                dp[j] = Math.min(take, noTake);\n            }\n        }\n        // Return the result for the target sum, or -1 if it's not possible\n        return dp[sum] !== Infinity ? dp[sum] : -1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}