{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704919,
            "title": "Number of compositions of a natural number",
            "titleSlug": "number-of-compositions-of-a-natural-number4627",
            "content": "<p><span style=\"font-size:18px\">Given a natural number N, find the number of ways in which N can be expressed as a sum of natural numbers when order is taken into consideration. Two sequences that differ in the order of their terms define different compositions of their sum.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 2\r\n<strong>Output: </strong>2\r\n<strong>Explanation: </strong>All 2 compositions are \r\n{1 + 1} and {2}.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 4\r\n<strong>Output: </strong>8\r\n<strong>Explanation: </strong>All 8 compositions are:\r\n{1 + 1 + 1 + 1}, {1 + 1 + 2}, {1 + 2 + 1},\r\n{2 + 1 + 1}, {2 + 2}, {1 + 3}, {3 + 1}, {4}.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span><br />\r\n<span style=\"font-size:18px\">You don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>no_of_ways()</strong>&nbsp;which takes n as the input parameter and returns the total no. of ways modulo 10<sup>9</sup>&nbsp;+ 7.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(log(N))<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)<br />\r\n<br />\r\n<strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>9</sup></span></p>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a natural number N, determine the number of ways N can be expressed as the sum of natural numbers, considering the order of the summands. Different orderings of the same numbers constitute distinct compositions.",
                "constraints": [
                    "1 <= N <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "2",
                        "explanation": "The two possible compositions of 2 are {1 + 1} and {2}."
                    },
                    {
                        "input": "4",
                        "output": "8",
                        "explanation": "The eight possible compositions of 4 are: {1 + 1 + 1 + 1}, {1 + 1 + 2}, {1 + 2 + 1}, {2 + 1 + 1}, {2 + 2}, {1 + 3}, {3 + 1}, and {4}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of something related to power 2.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n    public:\n    //Function to calculate power of a number modulo m.\n    using ll = unsigned long long int ;\n    ll powm(ll x,ll n,ll M)\n    {\n        ll result=1;\n        //iterating till n becomes 0.\n        while(n>0)\n        {\n            //if n is odd, multiply result by x and take modulo M.\n            if(n % 2 ==1)\n                result=(result * x)%M;\n            //square of x and take modulo M.\n            x=(x*x)%M;\n            //reduce n by half.\n            n=n/2;\n        }\n        //return the result.\n        return result;\n    }\n\n    //Function to calculate the number of ways.\n    int no_of_ways(int n){\n        //defining modulo value.\n        ll mod = 1000000007;\n        //calculating powm of 2^(n-1) and taking mod.\n        ll res = powm(2LL, n - 1, mod);\n        //returning integer value of res.\n        return int(res);\n    }    \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Function to calculate power of a number modulo m.\n    private ulong powm(ulong x, ulong n, ulong M)\n    {\n        ulong result = 1;\n        //iterating till n becomes 0.\n        while (n > 0)\n        {\n            //if n is odd, multiply result by x and take modulo M.\n            if (n % 2 == 1)\n                result = (result * x) % M;\n            //square of x and take modulo M.\n            x = (x * x) % M;\n            //reduce n by half.\n            n = n / 2;\n        }\n        //return the result.\n        return result;\n    }\n\n    //Function to calculate the number of ways.\n    public int no_of_ways(int n)\n    {\n        //defining modulo value.\n        ulong mod = 1000000007;\n        //calculating powm of 2^(n-1) and taking mod.\n        ulong res = powm(2UL, (ulong)n - 1, mod);\n        //returning integer value of res.\n        return (int)res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}