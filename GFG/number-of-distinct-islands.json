{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711086,
            "title": "Number of Distinct Islands",
            "titleSlug": "number-of-distinct-islands",
            "content": "<p><span style=\"font-size:18px\">Given a boolean 2D matrix <strong>grid&nbsp;</strong>of size <strong>n</strong> * <strong>m</strong>. You have to find the number of distinct islands where a group of connected 1s (horizontally or vertically) forms an island. Two islands are considered to be distinct if and only if one island is not equal to another (not rotated or reflected).</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">grid[][] = {{1, 1, 0, 0, 0},\r\n\\t\\t{1, 1, 0, 0, 0},\r\n\\t\\t{0, 0, 0, 1, 1},\r\n\\t\\t{0, 0, 0, 1, 1}}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">1</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">grid[][] = {{<span style=\"color:#ff0000\">1</span>, <span style=\"color:#ff0000\">1</span>, 0, 0, 0}, \r\n&nbsp;\\t     {<span style=\"color:#ff0000\">1</span>, <span style=\"color:#ff0000\">1</span>, 0, 0, 0}, \r\n&nbsp;\\t     {0, 0, 0, <span style=\"color:#ff0000\">1</span>, <span style=\"color:#ff0000\">1</span>}, \r\n&nbsp;\\t     {0, 0, 0, <span style=\"color:#ff0000\">1</span>, <span style=\"color:#ff0000\">1</span>}}\r\nSame colored islands are equal.\r\nWe have 2 equal islands, so we \r\nhave only 1 distinct island.</span>\r\n\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\">grid[][] = {{1, 1, 0, 1, 1},\r\n&nbsp;\\t     {1, 0, 0, 0, 0},\r\n&nbsp;\\t     {0, 0, 0, 0, 1},\r\n&nbsp;\\t     {1, 1, 0, 1, 1}}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">3</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:\r\n</strong>grid[][] = {{<span style=\"color:#ff0000\">1</span>, <span style=\"color:#ff0000\">1</span>, 0, <span style=\"color:#00ff00\">1</span>, <span style=\"color:#00ff00\">1</span>}, \r\n&nbsp;\\t     {<span style=\"color:#ff0000\">1</span>, 0, 0, 0, 0}, \r\n&nbsp;\\t     {0, 0, 0, 0, <span style=\"color:#0000cd\">1</span>}, \r\n&nbsp;\\t     {<span style=\"color:#00ff00\">1</span>, <span style=\"color:#00ff00\">1</span>, 0, <span style=\"color:#0000ff\">1</span>, <span style=\"color:#0000ff\">1</span>}}</span>\r\n<span style=\"font-size:18px\">Same colored islands are equal.\r\nWe have 4 islands, but 2 of them\r\nare equal, So we have 3 distinct islands.</span>\r\n\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">You don&#39;t need to read or print anything. Your task is to complete the function <strong>countDistinctIslands()&nbsp;</strong>which takes the <strong>grid</strong> as an input parameter and returns the total number of <strong>distinct</strong> islands.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n * m)<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(n * m)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; n, m &le; 500<br />\r\ngrid[i][j] == 0 or grid[i][j] == 1</span></p>\r\n\r\n<ul>\r\n</ul>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a boolean 2D matrix `grid` of size n * m, find the number of distinct islands. An island is a group of connected 1s (horizontally or vertically). Two islands are considered distinct if their shapes are different (not rotations or reflections of each other).",
                "constraints": [
                    "1 <= n, m <= 500",
                    "grid[i][j] == 0 or grid[i][j] == 1"
                ],
                "testcases": [
                    {
                        "input": "grid = {{1, 1, 0, 0, 0}, {1, 1, 0, 0, 0}, {0, 0, 0, 1, 1}, {0, 0, 0, 1, 1}}",
                        "output": "1",
                        "explanation": "The grid contains two identical islands consisting of connected 1's. Therefore, there is only 1 distinct island."
                    },
                    {
                        "input": "grid = {{1, 1, 0, 1, 1}, {1, 0, 0, 0, 0}, {0, 0, 0, 0, 1}, {1, 1, 0, 1, 1}}",
                        "output": "3",
                        "explanation": "The grid contains multiple islands. After removing duplicates (islands with the same shape), there are 3 distinct islands."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The core of the question is to know if 2 islands are equal. The primary criteria is that the number of 1&rsquo;s should be same in both. But this cannot be the only criteria. So how do we know?</span></p>",
            "<p><span style=\"font-size:14px\">We could use the position/coordinates of the 1&rsquo;s.&nbsp;<br />\nIf we take the first coordinates of any island as a base point and then compute the coordinates of other points from the base point, we can eliminate duplicates to get the distinct count of islands. So, using this approach, the coordinates for the 2 islands in example 1 above can be represented as: [(0, 0), (0, 1), (1, 0), (1, 1)].</span><br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\nclass Solution {\r\n  public:\r\n    // 2D array for the storing the horizontal and vertical\r\n    // directions. (Up, left, down, right}\r\n    vector<vector<int>> dirs = {{0, -1}, {-1, 0}, {0, 1}, {1, 0}};\r\n\r\n    // Function to perform dfs of the input grid\r\n    void dfs(vector<vector<int>>& grid, int x0, int y0, int i, int j,\r\n             vector<pair<int, int>>& v) {\r\n        int rows = grid.size(), cols = grid[0].size();\r\n\r\n        if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] <= 0) return;\r\n\r\n        // marking the visited element as -1\r\n        grid[i][j] *= -1;\r\n\r\n        // computing coordinates with x0, y0 as base\r\n        v.push_back({i - x0, j - y0});\r\n\r\n        // repeat dfs for neighbors\r\n        for (auto dir : dirs) {\r\n            dfs(grid, x0, y0, i + dir[0], j + dir[1], v);\r\n        }\r\n    }\r\n\r\n    int countDistinctIslands(vector<vector<int>>& grid) {\r\n        int rows = grid.size();\r\n        int cols = grid[0].size();\r\n\r\n        set<vector<pair<int, int>>> coordinates;\r\n\r\n        for (int i = 0; i < rows; ++i) {\r\n            for (int j = 0; j < cols; ++j) {\r\n\r\n                // If a cell is not 1\r\n                // no need to dfs\r\n                if (grid[i][j] != 1) continue;\r\n\r\n                // vector to hold coordinates\r\n                // of this island\r\n                vector<pair<int, int>> v;\r\n                dfs(grid, i, j, i, j, v);\r\n\r\n                // insert the coordinates for\r\n                // this island to set\r\n                coordinates.insert(v);\r\n            }\r\n        }\r\n\r\n        return coordinates.size();\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\r\n\r\n    // 2D array for the storing the horizontal and vertical\r\n    // directions. (Up, left, down, right}\r\n    int R[] = {0, 0, 1, -1};\r\n    int C[] = {1, -1, 0, 0};\r\n    int D[] = {1, 2, 3, 4};\r\n\r\n    // Function to perform bfs of the input grid\r\n    String layout(int i, int j, int grid[][]) {\r\n        StringBuilder sb = new StringBuilder();\r\n        Queue<int[]> queue = new LinkedList<>();\r\n        int size, current[], nR, nC;\r\n        queue.add(new int[]{i, j});\r\n        while (!queue.isEmpty()) {\r\n            size = queue.size();\r\n            while (size != 0) {\r\n                size--;\r\n                current = queue.poll();\r\n                for (int k = 0; k < R.length; k++) {\r\n                    nR = current[0] + R[k];\r\n                    nC = current[1] + C[k];\r\n                    if (nR < 0 || nR == grid.length || nC < 0 ||\r\n                        nC == grid[0].length || grid[nR][nC] != 1) {\r\n                        sb.append(0);\r\n                        continue;\r\n                    }\r\n                    if (grid[nR][nC] == 1) {\r\n                        queue.add(new int[]{nR, nC});\r\n                        grid[nR][nC] = 2;\r\n                        sb.append(D[k]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return sb.toString();\r\n    }\r\n\r\n    int countDistinctIslands(int[][] grid) {\r\n        Set<String> distinct = new HashSet<>();\r\n        for (int i = 0; i < grid.length; i++) {\r\n            for (int j = 0; j < grid[0].length; j++) {\r\n                if (grid[i][j] == 1) {\r\n                    distinct.add(layout(i, j, grid));\r\n                }\r\n            }\r\n        }\r\n        return distinct.size();\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nimport sys\r\nfrom typing import List\r\nsys.setrecursionlimit(10**8)\r\n\r\n# 2D array for the storing the horizontal and vertical\r\n# directions. (Up, left, down, right\r\ndirs = [ [ 0, -1 ],\r\n        [ -1, 0 ],\r\n        [ 0, 1 ],\r\n        [ 1, 0 ] ]\r\n\r\n# Function to perform dfs of the input grid\r\ndef dfs(grid, x0, y0, i, j, v):\r\n    rows = len(grid)\r\n    cols = len(grid[0])\r\n\r\n    if i < 0 or i >= rows or j < 0 or j >= cols or grid[i][j] <= 0:\r\n        return\r\n    # marking the visited element as -1\r\n    grid[i][j] *= -1\r\n\r\n    # computing coordinates with x0, y0 as base\r\n    v.append( (i - x0, j - y0) )\r\n\r\n    # repeat dfs for neighbors\r\n    for dir in dirs:\r\n        dfs(grid, x0, y0, i + dir[0], j + dir[1], v)\r\n    \r\n\r\nclass Solution:\r\n    \r\n    def countDistinctIslands(self, grid : List[List[int]]) -> int:\r\n        rows = len(grid)\r\n        cols = len(grid[0])\r\n    \r\n        coordinates = set()\r\n    \r\n        for i in range(rows):\r\n            for j in range(cols):\r\n    \r\n                # If a cell is not 1\r\n                # no need to dfs\r\n                if grid[i][j] != 1:\r\n                    continue\r\n    \r\n                # to hold coordinates\r\n                # of this island\r\n                v = []\r\n                dfs(grid, i, j, i, j, v)\r\n    \r\n                # insert the coordinates for\r\n                # this island to set\r\n                coordinates.add(tuple(v))\r\n            \r\n        return len(coordinates)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[][]} grid\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to count the number of distinct islands.\n    countDistinctIslands(grid) {\n        // 2D array for the storing the horizontal and vertical\n        // directions. (Up, left, down, right)\n        const dirs = [\n            [0, -1],\n            [-1, 0],\n            [0, 1],\n            [1, 0]\n        ];\n\n        // Function to perform dfs of the input grid\n        const dfs = (grid, x0, y0, i, j, v) => {\n            const rows = grid.length;\n            const cols = grid[0].length;\n\n            if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] <= 0) {\n                return;\n            }\n            // marking the visited element as -1\n            grid[i][j] *= -1;\n\n            // computing coordinates with x0, y0 as base\n            v.push({\n                x: i - x0,\n                y: j - y0\n            });\n\n            // repeat dfs for neighbors\n            for (const dir of dirs) {\n                dfs(grid, x0, y0, i + dir[0], j + dir[1], v);\n            }\n        };\n\n        const rows = grid.length;\n        const cols = grid[0].length;\n\n        const coordinates = new Set();\n\n        for (let i = 0; i < rows; i++) {\n            for (let j = 0; j < cols; j++) {\n\n                // If a cell is not 1\n                // no need to dfs\n                if (grid[i][j] !== 1) {\n                    continue;\n                }\n\n                // to hold coordinates\n                // of this island\n                const v = [];\n                dfs(grid, i, j, i, j, v);\n\n                // convert coordinates array to a string\n                // and insert it into the set\n                const str = JSON.stringify(v);\n                coordinates.add(str);\n            }\n        }\n\n        return coordinates.size;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}