{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703406,
            "title": "Number of distinct subsequences",
            "titleSlug": "number-of-distinct-subsequences0909",
            "content": "<p><span style=\"font-size: 18px;\">Given a string consisting of lower case English alphabets, the task is to find the number of distinct subsequences of the string<br /><strong>Note:</strong> Answer can be very large, so, ouput will be answer modulo <strong>10<sup>9</sup>+7</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> <br />s = \"gfg\"</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> <br />7\n<strong>Explanation:</strong> <br />The seven distinct subsequences are \"\", \"g\", \"f\", \"gf\", \"fg\", \"gg\" and \"gfg\" .</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> <br />s = \"ggg\"</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> <br />4\n<strong>Explanation:</strong> <br />The four distinct subsequences are \"\", \"g\", \"gg\", \"ggg\".</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your task:</strong><br />You do not need to read any input or print anything. The task is to complete the function <strong>distinctSubsequences()</strong>, which takes a string as input and returns an integer. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(|str|)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(|str|)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; |s| &le; 10<sup>5</sup><br />s contains lower case English alphabets</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string consisting of lowercase English alphabets, find the number of distinct subsequences of the string. Since the answer can be very large, return the answer modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= |s| <= 10^5",
                    "s contains lowercase English alphabets"
                ],
                "testcases": [
                    {
                        "input": "gfg",
                        "output": "7",
                        "explanation": "The distinct subsequences are: \"\", \"g\", \"f\", \"gf\", \"fg\", \"gg\", and \"gfg\"."
                    },
                    {
                        "input": "ggg",
                        "output": "4",
                        "explanation": "The distinct subsequences are: \"\", \"g\", \"gg\", and \"ggg\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<pre>\n<span style=\"font-size:18px\">Let countSub(n) be count of subsequences of \nfirst n characters in input string. We can\nrecursively write it as below. \n\ncountSub(n) = 2*Count(n-1) - Repetition</span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nclass Solution{\r\n  public:\r\n\tint distinctSubsequences(string str)\r\n\t{\r\n\t\tvector<int> last(26, -1); \r\n\r\n\t\tint mod = 1e9 + 7;\r\n\t  \r\n\t    // Length of input string \r\n\t    int n = str.size(); \r\n\t  \r\n\t    // dp[i] is going to store count of distinct \r\n\t    // subsequences of length i. \r\n\t    long long dp[n + 1]; \r\n\t  \r\n\t    // Empty substring has only one subsequence \r\n\t    dp[0] = 1; \r\n\t  \r\n\t    // Traverse through all lengths from 1 to n. \r\n\t    for (int i = 1; i <= n; i++) { \r\n\t        // Number of subsequences with substring \r\n\t        // str[0..i-1] \r\n\t        dp[i] = 2 * dp[i - 1]; \r\n\t        \r\n\t        dp[i] %= mod;\r\n\t  \r\n\t        // If current character has appeared \r\n\t        // before, then remove all subsequences \r\n\t        // ending with previous occurrence. \r\n\t        if (last[str[i - 1] - 'a'] != -1) \r\n\t            dp[i] = (dp[i] - dp[last[str[i - 1] - 'a']] + mod)%mod; \r\n\t  \r\n\t        // Mark occurrence of current character \r\n\t        last[str[i - 1] - 'a'] = (i - 1); \r\n\t    } \r\n\t  \r\n\t    return (int)(dp[n]);\r\n\t}\r\n\r\n\r\n   \r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Backend complete function Template for Java\r\n\r\nclass Solution {\r\n    int distinctSubsequences(String S) {\r\n        // Create an array to store index\r\n        // of last\r\n        int[] last = new int[26];\r\n        Arrays.fill(last, -1);\r\n        \r\n        int mod = 1000000007;\r\n \r\n        // Length of input string\r\n        int n = S.length();\r\n \r\n        // dp[i] is going to store count of distinct\r\n        // subsequences of length i.\r\n        int[] dp = new int[n + 1];\r\n \r\n        // Empty substring has only one subsequence\r\n        dp[0] = 1;\r\n \r\n        // Traverse through all lengths from 1 to n.\r\n        for (int i = 1; i <= n; i++) {\r\n            // Number of subsequences with substring\r\n            // S[0..i-1]\r\n            dp[i] = 2 * dp[i - 1];\r\n            dp[i] %= mod;\r\n \r\n            // If current character has appeared\r\n            // before, then remove all subsequences\r\n            // ending with previous occurrence.\r\n            if (last[S.charAt(i - 1)-'a'] != -1)\r\n                dp[i] = (dp[i] - dp[last[S.charAt(i - 1)-'a']] + mod) % mod;\r\n \r\n            // Mark occurrence of current character\r\n            last[S.charAt(i - 1)-'a'] = (i - 1);\r\n        }\r\n \r\n        return dp[n];\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\n\nclass Solution:\n\n    def distinctSubsequences(self, S):\n        # create an array to store index of last\n        last = [-1] * 26\n\n        mod = 10**9 + 7\n\n        # length of input string\n        n = len(S)\n\n        # dp[i] is going to store count of\n        # discount subsequence of length of i\n        dp = [-2 for i in range(n + 1)]\n\n        # empty substring has only\n        # one subseqence\n        dp[0] = 1\n\n        # Traverse through all lengths\n        # from 1 to n\n        for i in range(1, n + 1):\n\n            # number of subseqence with\n            # substring str[0...i-1]\n            dp[i] = 2 * dp[i - 1]\n            dp[i] %= mod\n\n            # if current character has appeared\n            # before, then remove all subseqences\n            # ending with previous occurrence.\n            if last[ord(S[i - 1]) - 97] != -1:\n                dp[i] = dp[i] - dp[last[ord(S[i - 1]) - 97]]\n                dp[i] %= mod\n            last[ord(S[i - 1]) - 97] = i - 1\n\n        return dp[n]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}