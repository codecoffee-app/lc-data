{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706392,
            "title": "Number of distinct words with K maximum contiguous vowels",
            "titleSlug": "number-of-distinct-words-with-k-maximum-contiguous-vowels--141631",
            "content": "<p><span style=\"font-size: 18px;\">Find the number of unique words consisting of lowercase alphabets only of length N that can be formed with at-most K contiguous vowels.&nbsp;</span></p>\n<p><br /><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 2</span>\n<span style=\"font-size: 18px;\">K = 0</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n441\n</span><span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nTotal of 441 unique words are possible\nof length 2 that will have K( =0) vowels\ntogether, e.g. \"bc\", \"cd\", \"df\", etc are\nvalid words while \"ab\" (with 1 vowel) is\nnot a valid word.</span>\n\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 1</span>\n<span style=\"font-size: 18px;\">K = 1</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n26</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nAll the english alphabets including</span>\n<span style=\"font-size: 18px;\">vowels and consonants; as atmost K( =1)\nvowel can be taken.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong>&nbsp;&nbsp;<br />You don't need to read input or print anything. Your task is to complete the function <strong>kvowelwords</strong>()&nbsp;which takes an Integer N, an intege K and returns the total number of words of size N with atmost K vowels. As the answer maybe to large please <strong>return answer modulo 1000000007</strong>.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N*K)<br /><strong>Expected Auxiliary Space:</strong> O(N*K)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 1000</span><br /><span style=\"font-size: 18px;\">0 &le; K &le; N</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given integers N and K, determine the number of unique words of length N that can be formed using only lowercase alphabets, with the constraint that the word contains at most K contiguous vowels. Return the answer modulo 1000000007.",
                "constraints": [
                    "1 <= N <= 1000",
                    "0 <= K <= N"
                ],
                "testcases": [
                    {
                        "input": "N = 2\nK = 0",
                        "output": "441",
                        "explanation": "There are 441 unique words of length 2 with no contiguous vowels. Examples include 'bc', 'cd', 'df', etc. The word 'ab' is invalid as it contains one vowel."
                    },
                    {
                        "input": "N = 1\nK = 1",
                        "output": "26",
                        "explanation": "All 26 lowercase alphabets are valid since at most 1 contiguous vowel is allowed.  This includes both vowels and consonants."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If kvowelwords(i,j) denotes the number of strings of length i where last j characters are vowels, then kvowelwords(i,j) = kvowelwords(i-1,j-1)*5.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\n  private:\n    //Function to calculate x raised to the power y modulo p.\n    long long int power(long long int x, long long int y, long long int p)  \n    {  \n        long long int res = 1ll;     \n  \n        x = x % p;   \n               \n        if (x == 0) return 0; \n  \n        while (y > 0)  \n        {  \n            if (y & 1)  \n                res = (res*x) % p;  \n            y = y>>1; \n            x = (x*x) % p;  \n        }  \n        return res;  \n    }  \n\n  public:\n    //Function to find the number of strings of length N \n    //such that they contain at most K vowels.\n    int kvowelwords(int N, int K)\n    {\n        long long int i,j;\n        long long int MOD = 1000000007;\n        long long int dp[N+1][K+1]={0};\n        long long int sum=1;\n\n        for(i=1;i<=N;i++)\n        {\n            dp[i][0]=sum*21;\n            dp[i][0]%=MOD;\n            sum=dp[i][0];\n            \n            for(j=1;j<=K;j++)\n            {             \n                if(j>i)\n                    dp[i][j]=0;\n                else if(j==i)\n                    dp[i][j]=power(5ll,i,MOD);\n                else\n                    dp[i][j]=dp[i-1][j-1]*5;\n                \n                dp[i][j]%=MOD;\n              \n                sum+=dp[i][j];\n                sum%=MOD;\n            }\n        }\n        \n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    // Function to calculate power with modulo\n    long power(long x, long y, long p)  \n    {  \n        long res = 1l;     \n        x = x % p;   \n        if (x == 0) return 0; \n        \n        while (y > 0)  \n        {  \n            if (y %2 == 1)  \n                res = (res*x) % p;  \n            y = y>>1; \n            x = (x*x) % p;  \n        }  \n        return res;  \n    }  \n    \n    public int kvowelwords(int N,int K){\n        // Initializing variables and constants\n        int i,j;\n        long MOD = 1000000007;\n        long dp[][] = new long[N+1][K+1];\n        \n        // Filling the dp array with 0\n        for(int ii=0;ii<=N;ii++)\n            Arrays.fill(dp[ii],0l);\n        \n        long sum=1;\n        for(i=1;i<=N;i++)\n        {\n            // Calculating dp[i][0] and updating sum\n            dp[i][0]=sum*21l;\n            dp[i][0]%=MOD;\n            sum=dp[i][0];\n            \n            for(j=1;j<=K;j++)\n            {             \n                if(j>i)\n                // If j is greater than i, set dp[i][j] to 0\n                dp[i][j]=0l;\n                \n                else if(j==i)\n                // If j is equal to i, calculate dp[i][j] based on 5 raised to the power of i\n                dp[i][j]=power(5l,i,MOD);\n                \n                else\n                // Calculate dp[i][j] based on the previous values in dp array\n                dp[i][j]=dp[i-1][j-1]*5l;\n                \n                dp[i][j]%=MOD;\n                sum+=dp[i][j];\n                sum%=MOD;\n            }\n        }\n        // Return the final value of sum as integer\n        return (int)sum;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to calculate power modulo p\n    def power(self, x, y, p):\n        res = 1\n        x = x % p\n        if x == 0:\n            return 0\n        while y > 0:\n            if y % 2 == 1:\n                res = (res * x) % p\n            y = y >> 1\n            x = (x * x) % p\n        return res\n\n    # Function to calculate the sum of possible K vowel words of length N\n    def kvowelwords(self, N, K):\n        MOD = 1000000007\n        # Initializing a 2D array with 0s for dynamic programming\n        dp = [[0 for j in range(K + 1)] for i in range(N + 1)]\n        sum = 1\n        for i in range(1, N + 1):\n            # Initializing the first column of the array\n            dp[i][0] = sum * 21\n            dp[i][0] %= MOD\n            sum = dp[i][0]\n            for j in range(1, K + 1):\n                if j > i:\n                    dp[i][j] = 0\n                elif j == i:\n                    # Using the power function to calculate 5 raised to the power of i mod MOD\n                    dp[i][j] = self.power(5, i, MOD)\n                else:\n                    # Using the previously calculated values in the array\n                    dp[i][j] = dp[i - 1][j - 1] * 5\n                dp[i][j] %= MOD\n                sum += dp[i][j]\n                sum %= MOD\n        return sum",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}