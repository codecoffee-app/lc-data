{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711094,
            "title": "Number Of Enclaves",
            "titleSlug": "number-of-enclaves",
            "content": "<p><span style=\"font-size: 18px;\">You are given an <strong>n&nbsp;x m</strong>&nbsp;binary matrix <strong>grid</strong>, where <strong>0</strong> represents a sea cell and <strong>1</strong> represents a land cell.</span></p>\n<p><span style=\"font-size: 18px;\">A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.</span></p>\n<p><span style=\"font-size: 18px;\">Find the number of land cells in <strong>grid</strong> for which we cannot walk off the boundary of the grid in any number of moves.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">grid[][] = {{0, 0, 0, 0},\n\\t\\t{1, 0, 1, 0},\n\\t\\t{0, 1, 1, 0},\n\\t\\t{0, 0, 0, 0}}</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">3</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">0 0 0 0\n1 0 <strong>1</strong> 0\n0 <strong>1</strong> <strong>1</strong> 0\n0 0 0 0</span>\n<span style=\"font-size: 18px;\">The highlighted cells represents the land cells.</span>\n</pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\">grid[][] = {{0, 0, 0, 1},\n\\t\\t{0, 1, 1, 0},\n\\t\\t{0, 1, 1, 0},\n\\t\\t{0, 0, 0, 1},\n\\t\\t{0, 1, 1, 0}}</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">4</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">0 0 0 1\n0 <strong>1</strong> <strong>1</strong> 0\n0 <strong>1</strong> <strong>1</strong> 0\n0 0 0 1\n0 1 1 0</span>\n<span style=\"font-size: 18px;\">The highlighted cells represents the land cells.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Your Task:</span></strong></p>\n<p><span style=\"font-size: 18px;\">You don't need to print or input anything. Complete the function <strong>numberOfEnclaves()&nbsp;</strong>which takes a 2D integer matrix <strong>grid&nbsp;</strong>as the input parameter and returns an integer, denoting the number of land cells.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n * m)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Space Complexity:</strong> O(n * m)</span></p>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong></p>\n<ul>\n<li><span style=\"font-size: 18px;\">1 &lt;= n, m &lt;= 500</span></li>\n<li><span style=\"font-size: 18px;\">grid[i][j] == 0 or 1</span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an n x m binary matrix grid, where 0 represents a sea cell and 1 represents a land cell. A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid. Find the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.",
                "constraints": [
                    "1 <= n, m <= 500",
                    "grid[i][j] == 0 or 1"
                ],
                "testcases": [
                    {
                        "input": "grid[][] = {{0, 0, 0, 0},\n\t\t{1, 0, 1, 0},\n\t\t{0, 1, 1, 0},\n\t\t{0, 0, 0, 0}}",
                        "output": "3",
                        "explanation": "The land cells that are not connected to any boundary cells are (1,2), (2,1), and (2,2). Thus, the count is 3."
                    },
                    {
                        "input": "grid[][] = {{0, 0, 0, 1},\n\t\t{0, 1, 1, 0},\n\t\t{0, 1, 1, 0},\n\t\t{0, 0, 0, 1},\n\t\t{0, 1, 1, 0}}",
                        "output": "4",
                        "explanation": "The land cells that are not connected to any boundary cells are (1,1), (1,2), (2,1), and (2,2). Thus, the count is 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:14px\">Move across boundary of the grid and if at any cell you&nbsp;see 1, perform the dfs traversal function from there, it will traverse through the whole connected land and make them 0, at last find out the left cell having value 1.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to perform depth-first search to mark all\n    // connected 1's as 0's.\n    void dfs(int i, int j, vector<vector<int>> &grid) {\n        // If the current cell is out of bounds or has already\n        // been visited or is a 0, return.\n        if (i < 0 or j < 0 or i >= grid.size() or j >= grid[0].size() or\n            grid[i][j] == 0) {\n            return;\n        }\n\n        // Mark the current cell as 0 and recursively call dfs\n        // on adjacent cells.\n        grid[i][j] = 0;\n        dfs(i + 1, j, grid); // down\n        dfs(i, j + 1, grid); // right\n        dfs(i, j - 1, grid); // left\n        dfs(i - 1, j, grid); // up\n    }\n\n    // Function to count the number of enclaves.\n    int numberOfEnclaves(vector<vector<int>> &grid) {\n\n        int n = grid.size();\n        int m = grid[0].size();\n\n        // Perform DFS on all the border cells and mark\n        // all the connected 1's as 0's.\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 or j == 0 or i == n - 1 or\n                    j == m - 1 and grid[i][j] == 1) {\n                    dfs(i, j, grid);\n                }\n            }\n        }\n\n        // Count the remaining 1's in the grid which are\n        // not connected to the borders.\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                count += grid[i][j];\n            }\n        }\n\n        // Return the count of enclaves.\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    // Depth First Search function to update grid values to 0 if connected to edge or 0\r\n    void dfs(int i, int j, int[][] grid) {\r\n        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length ||\r\n            grid[i][j] == 0) {\r\n            return;\r\n        }\r\n\r\n        grid[i][j] = 0;\r\n        dfs(i + 1, j, grid); // checking down\r\n        dfs(i, j + 1, grid); // checking right\r\n        dfs(i, j - 1, grid); // checking left\r\n        dfs(i - 1, j, grid); // checking up\r\n    }\r\n\r\n    // Function to count the number of enclaves on the grid\r\n    int numberOfEnclaves(int[][] grid) {\r\n\r\n        int n = grid.length; // number of rows in grid\r\n        int m = grid[0].length; // number of columns in grid\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                // If the cell is on the edge and contains a 1, call dfs to update adjacent connected cells to 0\r\n                if ((i == 0 || j == 0 || i == n - 1 ||\r\n                    j == m - 1) && grid[i][j] == 1) {\r\n                    dfs(i, j, grid);\r\n                }\r\n            }\r\n        }\r\n\r\n        int count = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                count += grid[i][j]; // count the remaining 1s on the grid\r\n            }\r\n        }\r\n\r\n        return count; // return the count of enclaves\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nimport sys\r\nfrom typing import List\r\nsys.setrecursionlimit(10**8)\r\n\r\n#recursive function to perform depth-first search\r\ndef dfs(i, j, grid):\r\n    if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == 0:\r\n        return\r\n    \r\n    #mark the current cell as visited (0)\r\n    grid[i][j] = 0\r\n    dfs(i + 1, j, grid)\r\n    dfs(i, j + 1, grid)\r\n    dfs(i, j - 1, grid)\r\n    dfs(i - 1, j, grid)\r\n\r\nclass Solution:\r\n    #function to calculate the number of enclaves\r\n    def numberOfEnclaves(self, grid: List[List[int]]) -> int:\r\n        n = len(grid)\r\n        m = len(grid[0])\r\n\r\n        #perform DFS on boundary cells\r\n        for i in range(n):\r\n            for j in range(m):\r\n                if i == 0 or j == 0 or i == n - 1 or j == m - 1 and grid[i][j] == 1:\r\n                    dfs(i, j, grid)\r\n        \r\n        #count the remaining enclaves\r\n        count = 0\r\n        for i in range(n):\r\n            for j in range(m):\r\n                count += grid[i][j]\r\n\r\n        return count",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[][]} grid\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to count the number of enclaves.\n    numberOfEnclaves(grid) {\n        let n = grid.length;\n        let m = grid[0].length;\n\n        //function to perform depth-first search\n        function dfs(i, j, grid) {\n            if (i < 0 || j < 0 || i >= n || j >= m || grid[i][j] == 0) {\n                return;\n            }\n\n            //mark the current cell as visited (0)\n            grid[i][j] = 0;\n            dfs(i + 1, j, grid);\n            dfs(i, j + 1, grid);\n            dfs(i, j - 1, grid);\n            dfs(i - 1, j, grid);\n        }\n\n        //perform DFS on boundary cells\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n                if ((i == 0 || j == 0 || i == n - 1 || j == m - 1) && grid[i][j] == 1) {\n                    dfs(i, j, grid);\n                }\n            }\n        }\n        \n        //count the remaining enclaves\n        let count = 0;\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n                count += grid[i][j];\n            }\n        }\n\n        return count;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}