{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713974,
            "title": "Number of Good Components",
            "titleSlug": "number-of-good-components--170647",
            "content": "<p><span style=\"font-size: 18px;\">Given an undirected graph with <strong>v </strong>vertices(numbered from <strong>1</strong> to <strong>v</strong>) and <strong>e </strong>edges. Find the number of good components in the graph.<br />A component of the graph is good if and only if the component is fully connected.<br /><strong>Note:&nbsp;</strong>A fully connected component is a subgraph of a given graph such that there's an edge between every pair of vertices in the component, the given graph can be a <strong>disconnected graph.&nbsp;</strong></span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \n<img style=\"height: 239px; width: 350px;\" src=\"https://media.geeksforgeeks.org/img-practice/good_comp_1-1656905170.png\" alt=\"\" />\n\ne=3 <br />v=3\nedges<strong>=</strong>{{1, 2},{1, 3},{3, 2}}\n<strong>Output: <br /></strong>1</span><strong><span style=\"font-size: 18px;\">\nExplanation: <br /></span></strong><span style=\"font-size: 18px;\">We can see that there is only one component in the graph and in this component there is a edge between any two vertces</span><strong><span style=\"font-size: 18px;\">.</span></strong></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong></span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/713974/Web/Other/0b0c03cb-9f66-4c94-8900-8120a171f9a3_1685087973.png\" /><span style=\"font-size: 18px;\">\ne=5 <br />v=7\nedges<strong>=</strong>{{1, 2},{7, 2},{3, 5},{3, 4},{4, 5}}\n<strong>Output: <br /></strong>2\n</span><strong><span style=\"font-size: 18px;\">Explanation: <br /></span></strong><span style=\"font-size: 18px;\">We can see that there are 3 components in the graph. For 1-2-7 there is no edge between 1 to 7, so it is not a fully connected component. Rest 2 are individually fully connected component.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>findNumberOfGoodComponent()</strong>, which<strong> </strong>takes an integer <strong>e</strong> and <strong>v </strong>and <strong>edges[][] </strong>as input parameters and returns an integer denoting the number of good components. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(v+e)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(depth of the graph)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>1 &lt;= edges[i][0], edges[i][1] &lt;= v<br />1 &le; v, e &le; 10<sup>4</sup><br />All edges are unique</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>The idea is to use DFS and count the number of vertices and edges in a component.</p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // DFS function to traverse the graph\n    void dfs(int v, int &vertices, int &edges, vector<vector<int>> &adj,\n             vector<int> &visited) {\n        visited[v] = 1;\n        vertices++;             // Counting the number of vertices\n        edges += adj[v].size(); // Counting the number of edges\n        for (auto to : adj[v]) {\n            if (!visited[to]) {\n                dfs(to, vertices, edges, adj, visited);\n            }\n        }\n    }\n\n    // Function to find the number of \"good\" components\n    int findNumberOfGoodComponent(int E, int V, vector<vector<int>> &edges) {\n\n        vector<vector<int>> adj(V + 1, vector<int>());\n\n        for (auto i : edges) {\n            adj[i[0]].push_back(i[1]);\n            adj[i[1]].push_back(i[0]);\n        }\n\n        int ans = 0;\n        vector<int> visited(V + 1, 0);\n\n        for (int i = 1; i <= V; i++) {\n            // Check if the vertex is visited or not\n            if (!visited[i]) {\n                int vertices = 0, edges = 0;\n                dfs(i, vertices, edges, adj, visited);\n                // Checking if the component is \"good\"\n                edges /= 2;\n                if (edges == (vertices * (vertices - 1)) / 2)\n                    ans++;\n            }\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int findNumberOfGoodComponent(int E, int V, int[][] edges) {\n        boolean v[] = new boolean[V + 1]; // boolean array to track visited vertices\n        int ans = 0; // variable to store the number of good components\n\n        ArrayList<ArrayList<Integer>> adj = new ArrayList<>(); // adjacency list\n        for (int i = 0; i <= V; i++) {\n            adj.add(new ArrayList<>());\n        }\n\n        // Convert edge array to adjacency list\n        for (int[] edge : edges) {\n            int a = edge[0];\n            int b = edge[1];\n            adj.get(a).add(b);\n            adj.get(b).add(a);\n        }\n\n        for (int i = 1; i <= V; i++) {\n            if (!v[i]) { // if the current vertex is not visited\n                int[] counts =\n                    dfs(adj, i, v); // perform depth-first search starting from i\n\n                int vertices = counts[0];\n                int edgesCount = counts[1];\n\n                edgesCount /= 2; // divide the count of edges by 2 (since each edge is\n                                 // counted twice)\n\n                // check if the count of edges is equal to the maximum number of edges\n                // possible in a complete graph\n                if (edgesCount == (vertices * (vertices - 1)) / 2) {\n                    ans++; // increment the count of good components\n                }\n            }\n        }\n\n        return ans; // return the number of good components\n    }\n\n    private static int[] dfs(ArrayList<ArrayList<Integer>> A, int i, boolean v[]) {\n        v[i] = true;               // mark the current vertex as visited\n        int[] counts = new int[2]; // counts[0] stores vertices, counts[1] stores edges\n        counts[0] = 1;             // increment the count of vertices\n        counts[1] +=\n            A.get(i).size(); // add the number of edges connected to the current vertex\n\n        for (int child :\n             A.get(i)) {     // iterate over the adjacent vertices of the current vertex\n            if (!v[child]) { // if the child vertex is not visited\n                int[] childCounts = dfs(\n                    A, child,\n                    v); // recursively perform depth-first search on the child vertex\n                counts[0] += childCounts[0]; // update vertices count\n                counts[1] += childCounts[1]; // update edges count\n            }\n        }\n        return counts;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import collections\nfrom collections import deque  #importing deque from collections module\nfrom collections import defaultdict  #importing defaultdict from collections module\n\n\nclass Solution:\n\n    #Depth First Search algorithm to traverse the graph\n    def dfs(self, v, adj, visited):\n        visited[v] = 1  #marking the current vertex as visited\n        self.vertices += 1  #incrementing the vertex count\n        self.edges += len(\n            adj[v]\n        )  #adding the number of edges connected to the current vertex\n\n        #iterating over all the adjacent vertices\n        for to in adj[v]:\n            if not visited[to]:  #if the adjacent vertex is not visited\n                self.dfs(to, adj, visited)  #recursive call to dfs function\n\n    #Function to find the number of good components\n    def findNumberOfGoodComponent(self, E, V, edges):\n        ans = 0  #variable to store the count of good components\n        visited = [0] * (V + 1)  #array to mark visited vertices\n        adj = [[] for _ in range(V + 1)]\n        for u, v in edges:\n            adj[u].append(v)\n            adj[v].append(u)\n        for i in range(1, V + 1):\n            if not visited[i]:  #if the vertex is not visited\n                self.vertices = 0  #initialize vertex count to 0\n                self.edges = 0  #initialize edge count to 0\n                self.dfs(\n                    i, adj, visited\n                )  #call to dfs function to traverse the graph starting from current vertex\n\n                self.edges //= 2  #divide the edge count by 2 as each edge is counted twice\n                if (\n                        self.edges == (self.vertices *\n                                       (self.vertices - 1)) // 2\n                ):  #check if the number of edges is equal to the number of vertices choose 2\n                    ans += 1  #increment the count of good components\n\n        return ans  #return the count of good components\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}