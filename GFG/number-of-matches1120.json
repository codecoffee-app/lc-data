{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702672,
            "title": "Number of matches",
            "titleSlug": "number-of-matches1120",
            "content": "<p><span style=\"font-family: arial, helvetica, sans-serif;\">In a knockout tournament, there are <strong>n</strong> players, each with a unique rating represented by an array <strong>arr[]</strong>. I</span><span style=\"font-family: arial, helvetica, sans-serif;\">n each round:&nbsp;<br /></span><span style=\"font-family: arial, helvetica, sans-serif;\">&nbsp; &nbsp; - The 1st player plays against the 2nd player, the 3rd player plays against the 4th, and so on.<br /></span><span style=\"font-family: arial, helvetica, sans-serif;\">&nbsp; &nbsp; - The player with the higher rating wins the match and moves to the next round.<br /></span><span style=\"font-family: arial, helvetica, sans-serif;\">&nbsp; &nbsp; - If there is an odd number of players, the last player automatically moves to the next round.</span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif;\">Your task is to determine how many matches each player wins during the tournament. Store the result for each player in an <strong>answer[]</strong> array and return it.</span></p>\n<p><span style=\"font-family: arial, helvetica, sans-serif;\">Note: The tournament continues until only one player remains.</span></p>\n<p><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Input</strong><strong>: </strong>arr[] = {7, 1, 5, 3, 9}\n<strong>Output</strong><strong>: </strong>3 1 2 1 1\n<strong>Explanation</strong><strong>: </strong>players: 7 1 5 3 9, The first round: (7 has a match with 1), (5 has a match with 3), (9 has no matches automatically qualifies)\nplayers: 7 5 9 The second round: (7 has a match with 5), (9 has no matches automatically qualifies)\nplayers: 7 9 The third round: (7 has a match with 9).\nThe player with rating 7 played 3 matches. The player with rating 1 played 1 match. The player with rating 5 played 2 matches. The player with rating 3 played 1 match. The player with rating 9 played 1 match.</span></pre>\n<pre><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Input</strong><strong>:</strong> arr[] = {8, 4, 3, 5, 2, 6}\n<strong>Output</strong><strong>: </strong>3 1 1 2 1 2 </span></pre>\n<p><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 12pt; font-family: arial, helvetica, sans-serif;\"><strong>Constraints:</strong><br />1 &le; arr.size<strong>&nbsp;</strong>&le; 10<sup>5&nbsp; </sup><br />0 &le; arr[i]<strong>&nbsp;</strong>&le; 10<sup>6 </sup>, The rating of the players, arr[i] will be <strong>distinct</strong>.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "In a knockout tournament with 'n' players, each player has a unique rating in the 'arr' array. In each round, players are paired (1st vs 2nd, 3rd vs 4th, and so on). The player with the higher rating wins and advances. If there's an odd number of players, the last player automatically advances.  The tournament continues until only one player remains.  Determine the number of matches each player wins during the tournament and store the results in an 'answer' array.",
                "constraints": [
                    "1 <= arr.size <= 10^5",
                    "0 <= arr[i] <= 10^6",
                    "All player ratings (arr[i]) are distinct."
                ],
                "testcases": [
                    {
                        "input": "{7, 1, 5, 3, 9}",
                        "output": "3 1 2 1 1",
                        "explanation": "Round 1: (7 vs 1), (5 vs 3), 9 advances.  Winners: 7, 5, 9.\nRound 2: (7 vs 5), 9 advances. Winners: 7, 9.\nRound 3: (7 vs 9). Winner: Either 7 or 9 (This example shows the win counts assuming 7 wins). 7 won 3 matches, 1 won 0 matches, 5 won 1 match, 3 won 0 matches and 9 won 1 match.\nTherefore: {7:2, 1:0, 5:1, 3:0, 9:1}."
                    },
                    {
                        "input": "{8, 4, 3, 5, 2, 6}",
                        "output": "3 1 1 2 1 2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Total number of matches will be (N/2)+(N/4)+(N/8)+.... = N &minus; 1. For every round,&nbsp;start from the left and pick two people at a time.</span></p>",
            "<p><span style=\"font-size:18px\">The number of participants in the next round will be (present_number)/2 + 1 if present number of participants is odd otherwise it is (present_number)/2.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Solution class\nclass Solution {\n  public:\n    // Function to compute the answer array and return it\n    vector<long> getAnswer(vector<long>& arr) {\n        int n = arr.size();\n        vector<pair<long, int>> a(n);\n        vector<long> answer(n, 0); // Initialize answer vector with 0s\n\n        // Filling the pair vector with values and indices of the input array\n        for (int i = 0; i < n; i++) {\n            a[i] = make_pair(arr[i], i);\n        }\n\n        int count = n;\n\n        // Main loop to compute the answer\n        while (count > 1) {\n            int p = 0;\n\n            // Updating answer array and compressing the pair array\n            for (int i = 0; i + 1 < count; i += 2) {\n                answer[a[i].second]++;\n                answer[a[i + 1].second]++;\n\n                // Keep the larger element and its index\n                if (a[i].first > a[i + 1].first) {\n                    a[p++] = a[i];\n                } else {\n                    a[p++] = a[i + 1];\n                }\n            }\n\n            // Handle the case where count is odd\n            if (count % 2 == 1) {\n                a[p++] = a[count - 1];\n            }\n\n            count = p; // Update count to the new compressed size\n        }\n\n        return answer; // Return the computed answer vector\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    public static int[] getAnswer(int arr[]) {\n\n        int n = arr.length;\n        int answer[] = new int[n];\n        int[][] a = new int[n + 5][2];\n        for (int i = 1; i <= n; i++) {\n            a[i][0] = arr[i - 1];\n            a[i][1] = i;\n        }\n\n        int count = n;\n\n        while (count > 1) {\n            int p = 1;\n            for (int i = 1; i < count; i += 2) {\n                answer[a[i][1] - 1]++;\n                answer[a[i + 1][1] - 1]++;\n\n                if (a[i][0] > a[i + 1][0]) {\n                    a[p][0] = a[i][0];\n                    a[p][1] = a[i][1];\n                    p++;\n                } else if (a[i + 1][0] > a[i][0]) {\n                    a[p][0] = a[i + 1][0];\n                    a[p][1] = a[i + 1][1];\n                    p++;\n                }\n            }\n\n            if (count % 2 == 1) {\n                a[(count / 2) + 1][0] = a[count][0];\n                a[(count / 2) + 1][1] = a[count][1];\n                count = (count / 2) + 1;\n            }\n\n            else if (count % 2 == 0) {\n                count = count / 2;\n            }\n        }\n        return answer;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def getAnswer(self, arr):\n\n        n = len(arr)\n        answer = [0 for i in range(n)]\n        #creating a 2D array with size n+5 and initializing all elements to 0.\n        a = [[0 for i in range(2)] for j in range(n + 5)]\n\n        #copying the elements of arr into the first column of 2D array a\n        #and assigning the corresponding index as the second column value.\n        for i in range(1, n + 1):\n            a[i][0] = arr[i - 1]\n            a[i][1] = i\n\n        count = n\n        #setting count equal to n\n\n        #iterating until count > 1\n        while (count > 1):\n            p = 1  #setting p = 1\n            #iterating over the elements of a, starting from 1 and incrementing by 2.\n            for i in range(1, count, 2):\n                answer[\n                    a[i][1] -\n                    1] += 1  #incrementing the value in answer array at index (a[i][1] - 1) by 1\n                answer[\n                    a[i + 1][1] -\n                    1] += 1  #incrementing the value in answer array at index (a[i+1][1] - 1) by 1\n\n                #comparing the values in the first column of the current row and the next row in a.\n                #if the value in the current row is greater, then copying the values of the current row into the pth row of a.\n                if (a[i][0] > a[i + 1][0]):\n                    a[p][0] = a[i][0]\n                    a[p][1] = a[i][1]\n                    p += 1\n\n                #if the value in the next row is greater, then copying the values of the next row into the pth row of a.\n                elif (a[i + 1][0] > a[i][0]):\n                    a[p][0] = a[i + 1][0]\n                    a[p][1] = a[i + 1][1]\n                    p += 1\n\n            if (count % 2 == 1):  #if count is odd\n                a[(count // 2) + 1][0] = a[count][\n                    0]  #copying the value in the last row of a into the (count//2)+1th row.\n                a[(count // 2) + 1][1] = a[count][\n                    1]  #copying the index of the last row in a into the (count//2)+1th row.\n                count = (count // 2) + 1  #setting count to (count//2) + 1\n\n            elif (count % 2 == 0):  #if count is even\n                count = count // 2  #setting count to count//2.\n        return answer\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {number[]} answer\n */\n\nclass Solution {\n    // Your task is to store the answer of each index in one 'answer' array and return\n    // it Note: indexing is 0 based\n    getAnswer(arr) {\n        let n = arr.length;\n        let answer = new Array(n);\n        for (let i = 0; i < n; i++) {\n            answer[i] = 0;\n        }\n        let a = new Array(n + 5);\n        for (let i = 0; i < n + 5; i++) {\n            a[i] = new Array(2).fill(0);\n        }\n\n        for (let i = 0; i < n; i++) {\n            a[i + 1][0] = arr[i];\n            a[i + 1][1] = i + 1;\n        }\n\n        let count = n;\n\n        while (count > 1) {\n            let p = 1;\n            for (let i = 1; i < count; i += 2) {\n                answer[a[i][1] - 1] += 1;\n                answer[a[i + 1][1] - 1] += 1;\n\n                if (a[i][0] > a[i + 1][0]) {\n                    a[p][0] = a[i][0];\n                    a[p][1] = a[i][1];\n                    p += 1;\n                } else if (a[i + 1][0] > a[i][0]) {\n                    a[p][0] = a[i + 1][0];\n                    a[p][1] = a[i + 1][1];\n                    p += 1;\n                }\n            }\n\n            if (count % 2 == 1) {\n                a[Math.floor(count / 2) + 1] = [ a[count][0], a[count][1] ];\n                count = Math.floor(count / 2) + 1;\n            }\n\n            else if (count % 2 == 0) {\n                count = count / 2;\n            }\n        }\n        return answer;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}