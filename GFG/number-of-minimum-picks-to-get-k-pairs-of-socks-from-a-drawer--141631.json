{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706060,
            "title": "Number of minimum picks to get 'k' pairs of socks from a drawer",
            "titleSlug": "number-of-minimum-picks-to-get-k-pairs-of-socks-from-a-drawer--141631",
            "content": "<p><span style=\"font-size:18px\">A drawer contains socks of <strong>n</strong>&nbsp;different colours. The number of socks available of i<sup>th</sup>&nbsp;colour is given by <strong>a[i]</strong> where <strong>a</strong>&nbsp;is an array of <strong>n</strong> elements. Tony wants to take <strong>k</strong>&nbsp;pairs of socks out of the drawer. However, he&nbsp;cannot see the colour of the sock that he is picking. You have to tell what is the minimum number of socks Tony has to pick in one attempt from the drawer such that&nbsp;he can be absolutely sure, without seeing their colours,&nbsp;that he will have at least k matching pairs.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4, K = 6\na[] = {3, 4, 5, 3}</span>\n<span style=\"font-size:18px\"><strong>Output:</strong> 15</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong> \nAll 15 socks have to be picked in order\nto obtain 6 pairs.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 2, K = 3\na[] = {4, 6}</span>\n<span style=\"font-size:18px\"><strong>Output:</strong> 7</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong> The Worst case scenario after 6\npicks can be {3,3} or {1,5} of each\ncoloured socks. Hence 7th pick will ensure\n3rd pair. </span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: </strong>&nbsp;<br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>find_min()</strong> which takes the array a[], size of array N, and value K as input parameters and returns the minimum number of&nbsp;socks Tony has to pick. If it is not possible to pick then return&nbsp;-1. </span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup>&nbsp;<br />\n1 &le; a[i] &le; 10<sup>6</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A drawer contains socks of 'n' different colors. The number of socks of the i-th color is given by a[i], where 'a' is an array of 'n' elements. Tony wants to take 'k' pairs of socks out of the drawer without looking at the colors. Determine the minimum number of socks Tony must pick to guarantee that he has at least 'k' matching pairs.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= a[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 4, K = 6\na[] = {3, 4, 5, 3}",
                        "output": "15",
                        "explanation": "In the worst-case scenario, Tony picks all the socks of different colors and still doesn't have 'k' pairs. To guarantee 'k' pairs, he has to pick all 15 socks."
                    },
                    {
                        "input": "N = 2, K = 3\na[] = {4, 6}",
                        "output": "7",
                        "explanation": "The worst-case scenario is when Tony picks 3 socks of the first color and 3 socks of the second color. The next pick will guarantee the 3rd pair."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">1. Count the maximum number of pairs that can be formed.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n\n\tpublic:\n\tint find_min(int a[], int n, int k) {\n        int sum = 0, complete_pairs = 0;\n        for (int i = 0; i < n; i++) {\n            complete_pairs += a[i] / 2;\n            // complete_pairs should hold the value of max\n            // pairs that can be picked from the drawer\n\n            if (a[i] % 2 == 0)\n                sum += (a[i] - 2) / 2;\n            else\n                sum += (a[i] - 1) / 2;\n            // sum holds the value of maximum pairs that\n            // can be picked without exhausting any colour\n        }\n\n        if (k > complete_pairs) return -1;\n        // returning -1 if required pairs is more than\n        // available pairs\n\n        if (k <= sum) return 2 * (k - 1) + n + 1;\n        // if k is lesser than or equal to sum,\n        // worst case after picking k-1 pairs is\n        // 2*(k-1) socks representing k-1 pairs\n        // along with n socks, each of different colour\n        // one more pick after this will certainly complete kth pair\n\n        return 2 * sum + n + (k - sum);\n        // if however, k>sum\n        // the worst case is as described below-\n        // 'sum' pairs are picked without exhausting any colour (2*sum picks)\n        // n socks are picked, all of different colours (n picks)\n        // now, no colour has more than one sock left in drawer\n        // this implies, each new pick will complete a pair\n        // therefore (k-sum) more picks required\n    }\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    public int find_min(int[] a, int n, int k) {\n        int sum = 0, complete_pairs = 0;\n        for (int i = 0; i < n; i++) {\n            // complete_pairs should hold the value of max\n            // pairs that can be picked from the drawer\n            complete_pairs += a[i] / 2;\n\n            // sum holds the value of maximum pairs that\n            // can be picked without exhausting any colour\n            if (a[i] % 2 == 0)\n                sum += (a[i] - 2) / 2;\n            else\n                sum += (a[i] - 1) / 2;\n        }\n        // returning -1 if required pairs is more than\n        // available pairs\n        if (k > complete_pairs) return -1;\n\n        // if k is lesser than or equal to sum,\n        // worst case after picking k-1 pairs is\n        // 2*(k-1) socks representing k-1 pairs\n        // along with n socks, each of different colour\n        // one more pick after this will certainly complete kth pair\n        if (k <= sum) return 2 * (k - 1) + n + 1;\n\n        // if however, k>sum\n        // the worst case is as described below-\n        // 'sum' pairs are picked without exhausting any colour (2*sum picks)\n        // n socks are picked, all of different colours (n picks)\n        // now, no colour has more than one sock left in drawer\n        // this implies, each new pick will complete a pair\n        // therefore (k-sum) more picks required\n        return 2 * sum + n + (k - sum);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    def find_min(self, a, n, k):\n        s=0\n        complete_pairs=0\n        \n        for i in range(0,n):\n            # complete_pairs should hold the value of max\n            # pairs that can be picked from the drawer\n            complete_pairs += a[i] // 2;\n            \n            # sum holds the value of maximum pairs that\n            # can be picked without exhausting any colour\n            if( a[i] % 2 == 0 ):\n                s += ( a[i] - 2 )//2;\n            else:\n                s += ( a[i] - 1 )//2;\n        \n        # returning -1 if required pairs is more than\n        # available pairs\n        if(k > complete_pairs):\n            return -1;\n        # if k is lesser than or equal to sum,\n        # worst case after picking k-1 pairs is\n        # 2*(k-1) socks representing k-1 pairs\n        # along with n socks, each of different colour\n        # one more pick after this will certainly complete kth pair\n        if(k<=s):\n            return 2*(k-1) + n + 1;\n        \n        # if however, k>sum\n        # the worst case is as described below-\n        # 'sum' pairs are picked without exhausting any colour (2*sum picks)\n        # n socks are picked, all of different colours (n picks)\n        # now, no colour has more than one sock left in drawer\n        # this implies, each new pick will complete a pair\n        # therefore (k-sum) more picks required\n        return 2*s + n + (k-s);   \n\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    find_min(a, n, k) {\n        let sum = 0,\n            complete_pairs = 0;\n        for (let i = 0; i < n; i++) {\n            complete_pairs += Math.floor(a[i] / 2);\n            if (a[i] % 2 === 0)\n                sum += (a[i] - 2) / 2;\n            else\n                sum += (a[i] - 1) / 2;\n        }\n\n        if (k > complete_pairs) return -1;\n        if (k <= sum) return 2 * (k - 1) + n + 1;\n        \n        return 2 * sum + n + (k - sum);\n    }\n\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    public int find_min(int[] a, int n, int k)\n    {\n        int sum = 0, complete_pairs = 0;\n        for (int i = 0; i < n; i++)\n        {\n            complete_pairs += a[i] / 2;\n\n            if (a[i] % 2 == 0)\n                sum += (a[i] - 2) / 2;\n            else\n                sum += (a[i] - 1) / 2;\n        }\n\n        if (k > complete_pairs) return -1;\n\n        if (k <= sum) return 2 * (k - 1) + n + 1;\n\n        return 2 * sum + n + (k - sum);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}