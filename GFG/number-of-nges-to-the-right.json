{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712213,
            "title": "Number of greater elements to the right",
            "titleSlug": "number-of-nges-to-the-right",
            "content": "<p><span >Given an array of <strong>N</strong> integers and <strong>Q</strong> queries of indices.&nbsp;For each query <code>indices[i]</code>, determine the count of elements in <code>arr</code> that are <strong>strictly greater</strong> than <code>arr[indices[i]]</code> to its right (after the position <code>indices[i]</code>).</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [3, 4, 2, 7, 5, 8, 10, 6], queries = 2, indices[] = [0, 5]\n<strong>Output: </strong> [6, 1]\n<strong>Explanation: </strong>The next greater elements to the right of 3(index 0) are 4,7,5,8,10,6. The next greater elements to the right of 8(index 5) is only 10.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 4, 1], queries = 2, indices[] = [0, 3]\n<strong>Output: </strong> [3, 0]\n<strong>Explanation: </strong>The count of numbers to the right of index 0 which are greater than arr[0] is 3 i.e. (2, 3, 4). Similarly, the count of numbers to the right of index 3 which are greater than arr[3] is 0, since there are no greater elements than 4 to the right of the array.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>4</sup></span><br /><span >1 &lt;= arr[i] &lt;= 10<sup>5</sup></span><br /><span >1 &lt;= queries &lt;= 100<br />0 &lt;= indices[i] &lt;= N - 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N integers and Q queries, each query provides an index into the array. For each given index, determine the number of elements to the right of that index in the array that are strictly greater than the element at the given index.",
                "constraints": [
                    "1 <= N <= 10^4",
                    "1 <= arr[i] <= 10^5",
                    "1 <= queries <= 100",
                    "0 <= indices[i] <= N - 1"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [3, 4, 2, 7, 5, 8, 10, 6], queries = 2, indices[] = [0, 5]",
                        "output": "[6, 1]",
                        "explanation": "For the first query (index 0), the elements to the right of 3 that are greater than 3 are 4, 7, 5, 8, 10, and 6, resulting in a count of 6. For the second query (index 5), the elements to the right of 8 that are greater than 8 is only 10, resulting in a count of 1."
                    },
                    {
                        "input": "arr[] = [1, 2, 3, 4, 1], queries = 2, indices[] = [0, 3]",
                        "output": "[3, 0]",
                        "explanation": "For the first query (index 0), the elements to the right of 1 that are greater than 1 are 2, 3, and 4, resulting in a count of 3. For the second query (index 3), there are no elements to the right of 4 that are greater than 4, resulting in a count of 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n\n    //Function to count the number of elements greater than the element at given index.\n    int nextGreaterElements(vector<int>& a, int index){\n    int count = 0, N = a.size();\n    //iterating over the array elements after the given index.\n    for (int i = index + 1; i < N; i++)\n        //if element at current index is greater than the element at given index, increment count.\n        if (a[i] > a[index])\n            count++;\n \n    return count;\n}\n\n    //Function to find the number of elements greater than the element at given indices.\n    vector<int> count_NGE(int n, vector<int> &arr, int queries, vector<int> &indices){\n        vector<int> ans;\n        //iterating over the given indices.\n        for(int i = 0;i<queries;i++){\n            //calling nextGreaterElements function to get the count of elements greater than element at current index.\n            ans.push_back(nextGreaterElements(arr,indices[i]));\n        }\n\n        return ans;\n    }\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n  public static int[] count_NGEs(int n, int a[], int q, int ind[]) {\r\n    // code here\r\n\r\n    //Creating an array to store the next greater elements count\r\n    int ngr[]=new int[q];\r\n\r\n    //Iterating over the indices\r\n    for(int i=0;i<q;i++)\r\n     {\r\n         int idx=ind[i];\r\n         int c=0;\r\n\r\n         //Iterating over the elements after the current index\r\n         for(int j=idx+1;j<n;j++)\r\n          {\r\n              //Checking if the element is greater than the current element\r\n              if(a[j]>a[idx])\r\n               c++;\r\n          }\r\n\r\n        //Storing the count of next greater elements in the array\r\n        ngr[i]=c;\r\n     }\r\n     \r\n    //Returning the array with the count of next greater elements\r\n    return ngr;\r\n  }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    # Function to count the number of Next Greater Elements\n    def count_NGEs(self, n, a, q, indices):\n        ngr = [] # List to store the count of Next Greater Elements\n        \n        # Iterating over the given indices\n        for idx in indices:\n            cnt = 0 # Variable to store the count of Next Greater Elements\n            \n            # Looping through the elements after the current index\n            for i in range(idx + 1, n):\n                if a[i] > a[idx]: # If the element is greater than the current index element, increment the count\n                    cnt += 1\n            ngr.append(cnt) # Adding the count to the list\n        return ngr # Returning the list of count of Next Greater Elements",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution{\n    //Complete this function\n    public List<int> count_NGE(int n, List<int> arr, int queries, List<int> indices){\n        List<int> ans = new List<int>();\n        //iterating over the given indices.\n        for(int i = 0; i < queries; i++){\n            //calling nextGreaterElements function to get the count of elements greater than element at current index.\n            ans.Add(nextGreaterElements(arr,indices[i]));\n        }\n\n        return ans;\n    }\n\n    //Function to count the number of elements greater than the element at given index.\n    private int nextGreaterElements(List<int> a, int index){\n        int count = 0;\n        int N = a.Count;\n        //iterating over the array elements after the given index.\n        for (int i = index + 1; i < N; i++){\n            //if element at current index is greater than the element at given index, increment count.\n            if (a[i] > a[index]){\n                count++;\n            }\n        }\n \n        return count;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number[]} arr\n * @param {number} queries\n * @param {number[]} indices\n * @returns {number[]}\n*/\n\nclass Solution\n{\n    //Function to count the next greater elements.\n    count_NGEs(N, arr, queries, indices)\n    {\n        // List to store the count of Next Greater Elements\n        let ngr = []; \n        \n        // Iterating over the given indices\n        for (let idx of indices) {\n            let cnt = 0; // Variable to store the count of Next Greater Elements\n            \n            // Looping through the elements after the current index\n            for (let i = idx + 1; i < N; i++) {\n                if (arr[i] > arr[idx]) { // If the element is greater than the current index element, increment the count\n                    cnt += 1;\n                }\n            }\n            ngr.push(cnt); // Adding the count to the list\n        }\n        return ngr; // Returning the list of count of Next Greater Elements\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}