{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703129,
            "title": "Number of occurrence",
            "titleSlug": "number-of-occurrence2259",
            "content": "<p><span >Given a&nbsp;<strong>sorted&nbsp;</strong>array, <strong>arr[] </strong>and a number&nbsp;<strong>target</strong>, you need to find the number of occurrences of<strong>&nbsp;target</strong>&nbsp;in&nbsp;<strong>arr[]</strong>.&nbsp;</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1, 2, 2, 2, 2, 3], target = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> target = 2 occurs 4 times in the given array so the output is 4.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [1, 1, 2, 2, 2, 2, 3], target = 4\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> target = 4 is not present in the given array so the output is 0.<br /></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [8, 9, 10, 12, 12, 12], target = 12\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> target = 12 occurs 3 times in the given array so the output is 3.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup><br />1 &le; target &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr[]` and a number `target`, find the number of times `target` occurs in `arr[]`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6",
                    "1 <= target <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 1, 2, 2, 2, 2, 3], target = 2",
                        "output": "4",
                        "explanation": "The target value 2 appears 4 times in the array."
                    },
                    {
                        "input": "arr[] = [1, 1, 2, 2, 2, 2, 3], target = 4",
                        "output": "0",
                        "explanation": "The target value 4 is not present in the array."
                    },
                    {
                        "input": "arr[] = [8, 9, 10, 12, 12, 12], target = 12",
                        "output": "3",
                        "explanation": "The target value 12 appears 3 times in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try to use Binary search to get the index of the first &amp; Last occurrence of target in arr[].</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho",
            "amazon",
            "makemytrip"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n//  Function to perform binary search to find the lower bound of target\nint lower_bound(int arr[], int n, int target) {\n    int left = 0, right = n;\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] < target)\n            left = mid + 1;\n        else\n            right = mid;\n    }\n    return left;\n}\n\n// Function to perform binary search to find the upper bound of target\nint upper_bound(int arr[], int n, int target) {\n    int left = 0, right = n;\n    while (left < right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] <= target)\n            left = mid + 1;\n        else\n            right = mid;\n    }\n    return left;\n}\n\n// Function to count the number of occurrences of target in an array\nint countFreq(int arr[], int n, int target) {\n    int low = lower_bound(arr, n, target);\n\n    // If target is not present in the array, return 0\n    if (low == n || arr[low] != target)\n        return 0;\n\n    int high = upper_bound(arr, n, target);\n\n    // Return the count of occurrences\n    return high - low;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count the number of occurrences of a given number (target) in a\n    // vector.\n    int countFreq(vector<int>& arr, int target) {\n        // Using lower_bound and upper_bound to count occurrences of target\n        auto low = lower_bound(arr.begin(), arr.end(), target);\n\n        // If element is not present, return 0\n        if (low == arr.end() || *low != target)\n            return 0;\n\n        // Get the index of the last occurrence of target\n        auto high = upper_bound(low, arr.end(), target);\n\n        // Return the count of occurrences\n        return high - low;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to count the number of occurrences of a given number in an array.\n    int countFreq(int[] arr, int target) {\n        int n = arr.length;\n        int l = 0, r = n - 1;\n        int lb = -1;\n\n        // Finding the first occurrence (lower bound) of target\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (arr[mid] < target) {\n                l = mid + 1;\n            } else {\n                lb = mid;\n                r = mid - 1;\n            }\n        }\n\n        // If the element is not present in the array\n        if (lb == -1 || arr[lb] != target) return 0;\n\n        l = 0;\n        r = n - 1;\n        int ub = -1;\n\n        // Finding the last occurrence (upper bound) of k\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (arr[mid] <= target) {\n                ub = mid;\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n\n        // Return the count of occurrences\n        return ub - lb + 1;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countFreq(self, arr, target):\n        # Get the index of the first occurrence of x\n        low = bisect.bisect_left(arr, target)\n\n        # If element is not present, return 0\n        if low == len(arr) or arr[low] != target:\n            return 0\n\n        # Get the index of the last occurrence of x\n        high = bisect.bisect_right(arr, target)\n\n        # Return the count of occurrences\n        return high - low\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countFreq(arr, target) {\n        let low = arr.indexOf(\n            target); // Find the first occurrence of the target element in the array.\n\n        if (low === -1) {\n            return 0; // If target element is not found, return 0.\n        }\n\n        let high = arr.lastIndexOf(\n            target); // Find the last occurrence of the target element in the array.\n\n        return high - low +\n               1; // Return the count of occurrences of the target element in the array.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}