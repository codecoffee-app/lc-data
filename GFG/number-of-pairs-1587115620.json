{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701242,
            "title": "Number of pairs",
            "titleSlug": "number-of-pairs-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given two positive integer arrays <strong>arr </strong>and <strong>brr</strong>, find the number of pairs such that&nbsp;<strong>x<sup>y</sup> &gt; y<sup>x</sup></strong>&nbsp;<strong>(raised to power of)</strong> where <strong>x </strong>is an element from <strong>arr</strong> and <strong>y </strong>is an element from <strong>brr</strong>.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [2, 1, 6], brr[] = [1, 5]\n<strong>Output</strong>: 3\n<strong>Explanation</strong>: The pairs which follow x<sup>y</sup> &gt; y<sup>x</sup> are: 2<sup>1</sup> &gt; 1<sup>2</sup>,&nbsp; 2<sup>5</sup> &gt; 5<sup>2</sup> and 6<sup>1</sup> &gt; 1<sup>6 .</sup></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [2 3 4 5], brr[] = [1 2 3]\n<strong>Output</strong>: 5\n<strong>Explanation</strong>: The pairs which follow x<sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">y</sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> &gt; y</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">x</sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> are:</span> 2<sup>1 </sup>&gt; 1<sup>2</sup> , 3<sup>1</sup> &gt; 1<sup>3 </sup>, 3<sup>2</sup> &gt; 2<sup>3</sup> , 4<sup>1</sup> &gt; 1<sup>4</sup> , 5<sup>1</sup> &gt; 1<sup>5&nbsp;</sup>.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O((N + M)log(N)).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span><br /><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size(), brr.size() &le; 10<sup>5</sup><br />1 &le; brr[i], arr[i] &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two positive integer arrays `arr` and `brr`, determine the number of pairs (x, y) such that x<sup>y</sup> > y<sup>x</sup>, where x is an element from `arr` and y is an element from `brr`.",
                "constraints": [
                    "1 <= arr.size(), brr.size() <= 10<sup>5</sup>",
                    "1 <= brr[i], arr[i] <= 10<sup>3</sup>"
                ],
                "testcases": [
                    {
                        "input": "arr = [2, 1, 6], brr = [1, 5]",
                        "output": "3",
                        "explanation": "The pairs satisfying the condition x<sup>y</sup> > y<sup>x</sup> are: (2, 1), (2, 5), and (6, 1)."
                    },
                    {
                        "input": "arr = [2, 3, 4, 5], brr = [1, 2, 3]",
                        "output": "5",
                        "explanation": "The pairs satisfying the condition x<sup>y</sup> > y<sup>x</sup> are: (2, 1), (3, 1), (3, 2), (4, 1), and (5, 1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>To determine the number of pairs <span class=\"katex\"><span class=\"katex-mathml\">(x,y)(x, y)</span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathnormal\">y</span><span class=\"mclose\">)</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\">xy&gt;yxx^y &gt; y^x</span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">y</span></span></span></span></span></span></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathnormal\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\"><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span>, use the fact that <span class=\"katex\"><span class=\"katex-mathml\">log?(x)x&gt;log?(y)y\\frac{\\log(x)}{x} &gt; \\frac{\\log(y)}{y}</span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord\"><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\">g</span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mclose mtight\">)</span></span></span></span><span class=\"vlist-s\">?</span></span></span></span></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"mord\"><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">y</span></span></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\"><span class=\"mtight\">l</span><span class=\"mtight\">o</span><span class=\"mtight\">g</span></span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">y</span><span class=\"mclose mtight\">)</span></span></span></span><span class=\"vlist-s\">?</span></span></span></span></span></span></span></span> and leverage <strong>binary search</strong> to find how many elements in the sorted <code>brr</code> array satisfy this condition for each element in <code>arr</code></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    int count(int x, vector<int> &y, int N, vector<int> &NoOfY) {\n\n        // If x is 0, then there can't be any value in Y[]\n        // such that x^Y[val]>Y[val]^x.\n        if (x == 0)\n            return 0;\n\n        // If x is 1, then number of pair is equal to number of zeroes in Y[].\n        if (x == 1)\n            return NoOfY[0];\n\n        // We work with logic that if x<y then x^y is greater than y^x.\n        // Finding number of elements in Y[] with value greater than x.\n        // upper_bound() gets address of first element greater than x in Y[].\n        int idx = upper_bound(y.begin(), y.end(), x) - y.begin();\n\n        // Updating number of pairs.\n        int ans = N - idx;\n\n        // If we have reached here, then x must be greater than 1.\n        // Increasing number of pairs for y=0 and y=1.\n        ans += (NoOfY[0] + NoOfY[1]);\n\n        // Decreasing number of pairs for exception where x=2 and (y=4 or y=3).\n        if (x == 2)\n            ans -= (NoOfY[3] + NoOfY[4]);\n\n        // Increasing number of pairs for exception where x=3 and y=2.\n        if (x == 3)\n            ans += NoOfY[2];\n\n        // returning number of pairs.\n        return ans;\n    }\n\n    // Function to count number of pairs such that x^y is greater than y^x.\n    long long countPairs(vector<int> &arr, vector<int> &brr) {\n        int M = arr.size(), N = brr.size();\n        // Array to store counts of 0, 1, 2, 3 and 4 present in array Y.\n        vector<int> NoOfY(5, 0);\n        // Storing the count in array if Y[i]<5.\n        for (int i = 0; i < N; i++)\n            if (brr[i] < 5)\n                NoOfY[brr[i]]++;\n\n        // Sorting brr[] so that we can do binary search on it later on.\n        sort(brr.begin(), brr.end());\n\n        long long total_pairs = 0;\n\n        // Taking every element of arr[] and counting pairs with it.\n        for (int i = 0; i < M; i++)\n            total_pairs += count(arr[i], brr, N, NoOfY);\n\n        // returning number of pairs.\n        return total_pairs;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to count number of pairs such that x^y is greater than y^x.\n    long countPairs(int x[], int y[], int M, int N) {\n        // Array to store counts of 0, 1, 2, 3 and 4 present in array y.\n        int[] freq = new int[5];\n        // Storing the count in array if y[i]<5.\n        for (int i = 0; i < N; i++) {\n            if (y[i] < 5) freq[y[i]]++;\n        }\n        // Sorting y[] so that we can do binary search on it later on.\n        Arrays.sort(y);\n        long ans = 0;\n        // Taking every element of x[] and counting pairs with it.\n        for (int i = 0; i < M; i++) {\n            // If x[i] is 0, then there can't be any value in y[]\n            // such that x[i]^y[val]>y[val]^x[i].\n            if (x[i] == 0) continue;\n            // If x[i] is 1, then the number of pair is equal to\n            // number of zeroes in y[].\n            if (x[i] == 1) {\n                ans = ans + (long)freq[0];\n                continue;\n            }\n            // We work with logic that if x<y then x^y is greater than y^x.\n            // Finding number of elements in y[] with value greater than x.\n            // binary() gets address of first element greater than x[i] in y[].\n            int ind = binary(M, N, x[i], y);\n            // Updating number of pairs.\n            // If we have reached here, then x must be greater than 1.\n            // Increasing number of pairs for y=0 and y=1 .\n            ans = ans + (long)(N - ind) + (long)freq[0] + (long)freq[1];\n            // Decreasing number of pairs for exception where x=2\n            // and (y=4 or y=3).\n            if (x[i] == 2) ans = ans - (long)freq[3] - (long)freq[4];\n            // Increasing number of pairs for exception where x=3 and y=2.\n            if (x[i] == 3) ans = ans + (long)freq[2];\n        }\n        // returning number of pairs.\n        return ans;\n    }\n\n    // Function to find upper bound using binary search.\n    public int binary(int M, int N, int x, int[] y) {\n        int high = N - 1, low = 0;\n        int ans = high + 1;\n        while (high >= low) {\n            int mid = (high + low) / 2;\n            if (y[mid] > x) {\n                ans = mid;\n                high = mid - 1;\n            } else\n                low = mid + 1;\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def count(self, x, b, N, NoOfb):\n\n        #If x is 0, then there can't be any value in b[]\n        #such that x^b[val]>b[val]^x.\n        if (not x):\n            return x\n\n        #If x is 1, then the number of pair is equal to number of zeroes in b[].\n        if (x == 1):\n            return NoOfb[0]\n\n        #We work with logic that if x<y then x^y is greater than y^x.\n        #Finding number of elements in b[] with value greater than x.\n\n        #bisect.bisect_right() gets address of first\n        #element greater than x in b[].\n        index = bisect.bisect_right(b, x)\n        ans = 0\n        if (index < N and b[index] > x):\n            #Updating number of pairs.\n            ans += N - index\n\n        #If we have reached here, then x must be greater than 1.\n        #Increasing number of pairs for b=0 and b=1 .\n        ans += (NoOfb[0] + NoOfb[1])\n\n        #Decreasing number of pairs for exception where x=2 and (b=4 or b=3).\n        if (x == 2):\n            ans -= NoOfb[3] + NoOfb[4]\n\n        #Increasing number of pairs for exception where x=3 and b=2.\n        if (x == 3):\n            ans += NoOfb[2]\n\n        #returning number of pairs.\n        return ans\n\n    #Function to count number of pairs such that x^y is greater than y^x.\n    def countPairs(self, arr, brr):\n        M = len(arr)\n        N = len(brr)\n        #Array to store counts of 0, 1, 2, 3 and 4 present in array b.\n        NoOfb = [0, 0, 0, 0, 0]\n        #Storing the count in array if b[i]<5.\n        for i in range(N):\n            if (brr[i] < 5):\n                NoOfb[brr[i]] += 1\n\n        #Sorting b[] so that we can do binary search on it later on.\n        brr.sort()\n\n        total_pairs = 0\n\n        #Taking every element of a[] and counting pairs with it.\n        for i in range(M):\n            total_pairs += self.count(arr[i], brr, N, NoOfb)\n\n        #returning number of pairs.\n        return total_pairs\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\n//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} X\n * @param {number[]} Y\n * @param {number} M\n * @param {number} N\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find upper bound using binary search.\n    binary(M, N, x, y) {\n        let high = N - 1, low = 0;\n        let ans = high + 1;\n        while (high >= low) {\n            let mid = Math.floor((high + low) / 2);\n            if (y[mid] > x) {\n                ans = mid;\n                high = mid - 1;\n            } else\n                low = mid + 1;\n        }\n        return ans;\n    }\n\n    // Function to count number of pairs such that x^y is greater than y^x.\n    countPairs(arr, brr) {\n        let M = arr.length;\n        let N = brr.length;\n        // Array to store counts of 0, 1, 2, 3 and 4 present in array Y.\n        let freq = new Array(5);\n        for (let i = 0; i < 5; i++) {\n            freq[i] = 0;\n        }\n\n        // Storing the count in array if Y[i]<5.\n        for (let i = 0; i < N; i++) {\n            if (brr[i] < 5) freq[brr[i]]++;\n        }\n\n        // Sorting Y[] so that we can do binary search on it later on.\n        brr.sort(function(a, b) { return a - b; });\n        let ans = 0;\n\n        // Taking every element of X[] and counting pairs with it.\n        for (let i = 0; i < M; i++) {\n            // If X[i] is 0, then there can't be any value in Y[]\n            // such that X[i]^Y[val]>Y[val]^X[i].\n            if (arr[i] == 0) continue;\n\n            // If X[i] is 1, then the number of pair is equal\n            // to number of zeroes in Y[].\n            if (arr[i] == 1) {\n                ans = ans + freq[0];\n                continue;\n            }\n\n            // We work with logic that if x<y then x^y is greater than y^x.\n            // Finding number of elements in Y[] with value greater than X[i].\n            // binary() gets address of first element greater than X[i] in Y[].\n            let ind = this.binary(M, N, arr[i], brr);\n\n            // Updating number of pairs.\n            // If we have reached here, then X[i] must be greater than 1.\n            // Increasing number of pairs for y=0 and y=1.\n            ans = ans + (N - ind) + freq[0] + freq[1];\n\n            // Decreasing number of pairs for exception\n            // where x=2 and (y=4 or y=3).\n            if (arr[i] == 2) ans = ans - freq[3] - freq[4];\n\n            // Increasing number of pairs for exception where x=3 and y=2.\n            if (arr[i] == 3) ans = ans + freq[2];\n        }\n        // returning number of pairs.\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}