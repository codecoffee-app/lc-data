{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709926,
            "title": "Number of pairs",
            "titleSlug": "number-of-pairs-1645358985",
            "content": "<p><span style=\"font-size: 18px;\">The director of your college&nbsp;is&nbsp;planning to send 2 people to the ICPC&nbsp;regionals. He&nbsp;wants them to be from different branches. You will be given a list of pairs of student ids. Each pair is made of students from the same branch. Determine how many pairs of students from different branches they can choose from.</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Example 1:\nInput:</strong>\nN=5\nP=3\npairs[]={{0,1},\n\\t   {2,3},\n\\t   {0,4}}\n<strong>Output:</strong>\n6\n<strong>Explanation:</strong>\nTheir are total five studets 0,1,2,3,4.\nStudents [0,1,4] are from same bracnh while \n[2,3] are from a different one.So we can choose\ndifferent pairs like: [0,2],[0,3],[1,2],[1,3],\n[4,2],[4,3]</span></pre>\n<p>&nbsp;</p>\n<pre><span style=\"font-size: 18px;\"><strong>Example 2:\nInput:</strong>\nN=4 \nP=1\npairs[]={{0,2}}\n<strong>Output:</strong>\n5\n<strong>Explanation:</strong>\n[0,1],[0,3],[2,1],[2,3] and [1,3] are all possible \npairs because [0,2],[1] and [3] all belongs to \ndifferent branches.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>numberOfPairs()</strong>&nbsp;which takes the 2d array pairs[], its size P<strong>&nbsp;</strong>and an integer N representing total number of students<strong>&nbsp;</strong>as input parameters&nbsp;and returns the total number of pairs(as explianed in the question).</span>.</p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraint:</strong><br />1&lt;=N&lt;=10<sup>5</sup><br />1&lt;=P&lt;=10<sup>4</sup><br />0&lt;=P[i][0],P[i][1]</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "The director of your college is planning to send 2 people to the ICPC regionals. He wants them to be from different branches. You are given a list of pairs of student IDs where each pair represents students from the same branch. Determine the number of possible pairs of students that can be chosen such that the students are from different branches.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= P <= 10^4",
                    "0 <= pairs[i][0], pairs[i][1] < N"
                ],
                "testcases": [
                    {
                        "input": "N = 5\nP = 3\npairs = {{0, 1}, {2, 3}, {0, 4}}",
                        "output": "6",
                        "explanation": "There are five students in total: 0, 1, 2, 3, and 4. Students 0, 1, and 4 belong to the same branch, while students 2 and 3 belong to a different branch.  The possible pairs of students from different branches are: [0, 2], [0, 3], [1, 2], [1, 3], [4, 2], and [4, 3].  Therefore, the answer is 6."
                    },
                    {
                        "input": "N = 4\nP = 1\npairs = {{0, 2}}",
                        "output": "5",
                        "explanation": "There are four students: 0, 1, 2, and 3. Students 0 and 2 are from the same branch. The possible pairs of students from different branches are: [0, 1], [0, 3], [2, 1], [2, 3], and [1, 3]. Thus the total number of possible pairs are 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">DSU</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Disjoint Set",
                "slug": "disjoint-set"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nint find(int s[],int u)\r\n{\r\n    int x=u;\r\n    while(s[u]!=u)\r\n        u=s[u];\r\n    s[x]=u;\r\n    return u;\r\n}\r\nvoid functUnion(int s[],int r[],int u,int v)\r\n{\r\n    int x=find(s,u);\r\n    int y=find(s,v);\r\n    if(x==y)\r\n        return;\r\n    r[y]+=r[x];\r\n    s[x]=y;\r\n}\r\nclass Solution {\r\n    public:\r\n        long long int numberOfPairs(vector<vector<int>> &pairs,int p,int n)\r\n        {\r\n            int s[n];\r\n            int r[n];\r\n            for(auto &j:r)\r\n                j=1;\r\n            for(int i=0;i<n;i++)\r\n                s[i]=i;\r\n            for(int i=0;i<p;i++)\r\n            {\r\n                functUnion(s,r,pairs[i][0],pairs[i][1]);\r\n            }\r\n            vector <long long int> ans;\r\n            for(int i=0;i<n;i++)\r\n            {\r\n                if(s[i]==i)\r\n                    ans.push_back(r[i]);\r\n            }\r\n            long long int n1=n;\r\n            // cout<<(n1*n1-n1)/2<<endl;\r\n            long long int fans=(n1*n1-n1)/2;\r\n            // cout<<fans<<\" \";\r\n            // cout<<endl;\r\n            long long int tans=0;\r\n            for(auto j:ans)\r\n                tans+=(j*j-j)/2;\r\n            // cout<<tans<<endl;\r\n            return fans-tans;\r\n        }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}