{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702714,
            "title": "Number of pairs with maximum sum",
            "titleSlug": "number-of-pairs-with-maximum-sum2924",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>, return the number of pairs (arr[i], arr[j]) such that arr[i] + arr[j] is maximum and i &lt; j.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 1, 1, 2, 2, 2]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>We have an array [1, 1, 1, 2, 2, 2].The maximum possible pair sum where i is less than j is&nbsp; 4, which  is given by 3 pairs, so the answer is 3 .The pairs are (2, 2), (2, 2) and (2, 2).</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [1, 4, 3, 3, 5, 1]\n<strong>Output:</strong> 1\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)<br /><br /><strong>Constraints:</strong><br />1 &le; arr.size()&le; 10<sup>6<br /></sup></span><span style=\"font-size: 18px;\">1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, determine the number of pairs `(arr[i], arr[j])` such that `arr[i] + arr[j]` yields the maximum possible sum, and `i < j`.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 1, 1, 2, 2, 2]",
                        "output": "3",
                        "explanation": "The maximum sum attainable from pairs (arr[i], arr[j]) where i < j is 4. This sum is achieved by pairing two 2's. There are three possible pairs of 2's in the array, therefore the answer is 3."
                    },
                    {
                        "input": "[1, 4, 3, 3, 5, 1]",
                        "output": "1",
                        "explanation": "The maximum sum attainable from pairs (arr[i], arr[j]) where i < j is 9 (4+5). There's only one such pair, so the answer is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Find the maximum and second maximum elements in the array and use their counts to calculate the maximum number of valid pairs.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int MaximumSum(vector<int>& arr) {\n        int n = arr.size();\n        // Edge case: Less than 2 elements\n        if (n < 2)\n            return 0;\n\n        // Initialize maximum and second maximum\n        int maxVal = INT_MIN, secondMax = INT_MIN;\n        int maxCount = 0, secondMaxCount = 0;\n\n        // Find maximum and second maximum elements and their counts\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > maxVal) {\n                secondMax = maxVal;\n                secondMaxCount = maxCount;\n                maxVal = arr[i];\n                maxCount = 1;\n            } else if (arr[i] == maxVal) {\n                maxCount++;\n            } else if (arr[i] > secondMax) {\n                secondMax = arr[i];\n                secondMaxCount = 1;\n            } else if (arr[i] == secondMax) {\n                secondMaxCount++;\n            }\n        }\n\n        // If maximum element appears more than once\n        if (maxCount > 1) {\n            return maxCount * (maxCount - 1) / 2;\n        }\n\n        // If maximum element appears only once\n        return secondMaxCount;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    static int MaximumSum(int[] arr) {\n        int n = arr.length;\n        // Edge case: Less than 2 elements\n        if (n < 2) return 0;\n\n        // Initialize maximum and second maximum\n        int maxVal = Integer.MIN_VALUE, secondMax = Integer.MIN_VALUE;\n        int maxCount = 0, secondMaxCount = 0;\n\n        // Find maximum and second maximum elements and their counts\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > maxVal) {\n                secondMax = maxVal;\n                secondMaxCount = maxCount;\n                maxVal = arr[i];\n                maxCount = 1;\n            } else if (arr[i] == maxVal) {\n                maxCount++;\n            } else if (arr[i] > secondMax) {\n                secondMax = arr[i];\n                secondMaxCount = 1;\n            } else if (arr[i] == secondMax) {\n                secondMaxCount++;\n            }\n        }\n\n        // If maximum element appears more than once\n        if (maxCount > 1) {\n            return maxCount * (maxCount - 1) / 2;\n        }\n\n        // If maximum element appears only once\n        return secondMaxCount;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def MaximumSum(self, arr):\n        n = len(arr)\n        # Edge case: Less than 2 elements\n        if n < 2:\n            return 0\n\n        # Initialize maximum and second maximum\n        max_val = float('-inf')\n        second_max = float('-inf')\n        max_count = 0\n        second_max_count = 0\n\n        # Find maximum and second maximum elements and their counts\n        for num in arr:\n            if num > max_val:\n                second_max = max_val\n                second_max_count = max_count\n                max_val = num\n                max_count = 1\n            elif num == max_val:\n                max_count += 1\n            elif num > second_max:\n                second_max = num\n                second_max_count = 1\n            elif num == second_max:\n                second_max_count += 1\n\n        # If maximum element appears more than once\n        if max_count > 1:\n            return max_count * (max_count - 1) // 2\n\n        # If maximum element appears only once\n        return second_max_count\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the number of maximum pair sums\n    MaximumSum(arr) {\n        const n = arr.length;\n        // Edge case: Less than 2 elements\n        if (n < 2) return 0;\n\n        // Initialize maximum and second maximum\n        let maxVal = -Infinity;\n        let secondMax = -Infinity;\n        let maxCount = 0;\n        let secondMaxCount = 0;\n\n        // Find maximum and second maximum elements and their counts\n        for (const num of arr) {\n            if (num > maxVal) {\n                secondMax = maxVal;\n                secondMaxCount = maxCount;\n                maxVal = num;\n                maxCount = 1;\n            } else if (num === maxVal) {\n                maxCount++;\n            } else if (num > secondMax) {\n                secondMax = num;\n                secondMaxCount = 1;\n            } else if (num === secondMax) {\n                secondMaxCount++;\n            }\n        }\n\n        // If maximum element appears more than once\n        if (maxCount > 1) {\n            return (maxCount * (maxCount - 1)) / 2;\n        }\n\n        // If maximum element appears only once\n        return secondMaxCount;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}