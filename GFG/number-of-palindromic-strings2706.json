{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703418,
            "title": "Number of palindromic strings",
            "titleSlug": "number-of-palindromic-strings2706",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers <strong>n</strong> and <strong>k</strong>, the task is to find the count of palindromic strings of length lesser than or equal to <strong>n</strong>, with first <strong>k</strong> characters of lowercase English language, such that each character in a string doesn&rsquo;t appear more than twice.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> Anwer can be very large, so, output answer modulo 10<sup>9</sup>+7</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 3, k = 2\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> </span><span style=\"font-size: 20px;\">The possible strings are:\n\"a\", \"b\", \"aa\", \"bb\", \"aba\", \"bab\".</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> n = 4, k = 3\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> </span><span style=\"font-size: 20px;\">The possible strings are: \n\"a\", \"b\", \"c\", \"aa\", \"bb\", \"cc\", \"aba\",\n\"aca\", \"bab\", \"bcb\", \"cac\", \"cbc\", \n\"abba\", \"acca\", \"baab\", \"bccb\", \"caac\", \n\"cbbc\".&nbsp;</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your task:</strong><br />You do not need to read any input or print anything. The task is to complete the function <strong>palindromicStrings()</strong>, which takes two integers as input and returns the count. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(k<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(k<sup>2</sup>)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; k &le; 26<br />1 &le; n &le; 52<br />n &le; 2*k</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers `n` and `k`, determine the number of palindromic strings with length less than or equal to `n`. These strings can only contain the first `k` lowercase English letters and each character can appear at most twice.  Return the count modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= k <= 26",
                    "1 <= n <= 52",
                    "n <= 2 * k"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 2",
                        "output": "6",
                        "explanation": "The valid palindromic strings are: \"a\", \"b\", \"aa\", \"bb\", \"aba\", \"bab\"."
                    },
                    {
                        "input": "n = 4, k = 3",
                        "output": "18",
                        "explanation": "The valid palindromic strings are: \"a\", \"b\", \"c\", \"aa\", \"bb\", \"cc\", \"aba\", \"aca\", \"bab\", \"bcb\", \"cac\", \"cbc\", \"abba\", \"acca\", \"baab\", \"bccb\", \"caac\", \"cbbc\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the concept of nPr[i][j] which represents the number of ways to arrange j characters in i positions and store it and play dynamically.</p>\n<p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    int palindromicStrings(int n, int k) {\n        int MOD = 1e9 + 7;\n\n        long long nPr[k + 1][k + 1];\n\n        memset(nPr, 0, sizeof nPr);\n\n        for (int i = 0; i <= k; i++) {\n            for (int j = 0; j <= i; j++) {\n                // Base Cases\n                if (j == 0)\n                    nPr[i][j] = 1;\n\n                // Calculate value using previosly stored values\n                else\n                    nPr[i][j] =\n                        (nPr[i - 1][j] % MOD + (j * nPr[i - 1][j - 1]) % MOD) % MOD;\n            }\n        }\n\n        long long ans = 0;\n\n        for (int i = 1; i <= n / 2; i++)\n            ans = (ans + nPr[k][i]) % MOD;\n\n        ans = (ans * 2) % MOD;\n\n        if (n & 1)\n            ans = (ans + nPr[k][n / 2 + 1]) % MOD;\n\n        return (int)ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    palindromicStrings(n, k) {\n        const MOD = 1e9 + 7;\n\n        let nPr = Array.from({length : k + 1}, () => Array(k + 1).fill(0));\n\n        for (let i = 0; i <= k; i++) {\n            for (let j = 0; j <= i; j++) {\n                // Base Cases\n                if (j === 0) nPr[i][j] = 1;\n                // Calculate value using previously stored values\n                else\n                    nPr[i][j] =\n                        (nPr[i - 1][j] % MOD + (j * nPr[i - 1][j - 1]) % MOD) % MOD;\n            }\n        }\n\n        let ans = 0;\n\n        for (let i = 1; i <= Math.floor(n / 2); i++) ans = (ans + nPr[k][i]) % MOD;\n\n        ans = (ans * 2) % MOD;\n\n        if (n % 2 === 1) ans = (ans + nPr[k][Math.floor(n / 2) + 1]) % MOD;\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}