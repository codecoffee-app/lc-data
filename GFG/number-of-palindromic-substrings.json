{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875912,
            "title": "Number of Palindromic Substrings",
            "titleSlug": "number-of-palindromic-substrings",
            "content": "<p><span >Given a string&nbsp;<strong>s</strong>, return the total number of palindromic substrings in it.</span></p>\n<blockquote>\n<p><span >A string is considered a&nbsp;<strong>palindrome</strong>&nbsp;if it reads the same backward as forward. A&nbsp;<strong>substring</strong>&nbsp;is any&nbsp;<strong>contiguous sequence</strong>&nbsp;of characters within the string.</span></p>\n</blockquote>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:&nbsp;</strong>s = \"for\"<strong>&nbsp;<br /></strong><strong>Output:&nbsp;</strong>3</span><br /><span ><strong>Explanation:&nbsp;</strong>The palindromic substrings are&nbsp;<code>\"f\"</code>,&nbsp;<code>\"o\"</code>, and&nbsp;<code>\"r\"</code>.</span><br /><span >Hence, the total number of palindromic substrings is&nbsp;<code>3</code>.</span></pre>\n<pre><span ><strong>Input:&nbsp;</strong>\"racecar\"<strong><br />Output:&nbsp;</strong>10<strong><br /></strong><strong>Explanation:&nbsp;</strong>The palindromic substrings are:&nbsp;<code>\"r\"</code>,&nbsp;<code>\"a\"</code>,&nbsp;<code>\"c\"</code>,&nbsp;<code>\"e\"</code>,&nbsp;<code>\"cec\"</code>,&nbsp;<code>\"aceca\"</code>,&nbsp;<code>\"racecar\"</code>.</span><br /><span >Hence, the total number of palindromic substrings is&nbsp;<code>10</code></span></pre>\n<p><span ><strong>Constraints:&nbsp;</strong></span><span style=\"font-size: 18.6667px;\"> <br /></span><span style=\"font-size: 18.6667px;\">1 &le; </span><code style=\"font-size: 18.6667px;\">s.length</code><span style=\"font-size: 18.6667px;\"> &le; 1000<br /></span><code style=\"font-size: 18.6667px;\">|s</code><span style=\"font-size: 18.6667px;\"> consists of lowercase English letters only.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    int numberOfPalindromicSubstrings(string s) {\n        int count = 0;\n\n        // Initialize a lookup table of dimensions len(s) * len(s)\n        vector<vector<bool>> dp(s.length(), vector<bool>(s.length(), false));\n\n        // Base case: A string with one letter is always a palindrome\n        for (int i = 0; i < s.length(); ++i) {\n            dp[i][i] = true;\n            ++count;\n        }\n\n        // Base case: Substrings of two letters\n        for (int i = 0; i < s.length() - 1; ++i) {\n            dp[i][i + 1] = (s[i] == s[i + 1]);\n            // A boolean value is added to the count where true means 1 and\n            // false means 0\n            count += dp[i][i + 1];\n        }\n\n        // Substrings of lengths greater than 2\n        for (int length = 3; length <= s.length(); ++length) {\n            for (int i = 0, j = length - 1; j < s.length(); ++i, ++j) {\n                dp[i][j] = dp[i + 1][j - 1] && (s[i] == s[j]);\n                count += dp[i][j];\n            }\n        }\n\n        return count;\n    }\n};",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}