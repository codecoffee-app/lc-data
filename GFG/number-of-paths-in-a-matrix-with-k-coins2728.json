{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704863,
            "title": "Number of paths in a matrix with k coins",
            "titleSlug": "number-of-paths-in-a-matrix-with-k-coins2728",
            "content": "<p><span >Given a <strong>n x n</strong>&nbsp;matrix such that&nbsp;each of its&nbsp;cells contains some&nbsp;coins. Count the number of ways to collect <strong>exactly k coins</strong> while moving from&nbsp;top left corner of the matrix&nbsp;to the&nbsp;bottom right. From a cell (<strong>i</strong>, <strong>j</strong>), you can only move to (<strong>i+1</strong>, <strong>j</strong>) or (<strong>i</strong>, <strong>j+1</strong>).</span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>Input</strong>:\nk = 12, n = 3\narr[] = [[1, 2, 3], \n&nbsp;\\t[4, 6, 5], \n&nbsp;\\t[3, 2, 1]]\n<strong>Output:</strong>&nbsp;<br />2\n<strong>Explanation</strong>: \nThere are 2 possible paths with exactly 12 coins, (1 + 2 + 6 + 2 + 1) and (1 + 2 + 3 + 5 + 1).\n</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input:</strong>\nk = 16, n = 3\narr[] = [[1, 2, 3],&nbsp;\n&nbsp;\\t[4, 6, 5],&nbsp;\n&nbsp;\\t[9, 8, 7]]\n<strong>Output: <br /></strong>0 \n<strong>Explanation: </strong>\nThere are no possible paths that lead to sum=16\n</span></pre>\n<p><span ><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>numberOfPath()</strong> which takes integers <strong>n</strong>, <strong>k</strong> and a 2D matrix <strong>arr</strong>[][] as input parameters and returns an integer denoting the number of possible paths.</span><br /><br /><span ><strong>Expected Time Complexity:</strong> O(n*n*k)<br /><strong>Expected Auxiliary Space:</strong> O(n*n*k)</span></p>\n<p><span ><strong>Constraints:<br /></strong></span><span >1 &lt;= k &lt; 100<br />1 &lt;= n &lt; 100<br />0 &lt;= arr<sub>ij</sub> &lt;= 200</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Can we think to can solve this problem in <a href=\"https://en.wikipedia.org/wiki/Pseudo-polynomial_time\">Pseudo Polynomial Time</a> (time complexity is dependent on the numeric value of input) using Dynamic Programming?&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\npublic:\r\n    // Dynamic programming array to store results\r\n    long long dp[101][101][101];\r\n    // Array to store the values of the grid\r\n    int a[101][101];\r\n    \r\n    // Recursive function to find the number of paths\r\n    long long go(int n,int m,int k)\r\n    {\r\n        // Base cases\r\n        if(k<0)\r\n            return 0;\r\n        if(m<0||n<0)\r\n            return 0;\r\n        if(n==0&&m==0)\r\n            return dp[n][m][k]=(k==a[n][m]);\r\n            \r\n        // If result already calculated, return it\r\n        if(dp[n][m][k]!=-1)\r\n            return dp[n][m][k];\r\n            \r\n        // Calculate number of paths by moving left and up\r\n        long long left = go(n,m-1,k-a[n][m]);\r\n        long long up = go(n-1,m,k-a[n][m]);\r\n        \r\n        // Store the result in dp array\r\n        return dp[n][m][k] = left + up;\r\n    }\r\n    \r\n    // Function to find the number of paths\r\n    long long numberOfPath(int n, int k, vector<vector<int>> &arr){\r\n        // Copy the grid values into array a\r\n        for(int i=0;i<n;i++){\r\n            for(int j=0;j<n;j++){\r\n                a[i][j] = arr[i][j];\r\n            }\r\n        }\r\n        \r\n        // Initialize dp array with -1\r\n        for(int i=0;i<n;i++)\r\n            for(int j=0;j<n;j++)\r\n                for(int l=0;l<=k;l++)\r\n                    dp[i][j][l]=-1;\r\n        \r\n        // Call the recursive function to find the number of paths\r\n        go(n-1,n-1,k);\r\n        \r\n        // Return the result\r\n        return dp[n-1][n-1][k];\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Recursive function to calculate the number of paths from (i,j) to (n-1,n-1) with a given sum \"k\"\n// Returns 1 if the current element equals \"k\" and we have reached the end of the grid\n// Returns 0 if we have gone out of bounds or the sum \"k\" is negative\n// Stores the calculated result in dp[i][j][k] to avoid recomputation\n\nclass Solution{\n\n    public long f(int i, int j, int n, int k, int a[][], long dp[][][]) {\n        \n        if (i == n - 1 && j == n - 1 && k == a[i][j]) {\n            return 1;\n        }\n        \n        if (i >= n || j >= n || k < 0) {\n            return 0;\n        }\n        \n        if (dp[i][j][k] != -1) {\n            return dp[i][j][k];\n        }\n        \n        // Recursively calculate the number of paths by moving down and right\n        long d = f(i + 1, j, n, k - a[i][j], a, dp);\n        long r = f(i, j + 1, n, k - a[i][j], a, dp);\n        \n        // Store the calculated result in dp[i][j][k]\n        return dp[i][j][k] = d + r;\n    }\n    \n    // Function to calculate the total number of paths with a given sum \"K\"\n    // Initializes the dp array with -1 and calls the recursive function f\n    \n    public long numberOfPath(int N, int K, int[][] arr) {\n        long dp[][][] = new long[N][N][K + 1];\n        \n        // Initialize dp array with -1\n        for (long row[][] : dp) {\n            for (long row2[] : row) {\n                Arrays.fill(row2, -1);\n            }\n        }\n        \n        return f(0, 0, N, K, arr, dp);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import sys\nsys.setrecursionlimit(10**6)\nclass Solution:\n    # Initializing DP array and 2D array 'a'\n    dp=[[[-1]*(101) for i in range(101)] for i in range(101)]\n    a=[[0]*(101) for i in range(101)]\n    \n    # Function to find number of paths\n    def go(self,n,m,k):\n        # Base Cases\n        if(k<0):\n            return 0;\n        if(m<0 or n<0):\n            return 0;\n        if(n==0 and m==0):\n            # Return 1 if k matches with last element of 'a'\n            self.dp[n][m][k]=(1 if k==self.a[n][m] else 0);\n            return self.dp[n][m][k]\n        \n        # If already calculated, return the value\n        if(self.dp[n][m][k]!=-1):\n            return self.dp[n][m][k];\n            \n        # Recursively find the number of paths from left and up direction\n        left = self.go(n,m-1,k-self.a[n][m]);\n        up = self.go(n-1,m,k-self.a[n][m]);\n        \n        # Store the result in DP array\n        self.dp[n][m][k] = left + up;\n        return self.dp[n][m][k]\n\n    def numberOfPath(self,n,k,arr):\n        # Copying elements from input array to 'a'\n        for i in range(n):\n            for j in range(n):\n                self.a[i][j] = arr[i][j];\n        \n        # Initializing DP array with -1\n        for i in range(n):\n            for j in range(n):\n                for l in range(k+1):\n                    self.dp[i][j][l]=-1;\n        \n        # Call the recursive function\n        self.go(n-1,n-1,k);\n        \n        # Return the result\n        return self.dp[n-1][n-1][k];",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}