{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704789,
            "title": "Number of paths",
            "titleSlug": "number-of-paths0926",
            "content": "<p><span style=\"font-size: 18px;\">Given a grid of size&nbsp;<strong>m x n</strong>, the task is to determine the number of distinct paths from the&nbsp;<strong>top-left corner</strong>&nbsp;to the&nbsp;<strong>bottom-right corner</strong>. At each step, one can either move down or right.&nbsp;</span><span style=\"font-size: 18px;\">Given the integers m and n, return the number of unique paths from the top-left corner to the bottom-right corner.</span></p>\n<p><span style=\"font-size: 18px;\">Note: The test cases are designed such that the answer will always fit within a 32-bit integer.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: m = 3, n = 3\n<strong>Output:</strong>&nbsp;6\n<strong>Explanation</strong>: Let the given input 3*3 grid is filled as such:\nA B C\nD E F\nG H I\nThe possible unique paths which exists to reach 'I' from 'A' following above conditions are as follows: ABCFI, ABEHI, ADGHI, ADEFI, ADEHI, ABEFI.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: m = 2, n = 3\n<strong>Output</strong>: 3\n<strong>Explanation</strong>: Let the given input 2*3 grid is filled as such:\nA B C\nD E F\nThe possible unique paths which exists to reach 'F' from 'A' following above conditions are as follows: ABCF, ADEF and ABEF.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: m = 1, n = 4\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: Let the given input 1*4 grid is filled as such:<br />A B C D <br />The only possible unique path is ABCD.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &le; m &le; 100<br />1 &le; n &le;&nbsp;100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a grid of dimensions m x n. Your task is to find the number of distinct paths from the top-left corner to the bottom-right corner of the grid. You are only allowed to move either down or right at each step. Return the number of unique paths.",
                "constraints": [
                    "1 <= m <= 100",
                    "1 <= n <= 100"
                ],
                "testcases": [
                    {
                        "input": "m = 3, n = 3",
                        "output": "6",
                        "explanation": "Consider a 3x3 grid.  Possible paths from the top-left to the bottom-right are: Right-Right-Down-Down, Right-Down-Right-Down, Right-Down-Down-Right, Down-Right-Right-Down, Down-Right-Down-Right, Down-Down-Right-Right. This gives a total of 6 unique paths."
                    },
                    {
                        "input": "m = 2, n = 3",
                        "output": "3",
                        "explanation": "Consider a 2x3 grid. The possible paths from the top-left to the bottom-right are: Right-Right-Down, Right-Down-Right, Down-Right-Right.  This gives a total of 3 unique paths."
                    },
                    {
                        "input": "m = 1, n = 4",
                        "output": "1",
                        "explanation": "Consider a 1x4 grid. Since there is only one row, there is only one possible path: Right-Right-Right. Thus, only 1 unique path exists."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use concept of recursion to solve the problem.<br />\nNo need to make a matrix and then unnecessarily decrease the efficiency.</p>\n\n<p>numberOfPaths(int m, int n) {<br />\n&nbsp;&nbsp;&nbsp; if(m == 1 || n == 1)return 1;<br />\n&nbsp;&nbsp;&nbsp; return&nbsp; numberOfPaths(m-1, n) + numberOfPaths(m, n-1);<br />\n}</p>",
            "<p>Use the concept of&nbsp;combinatorics and think.</p>\n\n<p>Lets Suppose&nbsp;<strong>m = 5</strong>&nbsp;and&nbsp;<strong>n = 3</strong>, we start from&nbsp;<strong>(0, 0)</strong>&nbsp;(i.e. start) and go to the end i.e.&nbsp;<strong>(4, 2)</strong>&nbsp;we can consider any one path lets say we choose<br />\n<strong>(0, 0) -&gt; (0, 1) -&gt; (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2)</strong><br />\nTherefore, we moved&nbsp;<strong>2 steps to the right</strong>&nbsp;and&nbsp;<strong>4 steps downwards</strong>. Even if we take any other path same number of right and down steps will be required.</p>\n\n<p>Now recall the combination in maths. It is just that where instead of letters we have paths. Here we have to cover n-1 + m-1 cellular length to destination.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "companies": [
            "zoho",
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    int numberOfPaths(int m, int n) {\n\n        int dp[m][n];\n\n        // Count of paths to reach any cell in first column is 1\n        for (int i = 0; i < m; i++)\n            dp[i][0] = 1;\n\n        // Count of paths to reach any cell in first row is 1\n        for (int j = 0; j < n; j++)\n            dp[0][j] = 1;\n\n        // Calculate count of paths for other cells in\n        // bottom-up manner using the recursive solution\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++)\n\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n        }\n        return dp[m - 1][n - 1];\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int numberOfPaths(int m, int n) {\n\n        int dp[][] = new int[m][n];\n\n        // Count of paths to reach any cell in\n        // first column is 1\n        for (int i = 0; i < m; i++) dp[i][0] = 1;\n\n        // Count of paths to reach any cell in\n        // first row is 1\n        for (int j = 0; j < n; j++) dp[0][j] = 1;\n\n        // Calculate count of paths for other\n        // cells in bottom-up manner using\n        // the recursive solution\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n        }\n        return dp[m - 1][n - 1];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def numberOfPaths(self, m, n):\n\n        dp = [[0 for x in range(n)] for y in range(m)]\n\n        # Count of paths to reach any\n        # cell in first column is 1\n        for i in range(m):\n            dp[i][0] = 1\n\n        # Count of paths to reach any\n        # cell in first row is 1\n        for j in range(n):\n            dp[0][j] = 1\n\n        # Calculate count of paths for other\n        # cells in bottom-up\n        # manner using the recursive solution\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int NumberOfPaths(int m, int n) {\n\n        int[,] dp = new int[m, n];\n\n        // Count of paths to reach any cell in first column is 1\n        for (int i = 0; i < m; i++) dp[i, 0] = 1;\n\n        // Count of paths to reach any cell in first row is 1\n        for (int j = 0; j < n; j++) dp[0, j] = 1;\n\n        // Calculate count of paths for other cells in\n        // bottom-up manner using the recursive solution\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) dp[i, j] = dp[i - 1, j] + dp[i, j - 1];\n        }\n        return dp[m - 1, n - 1];\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    numberOfPaths(m, n) {\n\n        var dp = Array(m).fill(0).map(x => Array(n).fill(0));\n\n        // Count of paths to reach any cell in\n        // first column is 1\n        for (let i = 0; i < m; i++) dp[i][0] = 1;\n\n        // Count of paths to reach any cell in\n        // first row is 1\n        for (let j = 0; j < n; j++) dp[0][j] = 1;\n\n        // Calculate count of paths for other\n        // cells in bottom-up manner using\n        // the recursive solution\n        for (let i = 1; i < m; i++) {\n            for (let j = 1; j < n; j++) dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n        }\n        return dp[m - 1][n - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}