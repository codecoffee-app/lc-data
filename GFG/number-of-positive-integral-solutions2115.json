{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703069,
            "title": "Number of positive integral solutions",
            "titleSlug": "number-of-positive-integral-solutions2115",
            "content": "<p><span style=\"font-size:20px\">You are given an equation of the form x<sub>1</sub>+x<sub>2</sub>+...+x<sub>N</sub>=K. You need to find the total number of positive integral solutions of this equation.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> s = a+b=5\r\n<strong>Output:</strong> 4\r\n<strong>Explanation</strong>: (4,1) , (1,4) , (2,3) , (3,2)\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: s = a+b=1\r\n<strong>Output:</strong> 0\r\n<strong>Explanation</strong>: No solution exist.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>posIntSol()&nbsp;</strong>which takes a string&nbsp;as input and returns number of solutions.</span><br />\r\n<span style=\"font-size:20px\">Note: Distance has to be calculated with a precision of 0.0000000000001</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>&nbsp;: O(Length of given string)<br />\r\n<strong>Expected Auxiliary Space</strong>&nbsp;:&nbsp;O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= K &lt;= 25<br />\r\n2 &lt;= N &lt;= 10</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an equation of the form x<sub>1</sub> + x<sub>2</sub> + ... + x<sub>N</sub> = K, determine the total number of positive integer solutions for this equation.  Each x<sub>i</sub> must be a positive integer.",
                "constraints": [
                    "1 <= K <= 25",
                    "2 <= N <= 10"
                ],
                "testcases": [
                    {
                        "input": "a+b=5",
                        "output": "4",
                        "explanation": "The solutions are (4,1), (1,4), (2,3), and (3,2)."
                    },
                    {
                        "input": "a+b=1",
                        "output": "0",
                        "explanation": "There are no positive integer solutions because the sum of two positive integers must be at least 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use your PnC knowledge.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to calculate factorial of a number using iterative approach\nlong factorial(int n)\n{\n    long f=1;\n    for(int i=1;i<=n;i++)\n    {\n        f=f*i;\n    }\n    return f;\n}\n\nclass Solution{\npublic:\n    // Function to calculate the number of possible positive integer solutions\n    long posIntSol(string s)\n    {\n        int n=0;\n        int equal_index=0;\n        for(int j=0;j<s.length();j++)\n        {\n            if(s[j]=='+')\n                n++;\n            if(s[j]=='=')\n                equal_index=j;\n        }\n    \n        string number=s.substr(equal_index+1);\n        int k=stoi(number);\n        k--;\n        long long numberator=1;\n    \n        // Calculate the numerator of the equation\n        for(int j=0;j<n;j++)\n        {\n            numberator=numberator*(k);\n            k--;\n    \n        }\n        \n        // Calculate the denominator of the equation\n        long denominator=factorial(n);\n        \n        // Calculate the final answer\n        long ans = numberator/denominator;\n        \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    // method to calculate factorial of a number\n    long factorial(int n){\n        long f=1;\n        for(int i=1;i<=n;i++) {\n            f=f*i;\n        }\n        return f;\n    }\n    \n    // method to calculate the number of possible positive integer solutions\n    long posIntSol(String s) {\n        int n=0; // variable to store the number of '+' signs\n        int equal_index=0; // variable to store the index of '=' sign\n        \n        // loop to count the number of '+' signs and find the index of '=' sign\n        for(int j=0;j<s.length();j++) {\n            if(s.charAt(j)=='+')\n                n++;\n            if(s.charAt(j)=='=')\n                equal_index=j;\n        }\n    \n        String number = s.substring(equal_index+1);  // extracting the number from the string after '=' sign\n        int k = Integer.parseInt(number);  // converting the extracted number to integer\n        k--;\n        long numberator=1;\n    \n        // loop to calculate the numerator\n        for(int j=0; j < n; j++) {\n            numberator = numberator*(k);\n            k--;\n        }\n        long denominator=factorial(n);  // calculating the factorial of n to get the denominator\n        long ans = numberator/denominator;  // calculating the final answer\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import math\nclass Solution:\n    def posIntSol(self,s):\n        p=s.split(\"=\")\n        # Splitting the input string at the \"=\" sign to get the equation components\n        x=len(p[0])-(p[0].count('+'))\n        # Calculating the number of variables in the equation\n        if x>int(p[1]):\n            return 0\n        # If the number of variables exceeds the target value, return 0\n        else:\n            v=math.factorial(int(p[1])-1)\n            # Calculating the factorial of the target value - 1\n            n=math.factorial(x-1)*math.factorial(int(p[1])-x)\n            # Calculating the factorial of the number of variables minus 1 multiplied by the factorial of the difference between the target value and the number of variables\n            return int(v/n)\n            # Returning the result of dividing the two factorials to get the number of possible solutions",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the position of a value in a given list.\n    posIntSol(s)\n    {\n        // Splitting the input string at the \"=\" sign to get the equation components\n        let p = s.split(\"=\");\n        // Calculating the number of variables in the equation\n        let x = p[0].length - (p[0].split('+').length - 1);\n        // If the number of variables exceeds the target value, return 0\n        if (x > parseInt(p[1])) {\n            return 0;\n        } else {\n            // Calculating the factorial of the target value - 1\n            let v = this.factorial(parseInt(p[1]) - 1);\n            // Calculating the factorial of the number of variables minus 1 multiplied by the factorial of the difference between the target value and the number of variables\n            let n = this.factorial(x - 1) * this.factorial(parseInt(p[1]) - x);\n            // Returning the result of dividing the two factorials to get the number of possible solutions\n            return Math.floor(v / n);\n        }\n    }\n    \n    //Function to calculate the factorial of a given number.\n    factorial(num) {\n        if (num === 0 || num === 1) {\n            return 1;\n        } else {\n            return num * this.factorial(num - 1);\n        }\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    public long posIntSol(string s)\n    {\n        int n=0;\n        int equal_index=0;\n        for(int j=0;j<s.Length;j++)\n        {\n            if(s[j]=='+')\n                n++;\n            if(s[j]=='=')\n                equal_index=j;\n        }\n    \n        string number=s.Substring(equal_index+1);\n        int k=int.Parse(number);\n        k--;\n        long numberator=1;\n    \n        // Calculate the numerator of the equation\n        for(int j=0;j<n;j++)\n        {\n            numberator=numberator*(k);\n            k--;\n    \n        }\n        \n        // Calculate the denominator of the equation\n        long denominator=factorial(n);\n        \n        // Calculate the final answer\n        long ans = numberator/denominator;\n        \n        return ans;\n    }\n    \n    // Function to calculate factorial of a number using iterative approach\n    private long factorial(int n)\n    {\n        long f=1;\n        for(int i=1;i<=n;i++)\n        {\n            f=f*i;\n        }\n        return f;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}