{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706298,
            "title": "Number of Provinces",
            "titleSlug": "number-of-provinces",
            "content": "<p><span style=\"font-size: 18px;\">Given an <strong>undirected</strong></span><span style=\"font-size: 18px;\">&nbsp;graph with <strong>V</strong> vertices. We say two vertices u and v belong to a single province if there is a path from u to v or v to u. Your task is to find the number of provinces.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Note: </strong></span> <span style=\"font-size: 18px;\">A province is a group of <strong>directly </strong>or <strong>indirectly connected</strong> cities and no other cities outside of the group. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n[\n [1, 0, 1],\n [0, 1, 0],\n&nbsp;[1, 0, 1]\n]\n</strong></span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/706298/Web/Other/763b704c-74af-4d7c-8457-a1b8fe00a077_1685087210.png\" alt=\"\" /><span style=\"font-size: 18px;\">\n<strong>Output:\n</strong>2\n<strong>Explanation:</strong>\nThe graph clearly has 2 Provinces [1,3] and [2]. As city 1 and city 3 has a path between them they belong to a single province. City 2 has no path to city 1 or city 3 hence it belongs to another province.</span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n[\n&nbsp;[1, 1],\n&nbsp;[1, 1]\n]\n</strong></span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/706298/Web/Other/f1fc32d4-70bb-429d-be95-a1485e4ae057_1685087210.png\" alt=\"\" /><span style=\"font-size: 18px;\">\n<strong>Output :</strong>\n1</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>numProvinces()</strong> which takes an integer V and an adjacency matrix adj(as a 2d vector) as input and returns the number of provinces. adj[i][j] = 1, if nodes i and j are connected and adj[i][j] = 0, if not connected.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(V<sup>2</sup>)<br /><strong>Expected Auxiliary Space:</strong> O(V)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; V &le; 500</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with V vertices, where two vertices u and v belong to the same province if there is a path between them.  A province is a group of directly or indirectly connected cities with no connections to cities outside the group. Your task is to find the number of provinces in the graph.",
                "constraints": [
                    "1 <= V <= 500"
                ],
                "testcases": [
                    {
                        "input": "[\n  [1, 0, 1],\n  [0, 1, 0],\n  [1, 0, 1]\n]",
                        "output": "2",
                        "explanation": "The graph has two provinces: [1, 3] and [2].  Cities 1 and 3 are connected, forming one province. City 2 is isolated and forms its own province."
                    },
                    {
                        "input": "[\n  [1, 1],\n  [1, 1]\n]",
                        "output": "1",
                        "explanation": "The graph has only one province. Since city 1 and city 2 are connected, they form a single province."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use DFS.</span></p>",
            "<p><span style=\"font-size:18px\">You just have to find the number of connected components in the Graph.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    \n    //Depth First Search function to traverse connected provinces\n    void dfs(int i, vector<vector<int>>& M, vector<bool>& visited)\n    {\n        visited[i] = true;\n        //traverse all the neighbours of the current province\n        for (int j = 0; j < visited.size(); j++)\n            //if j is not the current province and j is connected to i and j is not visited\n            if (i != j && M[i][j] && !visited[j])\n                //recursively call dfs for the connected province\n                dfs(j, M, visited);\n    }\n    \n    //Function to count the number of provinces\n    int numProvinces(vector<vector<int>> adj, int V)\n    {\n        //if the adjacency matrix is empty, return 0\n        if (adj.empty())\n            return 0;\n        int n = adj.size();\n        vector<bool> visited(n, false);\n        int ans = 0;\n        //traverse all the provinces\n        for (int i = 0; i < visited.size(); i++) {\n            //if the current province is not visited\n            //increment the answer and perform dfs to count all the connected provinces\n            ans += !visited[i] ? dfs(i, adj, visited), 1 : 0;\n        }\n        //return the number of provinces\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    \n    //Function to perform Depth First Search (DFS) traversal on the adjacency list.\n    void dfs(ArrayList<ArrayList<Integer>> M, int[] visited, int i)\n    {\n        //Iterating through each element in the adjacency list.\n        for (int j = 0; j < M.size(); j++)\n        {\n            //Checking if the element is not the current element being visited, \n            //and if it is connected to current element and is not visited before.\n            if (i!=j && M.get(i).get(j) == 1 && visited[j] == 0)\n            {\n                //Marking the element as visited.\n                visited[j] = 1;\n                //Recursively calling DFS on the connected element.\n                dfs(M, visited, j);\n            }\n        }\n    }\n    \n    //Function to count the number of provinces using DFS.\n    int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {\n        \n        //Creating an array to keep track of visited elements.\n        int[] visited = new int[adj.size()];\n        //Initializing count of provinces to 0.\n        int count = 0;\n        \n        //Iterating through each element in the adjacency list.\n        for (int i = 0; i < adj.size(); i++)\n        {\n            //If the element is not visited, perform DFS on that element and increase count of provinces.\n            if (visited[i] == 0)\n            {\n                //Marking the element as visited.\n                dfs(adj, visited, i);\n                //Increasing count of provinces.\n                count++;\n            }\n        }\n        \n        //Returning the count of provinces.\n        return count;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def numProvinces(self, adj, n):\n        # Function to count the number of provinces\n        \n        n = len(adj) # Get the number of cities/provinces\n        visited = [0 for _ in range(n)] # Initialize visited array\n        \n        def dfs(i):\n            # Recursive function to perform depth-first search\n            \n            visited[i] = 1 # Mark the current city as visited\n            \n            for city in range(n):\n                # Iterate through all the cities adjacent to the current city\n                \n                if not visited[city] and adj[i][city]:\n                    # If the adjacent city has not been visited and there is a connection between the two cities\n                    \n                    dfs(city) # Recursively call dfs on the adjacent city\n            \n            return \n        \n        count = 0 # Initialize count of provinces\n        for i in range(0,n):\n            # Iterate through all the cities\n            \n            if not visited[i]:\n                # If the current city has not been visited\n                \n                dfs(i) # Call dfs on the current city\n                count += 1 # Increment the count of provinces\n        \n        return count # Return the count of provinces",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Depth First Search function to traverse connected provinces\n    public void dfs(int i, List<List<int>> M, List<bool> visited)\n    {\n        visited[i] = true;\n        //traverse all the neighbours of the current province\n        for (int j = 0; j < visited.Count; j++)\n        {\n            //if j is not the current province and j is connected to i and j is not visited\n            if (i != j && M[i][j] == 1 && !visited[j])\n            {\n                //recursively call dfs for the connected province\n                dfs(j, M, visited);\n            }\n        }\n    }\n    \n    //Function to count the number of provinces\n    public int numProvinces(List<List<int>> adj, int V)\n    {\n        //if the adjacency matrix is empty, return 0\n        if (adj.Count == 0 || adj[0].Count == 0)\n        {\n            return 0;\n        }\n        int n = adj.Count;\n        List<bool> visited = new List<bool>(n);\n        for (int i = 0; i < n; i++)\n        {\n            visited.Add(false);\n        }\n        int ans = 0;\n        //traverse all the provinces\n        for (int i = 0; i < visited.Count; i++)\n        {\n            //if the current province is not visited\n            //increment the answer and perform dfs to count all the connected provinces\n            if (!visited[i])\n            {\n                dfs(i, adj, visited);\n                ans++;\n            }\n        }\n        //return the number of provinces\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number} V\n * @param {number[][]} adj\n * @returns {number}\n*/\n\nclass Solution {\n  numProvinces(V, adj){\n    const dfs = (i, M, visited) => {\n      visited[i] = true;\n      for (let j = 0; j < visited.length; j++) {\n        if (i !== j && M[i][j] && !visited[j]) {\n          dfs(j, M, visited);\n        }\n      }\n    };\n\n    if (adj.length === 0) {\n      return 0;\n    }\n    const n = adj.length;\n    const visited = new Array(n).fill(false);\n    let ans = 0;\n    for (let i = 0; i < visited.length; i++) {\n      if (!visited[i]) {\n        dfs(i, adj, visited);\n        ans++;\n      }\n    }\n    return ans;\n  }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}