{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700422,
            "title": "Number of root to leaf paths",
            "titleSlug": "number-of-root-to-leaf-paths",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree, you need to find the number of all root-to-leaf paths along with their path lengths.<br /><strong>Note:&nbsp;</strong></span><span style=\"font-size: 18px;\">Every path length and number of root-to-leaf paths should be separated by&nbsp; \"$\".</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [3, 2, 4]\n\\t3\n    /   \\\n   2     4</span>\n<strong><span style=\"font-size: 18px;\">Output:</span> </strong><span style=\"font-size: 18px;\">2 2 $</span>\n<span style=\"font-size: 18px;\"><strong>Explanation : </strong>There are 2 roots to leaf paths of length 2(3 -&gt; 2 and 3 -&gt; 4)</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">root = [10, 20, 30, 40, 60]\n\\t  10\n     /   \\\n    20    30\n   / \\    \n  40  60</span>\n\n<strong><span style=\"font-size: 18px;\">Output:</span> </strong><span style=\"font-size: 18px;\">2 1 $3 2 $</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>There is 1 root leaf paths of length 2 and 2 roots to leaf paths of length 3.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [3, 2, 5]\n\\t3\n    /   \\\n   2     5</span>\n<strong><span style=\"font-size: 18px;\">Output:</span> </strong><span style=\"font-size: 18px;\">2 2 $</span>\n<span style=\"font-size: 18px;\"><strong>Explanation : </strong>There are 2 roots to leaf paths of length 2(3 -&gt; 2 and 3 -&gt; 4)</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the number of root-to-leaf paths and their corresponding lengths. The output should be formatted as follows: for each path length, list the number of root-to-leaf paths with that length, separated by a '$' symbol.  For example, '2 1 $3 2 $' means there are 2 paths of length 1 and 2 paths of length 3.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root = [3, 2, 4]",
                        "output": "2 2 $",
                        "explanation": "There are 2 root-to-leaf paths of length 2: 3 -> 2 and 3 -> 4.  Thus, the output is '2 2 $'."
                    },
                    {
                        "input": "root = [10, 20, 30, 40, 60]",
                        "output": "2 1 $3 2 $",
                        "explanation": "There are two paths of length one (not applicable to the question), and two paths of length three. So the answer is '2 1 $3 2 $'."
                    },
                    {
                        "input": "root = [3, 2, 5]",
                        "output": "2 2 $",
                        "explanation": "There are 2 root-to-leaf paths of length 2: 3 -> 2 and 3 -> 5. Thus, the output is '2 2 $'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 12pt; letter-spacing: 0.162px; background-color: #ffffff;\">The idea is to traverse the tree and keep track of path length.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    void pathCountUtil(Node *node, map<int, int> &m, int path_len) {\n        // Base condition\n        if (node == NULL)\n            return;\n\n        // If leaf node reached, increment count of path\n        // length of this root to leaf path.\n        if (node->left == NULL && node->right == NULL) {\n            m[path_len]++;\n            return;\n        }\n\n        // Recursively call for left and right subtrees with\n        // path lengths more than 1.\n        pathCountUtil(node->left, m, path_len + 1);\n        pathCountUtil(node->right, m, path_len + 1);\n    }\n\n    // A wrapper over pathCountUtil()\n    void pathCounts(Node *root) {\n        // create an empty hash table\n        map<int, int> m;\n\n        // Recursively check in left and right subtrees.\n        pathCountUtil(root, m, 1);\n\n        // Print all path lenghts and their counts.\n        for (auto itr = m.begin(); itr != m.end(); itr++)\n            cout << itr->first << \" \" << itr->second << \" $\";\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Utility function to calculate the number of paths with equal length\n    void no_Of_Paths_Having_Equal_Length_util(Node root, HashMap<Integer, Integer> hm,\n                                              int path_len) {\n        if (root == null) return;\n\n        // If leaf node is reached, increment the count of paths with equal length\n        if (root.left == null && root.right == null) {\n            if (hm.containsKey(path_len)) {\n                int value = hm.get(path_len) + 1;\n                hm.put(path_len, value);\n            } else\n                hm.put(path_len, 1);\n        }\n\n        // Recursively traverse the left and right subtrees and increment the path\n        // length\n        no_Of_Paths_Having_Equal_Length_util(root.left, hm, path_len + 1);\n        no_Of_Paths_Having_Equal_Length_util(root.right, hm, path_len + 1);\n    }\n\n    // Function to count the number of paths with equal length\n    void countPaths(Node root) {\n        // Create a HashMap to store the path lengths and their counts\n        HashMap<Integer, Integer> hm1 = new HashMap<Integer, Integer>();\n        // Call the utility function to calculate the path lengths and store them in the\n        // HashMap\n        no_Of_Paths_Having_Equal_Length_util(root, hm1, 1);\n\n        // Iterate over the HashMap and print the path lengths and their counts\n        Iterator<Integer> itr = hm1.keySet().iterator();\n        while (itr.hasNext()) {\n            Integer key = itr.next();\n            System.out.print(key + \" \" + hm1.get(key) + \" $\");\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Recursive function to count paths\nclass Solution:\n\n    def pathCountUtil(self, node, m, pl):\n        if node is None:\n            return\n\n        # If the node is a leaf, update the path length count\n        if node.left is None and node.right is None:\n            m[pl] = m.get(pl, 0) + 1\n            return\n\n        # Recursively traverse left and right nodes\n        self.pathCountUtil(node.left, m, pl + 1)\n        self.pathCountUtil(node.right, m, pl + 1)\n\n    # Function to count paths from root to all leaf nodes\n    def pathCounts(self, root):\n        if root is None:\n            return\n\n        # Create an empty dictionary to store path counts\n        m = {}\n\n        # Call the recursive function to count paths\n        self.pathCountUtil(root, m, 1)\n\n        # Display the path counts\n        for path_length, count in sorted(m.items()):\n            print(\"{} {} $\".format(path_length, count), end=\"\")\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    \n    pathCountUtil(node, m, path_len)\n    {\n        if (node == null)\n            return;\n        \n        if (node.left == null && node.right == null)\n        {\n            m[path_len] = m[path_len] ?  m[path_len] + 1 : 1;\n            return;\n        }\n\n        this.pathCountUtil(node.left, m, path_len+1);\n        this.pathCountUtil(node.right, m, path_len+1);\n    }\n     \n    pathCounts(root)\n    {\n        let m = {};\n\n        this.pathCountUtil(root, m, 1);\n\n        let result = \"\";\n        for (let key in m) {\n            result += key + \" \" + m[key] + \" $\";\n        }\n        \n        console.log(result);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}