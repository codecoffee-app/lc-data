{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702666,
            "title": "Count Subarrays with Same Min and Max",
            "titleSlug": "number-of-subarrays-whose-minimum-and-maximum-are-same5259",
            "content": "<p><span >Given an array <code>arr[]</code> of integers, your task is to determine the number of subarrays where the minimum and maximum elements are equal.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [1, 1, 3]\n<strong>Output:</strong> 4\n<strong>Explanation: <br /></strong>The subarrays where the minimum and maximum elements are the same are: (1), (1), (3) and (1, 1) \n</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [1, 2, 3, 4]\n<strong>Output:</strong> 4<br /><strong>Explanation: <br /></strong>In this case, the subarrays where the minimum and maximum elements are the same are: (1), (2), (3) and (4)<br />Each of these subarrays contains only a single element, so the minimum and maximum are equal.\n</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong>&nbsp;O(n).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the total number of subarrays where the minimum and maximum elements within each subarray are equal.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 1, 3]",
                        "output": "4",
                        "explanation": "The subarrays with equal minimum and maximum elements are: [1], [1], [3], and [1, 1]. Therefore, the count is 4."
                    },
                    {
                        "input": "[1, 2, 3, 4]",
                        "output": "4",
                        "explanation": "The subarrays with equal minimum and maximum elements are: [1], [2], [3], and [4].  Each contains only one element, thus min and max are equal, resulting in a count of 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Iterate through the array and count consecutive subarrays of identical elements. For each such element streak, calculate the number of valid subarrays using the formula n * (n + 1) / 2.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the number of ways.\n    long long numberOfways(vector<int>& arr) {\n        long long c = 1, ans = 0;\n        int n = arr.size(); // Add size check for the vector\n\n        // Iterating over the array.\n        for (int i = 1; i < n; i++) {\n            // Checking if current element is equal to previous element.\n            if (arr[i] == arr[i - 1]) {\n                // If yes, increment the count.\n                c += 1;\n            } else {\n                // If no, calculate the number of ways using the count.\n                ans = ans + (c * (c + 1)) / 2;\n                c = 1; // Reset count for the next group\n            }\n        }\n        // Calculating the number of ways for the last group.\n        ans = ans + (c * (c + 1)) / 2;\n        // Returning the total number of ways.\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to count the number of ways\n    long numberOfways(int arr[]) {\n        long c = 1, ans = 0;\n        int n = arr.length; // Add the size of the array\n\n        // Traverse the array and count the number of ways\n        for (int i = 1; i < n; i++) {\n            if (arr[i] == arr[i - 1]) {\n                // If current element is the same as the previous element, increment the\n                // count\n                c += 1;\n            } else {\n                // Calculate the number of ways using the count and add it to the total\n                // answer\n                ans += (c * (c + 1)) / 2;\n                c = 1; // Reset the count\n            }\n        }\n\n        // Calculate the number of ways for the last segment of the array\n        ans += (c * (c + 1)) / 2;\n        return ans; // Return the total number of ways\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end function Template for Python 3\nclass Solution:\n\n    def numberOfways(self, arr):\n        # Initializing variables\n        c = 1\n        ans = 0\n        n = len(arr)  # Get the length of the array\n\n        # Iterating over elements in the array\n        for i in range(1, n):\n            # If current element is equal to previous element, increment count\n            if arr[i] == arr[i - 1]:\n                c += 1\n            else:\n                # If current element is different from the previous one,\n                # calculate the number of ways using the count and add it to ans\n                ans += (c * (c + 1)) // 2\n                # Reset count\n                c = 1\n\n        # Calculate the number of ways for the last set of elements\n        ans += (c * (c + 1)) // 2\n\n        # Return the total number of ways\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end function for Solution class\nclass Solution {\n    numberOfways(arr) {\n        let c = 1;\n        let ans = 0;\n        let n = arr.length; // Get the length of the array\n\n        // Iterate through the array\n        for (let i = 1; i < n; i++) {\n            // If current element is equal to previous element, increment count\n            if (arr[i] === arr[i - 1]) {\n                c += 1;\n            } else {\n                // Calculate the number of ways using the count and add it to ans\n                ans += (c * (c + 1)) / 2;\n                c = 1; // Reset count\n            }\n        }\n\n        // Calculate the number of ways for the last set of elements\n        ans += (c * (c + 1)) / 2;\n\n        // Return the total number of ways\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}