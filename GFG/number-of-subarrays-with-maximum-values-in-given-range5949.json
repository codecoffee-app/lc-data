{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702699,
            "title": "Number of subarrays with maximum values in given range",
            "titleSlug": "number-of-subarrays-with-maximum-values-in-given-range5949",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of <strong>N</strong> elements and <strong>L</strong> and <strong>R</strong>, print the number of sub-arrays such that the value of the <strong>maximum</strong> array element in that subarray is at least L and at most R.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> <br />Arr = {2, 0, 11, 3, 0}\nL = 1 and R = 10\n<strong>Output :</strong> <br />4\n<strong>Explanation:\n</strong>The sub-arrays {2}, {2, 0}, {3} and {3, 0} have maximum in range 1-10.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> <br />Arr = {3, 4, 1}\nL = 2 and R = 4\n<strong>Output :</strong> <br />5<br /><strong>Explanation:</strong><strong style=\"font-family: sans-serif;\"><br /></strong>The sub-arrays {3}, {3, 4}, {3,4,1}, {4} and {4, 1} have maximum in range 2-4.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />This is a function problem. The input is already taken care of by the driver code. You only need to complete the function <strong>countSubarrays()</strong> that takes an array <strong>arr</strong>, sizeOfArray <strong>(n)</strong>, element <strong>L, </strong>integer <strong>R,</strong> and return the number of subarray with the maximum&nbsp;in range L-R. The driver code takes care of the printing.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br /></span><span style=\"font-size: 18px;\">0 </span><span style=\"font-size: 18px;\">&le; arr[i]&nbsp;</span><span style=\"font-size: 18px;\">&le;&nbsp;</span><span style=\"font-size: 18px;\">10</span><sup>9</sup><span style=\"font-size: 18px;\"><br /></span><span style=\"font-size: 18px;\">1 &le; L &le; R &le; 10</span><sup>9</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N elements and two integers L and R, determine the number of sub-arrays where the maximum element within that sub-array falls between L and R (inclusive).",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= arr[i] <= 10^9",
                    "1 <= L <= R <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "Arr = {2, 0, 11, 3, 0}\nL = 1\nR = 10",
                        "output": "4",
                        "explanation": "The sub-arrays {2}, {2, 0}, {3} and {3, 0} satisfy the condition because their maximum elements (2 and 3 respectively) are within the range [1, 10]."
                    },
                    {
                        "input": "Arr = {3, 4, 1}\nL = 2\nR = 4",
                        "output": "5",
                        "explanation": "The sub-arrays {3}, {3, 4}, {3,4,1}, {4} and {4, 1} satisfy the condition because their maximum elements (3 and 4 respectively) are within the range [2, 4]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<ul>\n\t<li><span style=\"font-size:18px\">Any element &gt; R is never included in any subarray.</span></li>\n\t<li><span style=\"font-size:18px\">Any number of elements smaller than L can be included in subarray as long as there is at least one single element between L and R inclusive.</span></li>\n\t<li><span style=\"font-size:18px\">The number of all possible subarrays of an array of size N is N * (N + 1)/2. Let&nbsp;<strong>countSubarrays(N) = N * (N + 1)/2</strong></span></li>\n</ul>\n\n<p><span style=\"font-size:18px\">We keep track of two counts in current subarray.<br />\n1) Count of all elements smaller than or equal to R. We call it&nbsp;<strong>inc</strong>.<br />\n2) Count of all elements smaller than L. We call it exc.</span></p>\n\n<p><span style=\"font-size:18px\">Our answer for current subarray is countSubarrays(inc) &ndash; countSubarrays(exc). We basically remove all those subarrays which are formed by only elements smaller than L.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution{\n    public:\n    // function to calculate N*(N+1)/2\n    long long countSubarrys(long long n)\n    {\n        return n * (n + 1) / 2LL;\n    }\n    \n    // function to count the number of sub-arrays with\n    // maximum greater then L and less then R.\n    long long countSubarrays(int a[], int n, int L, int R)\n    {\n        long long res = 0;\n    \n        // exc is going to store count of elements\n        // smaller than L in current valid subarray.\n        // inc is going to store count of elements\n        // smaller than or equal to R.\n        long long exc = 0, inc = 0;\n    \n        // traverse through all elements of the array\n        for (int i = 0; i < n; i++) {\n    \n            // If the element is greater than R,\n            // add current value to result and reset\n            // values of exc and inc.\n            if (a[i] > R) {\n                res += (countSubarrys(inc) - countSubarrys(exc));\n                inc = 0;\n                exc = 0;\n            }\n    \n            // if it is less than L, then it is included\n            // in the sub-arrays\n            else if (a[i] < L) {\n                exc++;\n                inc++;\n            }\n    \n            // if >= L and <= R, then count of\n            // subarrays formed by previous chunk\n            // of elements formed by only smaller\n            // elements is reduced from result.\n            else {\n                res -= countSubarrys(exc);\n                exc = 0;\n                inc++;\n            }\n        }\n    \n        // Update result.\n        res += (countSubarrys(inc) - countSubarrys(exc));\n    \n        // returns the count of sub-arrays\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution{\n    \n    static long countSubarrys(long n)  \n    { \n        return n * (n + 1) / 2; \n    } \n      \n    // function to count the number of  \n    // sub-arrays with maximum greater \n    // then L and less then R. \n    static long countSubarrays(int a[], int n, int L, int R)  \n    { \n        long res = 0; \n      \n        // exc is going to store count of elements \n        // smaller than L in current valid subarray. \n        // inc is going to store count of elements \n        // smaller than or equal to R. \n        long exc = 0, inc = 0; \n      \n        // traverse through all elements of the array \n        for (int i = 0; i < n; i++) { \n      \n            // If the element is greater than R, \n            // add current value to result and reset \n            // values of exc and inc. \n            if (a[i] > R) { \n                res += (countSubarrys(inc) - countSubarrys(exc)); \n                inc = 0; \n                exc = 0; \n            } \n          \n            // if it is less than L, then it is included \n            // in the sub-arrays \n            else if (a[i] < L) { \n                exc++; \n                inc++; \n            } \n          \n            // if >= L and <= R, then count of \n            // subarrays formed by previous chunk \n            // of elements formed by only smaller \n            // elements is reduced from result. \n            else { \n                    res -= countSubarrys(exc); \n                    exc = 0; \n                    inc++; \n            } \n        } \n      \n        // Update result. \n        res += (countSubarrys(inc) - countSubarrys(exc)); \n      \n        // returns the count of sub-arrays \n        return res; \n    }  \n}\n\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def countSubarrys(self, n): \n      \n        return n * (n + 1) // 2\n      \n       \n    # function to count the \n    # number of sub-arrays with \n    # maximum greater then \n    # L and less then R. \n    def countSubarrays(self,a,n,L,R): \n      \n        res = 0\n       \n        # exc is going to store \n        # count of elements \n        # smaller than L in  \n        # current valid subarray. \n        # inc is going to store \n        # count of elements \n        # smaller than or equal to R. \n        exc = 0\n        inc = 0\n       \n        # traverse through all \n        # elements of the array \n        for i in range(n): \n       \n            # If the element is \n            # greater than R, \n            # add current value \n            # to result and reset \n            # values of exc and inc. \n            if (a[i] > R): \n                  \n                res =res + (self.countSubarrys(inc) - self.countSubarrys(exc)) \n                inc = 0\n                exc = 0\n              \n       \n            # if it is less than L, \n            # then it is included \n            # in the sub-arrays \n            elif (a[i] < L):  \n                exc=exc + 1\n                inc=inc + 1\n              \n       \n            # if >= L and <= R, then count of \n            # subarrays formed by previous chunk \n            # of elements formed by only smaller \n            # elements is reduced from result. \n            else:  \n                  \n                res =res - self.countSubarrys(exc) \n                exc = 0\n                inc=inc + 1\n       \n        # Update result. \n        res =res + (self.countSubarrys(inc) - self.countSubarrys(exc)) \n       \n        # returns the count of sub-arrays \n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n /**\n     * @param {number[]} a\n     * @param {number} n\n     * @param {number} L\n     * @param {number} R\n     * @returns {number}\n    */\n\n    class Solution\n    {\n        //Complete this function\n        countSubarrays(a, n, L, R)\n        {\n            let res = 0;\n            let exc = 0;\n            let inc = 0;\n\n            for(let i=0; i<n; i++) {\n                if(a[i] > R) {\n                    res += (this.countSubarrys(inc) - this.countSubarrys(exc));\n                    inc = 0;\n                    exc = 0;\n                }\n                else if(a[i] < L) {\n                    exc += 1;\n                    inc += 1;\n                }\n                else {\n                    res -= this.countSubarrys(exc);\n                    exc = 0;\n                    inc += 1;\n                }\n            }\n\n            res += (this.countSubarrys(inc) - this.countSubarrys(exc));\n\n            return res;\n        }\n\n        countSubarrys(n) {\n            return (n * (n + 1)) / 2;\n        }\n    }",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}