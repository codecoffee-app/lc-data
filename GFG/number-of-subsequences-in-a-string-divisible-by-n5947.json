{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704211,
            "title": "Number of subsequences in a string divisible by n",
            "titleSlug": "number-of-subsequences-in-a-string-divisible-by-n5947",
            "content": "<p><span style=\"font-size:18px\">Given string <strong>s</strong> consisting of digits 0-9 and a number <strong>N</strong>, the task is to count the number of subsequences that are divisible by <strong>N</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note:</strong> Answer can be large, output answer modulo 10<sup>9</sup> + 7</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: s = &quot;1234&quot;, N = 4\n<strong>Output:</strong> 4</span>\n<span style=\"font-size:18px\"><strong>Explanation</strong>: The subsequences 4, 12, 24 and \n124 are divisible by 4.</span></pre>\n\n<div><span style=\"font-size:18px\"><strong>Example 2:</strong></span></div>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>: s = &quot;330&quot;, N = 6\n<strong>Output:</strong> 4</span>\n<span style=\"font-size:18px\"><strong>Explanation</strong>: The subsequences 30, 30, 330 \nand 0 are divisible by 6.</span>\n</pre>\n\n<div><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Complete the function <strong><code>countDivisibleSubseq</code>()&nbsp;</strong>which takes <strong>s</strong> and <strong>N </strong>as input parameters and returns the integer value<br />\n<br />\n<strong>Expected Time Complexity:</strong> O(<strong>|s|*N</strong>)<br />\n<strong>Expected Auxiliary Space:</strong> O(<strong>|s|*N</strong>)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &le; <strong>|s|*N</strong> &le; 10<sup>6</sup></span></div>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of digits 0-9 and a number `N`, count the number of subsequences of `s` that are divisible by `N`. The answer can be large, so output the answer modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= |s| * N <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": "s = \"1234\", N = 4",
                        "output": "4",
                        "explanation": "The subsequences 4, 12, 24, and 124 are divisible by 4."
                    },
                    {
                        "input": "s = \"330\", N = 6",
                        "output": "4",
                        "explanation": "The subsequences 30, 30, 330, and 0 are divisible by 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>This problem can be recursively defined. Let remainder of a string with value x be &lsquo;r&rsquo; when divided with n. Adding one more character to this string changes its remainder to (r*10 + newdigit) % n. For every new character, we have two choices, either add it in all current subsequences or ignore it. Thus, we have an optimal substructure</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\n\n\tint mod = (int)(1e9 + 7);\n\n\tpublic:\n\tint countDivisibleSubseq(string str, int N)\n\t{\n\t    int len = str.length();\n\t \n\t    // division by n can leave only n remainder\n\t    // [0..n-1]. dp[i][j] indicates number of\n\t    // subsequences in string [0..i] which leaves\n\t    // remainder j after division by n.\n\t    long long dp[len+1][N+1];\n\t    memset(dp, 0, sizeof(dp));\n\t \n\t    // Filling value for first digit in str\n\t    dp[0][(str[0]-'0')%N]++;\n\t \n\t    for (int i=1; i<len; i++)\n\t    {\n\t        // start a new subsequence with index i\n\t        dp[i][(str[i]-'0')%N]++;\n\t \n\t        for (int j=0; j<N; j++)\n\t        {\n\t            // exclude i'th character from all the\n\t            // current subsequences of string [0...i-1]\n\t            dp[i][j] =(dp[i][j]%mod+ dp[i-1][j]%mod)%mod;\n\t \n\t            // include i'th character in all the current\n\t            // subsequences of string [0...i-1]\n\t            dp[i][(j*10 + (str[i]-'0'))%N] =(dp[i][(j*10 + (str[i]-'0'))%N]%mod+ dp[i-1][j]%mod)%mod;\n\t        }\n\t    }\n\t \n\t    return (int)dp[len-1][0]%mod;\n\t}\n\t  \n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}