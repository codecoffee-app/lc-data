{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704923,
            "title": "Number of subsets and mean",
            "titleSlug": "number-of-subsets-and-mean1225",
            "content": "<p><span style=\"font-size:18px\">Let Max be the maximum possible mean of a multiset of values obtained from an array <strong>Arr </strong>of length <strong>N</strong>. Let Min be the minimum possible mean of a multiset of values obtained from the same array. Note that in a multiset values may repeat. The task is to find the <strong>number of multisets</strong> with mean as Max and the number of multisets with mean as Min. The answer may be too large so output the number of multisets modulo 10<sup>9</sup>+7. </span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>5\r\n<strong>Arr = </strong>{3, 1, 2, 3, 4}</span> \r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">1 1</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The maximum possible Mean of a Subset\r\nof the array is 4. There can be only 1\r\nsuch subset - {3, 1, 2, 3, <strong>4</strong>}.\r\nThe minimum possible Mean of a Subset\r\nof the array is 1. There can be only 1\r\nsuch subset - {3, <strong>1</strong>, 2, 3, 4}.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>3\r\n<strong>Arr = </strong>{1, 2, 1}</span> \r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">1 3</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The maximum possible Mean of a Subset\r\nof the array is 2. There can be only 1\r\nsuch subset - {1, <strong>2</strong>, 1}.\r\nThe minimum possible Mean of a Subset\r\nof the array is 1. There can be 3 such\r\nsubsets - {<strong>1</strong>, 2, 1}; {1, 2, <strong>1</strong>}; {<strong>1</strong>, 2, <strong>1</strong>}.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>numOfSubsets()</strong> which takes an Integer N and an array Arr[] as input and returns a vector of two numbers- the number of multisets with mean as Max and the number of multisets with mean as Min.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup><br />\r\n1 &lt;= Arr[i] &lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `Arr` of length `N`, find the number of multisets with the maximum possible mean (Max) and the number of multisets with the minimum possible mean (Min). A multiset is a set where values can repeat. Return the counts modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= N <= 10<sup>5</sup>",
                    "1 <= Arr[i] <= 10<sup>5</sup>"
                ],
                "testcases": [
                    {
                        "input": "N = 5\nArr = {3, 1, 2, 3, 4}",
                        "output": "1 1",
                        "explanation": "The maximum possible mean is achieved by selecting the element 4. There is only one such multiset: {4}.  The minimum possible mean is achieved by selecting the element 1. There is only one such multiset: {1}."
                    },
                    {
                        "input": "N = 3\nArr = {1, 2, 1}",
                        "output": "1 3",
                        "explanation": "The maximum possible mean is achieved by selecting the element 2. There is only one such multiset: {2}. The minimum possible mean is achieved by selecting the element 1. There are three such multisets: {1}, {1}, {1,1} assuming all possible indexes are accounted for."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A subset with maximum mean can only have all the maximum numbers of the array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\nclass Solution {\r\n  public:\r\n  \r\n    long long power(long long x, long long y)\r\n    {\r\n        long long res = 1;      // Initialize result\r\n     \r\n        x = x%1000000007;  // Update x if it is more than or \r\n                    // equal to p\r\n     \r\n        while (y > 0)\r\n        {\r\n            // If y is odd, multiply x with result\r\n            if (y & 1)\r\n                res = (res*x)%1000000007;\r\n     \r\n            // y must be even now\r\n            y = y>>1; // y = y/2\r\n            x = (x*x)%1000000007;  \r\n        }\r\n        return res;\r\n    }\r\n\r\n    vector<long long> numOfSubsets(int Arr[], int N) {\r\n        \r\n        vector<long long> ans(2);\r\n        \r\n        int maximum = -1;\r\n        int minimum = 1000000;\r\n        \r\n        for(int i=0; i<N; i++)\r\n        {\r\n            maximum = max(maximum, Arr[i]);\r\n            minimum = min(minimum, Arr[i]);\r\n        }\r\n        \r\n        int count1=0;\r\n        int count2=0;\r\n        \r\n        for(int i = 0; i<N; i++)\r\n        {\r\n            \r\n            if(Arr[i]==maximum)\r\n                count1++;\r\n            \r\n            if(Arr[i]==minimum)\r\n                count2++;\r\n        }\r\n        \r\n        ans[0] = power(2,(long long)count1) - 1;\r\n        ans[1] = power(2,(long long)count2) - 1;\r\n        \r\n        return ans;\r\n        \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution{\n    //Complete this function\n    public List<long> numOfSubsets(int[] Arr, int N)\n    {\n        List<long> ans = new List<long>();\n\n        long maximum = -1;\n        long minimum = 1000000;\n\n        for(int i=0; i<N; i++)\n        {\n            maximum = Math.Max(maximum, Arr[i]);\n            minimum = Math.Min(minimum, Arr[i]);\n        }\n\n        long count1=0;\n        long count2=0;\n\n        for(int i = 0; i<N; i++)\n        {\n            if(Arr[i]==maximum)\n                count1++;\n\n            if(Arr[i]==minimum)\n                count2++;\n        }\n\n        ans.Add(power(2,count1) - 1);\n        ans.Add(power(2,count2) - 1);\n\n        return ans;\n    }\n    \n    long power(long x, long y)\n    {\n        long res = 1;\n\n        x = x%1000000007;\n\n        while (y > 0)\n        {\n            if (y % 2 == 1)\n                res = (res*x)%1000000007;\n\n            y = y/2;\n            x = (x*x)%1000000007;  \n        }\n        return res;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}