{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706253,
            "title": "Number of subsets with product less than k",
            "titleSlug": "number-of-subsets-with-product-less-than-k",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong>. Find the number of non-empty subsets whose product of elements is less than or equal to a given integer <strong>k</strong>. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 4, 5, 3], k = 12\n<strong>Output: </strong>8\n<strong>Explanation: </strong>All possible subsets whose products are less than 12 are: (2), (4), (5), (3), (2, 4), (2, 5), (2, 3), (4, 3).</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [9, 8, 3], k = 2 \n<strong>Output: </strong>0</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>There is no subsets with product less than or equal to 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [9, 2, 2], k = 2 \n<strong>Output: </strong>2</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><span >All possible subsets whose products are less than 12 are: (2), (2).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 30<br />1 &le; arr[i] &le; 10<br />1 &le; k &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integers, determine the number of non-empty subsets whose product of elements is less than or equal to a given integer `k`.",
                "constraints": [
                    "1 <= arr.size() <= 30",
                    "1 <= arr[i] <= 10",
                    "1 <= k <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr = [2, 4, 5, 3], k = 12",
                        "output": "8",
                        "explanation": "The subsets with a product less than or equal to 12 are: {2}, {4}, {5}, {3}, {2, 4}, {2, 5}, {2, 3}, {4, 3}."
                    },
                    {
                        "input": "arr = [9, 8, 3], k = 2",
                        "output": "0",
                        "explanation": "There are no subsets whose product is less than or equal to 2."
                    },
                    {
                        "input": "arr = [9, 2, 2], k = 2",
                        "output": "2",
                        "explanation": "The subsets with a product less than or equal to 2 are: {2}, {2}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use the concept of <a href=\"https://www.geeksforgeeks.org/meet-in-the-middle/\">meet in the middle.</a></span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "subset",
                "slug": "subset"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int numOfSubsets(vector<int>& arr, int k) {\n        int n = arr.size();\n        // declare four vector for dividing array into\n        // two halves and storing product value of\n        // possible subsets for them\n        vector<int> vect1, vect2, subset1, subset2;\n\n        // ignore element greater than k and divide\n        // array into 2 halves\n        for (int i = 0; i < n; i++) {\n\n            // ignore element if greater than k\n            if (arr[i] > k)\n                continue;\n            if (i <= n / 2)\n                vect1.push_back(arr[i]);\n            else\n                vect2.push_back(arr[i]);\n        }\n\n        // generate all subsets for 1st half (vect1)\n        for (int i = 0; i < (1 << vect1.size()); i++) {\n            int value = 1;\n            for (int j = 0; j < vect1.size(); j++) {\n                if (i & (1 << j))\n                    value *= vect1[j];\n                if (value > k)\n                    break;\n            }\n\n            // push only in case subset product is less\n            // than equal to k\n            if (value <= k)\n                subset1.push_back(value);\n        }\n\n        // generate all subsets for 2nd half (vect2)\n        for (int i = 0; i < (1 << vect2.size()); i++) {\n            int value = 1;\n            for (int j = 0; j < vect2.size(); j++) {\n                if (i & (1 << j))\n                    value *= vect2[j];\n                if (value > k)\n                    break;\n            }\n\n            // push only in case subset product is\n            // less than equal to k\n            if (value <= k)\n                subset2.push_back(value);\n        }\n\n        // sort subset2\n        sort(subset2.begin(), subset2.end());\n\n        int count = 0;\n        for (int i = 0; i < subset1.size(); i++)\n            count += upper_bound(subset2.begin(), subset2.end(), (k / subset1[i])) -\n                     subset2.begin();\n\n        // for null subset decrement the value of count\n        count--;\n\n        // return count\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int upperBound(List<Integer> list, int value) {\n        int low = 0, high = list.size();\n        while (low < high) {\n            int mid = (low + high) / 2;\n            if (list.get(mid) <= value)\n                low = mid + 1;\n            else\n                high = mid;\n        }\n        return low;\n    }\n\n    public int numOfSubsets(int[] arr, int k) {\n        int n = arr.length;\n\n        // Declare lists for dividing array into two halves and storing\n        // product values of possible subsets for them\n        List<Integer> vect1 = new ArrayList<>();\n        List<Integer> vect2 = new ArrayList<>();\n        List<Integer> subset1 = new ArrayList<>();\n        List<Integer> subset2 = new ArrayList<>();\n\n        // Ignore elements greater than k and divide array into 2 halves\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > k) continue;\n            if (i <= n / 2)\n                vect1.add(arr[i]);\n            else\n                vect2.add(arr[i]);\n        }\n\n        // Generate all subsets for 1st half (vect1)\n        for (int i = 0; i < (1 << vect1.size()); i++) {\n            int value = 1;\n            for (int j = 0; j < vect1.size(); j++) {\n                if ((i & (1 << j)) != 0) value *= vect1.get(j);\n                if (value > k) break;\n            }\n            if (value <= k) subset1.add(value);\n        }\n\n        // Generate all subsets for 2nd half (vect2)\n        for (int i = 0; i < (1 << vect2.size()); i++) {\n            int value = 1;\n            for (int j = 0; j < vect2.size(); j++) {\n                if ((i & (1 << j)) != 0) value *= vect2.get(j);\n                if (value > k) break;\n            }\n            if (value <= k) subset2.add(value);\n        }\n\n        // Sort subset2\n        Collections.sort(subset2);\n\n        // Count subsets whose product is less than or equal to k\n        int count = 0;\n        for (int val : subset1) {\n            count += upperBound(subset2, k / val);\n        }\n\n        // For null subset decrement the value of count\n        count--;\n\n        // Return count\n        return count;\n    }\n\n    // Helper method to find the upper bound\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\n\nimport bisect\n\n\nclass Solution:\n\n    def numOfSubsets(self, arr, k):\n        n = len(arr)\n        # declare four vector for dividing\n        # array into two halves and storing\n        # product value of possible subsets\n        # for them\n        vect1, vect2, subset1, subset2 = [], [], [], []\n\n        # ignore element greater than k and\n        # divide array into 2 halves\n        for i in range(0, n):\n\n            # ignore element if greater than k\n            if arr[i] > k:\n                continue\n            if i <= n // 2:\n                vect1.append(arr[i])\n            else:\n                vect2.append(arr[i])\n\n        # generate all subsets for 1st half (vect1)\n        for i in range(0, (1 << len(vect1))):\n            value = 1\n            for j in range(0, len(vect1)):\n                if i & (1 << j):\n                    value *= vect1[j]\n                if value > k:\n                    break\n\n            # push only in case subset product\n            # is less than equal to k\n            if value <= k:\n                subset1.append(value)\n\n        # generate all subsets for 2nd half (vect2)\n        for i in range(0, (1 << len(vect2))):\n            value = 1\n            for j in range(0, len(vect2)):\n                if i & (1 << j):\n                    value *= vect2[j]\n                if value > k:\n                    break\n\n            # push only in case subset product\n            # is less than equal to k\n            if value <= k:\n                subset2.append(value)\n\n        # sort subset2\n        subset2.sort()\n\n        count = 0\n        for i in range(0, len(subset1)):\n            count += bisect.bisect(subset2, (k // subset1[i]))\n\n        # for null subset decrement the\n        # value of count\n        count -= 1\n\n        # return count\n        return count\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    numOfSubsets(arr, K) {\n        let N = arr.length;\n        let vect1 = [], vect2 = [], subset1 = [], subset2 = [];\n\n        for (let i = 0; i < N; i++) {\n            if (arr[i] > K) continue;\n            if (i <= N / 2)\n                vect1.push(arr[i]);\n            else\n                vect2.push(arr[i]);\n        }\n\n        for (let i = 0; i < (1 << vect1.length); i++) {\n            let value = 1;\n            for (let j = 0; j < vect1.length; j++) {\n                if (i & (1 << j)) value *= vect1[j];\n                if (value > K) break;\n            }\n            if (value <= K) subset1.push(value);\n        }\n\n        for (let i = 0; i < (1 << vect2.length); i++) {\n            let value = 1;\n            for (let j = 0; j < vect2.length; j++) {\n                if (i & (1 << j)) value *= vect2[j];\n                if (value > K) break;\n            }\n            if (value <= K) subset2.push(value);\n        }\n\n        subset2.sort((a, b) => a - b);\n\n        let count = 0;\n        for (let i = 0; i < subset1.length; i++)\n            count += this.upperBound(subset2, (K / subset1[i]));\n\n        count--;\n\n        return count;\n    }\n\n    upperBound(arr, key) {\n        let low = 0, high = arr.length - 1, ans = arr.length;\n        while (low <= high) {\n            let mid = (low + high) >> 1;\n            if (arr[mid] <= key)\n                low = mid + 1;\n            else {\n                ans = mid;\n                high = mid - 1;\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}