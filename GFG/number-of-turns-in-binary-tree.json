{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700637,
            "title": "Number of Turns in Binary Tree",
            "titleSlug": "number-of-turns-in-binary-tree",
            "content": "<p><span style=\"font-size:18px\">Given a binary tree and data value of two of its nodes. Find the number of turns needed to reach from one node to another in the given binary tree.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\\t</strong>\r\nTree = \r\n\\t     1\r\n\\t  /    \\\r\n\\t 2\\t 3\r\n     /  \\     /  \\\r\n    4    5   6    7\\t\\t\\t\\t\r\n   /\\t  / \\\\t\\t\\t\\t\r\n  8\\t  9   10   </span>\r\n<span style=\"font-size:18px\">first node = 5\r\nsecond node = 10</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 4</span>\r\n<span style=\"font-size:18px\"><strong>Explanation: \r\n</strong>Turns will be at 2, 1, 3, 6.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\\t</strong>\r\nTree = \r\n\\t     1\r\n\\t  /     \\\r\n\\t 2\\t  3\r\n     /  \\\\t/  \\\r\n    4    5    6    7\\t\\t\\t\\t\r\n   /\\t   / \\\\t\\t\\t\\t\r\n  8\\t   9   10   </span>\r\n<span style=\"font-size:18px\">first node = 1\r\nsecond node = 4  </span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> -1</span>\r\n<span style=\"font-size:18px\"><strong>Explanation: </strong>No turn is required since \r\nthey are in a straight line.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Complete the function <strong>NumberOFTurns()</strong> which takes root node and data value of 2 nodes as input parameters and returns the number of turns required to navigate between them. If the two nodes are in a straight line, ie- the path does not involve any turns, return -1.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space: </strong>O(Height of Tree)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<ol>\n\t<li><span style=\"font-size:18px\">Find the LCA of given two node.</span></li>\n\t<li><span style=\"font-size:18px\">If none of the 2 nodes is equal to LCA this means that one&nbsp;lies on the left side of LCA and the other on&nbsp;right side. Count the number of turns needed to reach LCA from both sides and then sum their count.&nbsp;</span></li>\n\t<li><span style=\"font-size:18px\">If one of the nodes is equal to LCA then we only need to count the turns needed for the other node to reach the LCA.&nbsp;</span></li>\n</ol>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\r\n\r\nstruct Node* findLCA(struct Node* root, int n1, int n2)\r\n{\r\n    if (root == NULL)\r\n        return NULL;\r\n    if (root->data == n1 || root->data == n2) \r\n        return root;\r\n    \r\n    Node* left_lca = findLCA(root->left, n1, n2);\r\n    Node* right_lca = findLCA(root->right, n1, n2);\r\n    \r\n    if (left_lca && right_lca)\r\n        return root;\r\n\r\n    return (left_lca != NULL) ? left_lca : right_lca;\r\n}\r\n\r\nclass Solution{\r\n  public:\r\n    bool CountTurn(Node* root, int data, bool turn, int* count)\r\n    {\r\n        if (root == NULL)\r\n            return false;\r\n        if (root->data == data)\r\n            return true;\r\n        \r\n        // Case 1:\r\n        if (turn == true) {\r\n            if (CountTurn(root->left, data, turn, count))return true;\r\n            if (CountTurn(root->right, data, !turn, count))\r\n            {\r\n                *count += 1;\r\n                return true;\r\n            }\r\n        } \r\n        // Case 2:\r\n        else \r\n        {\r\n            if (CountTurn(root->right, data, turn, count))return true;\r\n            if (CountTurn(root->left, data, !turn, count))\r\n            {\r\n                   *count += 1;\r\n                   return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    // function should return the number of turns required to go from first node to second node \r\n    int NumberOFTurns(struct Node* root, int first, int second)\r\n    {\r\n        struct Node* LCA = findLCA(root, first, second);\r\n        if (LCA == NULL)\r\n            return -1;\r\n    \r\n        int Count = 0;\r\n        if (LCA->data != first && LCA->data != second)\r\n        {\r\n            // count number of turns needed to reach second node from LCA\r\n            if (CountTurn(LCA->right, second, false, &Count) || CountTurn(LCA->left, second, true, &Count));\r\n    \r\n            // count number of turns needed to reach first node from LCA\r\n            if (CountTurn(LCA->left, first, true, &Count) || CountTurn(LCA->right, first, false, &Count));\r\n            return Count + 1;\r\n        }\r\n    \r\n        if (LCA->data == first) \r\n        {\r\n            // count number of turns needed to reach second node from LCA\r\n            CountTurn(LCA->right, second, false, &Count);\r\n            CountTurn(LCA->left, second, true, &Count);  \r\n            return Count;  \r\n        }\r\n        else\r\n        {\r\n            // count number of turns needed to reach first node from LCA\r\n            CountTurn(LCA->right, first, false, &Count);\r\n            CountTurn(LCA->left, first, true, &Count);\r\n            return Count;\r\n        }\r\n        \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    \r\n   static int Count;\r\n   static Node findLCA(Node root, int n1, int n2) {\r\n       \r\n        if (root == null)\r\n            return null;\r\n \r\n       \r\n        if (root.data == n1 || root.data == n2)\r\n            return root;\r\n \r\n       \r\n        Node left_lca = findLCA(root.left, n1, n2);\r\n        Node right_lca = findLCA(root.right, n1, n2);\r\n \r\n       \r\n        if (left_lca != null && right_lca != null)\r\n            return root;\r\n \r\n      \r\n        return (left_lca != null) ? left_lca : right_lca;\r\n    }\r\n   static boolean CountTurn(Node root, int key, boolean turn) {\r\n        if (root == null)\r\n            return false;\r\n \r\n        \r\n        if (root.data == key)\r\n            return true;\r\n \r\n       \r\n        if (turn == true) {\r\n            if (CountTurn(root.left, key, turn))\r\n                return true;\r\n            if (CountTurn(root.right, key, !turn)) {\r\n                Count += 1;\r\n                return true;\r\n            }\r\n        } else\r\n        {\r\n            if (CountTurn(root.right, key, turn))\r\n                return true;\r\n            if (CountTurn(root.left, key, !turn)) {\r\n                Count += 1;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    \r\n   static int NumberOfTurns(Node root, int first, int second)\r\n    {\r\n        Node LCA = findLCA(root, first, second);\r\n \r\n       \r\n        if (LCA == null)\r\n            return -1;\r\n        Count = 0;\r\n \r\n        \r\n        if (LCA.data != first && LCA.data != second) {\r\n \r\n             // count number of turns needs to reached\r\n            // the second node from LCA\r\n            if (CountTurn(LCA.right, second, false)\r\n                    || CountTurn(LCA.left, second, true));\r\n \r\n             // count number of turns needs to reached \r\n             // the first node from LCA\r\n            if (CountTurn(LCA.left, first, true)\r\n                    || CountTurn(LCA.right, first, false));\r\n            return Count + 1;\r\n        }\r\n \r\n       \r\n        // count number of turns needs to reach \r\n        // the second node from LCA\r\n        if (LCA.data == first) {\r\n \r\n           \r\n            CountTurn(LCA.right, second, false);\r\n            CountTurn(LCA.left, second, true);\r\n            return Count;\r\n        } else {\r\n \r\n            // count number of turns needs to reached\r\n            // the first node from LCA1 \r\n            CountTurn(LCA.right, first, false);\r\n            CountTurn(LCA.left, first, true);\r\n            return Count;\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Backend complete function template for Python 3\n\nclass Solution:\n    \n    # Function to find the lowest common ancestor of n1 and n2\n    def findLCA(self, n, a, b):\n        \n        # Checking if n is None, return None\n        if n is None:\n            return None\n        \n        # Checking if the data in n is equal to either a or b, return n\n        if n.data==a or n.data==b:\n            return n\n        \n        # Recursively finding the LCA in the left and right subtrees\n        l = self.findLCA(n.left,a,b)\n        r = self.findLCA(n.right,a,b)\n        \n        # Checking if the LCA is found in both the left and right subtrees, return n\n        if l and r:\n            return n\n        \n        # If the LCA is found only in the left subtree, return l\n        if l:\n            return l\n        \n        # If the LCA is found only in the right subtree, return r\n        return r\n    \n    # Function to count the number of turns required to reach target from n\n    def count(self, n, prev, target):\n        \n        # Checking if n is None, return -1\n        if n is None:\n            return -1\n        \n        # Checking if the data in n is equal to target, return 0\n        if n.data == target:\n            return 0\n        \n        # Recursively counting the number of turns in the left subtree\n        val = self.count(n.left,'l',target)\n        \n        # If the number of turns is not -1, return val + 1 if prev is 'r' else val\n        if val!=-1:\n            return val + (int)(prev=='r')\n        \n        # Recursively counting the number of turns in the right subtree\n        val = self.count(n.right,'r',target)\n        \n        # If the number of turns is not -1, return val + 1 if prev is 'l' else val\n        if val!=-1:\n            return val + (int)(prev=='l')\n        \n        # If the target is not found in the subtree, return -1\n        return -1\n    \n    # Function to find the number of turns required to reach from n1 to n2 in a binary tree\n    def NumberOFTurns(self, root, n1, n2):\n        \n        # Finding the lowest common ancestor of n1 and n2\n        LCA = self.findLCA(root,n1,n2)\n        \n        # Initializing ret as 0\n        ret = 0\n        \n        # Checking if the LCA is n1\n        if LCA.data == n1:\n            \n            # Counting the number of turns from LCA to n2\n            ret = self.count(LCA,'x',n2)\n        \n        # Checking if the LCA is n2    \n        elif LCA.data == n2:\n            \n            # Counting the number of turns from LCA to n1\n            ret = self.count(LCA,'x',n1)\n        \n        else:\n            \n            # Counting the number of turns from LCA to n1 and n2\n            ret = self.count(LCA,'x',n1) + self.count(LCA,'x',n2) + 1\n        \n        # Returning the total number of turns required\n        return ret",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}