{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701714,
            "title": "Number of Unique Paths",
            "titleSlug": "number-of-unique-paths5339",
            "content": "<p><span style=\"font-size:18px\">Given a <strong>A&nbsp;X B</strong> matrix with your initial position at the top-left cell, find the number of possible unique paths to reach the bottom-right cell of the matrix from the initial position.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong> Possible moves can be either <strong>down </strong>or <strong>right </strong>at any point in time, i.e., we can move to matrix[i+1][j] or matrix[i][j+1] from matrix[i][j].</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>A = 2, B = 2\r\n<strong>Output: </strong>2<strong>\r\nExplanation:</strong> There are only two unique\r\npaths to reach the end of the matrix of\r\nsize two from the starting cell of the\r\nmatrix.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>A = 3, B = 4\r\n<strong>Output: </strong>10<strong>\r\nExplanation:</strong> There are only 10 unique\r\npaths to reach the end of the matrix of\r\nsize two from the starting cell of the\r\nmatrix.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong><br />\r\n<span style=\"font-size:18px\">Complete <strong>NumberOfPath()&nbsp;</strong>function which takes 2 arguments(A and B) and returns the number of unique paths from top-left to the bottom-right cell.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(A*B).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(A*B).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &le; A &le; 16<br />\r\n1 &le; B &le; 16</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an A x B matrix, find the number of unique paths to reach the bottom-right cell from the top-left cell. You can only move down or right at any point in time.",
                "constraints": [
                    "1 <= A <= 16",
                    "1 <= B <= 16"
                ],
                "testcases": [
                    {
                        "input": "A = 2, B = 2",
                        "output": "2",
                        "explanation": "There are two possible paths: Right -> Down or Down -> Right."
                    },
                    {
                        "input": "A = 3, B = 4",
                        "output": "10",
                        "explanation": "There are 10 unique ways to navigate from the top-left to the bottom-right cell with allowed moves."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "walmart"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to find total number of unique paths.\r\n    int NumberOfPath(int a, int b)\r\n    {\r\n        //creating a 2D table to store results of subproblems.\r\n        int ans[a][b];\r\n        \r\n        //count of paths to reach any cell in first row is 1.\r\n        for(int i=0;i<b;i++)\r\n            ans[0][i]=1;\r\n        \r\n        //count of paths to reach any cell in first column is 1.\r\n        for(int i=0;i<a;i++)\r\n            ans[i][0]=1;\r\n        \r\n        //calculating count of paths for other cells in bottom-up manner.   \r\n        for(int i=1;i<a;i++)\r\n        {\r\n            for(int j=1;j<b;j++)\r\n                //calculating number of path from previous column+previous row.\r\n                ans[i][j]=ans[i-1][j]+ans[i][j-1];\r\n        }\r\n        \r\n         //returning total paths.\r\n         return ans[a-1][b-1];\r\n    }\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //Function to find total number of unique paths.\r\n    public static int NumberOfPath(int a, int b)\r\n    {\r\n        //creating a 2D table to store results of subproblems.\r\n        int ans[][]=new int[a][b];\r\n        \r\n        //count of paths to reach any cell in first row is 1.\r\n        for(int i=0;i<b;i++)\r\n            ans[0][i]=1;\r\n        \r\n        //count of paths to reach any cell in first column is 1.\r\n        for(int i=0;i<a;i++)\r\n            ans[i][0]=1;\r\n            \r\n        //calculating count of paths for other cells in bottom-up manner.   \r\n        for(int i=1;i<a;i++)\r\n        {\r\n            for(int j=1;j<b;j++)\r\n                //calculating number of paths from previous column+previous row.\r\n                ans[i][j]=ans[i-1][j]+ans[i][j-1];\r\n        }\r\n        \r\n         //returning total paths.\r\n         return ans[a-1][b-1];\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to find total number of unique paths.\r\n    def NumberOfPaths(self,a, b):\r\n        \r\n        #creating a 2D table to store results of subproblems.\r\n        ans = [[0 for i in range(b)] for j in range(a)]\r\n        \r\n        #count of paths to reach any cell in first row is 1.\r\n        for i in range(b):\r\n            ans[0][i]=1\r\n            \r\n        #count of paths to reach any cell in first column is 1.\r\n        for i in range(a):\r\n            ans[i][0]=1\r\n            \r\n        #calculating count of paths for other cells in bottom-up manner.   \r\n        for i in range(1, a):\r\n            for j in range(1, b):\r\n                #calculating number of paths from previous column+previous row.\r\n                ans[i][j] = ans[i-1][j]+ans[i][j-1]\r\n                \r\n        #returning total paths.\r\n        return ans[a-1][b-1]\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {number} a\r\n * @param {number} b\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution \r\n{\r\n    //Function to find total number of unique paths.\r\n    NumberOfPath(a, b)\r\n    {\r\n        //creating a 2D table to store results of subproblems.\r\n        let ans = new Array(a);\r\n        for(let i=0;i<a;i++)\r\n            ans[i] = new Array(b);\r\n        \r\n        //count of paths to reach any cell in first row is 1.\r\n        for(let i=0;i<b;i++)\r\n            ans[0][i]=1;\r\n        \r\n        //count of paths to reach any cell in first column is 1.\r\n        for(let i=0;i<a;i++)\r\n            ans[i][0]=1;\r\n            \r\n        //calculating count of paths for other cells in bottom-up manner.   \r\n        for(let i=1;i<a;i++) \r\n        {\r\n            for(let j=1;j<b;j++)\r\n                //calculating number of paths from previous column+previous row.\r\n                ans[i][j]=ans[i-1][j]+ans[i][j-1];\r\n        }\r\n        \r\n         //returning total paths.\r\n         return ans[a-1][b-1];\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find total number of unique paths.\n    public int NumberOfPath(int a, int b)\n    {\n        //creating a 2D table to store results of subproblems.\n        int[,] ans = new int[a, b];\n        \n        //count of paths to reach any cell in first row is 1.\n        for(int i=0;i<b;i++)\n            ans[0,i] = 1;\n        \n        //count of paths to reach any cell in first column is 1.\n        for(int i=0;i<a;i++)\n            ans[i,0] = 1;\n        \n        //calculating count of paths for other cells in bottom-up manner.   \n        for(int i=1;i<a;i++)\n        {\n            for(int j=1;j<b;j++)\n                //calculating number of path from previous column+previous row.\n                ans[i,j] = ans[i-1,j] + ans[i,j-1];\n        }\n        \n        //returning total paths.\n        return ans[a-1,b-1];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}