{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704463,
            "title": "Number of unique rectangles",
            "titleSlug": "number-of-unique-rectangles1849",
            "content": "<p><span style=\"font-size:18px\">You are given <strong>N </strong>unit squares (squares with side length 1 unit), the task is to make rectangles using these squares and to count the number of rotationally unique rectangles. Two rectangles are rotationally unique if one can&rsquo;t be rotated to become equivalent to the other one.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>4</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">5</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">Total rectangles we can make from 4\r\nunit squares are: 1x1, 1x2, 1x3, 2x2,\r\n1x4, 2x1, 3x1, and 4x1.\r\nBut we can get 2x1, 3x1, 4x1\r\nby rotating 1x2, 1x3, 1x4.\r\nSo these five rectangles are rotationally unique.\r\n1x1, 1x2, 2x2, 1x3 and 1x4.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong>5</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">6</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">We can make only 6 rotationally unique\r\nrectangles from 5 unit squares.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>noOfUniqueRectangles()</strong> which takes an Integer N as input and returns the answer.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*sqrt(N))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given N unit squares (squares with side length 1 unit), determine the number of rotationally unique rectangles that can be formed using these squares. Two rectangles are considered rotationally unique if one cannot be obtained by rotating the other.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "5",
                        "explanation": "With 4 unit squares, the possible rectangles are 1x1, 1x2, 1x3, 1x4, and 2x2. While rectangles like 2x1, 3x1, and 4x1 are possible, they are rotations of 1x2, 1x3, and 1x4 respectively, and therefore not rotationally unique. Thus, the unique rectangles are 1x1, 1x2, 1x3, 1x4, and 2x2, totaling 5."
                    },
                    {
                        "input": "5",
                        "output": "6",
                        "explanation": "With 5 unit squares, the possible rectangles are 1x1, 1x2, 1x3, 1x4, 1x5 and 5x1,4x1,3x1,2x1. Considering rotational uniqueness , the  unique rectangles are 1x1, 1x2, 1x3, 1x4, 1x5  totaling 6"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A Square is also a Rectangle.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\n\r\nclass Solution {\r\n  public:\r\n    // Function to calculate the number of unique rectangles\r\n    int noOfUniqueRectangles(int N) {\r\n        \r\n        int ans = 0;  // Initialize the answer variable to 0\r\n    \tfor (int length = 1; length <= sqrt(N); ++length)  // Loop through all possible lengths\r\n    \t    for (int height = length; height*length <= N; ++height)  // Loop through all possible heights\r\n    \t\t    ans++;  // Increment the answer variable\r\n    \t\t    \r\n    \treturn ans;  // Return the final answer\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to count the number of unique rectangles\n    static int noOfUniqueRectangles(int N) {\n        \n        int ans = 0;\n        // Iterate over the possible lengths of rectangles\n    \tfor (int length = 1; length <= Math.sqrt(N); ++length)\n    \t    // Iterate over the possible heights of rectangles\n    \t    for (int height = length; height*length <= N; ++height)\n    \t\t    // Increment the count of unique rectangles\n    \t\t    ans++;\n    \t\t    \n    \t// Return the count of unique rectangles\n    \treturn ans;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int noOfUniqueRectangles(int N)\n    {\n        int ans = 0;\n        for (int length = 1; length <= Math.Sqrt(N); ++length)\n            for (int height = length; height * length <= N; ++height)\n                ans++;\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}