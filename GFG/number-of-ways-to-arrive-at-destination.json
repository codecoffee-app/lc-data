{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711400,
            "title": "Number of Ways to Arrive at Destination",
            "titleSlug": "number-of-ways-to-arrive-at-destination",
            "content": "<p><span style=\"font-size:18px\">You are in a city that consists of&nbsp;<code>n</code>&nbsp;intersections numbered from&nbsp;<code>0</code>&nbsp;to&nbsp;<code>n - 1</code>&nbsp;with&nbsp;<strong>bi-directional</strong>&nbsp;roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">You are given an integer&nbsp;<code>n</code>&nbsp;and a 2D integer array&nbsp;<code>roads</code>&nbsp;where&nbsp;<code>roads[i] = [u<sub>i</sub>, v<sub>i</sub>, time<sub>i</sub>]</code>&nbsp;means that there is a road between intersections&nbsp;<code>u<sub>i</sub></code>&nbsp;and&nbsp;<code>v<sub>i</sub></code>&nbsp;that takes&nbsp;<code>time<sub>i</sub></code>&nbsp;minutes to travel. You want to know in how many ways you can travel from intersection&nbsp;<code>0</code>&nbsp;to intersection&nbsp;<code>n - 1</code>&nbsp;in the&nbsp;<strong>shortest amount of time</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Return&nbsp;<em>the&nbsp;<strong>number of ways</strong>&nbsp;you can arrive at your destination in the&nbsp;<strong>shortest amount of time</strong></em>. Since the answer may be large, return it&nbsp;<strong>modulo</strong>&nbsp;<code>10<sup>9</sup>&nbsp;+ 7</code>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Example 1:</span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn=7, m=10\r\nedges= [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n4\r\nExplaination:</span>\r\n\r\n<span style=\"font-size:18px\">The four ways to get there in 7 minutes are:\r\n- 0  6\r\n- 0  4  6\r\n- 0  1  2  5  6\r\n- 0  1  3  5  6</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\">Example 2:</span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn=6, m=8\r\nedges= [[0,5,8],[0,2,2],[0,1,1],[1,3,3],[1,2,3],[2,5,6],[3,4,2],[4,5,2]]</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n3\r\nExplaination:</span>\r\n\r\n<span style=\"font-size:18px\">The three ways to get there in 8 minutes are:\r\n- 0  5\r\n- 0  2  5\r\n- 0  1  3  4  5\r\n</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n<code>1 &lt;= n &lt;= 200<br />\r\nn - 1 &lt;= roads.length &lt;= n * (n - 1) / 2<br />\r\nroads[i].length == 3<br />\r\n0 &lt;= u<sub>i</sub>, v<sub>i</sub>&nbsp;&lt;= n - 1<br />\r\n1 &lt;= time<sub>i</sub>&nbsp;&lt;= 10<sup>9</sup><br />\r\nu<sub>i&nbsp;</sub>!= v<sub>i</sub></code><br />\r\nThere is at most one road connecting any two intersections.<br />\r\nYou can reach any intersection from any other intersection.<br />\r\n<br />\r\nExpected Time Complexity:&nbsp;O(M * logN + N)<br />\r\nExpected Space Complexity: O(M+N)</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are in a city with 'n' intersections, numbered from 0 to n-1. There are bi-directional roads connecting some intersections, ensuring you can reach any intersection from any other, with at most one road between any two. Given 'n' and a 2D array 'roads' where roads[i] = [ui, vi, timei] represents a road between intersections ui and vi that takes timei minutes to travel, find the number of ways to travel from intersection 0 to intersection n-1 in the shortest amount of time. Return the number of shortest-time paths modulo 10^9 + 7.",
                "constraints": [
                    "1 <= n <= 200",
                    "n - 1 <= roads.length <= n * (n - 1) / 2",
                    "roads[i].length == 3",
                    "0 <= ui, vi <= n - 1",
                    "1 <= timei <= 10^9",
                    "ui != vi",
                    "There is at most one road connecting any two intersections.",
                    "You can reach any intersection from any other intersection."
                ],
                "testcases": [
                    {
                        "input": "n=7, m=10\nedges= [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]",
                        "output": "4",
                        "explanation": "The four shortest paths with a total time of 7 minutes are:\n- 0 -> 6\n- 0 -> 4 -> 6\n- 0 -> 1 -> 2 -> 5 -> 6\n- 0 -> 1 -> 3 -> 5 -> 6"
                    },
                    {
                        "input": "n=6, m=8\nedges= [[0,5,8],[0,2,2],[0,1,1],[1,3,3],[1,2,3],[2,5,6],[3,4,2],[4,5,2]]",
                        "output": "3",
                        "explanation": "The three shortest paths with a total time of 8 minutes are:\n- 0 -> 5\n- 0 -> 2 -> 5\n- 0 -> 1 -> 3 -> 4 -> 5"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use dijkstra algorithm</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Shortest Path",
                "slug": "shortest-path"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n  \n    // Function to count the number of paths from start to end\n    int countPaths(int n, vector<vector<int>> &roads) {\n        \n        // Initialize the modulo value\n        int mod = 1e9 + 7;\n        \n        // Create an adjacency list to represent the graph\n        vector<vector<pair<int, int>>> graph(n);\n        \n        // Populate the adjacency list with the roads data\n        for (auto &road : roads) {\n            graph[road[0]].push_back({road[1], road[2]});\n            graph[road[1]].push_back({road[0], road[2]});\n        }\n\n        // Initialize distance and path arrays\n        vector<long long> distance(n, LONG_MAX);\n        vector<int> path(n, 0);\n\n        // Create a priority queue for Dijkstra's algorithm\n        priority_queue<pair<long long, int>, vector<pair<long long, int>>,\n                       greater<pair<long long, int>>> pq;\n        \n        // Add the start node to the priority queue\n        pq.push({0, 0});\n        \n        // Update the distance and path arrays for the start node\n        distance[0] = 0;\n        path[0] = 1;\n\n        // Run Dijkstra's algorithm\n        while (!pq.empty()) {\n            // Get the current node and its distance from the priority queue\n            pair<long long, int> t = pq.top();\n            pq.pop();\n\n            // Iterate through the neighbors of the current node\n            for (auto &nbr : graph[t.second]) {\n                long long vert = nbr.first;  // Neighbor node\n                long long edge = nbr.second; // Edge weight\n\n                // Update the distance and path arrays for the neighbor node\n                if (distance[vert] > distance[t.second] + edge) {\n                    distance[vert] = distance[t.second] + edge;\n                    pq.push({distance[vert], vert});\n                    path[vert] = path[t.second] % mod;\n                }\n                // If there are multiple paths with the same distance, add the path counts together\n                else if (distance[vert] == t.first + edge) {\n                    path[vert] += path[t.second];\n                    path[vert] %= mod;\n                }\n            }\n        }\n\n        // Return the number of paths from start to end\n        return path[n - 1];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n\r\n    // Function to count the number of paths.\r\n    static int countPaths(int n, List<List<Integer>> roads) {\r\n        // Mod value for taking modulo.\r\n        double mod = 1e9 + 7;\r\n        // Graph to store the roads.\r\n        List<List<int[]>> graph = new ArrayList<>();\r\n\r\n        // Initializing the graph ArrayList.\r\n        for (int i = 0; i <= n; i++) {\r\n            graph.add(new ArrayList<>());\r\n        }\r\n\r\n        // Adding the roads to the graph.\r\n        for (List<Integer> road : roads) {\r\n            graph.get(road.get(0)).add(new int[]{road.get(1), road.get(2)});\r\n            graph.get(road.get(1)).add(new int[]{road.get(0), road.get(2)});\r\n        }\r\n\r\n        // Array to store the minimum distance from start node.\r\n        long[] distance = new long[n];\r\n        // Initializing the distance array with maximum values.\r\n        Arrays.fill(distance, Long.MAX_VALUE);\r\n\r\n        // Array to store the path count.\r\n        int[] path = new int[n];\r\n\r\n        // Priority queue for Dijkstra's algorithm.\r\n        PriorityQueue<long[]> pq =\r\n            new PriorityQueue<>((x, y)->{ return (int)x[0] - (int)y[0]; });\r\n\r\n        // Adding the start node to priority queue.\r\n        pq.add(new long[]{0, 0});\r\n        // Setting the distance from start node to 0.\r\n        distance[0] = 0;\r\n        // Setting the path count for start node to 1.\r\n        path[0] = 1;\r\n\r\n        // Dijkstra's algorithm.\r\n        while (!pq.isEmpty()) {\r\n            long[] t = pq.poll();\r\n\r\n            for (int[] nbr : graph.get((int)t[1])) {\r\n                long vert = nbr[0];\r\n                long edge = nbr[1];\r\n\r\n                // Updating the distance and path count.\r\n                if (distance[(int)vert] > distance[(int)t[1]] + edge) {\r\n                    distance[(int)vert] = distance[(int)t[1]] + edge;\r\n                    pq.add(new long[]{distance[(int)vert], vert});\r\n                    path[(int)vert] = path[(int)t[1]] % 1000000007;\r\n                } else if (distance[(int)vert] == t[0] + edge) {\r\n                    path[(int)vert] += path[(int)t[1]];\r\n                    path[(int)vert] %= 1000000007;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Returning the path count for the last node.\r\n        return path[n - 1];\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Back-end complete function Template for Python 3\n\n# Importing necessary libraries\nfrom typing import List\nfrom collections import defaultdict\nimport sys\nimport heapq\n\n# Creating a class Solution\nclass Solution:\n  \n    # Function to count the number of paths\n    def countPaths(self, n: int, roads: List[List[int]]) -> int:\n        \n        # Creating a defaultdict to store the graph as adjacency list\n        graph=defaultdict(list)\n        \n        # Defining the modulus value\n        mod=int(1e9+7)\n        \n        # Constructing the graph\n        for u,v,t in roads:\n            graph[u].append((t,v))\n            graph[v].append((t,u))\n        \n        # Creating a min heap\n        heap=[]\n        \n        # Initializing the shortest path to a large value\n        shortest=sys.maxsize\n        \n        # Pushing the source node into the heap with time 0\n        heapq.heappush(heap,(0,0))\n        \n        # Initializing the distance array with maximum values\n        dist=[[sys.maxsize,0]]*n\n        \n        # Setting the distance of the source node to (0,1)\n        dist[0]=[0,1]\n        \n        # Performing Dijkstra's Algorithm to find the shortest paths\n        while heap:\n            time,node=heapq.heappop(heap)\n            if node==n-1:\n                if shortest==sys.maxsize:\n                    shortest=time\n                continue\n            if shortest!=sys.maxsize and time>shortest:\n                break\n            for next_time,nei in graph[node]:\n                if time+next_time<=dist[nei][0]:\n                    if time+next_time==dist[nei][0]:\n                        dist[nei][1]+=dist[node][1]\n                    else:\n                        dist[nei]=[time+next_time,dist[node][1]]\n                        heapq.heappush(heap,(time+next_time,nei))  #add path to heap only if new_path has less time\n        return dist[n-1][1]%mod",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}