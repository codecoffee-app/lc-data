{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704545,
            "title": "Number of ways",
            "titleSlug": "number-of-ways2552",
            "content": "<p><span style=\"font-size:18px\">Given a value <strong>N</strong>. In how many ways you can construct a grid&nbsp;of size N x 4 using tiles of size 1 x 4.</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 1\r\n<strong>Output:</strong> 1\r\n<strong>Explaination:</strong> We can arrange the tiles horizontally \r\nand this is the only way.</span></pre>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 4\r\n<strong>Output:</strong> 2\r\n<strong>Explaination:</strong> The first way can be when all \r\nthe 1 x 4 tiles are arranged horizontally. \r\nSecond way can be when all the 1 x 4 tiles \r\nare arranged vertically.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>arrangeTiles()</strong> which takes the value N as input parameter and returns the number of ways to make N x 4 grid&nbsp;using 1 x 4 tiles.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 80</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a value N, determine the number of ways to construct a grid of size N x 4 using tiles of size 1 x 4.",
                "constraints": [
                    "1 <= N <= 80"
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "With N=1, the only way to tile the 1x4 grid is by arranging the 1x4 tile horizontally."
                    },
                    {
                        "input": "4",
                        "output": "2",
                        "explanation": "With N=4, we can either arrange all tiles horizontally or all tiles vertically."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Notice that the ith answer depends on (i-1)th and (i-4)th.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to arrange the tiles.\n    long long int arrangeTiles(int N){\n        //declaring an array to store the number of ways to arrange tiles for each number of tiles.\n        long long int dp[N+1];\n        dp[0] = 1;\n\n        //iterating through each number of tiles.\n        for(int i = 1;i <= N;i++){\n            //if the number of tiles is less than or equal to 3, there is only 1 way to arrange the tiles.\n            if(i == 1 || i == 2 || i == 3)\n                dp[i] = 1;\n            else\n                //if the number of tiles is greater than 3, the number of ways to arrange the tiles is equal to \n                //the sum of the number of ways to arrange the tiles for n-1 tiles and n-4 tiles.\n                dp[i] = dp[i-1] + dp[i-4];\n        }\n        //returning the number of ways to arrange the tiles for N tiles.\n        return dp[N];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    // Method to calculate the number of ways to arrange tiles\n    static long arrangeTiles(int N){\n        // Array to store the number of arrangements up to N\n        long [] dp = new long[N+1];\n        // Initial condition: 1 arrangement with no tiles\n        dp[0] = 1;\n\n        // Loop to calculate the number of arrangements for each N\n        for(int i = 1;i <= N;i++){\n            // Special case for N = 1, 2, and 3 as they have fixed arrangements\n            if(i == 1 || i == 2 || i == 3)\n                dp[i] = 1;\n            // For N > 3, use the recurrence relation dp[i] = dp[i-1] + dp[i-4]\n            else\n                dp[i] = dp[i-1] + dp[i-4];\n        }\n        // Return the number of arrangements for N\n        return dp[N];\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\r\n    # Function to arrange tiles\r\n    def arrangeTiles(self,N):\r\n        # Creating a dp array\r\n        dp=[0]*(N+1);\r\n        # Base case\r\n        dp[0] = 1;\r\n        \r\n        # Loop to calculate dp values\r\n        for i in range(1,N+1):\r\n            # Calling helper function to calculate dp[i]\r\n            self.helper(i,dp)\r\n        \r\n        # Returning the value of dp[N]\r\n        return dp[N];\r\n    \r\n    # Helper function to calculate dp[i]\r\n    def helper(self,i,dp):\r\n        # Base cases\r\n        if(i == 1 or i == 2 or i == 3):\r\n            dp[i] = 1;\r\n            return\r\n        \r\n        # Checking if previous values of dp are already calculated\r\n        if dp[i-1]==0:\r\n            dp[i-1]=self.helper(i-1,dp)\r\n        if dp[i-4]==0:\r\n            dp[i-4]=self.helper(i-4,dp)\r\n        \r\n        # Calculating dp[i]\r\n        dp[i]=dp[i-1]+dp[i-4]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    arrangeTiles(N) {\n        let dp = new Array(N+1);\n        dp[0] = 1;\n        for(let i=1; i<=N; i++){\n            if(i === 1 || i === 2 || i === 3)\n                dp[i] = 1;\n            else\n                dp[i] = dp[i-1] + dp[i-4];\n        }\n        return dp[N];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}