{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704737,
            "title": "Number Pattern",
            "titleSlug": "number-pattern0517",
            "content": "<p><span style=\"font-size:18px\">For a given number <strong>N</strong>. Print the pattern in the following form: 1 121 12321 1234321 for N = 4.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 3\n<strong>Output:</strong>\n1 121 12321\n<strong>Explanation:</strong>\nFor N = 3 we will print the 3 strings \naccording to the pattern.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 6\n<strong>Output:</strong>\n1 121 12321 1234321 123454321 12345654321\n<strong>Explanation:</strong>\nFor N = 6 we will print the 6 strings \naccording to the pattern.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong>&nbsp;&nbsp;<br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>numberPattern</strong>()&nbsp;which takes an integer <strong>N</strong> as input parameter and returns the list of strings to be printed.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N<sup>2</sup>)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 200</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N, generate a pattern where each line represents a palindrome built from increasing and then decreasing sequences of numbers. For N = 4, the pattern should be: 1 121 12321 1234321.",
                "constraints": [
                    "1 <= N <= 200"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "1 121 12321",
                        "explanation": "When N is 3, the pattern consists of the first three sequences: 1, 121, and 12321."
                    },
                    {
                        "input": "6",
                        "output": "1 121 12321 1234321 123454321 12345654321",
                        "explanation": "When N is 6, the pattern includes the first six sequences, extending up to 12345654321."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Observe the pattern and write the two nested for loops acordingly.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "pattern-printing",
                "slug": "pattern-printing"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution\n{\npublic:\n    //Function to convert an integer to a string.\n    string int_to_string(int x){\n        string ans;\n        //Loop until x becomes 0.\n        while(x){\n            //Appending the last digit of x to the ans string.\n            ans.push_back(char(x%10)+'0');\n            //Removing the last digit from x.\n            x/=10;\n        }\n        //Reversing the ans string to get the correct order.\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n    \n    //Function to generate number patterns.\n    vector<string> numberPattern(int N)\n    {\n        vector<string> res;\n        //Iterating from 1 to N.\n        for(int i = 1 ; i <= N ; i++){\n            \n            string temp;\n            \n            //Appending numbers from 1 to i in increasing order.\n            for(int j = 1 ; j <= i ; j++){\n                temp+=int_to_string(j);\n            }\n            \n            //Appending numbers from i-1 to 1 in decreasing order.\n            for(int j = i-1 ; j >= 1 ; j--){\n                temp+=int_to_string(j);\n            }\n            \n            //Adding the generated pattern to the result vector.\n            res.push_back(temp);\n        }\n        //Returning the generated number patterns.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n    {\n        //Complete this function\n        public List<string> numberPattern(int N)\n        {\n            List<string> res = new List<string>();\n            for(int i = 1 ; i <= N ; i++){\n                string temp = \"\";\n                for(int j = 1 ; j <= i ; j++){\n                    temp += int_to_string(j);\n                }\n                for(int j = i-1 ; j >= 1 ; j--){\n                    temp += int_to_string(j);\n                }\n                res.Add(temp);\n            }\n            return res;\n        }\n\n        //Function to convert an integer to a string.\n        string int_to_string(int x){\n            string ans = \"\";\n            while(x != 0){\n                ans += (char)(x%10+'0');\n                x /= 10;\n            }\n            char[] charArray = ans.ToCharArray();\n            Array.Reverse(charArray);\n            return new string(charArray);\n        }\n    }",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}