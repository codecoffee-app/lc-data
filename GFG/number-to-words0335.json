{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703242,
            "title": "Integer to Words",
            "titleSlug": "number-to-words0335",
            "content": "<p><span style=\"font-size: 18px;\">Write a function to convert a given number <strong>n</strong> into words.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\"><span style=\"white-space: pre-wrap; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; caret-color: #273239; color: #273239; font-family: Nunito, sans-serif; font-style: italic; letter-spacing: 0.162px;\">The idea is to break down the number into </span><strong style=\"white-space: pre-wrap; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; caret-color: #273239; color: #273239; font-family: Nunito, sans-serif; font-style: italic; letter-spacing: 0.162px;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">International Number System</strong></strong><span style=\"white-space: pre-wrap; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; caret-color: #273239; color: #273239; font-family: Nunito, sans-serif; font-style: italic; letter-spacing: 0.162px;\">, i.e., smaller groups of three digits</span><strong style=\"white-space: pre-wrap; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; caret-color: #273239; color: #273239; font-family: Nunito, sans-serif; font-style: italic; letter-spacing: 0.162px;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\"> (hundreds, tens, and ones), </strong></strong><span style=\"white-space: pre-wrap; box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; caret-color: #273239; color: #273239; font-family: Nunito, sans-serif; font-style: italic; letter-spacing: 0.162px;\">and convert each group into words.</span></span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 0\n<strong>Output:</strong> \"Zero\"</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 123\n<strong>Output:</strong> \"One Hundred Twenty Three\"\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 10245\n<strong>Output:</strong> \"Ten Thousand Two Hundred Forty Five\"</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><span style=\"font-size: 18px;\"> n = 2147483647<br /><strong>Output: </strong>\"Two Billion One Hundred Forty Seven Million Four Hundred Eighty Three Thousand Six Hundred Forty Seven\"</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /><span >0 &lt;= n &lt;= 2<sup>31</sup>-1</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Write a function that takes a non-negative integer `n` as input and returns its English word representation. The function should adhere to the International Number System (groups of three digits separated by commas).",
                "constraints": [
                    "0 <= n <= 2147483647 (2<sup>31</sup>-1)"
                ],
                "testcases": [
                    {
                        "input": "0",
                        "output": "Zero",
                        "explanation": null
                    },
                    {
                        "input": "123",
                        "output": "One Hundred Twenty Three",
                        "explanation": null
                    },
                    {
                        "input": "10245",
                        "output": "Ten Thousand Two Hundred Forty Five",
                        "explanation": null
                    },
                    {
                        "input": "2147483647",
                        "output": "Two Billion One Hundred Forty Seven Million Four Hundred Eighty Three Thousand Six Hundred Forty Seven",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Below representation shows place value chart for any 9 digits positive integer:</p>\n\n<pre>\n4  3  8  2  3  7  7  6  4\n|  |  |  |  |  |  |  |  |__ ones&#39; place\n|  |  |  |  |  |  |  |__ __ tens&#39; place\n|  |  |  |  |  |  |__ __ __ hundreds&#39; place\n|  |  |  |  |  |__ __ __ __ thousands&#39; place\n|  |  |  |  |__ __ __ __ __ tens thousands&#39; place\n|  |  |  |__ __ __ __ __ __ hundred thousands&#39; place\n|  |  |__ __ __ __ __ __ __ one millions&#39; place\n|  |__ __ __ __ __ __ __ __ ten millions&#39; place\n|__ __ __ __ __ __ __ __ __ hundred millions&#39; place\n</pre>\n\n<p>The idea is to divide the number into individual digits based on the above place value chart and handle them starting from the Most Significant Digit.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho",
            "amazon",
            "microsoft",
            "oracle"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    const vector<string> belowTen = {\"\",     \"One\", \"Two\",   \"Three\", \"Four\",\n                                     \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    const vector<string> belowTwenty = {\"Ten\",      \"Eleven\",  \"Twelve\",  \"Thirteen\",\n                                        \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\",\n                                        \"Eighteen\", \"Nineteen\"};\n    const vector<string> belowHundred = {\"\",       \"Ten\",   \"Twenty\", \"Thirty\",\n                                         \"Forty\",  \"Fifty\", \"Sixty\",  \"Seventy\",\n                                         \"Eighty\", \"Ninety\"};\n\n    string convertWords(int num) {\n        if (num < 10) {\n            return belowTen[num];\n        }\n        if (num < 20) {\n            return belowTwenty[num - 10];\n        }\n        if (num < 100) {\n            return belowHundred[num / 10] +\n                   (num % 10 ? \" \" + convertWords(num % 10) : \"\");\n        }\n        if (num < 1000) {\n            return convertWords(num / 100) + \" Hundred\" +\n                   (num % 100 ? \" \" + convertWords(num % 100) : \"\");\n        }\n        if (num < 1000000) {\n            return convertWords(num / 1000) + \" Thousand\" +\n                   (num % 1000 ? \" \" + convertWords(num % 1000) : \"\");\n        }\n        if (num < 1000000000) {\n            return convertWords(num / 1000000) + \" Million\" +\n                   (num % 1000000 ? \" \" + convertWords(num % 1000000) : \"\");\n        }\n        return convertWords(num / 1000000000) + \" Billion\" +\n               (num % 1000000000 ? \" \" + convertWords(num % 1000000000) : \"\");\n    }\n\n    string convertToWords(int n) {\n        if (n == 0) {\n            return \"Zero\";\n        }\n\n        return convertWords(n);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    private final List<String> belowTen = Arrays.asList(\n        \"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    private final List<String> belowTwenty =\n        Arrays.asList(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\",\n                      \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\");\n    private final List<String> belowHundred =\n        Arrays.asList(\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\",\n                      \"Seventy\", \"Eighty\", \"Ninety\");\n\n    private String convertWords(int num) {\n        if (num < 10) {\n            return belowTen.get(num);\n        }\n        if (num < 20) {\n            return belowTwenty.get(num - 10);\n        }\n        if (num < 100) {\n            return belowHundred.get(num / 10) +\n                (num % 10 != 0 ? \" \" + convertWords(num % 10) : \"\");\n        }\n        if (num < 1000) {\n            return convertWords(num / 100) + \" Hundred\" +\n                (num % 100 != 0 ? \" \" + convertWords(num % 100) : \"\");\n        }\n        if (num < 1000000) {\n            return convertWords(num / 1000) + \" Thousand\" +\n                (num % 1000 != 0 ? \" \" + convertWords(num % 1000) : \"\");\n        }\n        if (num < 1000000000) {\n            return convertWords(num / 1000000) + \" Million\" +\n                (num % 1000000 != 0 ? \" \" + convertWords(num % 1000000) : \"\");\n        }\n        return convertWords(num / 1000000000) + \" Billion\" +\n            (num % 1000000000 != 0 ? \" \" + convertWords(num % 1000000000) : \"\");\n    }\n\n    public String convertToWords(int n) {\n        if (n == 0) {\n            return \"Zero\";\n        }\n        return convertWords(n);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def __init__(self):\n        self.one = [\n            \"\", \"One \", \"Two \", \"Three \", \"Four \", \"Five \", \"Six \", \"Seven \",\n            \"Eight \", \"Nine \", \"Ten \", \"Eleven \", \"Twelve \", \"Thirteen \",\n            \"Fourteen \", \"Fifteen \", \"Sixteen \", \"Seventeen \", \"Eighteen \",\n            \"Nineteen \"\n        ]\n\n        self.ten = [\n            \"\", \"\", \"Twenty \", \"Thirty \", \"Forty \", \"Fifty \", \"Sixty \",\n            \"Seventy \", \"Eighty \", \"Ninety \"\n        ]\n\n    def num_to_words(self, n, s):\n        if n > 19:\n            str_num = self.ten[n // 10] + self.one[n % 10]\n        else:\n            str_num = self.one[n]\n        if n != 0:\n            str_num += s\n        return str_num\n\n    def convertToWords(self, n):\n        if n == 0:\n            return \"Zero\"\n\n        out = \"\"\n\n        # Handle billions\n        out += self.num_to_words(n // 1000000000, \"Billion \")\n\n        # Handle hundreds of millions and tens of millions\n        out += self.num_to_words((n // 100000000) % 10, \"Hundred \")\n        if (n // 100000000) % 10 != 0:\n            out += self.num_to_words((n // 1000000) % 100, \"\") + \"Million \"\n        else:\n            out += self.num_to_words((n // 1000000) % 100, \"Million \")\n\n        # Handle hundred thousands and ten thousands\n        out += self.num_to_words((n // 100000) % 10, \"Hundred \")\n        if (n // 100000) % 10 != 0:\n            out += self.num_to_words((n // 1000) % 100, \"\") + \"Thousand \"\n        else:\n            out += self.num_to_words((n // 1000) % 100, \"Thousand \")\n\n        # Handle hundreds\n        out += self.num_to_words((n // 100) % 10, \"Hundred \")\n\n        # Handle tens and ones\n        out += self.num_to_words(n % 100, \"\")\n\n        return out.strip()\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() {\n        this.belowTen = [\n            \"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n        ];\n        this.belowTwenty = [\n            \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\",\n            \"Seventeen\", \"Eighteen\", \"Nineteen\"\n        ];\n        this.belowHundred = [\n            \"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\",\n            \"Eighty\", \"Ninety\"\n        ];\n    }\n\n    convertWords(num) {\n        if (num < 10) {\n            return this.belowTen[num];\n        }\n        if (num < 20) {\n            return this.belowTwenty[num - 10];\n        }\n        if (num < 100) {\n            return this.belowHundred[Math.floor(num / 10)] +\n                   (num % 10 !== 0 ? \" \" + this.convertWords(num % 10) : \"\");\n        }\n        if (num < 1000) {\n            return this.convertWords(Math.floor(num / 100)) + \" Hundred\" +\n                   (num % 100 !== 0 ? \" \" + this.convertWords(num % 100) : \"\");\n        }\n        if (num < 1000000) {\n            return this.convertWords(Math.floor(num / 1000)) + \" Thousand\" +\n                   (num % 1000 !== 0 ? \" \" + this.convertWords(num % 1000) : \"\");\n        }\n        if (num < 1000000000) {\n            return this.convertWords(Math.floor(num / 1000000)) + \" Million\" +\n                   (num % 1000000 !== 0 ? \" \" + this.convertWords(num % 1000000) : \"\");\n        }\n        return this.convertWords(Math.floor(num / 1000000000)) + \" Billion\" +\n               (num % 1000000000 !== 0 ? \" \" + this.convertWords(num % 1000000000)\n                                       : \"\");\n    }\n\n    convertToWords(n) {\n        if (n === 0) {\n            return \"Zero\";\n        }\n        return this.convertWords(n);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}