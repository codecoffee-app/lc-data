{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704630,
            "title": "Numbers having alternate bits in range 1 to n",
            "titleSlug": "numbers-having-alternate-bits-in-range-1-to-n2350",
            "content": "<p><span style=\"font-size:18px\">Given a positive integer <strong>N</strong>. The problem is to print the numbers in the range 1 to n having bits in alternate pattern. Here alternate pattern means that the set and unset bits in the number occur in alternate order. For example- 5 has an alternate pattern i.e. 101.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nN = 10\r\n<strong>Output:</strong>&nbsp;1 2 5 10\r\n<strong>Explanation</strong>:\r\nBinary representation of 1 : 0001\r\nBinary representation of 2 : 0010\r\nBinary representation of 5 : 0101\r\nBinary representation of 10 : 1010\r\nHere, We can see that the bits \r\npattern in all the above configuration \r\nis alternate. So, we return an array\r\nhaving {1, 2, 5 and 10}. \r\n</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 50\r\n<strong>Output: </strong>1 2 5 10 21 42\r\n</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>printNumHavingAltBitPatrn()</strong>&nbsp;which takes the integer N as input parameters and returns an array of integers with alternate bits in the range <strong>1</strong> to <strong>N</strong>.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong> O(log(n))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>CONSTRAINTS:</strong><br />\r\n1&lt;= N &lt;=10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer N, find all numbers in the range 1 to N (inclusive) that have an alternate bit pattern in their binary representation. A number has an alternate bit pattern if its binary representation has alternating set (1) and unset (0) bits.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "1 2 5 10",
                        "explanation": "The binary representations are:\n1: 0001\n2: 0010\n5: 0101\n10: 1010\nEach of these numbers has an alternate bit pattern."
                    },
                    {
                        "input": "50",
                        "output": "1 2 5 10 21 42",
                        "explanation": "The numbers 1, 2, 5, 10, 21 and 42 are the only numbers between 1 and 50 (inclusive) that have an alternate bit pattern."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can Print Power of 2 and power of 2 + 1 every time untill the value is smaller than N.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete class template in C++\n\nclass Solution{\npublic:\n    //function to print numbers having alternate bit pattern\n    vector<int> printNumHavingAltBitPatrn(int n)\n    {\n        int curr_num = 1;\n        vector<int> v;\n        \n        //pushing current number to vector\n        v.push_back(curr_num);\n        \n        while (1) {\n            //left shift current number by 1\n            curr_num <<= 1;\n            \n            //break if current number becomes greater than n\n            if (n < curr_num)\n                break;\n            \n            //pushing current number to vector\n            v.push_back(curr_num);\n            \n            //creating new current number by left shifting 1 and XOR with 1\n            curr_num = ((curr_num) << 1) ^ 1;\n            \n            //break if current number becomes greater than n\n            if (n < curr_num)\n                break;\n            \n            //pushing current number to vector\n            v.push_back(curr_num);\n        }\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}