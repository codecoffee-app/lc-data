{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704525,
            "title": "Numbers with 0 as a digit",
            "titleSlug": "numbers-with-0-as-a-digit1336",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer N. The task is to count the number of integers from 1 to N(inclusive) which contain 0&rsquo;s as a digit.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 21\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: All numbers are 10,20.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\">&acirc;&euro;&lsaquo;<strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: N = 101\n<strong>Output:</strong> 11\n<strong>Explanation</strong>: All numbers are 10,20\n30,40,50,60,70,80,90,100,101.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>countZero()</strong>&nbsp;which takes&nbsp;<strong>N&nbsp;</strong>as inputs and returns the answer.<br /><br /><strong>Expected Time Complexity:</strong>&nbsp;O(log N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br /><br /><strong>Constraints:</strong><br />1 &le; N&le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, determine the count of integers from 1 to N (inclusive) that contain at least one digit '0'.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "21",
                        "output": "2",
                        "explanation": "The numbers between 1 and 21 containing a '0' are 10 and 20."
                    },
                    {
                        "input": "101",
                        "output": "11",
                        "explanation": "The numbers between 1 and 101 containing a '0' are 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, and 101."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Bruteforce method won&#39;t work here, Think something out of the box!</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "jabong"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{   \npublic:\n    int zeroUpto(int digits) { \n        // Refer below article for details \n        // https://www.geeksforgeeks.org/count-positive-integers-0-digit/ \n        int first = (pow(10,digits)-1)/9; \n        int second = (pow(9,digits)-1)/8; \n        return 9 * (first - second); \n    } \n      \n    // utility function to convert character representation \n    // to integer \n    int toInt(char c)  { \n        return int(c)-48; \n    } \n      \n    // counts numbers having zero as digits upto a given \n    // number 'num' \n    int countZero(int n) { \n        string num = to_string(n);\n        // k denoted the number of digits in the number \n        int k = num.length(); \n      \n        // Calculating the total number having zeros, \n        // which upto k-1 digits \n        int total = zeroUpto(k-1); \n      \n        // Now let us calculate the numbers which don't have \n        // any zeros. In that k digits upto the given number \n        int non_zero = 0; \n        for (int i=0; i<num.length(); i++) \n        { \n            // If the number itself contains a zero then \n            // decrement the counter \n            if (num[i] == '0') \n            { \n                non_zero--; \n                break; \n            } \n      \n            // Adding the number of non zero numbers that \n            // can be formed \n            non_zero += (toInt(num[i])-1) * (pow(9,k-1-i)); \n        } \n      \n        int no = 0, remaining = 0,calculatedUpto=0; \n      \n        // Calculate the number and the remaining after \n        // ignoring the most significant digit \n        for (int i=0; i<num.length(); i++) \n        { \n            no = no*10 + (toInt(num[i])); \n            if (i != 0) \n                calculatedUpto = calculatedUpto*10 + 9; \n        } \n        remaining = no-calculatedUpto; \n      \n        // Final answer is calculated \n        // It is calculated by subtracting 9....9 (d-1) times \n        // from no. \n        int ans = zeroUpto(k-1) + (remaining-non_zero-1); \n        return ans; \n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}