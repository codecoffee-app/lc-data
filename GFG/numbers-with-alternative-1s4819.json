{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705110,
            "title": "Numbers with alternative 1's",
            "titleSlug": "numbers-with-alternative-1s4819",
            "content": "<p><span style=\"font-size:18px\">Given a number n, the task is to find all 1 to n bit numbers with no consecutive 1&#39;s in their binary representation. </span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 3\n<strong>Output: </strong>1 2 4 5\n<strong>Explanation: </strong>All numbers upto 2 bit are:\n1 - 1\n2 - 10\n3 - 11\n4 - 100\n5 - 101\n6 - 110\n7 - 111\nHere 3, 6 and 7 have consecutive 1&#39;s in their \nbinary representation. </span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>n = 2\n<strong>Output: </strong>1 2 \n<strong>Explanation: </strong>All numbers upto 2 bit are:\n1 - 1\n2 - 10\n3 - 11\nHere 3 has consecutive 1&#39;s in it&#39;s\nbinary representation.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything.Your task is to complete the function&nbsp;<strong>numberWithNoConsecutiveOnes()&nbsp;</strong>which takes n as input parameter and returns a list of numbers in increasing order which do not contains 1&#39;s in their binary reperesentation.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(2<sup>n</sup>)<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(n)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= n &lt;= 20</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number `n`, find all integers from 1 to 2<sup>n</sup> - 1 (inclusive) that do not have consecutive 1's in their binary representation. Return a list of these numbers in increasing order.",
                "constraints": [
                    "1 <= n <= 20"
                ],
                "testcases": [
                    {
                        "input": "n = 3",
                        "output": "1 2 4 5",
                        "explanation": "For n=3, we consider numbers from 1 to 2<sup>3</sup> - 1 = 7. Their binary representations are:\n1: 001\n2: 010\n3: 011\n4: 100\n5: 101\n6: 110\n7: 111\nNumbers 3, 6, and 7 have consecutive 1's. Therefore, the result is 1, 2, 4, and 5."
                    },
                    {
                        "input": "n = 2",
                        "output": "1 2",
                        "explanation": "For n=2, we consider numbers from 1 to 2<sup>2</sup> - 1 = 3. Their binary representations are:\n1: 01\n2: 10\n3: 11\nOnly number 3 has consecutive 1's. The result is 1 and 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use backtracking.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    //map to store numbers with no consecutive ones\n    map<int,int> h;\n    \n    //helper function to generate numbers with no consecutive ones\n    void helper(int n, vector<int> sol)\n    {   \n        //check if the current number is valid\n        if (sol.size() <= n) \n        {\n            int ans = 0;\n            //calculate the decimal equivalent of the current number and insert into the map\n            for (int i = 0; i < sol.size(); i++)\n                ans += pow((double)2, i) * sol[sol.size() - 1 - i];\n            h[ans] = 1;\n\n            int last_element = sol[sol.size() - 1];\n            //if the last element is 1, add 0 and make a recursive call\n            if (last_element == 1) \n            {\n                sol.push_back(0);\n                helper(n, sol);\n            }\n            //if the last element is 0, add both 1 and 0 and make recursive calls\n            else\n            {\n                sol.push_back(1);\n                helper(n, sol);\n                sol.pop_back();\n                sol.push_back(0);\n                helper(n, sol);\n            }\n        }\n    }\n    \n    //function to generate numbers with no consecutive ones\n    vector<int>numberWithNoConsecutiveOnes(int n)\n    {\n        vector<int>sol;\n        sol.push_back(1);\n        helper(n, sol);\n        \n        sol.clear();\n        //copy the valid numbers from the map to the solution vector\n        for(auto i: h)\n            sol.push_back(i.first);\n        \n        //return the solution vector\n        return sol;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}