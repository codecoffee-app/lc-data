{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703032,
            "title": "Numbers with one absolute difference",
            "titleSlug": "numbers-with-one-absolute-difference2416",
            "content": "<p><span style=\"font-size:20px\">Given a number N. The task is to return&nbsp;all the numbers less than or equal to N in increasing order, with the fact that absolute difference between any adjacent digits of number should be 1.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 20\n<strong>Output:</strong> 10 12\n<strong>Explanation</strong>: Diff between 1 and 0 and\nDiff between 1 and 2 is one.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input</strong>:\nN = 9\n<strong>Output:</strong> -1\n<strong>Explanation</strong>: No such number exist.\n</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>absDifOne() </strong>which takes an integer as input and returns a list of numbers.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>&nbsp;: O(2<sup>Number of Digits in N</sup>)<br />\n<strong>Expected Auxiliary Space</strong>&nbsp;:&nbsp;O(2<sup>Number of Digits in N</sup>)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N&nbsp;&lt;= 10<sup>12</sup></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N, find all numbers less than or equal to N in increasing order such that the absolute difference between any two adjacent digits is 1.",
                "constraints": [
                    "1 <= N <= 10^12"
                ],
                "testcases": [
                    {
                        "input": "20",
                        "output": "10 12",
                        "explanation": "The absolute difference between digits in 10 is |1-0| = 1. The absolute difference between digits in 12 is |1-2| = 1."
                    },
                    {
                        "input": "9",
                        "output": "-1",
                        "explanation": "There are no numbers less than or equal to 9 where the absolute difference between adjacent digits is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think how will BFS help ?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "jabong"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\nclass Solution{\n    public:\n    \n    //Function to find all numbers with absolute difference as 1.\n    vector<long long> absDifOne(long long N)\n    {\n        //creating a queue and pushing numbers from 1 to 9.\n        queue<long long> q;\n        for(int i = 1;i<=9;i++)\n            q.push(i);\n        \n        //creating a vector to store the result.\n        vector<long long> res;\n        \n        //a flag to check if the task is done.\n        bool done = false;\n        \n        //loop until the task is done.\n        while(true)\n        {\n            //calculating the current size of the queue.\n            int size = q.size();\n            \n            //iterating over the numbers in the queue.\n            while(size--)\n            {\n                //popping the first number from the queue.\n                long long temp = q.front();\n                q.pop();\n                \n                //if the number is greater than 9 and less than or equal to N,\n                //add it to the result vector.\n                if(temp>9 && temp<= N)\n                {\n                    res.push_back(temp);\n                }\n                \n                //if the number is greater than N, set done flag to true and break.\n                if(temp>N)\n                {\n                    done = true;\n                    break;\n                }\n                \n                //finding the last digit of the current number.\n                int lastdigit = temp%10;\n                \n                //checking three cases: \n                //1. If the last digit is 0, create a neighbour by adding 1 to the current number.\n                //2. If the last digit is 9, create a neighbour by subtracting 1 from the current number.\n                //3. If the last digit is between 0 and 9, create two neighbours by adding 1 and subtracting 1 from the current number.\n                if(lastdigit==0)\n                {\n                    long long neighbourA = temp*10 + lastdigit + 1;\n                    q.push(neighbourA);\n                }\n                else if(lastdigit==9)\n                {\n                    long long neighbourB = temp*10 + lastdigit - 1;\n                    q.push(neighbourB);\n                }\n                else\n                {\n                    long long neighbourA = temp*10 + lastdigit + 1;\n                    long long neighbourB = temp*10 + lastdigit - 1;\n                    q.push(neighbourB);\n                    q.push(neighbourA);\n                }\n            }\n            \n            //if the task is done, break out of the loop.\n            if(done==true)\n                break;\n        }\n        \n        //returning the result vector.\n        return res;    \n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}