{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703229,
            "title": "Numbers with prime frequencies greater than or equal to k",
            "titleSlug": "numbers-with-prime-frequencies-greater-than-or-equal-to-k5823",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr</strong>. You need to find elements that appear a prime number of times in the array with minimum <strong>k</strong> frequency (frequency &gt;= k).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [11, 11, 11, 23, 11, 37, 51, 37, 37, 51, 51, 51, 51], k = 2\n<strong>Output:</strong> [37, 51]\n<strong>Explanation: </strong>11's count is 4, 23 count 1, 37 count 3, 51 count 5. 37 and 51 are two number that appear prime number of time and frequencies greater than or equal to k = 2.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong><span style=\"font-size: 18px;\"> arr[] = [11, 22, 33] </span><strong style=\"font-size: 18px;\">\nOutput:</strong><span style=\"font-size: 18px;\"> []<br /><strong>Explanation:</strong> In the array, the counts of elements are: 11 (1 time), 22 (1 time), 33 (1 time). None of these counts are prime numbers, so the output is an empty list.<br /></span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*sqrt(n)).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>4</sup><br />1 &le; arr[i] &le; 10<sup>6<br /></sup>1 &le; k &le; 100<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr`, find all elements that appear a prime number of times in the array, with a frequency greater than or equal to `k`. Return the elements in a list.",
                "constraints": [
                    "1 <= arr.size() <= 10^4",
                    "1 <= arr[i] <= 10^6",
                    "1 <= k <= 100"
                ],
                "testcases": [
                    {
                        "input": "arr = [11, 11, 11, 23, 11, 37, 51, 37, 37, 51, 51, 51, 51], k = 2",
                        "output": "[37, 51]",
                        "explanation": "The counts of elements are: 11 (4 times), 23 (1 time), 37 (3 times), and 51 (5 times).  The prime counts greater than or equal to k=2 are 3 (for 37) and 5 (for 51). Therefore, the output is [37, 51]."
                    },
                    {
                        "input": "arr = [11, 22, 33], k = 1",
                        "output": "[]",
                        "explanation": "The counts of elements are: 11 (1 time), 22 (1 time), 33 (1 time).  None of these counts (1) are prime numbers. Therefore, the output is an empty list."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Find elements in the array that appear a prime number of times. Ensure their frequency is at least k. Use a frequency map and check if each count is prime and valid.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Check if the number of occurrences are prime or not\n    bool isPrime(int n) {\n        if (n <= 1)\n            return false;\n        for (int i = 2; i * i <= n; i++) { // Optimized prime check\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    // Function to find numbers with prime occurrences\n    vector<int> primeOccurences(vector<int>& arr, int k) {\n        unordered_map<int, int> freqMap;\n\n        // Count frequencies of elements in the array\n        for (int num : arr)\n            freqMap[num]++;\n\n        // Find elements with prime frequencies and frequency at least k\n        vector<int> result;\n        for (const auto& entry : freqMap) {\n            if (isPrime(entry.second) && entry.second >= k)\n                result.push_back(entry.first);\n        }\n\n        sort(result.begin(), result.end());\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Check if the number of occurrences is prime\n    public boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    // Function to find numbers with prime occurrences\n    public List<Integer> primeOccurences(int[] nums, int k) {\n        Map<Integer, Integer> freqMap = new HashMap<>();\n\n        // Count frequencies of elements in the array\n        for (int num : nums) {\n            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);\n        }\n\n        // Find elements with prime frequencies and frequency at least k\n        List<Integer> result = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {\n            if (isPrime(entry.getValue()) && entry.getValue() >= k) {\n                result.add(entry.getKey());\n            }\n        }\n\n        Collections.sort(result); // Sort the result before returning\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "import heapq\nfrom collections import Counter\n\n\nclass Solution:\n    # Check if a number is prime\n    def isPrime(self, n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Function to find numbers with prime occurrences\n    def primeOccurences(self, arr, k):\n        freq_map = Counter(arr)  # Count frequencies of elements in the array\n\n        result = []\n        for num, freq in freq_map.items():\n            if self.isPrime(\n                    freq\n            ) and freq >= k:  # Check if frequency is prime and >= k\n                result.append(num)\n\n        return sorted(result)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to check if a number is prime\n    isPrime(n) {\n        if (n <= 1) return false;\n        for (let i = 2; i * i <= n; i++) {\n            if (n % i === 0) return false;\n        }\n        return true;\n    }\n\n    // Function to find numbers with prime occurrences\n    primeOccurences(arr, k) {\n        let freqMap = new Map();\n\n        // Count frequencies of elements in the array\n        for (let num of arr) {\n            freqMap.set(num, (freqMap.get(num) || 0) + 1);\n        }\n\n        let result = [];\n        // Find elements with prime frequencies and frequency at least k\n        for (let [num, freq] of freqMap.entries()) {\n            if (this.isPrime(freq) && freq >= k) {\n                result.push(num);\n            }\n        }\n\n        // If no valid number is found, return an empty array\n        return result.length > 0 ? result.sort((a, b) => a - b) : [];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}