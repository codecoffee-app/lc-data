{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703024,
            "title": "Nuts and Bolts Problem",
            "titleSlug": "nuts-and-bolts-problem0431",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">Given a set of </span><strong style=\"font-size: 18px;\">n</strong><span style=\"font-size: 18px;\">&nbsp;<strong>nuts</strong>&nbsp;&amp; </span><strong style=\"font-size: 18px;\">bolts</strong><span style=\"font-size: 18px;\">.&nbsp;There is a one-on-one mapping between nuts and bolts. You have to <strong>Match </strong>nuts and bolts efficiently. </span></span><span style=\"font-size: 18px;\">Comparison of a nut to another nut or a bolt to another bolt is not allowed. It means the nut can only be compared with the bolt and the bolt can only be compared with the nut to see which one is bigger/smaller.<br />The elements should follow the following <strong>order</strong>: <strong>{ !,#,$,%,&amp;,*,?,@,^ }</strong></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: Make all the required changes <strong>directly </strong>in the given arrays, output will be handled by the driver code.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5, nuts[] = {@, %, $, #, ^}, bolts[] = {%, @, #, $ ^}\n<strong>Output:</strong> \n# $ % @ ^\n# $ % @ ^<br /><strong>Explanation: </strong>As per the order # should come first after that $ then % then @ and ^. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 9, nuts[] = {^, &amp;, %, @, #, *, $, ?, !}, bolts[] = {?, #, @, %, &amp;, *, $ ,^, !}\n<strong>Output:</strong> \n! # $ % &amp; * ? @ ^\n! # $ % &amp; * ? @ ^<br /><span ><strong>Explanation: </strong>We'll have to match first ! then </span></span><span > # , $,  %,  &amp;,  *,  @,  ^,  ? as per the required ordering.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n(logn))<br /><strong>Expected Auxiliary Space:</strong> O(log(n))</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 9<br />The arrays 'nuts' and 'bolts' can only consist of the following elements: {'@', '#', '$', '%', '^', '&amp;', '?', '*', '!'}.<br />All the elements of arrays 'nuts' and 'bolts' should be unique.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Try using the quick sort technique.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "hike",
            "makemytrip",
            "maq-software",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Similar to standard partition method. Here we pass the pivot element\n    // too instead of choosing it inside the method.\n    int partition(char arr[], int low, int high, char pivot) {\n        int i = low;\n        char temp1, temp2;\n        for (int j = low; j < high; j++) {\n            if (arr[j] < pivot) {\n                temp1 = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp1;\n                i++;\n            } else if (arr[j] == pivot) {\n                temp1 = arr[j];\n                arr[j] = arr[high];\n                arr[high] = temp1;\n                j--;\n            }\n        }\n        temp2 = arr[i];\n        arr[i] = arr[high];\n        arr[high] = temp2;\n\n        // Return the partition index of an array based on the pivot\n        // element of other array.\n        return i;\n    }\n\n  public:\n    // Method which works just like quick sort\n    void matchPairsUtil(char *nuts, char *bolts, int low, int high) {\n        if (low < high) {\n            // Choose last character of bolts array for nuts partition.\n            int pivot = partition(nuts, low, high, bolts[high]);\n\n            // Now using the partition of nuts choose that for bolts\n            // partition.\n            partition(bolts, low, high, nuts[pivot]);\n\n            // Recur for [low...pivot-1] & [pivot+1...high] for nuts and\n            // bolts array.\n            matchPairsUtil(nuts, bolts, low, pivot - 1);\n            matchPairsUtil(nuts, bolts, pivot + 1, high);\n        }\n    }\n\n  public:\n    void matchPairs(int n, char nuts[], char bolts[]) {\n        matchPairsUtil(nuts, bolts, 0, n - 1);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to match pairs of characters from arrays a and b\n    void matchPairs(int n, char nuts[], char bolts[]) {\n        // Initialize an array c to store the count of different characters\n        int c[] = new int[n];\n        // Initialize variables i, j, and k\n        int i, j = 0, k;\n        // Initialize a hash array h to store frequency of characters (size 256 for\n        // ASCII)\n        int h[] = new int[256];\n        // Calculate frequency of characters in array a and store in hash array h\n        for (i = 0; i < n; i++) {\n            h[nuts[i]]++;\n        }\n        // Iterate over the hash array to get unique characters and store in arrays a\n        // and b\n        for (i = 0; i < 256; i++) {\n            if (h[i] > 0) {\n                // Assign character i to arrays a and b\n                nuts[j] = (char)i;\n                bolts[j++] = (char)i;\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    #Function to merge two sorted arrays\n    def merge(self, arr, low, high, mid):\n        i = low\n        j = mid + 1\n        temp = []\n        while (i <= mid and j <= high):\n            if arr[i] < arr[j]:\n                temp.append(arr[i])\n                i += 1\n            else:\n                temp.append(arr[j])\n                j += 1\n        temp += arr[i:mid + 1]\n        temp += arr[j:high + 1]\n        #Merging the two sorted subarrays\n        arr[low:high + 1] = temp\n\n    #Function to recursively sort the array using merge sort\n    def mergesort(self, arr, low, high):\n        if low == high:\n            return\n        mid = low + (high - low) // 2\n        self.mergesort(arr, low, mid)\n        self.mergesort(arr, mid + 1, high)\n        self.merge(arr, low, high, mid)\n\n    #Function to match pairs of nuts and bolts\n    def matchPairs(self, n, nuts, bolts):\n        #Sorting nuts and bolts arrays\n        self.mergesort(nuts, 0, n - 1)\n        self.mergesort(bolts, 0, n - 1)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    partition(arr, low, high, pivot) {\n        let i = low;\n        let temp1, temp2;\n        for (let j = low; j < high; j++) {\n            if (arr[j] < pivot) {\n                temp1 = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp1;\n                i++;\n            } else if (arr[j] == pivot) {\n                temp1 = arr[j];\n                arr[j] = arr[high];\n                arr[high] = temp1;\n                j--;\n            }\n        }\n        temp2 = arr[i];\n        arr[i] = arr[high];\n        arr[high] = temp2;\n\n        // Return the partition index of an array based on the pivot\n        // element of other array.\n        return i;\n    }\n\n    matchPairsUtil(nuts, bolts, low, high) {\n        if (low < high) {\n            // Choose last character of bolts array for nuts partition.\n            let pivot = this.partition(nuts, low, high, bolts[high]);\n\n            // Now using the partition of nuts choose that for bolts\n            // partition.\n            this.partition(bolts, low, high, nuts[pivot]);\n\n            // Recur for [low...pivot-1] & [pivot+1...high] for nuts and\n            // bolts array.\n            this.matchPairsUtil(nuts, bolts, low, pivot - 1);\n            this.matchPairsUtil(nuts, bolts, pivot + 1, high);\n        }\n    }\n\n    matchPairs(n, nuts, bolts) { this.matchPairsUtil(nuts, bolts, 0, n - 1); }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}