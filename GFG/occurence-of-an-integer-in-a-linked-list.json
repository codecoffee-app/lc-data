{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700019,
            "title": "Frequency in a Linked List",
            "titleSlug": "occurence-of-an-integer-in-a-linked-list",
            "content": "<p><span >Given a singly <strong>linked list</strong> and a <strong>key</strong>, count the number of occurrences of the given <strong>key</strong> in the linked list.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>Linked List: 1-&gt;2-&gt;1-&gt;2-&gt;1-&gt;3-&gt;1, key = 1<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700019/Web/Other/blobid2_1721116358.png\" width=\"475\" height=\"68\" /><br /></span><span ><strong>Output: </strong>4\n<strong>Explanation: </strong>1 appears 4 times.&nbsp;</span></pre>\n<pre><span ><strong>Input: </strong>Linked List: 1-&gt;2-&gt;1-&gt;2-&gt;1, key = 3<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700019/Web/Other/blobid1_1721116168.png\" width=\"359\" height=\"76\" /><br /><strong>Output: </strong>0\n<strong>Explanation: </strong>3 appears 0 times.</span></pre>\n<p><span ><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space: </strong>O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; number of nodes, key &le; 10<sup>5<br /></sup></span><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &le; data of node &le; 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list and a key value, determine the number of times the key appears within the linked list.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= key <= 10^5",
                    "1 <= data of node <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "Linked List: 1->2->1->2->1->3->1, key = 1",
                        "output": "4",
                        "explanation": "The key '1' appears 4 times in the given linked list."
                    },
                    {
                        "input": "Linked List: 1->2->1->2->1, key = 3",
                        "output": "0",
                        "explanation": "The key '3' does not appear in the linked list."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate the linked list and count the occurrences of the key.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count the number of occurrences of a given value in a linked list.\n    int count(struct Node* head, int key) {\n        // initializing current node as the head of the linked list and count as 0.\n        struct Node* current = head;\n        int count = 0;\n\n        // iterating through the linked list until current becomes null.\n        while (current != NULL) {\n            // if the data of current node matches the search value, increment count.\n            if (current->data == key)\n                count++;\n\n            // move current to the next node.\n            current = current->next;\n        }\n\n        // return the final count.\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int count(Node head, int key) {\n        // initialize a count variable to keep track of the number of occurrences\n        int count = 0;\n        // create a temporary node to traverse the linked list\n        Node temp = head;\n\n        // while there are still nodes in the linked list\n        while (head != null) {\n            // if the data in the current node matches the search value\n            if (head.data == key) {\n                // increment the count variable\n                count++;\n            }\n\n            // move to the next node in the linked list\n            head = head.next;\n        }\n\n        // return the final count\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def count(self, head, key):\n        # initializing current as the head node\n        current = head\n        # initializing count as 0\n        count = 0\n        # iterating over all the nodes in the linked list\n        while (current is not None):\n            # checking if the data of the current node is equal to the searched value\n            if current.data == key:\n                # incrementing the count by 1\n                count += 1\n            # moving to the next node\n            current = current.next\n        # returning the final count value\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    count(\n        head,\n        key) { // Function to count the occurrence of a specific value in a linked list.\n        let count = 0;   // Initialize a variable to store the count of occurrences.\n        let temp = head; // Create a temporary node to traverse the linked list.\n\n        while (head != null) { // Loop through the linked list until the end is reached.\n            if (head.data == key) // Check if the data of the current node is equal to\n                                  // the value we are searching for.\n                count++;          // If there is a match, increment the count.\n\n            head = head.next; // Move to the next node in the linked list.\n        }\n\n        return count; // Return the count of the occurrences of the searched value.\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}