{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700261,
            "title": "Odd even level difference",
            "titleSlug": "odd-even-level-difference",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree. Find the difference between the sum of node values at even levels and the sum of node values at odd levels.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root [1, 2, 3]\n\\t\\t1\n\\t    /   \\\n\\t   2     3</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> -4</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>sum at odd levels - sum at even levels = (1)-(2+3) = 1-5 = -4</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [10, 20, 30, 40, 60]\n\\t\\t10\n\\t    /    \\\n\\t  20\\t30\n\\t /     \\\\t   \n     40    60\\t</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 60</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>sum at odd levels - sum at even levels = (10+40+60) - (20+30) = 110 - 50 = 60</span> </pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>root = [1, 2, 4]\n\\t\\t1\n\\t    /   \\\n\\t   2     4</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> -4</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>sum at odd levels - sum at even levels = (1)-(2+4) = 1-6 = -5</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; number of nodes &le; 10<sup>5<br /></sup>1 &le; node-&gt;data &le; 10<sup>5</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the difference between the sum of node values at even levels and the sum of node values at odd levels.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3]",
                        "output": "-4",
                        "explanation": "The sum of node values at odd levels is 1. The sum of node values at even levels is 2 + 3 = 5.  The difference (odd - even) is 1 - 5 = -4."
                    },
                    {
                        "input": "[10, 20, 30, 40, 60]",
                        "output": "60",
                        "explanation": "The sum of node values at odd levels is 10 + 40 + 60 = 110. The sum of node values at even levels is 20 + 30 = 50. The difference (odd - even) is 110 - 50 = 60."
                    },
                    {
                        "input": "[1, 2, 4]",
                        "output": "-5",
                        "explanation": "The sum of node values at odd levels is 1. The sum of node values at even levels is 2 + 4 = 6. The difference (odd - even) is 1 - 6 = -5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >A straightforward method is to <strong>use </strong><a href=\"https://www.geeksforgeeks.org/level-order-tree-traversal/\"><strong>level order traversal</strong></a>. In the traversal, check the level of the current node, if it is odd, increment the odd sum by data of the current node, otherwise, increment even sum. Finally, return the difference between odd sum and even sum. </span></p>",
            "<p><span >The problem can also be solved <strong>using simple recursive traversal</strong>. We can recursively calculate the required difference as, value of root&rsquo;s data subtracted by the difference for subtree under left child and the difference for subtree under right child.&nbsp; </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n  public:\n    //Function to find the difference between sum of nodes at odd and even levels.\n    int getLevelDiff(Node *root)\n    {\n        //Base case: if root is NULL, return 0.\n        if(root==NULL)\n            return 0;\n        \n        //Return the difference between the value of root and the difference\n        //of the sum of nodes in the left and right subtrees recursively.\n    \treturn root->data - getLevelDiff(root->left) - getLevelDiff(root->right);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n/*\nclass Node{\n    int data;\n    Node left;\n    Node right;\n    Node(int data){\n        this.data = data;\n        left=null;\n        right=null;\n    }\n}\n*/\n\nclass Solution\n{\n\t//Function to get the difference between the sums of nodes at odd and even levels of a binary tree.\n\tint getLevelDiff(Node root)\n\t{\n\t\t//Base case: if root is null, return 0.\n\t\tif(root == null)\n\t\t\treturn 0;\n\t\t\n\t\t//Calculating the difference between the data of the root node and the difference between the sums of nodes\n\t\t//at odd and even levels of the left and right subtrees.\n\t\treturn root.data - getLevelDiff(root.left) - getLevelDiff(root.right);\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n'''\nclass Node:\n    def __init__(self, val):\n        self.right = None                    #initialize right child\n        self.data = val                      #initialize data \n        self.left = None                     #initialize left child\n'''\nclass Solution:\n    def getLevelDiff(self, root):\n        # Code here\n        \n        if root is None:\n            return 0                                   #if root is None, return 0\n        \n        return (root.data - self.getLevelDiff(root.left) - self.getLevelDiff(root.right))      #return the difference between root data and the difference between the left subtree and the right subtree.",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    getLevelDiff(root) {\n        // if root is null\n        if (root == null) return 0;\n        // return the difference between root data and the difference between the left\n        // subtree and the right subtree.\n        return root.data - this.getLevelDiff(root.left) - this.getLevelDiff(root.right);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}