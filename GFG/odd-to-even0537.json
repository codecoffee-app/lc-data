{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702990,
            "title": "Odd to Even",
            "titleSlug": "odd-to-even0537",
            "content": "<p><span style=\"font-size: 20px;\">Given an <strong>odd number</strong> in the form of string, the task is to make largest even number possible from the given number provided one is allowed to do exactly only one swap operation, if no such number is possible then return the input string itself.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\ns = 4543\n<strong>Output:</strong> 4534\n<strong>Explanation</strong>: Swap 4(3rd pos) and 3.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\ns = 1539\n<strong>Output:</strong> 1539\n<strong>Explanation</strong>: No even no. present.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task: &nbsp;</strong><br />You dont need to read input or print anything. Complete the function&nbsp;<strong>makeEven()</strong>&nbsp;which takes a string&nbsp;<strong>s</strong> as input parameter and returns a string after performing given operations.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(Length of Input string).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span><br />&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong><br /><span style=\"font-size: 18px;\">1 &lt;= Length of odd number string&lt;= 10<sup>5</sup></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an odd number represented as a string, find the largest possible even number that can be formed by swapping exactly one pair of digits. If no such number can be created, return the original string.",
                "constraints": [
                    "1 <= Length of odd number string <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "4543",
                        "output": "4534",
                        "explanation": "By swapping the last digit (3) with the last even digit encountered (4), the number becomes 4534, which is even and the largest possible."
                    },
                    {
                        "input": "1539",
                        "output": "1539",
                        "explanation": "There are no even digits in the input string. Therefore, no swap can result in an even number, and the original string is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse string from left to right and swap last digit of string with current digit if current digit is even and smaller than last digit.</p>",
            "<p>check the case when, if non of even digit is less then the last digit</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\n    public:\n    // Function to make the string even by swapping the last digit with the nearest even digit\n    string makeEven(string str)\n    {\n    \tint n = str.length();\n    \tint even = INT_MAX, index;\n    \t\n    \t// Iterating through the string to find an even digit\n    \tfor (int i = 0; i < n - 1; i++) {\n    \t\tif ((str[i] - '0') % 2 == 0) {\n    \t\t\teven = (str[i] - '0');\n    \t\t\tindex = i;\n    \t\t}\n    \t\t\n    \t\t// Checking if the even digit found is smaller than the last digit\n    \t\tif (even <= (str[n - 1] - '0'))\n    \t\t\tbreak;\n    \t}\n    \t\n    \t// If no even digit is found, return the original string\n    \tif (even == INT_MAX)\n    \t\treturn str;\n    \t\n    \t// Swapping the even digit with the last digit\n    \tswap(str[index], str[n - 1]);\n    \t\n    \treturn str; // Return the modified string\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to make string even.\n    def makeEven(self, Str):\n        \n        n=len(Str)\n        mei = -1\n        \n        #iterating over the string to find the first even number\n        #that is less than the last number in the string.\n        for i, e in enumerate(Str):\n            if int(e) % 2 == 0 and int(e) < int(Str[-1]):\n                mei = i\n                break\n            elif int(e) % 2 == 0:\n                mei = i\n    \n        #if no even number is found, return the original string as it is.\n        if mei == -1:\n            return Str\n            \n        #rearranging the string to make it even.\n        ans = Str[:mei] + Str[-1] + Str[mei+1:n-1]+Str[mei]\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n    * @param string str\n    * @returns string\n    */\n    makeEven(str) {\n        let n = str.length;\n        let even = Infinity;\n        let index;\n        \n        for (let i = 0; i < n - 1; i++) {\n            if (Number(str[i]) % 2 === 0) {\n                even = Number(str[i]);\n                index = i;\n            }\n            \n            if (even <= Number(str[n - 1])) {\n                break;\n            }\n        }\n        \n        if (even === Infinity) {\n            return str;\n        }\n        \n        let newArray = str.split('');\n        [newArray[index], newArray[n - 1]] = [newArray[n - 1], newArray[index]];\n        return newArray.join('');\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}