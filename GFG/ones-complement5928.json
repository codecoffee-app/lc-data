{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703733,
            "title": "One's Complement",
            "titleSlug": "ones-complement5928",
            "content": "<p><span style=\"font-size: 18px;\">Given an integer <strong>N</strong>, write a program to find the one&rsquo;s complement of the integer.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 5\n<strong>Output:</strong>\n2\n<strong>Explanation:</strong>\nbinary of 5 is 101\n1's complement of 101 is 010\n010 is 2 in its decimal form. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 255\n<strong>Output:</strong>\n0\n<strong>Explanation:</strong>\nbinary of 255 is 1111 1111\n1's complement of 1111 1111 is\n0000 0000 which is 0 in its decimal form.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>onesComplement()</strong>&nbsp;which takes an integer N&nbsp;as input parameter&nbsp;and returns an integer value, the&nbsp;one's complement of N.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong></span> <span style=\"font-size: 18px;\">O(1)</span><br /><span style=\"font-size: 18px;\"><strong>Expected Space Complexity:</strong></span> <span style=\"font-size: 18px;\">O(1)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 20px;\">1 &lt;= N &lt;= 10</span><sup><span style=\"font-size: 16.6667px;\">6</span></sup></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, find the one's complement of the integer.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "2",
                        "explanation": "The binary representation of 5 is 101. The one's complement of 101 is 010, which is 2 in decimal form."
                    },
                    {
                        "input": "255",
                        "output": "0",
                        "explanation": "The binary representation of 255 is 11111111. The one's complement of 11111111 is 00000000, which is 0 in decimal form."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">XOR of two bits are :<br />\n0 ^ 0 = 0<br />\n0 ^ 1 = 1<br />\n1 ^ 0 = 1<br />\n1 ^ 1 = 0</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    int onesComplement(int N){\n        // Find number of bits in the given integer \n        int number_of_bits = floor(log2(N))+1; \n        \n        // XOR the given integer with poe(2,  \n        // number_of_bits-1 and print the result  \n        return ((1 << number_of_bits) - 1) ^ N; \n    }\n};\n\n\n\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution{\n    static int onesComplement(int N){\n        // Find number of bits in the  \n        // given integer \n        int number_of_bits = (int)(Math.floor(Math.log(N) / Math.log(2))) + 1; \n  \n        // XOR the given integer with poe(2, \n        // number_of_bits-1 and print the result \n        return ((1 << number_of_bits) - 1) ^ N;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nimport math\nclass Solution:\n    def onesComplement(self,N):\n        # Find number of bits in \n        # the given integer \n        number_of_bits = (int)(math.floor(math.log(N) /\n                            math.log(2))) + 1; \n        \n        # XOR the given integer with pow(2,  \n        # number_of_bits-1 and print the result  \n        return ((1 << number_of_bits) - 1) ^ N;",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int onesComplement(int N)\n    {\n        // Find number of bits in the given integer \n        int number_of_bits = (int)(Math.Log(N) / Math.Log(2)) + 1;\n\n        // XOR the given integer with pow(2, number_of_bits-1) \n        // and print the result  \n        return ((1 << number_of_bits) - 1) ^ N;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to compute the ones complement of an integer.\n    onesComplement(N) {\n        // Find number of bits in the given integer.\n        let number_of_bits = Math.floor(Math.log2(N)) + 1;\n        \n        // XOR the given integer with pow(2, number_of_bits-1) and return the result.\n        return ((1 << number_of_bits) - 1) ^ N;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}