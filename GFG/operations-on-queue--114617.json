{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881419,
            "title": "Operations on Queue",
            "titleSlug": "operations-on-queue--114617",
            "content": "<p><span style=\"font-size: 18px;\">Given a queue of integers<strong> </strong>and <strong>Q</strong> queries. The task is to perform operations on the queue according to the query.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">Queries are as:</span></p>\n<ul>\n<li dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>i x :</strong> adds<strong> </strong>element <strong>x</strong> in the queue from the rear.</span></span></li>\n<li dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>r :</strong> removes<strong> </strong>the front element of the queue.</span></span></li>\n<li dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>h :</strong> returns</span> the front element.</span></li>\n<li dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>f y :</strong> check if the element<strong> </strong>y is present or not in the queue.</span> Return <strong>true</strong> if present, else <strong>false</strong>.</span></li>\n</ul>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\">Note: You need to complete the functions enqueue(), dequeue(), front() and find() which perform the operations described above.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Q = 6, Queries = [[i, 2], [i, 4], [i, 3], [i, 5], [h], [f, 8]]\n<strong>Output:\n</strong>2\nfalse<strong>\nExplanation: </strong>After inserting 2, 4, 3, and 5, the front element (h) is 2. The element 8 is not in the queue, so the find operation (f, 8) returns false.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Q = 4, Queries = [[i, 3] [i, 4] [r] [f, 3]]\n<strong>Output:<br /></strong></span><span style=\"font-size: 18px;\">false<strong>\nExplanation: </strong>After inserting 3 and 4, removing the front element (r) leaves 4 in the queue. The element 3 is not in the queue, so the find operation (f, 3) returns false.</span></pre>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= Q &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to push an element in queue.\n    void enqueue(queue<int> &q, int x) {\n        // inserting x using push operation.\n        q.push(x);\n    }\n\n    // Function to remove front element from queue.\n    void dequeue(queue<int> &q) {\n        // removing front element using pop operation.\n        q.pop();\n    }\n\n    // Function to find the front element of queue.\n    int front(queue<int> &q) {\n        // storing the front element in a variable.\n        int x = q.front();\n        // returning the front element.\n        return x;\n    }\n\n    // Function to find an element in the queue.\n    bool find(queue<int> q, int y) {\n        bool exists = false;\n\n        while (!q.empty()) {\n            // storing the front value in a variable.\n            int front = q.front();\n            // removing front element using pop operation.\n            q.pop();\n\n            // if the stored value is equal to the element we are\n            // finding, we store true in boolean variable.\n            if (front == y)\n                exists = true;\n        }\n\n        // if boolean variable is true, it means element is present in\n        // queue else it is absent.\n        return exists;\n    }\n};",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}