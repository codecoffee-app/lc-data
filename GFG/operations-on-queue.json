{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701148,
            "title": "Operations on Queue",
            "titleSlug": "operations-on-queue",
            "content": "<p><span style=\"font-size: 18px;\">Given a queue of <strong>integers </strong>and <strong>Q</strong> queries. The task is to perform operations on queue according to the query.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">Queries are as:</span></p>\n<ol>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>i x :</strong> (<strong>adds </strong>element x in the queue from rear)</span>.</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>r :</strong> (<strong>Removes</strong><strong> </strong>the <strong>front</strong> element of queue).</span></span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>h :</strong>&nbsp;(<strong>Returns</strong></span>&nbsp;the <strong>front</strong> element).</span></p>\n</li>\n<li dir=\"ltr\">\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>f y :</strong> (check if the element<strong> </strong>y is <strong>present or not </strong>in the queue).</span> Return&nbsp;\"<strong>Yes</strong>\" if present, else \"<strong>No</strong>\".</span></p>\n</li>\n</ol>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>Q = 6\nQueries = i 2 i 4 i 3 i 5 h f 8\n<strong>Output:\n</strong>2\nNo<strong>\nExplanation: </strong>Inserting 2, 4, 3, and 5\nonto the queue: 2 4 3 5. h means front\nSo front is 2. f is find. 8 is not in\nqueue so No.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>Q = 4\nQueries = i 3 i 4 r f 3\n<strong>Output: </strong>No<strong>\nExplanation: </strong>Inserting 3 and 4 . When\nwe return and remove 3 and then when\nwe find 3 , it will return NO as\noutput as 3 is not present in the\nqueue.</span></pre>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />Your task is to complete functions <strong>enqueue()</strong>, <strong>dequeue()</strong>, <strong>front()</strong> and <strong>find()&nbsp;</strong>which performs the operations described above in the problem description.</span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(1) for&nbsp;<strong>enqueue(), dequeue()&nbsp;</strong>and&nbsp;<strong>front()</strong>; O(N) for&nbsp;<strong>find().<br />Expected Auxiliary Space:&nbsp;</strong>O(1) for all the 4 functions.&nbsp;</span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= Q &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a queue data structure that supports the following operations:\n\n*   **i x:** Enqueue the integer `x` to the rear of the queue.\n*   **r:** Dequeue (remove) the element from the front of the queue.\n*   **h:** Return the element at the front of the queue without removing it.\n*   **f y:** Check if the integer `y` is present in the queue. Return \"Yes\" if present, otherwise return \"No\".",
                "constraints": [
                    "1 <= Q <= 1000, where Q is the number of queries."
                ],
                "testcases": [
                    {
                        "input": "Q = 6\nQueries = i 2 i 4 i 3 i 5 h f 8",
                        "output": "2\nNo",
                        "explanation": "The operations are as follows:\n1.  Enqueue 2: Queue = [2]\n2.  Enqueue 4: Queue = [2, 4]\n3.  Enqueue 3: Queue = [2, 4, 3]\n4.  Enqueue 5: Queue = [2, 4, 3, 5]\n5.  Front: Returns 2. Queue = [2, 4, 3, 5]\n6.  Find 8: 8 is not in the queue, so return No."
                    },
                    {
                        "input": "Q = 4\nQueries = i 3 i 4 r f 3",
                        "output": "No",
                        "explanation": "The operations are as follows:\n1. Enqueue 3: Queue = [3]\n2. Enqueue 4: Queue = [3, 4]\n3. Dequeue: Removes 3. Queue = [4]\n4. Find 3: 3 is not in the queue, so return No."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    public:\n    //Function to push an element in queue.\n    void enqueue(queue<int> &q,int x)\n    {\n        //inserting x using push operation.\n        q.push(x);\n    }\n    \n    //Function to remove front element from queue.\n    void dequeue(queue<int> &q)\n    {\n        //removing front element using pop operation.\n        q.pop();\n    }\n    \n    //Function to find the front element of queue.\n    int front(queue<int> &q)\n    {\n        //storing the front element in a variable.\n        int x=q.front();\n        //returning the front element.\n        return x;\n    }\n    \n    //Function to find an element in the queue.\n    string find(queue<int> q, int x)\n    {\n        bool exists=false;\n        \n        while(!q.empty())\n        {\n            //storing the front value in a variable.\n            int front=q.front();\n            //removing front element using pop operation.\n            q.pop();\n            \n            //if the stored value is equal to the element we are \n            //finding, we store true in boolean variable.\n            if(front==x)\n            exists=true;\n        }\n        \n        //if boolean variable is true, it means element is present in\n        //queue else it is absent.\n        if(exists==true){\n            return \"Yes\";\n        }\n        else{\n            return \"No\";\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    \n    //Function to push an element in queue.\n    void enqueue(Queue<Integer> q, int x)\n    {\n        //inserting x using add operation.\n        q.add(x);\n    }\n    \n    //Function to remove front element from queue.\n    void dequeue(Queue<Integer> q)\n    {\n        //removing front element using poll operation.\n        q.poll();\n    }\n    \n    //Function to find the front element of queue.\n    int front(Queue<Integer> q)\n    {\n        //returning the front element using peek operation.\n        return (q.peek());\n    }\n    \n    //Function to find an element in the queue.\n    String find(Queue<Integer> q, int x)\n    {\n        //using an iterator over queue.\n        Iterator<Integer> it = q.iterator();\n        \n        while(it.hasNext()){\n            //if element is present in queue, we return \"Yes\".\n            if(it.next()==x){\n                return \"Yes\";\n            }\n        }\n        //we reach the end without finding the given value so we return \"No\".\n        return \"No\";\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to push an element in queue.\n    def enqueue(self,q,x):\n        #inserting x in the back of queue.\n        q.append(x)\n    \n    #Function to remove front element from queue.\n    def dequeue(self,q):\n        #removing front element using pop operation.\n        q.pop(0) \n    \n    #Function to find the front element of queue.\n    def front(self,q):\n        #returning the first element of the queue i.e. q[0].\n        return q[0]\n    \n    #Function to find an element in the queue.\n    def find(self,q,x):\n        \n        #creating a copy of the queue.\n        copy = q[::-1]\n    \n        while len(copy):\n            #if element is present in queue, we return true.\n            if copy.pop() == x:\n                return True\n    \n        #we reach the end without finding the given value so we return false.\n        return False\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}