{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701147,
            "title": "Operations on Stack",
            "titleSlug": "operations-on-stack",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>stack </strong>of <strong>integers </strong>and <strong>Q</strong> queries. The task is to perform the operation on stack according to the query.</span></p>\n<p><span style=\"font-size: 18px;\">The queries can be of 4 types:</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>i x:</strong> (<strong>adds </strong>element x in the stack)</span>.<br /></span><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>r:</strong> (<strong>removes </strong>the topmost element from the stack).<br /></span></span><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>h:</strong> </span>Prints the topmost element.<br /></span><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>f y:</strong> (check if the <strong>element </strong>y is <strong>present or not </strong>in the stack).</span> Print \"<strong>Yes</strong>\" if present, else \"<strong>No</strong>\".</span>&nbsp;</p>\n</blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>Q = 6, Queries = [[i, 2], [i, 4], [i, 3],[i, 5], [h], [f, 8]]\n<strong>Output: \n</strong>5\nNo<strong>\nExplanation: </strong>Inserting 2, 4, 3, and 5 onto the stack. Returning top element which is 5. Finding 8 will give No, as 8 is not in the stack.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> Q = 4, Queries = [[i, 3], [i, 4], [r], [f, 3]]\n<strong>Output: \n</strong>Yes\n<strong>Explanation: </strong>Inserting 3 and 4 onto the stack. Removing 4 from the stack. Finding 3 will give Yes as output because 3 is available in the stack.</span></pre>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; Number of queries &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a stack of integers and a list of queries. Process each query and perform the corresponding operation on the stack. The queries are as follows:\n\n*   **i x:** Insert integer 'x' onto the top of the stack.\n*   **r:** Remove the integer at the top of the stack.\n*   **h:** Print the value of the integer at the top of the stack (without removing it).\n*   **f y:** Check if the integer 'y' is present in the stack. Print \"Yes\" if it is, and \"No\" otherwise.",
                "constraints": [
                    "1 <= Number of queries <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "Q = 6, Queries = [[i, 2], [i, 4], [i, 3],[i, 5], [h], [f, 8]]",
                        "output": "5\nNo",
                        "explanation": "The stack evolves as follows: [2] -> [2, 4] -> [2, 4, 3] -> [2, 4, 3, 5]. The top element is 5. Searching for 8 returns \"No\" because it is not in the stack."
                    },
                    {
                        "input": "Q = 4, Queries = [[i, 3], [i, 4], [r], [f, 3]]",
                        "output": "Yes",
                        "explanation": "The stack evolves as follows: [3] -> [3, 4] -> [3]. Searching for 3 returns \"Yes\" because it is in the stack."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n\n//Function to push an element into the stack.\nvoid insert(stack<int> &s,int x)\n{\n    s.push(x);\n}\n\n//Function to remove top element from stack.\nvoid remove(stack<int> &s)\n{\n    s.pop();\n}\n\n//Function to print the top element of stack.\nvoid headOf_Stack(stack<int> &s)\n{\n    int x=s.top();\n    cout<<x<<\" \"<<endl; \n}\n\n//Function to search an element in the stack.\nbool find(stack<int> s, int val)\n{\n    bool exists=false;\n    \n    //traversing while the stack is not empty.\n    while(!s.empty())       \n    {\n        //comparing the top element of stack with given number \n        //to be searched and popping it from stack. \n        int top=s.top();\n        s.pop();\n        if(top==val)        \n        exists=true;\n    }\n    \n    //if element is found, we return true else false.\n    if(exists==true){\n        return true;\n    }\n    else{\n        return false;\n    }\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\n\nclass Geeks\n{\n    //Function to push an element into the stack.\n    public static void insert(Stack<Integer> st, int x)\n    {\n        st.push(x);\n    }\n    \n    //Function to remove top element from stack.\n    public static void remove(Stack<Integer> st)\n    {\n        int x = st.pop();\n    }\n    \n    //Function to print the top element of stack.\n    public static void headOf_Stack(Stack<Integer> st)\n    {\n        int x = st.peek();\n        System.out.println(x + \" \");\n    }\n    \n    //Function to search an element in the stack.\n    public static boolean find(Stack<Integer> st, int val)\n    {\n        //if element is found in the stack, we return true else false.\n        if(st.search(val) >= 0){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n#Function to push an element into the stack.\ndef insert(stack,x):\n    stack.append(x)\n\n#Function to remove top element from stack.\ndef remove(stack):\n    stack.pop() \n\n#Function to print the top element of stack.\ndef headOf_Stack(stack):\n    return stack[-1] \n\n#Function to search an element in the stack.\ndef find(stack,x):\n    \n    #copying the given stack.\n    copy = stack[::-1] \n    \n    #comparing the top element of stack with given number \n    #to be searched and popping it from stack.\n    #if element is found, we return true else false.\n    while len(copy):\n        if copy.pop() == x:\n            return True \n\n    return False",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Function to push an element into the stack.\n    public void insert(Stack<int> s, int x)\n    {\n        s.Push(x);\n    }\n\n    //Function to remove top element from stack.\n    public void remove(Stack<int> s)\n    {\n        if (s.Count > 0)\n        {\n            s.Pop();\n        }\n    }\n\n    //Function to print the top element of stack.\n    public void headOf_Stack(Stack<int> s)\n    {\n        if (s.Count > 0)\n        {\n            int x = s.Peek();\n            Console.WriteLine(x + \" \");\n        }\n    }\n\n    //Function to search an element in the stack.\n    public bool find(Stack<int> s, int val)\n    {\n        bool exists = false;\n\n        //Creating a temporary stack to store elements while checking.\n        Stack<int> tempStack = new Stack<int>();\n\n        while (s.Count > 0)\n        {\n            int top = s.Peek();\n            s.Pop();\n            if (top == val)\n                exists = true;\n\n            //Pushing elements from the main stack to temporary stack.\n            tempStack.Push(top);\n        }\n\n        //Pushing back elements from temporary stack to main stack.\n        while (tempStack.Count > 0)\n        {\n            int top = tempStack.Peek();\n            tempStack.Pop();\n            s.Push(top);\n        }\n\n        return exists;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n\nclass Solution \n{\n    /**\n     * @param {stack} s\n     * @param {number} x\n    */\n    //Function to push an element into the stack.\n    insert(s, x)\n    {\n        s.arr.push(x);\n        s.top++;\n    }\n    \n    /**\n     * @param {stack} s\n    */\n    //Function to remove top element from stack.\n    remove(s)\n    {\n        s.arr.pop();\n        s.top--;\n    }\n    \n    /**\n     * @param {stack} s\n    */\n    //Function to print the top element of stack.\n    headOf_Stack(s)\n    {\n        let x = s.arr[s.top];\n        let str = '';\n        str += x + \" \";\n        console.log(str);\n    }\n    \n    /**\n     * @param {stack} s\n     * @param {number} val\n     * @returns {boolean}\n    */\n    //Function to search an element in the stack.\n    find(s, val)\n    {\n        let exists = false;\n        \n        let s1 = JSON.parse(JSON.stringify(s));\n        //traversing while the stack is not empty.\n        while(s1.top !== -1)     \n        {\n            //comparing the top element of stack with given number \n            //to be searched and popping it from stack.\n            let top = s1.arr[s1.top];\n            s1.arr.pop();\n            s1.top--;\n            if(top==val)         \n                exists=true;\n        }\n        \n        //if element is found, we return true else false.\n        if(exists==true){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    \n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}