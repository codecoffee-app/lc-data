{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 879277,
            "title": "Operator Overloading In Python",
            "titleSlug": "operator-overloading-in-python",
            "content": "<p><span >Implement a Python class <code>ComplexNumber</code> to demonstrate operator overloading for adding two complex numbers.</span></p>\n<p><span ><strong>Class Name:</strong> <code>ComplexNumber</code></span></p>\n<ul>\n<li>\n<p><span ><strong>Attributes</strong>:</span></p>\n<ul>\n<li><span ><code>real</code> (float): The real part of the complex number.</span></li>\n<li><span ><code>imaginary</code> (float): The imaginary part of the complex number.</span></li>\n</ul>\n</li>\n<li>\n<p><span ><strong>Constructor</strong>:</span></p>\n<ul>\n<li><span ><code>__init__(self, real, imaginary)</code>: Initializes the <code>real</code> and <code>imaginary</code> attributes with the given values.</span></li>\n</ul>\n</li>\n<li>\n<p><span ><strong>Methods/Functions</strong>:</span></p>\n<ol>\n<li>\n<p><span ><strong><code>__add__(self, other)</code></strong>:</span></p>\n<ul>\n<li><span ><strong>Parameters</strong>: <code>other</code> (another <code>ComplexNumber</code> object)</span></li>\n<li><span ><strong>Task</strong>: Overload the <code>+</code> operator to add two complex numbers. The addition of two complex numbers <code>(a + bi)</code> and <code>(c + di)</code> is calculated as:</span>\n<ul>\n<li><span >Real part: <code>a + c</code></span></li>\n<li><span >Imaginary part: <code>b + d</code></span></li>\n</ul>\n</li>\n<li><span ><strong>Return</strong>: A new <code>ComplexNumber</code> object representing the sum of the two complex numbers.</span></li>\n</ul>\n</li>\n<li>\n<p><span ><strong><code>__str__(self)</code></strong>:</span></p>\n<ul>\n<li><span ><strong>Parameters</strong>: None</span></li>\n<li><span ><strong>Task</strong>: Overload the string representation of the object to return the complex number in the format <code>\"a + bi\"</code>, where <code>a</code> is the real part and <code>b</code> is the imaginary part.</span></li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p><strong><span >Examples:</span></strong></p>\n<pre><strong><span >Input: </span></strong><span >real1 = 3, imaginary1 = 2, real2 = 1, imaginary2 = 7<br /><strong>Output: </strong>4 + 8i</span></pre>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a Python class called `ComplexNumber` to demonstrate operator overloading for the addition of two complex numbers. The class should have attributes for the real and imaginary parts, a constructor to initialize these attributes, an `__add__` method to overload the `+` operator, and a `__str__` method to represent the complex number as a string.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "real1 = 3, imaginary1 = 2, real2 = 1, imaginary2 = 7",
                        "output": "4 + 9i",
                        "explanation": "The sum of (3 + 2i) and (1 + 7i) is (3+1) + (2+7)i, which equals 4 + 9i."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass ComplexNumber:\n\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    # Overload the + operator for adding two complex numbers\n    def __add__(self, other):\n        real_part = self.real + other.real\n        imaginary_part = self.imaginary + other.imaginary\n        return ComplexNumber(real_part, imaginary_part)\n\n    # Overload the string representation of the object\n    def __str__(self):\n        return f\"{self.real} + {self.imaginary}i\"\n",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}