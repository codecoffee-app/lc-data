{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713976,
            "title": "Optimal Array",
            "titleSlug": "optimal-array--170647",
            "content": "<p><span style=\"font-size:18px\">You are given a <strong>sorted</strong> array <strong>a</strong> of length<strong> n</strong>. For each <strong>i</strong>(0&lt;=i&lt;=n-1), you have to make all the elements of the array from index 0 till i<strong> equal</strong>, using minimum number of operations. In one operation&nbsp;you either <strong>increase </strong>or <strong>decrease</strong> the array element by <strong>1</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">You have to return a <strong>list</strong> which contains the <strong>minimum</strong> number of operations for each i, to accomplish the above task.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong></span><br />\r\n<span style=\"font-size:18px\">1. 0-based indexing.<br />\r\n2. For each index, you need to consider the same array which was given to you at the start.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=4\r\nA={1,6,9,12}\r\n</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n0 5 8 14\r\n\r\n</span><strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">For i=0, We do not need to perform any \r\noperation, our array will be {1}-&gt;{1}.\r\nAnd minimum number of operations\r\nwill be 0.</span>\r\n\r\n<span style=\"font-size:18px\">For i=1, We can choose to convert all \r\nthe elements from 0&lt;=j&lt;=i to 4, our \r\narray will become {1,6}-&gt;{4,4}. And \r\nminimum number of operations will be \r\n|1-4|+|6-4|=5.</span>\r\n\r\n<span style=\"font-size:18px\">For i=2, We can choose to convert all \r\nthe elements from 0&lt;=j&lt;=i to 6, our \r\narray will become {1,6,9}-&gt;{6,6,6} and \r\nthe minimum number of operations will \r\nbe |1-6|+|6-6|+|9-6|=8.</span>\r\n\r\n<span style=\"font-size:18px\">Similarly, for i=3, we can choose to \r\nconvert all the elements to 8, \r\n{1,6,9,12}-&gt;{8,8,8,8}, and the \r\nminimum number of operations will be 14.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN=7\r\nA={1,1,1,7,7,10,19}\r\n</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong>\r\n0 0 0 6 12 21 33\r\n</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">Possible operations could be:\r\n{1}-&gt;{1}\r\n{1,1}-&gt;{1,1}\r\n{1,1,1}-&gt;{1,1,1}\r\n{1,1,1,7}-&gt;{1,1,1,1}\r\n{1,1,1,7,7}-&gt;{1,1,1,1,1}\r\n{1,1,1,7,7,10}-&gt;{5,5,5,5,5,5}\r\n{1,1,1,7,7,10,19}-&gt;{7,7,7,7,7,7,7}\r\n</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;optimalArray() which takes N(length of array) and&nbsp;&nbsp;an&nbsp;array&nbsp;A as input and returns an&nbsp;array of size N&nbsp;&nbsp;with optimal&nbsp;answer for each index i.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Expected Time Complexity: O(N)<br />\r\nExpected Auxiliary Space: O(1)</span></strong></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>6</sup><br />\r\n-10<sup>5</sup>&nbsp;&lt;= A[i] &lt;= 10<sup>5</sup></span><br />\r\n<span style=\"font-size:18px\">Sum of N over all test case does not exceed 10<sup>6</sup>.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a **sorted** array `a` of length `n`, find the minimum number of operations to make all elements from index 0 to `i` equal, for each `i` from 0 to `n-1`. In one operation, you can either **increase** or **decrease** an array element by 1. Return a list containing the minimum number of operations for each `i`.",
                "constraints": [
                    "1 <= N <= 10^6",
                    "-10^5 <= A[i] <= 10^5",
                    "Sum of N over all test cases does not exceed 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 4, A = {1, 6, 9, 12}",
                        "output": "0 5 8 14",
                        "explanation": "For i=0, no operations are needed: {1} -> {1}. Cost: 0.\nFor i=1, convert to 4: {1, 6} -> {4, 4}. Cost: |1-4| + |6-4| = 5.\nFor i=2, convert to 6: {1, 6, 9} -> {6, 6, 6}. Cost: |1-6| + |6-6| + |9-6| = 8.\nFor i=3, convert to 8: {1, 6, 9, 12} -> {8, 8, 8, 8}. Cost: |1-8| + |6-8| + |9-8| + |12-8| = 14."
                    },
                    {
                        "input": "N = 7, A = {1, 1, 1, 7, 7, 10, 19}",
                        "output": "0 0 0 6 12 21 33",
                        "explanation": "For i=0, no operations needed.\nFor i=1, no operations needed.\nFor i=2, no operations needed.\nFor i=3, convert to 1: {1, 1, 1, 7} -> {1, 1, 1, 1}. Cost: |7-1| = 6.\nFor i=4, convert to 1: {1, 1, 1, 7, 7} -> {1, 1, 1, 1, 1}. Cost: |7-1| + |7-1| = 12.\nFor i=5, convert to 5: {1, 1, 1, 7, 7, 10} -> {5, 5, 5, 5, 5, 5}. Cost: |1-5| + |1-5| + |1-5| + |7-5| + |7-5| + |10-5| = 4+4+4+2+2+5=21.\nFor i=6, convert to 7: {1, 1, 1, 7, 7, 10, 19} -> {7,7,7,7,7,7,7}. Cost: |1-7| + |1-7| + |1-7| + |10-7| + |19-7| = 6+6+6+3+12 = 33"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For any set of number, coverting all of them equal to there median can lead us to the right direction.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    //Function to find the optimal array.\n    vector<int> optimalArray(int n,vector<int> &a){\n        int sum1=0,sum2=0;\n        vector<int> ans;\n        int mid=(n+1)/2;\n        //iterating over the first half of the array.\n        for(int i=0;i<mid;i++){\n            sum1+=a[i];\n            //checking if there is a next element.\n            if(i*2<n){\n                sum2+=a[i*2];\n                //calculating the difference between the current element and the sum.\n                int diff=((i+1)*a[i])-sum1+((sum2-sum1)-i*a[i]);\n                ans.push_back(diff);\n            }\n            //checking if there is a next element.\n            if(i*2+1<n){\n                sum2+=a[i*2+1];\n                //calculating the difference between the current element and the sum.\n                int diff=((i+1)*a[i])-sum1+((sum2-sum1)-(i+1)*a[i]);\n                ans.push_back(abs(diff));\n            }\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\nclass Solution {\r\n    public long[] optimalArray(int n,int a[])\r\n    {\r\n        int sum1=0,sum2=0; //initialize two variables to store the sum of elements\r\n        long ans[]=new long[n]; //initialize an array to store the answers\r\n        int mid=(n+1)/2; //get the middle index of the array\r\n        int ind=0; //initialize an index variable\r\n        for(int i=0;i<mid;i++){ //iterate till the middle index\r\n            sum1+=a[i]; //add the current element to the sum1 variable\r\n            if(i*2<n){ //check if there is at least one more element to access\r\n                sum2+=a[i*2]; //add the next element to the sum2 variable\r\n                int diff=((i+1)*a[i])-sum1+((sum2-sum1)-i*a[i]); //calculate the difference between elements as per the formula given\r\n                ans[ind++]=diff; //store the difference in the answer array\r\n            }\r\n            if(i*2+1<n){ //check if there is another element to access\r\n                sum2+=a[i*2+1]; //add the next element to the sum2 variable\r\n                int diff=((i+1)*a[i])-sum1+((sum2-sum1)-(i+1)*a[i]); //calculate the difference between elements as per the formula given\r\n                if(diff<0){ //check if the difference is negative\r\n                    diff = diff*-1; //convert the difference to positive\r\n                }\r\n                ans[ind++]=diff; //store the difference in the answer array\r\n            }\r\n        }\r\n        return ans; //return the answer array\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import List\r\nclass Solution:\r\n    \r\n    # Function to find the optimal array\r\n    def optimalArray(self, n : int, a : List[int]) -> List[int]:\r\n        sum1=0\r\n        sum2=0\r\n        ans=[]\r\n        \r\n        # Finding the midpoint\r\n        mid=(n+1)//2\r\n        \r\n        # Looping through the array elements\r\n        for i in range(mid):\r\n            sum1+=a[i]\r\n            \r\n            # Calculating diff for even indexed elements\r\n            if 2*i<n:\r\n                sum2+=a[2*i]\r\n                diff=((i+1)*a[i])-sum1+((sum2-sum1)-i*a[i])\r\n                ans.append(diff)\r\n            \r\n            # Calculating diff for odd indexed elements\r\n            if 2*i+1<n:\r\n                sum2+=a[2*i+1]\r\n                diff=((i+1)*a[i])-sum1+((sum2-sum1)-(i+1)*a[i])\r\n                \r\n                # Taking absolute value if diff is negative\r\n                if diff<0:\r\n                    diff=diff*-1\r\n                ans.append(diff)\r\n        \r\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for Javascript\n/**\n * @param {number} n\n * @param {number[]} a\n * @returns {number[]}\n */\n\nclass Solution {\n    //Function to find the maximum length subsequence with difference between adjacent elements one and the elements are picked from the array.\n    optimalArray(n, a)\n    {\n        let sum1=0;\n        let sum2=0;\n        let ans=[];\n        \n        // Finding the midpoint\n        let mid=Math.floor((n+1)/2);\n        \n        // Looping through the array elements\n        for (let i = 0; i < mid; i++) {\n            sum1+=a[i];\n            \n            // Calculating diff for even indexed elements\n            if (2*i<n) {\n                sum2+=a[2*i];\n                let diff=((i+1)*a[i])-sum1+((sum2-sum1)-i*a[i]);\n                ans.push(diff);\n            }\n            \n            // Calculating diff for odd indexed elements\n            if (2*i+1<n) {\n                sum2+=a[2*i+1];\n                let diff=((i+1)*a[i])-sum1+((sum2-sum1)-(i+1)*a[i]);\n                \n                // Taking absolute value if diff is negative\n                if (diff<0) {\n                    diff=diff*-1;\n                }\n                ans.push(diff);\n            }\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}