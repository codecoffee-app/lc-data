{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701421,
            "title": "Optimal Strategy For A Game",
            "titleSlug": "optimal-strategy-for-a-game-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">You are given an integer array <strong>arr[] </strong>of size<strong> n</strong>. The array elements represent <strong>n</strong> coins<strong> </strong>of values<strong> v<sub>1</sub>, v<sub>2</sub>, ....v<sub>n</sub></strong>. You play against an opponent in an alternating<strong> </strong>way. </span><span style=\"font-size: 18px;\">In each turn, a player selects either the <strong>first </strong>or<strong> last </strong>coin from the <strong>row</strong>, removes it from the row permanently, and <strong>receives the coin's value</strong>. </span><span style=\"font-size: 18px;\">You need to determine the <strong>maximum </strong>possible amount of money<strong> </strong>you can win if you <strong>go first</strong>.<br />Note: Both the players are playing optimally.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [5, 3, 7, 10]\n<strong>Output: </strong>15<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">The user collects the maximum value as 15(10 + 5). It is guaranteed that we cannot get more than 15 by any possible moves.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">arr[] = [8, 15, 3, 7]\n<strong>Output: </strong>22<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">The user collects the maximum value as 22(7 + 15). It is guaranteed that we cannot get more than 22 by any possible moves.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2 &lt;= n &lt;= 10<sup>3</sup></span><br /><span style=\"font-size: 18px;\">1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an integer array `arr` of size `n`, representing the values of `n` coins. Two players take turns selecting either the first or last coin from the row, removing it permanently, and receiving its value. Your goal is to determine the maximum possible amount of money you can win if you go first, assuming both players play optimally.",
                "constraints": [
                    "2 <= n <= 10^3",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[5, 3, 7, 10]",
                        "output": "15",
                        "explanation": "The optimal strategy for the first player yields a maximum value of 15.  This can be achieved by picking 10 first, leaving [5, 3, 7].  The second player will pick 7 leaving [5,3]. The first player will pick 5 getting a total of 10 + 5 = 15. No other sequence of choices guarantees a higher score."
                    },
                    {
                        "input": "[8, 15, 3, 7]",
                        "output": "22",
                        "explanation": "The optimal strategy results in the first player collecting a maximum value of 22. This is achieved by picking 7 first, leaving [8, 15, 3]. Then no matter what the second player picks (8 or 3) we choose 15 and pick the other one in the end. Our sum becomes 7+15= 22."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Consider creating a 2D array to represent the state of the game and recursively determine the optimal solution.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to find the maximum possible amount of money we can win.\n\nclass Solution {\n  public:\n    int maximumAmount(vector<int> &arr) {\n        // creating a table to store solutions of subproblems.\n        int n = arr.size();\n        int table[n][n];\n\n        // filling table using above recursive formula. Note that the\n        // table is filled in diagonal fashion, from diagonal elements\n        // to table[0][n-1] which is the result.\n        for (int gap = 0; gap < n; ++gap) {\n            for (int i = 0, j = gap; j < n; ++i, ++j) {\n                // Here x is value of table[i + 2][j], y istable[i + 1][j - 1] and\n                //  z is table[i][j - 2] in above recursive formula.\n\n                int x = ((i + 2) <= j) ? table[i + 2][j] : 0;\n                int y = ((i + 1) <= (j - 1)) ? table[i + 1][j - 1] : 0;\n                int z = (i <= (j - 2)) ? table[i][j - 2] : 0;\n\n                table[i][j] = max(arr[i] + min(x, y), arr[j] + min(y, z));\n            }\n        }\n        // returning the result.\n        return table[0][n - 1];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass solve {\n    // Function to find the maximum possible amount of money we can win.\n    static int maximumAmount(int arr[]) {\n        // creating a table to store solutions of subproblems.\n        int n = arr.length;\n        int table[][] = new int[n][n];\n\n        // filling table using above recursive formula. Note that the\n        // table is filled in diagonal fashion, from diagonal elements\n        // to table[0][n-1] which is the result.\n        for (int gap = 0; gap < n; ++gap) {\n            for (int i = 0, j = gap; j < n; ++i, ++j) {\n\n                // Here x is value of table[i + 2][j], y istable[i + 1][j - 1]\n                // and z is table[i][j - 2] in above recursive formula.\n\n                int x = ((i + 2) <= j) ? table[i + 2][j] : 0;\n                int y = ((i + 1) <= (j - 1)) ? table[i + 1][j - 1] : 0;\n                int z = (i <= (j - 2)) ? table[i][j - 2] : 0;\n\n                table[i][j] =\n                    Math.max(arr[i] + Math.min(x, y), arr[j] + Math.min(y, z));\n            }\n        }\n        // returning the result.\n        return table[0][n - 1];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n#Function to find the maximum possible amount of money we can win.\nclass Solution:\n\n    def optimalStrategyOfGame(self, arr):\n\n        #creating a table to store solutions of subproblems.\n        n = len(arr)\n        table = [[0 for i in range(n)] for i in range(n)]\n\n        #filling table using above recursive formula. Note that the\n        #table is filled in diagonal fashion, from diagonal elements\n        #to table[0][n-1] which is the result.\n        for gap in range(n):\n            for j in range(gap, n):\n                i = j - gap\n\n                #Here x is value of table[i + 2][j], y istable[i + 1][j - 1]\n                #and  z is table[i][j - 2] in above recursive formula.\n\n                x = 0\n                if ((i + 2) <= j):\n                    x = table[i + 2][j]\n                y = 0\n                if ((i + 1) <= (j - 1)):\n                    y = table[i + 1][j - 1]\n                z = 0\n                if (i <= (j - 2)):\n                    z = table[i][j - 2]\n                table[i][j] = max(arr[i] + min(x, y), arr[j] + min(y, z))\n\n        #returning the result.\n        return table[0][n - 1]\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    public int maximumAmount(int[] arr) {\n        // creating a table to store solutions of subproblems.\n        int n = arr.Length;\n        int[,] table = new int[n, n];\n\n        // filling table using above recursive formula. Note that the\n        // table is filled in diagonal fashion, from diagonal elements\n        // to table[0][n-1] which is the result.\n        for (int gap = 0; gap < n; ++gap) {\n            for (int i = 0, j = gap; j < n; ++i, ++j) {\n                // Here x is value of table[i + 2,j], y istable[i + 1,j - 1] and\n                //  z is table[i,j - 2] in above recursive formula.\n\n                int x = ((i + 2) <= j) ? table[i + 2, j] : 0;\n                int y = ((i + 1) <= (j - 1)) ? table[i + 1, j - 1] : 0;\n                int z = (i <= (j - 2)) ? table[i, j - 2] : 0;\n\n                table[i, j] =\n                    Math.Max(arr[i] + Math.Min(x, y), arr[j] + Math.Min(y, z));\n            }\n        }\n        // returning the result.\n        return table[0, n - 1];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {BigInt}\n */\n\nclass Solution {\n    min(x, y) { return x < y ? x : y; }\n\n    max(x, y) { return x > y ? x : y; }\n\n    // Function to find the maximum possible amount of money we can win.\n    maximumAmount(arr) {\n        // creating a table to store solutions of subproblems.\n        let n = arr.length;\n        let table = new Array(n);\n        for (let i = 0; i < n; i++) table[i] = new Array(n);\n\n        // filling table using above recursive formula. Note that the\n        // table is filled in diagonal fashion, from diagonal elements\n        // to table[0][n-1] which is the result.\n        for (let gap = 0; gap < n; ++gap) {\n            for (let i = 0, j = gap; j < n; ++i, ++j) {\n                // Here x is value of table[i + 2][j], y istable[i + 1][j - 1]\n                // and z is table[i][j - 2] in above recursive formula.\n\n                let x = ((i + 2) <= j) ? table[i + 2][j] : 0n;\n                let y = ((i + 1) <= (j - 1)) ? table[i + 1][j - 1] : 0n;\n                let z = (i <= (j - 2)) ? table[i][j - 2] : 0n;\n\n                table[i][j] = this.max(BigInt(arr[i]) + BigInt(this.min(x, y)),\n                                       BigInt(arr[j]) + BigInt(this.min(y, z)));\n            }\n        }\n        // returning the result.\n        return table[0][n - 1];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}