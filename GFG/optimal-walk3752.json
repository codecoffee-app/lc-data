{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704530,
            "title": "Optimal walk",
            "titleSlug": "optimal-walk3752",
            "content": "<p><span style=\"font-size:18px\">Given a point on x axis, (<strong>N</strong>,0),&nbsp;you are standing at origin and you can only move on x-axis. Lets say you are at (x,0), at each step you can either move one step forward ie (x+1,0) or one step backwards (x-1,0) or make a jump to double your current position&nbsp;(2*x,0).&nbsp;One step movement costs you <strong>A</strong> while a jump costs you <strong>B</strong>. If your initial position is (0,0) , find the minimum cost to reach (N,0) .</span></p>\n\n<p><br />\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 7, A = 1, B = 100\n<strong>Output:</strong> 7\n<strong>Explaination:</strong> Move forward to (N, 0) one \nunit at each step.</span></pre>\n\n<p><br />\n<strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 8, A = 2, B = 4\n<strong>Output:</strong> 12\n<strong>Explaination:</strong> The optimal movement is to \n1, 2, 3, 4, 8.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>optimalWalk()</strong> which takes N, A and B as input parameters and returns the minimum cost to go to (N, 0) from (0, 0).</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup><br />\n1 &le; A, B &le; 10<sup>9</sup>&nbsp; &nbsp;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try out all possible moves standing on each position and find out the minimum cost to reach the point. This subproblem is similar to main problem which leads to optimal substructure property of dynamic programming.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the optimal walk distance\n    long long optimalWalk(long long N, long long A, long long B) \n    {\n        // Initialize an array to store the optimal walk distance for each position\n        long long dp[N+1];\n        dp[1] = A;\n\n        // Iterating over each position\n        for(int i = 2; i <= N; i++)\n        {\n            // Calculate the minimum distance by considering different possibilities\n            dp[i] = min(dp[i/2+(i%2)] + B + A*(i%2), min(dp[i/2] + B + (i%2)*A, dp[i-1] + A));\n        }\n        \n        // Return the optimal walk distance for N positions\n        return dp[N];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def optimalWalk(self,N,A,B):\n        dp=[0]*(N+1); # initialize a list dp with length N+1, all elements are 0\n        dp[1] = A; # set dp[1] as value A\n        for i in range(2,N+1): # iterate from 2 to N+1\n            dp[i] = min(dp[i//2+(i%2)]+B+A*(i%2), min(dp[i//2]+B+(i%2)*A, dp[i-1]+A)); # calculate dp[i] using three different formulas\n        return dp[N]; # return the value of dp[N]",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number} A\n * @param {number} B\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the minimum number of steps.\n    optimalWalk(N, A, B) {\n        let dp = new Array(N+1).fill(0); // initialize a list dp with length N+1, all elements are 0\n        dp[1] = A; // set dp[1] as value A\n        for(let i = 2; i <= N; i++) { // iterate from 2 to N+1\n            dp[i] = Math.min(dp[Math.floor(i/2)+(i%2)]+B+A*(i%2), Math.min(dp[Math.floor(i/2)]+B+(i%2)*A, dp[i-1]+A)); // calculate dp[i] using three different formulas\n        }\n        return dp[N]; // return the value of dp[N]\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public long optimalWalk(long N, long A, long B)\n    {\n        // Initialize an array to store the optimal walk distance for each position\n        long[] dp = new long[N+1];\n        dp[1] = A;\n\n        // Iterating over each position\n        for(int i = 2; i <= N; i++)\n        {\n            // Calculate the minimum distance by considering different possibilities\n            dp[i] = Math.Min(dp[i/2+(i%2)] + B + A*(i%2), Math.Min(dp[i/2] + B + (i%2)*A, dp[i-1] + A));\n        }\n        \n        // Return the optimal walk distance for N positions\n        return dp[N];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}