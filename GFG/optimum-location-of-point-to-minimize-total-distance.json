{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709898,
            "title": "Optimum location of point to minimize total distance",
            "titleSlug": "optimum-location-of-point-to-minimize-total-distance",
            "content": "<p><span style=\"font-size: 18px;\">Given a set of coordinates <strong>points&nbsp;</strong>of the form [p, q]&nbsp;and a line <strong>L</strong>&nbsp;of the form <strong>ax + by + c = 0</strong>. The task is to find a point on a given line for which the sum of distances from a given set of coordinates&nbsp;is minimum.&nbsp;</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nL = {1, -1, -3}\npoints[] = {{-3, 2}, {-1, 0}, \n&nbsp;\\t     {-1, 2}, {1, 2}, {3, 4}}\n<strong>Output: </strong>20.77\n<strong>Explanation:</strong> In above figure optimum location of \npoint of x - y - 3 = 0 line is (2, -1), whose \ntotal distance with other points is 20.77, \nwhich is minimum obtainable total distance.\n<img style=\"height: 200px; width: 233px;\" src=\"https://media.geeksforgeeks.org/img-practice/Optimum-location-of-point-to-minimize-total-distance-1644650073.jpg\" alt=\"\" />\n\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nL = {2, 1, 4}\npoints[] = {{-1, 2}, {1, 3},{2, 4}}\n<strong>Output: </strong>11.20\n</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>findOptimumCost()</strong>&nbsp;which takes a line L and coordinates&nbsp;and returns an double up to 2 decimal places&nbsp;as output.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(NlogN)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>5</sup><br />-10<sup>3&nbsp;</sup>&lt;= point[i] &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of coordinates `points` of the form [p, q] and a line L of the form ax + by + c = 0, find a point on the given line for which the sum of distances from the given set of coordinates is minimized.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^3 <= point[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "L = {1, -1, -3}\npoints[] = {{-3, 2}, {-1, 0}, {-1, 2}, {1, 2}, {3, 4}}",
                        "output": "20.77",
                        "explanation": "The optimum location of the point on the line x - y - 3 = 0 that minimizes the total distance to the given points is (2, -1). The total distance from this point to all other points is approximately 20.77."
                    },
                    {
                        "input": "L = {2, 1, 4}\npoints[] = {{-1, 2}, {1, 3},{2, 4}}",
                        "output": "11.20",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "#define sq(x) ((x) * (x))\r\n#define EPS 1e-6\r\n\r\nclass Solution{\r\n    public:\r\n    double dist(double x, double y, pair<int,int>p){\r\n\t    return sqrt(sq(x - p.first) + sq(y - p.second));\r\n    }\r\n    double compute(vector<pair<int,int>>p, int n, tuple<int,int,int>l, double X){\r\n\t    double res = 0;\r\n\r\n\t    // calculating Y of chosen point by line equation\r\n\t    double Y = -1 * (get<2>(l) + get<0>(l) * X) /get<1>(l);\r\n\t    for (int i = 0; i < n; i++){\r\n\t\t    res += dist(X, Y, p[i]);\r\n\t    }\r\n\t    return res;\r\n    }\r\n\r\n    // Utility method to find minimum total distance\r\n    double findOptimumCost(tuple<int,int,int>l, vector<pair<int,int>>p, int n){\r\n\t    double low = -1e6;\r\n\t    double high = 1e6;\r\n\r\n\t    // loop until difference between low and high\r\n\t    // become less than EPS\r\n\t    while ((high - low) > EPS) {\r\n\t\t    // mid1 and mid2 are representative x co-ordiantes\r\n\t\t    // of search space\r\n\t\t    double mid1 = low + (high - low) / 3;\r\n\t\t    double mid2 = high - (high - low) / 3;\r\n\r\n\r\n\t    \tdouble dist1 = compute(p, n, l, mid1);\r\n\t\t    double dist2 = compute(p, n, l, mid2);\r\n\r\n\t\t    // if mid2 point gives more total distance,\r\n\t\t    // skip third part\r\n\t\t    if (dist1 < dist2)\r\n\t\t\t    high = mid2;\r\n\r\n\t\t    // if mid1 point gives more total distance,\r\n\t\t    // skip first part\r\n\t\t    else\r\n\t\t\t    low = mid1;\r\n\t    }\r\n\r\n\t    // compute optimum distance cost by sending average\r\n\t    // of low and high as X\r\n\t    return compute(p, n, l, (low + high) / 2);\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n\n\nclass Solution {\n    public static double findOptimumCost(int[] line, int n, int[][] points) {\n        double low = -1e4, high = 1e4;\n        double eps = 1e-6;\n        while((high - low) > eps){\n            double mid1 = low + (high - low) / 3;\n            double mid2 = high - (high - low) / 3;\n            double dis1 = compute(line, points, mid1);\n            double dis2 = compute(line, points, mid2);\n            if(dis1 < dis2){\n                high = mid2;\n            } else{\n                low = mid1;\n            }\n        }\n        return compute(line, points, high);\n    }\n    static double compute(int line[], int points[][], double x){\n        double y = (-line[2] - line[0] * x) / line[1];\n        double dist = 0;\n        for(int p[] : points){\n            dist += Math.sqrt(\n                (x - p[0]) * (x - p[0]) + (y - p[1]) * (y - p[1])\n            );\n        }\n        return dist;\n    }\n}\n        \n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}