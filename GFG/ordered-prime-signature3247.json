{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705050,
            "title": "Ordered Prime Signature",
            "titleSlug": "ordered-prime-signature3247",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>n</strong>, find the ordered prime signatures and&nbsp;find the number of divisor of&nbsp;<strong>n</strong>.Any positive integer, &lsquo;n&rsquo; can be expressed in the form of its prime factors. If &lsquo;n&rsquo; has p<sub>1</sub>, p<sub>2</sub>, &nbsp;etc. as its prime factors, then n can be expressed as :<br />\r\n<img alt=\"n = {p_1}^{e1} * {p_2}^{e2} * ...\" src=\"https://www.geeksforgeeks.org/wp-content/ql-cache/quicklatex.com-bd76dd88135372d3da515ba860151eaf_l3.svg\" style=\"height:29px; width:212px\" title=\"Rendered by QuickLaTeX.com\" /><br />\r\nArrange the obtained exponents of the prime factors of &lsquo;n&rsquo; in non-decreasing order. The arrangement thus obtained is called the&nbsp;<strong>ordered prime signature</strong>&nbsp;of the positive integer &lsquo;n&rsquo;.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 20\r\n<strong>Output:</strong> 1 2\r\n\\t  6\r\n<strong>Explaination:</strong> 20 can be written as 2<sup>2</sup> * 5. The \r\nordered pair is 2 1 and the factors are 1, 2, 4, \r\n5, 10, 20.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> n = 13\r\n<strong>Output:</strong> 1\r\n\\t  2\r\n<strong>Explaination:</strong> 13 itself is a prime number \r\nand it has two factors 1 and 13.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>orderedPrime()</strong> which takes n as input parameter and returns a list containing the powers in non-decreasing manner and the number of factors at the end of the list. The driver code will itself print the number of factors (last element of the returned list) in a new line.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time&nbsp;Complexity:</strong> O(nsqrt(n))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(n)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n2 &le; n &le; 10<sup>6</sup>&nbsp;&nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number *n*, determine its ordered prime signature and the number of its divisors. Any positive integer *n* can be expressed as a product of its prime factors. If p<sub>1</sub>, p<sub>2</sub>, etc., are the prime factors of *n*, then n = p<sub>1</sub><sup>e1</sup> * p<sub>2</sub><sup>e2</sup> * ...  The ordered prime signature of *n* is obtained by arranging the exponents (e1, e2, ...) of the prime factors in non-decreasing order. Return the ordered exponents along with the count of divisors.",
                "constraints": [
                    "2 <= n <= 10<sup>6</sup>"
                ],
                "testcases": [
                    {
                        "input": "20",
                        "output": "1 2\n6",
                        "explanation": "20 can be written as 2<sup>2</sup> * 5<sup>1</sup>. The exponents are 2 and 1. Arranging them in non-decreasing order gives 1, 2. The factors of 20 are 1, 2, 4, 5, 10, 20. Hence, there are 6 factors."
                    },
                    {
                        "input": "13",
                        "output": "1\n2",
                        "explanation": "13 is a prime number and can be written as 13<sup>1</sup>. The exponent is 1. The factors of 13 are 1 and 13. Hence, there are 2 factors."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If a number N&nbsp;= P1<sup>e1</sup>&nbsp;x P2<sup>e2</sup>&nbsp;x ... , where P1, P2 are all prime numbers, then total number of&nbsp; divisors are<br />\n(e1 + 1)x(e2+1)x . . .</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Prime Number",
                "slug": "prime-number"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find the ordered prime factors of a number\n    vector<int> orderedPrime(int n){\n        // If n is 2, return {1, 2}\n        if(n == 2){\n            vector<int> sol;\n            sol.emplace_back(1);\n            sol.emplace_back(2);\n            return sol;\n        }\n        int ans = 1, c = 0LL;\n        multiset<int> st;\n\n        // Loop to find prime factors of n\n        for(int j = 2;j <= sqrt(n);j++){\n            c = 0;\n            // Count the multiplicity of prime factors\n            while(n%j == 0){\n                n /= j;\n                c++;\n            }\n            // If multiplicity is greater than 0, insert it into set\n            if(c > 0)\n                st.insert(c);\n        }\n        // If n is greater than or equal to 2, insert 1 into set\n        if(n >= 2)\n            st.insert(1);\n        // Multiply all the elements in the set and insert the product into set\n        for(auto &it: st)\n            ans *= (it + 1);\n        st.insert(ans);\n        // Convert the set to vector and return\n        vector<int> sol(st.begin(),st.end());\n        return sol;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}