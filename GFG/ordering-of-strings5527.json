{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703001,
            "title": "Ordering of strings",
            "titleSlug": "ordering-of-strings5527",
            "content": "<p><span style=\"font-size:20px\"><span style=\"font-family:arial,helvetica,sans-serif\">You will be given <strong>N</strong> number of strings. You have to find the lexicographically smallest string and the lexicographically largest string among these strings.</span></span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 3\nstrings = a , ab , abc\n<strong>Output:</strong> a abc\n<strong>Explanation</strong>: Lexicographically smallest is\n&quot;a&quot; and lexicographically largest is\n&quot;abc&quot;.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 2\nstrings = abc , abc\n<strong>Output:</strong> abc abc\n<strong>Explanation</strong>: Lexicographically smallest is\n&quot;abc&quot; and lexicographically largest is\n&quot;abc&quot;</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\nYou dont need to read input or print anything. Complete the function&nbsp;<strong>orderString\u00e2\u20ac\u2039</strong><strong>()</strong>&nbsp;which takes a 2d character array and an integer <strong>N</strong> as&nbsp;input parameter and returns an array of size 2&nbsp;where first value&nbsp;should be lexicographically smallest string and second value should be lexicographically largest string.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N* max of all string length ).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N , length of each string &lt;= 10<sup>3</sup></span></p>\n\n<p>&nbsp;</p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of N strings, find the lexicographically smallest and largest strings among them.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "Length of each string <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nstrings = a , ab , abc",
                        "output": "a abc",
                        "explanation": "The lexicographically smallest string is \"a\" and the lexicographically largest string is \"abc\"."
                    },
                    {
                        "input": "N = 2\nstrings = abc , abc",
                        "output": "abc abc",
                        "explanation": "The lexicographically smallest string is \"abc\" and the lexicographically largest string is \"abc\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use inbuilt compare function</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n    public:\n    //Function to order the given string array.\n    vector<string> orderString(string s[] , int n)\n    {\n    \t//variables to keep track of minimum and maximum indices.\n    \tint min_ind = 0 , max_ind = 0;\n    \t\n    \t//iterating over the array to find minimum and maximum indices.\n    \tfor(int i = 1; i<=n-1; i++)\n    \t    {\n    \t        //comparing current string with string at minimum index.\n    \t        //If it is smaller, updating minimum index.\n    \t        if((s[i].compare(s[min_ind])) < 0)\n    \t            min_ind = i;\n    \t        //comparing current string with string at maximum index.\n    \t        //If it is larger, updating maximum index.\n    \t        if(s[i].compare(s[max_ind]) > 0)\n    \t            max_ind = i;\n    \t    }\n    \t    \n    \t//creating a vector to store the ordered strings.\n    \tvector<string> res;\n    \t\n    \t//adding the string at minimum index to the result vector.\n    \tres.push_back(s[min_ind]) ;  \n    \t\n    \t//adding the string at maximum index to the result vector.\n    \tres.push_back(s[max_ind]) ;\n    \t\n    \t//returning the ordered strings.\n    \treturn res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to find the minimum and maximum characters in a string.\n    def orderString(self, s, n):\n        min_i = 0\n        max_i = 0\n    \n        #iterating through the string to find the minimum and maximum characters.\n        for i in range(1, len(s)):\n            #updating the index of the minimum character.\n            if s[min_i] > s[i]:\n                min_i = i\n            #updating the index of the maximum character.\n            elif s[max_i] < s[i]:\n                max_i = i\n    \n        #returning the minimum and maximum characters.\n        return s[min_i], s[max_i]",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for JavaScript\n\nclass Solution {\n    //Function to find the minimum and maximum characters in a string.\n    orderString(s, n) {\n        let min_i = 0;\n        let max_i = 0;\n\n        //iterating through the string to find the minimum and maximum characters.\n        for (let i = 1; i < s.length; i++) {\n            //updating the index of the minimum character.\n            if (s[min_i] > s[i]) {\n                min_i = i;\n            }\n            //updating the index of the maximum character.\n            else if (s[max_i] < s[i]) {\n                max_i = i;\n            }\n        }\n\n        //returning the minimum and maximum characters.\n        return [s[min_i], s[max_i]];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}