{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712224,
            "title": "Outermost Parentheses",
            "titleSlug": "outermost-parentheses",
            "content": "<p><span style=\"font-size:18px\">A valid parentheses string is either empty&nbsp;<code>&quot;&quot;</code>,&nbsp;<code>&quot;(&quot; + X&nbsp;+ &quot;)&quot;</code>, or X<code>&nbsp;+ Y</code>, where X&nbsp;and Y&nbsp;are valid parentheses strings, and&nbsp;<code>+</code>&nbsp;represents string concatenation.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">For example,&nbsp;<code>&quot;&quot;</code>,&nbsp;<code>&quot;()&quot;</code>,&nbsp;<code>&quot;(())()&quot;</code>, and&nbsp;<code>&quot;(()(()))&quot;</code>&nbsp;are all valid parentheses strings.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">A valid parentheses string&nbsp;<code>s</code>&nbsp;is primitive if it is nonempty, and there does not exist a way to split it into&nbsp;<code>s = X&nbsp;+ Y</code>, with X&nbsp;and Y&nbsp;nonempty valid parentheses strings.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Given a valid parentheses string&nbsp;<code>s</code>, consider its primitive decomposition:&nbsp;<code>s = P<sub>1</sub>&nbsp;+ P<sub>2</sub>&nbsp;+ ... + P<sub>k</sub></code>, where&nbsp;<code>P<sub>i</sub></code>&nbsp;are primitive valid parentheses strings.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Return&nbsp;<code>s</code>&nbsp;after removing the outermost parentheses of every primitive string in the primitive decomposition of&nbsp;<code>s</code>.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\ns = &quot;(()())(())&quot;\r\n<strong>Output:</strong>\r\n&quot;()()()&quot;\r\n<strong>Explanation:</strong>\r\n</span><span style=\"font-size:18px\">The input string is &quot;(()())(())&quot;, with primitive decomposition &quot;(()())&quot; + &quot;(())&quot;.\r\nAfter removing outer parentheses of each part, this is &quot;()()&quot; + &quot;()&quot; = &quot;()()()&quot;.</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Example 2:\r\n</strong>\r\n<strong>Input:</strong>\r\ns = &quot;()()&quot;\r\n<strong>Output:</strong>\r\n&quot;&quot;\r\n<strong>Explanation:</strong>\r\n</span><span style=\"font-size:18px\">The input string is &quot;()()&quot;, with primitive decomposition &quot;()&quot; + &quot;()&quot;.\r\nAfter removing outer parentheses of each part, this is &quot;&quot; + &quot;&quot; = &quot;&quot;.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function<strong> removeOuter()</strong>&nbsp;which takes a string s&nbsp;as inputs and returns s&nbsp;&nbsp;after removing the outermost parentheses of every primitive string in the primitive decomposition of&nbsp;<code>s</code>&nbsp;.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n)<br />\r\n<strong>Expected Space Complexity:</strong> O(n)</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Constraint:</span></strong><br />\r\n<span style=\"font-size:18px\">1 &lt;= s.length &lt;= 10<sup>5</sup><br />\r\ns[i] is either &#39;(&#39; or &#39;)&#39;<br />\r\n<code>s</code>&nbsp;is a valid parentheses string.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A valid parentheses string is either empty, \"(\" + X + \")\", or X + Y, where X and Y are valid parentheses strings. A valid parentheses string `s` is primitive if it is nonempty, and there does not exist a way to split it into `s = X + Y`, with X and Y nonempty valid parentheses strings. Given a valid parentheses string `s`, consider its primitive decomposition: `s = P1 + P2 + ... + Pk`, where `Pi` are primitive valid parentheses strings. Return `s` after removing the outermost parentheses of every primitive string in the primitive decomposition of `s`.",
                "constraints": [
                    "1 <= s.length <= 10^5",
                    "s[i] is either '(' or ')'",
                    "`s` is a valid parentheses string."
                ],
                "testcases": [
                    {
                        "input": "(()())(())",
                        "output": "()()()",
                        "explanation": "The input string is \"(()())(())\". The primitive decomposition is \"(()())\" + \"(())\". After removing the outermost parentheses of each part, the result is \"()()\" + \"()\" = \"()()()\"."
                    },
                    {
                        "input": "()()",
                        "output": "",
                        "explanation": "The input string is \"()()\". The primitive decomposition is \"()\" + \"()\". After removing the outermost parentheses of each part, the result is \"\" + \"\" = \"\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to remove the outermost parentheses from a given string\n    string removeOuter(string& S) {\n        stack<char> st; // Stack to keep track of parentheses\n        string ans; // String to store the result\n\n        // Iterating over each character in the string\n        for (char c : S) {\n            if (c == ')') st.pop(); // If current character is closing parenthesis, remove the corresponding opening parenthesis from stack\n            if (!st.empty()) ans += c; // If stack is not empty, add the current character to the result string\n            if (c == '(') st.push(c); // If current character is opening parenthesis, push it to the stack\n        }\n        return ans; // Return the result string without the outermost parentheses\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static String removeOuter(String S) {\n        // StringBuilder to store the modified string\n        StringBuilder s = new StringBuilder();\n\n        // variable to keep track of the number of opened parentheses\n        int opened = 0;\n\n        // iterating through each character in the input string\n        for (char c : S.toCharArray()) {\n            // if it is an opening parenthesis and not the outermost one,\n            // append it to the StringBuilder\n            if (c == '(' && opened++ > 0) {\n                s.append(c);\n            }\n\n            // if it is a closing parenthesis and not the innermost one,\n            // append it to the StringBuilder\n            if (c == ')' && opened-- > 1) {\n                s.append(c);\n            }\n        }\n\n        // return the modified string\n        return s.toString();\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom collections import deque\nclass Solution:\n    #Function to remove the outermost parentheses from a given string.\n    def removeOuter(self, S):\n        st = deque()\n        ans = ''\n        \n        #iterating over each character in the string.\n        for ch in S:\n            #if the character is ')', removing the corresponding '(' from the stack.\n            if ch == ')':\n                st.pop()\n            #if there are still parentheses in the stack, adding the character to the answer string.\n            if st:\n                ans += ch\n            #if the character is '(', adding it to the stack.\n            if ch == '(':\n                st.append(ch)\n        \n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} S\n * @returns {string}\n*/\nclass Solution\n{\n    //Function to remove the outermost parentheses from a valid parentheses string.\n    removeOuter(S)\n    {\n        let st = [];\n        let ans = '';\n        \n        //iterating over each character in the string.\n        for (let i = 0; i < S.length; i++) {\n            let ch = S[i];\n            \n            //if the character is ')', removing the corresponding '(' from the stack.\n            if (ch === ')') {\n                st.pop();\n            }\n            \n            //if there are still parentheses in the stack, adding the character to the answer string.\n            if (st.length > 0) {\n                ans += ch;\n            }\n            \n            //if the character is '(', adding it to the stack.\n            if (ch === '(') {\n                st.push(ch);\n            }\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}