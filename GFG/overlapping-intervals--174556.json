{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 891171,
            "title": "Overlapping Intervals",
            "titleSlug": "overlapping-intervals--174556",
            "content": "<p><span style=\"font-size: 18.6667px;\">You are given a 2D array <strong>arr[][] </strong>which represents a set of intervals, where each element <strong>arr[i] = [start, end]</strong> defines an interval</span><span style=\"font-size: 18.6667px;\">. <br /></span><span style=\"font-size: 18.6667px;\">Your task is to determine if any two intervals in the given set <strong>overlap</strong>.</span></p>\n<p><span style=\"font-size: 18.6667px;\"><strong>Note:</strong> Two intervals [a, b] and [c, d] overlap if they have at least one common value, i.e., a &le; d and c &le; b.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 4, arr[][] = [[1, 3], [5, 7], [2, 4], [6, 8]]\n<strong>Output: </strong>true<strong>\nExplanation:</strong> The intervals [1, 3] and [2, 4] overlap.</span></pre>\n<pre><span ><strong>Input: </strong>n = 4, arr[][] = [[1, 3], [7, 9], [4, 6], [10, 13]]\n<strong>Output: </strong>false<strong>\nExplanation:</strong> No pair of intervals overlap.</span></pre>\n<p><span ><strong >Constraints:<br /></strong><span >1 &le; arr[i][0] &lt; arr[i][1]</span></span><span >&nbsp;&le; 10<sup>5&nbsp;&nbsp;</sup><sup><br /></sup><span ><span >2 &le; arr.size() </span></span><span >&le; 10<sup>5</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D array `arr[][]` representing a set of intervals, where each element `arr[i] = [start, end]` defines an interval, determine if any two intervals in the given set overlap.\n\nTwo intervals [a, b] and [c, d] overlap if they have at least one common value, i.e., a <= d and c <= b.",
                "constraints": [
                    "1 <= arr[i][0] < arr[i][1] <= 10^5",
                    "2 <= arr.size() <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr[][] = [[1, 3], [5, 7], [2, 4], [6, 8]]",
                        "output": "true",
                        "explanation": "The intervals [1, 3] and [2, 4] overlap because 1 <= 4 and 2 <= 3."
                    },
                    {
                        "input": "n = 4, arr[][] = [[1, 3], [7, 9], [4, 6], [10, 13]]",
                        "output": "false",
                        "explanation": "No pair of intervals overlaps in the given set."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool isIntersect(vector<vector<int>> intervals) {\n        int n = intervals.size();\n\n        int max_end = 0;\n        for (int i = 0; i < n; i++) {\n            max_end = max(max_end, intervals[i][1]);\n        }\n\n        vector<int> arr(max_end + 2, 0);\n\n        for (int i = 0; i < n; i++) {\n            int start = intervals[i][0];\n            int end = intervals[i][1];\n            arr[start] += 1;\n            arr[end + 1] -= 1;\n        }\n\n        for (int i = 1; i <= max_end; i++) {\n            arr[i] += arr[i - 1];\n            if (arr[i] > 1)\n                return true;\n        }\n\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static boolean isIntersect(int[][] intervals) {\n        int n = intervals.length;\n        int maxEnd = 0;\n        for (int i = 0; i < n; i++) {\n            maxEnd = Math.max(maxEnd, intervals[i][1]);\n        }\n\n        int[] arr = new int[maxEnd + 2];\n\n        for (int i = 0; i < n; i++) {\n            int start = intervals[i][0];\n            int end = intervals[i][1];\n            arr[start] += 1;\n            arr[end + 1] -= 1;\n        }\n\n        for (int i = 1; i <= maxEnd; i++) {\n            arr[i] += arr[i - 1];\n            if (arr[i] > 1) return true;\n        }\n\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def isIntersect(self, intervals):\n        n = len(intervals)\n\n        max_end = 0\n        for i in range(n):\n            max_end = max(max_end, intervals[i][1])\n\n        arr = [0] * (max_end + 2)\n\n        for i in range(n):\n            start, end = intervals[i]\n            arr[start] += 1\n            arr[end + 1] -= 1\n\n        for i in range(1, max_end + 1):\n            arr[i] += arr[i - 1]\n            if arr[i] > 1:\n                return True\n\n        return False\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    isIntersect(intervals) {\n        let n = intervals.length;\n        let maxEnd = 0;\n\n        for (let i = 0; i < n; i++) {\n            maxEnd = Math.max(maxEnd, intervals[i][1]);\n        }\n\n        let arr = new Array(maxEnd + 2).fill(0);\n\n        for (let i = 0; i < n; i++) {\n            let [start, end] = intervals[i];\n            arr[start] += 1;\n            arr[end + 1] -= 1;\n        }\n\n        for (let i = 1; i <= maxEnd; i++) {\n            arr[i] += arr[i - 1];\n            if (arr[i] > 1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}