{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705474,
            "title": "Overlapping rectangles",
            "titleSlug": "overlapping-rectangles1924",
            "content": "<p><span style=\"font-size: 18px;\">Given two rectangles, find if the given two rectangles overlap or not. A rectangle is denoted by providing the x and y coordinates of two points: the left top corner and the right bottom corner of the rectangle. Two rectangles sharing a side are considered overlapping. (<strong>L1 </strong>and <strong>R1</strong> are the extreme points of the first rectangle and <strong>L2 </strong>and <strong>R2 </strong>are the extreme points of the second rectangle).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:&nbsp;</strong>It may be assumed that the rectangles are parallel to the coordinate axis.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>L1=(0,10), R1=(10,0), L2=(5,5), R2=(15,0)\n<strong>Output: </strong>1\n<strong>Explanation: </strong>The rectangles overlap.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>L1=(0,2), R1=(1,1), L2=(-2,0), R2=(0,-3)\n<strong>Output: </strong>0\n<strong>Explanation: </strong>The rectangles do not overlap.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />-10<sup>9</sup>&lt;=x-coordinate,y-coordinate&lt;=10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two rectangles defined by their top-left (L1) and bottom-right (R1) corners for the first rectangle, and top-left (L2) and bottom-right (R2) corners for the second rectangle, determine if the rectangles overlap. Rectangles sharing a side are considered overlapping. Assume the rectangles are parallel to the coordinate axes.",
                "constraints": [
                    "-10<sup>9</sup> <= x-coordinate, y-coordinate <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "L1=(0,10), R1=(10,0), L2=(5,5), R2=(15,0)",
                        "output": "1",
                        "explanation": "The rectangles overlap because they share a common area."
                    },
                    {
                        "input": "L1=(0,2), R1=(1,1), L2=(-2,0), R2=(0,-3)",
                        "output": "0",
                        "explanation": "The rectangles do not overlap as they are positioned in such a way that they do not share any common area or edges."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Check whether one of the rectangles is completely to the left of the other.</span></p>",
            "<p><span style=\"font-size:18px\">Check whether one of the rectangles is completely above&nbsp;the other.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Geometric",
                "slug": "geometric"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "snapdeal",
            "goldman-sachs",
            "oats-systems",
            "expedia"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int doOverlap(vector<int> L1, vector<int> R1, vector<int> L2, vector<int> R2) {\n        // If one rectangle is on left side of other\n        if (L1[0] > R2[0] || L2[0] > R1[0])\n            return 0;\n\n        // If one rectangle is above other\n        if (L1[1] < R2[1] || L2[1] < R1[1])\n            return 0;\n\n        return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    int doOverlap(int L1[], int R1[], int L2[], int R2[]) {\n        // If one rectangle is on left side of other\n        if (L1[0] > R2[0] || L2[0] > R1[0]) return 0;\n\n        // If one rectangle is above other\n        if (L1[1] < R2[1] || L2[1] < R1[1]) return 0;\n\n        return 1;\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    def doOverlap(self, L1, R1, L2, R2):\n        \n        # If one rectangle is on left side of other\n        if L1[0] >R2[0] or L2[0] > R1[0]:\n            return 0\n    \n        # If one rectangle is above other\n        if L1[1] < R2[1] or L2[1] <R1[1]:\n            return 0\n\n        return 1",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find if there is a rectangle overlap.\n    public int doOverlap(int[] L1, int[] R1, int[] L2, int[] R2)\n    {\n        // If one rectangle is on left side of other\n        if (L1[0] > R2[0] || L2[0] > R1[0]) return 0;\n\n        // If one rectangle is above other\n        if (L1[1] < R2[1] || L2[1] < R1[1]) return 0;\n\n        return 1;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    doOverlap(L1, R1, L2, R2) {\n        // If one rectangle is on left side of other\n        if (L1[0] > R2[0] || L2[0] > R1[0]) {\n            return 0;\n        }\n\n        // If one rectangle is above other\n        if (L1[1] < R2[1] || L2[1] < R1[1]) {\n            return 0;\n        }\n\n        return 1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}