{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875917,
            "title": "Pacific Atlantic Water Flow",
            "titleSlug": "pacific-atlantic-water-flow",
            "content": "<p><span style=\"font-size: 18px;\">You are given a matrix <strong>mat[][]</strong> of dimensions <strong>n x m</strong>, where mat[i][j] represents the <strong>height of a cell</strong> in a rectangular grid island. The <strong>Pacific Ocean</strong> touches the island's <strong>left and top</strong> borders, and the <strong>Atlantic Ocean</strong> touches the island's <strong>right and bottom</strong> borders. Rainwater can flow from a cell to its neighbouring cells in the directions North, South, East, and West, but only if the <strong>neighbouring cell has a height less than or equal to the current cell's height</strong>.</span></p>\n<p><span style=\"font-size: 18px;\">The task is to determine <strong>all coordinates (x, y)</strong> such that water can flow from the cell (x, y) to <strong>both</strong> the Pacific Ocean and the Atlantic Ocean. Water can flow from any adjacent cell directly into an ocean.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>mat[][] = [[1, 2, 2, 3, 5],<br />\\t\\t    [3, 2, 3, 4, 4],<br />\\t\\t    [2, 4, 5, 3, 1],<br />\\t\\t    [6, 7, 1, 4, 5],<br />\\t\\t    [5, 1, 1, 2, 4]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> </span><span style=\"font-size: 18px;\">In the given matrix, there are 7 coordinates through which the water can flow to both the Oceans</span>. They are  (0, 4), (1, 3), (1, 4), (2, 2), (3, 0), (3, 1), and (4, 0).</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[][] = [[2, 2], <br />\\t\\t   [2, 2]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> </span><span style=\"font-size: 18px;\">In the following example, all cells allow water to flow to both the Oceans.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; number of rows,&nbsp;</span><span style=\"font-size: 18px;\">number of columns</span><span style=\"font-size: 18px;\">&nbsp;&le; 10</span><sup>3<br /></sup><span style=\"font-size: 18px;\">1 &le; arr[i][j] &le; 10<sup>3</sup>&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix `mat[][]` of dimensions n x m, where `mat[i][j]` represents the height of a cell in a rectangular grid island. The Pacific Ocean touches the island's left and top borders, and the Atlantic Ocean touches the island's right and bottom borders. Rainwater can flow from a cell to its neighboring cells (North, South, East, West) only if the neighboring cell has a height less than or equal to the current cell's height.\n\nThe task is to determine the number of coordinates (x, y) such that water can flow from the cell (x, y) to both the Pacific Ocean and the Atlantic Ocean. Water can flow directly into an ocean from any adjacent cell.",
                "constraints": [
                    "1 <= number of rows, number of columns <= 10^3",
                    "1 <= mat[i][j] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "mat[][] = [[1, 2, 2, 3, 5],\n            [3, 2, 3, 4, 4],\n            [2, 4, 5, 3, 1],\n            [6, 7, 1, 4, 5],\n            [5, 1, 1, 2, 4]]",
                        "output": "7",
                        "explanation": "There are 7 coordinates through which water can flow to both oceans. These coordinates are (0, 4), (1, 3), (1, 4), (2, 2), (3, 0), (3, 1), and (4, 0)."
                    },
                    {
                        "input": "mat[][] = [[2, 2],\n           [2, 2]]",
                        "output": "4",
                        "explanation": "All cells allow water to flow to both the Oceans."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The idea is to mark all the cells that are reachable from the directly connected cells from the Pacific and the Atlantic Oceans separately using either DFS or BFS.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int x[4] = {0, 0, -1, 1}; // movement directions (up, down, left, right)\n    int y[4] = {1, -1, 0, 0};\n\n    // Check if the position is within the matrix boundaries\n    bool safe(int i, int j, int N, int M) {\n        return (i >= 0 && j >= 0 && i < N && j < M);\n    }\n\n    // BFS function to explore the water flow\n    void BFS(vector<vector<int>>& matrix, int N, int M, queue<pair<int, int>>& q,\n             vector<vector<bool>>& visited) {\n        while (!q.empty()) {\n            pair<int, int> cur = q.front();\n            q.pop();\n\n            visited[cur.first][cur.second] = true;\n\n            // Explore the four possible directions\n            for (int i = 0; i < 4; i++) {\n                int nx = cur.first + x[i];\n                int ny = cur.second + y[i];\n\n                if (safe(nx, ny, N, M) &&\n                    matrix[nx][ny] >= matrix[cur.first][cur.second] &&\n                    !visited[nx][ny]) {\n                    q.push({nx, ny});\n                    visited[nx][ny] = true;\n                }\n            }\n        }\n    }\n\n    // Main function to find the count of valid coordinates\n    int countCoordinates(vector<vector<int>>& mat) {\n        int N = mat.size();    // number of rows\n        int M = mat[0].size(); // number of columns\n\n        queue<pair<int, int>> pacificQueue, atlanticQueue;\n        vector<vector<bool>> pacificVisited(N, vector<bool>(M, false));\n        vector<vector<bool>> atlanticVisited(N, vector<bool>(M, false));\n\n        // Push cells connected to the Pacific Ocean (left and top borders)\n        for (int i = 0; i < M; i++) {\n            pacificQueue.push({0, i});\n            atlanticQueue.push({N - 1, i});\n        }\n        for (int i = 0; i < N; i++) {\n            pacificQueue.push({i, 0});\n            atlanticQueue.push({i, M - 1});\n        }\n\n        // Perform BFS from both oceans\n        BFS(mat, N, M, pacificQueue, pacificVisited);\n        BFS(mat, N, M, atlanticQueue, atlanticVisited);\n\n        int ans = 0;\n\n        // Count the cells that are reachable from both oceans\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (pacificVisited[i][j] && atlanticVisited[i][j]) {\n                    ans++;\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    // Direction vectors for moving up, down, left, and right\n    private int[] x = {0, 0, -1, 1};\n    private int[] y = {1, -1, 0, 0};\n\n    // Check if the given coordinates are within bounds of the matrix\n    private boolean safe(int i, int j, int N, int M) {\n        return (i >= 0 && j >= 0 && i < N && j < M);\n    }\n\n    // BFS to explore water flow and mark visited cells\n    private void BFS(int[][] matrix, int N, int M, Queue<int[]> q,\n                     boolean[][] visited) {\n        while (!q.isEmpty()) {\n            int[] cur = q.poll();\n            int curX = cur[0];\n            int curY = cur[1];\n\n            visited[curX][curY] = true;\n\n            // Explore the four possible directions\n            for (int i = 0; i < 4; i++) {\n                int nx = curX + x[i];\n                int ny = curY + y[i];\n\n                if (safe(nx, ny, N, M) && matrix[nx][ny] >= matrix[curX][curY] &&\n                    !visited[nx][ny]) {\n                    q.add(new int[] {nx, ny});\n                    visited[nx][ny] = true;\n                }\n            }\n        }\n    }\n\n    public int countCoordinates(int[][] mat) {\n        int N = mat.length;    // number of rows\n        int M = mat[0].length; // number of columns\n\n        Queue<int[]> pacificQueue = new LinkedList<>();\n        Queue<int[]> atlanticQueue = new LinkedList<>();\n        boolean[][] pacificVisited = new boolean[N][M];\n        boolean[][] atlanticVisited = new boolean[N][M];\n\n        // Add cells adjacent to the Pacific Ocean (left and top borders)\n        for (int i = 0; i < M; i++) {\n            pacificQueue.add(new int[] {0, i});\n            atlanticQueue.add(new int[] {N - 1, i});\n        }\n        for (int i = 0; i < N; i++) {\n            pacificQueue.add(new int[] {i, 0});\n            atlanticQueue.add(new int[] {i, M - 1});\n        }\n\n        // Perform BFS from both oceans\n        BFS(mat, N, M, pacificQueue, pacificVisited);\n        BFS(mat, N, M, atlanticQueue, atlanticVisited);\n\n        int ans = 0;\n\n        // Count the cells that are reachable from both oceans\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                if (pacificVisited[i][j] && atlanticVisited[i][j]) {\n                    ans++;\n                }\n            }\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "from collections import deque\n\n\nclass Solution:\n    # Direction vectors for moving up, down, left, and right\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    # Check if the given coordinates are within bounds of the matrix\n    def safe(self, i, j, N, M):\n        return 0 <= i < N and 0 <= j < M\n\n    # BFS to explore water flow and mark visited cells\n    def bfs(self, mat, N, M, queue, visited):\n        while queue:\n            x, y = queue.popleft()\n            visited[x][y] = True\n\n            # Explore the four possible directions\n            for dx, dy in self.directions:\n                nx, ny = x + dx, y + dy\n                if self.safe(\n                        nx, ny, N, M\n                ) and not visited[nx][ny] and mat[nx][ny] >= mat[x][y]:\n                    queue.append((nx, ny))\n                    visited[nx][ny] = True\n\n    def countCoordinates(self, mat):\n        if not mat:\n            return 0\n\n        N = len(mat)  # number of rows\n        M = len(mat[0])  # number of columns\n\n        # Queues for BFS from Pacific and Atlantic oceans\n        pacific_queue = deque()\n        atlantic_queue = deque()\n\n        # Visited matrices for Pacific and Atlantic\n        pacific_visited = [[False for _ in range(M)] for _ in range(N)]\n        atlantic_visited = [[False for _ in range(M)] for _ in range(N)]\n\n        # Add cells adjacent to the Pacific Ocean (left and top borders)\n        for i in range(M):\n            pacific_queue.append((0, i))\n            atlantic_queue.append((N - 1, i))\n\n        for i in range(N):\n            pacific_queue.append((i, 0))\n            atlantic_queue.append((i, M - 1))\n\n        # Perform BFS for both oceans\n        self.bfs(mat, N, M, pacific_queue, pacific_visited)\n        self.bfs(mat, N, M, atlantic_queue, atlantic_visited)\n\n        # Count the cells that are reachable from both oceans\n        count = 0\n        for i in range(N):\n            for j in range(M):\n                if pacific_visited[i][j] and atlantic_visited[i][j]:\n                    count += 1\n\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Directions to move up, down, left, and right\n    directions = [ [ 0, 1 ], [ 0, -1 ], [ 1, 0 ], [ -1, 0 ] ];\n\n    // Helper function to check if a cell is within matrix bounds\n    isSafe(x, y, N, M) { return x >= 0 && y >= 0 && x < N && y < M; }\n\n    // BFS function to explore water flow and mark reachable cells\n    bfs(matrix, N, M, queue, visited) {\n        while (queue.length > 0) {\n            let [x, y] = queue.shift();\n            visited[x][y] = true;\n\n            // Explore all four directions\n            for (let [dx, dy] of this.directions) {\n                let nx = x + dx;\n                let ny = y + dy;\n\n                // Check if next cell is within bounds, unvisited, and has height >=\n                // current cell\n                if (this.isSafe(nx, ny, N, M) && !visited[nx][ny] &&\n                    matrix[nx][ny] >= matrix[x][y]) {\n                    queue.push([ nx, ny ]);\n                    visited[nx][ny] = true;\n                }\n            }\n        }\n    }\n\n    countCoordinates(mat) {\n        if (mat.length === 0) return 0;\n\n        const N = mat.length;\n        const M = mat[0].length;\n\n        // Queues for BFS from Pacific and Atlantic oceans\n        const pacificQueue = [];\n        const atlanticQueue = [];\n\n        // Visited matrices for Pacific and Atlantic oceans\n        const pacificVisited = Array.from({length : N}, () => Array(M).fill(false));\n        const atlanticVisited = Array.from({length : N}, () => Array(M).fill(false));\n\n        // Add cells adjacent to Pacific Ocean (left and top edges)\n        for (let i = 0; i < M; i++) {\n            pacificQueue.push([ 0, i ]);      // Top row (Pacific border)\n            atlanticQueue.push([ N - 1, i ]); // Bottom row (Atlantic border)\n        }\n        for (let i = 0; i < N; i++) {\n            pacificQueue.push([ i, 0 ]);      // Left column (Pacific border)\n            atlanticQueue.push([ i, M - 1 ]); // Right column (Atlantic border)\n        }\n\n        // Perform BFS for both oceans\n        this.bfs(mat, N, M, pacificQueue, pacificVisited);\n        this.bfs(mat, N, M, atlanticQueue, atlanticVisited);\n\n        // Count the cells that can flow to both oceans\n        let count = 0;\n        for (let i = 0; i < N; i++) {\n            for (let j = 0; j < M; j++) {\n                if (pacificVisited[i][j] && atlanticVisited[i][j]) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}