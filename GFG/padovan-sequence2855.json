{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703677,
            "title": "Padovan Sequence",
            "titleSlug": "padovan-sequence2855",
            "content": "<p><span style=\"font-size: 18px;\">Given a number <strong>n</strong>, find the <strong>n<sup>th</sup></strong>&nbsp;number in the <em>Padovan Sequence</em>.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\">A <em>Padovan Sequence</em> is a sequence which is represented by the following recurrence relation<br /></span><span style=\"font-size: 18px;\">P(n) = P(n-2) + P(n-3)<br /></span><span style=\"font-size: 18px;\">P(0) = P(1) = P(2) = 1</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\"><em>Note</em>: Since the output may be too large, compute the answer modulo <strong>10^9+7</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: We already know, P<sub>1</sub> + P<sub>0</sub> = P<sub>3 </sub>and P<sub>1 </sub>= 1 and P<sub>0</sub> = 1\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 4\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: We already know, P<sub style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">4  </sub>= P<sub>2</sub>&nbsp;+ P<sub>1 </sub>and P<sub>2</sub> = 1 and P<sub>1</sub> = 1<br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number `n`, find the nth number in the Padovan Sequence. A Padovan Sequence is defined by the following recurrence relation:\n\nP(n) = P(n-2) + P(n-3)\nP(0) = P(1) = P(2) = 1\n\nNote: Compute the answer modulo 10^9 + 7.",
                "constraints": [
                    "1 <= n <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "2",
                        "explanation": "P(3) = P(1) + P(0) = 1 + 1 = 2"
                    },
                    {
                        "input": "4",
                        "output": "2",
                        "explanation": "P(4) = P(2) + P(1) = 1 + 1 = 2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">To solve&nbsp;in O(1) space, keep track of current, next, previous, and previous-to-previous terms in the series.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "series",
                "slug": "series"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\n#define M 1000000007\n\nclass Solution {\n  public:\n    int padovanSequence(int n) {\n        int pPrevPrev = 1, pPrev = 1, pCurr = 1, pNext = 1;\n        for (int i = 3; i <= n; i++) {\n            pNext = (pPrevPrev % M + pPrev % M) % M;\n            pPrevPrev = pPrev % M;\n            pPrev = pCurr % M;\n            pCurr = pNext % M;\n        }\n        return pNext % M;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n  public int padovanSequence(int n)\r\n    {\r\n        int M = 1000000007 ; //modulo to ensure result doesn't exceed the limit\r\n        int pPrevPrev = 1, pPrev = 1, pCurr = 1, pNext = 1; //initialize variables for Padovan sequence\r\n        \r\n        for (int i=3; i<=n; i++) //loop to calculate the Padovan sequence up to the given number\r\n        {\r\n            pNext = (pPrevPrev%M + pPrev%M)%M; //calculate the next number in the sequence\r\n            pPrevPrev = pPrev%M; //update variables for the next iteration\r\n            pPrev = pCurr%M;\r\n            pCurr = pNext%M;\r\n        }\r\n        \r\n        return pNext%M; //return the last number in the Padovan sequence\r\n    }\r\n    \r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def padovanSequence(self, n):\n        if n <= 2:\n            return 1\n\n        mod = 1000000007  # M for modulo operation\n\n        # Pre-calculate the first three terms efficiently using a loop\n        pPrevPrev, pPrev, pCurr = 1, 1, 1\n        for _ in range(3, n + 1):\n            pNext = (pPrevPrev + pPrev) % mod\n            pPrevPrev, pPrev, pCurr = pPrev, pCurr, pNext\n\n        return pCurr % mod\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}