{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704684,
            "title": "Page Faults in LRU",
            "titleSlug": "page-faults-in-lru5603",
            "content": "<p><span style=\"font-size:18px\">In operating systems that use paging for memory management, page replacement algorithm is needed to decide which page needs to be replaced when the new page comes in. Whenever a new page is referred and is not present in memory, the page fault occurs and Operating System replaces one of the existing pages with a newly needed page. </span></p>\r\n\r\n<p><span style=\"font-size:18px\">Given a sequence of pages in an array <strong>pages[] </strong>of length <strong>N</strong> and memory capacity <strong>C</strong>, find the number of page faults using Least Recently Used (LRU) Algorithm.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><em><strong>Note:- </strong>Before solving this example revising the OS LRU cache mechanism is recommended.</em></span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 9, C = 4\r\npages = {5, 0, 1, 3, 2, 4, 1, 0, 5}\r\n<strong>Output:</strong> 8\r\n<strong>Explaination:</strong> memory allocated with 4 pages 5, 0, 1, \r\n3: page fault = 4\r\npage number 2 is required, replaces LRU 5: \r\npage fault = 4+1 = 5\r\npage number 4 is required, replaces LRU 0: \r\npage fault = 5 + 1 = 6\r\npage number 1 is required which is already present: \r\npage fault = 6 + 0 = 6\r\npage number 0 is required which replaces LRU 3: \r\npage fault = 6 + 1 = 7\r\npage number 5 is required which replaces LRU 2: \r\npage fault = 7 + 1  = 8.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>pageFaults()</strong> which takes N, C and pages[] as input parameters and returns the number of page faults.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*C)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 1000<br />\r\n1 &le; C &le; 100<br />\r\n1&nbsp;&le; pages[i]&nbsp;&le; 1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "In operating systems using paging for memory management, a page replacement algorithm is crucial for determining which page to replace when a new page needs to be loaded. When a requested page is not in memory, a page fault occurs, and the operating system must replace an existing page with the new one. This problem focuses on the Least Recently Used (LRU) algorithm.\n\nGiven an array `pages[]` of length `N` representing a sequence of page requests, and a memory capacity `C`, determine the total number of page faults that occur when using the LRU page replacement algorithm.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= C <= 100",
                    "1 <= pages[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 9, C = 4\npages = {5, 0, 1, 3, 2, 4, 1, 0, 5}",
                        "output": "8",
                        "explanation": "Initially, the memory is empty. The first four page requests (5, 0, 1, 3) result in page faults. When page 2 is requested, it replaces the least recently used page, 5, resulting in another page fault. Next, page 4 replaces 0, another page fault. Page 1 is already in memory, so no page fault. Then, page 0 replaces 3, causing a page fault. Finally, page 5 replaces 2, resulting in a final page fault. The total number of page faults is 4 + 1 + 1 + 0 + 1 + 1 = 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Let <strong>capacity</strong> be the number of pages that memory can hold.&nbsp; Let <strong>set</strong> be the current set of pages in memory.<br />\n1- Start traversing the pages.<br />\ni) <strong>If set holds less pages than capacity.</strong><br />\n&nbsp;&nbsp; a) Insert page into the set one by one until the size&nbsp; of <strong>set</strong> reaches <strong>capacity</strong> or all page requests are processed.<br />\n&nbsp;&nbsp; b) Simultaneously maintain the recent occurred index of each page in a map called <strong>indexes</strong>.<br />\n&nbsp;&nbsp; c) Increment page fault<br />\nii) <strong>Else</strong><br />\n&nbsp;&nbsp; <strong>If</strong> current page is present in <strong>set</strong>, do nothing.<br />\n&nbsp;&nbsp; <strong>Else</strong><br />\n&nbsp;&nbsp;&nbsp;&nbsp; a) Find the page in the set that was least recently used. We find it using index array.Basically one need to replace the page with minimum index.<br />\n&nbsp;&nbsp;&nbsp;&nbsp; b) Replace the found page with current page.<br />\n&nbsp;&nbsp;&nbsp;&nbsp; c) Increment page faults.<br />\n&nbsp;&nbsp;&nbsp;&nbsp; d) Update index of current page.</span></p>\n\n<p><span style=\"font-size:18px\">2. Return page faults.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to calculate the number of page faults\n    int pageFaults(int N, int C, int pages[]){\n        // Set to store the currently loaded pages\n        unordered_set<int> s;\n\n        // Map to store the index of each page\n        unordered_map<int, int> indexes;\n\n        // Variable to store the number of page faults\n        int page_faults = 0;\n\n        // Loop through all the pages\n        for (int i = 0;i < N; i++){\n\n            // Check if there is still space in memory\n            if (s.size() < C){\n                // Check if the page is already in memory\n                if (s.find(pages[i]) == s.end()){\n                    // If not, add the page to memory and increment page_faults\n                    s.insert(pages[i]);\n                    page_faults++;\n                }\n                // Store the current index of the page\n                indexes[pages[i]] = i;\n            }\n\n            // If memory is full\n            else{\n                // Check if the page is already in memory\n                if (s.find(pages[i]) == s.end()){\n                    // Find the least recently used (LRU) page\n                    int lru = INT_MAX, val;\n                    for (auto it = s.begin();it != s.end(); it++){\n                        if (indexes[*it] < lru){\n                            lru = indexes[*it];\n                            val = *it;\n                        }\n                    }\n                    // Remove the LRU page and add the current page\n                    s.erase(val);\n                    s.insert(pages[i]);\n                    page_faults++;\n                }\n                // Update the index of the current page\n                indexes[pages[i]] = i;\n            }\n        }\n        // Return the total number of page faults\n        return page_faults;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution{\n    // Function to calculate the number of page faults in a given sequence of pages\n    static int pageFaults(int N, int C, int pages[]) { \n        // Create a HashSet to store the pages currently in memory\n        HashSet<Integer> s = new HashSet<>(C); \n        \n        // Create a HashMap to store the indexes of the pages in memory\n        HashMap<Integer, Integer> indexes = new HashMap<>(); \n        \n        // Initialize the number of page faults to 0\n        int page_faults = 0; \n        \n        // Iterate through the given sequence of pages\n        for (int i = 0; i < N; i++) { \n            // If the number of pages in memory is less than the capacity\n            if (s.size() < C) {  \n                // If the current page is not in memory\n                if (!s.contains(pages[i])) { \n                    // Add the current page to memory\n                    s.add(pages[i]); \n                    // Increment the number of page faults\n                    page_faults++; \n                } \n                // Update the index of the current page in the HashMap\n                indexes.put(pages[i], i); \n            }\n            // If the number of pages in memory is equal to the capacity\n            else { \n                // If the current page is not in memory\n                if (!s.contains(pages[i])) { \n                    // Find the page with the least recently used (LRU) index\n                    int lru = Integer.MAX_VALUE, val=Integer.MIN_VALUE; \n                    Iterator<Integer> itr = s.iterator(); \n                    \n                    // Iterate through the pages in memory\n                    while (itr.hasNext()) { \n                        int temp = itr.next(); \n                        // If the index of the current page is less than the LRU index\n                        if (indexes.get(temp) < lru) { \n                            // Update the LRU index and the value of the LRU page\n                            lru = indexes.get(temp); \n                            val = temp; \n                        } \n                    } \n                    // Remove the LRU page from memory\n                    s.remove(val); \n                    // Add the current page to memory\n                    s.add(pages[i]); \n                    // Increment the number of page faults\n                    page_faults++; \n                } \n                // Update the index of the current page in the HashMap\n                indexes.put(pages[i], i); \n            } \n        } \n        \n        // Return the total number of page faults\n        return page_faults; \n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number} N\n * @param {number} C\n * @param {number[]} pages\n * @return {number}\n */\n\nclass Solution {\n  pageFaults(N, C, pages) {\n    let s = new Set();\n    let indexes = new Map();\n\n    let page_faults = 0;\n    for(let i = 0; i < N; i++) {\n      if(s.size < C) {\n        if(!s.has(pages[i])) {\n          s.add(pages[i]);\n          page_faults++;\n        }\n        indexes.set(pages[i], i);\n      } else {\n        if(!s.has(pages[i])) {\n          let lru = Infinity;\n          let val;\n          for(let item of s) {\n            if(indexes.get(item) < lru) {\n              lru = indexes.get(item);\n              val = item;\n            }\n          }\n          s.delete(val);\n          s.add(pages[i]);\n          page_faults++;\n        }\n        indexes.set(pages[i], i);\n      }\n    }\n    return page_faults;\n  }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int pageFaults(int N, int C, int[] pages)\n    {\n        // Set to store the currently loaded pages\n        HashSet<int> s = new HashSet<int>();\n\n        // Dictionary to store the index of each page\n        Dictionary<int, int> indexes = new Dictionary<int, int>();\n\n        // Variable to store the number of page faults\n        int page_faults = 0;\n\n        // Loop through all the pages\n        for (int i = 0; i < N; i++)\n        {\n\n            // Check if there is still space in memory\n            if (s.Count < C)\n            {\n                // Check if the page is already in memory\n                if (!s.Contains(pages[i]))\n                {\n                    // If not, add the page to memory and increment page_faults\n                    s.Add(pages[i]);\n                    page_faults++;\n                }\n                // Store the current index of the page\n                indexes[pages[i]] = i;\n            }\n\n            // If memory is full\n            else\n            {\n                // Check if the page is already in memory\n                if (!s.Contains(pages[i]))\n                {\n                    // Find the least recently used (LRU) page\n                    int lru = int.MaxValue, val = 0;\n                    List<int> keys = new List<int>(s);\n                    foreach (int key in keys)\n                    {\n                        if (indexes[key] < lru)\n                        {\n                            lru = indexes[key];\n                            val = key;\n                        }\n                    }\n                    // Remove the LRU page and add the current page\n                    s.Remove(val);\n                    s.Add(pages[i]);\n                    page_faults++;\n                }\n                // Update the index of the current page\n                indexes[pages[i]] = i;\n            }\n        }\n        // Return the total number of page faults\n        return page_faults;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}