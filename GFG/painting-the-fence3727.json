{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702814,
            "title": "Painting the Fence",
            "titleSlug": "painting-the-fence3727",
            "content": "<p><span style=\"font-size: 18px;\">Given a fence with <strong>n </strong>posts and <strong>k</strong> colours, find out the number of ways of painting the fence so that <strong>not more than two </strong>consecutive posts have the same colours</span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">.<br />Answers are guaranteed to be fit into a 32 bit integer.</span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 3, k = 2 \n<strong>Output:</strong> 6\n<strong>Explanation</strong>: Let the 2 colours be 'R' and 'B'. </span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">We have following possible combinations:<br />1. RRB\n2. RBR\n3. RBB\n4. BRR\n5. BRB\n6. BBR</span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 2, k = 4 \n<strong>Output:</strong> 16\n<strong>Explanation</strong>: </span><span >After coloring first post with 4 possible combinations, you can still color </span><span >next posts with all 4 colors. Total possible </span><span >combinations will be 4x4=16</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 300<br />1 &le; k &le; 10<sup>5</sup><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a fence with 'n' posts and 'k' colors, determine the number of ways to paint the fence such that no more than two consecutive posts share the same color. The answer is guaranteed to fit within a 32-bit integer.",
                "constraints": [
                    "1 \u2264 n \u2264 300",
                    "1 \u2264 k \u2264 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 3, k = 2",
                        "output": "6",
                        "explanation": "With 3 posts and 2 colors (e.g., 'R' and 'B'), the valid combinations are: RRB, RBR, RBB, BRR, BRB, and BBR."
                    },
                    {
                        "input": "n = 2, k = 4",
                        "output": "16",
                        "explanation": "When there are 2 posts and 4 colors, the first post can be colored in 4 ways, and the second post can also be colored in 4 ways, giving a total of 4 * 4 = 16 possible colorings."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Consider the following image in which c, c&rsquo; and c&rdquo; are respective colors of posts i, i-1 and i -2.</p>\n\n<p><br />\n<img alt=\"\" src=\"https://cdncontribute.geeksforgeeks.org/wp-content/uploads/painting-fence-2.png\" style=\"height:300px; width:276px\" title=\"Click to enlarge\" /></p>\n\n<p>&nbsp;</p>\n\n<p>According to the constraint of the problem, c = c&rsquo; = c&rdquo; is not possible simultaneously, so either c&rsquo; != c or c&rdquo; != c or both. There are k &ndash; 1 possibilities for c&rsquo; != c and k &ndash; 1 for c&rdquo; != c.</p>\n\n<pre>\n diff = no of ways when color of last\n        two posts is different\n same = no of ways when color of last \n        two posts is same\n total ways = diff + sum\n\nfor n = 1\n    diff = k, same = 0\n    total = k\n\nfor n = 2\n    diff = k * (k-1) //k choices for\n           first post, k-1 for next\n    same = k //k choices for common \n           color of two posts\n    total = k +  k * (k-1)\n\nfor n = 3\n    diff = [k +  k * (k-1)] * (k-1) \n           (k-1) choices for 3rd post \n           to not have color of 2nd \n           post.\n    same = k * (k-1) \n           c&#39;&#39; != c, (k-1) choices for it\n\nHence we deduce that,\ntotal[i] = same[i] + diff[i]\nsame[i]  = diff[i-1]\ndiff[i]  = (diff[i-1] + diff[i-2]) * (k-1)\n         = total[i-1] * (k-1)</pre>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to count the number of ways.\n    int countWays(int n, int k) {\n        if (n == 1)\n            return k;\n        if (n == 2)\n            return k * k;\n\n        // Initialize for the first two posts\n        int dp1 = k;     // dp[1]\n        int dp2 = k * k; // dp[2]\n\n        for (int i = 3; i <= n; ++i) {\n            // Calculate the current dp value with overflow check\n            int current = (k - 1) * (dp1 + dp2);\n\n            // Update dp1 and dp2 for the next iteration\n            dp1 = dp2;\n            dp2 = current;\n        }\n        return dp2;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function template in Java\nclass Solution {\n    // Function to count the number of ways.\n    public int countWays(int n, int k) {\n        // There are k ways to color first post\n        int total = k;\n\n        // There are 0 ways for single post to\n        // violate (same color_ and k ways to\n        // not violate (different color)\n        int same = 0, diff = k;\n\n        // Fill for 2 posts onwards\n        for (int i = 2; i <= n; i++) {\n            // Current same is same as previous diff\n            same = diff;\n\n            // We always have k-1 choices for next post\n            diff = ((int)total * (k - 1));\n\n            // Total choices till i.\n            total = (same + diff);\n        }\n        return total;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# Python program for Painting Fence Algorithm\n# using space optimised\nclass Solution:\n\n    def countWays(self, n, k):\n\n        # base cases\n        if n == 1:\n            return k\n        if n == 2:\n            return k * k\n\n        # Fill value for 1 and 2 fences\n        prev2 = k\n        prev1 = k * k\n\n        for i in range(3, n + 1):\n            curr = prev1 * (k - 1) + prev2 * (k - 1)\n\n            # update the values\n            prev2 = prev1\n            prev1 = curr\n\n        return prev1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countWays(n, k) {\n        // base cases\n        if (n === 1) return k;\n        if (n === 2) return k * k;\n\n        // Fill value for 1 and 2 fences\n        let prev2 = k;\n        let prev1 = k * k;\n\n        for (let i = 3; i <= n; i++) {\n            let curr = prev1 * (k - 1) + prev2 * (k - 1);\n\n            // update the values\n            prev2 = prev1;\n            prev1 = curr;\n        }\n\n        return prev1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}