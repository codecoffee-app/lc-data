{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704497,
            "title": "Pair cube count",
            "titleSlug": "pair-cube-count4132",
            "content": "<p><span style=\"font-size: 18px;\">Given a positive integer <strong>n</strong>, count all pairs of <strong>&lsquo;a&rsquo;</strong>(&gt;=1) and <strong>&lsquo;b&rsquo;</strong>(&gt;=0) that satisfy the condition <strong>a<sup>3</sup> + b<sup>3 </sup>= n</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><strong><span style=\"font-size: 18px;\">n = </span></strong><span style=\"font-size: 18px;\">9 </span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">2</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Explanation:</span> </strong></span><span style=\"font-size: 18px;\">There are two solutions: (a=1, b=2) and (a=2, b=1).</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><strong><span style=\"font-size: 18px;\">n = </span></strong><span style=\"font-size: 18px;\">27</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong></span><span style=\"font-size: 18px;\">Thereis only one solution: (a=3, b=0). </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer `n`, determine the number of pairs (a, b) that satisfy the equation a\u00b3 + b\u00b3 = n, where 'a' is greater than or equal to 1 and 'b' is greater than or equal to 0.",
                "constraints": [
                    "1 <= n <= 100000"
                ],
                "testcases": [
                    {
                        "input": "9",
                        "output": "2",
                        "explanation": "The pairs (a, b) that satisfy a\u00b3 + b\u00b3 = 9 are (1, 2) and (2, 1)."
                    },
                    {
                        "input": "27",
                        "output": "1",
                        "explanation": "The only pair (a, b) that satisfies a\u00b3 + b\u00b3 = 27 is (3, 0)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse numbers from 1 to cube root of N.<br />\n&nbsp; a) Subtract cube of current number from<br />\n&nbsp;&nbsp;&nbsp; N and check if their difference is a<br />\n&nbsp;&nbsp;&nbsp; perfect cube or not.<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i) If perfect cube then increment count.</span></p>\n\n<p><span style=\"font-size:18px\">2- Return count.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int pairCubeCount(int n) {\n\n        int count = 0, i;\n\n        // Check for each number 1 to cbrt(N)\n        for (i = 1; i * i * i <= n; i++) {\n            // Store cube of a number\n            int cb = i * i * i;\n\n            // Subtract the cube from given N\n            int diff = n - cb;\n\n            // Check if the difference is also\n            // a perfect cube\n            int cbrtDiff = cbrt(diff);\n\n            // If yes, then increment count\n            if (cbrtDiff * cbrtDiff * cbrtDiff == diff)\n                count++;\n        }\n\n        // Return count\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int pairCubeCount(int n) {\n        int count = 0;\n\n        // Check for each number 1 to cbrt(n)\n        for (int i = 1; i <= Math.cbrt(n); i++) {\n            // Store cube of a number\n            int cb = i * i * i;\n\n            // Subtract the cube from given N\n            int diff = n - cb;\n\n            // Check if the difference is also a perfect cube\n            int cbrtDiff = (int)Math.cbrt(diff);\n\n            // If yes, then increment count\n            if (cbrtDiff * cbrtDiff * cbrtDiff == diff) count++;\n        }\n\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def pairCubeCount(self, n):\n        count = 0\n\n        # Check for each number 1 to cbrt(n)\n        for i in range(1, int(n**(1 / 3)) + 1):\n            # Store cube of a number\n            cb = i**3\n\n            # Subtract the cube from given N\n            diff = n - cb\n\n            # Check if the difference is also a perfect cube\n            cbrtDiff = round(diff**(1 / 3))\n\n            # If yes, then increment count\n            if cbrtDiff**3 == diff:\n                count += 1\n\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution{\n    pairCubeCount(n) {\n        let count = 0;\n        \n        // Check for each number 1 to cbrt(N)\n        for (let i = 1; i*i*i <= n ; i++)\n        {\n            // Store cube of a number\n            let cb = i*i*i;\n    \n            // Subtract the cube from given N\n            let diff = n - cb;\n    \n            // Check if the difference is also a perfect cube\n            let cbrtDiff = Math.round(Math.cbrt(diff));\n    \n            // If yes, then increment count\n            if (cbrtDiff*cbrtDiff*cbrtDiff == diff)\n                count++;\n        }\n\n        // Return count\n        return count;\n    }\n};",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}