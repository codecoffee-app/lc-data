{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703192,
            "title": "Sum Pair closest to target",
            "titleSlug": "pair-in-array-whose-sum-is-closest-to-x1124",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> and a number <strong>target</strong>, find a pair of elements (a, b) in <strong>arr[],&nbsp;</strong>where a&lt;=b whose sum is closest to <strong>target.</strong><br /></span><strong><span style=\"font-size: 18px;\">Note:&nbsp;</span></strong><span style=\"font-size: 18px;\">Return the pair in sorted order and if there are multiple such pairs return the pair with maximum absolute difference. If no such pair exists return an empty array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [10, 30, 20, 5], target = 25\n<strong>Output:</strong> [5, 20]\n<strong>Explanation:</strong> As 5 + 20 = 25 is closest to 25.\n</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [5, 2, 7, 1, 4], target = 10\n<strong>Output:</strong> [2, 7]\n<strong>Explanation:</strong> As (4, 7) and (2, 7) both are closest to 10, but absolute difference of (2, 7) is 5 and (4, 7) is 3. Hence, [2, 7] has maximum absolute difference and closest to target. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [10], target = 10\n<strong>Output:</strong> []\n<strong>Explanation:</strong> As the input array has only 1 element, return an empty array.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 2*10<sup>5</sup><br />0 &lt;= target&lt;= 2*10<sup>5</sup><br />0 &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and a number `target`, find a pair of elements (a, b) in `arr[]` where a <= b, such that their sum is closest to `target`. Return the pair in sorted order. If there are multiple pairs with the same minimum difference, return the pair with the maximum absolute difference. If no such pair exists, return an empty array.",
                "constraints": [
                    "1 <= arr.size() <= 2 * 10^5",
                    "0 <= target <= 2 * 10^5",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [10, 30, 20, 5], target = 25",
                        "output": "[5, 20]",
                        "explanation": "The pair (5, 20) has a sum of 25, which is exactly equal to the target. Therefore, it is the closest pair."
                    },
                    {
                        "input": "arr[] = [5, 2, 7, 1, 4], target = 10",
                        "output": "[2, 7]",
                        "explanation": "Both (4, 7) and (2, 7) have sums closest to 10. However, the absolute difference between 2 and 7 (5) is greater than the absolute difference between 4 and 7 (3). Therefore, the pair (2, 7) is chosen."
                    },
                    {
                        "input": "arr[] = [10], target = 10",
                        "output": "[]",
                        "explanation": "The input array has only one element, so a pair cannot be formed. Hence, an empty array is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\"><span >Use the fact that the array is sorted and try to apply a two pointer approach.</span>&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            }
        ],
        "companies": [
            "ola-cabs"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution {\n  public:\n    vector<int> sumClosest(vector<int>& arr, int target) {\n        sort(arr.begin(), arr.end());\n        int n = arr.size();\n        vector<int> res;\n        int minDiff = INT_MAX;\n\n        int left = 0, right = n - 1;\n\n        while (left < right) {\n            int currSum = arr[left] + arr[right];\n\n            // Check if this pair is closer than the closest\n            // pair so far\n            if (abs(target - currSum) < minDiff) {\n                minDiff = abs(target - currSum);\n                res = {arr[left], arr[right]};\n            }\n\n            // If this pair has less sum, move to greater values\n            if (currSum < target)\n                left++;\n\n            // If this pair has more sum, move to smaller values\n            else if (currSum > target)\n                right--;\n\n            // If this pair has sum = target, return it\n            else\n                return res;\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public List<Integer> sumClosest(int[] arr, int target) {\n        Arrays.sort(arr); // Sorting the array to use two-pointer approach\n        int n = arr.length;\n        List<Integer> res = new ArrayList<>();\n        int minDiff = Integer.MAX_VALUE;\n\n        int left = 0, right = n - 1;\n\n        while (left < right) {\n            int currSum = arr[left] + arr[right];\n\n            // Check if this pair is closer than the closest\n            // pair so far\n            if (Math.abs(target - currSum) < minDiff) {\n                minDiff = Math.abs(target - currSum);\n                res = Arrays.asList(arr[left], arr[right]);\n            }\n\n            // If this pair has less sum, move to greater values\n            if (currSum < target) left++;\n\n            // If this pair has more sum, move to smaller values\n            else if (currSum > target)\n                right--;\n\n            // If this pair has sum = target, return it\n            else\n                return res;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def sumClosest(self, arr, target):\n        arr.sort()\n        n = len(arr)\n        res = []\n        minDiff = float('inf')\n\n        left = 0\n        right = n - 1\n\n        while left < right:\n            currSum = arr[left] + arr[right]\n\n            # Check if this pair is closer than the closest\n            # pair so far\n            if abs(target - currSum) < minDiff:\n                minDiff = abs(target - currSum)\n                res = [arr[left], arr[right]]\n\n            # If this pair has less sum, move to greater values\n            if currSum < target:\n                left += 1\n\n            # If this pair has more sum, move to smaller values\n            elif currSum > target:\n                right -= 1\n\n            # If this pair has sum = target, return it\n            else:\n                return res\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    sumClosest(arr, target) {\n        arr.sort((a, b) => a - b);\n        let n = arr.length;\n        let res = [];\n        let minDiff = Number.MAX_VALUE;\n\n        let left = 0, right = n - 1;\n\n        while (left < right) {\n            let currSum = arr[left] + arr[right];\n\n            // Check if this pair is closer than the closest\n            // pair so far\n            if (Math.abs(target - currSum) < minDiff) {\n                minDiff = Math.abs(target - currSum);\n                res = [ arr[left], arr[right] ];\n            }\n\n            // If this pair has less sum, move to greater values\n            if (currSum < target) left++;\n\n            // If this pair has more sum, move to smaller values\n            else if (currSum > target)\n                right--;\n\n            // If this pair has sum = target, return it\n            else\n                return res;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}