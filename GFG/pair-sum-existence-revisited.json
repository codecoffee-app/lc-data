{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700920,
            "title": "Pair Sum Existence- Revisited",
            "titleSlug": "pair-sum-existence-revisited",
            "content": "<p><span style=\"font-size:18px\">You are given an array<strong> A of size N</strong>, and you are also given a <strong>sum</strong>. You need to find if two numbers in A exist that have sum equal to the given sum.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Examples:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\n1\r\n10\r\n1 2 3 4 5 6 7 8 9 10\r\n14\r\n<strong>Output:</strong>\r\n1</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Input Format:</strong><br />\r\nThe first line of input contains <strong>T</strong> denoting the number of test cases. T test cases follow. Each test case contains three lines of input. The first line contains<strong> N</strong> denoting the size of the array A. The second line contains N <strong>elements</strong> of the array. The third line contains the element <strong>sum</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Output Format:</strong><br />\r\nFor each test case, in a new line, print the required output.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nSince this is a function problem, you don&#39;t need to take any input. Just complete the provided function <strong>sumExists()</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= T &lt;= 100<br />\r\n1 &lt;= N &lt;= 1000<br />\r\n1 &lt;= A<sub>i</sub> &lt;= 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `A` of size `N` and a target `sum`, determine if there exist two distinct numbers within `A` whose sum equals the target `sum`.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 1000 (Size of array A)",
                    "1 <= A[i] <= 10^6 (Value of elements in A)"
                ],
                "testcases": [
                    {
                        "input": "1\n10\n1 2 3 4 5 6 7 8 9 10\n14",
                        "output": "1",
                        "explanation": "The array is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] and the target sum is 14.  The numbers 4 and 10 sum to 14, so the output is 1 (representing true)."
                    },
                    {
                        "input": null,
                        "output": null,
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": null,
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\n/* Helper class containing sumExists function\r\narr[]: array eleemnts\r\nn: size of the array\r\nsum: to check if pair having this sum\r\n*/\r\nclass Geeks\r\n{\r\n    // function to check if any pair having specified sum\r\n    // and return 1 if so, else 0\r\n    public static int sumExists(int arr[], int n, int sum)\r\n    {\r\n        \r\n        HashSet<Integer> hs = new HashSet<>();\r\n        \r\n        for(int i = 0; i < n; i++)\r\n        {\r\n            int temp = sum-arr[i]; \r\n  \r\n            // checking for condition \r\n            if (temp>=0 && hs.contains(temp)) \r\n            { \r\n                \r\n                 return 1;\r\n                 \r\n            } \r\n            hs.add(arr[i]); \r\n        }\r\n        \r\n        return 0;\r\n        \r\n      }\r\n      \r\n    \r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}