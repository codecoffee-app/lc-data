{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700919,
            "title": "Pair Sum Existence",
            "titleSlug": "pair-sum-existence",
            "content": "<p><span style=\"font-size:18px\">You are given an array<strong> A (distinct integers) of size N</strong>, and you are also given a <strong>sum</strong>. You need to find if two numbers in A exists that have sum equal to the given sum.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Input Format:</strong><br />\nThe first line of input contains <strong>T</strong> denoting the number of testcases. T testcases follow. Each testcase contains three lines of input. The first line contains<strong> N</strong> denoting the size of the array A. The second line contains N <strong>elements</strong> of the array. The third line contains element <strong>sum</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Output Format:</strong><br />\nFor each testcase, in a new line, print&nbsp; <strong>&quot;1&quot;</strong>(without quotes) if any pair found, othwerwise print <strong>&quot;0&quot;</strong>(without quotes) if not found.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nSince this is a function problem, you don&#39;t need to take any input. Just complete the provided function <strong>sumExists</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= T &lt;= 100<br />\n1 &lt;= N &lt;= 1000<br />\n1 &lt;= A<sub>i</sub> &lt;= 10<sup>6</sup></span></p>\n\n<p><span style=\"font-size:18px\"><strong>Examples:<br />\nInput:</strong><br />\n1<br />\n10<br />\n1 2 3 4 5 6 7 8 9 10<br />\n14<br />\n<strong>Output:</strong><br />\n1</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "set",
                "slug": "set"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to check if there exist two numbers in the array\n// whose sum is equal to the given sum.\n\nint sumExists(int arr[], int n, int sum){\n\n        // Creating a set to store unique elements of the array.\n        set<int> st;\n        \n        // Inserting all elements of the array into the set.\n        for(int i = 0; i < n; i++)\n             st.insert(arr[i]);\n         \n        // Iterating through the array again\n        for(int i = 0; i < n; i++)\n       {\n           // If the difference between the sum and current element\n           // is equal to the current element itself, skip it.\n           if(sum-arr[i]==arr[i])\n              continue;\n           else\n          {\n              // If the difference between the sum and current element\n              // is present in the set, return 1.\n              if(st.find(sum-arr[i])!=st.end())\n              {\n                return 1;\n              }\n          }\n    }\n    // If no such pair is found, return 0.\n    return 0;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Geeks\n{\n    // Function to check if there exists a pair in the array\n    // whose sum is equal to the given sum\n    public static int sumExists(int arr[], int n, int sum)\n    {\n        // Create a HashSet to store the elements of the array\n        HashSet<Integer> st =  new HashSet<Integer>();\n        \n        // Add all elements of the array to the HashSet\n        for(int i = 0; i < n; i++)\n            st.add(arr[i]);\n         \n        // Iterate through the array\n        for(int i=0;i<n;i++)\n       {\n           // Check if the difference between the sum and\n           // the current element exists in the HashSet\n           // If it does, return 1 (true)\n           if(sum-arr[i]==arr[i])\n              continue; // Skip if the sum and current element are the same\n           else\n          {\n              // Check if the difference exists in the HashSet\n              if(st.contains(sum-arr[i]))\n              {\n                // Return 1 (true) if the difference exists\n                return 1;\n              }\n          }\n    }\n    \n    // Return 0 (false) if no pair exists with the given sum\n    return 0;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution{\n    sumExists(arr, n, sum){\n        let st = new Set();\n        for(let i = 0; i < n; i++)\n            st.add(arr[i]);\n        for(let i = 0; i < n; i++)\n        {\n            if(sum-arr[i]==arr[i])\n                continue;\n            else\n            {\n                if(st.has(sum-arr[i]))\n                {\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to check if there is a pair with the given sum in the array.\n    public int sumExists(int[] arr, int n, int sum)\n    {\n        // Creating a HashSet to store unique elements of the array.\n        HashSet<int> set = new HashSet<int>();\n        \n        // Inserting all elements of the array into the set.\n        for(int i = 0; i < n; i++)\n             set.Add(arr[i]);\n         \n        // Iterating through the array again\n        for(int i = 0; i < n; i++)\n        {\n            // If the difference between the sum and current element\n            // is equal to the current element itself, skip it.\n            if(sum-arr[i]==arr[i])\n                continue;\n            else\n            {\n                // If the difference between the sum and current element\n                // is present in the set, return 1.\n                if(set.Contains(sum-arr[i]))\n                {\n                    return 1;\n                }\n            }\n        }\n        // If no such pair is found, return 0.\n        return 0;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}