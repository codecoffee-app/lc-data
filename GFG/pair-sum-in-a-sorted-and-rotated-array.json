{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 884343,
            "title": "Pair Sum in a Sorted and Rotated Array",
            "titleSlug": "pair-sum-in-a-sorted-and-rotated-array",
            "content": "<p><span ><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">Given an array of positive elements </span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">arr[]</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"> </span><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">that is <strong>sorted</strong> and then <strong>rotated</strong> around an unknown point, the task is to check if the array has a pair with sum equals to a given&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">target</strong></strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">.</span></span></p>\n<p><span ><strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">Examples:</span></strong></span></p>\n<pre><span ><span style=\"color: #273239; font-family: Nunito, sans-serif;\"><span style=\"letter-spacing: 0.162px; background-color: #ffffff;\"><strong>Input: </strong>arr[] = [7, 9, 1, 3, 5], target = 6<br /><strong>Output: </strong>true<br /><strong>Explanation: </strong>arr[2] and arr[4] has sum equals to 6 which is equal to the target.<br /></span></span></span></pre>\n<pre><span ><span style=\"color: #273239; font-family: Nunito, sans-serif;\"><span style=\"letter-spacing: 0.162px; background-color: #ffffff;\"><strong>Input: </strong>arr[] = [2, 3, 4, 1], target = 3<br /><strong>Output: </strong>true<br /><strong>Explanation: </strong>arr[0] and arr[3] has sum equals to 3 which is equal to the target.<br /></span></span></span></pre>\n<pre><span ><span style=\"color: #273239; font-family: Nunito, sans-serif;\"><span style=\"letter-spacing: 0.162px; background-color: #ffffff;\"><strong>Input: </strong>arr[] = [10, 7, 4, 1], target = 9<br /><strong>Output: </strong>false<br /><strong>Explanation: </strong>There is no such pair exists in arr[] which sums to target.<br /></span></span></span></pre>\n<p><span ><strong><span style=\"color: #273239; font-family: Nunito, sans-serif;\"><span style=\"letter-spacing: 0.162px; background-color: #ffffff;\">Constraints:<br /></span></span></strong></span><span ><span style=\"color: #273239; font-family: Nunito, sans-serif;\"><span style=\"letter-spacing: 0.162px; background-color: #ffffff;\">2 &lt;= arr.size() &lt;=10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>6</sup><br />1 &lt;= target &lt;= 10<sup>6</sup></span></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    bool pairInSortedRotated(vector<int>& arr, int target) {\n        int n = arr.size();\n\n        // Find the pivot element\n        int i;\n        for (i = 0; i < n - 1; i++) {\n            if (arr[i] > arr[i + 1]) {\n                break;\n            }\n        }\n        // l is now index of smallest element\n        int l = (i + 1) % n;\n\n        // r is now index of largest element\n        int r = i;\n        // Keep moving either l or r till they meet\n        while (l != r) {\n\n            // If we find a pair with sum target, return true\n            if (arr[l] + arr[r] == target)\n                return true;\n\n            // If current pair sum is less, move to higher sum\n            if (arr[l] + arr[r] < target)\n                l = (l + 1) % n;\n\n            // Move to lower sum side\n            else\n                r = (n + r - 1) % n;\n        }\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static boolean pairInSortedRotated(int arr[], int target) {\n        int n = arr.length;\n        // Find the pivot element\n        int i;\n        for (i = 0; i < n - 1; i++)\n            if (arr[i] > arr[i + 1]) break;\n\n        // l is now index of smallest element\n        int l = (i + 1) % n;\n\n        // r is now index of largest element\n        int r = i;\n\n        // Keep moving either l or r till they meet\n        while (l != r) {\n\n            // If we find a pair with sum target, return true\n            if (arr[l] + arr[r] == target) return true;\n\n            // If current pair sum is less, move to higher sum\n            if (arr[l] + arr[r] < target) l = (l + 1) % n;\n\n            // Move to lower sum side\n            else\n                r = (n + r - 1) % n;\n        }\n        return false;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def pairInSortedRotated(self, arr, target):\n        n = len(arr)\n\n        # Find the pivot element\n        i = n - 1\n        for ind in range(n - 1):\n            if arr[ind] > arr[ind + 1]:\n                i = ind\n                break\n\n        # l is now index of smallest element\n        l = (i + 1) % n\n\n        # r is now index of largest element\n        r = i\n\n        # Keep moving either l or r till they meet\n        while l != r:\n\n            # If we find a pair with sum target, return true\n            if arr[l] + arr[r] == target:\n                return True\n\n            # If current pair sum is less, move to higher sum\n            if arr[l] + arr[r] < target:\n                l = (l + 1) % n\n\n            # Move to lower sum side\n            else:\n                r = (n + r - 1) % n\n        return False\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} target\n * @returns {number}\n */\n\nclass Solution {\n    pairInSortedRotated(arr, target) {\n        let n = arr.length;\n\n        // Find the pivot element\n        let i;\n        for (i = 0; i < n - 1; i++)\n            if (arr[i] > arr[i + 1]) break;\n\n        // l is now index of smallest element\n        let l = (i + 1) % n;\n\n        // r is now index of largest element\n        let r = i;\n\n        // Keep moving either l or r till they meet\n        while (l !== r) {\n\n            // If we find a pair with sum target, return true\n            if (arr[l] + arr[r] === target) return true;\n\n            // If current pair sum is less, move to higher sum\n            if (arr[l] + arr[r] < target) l = (l + 1) % n;\n\n            // Move to lower sum side\n            else\n                r = (n + r - 1) % n;\n        }\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}