{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701136,
            "title": "Pair Sum in BST",
            "titleSlug": "pair-sum-in-bst",
            "content": "<p><span style=\"font-size:18px\">Given a&nbsp;BST and a number<strong> X</strong>. The task is to check if any pair exists in BST or not&nbsp;whose sum is equal to X.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>\\t8\r\n&nbsp;   /   \\\r\n&nbsp;  3     9\r\n&nbsp; / \\\r\n&nbsp;1   5\r\nX = 4\r\n<strong>Output: </strong>1<strong>\r\nExplanation: </strong>For the given input, there\r\nexist a pair whose sum is, i.e, (3,1).</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>\\t0\r\n&nbsp;\\t\\\r\n&nbsp;\\t 1\r\n&nbsp;\\t  \\ \r\n&nbsp;\\t   3\r\n&nbsp;\\t /  \\\r\n&nbsp;\\t2    7\r\n&nbsp;\\t\\t\\\r\n&nbsp;\\t\\t 8\r\nX = 6\r\n<strong>Output: </strong>0<strong>\r\nExplanation: </strong>For the given input , there\r\nexists no such pair whose sum is 6.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\n&nbsp;Just write your code for the boolean function <strong>findPair</strong>() to check if a pair with given sum X exists in BST or not. The function returns <strong>true </strong>or <strong>false</strong>.&nbsp;The printing is done by the driver&#39;s code.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(Number of Nodes in the BST)<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(Number of Nodes in the BST).</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= Number of nodes &lt;= 10<sup>5</sup><br />\r\n1 &lt;= Value of the nodes&nbsp;&lt;= 10<sup>5</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and a target value X, determine if there exists a pair of nodes within the BST whose sum is equal to X.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5",
                    "1 <= Value of the nodes <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "BST:\n    8\n   /   \\\n  3     9\n / \\\n1   5\nX = 4",
                        "output": "1",
                        "explanation": "The pair (3, 1) exists in the BST, and their sum is equal to 4."
                    },
                    {
                        "input": "BST:\n    0\n     \\\n      1\n       \\\n        3\n       /  \\\n      2    7\n        \\\n         8\nX = 6",
                        "output": "0",
                        "explanation": "There is no pair of nodes in the BST whose sum equals 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "vmware"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\n\r\n//Function to find the pair whose sum is equal to given number.\r\nbool findpairUtil(Node* root, int sum, unordered_set<int>& set) \r\n{\r\n    // base case\r\n    if (root == NULL) return false;\r\n\r\n    //calling function recursively for the left subtree.\r\n    if (findpairUtil(root->left, sum, set))\r\n        return true;\r\n\r\n    //if (sum - root->data) is found in set, it means pair\r\n    //exists so we return true. \r\n    if (set.find(sum - root->data) != set.end()) \r\n    {\r\n        return true;\r\n    } \r\n    //else we insert the data at current node in set.\r\n    else\r\n        set.insert(root->data);\r\n\r\n    \r\n    //calling function recursively for the right subtree.\r\n    return findpairUtil(root->right, sum, set);\r\n}\r\n\r\n//Function to check if any pair exists in BST whose sum is equal to given value.\r\nbool findPair(Node* root, int sum) \r\n{\r\n    unordered_set<int> set;\r\n    \r\n    //if pair is found, we return true else false.\r\n    if (findpairUtil(root, sum, set))\r\n        return true;\r\n\r\n    return false;\r\n}\r\n\r\n\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass GFG \r\n{\r\n    static HashSet<Integer> set = new HashSet<>();\r\n    \r\n    //Function to find the pair whose sum is equal to given number.\r\n    static boolean findpairUtil(Node root, int sum, HashSet<Integer> set) \r\n    {\r\n        // base case\r\n        if (root == null) return false;\r\n        \r\n        //calling function recursively for the left subtree.\r\n        if (findpairUtil(root.left, sum, set) == true)\r\n            return true;\r\n\r\n        //if (sum - root->data) is found in set, it means pair\r\n        //exists so we return true.\r\n        if (set.contains(sum - root.data) == true) {\r\n            return true;\r\n        } \r\n        //else we insert the data at current node in set.\r\n        else\r\n            set.add(root.data);\r\n        \r\n        //calling function recursively for the right subtree.\r\n        return findpairUtil(root.right, sum, set);\r\n    }\r\n    \r\n    //Function to check if any pair exists in BST \r\n    //whose sum is equal to given value.\r\n    static boolean findPair(Node root, int sum)\r\n    {\r\n        set = new HashSet<Integer>();\r\n        \r\n        //if pair is found, we return true else false.\r\n        if (findpairUtil(root, sum, set)) \r\n            return true;\r\n\r\n        return false;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n#Function to check if any pair exists in BST whose sum is equal to given value.\r\ndef findPair(root,x):\r\n   \r\n    global hash\r\n    if root is None:\r\n        return False\r\n        \r\n    #calling function recursively for the left subtree.\r\n    if findPair(root.left,x): \r\n        return True\r\n        \r\n    #if (X- root.key) is found in set, it means pair\r\n    #exists so we return true.\r\n    if (x-root.key) in hash: \r\n        return True\r\n    #else we insert the data at current node in set.\r\n    hash.add(root.key)\r\n\r\n    #calling function recursively for the right subtree.\r\n    return findPair(root.right,x)\r\n    \r\n    \r\n    \r\n    ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} root\r\n * @param {number} sum\r\n * @returns {boolean}\r\n*/\r\n\r\n\r\n\r\nclass Solution \r\n{\r\n    //Function to find the pair whose sum is equal to given number.\r\n    findpairUtil(root, sum, st)\r\n    {\r\n        // base case\r\n        if (root === null) return false;\r\n    \r\n        //calling function recursively for the left subtree.\r\n        if (this.findpairUtil(root.left, sum, st)) \r\n            return true;\r\n        \r\n        //if (sum - root.data) is found in set, it means pair\r\n        //exists so we return true.\r\n        if (st.has(sum - root.data)) {\r\n            return true;\r\n        } \r\n        //else we insert the data at current node in set.\r\n        else\r\n            st.add(root.data);\r\n        \r\n        //calling function recursively for the right subtree.\r\n        return this.findpairUtil(root.right, sum, st);\r\n    }\r\n    \r\n    //Function to check if any pair exists in BST\r\n    //whose sum is equal to given value.\r\n    findPair(root, sum)\r\n    {\r\n        let st = new Set();\r\n        //if pair is found, we return true else false.\r\n        if (this.findpairUtil(root, sum, st))\r\n            return true;\r\n        return false;\r\n    }\r\n}\r\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}