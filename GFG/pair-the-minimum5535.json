{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703186,
            "title": "Pair the minimum",
            "titleSlug": "pair-the-minimum5535",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of size 2n, where n is a positive integer, the task is to divide the array into <strong>n</strong> pairs such that the maximum sum of any pair is minimized.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [5, 8, 3, 9] \n<strong>Output :</strong> 13\n<strong>Explanation:\n</strong>Possible pairs:\nCase 1: (8, 9), (3, 5) &rarr; max sum: 17\nCase 2: (5, 9), (3, 8) &rarr; max sum: 14\nCase 3: (3, 9), (5, 8) &rarr; max sum: 13\nThe minimum of these maximum sums is 13. Hence, the answer is 13.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input :</strong> arr[] = [1, 6, 5, 9]<strong>\nOutput :</strong> 11</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(nlogn).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size()&le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of size `2n`, where `n` is a positive integer, divide the array into `n` pairs. The goal is to minimize the maximum sum among all these pairs.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[5, 8, 3, 9]",
                        "output": "13",
                        "explanation": "Consider all possible pairings:\n\nPairing 1: (8, 9), (3, 5)  -> max sum: 17\nPairing 2: (5, 9), (3, 8)  -> max sum: 14\nPairing 3: (3, 9), (5, 8)  -> max sum: 13\n\nThe minimum of these maximum sums is 13."
                    },
                    {
                        "input": "[1, 6, 5, 9]",
                        "output": "11",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the array and pair elements from the start and end to find the maximum pair sum.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the pair with the minimum sum\n    int Pair_minimum(vector<int>& arr) {\n        int n = arr.size() / 2;\n\n        // Sorting the given array in ascending order\n        sort(arr.begin(), arr.end());\n\n        // Initializing the maximum sum to -1\n        int ans = -1;\n\n        // Iterating over the first half and last half of the sorted array\n        for (int k = 0, j = 2 * n - 1; k < n && j >= n; k++, j--) {\n            // Calculating the sum of the current pair and updating the maximum sum\n            ans = max(ans, arr[k] + arr[j]);\n        }\n\n        // Returning the maximum pair sum\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\nclass Solution {\n\n    // Function for finding the maximum pair sum\n    public static int Pair_minimum(int arr[]) {\n        int n = arr.length / 2;\n\n        // Sorting the array in ascending order\n        Arrays.sort(arr);\n\n        // Initializing the maximum sum to -1\n        int ans = -1;\n\n        // Iterating over the first half and the last half of the sorted array\n        for (int k = 0, j = 2 * n - 1; k < n && j >= n; k++, j--) {\n            // Calculating the sum of the current pair and updating the maximum sum\n            ans = Math.max(ans, arr[k] + arr[j]);\n        }\n\n        // Returning the maximum pair sum\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# User function Template for Python\n\n\nclass Solution:\n\n    def Pair_minimum(self, arr):\n        # Calculate the length of half the array\n        n = len(arr) // 2\n\n        # Sorting the array in ascending order\n        arr.sort()\n\n        # Initialize the maximum pair sum\n        ans = -1\n\n        # Iterate over the first half and the last half of the sorted array\n        for k in range(n):\n            j = 2 * n - 1 - k  # Index from the end\n            # Calculate the sum of the current pair and update the maximum sum\n            ans = max(ans, arr[k] + arr[j])\n\n        # Return the maximum pair sum\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    // Function to find the maximum pair sum\n    /**\n     * @param {number[]} arr\n     * @returns {number}\n     */\n    Pair_minimum(arr) {\n        // Calculate half the length of the array\n        let n = Math.floor(arr.length / 2);\n\n        // Sort the array in ascending order\n        arr.sort((a, b) => a - b);\n\n        // Initialize the maximum pair sum\n        let ans = -1;\n\n        // Iterate over the first half and the last half of the sorted array\n        for (let k = 0; k < n; k++) {\n            let j = 2 * n - 1 - k; // Index from the end\n            // Calculate the sum of the current pair and update the maximum sum\n            ans = Math.max(ans, arr[k] + arr[j]);\n        }\n\n        // Return the maximum pair sum\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}