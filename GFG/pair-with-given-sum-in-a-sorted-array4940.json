{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703485,
            "title": "Pair with given sum in a sorted array",
            "titleSlug": "pair-with-given-sum-in-a-sorted-array4940",
            "content": "<p><span style=\"font-size: 20px;\">You are given an integer <strong>target</strong> and an array <strong>arr[]</strong>. You have to find number of pairs in <strong>arr[]</strong> which sums up to <strong>target</strong>. It is given that the elements of the <strong>arr[]</strong> are in <strong>sorted </strong>order.<br /><strong>Note:</strong> pairs should have elements of distinct indexes.&nbsp;</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input: </strong>arr[] = [-1, 1, 5, 5, 7], target = 6\n<strong>Output: </strong>3\n<strong>Explanation: </strong>There are 3 pairs which sum up to 6 : {1, 5}, {1, 5} and {-1, 7}.\n</span></pre>\n<pre><span style=\"font-size: 20px;\"><strong>Input: </strong>arr[] = [1, 1, 1, 1], target = 2<br /></span><strong style=\"font-size: 20px;\">Output: </strong><span style=\"font-size: 20px;\">6<br /></span><strong style=\"font-size: 20px;\">Explanation: </strong><span style=\"font-size: 20px;\">There are 6 pairs which sum up to 2 : {<span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 14pt; letter-spacing: 0.162px; text-wrap-mode: wrap; background-color: #f9f9f9;\">1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1} and {1, 1}.</span></span></pre>\n<pre><span style=\"font-size: 20px;\"><strong>Input: </strong>arr[] = [-1, 10, 10, 12, 15], target = 125\n<strong>Output: </strong>0\n<strong>Explanation: </strong>There is no such pair which sums up to 125.</span></pre>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br />-10<sup>5</sup> &lt;= target &lt;=10<sup>5</sup><br />&nbsp;2 &lt;= arr.size() &lt;= 10<sup>5</sup><br />-10<sup>5</sup> &lt;= arr[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted integer array `arr[]` and an integer `target`, find the number of distinct pairs in `arr[]` that sum up to `target`. Each pair must have elements with different indices.",
                "constraints": [
                    "-10^5 <= target <= 10^5",
                    "2 <= arr.size() <= 10^5",
                    "-10^5 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [-1, 1, 5, 5, 7], target = 6",
                        "output": "3",
                        "explanation": "The pairs that sum up to 6 are: {1, 5}, {1, 5}, and {-1, 7}.  Note that the indices of the '5's are different in each contributing pair."
                    },
                    {
                        "input": "arr[] = [1, 1, 1, 1], target = 2",
                        "output": "6",
                        "explanation": "All possible pairs of elements sum to 2. Since all elements are 1, we need to count all combinations of selecting two different indices from the array of length 4. This is 4C2 = 4! / (2! * 2!) = 6."
                    },
                    {
                        "input": "arr[] = [-1, 10, 10, 12, 15], target = 125",
                        "output": "0",
                        "explanation": "There are no pairs in the array that sum to 125."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We take two pointers, one representing the first element and the other representing the last element of the array, Then try making the sum of them equal to the target by moving them according to your need.</p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to count pairs with the given sum.\n    int countPairs(vector<int> &arr, int target) {\n        int res = 0;\n        int n = arr.size();\n        int left = 0, right = n - 1;\n\n        while (left < right) {\n\n            // If sum is greater\n            if (arr[left] + arr[right] < target)\n                left++;\n\n            // If sum is lesser\n            else if (arr[left] + arr[right] > target)\n                right--;\n\n            // If sum is equal\n            else {\n\n                int cnt1 = 0, cnt2 = 0;\n                int ele1 = arr[left], ele2 = arr[right];\n\n                // Count frequency of first element of the pair\n                while (left <= right and arr[left] == ele1) {\n                    left++;\n                    cnt1++;\n                }\n\n                // Count frequency of second element of the pair\n                while (left <= right and arr[right] == ele2) {\n                    right--;\n                    cnt2++;\n                }\n\n                // If both the elements are same, then count of\n                // pairs = the number of ways to choose 2\n                // elements among cnt1 elements\n                if (ele1 == ele2)\n                    res += (cnt1 * (cnt1 - 1)) / 2;\n\n                // If the elements are different, then count of\n                // pairs = product of the count of both elements\n                else\n                    res += (cnt1 * cnt2);\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to count pairs with given sum in the array\n    int countPairs(int arr[], int target) {\n        int res = 0;\n        int n = arr.length;\n        int left = 0, right = n - 1;\n\n        while (left < right) {\n\n            // If sum is greater\n            if (arr[left] + arr[right] < target) left++;\n\n            // If sum is lesser\n            else if (arr[left] + arr[right] > target)\n                right--;\n\n            // If sum is equal\n            else {\n                int cnt1 = 0, cnt2 = 0;\n                int ele1 = arr[left], ele2 = arr[right];\n\n                // Count frequency of first element of the pair\n                while (left <= right && arr[left] == ele1) {\n                    left++;\n                    cnt1++;\n                }\n\n                // Count frequency of second element of the pair\n                while (left <= right && arr[right] == ele2) {\n                    right--;\n                    cnt2++;\n                }\n\n                // If both the elements are same, then count of\n                // pairs = the number of ways to choose 2\n                // elements among cnt1 elements\n                if (ele1 == ele2) res += (cnt1 * (cnt1 - 1)) / 2;\n\n                // If the elements are different, then count of\n                // pairs = product of the count of both elements\n                else\n                    res += (cnt1 * cnt2);\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def countPairs(self, arr, target):\n        res = 0\n        n = len(arr)\n        left = 0\n        right = n - 1\n\n        while left < right:\n\n            # If sum is greater\n            if arr[left] + arr[right] < target:\n                left += 1\n\n            # If sum is lesser\n            elif arr[left] + arr[right] > target:\n                right -= 1\n\n            # If sum is equal\n            else:\n                cnt1 = 0\n                cnt2 = 0\n                ele1 = arr[left]\n                ele2 = arr[right]\n\n                # Count frequency of first element of the pair\n                while left <= right and arr[left] == ele1:\n                    left += 1\n                    cnt1 += 1\n\n                # Count frequency of second element of the pair\n                while left <= right and arr[right] == ele2:\n                    right -= 1\n                    cnt2 += 1\n\n                # If both the elements are same, then count of\n                # pairs = the number of ways to choose 2\n                # elements among cnt1 elements\n                if ele1 == ele2:\n                    res += (cnt1 * (cnt1 - 1)) // 2\n\n                # If the elements are different, then count of\n                # pairs = product of the count of both elements\n                else:\n                    res += (cnt1 * cnt2)\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    countPairs(arr, target) {\n        let res = 0;\n        const n = arr.length;\n        let left = 0, right = n - 1;\n\n        while (left < right) {\n\n            // If sum is greater\n            if (arr[left] + arr[right] < target) {\n                left++;\n            }\n\n            // If sum is lesser\n            else if (arr[left] + arr[right] > target) {\n                right--;\n            }\n\n            // If sum is equal\n            else {\n                let cnt1 = 0, cnt2 = 0;\n                const ele1 = arr[left], ele2 = arr[right];\n\n                // Count frequency of first element of the pair\n                while (left <= right && arr[left] === ele1) {\n                    left++;\n                    cnt1++;\n                }\n\n                // Count frequency of second element of the pair\n                while (left <= right && arr[right] === ele2) {\n                    right--;\n                    cnt2++;\n                }\n\n                // If both the elements are same, then count of\n                // pairs = the number of ways to choose 2\n                // elements among cnt1 elements\n                if (ele1 === ele2) res += (cnt1 * (cnt1 - 1)) / 2;\n\n                // If the elements are different, then count of\n                // pairs = product of the count of both elements\n                else\n                    res += (cnt1 * cnt2);\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}