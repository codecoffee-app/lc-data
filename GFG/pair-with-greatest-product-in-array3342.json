{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702869,
            "title": "Pair with greatest product in array",
            "titleSlug": "pair-with-greatest-product-in-array3342",
            "content": "<p><span >Given an array <code>arr[]</code> of positive integers, the task is to find the largest element in the array that can be expressed as the product of two elements from the array. The two elements forming the product must be at different indices.</span></p>\n<p><span >If no such element exists, return <code>-1</code>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [10, 3, 5, 30, 35]\n<strong>Output:</strong> 30\n<strong>Explanation:</strong> 30 is the product of 10 and 3.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [10, 2, 4, 30, 35]\n<strong>Output: </strong>-1</span><br /><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> Since, no such element exists.</span></span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [10, 2, 2, 4, 8, 30, 35]\n<strong>Output:</strong> 8<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">  8 is the product of 4 and 2.</span></span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n * sqrt(max(arr[i])))<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, find the largest element in the array that can be expressed as the product of two *distinct* elements from the same array. Return -1 if no such element exists.",
                "constraints": [
                    "1 <= array size <= 10^5",
                    "1 <= element value <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[10, 3, 5, 30, 35]",
                        "output": "30",
                        "explanation": "30 is the largest element that can be expressed as the product of 10 and 3, which are present in the array at different indices."
                    },
                    {
                        "input": "[10, 2, 4, 30, 35]",
                        "output": "-1",
                        "explanation": "No element in the array can be expressed as the product of two distinct elements also present in the array."
                    },
                    {
                        "input": "[10, 2, 2, 4, 8, 30, 35]",
                        "output": "8",
                        "explanation": "8 is the largest element that can be expressed as the product of 4 and 2, which are present in the array at different indices."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a hash set to check if any element <code>x</code> in the array is the product of two other distinct elements. Iterate through pairs efficiently.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "linkedin"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find greatest number\n    int findGreatest(vector<int>& arr) {\n        int n = arr.size(); // Get the size of the array\n        unordered_map<int, int> m;\n\n        // Store occurrences of all elements in hash map\n        for (int i = 0; i < n; i++)\n            m[arr[i]]++;\n\n        // Sort the array and traverse all elements from end\n        sort(arr.begin(), arr.end());\n\n        for (int i = n - 1; i > 1; i--) {\n            // For every element, check if there is another element which divides it\n            for (int j = 0; j < i && arr[j] <= sqrt(arr[i]); j++) {\n                if (arr[i] % arr[j] == 0) {\n                    int result = arr[i] / arr[j];\n\n                    // Check if the result value exists in array or not\n                    if (result == arr[i] && m[result] > 1)\n                        return arr[i];\n                    else if (result != arr[j] && m[result] > 0 && result != arr[i])\n                        return arr[i];\n                    else if (result == arr[j] && m[result] > 1 && result != arr[i])\n                        return arr[i];\n                }\n            }\n        }\n        return -1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find greatest number\n    public int findGreatest(int[] arr) {\n        int n = arr.length; // Get the size of the array\n        Map<Integer, Integer> m = new HashMap<>();\n\n        // Store occurrences of all elements in the hash map\n        for (int i = 0; i < n; i++) {\n            m.put(arr[i], m.getOrDefault(arr[i], 0) + 1);\n        }\n\n        // Sort the array and traverse all elements from the end\n        Arrays.sort(arr);\n\n        for (int i = n - 1; i > 1; i--) {\n            // For every element, check if there is another element which divides it\n            for (int j = 0; j < i && arr[j] <= Math.sqrt(arr[i]); j++) {\n                if (arr[i] % arr[j] == 0) {\n                    int result = arr[i] / arr[j];\n\n                    // Check if the result value exists in the array\n                    if (result == arr[i] && m.get(result) > 1)\n                        return arr[i];\n                    else if (result != arr[j] && m.get(result) != null &&\n                             result != arr[i])\n                        return arr[i];\n                    else if (result == arr[j] && m.get(result) > 1 && result != arr[i])\n                        return arr[i];\n                }\n            }\n        }\n        return -1;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find greatest number\n    def findGreatest(self, arr):\n        n = len(arr)\n        element_count = {}\n\n        # Store occurrences of all elements in a dictionary\n        for num in arr:\n            element_count[num] = element_count.get(num, 0) + 1\n\n        # Sort the array and traverse all elements from end\n        arr.sort()\n\n        for i in range(n - 1, 1, -1):\n            # For every element, check if there is another element which divides it\n            for j in range(i):\n                if arr[j] <= arr[i]**0.5 and arr[i] % arr[j] == 0:\n                    result = arr[i] // arr[j]\n\n                    # Check if the result value exists in the array\n                    if result == arr[i] and element_count[result] > 1:\n                        return arr[i]\n                    elif result != arr[j] and element_count.get(\n                            result, 0) > 0 and result != arr[i]:\n                        return arr[i]\n                    elif result == arr[j] and element_count[\n                            result] > 1 and result != arr[i]:\n                        return arr[i]\n\n        return -1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    // Function to find the greatest number\n    findGreatest(arr) {\n        let n = arr.length;\n        let elementCount = {};\n\n        // Store occurrences of all elements in a dictionary\n        for (let num of arr) {\n            elementCount[num] = (elementCount[num] || 0) + 1;\n        }\n\n        // Sort the array and traverse all elements from end\n        arr.sort((a, b) => a - b);\n\n        for (let i = n - 1; i > 1; i--) {\n            // For every element, check if there is another element which divides it\n            for (let j = 0; j < i; j++) {\n                if (arr[j] <= Math.sqrt(arr[i]) && arr[i] % arr[j] === 0) {\n                    let result = arr[i] / arr[j];\n\n                    // Check if the result value exists in the array\n                    if (result === arr[i] && (elementCount[result] || 0) > 1) {\n                        return arr[i];\n                    } else if (result !== arr[j] && (elementCount[result] || 0) > 0 &&\n                               result !== arr[i]) {\n                        return arr[i];\n                    } else if (result === arr[j] && (elementCount[result] || 0) > 1 &&\n                               result !== arr[i]) {\n                        return arr[i];\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}