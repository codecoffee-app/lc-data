{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701868,
            "title": "Pair with largest sum which is less than K in the array",
            "titleSlug": "pair-with-largest-sum-which-is-less-than-k-in-the-array",
            "content": "<p><span >You are given an array <code>arr</code> of size <code>N</code> and an integer <code>K</code>. Your task is to find a pair of integers in the array such that it follows two conditions:</span></p>\n<ol>\n<li><span >The sum of the pair is the <strong>maximum possible</strong> but <strong>less than</strong> <code>K</code>.</span></li>\n<li><span >Out of all such pairs, choose the one with the <strong>maximum absolute difference</strong> between the two integers.</span></li>\n</ol>\n<p><span >If no such pair exists, return <code>(-1, -1)</code>.</span></p>\n<p><span ><strong>Example:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr = [2, 3, 4, 6, 8, 10], k = 10</span><br /><span ><strong>Output: </strong>(3, 6)<br /><strong>Explanation</strong>:<br />The pair (3, 6) has a sum of 9, which is less than 10.\nAmong all pairs with sums less than 10, (3, 6) has the maximum absolute difference.</span></pre>\n<pre><span ><strong>Input: </strong>arr = <span class=\"hljs-selector-attr\">[2, 3, 4, 6, 8, 10]</span>, k = <span class=\"hljs-number\">0</span><br /><strong>Output: </strong>(-1,-1)<br /><strong>Explanation:</strong> No pair exists with a sum less than 0.<br /></span></pre>\n<p><span ><strong>Expected Time Complexity</strong>: O(nlogn)<br /><strong>Expected Auxilliary Space</strong>: O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />0 &le; arr.size()&nbsp; &le; 10<sup>5</sup><br />0 &le; k &le; 10<sup>6</sup><br />0 &le; arr[i]&nbsp;&le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `N` and an integer `K`, find a pair of integers in the array such that their sum is the maximum possible value less than `K`, and among all such pairs, the absolute difference between the two integers is maximized. If no such pair exists, return `(-1, -1)`. The array can contain duplicate values.",
                "constraints": [
                    "0 <= arr.size() <= 10^5",
                    "0 <= K <= 10^6",
                    "0 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr = [2, 3, 4, 6, 8, 10], K = 10",
                        "output": "(3, 6)",
                        "explanation": "The pair (3, 6) has a sum of 9, which is less than 10. Among all pairs with sums less than 10, (3, 6) has the maximum absolute difference (3)."
                    },
                    {
                        "input": "arr = [2, 3, 4, 6, 8, 10], K = 0",
                        "output": "(-1, -1)",
                        "explanation": "No pair exists with a sum less than 0."
                    },
                    {
                        "input": "arr = [5, 2, 9, 1, 5, 6], K = 11",
                        "output": "(2, 9)",
                        "explanation": "The pair (2,9) has a sum of 11, but that is not less than k=11. So next maximum is 10, and the possible pairs are (1,9), (4,6). Among them (2,9) gives the maximum difference with the sum less than K = 11."
                    },
                    {
                        "input": "arr = [1, 2, 3, 4, 5], K = 6",
                        "output": "(1, 4)",
                        "explanation": "The pair (1,4) has a sum of 5, less than 6 and provides the largest difference of 3 when a smaller element is paired with largest element making the sum less than 6."
                    },
                    {
                        "input": "arr = [5, 5, 5, 5], K = 11",
                        "output": "(5, 5)",
                        "explanation": "The pair (5, 5) has a sum of 10, which is less than 11. The absolute difference is 0, the maximum amongst other pairs that satisfy the conditions."
                    },
                    {
                        "input": "arr = [5], K = 10",
                        "output": "(-1, -1)",
                        "explanation": "Only one element is available in the array. So there are no possible pairs."
                    },
                    {
                        "input": "arr = [], K = 10",
                        "output": "(-1, -1)",
                        "explanation": "No elements are there in the array, so it is impossible to form a pair."
                    },
                    {
                        "input": "arr = [1,2,3], K= 5",
                        "output": "(2,3)",
                        "explanation": "The maximum sum less than 5 is 2+3=5 (2,3) and the absolute difference = 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Sort the array, use two pointers (i, j) starting from both ends. Find pairs with sum less than K and track the maximum sum and absolute difference.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the pair of integers in the given array\n    // with the maximum sum that is less than k\n    pair<int, int> maxSum(vector<int> &arr, int k) {\n        int n = arr.size(); // Size of the array\n\n        // Sorting the array in ascending order\n        sort(arr.begin(), arr.end());\n\n        int maxsum = 0, a = -1, b = -1; // Initialize with invalid values\n        int j = n - 1;\n\n        // Loop to find the pair with maximum sum that is less than k\n        for (int i = 0; i < j;) {\n            // If the sum of the current pair is less than k,\n            // update the maximum sum, and the values of a and b\n            if (arr[i] + arr[j] < k) {\n                if (arr[i] + arr[j] > maxsum) {\n                    maxsum = arr[i] + arr[j];\n                    a = arr[i];\n                    b = arr[j];\n                }\n                i++;\n            }\n            // If the sum of the current pair is greater than or equal to k,\n            // decrement j to move to the next pair\n            else {\n                j--;\n            }\n        }\n\n        // Returning the pair with maximum sum, if found\n        return {a, b};\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Method to find the pair of integers in the array with the maximum sum that is\n    // less than k\n    static ArrayList<Integer> maxSum(int[] arr, int k) {\n        // Sorting the array in ascending order to efficiently find the required pair\n        Arrays.sort(arr);\n\n        // Initializing variables to keep track of the maximum sum, and the elements\n        // forming that sum\n        int maxsum = 0, a = -1,\n            b = -1;             // Start with -1 to indicate no valid pair initially\n        int j = arr.length - 1; // Pointer j starting from the last element of the array\n        ArrayList<Integer> res = new ArrayList<>(); // To store the result pair\n\n        // Loop through the array to find the pair with the maximum sum less than k\n        for (int i = 0; i < j;) {\n            // If the sum of current elements is less than k\n            if (arr[i] + arr[j] < k) {\n                // Update maxsum, a, and b if the current sum is greater than the\n                // previous maxsum\n                if (arr[i] + arr[j] > maxsum) {\n                    maxsum = arr[i] + arr[j];\n                    a = arr[i];\n                    b = arr[j];\n                }\n                // Increment i to check for a larger sum (increasing the sum)\n                i++;\n            }\n            // If the sum of current elements is greater than or equal to k\n            else {\n                // Decrement j to check for a smaller sum (decreasing the sum)\n                j--;\n            }\n        }\n\n        // Adding the elements a and b to the result list\n        res.add(a);\n        res.add(b);\n\n        // Returning the result list containing the pair with the maximum sum less than\n        // k\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to find the pair with maximum sum less than k\n    def maxSum(self, arr, k):\n        # Sorting the array in ascending order\n        arr.sort()\n\n        i = 0\n        j = len(arr) - 1  # Set j to the last index of the array\n        mx = (-1, -1)  # Initialize max pair to (0, 0)\n\n        # Iterate until i is less than j\n        while i < j:\n            # Check if the sum of elements at i and j is greater than or equal to k\n            if arr[i] + arr[j] >= k:\n                # Decrement j to find a smaller element that satisfies the condition\n                j -= 1\n            # If the sum of elements at i and j is less than k\n            else:\n                # Check if the sum of elements at i and j is greater than the current maximum sum\n                if mx[0] + mx[1] < arr[i] + arr[j]:\n                    # Update the current maximum sum\n                    mx = (arr[i], arr[j])\n                # Increment i to find a larger element that satisfies the condition\n                i += 1\n\n        # Return the pair of elements that have the maximum sum less than k\n        return mx\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\n/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number[]}\n */\n\nclass Solution {\n    maxSum(arr, k) {\n        // Sort the array in ascending order\n        arr.sort((a, b) => a - b);\n\n        let maxsum = 0;\n        let a = -1;\n        let b = -1;\n        let j = arr.length - 1; // Use arr.length to set the correct last index\n\n        // Iterate through the array to find the pair with the max sum less than k\n        for (let i = 0; i < j;) {\n            if (arr[i] + arr[j] < k) {\n                if (arr[i] + arr[j] > maxsum) {\n                    maxsum = arr[i] + arr[j];\n                    a = arr[i];\n                    b = arr[j];\n                }\n                i++; // Increase i to try a larger element\n            } else {\n                j--; // Decrease j to try a smaller element\n            }\n        }\n        return [ a, b ]; // Return the pair that has the maximum sum less than k\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}