{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701600,
            "title": "Pairing elements",
            "titleSlug": "pairing-elements",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr</strong> of elements of size&nbsp;<strong>n</strong> containing positive integers. The task is to make pair of elements given in array such that 1st element will be paired with last element, 2nd element with 2nd last, 3rd element with 3rd last and so on.<strong> <br /></strong>If the array is of odd size then make middle element as a pair with itself. After making pairs<strong> store </strong>them in the given array of pair<strong> res </strong>of size <strong>m</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 5, arr = [1, 2, 3, 4, 5]<br /><strong>Output: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal; font-size: 14pt;\">(1,5) (2,4) (3,3)<br /><strong>Explanation:&nbsp;</strong>1 is paired with 5, 2 is paired with 4, 3 is paired with 3 itself.</span></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4, arr = [4, 2, 3, 1]<br /><strong>Output: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">(4,1) (2,3)</span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal; font-size: 14pt;\"><br /><strong>Explanation: </strong>4 is paired with 1, 2 is paired with 3.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;=&nbsp;<strong>n</strong> &lt;= 1000<br />1 &lt;=&nbsp;<strong>arr[i]</strong>&nbsp;&lt;= 1000<br />1 &lt;=&nbsp;<strong>m</strong> &lt;= n</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>create a vector of pairs and push pair in it according to whether the n is even or odd</p>"
        ],
        "relatedTopics": [
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nvoid arrayOfPairs(int arr[], int n, pair<int, int> res[], int m) {\n    // When n is even, store the elements as pairs\n    if (n % 2 == 0) {\n        for (int i = 0; i < n / 2; i++) {\n            res[i] = {arr[i], arr[n - i - 1]};\n        }\n    }\n    // When n is odd, pair the middle element with itself\n    else {\n        for (int i = 0; i <= n / 2; i++) {\n            res[i] = {arr[i], arr[n - i - 1]};\n        }\n    }\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Function to return the array of pairs.\n    public List<KeyValuePair<int, int>> array_of_Pairs(int []arr, int N)\n    {\n        //Create a list to store the pairs\n        List<KeyValuePair<int, int>> pairs = new List<KeyValuePair<int, int>>();\n        \n        // When N is even store the elements as pair \n        if(N % 2 == 0)\n        {\n            for(int i = 0; i < N/2; i++)\n            {\n                pairs.Add(new KeyValuePair<int, int>(arr[i], arr[N-i-1]));\n            }\n        }\n        \n        // When N is odd pair the middle element with itself\n        else\n        {\n            for(int i = 0; i <= N/2; i++)\n                pairs.Add(new KeyValuePair<int, int>(arr[i], arr[N-i-1]));\n        }\n        \n        //Return the list of pairs\n        return pairs;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    array_of_Pairs(arr,n){\n       let l = 0;\n       let r = n-1;\n       let ret = [];\n       while(l<=r){\n        ret.push([arr[l],arr[r]]);\n        l++;\n        r--;\n       }\n       return ret;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}