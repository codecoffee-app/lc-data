{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705522,
            "title": "Pairs of Non Coinciding Points",
            "titleSlug": "pairs-of-non-coinciding-points4141",
            "content": "<p><span style=\"font-size:18px\">In a given cartesian plane, there are <strong>N</strong> points. We need to find the Number of Pairs of &nbsp;points(<strong>A, B</strong>) such that</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">Point A and Point B do not coincide.</span></li>\r\n\t<li><span style=\"font-size:18px\">Manhattan Distance&nbsp;and the Euclidean Distance between the points should be equal.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong> Pair of 2 points(A,B) is considered different from &nbsp;Pair of 2 points(B ,A).<br />\r\nManhattan Distance = |x2-x1|+|y2-y1|</span><br />\r\n<span style=\"font-size:18px\">Euclidean Distance &nbsp; = ((x2-x1)^2 + (y2-y1)^2)^0.5, where points are (x1,y1) and (x2,y2).</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong></span><span style=\"font-size:18px\">2</span>\r\n<span style=\"font-size:18px\"><strong>X = </strong>{1, 7}</span>\r\n<span style=\"font-size:18px\"><strong>Y = </strong>{1, 5}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">0</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">None of the pairs of points have\r\nequal Manhatten and Euclidean distance.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<span style=\"font-size:18px\"><strong>N = </strong></span><span style=\"font-size:18px\">3</span>\r\n<span style=\"font-size:18px\"><strong>X = </strong>{1, 2, 1}</span>\r\n<span style=\"font-size:18px\"><strong>Y = </strong>{2, 3, 3}</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">2</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The pairs {(1,2), (1,3)}, and {(1,3), (2,3)}\r\nhave equal Manhatten and Euclidean distance.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>numOfPairs()</strong> which takes an Integer N and two arrays X, and Y of length N as input and returns the number of pairs with equal Manhattan and Euclidean Distance. (X[i], Y[i]) denotes a point.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\r\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup></span><br />\r\n&nbsp;<span style=\"font-size:18px\">-10^9</span> <span style=\"font-size:18px\">&lt;= X[i], Y[i] &lt;= 10^9</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given N points in a Cartesian plane, determine the number of distinct pairs of points (A, B) where A and B do not coincide, and the Manhattan distance between them is equal to their Euclidean distance. The order of points in a pair matters (i.e., (A, B) is different from (B, A)).",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^9 <= X[i], Y[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 2\nX = {1, 7}\nY = {1, 5}",
                        "output": "0",
                        "explanation": "For the given points (1, 1) and (7, 5), the Manhattan distance is |7-1| + |5-1| = 6 + 4 = 10, and the Euclidean distance is sqrt((7-1)^2 + (5-1)^2) = sqrt(36 + 16) = sqrt(52). Since the distances are not equal, the output is 0."
                    },
                    {
                        "input": "N = 3\nX = {1, 2, 1}\nY = {2, 3, 3}",
                        "output": "2",
                        "explanation": "The pairs {(1,2), (1,3)} and {(1,3), (1,2)} and {(1,3), (2,3)} satisfy the condition Manhattan distance equal to the Euclidean distance. Let's examine the points: For (1,2) and (1,3): Manhattan distance is |1-1| + |3-2| = 1, Euclidean Distance is sqrt((1-1)^2 + (3-2)^2) = 1. For (2,3) and (1,3): Manhattan distance is |1-2| + |3-3| = 1, Euclidean distance is sqrt((1-2)^2 + (3-3)^2) = 1. Therefore, there are 2 pairs that satisfies the condition: {(1,2), (1,3)} and {(1,3), (2,3)}. Note that {(1,3),(1,2)} are {(2,3),(1,3)} will also be counted. Thus, the output is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use hashing to store the Manhatten and Euclidean distance for each pair.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to count the number of pairs\n    int numOfPairs(int X[], int Y[], int N) {\n        \n        int cnt = 0 ;\n        // creating unordered_map to store the frequencies of elements in X and Y\n        unordered_map<int,int> m,p;\n        // creating map to store the frequencies of pairs in X and Y\n        map<pair<int,int>,int> q;\n        // creating iterator to iterate over the map\n        map<pair<int,int>,int> :: iterator it;\n        \n        // iterating over the arrays X and Y\n        for(int i=0; i<N; i++)\n        {\n            // updating frequencies of elements in X and Y\n            m[X[i]]++;\n            p[Y[i]]++;\n            // updating frequencies of pairs in X and Y\n            q[make_pair(X[i],Y[i])]++;\n        }\n        \n        // iterating over the map of pairs\n        for(it=q.begin(); it!=q.end(); it++)\n        {\n            // getting the pair and its elements\n            pair<int,int> pa=it->first;\n            int x = pa.first;\n            int y = pa.second;\n            \n            // counting the number of pairs by using the frequencies of elements\n            cnt += (m[x]*(m[x]-1))/2;\n            cnt += (p[y]*(p[y]-1))/2;\n            // setting the frequencies of elements to 0\n            m[x] = p[y] = 0;\n            \n            // getting the frequency of the pair\n            int u = it->second;\n            \n            // reducing the count by the frequency of the pair\n            cnt -= (u*(u-1));\n        }\n        \n        // returning the final count\n        return cnt;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    // Class to represent a pair of integers.\r\n    // Override equals() and hashCode() methods for proper comparison and hashing.\r\n    static class Pair{\r\n        int first, second;\r\n        private int hashCode;\r\n        \r\n        Pair(int first, int second){\r\n            this.first = first;\r\n            this.second = second;\r\n            this.hashCode = Objects.hash(first, second);\r\n        }\r\n\r\n        // Returns the string representation of the pair.\r\n        public String toString() {\r\n            return (\"{\"+this.first+\" \"+this.second+\"}\");\r\n        }\r\n\r\n        // Checks if two pairs are equal by comparing the values of first and second.\r\n        @Override\r\n        public boolean equals(Object o) {\r\n            if (this == o)\r\n                return true;\r\n            if (o == null || getClass() != o.getClass())\r\n                return false;\r\n            Pair that = (Pair) o;\r\n            return first == that.first && second == that.second;\r\n        }\r\n        \r\n        // Returns the hash code of the pair based on the values of first and second.\r\n        @Override\r\n        public int hashCode() {\r\n            return this.hashCode;\r\n        }\r\n    }\r\n    \r\n    // Function to calculate the number of pairs in two arrays.\r\n    static int numOfPairs(int[] X, int[] Y, int N) {\r\n        int cnt = 0 ;\r\n        // HashMap to store the frequencies of elements in array X.\r\n        HashMap<Integer, Integer> m = new HashMap<>();\r\n        // HashMap to store the frequencies of elements in array Y.\r\n        HashMap<Integer, Integer> p = new HashMap<>();\r\n        // HashMap to store the frequencies of pairs formed from corresponding elements in X and Y.\r\n        HashMap<Pair, Integer> q = new HashMap<>();\r\n        \r\n        // Initialize the frequencies of elements in m, p and q.\r\n        for(int i=0; i<N; i++)\r\n        {\r\n            m.put(X[i],0);\r\n            p.put(Y[i], 0);\r\n            Pair pa = new Pair(X[i],Y[i]);\r\n            q.put(pa, 0);\r\n        }\r\n        \r\n        // Calculate the frequencies of elements in m, p and q.\r\n        for(int i=0; i<N; i++)\r\n        {\r\n            m.replace(X[i], m.get(X[i])+1);\r\n            p.replace(Y[i], p.get(Y[i])+1);\r\n            Pair pa = new Pair(X[i], Y[i]);\r\n            q.put(pa, q.get(pa)+1);\r\n        }\r\n        \r\n        // Iterate over the pairs in q.\r\n        for (Map.Entry<Pair, Integer> it : q.entrySet())\r\n        {\r\n            Pair pa=it.getKey();\r\n            int x = pa.first;\r\n            int y = pa.second;\r\n            \r\n            // Calculate the number of pairs that can be formed using elements with frequency greater than or equal to 2 in m and p.\r\n            cnt += (m.get(x)*(m.get(x)-1))/2;\r\n            cnt += (p.get(y)*(p.get(y)-1))/2;\r\n            \r\n            // Reset frequencies of elements in m and p to 0.\r\n            m.put(x, 0);\r\n            p.put(y, 0);\r\n            \r\n            int u = it.getValue();\r\n            \r\n            // Subtract the number of pairs that have been counted twice.\r\n            cnt-=(u*(u-1));\r\n        }\r\n        return cnt;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Importing Counter from collections module\nfrom collections import Counter\n\nclass Solution:\n\n    # Function to count the number of pairs\n    def numOfPairs(self, X, Y, N):\n        \n        # Initializing counters and set\n        xseen = Counter()\n        yseen = Counter()\n        seen = set()\n        same = 0\n\n        # Iterating over the arrays to count pairs\n        for i in range(N):\n\n            # Counting occurrences of each element in X and Y\n            xseen[X[i]] += 1\n            yseen[Y[i]] += 1\n            \n            # Checking if the pair is already seen\n            if (X[i], Y[i]) in seen:\n                same += 2\n            else:\n                seen.add((X[i], Y[i]))\n            \n        ans = 0\n\n        # Calculating the number of pairs using each element in X\n        for k, v in xseen.items():\n            ans += (v*(v-1))//2\n            \n        # Calculating the number of pairs using each element in Y\n        for k, v in yseen.items():\n            ans += (v*(v-1))//2\n            \n        # Subtracting the pairs that are counted twice\n        return ans - same",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number[]} X\r\n * @param {number[]} Y\r\n * @param {number} N\r\n * @returns {number}\r\n*/\r\n\r\nclass Solution {\r\n  // Function to find number of pairs such that\r\n  // the one element of pair exists in one array\r\n  // and other element exists in different array.\r\n  numOfPairs(X, Y, N) {\r\n    // Initializing counters and set\r\n    let xseen = {};\r\n    let yseen = {};\r\n    let seen = new Set();\r\n    let same = 0;\r\n\r\n    // Iterating over the arrays to count pairs\r\n    for (let i = 0; i < N; i++) {\r\n      // Counting occurrences of each element in X and Y\r\n      if (X[i] in xseen) {\r\n        xseen[X[i]] += 1;\r\n      } else {\r\n        xseen[X[i]] = 1;\r\n      }\r\n      \r\n      if (Y[i] in yseen) {\r\n        yseen[Y[i]] += 1;\r\n      } else {\r\n        yseen[Y[i]] = 1;\r\n      }\r\n            \r\n      // Checking if the pair is already seen\r\n      let pair = X[i] + '|' + Y[i];\r\n      if (seen.has(pair)) {\r\n        same += 2;\r\n      } else {\r\n        seen.add(pair);\r\n      }\r\n    }\r\n    \r\n    let ans = 0;\r\n\r\n    // Calculating the number of pairs using each element in X\r\n    for (let [k, v] of Object.entries(xseen)) {\r\n      ans += (v * (v - 1)) / 2;\r\n    }\r\n            \r\n    // Calculating the number of pairs using each element in Y\r\n    for (let [k, v] of Object.entries(yseen)) {\r\n      ans += (v * (v - 1)) / 2;\r\n    }\r\n    \r\n    // Subtracting the pairs that are counted twice\r\n    return ans - same;\r\n  }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Function to count the number of pairs\n    public int numOfPairs(int[] X, int[] Y, int N)\n    {\n        int cnt = 0;\n        // creating Dictionary to store the frequencies of elements in X and Y\n        Dictionary<int, int> m = new Dictionary<int, int>();\n        Dictionary<int, int> p = new Dictionary<int, int>();\n        // creating dictionary to store the frequencies of pairs in X and Y\n        Dictionary<Tuple<int, int>, int> q = new Dictionary<Tuple<int, int>, int>();\n        \n        // iterating over the arrays X and Y\n        for(int i=0; i<N; i++)\n        {\n            // updating frequencies of elements in X and Y\n            if(m.ContainsKey(X[i]))\n                m[X[i]]++;\n            else\n                m[X[i]] = 1;\n            \n            if(p.ContainsKey(Y[i]))\n                p[Y[i]]++;\n            else\n                p[Y[i]] = 1;\n            \n            // updating frequencies of pairs in X and Y\n            Tuple<int, int> pair = new Tuple<int, int>(X[i], Y[i]);\n            if(q.ContainsKey(pair))\n                q[pair]++;\n            else\n                q[pair] = 1;\n        }\n        \n        // iterating over the dictionary of pairs\n        foreach(KeyValuePair<Tuple<int, int>, int> pair in q)\n        {\n            // getting the pair and its elements\n            Tuple<int, int> pa = pair.Key;\n            int x = pa.Item1;\n            int y = pa.Item2;\n            \n            // counting the number of pairs by using the frequencies of elements\n            cnt += (m[x]*(m[x]-1))/2;\n            cnt += (p[y]*(p[y]-1))/2;\n            // setting the frequencies of elements to 0\n            m[x] = p[y] = 0;\n            \n            // getting the frequency of the pair\n            int u = pair.Value;\n            \n            // reducing the count by the frequency of the pair\n            cnt -= (u*(u-1));\n        }\n        \n        // returning the final count\n        return cnt;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}