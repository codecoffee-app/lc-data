{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703816,
            "title": "Pairs with Positive Negative values",
            "titleSlug": "pairs-with-positive-negative-values3719",
            "content": "<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\">Given an array of integers, return all the elements having positive and negative values of a number that exists in the array.</span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong><em>Note </em>:</strong> If no such pair exists, simply return an empty array, also multiple pairs of the same number could exist and you need to put each of them in the array. Return the pairs in sorted order.</span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Examples:</strong></span></span></p>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input: </strong>arr[] = [1, -3, 2, 3, 6, -1, -3, 3]\n<strong>Output: </strong>[-1, 1, -3, 3, -3, 3]\n<strong>Explanation: </strong>The array contains both 1 and -1, and 3 &amp; -3 two time.</span></span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Input: </strong>arr[] = [4, 8, 9, -4, 1, -1, -8, -9]\n<strong>Output: </strong>[-1, 1, -4, 4, -8, 8, -9, 9]\n<strong>Explanation: </strong>Here, the array contains the pairs 1 &amp; -1, 4 &amp; -4, 8 &amp; -8, and 9 &amp; -9.</span></span>\n</pre>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Expected Time Complexity:</strong> O(n*log(n))<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"font-family: arial,helvetica,sans-serif;\"><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>5</sup><br />-10<sup>5 </sup>&lt;= a[i] &lt;= 10<sup>5</sup></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, identify and return all elements that have both positive and negative counterparts within the array. Multiple instances of the same number pair should be included in the output.\n\n**Note:** If no such positive-negative pairs exist, return an empty array. The output should be sorted in ascending order.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "-10^5 <= a[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, -3, 2, 3, 6, -1, -3, 3]",
                        "output": "[-1, 1, -3, 3, -3, 3]",
                        "explanation": "The array contains both 1 and -1. It also contains 3 and -3, appearing twice each. The sorted order is [-1, 1, -3, 3, -3, 3]."
                    },
                    {
                        "input": "[4, 8, 9, -4, 1, -1, -8, -9]",
                        "output": "[-9, 9, -8, 8, -4, 4, -1, 1]",
                        "explanation": "The array contains the pairs 1 & -1, 4 & -4, 8 & -8, and 9 & -9. Sorted gives [-9, 9, -8, 8, -4, 4, -1, 1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try storing corresponding negative or positive pairs in a data structure.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find positive-negative pairs in the given array.\n    vector<int> posNegPair(vector<int> &arr) {\n        int n = arr.size();\n        vector<int> v,\n            ans;          // creating vectors to store negative numbers and final answer\n        map<int, int> mp; // creating a map to store frequency of positive numbers\n\n        // iterating over the array to separate negative and positive numbers\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0)\n                v.push_back(arr[i]); // pushing negative numbers to vector v\n            else\n                mp[arr[i]] += 1; // increasing frequency of positive numbers in map\n        }\n\n        sort(v.begin(), v.end()); // sorting the vector v in ascending order\n        // iterating through the sorted vector v to find positive-negative pairs\n        for (int i = v.size() - 1; i >= 0; i--) {\n            // if the absolute value of current negative number exists in map and has\n            // non-zero frequency\n            if (mp[abs(v[i])] > 0) {\n                ans.push_back(v[i]); // pushing current negative number to answer vector\n                ans.push_back(abs(v[i])); // pushing its absolute value to answer vector\n                mp[abs(v[i])] -= 1; // decreasing frequency of positive number in map\n            }\n        }\n        return ans; // returning the answer vector\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find positive-negative pairs in the given array.\n    public static List<Integer> posNegPair(int[] arr) {\n        List<Integer> negatives = new ArrayList<>();\n        Map<Integer, Integer> posMap = new HashMap<>();\n\n        // Iterate over the array to separate negative and positive numbers\n        for (int num : arr) {\n            if (num < 0) {\n                negatives.add(num);\n            } else {\n                posMap.put(num, posMap.getOrDefault(num, 0) + 1);\n            }\n        }\n\n        // Sort the negative numbers in ascending order\n        Collections.sort(negatives);\n\n        // Find positive-negative pairs\n        List<Integer> result = new ArrayList<>();\n        for (int i = negatives.size() - 1; i >= 0; i--) {\n            int absNeg = Math.abs(negatives.get(i));\n            if (posMap.getOrDefault(absNeg, 0) > 0) {\n                result.add(negatives.get(i));\n                result.add(absNeg);\n                posMap.put(absNeg, posMap.get(absNeg) - 1);\n            }\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def posNegPair(self, arr):\n        n = len(arr)\n        v = []  # List to store negative numbers\n        ans = []  # List to store the final answer\n        mp = {}  # Dictionary to store frequency of positive numbers\n\n        # Separate negative and positive numbers\n        for num in arr:\n            if num < 0:\n                v.append(num)  # Append negative numbers to list v\n            else:\n                mp[num] = mp.get(\n                    num, 0\n                ) + 1  # Increase frequency of positive numbers in dictionary\n        v.sort()  # Sort the list v in ascending order\n\n        # Find positive-negative pairs\n        for neg in reversed(\n                v):  # Iterate through sorted negative numbers in reverse order\n            pos = abs(neg)\n            if mp.get(\n                    pos, 0\n            ) > 0:  # Check if the absolute value of the negative number exists in the dictionary\n                ans.append(\n                    neg)  # Append the negative number to the answer list\n                ans.append(pos)  # Append its absolute value to the answer list\n                mp[pos] -= 1  # Decrease frequency of the positive number in dictionary\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    posNegPair(arr) {\n        const n = arr.length;\n        const v = [];         // Array to store negative numbers\n        const ans = [];       // Array to store the final answer\n        const mp = new Map(); // Map to store frequency of positive numbers\n\n        // Separate negative and positive numbers\n        for (const num of arr) {\n            if (num < 0) {\n                v.push(num); // Append negative numbers to array v\n            } else {\n                mp.set(num, (mp.get(num) || 0) + 1);\n            }\n        }\n\n        v.sort((a, b) => a - b); // Sort the array v in ascending order\n\n        // Find positive-negative pairs\n        // Iterate through sorted negative numbers in reverse order\n        for (let i = v.length - 1; i >= 0; i--) {\n            const neg = v[i];\n            const pos = Math.abs(neg);\n            if (mp.get(pos) > 0) { // Check if the absolute value of the negative number\n                                   // exists in the map\n                ans.push(neg);     // Append the negative number to the answer array\n                ans.push(pos);     // Append its absolute value to the answer array\n                mp.set(pos, mp.get(pos) - 1);\n            }\n        }\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}