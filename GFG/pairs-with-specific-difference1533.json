{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702754,
            "title": "Pairs with certain difference",
            "titleSlug": "pairs-with-specific-difference1533",
            "content": "<p><span style=\"font-size:18px\">Given an array of integers,&nbsp;<strong>arr[]</strong> and a number,&nbsp;<strong>K</strong>.You&nbsp;can pair two numbers of the array if the difference between them is strictly less than <strong>K</strong>. The task is to find the maximum possible sum of such&nbsp;disjoint pairs (i.e., each element of the array can be used at most once). The Sum of <strong>P</strong> pairs is the sum of all <strong>2P</strong>&nbsp;elements of pairs.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input  : </strong>\r\narr[] = {3, 5, 10, 15, 17, 12, 9}\r\nK = 4\r\n<strong>Output : </strong>\r\n62\r\n<strong>Explanation :</strong>\r\nThen disjoint pairs with difference less\r\nthan K are, (3, 5), (10, 12), (15, 17)\r\nmax sum which we can get is \r\n3 + 5 + 10 + 12 + 15 + 17 = 62\r\nNote that an alternate way to form \r\ndisjoint pairs is,(3, 5), (9, 12), (15, 17)\r\nbut this pairing produces less sum.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input  : </strong>\r\narr[] = {5, 15, 10, 300}\r\nK = 12\r\n<strong>Output : </strong>\r\n25</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read, input, or print anything. Your task is to complete the function&nbsp;<strong>maxSumPairWithDifferenceLessThanK()</strong>&nbsp;which takes the array <strong>arr[]</strong>, its size <strong>N,</strong><strong> </strong>and an integer <strong>K </strong>as inputs and returns the maximum possible sum of disjoint pairs.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N. log(N))<br />\r\n<strong>Expected Auxiliary Space: </strong>O(N)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>5</sup><br />\r\n0 &le; K &le; 10<sup>5</sup><br />\r\n1 &le; arr[i] &le; 10<sup>4</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]` and a positive integer `K`, find the maximum possible sum of disjoint pairs such that the absolute difference between the numbers in each pair is strictly less than `K`. Each element of the array can be used at most once. The sum of `P` pairs is the sum of all `2P` elements of those pairs.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= K <= 10^5",
                    "1 <= arr[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "arr[] = {3, 5, 10, 15, 17, 12, 9}, K = 4",
                        "output": "62",
                        "explanation": "The disjoint pairs with a difference less than K are (3, 5), (10, 12), and (15, 17). The maximum sum achievable is 3 + 5 + 10 + 12 + 15 + 17 = 62. Another possible pairing is (3, 5), (9, 12), and (15, 17), but the sum is less in this case."
                    },
                    {
                        "input": "arr[] = {5, 15, 10, 300}, K = 12",
                        "output": "25",
                        "explanation": "The disjoint pair with a difference less than K is (5, 10). The maximum sum achievable is 5 + 10 = 15,  However, it looks like the provided output(25) in the problem description is incorrect based on the given rules. If pair (5, 10) selected then 5 + 10 = 15. But since the problem description mentions disjoint pairs that maximize the total sum and each element can only be used once, the pair(5,10) give the maximum sum possible. Therefore the output should be 15 and not 25."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">An easy solution to the problem is sorting the array in ascending order and greedily picking a pair of elements from the last.</span></p>",
            "<p><span style=\"font-size:18px\">The second solution goes as:<br />\nFirst we sort the given array in increasing order. Once the array is sorted, we traverse the array. For every element, we try to pair it with its previous element first. Why do we prefer previous element? Let arr[i] can be paired with arr[i-1] and arr[i-2] (i.e. arr[i] &ndash; arr[i-1] &lt; K and arr[i]-arr[i-2] &lt; K). Since the array is sorted, value of arr[i-1] would be more than arr[i-2]. Also, we need to pair with difference less than k, it means if arr[i-2] can be paired, then arr[i-1] can also be paired in a sorted array.<br />\nNow observing the above facts, we can formulate our dynamic programming solution as below,<br />\nLet dp[i] denotes the maximum disjoint pair sum we can achieve using first i elements of the array. Assume currently we are at i&rsquo;th position, then there are two possibilities for us.</span></p>\n\n<pre>\n<span style=\"font-size:18px\">  Pair up i with (i-1)th element, i.e. \n      dp[i] = dp[i-2] + arr[i] + arr[i-1]\n  Don&#39;t pair up, i.e. \n      dp[i] = dp[i-1] </span></pre>\n\n<p><span style=\"font-size:18px\">Above iteration takes O(N) time and sorting of array will take O(N log N) time so total time complexity of the solution will be O(N log N)</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    \r\n    // Function to find the maximum sum of pairs with difference less than K\r\n    int maxSumPairWithDifferenceLessThanK(int arr[], int N, int K)\r\n    {\r\n        sort(arr, arr + N);     // Sort the array in ascending order\r\n        int ans = 0;    // Initialize the answer variable\r\n        \r\n        // Iterate over the array from the end\r\n        for (int i = N - 1; i > 0; i--) {\r\n            // Check if the difference between current element and the previous element\r\n            // is less than K\r\n            if (arr[i] - arr[i - 1] < K)\r\n                // Add the sum of the pair to the answer\r\n                ans += (arr[i] + arr[i - 1]), i--;\r\n        }\r\n        \r\n        return ans;    // Return the maximum sum of pairs\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\nclass Solution {\r\n    // method to return maximum sum we can get by \r\n    // finding less than K difference pair \r\n    public static int maxSumPairWithDifferenceLessThanK(int arr[], int N, int K) \r\n    {\r\n        // Sort input array in ascending order. \r\n        Arrays.sort(arr); \r\n      \r\n        // dp[i] denotes the maximum disjoint pair sum \r\n        // we can achieve using first i elements \r\n        int dp[] = new int[N]; \r\n      \r\n        // if no element then dp value will be 0 \r\n        dp[0] = 0; \r\n      \r\n        for (int i = 1; i < N; i++) \r\n        { \r\n            // first give previous value to dp[i] i.e. \r\n            // no pairing with (i-1)th element \r\n            dp[i] = dp[i-1]; \r\n      \r\n            // if current and previous element can form a pair \r\n            if (arr[i] - arr[i-1] < K) \r\n            { \r\n                  \r\n                // update dp[i] by choosing maximum between \r\n                // pairing and not pairing \r\n                if (i >= 2) \r\n                    dp[i] = Math.max(dp[i], dp[i-2] + arr[i] + \r\n                                                    arr[i-1]); \r\n                else\r\n                    dp[i] = Math.max(dp[i], arr[i] + arr[i-1]); \r\n            } \r\n        } \r\n      \r\n        // last index will have the result \r\n        return dp[N - 1]; \r\n    } \r\n    \r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    # method to return maximum sum we can  \r\n    # get by get by finding less than K \r\n    # difference pair \r\n    def maxSumPairWithDifferenceLessThanK(self, arr, N, K): \r\n      \r\n        # Sort input array in ascending order. \r\n        arr.sort() \r\n      \r\n        # dp[i] denotes the maximum disjoint \r\n        # pair sum we can achieve using first \r\n        # i elements \r\n        dp = [0] * N \r\n      \r\n        # if no element then dp value will be 0 \r\n        dp[0] = 0\r\n      \r\n        for i in range(1, N): \r\n          \r\n            # first give previous value to \r\n            # dp[i] i.e. no pairing with \r\n            # (i-1)th element \r\n            dp[i] = dp[i-1] \r\n      \r\n            # if current and previous element  \r\n            # can form a pair \r\n            if (arr[i] - arr[i-1] < K): \r\n              \r\n                # update dp[i] by choosing \r\n                # maximum between pairing \r\n                # and not pairing \r\n                if (i >= 2): \r\n                    dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n                else: \r\n                    dp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n              \r\n        # last index will have the result \r\n        return dp[N - 1] ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} N\n * @param {number} K\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to return maximum sum?.\n    maxSumPairWithDifferenceLessThanK(arr, N, K)\n    {\n        //Sort input array in ascending order. \n        arr.sort((a, b) => a - b); \n\n        //dp[i] denotes the maximum disjoint pair sum we can achieve using the first i elements.\n        let dp = Array(N).fill(0); \n      \n        //if no element then dp value will be 0. \n        dp[0] = 0;\n\n        for (let i = 1; i < N; i++) {\n            //first give the previous value to dp[i].\n            dp[i] = dp[i-1]; \n\n            //if the current and previous element can form a pair.\n            if (arr[i] - arr[i-1] < K) {\n                //update dp[i] by choosing maximum between pairing and not pairing.\n                if (i >= 2) {\n                    dp[i] = Math.max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \n                } else {\n                    dp[i] = Math.max(dp[i], arr[i] + arr[i-1]); \n                }\n            }\n        }\n\n        //returning the element at the last index.\n        return dp[N - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}