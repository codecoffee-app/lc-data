{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700674,
            "title": "Pairwise Consecutive Elements",
            "titleSlug": "pairwise-consecutive-elements",
            "content": "<p><span style=\"font-size:18px\">Given a stack of integers of size <strong>N</strong>, your task is to complete the&nbsp;function <strong>pairWiseConsecutive(),</strong> that checks whether numbers in the stack are pairwise consecutive or not. The pairs can be increasing or decreasing, and if the stack has an odd number of elements, the element at the top is left out of a pair. The function should retain the original stack content.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Only following standard operations are allowed on </span><span style=\"font-size:18px\">stack</span><span style=\"font-size:18px\">.</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">push(X): Enter </span><span style=\"font-size:18px\">a element</span><span style=\"font-size:18px\"> X on top of </span><span style=\"font-size:18px\">stack</span><span style=\"font-size:18px\">.</span></li>\r\n\t<li><span style=\"font-size:18px\">pop(): Removes top element of the stack.</span></li>\r\n\t<li><span style=\"font-size:18px\">empty(): To check if stack is empty.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Input Format:</strong><br />\r\nThe first line of input contains T denoting the number of testcases. T testcases follow. Each testcase contains two lines of input. The first line contains n denoting the number of elements to be inserted into the stack. The second line contains the elements to be inserted into the stack.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Output Format:</strong><br />\r\nFor each</span><span style=\"font-size:18px\"> testcase, in a new line, print </span><span style=\"font-size:18px\">&quot;<strong>Yes</strong>&quot;(without quote) if the elements of the stack </span><span style=\"font-size:18px\">is</span><span style=\"font-size:18px\"> pairwise consecutive, else print&nbsp;&quot;<strong>No</strong>&quot;.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem. You only need to complete the function <strong>pairWiseConsecutive </strong>that takes a stack as an <strong>argument </strong>and returns <strong>true </strong>if the stack is found to be pairwise consecutive, else it returns <strong>false</strong>. The printing is done by the <strong>driver </strong>code.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt; =T &lt;= 100<br />\r\n1 &lt; =N &lt;= 10<sup>3</sup></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example:<br />\r\nInput:</strong><br />\r\n2<br />\r\n6<br />\r\n1 2 3 4 5 6<br />\r\n5<br />\r\n1 5 3 9 7<br />\r\n<strong>Output:</strong><br />\r\nYes</span><br />\r\n<span style=\"font-size:20px\">No</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Explanation:</strong><br />\r\n<strong>Testcase1: </strong>The number of elements are even and they are pairwise consecutive so we print Yes.<br />\r\n<strong>Testcase2: </strong>The number of elements are odd so we remove the top element and check for pairwise consecutive. It is not so we print No.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a stack of integers, determine if the elements are pairwise consecutive. Pairwise consecutive means that elements are consecutive when taken in pairs from the top of the stack. The pairs can be in increasing or decreasing order. If the stack contains an odd number of elements, the top element is ignored for the pairing.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1000"
                ],
                "testcases": [
                    {
                        "input": "6\n1 2 3 4 5 6",
                        "output": "Yes",
                        "explanation": "The stack contains an even number of elements. The pairs (1, 2), (3, 4), and (5, 6) are all consecutive (increasing). Therefore, the output is 'Yes'."
                    },
                    {
                        "input": "5\n1 5 3 9 7",
                        "output": "No",
                        "explanation": "The stack contains an odd number of elements. We ignore the top element (1) and check the rest of the stack.  The pairs are (5, 3) and (9, 7). While (5, 3) and (9,7) are consecutive and decreasing, but since all pairs must be consecutive the output is 'No'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Create an auxillary stack and keep on pushing the elements to it. If the size is even then push all elements but if it is odd then leave the top element. Now keep on popping and checking if the absolute difference of pair is 1 or not.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nbool pairWiseConsecutive(stack<int> s)\n{\n    //Code here\n    \n\t//Creating an auxiliary stack and variable to store its size\n\tstack<int> aux;\n\tint aux_size=0;\n\t\n\t//Pushing the elements from the original stack to the auxiliary stack\n\twhile (!s.empty()) {\n\t\taux.push(s.top());\n\t\ts.pop();\n\t\taux_size++;\n\t}\n\t\n\t//Variable to store the result of whether the elements are pairwise consecutive or not\n\tbool result = true;\n\t\n\t//Checking if the elements in the auxiliary stack are pairwise consecutive\n\twhile (aux_size>1) {\n\t\tint x = aux.top();\n\t\taux.pop();\n\t\tint y = aux.top();\n\t\taux.pop();\n\t\t\n\t\t//If the absolute difference between the elements is not 1, set the result to false\n\t\tif (abs(x - y) != 1)result = false;\n\t\t\n\t\t//Pushing the elements back to the original stack\n\t\ts.push(x);\n\t\ts.push(y);\n\t\t\n\t\taux_size--;\n\t\taux_size--;\n\t}\n\t\n\t//If there is one element left in the auxiliary stack, push it back to the original stack\n\tif (aux.size() == 1)\n\t\ts.push(aux.top());\n\t\n\t//Return the result of whether the elements are pairwise consecutive\n\treturn result;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass GFG\r\n{\r\n    public static boolean pairWiseConsecutive(Stack<Integer> st)\r\n    {\r\n        //creating an auxiliary stack to store elements from original stack\r\n        Stack<Integer> aux = new Stack<Integer>();\r\n        int aux_size = 0;\r\n        \r\n        //transferring elements from original stack to auxiliary stack\r\n        while (!st.empty()) \r\n        {\r\n            aux.push(st.peek());\r\n            st.pop();\r\n            aux_size++;\r\n\t    }\r\n\t    \r\n\t    boolean result = true;\r\n\t    \r\n\t    //checking if adjacent elements in the auxiliary stack are pairwise consecutive\r\n\t    while (aux_size > 1) \r\n        {\r\n            int x = aux.peek();\r\n            aux.pop();\r\n            int y = aux.peek();\r\n            aux.pop();\r\n            \r\n            //checking if absolute difference between adjacent elements is not equal to 1\r\n            if (Math.abs(x - y) != 1)\r\n                result = false;\r\n                \r\n            //restoring elements back to original stack\r\n            st.push(x);\r\n            st.push(y);\r\n            aux_size--;\r\n            aux_size--;\r\n        }\r\n        \r\n        //if there is one element left in the auxiliary stack, it is added back to the original stack\r\n        if (aux.size() == 1)\r\n            st.push(aux.peek());\r\n            \r\n        //returning the result\r\n        return result;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n\r\n# Function to check if elements are \r\n# pairwise consecutive in stack \r\ndef pairWiseConsecutive(l):\r\n    \r\n    #create an Empty Stack\r\n    l1=[]\r\n    aux_size=0\r\n    \r\n    #Transfer elements of l to l1.\r\n    while(l!=[]):\r\n        l1.append(l[len(l)-1])\r\n        l.pop()\r\n        aux_size=aux_size+1\r\n    \r\n     #  Traverse l1 and see if \r\n     #  elements are pairwise \r\n     #  consecutive or not. We also \r\n     #  need to make sure that original \r\n     #  content is retained. \r\n    \r\n    result=True\r\n    while(aux_size>1):\r\n        \r\n        # Fetch current top two \r\n        # elements of l1 and check \r\n        # if they are consecutive. \r\n        x=l1[len(l1)-1]\r\n        l1.pop()\r\n        y=l1[len(l1)-1]\r\n        l1.pop()\r\n        if(abs(x-y)!=1):\r\n            result=False\r\n        # Push the elements to original \r\n        # stack.     \r\n        l.append(x)\r\n        l.append(y)\r\n        aux_size=aux_size-1\r\n        aux_size=aux_size-1\r\n    if(len(l1)==1):\r\n        l.append(l1[len(l1)-1])\r\n    return result",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/**\r\n * @param {Stack} st\r\n * @returns {boolean}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to check whether numbers in the stack are pairwise consecutive or not.\r\n    pairWiseConsecutive(st)\r\n    {\r\n        //creating auxiliary stack to reverse the order of elements in stack\r\n        let aux = [];\r\n        \r\n        //reversing the order of elements in the stack using auxiliary stack\r\n        while (!st.empty()) {\r\n            aux.push(st.top());\r\n            st.pop();\r\n        }\r\n        \r\n        let result = true;\r\n        let auxSize = aux.length;\r\n        \r\n        //checking whether the elements in the stack are pairwise consecutive or not\r\n        while (auxSize > 1) {\r\n            let x = aux[aux.length-1];\r\n            aux.pop();\r\n            let y = aux[aux.length-1];\r\n            aux.pop();\r\n            \r\n            if (Math.abs(x - y) !== 1) {\r\n                result = false;\r\n            }\r\n            \r\n            st.push(x);\r\n            st.push(y);\r\n            auxSize -= 2;\r\n        }\r\n        \r\n        //checking if there is any remaining element in the aux stack\r\n        if (aux.length === 1) {\r\n            st.push(aux[0]);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    // your task is to complete the function\n    // function should return true/false or 1/0\n    public bool pairWiseConsecutive(Stack<int> s)\n    {\n        //Code here\n        Stack<int> aux = new Stack<int>();\n        int aux_size = 0;\n\n        //Pushing the elements from the original stack to the auxiliary stack\n        while (s.Count != 0)\n        {\n            aux.Push(s.Peek());\n            s.Pop();\n            aux_size++;\n        }\n\n        //Variable to store the result of whether the elements are pairwise consecutive or not\n        bool result = true;\n\n        //Checking if the elements in the auxiliary stack are pairwise consecutive\n        while (aux_size > 1)\n        {\n            int x = aux.Peek();\n            aux.Pop();\n            int y = aux.Peek();\n            aux.Pop();\n\n            //If the absolute difference between the elements is not 1, set the result to false\n            if (Math.Abs(x - y) != 1) result = false;\n\n            //Pushing the elements back to the original stack\n            s.Push(x);\n            s.Push(y);\n\n            aux_size--;\n            aux_size--;\n        }\n\n        //If there is one element left in the auxiliary stack, push it back to the original stack\n        if (aux.Count == 1)\n            s.Push(aux.Peek());\n\n        //Return the result of whether the elements are pairwise consecutive\n        return result;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}