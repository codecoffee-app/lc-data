{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700024,
            "title": "Pairwise swap elements of a linked list",
            "titleSlug": "pairwise-swap-elements-of-a-linked-list-by-swapping-data",
            "content": "<p><span style=\"font-size: 12pt;\">Given a singly linked list. The task is to swap elements in the linked list pairwise. For example, if the input list is 1 2 3 4, the resulting list after swaps will be 2 1 4 3.<br /><strong><br />Note</strong>: You need to swap the nodes, not only the data. If only data is swapped then the driver code will print -1.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;2-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8\n<strong>Output: </strong>2-&gt;1-&gt;4-&gt;2-&gt;6-&gt;5-&gt;8-&gt;7<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700024/Web/Other/blobid0_1723798948.png\" width=\"400\" height=\"160\" /><strong>\nExplanation: </strong>After swapping each pair considering (1,2), (2, 4), (5, 6).. so on as pairs, we get 2, 1, 4, 2, 6, 5, 8, 7 as a new linked list.\n</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>LinkedList: 1-&gt;3-&gt;4-&gt;7-&gt;9-&gt;10-&gt;1\n<strong>Output: </strong>3-&gt;1-&gt;7-&gt;4-&gt;10-&gt;9-&gt;1<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700024/Web/Other/blobid1_1723798974.png\" width=\"400\" height=\"160\" /><strong>\nExplanation: </strong>After swapping each pair considering (1,3), (4, 7), (9, 10).. so on as pairs, we get 3, 1, 7, 4, 10, 9, 1 as a new linked list.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &le; size of linked list &le; 10<sup>6<br /></sup>1 &le; elements of linked list &le; 10<sup>6</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, swap its elements pairwise.  For a list like 1->2->3->4, the resulting list should be 2->1->4->3.  You must swap the nodes themselves, not just the data they contain.",
                "constraints": [
                    "1 <= size of linked list <= 10^6",
                    "1 <= elements of linked list <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "LinkedList: 1->2->2->4->5->6->7->8",
                        "output": "2->1->4->2->6->5->8->7",
                        "explanation": "The linked list is transformed by swapping adjacent pairs: (1, 2), (2, 4), (5, 6), and (7, 8)."
                    },
                    {
                        "input": "LinkedList: 1->3->4->7->9->10->1",
                        "output": "3->1->7->4->10->9->1",
                        "explanation": "The linked list is transformed by swapping adjacent pairs: (1, 3), (4, 7), and (9, 10)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use 4 pointers (prev, first, second, next) to swap nodes, adjust 3 links, and move forward or use recursion to swap and continue.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "moonfrog-labs",
            "amazon",
            "microsoft",
            "intuit"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to pairwise swap elements of a linked list\nclass Solution {\n  public:\n    Node* pairWiseSwap(Node* head) {\n        Node *a = head, *b, *c;\n        Node* prev = NULL;\n\n        while (a && a->next) {\n            b = a->next; // b is second node\n            c = b->next; // c is third node (c might be null)\n                         // current order : prev - a - b - c\n\n            if (a == head)\n                // b will be new head\n                head = b;\n            else\n                // else, linking second node i.e. b, to a's ancestor\n                prev->next = b;\n\n            b->next = a; // a should now come after b\n            a->next = c; // connecting a to list ahead\n\n            // now we have to update a and prev for next pair\n            prev = a;\n            a = c;\n        }\n\n        return head;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//\n\nclass Solution {\n    public Node pairwiseSwap(Node head) {\n        Node a = head, b = null, c = null;\n        Node prev = null;\n\n        while (a != null && a.next != null) {\n            b = a.next; // b is second node\n            c = b.next; // c is third node (c might be null)\n                        // current order : prev - a - b - c\n\n            if (a == head)\n                // b will be new head\n                head = b;\n            else\n                // else, linking second node i.e. b, to a's ancestor\n                prev.next = b;\n\n            b.next = a; // a should now come after b\n            a.next = c; // connecting a to list ahead\n\n            // now we have to update a and prev for next pair\n            prev = a;\n            a = c;\n        }\n\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# solution\n\n\nclass Solution:\n\n    def pairWiseSwap(self, head):\n        a = head\n        b, c, prev = None, None, None\n\n        while a and a.next:\n            b = a.next  # b is second node\n            c = b.next  # c is third node (c might be null)\n            # current order : prev - a - b - c\n\n            if a == head:\n                # b will be new head\n                head = b\n            else:\n                # else, linking second node i.e. b, to a's ancestor\n                prev.next = b\n\n            b.next = a  # a should now come after b\n            a.next = c  # connecting a to list ahead\n\n            # now we have to update a and prev for next pair\n            prev = a\n            a = c\n\n        return head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {Node} node\n * @return {Node} node\n */\n\n/*\n  Pairwise swap a linked list\n  The input list will have at least one element\n  node is defined as\n*/\n\nclass Solution {\n    pairWiseSwap(node) {\n        let a = node; // 'a' is the current node that needs to be swapped\n        let b = null; // 'b' is the next node after 'a' that will be swapped with 'a'\n        let c = null; // 'c' is the node after 'b' that will be connected after swapping\n        let prev = null; // 'prev' keeps track of the previous node before 'a'\n\n        // Traverse the list in pairs\n        while (a && a.next) {\n            b = a.next; // Set 'b' to the next node of 'a'\n            c = b.next; // Set 'c' to the node after 'b'\n\n            if (a === node) {\n                // If this is the first pair, update the head to 'b' since 'b' will be\n                // the new head after swapping\n                node = b;\n            } else {\n                // For subsequent pairs, connect the previous node ('prev') to 'b'\n                prev.next = b;\n            }\n\n            // Swap the nodes 'a' and 'b'\n            b.next = a; // Make 'b' point to 'a'\n            a.next = c; // Make 'a' point to 'c' (the next node after the swapped pair)\n\n            // Update 'prev' to 'a' because 'a' will be the previous node for the next\n            // pair\n            prev = a;\n\n            // Move 'a' to 'c' to continue swapping the next pair\n            a = c;\n        }\n\n        return node; // Return the new head of the swapped list\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}