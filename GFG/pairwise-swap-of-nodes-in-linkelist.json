{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701069,
            "title": "Pairwise swap of nodes in LinkedList",
            "titleSlug": "pairwise-swap-of-nodes-in-linkelist",
            "content": "<p><span style=\"font-size: 18px;\">Given a linked list of <strong>N</strong> positive integers. You need to <strong>swap elements pairwise</strong>. Your task is to complete the function <strong>pairwise_swap()</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 7\nvalue[] = {1,2,3,4,5,6,7}\n<strong>Output: </strong>2 1 4 3 6 5 7<strong>\nExplanation:</strong>The linked list after swapping\nbecomes: 1 2 3 4 5 6 7 -&gt; 2 1 4 3 6 5 7</span>.\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 6\nvalue[] = {1,2,3,4,5,6}\n<strong>Output: </strong>2 1 4 3 6 5<strong>\nExplanation:</strong>The linked list after swapping\nbecomes: 1 2 3 4 5 6 -&gt; 2 1 4 3 6 5.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't have to worry about input and output, you just have to complete the function <strong>pairwise_swap(). </strong>The <strong>printing </strong>is done <strong>automatically </strong>by the<strong> driver code</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraint:</strong><br />2 &lt;= N &lt;= 100</span><br /><span style=\"font-size: 18px;\">1 &lt;= Node values &lt;= 1000</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity</strong> : O(N)<br /><strong>Expected Auxilliary Space</strong> : O(1)</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of N positive integers, implement a function to swap the values of adjacent nodes pairwise. The function should modify the linked list in-place.",
                "constraints": [
                    "2 <= N <= 100",
                    "1 <= Node values <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 7\nvalue[] = {1,2,3,4,5,6,7}",
                        "output": "2 1 4 3 6 5 7",
                        "explanation": "The linked list after pairwise swapping is: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 becomes 2 -> 1 -> 4 -> 3 -> 6 -> 5 -> 7."
                    },
                    {
                        "input": "N = 6\nvalue[] = {1,2,3,4,5,6}",
                        "output": "2 1 4 3 6 5",
                        "explanation": "The linked list after pairwise swapping is: 1 -> 2 -> 3 -> 4 -> 5 -> 6 becomes 2 -> 1 -> 4 -> 3 -> 6 -> 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;</p>\n\n<ul>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n//Function to swap elements pairwise.\r\nstruct Node* pairwise_swap(struct Node* head)\r\n{\r\n    if(head == NULL || head->next == NULL)\r\n       return NULL;\r\n       \r\n    //initializing previous and current pointers. \r\n    struct Node *prev = head; \r\n    struct Node *curr = head->next; \r\n    \r\n    head = curr; \r\n    \r\n    while (true) \r\n    { \r\n        //creating a next pointer as well.\r\n        struct Node *next = curr->next;\r\n        \r\n        //updating next of current as prev to swap current and previous node.\r\n        curr->next = prev;\r\n  \r\n        //if next node is NULL or next is the last node, we update the link \r\n        //part of prev pointer and break from the loop.\r\n        if (next == NULL || next->next == NULL) \r\n        { \r\n            prev->next = next; \r\n            break; \r\n        } \r\n  \r\n        //changing link part of previous pointer to next node of next pointer. \r\n        prev->next = next->next; \r\n  \r\n        //updating prev and curr pointers.\r\n        prev = next; \r\n        curr = prev->next; \r\n    } \r\n    \r\n    return head;\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Swap\r\n{\r\n    //Function to swap elements pairwise.\r\n    public static Node pairwise_swap(Node head)\r\n    {\r\n        if (head== null || head.next == null) { \r\n            return head; \r\n        } \r\n  \r\n        //initializing previous and current pointers.\r\n        Node prev = head; \r\n        Node curr = head.next; \r\n  \r\n        head = curr; \r\n  \r\n        // Traverse the list \r\n        while (true) {\r\n            \r\n            //creating a next pointer as well.\r\n            Node next = curr.next;\r\n            //updating next of current as prev to swap current and previous node.\r\n            curr.next = prev;\r\n  \r\n            //if next node is NULL or next is the last node, we update the link \r\n            //part of prev pointer and break from the loop.\r\n            if (next == null || next.next == null) { \r\n                prev.next = next; \r\n                break; \r\n            } \r\n  \r\n            //changing link part of prev pointer to next node of next pointer. \r\n            prev.next = next.next; \r\n  \r\n            //updating prev and curr pointers. \r\n            prev = next; \r\n            curr = prev.next; \r\n        } \r\n        return head; \r\n    }\r\n       \r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n'''\r\n\tFunction to pairwise nodes of \r\n\tthe given linked list.\r\n\t\r\n\tFunction Arguments: head of the original list.\r\n\tReturn Type: reference to head of the given linked list.\r\n\r\n\t{\r\n\t\t# Node Class\r\n\t\tclass Node:\r\n\t\t    def __init__(self, data):   # data -> value stored in node\r\n\t\t        self.data = data\r\n\t\t        self.next = None\r\n\t}\r\n\r\n\tContributed By: Nagendra Jha\r\n'''\r\n#Function to swap elements pairwise.\r\ndef pairwiseSwap(head):\r\n    \r\n    if (head is None or head.next is None):\r\n        return head\r\n\r\n    #initializing previous and current pointers.\r\n    prevNode = head\r\n    currNode = head.next\r\n\r\n    head = currNode\r\n\r\n    while True:\r\n        #creating a next pointer as well.\r\n        nextNode = currNode.next\r\n         \r\n        #updating next of current as prev to swap current and previous node.\r\n        currNode.next = prevNode  \r\n\r\n        #if next node is NULL or next is the last node, we update the link \r\n        #part of prev pointer and break from the loop.\r\n        if (nextNode is None or nextNode.next is None):\r\n            prevNode.next = nextNode\r\n            break\r\n\r\n        #changing link part of previous pointer to next node of next pointer.\r\n        prevNode.next = nextNode.next\r\n\r\n        #updating prev and curr pointers.\r\n        prevNode = nextNode\r\n        currNode = prevNode.next\r\n        \r\n    return head\r\n        ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} head\r\n * @returns {Node}\r\n*/\r\n\r\n/*\r\nclass Node{\r\n    constructor(data){\r\n        this.data = data;\r\n        this.next = null;\r\n    }\r\n}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to swap elements pairwise. \r\n    pairwise_swap(head)\r\n    {\r\n        if(head === null || head.next === null)\r\n           return null;\r\n           \r\n        //initializing previous and current pointers.\r\n        let prev = head; \r\n        let curr = head.next; \r\n        \r\n        head = curr;\r\n        \r\n        while (true) \r\n        { \r\n            //creating a next pointer as well.\r\n            let next = curr.next; \r\n           //updating next of current as prev to swap current and previous node.\r\n            curr.next = prev; \r\n      \r\n            //if next node is NULL or next is the last node, we update the link \r\n            //part of prev pointer and break from the loop\r\n            if (next === null || next.next === null) \r\n            { \r\n                prev.next = next; \r\n                break; \r\n            } \r\n      \r\n            //changing link part of prev pointer to next node of next pointer. \r\n            prev.next = next.next; \r\n      \r\n            //updating prev and curr pointers.\r\n            prev = next; \r\n            curr = prev.next; \r\n        } \r\n        \r\n        return head;\r\n    }\r\n}\r\n",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\n/*\npublic class Node{\n    public int data;\n    public Node next;\n\n    public Node(int a){\n        this.data = a;\n        this.next = null;\n    }\n\n}\n*/\n\nclass Solution\n{\n\t//Complete this function\n\t//Function to swap elements pairwise.\n\tpublic Node pairwise_swap(Node head)\n\t{\n\t\tif(head == null || head.next == null)\n\t\t\treturn null;\n\n\t\t//initializing previous and current pointers.\n\t\tNode prev = head;\n\t\tNode curr = head.next;\n\n\t\thead = curr;\n\n\t\twhile (true)\n\t\t{\n\t\t\t//creating a next pointer as well.\n\t\t\tNode next = curr.next;\n\n\t\t\t//updating next of current as prev to swap current and previous node.\n\t\t\tcurr.next = prev;\n\n\t\t\t//if next node is NULL or next is the last node, we update the link \n\t\t\t//part of prev pointer and break from the loop.\n\t\t\tif (next == null || next.next == null)\n\t\t\t{\n\t\t\t\tprev.next = next;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t//changing link part of previous pointer to next node of next pointer.\n\t\t\tprev.next = next.next;\n\n\t\t\t//updating prev and curr pointers.\n\t\t\tprev = next;\n\t\t\tcurr = prev.next;\n\t\t}\n\n\t\treturn head;\n\t}\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}