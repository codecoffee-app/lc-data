{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714324,
            "title": "Palindrome with minimum sum",
            "titleSlug": "palindrome-with-minimum-sum--170648",
            "content": "<p><span style=\"font-size: 18px;\">Given a string,&nbsp;<strong>S</strong>.The string can contain small case<strong>&nbsp;</strong>English letters or <strong>'?'</strong>. You can replace '?' with any small English letter. Now if it is possible to make&nbsp;the string <strong>S</strong> a palindrome after replacing all&nbsp;'?' then find the palindromic string with a <strong>minimum ascii sum</strong> of the absolute difference of adjacent characters. Otherwise, return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: S = </strong>a???c??c????</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>4<strong>\nExplanation:\n</strong>We can see that we can make the string\npalindrome. Now to get <strong>minimum</strong> <strong>ascii</strong> <strong>sum</strong> we should\nreplace all the '?' between 'a' and 'c' with\n'b' and all the '?' between two 'c' with 'c'.\nSo after replacing all the '?' the string: \n<strong>abbbccccbbba</strong>.\nThe sum of differences of adjacent characters is 4.<strong>   </strong></span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: S = </strong>a???c??c???c</span><span style=\"font-size: 18px;\"><strong>\nOutput: </strong>-1\n<strong>Explanation:\n</strong>It is not possible to make the string palindrome.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>minimumSum()&nbsp;</strong>which takes a string S input parameter and returns an integer denoting the&nbsp;sum of differences of adjacent characters. If it is not possible to make string palindrome, return -1.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |S|&nbsp;&lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>The idea is to&nbsp;use a greedy approach to choose&nbsp;characters to replace &#39;?&#39;.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to check if it is possible to make a palindrome string.\n    bool PossibleToMakePalindrome(string s){\n        int N = s.length();\n        for(int i = 0 ; i < N / 2 ; i++)\n            if(s[i] != '?' && s[N - i - 1] != '?' && s[i] != s[N - i - 1])\n                return false;\n        return true;\n    }\n\n    // Function to calculate the minimum sum to make a palindrome string.\n    int minimumSum(string s) {\n        // Check if it is possible to make a palindrome string.\n        if(!PossibleToMakePalindrome(s))\n            return -1;\n\n        int N = s.length();\n\n        // Replace '?' with corresponding characters from symmetric positions in string.\n        for(int i = 0 ; i < N / 2 ; i++){\n            if(s[i] == '?' && s[N-  i - 1] != '?')\n                s[i] = s[N - i - 1];\n            else if(s[i] != '?' && s[N - i - 1] == '?')\n                s[N - i - 1] = s[i];\n        }\n\n        vector<char>NextChar;\n\n        // Fill in characters for consecutive '?', based on the previous non-'?' character encountered from the left.\n        for(int i = 0 ; i < N;){\n            if(s[i] != '?')\n                NextChar.push_back(s[i++]);\n            else{\n                if(NextChar.size() >= 1){\n                    while(i < N && s[i] == '?'){\n                        s[i] = NextChar.back();\n                        i++;\n                    }\n                    NextChar.pop_back();\n                }else\n                i++;\n            }\n        }\n        \n        NextChar.clear();\n\n        // Fill in characters for consecutive '?', based on the previous non-'?' character encountered from the right.\n        for(int i = N - 1 ; i >= 0;){\n            if(s[i] != '?')\n                NextChar.push_back(s[i--]);\n            else{\n                if(NextChar.size() >= 1){\n                    while(i >= 0 && s[i] == '?'){\n                        s[i] = NextChar.back();\n                        i--;\n                    }\n                    NextChar.pop_back();\n                }else\n                i--;\n            }\n        }\n\n        // Replace remaining '?' with 'a'.\n        for(int i = 0 ; i < N ; i++)\n            if(s[i] == '?')\n                s[i] = 'a';\n\n        int Ans = 0;\n\n        // Calculate the minimum sum by finding the absolute difference of adjacent characters' ASCII values.\n        for(int i = 0 ; i < N  - 1; i++){\n            int o = s[i] - 'a';\n            int l = s[i + 1] - 'a';\n            Ans += abs(o - l);\n        }\n\n        return Ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "public class Solution {\r\n    public boolean PossibleToMakePalindrome(String s) {\r\n        int N = s.length();\r\n        for (int i = 0; i < N / 2; i++) {\r\n            if (s.charAt(i) != '?' && s.charAt(N - i - 1) != '?' && s.charAt(i) != s.charAt(N - i - 1))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public int minimumSum(String s) {\r\n        if (!PossibleToMakePalindrome(s))\r\n            return -1;\r\n        int N = s.length();\r\n        char[] sArray = s.toCharArray();\r\n        for (int i = 0; i < N / 2; i++) {\r\n            if (sArray[i] == '?' && sArray[N - i - 1] != '?')\r\n                sArray[i] = sArray[N - i - 1];\r\n            else if (sArray[i] != '?' && sArray[N - i - 1] == '?')\r\n                sArray[N - i - 1] = sArray[i];\r\n        }\r\n        List<Character> NextChar = new ArrayList<>();\r\n        for (int i = 0; i < N;) {\r\n            if (sArray[i] != '?') {\r\n                NextChar.add(sArray[i++]);\r\n            } else {\r\n                if (NextChar.size() >= 1) {\r\n                    while (i < N && sArray[i] == '?') {\r\n                        sArray[i] = NextChar.get(NextChar.size() - 1);\r\n                        i++;\r\n                    }\r\n                    NextChar.remove(NextChar.size() - 1);\r\n                } else {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        NextChar.clear();\r\n        for (int i = N - 1; i >= 0;) {\r\n            if (sArray[i] != '?') {\r\n                NextChar.add(sArray[i--]);\r\n            } else {\r\n                if (NextChar.size() >= 1) {\r\n                    while (i >= 0 && sArray[i] == '?') {\r\n                        sArray[i] = NextChar.get(NextChar.size() - 1);\r\n                        i--;\r\n                    }\r\n                    NextChar.remove(NextChar.size() - 1);\r\n                } else {\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n        for (int i = 0; i < N / 2; i++) {\r\n            if (sArray[i] == '?' && sArray[N - i - 1] != '?')\r\n                sArray[i] = sArray[N - i - 1];\r\n            else if (sArray[i] != '?' && sArray[N - i - 1] == '?')\r\n                sArray[N - i - 1] = sArray[i];\r\n        }\r\n        for (int i = 0; i < N; i++) {\r\n            if (sArray[i] == '?')\r\n                sArray[i] = 'a';\r\n        }\r\n        int Ans = 0;\r\n        for (int i = 0; i < N - 1; i++) {\r\n            int o = sArray[i] - 'a';\r\n            int l = sArray[i + 1] - 'a';\r\n            Ans += Math.abs(o - l);\r\n        }\r\n        return Ans;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def PossibleToMakePalindrome(self, s: str) -> bool:\n        N = len(s)\n        # Check if it is possible to make a palindrome by comparing characters\n        # at corresponding positions from the start and end of the string\n        for i in range(N // 2):\n            if s[i] != '?' and s[N - i - 1] != '?' and s[i] != s[N - i - 1]:\n                return False\n        return True\n\n    def minimumSum(self, s: str) -> int:\n        # If it is not possible to make a palindrome, return -1\n        if not self.PossibleToMakePalindrome(s):\n            return -1\n\n        N = len(s)\n        # Fill in the unknown characters from the start and end of the string\n        for i in range(N // 2):\n            if s[i] == '?' and s[N - i - 1] != '?':\n                s = s[:i] + s[N - i - 1] + s[i + 1:]\n            elif s[i] != '?' and s[N - i - 1] == '?':\n                s = s[:N - i - 1] + s[i] + s[N - i:]\n\n        NextChar = []\n        i = 0\n        # Fill in the unknown characters from the start of the string\n        while i < N:\n            if s[i] != '?':\n                NextChar.append(s[i])\n                i += 1\n            else:\n                if len(NextChar) >= 1:\n                    while i < N and s[i] == '?':\n                        s = s[:i] + NextChar[-1] + s[i + 1:]\n                        i += 1\n                    NextChar.pop()\n                else:\n                    i += 1\n\n        NextChar = []\n        i = N - 1\n        # Fill in the unknown characters from the end of the string\n        while i >= 0:\n            if s[i] != '?':\n                NextChar.append(s[i])\n                i -= 1\n            else:\n                if len(NextChar) >= 1:\n                    while i >= 0 and s[i] == '?':\n                        s = s[:i] + NextChar[-1] + s[i + 1:]\n                        i -= 1\n                    NextChar.pop()\n                else:\n                    i -= 1\n\n        # Fill in the remaining unknown characters with 'a'\n        s = s.replace('?', 'a')\n        Ans = 0\n        # Calculate the minimum sum of absolute differences between adjacent characters\n        for i in range(N - 1):\n            o = ord(s[i]) - ord('a')\n            l = ord(s[i + 1]) - ord('a')\n            Ans += abs(o - l)\n        return Ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public bool PossibleToMakePalindrome(string s)\n    {\n        int N = s.Length;\n        for (int i = 0; i < N / 2; i++)\n        {\n            if (s[i] != '?' && s[N - i - 1] != '?' && s[i] != s[N - i - 1])\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public int minimumSum(string s)\n    {\n        if (!PossibleToMakePalindrome(s))\n        {\n            return -1;\n        }\n\n        int N = s.Length;\n\n        for (int i = 0; i < N / 2; i++)\n        {\n            if (s[i] == '?' && s[N - i - 1] != '?')\n            {\n                s = s.Substring(0, i) + s[N - i - 1] + s.Substring(i + 1);\n            }\n            else if (s[i] != '?' && s[N - i - 1] == '?')\n            {\n                s = s.Substring(0, N - i - 1) + s[i] + s.Substring(N - i);\n            }\n        }\n\n        List<char> NextChar = new List<char>();\n\n        for (int i = 0; i < N;)\n        {\n            if (s[i] != '?')\n            {\n                NextChar.Add(s[i++]);\n            }\n            else\n            {\n                if (NextChar.Count >= 1)\n                {\n                    while (i < N && s[i] == '?')\n                    {\n                        s = s.Substring(0, i) + NextChar[NextChar.Count - 1] + s.Substring(i + 1);\n                        i++;\n                    }\n                    NextChar.RemoveAt(NextChar.Count - 1);\n                }\n                else\n                {\n                    i++;\n                }\n            }\n        }\n\n        NextChar.Clear();\n\n        for (int i = N - 1; i >= 0;)\n        {\n            if (s[i] != '?')\n            {\n                NextChar.Add(s[i--]);\n            }\n            else\n            {\n                if (NextChar.Count >= 1)\n                {\n                    while (i >= 0 && s[i] == '?')\n                    {\n                        s = s.Substring(0, i) + NextChar[NextChar.Count - 1] + s.Substring(i + 1);\n                        i--;\n                    }\n                    NextChar.RemoveAt(NextChar.Count - 1);\n                }\n                else\n                {\n                    i--;\n                }\n            }\n        }\n\n        for (int i = 0; i < N; i++)\n        {\n            if (s[i] == '?')\n            {\n                s = s.Substring(0, i) + 'a' + s.Substring(i + 1);\n            }\n        }\n\n        int Ans = 0;\n\n        for (int i = 0; i < N - 1; i++)\n        {\n            int o = s[i] - 'a';\n            int l = s[i + 1] - 'a';\n            Ans += Math.Abs(o - l);\n        }\n\n        return Ans;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} s\n * @returns {number}\n*/\n\nclass Solution\n{\n    //Function to find the minimum sum of a string.\n    minimumSum(s)\n    {\n        // Check if it is possible to make a palindrome by comparing characters\n        // at corresponding positions from the start and end of the string\n        for (let i = 0; i < Math.floor(s.length / 2); i++) {\n            if (s[i] !== '?' && s[s.length - i - 1] !== '?' && s[i] !== s[s.length - i - 1]) {\n                return -1;\n            }\n        }\n        \n        let nextChar = [];\n        \n        // Fill in the unknown characters from the start and end of the string\n        for (let i = 0; i < Math.floor(s.length / 2); i++) {\n            if (s[i] === '?' && s[s.length - i - 1] !== '?') {\n                s = s.substring(0, i) + s[s.length - i - 1] + s.substring(i + 1);\n            } else if (s[i] !== '?' && s[s.length - i - 1] === '?') {\n                s = s.substring(0, s.length - i - 1) + s[i] + s.substring(s.length - i);\n            }\n        }\n        \n        // Fill in the unknown characters from the start of the string\n        let i = 0;\n        while (i < s.length) {\n            if (s[i] !== '?') {\n                nextChar.push(s[i]);\n                i++;\n            } else {\n                if (nextChar.length >= 1) {\n                    while (i < s.length && s[i] === '?') {\n                        s = s.substring(0, i) + nextChar[nextChar.length-1] + s.substring(i + 1);\n                        i++;\n                    }\n                    nextChar.pop();\n                } else {\n                    i++;\n                }\n            }\n        }\n        \n        nextChar = [];\n        \n        // Fill in the unknown characters from the end of the string\n        i = s.length - 1;\n        while (i >= 0) {\n            if (s[i] !== '?') {\n                nextChar.push(s[i]);\n                i--;\n            } else {\n                if (nextChar.length >= 1) {\n                    while (i >= 0 && s[i] === '?') {\n                        s = s.substring(0, i) + nextChar[nextChar.length-1] + s.substring(i + 1);\n                        i--;\n                    }\n                    nextChar.pop();\n                } else {\n                    i--;\n                }\n            }\n        }\n        \n        // Fill in the remaining unknown characters with 'a'\n        s = s.replace(/\\?/g, 'a');\n        \n        let ans = 0;\n        \n        // Calculate the minimum sum of absolute differences between adjacent characters\n        for (let i = 0; i < s.length - 1; i++) {\n            const o = s.charCodeAt(i) - 'a'.charCodeAt(0);\n            const l = s.charCodeAt(i + 1) - 'a'.charCodeAt(0);\n            ans += Math.abs(o - l);\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}