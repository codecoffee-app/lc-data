{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700419,
            "title": "Palindromic Array",
            "titleSlug": "palindromic-array-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given </span><span style=\"font-size: 18px;\">an</span><span style=\"font-size: 18px;\"> array <strong>arr[]</strong> of positive integers. R</span><span style=\"font-size: 18px;\">eturn true if all the array elements are palindrome otherwise, return false.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[]<strong> </strong>= [</span><span style=\"font-size: 18px;\">111, 222, 333, 444, 555]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>true</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">arr[0] = 111, which is a palindrome number.\narr[1] = 222, which is a palindrome number.\narr[2] = 333, which is a palindrome number.\narr[3] = 444, which is a palindrome number.\narr[4] = 555, which is a palindrome number.\nAs all numbers are palindrome so This will return true.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [121, 131, 20]</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">false</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>20 is not a palindrome hence the output is false.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(nlogn)<br /></span><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px;\"><strong>Expected Space&nbsp;</strong></span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px;\">Complexity</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px;\">: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px;\">O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;=arr.size&lt;= 20</span><br /><span style=\"font-size: 18px;\">1 &lt;=arr[i]&lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of positive integers, determine if all elements in the array are palindromes. Return `true` if all elements are palindromes; otherwise, return `false`.",
                "constraints": [
                    "1 <= arr.size <= 20",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[111, 222, 333, 444, 555]",
                        "output": "true",
                        "explanation": "All elements of the array are palindrome numbers (111, 222, 333, 444, 555). Therefore, the output is true."
                    },
                    {
                        "input": "[121, 131, 20]",
                        "output": "false",
                        "explanation": "The number 20 is not a palindrome. Consequently, the output is false."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #1e2229; font-family: Nunito; font-size: 14pt; background-color: #ffffff;\">Iterate through each element in an array and count how many elements are palindrome if it is equal to the array size then return true else false.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if a number is a palindrome\n    int check(int a) {\n        int m = a;\n        int rev = 0;\n        while (a != 0) {\n            // Reversing the number\n            rev = (rev * 10) + (a % 10);\n            a /= 10;\n        }\n        if (m == rev)\n            return 1;\n        return 0;\n    }\n\n    // Function to check if all elements in the array are palindromes\n    bool isPalinArray(vector<int> &arr) {\n        int n = arr.size();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            // Checking if the element is a palindrome\n            if (check(arr[i]) == 1)\n                count++;\n        }\n        // If all elements are palindromes, return 1\n        if (count == n)\n            return 1;\n        return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // method to check if each element in the array is a palindrome\n    public static boolean isPalinArray(int[] arr) {\n        int n = arr.length;\n        int count = 0;\n        // iterating over each element in the array\n        for (int i = 0; i < n; i++) {\n            // calling the check method to check if the element is a palindrome\n            if (check(arr[i]) == 1)\n                // if the element is a palindrome, increment the count\n                count++;\n        }\n        // if count is equal to the length of the array, return 1 indicating all\n        // elements are palindromes\n        if (count == n) return true;\n        // otherwise, return 0 indicating not all elements are palindromes\n        return false;\n    }\n\n    // method to check if a number is a palindrome\n    public static int check(int x) {\n        int m = x;\n        int rev = 0;\n        // reversing the number\n        while (x != 0) {\n            rev = (rev * 10) + (x % 10);\n            x /= 10;\n        }\n        // if the reversed number is equal to the original number, return 1 indicating\n        // it is a palindrome\n        if (m == rev) return 1;\n        // otherwise, return 0 indicating it is not a palindrome\n        return 0;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def isPalinArray(arr):\n    # iterating over each element in the array\n    for i in arr:\n        # checking if the string representation of the element\n        # is not equal to its reverse, if so return False\n        if str(i) != str(i)[::-1]:\n            return False\n    # if all elements pass the condition, return True\n    return True\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @return {number}\n */\n\nclass Solution {\n\n    isPalinArray(arr) {\n        let n = arr.length;\n        for (let i = 0; i < n; i++) {\n            let num = arr[i].toString();\n            let reverse = num.split('').reverse().join('');\n            if (num !== reverse) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}