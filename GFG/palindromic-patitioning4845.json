{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704187,
            "title": "Palindromic Partitioning",
            "titleSlug": "palindromic-patitioning4845",
            "content": "<p><span >Given a string <strong>s</strong>,&nbsp;a partitioning of the string is a<strong>&nbsp;palindrome partitioning&nbsp;</strong>if every sub-string of the partition is a <strong>palindrome</strong>.&nbsp;Determine the <strong>fewest cuts</strong> needed for <strong>palindrome partitioning</strong> of the given string.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong><strong>Input:</strong></strong> s = \"geek\"&nbsp;<br /><strong><strong>Output:</strong></strong> 2&nbsp;<br /><strong><strong>Explanation: </strong></strong>We need to make minimum 2 cuts, i.e., \"g | ee | k\".</span></pre>\n<pre><span ><strong><strong>Input: </strong></strong>s = \"aaaa\" <br /><strong><strong>Output</strong></strong>: 0<br /><strong><strong>Explanation:</strong></strong> The string is already a palindrome.</span></pre>\n<pre><span ><strong>Input:</strong> s = \"ababbbabbababa\"&nbsp;</span><br /><span ><strong>Output: </strong>3</span><br /><span ><strong>Explanation:</strong> We need to make minimum 3 cuts, i.e., \"aba | bb | babbab | aba\".</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; |s| &le; 10<sup>3<br /></sup><sup>s contain lowercase letters only</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, find the minimum number of cuts required to partition `s` such that every substring in the partition is a palindrome. This is known as the palindrome partitioning problem.",
                "constraints": [
                    "1 <= |s| <= 10^3",
                    "s contains lowercase letters only"
                ],
                "testcases": [
                    {
                        "input": "geek",
                        "output": "2",
                        "explanation": "The string can be partitioned into palindromes with 2 cuts: \"g | ee | k\"."
                    },
                    {
                        "input": "aaaa",
                        "output": "0",
                        "explanation": "The string is already a palindrome, so no cuts are needed."
                    },
                    {
                        "input": "ababbbabbababa",
                        "output": "3",
                        "explanation": "The string can be partitioned into palindromes with 3 cuts: \"aba | bb | babbab | aba\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >For each index calculate the total partitions required for a palindrome partitioning of the string ending at i.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "google"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to fill isPalin array such that isPalin[i][j]\n    // stores whether substring s[i, j] is a palindrome or not\n    void generatePal(string& s, vector<vector<bool>>& isPalin) {\n        int n = s.size();\n\n        // Substring s[i .. i] of len 1\n        // is always palindromic\n        for (int i = 0; i < n; i++) {\n            isPalin[i][i] = true;\n        }\n\n        // Iterate over different lengths of substrings\n        for (int len = 2; len <= n; len++) {\n\n            for (int i = 0, j = i + len - 1; j < n; i++, j++) {\n\n                // Check whether s[i] == s[j] and the\n                // substring between them is a palindrome\n                if (s[i] == s[j] && (len == 2 || isPalin[i + 1][j - 1])) {\n\n                    // Mark the substring from i to j as a\n                    // palindrome\n                    isPalin[i][j] = true;\n                }\n            }\n        }\n    }\n\n    // Function to calculate the minimum number of cuts required\n    // to make all substrings of 's' palindromic\n    int palPartition(string& s) {\n        int n = s.size();\n\n        // 2D array to store whether substring\n        // s[i, j] is a palindrome or not\n        vector<vector<bool>> isPalin(n, vector<bool>(n, false));\n\n        generatePal(s, isPalin);\n\n        // dp[i] stores minimum cuts for Palindrome\n        // Partitioning of substring s[0...i]\n        vector<int> dp(n, n);\n\n        // There is no cut required for single character\n        // as it is always palindrome\n        dp[0] = 0;\n\n        // Iterate over the given string\n        for (int i = 1; i < n; i++) {\n\n            // Check if string 0 to i is palindrome.\n            if (isPalin[0][i]) {\n\n                // if palindrome then cuts required is 0\n                dp[i] = 0;\n            } else {\n                for (int j = i; j >= 1; j--) {\n\n                    // if substring s[j...i] is palindromic\n                    // then we can make a cut over here\n                    if (isPalin[j][i]) {\n\n                        // update dp[i] with minimum cuts\n                        dp[i] = min(dp[i], 1 + dp[j - 1]);\n                    }\n                }\n            }\n        }\n\n        // Return the minimum cuts required\n        // for the entire string 's'\n        return dp[n - 1];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to fill isPalin array such that isPalin[i][j]\n    // stores whether substring s[i, j] is a palindrome or not\n    static void generatePal(String s, boolean[][] isPalin) {\n        int n = s.length();\n\n        // Substring s[i .. i] of len 1\n        // is always palindromic\n        for (int i = 0; i < n; i++) {\n            isPalin[i][i] = true;\n        }\n\n        // Iterate over different lengths of substrings\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0, j = i + len - 1; j < n; i++, j++) {\n\n                // Check whether s[i] == s[j] and the\n                // substring between them is a palindrome\n                if (s.charAt(i) == s.charAt(j) && (len == 2 || isPalin[i + 1][j - 1])) {\n\n                    // Mark the substring from i to j as a\n                    // palindrome\n                    isPalin[i][j] = true;\n                }\n            }\n        }\n    }\n\n    // Function to calculate the minimum number of cuts required\n    // to make all substrings of 's' palindromic\n    static int palPartition(String s) {\n        int n = s.length();\n\n        // 2D array to store whether substring\n        // s[i, j] is a palindrome or not\n        boolean[][] isPalin = new boolean[n][n];\n\n        generatePal(s, isPalin);\n\n        // dp[i] stores minimum cuts for Palindrome\n        // Partitioning of substring s[0...i]\n        int[] dp = new int[n];\n        Arrays.fill(dp, n);\n\n        // There is no cut required for single character\n        // as it is always palindrome\n        dp[0] = 0;\n\n        // Iterate over the given string\n        for (int i = 1; i < n; i++) {\n\n            // Check if string 0 to i is palindrome.\n            if (isPalin[0][i]) {\n\n                // if palindrome then cuts required is 0\n                dp[i] = 0;\n            } else {\n                for (int j = i; j >= 1; j--) {\n\n                    // if substring s[j...i] is palindromic\n                    // then we can make a cut over here\n                    if (isPalin[j][i]) {\n\n                        // update dp[i] with minimum cuts\n                        dp[i] = Math.min(dp[i], 1 + dp[j - 1]);\n                    }\n                }\n            }\n        }\n\n        // Return the minimum cuts required\n        // for the entire string 's'\n        return dp[n - 1];\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    # Function to fill isPalin array such that isPalin[i][j]\n    # stores whether substring s[i, j] is a palindrome or not\n    def generatePal(self, s, isPalin):\n        n = len(s)\n\n        # Substring s[i .. i] of len 1\n        # is always palindromic\n        for i in range(n):\n            isPalin[i][i] = True\n\n        # Iterate over different lengths of substrings\n        for length in range(2, n + 1):\n            for i in range(n - length + 1):\n                j = i + length - 1\n\n                # Check whether s[i] == s[j] and the\n                # substring between them is a palindrome\n                if s[i] == s[j] and (length == 2 or isPalin[i + 1][j - 1]):\n\n                    # Mark the substring from i to j as a\n                    # palindrome\n                    isPalin[i][j] = True\n\n    # Function to calculate the minimum number of cuts required\n    # to make all substrings of 's' palindromic\n    def palPartition(self, s):\n        n = len(s)\n\n        # 2D array to store whether substring\n        # s[i, j] is a palindrome or not\n        isPalin = [[False] * n for _ in range(n)]\n\n        self.generatePal(s, isPalin)\n\n        # dp[i] stores minimum cuts for Palindrome\n        # Partitioning of substring s[0...i]\n        dp = [n] * n\n\n        # There is no cut required for single character\n        # as it is always palindrome\n        dp[0] = 0\n\n        # Iterate over the given string\n        for i in range(1, n):\n\n            # Check if string 0 to i is palindrome.\n            if isPalin[0][i]:\n\n                # if palindrome then cuts required is 0\n                dp[i] = 0\n            else:\n                for j in range(i, 0, -1):\n\n                    # if substring s[j...i] is palindromic\n                    # then we can make a cut over here\n                    if isPalin[j][i]:\n\n                        # update dp[i] with minimum cuts\n                        dp[i] = min(dp[i], 1 + dp[j - 1])\n\n        # Return the minimum cuts required\n        # for the entire string 's'\n        return dp[n - 1]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    // Function to fill isPalin array such that isPalin[i][j]\n    // stores whether substring s[i, j] is a palindrome or not\n    generatePal(s, isPalin) {\n        let n = s.length;\n\n        // Substring s[i .. i] of len 1\n        // is always palindromic\n        for (let i = 0; i < n; i++) {\n            isPalin[i][i] = true;\n        }\n\n        // Iterate over different lengths of substrings\n        for (let len = 2; len <= n; len++) {\n            for (let i = 0, j = i + len - 1; j < n; i++, j++) {\n\n                // Check whether s[i] == s[j] and the\n                // substring between them is a palindrome\n                if (s[i] === s[j] && (len === 2 || isPalin[i + 1][j - 1])) {\n\n                    // Mark the substring from i to j as a\n                    // palindrome\n                    isPalin[i][j] = true;\n                }\n            }\n        }\n    }\n\n    // Function to calculate the minimum number of cuts required\n    // to make all substrings of 's' palindromic\n    palPartition(s) {\n        let n = s.length;\n\n        // 2D array to store whether substring\n        // s[i, j] is a palindrome or not\n        let isPalin = Array.from({length : n}, () => Array(n).fill(false));\n\n        this.generatePal(s, isPalin);\n\n        // dp[i] stores minimum cuts for Palindrome\n        // Partitioning of substring s[0...i]\n        let dp = new Array(n).fill(n);\n\n        // There is no cut required for single character\n        // as it is always palindrome\n        dp[0] = 0;\n\n        // Iterate over the given string\n        for (let i = 1; i < n; i++) {\n\n            // Check if string 0 to i is palindrome.\n            if (isPalin[0][i]) {\n\n                // if palindrome then cuts required is 0\n                dp[i] = 0;\n            } else {\n                for (let j = i; j >= 1; j--) {\n\n                    // if substring s[j...i] is palindromic\n                    // then we can make a cut over here\n                    if (isPalin[j][i]) {\n\n                        // update dp[i] with minimum cuts\n                        dp[i] = Math.min(dp[i], 1 + dp[j - 1]);\n                    }\n                }\n            }\n        }\n\n        // Return the minimum cuts required\n        // for the entire string 's'\n        return dp[n - 1];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}