{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704924,
            "title": "Palindromic Primes",
            "titleSlug": "palindromic-primes0259",
            "content": "<p><span style=\"font-size: 18px;\">A&nbsp;<strong>palindromic prime</strong>&nbsp;(sometimes called a&nbsp;<strong>palprime</strong>) is a prime number that is also a palindromic number.Given a number <strong>n</strong>, output the count of numbers less than or equal to n which are palindromic prime.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>n = </strong>3</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">2</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">There are 2 palprimes less than or\nequal to 3. They are 2, and 3.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<span style=\"font-size: 18px;\"><strong>n = </strong>12</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong></span>\n<span style=\"font-size: 18px;\">5</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">There are 5 palprimes less than or\nequal to 12. They are 2, 3, 5, 7, and 11.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>palPrimes()</strong> which takes an Integer n as input and returns the number of palprimes less than or equal to n.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*(log(log(n))))<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A palindromic prime (palprime) is a prime number that is also a palindromic number. Given a number *n*, determine the count of palprimes less than or equal to *n*.",
                "constraints": [
                    "1 <= n <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "2",
                        "explanation": "The palprimes less than or equal to 3 are 2 and 3. Therefore, the count is 2."
                    },
                    {
                        "input": "12",
                        "output": "5",
                        "explanation": "The palprimes less than or equal to 12 are 2, 3, 5, 7, and 11. Therefore, the count is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use Sieve of Eratosthenes.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\n// Back-end complete function template in C++\r\n\r\nclass Solution {\r\n  public:\r\n  \r\n    // Function to implement sieve of Eratosthenes and count palindrome primes\r\n    int palPrimes(int n) {\r\n        \r\n        // Initializing necessary variables and arrays\r\n        vector <int> v;\r\n        bool vis[1000010];\r\n        int last,ans[1000010];\r\n        \r\n        // Implementing sieve of Eratosthenes\r\n        vis[1]=true;\r\n        for(int i=2; i<1000000; i++)\r\n        {\r\n            for(int j=2*i;j<=1000000;j+=i)\r\n            {\r\n                vis[j]=true;\r\n            }\r\n        }\r\n        \r\n        // Calculating count of palindrome primes using dynamic programming\r\n        ans[0]=0;\r\n        ans[1]=0;\r\n        for(int i=2; i<1000001; i++)\r\n        {\r\n            if(!vis[i])\r\n            {\r\n                // Checking if the number is palindrome\r\n                int x=i;\r\n                string s=to_string(x);\r\n                string ss=s;\r\n                reverse(ss.begin(), ss.end());\r\n                \r\n                // Incrementing count if the number is palindrome\r\n                if(s==ss)\r\n                {\r\n                    ans[i]=ans[i-1]+1;\r\n                }\r\n                else\r\n                    ans[i]=ans[i-1];\r\n            }\r\n            else\r\n            {\r\n                ans[i]=ans[i-1];\r\n            }\r\n        }\r\n        \r\n        // Returning the count of palindrome primes till n\r\n        return ans[n];\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int palPrimes(int n) {\n        bool[] vis = new bool[1000010];\n        int[] ans = new int[1000010];\n\n        vis[1] = true;\n        for (int i = 2; i < 1000000; i++) {\n            for (int j = 2 * i; j <= 1000000; j += i) {\n                vis[j] = true;\n            }\n        }\n\n        ans[0] = 0;\n        ans[1] = 0;\n        for (int i = 2; i < 1000001; i++) {\n            if (!vis[i]) {\n                int x = i;\n                string s = x.ToString();\n                string ss = s;\n                char[] arr = ss.ToCharArray();\n                Array.Reverse(arr);\n                ss = new string(arr);\n\n                if (s == ss) {\n                    ans[i] = ans[i - 1] + 1;\n                } else\n                    ans[i] = ans[i - 1];\n            } else {\n                ans[i] = ans[i - 1];\n            }\n        }\n\n        return ans[n];\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}