{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703460,
            "title": "Palindromic Series",
            "titleSlug": "palindromic-series5346",
            "content": "<p><span >You have given a number <strong>n</strong>. He has to create a lowercase alphabetical string from that number and tell whether the string is palindrome. a = 0 , b = 1&hellip;.. and so on. The number of digits represents the character and you have to repeat the string till the sum of all digits.<br /><strong>Note:</strong> No number will start with zero. Consider alphabets ' a to j '&nbsp;only i.e. single digit numbers from 0 to 9.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> n = 61\n<strong>Output:</strong> true\n<strong>Explanation: </strong>n = 61 the substring &ldquo;gb&rdquo; will be printed till 7 (6+1) characters i.e. &ldquo;gbgbgbg&rdquo; and it is palindrome. return true.\n</span></pre>\n<pre><span ><strong>Input:</strong> n = 1998 <strong>\nOutput:</strong> false<br /><strong>Explanation: </strong>The substring formed will be bjji and repeat 1+9+9+8=27 times.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span ><strong>Constraints:<br /></strong></span><span >1 &le; n &le; 10<sup>7</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number 'n', create a lowercase alphabetical string where each digit corresponds to a letter (a=0, b=1, ..., j=9). Repeat this string until the length equals the sum of the digits of 'n'. Determine if the resulting string is a palindrome. Note that the input 'n' will not have leading zeros and only single-digit numbers (0-9) map to alphabets (a-j).",
                "constraints": [
                    "1 <= n <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "61",
                        "output": "true",
                        "explanation": "The number is 61, forming the substring \"gb\". The sum of the digits is 6 + 1 = 7. The repeated string is \"gbgbgbg\", which is a palindrome. Therefore, the output is true."
                    },
                    {
                        "input": "1998",
                        "output": "false",
                        "explanation": "The number is 1998, forming the substring \"bjji\". The sum of the digits is 1 + 9 + 9 + 8 = 27. The substring is repeated 27 times, which results in a string that is not a palindrome, so the output should be false."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Find the string and replicate it. and then check whether it is palindrome or not.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "palindrome",
                "slug": "palindrome"
            },
            {
                "name": "alphabets",
                "slug": "alphabets"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to check if the given number is a pallan number or not\nclass Solution {\n  public:\n    bool pallan(int n) {\n\n        int i = 0, j = 0, sum = 0, d = 0, flag = 0;\n\n        char str[10]; // Array to store individual digits of the number\n\n        char s[80]; // Array to store the characters formed by adding the individual\n                    // digits\n\n        while (n > 0) {\n            int r = n % 10;\n            n = n / 10;\n            str[i++] = 'a' + r - 0;\n            // Converting digits to characters and adding them to the array\n            sum += r;\n            // Calculating the sum of all digits\n            d++;\n        }\n        str[i] = '\\0';\n        // Adding null character at the end of the array\n\n        // Swapping characters to reverse the order of the array\n        i = 0;\n        j = d - 1;\n        while (i < j) {\n            char t = str[i];\n            str[i] = str[j];\n            str[j] = t;\n            i++;\n            j--;\n        }\n\n        // Forming a string by repeating the characters based on the sum of digits\n        for (int j = 0; j < sum; j++)\n            s[j] = str[j % d];\n\n        i = 0;\n        j = sum - 1;\n\n        // Checking if the string formed is a pallan string by comparing characters from\n        // both ends\n        while (i < j) {\n            if (s[i] != s[j]) {\n                flag = 1;\n                break;\n            }\n            i++;\n            j--;\n        }\n\n        // Returning true if the string is a pallan string, else returning false\n        if (flag == 0)\n            return true;\n        else\n            return false;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean pallan(int n) {\n        int i = 0, j = 0, sum = 0, d = 0;\n        boolean flag = false;\n\n        char[] str = new char[10]; // Array to store individual digits of the number\n        char[] s = new char[80];   // Array to store the characters formed by adding the\n                                   // individual digits\n\n        while (n > 0) {\n            int r = n % 10;\n            n = n / 10;\n            str[i++] = (char)('a' + r - 0); // Converting digits to characters and\n                                            // adding them to the array\n            sum += r;                       // Calculating the sum of all digits\n            d++;\n        }\n        str[i] = '\\0'; // Adding null character at the end of the array\n\n        // Swapping characters to reverse the order of the array\n        i = 0;\n        j = d - 1;\n        while (i < j) {\n            char t = str[i];\n            str[i] = str[j];\n            str[j] = t;\n            i++;\n            j--;\n        }\n\n        // Forming a string by repeating the characters based on the sum of digits\n        for (j = 0; j < sum; j++) s[j] = str[j % d];\n\n        i = 0;\n        j = sum - 1;\n\n        // Checking if the string formed is a pallan string by comparing characters from\n        // both ends\n        while (i < j) {\n            if (s[i] != s[j]) {\n                flag = true;\n                break;\n            }\n            i++;\n            j--;\n        }\n\n        return !flag;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def pallan(self, n):\n        i, sum_, d = 0, 0, 0\n        str_ = []  # List to store individual digits of the number\n        s = []\n        # List to store the characters formed by adding the individual digits\n\n        while n > 0:\n            r = n % 10\n            n = n // 10\n            str_.append(chr(ord('a') + r))\n            # Converting digits to characters and adding them to the list\n            sum_ += r\n            # Calculating the sum of all digits\n            d += 1\n\n        # Swapping characters to reverse the order of the list\n        str_.reverse()\n\n        # Forming a string by repeating the characters based on the sum of digits\n        for j in range(sum_):\n            s.append(str_[j % d])\n\n        # Checking if the string formed is a pallan string by comparing characters from both ends\n        i, j = 0, sum_ - 1\n        while i < j:\n            if s[i] != s[j]:\n                return False\n            i += 1\n            j -= 1\n\n        return True\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    pallan(n) {\n        let i = 0, sum = 0, d = 0;\n        let str = []; // Array to store individual digits of the number\n        let s = [];\n        // Array to store the characters formed by adding the individual digits\n\n        while (n > 0) {\n            let r = n % 10;\n            n = Math.floor(n / 10);\n            str[i++] = String.fromCharCode('a'.charCodeAt(0) + r);\n            // Converting digits to characters and adding them to the array\n            sum += r;\n            // Calculating the sum of all digits\n            d++;\n        }\n\n        // Swapping characters to reverse the order of the array\n        str = str.reverse();\n\n        // Forming a string by repeating the characters based on the sum of digits\n        for (let j = 0; j < sum; j++) {\n            s[j] = str[j % d];\n        }\n\n        // Checking if the string formed is a pallan string by comparing characters from\n        // both ends\n        i = 0;\n        let j = sum - 1;\n        while (i < j) {\n            if (s[i] !== s[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n\n        return true;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}