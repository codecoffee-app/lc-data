{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704212,
            "title": "Palindromic  Strings",
            "titleSlug": "palindromic-strings2555",
            "content": "<p><span style=\"font-size: 18px;\">Given string <strong>s</strong> and an integer&nbsp;</span><strong style=\"font-size: 18px;\">k</strong><span style=\"font-size: 18px;\"> </span><span style=\"font-size: 18px;\">, you have to transform </span><strong style=\"font-size: 18px;\">s</strong><span style=\"font-size: 18px;\"> into a </span><strong style=\"font-size: 18px;\">palindrome</strong><span style=\"font-size: 18px;\">. In order to achieve that you have to perform exactly </span><strong style=\"font-size: 18px;\">k</strong><span style=\"font-size: 18px;\"> insertions of characters(you cannot perform anymore or less number of insertions). The task is to check if the string can be converted to a palindrome by making exactly </span><strong style=\"font-size: 18px;\">k</strong><span style=\"font-size: 18px;\"> insertions.&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note:</span></strong><span style=\"font-size: 18px;\"> The characters consist only of lower case latin letters.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = \"abac\", k = 2\n<strong>Output:</strong> 1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation</strong>: \"abac\" can be transformed to \n\"cabbac\" (which is palindrome) adding \ntwo characters c and b.</span></pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: s = \"abcde\", k = 3\n<strong>Output:</strong> 0</span>\n<span style=\"font-size: 18px;\"><strong>Explanation</strong>: \"abcde\" cannot be transformed\nto palindrome using 3 insertions.</span></pre>\n<div><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong><code>isPossiblePalindrome</code>()&nbsp;</strong>which takes <strong>s</strong> and <strong>k </strong>as input parameters and returns a boolean value<br /><br /><strong>Expected Time Complexity:</strong> O(<strong>|s|<sup>2</sup></strong>)<br /><strong>Expected Auxiliary Space:</strong> O(<strong>|s|</strong>)<br /><br /><strong>Constraints:</strong><br />1 &le; <strong>|s|</strong> &le; 10<sup>3<br /><strong>&nbsp;</strong></sup>0</span><span style=\"font-size: 18px;\">&le; k</span><span style=\"font-size: 18px;\">&le;&nbsp;</span><strong style=\"font-size: 18px;\">|s|</strong></div>\n<div><strong style=\"vertical-align: super; font-size: 18px;\">s</strong><span style=\"vertical-align: super; font-size: 18px;\"> contains lowercase English alphabets</span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of lowercase English letters and an integer `k`, determine if it's possible to transform `s` into a palindrome by performing exactly `k` insertions of characters. You are not allowed to perform more or less than `k` insertions.",
                "constraints": [
                    "1 <= |s| <= 10^3",
                    "0 <= k <= |s|",
                    "s contains lowercase English alphabets"
                ],
                "testcases": [
                    {
                        "input": "s = \"abac\", k = 2",
                        "output": "1",
                        "explanation": "The string \"abac\" can be transformed into the palindrome \"cabbac\" by inserting the characters 'c' and 'b'.  Therefore, two insertions are sufficient."
                    },
                    {
                        "input": "s = \"abcde\", k = 3",
                        "output": "0",
                        "explanation": "It is not possible to transform \"abcde\" into a palindrome using exactly 3 insertions."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. FInd LCS of s and reverse s</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n\n  private:\n    // Function to calculate the length of the Longest Common Subsequence (LCS)\n    // between two strings X and Y.\n    int lcs(const string& X, const string& Y) {\n        int m = X.length();\n        int n = Y.length();\n\n        // Create a 1D vector to store the lengths of LCS for the current and previous\n        // row\n        vector<int> dp(n + 1, 0);\n        vector<int> prev_dp(n + 1, 0);\n\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (X[i - 1] == Y[j - 1])\n                    dp[j] = 1 + prev_dp[j - 1];\n                else\n                    dp[j] = max(dp[j - 1], prev_dp[j]);\n            }\n            // Copy current row to previous row for next iteration\n            prev_dp = dp;\n        }\n\n        // The length of LCS is stored in dp[n]\n        return dp[n];\n    }\n\n  public:\n    // Function to check if it is possible to make the given string a\n    // palindrome by changing at most K characters.\n    int isPossiblePalindrome(string str, int K) {\n        // Creating a reverse string of the given string.\n        string rev_str = str;\n        reverse(rev_str.begin(), rev_str.end());\n\n        // Calculating the length of the LCS between the given string and its reverse.\n        int lcs_len = lcs(str, rev_str);\n\n        int n = str.size();\n\n        // If K is less than the difference between the length of the string\n        // and the length of the LCS, it is not possible to make it a palindrome.\n        if (K < (n - lcs_len))\n            return 0;\n\n        // Otherwise, it is possible to make it a palindrome by changing at most K\n        // characters.\n        return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to calculate the length of the Longest Common Subsequence (LCS)\n    // between two strings X and Y.\n    lcs(X, Y) {\n        const m = X.length;\n        const n = Y.length;\n\n        // Create a 1D array to store the lengths of LCS for the current and previous\n        // row\n        let dp = new Array(n + 1).fill(0);\n        let prev_dp = new Array(n + 1).fill(0);\n\n        for (let i = 1; i <= m; i++) {\n            for (let j = 1; j <= n; j++) {\n                if (X[i - 1] === Y[j - 1])\n                    dp[j] = 1 + prev_dp[j - 1];\n                else\n                    dp[j] = Math.max(dp[j - 1], prev_dp[j]);\n            }\n            // Copy current row to previous row for next iteration\n            prev_dp = dp.slice();\n        }\n\n        // The length of LCS is stored in dp[n]\n        return dp[n];\n    }\n\n    isPossiblePalindrome(str, K) {\n        // Creating a reverse string of the given string.\n        const rev_str = str.split('').reverse().join('');\n\n        // Calculating the length of the LCS between the given string and its reverse.\n        const lcs_len = this.lcs(str, rev_str);\n\n        const n = str.length;\n\n        // If K is less than the difference between the length of the string\n        // and the length of the LCS, it is not possible to make it a palindrome.\n        if (K < (n - lcs_len)) return 0;\n\n        // Otherwise, it is possible to make it a palindrome by changing at most K\n        // characters.\n        return 1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}