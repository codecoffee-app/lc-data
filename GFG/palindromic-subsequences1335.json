{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703230,
            "title": "Palindromic Subsequences",
            "titleSlug": "palindromic-subsequences1335",
            "content": "<p><span style=\"font-size: 20px;\">Given a Binary String S (the string that contains only 0's and 1's). Find the minimum number of palindromic subsequences that are needed to be removed such that string S becomes empty.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>N = 5, S = \"10001\"\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: We can remove whole S, as\nS is already a palindrome.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:&nbsp;</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: N = 8, S = \"10001001\"\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: First we'll remove sub-\nsequence&nbsp;\"111\" and then \"00000\".</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>MinRemove()</strong>&nbsp;which takes the length of string and the string<strong>&nbsp;</strong>as inputs and returns the answer.<br /><br /><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)<br /><br /><strong>Constraints:</strong><br />1 &le; N&nbsp;&le; 10<sup>8</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string `S` (containing only '0's and '1's), determine the minimum number of palindromic subsequences that need to be removed to make the string `S` empty.",
                "constraints": [
                    "1 <= N <= 10^8, where N is the length of the string S."
                ],
                "testcases": [
                    {
                        "input": "N = 5, S = \"10001\"",
                        "output": "1",
                        "explanation": "The entire string \"10001\" is a palindrome itself. Therefore, it can be removed in a single operation."
                    },
                    {
                        "input": "N = 8, S = \"10001001\"",
                        "output": "2",
                        "explanation": "In the first step, we can remove the subsequence \"111\" leaving \"000100\". In the second step, we can remove the remaining subsequence \"000100\" after removing \"111\""
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The answer is 1 or 2, One is the palindromic case and another is normal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "palindrome",
                "slug": "palindrome"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Function to check if a string is a palindrome.\nbool ispalin(string s){\n    //iterating over the string from the start and end simultaneously.\n    for(int i = 0; i < s.length() / 2; i++){\n        //checking if the characters at the current indices are equal.\n        if(s[i] != s[s.length() - i - 1])\n            //returning false if characters are not equal, not a palindrome.\n            return false;\n    }\n    //returning true if string is a palindrome.\n    return true;\n}\n\n//Function to find the minimum number of characters to be removed.\nint MinRemove(int n, string s){\n    //if the given string is already a palindrome, return 1.\n    if(ispalin(s))\n        return 1;\n    //otherwise, return 2 as it will require at least 2 characters to be removed.\n    return 2;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    #Function to check if removing minimum characters can make the string palindrome.\n    def MinRemove(self, n, s): \n        for i in range(n):\n            #Checking if characters from both ends of the string are equal.\n            if s[i] != s[n-i-1]:\n                #If not equal, then return 2 as it is not possible to make the string palindrome by removing minimum characters.\n                return 2\n        #If all characters are equal, then return 1 as it is already a palindrome.\n        return 1",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    // Complete this function\n    // Function to remove the minimum number of characters so that two strings become an anagram.\n    public int MinRemove(int n, string s)\n    {\n        // If the given string is already a palindrome, return 1.\n        if (IsPalindrome(s))\n            return 1;\n        \n        // Otherwise, return 2 as it will require at least 2 characters to be removed.\n        return 2;\n    }\n\n    // Function to check if a string is a palindrome.\n    bool IsPalindrome(string s)\n    {\n        // Convert the string to a character array.\n        char[] chars = s.ToCharArray();\n\n        // Iterating over the array from both ends simultaneously.\n        for (int i = 0, j = chars.Length - 1; i < j; i++, j--)\n        {\n            // checking if the characters at the current indices are equal.\n            if (chars[i] != chars[j])\n                // Returning false if characters are not equal, not a palindrome.\n                return false;\n        }\n\n        // Returning true if string is a palindrome.\n        return true;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    MinRemove(n, s) {\n        for(let i=0; i<n; i++) {\n            if(s[i] !== s[n-i-1]) {\n                return \"2\";\n            }\n        }\n        return \"1\";\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}