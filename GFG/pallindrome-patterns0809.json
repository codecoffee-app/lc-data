{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703707,
            "title": "Pallindrome Patterns",
            "titleSlug": "pallindrome-patterns0809",
            "content": "<p><span style=\"font-size: 20px;\">Given a string <strong>S</strong>,&nbsp;</span><span style=\"font-size: 18px;\">consisting of lowercase Latin characters [a-z].&nbsp;</span><span style=\"font-size: 20px;\"><span style=\"font-size: 18px;\">F</span>ind&nbsp;out all the possible palindromes that can be generated using the letters of the string and print them in&nbsp;lexicographical&nbsp;order.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>S<strong> = </strong>abbab\n<strong>Output:</strong>{ abbba babab }\n<strong>Explanation: </strong>abbba and babab are two\npossible string that are palindrome.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>S<strong> = </strong>abc\n<strong>Output: </strong>{}\n<strong>Explanation:</strong> No permutation is palindromic.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>all_palindromes()</strong> which takes string S as the input parameter and returns a list of strings that are palindrome in lexicographical order.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(2^n)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(2^n)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= Length of string &lt;= 20</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string **S** consisting of lowercase Latin characters [a-z], find all possible palindromes that can be generated using the letters of the string. Return these palindromes in lexicographical order.",
                "constraints": [
                    "1 <= Length of string <= 20"
                ],
                "testcases": [
                    {
                        "input": "abbab",
                        "output": "{ abbba babab }",
                        "explanation": "The palindromes that can be formed using the letters of 'abbab' are 'abbba' and 'babab'."
                    },
                    {
                        "input": "abc",
                        "output": "{}",
                        "explanation": "No permutation of the letters in 'abc' can form a palindrome."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all possible strings which are palindrome.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "palindrome",
                "slug": "palindrome"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n\tprivate:\r\n\t\t// Function to check if given string is a palindrome\r\n\t\tbool is_palindrome(string s)\r\n\t\t{\r\n\t\t\tint n = s.size();\r\n\t\t\tif(n == 0)\r\n\t\t\t\treturn false;\r\n\t\t\tvector<int>hash(26,0);\r\n\t\t\t// Counting the frequency of each character in the string\r\n\t\t\tfor(auto i: s)\r\n\t\t\t\thash[i - 'a']++;\r\n\t\t\tint cnt = 0;\r\n\t\t\t// Counting the number of characters with odd frequency\r\n\t\t\tfor(int i = 0; i < 26; i++)\r\n\t\t\t{\r\n\t\t\t\tif(hash[i] & 1)\r\n\t\t\t\t\tcnt++;\r\n\t\t\t}\r\n\t\t\t// If the length of the string is odd, there should be exactly one character with odd frequency\r\n\t\t\tif(n & 1 and cnt == 1)\r\n\t\t\t\treturn true;\r\n\t\t\t// If the length of the string is even, there should be no character with odd frequency\r\n\t\t\telse if(n % 2 == 0 and cnt == 0)\r\n\t\t\t\treturn true;\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\tpublic:\r\n\t\t// Function to find all possible palindromic strings\r\n\t\tvector<string> all_plaindromes(string s)\r\n\t\t{\r\n\t\t\tvector<string>ans;\r\n\t\t\tint n = s.size();\r\n\t\t\t// If the string is not a palindrome, return empty vector\r\n\t\t\tif(!is_palindrome(s))\r\n\t\t\t\treturn ans;\r\n\t\t\tstring t = \"\";\r\n\t\t\tvector<int>hash(26,0);\r\n\t\t\tchar ch;\r\n\t\t\t// Counting the frequency of each character in the string\r\n\t\t\tfor(auto i: s)\r\n\t\t\t\thash[i - 'a']++;\r\n\t\t\tfor(int i = 0; i < 26; i++)\r\n\t\t\t{\r\n\t\t\t\t// Constructing the front half of the palindromic string\r\n\t\t\t\tif(hash[i] & 1)\r\n\t\t\t\t\tch = char(i + 'a');\r\n\t\t\t\t\tt  += string(hash[i] / 2, char(i + 'a'));\r\n\t\t\t}\r\n\t\t\tdo{\r\n\t\t\t\tstring k = t;\r\n\t\t\t\tstring t1 = k;\r\n\t\t\t\t// If the length of the string is odd, add the middle character\r\n\t\t\t\tif(n & 1)\r\n\t\t\t\t\tk += ch;\r\n\t\t\t\t// Adding the reverse of the front half to get the full palindromic string\r\n\t\t\t\treverse(t1.begin(), t1.end());\r\n\t\t\t\tk += t1;\r\n\t\t\t\tans.push_back(k);\r\n\r\n\t\t\t}while(next_permutation(t.begin(), t.end()));\r\n\t\t\treturn ans;\r\n\t\t}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}