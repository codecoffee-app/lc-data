{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701598,
            "title": "Pangram Checking",
            "titleSlug": "panagram-checking",
            "content": "<p><span style=\"font-size: 18px;\">You are given a string <strong>s</strong>. You need to find if the string is a panagram or not.</span></p>\n<p><span style=\"font-size: 18px;\">A panagram contains all the letters of english alphabet at least once.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">s = \"Thequickbrownfoxjumpsoverthelazydog\"\n<strong>Output: </strong>1</span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">s = \"HeavyDuty\"\n<strong>Output: </strong>0</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |s| &lt;= 10<sup>4&nbsp;</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, determine if it is a pangram. A pangram is a string that contains all the letters of the English alphabet at least once, regardless of case.",
                "constraints": [
                    "1 <= |s| <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "Thequickbrownfoxjumpsoverthelazydog",
                        "output": "1",
                        "explanation": "The input string contains all letters of the English alphabet at least once."
                    },
                    {
                        "input": "HeavyDuty",
                        "output": "0",
                        "explanation": "The input string does not contain all letters of the English alphabet."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Keep a boolean array of 26 characters and whenever you encounter a character between A-Z both uppercase and lowercase, then set the value of corresponsding array index as 1. So for A or a we set arr[0]=1 and so on. At the end, all the indices of array should contain a 1 for a panagram to exist.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    //Back-end complete function Template for C++\n\n    bool isPanagram(string str) {\n\n        bool arr[26] = {false};\n\n        for (int i = 0; i < str.size(); i++) {\n            if (str[i] >= 65 && str[i] <= 92) {\n                arr[str[i] - 'A'] = true;\n            } else\n                arr[str[i] - 'a'] = true;\n        }\n\n        for (int i = 0; i < 26; i++) {\n            if (arr[i] == false) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\n\r\nclass Solution\r\n{\r\n    public static boolean isPanagram(String str)\r\n    {\r\n        boolean charPresent[] = new boolean[26];\r\n        Arrays.fill(charPresent, false);\r\n        for(int i = 0; i < str.length(); i++)\r\n        {\r\n            if(str.charAt(i) >= 65 && str.charAt(i) <= 92)\r\n                charPresent[str.charAt(i)-'A'] = true;\r\n            else\r\n                charPresent[str.charAt(i)-'a'] = true;\r\n        }\r\n        \r\n        //String ans = \"\";\r\n        for(int i = 0; i < 26; i++)\r\n        {\r\n            if(charPresent[i] == false)\r\n                return false;\r\n            \r\n        }\r\n        return true;\r\n        \r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def isPanagram(self,s):\r\n        arr = {}\r\n        for i in range(0, len(s)):\r\n            arr[s[i].lower()]=1\r\n        if(len(arr)==26):\r\n            return 1\r\n        else:\r\n            return 0\r\n\r\n\r\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    isPanagram(str){\n       let arr = new Array(26).fill(false);\n    \n        for(let i = 0; i < str.length; i++){\n            if(str[i] >= 'A' && str[i] <= 'Z'){\n                arr[str[i].charCodeAt() - 'A'.charCodeAt()] = true;\n            }\n            else if(str[i] >= 'a' && str[i] <= 'z'){\n                arr[str[i].charCodeAt() - 'a'.charCodeAt()] = true;\n            }\n        }\n        \n        for(let i = 0; i < 26; i++){\n            if(arr[i] === false){\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}