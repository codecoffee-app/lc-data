{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701314,
            "title": "Panagram Checking",
            "titleSlug": "pangram-checking-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a string&nbsp;<strong>s,</strong>&nbsp;check if it is a \"<strong>Panagram\"</strong>&nbsp;or not. R</span><span style=\"font-size: 18px;\">eturn&nbsp;</span><strong style=\"font-size: 18px;\">true</strong><span style=\"font-size: 18px;\">&nbsp;if the string is a&nbsp;</span><span style=\"font-size: 18px;\">Panagram</span><span style=\"font-size: 18px;\">, else return&nbsp;</span><strong style=\"font-size: 18px;\">false</strong><span style=\"font-size: 18px;\">.</span></p>\n<p><span style=\"font-size: 18px;\">A \"<strong>Panagram\"&nbsp;</strong>is a sentence containing every letter in the English Alphabet either in lowercase or Uppercase.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">s = \"Bawds jog, flick quartz, vex nymph\"\n<strong>Output: </strong>true<strong>\nExplanation: </strong>In the given string, there are all the letters of the English alphabet. Hence, the output is true.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">s = \"sdfs\"\n<strong>Output: </strong>false<strong>\nExplanation: </strong>In the given string, there aren't all the letters present in the English alphabet. Hence, the output is false.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |s| &le; 10<sup>4<br /><span >s consists of lowercase and uppercase letters</span></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s`, determine if it is a pangram. A pangram is a sentence that contains every letter of the English alphabet (a-z, A-Z) at least once. Return `true` if the string is a pangram, and `false` otherwise.",
                "constraints": [
                    "1 <= |s| <= 10^4",
                    "s consists of lowercase and uppercase letters"
                ],
                "testcases": [
                    {
                        "input": "Bawds jog, flick quartz, vex nymph",
                        "output": "true",
                        "explanation": "The input string contains all the letters of the English alphabet, therefore it's a pangram."
                    },
                    {
                        "input": "sdfs",
                        "output": "false",
                        "explanation": "The input string does not contain all the letters of the English alphabet, therefore it's not a pangram."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<pre id=\"posted-message-container\" class=\"zcmsgcnt textL\" dir=\"auto\" style=\"box-sizing: border-box; margin-top: 0px; margin-right: 26px; margin-bottom: 0px; padding: 0.1px 0px 0px; outline: 0px; border: 0px; font-size: 15px; vertical-align: baseline; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; font-family: inherit; text-shadow: none; overflow-wrap: break-word; text-wrap: wrap; color: #222222; letter-spacing: 0.01px;\"><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\">Can we think of using space to track the alphabet?</span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    // Function to check if a string is Pangram or not.\n    bool checkPangram(string& s) {\n        // using a hash table to mark the characters present in the string.\n        vector<bool> mark(26, false);\n        int index;\n\n        // iterating over the string.\n        for (int i = 0; i < s.length(); i++) {\n            // if we get uppercase character, we subtract 'A' from it\n            // to get its index (in terms of 0 to 25).\n            if ('A' <= s[i] && s[i] <= 'Z')\n                index = s[i] - 'A';\n\n            // if we get lowercase character, we subtract 'a' from it\n            // to get its index (in terms of 0 to 25).\n            else if ('a' <= s[i] && s[i] <= 'z')\n                index = s[i] - 'a';\n\n            // marking index of current character as true in hash table.\n            mark[index] = true;\n        }\n\n        // returning false if any letter of alphabet is unmarked.\n        for (int i = 0; i <= 25; i++)\n            if (mark[i] == false)\n                return (false);\n\n        // if all letters of alphabet are present then returning true.\n        return (true);\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Backend complete function template for JAVA\n\nclass Solution {\n    // Function to check if a string is Pangram or not.\n    public static boolean checkPangram(String s) {\n        // using a hash table to mark the characters present in the string.\n        Boolean[] mark = new Boolean[26];\n        for (int i = 0; i < 26; i++) mark[i] = false;\n\n        // iterating over the string.\n        for (int i = 0; i < s.length(); i++) {\n            // marking index of current character as true in hash table.\n\n            // if we get uppercase character, we subtract 'A' from it\n            // to get its index (in terms of 0 to 25).\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n                mark[s.charAt(i) - 'A'] = true;\n\n            // if we get lowercase character, we subtract 'a' from it\n            // to get its index (in terms of 0 to 25).\n            else if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                mark[s.charAt(i) - 'a'] = true;\n        }\n\n        // returning false if any letter of alphabet is unmarked.\n        for (int i = 0; i < 26; i++)\n            if (!mark[i]) return false;\n\n        // if all letters of alphabet are present then returning true.\n        return true;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    #Function to check if a string is Pangram or not.\n    def checkPangram(self, s):\n\n        #using a hash table to mark the characters present in the string.\n        marked = [0 for i in range(26)]\n\n        #iterating over the string.\n        for char in s:\n\n            #marking index of current character as true in hash table.\n\n            #if we get uppercase character, we subtract 'A' from it\n            #to get its index (in terms of 0 to 25).\n            if (ord(char) <= ord('Z') and ord(char) >= ord('A')):\n                marked[ord(char) - ord('A')] = 1\n\n            #if we get lowercase character, we subtract 'a' from it\n            #to get its index (in terms of 0 to 25).\n            elif (ord(char) <= ord('z') and ord(char) >= ord('a')):\n                marked[ord(char) - ord('a')] = 1\n\n        #returning false if any letter of alphabet is unmarked.\n        for i in range(26):\n            if (not marked[i]):\n                return False\n\n        #if all letters of alphabet are present then returning true.\n        return True\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution {\n    // Function to check if a string is Pangram or not.\n    public bool checkPangram(string s) {\n        bool[] mark = new bool[26];\n        int index = 0; // Assigning a default value to index\n\n        // iterating over the string.\n        for (int i = 0; i < s.Length; i++) {\n            // if we get uppercase character, we subtract 'A' from it\n            // to get its index (in terms of 0 to 25).\n            if ('A' <= s[i] && s[i] <= 'Z') index = s[i] - 'A';\n\n            // if we get lowercase character, we subtract 'a' from it\n            // to get its index (in terms of 0 to 25).\n            else if ('a' <= s[i] && s[i] <= 'z')\n                index = s[i] - 'a';\n\n            // marking index of current character as true in hash table.\n            mark[index] = true;\n        }\n\n        // returning false if any letter of alphabet is unmarked.\n        for (int i = 0; i <= 25; i++)\n            if (mark[i] == false) return (false);\n\n        // if all letters of alphabet are present then returning true.\n        return true;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {string} s\n * @returns {boolean}\n */\n\nclass Solution {\n    asc(str) { return str.charCodeAt(0); }\n\n    // Function to check if a string is Pangram or not.\n    checkPangram(s) {\n        // using a hash table to mark the characters present in the string.\n        let mark = new Array(26);\n        mark.fill(false);\n\n        let index;\n\n        // iterating over the string.\n        for (let i = 0; i < s.length; i++) {\n            // if we get uppercase character, we subtract 'A' from it\n            // to get its index (in terms of 0 to 25).\n            if (this.asc('A') <= this.asc(s[i]) && this.asc(s[i]) <= this.asc('Z'))\n                index = this.asc(s[i]) - this.asc('A');\n\n            // if we get lowercase character, we subtract 'a' from it\n            // to get its index (in terms of 0 to 25).\n            if (this.asc('a') <= this.asc(s[i]) && this.asc(s[i]) <= this.asc('z'))\n                index = this.asc(s[i]) - this.asc('a');\n\n            // marking index of current character as true in hash table.\n            mark[index] = true;\n        }\n\n        // returning false if any letter of alphabet is unmarked.\n        for (let i = 0; i <= 25; i++)\n            if (mark[i] == false) return false;\n\n        // if all letters of alphabet are present then returning true.\n        return true;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}