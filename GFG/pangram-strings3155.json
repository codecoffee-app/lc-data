{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703478,
            "title": "Pangram Strings",
            "titleSlug": "pangram-strings3155",
            "content": "<p><span style=\"font-size:18px\">Check if the given string <strong>S </strong>is a <strong>Panagram </strong>or not. A pangram is a sentence containing every letter in the English Alphabet.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;Pack mY box witH fIve dozen \n\\t\\tliquor jugs&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> Given string contains all \nEnglish Alphabets. </span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;geeksFORgeeks&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Given string does not contain \nall English Alphabets. </span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>isPanagram()</strong>&nbsp;which takes the string<strong>&nbsp;</strong>as inputs and returns 1 if the given string is panagram, otherwise 0.<br />\n<br />\n<strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(constant)<br />\n<br />\n<strong>Constraints:</strong><br />\n1 &le; |S| &le; 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Determine if the given string **S** is a pangram. A pangram is a sentence that contains every letter of the English alphabet at least once.",
                "constraints": [
                    "1 \u2264 |S| \u2264 10^5"
                ],
                "testcases": [
                    {
                        "input": "Pack mY box witH fIve dozen \t\tliquor jugs",
                        "output": "1",
                        "explanation": "The input string contains all 26 letters of the English alphabet (case-insensitive)."
                    },
                    {
                        "input": "geeksFORgeeks",
                        "output": "0",
                        "explanation": "The input string does not contain all 26 letters of the English alphabet."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>1. Traverse the string and store the visited alphabets</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "snapdeal"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{\npublic:\n\tint isPanagram(string S)\n\t{\n\t    // Create a hash table to mark the characters\n\t    // present in the string\n\t    vector<bool> mark(26, false);\n\n\t    // For indexing in mark[]\n\t    int index;\n\n\t    // Traverse all characters\n\t    for (int i=0; i<S.size(); i++)\n\t    {\n\t        // If uppercase character, subtract 'A'\n\t        // to find index.\n\t        if ('A' <= S[i] && S[i] <= 'Z')\n\t            index = S[i] - 'A';\n\n\t        // If lowercase character, subtract 'a'\n\t        // to find index.\n\t        else if('a' <= S[i] && S[i] <= 'z')\n\t            index = S[i] - 'a';\n\n\t        // Mark current character\n\t        mark[index] = true;\n\t    }\n\n\t    // Return false if any character is unmarked\n\t    for (int i=0; i<=25; i++)\n\t        if (mark[i] == false)\n\t            return 0;\n\n\t    // If all characters were present\n\t    return 1;\n\t}\n\n\n   \n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {string} s\n * @returns {number}\n*/\n\nclass Solution{\n    isPanagram(s){\n        // Create a hash table to mark the characters\n\t    // present in the string\n\t    let mark = new Array(26).fill(false);\n\n\t    // For indexing in mark[]\n    \tlet index;\n\n\t    // Traverse all characters\n\t    for (let i=0; i<s.length; i++)\n\t    {\n\t        // If uppercase character, subtract 'A'\n\t        // to find index.\n\t        if ('A' <= s[i] && s[i] <= 'Z')\n\t            index = s[i].charCodeAt(0) - 'A'.charCodeAt(0);\n\t        // If lowercase character, subtract 'a'\n\t        // to find index.\n\t        else if('a' <= s[i] && s[i] <= 'z')\n\t            index = s[i].charCodeAt(0) - 'a'.charCodeAt(0);\n\n\t        // Mark current character\n\t        mark[index] = true;\n\t    }\n\n\t    // Return false if any character is unmarked\n\t    for (let i=0; i<=25; i++)\n\t        if (mark[i] === false)\n\t            return 0;\n\n\t    // If all characters were present\n\t    return 1;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}