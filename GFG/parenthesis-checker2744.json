{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701331,
            "title": "Parenthesis Checker",
            "titleSlug": "parenthesis-checker2744",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>s</strong>, composed of different combinations of '(' , ')', '{', '}', '[', ']', verify the validity of the arrangement.<br /></span><span style=\"font-size: 18px;\">An input string is valid if:</span></p>\n<p><span style=\"font-size: 18px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1. Open brackets must be closed by the same type of brackets.<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2. Open brackets must be closed in the correct order.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"[{()}]\"\n<strong>Output:</strong> true\n<strong>Explanation: </strong>All the brackets are well-formed.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>s = \"[()()]{}\"\n<strong>Output:</strong> true\n<strong>Explanation: </strong>All the brackets are well-formed.<br /></span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><span style=\"font-size: 18px;\"> s = \"([]\"<br /><strong>Output: </strong>False<br /><strong>Explanation: </strong>The expression is not balanced as there is a missing ')' at the end.<br /></span></pre>\n<pre><strong><span style=\"font-size: 18px;\">Input:</span></strong><span style=\"font-size: 18px;\"> s = \"([{]})\"<br /><strong>Output: </strong>False<br /><strong>Explanation: </strong>The expression is not balanced as there is a closing ']' before the closing '}'.<br /></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; s.size() &le; 10<sup>6<br /></sup>s[i] &isin; {'{', '}', '(', ')', '[', ']'}</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` containing only the characters '(', ')', '{', '}', '[', ']', determine if the input string is valid. A string is considered valid if:\n\n1.  Each open bracket must be closed by the same type of bracket.\n2.  Open brackets must be closed in the correct order.",
                "constraints": [
                    "1 <= s.size() <= 10^6",
                    "s[i] \u2208 {'{', '}', '(', ')', '[', ']'}"
                ],
                "testcases": [
                    {
                        "input": "[{()}]",
                        "output": "true",
                        "explanation": "The brackets are correctly nested and balanced."
                    },
                    {
                        "input": "[()()]{}",
                        "output": "true",
                        "explanation": "The brackets are correctly nested and balanced."
                    },
                    {
                        "input": "([]",
                        "output": "false",
                        "explanation": "The string is unbalanced as there is a missing closing parenthesis ')'."
                    },
                    {
                        "input": "([{]})",
                        "output": "false",
                        "explanation": "The string is unbalanced as the closing ']' appears before the closing '}'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use a stack to push opening brackets and pop when a matching closing bracket is encountered; return false if there is a mismatch or unbalanced stack at the end.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "snapdeal",
            "oracle",
            "walmart",
            "adobe",
            "google",
            "yatra.com"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool isBalanced(string& s) {\n\n        // Declare a stack to store the opening brackets\n        stack<char> st;\n        for (int i = 0; i < s.length(); i++) {\n\n            // Check if the character is an opening bracket\n            if (s[i] == '(' || s[i] == '{' || s[i] == '[') {\n                st.push(s[i]);\n            }\n\n            else {\n\n                // If it's a closing bracket, check if the stack is non-empty\n                // and if the top of the stack is a matching opening bracket\n                if (!st.empty() && ((st.top() == '(' && s[i] == ')') ||\n                                    (st.top() == '{' && s[i] == '}') ||\n                                    (st.top() == '[' && s[i] == ']'))) {\n\n                    // Pop the matching opening bracket\n                    st.pop();\n                } else {\n\n                    // Unmatched closing bracket\n                    return false;\n                }\n            }\n        }\n\n        // If stack is empty, return true (balanced), otherwise false\n        return st.empty();\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static boolean isBalanced(String s) {\n\n        // Declare a stack to store the opening brackets\n        Stack<Character> st = new Stack<>();\n        for (int i = 0; i < s.length(); i++) {\n\n            // Check if the character is an opening bracket\n            if (s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '[') {\n                st.push(s.charAt(i));\n            } else {\n\n                // If it's a closing bracket, check if the stack is non-empty\n                // and if the top of the stack is a matching opening bracket\n                if (!st.empty() && ((st.peek() == '(' && s.charAt(i) == ')') ||\n                                    (st.peek() == '{' && s.charAt(i) == '}') ||\n                                    (st.peek() == '[' && s.charAt(i) == ']'))) {\n                    st.pop();\n                } else {\n\n                    // Unmatched closing bracket\n                    return false;\n                }\n            }\n        }\n\n        // If stack is empty, return true (balanced),\n        // otherwise false\n        return st.empty();\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def isBalanced(self, s):\n\n        # Declare a stack to store the opening brackets\n        st = []\n        for i in range(len(s)):\n\n            # Check if the character is an opening bracket\n            if s[i] == '(' or s[i] == '{' or s[i] == '[':\n                st.append(s[i])\n\n            else:\n                # If it's a closing bracket, check if the stack is non-empty\n                # and if the top of the stack is a matching opening bracket\n                if st and ((st[-1] == '(' and s[i] == ')') or\n                           (st[-1] == '{' and s[i] == '}') or\n                           (st[-1] == '[' and s[i] == ']')):\n\n                    # Pop the matching opening bracket\n                    st.pop()\n                else:\n                    # Unmatched closing bracket\n                    return False\n\n        # If stack is empty, return True (balanced), otherwise False\n        return not st\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public bool isBalanced(string s) {\n\n        // Declare a stack to store the opening brackets\n        Stack<char> st = new Stack<char>();\n        for (int i = 0; i < s.Length; i++) {\n\n            // Check if the character is an opening bracket\n            if (s[i] == '(' || s[i] == '{' || s[i] == '[') {\n                st.Push(s[i]);\n            } else {\n\n                // If it's a closing bracket, check if the stack is non-empty\n                // and if the top of the stack is a matching opening bracket\n                if (st.Count > 0 && ((st.Peek() == '(' && s[i] == ')') ||\n                                     (st.Peek() == '{' && s[i] == '}') ||\n                                     (st.Peek() == '[' && s[i] == ']'))) {\n                    st.Pop();\n                } else {\n\n                    // Unmatched closing bracket\n                    return false;\n                }\n            }\n        }\n\n        // If stack is empty, return true (balanced),\n        // otherwise false\n        return st.Count == 0;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {string} s\n * @returns {boolean}\n */\nclass Solution {\n    isBalanced(s) {\n\n        // Declare a stack to store the opening brackets\n        let st = [];\n        for (let i = 0; i < s.length; i++) {\n\n            // Check if the character is an opening bracket\n            if (s[i] === '(' || s[i] === '{' || s[i] === '[') {\n                st.push(s[i]);\n            } else {\n\n                // If it's a closing bracket, check if the stack is non-empty\n                // and if the top of the stack is a matching opening bracket\n                if (st.length > 0 && ((st[st.length - 1] === '(' && s[i] === ')') ||\n                                      (st[st.length - 1] === '{' && s[i] === '}') ||\n                                      (st[st.length - 1] === '[' && s[i] === ']'))) {\n\n                    // Pop the matching opening bracket\n                    st.pop();\n                } else {\n\n                    // Unmatched closing bracket\n                    return false;\n                }\n            }\n        }\n\n        // If stack is empty, return true (balanced), otherwise false\n        return st.length === 0;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}