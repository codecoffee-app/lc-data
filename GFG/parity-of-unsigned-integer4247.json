{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703921,
            "title": "Parity of unsigned integer",
            "titleSlug": "parity-of-unsigned-integer4247",
            "content": "<p><span style=\"font-size:18px\">Given an integer <strong>N</strong>, find it&#39;s parity.&nbsp;<br />\nParity of a number refers to the number of 1&nbsp;bits&nbsp;it contains.&nbsp;The number has &ldquo;odd parity&rdquo;, if it contains odd number of 1-bits and is &ldquo;even parity&rdquo; if it contains even number of 1-bits.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<strong>N = </strong><span style=\"font-size:18px\">13\n</span><strong><span style=\"font-size:18px\">Output:</span> </strong><span style=\"font-size:18px\">odd</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">(13)<sub>10</sub> = (1101)<sub>2</sub>  The binary representation\nhas three 1-bits. So, it&#39;s parity is odd.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<strong>N = </strong><span style=\"font-size:18px\">9\n</span><strong><span style=\"font-size:18px\">Output:</span> </strong><span style=\"font-size:18px\">even</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">(9)<sub>10</sub> = (1001)<sub>2</sub>  The binary representation\nhas two 1-bits. So, it&#39;s parity is even.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>computeParity()</strong> which takes an Integer N as input parameter and returns string &quot;odd&quot; or &quot;even&quot;.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log(N))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, determine its parity. Parity refers to whether the count of '1' bits in the binary representation of N is even or odd. If the number of '1' bits is odd, the parity is 'odd'; otherwise, it's 'even'.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "13",
                        "output": "odd",
                        "explanation": "The binary representation of 13 is 1101, which contains three '1' bits.  Since 3 is odd, the parity is odd."
                    },
                    {
                        "input": "9",
                        "output": "even",
                        "explanation": "The binary representation of 9 is 1001, which contains two '1' bits. Since 2 is even, the parity is even."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Count number of 1-bits of the Integer. If the count is odd, then the parity is odd, else parity is even.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string computeParity(int N) {\n        \n        int parity = 0;    // Initializing parity as 0\n        \n        while (N)\n    \t{\n    \t\tparity^=1;    // parity chnages to 1 if origially it's 0 and vice-versa\n    \t\tN = N & (N - 1);\n    \t}\t \n    \t\n    \t// Return odd if parity is 1, else return even\n    \tif(parity==1)\n    \t    return \"odd\";\n    \telse\n    \t    return \"even\";\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static String computeParity(int N) {\n        \n        int parity = 0;    // Initializing parity as 0\n        \n        while (N!=0)\n    \t{\n    \t\tparity^=1;    // parity chnages to 1 if origially it's 0 and vice-versa\n    \t\tN = N & (N - 1);\n    \t}\t \n    \t\n    \t// Return odd if parity is 1, else return even\n    \tif(parity==1)\n    \t    return \"odd\";\n    \telse\n    \t    return \"even\";\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def computeParity(self, N):\n    \n        parity = 0    # Initializing parity as 0\n        \n        while N:\n            parity^=1    # parity chnages to 1 if origially it's 0 and vice-versa\n            N = N & (N - 1)\n        \n        # Return odd if parity is 1, else return even\n        if parity==1:\n            return \"odd\"\n        else:\n            return \"even\"",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\nclass Solution {\n    computeParity(N) {\n        let cnt = 0; // Initialize a variable to count the number of set bits.\n        while (N) {\n            cnt ^= 1; // Toggle the count bit every time a set bit is encountered.\n            N = N & (N - 1); // Clear the rightmost set bit.\n        }\n\n        return cnt ? \"odd\" : \"even\"; // Return \"odd\" if the count is non-zero, else return \"even\".\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}