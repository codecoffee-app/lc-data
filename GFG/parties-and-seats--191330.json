{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881444,
            "title": "Parties and seats",
            "titleSlug": "parties-and-seats--191330",
            "content": "<p dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\">Given two arrays, one is array of political parties namely - </span><strong>party</strong><span style=\"background-color: transparent; font-family: arial;\">, and their corresponding array of seats received -&nbsp;</span><strong>seats</strong><span style=\"background-color: transparent; font-family: arial;\">. You have to print the<strong>&nbsp;political parties in lexicographical sorted order&nbsp;</strong>along with their seats.</span></span></p>\n<p dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>Examples:</strong></span></span></span></span></p>\n<pre dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>Input:</strong></span><br />A B C D E F G<br />90 150 33 23 17 500 2</span><br style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium;\" /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium;\"><span style=\"font-size: 18px;\">Output:</span></strong><br style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium;\" /><span style=\"font-size: 18px;\">A 90<br />B 150<br />C 33<br />D 23<br />E 17<br />F 500<br />G 2<br />500<br /><strong style=\"font-size: medium; white-space: normal;\"><span style=\"font-size: 18px;\">Explanation:&nbsp;</span></strong><span style=\"font-size: 18px;\">We print parties and their respective seats in lexiographically sorted order. At the end we print the maximum seats.</span></span></span></span></pre>\n<p><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>Constraints:</strong><br />1 &lt;= party.size(),seats.size() &lt;= 26<br />1 &lt;= seats[i] &lt;= 543</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `party` and `seats`, where `party` is an array of political party names and `seats` is a corresponding array of the number of seats each party received. Your task is to print the political parties and their respective seat counts, sorted in lexicographical order by party name. Finally, print the maximum number of seats received by any party.",
                "constraints": [
                    "1 <= party.size(), seats.size() <= 26",
                    "1 <= seats[i] <= 543"
                ],
                "testcases": [
                    {
                        "input": "A B C D E F G\n90 150 33 23 17 500 2",
                        "output": "A 90\nB 150\nC 33\nD 23\nE 17\nF 500\nG 2\n500",
                        "explanation": "The political parties and their corresponding seats are printed in lexicographical order (A to G). The maximum number of seats is 500 which is printed at the end."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use map/TreeMap.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nvoid Election2019(vector<char>& party, vector<int>& seats) {\n    int n = party.size();\n    // creating a map to store party and its corresponding number of seats\n    map<char, int> elec;\n\n    // iterating over the array and storing party and its seats in the map\n    for (int i = 0; i < n; i++) {\n        elec[party[i]] = seats[i];\n    }\n\n    // iterating over the map and printing party and its seats\n    for (auto itr : elec)\n        cout << itr.first << \" \" << itr.second << endl;\n\n    // finding the party with maximum seats\n    int maxVote = -1;\n    for (auto itr : elec) {\n        if (maxVote < itr.second)\n            maxVote = itr.second;\n    }\n\n    cout << maxVote << endl;\n}",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}