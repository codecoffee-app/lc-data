{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700912,
            "title": "Parties and seats",
            "titleSlug": "parties-and-seats",
            "content": "<p dir=\"ltr\"><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\">Given two arrays, one is array of political parties namely - &nbsp;</span><strong>party</strong><span style=\"background-color: transparent; font-family: arial;\">, and their corresponding array of seats received - </span><strong>seats</strong><span style=\"background-color: transparent; font-family: arial;\">. You have to print the<strong> political parties in lexicographical sorted order </strong>along with their seats, and<strong> highest seats received by the party.</strong></span></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Input Format:</strong><br />The first line of input contains <strong>T</strong> denoting the number of testcases. T testcases follow. Each testcase contains three lines of input. The first line contains number of parties <strong>N</strong>. The second line contains the <strong>names </strong>of the parties. The third line contains the <strong>votes </strong>corresponding to each party.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Output Format:</strong><br />For each testcase, in a new line, print the required answer.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>User Task:</strong><br /><span style=\"background-color: transparent; font-family: arial;\">Your task is to complete the function </span><strong>Election2019(party, seats, n) </strong><span style=\"background-color: transparent; font-family: arial;\">&nbsp;which accepts three arguments and prints the required result.</span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>Constraints:</strong><br />1 &lt;= T&lt;= 100<br />1 &lt;= N &lt;= 26<br />1 &lt;= seats &lt;= 543</span></span></p>\n<p><span style=\"font-size: 18px;\"><span style=\"background-color: transparent; font-family: arial;\"><strong>Examples:</strong><br /><strong>Input:</strong></span><br />1<br />7<br />A B C D E F G<br />90 150 33 23 17 500 2</span><br /><strong><span style=\"font-size: 18px;\">Output:</span></strong><br /><span style=\"font-size: 18px;\">A 90<br />B 150<br />C 33<br />D 23<br />E 17<br />F 500<br />G 2<br />500</span></p>\n<p><strong><span style=\"font-size: 18px;\">Explanation:</span></strong><br /><span style=\"font-size: 18px;\"><strong>Testcase1:</strong><br />We print parties and their respective seats in lexiographically sorted order. At the end we print the maximum seats.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `party` (containing names of political parties) and `seats` (containing the corresponding seats received by each party), print the political parties in lexicographically sorted order along with their seats.  Also, print the highest number of seats received by any party.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 26 (Number of parties)",
                    "1 <= seats <= 543 (Number of seats)"
                ],
                "testcases": [
                    {
                        "input": "1\n7\nA B C D E F G\n90 150 33 23 17 500 2",
                        "output": "A 90\nB 150\nC 33\nD 23\nE 17\nF 500\nG 2\n500",
                        "explanation": "For the given test case, the political parties 'A', 'B', 'C', 'D', 'E', 'F', and 'G' have seats 90, 150, 33, 23, 17, 500, and 2, respectively.  The parties are printed in lexicographical order along with their seats. The highest number of seats received by any party is 500, which is printed at the end."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use map/TreeMap.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Map",
                "slug": "map"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nvoid Election2019(char party[], int seats[], int n)\n{\n    //creating a map to store party and its corresponding number of seats\n    map<char, int> elec;\n    \n    //iterating over the array and storing party and its seats in the map\n    for(int i = 0; i < n; i++)\n    {\n        elec[party[i]] = seats[i];\n    }\n    \n    //iterating over the map and printing party and its seats\n    for(auto itr : elec)\n        cout<<itr.first<<\" \"<<itr.second<<endl;\n   \n    //finding the party with maximum seats\n    int maxVote = -1;  \n    for(auto itr : elec)\n    {\n        if(maxVote < itr.second)\n         maxVote = itr.second;\n    }\n    \n    //printing the number of seats of the party with maximum seats\n    cout<<(maxVote)<<endl;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Geeks\n{\n    public static void Election2019(String party[], int seats[], int n)\n    {\n        // Creating a TreeMap to store party names and corresponding seats\n        TreeMap<String, Integer> elec = new TreeMap<String,Integer>();\n        \n        // Adding party names and seats to the TreeMap\n        for(int i = 0; i < n; i++)\n        {\n            elec.put(party[i], seats[i]);\n        }\n        \n        // Printing the party names and corresponding seats in the TreeMap\n        for(Map.Entry<String, Integer> itr: elec.entrySet())\n          System.out.println(itr.getKey() + \" \"+itr.getValue());\n        \n        // Finding the maximum number of votes by iterating over the TreeMap\n        int maxVote = -1;  \n        for(Map.Entry<String, Integer> itr: elec.entrySet())\n        {\n            if(maxVote < itr.getValue())\n             maxVote = itr.getValue();\n        }\n        \n        // Printing the maximum number of votes\n        System.out.println(maxVote);\n    }\n}",
                "lang_text": "java"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}